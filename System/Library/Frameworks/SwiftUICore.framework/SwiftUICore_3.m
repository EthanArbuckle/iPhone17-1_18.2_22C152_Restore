uint64_t CoreViewRemoveFromSuperview(int a1, void *a2)
{
  if (a1 == 2) {
    return [a2 removeFromSuperlayer];
  }
  else {
    return [a2 removeFromSuperview];
  }
}

void specialized closure #1 in DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, BOOL *a7@<X6>, char *a8@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  char v12 = *(unsigned char *)(a2 + 56);
  char v13 = *(unsigned char *)(a2 + 57);
  unsigned __int8 v14 = *(unsigned char *)(a2 + 105);
  uint64_t v15 = one-time initialization token for infinity;
  id v16 = *(id *)(a2 + 8);
  if (v15 != -1) {
    swift_once();
  }
  v29[0] = v16;
  v29[1] = a1;
  char v30 = v12;
  char v31 = v13;
  double v32 = *(double *)&static Time.infinity;
  unsigned __int8 v33 = v14;
  long long v17 = *(_OWORD *)(a3 + 48);
  v36[2] = *(_OWORD *)(a3 + 32);
  v36[3] = v17;
  uint64_t v37 = *(void *)(a3 + 64);
  long long v18 = *(_OWORD *)(a3 + 16);
  v36[0] = *(_OWORD *)a3;
  v36[1] = v18;
  *(void *)&long long v18 = *(void *)(a3 + 16);
  *(void *)&long long v17 = *(void *)(a3 + 24);
  long long v19 = *(_OWORD *)(a5 + 48);
  v34[2] = *(_OWORD *)(a5 + 32);
  v34[3] = v19;
  uint64_t v35 = *(void *)(a5 + 64);
  long long v20 = *(_OWORD *)(a5 + 16);
  v34[0] = *(_OWORD *)a5;
  v34[1] = v20;
  if (DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)((uint64_t)v29, v36, a4, v34, a6, *(CGFloat *)&v18, *(CGFloat *)&v17, *(double *)(a5 + 16), *(double *)(a5 + 24)))
  {
    unsigned __int8 v21 = v33;
    double v22 = v32;
    BOOL v23 = *(unsigned __int8 *)(a2 + 105) != v33 || *(double *)(a2 + 112) != v32;
    *a7 = v23;
    *(unsigned char *)(a2 + 105) = v21;

    *(double *)(a2 + 112) = v22;
    char v24 = 1;
  }
  else
  {

    char v24 = 0;
  }
  *a8 = v24;
}

uint64_t CoreViewMaskView(int a1, void *a2)
{
  if (a1 == 2) {
    return [a2 mask];
  }
  if (a1) {
    return 0;
  }
  return [a2 maskView];
}

unint64_t type metadata accessor for CABackdropLayer()
{
  unint64_t result = lazy cache variable for type metadata for CABackdropLayer;
  if (!lazy cache variable for type metadata for CABackdropLayer)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CABackdropLayer);
  }
  return result;
}

uint64_t type metadata completion function for VStack()
{
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized static DynamicView.makeDynamicViewList(metadata:view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  id v4 = (id)AGSubgraphGetCurrent();
  if (!v4) {
    __break(1u);
  }
  v5 = v4;
  type metadata accessor for MutableBox<[Unmanaged<DynamicViewList<AnyView>.Item>]>(0, &lazy cache variable for type metadata for MutableBox<[Unmanaged<DynamicViewList<AnyView>.Item>]>, (uint64_t (*)(uint64_t))type metadata accessor for [Unmanaged<DynamicViewList<AnyView>.Item>], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
  *(void *)(swift_allocObject() + 16) = MEMORY[0x263F8EE78];
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewListInputs(a1);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  type metadata accessor for DynamicViewList<AnyView>.Item(0, &lazy cache variable for type metadata for DynamicViewList<AnyView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for DynamicViewList);
  lazy protocol witness table accessor for type DynamicViewList<AnyView> and conformance DynamicViewList<A>((unint64_t *)&lazy protocol witness table cache variable for type DynamicViewList<AnyView> and conformance DynamicViewList<A>, &lazy cache variable for type metadata for DynamicViewList<AnyView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for DynamicViewList);
  int v6 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(_DWORD *)a2 = v6;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 1;
  return result;
}

uint64_t static _TraitWritingModifier._makeViewList(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _TraitWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (void (*)(void, ValueMetadata *, uint64_t))type metadata accessor for _TraitWritingModifier, a7, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>.AddTrait, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4);
}

uint64_t static _TraitWritingModifier._makeViewList(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, void (*a7)(void, ValueMetadata *, uint64_t)@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  unsigned int v14 = *a1;
  long long v15 = *(_OWORD *)(a2 + 48);
  long long v49 = *(_OWORD *)(a2 + 32);
  long long v50 = v15;
  long long v51 = *(_OWORD *)(a2 + 64);
  char v52 = *(unsigned char *)(a2 + 80);
  long long v16 = *(_OWORD *)(a2 + 16);
  long long v47 = *(_OWORD *)a2;
  long long v48 = v16;
  if (a5 != &type metadata for LayoutPriorityTraitKey || (BYTE8(v50) & 0x80) != 0)
  {
    char v31 = a3;
    char v46 = *(unsigned char *)(a2 + 80);
    uint64_t v30 = a4;
    long long v19 = *(_OWORD *)(a2 + 48);
    v43[1] = *(_OWORD *)(a2 + 32);
    long long v44 = v19;
    long long v45 = *(_OWORD *)(a2 + 64);
    long long v20 = *(_OWORD *)(a2 + 16);
    long long v42 = *(_OWORD *)a2;
    v43[0] = v20;
    unint64_t v33 = __PAIR64__(v51, v14);
    double v21 = MEMORY[0x270FA5388](a1);
    uint64_t v29 = a8;
    uint64_t v27 = v22(0, a5, a6, v21);
    uint64_t WitnessTable = swift_getWitnessTable();
    outlined retain of _ViewListInputs((uint64_t)&v47);
    type metadata accessor for Attribute<ViewTraitCollection>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v33, a10, (uint64_t)&v26, v27, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
    LODWORD(v45) = v32;
    _ViewListInputs.addTraitKey<A>(_:)((uint64_t)a5, (uint64_t)a5);
    unint64_t v33 = v42;
    int v34 = DWORD2(v42);
    uint64_t v35 = *(void *)&v43[0];
    long long v36 = *(_OWORD *)((char *)v43 + 8);
    uint64_t v37 = *((void *)&v43[1] + 1);
    long long v38 = v44;
    int v39 = v45;
    uint64_t v40 = *((void *)&v45 + 1);
    char v41 = v46;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v25 = swift_bridgeObjectRetain();
    v31(v25, &v33);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    a7(0, &type metadata for LayoutPriorityTraitKey, a6);
    uint64_t v17 = Attribute.unsafeBitCast<A>(to:)();
    v43[1] = v49;
    long long v44 = v50;
    long long v45 = v51;
    char v46 = v52;
    long long v42 = v47;
    v43[0] = v48;
    a3(v17, (unint64_t *)&v42);
    return specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v17, &v47);
  }
}

uint64_t outlined retain of _ViewListInputs(uint64_t a1)
{
  return a1;
}

void type metadata accessor for Attribute<ViewTraitCollection>()
{
  if (!lazy cache variable for type metadata for Attribute<ViewTraitCollection>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>);
    }
  }
}

uint64_t type metadata accessor for _TraitWritingModifier.AddTrait()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ViewListInputs.addTraitKey<A>(_:)(uint64_t result, uint64_t a2)
{
  if (*(void *)(v2 + 72))
  {
    uint64_t v3 = *(void *)(v2 + 72);
    char v4 = *(unsigned char *)(v2 + 80) & 1;
    uint64_t result = ViewTraitKeys.insert<A>(_:)(result, a2);
    *(void *)(v2 + 72) = v3;
    *(unsigned char *)(v2 + 80) = v4;
  }
  return result;
}

uint64_t ViewTraitKeys.insert<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized Set._Variant.insert(_:)(&v3, a2);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t static Group<A>._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v13 = a2[7];
  int v20 = *((_DWORD *)a2 + 16);
  uint64_t v19 = a2[9];
  char v18 = *((unsigned char *)a2 + 80);
  v32[0] = *a1;
  uint64_t v14 = type metadata accessor for _VariadicView.Tree();
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  _GraphValue.unsafeBitCast<A>(to:)(&v21);
  uint64_t v15 = v21;
  if (AGSubgraphShouldRecordTree()) {
    AGSubgraphBeginTreeElement();
  }
  v32[0] = v15;
  uint64_t v21 = v6;
  int v22 = v7;
  uint64_t v23 = v8;
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  uint64_t v26 = v11;
  uint64_t v27 = v12;
  uint64_t v28 = v13;
  int v29 = v20;
  uint64_t v30 = v19;
  char v31 = v18;
  static _VariadicView.Tree<>._makeViewList(view:inputs:)(v32, (uint64_t)&v21, (uint64_t)&type metadata for GroupContainer, a3, (uint64_t)&protocol witness table for GroupContainer, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v15, v14, WitnessTable);
}

uint64_t type metadata accessor for Group()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _VariadicView.Tree<>._makeViewList(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8 = *a1;
  uint64_t v9 = *(void *)a2;
  int v29 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v28 = *(void *)(a2 + 48);
  uint64_t v27 = *(void *)(a2 + 56);
  int v26 = *(_DWORD *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  char v25 = *(unsigned char *)(a2 + 80);
  uint64_t v15 = *(void *)(a5 + 8);
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
  swift_retain();
  swift_retain();
  uint64_t v30 = v13;
  swift_bridgeObjectRetain();
  uint64_t v31 = v14;
  swift_bridgeObjectRetain();
  uint64_t v17 = v16(a3, v15);
  uint64_t v18 = swift_retain();
  uint64_t v19 = specialized find<A>(_:key:)(v18);
  if (!v19 || (Swift::UInt value = v9, v17 != *(void *)(v19 + 72)))
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(0, &lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = v17;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, v9).value;
  }
  uint64_t v21 = swift_release();
  MEMORY[0x270FA5388](v21);
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _VariadicView.Tree<>._makeView(view:inputs:), a3, v45);
  Swift::UInt v34 = value;
  int v35 = v29;
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  uint64_t v38 = v12;
  uint64_t v39 = v30;
  uint64_t v40 = v28;
  uint64_t v41 = v27;
  int v42 = v26;
  uint64_t v43 = v31;
  char v44 = v25;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a3;
  *(void *)(v22 + 24) = a4;
  *(void *)(v22 + 32) = a5;
  *(void *)(v22 + 40) = a6;
  *(_DWORD *)(v22 + 48) = v8;
  uint64_t v23 = *(void (**)(_DWORD *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v45, &v34, partial apply for closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:), v22, a3, a5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t _GraphValue.unsafeBitCast<A>(to:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = Attribute.unsafeBitCast<A>(to:)();
  *a1 = result;
  return result;
}

uint64_t Attribute.unsafeBitCast<A>(to:)()
{
  return AGGraphCreateOffsetAttribute2();
}

void type metadata accessor for _SetStorage<Int>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _SetStorage();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

double static StaticIf<>._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  void (*v23)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  int v24;
  void (*v25)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double result;
  int v27;
  int ShouldRecordTree;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  void v45[2];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x263EF8340];
  int v15 = *a1;
  int v16 = *((_DWORD *)a2 + 2);
  unsigned int v17 = *((_DWORD *)a2 + 6);
  unsigned int v18 = *((_DWORD *)a2 + 7);
  int v19 = *((_DWORD *)a2 + 9);
  uint64_t v20 = a2[5];
  uint64_t v39 = a2[6];
  uint64_t v31 = *((_DWORD *)a2 + 14);
  int v32 = *((_DWORD *)a2 + 15);
  unint64_t v33 = *((_DWORD *)a2 + 16);
  Swift::UInt v34 = *((_DWORD *)a2 + 17);
  int v35 = *((_DWORD *)a2 + 18);
  uint64_t v36 = *((_DWORD *)a2 + 19);
  uint64_t v37 = *((_DWORD *)a2 + 20);
  uint64_t v38 = *((_DWORD *)a2 + 8);
  uint64_t v41 = a2[2];
  int v42 = *a2;
  v69 = *a2;
  v71 = v41;
  LODWORD(v70) = v16;
  int v29 = v17;
  uint64_t v30 = v19;
  v72 = __PAIR64__(v18, v17);
  v73 = v38;
  v74 = v19;
  uint64_t v40 = v20;
  v75 = v20;
  char v21 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(a6 + 8))(&v69, a3, a6);
  long long v47 = a3;
  long long v48 = a4;
  long long v49 = a5;
  long long v50 = a6;
  long long v51 = a7;
  char v52 = a8;
  if (v21)
  {
    LODWORD(v53) = v15;
    v69 = a3;
    v70 = a4;
    v71 = a5;
    v72 = a6;
    type metadata accessor for StaticIf();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static StaticIf<>._makeView(view:inputs:), a4, &v46);
    int v22 = v46;
    ShouldRecordTree = AGSubgraphShouldRecordTree();
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    v69 = v42;
    v71 = v41;
    LODWORD(v70) = v16;
    v72 = __PAIR64__(v18, v29);
    v74 = v30;
    v75 = v40;
    v76 = v39;
    v77 = v31;
    v78 = v32;
    v79 = v33;
    v80 = v34;
    v81 = v35;
    v82 = v36;
    v83 = v37;
    char v44 = v22;
    uint64_t v53 = v42;
    v54 = v16;
    v55 = v41;
    v56 = v29;
    v57 = v18;
    v58 = 0;
    v59 = v30;
    v60 = v40;
    v61 = v39;
    v62 = v31;
    v63 = v32;
    v64 = v33;
    v65 = v34;
    v66 = v35;
    v67 = v36;
    v68 = v37;
    uint64_t v23 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(a7 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v45, &v44, &v53, a4, a7);
    v73 = v38;
    if (ShouldRecordTree)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v45, (uint64_t)&v69);
      AGSubgraphEndTreeElement();
    }
  }
  else
  {
    LODWORD(v53) = v15;
    v69 = a3;
    v70 = a4;
    v71 = a5;
    v72 = a6;
    type metadata accessor for StaticIf();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static StaticIf<>._makeView(view:inputs:), a5, &v46);
    uint64_t v24 = v46;
    uint64_t v27 = AGSubgraphShouldRecordTree();
    if (v27) {
      AGSubgraphBeginTreeElement();
    }
    v69 = v42;
    v71 = v41;
    LODWORD(v70) = v16;
    v72 = __PAIR64__(v18, v29);
    v74 = v30;
    v75 = v40;
    v76 = v39;
    v77 = v31;
    v78 = v32;
    v79 = v33;
    v80 = v34;
    v81 = v35;
    v82 = v36;
    v83 = v37;
    char v44 = v24;
    uint64_t v53 = v42;
    v54 = v16;
    v55 = v41;
    v56 = v29;
    v57 = v18;
    v58 = 0;
    v59 = v30;
    v60 = v40;
    v61 = v39;
    v62 = v31;
    v63 = v32;
    v64 = v33;
    v65 = v34;
    v66 = v35;
    v67 = v36;
    v68 = v37;
    char v25 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(a8 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v45, &v44, &v53, a5, a8);
    v73 = v38;
    if (v27)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v45, (uint64_t)&v69);
      AGSubgraphEndTreeElement();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = *(double *)&v45[1];
  *(void *)a9 = v45[0];
  *(double *)(a9 + 8) = result;
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance VStack<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static VStack._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

double static VStack._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 6);
  int v25 = *((_DWORD *)a2 + 9);
  int v26 = *((_DWORD *)a2 + 8);
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  int v23 = *((_DWORD *)a2 + 15);
  int v24 = *((_DWORD *)a2 + 14);
  int v21 = *((_DWORD *)a2 + 17);
  int v22 = *((_DWORD *)a2 + 16);
  int v19 = *((_DWORD *)a2 + 19);
  int v20 = *((_DWORD *)a2 + 18);
  int v17 = *((_DWORD *)a2 + 7);
  int v18 = *((_DWORD *)a2 + 20);
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  LODWORD(v51) = v6;
  type metadata accessor for VStack();
  type metadata accessor for _GraphValue();
  uint64_t v13 = type metadata accessor for _VariadicView.Tree();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static VStack._makeView(view:inputs:), v13, &v32);
  int v14 = v32;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v51 = v7;
  uint64_t v53 = v9;
  int v52 = v8;
  int v54 = v10;
  int v55 = v17;
  int v57 = v25;
  uint64_t v58 = v11;
  uint64_t v59 = v12;
  int v60 = v24;
  int v61 = v23;
  int v62 = v22;
  int v63 = v21;
  int v64 = v20;
  int v65 = v19;
  int v66 = v18;
  int v29 = v14;
  uint64_t v35 = v7;
  int v36 = v8;
  uint64_t v37 = v9;
  int v38 = v10;
  int v39 = v17;
  int v40 = 0;
  int v41 = v25;
  uint64_t v42 = v11;
  uint64_t v43 = v12;
  int v44 = v24;
  int v45 = v23;
  int v46 = v22;
  int v47 = v21;
  int v48 = v20;
  int v49 = v19;
  int v50 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView.Tree<>._makeView(view:inputs:)(&v29, (uint64_t)&v35, (uint64_t)&type metadata for _VStackLayout, a3, (uint64_t)&protocol witness table for _VStackLayout, a4, (uint64_t)&v30);
  int v56 = v26;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v30, (uint64_t)&v51);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a5 = v30;
  double result = v31;
  a5[1] = v31;
  return result;
}

uint64_t closure #1 in static VStack._makeView(view:inputs:)(uint64_t a1)
{
  v5[2] = type metadata accessor for VStack();
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v5, v6, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v7;
}

uint64_t type metadata accessor for VStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *(void *)a2;
  int v26 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v25 = *(void *)(a2 + 48);
  uint64_t v22 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 72);
  char v23 = *(unsigned char *)(a2 + 80);
  int v24 = *(_DWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = specialized find<A>(_:key:)(v10);
  if (v16) {
    uint64_t v21 = *(void *)(v16 + 72);
  }
  else {
    uint64_t v21 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v17 = swift_release_n();
  MEMORY[0x270FA5388](v17);
  LODWORD(v27) = a3;
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:), a5, v39);
  uint64_t v18 = v39[0];
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v38 = v18;
  uint64_t v27 = v10;
  int v28 = v26;
  uint64_t v29 = v11;
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v25;
  uint64_t v34 = v21 | v22;
  int v35 = v24;
  uint64_t v36 = v15;
  char v37 = v23;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a7 + 32))(&v38, &v27, a5, a7);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v18, a5, a7);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static _VariadicView.Tree<>._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v39 = a4;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  int v35 = *a1;
  uint64_t v9 = *(void *)a2;
  int v34 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 72);
  int v33 = *(_DWORD *)(a2 + 80);
  uint64_t v18 = *(void *)(a5 + 8);
  int v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
  swift_retain();
  uint64_t v38 = v10;
  swift_retain();
  uint64_t v36 = v13;
  swift_bridgeObjectRetain();
  uint64_t v37 = v14;
  swift_bridgeObjectRetain();
  uint64_t v20 = v19(a3, v18);
  uint64_t v21 = swift_retain();
  uint64_t v22 = specialized find<A>(_:key:)(v21);
  if (!v22 || (Swift::UInt value = v9, v20 != *(void *)(v22 + 72)))
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(0, &lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = v20;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, v9).value;
  }
  uint64_t v24 = swift_release();
  MEMORY[0x270FA5388](v24);
  uint64_t v25 = v39;
  uint64_t v26 = v40;
  v32[2] = a3;
  int v32[3] = v39;
  v32[4] = a5;
  v32[5] = v40;
  int v27 = v35;
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _VariadicView.Tree<>._makeView(view:inputs:), a3, v53);
  v32[7] = v32;
  Swift::UInt v42 = value;
  int v43 = v34;
  uint64_t v44 = v38;
  uint64_t v45 = v11;
  uint64_t v46 = v12;
  uint64_t v47 = v36;
  uint64_t v48 = v37;
  uint64_t v49 = v15;
  uint64_t v50 = v16;
  uint64_t v51 = v17;
  int v52 = v33;
  MEMORY[0x270FA5388](value);
  v30[2] = a3;
  v30[3] = v25;
  v30[4] = a5;
  v30[5] = v26;
  int v31 = v27;
  int v28 = *(void (**)(_DWORD *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(a5 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28(v53, &v42, partial apply for closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:), v30, a3, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _VStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  int v10 = *a1;
  uint64_t v11 = *a2;
  int v12 = *((_DWORD *)a2 + 2);
  uint64_t v13 = a2[2];
  long long v22 = *(_OWORD *)(a2 + 5);
  long long v23 = *(_OWORD *)(a2 + 3);
  long long v21 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v16 = swift_beginAccess();
  uint64_t v17 = static CoreGlue.shared;
  int v33 = v10;
  uint64_t v25 = v11;
  int v26 = v12;
  uint64_t v27 = v13;
  long long v28 = v23;
  long long v29 = v22;
  long long v30 = v21;
  uint64_t v31 = v14;
  int v32 = v15;
  uint64_t v18 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                                    + 0xB0);
  uint64_t v19 = a7(v16);
  id v20 = v17;
  v18(&v33, &v25, a3, a4, a5, v19);
}

uint64_t closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *(void *)a2;
  int v22 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v15 = specialized find<A>(_:key:)(v10);
  if (v15) {
    uint64_t v16 = *(void *)(v15 + 72);
  }
  else {
    uint64_t v16 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t v17 = swift_release_n();
  MEMORY[0x270FA5388](v17);
  LODWORD(v23) = a3;
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:), a5, &v35);
  uint64_t v18 = v35;
  int v19 = *MEMORY[0x263F288F8];
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v34 = v18;
  uint64_t v23 = v10;
  int v24 = v22;
  uint64_t v25 = v11;
  uint64_t v26 = v12;
  uint64_t v27 = v13;
  uint64_t v28 = v14;
  uint64_t v29 = 0;
  uint64_t v30 = v16;
  int v31 = v19;
  uint64_t v32 = MEMORY[0x263F8EE88];
  char v33 = 0;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a7 + 32))(&v34, &v23, a5, a7);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v18, a5, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #1 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static _VariadicView.Tree<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #1 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v12[2] = type metadata accessor for _VariadicView.Tree();
  v12[3] = a2;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a6, (uint64_t)v12, a2, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v12[5];
}

uint64_t closure #1 in closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for _VariadicView.Tree();
  uint64_t v10 = a1 + *(int *)(v9 + 44);
  v14[2] = v9;
  v14[3] = a3;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, a6, (uint64_t)v14, a3, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  return v14[5];
}

uint64_t type metadata accessor for _VariadicView.Tree()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout;
  if (!lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout;
  if (!lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout);
  }
  return result;
}

void protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _VStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TupleView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleView._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), a4);
}

unint64_t lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout;
  if (!lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout;
  if (!lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout);
  }
  return result;
}

void protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _HStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void type metadata accessor for TypedElement<ViewListOptionsInput>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t closure #1 in static ViewModifier.makeImplicitRoot(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 20);
  uint64_t v9 = *a2;
  int v10 = v4;
  uint64_t v11 = v5;
  long long v12 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)(a2 + 5);
  *(_OWORD *)&v13[16] = *(_OWORD *)(a2 + 7);
  int v15 = v6;
  uint64_t v7 = _ViewInputs.implicitRootBodyInputs.getter((uint64_t)&v16);
  uint64_t v9 = v16;
  int v10 = v17;
  uint64_t v11 = v18;
  long long v12 = v19;
  *(void *)uint64_t v13 = v20;
  *(_OWORD *)&v13[8] = v21;
  *(_DWORD *)&v13[24] = v22;
  uint64_t v14 = v23;
  LOBYTE(v15) = v24;
  a3(v7, &v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static View.makeImplicitRoot(view:inputs:)(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  uint64_t v24 = *a2;
  int v25 = v6;
  uint64_t v26 = v7;
  long long v9 = *(_OWORD *)(a2 + 5);
  long long v27 = *(_OWORD *)(a2 + 3);
  long long v28 = v9;
  long long v29 = *(_OWORD *)(a2 + 7);
  uint64_t v30 = a2[9];
  int v31 = v8;
  _ViewInputs.implicitRootBodyInputs.getter((uint64_t)&v32);
  uint64_t v10 = v32;
  int v11 = v33;
  uint64_t v12 = v34;
  long long v20 = v35;
  uint64_t v13 = v36;
  uint64_t v14 = v37;
  uint64_t v19 = v38;
  int v15 = v39;
  uint64_t v16 = v40;
  char v18 = v41;
  if (AGSubgraphShouldRecordTree()) {
    AGSubgraphBeginTreeElement();
  }
  unsigned int v23 = a3;
  uint64_t v24 = v10;
  int v25 = v11;
  uint64_t v26 = v12;
  long long v27 = v20;
  *(void *)&long long v28 = v13;
  *((void *)&v28 + 1) = v14;
  *(void *)&long long v29 = v19;
  DWORD2(v29) = v15;
  uint64_t v30 = v16;
  LOBYTE(v31) = v18;
  (*(void (**)(unsigned int *, uint64_t *, uint64_t, uint64_t))(a5 + 32))(&v23, &v24, a4, a5);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(a3, a4, a5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t _ViewInputs.implicitRootBodyInputs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(_DWORD *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 40);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized find<A>(_:key:)(v3);
  if (v9) {
    unint64_t v10 = *(void *)(v9 + 72);
  }
  else {
    unint64_t v10 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v11 = one-time initialization token for introduced;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = (int *)MEMORY[0x263F288F8];
  unsigned int v13 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  int v14 = *v12;
  swift_beginAccess();
  if (byte_26B0F44FC) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = static Semantics.forced >= v13;
  }
  if (result | (v10 >> 1) & 1) {
    uint64_t v16 = v10;
  }
  else {
    uint64_t v16 = v10 | 2;
  }
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v16;
  *(_DWORD *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = MEMORY[0x263F8EE88];
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <A> A?@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  return static Optional<A>._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t static Optional<A>._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v8 = a2[7];
  int v9 = *((_DWORD *)a2 + 16);
  uint64_t v15 = a2[9];
  char v14 = *((unsigned char *)a2 + 80);
  uint64_t v10 = type metadata accessor for Optional();
  static Optional.makeConditionalMetadata<A>(_:)((uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, &v31);
  unint64_t v11 = v31;
  unint64_t v28 = v31;
  long long v29 = v32;
  uint64_t v30 = v33;
  int v27 = v4;
  int v19 = v6;
  uint64_t v20 = v7;
  long long v21 = *(_OWORD *)(a2 + 3);
  long long v22 = v16;
  uint64_t v23 = v8;
  int v24 = v9;
  uint64_t v25 = v15;
  char v26 = v14;
  uint64_t v18 = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  static DynamicView.makeDynamicViewList(metadata:view:inputs:)((uint64_t)&v28, &v27, (uint64_t)&v18, v10, WitnessTable, a3);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v11);
  return swift_bridgeObjectRelease();
}

uint64_t static Optional.makeConditionalMetadata<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  static ConditionalTypeDescriptor.descriptor(type:constructor:)(v6, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in static Optional.makeConditionalMetadata<A>(_:), a1, a2, &v8);
  return ConditionalMetadata.init(_:)((uint64_t *)&v8, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <A> Group<A>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _LayoutRoot<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static _LayoutRoot._makeView(root:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24));
}

uint64_t static _LayoutRoot._makeView(root:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a2;
  int v12 = *((_DWORD *)a2 + 2);
  uint64_t v13 = a2[2];
  int v14 = *((_DWORD *)a2 + 20);
  LODWORD(v21) = *a1;
  type metadata accessor for _LayoutRoot();
  type metadata accessor for _GraphValue();
  uint64_t v15 = a2[3];
  uint64_t v16 = a2[4];
  long long v19 = *(_OWORD *)(a2 + 7);
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v17 = a2[9];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _LayoutRoot._makeView(root:inputs:body:), a5, v30);
  uint64_t v21 = v11;
  int v22 = v12;
  uint64_t v23 = v13;
  uint64_t v24 = v15;
  uint64_t v25 = v16;
  long long v26 = v20;
  long long v27 = v19;
  uint64_t v28 = v17;
  int v29 = v14;
  return (*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 88))(v30, &v21, a3, a4, a5, a6);
}

uint64_t type metadata accessor for _LayoutRoot()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for static View._makeViewList(view:inputs:) in conformance <> ForEach<A, B, C>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void *specialized _NativeSet.copy()(unint64_t *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for _SetStorage<Int>(0, a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void protocol witness for static Layout._makeLayoutView(root:inputs:body:) in conformance _ZStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = *a1;
  uint64_t v10 = *a2;
  int v11 = *((_DWORD *)a2 + 2);
  uint64_t v12 = a2[2];
  long long v18 = *(_OWORD *)(a2 + 5);
  long long v19 = *(_OWORD *)(a2 + 3);
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v13 = a2[9];
  int v14 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  int v29 = v9;
  uint64_t v21 = v10;
  int v22 = v11;
  uint64_t v23 = v12;
  long long v24 = v19;
  long long v25 = v18;
  long long v26 = v17;
  uint64_t v27 = v13;
  int v28 = v14;
  unint64_t v15 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                                    + 0xB0);
  unint64_t v16 = static CoreGlue.shared;
  v15(&v29, &v21, a3, a4, a5, a6);
}

uint64_t lazy protocol witness table accessor for type DynamicViewList<AnyView> and conformance DynamicViewList<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DynamicViewList<AnyView>.Item(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ShapeView<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

void type metadata accessor for MutableBox<[Unmanaged<DynamicViewList<AnyView>.Item>]>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void static Layout._makeLayoutView(root:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = *a1;
  uint64_t v10 = *a2;
  int v11 = *((_DWORD *)a2 + 2);
  uint64_t v12 = a2[2];
  long long v18 = *(_OWORD *)(a2 + 5);
  long long v19 = *(_OWORD *)(a2 + 3);
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v13 = a2[9];
  int v14 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  int v29 = v9;
  uint64_t v21 = v10;
  int v22 = v11;
  uint64_t v23 = v12;
  long long v24 = v19;
  long long v25 = v18;
  long long v26 = v17;
  uint64_t v27 = v13;
  int v28 = v14;
  unint64_t v15 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                                    + 0xB0);
  unint64_t v16 = static CoreGlue.shared;
  v15(&v29, &v21, a3, a4, a5, a6);
}

{
  static Layout._makeLayoutView(root:inputs:body:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _LayoutRoot<A>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, a2, a3, a4, (uint64_t)&protocol witness table for _LayoutRoot<A>, a5);
}

uint64_t static _VariadicView_Root._viewListOptions.getter()
{
  return 0;
}

void type metadata accessor for [Unmanaged<DynamicViewList<AnyView>.Item>](uint64_t a1)
{
}

uint64_t static _VariadicView_ViewRoot._makeView(root:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, unint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  int v19 = *a1;
  uint64_t v11 = v5;
  int v12 = v6;
  uint64_t v13 = v7;
  long long v9 = *(_OWORD *)(a2 + 5);
  long long v14 = *(_OWORD *)(a2 + 3);
  long long v15 = v9;
  long long v16 = *(_OWORD *)(a2 + 7);
  uint64_t v17 = a2[9];
  int v18 = v8;
  return static _VariadicView_ViewRoot.makeView(root:inputs:body:)(&v19, (uint64_t)&v11, a3, a4, a5);
}

ValueMetadata *type metadata accessor for CoordinateSpace()
{
  return &type metadata for CoordinateSpace;
}

uint64_t type metadata completion function for StoredLocation()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ImageLayer()
{
  return self;
}

uint64_t key path getter for EnvironmentValues.tintColor : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for ColorProvider.resolve(in:) in conformance SystemColorType(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *v1;
  EnvironmentValues.systemColorDefinition.getter();
  char v7 = v4;
  v8[0] = v2;
  v8[1] = v3;
  return (*(uint64_t (**)(char *, void *))(v5 + 8))(&v7, v8);
}

uint64_t specialized PropertyList.Tracker.derivedValue<A>(_:for:)(unint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    unint64_t v18 = a1;
    uint64_t v19 = 0;
    swift_retain();
    uint64_t v12 = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(&v18);
    swift_release();
    *(void *)&v17[0] = v12;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 40);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v17);
    outlined init with take of ScrollStateRequest(v17, (uint64_t)&v18);
    uint64_t v10 = v20;
    uint64_t v11 = v21;
    __swift_project_boxed_opaque_existential_1(&v18, v20);
    ((void (*)(long long *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v17, &type metadata for Font, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  }
  else
  {
    unint64_t v18 = a1;
    uint64_t v19 = 0;
    swift_retain();
    uint64_t v13 = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(&v18);
    swift_release();
    *(void *)&v17[0] = v13;
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>>();
    uint64_t v20 = v14;
    uint64_t v21 = &protocol witness table for DerivedValue<A>;
    unint64_t v18 = v13;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v18, v6);
  }
LABEL_9:
  uint64_t v15 = *(void *)&v17[0];
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return v15;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  long long v16[2];
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v17 = a1;
    unint64_t v18 = 0;
    swift_retain();
    uint64_t v12 = specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)(&v17);
    swift_release();
    *(void *)&v16[0] = v12;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 40);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v16);
    outlined init with take of ScrollStateRequest(v16, (uint64_t)&v17);
    uint64_t v10 = v19;
    uint64_t v11 = v20;
    __swift_project_boxed_opaque_existential_1(&v17, v19);
    ((void (*)(long long *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v16, &type metadata for Font, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  }
  else
  {
    uint64_t v17 = a1;
    unint64_t v18 = 0;
    swift_retain();
    uint64_t v13 = specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)(&v17);
    swift_release();
    *(void *)&v16[0] = v13;
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>>();
    uint64_t v19 = v14;
    uint64_t v20 = &protocol witness table for DerivedValue<A>;
    uint64_t v17 = v13;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v17, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v16[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v23[2];
  void v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v24);
    swift_release_n();
    uint64_t v13 = v25;
    uint64_t v14 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v23[0] = a1;
    uint64_t v15 = ((uint64_t (*)(long long *, uint64_t, _UNKNOWN **))v14[1])(v23, v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_release();
    *(void *)&v23[0] = v15;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 40);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    uint64_t v10 = v25;
    uint64_t v11 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    ((void (*)(long long *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v23, &type metadata for Font, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    long long v16 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v24);
    swift_release_n();
    uint64_t v17 = v25;
    unint64_t v18 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v23[0] = a1;
    uint64_t v19 = ((uint64_t (*)(long long *, uint64_t, _UNKNOWN **))v18[1])(v23, v17, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_release();
    *(void *)&v23[0] = v19;
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>>();
    long long v25 = v20;
    long long v26 = &protocol witness table for DerivedValue<A>;
    v24[0] = v19;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  uint64_t v21 = *(void *)&v23[0];
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return v21;
}

uint64_t Font.ModifierProvider.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(**(void **)v1 + 104);
  swift_retain();
  v3(a1);
  swift_release();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t ContentStyle.ID.resolve(in:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *v1 + 13;
  EnvironmentValues.systemColorDefinition.getter();
  char v7 = v4;
  v8[0] = v2;
  v8[1] = v3;
  return (*(uint64_t (**)(char *, void *))(v5 + 8))(&v7, v8);
}

__n128 specialized static CoreUIDefaultSystemColorDefinition.value(for:environment:)(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  switch(v2)
  {
    case 1:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 1;
      goto LABEL_20;
    case 2:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 2;
      goto LABEL_20;
    case 3:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 3;
      goto LABEL_20;
    case 4:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 4;
      goto LABEL_20;
    case 5:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 5;
      goto LABEL_20;
    case 6:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 6;
      goto LABEL_20;
    case 7:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 7;
      goto LABEL_20;
    case 8:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 8;
      goto LABEL_20;
    case 9:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 9;
      goto LABEL_20;
    case 10:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 10;
      goto LABEL_20;
    case 11:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 14;
      goto LABEL_20;
    case 12:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 13;
      goto LABEL_20;
    case 13:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 15;
      goto LABEL_20;
    case 14:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 16;
      goto LABEL_20;
    case 15:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 17;
      goto LABEL_20;
    case 16:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 18;
      goto LABEL_20;
    case 17:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 19;
      goto LABEL_20;
    case 18:
      char v7 = 18;
      goto LABEL_26;
    case 19:
      char v7 = 19;
      goto LABEL_26;
    case 20:
      char v7 = 20;
      goto LABEL_26;
    case 21:
      char v7 = 21;
LABEL_26:
      LOBYTE(v11) = v7;
      uint64_t v14 = v4;
      uint64_t v15 = v3;
      result.n128_f32[0] = specialized static DefaultSystemColorDefinition_PhoneTV.value(for:environment:)((unsigned __int8 *)&v11, &v14);
      result.n128_u32[1] = v8;
      result.n128_u64[1] = __PAIR64__(v10, v9);
      break;
    default:
      uint64_t v11 = *a2;
      uint64_t v12 = v3;
      swift_retain();
      swift_retain();
      uint64_t v5 = 0;
LABEL_20:
      CUIDesignLibraryCacheKey.init(name:in:allowsBlendMode:)(v5, &v11, 0, (uint64_t)&v14);
      uint64_t v11 = v14;
      LOWORD(v12) = v15;
      BYTE2(v12) = BYTE2(v15);
      uint64_t v13 = v16;
      CUIDesignLibraryCacheKey.fetch()((uint64_t)v17);
      __n128 result = v17[0];
      break;
  }
  return result;
}

double CUIDesignLibraryCacheKey.fetch()@<D0>(uint64_t a1@<X8>)
{
  v49[1] = *(id *)MEMORY[0x263EF8340];
  Swift::UInt v3 = *(void *)v1;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v5 = *(unsigned __int8 *)(v1 + 9);
  uint64_t v6 = *(unsigned __int8 *)(v1 + 10);
  Swift::UInt v7 = *(void *)(v1 + 16);
  if (one-time initialization token for _cache != -1) {
    swift_once();
  }
  unsigned __int32 v8 = static CUIDesignLibraryCacheKey._cache;
  unsigned int v9 = (os_unfair_lock_s *)((char *)static CUIDesignLibraryCacheKey._cache + 16);
  swift_retain();
  os_unfair_lock_lock(v9);
  uint64_t v10 = v8[3];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v9);
  swift_release();
  if (*(void *)(v10 + 16)
    && (!v5 ? (int v11 = 0) : (int v11 = 256),
        (int v12 = v11 | v4, !v6) ? (v13 = 0) : (v13 = 0x10000),
        unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v12 | v13, v7),
        (v15 & 1) != 0))
  {
    uint64_t v16 = *(void *)(v10 + 56) + 20 * v14;
    char v17 = *(unsigned char *)(v16 + 16);
    long long v41 = *(_OWORD *)v16;
    swift_bridgeObjectRelease();
    double result = *(double *)&v41;
    *(_OWORD *)a1 = v41;
    *(unsigned char *)(a1 + 16) = v17;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v48 = v6;
    v49[0] = 0;
    long long v43 = v3;
    uint64_t v44 = 0;
    uint64_t v45 = v4;
    uint64_t v46 = v5;
    Swift::UInt v47 = v7;
    id v19 = objc_msgSend(self, sel_colorWithTraits_error_, &v43, v49);
    Swift::UInt v42 = v7;
    if (v19)
    {
      uint64_t v20 = v19;
      Swift::UInt v40 = v3;
      id v21 = v49[0];
      unint64_t v22 = specialized Color.Resolved.init(failableCGColor:)(objc_msgSend(v20, sel_cgColor));
      if (v24)
      {
        uint64_t v27 = a1;
        unsigned int v25 = 0;
        LODWORD(v28) = 0;
        unsigned int v26 = 0;
        LODWORD(v29) = 0;
      }
      else
      {
        unsigned int v25 = v22;
        unsigned int v26 = v23;
        uint64_t v27 = a1;
        unint64_t v28 = HIDWORD(v22);
        unint64_t v29 = HIDWORD(v23);
      }
      CGBlendMode v33 = objc_msgSend(v20, sel_blendMode);

      BlendMode.init(_:)(v33);
      char v32 = v43;
      a1 = v27;
      Swift::UInt v3 = v40;
    }
    else
    {
      id v30 = v49[0];
      unint64_t v31 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);

      char v32 = 0;
      unsigned int v25 = 0;
      LODWORD(v28) = 0;
      unsigned int v26 = 0;
      LODWORD(v29) = 0;
    }
    *(void *)&long long v43 = __PAIR64__(v28, v25);
    *((void *)&v43 + 1) = __PAIR64__(v29, v26);
    LOBYTE(v44) = v32;
    uint64_t v34 = (id *)static CUIDesignLibraryCacheKey._cache;
    long long v35 = (os_unfair_lock_s *)((char *)static CUIDesignLibraryCacheKey._cache + 16);
    swift_retain();
    os_unfair_lock_lock(v35);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v49[0] = v34[3];
    v34[3] = (id)0x8000000000000000;
    if (v5) {
      int v37 = 256;
    }
    else {
      int v37 = 0;
    }
    int v38 = v37 | v4;
    if (v6) {
      int v39 = 0x10000;
    }
    else {
      int v39 = 0;
    }
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v43, v3, v38 | v39, v42, isUniquelyReferenced_nonNull_native);
    v34[3] = v49[0];
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v35);
    swift_release();
    double result = *(double *)&v43;
    *(_OWORD *)a1 = v43;
    *(unsigned char *)(a1 + 16) = v44;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, unsigned int a2, Swift::UInt a3)
{
  Swift::UInt v6 = a2 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)((a2 >> 8) & 1);
  Hasher._combine(_:)(HIWORD(a2) & 1);
  Hasher._combine(_:)(a3);
  Swift::Int v7 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0x10101, a3, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t result = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v8 = ~v6;
    uint64_t v9 = *(void *)(v4 + 48);
    do
    {
      uint64_t v10 = v9 + 24 * result;
      if (*(void *)v10 == a1
        && ((a2 ^ *(unsigned __int8 *)(v10 + 8)) & 1) == 0
        && ((*(unsigned __int8 *)(v10 + 9) ^ ((unsigned __int16)(a2 & 0x100) >> 8)) & 1) == 0
        && ((*(unsigned __int8 *)(v10 + 10) ^ ((a2 & 0x10000u) >> 16)) & 1) == 0
        && *(void *)(v9 + 24 * result + 16) == a3)
      {
        break;
      }
      unint64_t result = (result + 1) & v8;
    }
    while (((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t CUIDesignLibraryCacheKey.init(name:in:allowsBlendMode:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a2;
  if (a2[1])
  {
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v7, (uint64_t)v15);
    swift_release_n();
  }
  else
  {
    v14[0] = *a2;
    v14[1] = 0;
    swift_retain_n();
    static CUIDesignLibraryCacheKey.Props.value(in:)(v14, (uint64_t)v15);
  }
  uint64_t result = swift_release_n();
  char v9 = v15[0];
  char v10 = v15[1];
  char v11 = v15[2];
  uint64_t v12 = v16;
  uint64_t v13 = 2;
  if (v16 != 1) {
    uint64_t v13 = v16;
  }
  if ((a3 & 1) == 0) {
    uint64_t v12 = v13;
  }
  *(void *)a4 = a1;
  *(unsigned char *)(a4 + 8) = v9;
  *(unsigned char *)(a4 + 9) = v10;
  *(unsigned char *)(a4 + 10) = v11;
  *(void *)(a4 + 16) = v12;
  return result;
}

uint64_t specialized PropertyList.Tracker.derivedValue<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v21 = a1;
    uint64_t v22 = 0;
    swift_retain();
    static CUIDesignLibraryCacheKey.Props.value(in:)(&v21, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>, (void (*)(void))lazy protocol witness table accessor for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 40);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)&v21);
    uint64_t v12 = v23;
    uint64_t v13 = v24;
    __swift_project_boxed_opaque_existential_1(&v21, v23);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for CUIDesignLibraryCacheKey.Props, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  }
  else
  {
    uint64_t v21 = a1;
    uint64_t v22 = 0;
    swift_retain();
    static CUIDesignLibraryCacheKey.Props.value(in:)(&v21, a2);
    swift_release();
    char v14 = *(unsigned char *)a2;
    char v15 = *(unsigned char *)(a2 + 1);
    char v16 = *(unsigned char *)(a2 + 2);
    uint64_t v17 = *(void *)(a2 + 8);
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>>();
    uint64_t v23 = v18;
    char v24 = &protocol witness table for DerivedValue<A>;
    LOBYTE(v21) = v14;
    BYTE1(v21) = v15;
    BYTE2(v21) = v16;
    uint64_t v22 = v17;
    specialized Dictionary.subscript.setter((uint64_t)&v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  __int16 v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  long long v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _UNKNOWN **v24;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v21 = a1;
    uint64_t v22 = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(&v21, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 40);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)&v21);
    uint64_t v12 = v23;
    uint64_t v13 = v24;
    __swift_project_boxed_opaque_existential_1(&v21, v23);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Font.Context, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  }
  else
  {
    uint64_t v21 = a1;
    uint64_t v22 = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(&v21, a2);
    swift_release();
    char v14 = *(_WORD *)a2;
    char v15 = *(unsigned char *)(a2 + 24);
    char v16 = *(unsigned char *)(a2 + 25);
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>>();
    uint64_t v23 = v17;
    char v24 = &protocol witness table for DerivedValue<A>;
    uint64_t v18 = swift_allocObject();
    uint64_t v21 = v18;
    *(_WORD *)(v18 + 16) = v14;
    *(_OWORD *)(v18 + 24) = *(_OWORD *)(a2 + 8);
    *(unsigned char *)(v18 + 40) = v15;
    *(unsigned char *)(v18 + 41) = v16;
    specialized Dictionary.subscript.setter((uint64_t)&v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

uint64_t Font.platformFont(in:modifiers:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v5, (uint64_t)&v9);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    uint64_t v13 = *a1;
    uint64_t v14 = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(&v13, (uint64_t)&v9);
    swift_release();
  }
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  __int16 v15 = v9;
  long long v16 = v10;
  char v17 = v11;
  char v18 = v12;
  uint64_t v6 = one-time initialization token for fontCache;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized ObjectCache.subscript.getter((uint64_t)&v13);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v7;
}

uint64_t specialized PropertyList.Tracker.derivedValue<A>(_:for:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    v26[0] = a1;
    swift_retain();
    TextLayoutProperties.init(from:)((uint64_t *)v26, a2);
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>, (void (*)(void))lazy protocol witness table accessor for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 40);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v28);
    outlined init with take of ScrollStateRequest(v28, (uint64_t)v29);
    uint64_t v12 = v30;
    uint64_t v13 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    (*(void (**)(ValueMetadata *, uint64_t, uint64_t))(v13 + 8))(&type metadata for TextLayoutProperties, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  else
  {
    v26[0] = a1;
    swift_retain();
    TextLayoutProperties.init(from:)((uint64_t *)v26, a2);
    long long v14 = *(_OWORD *)(a2 + 112);
    v26[6] = *(_OWORD *)(a2 + 96);
    v26[7] = v14;
    v26[8] = *(_OWORD *)(a2 + 128);
    char v27 = *(unsigned char *)(a2 + 144);
    long long v15 = *(_OWORD *)(a2 + 48);
    v26[2] = *(_OWORD *)(a2 + 32);
    v26[3] = v15;
    long long v16 = *(_OWORD *)(a2 + 80);
    v26[4] = *(_OWORD *)(a2 + 64);
    v26[5] = v16;
    long long v17 = *(_OWORD *)(a2 + 16);
    v26[0] = *(_OWORD *)a2;
    v26[1] = v17;
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>>();
    v25[3] = v18;
    v25[4] = &protocol witness table for DerivedValue<A>;
    uint64_t v19 = swift_allocObject();
    v25[0] = v19;
    long long v20 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v19 + 112) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v19 + 128) = v20;
    *(_OWORD *)(v19 + 144) = *(_OWORD *)(a2 + 128);
    *(unsigned char *)(v19 + 160) = *(unsigned char *)(a2 + 144);
    long long v21 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v19 + 64) = v21;
    long long v22 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v19 + 80) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v19 + 96) = v22;
    long long v23 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v19 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v19 + 32) = v23;
    outlined retain of TextLayoutProperties((uint64_t)v26);
    specialized Dictionary.subscript.setter((uint64_t)v25, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

void type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for DerivedEnvironmentPropertyKey();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>>()
{
  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey);
    lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey);
    unint64_t v0 = type metadata accessor for DerivedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>>);
    }
  }
}

uint64_t specialized ObjectCache.subscript.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  long long v4 = *(_OWORD *)(a1 + 16);
  uint64_t v27 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v26 = *(unsigned __int8 *)(a1 + 17);
  long long v24 = *(_OWORD *)(a1 + 24);
  long long v25 = *(_OWORD *)a1;
  uint64_t v5 = *(unsigned __int8 *)(a1 + 40);
  char v6 = *(unsigned char *)(a1 + 41);
  long long v31 = *(_OWORD *)a1;
  v32[0] = v4;
  *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)(a1 + 26);
  Swift::Int v7 = Font.Resolved.hashValue.getter();
  uint64_t v8 = 4 * (v7 & 7);
  uint64_t v30 = 0;
  int v29 = 0x80000000;
  uint64_t v9 = *(os_unfair_lock_s **)(v1 + 32);
  swift_retain_n();
  os_unfair_lock_lock(v9 + 4);
  id v10 = (id)specialized closure #1 in ObjectCache.subscript.getter((unint64_t)&v9[6], v8, v7, a1, &v29, &v30);
  os_unfair_lock_unlock(v9 + 4);
  swift_release_n();
  if (v10) {
    return (uint64_t)v10;
  }
  (*(void (**)(void **__return_ptr, long long *))(v2 + 16))(&v28, &v31);
  uint64_t v11 = *(void *)(v2 + 32);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 16));
  unint64_t v12 = v8 + v30;
  if (__OFADD__(v8, v30))
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = v28;
    LODWORD(v8) = *(_DWORD *)(v11 + 32) + 1;
    *(_DWORD *)(v11 + 32) = v8;
    uint64_t v2 = *(void *)(v11 + 24);
    outlined retain of Font.Resolved(a1);
    id v10 = v13;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v11 + 24) = v2;
    if (result) {
      goto LABEL_4;
    }
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v2);
  uint64_t v2 = result;
  *(void *)(v11 + 24) = result;
LABEL_4:
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(void *)(v2 + 16))
  {
    uint64_t v15 = v2 + 72 * v12;
    uint64_t v16 = *(void *)(v15 + 32);
    uint64_t v17 = *(void *)(v15 + 40);
    uint64_t v18 = *(void *)(v15 + 48);
    uint64_t v19 = *(void *)(v15 + 56);
    uint64_t v20 = *(void *)(v15 + 64);
    uint64_t v21 = *(void *)(v15 + 72);
    uint64_t v22 = *(void *)(v15 + 80);
    long long v23 = *(void **)(v15 + 88);
    *(_OWORD *)(v15 + 32) = v25;
    *(void *)(v15 + 48) = v27 | (v26 << 8);
    *(_OWORD *)(v15 + 56) = v24;
    *(void *)(v15 + 72) = v5 | ((unint64_t)(v6 & 1) << 8);
    *(void *)(v15 + 80) = v7;
    *(void *)(v15 + 88) = v10;
    *(_DWORD *)(v15 + 96) = v8;
    outlined consume of (key: Font.Resolved, hash: Int, value: CTFontRef)?(v16, v17, v18, v19, v20, v21, v22, v23);
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 16));
    swift_release_n();
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

Swift::Int Font.Resolved.hashValue.getter()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  Swift::UInt v3 = *((unsigned __int8 *)v0 + 16);
  int v4 = *((unsigned __int8 *)v0 + 17);
  long long v14 = *(_OWORD *)(v0 + 3);
  Swift::UInt v5 = *((unsigned __int8 *)v0 + 40);
  Swift::UInt8 v6 = *((unsigned char *)v0 + 41);
  Hasher.init(_seed:)();
  Swift::Int v7 = *(void (**)(unsigned char *))(*(void *)v2 + 104);
  swift_retain();
  v7(v16);
  swift_release();
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    Swift::UInt v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v12);
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9) {
      goto LABEL_10;
    }
  }
  else
  {
    Swift::UInt v8 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v8);
    uint64_t v9 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v9) {
      goto LABEL_10;
    }
  }
  if (v9 < 1) {
    __break(1u);
  }
  for (uint64_t i = 0; i != v9; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v11 = MEMORY[0x24C523D60](i, v1);
    }
    else
    {
      uint64_t v11 = *(void *)(v1 + 8 * i + 32);
      swift_retain();
    }
    (*(void (**)(unsigned char *))(*(void *)v11 + 104))(v16);
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  if (v4 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4 & 1);
  }
  long long v15 = v14;
  Hasher._combine(_:)((Swift::UInt)&v15);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t FontBox.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t specialized closure #1 in ObjectCache.subscript.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, void *a6)
{
  uint64_t v8 = a3;
  unint64_t v9 = a1;
  uint64_t v10 = 0;
  unint64_t v11 = *(void *)a1;
  uint64_t v41 = *(void *)a1 + 72 * a2;
  uint64_t v12 = -288;
  int v38 = a5;
  uint64_t v39 = a2;
  unint64_t v40 = *(void *)a1;
  while (1)
  {
    if (a2 < 0)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    unint64_t v13 = a2 + v10;
    if ((unint64_t)(a2 + v10) >= *(void *)(v11 + 16)) {
      goto LABEL_33;
    }
    uint64_t v14 = v41 + v12;
    long long v15 = *(void **)(v41 + v12 + 320);
    if (!v15)
    {
      int v24 = 0x7FFFFFFF;
      if (*a5 == 0x7FFFFFFF) {
        goto LABEL_3;
      }
LABEL_2:
      *a6 = v10;
      *a5 = v24;
      goto LABEL_3;
    }
    unint64_t v6 = *(void *)(v14 + 328);
    unint64_t v16 = *(void *)(v14 + 336);
    uint64_t v17 = *(void *)(v14 + 344);
    uint64_t v18 = *(void *)(v14 + 352);
    uint64_t v19 = *(void *)(v14 + 360);
    uint64_t v20 = *(void *)(v14 + 368);
    id v7 = *(id *)(v14 + 376);
    Swift::UInt v42 = v7;
    if (v20 != v8)
    {
      outlined copy of (key: Font.Resolved, hash: Int, value: CTFontRef)?(v15, v6, v16, v17, v18, v19, v20, v7);
      goto LABEL_20;
    }
    int v28 = *(unsigned __int8 *)(v14 + 361);
    int v29 = *(unsigned __int8 *)(v14 + 360);
    uint64_t v35 = *(void *)a4;
    uint64_t v34 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 96);
    uint64_t v30 = *(void *)(v14 + 344);
    outlined copy of (key: Font.Resolved, hash: Int, value: CTFontRef)?(v15, v6, v16, v17, v18, v19, v8, v7);
    swift_retain();
    swift_bridgeObjectRetain();
    id v7 = v7;
    outlined retain of Font.Resolved(a4);
    if ((v34(v35) & 1) == 0 || (specialized static Array<A>.== infix(_:_:)(v6, *(void *)(a4 + 8)) & 1) == 0)
    {
      uint64_t v21 = a4;
      goto LABEL_18;
    }
    uint64_t v21 = a4;
    if (*(unsigned __int8 *)(a4 + 16) == v16) {
      break;
    }
LABEL_18:
    outlined release of Font.Resolved(v21);
LABEL_19:

    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v9 = a1;
LABEL_20:
    unint64_t v11 = v40;
    if (v13 >= *(void *)(v40 + 16)) {
      goto LABEL_34;
    }
    unint64_t v6 = *(unsigned int *)(v9 + 8);
    LODWORD(v7) = *(_DWORD *)(v14 + 384);

    swift_bridgeObjectRelease();
    swift_release();
    int v24 = v6 - v7;
    a5 = v38;
    a2 = v39;
    uint64_t v8 = a3;
    if (*v38 < (int)v6 - (int)v7) {
      goto LABEL_2;
    }
LABEL_3:
    ++v10;
    v12 += 72;
    if (!v12) {
      return 0;
    }
  }
  int v22 = *(unsigned __int8 *)(a4 + 17);
  uint64_t v23 = *(void *)(a4 + 24);
  if ((v16 & 0xFF00) == 0x200)
  {
    uint64_t v21 = a4;
    if (v22 == 2) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  uint64_t v21 = a4;
  if (v22 == 2 || ((v16 >> 8) & 1) != (v22 & 1)) {
    goto LABEL_18;
  }
LABEL_25:
  int v25 = *(unsigned __int8 *)(a4 + 40);
  int v36 = *(unsigned __int8 *)(a4 + 41);
  outlined release of Font.Resolved(v21);
  if (v23 != v30 || v29 != v25 || ((v28 ^ v36) & 1) != 0) {
    goto LABEL_19;
  }

  swift_bridgeObjectRelease();
  swift_release();
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  unint64_t v6 = v40;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = v39;
  unint64_t v9 = v39 + v10;
  if (result) {
    goto LABEL_29;
  }
LABEL_35:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v6);
  uint64_t v27 = v39;
  unint64_t v6 = result;
LABEL_29:
  if (v9 >= *(void *)(v6 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v6 + 72 * v27 + v12 + 384) = v7;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)a1 = v6;
    return (uint64_t)v42;
  }
  return result;
}

unint64_t specialized static Array<A>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6 == v21) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0) {
    uint64_t v7 = v4;
  }
  if (v5) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v6 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    uint64_t result = MEMORY[0x24C523D60](0, v4);
    unint64_t v11 = result;
    unint64_t v12 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0) {
      goto LABEL_19;
    }
LABEL_42:
    uint64_t v13 = MEMORY[0x24C523D60](0, a2);
LABEL_21:
    char v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v13);
    swift_release();
    swift_release();
    if (v14)
    {
      uint64_t v15 = 1 - v6;
      for (uint64_t i = 5; ; ++i)
      {
        uint64_t v6 = v15 + i == 5;
        if (v15 + i == 5) {
          return v6;
        }
        unint64_t v19 = i - 4;
        if (v2)
        {
          uint64_t v20 = MEMORY[0x24C523D60](i - 4, v4);
          if (v12) {
            goto LABEL_23;
          }
        }
        else
        {
          if (v19 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v20 = *(void *)(v4 + 8 * i);
          swift_retain();
          if (v12)
          {
LABEL_23:
            uint64_t v17 = MEMORY[0x24C523D60](i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v19 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_39;
        }
        uint64_t v17 = *(void *)(a2 + 8 * i);
        swift_retain();
LABEL_24:
        char v18 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 96))(v17);
        swift_release();
        swift_release();
        if ((v18 & 1) == 0) {
          return v6;
        }
      }
    }
    return 0;
  }
  unint64_t v2 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0) {
    goto LABEL_41;
  }
  if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_44;
  }
  unint64_t v11 = *(void *)(v4 + 32);
  uint64_t result = swift_retain();
  unint64_t v12 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    goto LABEL_42;
  }
LABEL_19:
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v13 = *(void *)(a2 + 32);
    swift_retain();
    goto LABEL_21;
  }
LABEL_44:
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v4 = result;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6 == v21) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0) {
    uint64_t v7 = v4;
  }
  if (v5) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v6 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    uint64_t result = MEMORY[0x24C523D60](0, v4);
    unint64_t v11 = result;
    unint64_t v12 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0) {
      goto LABEL_19;
    }
LABEL_42:
    uint64_t v13 = MEMORY[0x24C523D60](0, a2);
LABEL_21:
    char v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v13);
    swift_release();
    swift_release();
    if (v14)
    {
      uint64_t v15 = 1 - v6;
      for (uint64_t i = 5; ; ++i)
      {
        uint64_t v6 = v15 + i == 5;
        if (v15 + i == 5) {
          return v6;
        }
        unint64_t v19 = i - 4;
        if (v2)
        {
          uint64_t v20 = MEMORY[0x24C523D60](i - 4, v4);
          if (v12) {
            goto LABEL_23;
          }
        }
        else
        {
          if (v19 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v20 = *(void *)(v4 + 8 * i);
          swift_retain();
          if (v12)
          {
LABEL_23:
            uint64_t v17 = MEMORY[0x24C523D60](i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v19 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_39;
        }
        uint64_t v17 = *(void *)(a2 + 8 * i);
        swift_retain();
LABEL_24:
        char v18 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 88))(v17);
        swift_release();
        swift_release();
        if ((v18 & 1) == 0) {
          return v6;
        }
      }
    }
    return 0;
  }
  unint64_t v2 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0) {
    goto LABEL_41;
  }
  if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_44;
  }
  unint64_t v11 = *(void *)(v4 + 32);
  uint64_t result = swift_retain();
  unint64_t v12 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    goto LABEL_42;
  }
LABEL_19:
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v13 = *(void *)(a2 + 32);
    swift_retain();
    goto LABEL_21;
  }
LABEL_44:
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v4 = result;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6 == v21) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0) {
    uint64_t v7 = v4;
  }
  if (v5) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v6 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    uint64_t result = MEMORY[0x24C523D60](0, v4);
    unint64_t v11 = result;
    unint64_t v12 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0) {
      goto LABEL_19;
    }
LABEL_42:
    uint64_t v13 = MEMORY[0x24C523D60](0, a2);
LABEL_21:
    char v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v13);
    swift_release();
    swift_release();
    if (v14)
    {
      uint64_t v15 = 1 - v6;
      for (uint64_t i = 5; ; ++i)
      {
        uint64_t v6 = v15 + i == 5;
        if (v15 + i == 5) {
          return v6;
        }
        unint64_t v19 = i - 4;
        if (v2)
        {
          uint64_t v20 = MEMORY[0x24C523D60](i - 4, v4);
          if (v12) {
            goto LABEL_23;
          }
        }
        else
        {
          if (v19 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v20 = *(void *)(v4 + 8 * i);
          swift_retain();
          if (v12)
          {
LABEL_23:
            uint64_t v17 = MEMORY[0x24C523D60](i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v19 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_39;
        }
        uint64_t v17 = *(void *)(a2 + 8 * i);
        swift_retain();
LABEL_24:
        char v18 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 96))(v17);
        swift_release();
        swift_release();
        if ((v18 & 1) == 0) {
          return v6;
        }
      }
    }
    return 0;
  }
  unint64_t v2 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0) {
    goto LABEL_41;
  }
  if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_44;
  }
  unint64_t v11 = *(void *)(v4 + 32);
  uint64_t result = swift_retain();
  unint64_t v12 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    goto LABEL_42;
  }
LABEL_19:
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v13 = *(void *)(a2 + 32);
    swift_retain();
    goto LABEL_21;
  }
LABEL_44:
  __break(1u);
  return result;
}

id outlined copy of (key: Font.Resolved, hash: Int, value: CTFontRef)?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return a8;
  }
  return result;
}

uint64_t static Font.ModifierProvider.== infix(_:_:)(uint64_t a1, void *a2)
{
  if (((*(uint64_t (**)(void))(**(void **)a1 + 96))(*a2) & 1) == 0) {
    return 0;
  }
  type metadata accessor for Font.ModifierProvider();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ViewSystem(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))(*a2) & 1;
}

uint64_t FontBox.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

BOOL specialized static Font.TextStyleProvider.== infix(_:_:)(double *a1, double *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 1);
  double v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  char v5 = *(unsigned char *)a2;
  int v6 = *((unsigned __int8 *)a2 + 1);
  double v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  char v13 = *(unsigned char *)a1;
  char v12 = v5;
  if ((specialized static Font.TextStyle.== infix(_:_:)(&v13, &v12) & 1) == 0) {
    return 0;
  }
  if (v2 == 4)
  {
    if (v6 != 4) {
      return 0;
    }
  }
  else if (v6 == 4 || v2 != v6)
  {
    return 0;
  }
  if ((v4 & 1) == 0)
  {
    if (v3 == v7) {
      char v11 = v8;
    }
    else {
      char v11 = 1;
    }
    return (v11 & 1) == 0;
  }
  return (v8 & 1) != 0;
}

uint64_t specialized static Font.TextStyle.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  switch(*a1)
  {
    case 1:
      uint64_t v2 = 1;
      goto LABEL_12;
    case 2:
      uint64_t v2 = 2;
      goto LABEL_12;
    case 3:
      uint64_t v2 = 3;
      goto LABEL_12;
    case 4:
      uint64_t v2 = 4;
      goto LABEL_12;
    case 5:
      uint64_t v2 = 5;
      goto LABEL_12;
    case 6:
      uint64_t v2 = 6;
      goto LABEL_12;
    case 7:
      uint64_t v2 = 7;
      goto LABEL_12;
    case 8:
      uint64_t v2 = 8;
      goto LABEL_12;
    case 9:
      uint64_t v2 = 9;
      goto LABEL_12;
    case 0xA:
      uint64_t v2 = 10;
      goto LABEL_12;
    case 0xB:
    case 0xC:
    case 0xD:
LABEL_24:
      uint64_t result = _diagnoseUnavailableCodeReached()();
      __break(1u);
      return result;
    default:
LABEL_12:
      switch(*a2)
      {
        case 1:
          uint64_t v3 = 1;
          break;
        case 2:
          uint64_t v3 = 2;
          break;
        case 3:
          uint64_t v3 = 3;
          break;
        case 4:
          uint64_t v3 = 4;
          break;
        case 5:
          uint64_t v3 = 5;
          break;
        case 6:
          uint64_t v3 = 6;
          break;
        case 7:
          uint64_t v3 = 7;
          break;
        case 8:
          uint64_t v3 = 8;
          break;
        case 9:
          uint64_t v3 = 9;
          break;
        case 0xA:
          uint64_t v3 = 10;
          break;
        case 0xB:
        case 0xC:
        case 0xD:
          goto LABEL_24;
        default:
          return v2 == v3;
      }
      return v2 == v3;
  }
}

uint64_t type metadata accessor for Font.ModifierProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.ModifierProvider<A>(uint64_t a1, void *a2)
{
  return static Font.ModifierProvider.== infix(_:_:)(a1, a2);
}

uint64_t outlined retain of Font.Resolved(uint64_t a1)
{
  return a1;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>>()
{
  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>, (void (*)(void))lazy protocol witness table accessor for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props);
    lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>, (void (*)(void))lazy protocol witness table accessor for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props);
    unint64_t v0 = type metadata accessor for DerivedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>>);
    }
  }
}

void protocol witness for Hashable.hash(into:) in conformance Font.TextStyleProvider()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt64 v3 = *((void *)v0 + 1);
  int v4 = v0[16];
  switch(*v0)
  {
    case 1u:
      Swift::UInt v1 = 1;
      goto LABEL_12;
    case 2u:
      Swift::UInt v1 = 2;
      goto LABEL_12;
    case 3u:
      Swift::UInt v1 = 3;
      goto LABEL_12;
    case 4u:
      Swift::UInt v1 = 4;
      goto LABEL_12;
    case 5u:
      Swift::UInt v1 = 5;
      goto LABEL_12;
    case 6u:
      Swift::UInt v1 = 6;
      goto LABEL_12;
    case 7u:
      Swift::UInt v1 = 7;
      goto LABEL_12;
    case 8u:
      Swift::UInt v1 = 8;
      goto LABEL_12;
    case 9u:
      Swift::UInt v1 = 9;
      goto LABEL_12;
    case 0xAu:
      Swift::UInt v1 = 10;
      goto LABEL_12;
    case 0xBu:
    case 0xCu:
    case 0xDu:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      return;
    default:
LABEL_12:
      Hasher._combine(_:)(v1);
      if (v2 != 4)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v2);
        if (!v4) {
          goto LABEL_14;
        }
LABEL_19:
        Hasher._combine(_:)(0);
        return;
      }
      Hasher._combine(_:)(0);
      if (v4) {
        goto LABEL_19;
      }
LABEL_14:
      Hasher._combine(_:)(1u);
      if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v5 = v3;
      }
      else {
        Swift::UInt64 v5 = 0;
      }
      Hasher._combine(_:)(v5);
      return;
  }
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>>()
{
  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>, (void (*)(void))lazy protocol witness table accessor for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key);
    lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<TextLayoutProperties.Key> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>, (void (*)(void))lazy protocol witness table accessor for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key);
    unint64_t v0 = type metadata accessor for DerivedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>>);
    }
  }
}

uint64_t specialized static Font.SystemProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + 17);
  int v3 = *(unsigned __int8 *)(a1 + 18);
  double v4 = *(double *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 32);
  char v6 = *(unsigned char *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 17);
  int v8 = *(unsigned __int8 *)(a2 + 18);
  double v9 = *(double *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 32);
  if (*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      char v6 = 1;
    }
    if (v6) {
      return 0;
    }
  }
  if (v2 == 4)
  {
    if (v7 != 4) {
      return 0;
    }
LABEL_13:
    if (v3 == 14)
    {
      if (v8 != 14) {
        return 0;
      }
    }
    else
    {
      char v14 = v3;
      if (v8 == 14) {
        return 0;
      }
      char v13 = v8;
      if ((specialized static Font.TextStyle.== infix(_:_:)(&v14, &v13) & 1) == 0) {
        return 0;
      }
    }
    if (v5)
    {
      if ((v10 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v4 == v9) {
        char v12 = v10;
      }
      else {
        char v12 = 1;
      }
      if (v12) {
        return 0;
      }
    }
    return 1;
  }
  uint64_t result = 0;
  if (v7 != 4 && v2 == v7) {
    goto LABEL_13;
  }
  return result;
}

uint64_t outlined release of Font.Resolved(uint64_t a1)
{
  return a1;
}

void protocol witness for Hashable.hash(into:) in conformance LayoutDirection()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance EnvironmentValues.EffectiveSymbolFontKey@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance EnvironmentValues.EffectiveFontKey@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(a1);
  *a2 = result;
  return result;
}

uint64_t EnvironmentValues.tintColor.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  if (!v2)
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v3 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v7);
    swift_release_n();
    if (v3) {
      goto LABEL_3;
    }
    return 0;
  }
  swift_retain_n();
  swift_retain_n();
  uint64_t v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
  swift_release_n();
  swift_release_n();
  if (!v3) {
    return 0;
  }
LABEL_3:
  uint64_t v4 = specialized ShapeStyle.fallbackColor(in:level:)(v1, v2, 0, v3);
  swift_release();
  return v4;
}

uint64_t specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if (!v2)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
      swift_release_n();
      swift_release_n();
      if (!v2)
      {
        swift_retain_n();
        swift_retain_n();
        uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
        swift_release_n();
        swift_release_n();
        if (!v2)
        {
          swift_retain_n();
          swift_retain_n();
          uint64_t v3 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
          swift_release_n();
          swift_release_n();
          return v3;
        }
      }
    }
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v11);
    swift_release_n();
    if (!v2)
    {
      uint64_t v6 = swift_retain_n();
      uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v10);
      swift_release_n();
      if (!v2)
      {
        uint64_t v7 = swift_retain_n();
        uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v9);
        swift_release_n();
        if (!v2)
        {
          v8[0] = v1;
          v8[1] = 0;
          swift_retain();
          uint64_t v2 = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(v8);
          swift_release();
        }
      }
    }
  }
  return v2;
}

uint64_t specialized static EnvironmentValues.EffectiveFontKey.value(in:)(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if (!v2)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
      swift_release_n();
      swift_release_n();
      if (!v2)
      {
        swift_retain_n();
        swift_retain_n();
        uint64_t v3 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
        swift_release_n();
        swift_release_n();
        return v3;
      }
    }
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v15);
    swift_release_n();
    if (!v2)
    {
      uint64_t v6 = swift_retain_n();
      uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v14);
      swift_release_n();
      if (!v2)
      {
        uint64_t v7 = swift_retain_n();
        specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v11);
        swift_release_n();
        uint64_t v8 = v12;
        uint64_t v9 = v13;
        __swift_project_boxed_opaque_existential_1(v11, v12);
        v10[0] = v1;
        v10[1] = 0;
        uint64_t v2 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 8))(v10, v8, v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
        swift_release_n();
      }
    }
  }
  return v2;
}

uint64_t keypath_set_30Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6 = swift_retain();
  a5(v6);

  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<FontKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultFontKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultFontKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultFontKey>>);
    }
  }
}

uint64_t specialized ShapeStyle.fallbackColor(in:level:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[1] = 0;
  unint64_t v8[2] = 0;
  v8[0] = a3;
  char v9 = 2;
  uint64_t v10 = 0;
  unsigned __int8 v11 = 5;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 0;
  char v17 = 1;
  __int16 v18 = 0;
  uint64_t v4 = *(void (**)(void *))(*(void *)a4 + 80);
  swift_retain();
  swift_retain();
  v4(v8);
  uint64_t v5 = v10;
  int v6 = v11;
  outlined copy of _ShapeStyle_Shape.Result(v10, v11);
  outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  swift_release();
  swift_release();
  swift_release();
  if (v6 != 3)
  {
    outlined consume of _ShapeStyle_Shape.Result(v5, v6);
    return 0;
  }
  return v5;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>>()
{
  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey);
    lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey);
    unint64_t v0 = type metadata accessor for DerivedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>>);
    }
  }
}

void outlined consume of (key: Font.Resolved, hash: Int, value: CTFontRef)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a1)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for FallbackFontProvider.makeFont(in:) in conformance DefaultFallbackFontProvider()
{
  if (one-time initialization token for body != -1) {
    swift_once();
  }

  return swift_retain();
}

void Font.SystemProvider.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  int v2 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 17);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 18);
  Swift::UInt64 v5 = *(void *)(v0 + 24);
  int v6 = *(unsigned __int8 *)(v0 + 32);
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(void *)v0;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v3 != 4) {
      goto LABEL_6;
    }
LABEL_13:
    Hasher._combine(_:)(0);
    if (v4 != 14) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v1;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if (v3 == 4) {
    goto LABEL_13;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
  if (v4 != 14)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    switch((int)v4)
    {
      case 1:
        Swift::UInt v4 = 1;
        goto LABEL_25;
      case 2:
        Swift::UInt v4 = 2;
        goto LABEL_25;
      case 3:
        Swift::UInt v4 = 3;
        goto LABEL_25;
      case 4:
        Swift::UInt v4 = 4;
        goto LABEL_25;
      case 5:
        Swift::UInt v4 = 5;
        goto LABEL_25;
      case 6:
        Swift::UInt v4 = 6;
        goto LABEL_25;
      case 7:
        Swift::UInt v4 = 7;
        goto LABEL_25;
      case 8:
        Swift::UInt v4 = 8;
        goto LABEL_25;
      case 9:
        Swift::UInt v4 = 9;
        goto LABEL_25;
      case 10:
        Swift::UInt v4 = 10;
        goto LABEL_25;
      case 11:
      case 12:
      case 13:
        _diagnoseUnavailableCodeReached()();
        __break(1u);
        return;
      default:
LABEL_25:
        Hasher._combine(_:)(v4);
        if (!v6) {
          goto LABEL_26;
        }
        goto LABEL_15;
    }
  }
LABEL_14:
  Hasher._combine(_:)(0);
  if (v6)
  {
LABEL_15:
    Hasher._combine(_:)(0);
  }
  else
  {
LABEL_26:
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v9 = v5;
    }
    else {
      Swift::UInt64 v9 = 0;
    }
    Hasher._combine(_:)(v9);
  }
}

uint64_t AnyDynamicFontModifier.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

BOOL AnyStaticFontModifier.isEqual(to:)()
{
  return swift_dynamicCastClass() != 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.StaticModifierProvider<A>(uint64_t *a1, uint64_t *a2)
{
  return static Font.StaticModifierProvider.== infix(_:_:)(*a1, *a2);
}

uint64_t static Font.StaticModifierProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a2) & 1;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, int a3, Swift::UInt a4, char a5)
{
  int v6 = (void **)v5;
  unsigned __int8 v11 = (void *)*v5;
  int v12 = a3 & 0x10101;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 0x10101, a4);
  uint64_t v15 = v11[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v11[3];
  if (v19 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 20 * v14;
      *(_OWORD *)uint64_t v21 = *(_OWORD *)a1;
      *(unsigned char *)(v21 + 16) = *(unsigned char *)(a1 + 16);
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, v12, a4);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, v12, a4, a1, v20);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(void *)uint64_t v6 = a2;
  *(unsigned char *)(v6 + 8) = a3 & 1;
  *(unsigned char *)(v6 + 9) = BYTE1(a3) & 1;
  *(unsigned char *)(v6 + 10) = BYTE2(a3) & 1;
  *(void *)(v6 + 16) = a4;
  uint64_t v7 = a6[7] + 20 * result;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a5;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(a5 + 16);
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

SwiftUI::BlendMode __swiftcall BlendMode.init(_:)(CGBlendMode a1)
{
  if ((a1 - 1) > 0x1A) {
    *char v1 = 0;
  }
  else {
    *char v1 = byte_2461DDDD4[a1 - 1];
  }
  return (char)a1;
}

void AnyStaticFontModifier.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(*(void *)v0 + 136));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Font.StaticModifierProvider<A>(uint64_t a1)
{
  return Font.StaticModifierProvider.hash(into:)(a1, *v1);
}

uint64_t Font.StaticModifierProvider.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void (**)(uint64_t))(*(void *)a2 + 104);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    BOOL v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.OpenTypeFeatureSettingModifier(void **a1, void **a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props()
{
  unint64_t result = lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props;
  if (!lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props;
  if (!lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance EventID()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

void Font.OpenTypeFeatureSettingModifier.hash(into:)()
{
  uint64_t v1 = *v0;
  Hasher._combine(_:)(*(void *)(*v0 + 16));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.PrivateTextStyleProvider(uint64_t a1, uint64_t a2)
{
  return specialized static Font.PrivateTextStyleProvider.== infix(_:_:)(*(void *)a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void **)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

void ScrollGeometry.contentSize.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t _ViewInputs.containerPosition.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 68) = result;
  return result;
}

uint64_t type metadata instantiation function for InterpolatedDisplayList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 96);
}

uint64_t dispatch thunk of AnyLocation.projecting<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t type metadata completion function for Environment()
{
  uint64_t result = type metadata accessor for Environment.Content();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HorizontalAlignment()
{
  return &type metadata for HorizontalAlignment;
}

uint64_t EnvironmentValues.defaultForegroundStyle.setter(uint64_t a1)
{
  return EnvironmentValues.foregroundStyle.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.defaultFont.setter(uint64_t a1)
{
  return EnvironmentValues.font.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  return 0x2E49557466697753;
}

void closure #1 in static EnumVTable.update(elt:property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned char *a5, int a6)
{
  if ((a4[3] & 1) == 0)
  {
    unint64_t v11 = a4[2];
    uint64_t v12 = *a4;
    if (a4[1] == a1)
    {
      if ((v11 & 0x8000000000000000) == 0) {
        goto LABEL_14;
      }
      __break(1u);
    }
    if ((v11 & 0x8000000000000000) != 0)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v11 >= *(void *)(v12 + 16))
    {
LABEL_19:
      __break(1u);
      return;
    }
    char v13 = a4 + 1;
    uint64_t v14 = v12 + 24 * v11;
    uint64_t v20 = *(void *)(v14 + 40);
    uint64_t v21 = *(void *)(v14 + 48);
    _DynamicPropertyBuffer.reset()();
    *char v13 = 0;
    a4[2] = 0;
    *((unsigned char *)a4 + 24) = 1;
    *a5 = 1;
  }
  uint64_t v15 = *(void *)(*a4 + 16);
  if (!v15) {
    return;
  }
  unint64_t v11 = 0;
  BOOL v16 = (uint64_t *)(*a4 + 32);
  while (1)
  {
    uint64_t v17 = *v16;
    v16 += 3;
    if (v17 == a1) {
      break;
    }
    if (v15 == ++v11) {
      return;
    }
  }
  a4[1] = a1;
  a4[2] = v11;
  *((unsigned char *)a4 + 24) = 0;
  *a5 = 1;
  uint64_t v12 = *a4;
LABEL_14:
  if (v11 >= *(void *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v18 = v12 + 24 * v11;
  uint64_t v20 = *(void *)(v18 + 40);
  uint64_t v21 = *(void *)(v18 + 48);
  int v19 = a6;
  *a5 = (_DynamicPropertyBuffer.update(container:phase:)(a3, &v19) | *a5) & 1;
}

uint64_t type metadata completion function for CombinedKeyframes()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AnimatablePair<A, B>()
{
  return swift_getWitnessTable();
}

double Alignment.fraction.getter(unint64_t a1, unint64_t a2)
{
  AlignmentKey.fraction.getter(a1);
  double v4 = v3;
  AlignmentKey.fraction.getter(a2);
  return v4;
}

uint64_t AlignmentKey.fraction.getter(unint64_t a1)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  unint64_t v2 = static LayoutComputer.defaultValue;
  uint64_t v3 = *(void *)algn_26B0F4178;
  uint64_t v4 = one-time initialization token for _typeCache;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  BOOL v5 = static AlignmentKey._typeCache;
  char v6 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v6);
  uint64_t v7 = v5[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v6);
  uint64_t result = swift_release();
  if (a1 < 2)
  {
    __break(1u);
  }
  else if (a1 >> 1 <= *(void *)(v7 + 16))
  {
    uint64_t v9 = v7 + 16 * (a1 >> 1);
    uint64_t v10 = *(void *)(v9 + 16);
    uint64_t v11 = *(void *)(v9 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17[0] = v2;
    v17[1] = v3;
    __asm { FMOV            V0.2D, #1.0 }
    long long v18 = _Q0;
    long long v19 = _Q0;
    (*(void (**)(void *, uint64_t, uint64_t))(v11 + 8))(v17, v10, v11);
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t static Font.body.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for body);
}

ValueMetadata *type metadata accessor for TapGesture()
{
  return &type metadata for TapGesture;
}

uint64_t type metadata completion function for StoredLocationBase()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for Environment.Content()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for GestureMask()
{
  return &type metadata for GestureMask;
}

uint64_t associated type witness table accessor for DerivedPropertyKey.Value : Equatable in DerivedEnvironmentPropertyKey<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for ViewGraphFeatureBuffer._VTable()
{
  return swift_initClassMetadata2();
}

uint64_t Bindable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ViewOutputs.layoutComputer.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *(_DWORD *)(v1 + 12) = v2;
  int v3 = *(_DWORD *)(v1 + 8);
  if ((v3 & 0x80) == 0) {
    *(_DWORD *)(v1 + 8) = v3 | 0x80;
  }
  return result;
}

uint64_t type metadata completion function for ColorBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for MergedKeyframeTrackContent()
{
  return swift_getGenericMetadata();
}

uint64_t key path setter for EnvironmentValues.symbolFont : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6 = swift_retain();
  a5(v6);

  return swift_release();
}

uint64_t type metadata accessor for EventBindingManager()
{
  return self;
}

__n128 __swift_memcpy29_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

void static Text.LineStyle.Pattern.solid.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t EnvironmentValues.layoutDirection.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized find<A>(_:key:)(v4);
    if (v5) {
      *a1 = *(unsigned char *)(v5 + 72);
    }
    else {
      *a1 = 0;
    }
  }
  return swift_release_n();
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (a1)
  {
    if (v6 == *(void *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(v5 + 32);
      if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v22);
        outlined init with take of ScrollStateRequest(v22, (uint64_t)v23);
        uint64_t v12 = v24;
        char v13 = v25;
        __swift_project_boxed_opaque_existential_1(v23, v24);
        ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for LayoutDirection, v12, v13);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      }
      else
      {
        uint64_t v17 = swift_retain();
        uint64_t v18 = specialized find<A>(_:key:)(v17);
        if (v18) {
          char v19 = *(unsigned char *)(v18 + 72);
        }
        else {
          char v19 = 0;
        }
        *a2 = v19;
        swift_release();
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<LayoutDirectionKey>>();
        uint64_t v24 = v20;
        int v25 = &protocol witness table for TrackedValue<A>;
        LOBYTE(v23[0]) = v19;
        specialized Dictionary.subscript.setter((uint64_t)v23, v8);
      }
      goto LABEL_15;
    }
  }
  else if (!v6)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v5 + 56) = 1;
  uint64_t v14 = swift_retain();
  uint64_t v15 = specialized find<A>(_:key:)(v14);
  if (v15) {
    char v16 = *(unsigned char *)(v15 + 72);
  }
  else {
    char v16 = 0;
  }
  *a2 = v16;
  swift_release();
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    char v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for SymbolVariants, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *(_WORD *)a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolVariantsKey>>();
    uint64_t v21 = v17;
    char v22 = &protocol witness table for TrackedValue<A>;
    LOWORD(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<LayoutDirectionKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LayoutDirectionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LayoutDirectionKey>>);
    }
  }
}

uint64_t key path setter for EnvironmentValues.layoutDirection : EnvironmentValues(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.layoutDirection.setter(&v2);
}

uint64_t EnvironmentValues.layoutDirection.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<LayoutDirectionKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LayoutDirectionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LayoutDirectionKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for Animation()
{
  return &type metadata for Animation;
}

void static ScrollGeometry.rootViewTransform(contentOffset:containerSize:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(double *)(a1 + 64) = a4;
  *(double *)(a1 + 72) = a5;
  *(double *)(a1 + 80) = a2;
  *(double *)(a1 + 88) = a3;
  *(double *)(a1 + 96) = a4;
  *(double *)(a1 + 104) = a5;
}

uint64_t static Color.secondary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for secondary);
}

ValueMetadata *type metadata accessor for ColorRenderingMode()
{
  return &type metadata for ColorRenderingMode;
}

uint64_t static _TestApp.host.getter()
{
  return static _TestApp.host.getter();
}

{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

ValueMetadata *type metadata accessor for ScrapeableAttachmentViewModifier()
{
  return &type metadata for ScrapeableAttachmentViewModifier;
}

uint64_t static HorizontalAlignment.listRowSeparatorLeading.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for listRowSeparatorLeading, (uint64_t)&static HorizontalAlignment.listRowSeparatorLeading);
}

ValueMetadata *type metadata accessor for FillStyle()
{
  return &type metadata for FillStyle;
}

uint64_t key path setter for EnvironmentValues.contentTransition : EnvironmentValues(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 14);
  char v4 = *(unsigned char *)(a1 + 13);
  uint64_t v6 = *(void *)a1;
  char v8 = v1;
  int v7 = v2;
  char v9 = v4;
  char v10 = v3;
  outlined copy of ContentTransition.Storage(v6, v2 | (v1 << 32), v4);
  return EnvironmentValues.contentTransition.setter((uint64_t)&v6);
}

uint64_t EnvironmentValues.contentTransition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v11);
    swift_release_n();
    swift_release_n();
    uint64_t v4 = v11;
    unint64_t v5 = v12 | ((unint64_t)v13 << 32);
    char v6 = v14;
    char v7 = v15;
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v9 = specialized find<A>(_:key:)(v8);
    if (v9)
    {
      uint64_t v4 = *(void *)(v9 + 72);
      unint64_t v5 = *(unsigned int *)(v9 + 80) | ((unint64_t)*(unsigned __int8 *)(v9 + 84) << 32);
      char v6 = *(unsigned char *)(v9 + 85);
      char v7 = *(unsigned char *)(v9 + 86);
      outlined copy of ContentTransition.Storage(v4, v5, v6);
      swift_retain();
    }
    else
    {
      char v6 = 0;
      char v7 = 0;
      unint64_t v5 = 0x302000000;
      uint64_t v4 = 0x8000000000;
    }
    swift_release_n();
  }
  outlined copy of ContentTransition.Storage(v4, v5, v6);
  outlined consume of ContentTransition.Storage(v4, v5, v6);
  uint64_t result = swift_release();
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 12) = BYTE4(v5);
  *(_DWORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 13) = v6;
  *(unsigned char *)(a1 + 14) = v7;
  return result;
}

uint64_t EnvironmentValues.contentTransition.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 13);
  int v21 = *(unsigned __int8 *)(a1 + 14);
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  unint64_t v19 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  uint64_t v20 = *(void *)a1;
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v5, (uint64_t)&v22);
    swift_release_n();
    swift_release_n();
    uint64_t v6 = v22;
    unint64_t v7 = v23 | ((unint64_t)v24 << 32);
    char v8 = v25;
    uint64_t v9 = v26;
    uint64_t v10 = v27;
    int v11 = v28;
  }
  else
  {
    uint64_t v12 = swift_retain_n();
    uint64_t v13 = specialized find<A>(_:key:)(v12);
    if (v13)
    {
      uint64_t v6 = *(void *)(v13 + 72);
      unint64_t v7 = *(unsigned int *)(v13 + 80) | ((unint64_t)*(unsigned __int8 *)(v13 + 84) << 32);
      char v8 = *(unsigned char *)(v13 + 85);
      uint64_t v18 = *(unsigned __int8 *)(v13 + 87);
      uint64_t v10 = *(void *)(v13 + 88);
      int v11 = *(_DWORD *)(v13 + 96);
      outlined copy of ContentTransition.Storage(v6, v7, v8);
      swift_retain();
    }
    else
    {
      char v8 = 0;
      uint64_t v18 = 0;
      uint64_t v10 = 0;
      int v11 = 0;
      unint64_t v7 = 0x302000000;
      uint64_t v6 = 0x8000000000;
    }
    swift_release_n();
    uint64_t v9 = v18;
  }
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v20, v19, v3);
  uint64_t v14 = 0x1000000000000;
  if (!v21) {
    uint64_t v14 = 0;
  }
  unint64_t v15 = v19 & 0xFFFFFFFFFFLL | (v3 << 40) | v14 | (v9 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v20, v15, v10, v11);
  swift_release();
  outlined consume of ContentTransition.Storage(v20, v19, v3);
  swift_release();
  if (v4)
  {
    uint64_t v16 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v16);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v20, v19, v3);
  return swift_release();
}

uint64_t specialized InterpolatedDisplayList.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v172 = *MEMORY[0x263EF8340];
  uint64_t v142 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v140 = *(void *)(v142 - 8);
  MEMORY[0x270FA5388](v142);
  uint64_t v139 = (uint64_t)&v139 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v3 = *(_DWORD *)(v0 + 80);
  int v4 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v3 != v4)
  {
    *(_DWORD *)(v0 + 80) = v4;
    swift_release();
    *(void *)(v0 + 56) = 0;
    *(void *)(v0 + 88) = 0;
    uint64_t v5 = *(void (**)(uint64_t))(**(void **)v0 + 88);
    uint64_t v6 = swift_retain();
    v5(v6);
    swift_release();
  }
  unint64_t v7 = &v164;
  type metadata accessor for ResolvedStyledText();
  Value = (uint64_t *)AGGraphGetValue();
  char v10 = v9;
  uint64_t v11 = *Value;
  type metadata accessor for CGSize(0);
  uint64_t v12 = (double *)AGGraphGetValue();
  double v13 = *v12;
  double v14 = v12[1];
  unint64_t v15 = (uint64_t *)AGGraphGetValue();
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v145 = v11;
  uint64_t v143 = v16;
  uint64_t v141 = v17;
  if (v17)
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, (uint64_t)&v164);
    swift_release_n();
  }
  else
  {
    swift_retain_n();
    swift_retain();
    uint64_t v18 = specialized find<A>(_:key:)(v16);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      unint64_t v20 = *(unsigned int *)(v18 + 80) | ((unint64_t)*(unsigned __int8 *)(v18 + 84) << 32);
      char v21 = *(unsigned char *)(v18 + 85);
      char v22 = *(unsigned char *)(v18 + 86);
      unsigned __int8 v23 = *(unsigned char *)(v18 + 87);
      uint64_t v24 = *(void *)(v18 + 88);
      int v25 = *(_DWORD *)(v18 + 96);
      outlined copy of ContentTransition.Storage(v19, v20, v21);
      swift_retain();
    }
    else
    {
      char v21 = 0;
      char v22 = 0;
      unsigned __int8 v23 = 0;
      uint64_t v24 = 0;
      int v25 = 0;
      unint64_t v20 = 0x302000000;
      uint64_t v19 = 0x8000000000;
    }
    unint64_t v164 = v19;
    unsigned int v165 = v20;
    unsigned __int8 v166 = BYTE4(v20);
    unsigned __int8 v167 = v21;
    char v168 = v22;
    unsigned __int8 v169 = v23;
    uint64_t v170 = v24;
    unint64_t v7 = &v164;
    int v171 = v25;
    swift_release();
    uint64_t v11 = v145;
  }
  swift_release_n();
  uint64_t v26 = ++static DisplayList.Version.lastValue;
  uint64_t v27 = *(void *)(v1 + 56);
  uint64_t v146 = static DisplayList.Version.lastValue;
  if (v27)
  {
    if ((v10 & 1) == 0 || v11 == v27)
    {
      swift_retain();
    }
    else
    {
      if ((*(_WORD *)(v27 + 260) & 0x80) == 0
        || (int v28 = *(void **)(v27 + 216)) == 0
        || (int v29 = *(void **)(v11 + 216)) == 0)
      {
        swift_retain();
        goto LABEL_24;
      }
      v151 = 0;
      swift_retain();
      swift_retain();
      id v30 = v28;
      unint64_t v31 = v29;
      id v144 = objc_msgSend(v30, sel_length);
      char v32 = (void *)swift_allocObject();
      _OWORD v32[2] = &v151;
      int v32[3] = v31;
      v32[4] = v30;
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = partial apply for closure #1 in ResolvedStyledText.requiresTransition(to:);
      *(void *)(v33 + 24) = v32;
      *(void *)&long long v154 = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
      *((void *)&v154 + 1) = v33;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v153 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      *((void *)&v153 + 1) = &block_descriptor_1;
      uint64_t v34 = _Block_copy(&aBlock);
      id v35 = v30;
      uint64_t v36 = (uint64_t)(id)v31;
      swift_retain();
      swift_release();
      objc_msgSend(v35, sel_enumerateAttributesInRange_options_usingBlock_, 0, v144, 0, v34);
      _Block_release(v34);
      LOBYTE(v34) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v34) {
        goto LABEL_152;
      }
      id v37 = v151;
      id v38 = objc_msgSend((id)v36, sel_length);
      uint64_t v39 = v145;
      swift_release();
      swift_release();

      BOOL v40 = v37 == v38;
      uint64_t v11 = v39;
      uint64_t v26 = v146;
      if (!v40)
      {
LABEL_24:
        AGGraphGetValue();
        uint64_t v41 = swift_retain();
        uint64_t v42 = specialized find<A>(_:key:)(v41);
        if (v42)
        {
          char v43 = *(unsigned char *)(v42 + 72);
          swift_release();
          if (v43)
          {
LABEL_26:
            swift_release();
            goto LABEL_27;
          }
        }
        else
        {
          swift_release();
        }
        *(void *)(v1 + 88) = v26;
        if (v167) {
          goto LABEL_97;
        }
        uint64_t v36 = v164;
        unint64_t v31 = v165 | ((unint64_t)v166 << 32);
        if (((v164 >> 38) & 3) > 1)
        {
          switch(v164)
          {
            case 0x8000000001uLL:
              break;
            case 0x8000000002uLL:
            case 0x8000000003uLL:
            case 0x8000000004uLL:
              outlined copy of ContentTransition.Storage(v164, v165 | ((unint64_t)v166 << 32), 0);
              uint64_t v108 = v31;
              goto LABEL_95;
            default:
              outlined copy of ContentTransition.Storage(v164, v165 | ((unint64_t)v166 << 32), 0);
              if (one-time initialization token for v4 == -1) {
                goto LABEL_86;
              }
              goto LABEL_153;
          }
        }
        outlined copy of ContentTransition.Storage(v164, v165 | ((unint64_t)v166 << 32), 0);
        outlined copy of ContentTransition.Storage(v36, v31, 0);
        int v106 = v31;
        if ((v36 & 0x8000000000) == 0) {
          goto LABEL_97;
        }
        goto LABEL_96;
      }
    }
    if (*(double *)(v1 + 64) == v13 && *(double *)(v1 + 72) == v14) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  *(void *)(v1 + 88) = static DisplayList.Version.lastValue;
LABEL_27:
  swift_release();
  swift_release();
  id v144 = 0;
  unint64_t v44 = 0;
  uint64_t v170 = 0;
  uint64_t v36 = v164;
  unint64_t v45 = v165 | ((unint64_t)v166 << 32);
  LOBYTE(v46) = v167;
  while (1)
  {
    *(void *)(v1 + 56) = v11;
    *(double *)(v1 + 64) = v13;
    *(double *)(v1 + 72) = v14;
    if ((*(_WORD *)(v11 + 260) & 8) != 0) {
      int v47 = 33;
    }
    else {
      int v47 = v171 & 1 | 0x20;
    }
    uint64_t v48 = *(void *)v1;
    unint64_t v49 = *(void *)(v1 + 88);
    if (v49) {
      LODWORD(v49) = (2 * ((33 * (v49 >> 16)) ^ v49)) | 1;
    }
    LOWORD(v150) = v49;
    uint64_t v159 = v36;
    char v161 = BYTE4(v45);
    int v160 = v45;
    char v162 = v46;
    char v163 = v168;
    float v50 = 1.0 / *(double *)AGGraphGetValue();
    LOBYTE(aBlock) = 0;
    DWORD1(aBlock) = 0;
    BYTE8(aBlock) = 1;
    HIDWORD(aBlock) = v47;
    LOBYTE(v153) = 3;
    uint64_t v51 = *(unsigned __int8 *)(v1 + 54);
    int v52 = *(void (**)(double *, uint64_t *, unint64_t, id, long long *, uint64_t, float))(*(void *)v48 + 128);
    swift_retain();
    swift_retain();
    outlined copy of ContentTransition.Storage(v36, v45, v46);
    swift_retain();
    v52(&v150, &v159, v44, v144, &aBlock, v51, v50);
    swift_release();
    swift_release();
    outlined consume of ContentTransition.Storage(v36, v45, v46);
    uint64_t v53 = (double *)AGGraphGetValue();
    double v54 = *v53;
    double v55 = v53[1];
    int v56 = (double *)AGGraphGetValue();
    double v13 = v54 - *v56;
    double v14 = v55 - v56[1];
    double v57 = 0.0;
    double v58 = 0.0;
    double v59 = v14;
    double v60 = v13;
    if ((*(unsigned char *)(v1 + 52) & 1) == 0)
    {
      int v61 = (double *)AGGraphGetValue();
      double v62 = *v61;
      double v149 = v61[1];
      double v63 = *(double *)AGGraphGetValue();
      double v150 = v62 + v63 * 0.5;
      uint64_t v64 = *MEMORY[0x263F8E220];
      uint64_t v65 = v140;
      int v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v140 + 104);
      uint64_t v67 = v139;
      uint64_t v68 = v142;
      v66(v139, v64, v142);
      specialized FloatingPoint.round(_:toMultipleOf:)(v67, v63);
      v69 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v69(v67, v68);
      double v149 = v63 * 0.5 + v149;
      v66(v67, v64, v68);
      specialized FloatingPoint.round(_:toMultipleOf:)(v67, v63);
      v69(v67, v68);
      v70 = (double *)AGGraphGetValue();
      double v60 = v150 - *v70;
      double v59 = v149 - v70[1];
      double v58 = v60 - v13;
      double v57 = v59 - v14;
    }
    if (*(_DWORD *)(v1 + 48) == *MEMORY[0x263F288F8]) {
      break;
    }
    uint64_t v73 = AGGraphGetValue();
    uint64_t v36 = *(void *)v73;
    __int16 v71 = *(_WORD *)(v73 + 8);
    char v72 = *(unsigned char *)(v73 + 10);
    uint64_t v159 = *(void *)v73;
    LOWORD(v160) = v71;
    BYTE2(v160) = v72;
    if (*(unsigned char *)(v1 + 53))
    {
      swift_bridgeObjectRetain();
      goto LABEL_40;
    }
    uint64_t v77 = *(void *)v1;
    LODWORD(v142) = *(_DWORD *)(v1 + 32);
    swift_bridgeObjectRetain();
    if ((v71 & 0x10) == 0) {
      goto LABEL_82;
    }
    char v148 = 0;
    LOWORD(v160) = 0;
    BYTE2(v160) = 0;
    v78 = *(unint64_t **)(v36 + 16);
    if (!v78) {
      goto LABEL_82;
    }
    swift_retain();
    unint64_t v7 = 0;
    int v79 = 0;
    __int16 v80 = 0;
    uint64_t v81 = 100;
    uint64_t v139 = 100;
    while (1)
    {
      LODWORD(v140) = v79;
      uint64_t v1 = v81 + 72 * (void)v7;
LABEL_45:
      unint64_t v7 = (unint64_t *)((char *)v7 + 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v36 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v36);
      }
      unint64_t v31 = (unint64_t)v7 - 1;
      if ((unint64_t)v7 - 1 >= *(void *)(v36 + 16)) {
        break;
      }
      v82 = (_DWORD *)(v36 + v1);
      closure #1 in DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)(v36 + v1 - 68, v77, v142, v146, &v148, v60, v59, v58, v57);
      if (v31 >= *(void *)(v36 + 16)) {
        goto LABEL_150;
      }
      __int16 v83 = *((_WORD *)v82 - 2);
      char v84 = *((unsigned char *)v82 - 2);
      int v85 = *v82;
      long long v86 = *(_OWORD *)(v82 - 9);
      long long v87 = *(_OWORD *)(v82 - 5);
      long long v88 = *(_OWORD *)(v82 - 13);
      long long aBlock = *(_OWORD *)(v36 + v1 - 68);
      long long v153 = v88;
      long long v154 = v86;
      long long v155 = v87;
      char v157 = v84;
      __int16 v156 = v83;
      int v158 = v85;
      DisplayList.Item.features.getter(&v147);
      if (v31 >= *(void *)(v36 + 16)) {
        goto LABEL_151;
      }
      v80 |= v147;
      unint64_t v89 = *(void *)(v82 - 7);
      unint64_t v90 = *(void *)(v82 - 5);
      int v91 = *((unsigned __int16 *)v82 - 2) | (*((unsigned __int8 *)v82 - 2) << 16);
      switch(v90 >> 62)
      {
        case 1uLL:
          switch(BYTE4(v90))
          {
            case 2u:
              outlined copy of DisplayList.Effect(v89, v90, 2);
              int v93 = v89;
              break;
            case 7u:
              int v93 = *(unsigned __int8 *)(v89 + 26);
              outlined copy of DisplayList.Item.Value(v89, v90);
              outlined consume of DisplayList.Effect(v89, v90, 7);
              swift_bridgeObjectRelease();
              break;
            case 0x11u:
              (*(void (**)(long long *__return_ptr))(*(void *)v89 + 120))(&aBlock);
              outlined copy of DisplayList.Item.Value(v89, v90);
              outlined consume of DisplayList.Effect(v89, v90, 17);
              swift_bridgeObjectRelease();
              int v93 = aBlock;
              break;
            default:
              outlined copy of DisplayList.Effect(v89, v90, SBYTE4(v90));
              swift_bridgeObjectRetain();
              outlined consume of DisplayList.Effect(v89, v90, SBYTE4(v90));
              swift_bridgeObjectRelease();
              int v93 = 0;
              break;
          }
          unsigned int v94 = v93 | ((v91 & 0xFF0000u) >> 16);
          goto LABEL_72;
        case 2uLL:
          uint64_t v92 = *(void *)(v89 + 16);
          if (!v92) {
            goto LABEL_54;
          }
          int v95 = v140;
          uint64_t v81 = v139;
          if (v92 == 1)
          {
            uint64_t v96 = 0;
            unsigned int v94 = 0;
          }
          else
          {
            int v97 = 0;
            int v98 = 0;
            uint64_t v96 = v92 & 0x7FFFFFFFFFFFFFFELL;
            v99 = (unsigned __int8 *)(v89 + 106);
            uint64_t v100 = v92 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              int v101 = *(v99 - 40);
              int v102 = *v99;
              v99 += 80;
              v97 |= v101;
              v98 |= v102;
              v100 -= 2;
            }
            while (v100);
            unsigned int v94 = v98 | v97;
            if (v92 == v96) {
              goto LABEL_73;
            }
          }
          uint64_t v103 = v92 - v96;
          v104 = (unsigned __int8 *)(v89 + 40 * v96 + 66);
          do
          {
            int v105 = *v104;
            v104 += 40;
            v94 |= v105;
            --v103;
          }
          while (v103);
          goto LABEL_73;
        case 3uLL:
          goto LABEL_54;
        default:
          if (v89 >> 60 != 9)
          {
LABEL_54:
            if (v78 == v7)
            {
              LOBYTE(v79) = v140;
              goto LABEL_81;
            }
            v1 += 72;
            goto LABEL_45;
          }
          unsigned int v94 = *(unsigned __int8 *)((v89 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
LABEL_72:
          int v95 = v140;
          uint64_t v81 = v139;
LABEL_73:
          int v79 = v94 | v95;
          if (v78 == v7)
          {
LABEL_81:
            swift_release();
            uint64_t v159 = v36;
            BYTE2(v160) = v79;
            LOWORD(v160) = v80;
            goto LABEL_82;
          }
          break;
      }
    }
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    swift_once();
LABEL_86:
    unsigned int v109 = static Semantics.v4;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC)
    {
      int v110 = dyld_program_sdk_at_least();
      outlined consume of ContentTransition.Storage(v36, v31, 0);
    }
    else
    {
      unsigned int v111 = static Semantics.forced;
      outlined consume of ContentTransition.Storage(v36, v31, 0);
      int v110 = v111 >= v109;
    }
    LODWORD(v31) = 0;
    uint64_t v108 = 0x302000000;
    if (v110) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = 0x8000000001;
    }
    *unint64_t v7 = v36;
    unsigned int v165 = 0x2000000;
    unsigned __int8 v166 = 3;
    *(_WORD *)((char *)v7 + 13) = 256;
    uint64_t v11 = v145;
LABEL_95:
    int v106 = v31;
    outlined copy of ContentTransition.Storage(v36, v108, 0);
    unint64_t v31 = v108;
    if ((v36 & 0x8000000000) == 0)
    {
LABEL_97:
      ResolvedStyledText.modifyTransition(state:to:)((uint64_t)&v164, v11);
      uint64_t v36 = *v7;
      unint64_t v31 = v165 | ((unint64_t)v166 << 32);
      int v46 = v167;
      if (v167) {
        goto LABEL_102;
      }
      goto LABEL_98;
    }
LABEL_96:
    if (v36 ^ 0x8000000001 | *(void *)&v106 & 0xFFFFFFLL) {
      goto LABEL_97;
    }
LABEL_98:
    if ((v36 & 0x8000000000) != 0 && !(v36 ^ 0x8000000001 | v31 & 0xFFFFFF))
    {
      outlined copy of ContentTransition.Storage(v36, v31, 0);
      int v46 = 0;
LABEL_119:
      swift_release();
      id v144 = 0;
      unint64_t v44 = 0;
      v7[2] = 0;
      goto LABEL_123;
    }
    outlined copy of ContentTransition.Storage(v36, v31, 0);
    int v46 = 0;
LABEL_102:
    if (!AGGraphGetOutputValue()) {
      goto LABEL_119;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    unint64_t v44 = v7[2];
    if (!v44)
    {
      uint64_t v120 = swift_retain();
      uint64_t v121 = specialized find<A>(_:key:)(v120);
      if (!v121)
      {
        swift_release();
        uint64_t v11 = v145;
        goto LABEL_119;
      }
      unint64_t v44 = *(void *)(v121 + 72);
      swift_retain();
      swift_release();
      uint64_t v11 = v145;
      if (!v44) {
        goto LABEL_119;
      }
      v7[2] = v44;
    }
    uint64_t v112 = swift_retain();
    uint64_t v113 = specialized find<A>(_:key:)(v112);
    if (v113)
    {
      v114 = *(void **)(v113 + 72);
      swift_retain();
      swift_release();
      id v144 = v114;
      if (v114)
      {
        uint64_t v115 = swift_retain();
        uint64_t v116 = specialized find<A>(_:key:)(v115);
        if (v116)
        {
          uint64_t v117 = *(void *)(v116 + 72);
          swift_retain();
          swift_release();
          if (v117)
          {
            type metadata accessor for ListenerPair();
            unint64_t v118 = v31;
            uint64_t v119 = swift_allocObject();
            *(void *)(v119 + 16) = v144;
            *(void *)(v119 + 24) = v117;
            swift_release();
            id v144 = (id)v119;
            unint64_t v31 = v118;
          }
          else
          {
            swift_release();
          }
        }
        else
        {
          swift_release_n();
        }
        uint64_t v11 = v145;
        goto LABEL_123;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v122 = swift_retain();
    uint64_t v123 = specialized find<A>(_:key:)(v122);
    if (v123)
    {
      id v144 = *(id *)(v123 + 72);
      swift_retain();
    }
    else
    {
      id v144 = 0;
    }
    uint64_t v11 = v145;
    swift_release_n();
LABEL_123:
    unsigned int v124 = v169;
    if (v141)
    {
      unsigned int v125 = v169;
      unint64_t v126 = v31;
      uint64_t v127 = v143;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v127, &aBlock);
      swift_release_n();
      unint64_t v31 = v126;
      unsigned int v124 = v125;
      unint64_t v7 = &v164;
      swift_release_n();
      int v128 = aBlock;
    }
    else
    {
      uint64_t v129 = swift_retain_n();
      uint64_t v130 = specialized find<A>(_:key:)(v129);
      if (v130) {
        int v131 = *(unsigned __int8 *)(v130 + 72);
      }
      else {
        int v131 = 0;
      }
      LOBYTE(aBlock) = v131;
      swift_release_n();
      int v128 = v131 != 0;
    }
    if (v46)
    {
      if (v46 == 1)
      {
        swift_release_n();
        if (BYTE4(v31) == 2) {
          int v132 = v128;
        }
        else {
          int v132 = BYTE4(v31) & 1;
        }
        if (v132) {
          unint64_t v133 = 0x100000000;
        }
        else {
          unint64_t v133 = 0;
        }
        unint64_t v134 = HIDWORD(v133);
        unint64_t v45 = v133 & 0xFFFFFFFF00000000 | v31;
        *unint64_t v7 = v36;
        unsigned int v165 = v31;
        unsigned __int8 v166 = v134;
        unsigned __int8 v167 = 1;
      }
      else
      {
        swift_release_n();
        unint64_t v45 = v31;
      }
    }
    else
    {
      swift_release_n();
      if (BYTE4(v31) == 3) {
        uint64_t v135 = v124;
      }
      else {
        uint64_t v135 = BYTE4(v31);
      }
      if ((v31 & 0xFF000000) == 0x2000000) {
        int v136 = v128;
      }
      else {
        int v136 = (v31 >> 24) & 1;
      }
      BOOL v40 = v136 == 0;
      uint64_t v137 = 0x1000000;
      if (v40) {
        uint64_t v137 = 0;
      }
      unint64_t v138 = v137 & 0xFFFFFFFFFF000000 | v31 & 0xFFFFFF;
      *unint64_t v7 = v36;
      unsigned __int8 v166 = v135;
      unint64_t v45 = v138 | (v135 << 32);
      unsigned int v165 = v138;
      unsigned __int8 v167 = 0;
    }
  }
  uint64_t v36 = MEMORY[0x263F8EE78];
  uint64_t v159 = MEMORY[0x263F8EE78];
  LOWORD(v160) = 0;
  BYTE2(v160) = 0;
  if ((*(unsigned char *)(v1 + 53) & 1) == 0) {
    goto LABEL_82;
  }
  __int16 v71 = 0;
  char v72 = 0;
LABEL_40:
  uint64_t v74 = swift_allocObject();
  *(void *)(v74 + 16) = *(void *)v1;
  *(double *)(v74 + 24) = v60;
  *(double *)(v74 + 32) = v59;
  *(double *)(v74 + 40) = v58;
  *(double *)(v74 + 48) = v57;
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
  uint64_t v75 = swift_allocObject();
  *(_OWORD *)(v75 + 16) = xmmword_2461B9DC0;
  *(_OWORD *)(v75 + 32) = 0u;
  *(_OWORD *)(v75 + 48) = 0u;
  unint64_t v76 = v146;
  *(void *)(v75 + 64) = v146;
  *(void *)(v75 + 72) = v74;
  *(void *)(v75 + 80) = 0x4000001000000000;
  *(void *)(v75 + 88) = v36;
  *(unsigned char *)(v75 + 98) = v72;
  *(_WORD *)(v75 + 96) = v71;
  *(_DWORD *)(v75 + 100) = 0;
  outlined copy of DisplayList.Effect(v74, 0, 16);
  swift_bridgeObjectRetain();
  outlined copy of DisplayList.Effect(v74, 0, 16);
  swift_retain();
  swift_release();
  long long v153 = 0u;
  long long aBlock = 0u;
  *(void *)&long long v154 = v76;
  *((void *)&v154 + 1) = v74;
  *(void *)&long long v155 = 0x4000001000000000;
  *((void *)&v155 + 1) = v36;
  char v157 = v72;
  __int16 v156 = v71;
  int v158 = 0;
  DisplayList.Item.properties.getter((unsigned char *)&v160 + 2);
  outlined consume of DisplayList.Effect(v74, 0, 16);
  swift_bridgeObjectRelease();
  uint64_t v159 = v75;
  LOWORD(v160) = v71 | 0x20;
LABEL_82:
  *(void *)&long long aBlock = v146;
  DisplayList.translate(by:version:)((CGSize)__PAIR128__(*(unint64_t *)&v14, *(unint64_t *)&v13), (SwiftUI::DisplayList::Version)&aBlock);
  *(void *)&long long aBlock = v159;
  WORD4(aBlock) = v160;
  BYTE10(aBlock) = BYTE2(v160);
  AGGraphSetOutputValue();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ContentTransition.Storage(v164, v165 | ((unint64_t)v166 << 32), v167);
  return swift_release();
}

{
  unint64_t v0;
  unint64_t v1;
  long long *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  long long *v8;
  uint64_t Value;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  int v20;
  double *v21;
  double v22;
  double v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned __int8 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  int v52;
  uint64_t *v53;
  unint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(double *, _OWORD *, uint64_t, uint64_t, long long *, uint64_t, float);
  uint64_t v59;
  double *v60;
  double v61;
  double v62;
  double *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double *v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, unint64_t);
  char *v74;
  void (*v75)(char *, unint64_t);
  double *v76;
  void *v77;
  __int16 v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  __int16 v88;
  char v89;
  int v90;
  long long v91;
  long long v92;
  long long v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned __int8 *v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t v111;
  unint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t OutputValue;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  BOOL v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unsigned __int16 v156;
  char v157;
  double v158;
  double v159;
  _OWORD v160[10];
  _OWORD v161[2];
  _OWORD v162[10];
  _OWORD v163[2];
  long long v164;
  long long v165;
  long long v166;
  long long v167;
  long long v168;
  long long v169;
  long long v170;
  long long v171;
  long long v172;
  long long v173;
  _OWORD v174[2];
  _OWORD v175[10];
  _OWORD v176[2];
  unsigned char v177[184];
  unsigned char v178[184];
  unint64_t v179;
  unsigned int v180;
  unsigned __int8 v181;
  __int16 v182;
  unsigned __int8 v183;
  uint64_t v184;
  int v185;
  long long v186;
  long long v187;
  long long v188;
  long long v189;
  long long v190;
  long long v191;
  long long v192;
  long long v193;
  long long v194;
  long long v195;
  _OWORD v196[2];
  long long v197;
  long long v198;
  long long v199;
  long long v200;
  long long v201;
  long long v202;
  long long v203;
  long long v204;
  long long v205;
  long long v206;
  unsigned char v207[19];
  uint64_t v208;

  uint64_t v1 = v0;
  uint64_t v2 = &v197;
  v208 = *MEMORY[0x263EF8340];
  int v3 = type metadata accessor for FloatingPointRoundingRule();
  v151 = *(void *)(v3 - 8);
  v152 = v3;
  MEMORY[0x270FA5388](v3);
  char v148 = (char *)&v145 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(_DWORD *)(v0 + 256);
  if (v5 != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    *(_DWORD *)(v0 + 256) = *(_DWORD *)AGGraphGetValue() >> 1;
    outlined init with take of PlatformImageRepresentableContext?(v0 + 56, (uint64_t)&v186, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
    outlined release of Image.Resolved?((uint64_t)&v186, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v197);
    outlined init with take of PlatformImageRepresentableContext?((uint64_t)&v197, v0 + 56, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
    *(void *)(v0 + 264) = 0;
    uint64_t v6 = *(void (**)(uint64_t))(**(void **)v0 + 88);
    unint64_t v7 = swift_retain();
    v6(v7);
    swift_release();
  }
  char v8 = v175;
  Value = AGGraphGetValue();
  uint64_t v11 = v10;
  uint64_t v12 = *(_OWORD *)(Value + 48);
  double v14 = *(_OWORD *)Value;
  double v13 = *(_OWORD *)(Value + 16);
  v199 = *(_OWORD *)(Value + 32);
  v200 = v12;
  v197 = v14;
  v198 = v13;
  unint64_t v15 = *(_OWORD *)(Value + 112);
  uint64_t v17 = *(_OWORD *)(Value + 64);
  uint64_t v16 = *(_OWORD *)(Value + 80);
  v203 = *(_OWORD *)(Value + 96);
  v204 = v15;
  v201 = v17;
  v202 = v16;
  uint64_t v19 = *(_OWORD *)(Value + 144);
  uint64_t v18 = *(_OWORD *)(Value + 160);
  unint64_t v20 = *(_DWORD *)(Value + 175);
  v205 = *(_OWORD *)(Value + 128);
  *(_DWORD *)&v207[15] = v20;
  v206 = v19;
  *(_OWORD *)v207 = v18;
  v194 = *(_OWORD *)(Value + 128);
  v195 = *(_OWORD *)(Value + 144);
  v196[0] = *(_OWORD *)(Value + 160);
  *(_DWORD *)((char *)v196 + 15) = *(_DWORD *)(Value + 175);
  v190 = *(_OWORD *)(Value + 64);
  v191 = *(_OWORD *)(Value + 80);
  v192 = *(_OWORD *)(Value + 96);
  v193 = *(_OWORD *)(Value + 112);
  v186 = *(_OWORD *)Value;
  v187 = *(_OWORD *)(Value + 16);
  v188 = *(_OWORD *)(Value + 32);
  v189 = *(_OWORD *)(Value + 48);
  type metadata accessor for CGSize(0);
  char v21 = (double *)AGGraphGetValue();
  char v22 = *v21;
  unsigned __int8 v23 = v21[1];
  uint64_t v24 = (uint64_t *)AGGraphGetValue();
  int v25 = *v24;
  double v149 = v24[1];
  double v150 = v25;
  if (v149)
  {
    swift_retain_n();
    swift_retain_n();
    outlined retain of Image.Resolved((uint64_t)&v197);
    swift_retain();
    uint64_t v26 = swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v26, (uint64_t)&v179);
    swift_release_n();
  }
  else
  {
    long long v155 = v11;
    uint64_t v27 = v0;
    swift_retain_n();
    outlined retain of Image.Resolved((uint64_t)&v197);
    int v28 = swift_retain();
    int v29 = specialized find<A>(_:key:)(v28);
    if (v29)
    {
      uint64_t v11 = *(void *)(v29 + 72);
      id v30 = *(unsigned int *)(v29 + 80) | ((unint64_t)*(unsigned __int8 *)(v29 + 84) << 32);
      unint64_t v31 = *(unsigned char *)(v29 + 85);
      char v32 = *(unsigned char *)(v29 + 86);
      uint64_t v33 = *(unsigned char *)(v29 + 87);
      uint64_t v34 = *(void *)(v29 + 88);
      id v35 = *(_DWORD *)(v29 + 96);
      outlined copy of ContentTransition.Storage(v11, v30, v31);
      swift_retain();
    }
    else
    {
      unint64_t v31 = 0;
      char v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      id v35 = 0;
      id v30 = 0x302000000;
      uint64_t v11 = 0x8000000000;
    }
    v179 = v11;
    v180 = v30;
    v181 = BYTE4(v30);
    LOBYTE(v182) = v31;
    HIBYTE(v182) = v32;
    v183 = v33;
    v184 = v34;
    v185 = v35;
    swift_release();
    uint64_t v1 = v27;
    uint64_t v2 = &v197;
    LOBYTE(v11) = v155;
  }
  swift_release_n();
  uint64_t v36 = ++static DisplayList.Version.lastValue;
  long long v153 = v1 + 56;
  outlined init with take of PlatformImageRepresentableContext?(v1 + 56, (uint64_t)v177, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
  outlined init with take of PlatformImageRepresentableContext?((uint64_t)v177, (uint64_t)v178, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
  id v37 = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v178);
  long long v155 = v36;
  if (v37 != 1)
  {
    outlined init with take of PlatformImageRepresentableContext?((uint64_t)v177, (uint64_t)&v164, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
    v175[8] = v172;
    v175[9] = v173;
    v176[0] = v174[0];
    *(_DWORD *)((char *)v176 + 15) = *(_DWORD *)((char *)v174 + 15);
    v175[4] = v168;
    v175[5] = v169;
    v175[6] = v170;
    v175[7] = v171;
    v175[0] = v164;
    v175[1] = v165;
    v175[2] = v166;
    v175[3] = v167;
    if ((v11 & 1) == 0) {
      goto LABEL_16;
    }
    v162[8] = v205;
    v162[9] = v206;
    v163[0] = *(_OWORD *)v207;
    v162[4] = v201;
    v162[5] = v202;
    v162[6] = v203;
    v162[7] = v204;
    v162[0] = v197;
    v162[1] = v198;
    v162[2] = v199;
    v162[3] = v200;
    v160[9] = v173;
    v161[0] = v174[0];
    v160[4] = v168;
    v160[5] = v169;
    v160[6] = v170;
    *(_DWORD *)((char *)v163 + 15) = *(_DWORD *)&v207[15];
    *(_DWORD *)((char *)v161 + 15) = *(_DWORD *)((char *)v174 + 15);
    v160[7] = v171;
    v160[8] = v172;
    v160[0] = v164;
    v160[1] = v165;
    v160[2] = v166;
    v160[3] = v167;
    outlined release of Image.Resolved?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
    if (!specialized static Image.Resolved.== infix(_:_:)((uint64_t)v160, (uint64_t)v162))
    {
      AGGraphGetValue();
      id v38 = swift_retain();
      uint64_t v39 = specialized find<A>(_:key:)(v38);
      if (v39)
      {
        BOOL v40 = *(unsigned char *)(v39 + 72);
        swift_release();
        if (v40) {
          goto LABEL_15;
        }
      }
      else
      {
        swift_release();
      }
      *(void *)(v1 + 264) = v155;
      if (!(_BYTE)v182)
      {
        unsigned int v111 = v179;
        uint64_t v112 = v180 | ((unint64_t)v181 << 32);
        if (((v179 >> 38) & 3) > 1)
        {
          switch(v179)
          {
            case 0x8000000001uLL:
              goto LABEL_69;
            case 0x8000000002uLL:
            case 0x8000000003uLL:
            case 0x8000000004uLL:
              outlined copy of ContentTransition.Storage(v179, v180 | ((unint64_t)v181 << 32), 0);
              v114 = v112;
              goto LABEL_87;
            default:
              long long v154 = v179;
              outlined copy of ContentTransition.Storage(v179, v180 | ((unint64_t)v181 << 32), 0);
              if (one-time initialization token for v4 != -1) {
                swift_once();
              }
              unint64_t v44 = v112;
              LODWORD(v86) = static Semantics.v4;
              if (one-time initialization token for forced != -1) {
                swift_once();
              }
              swift_beginAccess();
              if ((byte_26B0F44FC & 1) == 0) {
                goto LABEL_82;
              }
              uint64_t v115 = dyld_program_sdk_at_least();
              break;
          }
          goto LABEL_83;
        }
LABEL_69:
        outlined copy of ContentTransition.Storage(v179, v180 | ((unint64_t)v181 << 32), 0);
        outlined copy of ContentTransition.Storage(v111, v112, 0);
        uint64_t v113 = v112;
        if ((v111 & 0x8000000000) != 0) {
          goto LABEL_88;
        }
      }
      goto LABEL_66;
    }
LABEL_15:
    outlined release of Image.Resolved?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    goto LABEL_16;
  }
  *(void *)(v1 + 264) = v36;
LABEL_16:
  swift_release();
  outlined release of Image.Resolved?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
  long long v154 = 0;
  uint64_t v42 = 0;
  v184 = 0;
  char v43 = v179;
  unint64_t v44 = v180 | ((unint64_t)v181 << 32);
  LOBYTE(v45) = v182;
  while (1)
  {
    int v46 = v153;
    int v47 = v2[9];
    v8[8] = v2[8];
    v8[9] = v47;
    v8[10] = v2[10];
    *(_DWORD *)((char *)v8 + 175) = *(_DWORD *)((char *)v2 + 175);
    uint64_t v48 = v2[5];
    v8[4] = v2[4];
    v8[5] = v48;
    unint64_t v49 = v2[7];
    v8[6] = v2[6];
    v8[7] = v49;
    float v50 = v2[1];
    *char v8 = *v2;
    v8[1] = v50;
    uint64_t v51 = v2[3];
    unint64_t v8[2] = v2[2];
    void v8[3] = v51;
    _ViewInputs.base.modify(v175, v41);
    outlined init with take of PlatformImageRepresentableContext?((uint64_t)v175, v46, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
    *(double *)(v1 + 240) = v22;
    *(double *)(v1 + 248) = v23;
    int v52 = v185 & 1 | 0x20;
    uint64_t v53 = *(uint64_t **)v1;
    double v54 = *(void *)(v1 + 264);
    if (v54) {
      LODWORD(v54) = (2 * ((33 * (v54 >> 16)) ^ v54)) | 1;
    }
    LOWORD(v159) = v54;
    *(void *)&v160[0] = v43;
    BYTE12(v160[0]) = BYTE4(v44);
    DWORD2(v160[0]) = v44;
    BYTE13(v160[0]) = v45;
    BYTE14(v160[0]) = HIBYTE(v182);
    LODWORD(v147) = *(_DWORD *)(v1 + 44);
    double v55 = 1.0 / *(double *)AGGraphGetValue();
    LOBYTE(v164) = 0;
    DWORD1(v164) = 0;
    BYTE8(v164) = 1;
    HIDWORD(v164) = v52;
    LOBYTE(v165) = 3;
    int v56 = *(unsigned __int8 *)(v1 + 54);
    double v57 = *v53;
    long long v153 = v1;
    double v58 = *(void (**)(double *, _OWORD *, uint64_t, uint64_t, long long *, uint64_t, float))(v57 + 128);
    outlined retain of Image.Resolved((uint64_t)&v197);
    swift_retain();
    outlined copy of ContentTransition.Storage(v43, v44, v45);
    swift_retain();
    v58(&v159, v160, v42, v154, &v164, v56, v55);
    double v59 = v153;
    swift_release();
    swift_release();
    outlined consume of ContentTransition.Storage(v43, v44, v45);
    double v60 = (double *)AGGraphGetValue();
    int v61 = *v60;
    double v62 = v60[1];
    double v63 = (double *)AGGraphGetValue();
    char v22 = v61 - *v63;
    unsigned __int8 v23 = v62 - v63[1];
    uint64_t v64 = 0.0;
    uint64_t v65 = 0.0;
    int v66 = v23;
    uint64_t v67 = v22;
    if ((*(unsigned char *)(v59 + 52) & 1) == 0)
    {
      uint64_t v68 = (double *)AGGraphGetValue();
      v69 = *v68;
      int v158 = v68[1];
      v70 = *(double *)AGGraphGetValue();
      uint64_t v159 = v69 + v70 * 0.5;
      __int16 v71 = *MEMORY[0x263F8E220];
      char v72 = v151;
      unint64_t v44 = v152;
      uint64_t v73 = *(void (**)(char *, uint64_t, unint64_t))(v151 + 104);
      uint64_t v74 = v148;
      v73(v148, v71, v152);
      specialized FloatingPoint.round(_:toMultipleOf:)(v74, v70);
      uint64_t v75 = *(void (**)(char *, unint64_t))(v72 + 8);
      v75(v74, v44);
      int v158 = v70 * 0.5 + v158;
      v73(v74, v71, v44);
      specialized FloatingPoint.round(_:toMultipleOf:)(v74, v70);
      v75(v74, v44);
      double v59 = v153;
      unint64_t v76 = (double *)AGGraphGetValue();
      uint64_t v67 = v159 - *v76;
      int v66 = v158 - v76[1];
      uint64_t v65 = v67 - v22;
      uint64_t v64 = v66 - v23;
    }
    if (*(_DWORD *)(v59 + 48) == *MEMORY[0x263F288F8]) {
      break;
    }
    __int16 v80 = AGGraphGetValue();
    uint64_t v77 = *(void **)v80;
    v78 = *(_WORD *)(v80 + 8);
    int v79 = *(unsigned char *)(v80 + 10);
    *(void *)&v160[0] = *(void *)v80;
    WORD4(v160[0]) = v78;
    BYTE10(v160[0]) = v79;
    if (*(unsigned char *)(v59 + 53))
    {
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    long long v153 = *(void *)v59;
    LODWORD(v152) = *(_DWORD *)(v59 + 32);
    swift_bridgeObjectRetain();
    if ((v78 & 0x10) == 0) {
      goto LABEL_63;
    }
    char v157 = 0;
    WORD4(v160[0]) = 0;
    BYTE10(v160[0]) = 0;
    v151 = v77[2];
    if (!v151) {
      goto LABEL_63;
    }
    swift_retain();
    uint64_t v2 = 0;
    char v84 = 0;
    char v8 = 0;
    int v85 = 100;
    __int16 v147 = 100;
    while (1)
    {
      LODWORD(v148) = v84;
      long long v86 = v85 + 72 * (void)v2;
LABEL_31:
      uint64_t v2 = (long long *)((char *)v2 + 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew()(v77);
      }
      uint64_t v1 = (unint64_t)v2 - 1;
      if ((unint64_t)v2 - 1 >= v77[2]) {
        break;
      }
      long long v87 = (_DWORD *)((char *)v77 + v86);
      closure #1 in DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((unint64_t)v77 + v86 - 68, v153, v152, v155, &v157, v67, v66, v65, v64);
      if (v1 >= v77[2]) {
        goto LABEL_80;
      }
      long long v88 = *((_WORD *)v87 - 2);
      unint64_t v89 = *((unsigned char *)v87 - 2);
      unint64_t v90 = *v87;
      int v91 = *(_OWORD *)(v87 - 9);
      uint64_t v92 = *(_OWORD *)(v87 - 5);
      int v93 = *(_OWORD *)(v87 - 13);
      unint64_t v164 = *(_OWORD *)((char *)v77 + v86 - 68);
      unsigned int v165 = v93;
      unsigned __int8 v166 = v91;
      unsigned __int8 v167 = v92;
      BYTE2(v168) = v89;
      LOWORD(v168) = v88;
      DWORD1(v168) = v90;
      DisplayList.Item.features.getter((__int16 *)&v156);
      if (v1 >= v77[2]) {
        goto LABEL_81;
      }
      char v8 = (long long *)(v156 | v8);
      unsigned int v94 = *(void *)(v87 - 7);
      unint64_t v44 = *(void *)(v87 - 5);
      int v95 = *((unsigned __int16 *)v87 - 2) | (*((unsigned __int8 *)v87 - 2) << 16);
      switch(v44 >> 62)
      {
        case 1uLL:
          switch(BYTE4(v44))
          {
            case 2u:
              outlined copy of DisplayList.Effect(v94, v44, 2);
              int v97 = v94;
              break;
            case 7u:
              int v97 = *(unsigned __int8 *)(v94 + 26);
              outlined copy of DisplayList.Item.Value(v94, v44);
              outlined consume of DisplayList.Effect(v94, v44, 7);
              swift_bridgeObjectRelease();
              break;
            case 0x11u:
              (*(void (**)(long long *__return_ptr))(*(void *)v94 + 120))(&v164);
              outlined copy of DisplayList.Item.Value(v94, v44);
              outlined consume of DisplayList.Effect(v94, v44, 17);
              swift_bridgeObjectRelease();
              int v97 = v164;
              break;
            default:
              outlined copy of DisplayList.Effect(v94, v44, SBYTE4(v44));
              swift_bridgeObjectRetain();
              outlined consume of DisplayList.Effect(v94, v44, SBYTE4(v44));
              swift_bridgeObjectRelease();
              int v97 = 0;
              break;
          }
          int v98 = v97 | ((v95 & 0xFF0000u) >> 16);
          goto LABEL_58;
        case 2uLL:
          uint64_t v96 = *(void *)(v94 + 16);
          if (!v96) {
            goto LABEL_40;
          }
          v99 = (int)v148;
          int v85 = v147;
          if (v96 == 1)
          {
            uint64_t v100 = 0;
            int v98 = 0;
          }
          else
          {
            int v101 = 0;
            int v102 = 0;
            uint64_t v100 = v96 & 0x7FFFFFFFFFFFFFFELL;
            uint64_t v103 = (unsigned __int8 *)(v94 + 106);
            v104 = v96 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              int v105 = *(v103 - 40);
              int v106 = *v103;
              v103 += 80;
              v101 |= v105;
              v102 |= v106;
              v104 -= 2;
            }
            while (v104);
            int v98 = v102 | v101;
            if (v96 == v100) {
              goto LABEL_59;
            }
          }
          v107 = v96 - v100;
          uint64_t v108 = (unsigned __int8 *)(v94 + 40 * v100 + 66);
          do
          {
            unsigned int v109 = *v108;
            v108 += 40;
            v98 |= v109;
            --v107;
          }
          while (v107);
          goto LABEL_59;
        case 3uLL:
          goto LABEL_40;
        default:
          if (v94 >> 60 != 9)
          {
LABEL_40:
            if ((long long *)v151 == v2)
            {
              LOBYTE(v84) = (_BYTE)v148;
              goto LABEL_62;
            }
            v86 += 72;
            goto LABEL_31;
          }
          int v98 = *(unsigned __int8 *)((v94 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
LABEL_58:
          v99 = (int)v148;
          int v85 = v147;
LABEL_59:
          char v84 = v98 | v99;
          if ((long long *)v151 == v2)
          {
LABEL_62:
            swift_release();
            *(void *)&v160[0] = v77;
            BYTE10(v160[0]) = v84;
            WORD4(v160[0]) = (_WORD)v8;
            goto LABEL_63;
          }
          break;
      }
    }
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    uint64_t v115 = static Semantics.forced >= v86;
LABEL_83:
    uint64_t v112 = 0x302000000;
    if (v115) {
      uint64_t v116 = 0x8000000003;
    }
    else {
      uint64_t v116 = 0x8000000001;
    }
    outlined copy of ContentTransition.Storage(v116, 0x302000000, 0);
    outlined consume of ContentTransition.Storage(v154, v44, 0);
    v114 = 0;
    *((void *)v8 + 70) = v116;
    v181 = 3;
    v180 = 0x2000000;
    v182 = 256;
    unsigned int v111 = v116;
LABEL_87:
    uint64_t v113 = v114;
    outlined copy of ContentTransition.Storage(v111, v112, 0);
    if ((v111 & 0x8000000000) == 0)
    {
LABEL_66:
      Image.Resolved.modifyTransition(state:to:)((uint64_t)&v179, (uint64_t)&v186);
      unsigned int v111 = v179;
      uint64_t v112 = v180 | ((unint64_t)v181 << 32);
      unint64_t v45 = v182;
      if ((_BYTE)v182) {
        goto LABEL_93;
      }
      goto LABEL_89;
    }
LABEL_88:
    if (v111 ^ 0x8000000001 | *(void *)&v113 & 0xFFFFFFLL) {
      goto LABEL_66;
    }
LABEL_89:
    char v43 = v111;
    if ((v111 & 0x8000000000) != 0 && !(v111 ^ 0x8000000001 | v112 & 0xFFFFFF))
    {
      __int16 v147 = v112;
      outlined copy of ContentTransition.Storage(v111, v112, 0);
      unint64_t v45 = 0;
LABEL_101:
      swift_release();
      long long v154 = 0;
      uint64_t v42 = 0;
      v184 = 0;
      goto LABEL_116;
    }
    outlined copy of ContentTransition.Storage(v111, v112, 0);
    unint64_t v45 = 0;
LABEL_93:
    OutputValue = AGGraphGetOutputValue();
    __int16 v147 = v112;
    if (!OutputValue)
    {
      char v43 = v111;
      goto LABEL_101;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v42 = v184;
    if (!v184)
    {
      char v43 = v111;
      unsigned int v125 = swift_retain();
      unint64_t v126 = specialized find<A>(_:key:)(v125);
      if (!v126)
      {
        swift_release_n();
        long long v154 = 0;
        uint64_t v42 = 0;
LABEL_113:
        v184 = 0;
        goto LABEL_116;
      }
      uint64_t v42 = *(void *)(v126 + 72);
      swift_retain();
      swift_release();
      if (!v42)
      {
        swift_release();
        long long v154 = 0;
        goto LABEL_113;
      }
      v184 = v42;
    }
    unint64_t v118 = swift_retain();
    uint64_t v119 = specialized find<A>(_:key:)(v118);
    if (!v119)
    {
      swift_release();
LABEL_106:
      uint64_t v127 = swift_retain();
      int v128 = specialized find<A>(_:key:)(v127);
      if (v128)
      {
        long long v154 = *(void *)(v128 + 72);
        swift_retain();
      }
      else
      {
        long long v154 = 0;
      }
      char v43 = v111;
      swift_release_n();
      goto LABEL_116;
    }
    uint64_t v120 = *(void *)(v119 + 72);
    swift_retain();
    swift_release();
    long long v154 = v120;
    if (!v120) {
      goto LABEL_106;
    }
    uint64_t v121 = swift_retain();
    uint64_t v122 = specialized find<A>(_:key:)(v121);
    if (v122)
    {
      uint64_t v146 = v42;
      uint64_t v123 = *(void *)(v122 + 72);
      swift_retain();
      swift_release();
      char v43 = v111;
      if (v123)
      {
        type metadata accessor for ListenerPair();
        unsigned int v124 = swift_allocObject();
        *(void *)(v124 + 16) = v154;
        *(void *)(v124 + 24) = v123;
        swift_release();
        long long v154 = v124;
      }
      else
      {
        swift_release();
      }
      uint64_t v42 = v146;
    }
    else
    {
      swift_release_n();
      char v43 = v111;
    }
LABEL_116:
    LODWORD(v146) = v183;
    if (v149)
    {
      uint64_t v129 = v43;
      uint64_t v130 = v150;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v130, v160);
      swift_release_n();
      char v43 = v129;
      swift_release_n();
      int v131 = LOBYTE(v160[0]);
      int v132 = v147;
      if (v45) {
        goto LABEL_118;
      }
LABEL_131:
      HIDWORD(v145) = v131;
      outlined release of Image.Resolved?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
      outlined release of Image.Resolved?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
      if (BYTE4(v132) == 3) {
        uint64_t v140 = v146;
      }
      else {
        uint64_t v140 = BYTE4(v132);
      }
      uint64_t v2 = &v197;
      uint64_t v141 = HIDWORD(v145);
      if ((v132 & 0xFF000000) != 0x2000000) {
        uint64_t v141 = (v132 >> 24) & 1;
      }
      uint64_t v142 = v141 == 0;
      uint64_t v143 = 0x1000000;
      if (v142) {
        uint64_t v143 = 0;
      }
      id v144 = v143 & 0xFFFFFFFFFF000000 | v132 & 0xFFFFFF;
      v179 = v43;
      v181 = v140;
      unint64_t v44 = v144 | (v140 << 32);
      v180 = v144;
      LOBYTE(v182) = 0;
    }
    else
    {
      uint64_t v137 = swift_retain_n();
      unint64_t v138 = specialized find<A>(_:key:)(v137);
      if (v138) {
        uint64_t v139 = *(unsigned __int8 *)(v138 + 72);
      }
      else {
        uint64_t v139 = 0;
      }
      LOBYTE(v160[0]) = v139;
      swift_release_n();
      int v131 = v139 != 0;
      int v132 = v147;
      if (!v45) {
        goto LABEL_131;
      }
LABEL_118:
      if (v45 == 1)
      {
        unint64_t v133 = v131;
        outlined release of Image.Resolved?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
        outlined release of Image.Resolved?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
        if (BYTE4(v147) == 2) {
          unint64_t v134 = v133;
        }
        else {
          unint64_t v134 = BYTE4(v147) & 1;
        }
        if (v134) {
          uint64_t v135 = 0x100000000;
        }
        else {
          uint64_t v135 = 0;
        }
        int v136 = HIDWORD(v135);
        unint64_t v44 = v135 & 0xFFFFFFFF00000000 | v147;
        v179 = v43;
        v180 = v147;
        v181 = v136;
        LOBYTE(v182) = 1;
      }
      else
      {
        outlined release of Image.Resolved?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
        outlined release of Image.Resolved?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
        unint64_t v44 = v147;
      }
    }
  }
  uint64_t v77 = (void *)MEMORY[0x263F8EE78];
  *(void *)&v160[0] = MEMORY[0x263F8EE78];
  WORD4(v160[0]) = 0;
  BYTE10(v160[0]) = 0;
  if ((*(unsigned char *)(v59 + 53) & 1) == 0) {
    goto LABEL_63;
  }
  v78 = 0;
  int v79 = 0;
LABEL_26:
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = *(void *)v59;
  *(double *)(v81 + 24) = v67;
  *(double *)(v81 + 32) = v66;
  *(double *)(v81 + 40) = v65;
  *(double *)(v81 + 48) = v64;
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
  v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = xmmword_2461B9DC0;
  *(_OWORD *)(v82 + 32) = 0u;
  *(_OWORD *)(v82 + 48) = 0u;
  __int16 v83 = v155;
  *(void *)(v82 + 64) = v155;
  *(void *)(v82 + 72) = v81;
  *(void *)(v82 + 80) = 0x4000001000000000;
  *(void *)(v82 + 88) = v77;
  *(unsigned char *)(v82 + 98) = v79;
  *(_WORD *)(v82 + 96) = v78;
  *(_DWORD *)(v82 + 100) = 0;
  outlined copy of DisplayList.Effect(v81, 0, 16);
  swift_bridgeObjectRetain();
  outlined copy of DisplayList.Effect(v81, 0, 16);
  swift_retain();
  swift_release();
  unint64_t v164 = 0u;
  unsigned int v165 = 0u;
  *(void *)&unsigned __int8 v166 = v83;
  *((void *)&v166 + 1) = v81;
  *(void *)&unsigned __int8 v167 = 0x4000001000000000;
  *((void *)&v167 + 1) = v77;
  BYTE2(v168) = v79;
  LOWORD(v168) = v78;
  DWORD1(v168) = 0;
  DisplayList.Item.properties.getter((unsigned char *)v160 + 10);
  outlined consume of DisplayList.Effect(v81, 0, 16);
  swift_bridgeObjectRelease();
  *(void *)&v160[0] = v82;
  WORD4(v160[0]) = v78 | 0x20;
LABEL_63:
  *(void *)&unint64_t v164 = v155;
  DisplayList.translate(by:version:)((CGSize)__PAIR128__(*(unint64_t *)&v23, *(unint64_t *)&v22), (SwiftUI::DisplayList::Version)&v164);
  *(void *)&unint64_t v164 = *(void *)&v160[0];
  WORD4(v164) = WORD4(v160[0]);
  BYTE10(v164) = BYTE10(v160[0]);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v172 = v194;
  v173 = v195;
  v174[0] = v196[0];
  *(_DWORD *)((char *)v174 + 15) = *(_DWORD *)((char *)v196 + 15);
  char v168 = v190;
  unsigned __int8 v169 = v191;
  uint64_t v170 = v192;
  int v171 = v193;
  unint64_t v164 = v186;
  unsigned int v165 = v187;
  unsigned __int8 v166 = v188;
  unsigned __int8 v167 = v189;
  outlined release of Image.Resolved((uint64_t)&v164);
  outlined consume of ContentTransition.Storage(v179, v180 | ((unint64_t)v181 << 32), v182);
  return swift_release();
}

uint64_t outlined consume of ContentTransition.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of ContentTransition.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

unint64_t closure #1 in DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unsigned char *a5, double a6, double a7, double a8, double a9)
{
  unint64_t v9 = *(void *)(result + 48);
  if ((v9 >> 62) - 2 < 2) {
    return result;
  }
  char v10 = a5;
  unint64_t v16 = result;
  unint64_t v17 = *(void *)(result + 40);
  int v18 = *(unsigned __int8 *)(result + 66);
  int v19 = *(unsigned __int16 *)(result + 64);
  if (!(v9 >> 62))
  {
    if (v17 >> 60 != 9) {
      return result;
    }
    __int16 v20 = *(_WORD *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
    char v21 = *(unsigned char *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
    uint64_t v22 = *(void *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
    uint64_t v23 = *(void *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
    char v59 = *(unsigned char *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
    int v57 = *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
    char v56 = *(unsigned char *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
    char v54 = *(unsigned char *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
    int v55 = *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
    uint64_t v65 = *(void *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
    __int16 v66 = v20;
    char v67 = v21;
    double v24 = *(double *)result + a6;
    double v25 = *(double *)(result + 8) + a7;
    unint64_t v62 = a4;
    outlined copy of DisplayList.Item.Value(v17, v9);
    outlined copy of DisplayList.Item.Value(v17, v9);
    swift_bridgeObjectRetain();
    DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((uint64_t)&v65, a3, (uint64_t *)&v62, v24, v25, a8, a9);
    char v27 = v26;
    uint64_t v28 = swift_allocObject();
    __int16 v29 = v66;
    char v30 = v67;
    *(void *)(v28 + 16) = v65;
    *(_WORD *)(v28 + 24) = v29;
    *(unsigned char *)(v28 + 26) = v30;
    *(void *)(v28 + 32) = v22;
    *(void *)(v28 + 40) = v23;
    *(unsigned char *)(v28 + 48) = v59;
    *(_DWORD *)(v28 + 52) = v57;
    *(unsigned char *)(v28 + 56) = v56;
    *(_DWORD *)(v28 + 60) = v55;
    *(unsigned char *)(v28 + 64) = v54;
    outlined consume of DisplayList.Item.Value(v17, v9);
    outlined consume of DisplayList.Item.Value(v17, v9);
    uint64_t result = outlined consume of DisplayList.Content.Value(v17);
    if (v27)
    {
      if (a4) {
        unint64_t v9 = (2 * ((33 * (a4 >> 16)) ^ a4)) | 1;
      }
      else {
        LOWORD(v9) = 0;
      }
    }
    *(void *)(v16 + 40) = v28 | 0x9000000000000000;
    *(void *)(v16 + 48) = (unsigned __int16)v9;
    *(void *)(v16 + 56) = 0;
    *(unsigned char *)(v16 + 66) = 0;
    *(_WORD *)(v16 + 64) = 0;
    goto LABEL_18;
  }
  uint64_t v65 = *(void *)(result + 56);
  __int16 v66 = v19;
  char v67 = (v19 | (v18 << 16)) >> 16;
  double v31 = *(double *)result;
  double v32 = *(double *)(result + 8);
  double v33 = *(double *)result + a6;
  double v34 = v32 + a7;
  unint64_t v62 = a4;
  outlined copy of DisplayList.Item.Value(v17, v9);
  outlined copy of DisplayList.Effect(v17, v9, SBYTE4(v9));
  DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((uint64_t)&v65, a3, (uint64_t *)&v62, v33, v34, a8, a9);
  char v36 = v35;
  if (BYTE4(v9) == 7)
  {
    uint64_t v38 = *(void *)(v17 + 16);
    __int16 v39 = *(_WORD *)(v17 + 24);
    char v40 = *(unsigned char *)(v17 + 26);
    int v41 = *(_DWORD *)(v17 + 28);
    unint64_t v61 = a4;
    unint64_t v62 = v38;
    __int16 v63 = v39;
    char v64 = v40;
    swift_bridgeObjectRetain();
    DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((uint64_t)&v62, a3, (uint64_t *)&v61, v33, v34, a8, a9);
    char v43 = v42;
    outlined consume of DisplayList.Effect(v17, v9, 7);
    char v27 = v43 | v36;
    uint64_t v44 = swift_allocObject();
    __int16 v45 = v63;
    char v46 = v64;
    *(void *)(v44 + 16) = v62;
    *(_WORD *)(v44 + 24) = v45;
    *(unsigned char *)(v44 + 26) = v46;
    *(_DWORD *)(v44 + 28) = v41;
    outlined consume of DisplayList.Effect(v17, v9, 7);
    uint64_t result = outlined consume of DisplayList.Item.Value(v17, v9);
    LODWORD(v9) = 0;
    uint64_t v37 = 0x700000000;
    unint64_t v17 = v44;
  }
  else
  {
    if (BYTE4(v9) == 17)
    {
      if (v17 == a2)
      {
        double v50 = *(double *)(v16 + 16);
        double v51 = *(double *)(v16 + 24);
        unint64_t v62 = a4;
        double v58 = *(uint64_t (**)(unint64_t, uint64_t *, uint64_t, unint64_t *, double, double, double, double, double, double, double, double))(*(void *)a2 + 136);
        swift_retain();
        char v52 = v58(v9, &v65, a3, &v62, v31, v32, v50, v51, v33, v34, a8, a9);
        outlined consume of DisplayList.Effect(v17, v9, 17);
        outlined consume of DisplayList.Effect(v17, v9, 17);
        swift_release();
        uint64_t result = outlined consume of DisplayList.Item.Value(v17, v9);
        unint64_t v17 = 0;
        LODWORD(v9) = 0;
        char v27 = v52 | v36;
        uint64_t v37 = 0x1300000000;
        goto LABEL_14;
      }
      outlined consume of DisplayList.Effect(v17, v9, 17);
      uint64_t result = outlined consume of DisplayList.Item.Value(v17, v9);
      uint64_t v37 = 0x1100000000;
    }
    else
    {
      outlined consume of DisplayList.Effect(v17, v9, SBYTE4(v9));
      uint64_t result = outlined consume of DisplayList.Item.Value(v17, v9);
      uint64_t v37 = v9 & 0xFF00000000;
    }
    char v27 = v36;
  }
LABEL_14:
  char v10 = a5;
  uint64_t v47 = v65;
  __int16 v48 = v66;
  char v49 = v67;
  *(void *)(v16 + 40) = v17;
  *(void *)(v16 + 48) = v9 | (unint64_t)v37 | 0x4000000000000000;
  *(void *)(v16 + 56) = v47;
  *(unsigned char *)(v16 + 66) = v49;
  *(_WORD *)(v16 + 64) = v48;
LABEL_18:
  int v53 = *v10;
  if (v53 != 1) {
    LOBYTE(v53) = v27 & 1;
  }
  *char v10 = v53;
  if (v27) {
    *(void *)(v16 + 32) = a4;
  }
  return result;
}

void DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)(uint64_t a1, unsigned int a2, uint64_t *a3, double a4, double a5, double a6, double a7)
{
  if ((*(_WORD *)(a1 + 8) & 0x10) != 0)
  {
    uint64_t v8 = *a3;
    v55[0] = 0;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    unint64_t v9 = *(void **)a1;
    uint64_t v47 = *(void *)(*(void *)a1 + 16);
    uint64_t v48 = v8;
    if (v47)
    {
      uint64_t v10 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_36;
      }
      for (; v9[2]; unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9))
      {
        __int16 v15 = 0;
        char v16 = 0;
        unint64_t v17 = 0;
        int v18 = v9 + 4;
        uint64_t v19 = 1;
        uint64_t v46 = v10;
        while (1)
        {
          unint64_t v20 = v17;
          unint64_t v17 = v19;
          char v21 = &v18[9 * v20];
          closure #1 in DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)(v21, v10, a2, v48, v55, a4, a5, a6, a7);
          if (v20 >= v9[2]) {
            break;
          }
          uint64_t v22 = &v18[9 * v20];
          __int16 v23 = *((_WORD *)v22 + 32);
          char v24 = *((unsigned char *)v22 + 66);
          int v25 = *((_DWORD *)v22 + 17);
          long long v26 = v21[1];
          v50[0] = *v21;
          v50[1] = v26;
          long long v27 = *((_OWORD *)v22 + 3);
          v50[2] = *((_OWORD *)v22 + 2);
          v50[3] = v27;
          char v52 = v24;
          __int16 v51 = v23;
          int v53 = v25;
          DisplayList.Item.features.getter(&v54);
          unint64_t v28 = v9[2];
          if (v20 >= v28) {
            goto LABEL_35;
          }
          v15 |= v54;
          unint64_t v29 = v22[5];
          unint64_t v30 = v22[6];
          int v31 = *((unsigned __int16 *)v22 + 32) | (*((unsigned __int8 *)v22 + 66) << 16);
          switch(v30 >> 62)
          {
            case 1uLL:
              switch(BYTE4(v30))
              {
                case 2u:
                  outlined copy of DisplayList.Effect(v29, v30, 2);
                  int v33 = v29;
                  break;
                case 7u:
                  int v33 = *(unsigned __int8 *)(v29 + 26);
                  outlined copy of DisplayList.Item.Value(v29, v30);
                  outlined consume of DisplayList.Effect(v29, v30, 7);
                  swift_bridgeObjectRelease();
                  break;
                case 0x11u:
                  (*(void (**)(_OWORD *__return_ptr))(*(void *)v29 + 120))(v50);
                  outlined copy of DisplayList.Item.Value(v29, v30);
                  outlined consume of DisplayList.Effect(v29, v30, 17);
                  swift_bridgeObjectRelease();
                  int v33 = LOBYTE(v50[0]);
                  break;
                default:
                  outlined copy of DisplayList.Effect(v29, v30, SBYTE4(v30));
                  swift_bridgeObjectRetain();
                  outlined consume of DisplayList.Effect(v29, v30, SBYTE4(v30));
                  swift_bridgeObjectRelease();
                  int v33 = 0;
                  break;
              }
              unsigned int v32 = v33 | ((v31 & 0xFF0000u) >> 16);
              uint64_t v10 = v46;
              goto LABEL_30;
            case 2uLL:
              uint64_t v34 = *(void *)(v29 + 16);
              if (!v34) {
                goto LABEL_6;
              }
              if (v34 == 1)
              {
                uint64_t v35 = 0;
                LOBYTE(v32) = 0;
LABEL_23:
                uint64_t v42 = v34 - v35;
                char v43 = (char *)(v29 + 40 * v35 + 66);
                do
                {
                  char v44 = *v43;
                  v43 += 40;
                  LOBYTE(v32) = v44 | v32;
                  --v42;
                }
                while (v42);
                goto LABEL_30;
              }
              char v36 = 0;
              char v37 = 0;
              uint64_t v35 = v34 & 0x7FFFFFFFFFFFFFFELL;
              uint64_t v38 = (char *)(v29 + 106);
              uint64_t v39 = v34 & 0x7FFFFFFFFFFFFFFELL;
              do
              {
                char v40 = *(v38 - 40);
                char v41 = *v38;
                v38 += 80;
                v36 |= v40;
                v37 |= v41;
                v39 -= 2;
              }
              while (v39);
              LOBYTE(v32) = v37 | v36;
              if (v34 != v35) {
                goto LABEL_23;
              }
              goto LABEL_30;
            case 3uLL:
              goto LABEL_6;
            default:
              if (v29 >> 60 == 9)
              {
                LOBYTE(v32) = *(unsigned char *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
LABEL_30:
                v16 |= v32;
                if (v17 == v47)
                {
LABEL_33:
                  *(void *)a1 = v9;
                  *(unsigned char *)(a1 + 10) = v16;
                  *(_WORD *)(a1 + 8) = v15;
                  return;
                }
                unint64_t v28 = v9[2];
              }
              else
              {
LABEL_6:
                if (v17 == v47) {
                  goto LABEL_33;
                }
              }
              uint64_t v19 = v17 + 1;
              if (v17 >= v28) {
                goto LABEL_37;
              }
              break;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        ;
      }
LABEL_37:
      __break(1u);
    }
  }
}

uint64_t _ShapeStyle_InterpolatorGroup.rewriteInterpolation(serial:list:time:frame:contentOrigin:contentOffset:version:)(int a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v13 = v12;
  uint64_t v24 = *a12;
  int v25 = (uint64_t *)(v12 + 24);
  swift_beginAccess();
  uint64_t v26 = *(void *)(v13 + 24);
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char v31 = 0;
    *(void *)a2 = MEMORY[0x263F8EE78];
    *(_WORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 10) = 0;
    return v31 & 1;
  }
  unint64_t v28 = 0;
  uint64_t v29 = v26 + 52;
  uint64_t v30 = 251;
  while (*(_DWORD *)(v29 + v30 - 251) != a1)
  {
    ++v28;
    v30 += 224;
    if (v27 == v28) {
      goto LABEL_5;
    }
  }
  swift_beginAccess();
  unsigned int v32 = (void *)*v25;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *int v25 = (uint64_t)v32;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v32);
    unsigned int v32 = (void *)result;
    *int v25 = result;
  }
  if (v28 < v32[2])
  {
    uint64_t v34 = (char *)v32 + v30;
    __int16 v35 = *(_WORD *)(a2 + 8);
    char v36 = *(unsigned char *)(a2 + 10);
    uint64_t v63 = *(void *)a2;
    __int16 v64 = v35;
    char v65 = v36;
    DisplayList.InterpolatorLayer.setDisplayList(_:origin:)((uint64_t)&v63, a7, a8);
    if (*(void *)(*(void *)((char *)v32 + v30 - 27) + 16))
    {
      Value = (void *)AGGraphGetValue();
      if (*(double *)(v34 - 19) != *(double *)Value)
      {
        *(void *)(v34 - 19) = *Value;
        *((unsigned char *)v32 + v30) = 1;
      }
      uint64_t v38 = specialized static ViewGraph.current.getter();
      double v39 = *(double *)AGGraphGetValue();
      swift_beginAccess();
      double v40 = *(double *)(v38 + 376);
      if (v39 < v40) {
        double v40 = v39;
      }
      *(double *)(v38 + 376) = v40;
      swift_release();
      Swift::Float v41 = *(float *)(v13 + 32);
      swift_beginAccess();
      DisplayList.InterpolatorLayer.updateInterpolators(contentsScale:maxDuration:)(v41, *(Swift::Double *)(v13 + 16));
      uint64_t v42 = *(void *)((char *)v32 + v30 - 83);
      __int16 v43 = *(_WORD *)((char *)v32 + v30 - 75);
      char v44 = *((unsigned char *)v32 + v30 - 73);
      uint64_t v45 = *(void *)((char *)v32 + v30 - 51);
      uint64_t v46 = *(void *)((char *)v32 + v30 - 43);
      int v47 = *(_DWORD *)((char *)v32 + v30 - 35);
      char v48 = *((unsigned char *)v32 + v30 - 31);
      uint64_t v49 = *(void *)(v34 - 27);
      uint64_t v50 = *(void *)(v34 - 19);
      uint64_t v51 = *(void *)((char *)v32 + v30 - 11);
      __int16 v52 = *(_WORD *)((char *)v32 + v30 - 3);
      char v53 = *((unsigned char *)v32 + v30 - 1);
      char v54 = *((unsigned char *)v32 + v30);
      uint64_t v62 = v24;
      uint64_t v63 = v42;
      __int16 v64 = v43;
      char v65 = v44;
      long long v66 = *(_OWORD *)((char *)v32 + v30 - 67);
      uint64_t v67 = v45;
      uint64_t v68 = v46;
      int v69 = v47;
      char v70 = v48;
      uint64_t v71 = v49;
      uint64_t v72 = v50;
      uint64_t v73 = v51;
      __int16 v74 = v52;
      char v75 = v53;
      char v76 = v54;
      int v55 = *(_DWORD *)(v13 + 40);
      LOBYTE(v43) = *(unsigned char *)(v13 + 44);
      int v56 = *(_DWORD *)(v13 + 48);
      LOBYTE(v45) = *(unsigned char *)(v13 + 52);
      v57[0] = *(unsigned char *)(v13 + 36);
      int v58 = v55;
      char v59 = v43;
      int v60 = v56;
      char v61 = v45;
      char v31 = DisplayList.InterpolatorLayer.updateOutput(list:frame:contentOffset:version:rasterizationOptions:)(a2, &v62, v57, a3, a4, a5, a6, a9, a10);
    }
    else
    {
      char v31 = 0;
    }
    swift_endAccess();
    return v31 & 1;
  }
  __break(1u);
  return result;
}

void DisplayList.InterpolatorLayer.setDisplayList(_:origin:)(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = *(void *)a1;
  int v7 = *(unsigned __int16 *)(a1 + 8);
  int v8 = *(unsigned __int8 *)(a1 + 10);
  BOOL v9 = *(double *)(v3 + 16) == a2 && *(double *)(v3 + 24) == a3;
  if (!v9
    || (int v10 = *(unsigned __int16 *)(v3 + 8),
        int v11 = *(unsigned __int8 *)(v3 + 10),
        !specialized static Array<A>.== infix(_:_:)(*(void *)v3, v6))
    || (v10 == v7 ? (BOOL v12 = v11 == v8) : (BOOL v12 = 0), !v12))
  {
    int v13 = *(_DWORD *)(v3 + 48);
    char v14 = *(unsigned char *)(v3 + 52);
    uint64_t v15 = one-time initialization token for infinity;
    swift_bridgeObjectRetain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v16 = static Time.infinity;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    *(void *)uint64_t v3 = v6;
    *(_WORD *)(v3 + 8) = v7;
    *(unsigned char *)(v3 + 10) = v8;
    *(double *)(v3 + 16) = a2;
    *(double *)(v3 + 24) = a3;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 40) = v16;
    *(_DWORD *)(v3 + 48) = v13;
    *(unsigned char *)(v3 + 52) = v14;
    *(unsigned char *)(v3 + 83) = 1;
    unint64_t v17 = *(void **)(v3 + 56);
    unint64_t v18 = v17[2];
    if (v18)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      }
      if (v18 > v17[2])
      {
        __break(1u);
      }
      else
      {
        uint64_t v19 = &v17[14 * v18];
        unint64_t v20 = (void *)*(v19 - 3);
        *(v19 - 3) = 0;

        *(void *)(v3 + 56) = v17;
      }
    }
  }
}

uint64_t _ShapeStyle_InterpolatorGroup.update(contentSeed:transition:animation:listener:contentsScale:rasterizationOptions:supportsVFD:)(unsigned __int16 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char *a5, char a6, float a7)
{
  float v12 = *(float *)(v7 + 32);
  if (v12 != a7) {
    *(float *)(v7 + 32) = a7;
  }
  uint64_t v13 = *((unsigned __int8 *)a2 + 12);
  uint64_t v14 = *((unsigned int *)a2 + 2);
  unsigned __int16 v67 = *a1;
  uint64_t v66 = *a2;
  char v64 = *((unsigned char *)a2 + 14);
  char v65 = *((unsigned char *)a2 + 13);
  int v58 = *((_DWORD *)a5 + 1);
  char v59 = *a5;
  int v56 = *((_DWORD *)a5 + 3);
  char v57 = a5[8];
  uint64_t v15 = (void **)(v7 + 24);
  char v55 = a5[16];
  uint64_t result = swift_beginAccess();
  uint64_t v60 = v7;
  uint64_t v17 = *(void *)(*(void *)(v7 + 24) + 16);
  if (!v17)
  {
LABEL_37:
    *(unsigned char *)(v60 + 36) = v59;
    *(_DWORD *)(v60 + 40) = v58;
    *(unsigned char *)(v60 + 44) = v57;
    *(_DWORD *)(v60 + 48) = v56;
    *(unsigned char *)(v60 + 52) = v55;
    return result;
  }
  unint64_t v18 = 0;
  unint64_t v19 = v14 | (v13 << 32);
  uint64_t v20 = HIDWORD(v19);
  char v63 = a6 & 1;
  unint64_t v61 = HIDWORD(v19);
  while (1)
  {
    while (1)
    {
      unsigned __int16 v75 = v67;
      uint64_t v70 = v66;
      char v72 = v20;
      int v71 = v19;
      char v73 = v65;
      char v74 = v64;
      swift_beginAccess();
      char v21 = *v15;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v15 = v21;
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v18 & 0x8000000000000000) != 0) {
          goto LABEL_40;
        }
      }
      else
      {
        char v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
        *uint64_t v15 = v21;
        if ((v18 & 0x8000000000000000) != 0) {
          goto LABEL_40;
        }
      }
      if (v18 >= v21[2]) {
        goto LABEL_41;
      }
      uint64_t v23 = 28 * v18;
      DisplayList.InterpolatorLayer.update(contentSeed:transition:animation:listener:supportsVFD:)(&v75, (uint64_t)&v70, a3, a4, v63);
      uint64_t v24 = *v15;
      uint64_t result = swift_endAccess();
      if (v18 >= v24[2]) {
        goto LABEL_42;
      }
      if (BYTE4(v24[v23 + 31]) != 1 || *(void *)(v24[v23 + 28] + 16)) {
        break;
      }
      swift_beginAccess();
      Swift::Float v41 = *v15;
      char v42 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v15 = v41;
      if ((v42 & 1) == 0)
      {
        Swift::Float v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
        *uint64_t v15 = v41;
      }
      unint64_t v43 = v41[2];
      if (v18 >= v43) {
        goto LABEL_44;
      }
      unint64_t v44 = v43 - 1;
      long long v45 = *(_OWORD *)&v41[v23 + 6];
      v68[0] = *(_OWORD *)&v41[v23 + 4];
      v68[1] = v45;
      long long v46 = *(_OWORD *)&v41[v23 + 8];
      long long v47 = *(_OWORD *)&v41[v23 + 10];
      long long v48 = *(_OWORD *)&v41[v23 + 14];
      v68[4] = *(_OWORD *)&v41[v23 + 12];
      v68[5] = v48;
      v68[2] = v46;
      v68[3] = v47;
      long long v49 = *(_OWORD *)&v41[v23 + 16];
      long long v50 = *(_OWORD *)&v41[v23 + 18];
      long long v51 = *(_OWORD *)&v41[v23 + 22];
      v68[8] = *(_OWORD *)&v41[v23 + 20];
      v68[9] = v51;
      v68[6] = v49;
      v68[7] = v50;
      long long v52 = *(_OWORD *)&v41[v23 + 24];
      long long v53 = *(_OWORD *)&v41[v23 + 26];
      long long v54 = *(_OWORD *)&v41[v23 + 28];
      *(_OWORD *)((char *)v69 + 13) = *(_OWORD *)((char *)&v41[v23 + 29] + 5);
      v68[11] = v53;
      v69[0] = v54;
      v68[10] = v52;
      if ((uint64_t)(v43 - 1 - v18) < 0) {
        goto LABEL_45;
      }
      memmove(&v41[v23 + 4], &v41[v23 + 32], 224 * (v43 - 1 - v18));
      v41[2] = v44;
      *uint64_t v15 = v41;
      swift_endAccess();
      uint64_t result = outlined release of _ShapeStyle_InterpolatorGroup.Layer((uint64_t)v68);
      if ((uint64_t)v18 >= --v17) {
        goto LABEL_37;
      }
    }
    if (v12 != a7) {
      break;
    }
LABEL_6:
    if ((uint64_t)++v18 >= v17) {
      goto LABEL_37;
    }
  }
  swift_beginAccess();
  int v25 = *v15;
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v15 = v25;
  if ((v26 & 1) == 0)
  {
    int v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
    *uint64_t v15 = v25;
  }
  if (v18 >= v25[2]) {
    goto LABEL_43;
  }
  uint64_t v62 = v17;
  unint64_t v27 = v19;
  uint64_t v28 = a3;
  uint64_t v20 = a4;
  uint64_t v29 = &v25[v23];
  uint64_t v30 = v29 + 4;
  swift_unknownObjectRelease();
  v29[25] = 0;
  char v31 = (void *)v29[28];
  uint64_t v32 = v31[2];
  if (!v32)
  {
LABEL_5:
    *((unsigned char *)v30 + 219) = 1;
    uint64_t result = swift_endAccess();
    a4 = v20;
    a3 = v28;
    unint64_t v19 = v27;
    LOBYTE(v20) = v61;
    uint64_t v17 = v62;
    goto LABEL_6;
  }
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  v30[24] = v31;
  if ((v33 & 1) == 0) {
    v30[24] = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
  }
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  while (1)
  {
    char v36 = (void *)v30[24];
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    v30[24] = v36;
    if ((v37 & 1) == 0)
    {
      char v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
      v30[24] = v36;
    }
    if (v35 >= v36[2]) {
      break;
    }
    v36[v34 + 8] = 0;
    swift_unknownObjectRelease();
    uint64_t v38 = (void *)v30[24];
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    v30[24] = v38;
    if ((v39 & 1) == 0)
    {
      uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew()(v38);
      v30[24] = v38;
    }
    if (v35 >= v38[2]) {
      goto LABEL_39;
    }
    ++v35;
    double v40 = (void *)v38[v34 + 11];
    v38[v34 + 11] = 0;

    v34 += 14;
    if (v32 == v35) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall DisplayList.translate(by:version:)(CGSize by, SwiftUI::DisplayList::Version version)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (v4)
  {
    double height = by.height;
    double width = by.width;
    double v7 = *(double *)version.value;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_11:
    }
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    unint64_t v8 = 0;
    unint64_t v9 = v3[2];
    int v10 = (double *)(v3 + 8);
    do
    {
      if (v8 >= v9)
      {
        __break(1u);
        goto LABEL_11;
      }
      ++v8;
      double v11 = *(v10 - 3) + height;
      *(v10 - 4) = *(v10 - 4) + width;
      *(v10 - 3) = v11;
      double v12 = *v10;
      if (*(uint64_t *)&v7 > *(void *)v10) {
        double v12 = v7;
      }
      *int v10 = v12;
      v10 += 9;
    }
    while (v4 != v8);
    *(void *)uint64_t v2 = v3;
  }
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = (_DWORD *)(a2 + 100);
  uint64_t v5 = (_DWORD *)(a1 + 100);
  do
  {
    BOOL result = *v5 == *v4 && *(void *)(v5 - 9) == *(void *)(v4 - 9);
    BOOL v9 = v3-- != 0;
    if (!result) {
      break;
    }
    v4 += 18;
    v5 += 18;
  }
  while (v9);
  return result;
}

{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  BOOL result;
  int v7;
  int v8;
  int v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (int *)(a1 + 36);
  uint64_t v4 = (int *)(a2 + 36);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    unint64_t v8 = *v3++;
    double v7 = v8;
    BOOL v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  BOOL result;
  double v7;
  double v8;
  double v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (double *)(a1 + 40);
  uint64_t v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    unint64_t v8 = v7;
    BOOL v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  BOOL result;
  float v7;
  float v8;
  float v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (float *)(a1 + 36);
  uint64_t v4 = (float *)(a2 + 36);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    unint64_t v8 = v7;
    BOOL v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  BOOL result;
  float64x2_t *v6;
  float64x2_t *v7;
  int32x2_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 32) != *(void *)(a2 + 32)
    || *(double *)(a1 + 40) != *(double *)(a2 + 40)
    || *(double *)(a1 + 48) != *(double *)(a2 + 48))
  {
    return 0;
  }
  uint64_t v6 = (float64x2_t *)(a2 + 64);
  double v7 = (float64x2_t *)(a1 + 64);
  do
  {
    BOOL result = --v2 == 0;
    if (!v2) {
      break;
    }
    if (*(void *)&v7[-1].f64[1] != *(void *)&v6[-1].f64[1]) {
      break;
    }
    unint64_t v8 = vmovn_s64(vceqq_f64(*v7, *v6));
    if ((v8.i8[0] & 1) == 0) {
      break;
    }
    uint64_t v6 = (float64x2_t *)((char *)v6 + 24);
    double v7 = (float64x2_t *)((char *)v7 + 24);
  }
  while ((v8.i8[4] & 1) != 0);
  return result;
}

{
  uint64_t v2;
  BOOL result;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (double *)(a1 + 40);
  uint64_t v6 = (double *)(a2 + 40);
  do
  {
    double v7 = *v5++;
    unint64_t v8 = v7;
    BOOL v9 = *v6++;
    int v10 = v9;
    double v12 = v4-- != 0;
    BOOL result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

unsigned __int16 *DisplayList.InterpolatorLayer.update(contentSeed:transition:animation:listener:supportsVFD:)(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  int v7 = *result;
  uint64_t v8 = *(void *)a2;
  int v9 = *(unsigned __int8 *)(a2 + 13);
  if (*((unsigned __int16 *)v5 + 40) == v7 || a3 == 0) {
    goto LABEL_22;
  }
  unint64_t v12 = *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32);
  char v13 = *(unsigned char *)(a2 + 14);
  uint64_t v14 = v5[7];
  unint64_t v15 = *(void *)(v14 + 16);
  __int16 v57 = *result;
  char v58 = a5;
  long long v53 = v5 + 7;
  if (v15)
  {
    if (*(unsigned char *)(v14 + 112 * v15 + 24))
    {
      if (v15 >= 8)
      {
        swift_retain();
        DisplayList.InterpolatorLayer.remove(prefix:)(0);
        goto LABEL_15;
      }
      goto LABEL_8;
    }
    swift_retain();
    specialized Array._customRemoveLast()((uint64_t)&v59);
    if (v59)
    {
      uint64_t v16 = v67;
      uint64_t v17 = v68;
      unint64_t v18 = v66;
      char v55 = v65;
      if (v68)
      {
LABEL_11:
        long long v49 = v18;
        unint64_t v19 = *(void (**)(uint64_t))(*(void *)v17 + 96);
        long long v47 = v16;
        uint64_t v20 = swift_retain();
        v19(v20);
        swift_release_n();

        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        goto LABEL_15;
      }
    }
    else
    {
      specialized Array.remove(at:)(*(void *)(v5[7] + 16) - 1, (uint64_t)&v59);
      unint64_t v18 = v66;
      char v55 = v65;
      uint64_t v16 = v67;
      uint64_t v17 = v68;
      if (v68) {
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    goto LABEL_15;
  }
LABEL_8:
  swift_retain();
LABEL_15:
  uint64_t v21 = *v5;
  __int16 v50 = *((_WORD *)v6 + 4);
  uint64_t v22 = v6[2];
  uint64_t v23 = v6[3];
  uint64_t v24 = v6[4];
  uint64_t v25 = v6[5];
  int v46 = *((_DWORD *)v6 + 12);
  char v48 = *((unsigned char *)v6 + 10);
  char v45 = *((unsigned char *)v6 + 52);
  uint64_t v42 = v8;
  uint64_t v59 = v8;
  BYTE4(v60) = BYTE4(v12);
  LODWORD(v60) = v12;
  int v56 = v9;
  BYTE5(v60) = v9;
  BYTE6(v60) = v13;
  uint64_t v51 = v24;
  swift_unknownObjectRetain();
  uint64_t v52 = v21;
  swift_bridgeObjectRetain();
  id v44 = ContentTransition.rbTransition.getter();
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63858]), sel_init);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a3 + 96))(&v59);
  uint64_t v27 = v59;
  uint64_t v28 = v60;
  uint64_t v30 = v61;
  uint64_t v29 = v62;
  uint64_t v31 = v63;
  char v32 = v64;
  uint64_t v69 = v59;
  uint64_t v70 = v60;
  uint64_t v71 = v61;
  uint64_t v72 = v62;
  uint64_t v73 = v63;
  char v74 = v64;
  id v43 = v26;
  Animation.Function.apply(to:)(v26, v33, v34);
  outlined consume of Animation.Function(v27, v28, v30, v29, v31, v32);
  unint64_t v35 = (void *)v6[7];
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
  }
  unint64_t v37 = v35[2];
  unint64_t v36 = v35[3];
  int v9 = v56;
  uint64_t v8 = v42;
  if (v37 >= v36 >> 1) {
    unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v35);
  }
  v35[2] = v37 + 1;
  uint64_t v38 = &v35[14 * v37];
  v38[4] = v52;
  *((_WORD *)v38 + 20) = v50;
  *((unsigned char *)v38 + 42) = v48;
  v38[6] = v22;
  v38[7] = v23;
  v38[8] = v51;
  v38[9] = v25;
  *((_DWORD *)v38 + 20) = v46;
  *((unsigned char *)v38 + 84) = v45;
  v38[11] = 0;
  v38[12] = v44;
  v38[13] = v43;
  v38[14] = a4;
  *(_OWORD *)(v38 + 15) = xmmword_2461BDD40;
  *((unsigned char *)v38 + 136) = 0;
  *long long v53 = v35;
  if (a4) {
    (*(void (**)(void))(*(void *)a4 + 88))();
  }
  BOOL result = (unsigned __int16 *)swift_release();
  *((unsigned char *)v6 + 83) = 1;
  LOWORD(v7) = v57;
  a5 = v58;
LABEL_22:
  *((_WORD *)v6 + 40) = v7;
  *((unsigned char *)v6 + 82) = a5 & 1;
  if (v9) {
    BOOL v39 = 0;
  }
  else {
    BOOL v39 = (v8 & 0xC000000000) == 0x4000000000;
  }
  int v40 = !v39;
  if ((v8 & 0x100000000) == 0) {
    int v40 = 1;
  }
  if (v40) {
    int v41 = 0;
  }
  else {
    int v41 = v8;
  }
  *((_DWORD *)v6 + 12) = v41;
  *((unsigned char *)v6 + 52) = v40;
  return result;
}

uint64_t EnvironmentValues.contentTransitionStyle.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v11);
    swift_release_n();
    swift_release_n();
    uint64_t v4 = v11;
    unint64_t v5 = v12 | ((unint64_t)v13 << 32);
    char v6 = v14;
    char v7 = v15;
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v9 = specialized find<A>(_:key:)(v8);
    if (v9)
    {
      uint64_t v4 = *(void *)(v9 + 72);
      unint64_t v5 = *(unsigned int *)(v9 + 80) | ((unint64_t)*(unsigned __int8 *)(v9 + 84) << 32);
      char v6 = *(unsigned char *)(v9 + 85);
      char v7 = *(unsigned char *)(v9 + 87);
      outlined copy of ContentTransition.Storage(v4, v5, v6);
      swift_retain();
    }
    else
    {
      char v6 = 0;
      char v7 = 0;
      unint64_t v5 = 0x302000000;
      uint64_t v4 = 0x8000000000;
    }
    swift_release_n();
  }
  outlined consume of ContentTransition.Storage(v4, v5, v6);
  uint64_t result = swift_release();
  *a1 = v7;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10 = a3 >> 40;
  unint64_t v11 = a3 & 0x1000000000000;
  uint64_t v12 = specialized find<A>(_:key:)(*a1);
  if (!v12)
  {
    unint64_t v20 = HIWORD(v11);
    goto LABEL_5;
  }
  uint64_t v13 = *(void *)(v12 + 72);
  __int16 v14 = *(_WORD *)(v12 + 84);
  int v15 = *(_DWORD *)(v12 + 80);
  char v16 = *(unsigned char *)(v12 + 86);
  char v17 = *(unsigned char *)(v12 + 87);
  uint64_t v18 = *(void *)(v12 + 88);
  int v19 = *(_DWORD *)(v12 + 96);
  uint64_t v33 = a2;
  char v35 = BYTE4(a3);
  int v34 = a3;
  char v36 = v10;
  unint64_t v20 = HIWORD(v11);
  char v37 = v20;
  char v38 = HIBYTE(a3);
  uint64_t v39 = a4;
  int v40 = a5;
  uint64_t v26 = v13;
  int v27 = v15;
  __int16 v28 = v14;
  char v29 = v16;
  char v30 = v17;
  uint64_t v31 = v18;
  int v32 = v19;
  uint64_t result = specialized static ContentTransition.State.== infix(_:_:)(&v33, &v26);
  if ((result & 1) == 0)
  {
LABEL_5:
    uint64_t v25 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ContentTransition.State>>();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 72) = a2;
    *(unsigned char *)(v22 + 84) = BYTE4(a3);
    *(_DWORD *)(v22 + 80) = a3;
    *(unsigned char *)(v22 + 85) = v10;
    *(unsigned char *)(v22 + 86) = v20;
    *(unsigned char *)(v22 + 87) = HIBYTE(a3);
    *(void *)(v22 + 88) = a4;
    *(_DWORD *)(v22 + 96) = a5;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    Swift::Int v24 = v23;
    outlined copy of ContentTransition.Storage(a2, a3, v10);
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v24, 0, v25);
    return swift_release();
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ContentTransition.State>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContentTransition.State>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContentTransition.State>>);
    }
  }
}

void ResolvedStyledText.modifyTransition(state:to:)(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0) {
    goto LABEL_19;
  }
  unint64_t v5 = (void *)v2[27];
  if (v5)
  {
    id v6 = objc_msgSend(v5, sel_string);
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    unint64_t v10 = *(void **)(a2 + 216);
    if (!v10)
    {
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v10 = *(void **)(a2 + 216);
    if (!v10) {
      goto LABEL_19;
    }
    uint64_t v9 = 0;
    uint64_t v7 = 0;
  }
  id v11 = objc_msgSend(v10, sel_string);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (!v9)
  {
    if (!v14) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (!v14)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (v7 == v12 && v9 == v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
LABEL_16:
    unint64_t v15 = *(void *)a1;
    unint64_t v16 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
    if (*(unsigned char *)(a1 + 13))
    {
      outlined consume of ContentTransition.Storage(v15, v16, *(unsigned char *)(a1 + 13));
    }
    else
    {
      uint64_t v23 = (v15 >> 38) & 3;
      if (!v23)
      {
        *(void *)a1 = 1;
        *(unsigned char *)(a1 + 12) = BYTE4(v16);
        *(_DWORD *)(a1 + 8) = v16 & 0xFF000000;
        *(unsigned char *)(a1 + 13) = 0;
        goto LABEL_19;
      }
      if (v23 == 1
        || v23 == 2
        && __PAIR128__((__CFADD__(v15, 0xFFFFFF7FFFFFFFFFLL) + *(_DWORD *)(a1 + 8) - 1) & 0xFFFFFF, v15 - 0x8000000001) < 2)
      {
        goto LABEL_19;
      }
    }
    *(void *)a1 = 0x8000000004;
    *(_WORD *)(a1 + 12) = 3;
    *(_DWORD *)(a1 + 8) = 0x2000000;
  }
LABEL_19:
  unint64_t v17 = *(void *)a1;
  if (*(unsigned char *)(a1 + 13)) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = (*(void *)a1 & 0xFFC000000000) == 0x24000000000;
  }
  if (v18)
  {
    int v19 = *(_DWORD *)(a1 + 8);
    char v20 = *(unsigned char *)(a1 + 12);
    char v21 = (*(uint64_t (**)(void))(*v2 + 200))();
    uint64_t v22 = 0x4000000000;
    if ((v21 & 1) == 0) {
      uint64_t v22 = 0x14000000000;
    }
    *(void *)a1 = v17 & 0xFFFF0001FFFFFFFFLL | v22;
    *(unsigned char *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 8) = v19;
    *(unsigned char *)(a1 + 13) = 0;
  }
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ContentTransition.State(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  __int16 v3 = *(_WORD *)(a1 + 12);
  int v4 = *(_DWORD *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 14);
  char v6 = *(unsigned char *)(a1 + 15);
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 24);
  uint64_t v9 = *(void *)a2;
  __int16 v10 = *(_WORD *)(a2 + 12);
  int v11 = *(_DWORD *)(a2 + 8);
  char v12 = *(unsigned char *)(a2 + 14);
  char v13 = *(unsigned char *)(a2 + 15);
  uint64_t v14 = *(void *)(a2 + 16);
  int v15 = *(_DWORD *)(a2 + 24);
  uint64_t v24 = v2;
  int v25 = v4;
  __int16 v26 = v3;
  char v27 = v5;
  char v28 = v6;
  uint64_t v29 = v7;
  int v30 = v8;
  uint64_t v17 = v9;
  int v18 = v11;
  __int16 v19 = v10;
  char v20 = v12;
  char v21 = v13;
  uint64_t v22 = v14;
  int v23 = v15;
  return specialized static ContentTransition.State.== infix(_:_:)(&v24, &v17);
}

BOOL specialized static ContentTransition.State.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  __int16 v2 = *((_WORD *)a1 + 6);
  int v3 = *((_DWORD *)a1 + 2);
  int v4 = *((unsigned __int8 *)a1 + 14);
  int v5 = *((unsigned __int8 *)a1 + 15);
  uint64_t v6 = a1[2];
  int v7 = *((_DWORD *)a1 + 6);
  uint64_t v8 = *a2;
  __int16 v9 = *((_WORD *)a2 + 6);
  int v10 = *((_DWORD *)a2 + 2);
  int v11 = *((unsigned __int8 *)a2 + 14);
  int v12 = *((unsigned __int8 *)a2 + 15);
  uint64_t v13 = a2[2];
  int v14 = *((_DWORD *)a2 + 6);
  uint64_t v21 = *a1;
  int v22 = v3;
  __int16 v23 = v2;
  uint64_t v18 = v8;
  int v19 = v10;
  __int16 v20 = v9;
  char v15 = specialized static ContentTransition.Storage.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v18);
  BOOL result = 0;
  if ((v15 & 1) != 0 && ((v4 ^ v11) & 1) == 0 && v5 == v12)
  {
    if (v6)
    {
      if (v13)
      {
        uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 104);
        swift_retain();
        swift_retain();
        LOBYTE(v17) = v17(v13);
        swift_release();
        swift_release();
        if (v17) {
          return v7 == v14;
        }
      }
    }
    else if (!v13)
    {
      return v7 == v14;
    }
    return 0;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.ResolvedProperties.Transition(uint64_t *a1, uint64_t *a2)
{
  __int16 v2 = *((_WORD *)a1 + 6);
  int v3 = *((_DWORD *)a1 + 2);
  int v4 = *((unsigned __int8 *)a1 + 14);
  uint64_t v5 = *a2;
  __int16 v6 = *((_WORD *)a2 + 6);
  int v7 = *((_DWORD *)a2 + 2);
  int v8 = *((unsigned __int8 *)a2 + 14);
  uint64_t v13 = *a1;
  int v14 = v3;
  __int16 v15 = v2;
  uint64_t v10 = v5;
  int v11 = v7;
  __int16 v12 = v6;
  return specialized static ContentTransition.Storage.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v10) & ~(v4 ^ v8) & 1;
}

uint64_t specialized static ContentTransition.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  int v4 = *(unsigned __int8 *)(a1 + 13);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32);
  int v7 = *(unsigned __int8 *)(a2 + 13);
  if (*(unsigned char *)(a1 + 13))
  {
    if (v4 == 1)
    {
      uint64_t v8 = *(void *)a1;
      if (v7 == 1)
      {
        if ((specialized static Array<A>.== infix(_:_:)(v8, *(void *)a2) & 1) != 0 && v3 == v6)
        {
          if (BYTE4(v3) == 2)
          {
            char v9 = 1;
            outlined copy of ContentTransition.Storage(v5, v6, 1);
            outlined copy of ContentTransition.Storage(v2, v3, 1);
            outlined consume of ContentTransition.Storage(v2, v3, 1);
            outlined consume of ContentTransition.Storage(v5, v6, 1);
            if (BYTE4(v6) == 2) {
              return v9 & 1;
            }
          }
          else
          {
            outlined copy of ContentTransition.Storage(v5, v6, 1);
            outlined copy of ContentTransition.Storage(v2, v3, 1);
            outlined consume of ContentTransition.Storage(v2, v3, 1);
            outlined consume of ContentTransition.Storage(v5, v6, 1);
            if (BYTE4(v6) != 2 && ((v6 ^ v3) & 0x100000000) == 0)
            {
              char v9 = 1;
              return v9 & 1;
            }
          }
          goto LABEL_18;
        }
        outlined copy of ContentTransition.Storage(v5, v6, 1);
        outlined copy of ContentTransition.Storage(v2, v3, 1);
        outlined consume of ContentTransition.Storage(v2, v3, 1);
        uint64_t v10 = v5;
        uint64_t v11 = v6;
        char v12 = 1;
LABEL_17:
        outlined consume of ContentTransition.Storage(v10, v11, v12);
LABEL_18:
        char v9 = 0;
        return v9 & 1;
      }
      swift_bridgeObjectRetain();
LABEL_16:
      outlined copy of ContentTransition.Storage(v5, v6, v7);
      outlined consume of ContentTransition.Storage(v2, v3, v4);
      uint64_t v10 = v5;
      uint64_t v11 = v6;
      char v12 = v7;
      goto LABEL_17;
    }
    if (v7 != 2) {
      goto LABEL_16;
    }
    outlined consume of ContentTransition.Storage(*(void *)a1, v3, 2);
    outlined consume of ContentTransition.Storage(v5, v6, 2);
    if (*(float *)&v3 == *(float *)&v6) {
      char v9 = (v2 == v5) & (((v2 & 0x100000000) == 0) ^ BYTE4(v5));
    }
    else {
      char v9 = 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 13)) {
      goto LABEL_16;
    }
    uint64_t v19 = *(void *)a1;
    __int16 v20 = v3;
    char v21 = BYTE2(v3);
    char v22 = BYTE3(v3);
    char v23 = BYTE4(v3);
    uint64_t v14 = v5;
    char v16 = BYTE2(v6);
    __int16 v15 = v6;
    char v17 = BYTE3(v6);
    char v18 = BYTE4(v6);
    char v9 = specialized static ContentTransition.NamedTransition.== infix(_:_:)(&v19, &v14);
    outlined consume of ContentTransition.Storage(v2, v3, 0);
    outlined consume of ContentTransition.Storage(v5, v6, 0);
  }
  return v9 & 1;
}

uint64_t specialized static ContentTransition.NamedTransition.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  int v3 = *((unsigned __int8 *)a1 + 11);
  int v4 = *((unsigned __int8 *)a1 + 12);
  uint64_t v5 = *a2;
  int v6 = *((unsigned __int8 *)a2 + 11);
  int v7 = *((unsigned __int8 *)a2 + 12);
  uint64_t v8 = ((unint64_t)*a1 >> 38) & 3;
  if (v8)
  {
    int v9 = *((unsigned __int16 *)a2 + 4) | (*((unsigned __int8 *)a2 + 10) << 16);
    if (v8 != 1)
    {
      switch(v2)
      {
        case 0x8000000001uLL:
          if ((v5 & 0xC000000000) != 0x8000000000) {
            return 0;
          }
          uint64_t result = 0;
          if (v5 == 0x8000000001) {
            goto LABEL_24;
          }
          break;
        case 0x8000000002uLL:
          if ((v5 & 0xC000000000) != 0x8000000000) {
            return 0;
          }
          uint64_t result = 0;
          if (v5 == 0x8000000002) {
            goto LABEL_24;
          }
          break;
        case 0x8000000003uLL:
          if ((v5 & 0xC000000000) != 0x8000000000) {
            return 0;
          }
          uint64_t result = 0;
          if (v5 == 0x8000000003) {
            goto LABEL_24;
          }
          break;
        case 0x8000000004uLL:
          if ((v5 & 0xC000000000) != 0x8000000000) {
            return 0;
          }
          uint64_t result = 0;
          if (v5 == 0x8000000004) {
            goto LABEL_24;
          }
          break;
        default:
          if ((v5 & 0xC000000000) != 0x8000000000) {
            return 0;
          }
          uint64_t result = 0;
          if (v5 == 0x8000000000)
          {
LABEL_24:
            if (!v9) {
              goto LABEL_25;
            }
          }
          break;
      }
      return result;
    }
    if ((v5 & 0xC000000000) != 0x4000000000) {
      return 0;
    }
    int v10 = *((unsigned __int16 *)a1 + 4) | (*((unsigned __int8 *)a1 + 10) << 16);
    int v19 = *a1;
    char v20 = BYTE4(v2) & 1;
    char v21 = BYTE5(v2);
    char v22 = BYTE6(v2);
    char v23 = HIBYTE(v2);
    __int16 v24 = v10;
    char v25 = BYTE2(v10);
    int v12 = v5;
    char v13 = BYTE4(v5) & 1;
    char v14 = BYTE5(v5);
    char v15 = BYTE6(v5);
    char v16 = HIBYTE(v5);
    __int16 v17 = v9;
    char v18 = BYTE2(v9);
    if (!specialized static ContentTransition.NumericTextConfiguration.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v12)) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if ((v5 & 0xC000000000) != 0 || ((((v2 & 1) == 0) ^ v5) & 1) == 0) {
      return result;
    }
  }
LABEL_25:
  if (v3 == 2)
  {
    if (v6 != 2) {
      return 0;
    }
LABEL_30:
    if (v4 == 3)
    {
      if (v7 != 3) {
        return 0;
      }
    }
    else if (v7 == 3 || v4 != v7)
    {
      return 0;
    }
    return 1;
  }
  uint64_t result = 0;
  if (v6 != 2 && ((v6 ^ v3) & 1) == 0) {
    goto LABEL_30;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t OptionalEdgeInsets.bottom.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t OptionalEdgeInsets.top.getter()
{
  return *(void *)v0;
}

uint64_t Dictionary<>.transferAttributedStringStyles(to:)(uint64_t a1)
{
  unint64_t v2 = v1;
  _sSay7SwiftUI15AnyFontModifierCGMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  int v6 = (char *)&v182 - v5;
  int v7 = (void *)type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v196 = *(v7 - 1);
  MEMORY[0x270FA5388](v7);
  int v9 = (char *)&v182 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x270FA5388](v210);
  v195 = (char *)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v211 = (uint64_t)&v182 - v13;
  char v14 = (void *)MEMORY[0x24C522820](0x2E49557466697753, 0xEC000000746E6F46, v12);
  uint64_t v15 = *v1;
  uint64_t v16 = *(void *)(v15 + 16);
  id v214 = v14;
  if (!v16)
  {
    long long v216 = 0u;
    long long v217 = 0u;
    goto LABEL_8;
  }
  id v17 = v14;
  uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
  if ((v19 & 1) == 0)
  {
    long long v216 = 0u;
    long long v217 = 0u;

    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(v15 + 56) + 32 * v18, (uint64_t)&v216);

  if (!*((void *)&v217 + 1))
  {
LABEL_8:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_9;
  }
  if (swift_dynamicCast())
  {
    uint64_t v20 = v228;
    unint64_t v21 = *(void *)a1;
    swift_retain();
    outlined consume of EffectAnimator<A>.State<A>(v21);
    *(void *)a1 = v20;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v17);
    swift_release();
  }
LABEL_9:
  char v22 = (void *)MEMORY[0x24C522820](0xD000000000000017, 0x8000000246220600);
  uint64_t v23 = *v2;
  uint64_t v24 = *(void *)(*v2 + 16);
  id v213 = v22;
  if (!v24)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_17:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_18;
  }
  id v25 = v22;
  uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
  if (v27)
  {
    outlined init with copy of Any(*(void *)(v23 + 56) + 32 * v26, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_17;
  }
  if (swift_dynamicCast())
  {
    uint64_t v28 = v228;
    unint64_t v29 = *(void *)(a1 + 16);
    swift_retain();
    outlined consume of Text.Style.TextStyleColor(v29);
    *(void *)(a1 + 16) = v28;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v25);
    swift_release();
  }
LABEL_18:
  int v30 = (void *)MEMORY[0x24C522820](0xD000000000000017, 0x8000000246220620);
  uint64_t v31 = *v2;
  uint64_t v32 = *(void *)(*v2 + 16);
  id v212 = v30;
  if (!v32)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_26:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_27;
  }
  id v33 = v30;
  uint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
  if (v35)
  {
    outlined init with copy of Any(*(void *)(v31 + 56) + 32 * v34, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_26;
  }
  if (swift_dynamicCast())
  {
    uint64_t v36 = v228;
    swift_retain();
    swift_release();
    *(void *)(a1 + 24) = v36;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v33);
    swift_release();
  }
LABEL_27:
  char v37 = (void *)MEMORY[0x24C522820](0xD00000000000001ALL, 0x8000000246220640);
  uint64_t v38 = *v2;
  uint64_t v39 = *(void *)(*v2 + 16);
  id v209 = v37;
  if (!v39)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_35:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_36;
  }
  id v40 = v37;
  uint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
  if (v42)
  {
    outlined init with copy of Any(*(void *)(v38 + 56) + 32 * v41, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_35;
  }
  if (swift_dynamicCast())
  {
    id v43 = v6;
    uint64_t v44 = *((void *)&v228 + 1);
    uint64_t v45 = v228;
    uint64_t v46 = *(void *)(a1 + 80);
    uint64_t v47 = *(void *)(a1 + 88);
    swift_retain();
    outlined consume of Text.Style.LineStyle(v46, v47);
    *(void *)(a1 + 80) = v45;
    *(void *)(a1 + 88) = v44;
    int v6 = v43;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v40);
    swift_release();
  }
LABEL_36:
  char v48 = (void *)MEMORY[0x24C522820](0xD00000000000001ALL, 0x8000000246220660);
  uint64_t v49 = *v2;
  uint64_t v50 = *(void *)(*v2 + 16);
  id v208 = v48;
  if (!v50)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_46:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_47;
  }
  id v51 = v48;
  uint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51);
  if (v53)
  {
    outlined init with copy of Any(*(void *)(v49 + 56) + 32 * v52, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_46;
  }
  if (swift_dynamicCast())
  {
    uint64_t v54 = v228;
    uint64_t v55 = *(void *)(a1 + 88);
    if ((unint64_t)(v55 - 1) <= 1)
    {
      uint64_t v56 = *(void *)(a1 + 80);
      swift_retain();
      outlined consume of Text.Style.LineStyle(v56, v55);
      *(void *)(a1 + 80) = 1;
      *(void *)(a1 + 88) = v54;
    }
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v51);
    swift_release();
  }
LABEL_47:
  __int16 v57 = (void *)MEMORY[0x24C522820](0xD000000000000016, 0x8000000246220680);
  uint64_t v58 = *v2;
  uint64_t v59 = *(void *)(*v2 + 16);
  id v207 = v57;
  if (!v59)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_55:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_56;
  }
  id v60 = v57;
  uint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v60);
  if (v62)
  {
    outlined init with copy of Any(*(void *)(v58 + 56) + 32 * v61, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_55;
  }
  if (swift_dynamicCast())
  {
    uint64_t v63 = v6;
    uint64_t v64 = *((void *)&v228 + 1);
    uint64_t v65 = v228;
    uint64_t v66 = *(void *)(a1 + 96);
    uint64_t v67 = *(void *)(a1 + 104);
    swift_retain();
    outlined consume of Text.Style.LineStyle(v66, v67);
    *(void *)(a1 + 96) = v65;
    *(void *)(a1 + 104) = v64;
    int v6 = v63;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v60);
    swift_release();
  }
LABEL_56:
  uint64_t v68 = (void *)MEMORY[0x24C522820](0xD000000000000016, 0x80000002462206A0);
  uint64_t v69 = *v2;
  uint64_t v70 = *(void *)(*v2 + 16);
  id v206 = v68;
  if (!v70)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_66:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_67;
  }
  id v71 = v68;
  uint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v71);
  if (v73)
  {
    outlined init with copy of Any(*(void *)(v69 + 56) + 32 * v72, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_66;
  }
  if (swift_dynamicCast())
  {
    uint64_t v74 = v228;
    uint64_t v75 = *(void *)(a1 + 104);
    if ((unint64_t)(v75 - 1) <= 1)
    {
      uint64_t v76 = *(void *)(a1 + 96);
      swift_retain();
      outlined consume of Text.Style.LineStyle(v76, v75);
      *(void *)(a1 + 96) = 1;
      *(void *)(a1 + 104) = v74;
    }
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v71);
    swift_release();
  }
LABEL_67:
  uint64_t v77 = (void *)MEMORY[0x24C522820](0xD000000000000015, 0x80000002462206C0);
  uint64_t v78 = *v2;
  uint64_t v79 = *(void *)(*v2 + 16);
  uint64_t v215 = a1;
  id v205 = v77;
  if (!v79)
  {
    long long v228 = 0u;
    long long v229 = 0u;
LABEL_75:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v228, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_76;
  }
  id v80 = v77;
  uint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)(v80);
  if (v82)
  {
    outlined init with copy of Any(*(void *)(v78 + 56) + 32 * v81, (uint64_t)&v228);
  }
  else
  {
    long long v228 = 0u;
    long long v229 = 0u;
  }

  if (!*((void *)&v229 + 1)) {
    goto LABEL_75;
  }
  if (swift_dynamicCast())
  {
    id v202 = (id)v216;
    id v201 = (id)BYTE8(v216);
    id v200 = (id)v217;
    id v199 = (id)BYTE8(v217);
    id v198 = v218;
    unint64_t v197 = v219;
    uint64_t v193 = v220;
    uint64_t v192 = v221;
    uint64_t v83 = v222;
    uint64_t v191 = v223;
    uint64_t v190 = v224;
    uint64_t v189 = v225;
    int v188 = v226;
    uint64_t v187 = *(void *)(a1 + 112);
    uint64_t v186 = *(void *)(a1 + 120);
    uint64_t v84 = *(void *)(v215 + 128);
    v194 = v9;
    uint64_t v85 = *(void *)(v215 + 136);
    v204 = v7;
    uint64_t v86 = *(void *)(v215 + 144);
    uint64_t v185 = *(void *)(v215 + 152);
    v203 = v6;
    uint64_t v184 = *(void *)(v215 + 160);
    uint64_t v183 = *(void *)(v215 + 168);
    long long v182 = *(_OWORD *)(v215 + 176);
    swift_retain();
    uint64_t v87 = v84;
    a1 = v215;
    uint64_t v88 = v85;
    int v9 = v194;
    uint64_t v89 = v86;
    int v7 = v204;
    int v6 = v203;
    outlined consume of Text.Encapsulation?(v187, v186, v87, v88, v89, v185, v184, v183, v182);
    id v90 = v201;
    *(void *)(a1 + 112) = v202;
    *(void *)(a1 + 120) = v90;
    id v91 = v199;
    *(void *)(a1 + 128) = v200;
    *(void *)(a1 + 136) = v91;
    unint64_t v92 = v197;
    *(void *)(a1 + 144) = v198;
    *(void *)(a1 + 152) = v92;
    uint64_t v93 = v192;
    *(void *)(a1 + 160) = v193;
    *(void *)(a1 + 168) = v93;
    uint64_t v94 = v191;
    *(void *)(a1 + 176) = v83;
    *(void *)(a1 + 184) = v94;
    uint64_t v95 = v189;
    *(void *)(a1 + 192) = v190;
    *(void *)(a1 + 200) = v95;
    *(unsigned char *)(a1 + 208) = v188;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v80);
    swift_release();
  }
LABEL_76:
  uint64_t v96 = (void *)MEMORY[0x24C522820](0x2E49557466697753, 0xEC0000006E72654BLL);
  uint64_t v97 = *v2;
  uint64_t v98 = *(void *)(*v2 + 16);
  v204 = v96;
  if (!v98)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_84:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_85;
  }
  v99 = v96;
  uint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)(v99);
  if (v101)
  {
    outlined init with copy of Any(*(void *)(v97 + 56) + 32 * v100, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_84;
  }
  if (swift_dynamicCast())
  {
    *(void *)(a1 + 48) = v228;
    *(unsigned char *)(a1 + 56) = 0;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v99);
  }
LABEL_85:
  int v102 = (char *)MEMORY[0x24C522820](0xD000000000000010, 0x80000002462206E0);
  uint64_t v103 = *v2;
  uint64_t v104 = *(void *)(*v2 + 16);
  v203 = v102;
  if (!v104)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_93:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_94;
  }
  int v105 = v102;
  uint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(v105);
  if (v107)
  {
    outlined init with copy of Any(*(void *)(v103 + 56) + 32 * v106, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_93;
  }
  if (swift_dynamicCast())
  {
    *(void *)(a1 + 64) = v228;
    *(unsigned char *)(a1 + 72) = 0;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v105);
  }
LABEL_94:
  uint64_t v108 = (void *)MEMORY[0x24C522820](0xD000000000000016, 0x8000000246220700);
  uint64_t v109 = *v2;
  uint64_t v110 = *(void *)(*v2 + 16);
  id v202 = v108;
  if (!v110)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_102:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_103;
  }
  id v111 = v108;
  uint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)(v111);
  if (v113)
  {
    outlined init with copy of Any(*(void *)(v109 + 56) + 32 * v112, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_102;
  }
  if (swift_dynamicCast())
  {
    *(void *)(a1 + 32) = v228;
    *(unsigned char *)(a1 + 40) = 0;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v111);
  }
LABEL_103:
  v114 = (void *)MEMORY[0x24C522820](0xD000000000000011, 0x8000000246220720);
  uint64_t v115 = *v2;
  uint64_t v116 = *(void *)(*v2 + 16);
  id v201 = v114;
  if (v116)
  {
    id v117 = v114;
    uint64_t v118 = specialized __RawDictionaryStorage.find<A>(_:)(v117);
    if (v119)
    {
      outlined init with copy of Any(*(void *)(v115 + 56) + 32 * v118, (uint64_t)&v228);
    }
    else
    {
      long long v228 = 0u;
      long long v229 = 0u;
    }

    if (*((void *)&v229 + 1))
    {
      outlined init with take of Any(&v228, &v216);
      outlined init with copy of Any((uint64_t)&v216, (uint64_t)&v228);
      type metadata accessor for CTGlyphInfoRef(0);
      swift_dynamicCast();
      uint64_t v120 = v227;

      *(void *)(a1 + 296) = v120;
      long long v228 = 0u;
      long long v229 = 0u;
      specialized Dictionary.subscript.setter((uint64_t)&v228, v117);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v216);
      goto LABEL_111;
    }
  }
  else
  {
    long long v228 = 0u;
    long long v229 = 0u;
  }
  _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v228, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_111:
  uint64_t v121 = (void *)MEMORY[0x24C522820](0xD000000000000011, 0x8000000246220740);
  uint64_t v122 = *v2;
  uint64_t v123 = *(void *)(*v2 + 16);
  id v200 = v121;
  if (!v123)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_119:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_120;
  }
  id v124 = v121;
  uint64_t v125 = specialized __RawDictionaryStorage.find<A>(_:)(v124);
  if (v126)
  {
    outlined init with copy of Any(*(void *)(v122 + 56) + 32 * v125, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_119;
  }
  if (swift_dynamicCast())
  {
    *(unsigned char *)(a1 + 320) = v228;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v124);
  }
LABEL_120:
  uint64_t v127 = (void *)MEMORY[0x24C522820](0xD000000000000013, 0x8000000246220760);
  uint64_t v128 = *v2;
  uint64_t v129 = *(void *)(*v2 + 16);
  id v199 = v127;
  if (!v129)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_128:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_129;
  }
  id v130 = v127;
  uint64_t v131 = specialized __RawDictionaryStorage.find<A>(_:)(v130);
  if (v132)
  {
    outlined init with copy of Any(*(void *)(v128 + 56) + 32 * v131, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_128;
  }
  if (swift_dynamicCast())
  {
    *(unsigned char *)(a1 + 321) = 0;
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v130);
  }
LABEL_129:
  unint64_t v133 = (void *)MEMORY[0x24C522820](0xD000000000000018, 0x8000000246220780);
  uint64_t v134 = *v2;
  uint64_t v135 = *(void *)(*v2 + 16);
  id v198 = v133;
  if (!v135)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_137:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_138;
  }
  id v136 = v133;
  uint64_t v137 = specialized __RawDictionaryStorage.find<A>(_:)(v136);
  if (v138)
  {
    outlined init with copy of Any(*(void *)(v134 + 56) + 32 * v137, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_137;
  }
  if (swift_dynamicCast())
  {
    unint64_t v139 = v228;
    type metadata accessor for Text.Style(0);
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v139);
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v136);
  }
LABEL_138:
  uint64_t v140 = (void *)MEMORY[0x24C522820](0xD000000000000015, 0x80000002462207A0);
  uint64_t v141 = *v2;
  uint64_t v142 = *(void *)(*v2 + 16);
  unint64_t v197 = (unint64_t)v140;
  if (!v142)
  {
    long long v216 = 0u;
    long long v217 = 0u;
LABEL_146:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_147;
  }
  id v143 = v140;
  uint64_t v144 = specialized __RawDictionaryStorage.find<A>(_:)(v143);
  if (v145)
  {
    outlined init with copy of Any(*(void *)(v141 + 56) + 32 * v144, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }

  if (!*((void *)&v217 + 1)) {
    goto LABEL_146;
  }
  _sSay7SwiftUI15AnyFontModifierCGMaTm_0(0, &lazy cache variable for type metadata for [AnyFontModifier], (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, MEMORY[0x263F8D488]);
  if (swift_dynamicCast())
  {
    specialized Array.append<A>(contentsOf:)(v228);
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v143);
  }
LABEL_147:
  uint64_t v146 = *v2;
  if (*(void *)(*v2 + 16))
  {
    id v147 = (id)*MEMORY[0x263F08158];
    uint64_t v148 = specialized __RawDictionaryStorage.find<A>(_:)(v147);
    if (v149)
    {
      outlined init with copy of Any(*(void *)(v146 + 56) + 32 * v148, (uint64_t)&v216);
    }
    else
    {
      long long v216 = 0u;
      long long v217 = 0u;
    }

    if (*((void *)&v217 + 1))
    {
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_161;
      }
      double v150 = v6;
      char v151 = v228;
      if (v228)
      {
        specialized static AnyFontModifier.static<A>(_:)();
        MEMORY[0x24C522D60]();
        if (*(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        a1 = v215;
        if ((v151 & 2) == 0)
        {
LABEL_156:
          if ((v151 & 4) == 0) {
            goto LABEL_157;
          }
          goto LABEL_189;
        }
      }
      else if ((v228 & 2) == 0)
      {
        goto LABEL_156;
      }
      specialized static AnyFontModifier.static<A>(_:)();
      MEMORY[0x24C522D60]();
      if (*(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      a1 = v215;
      if ((v151 & 4) == 0)
      {
LABEL_157:
        if ((v151 & 0x20) == 0)
        {
LABEL_159:
          long long v216 = 0u;
          long long v217 = 0u;
          specialized Dictionary.subscript.setter((uint64_t)&v216, v147);
          int v6 = v150;
          goto LABEL_161;
        }
LABEL_158:
        outlined consume of Text.Style.LineStyle(*(void *)(a1 + 80), *(void *)(a1 + 88));
        *(_OWORD *)(a1 + 80) = xmmword_24619B520;
        goto LABEL_159;
      }
LABEL_189:
      specialized static AnyFontModifier.static<A>(_:)();
      MEMORY[0x24C522D60]();
      if (*(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      a1 = v215;
      if ((v151 & 0x20) == 0) {
        goto LABEL_159;
      }
      goto LABEL_158;
    }
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }
  _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_161:
  uint64_t v152 = type metadata accessor for Text.Style(0);
  uint64_t v153 = a1 + *(int *)(v152 + 84);
  if (one-time initialization token for automatic != -1) {
    swift_once();
  }
  uint64_t v154 = __swift_project_value_buffer(v210, (uint64_t)static TypesettingLanguage.automatic);
  uint64_t v155 = v211;
  outlined init with copy of Text.Style(v154, v211, type metadata accessor for TypesettingLanguage);
  BOOL v156 = specialized static TypesettingLanguage.Storage.== infix(_:_:)(v153, v155);
  _s7SwiftUI4TextV5StyleVWOhTm_0(v155, type metadata accessor for TypesettingLanguage);
  if (v156)
  {
    uint64_t v157 = *v2;
    if (*(void *)(*v2 + 16))
    {
      id v158 = (id)*MEMORY[0x263F081E8];
      uint64_t v159 = specialized __RawDictionaryStorage.find<A>(_:)(v158);
      if (v160)
      {
        outlined init with copy of Any(*(void *)(v157 + 56) + 32 * v159, (uint64_t)&v216);
      }
      else
      {
        long long v216 = 0u;
        long long v217 = 0u;
      }

      if (*((void *)&v217 + 1))
      {
        if (swift_dynamicCast())
        {
          type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
          v194 = v9;
          char v161 = v6;
          uint64_t v163 = v162;
          unint64_t v164 = v7;
          uint64_t v165 = *(int *)(v162 + 48);
          swift_bridgeObjectRetain();
          uint64_t v166 = (uint64_t)v195;
          Locale.Language.init(identifier:)();
          *(unsigned char *)(v166 + v165) = 0;
          int v7 = v164;
          unsigned __int8 v167 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v163 - 8) + 56);
          uint64_t v168 = v163;
          int v6 = v161;
          int v9 = v194;
          v167(v166, 0, 2, v168);
          swift_bridgeObjectRelease();
          outlined assign with take of TypesettingLanguage(v166, v153);
        }
        goto LABEL_173;
      }
    }
    else
    {
      long long v216 = 0u;
      long long v217 = 0u;
    }
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
  }
LABEL_173:
  unsigned __int8 v169 = (void *)MEMORY[0x24C522820](0xD00000000000001ALL, 0x80000002462207E0);
  uint64_t v170 = v169;
  uint64_t v171 = *v2;
  if (!*(void *)(*v2 + 16))
  {
    long long v216 = 0u;
    long long v217 = 0u;
    uint64_t v175 = v196;
LABEL_181:
    _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)&v216, (uint64_t (*)(void))type metadata accessor for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, void *))(v175 + 56))(v6, 1, 1, v7);
    goto LABEL_182;
  }
  id v172 = v169;
  uint64_t v173 = specialized __RawDictionaryStorage.find<A>(_:)(v172);
  if (v174)
  {
    outlined init with copy of Any(*(void *)(v171 + 56) + 32 * v173, (uint64_t)&v216);
  }
  else
  {
    long long v216 = 0u;
    long long v217 = 0u;
  }
  uint64_t v175 = v196;

  if (!*((void *)&v217 + 1)) {
    goto LABEL_181;
  }
  int v176 = swift_dynamicCast();
  v177 = *(void (**)(char *, void, uint64_t, void *))(v175 + 56);
  v177(v6, v176 ^ 1u, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, void *))(v175 + 48))(v6, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, void *))(v175 + 32))(v9, v6, v7);
    uint64_t v178 = *(int *)(v152 + 92);
    uint64_t v179 = v175;
    v180 = (char *)(v215 + v178);
    _s10Foundation3URLVSgWOhTm_0(v215 + v178, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    (*(void (**)(char *, char *, void *))(v179 + 16))(v180, v9, v7);
    v177(v180, 0, 1, v7);
    long long v216 = 0u;
    long long v217 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v216, v172);

    return (*(uint64_t (**)(char *, void *))(v179 + 8))(v9, v7);
  }
LABEL_182:

  return _s10Foundation3URLVSgWOhTm_0((uint64_t)v6, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
}

uint64_t outlined destroy of Text.Style(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI4TextV5StyleVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for Any?()
{
  if (!lazy cache variable for type metadata for Any?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Any?);
    }
  }
}

uint64_t outlined destroy of TypesettingLanguage.Storage(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for TypesettingLanguage(uint64_t a1)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for Locale.Language();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void *specialized Text.resolve<A>(into:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  LODWORD(v9) = a7;
  uint64_t v53 = a4;
  uint64_t v54 = type metadata accessor for Text.Resolved(0);
  MEMORY[0x270FA5388](v54);
  uint64_t v48 = (uint64_t)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v49 = (uint64_t)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v46 - v19;
  outlined init with copy of ResolvableStringResolutionContext(a1, (uint64_t)&v46 - v19, type metadata accessor for Text.Style);
  uint64_t v21 = *(void *)(a8 + 16);
  if (v21)
  {
    int v50 = (int)v9;
    uint64_t v51 = a5;
    uint64_t v52 = a6;
    int v9 = v20;
    swift_bridgeObjectRetain();
    char v22 = (unsigned __int8 *)(a8 + 16 * v21 + 24);
    uint64_t v23 = v21;
    do
    {
      --v23;
      uint64_t v24 = *((void *)v22 - 1);
      unsigned __int8 v25 = *v22;
      v22 -= 16;
      uint64_t v56 = a2;
      uint64_t v57 = a3;
      outlined copy of Text.Modifier(v24, v25);
      Text.Modifier.modify(style:environment:)(a1, &v56, v24, v25);
      outlined consume of Text.Modifier(v24, v25);
    }
    while (v23);
    swift_bridgeObjectRelease();
    uint64_t v20 = v9;
    a5 = v51;
    a6 = v52;
    LOBYTE(v9) = v50;
  }
  if (v9)
  {
    uint64_t v56 = a2;
    uint64_t v57 = a3;
    uint64_t v55 = v53;
    uint64_t v26 = *(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, char **))(*(void *)a5 + 80);
    swift_retain();
    v26(a1, &v56, &v55, v54, &protocol witness table for Text.Resolved);
    outlined consume of Text.Storage(a5, a6, 1);
    if (!v21) {
      return (void *)outlined destroy of Text.ResolvedString((uint64_t)v20, type metadata accessor for Text.Style);
    }
LABEL_9:
    uint64_t v27 = v49;
    outlined init with copy of ResolvableStringResolutionContext((uint64_t)v20, v49, type metadata accessor for Text.Style);
    outlined assign with take of Text.Style(v27, a1);
    return (void *)outlined destroy of Text.ResolvedString((uint64_t)v20, type metadata accessor for Text.Style);
  }
  uint64_t v47 = v21;
  if (a3)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(a2, &v56);
    swift_release_n();
    swift_release_n();
    uint64_t v51 = v56;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>();
    BloomFilter.init(hashValue:)(v29);
    uint64_t v30 = v56;
    uint64_t v31 = swift_retain_n();
    uint64_t v32 = specialized find1<A>(_:key:filter:)(v31, v30);
    if (v32) {
      uint64_t v51 = *(void *)(v32 + 72);
    }
    else {
      uint64_t v51 = 0;
    }
    swift_release_n();
  }
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  swift_bridgeObjectRetain();
  uint64_t v33 = String.init<A>(_:)();
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  uint64_t v35 = String.caseConvertedIfNeeded(_:)(&v56, v33, v34);
  uint64_t v52 = v35;
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v48;
  outlined init with copy of ResolvableStringResolutionContext(a1, v48, type metadata accessor for Text.Resolved);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v35;
  *(void *)(v39 + 24) = v37;
  uint64_t v40 = v54;
  uint64_t v41 = a1 + *(int *)(v54 + 32);
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  LODWORD(v35) = *(unsigned __int8 *)(v38 + *(int *)(v54 + 24));
  uint64_t v55 = v53;
  swift_bridgeObjectRetain();
  uint64_t v42 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for closure #1 in Text.Resolved.append<A>(_:in:with:isUniqueSizeVariant:), v39, &v56, v35, &v55, v41);
  swift_release();
  outlined destroy of Text.ResolvedString(v38, type metadata accessor for Text.Resolved);
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  Text.Resolved.append(_:with:in:)(v52, v37, v42, &v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void **)(a1 + *(int *)(v40 + 20));
  if (result)
  {
    unsigned int v43 = objc_msgSend(result, sel_isEmptyOrTerminatedByParagraphSeparator);
    uint64_t v44 = v47;
    if (v43)
    {

      *(void *)(v41 + 128) = 0;
    }
    __int16 v45 = word_26FA78328;
    if (v51) {
      __int16 v45 = 0;
    }
    *(_WORD *)(v41 + 32) |= v45;
    if (!v44) {
      return (void *)outlined destroy of Text.ResolvedString((uint64_t)v20, type metadata accessor for Text.Style);
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of Text.ResolvedString(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI4TextV14ResolvedStringVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI4TextV14ResolvedStringVWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for Text.Style(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 >= 2uLL) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(void *)(a1 + 16));
  swift_release();
  if ((unint64_t)(*(void *)(a1 + 88) - 1) >= 2) {
    swift_release();
  }
  if ((unint64_t)(*(void *)(a1 + 104) - 1) >= 2) {
    swift_release();
  }
  if (*(void *)(a1 + 176) != 1) {
    swift_release();
  }
  if (*(void *)(a1 + 248) != 1) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(void *)(a1 + 264), *(void *)(a1 + 272), *(unsigned char *)(a1 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 84);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 2, v5))
  {
    uint64_t v6 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 92);
  uint64_t v8 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }

  return swift_bridgeObjectRelease();
}

void destroy for Text.Resolved(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 >= 2uLL) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(void *)(a1 + 16));
  swift_release();
  if ((unint64_t)(*(void *)(a1 + 88) - 1) >= 2) {
    swift_release();
  }
  if ((unint64_t)(*(void *)(a1 + 104) - 1) >= 2) {
    swift_release();
  }
  if (*(void *)(a1 + 176) != 1) {
    swift_release();
  }
  if (*(void *)(a1 + 248) != 1) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(void *)(a1 + 264), *(void *)(a1 + 272), *(unsigned char *)(a1 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  uint64_t v4 = type metadata accessor for Text.Style(0);
  uint64_t v5 = a1 + *(int *)(v4 + 84);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 2, v6))
  {
    uint64_t v7 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(v4 + 92);
  uint64_t v9 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();

  uint64_t v11 = a1 + *(int *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(*(void **)(v11 + 56), *(void *)(v11 + 64), *(void *)(v11 + 72), *(void *)(v11 + 80), *(void *)(v11 + 88), *(void *)(v11 + 96));
  swift_bridgeObjectRelease();
  double v12 = *(void **)(v11 + 128);
}

unint64_t outlined consume of Text.Style.TextStyleColor(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_release();
  }
  return result;
}

uint64_t Text.Modifier.modify(style:environment:)(uint64_t result, uint64_t *a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v8 = result;
  switch(a4 >> 5)
  {
    case 1:
      if (*(double *)&a3 != 0.0)
      {
        unint64_t v12 = *(void *)result;
        swift_retain();
        uint64_t result = outlined consume of EffectAnimator<A>.State<A>(v12);
        *(double *)uint64_t v8 = *(double *)&a3;
        return result;
      }
      if (one-time initialization token for introduced != -1) {
        swift_once();
      }
      unsigned int v17 = static _SemanticFeature_v4.introduced;
      if (one-time initialization token for forced != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (byte_26B0F44FC == 1)
      {
        if ((dyld_program_sdk_at_least() & 1) == 0)
        {
LABEL_51:
          uint64_t result = outlined consume of EffectAnimator<A>.State<A>(*(void *)v8);
          *(void *)uint64_t v8 = 0;
          return result;
        }
      }
      else if (static Semantics.forced < v17)
      {
        goto LABEL_51;
      }
      uint64_t result = outlined consume of EffectAnimator<A>.State<A>(*(void *)v8);
      *(void *)uint64_t v8 = 1;
      return result;
    case 2:
      if ((a4 & 1) == 0)
      {
        type metadata accessor for AnyDynamicFontModifier<Font.WidthModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier);
        *(double *)(swift_allocObject() + 16) = *(double *)&a3;
        MEMORY[0x24C522D60]();
        if (*(void *)((*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_36;
      }
      specialized Text.Style.removeFontModifier<A>(ofType:)((uint64_t)&type metadata for Font.WeightModifier, (uint64_t)&lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (unint64_t)lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier);
      return specialized Text.Style.removeFontModifier<A>(ofType:)();
    case 3:
      if (one-time initialization token for introduced != -1) {
        swift_once();
      }
      unsigned int v13 = static _SemanticFeature_v4.introduced;
      if (one-time initialization token for forced != -1) {
        swift_once();
      }
      uint64_t result = swift_beginAccess();
      if (byte_26B0F44FC != 1)
      {
        if (static Semantics.forced < v13) {
          goto LABEL_16;
        }
LABEL_32:
        *(double *)(v8 + 48) = *(double *)&a3;
        *(unsigned char *)(v8 + 56) = 0;
        return result;
      }
      uint64_t result = dyld_program_sdk_at_least();
      if (result) {
        goto LABEL_32;
      }
LABEL_16:
      double v14 = *(double *)(v8 + 48);
      if (*(unsigned char *)(v8 + 56)) {
        double v14 = 0.0;
      }
      *(double *)(v8 + 48) = v14 + *(double *)&a3;
      *(unsigned char *)(v8 + 56) = 0;
      return result;
    case 4:
      *(double *)(result + 64) = *(double *)&a3;
      *(unsigned char *)(result + 72) = 0;
      return result;
    case 5:
      if (one-time initialization token for introduced != -1) {
        swift_once();
      }
      if (one-time initialization token for forced != -1) {
        swift_once();
      }
      uint64_t result = swift_beginAccess();
      if (byte_26B0F44FC == 1) {
        uint64_t result = dyld_program_sdk_at_least();
      }
      *(double *)(v8 + 32) = *(double *)&a3;
      *(unsigned char *)(v8 + 40) = 0;
      return result;
    case 6:
      uint64_t v18 = *a2;
      uint64_t v19 = v5;
      uint64_t v15 = *(void (**)(uint64_t, uint64_t *))(*(void *)a3 + 88);
      swift_retain();
      v15(v8, &v18);
      return outlined consume of Text.Modifier(a3, a4);
    case 7:
      if (a3 | a4 ^ 0xE0)
      {
        type metadata accessor for AnyDynamicFontModifier<Font.WidthModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier);
        *(unsigned char *)(swift_allocObject() + 16) = 2;
      }
      else
      {
        specialized static AnyFontModifier.static<A>(_:)();
      }
      MEMORY[0x24C522D60]();
      if (*(void *)((*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_36:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      return specialized Array._endMutation()();
    default:
      if (*(double *)&a3 != 0.0)
      {
        unint64_t v9 = *(void *)(result + 16);
        uint64_t v18 = *a2;
        uint64_t v19 = v5;
        outlined copy of Text.Modifier(a3, a4);
        swift_retain_n();
        uint64_t v10 = Text.Style.TextStyleColor.baseStyle(in:)();
        uint64_t v11 = specialized ShapeStyle.copyStyle(name:in:foregroundStyle:)(0, v4, v5, v10, a3);
        swift_release();
        outlined consume of Text.Modifier(a3, a4);
        outlined consume of Text.Style.TextStyleColor(v9);
        outlined consume of Text.Modifier(a3, a4);
        outlined consume of Text.Modifier(a3, a4);
        uint64_t result = swift_release();
        *(void *)(v8 + 16) = v11;
        return result;
      }
      if (one-time initialization token for introduced != -1) {
        swift_once();
      }
      unsigned int v16 = static _SemanticFeature_v4.introduced;
      if (one-time initialization token for forced != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (byte_26B0F44FC == 1)
      {
        if ((dyld_program_sdk_at_least() & 1) == 0)
        {
LABEL_44:
          uint64_t result = outlined consume of Text.Style.TextStyleColor(*(void *)(v8 + 16));
          *(void *)(v8 + 16) = 0x8000000000000000;
          return result;
        }
      }
      else if (static Semantics.forced < v16)
      {
        goto LABEL_44;
      }
      uint64_t result = outlined consume of Text.Style.TextStyleColor(*(void *)(v8 + 16));
      *(void *)(v8 + 16) = 0x8000000000000008;
      return result;
  }
}

uint64_t outlined consume of Text.Modifier(uint64_t a1, unsigned __int8 a2)
{
  unsigned int v2 = a2 >> 5;
  if (v2 <= 6 && ((1 << v2) & 0x43) != 0) {
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of Text.Modifier(uint64_t a1, unsigned __int8 a2)
{
  unsigned int v2 = a2 >> 5;
  if (v2 <= 6 && ((1 << v2) & 0x43) != 0) {
    return swift_retain();
  }
  return result;
}

void Text.Resolved.append(_:with:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = *a4;
  uint64_t v6 = a4[1];
  uint64_t v32 = *a4;
  uint64_t v33 = v6;
  uint64_t v8 = String.caseConvertedIfNeeded(_:)(&v32, a1, a2);
  uint64_t v10 = v9;
  if (v6)
  {
    swift_retain_n();
    swift_retain_n();
    char v11 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v7);
    swift_release_n();
    swift_release_n();
    if ((v11 & 1) == 0)
    {
LABEL_6:
      swift_retain_n();
      swift_retain_n();
      char v16 = specialized PropertyList.Tracker.value<A>(_:for:)(v7);
      swift_release_n();
      swift_release_n();
      if ((v16 & 1) == 0) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v32 = v7;
    uint64_t v33 = 0;
    swift_retain();
    char v12 = specialized static ShouldRedactContentKey.value(in:)(&v32);
    swift_release();
    if ((v12 & 1) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v13 = String.count.getter();
  uint64_t v8 = MEMORY[0x24C522AC0](3081666804, 0xA400000000000000, v13);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v10 = v15;
  if (v6) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v17 = swift_retain_n();
  char v18 = specialized closure #1 in PropertyList.subscript.getter(v17);
  swift_release_n();
  if ((v18 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v19 = v5 + *(int *)(type metadata accessor for Text.Resolved(0) + 32);
  __int16 v20 = *(_WORD *)(v19 + 32);
  if ((v20 & 4) == 0) {
    *(_WORD *)(v19 + 32) = v20 | 4;
  }
LABEL_11:
  uint64_t v21 = *(int *)(type metadata accessor for Text.Resolved(0) + 20);
  char v22 = *(void **)(v5 + v21);
  if (v22)
  {
    id v23 = objc_allocWithZone(MEMORY[0x263F086A0]);
    id v24 = v22;
    swift_bridgeObjectRetain();
    unsigned __int8 v25 = (void *)MEMORY[0x24C522820](v8, v10);
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedStringKey(0);
    _s10Foundation16AttributedStringV13CharacterViewVAESTAAWlTm_1(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v27 = objc_msgSend(v23, sel_initWithString_attributes_, v25, isa);

    objc_msgSend(v24, sel_appendAttributedString_, v27);
  }
  else
  {
    id v28 = objc_allocWithZone(MEMORY[0x263F089B8]);
    swift_bridgeObjectRetain();
    Swift::Int v29 = (void *)MEMORY[0x24C522820](v8, v10);
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedStringKey(0);
    _s10Foundation16AttributedStringV13CharacterViewVAESTAAWlTm_1(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    Class v30 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v31 = objc_msgSend(v28, sel_initWithString_attributes_, v29, v30);

    *(void *)(v5 + v21) = v31;
  }
}

uint64_t type metadata accessor for Text.Resolved(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Resolved);
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
}

uint64_t String.caseConvertedIfNeeded(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Locale?(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  if (!a1[1])
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>);
    BloomFilter.init(hashValue:)(v11);
    uint64_t v12 = v20;
    int v10 = 2;
    uint64_t v13 = swift_retain_n();
    uint64_t v14 = specialized find1<A>(_:key:filter:)(v13, v12);
    if (v14) {
      int v10 = *(unsigned __int8 *)(v14 + 72);
    }
    char v22 = v10;
    swift_release_n();
    if (v10 != 2)
    {
      uint64_t v15 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v15, (uint64_t)v8);
      goto LABEL_9;
    }
LABEL_7:
    swift_bridgeObjectRetain();
    return a2;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v9, &v22);
  swift_release_n();
  swift_release_n();
  LOBYTE(v10) = v22;
  if (v22 == 2) {
    goto LABEL_7;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v9, (uint64_t)v8);
LABEL_9:
  swift_release_n();
  swift_release_n();
  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  lazy protocol witness table accessor for type String and conformance String();
  if (v10) {
    uint64_t v17 = StringProtocol.lowercased(with:)();
  }
  else {
    uint64_t v17 = StringProtocol.uppercased(with:)();
  }
  a2 = v17;
  outlined destroy of Locale?((uint64_t)v8);
  return a2;
}

void type metadata accessor for Locale?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation6LocaleVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation6LocaleVSgMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for Locale?(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation16AttributedStringV13CharacterViewVAESTAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation16AttributedStringV13CharacterViewVAESTAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Text.Style.TextStyleColor.baseStyle(in:)()
{
  unint64_t v1 = *v0;
  unint64_t v2 = *v0 >> 62;
  if (!v2)
  {
    uint64_t v3 = *v0;
    goto LABEL_12;
  }
  if (v2 == 1)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    goto LABEL_12;
  }
  if (v1 != 0x8000000000000000)
  {
    uint64_t v4 = EnvironmentValues.defaultForegroundStyle.getter();
    if (!v4) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v3 = v4;
    goto LABEL_12;
  }
  uint64_t v4 = EnvironmentValues.foregroundStyle.getter();
  if (v4) {
    goto LABEL_11;
  }
LABEL_7:
  if (one-time initialization token for sharedPrimary != -1) {
    swift_once();
  }
  uint64_t v3 = static HierarchicalShapeStyle.sharedPrimary;
  swift_retain();
LABEL_12:
  outlined copy of Text.Style.TextStyleColor(v1);
  return v3;
}

uint64_t specialized ShapeStyle.copyStyle(name:in:foregroundStyle:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  v10[1] = 0;
  void v10[2] = 0;
  v10[0] = a1;
  char v11 = 3;
  uint64_t v12 = 0;
  char v13 = 5;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  long long v17 = 0u;
  long long v18 = 0u;
  char v19 = 1;
  __int16 v20 = 0;
  uint64_t v6 = *(void (**)(void *))(*(void *)a5 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  v6(v10);
  uint64_t v7 = v12;
  char v8 = v13;
  if (v13 == 2)
  {
    swift_retain();
    uint64_t v5 = v7;
  }
  else
  {
    swift_retain();
  }
  outlined consume of _ShapeStyle_Shape.Result(v7, v8);
  swift_release();
  swift_release();
  swift_release();
  return v5;
}

{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  char v8;
  void v10[3];
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  char v19;
  __int16 v20;

  uint64_t v5 = a5;
  v10[1] = 0;
  void v10[2] = 0;
  v10[0] = a1;
  char v11 = 3;
  uint64_t v12 = 0;
  char v13 = 5;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  long long v17 = 0u;
  long long v18 = 0u;
  char v19 = 1;
  __int16 v20 = 0;
  uint64_t v6 = *(void (**)(uint64_t, void *))(*(void *)a5 + 112);
  swift_retain();
  swift_retain();
  swift_retain();
  v6(v5, v10);
  uint64_t v7 = v12;
  char v8 = v13;
  if (v13 == 2)
  {
    swift_retain();
    uint64_t v5 = v7;
  }
  else
  {
    swift_retain();
  }
  outlined consume of _ShapeStyle_Shape.Result(v7, v8);
  swift_release();
  swift_release();
  swift_release();
  return v5;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextCaseKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextCaseKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextCaseKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SensitiveContentKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SensitiveContentKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SensitiveContentKey>>);
    }
  }
}

uint64_t specialized static Text.Modifier.== infix(_:_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a2 >> 5)
  {
    case 1:
      if ((a4 & 0xE0) != 0x20) {
        goto LABEL_34;
      }
      if (*(double *)&a1 == 0.0) {
        goto LABEL_32;
      }
      if (*(double *)&a3 == 0.0) {
        goto LABEL_34;
      }
      goto LABEL_22;
    case 2:
      if ((a4 & 0xE0) != 0x40) {
        goto LABEL_34;
      }
      if ((a2 | a4)) {
        char v10 = a2 & a4;
      }
      else {
        char v10 = *(double *)&a1 == *(double *)&a3;
      }
      return v10 & 1;
    case 3:
      if ((a4 & 0xE0) != 0x60) {
        goto LABEL_34;
      }
      goto LABEL_20;
    case 4:
      if ((a4 & 0xE0) != 0x80) {
        goto LABEL_34;
      }
      goto LABEL_20;
    case 5:
      if ((a4 & 0xE0) != 0xA0) {
        goto LABEL_34;
      }
LABEL_20:
      char v10 = *(double *)&a1 == *(double *)&a3;
      return v10 & 1;
    case 6:
      if ((a4 & 0xE0) != 0xC0) {
        goto LABEL_34;
      }
LABEL_22:
      char v11 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 96);
      outlined copy of Text.Modifier(a3, a4);
      outlined copy of Text.Modifier(a1, a2);
      char v9 = v11(a3);
      goto LABEL_23;
    case 7:
      if (a1 | a2 ^ 0xE0)
      {
        if (a4 < 0xE0u || a3 != 1) {
          goto LABEL_34;
        }
      }
      else if (a4 < 0xE0u || *(double *)&a3 != 0.0)
      {
        goto LABEL_34;
      }
      if (a4 == 224) {
        goto LABEL_36;
      }
      goto LABEL_34;
    default:
      if (a4 > 0x1Fu) {
        goto LABEL_34;
      }
      if (*(double *)&a1 == 0.0)
      {
LABEL_32:
        if (*(double *)&a3 == 0.0) {
          goto LABEL_36;
        }
        outlined consume of Text.Modifier(0, a2);
LABEL_34:
        char v10 = 0;
        return v10 & 1;
      }
      if (*(double *)&a3 == 0.0) {
        goto LABEL_34;
      }
      if (a1 == a3)
      {
LABEL_36:
        char v10 = 1;
        return v10 & 1;
      }
      char v8 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 88);
      outlined copy of Text.Modifier(a3, a4);
      outlined copy of Text.Modifier(a1, a2);
      char v9 = v8(a3);
LABEL_23:
      char v12 = v9;
      outlined consume of Text.Modifier(a3, a4);
      outlined consume of Text.Modifier(a1, a2);
      return v12 & 1;
  }
}

unint64_t outlined consume of EffectAnimator<A>.State<A>(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

void destroy for LocalizedStringKey.FormatArgument.Storage(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      __swift_destroy_boxed_opaque_existential_1(a1);
      unint64_t v2 = *(void **)(a1 + 40);

      break;
    case 1u:
      outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
      swift_bridgeObjectRelease();
      break;
    case 2u:
      uint64_t v3 = type metadata accessor for AttributedString();
      goto LABEL_10;
    case 3u:
      uint64_t v3 = type metadata accessor for LocalizedStringResource();
LABEL_10:
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    default:
      return;
  }
}

uint64_t destroy for Text.ResolvedString(uint64_t a1)
{
  if (*(void *)a1 >= 2uLL) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(void *)(a1 + 16));
  swift_release();
  if ((unint64_t)(*(void *)(a1 + 88) - 1) >= 2) {
    swift_release();
  }
  if ((unint64_t)(*(void *)(a1 + 104) - 1) >= 2) {
    swift_release();
  }
  if (*(void *)(a1 + 176) != 1) {
    swift_release();
  }
  if (*(void *)(a1 + 248) != 1) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(void *)(a1 + 264), *(void *)(a1 + 272), *(unsigned char *)(a1 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  uint64_t v2 = type metadata accessor for Text.Style(0);
  uint64_t v3 = a1 + *(int *)(v2 + 84);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 2, v4))
  {
    uint64_t v5 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(v2 + 92);
  uint64_t v7 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unint64_t TextForegroundStyleModifier.modify(style:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(v2 + 16);
  unint64_t v7 = *(void *)(a1 + 16);
  swift_retain();
  uint64_t v8 = Text.Style.TextStyleColor.baseStyle(in:)();
  uint64_t v9 = specialized ShapeStyle.copyStyle(name:in:foregroundStyle:)(0, v4, v5, v8, v6);
  swift_release();
  swift_release();
  unint64_t result = outlined consume of Text.Style.TextStyleColor(v7);
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t TextShadowModifier.modify(style:environment:)(uint64_t a1)
{
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 304) = v1;
  return result;
}

void type metadata accessor for AnyDynamicFontModifier<Font.WidthModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for AnyDynamicFontModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t TextForegroundKeyColorModifier.modify(style:environment:)(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 16);
  if (result >> 62)
  {
    if (result >> 62 == 1)
    {
      result &= 0x3FFFFFFFFFFFFFFFuLL;
    }
    else
    {
      if (result == 0x8000000000000000)
      {
        unint64_t result = EnvironmentValues.foregroundStyle.getter();
        if (result) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t result = EnvironmentValues.defaultForegroundStyle.getter();
        if (result) {
          goto LABEL_11;
        }
      }
      if (one-time initialization token for sharedPrimary != -1) {
        swift_once();
      }
      unint64_t result = swift_retain();
    }
  }
LABEL_11:
  *(void *)(a1 + 16) = result | 0x4000000000000000;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined destroy of Locale?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10Foundation6LocaleVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _s10Foundation6LocaleVSgMaTm_0(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  return outlined destroy of Locale?(a1, (uint64_t (*)(void))type metadata accessor for Locale?);
}

uint64_t TextShadowModifier.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v2 = *(void *)(result + 16);
    double v4 = *(double *)(result + 24);
    double v3 = *(double *)(result + 32);
    double v5 = *(double *)(result + 40);
    double v7 = *(double *)(v0 + 24);
    double v6 = *(double *)(v0 + 32);
    double v8 = *(double *)(v0 + 40);
    if (v2 == *(void *)(v0 + 16))
    {
      if (v4 != v7) {
        return 0;
      }
    }
    else
    {
      uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 88);
      swift_retain();
      uint64_t v10 = swift_retain();
      char v11 = v9(v10);
      swift_release();
      swift_release();
      uint64_t result = 0;
      if ((v11 & 1) == 0 || v4 != v7) {
        return result;
      }
    }
    return v5 == v8 && v3 == v6;
  }
  return result;
}

uint64_t LanguageAwareLineHeightRatioTextModifier.modify(style:environment:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  char v3 = *(unsigned char *)(v1 + 24);
  uint64_t v4 = a1 + *(int *)(type metadata accessor for Text.Style(0) + 84);
  uint64_t result = type metadata accessor for TypesettingConfiguration();
  uint64_t v6 = v4 + *(int *)(result + 20);
  *(void *)uint64_t v6 = v2;
  *(unsigned char *)(v6 + 8) = v3;
  return result;
}

uint64_t TextScaleModifier.modify(style:environment:)(uint64_t result)
{
  if (*(unsigned char *)(v1 + 16) == 1) {
    *(unsigned char *)(result + 320) = *(unsigned char *)(v1 + 17);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t MonospacedDigitTextModifier.modify(style:environment:)(uint64_t a1)
{
  if (*(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t TextForegroundStyleModifier.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    if (v2 == *(void *)(result + 16))
    {
      return 1;
    }
    else
    {
      char v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 88);
      swift_retain();
      uint64_t v4 = swift_retain();
      char v5 = v3(v4);
      swift_release();
      swift_release();
      return v5 & 1;
    }
  }
  return result;
}

uint64_t ForEach.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

double GeometryProxy.size.getter()
{
  specialized static Update.begin()();
  double v0 = 0.0;
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x263F288F8])
  {
    AGWeakAttributeGetAttribute();
    double v0 = *(double *)AGGraphGetInputValue();
  }
  static Update.end()();
  return v0;
}

uint64_t PropertyList.Tracker.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t Transaction.disablesAnimations.setter(uint64_t a1)
{
  return Transaction.disablesAnimations.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t Text.shadow(color:radius:x:y:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, double a6, double a7, double a8)
{
  type metadata accessor for TextShadowModifier();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(double *)(v16 + 24) = a6;
  *(double *)(v16 + 32) = a7;
  *(double *)(v16 + 40) = a8;
  swift_retain_n();
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v18 = a5[2];
  unint64_t v17 = a5[3];
  if (v18 >= v17 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, a5);
  }
  a5[2] = v18 + 1;
  char v19 = &a5[2 * v18];
  v19[4] = v16;
  *((unsigned char *)v19 + 40) = -64;
  swift_release();
  swift_release();
  return a2;
}

uint64_t type metadata accessor for TextShadowModifier()
{
  return self;
}

uint64_t EnvironmentValues.accessibilityEnabled.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    LOBYTE(a1) = a1(v3);
    swift_release_n();
    swift_release_n();
    return a1 & 1;
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    char v8 = a2(v7, &v9);
    swift_release_n();
    return v8 & 1;
  }
}

uint64_t Text.font(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_retain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v9 = a5[2];
  unint64_t v8 = a5[3];
  if (v9 >= v8 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, a5);
  }
  a5[2] = v9 + 1;
  uint64_t v10 = &a5[2 * v9];
  v10[4] = a1;
  *((unsigned char *)v10 + 40) = 32;
  return a2;
}

uint64_t ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, double *a4@<X8>)
{
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v15 = *a1;
  ResolvedStyledText.schedule.getter((uint64_t)v24);
  uint64_t v16 = v25;
  if (v25)
  {
    uint64_t v17 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    char v23 = a3 & 1;
    TimelineSchedule.nextEntry(after:mode:limit:)(a2, &v23, 60, 0, v16, v17, (uint64_t)v10);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(v14, v10, v11);
      Date.timeIntervalSince(_:)();
      double v19 = v18;
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
      double v21 = v15 + v19;
      goto LABEL_8;
    }
  }
  else
  {
    _sypSgWOhTm_5((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule?, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  uint64_t result = _s10Foundation4DateVSgWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Date?);
  if (one-time initialization token for infinity != -1) {
    uint64_t result = swift_once();
  }
  double v21 = *(double *)&static Time.infinity;
LABEL_8:
  *a4 = v21;
  return result;
}

void *ResolvedTextHelper.resolve(_:with:sizeFitting:)(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t *a5, int a6)
{
  int v202 = a6;
  uint64_t v213 = a3;
  uint64_t v214 = a1;
  uint64_t v215 = a2;
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  MEMORY[0x270FA5388](Update);
  uint64_t v190 = (char *)&v179 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Date?, Date?)();
  uint64_t v187 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v189 = (uint64_t)&v179 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Date??, Date??)(0);
  uint64_t v192 = v12;
  MEMORY[0x270FA5388](v12);
  v203 = (char *)&v179 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date??(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v191 = (uint64_t)&v179 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v196 = (uint64_t)&v179 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v195 = (uint64_t)&v179 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v197 = (uint64_t)&v179 - v21;
  uint64_t v22 = type metadata accessor for ResolvedTextHelper(0);
  MEMORY[0x270FA5388](v22);
  uint64_t v198 = (uint64_t)&v179 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v204 = (uint64_t)&v179 - v25;
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v211 = *(void *)(v26 - 8);
  uint64_t v212 = v26;
  MEMORY[0x270FA5388](v26);
  uint64_t v185 = (char *)&v179 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v210 = (char *)&v179 - v29;
  type metadata accessor for Date?(0);
  uint64_t v209 = v30;
  uint64_t v199 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v186 = (uint64_t)&v179 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v188 = (uint64_t)&v179 - v33;
  MEMORY[0x270FA5388](v34);
  id v201 = (char *)&v179 - v35;
  MEMORY[0x270FA5388](v36);
  id v206 = (char *)&v179 - v37;
  MEMORY[0x270FA5388](v38);
  id v205 = (char *)&v179 - v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v200 = (uint64_t)&v179 - v41;
  MEMORY[0x270FA5388](v42);
  uint64_t v44 = (char *)&v179 - v43;
  MEMORY[0x270FA5388](v45);
  uint64_t v47 = (char *)&v179 - v46;
  MEMORY[0x270FA5388](v48);
  int v50 = (char *)&v179 - v49;
  MEMORY[0x270FA5388](v51);
  uint64_t v53 = (char *)&v179 - v52;
  uint64_t v54 = *a5;
  uint64_t v55 = v6;
  uint64_t v56 = *(char **)(v6 + 40);
  PropertyList.Tracker.reset()();
  long long v217 = a4;
  if (a4)
  {
    uint64_t v208 = v22;
    v213 &= 1u;
    uint64_t v216 = v55;
    uint64_t v57 = v54;
    if (v54) {
      uint64_t v54 = *(void *)(v54 + 64);
    }
    uint64_t v58 = *((void *)v56 + 2);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v214, (uint64_t)v215, v213);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v58 + 16));
    *(void *)(v58 + 24) = v54;
    os_unfair_lock_unlock((os_unfair_lock_t)(v58 + 16));
    swift_release();
    swift_release();
    swift_release();
    uint64_t v238 = v57;
    v239 = v56;
    uint64_t WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(WeakValue, (uint64_t)v53, (uint64_t (*)(void))type metadata accessor for Date?);
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1((uint64_t)v53, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for Date?);
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1((uint64_t)v50, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Date?);
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1((uint64_t)v47, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Date?);
      swift_retain_n();
      specialized closure #1 in PropertyList.subscript.setter(&v238, (uint64_t)v44);
      swift_release();
      _s10Foundation4DateVSgWOhTm_0((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Date?);
      uint64_t v56 = v239;
      if (v239)
      {
        uint64_t v60 = v238;
        swift_retain();
        swift_retain();
        specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v57, v60);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v57 = v60;
      }
      else
      {
        swift_release();
        uint64_t v57 = v238;
      }
      uint64_t v61 = v208;
      _s10Foundation4DateVSgWOhTm_0((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Date?);
      _s10Foundation4DateVSgWOhTm_0((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for Date?);
      _s10Foundation4DateVSgWOhTm_0((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for Date?);
    }
    else
    {
      uint64_t v61 = v208;
    }
    char v62 = (void *)v216;
    uint64_t v63 = *(void *)(v216 + *(int *)(v61 + 60));
    if (v63)
    {
      swift_retain_n();
      specialized closure #1 in PropertyList.subscript.setter(&v238, v63);
      swift_release();
      uint64_t v56 = v239;
      uint64_t v194 = 0;
      if (v239)
      {
        uint64_t v64 = v238;
        swift_retain();
        swift_retain();
        specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v57, v64);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v64 = v238;
      }
    }
    else
    {
      uint64_t v194 = 0;
      uint64_t v64 = v57;
    }
    uint64_t v65 = v62[6];
    uint64_t v66 = v62[7];
    uint64_t v67 = v62;
    uint64_t v68 = v62[8];
    uint64_t v69 = v67[9];
    uint64_t v70 = v214;
    uint64_t v71 = (uint64_t)v215;
    v67[6] = v214;
    v67[7] = v71;
    char v72 = v213;
    char v73 = v217;
    v67[8] = v213;
    v67[9] = v73;
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v70, v71, v72);
    outlined consume of Text?(v65, v66, v68, v69);
    swift_retain_n();
    if (v56)
    {
      swift_retain_n();
      uint64_t v74 = v200;
      specialized PropertyList.Tracker.value<A>(_:for:)(v64, v200);
      swift_release_n();
      uint64_t v76 = v211;
      uint64_t v75 = v212;
      uint64_t v77 = v210;
      uint64_t v79 = (uint64_t)v205;
      uint64_t v78 = (uint64_t)v206;
      uint64_t v80 = (uint64_t)v201;
      uint64_t v81 = v194;
    }
    else
    {
      uint64_t v74 = v200;
      uint64_t v82 = v64;
      uint64_t v81 = v194;
      specialized closure #1 in PropertyList.subscript.getter(v82, v200);
      swift_release();
      uint64_t v76 = v211;
      uint64_t v75 = v212;
      uint64_t v77 = v210;
      uint64_t v79 = (uint64_t)v205;
      uint64_t v78 = (uint64_t)v206;
      uint64_t v80 = (uint64_t)v201;
    }
    swift_release_n();
    v180 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
    uint64_t v181 = v76 + 48;
    if (v180(v74, 1, v75) == 1)
    {
      static Date.now.getter();
      _s10Foundation4DateVSgWOhTm_0(v74, (uint64_t (*)(void))type metadata accessor for Date?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v77, v74, v75);
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 16))(v79, v77, v75);
    long long v182 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56);
    uint64_t v183 = v76 + 56;
    v182(v79, 0, 1, v75);
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v79, v78, (uint64_t (*)(void))type metadata accessor for Date?);
    uint64_t v83 = v238;
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v78, v80, (uint64_t (*)(void))type metadata accessor for Date?);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(&v238, v80);
    swift_release();
    _s10Foundation4DateVSgWOhTm_0(v80, (uint64_t (*)(void))type metadata accessor for Date?);
    uint64_t v84 = v239;
    if (v239)
    {
      uint64_t v85 = v238;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v83, v85);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v85 = v238;
    }
    _s10Foundation4DateVSgWOhTm_0(v78, (uint64_t (*)(void))type metadata accessor for Date?);
    _s10Foundation4DateVSgWOhTm_0(v79, (uint64_t (*)(void))type metadata accessor for Date?);
    LODWORD(v206) = *(unsigned __int8 *)(v216 + 12);
    if (v206 == 1)
    {
      *(void *)&long long v234 = 0;
      *(void *)&long long v233 = 0;
      long long v232 = 0uLL;
      BYTE8(v233) = 0;
      BYTE8(v234) = 5;
      *(void *)v235 = v85;
      *(void *)&v235[8] = v84;
      memset(&v235[16], 0, 40);
      v235[56] = 1;
      *(_WORD *)&v235[57] = 1;
      swift_retain();
      swift_retain();
      specialized ForegroundStyle._apply(to:)((uint64_t)&v232);
      uint64_t v86 = v234;
      if (!BYTE8(v234))
      {
        uint64_t v91 = v213;
        *(void *)&long long v223 = v234;
        swift_retain();
        id v201 = (char *)v85;
        uint64_t v93 = v214;
        uint64_t v92 = (uint64_t)v215;
        uint64_t v184 = v81;
        uint64_t v94 = _ShapeStyle_Shape.PreparedTextResult.apply(to:)(v214, (uint64_t)v215, v91 != 0, v217);
        uint64_t v96 = v95;
        id v205 = v97;
        uint64_t v99 = v98 & 1;
        outlined consume of Text.Storage(v93, v92, v91);
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Shape.Result(v86, 0);
        swift_release();
        uint64_t v81 = v184;
        swift_release();
        uint64_t v85 = (uint64_t)v201;
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v86, 0);
        uint64_t v214 = v94;
        uint64_t v215 = v96;
        uint64_t v213 = v99;
        uint64_t v87 = v205;
        if (v84) {
          goto LABEL_29;
        }
        goto LABEL_31;
      }
      outlined consume of _ShapeStyle_Shape.Result(v234, SBYTE8(v234));
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v87 = v217;
    if (v84)
    {
LABEL_29:
      swift_retain_n();
      swift_retain_n();
      char v88 = specialized PropertyList.Tracker.value<A>(_:for:)(v85);
      swift_release_n();
      swift_release_n();
      swift_retain_n();
      swift_retain_n();
      char v89 = specialized PropertyList.Tracker.value<A>(_:for:)(v85);
      swift_release_n();
      id v90 = v84;
      goto LABEL_32;
    }
LABEL_31:
    uint64_t v100 = swift_retain_n();
    char v88 = specialized closure #1 in PropertyList.subscript.getter(v100);
    swift_release_n();
    uint64_t v101 = swift_retain_n();
    char v89 = specialized closure #1 in PropertyList.subscript.getter(v101);
    swift_release();
    id v90 = 0;
LABEL_32:
    swift_release_n();
    uint64_t v102 = v88 & 1;
    if (v89) {
      uint64_t v102 = v88 & 1 | 0x10;
    }
    uint64_t v103 = v216;
    uint64_t v104 = 8;
    if (*(unsigned char *)(v216 + 18)) {
      uint64_t v104 = 4;
    }
    uint64_t v105 = v102 | v104;
    if (*(unsigned char *)(v216 + 13)) {
      v105 |= 0x20uLL;
    }
    unint64_t v106 = *(unsigned __int16 *)(v216 + 16);
    unint64_t v107 = v105 & 0xFFFFFFFFFFFFFFBFLL | (((v106 >> 5) & 1) << 6);
    int v108 = *(unsigned __int8 *)(v216 + 14);
    if (v108) {
      v107 |= 0x80uLL;
    }
    char v109 = v206 | *(unsigned char *)(v216 + 18);
    *(void *)&long long v232 = v85;
    *((void *)&v232 + 1) = v84;
    unint64_t v222 = v107;
    long long v221 = *(_OWORD *)(v216 + 24);
    swift_retain();
    swift_retain();
    id v206 = (char *)Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)((uint64_t)&v223, (uint64_t *)&v232, v109, (float64_t *)&v222, (uint64_t *)&v221, v214, v215, v213, (uint64_t)v87);
    swift_release();
    swift_release();
    *(_OWORD *)&v235[48] = v229;
    long long v236 = v230;
    uint64_t v237 = v231;
    long long v234 = v225;
    *(_OWORD *)v235 = v226;
    *(_OWORD *)&v235[16] = v227;
    *(_OWORD *)&v235[32] = v228;
    long long v232 = v223;
    long long v233 = v224;
    double v110 = -*(double *)&v223;
    double v111 = -*((double *)&v223 + 1);
    double v112 = -*(double *)&v224;
    double v113 = -*((double *)&v224 + 1);
    *(void *)&long long v221 = v85;
    *((void *)&v221 + 1) = v84;
    char v114 = *(unsigned char *)(v103 + 15);
    LODWORD(v194) = v108;
    v220[0] = v108;
    v220[1] = v114;
    uint64_t v115 = v87[2];
    long long v217 = v87;
    id v205 = v90;
    if (v115)
    {
      uint64_t v116 = v87 + 5;
      while (1)
      {
        if ((*v116 & 0xE0) == 0xC0)
        {
          type metadata accessor for CollapsibleTextModifier();
          if (swift_dynamicCastClass()) {
            break;
          }
        }
        v116 += 16;
        if (!--v115) {
          goto LABEL_46;
        }
      }
      id v117 = (char *)v85;
      uint64_t v184 = v81;
      int v193 = 1;
    }
    else
    {
LABEL_46:
      id v117 = (char *)v85;
      uint64_t v184 = v81;
      int v193 = 0;
    }
    __int16 v219 = v234 | v106;
    uint64_t v118 = *(void **)&v235[8];
    uint64_t v119 = *(void *)&v235[16];
    char v120 = v235[24];
    uint64_t v121 = *(void *)&v235[40];
    uint64_t v122 = *(void *)&v235[32];
    uint64_t v123 = *(void *)&v235[48];
    long long v223 = *(_OWORD *)&v235[8];
    long long v224 = *(_OWORD *)&v235[24];
    long long v225 = *(_OWORD *)&v235[40];
    *(void *)&long long v226 = *(void *)&v235[56];
    unint64_t v222 = v236;
    uint64_t v200 = *((void *)&v234 + 1);
    id v201 = v117;
    uint64_t v124 = *(void *)v235;
    unsigned __int8 v218 = 2;
    swift_retain();
    swift_retain();
    outlined copy of ResolvedTextSuffix(v118, v119, v120, v122, v121, v123);
    swift_bridgeObjectRetain();
    uint64_t v125 = specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(v206, (unint64_t *)&v221, v220, v193, &v219, &v223, (uint64_t *)&v222, v200, v110, v111, v112, v113, v124, &v218, v202 & 1);
    swift_bridgeObjectRelease();
    uint64_t v126 = v122;
    a4 = (void *)v125;
    outlined consume of ResolvedTextSuffix(v118, v119, v120, v126, v121, v123);
    swift_release();
    swift_release();
    uint64_t v127 = *(void *)(v125 + 216);
    if (v127) {
      LODWORD(v127) = NSAttributedString.isDynamic.getter();
    }
    uint64_t v128 = v216;
    uint64_t v129 = v208;
    uint64_t v130 = v209;
    uint64_t v131 = v212;
    uint64_t v133 = (uint64_t)v203;
    uint64_t v132 = v204;
    char v134 = v194;
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v216, v204, type metadata accessor for ResolvedTextHelper);
    if (v134)
    {
      _s10Foundation4DateVSgWOhTm_0(v132, type metadata accessor for ResolvedTextHelper);
      goto LABEL_63;
    }
    uint64_t v135 = AGGraphGetWeakValue();
    if (!v135)
    {
      char v141 = v127;
      uint64_t v142 = v197;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 56))(v197, 1, 1, v130);
      _s10Foundation4DateVSgWOhTm_0(v142, (uint64_t (*)(void))type metadata accessor for Date??);
      uint64_t v143 = v198;
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v132, v198, type metadata accessor for ResolvedTextHelper);
      _s10Foundation4DateVSgWOhTm_0(v143, type metadata accessor for ResolvedTextHelper);
      _s10Foundation4DateVSgWOhTm_0(v132, type metadata accessor for ResolvedTextHelper);
      if ((v141 & 1) == 0) {
        goto LABEL_63;
      }
LABEL_75:
      uint64_t v168 = v131;
      uint64_t v169 = v238;
      if (v239)
      {
        swift_retain_n();
        swift_retain_n();
        char v170 = specialized PropertyList.Tracker.value<A>(_:for:)(v169);
        swift_release_n();
      }
      else
      {
        uint64_t v171 = swift_retain_n();
        char v170 = specialized closure #1 in PropertyList.subscript.getter(v171);
        swift_release();
      }
      swift_release_n();
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      uint64_t v173 = v190;
      char v174 = &v190[v172[12]];
      uint64_t v175 = v172[16];
      uint64_t v176 = v172[20];
      uint64_t v177 = *(void *)AGGraphGetValue();
      outlined consume of Text.Storage(v214, (uint64_t)v215, v213);
      swift_bridgeObjectRelease();

      outlined release of Text.ResolvedProperties(&v232);
      *uint64_t v173 = v177;
      (*(void (**)(char *, char *, uint64_t))(v211 + 32))(v174, v210, v168);
      *((unsigned char *)v173 + v175) = v170 & 1;
      *(void *)((char *)v173 + v176) = a4;
      swift_storeEnumTagMultiPayload();
      uint64_t v178 = v128 + *(int *)(v208 + 56);
      swift_retain();
      outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v173, v178, type metadata accessor for ResolvedTextHelper.NextUpdate);
      goto LABEL_64;
    }
    LODWORD(v209) = v127;
    uint64_t v136 = v197;
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v135, v197, (uint64_t (*)(void))type metadata accessor for Date?);
    uint64_t v137 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 56);
    uint64_t v138 = 1;
    v137(v136, 0, 1, v130);
    _s10Foundation4DateVSgWOhTm_0(v136, (uint64_t (*)(void))type metadata accessor for Date??);
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v132, v198, type metadata accessor for ResolvedTextHelper);
    uint64_t v139 = AGGraphGetWeakValue();
    uint64_t v140 = v195;
    if (v139)
    {
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v139, v195, (uint64_t (*)(void))type metadata accessor for Date?);
      uint64_t v138 = 0;
    }
    v137(v140, v138, 1, v130);
    uint64_t v144 = v130;
    uint64_t v145 = v196;
    v182(v196, 1, 1, v212);
    v137(v145, 0, 1, v144);
    uint64_t v146 = v133 + *(int *)(v192 + 48);
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v140, v133, (uint64_t (*)(void))type metadata accessor for Date??);
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v145, v146, (uint64_t (*)(void))type metadata accessor for Date??);
    id v147 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v199 + 48);
    if (v147(v133, 1, v144) == 1)
    {
      _s10Foundation4DateVSgWOhTm_0(v145, (uint64_t (*)(void))type metadata accessor for Date??);
      _s10Foundation4DateVSgWOhTm_0(v140, (uint64_t (*)(void))type metadata accessor for Date??);
      _s10Foundation4DateVSgWOhTm_0(v198, type metadata accessor for ResolvedTextHelper);
      _s10Foundation4DateVSgWOhTm_0(v204, type metadata accessor for ResolvedTextHelper);
      int v148 = v147(v146, 1, v144);
      uint64_t v129 = v208;
      if (v148 == 1)
      {
        _s10Foundation4DateVSgWOhTm_0(v133, (uint64_t (*)(void))type metadata accessor for Date??);
        uint64_t v128 = v216;
        uint64_t v131 = v212;
        if (v209) {
          goto LABEL_75;
        }
LABEL_63:
        (*(void (**)(char *, uint64_t))(v211 + 8))(v210, v131);
        outlined consume of Text.Storage(v214, (uint64_t)v215, v213);
        swift_bridgeObjectRelease();

        outlined release of Text.ResolvedProperties(&v232);
        _s10Foundation4DateVSgWOhTm_0(v128 + *(int *)(v129 + 56), type metadata accessor for ResolvedTextHelper.NextUpdate);
        swift_storeEnumTagMultiPayload();
LABEL_64:
        swift_release();
        swift_release();
        return a4;
      }
LABEL_62:
      _s10Foundation4DateVSgWOhTm_0(v133, (uint64_t (*)(void))type metadata accessor for (Date??, Date??));
      uint64_t v128 = v216;
      uint64_t v131 = v212;
      goto LABEL_63;
    }
    uint64_t v149 = v191;
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v133, v191, (uint64_t (*)(void))type metadata accessor for Date??);
    if (v147(v146, 1, v144) == 1)
    {
      _s10Foundation4DateVSgWOhTm_0(v196, (uint64_t (*)(void))type metadata accessor for Date??);
      _s10Foundation4DateVSgWOhTm_0(v195, (uint64_t (*)(void))type metadata accessor for Date??);
      _s10Foundation4DateVSgWOhTm_0(v198, type metadata accessor for ResolvedTextHelper);
      _s10Foundation4DateVSgWOhTm_0(v204, type metadata accessor for ResolvedTextHelper);
      _s10Foundation4DateVSgWOhTm_0(v149, (uint64_t (*)(void))type metadata accessor for Date?);
      goto LABEL_62;
    }
    uint64_t v151 = v188;
    _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0(v146, v188, (uint64_t (*)(void))type metadata accessor for Date?);
    uint64_t v152 = v189 + *(int *)(v187 + 48);
    uint64_t v153 = v149;
    uint64_t v154 = v189;
    _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0(v153, v189, (uint64_t (*)(void))type metadata accessor for Date?);
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v151, v152, (uint64_t (*)(void))type metadata accessor for Date?);
    uint64_t v155 = v212;
    BOOL v156 = v180;
    if (v180(v154, 1, v212) == 1)
    {
      _s10Foundation4DateVSgWOhTm_0(v151, (uint64_t (*)(void))type metadata accessor for Date?);
      _s10Foundation4DateVSgWOhTm_0(v196, (uint64_t (*)(void))type metadata accessor for Date??);
      _s10Foundation4DateVSgWOhTm_0(v195, (uint64_t (*)(void))type metadata accessor for Date??);
      _s10Foundation4DateVSgWOhTm_0(v198, type metadata accessor for ResolvedTextHelper);
      _s10Foundation4DateVSgWOhTm_0(v204, type metadata accessor for ResolvedTextHelper);
      uint64_t v131 = v155;
      if (v156(v152, 1, v155) == 1)
      {
        _s10Foundation4DateVSgWOhTm_0(v189, (uint64_t (*)(void))type metadata accessor for Date?);
        char v157 = 0;
LABEL_73:
        uint64_t v128 = v216;
        _s10Foundation4DateVSgWOhTm_0(v133, (uint64_t (*)(void))type metadata accessor for Date??);
        if (v157 & 1) != 0 || ((v209 ^ 1)) {
          goto LABEL_63;
        }
        goto LABEL_75;
      }
    }
    else
    {
      uint64_t v158 = v154;
      uint64_t v159 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v156;
      uint64_t v160 = v186;
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v158, v186, (uint64_t (*)(void))type metadata accessor for Date?);
      int v161 = v159(v152, 1, v155);
      uint64_t v162 = v196;
      if (v161 != 1)
      {
        uint64_t v163 = v196;
        uint64_t v164 = v211;
        uint64_t v165 = v185;
        (*(void (**)(char *, uint64_t, uint64_t))(v211 + 32))(v185, v152, v155);
        lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
        char v166 = dispatch thunk of static Equatable.== infix(_:_:)();
        unsigned __int8 v167 = *(void (**)(char *, uint64_t))(v164 + 8);
        v167(v165, v212);
        _s10Foundation4DateVSgWOhTm_0(v188, (uint64_t (*)(void))type metadata accessor for Date?);
        _s10Foundation4DateVSgWOhTm_0(v163, (uint64_t (*)(void))type metadata accessor for Date??);
        _s10Foundation4DateVSgWOhTm_0(v195, (uint64_t (*)(void))type metadata accessor for Date??);
        _s10Foundation4DateVSgWOhTm_0(v198, type metadata accessor for ResolvedTextHelper);
        _s10Foundation4DateVSgWOhTm_0(v204, type metadata accessor for ResolvedTextHelper);
        v167((char *)v160, v212);
        uint64_t v133 = (uint64_t)v203;
        uint64_t v129 = v208;
        uint64_t v131 = v212;
        _s10Foundation4DateVSgWOhTm_0(v189, (uint64_t (*)(void))type metadata accessor for Date?);
        char v157 = v166 ^ 1;
        goto LABEL_73;
      }
      _s10Foundation4DateVSgWOhTm_0(v151, (uint64_t (*)(void))type metadata accessor for Date?);
      _s10Foundation4DateVSgWOhTm_0(v162, (uint64_t (*)(void))type metadata accessor for Date??);
      _s10Foundation4DateVSgWOhTm_0(v195, (uint64_t (*)(void))type metadata accessor for Date??);
      _s10Foundation4DateVSgWOhTm_0(v198, type metadata accessor for ResolvedTextHelper);
      _s10Foundation4DateVSgWOhTm_0(v204, type metadata accessor for ResolvedTextHelper);
      (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v160, v155);
      uint64_t v131 = v155;
    }
    _s10Foundation4DateVSgWOhTm_0(v189, (uint64_t (*)(void))type metadata accessor for (Date?, Date?));
    _s10Foundation4DateVSgWOhTm_0(v133, (uint64_t (*)(void))type metadata accessor for Date??);
    uint64_t v128 = v216;
    goto LABEL_63;
  }
  _s10Foundation4DateVSgWOhTm_0(v55 + *(int *)(v22 + 56), type metadata accessor for ResolvedTextHelper.NextUpdate);
  swift_storeEnumTagMultiPayload();
  return a4;
}

uint64_t outlined destroy of Date?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s10Foundation4DateVSgWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10Foundation4DateVSgWOhTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s10Foundation4DateVSgWOhTm_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _s10Foundation4DateVSgWOhTm_3(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _s10Foundation4DateVSgMaTm_5(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for ClosedRange<Date>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for Date?(uint64_t a1)
{
}

uint64_t destroy for ResolvedTextHelper(uint64_t a1, uint64_t a2)
{
  swift_release();
  if (*(void *)(a1 + 72))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 56);
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v7 = v4 + *(int *)(v6 + 48);
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    return swift_release();
  }
  return result;
}

void type metadata accessor for Date??(uint64_t a1)
{
}

uint64_t specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(v5 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 16));
  uint64_t v12 = *(void *)(v11 + 24);
  if (a1)
  {
    if (v12 != *(void *)(a1 + 64)) {
      goto LABEL_22;
    }
    if (!a2)
    {
      if (!v12) {
        goto LABEL_22;
      }
      char v13 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    if (v12) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = a2 == 0;
    }
    if (v14) {
      goto LABEL_22;
    }
  }
  if (v12 == *(void *)(a2 + 64)) {
    goto LABEL_22;
  }
  char v13 = 0;
LABEL_12:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  specialized Dictionary._Variant.removeValue(forKey:)(v15, (uint64_t)&v21);
  if (v22)
  {
    outlined init with take of ScrollStateRequest(&v21, (uint64_t)v23);
    outlined init with copy of AnyTrackedValue((uint64_t)v23, (uint64_t)&v21);
    uint64_t v16 = *(void **)(v11 + 48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v11 + 48) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      *(void *)(v11 + 48) = v16;
    }
    unint64_t v19 = v16[2];
    unint64_t v18 = v16[3];
    if (v19 >= v18 >> 1)
    {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
      *(void *)(v11 + 48) = v16;
    }
    v16[2] = v19 + 1;
    outlined init with take of ScrollStateRequest(&v21, (uint64_t)&v16[5 * v19 + 4]);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    outlined destroy of AnyTrackedValue?((uint64_t)&v21, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue?, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
  }
  move(_:to:)(v11 + 40, v11 + 48);
  if (v13) {
    *(void *)(v11 + 24) = 0;
  }
  else {
    *(void *)(v11 + 24) = *(void *)(a2 + 64);
  }
LABEL_22:
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 16));
  return swift_release();
}

uint64_t destroy for ResolvedTextFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  swift_release();
  if (*(void *)(v2 + 72))
  {
    outlined consume of Text.Storage(*(void *)(v2 + 48), *(void *)(v2 + 56), *(unsigned char *)(v2 + 64));
    swift_bridgeObjectRelease();
  }
  uint64_t v3 = v2 + *(int *)(type metadata accessor for ResolvedTextHelper(0) + 56);
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v6 = v3 + *(int *)(v5 + 48);
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    return swift_release();
  }
  return result;
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Date?, Date?)();
  MEMORY[0x270FA5388](v11 - 8);
  char v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  outlined init with copy of Date?(a1, (uint64_t)v13);
  outlined init with copy of Date?(a2, v15);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v13, 1, v4) == 1)
  {
    int v17 = v16(v15, 1, v4);
    if (v17 == 1) {
      unint64_t v18 = (uint64_t (*)(void))type metadata accessor for Date?;
    }
    else {
      unint64_t v18 = (uint64_t (*)(void))type metadata accessor for (Date?, Date?);
    }
    if (v17 == 1) {
      char v19 = -1;
    }
    else {
      char v19 = 0;
    }
  }
  else
  {
    outlined init with copy of Date?((uint64_t)v13, (uint64_t)v10);
    if (v16(v15, 1, v4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      char v19 = 0;
      uint64_t v20 = (uint64_t (*)(void))type metadata accessor for (Date?, Date?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v21 = *(void (**)(char *, uint64_t))(v5 + 8);
      v21(v7, v4);
      v21(v10, v4);
      uint64_t v20 = (uint64_t (*)(void))type metadata accessor for Date?;
    }
    unint64_t v18 = v20;
  }
  outlined destroy of (Date?, Date?)((uint64_t)v13, v18);
  return v19 & 1;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnySequence<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _ss11AnySequenceVy10Foundation4DateVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for Date();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void _ss11AnySequenceVy10Foundation4DateVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (Date?, Date?)()
{
  if (!lazy cache variable for type metadata for (Date?, Date?))
  {
    type metadata accessor for Date?(255, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Date?, Date?));
    }
  }
}

uint64_t outlined destroy of (Date?, Date?)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined consume of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }
    outlined init with take of ScrollStateRequest((long long *)(*(void *)(v9 + 56) + 40 * v7), (uint64_t)v12);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    outlined init with take of ScrollStateRequest(v12, a2);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  int64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t vars8;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  char v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    char v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for NamedImage.VectorKey(0);
    outlined destroy of AccessibilityCustomAttributes.Value(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for NamedImage.VectorKey);
    outlined init with take of NamedImage.VectorInfo(*(void *)(v9 + 56) + 88 * v6, a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 80) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t move(_:to:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (!v2) {
    return result;
  }
  uint64_t v4 = *(void **)a2;
  int64_t v5 = *(void *)(*(void *)a2 + 16);
  int64_t v6 = v5 + v2;
  if (__OFADD__(v5, v2)) {
    goto LABEL_43;
  }
  unint64_t v7 = (uint64_t *)result;
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v6 > v4[3] >> 1)
  {
    if (v5 <= v6) {
      int64_t v9 = v6;
    }
    else {
      int64_t v9 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 0, v4);
  }
  *(void *)a2 = v4;
  uint64_t v10 = *v7;
  uint64_t v24 = *v7 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(*v7 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(*v7 + 64);
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  double result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_12:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  unint64_t v16 = v15 | (v14 << 6);
LABEL_13:
  uint64_t v17 = *(void *)(v10 + 56);
  *(void *)&v26[0] = *(void *)(*(void *)(v10 + 48) + 8 * v16);
  outlined init with copy of AnyTrackedValue(v17 + 40 * v16, (uint64_t)v26 + 8);
  while (1)
  {
    outlined init with take of (key: ObjectIdentifier, value: AnyTrackedValue)?((uint64_t)v26, (uint64_t)&v27);
    if (!v29)
    {
      swift_release();
      double result = *v7;
      if (*(void *)(*v7 + 16))
      {
        char v23 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v27 = *v7;
        *unint64_t v7 = 0x8000000000000000;
        type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
        _NativeDictionary.removeAll(isUnique:)(v23);
        *unint64_t v7 = v27;
        return swift_bridgeObjectRelease();
      }
      return result;
    }
    outlined init with take of ScrollStateRequest(&v28, (uint64_t)v26);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    }
    unint64_t v22 = v4[2];
    unint64_t v21 = v4[3];
    if (v22 >= v21 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v4);
    }
    v4[2] = v22 + 1;
    double result = outlined init with take of ScrollStateRequest(v26, (uint64_t)&v4[5 * v22 + 4]);
    *(void *)a2 = v4;
    if (v13) {
      goto LABEL_12;
    }
LABEL_14:
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v18 < v25)
    {
      unint64_t v19 = *(void *)(v24 + 8 * v18);
      if (v19) {
        goto LABEL_17;
      }
      int64_t v20 = v14 + 2;
      ++v14;
      if (v18 + 1 < v25)
      {
        unint64_t v19 = *(void *)(v24 + 8 * v20);
        if (v19) {
          goto LABEL_20;
        }
        int64_t v14 = v18 + 1;
        if (v18 + 2 < v25)
        {
          unint64_t v19 = *(void *)(v24 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_17;
          }
          int64_t v20 = v18 + 3;
          int64_t v14 = v18 + 2;
          if (v18 + 3 < v25)
          {
            unint64_t v19 = *(void *)(v24 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                int64_t v18 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_44;
                }
                if (v18 >= v25)
                {
                  int64_t v14 = v25 - 1;
                  goto LABEL_31;
                }
                unint64_t v19 = *(void *)(v24 + 8 * v18);
                ++v20;
                if (v19) {
                  goto LABEL_17;
                }
              }
            }
LABEL_20:
            int64_t v18 = v20;
LABEL_17:
            unint64_t v13 = (v19 - 1) & v19;
            unint64_t v16 = __clz(__rbit64(v19)) + (v18 << 6);
            int64_t v14 = v18;
            goto LABEL_13;
          }
        }
      }
    }
LABEL_31:
    unint64_t v13 = 0;
    memset(v26, 0, sizeof(v26));
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>);
    }
  }
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    unint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>();
    uint64_t v21 = v16;
    unint64_t v22 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, (uint64_t)boxed_opaque_existential_1, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Date?);
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v12 = v20;
    unint64_t v13 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for EnvironmentValues.PreferenceBridgeKey.Value, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>();
    int64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = swift_allocObject();
    outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value(a2, v19[0] + 16);
    specialized Dictionary.subscript.setter((uint64_t)v19, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  long long v22[2];
  uint64_t v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v22);
    outlined init with take of ScrollStateRequest(v22, (uint64_t)v23);
    uint64_t v12 = v24;
    unint64_t v13 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    uint64_t v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    uint64_t v15 = type metadata accessor for Locale();
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    uint64_t v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<LocaleKey>>();
    uint64_t v24 = v18;
    int64_t v25 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    int64_t v20 = type metadata accessor for Locale();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(boxed_opaque_existential_1, a2, v20);
    specialized Dictionary.subscript.setter((uint64_t)v23, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  long long v21[2];
  uint64_t v22[3];
  uint64_t v23;
  _UNKNOWN **v24;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v21);
    outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
    uint64_t v12 = v23;
    unint64_t v13 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    uint64_t v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    uint64_t v15 = type metadata accessor for EnvironmentValues.CapitalizationContext();
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    uint64_t v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.Key>>();
    char v23 = v18;
    uint64_t v24 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
    outlined init with copy of TypesettingConfiguration(a2, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
    specialized Dictionary.subscript.setter((uint64_t)v22, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  long long v38[2];
  void v39[3];
  uint64_t v40;
  _UNKNOWN **v41;

  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v5 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v7 = *(void *)(v5 + 24);
  if (a1)
  {
    if (v7 == *(void *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      uint64_t v9 = v8;
      unint64_t v10 = *(void *)(v5 + 32);
      if (*(void *)(v10 + 16) && (char v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v12 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(void *)(v10 + 56) + 40 * v11, (uint64_t)v38);
        outlined init with take of ScrollStateRequest(v38, (uint64_t)v39);
        unint64_t v13 = v40;
        uint64_t v14 = v41;
        __swift_project_boxed_opaque_existential_1(v39, v40);
        ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v14[1])(&type metadata for ContentTransition.State, v13, v14);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      }
      else
      {
        int64_t v25 = swift_retain();
        uint64_t v26 = specialized find<A>(_:key:)(v25);
        if (v26)
        {
          uint64_t v27 = *(void *)(v26 + 72);
          long long v28 = *(unsigned int *)(v26 + 80) | ((unint64_t)*(unsigned __int8 *)(v26 + 84) << 32);
          uint64_t v29 = *(unsigned char *)(v26 + 85);
          uint64_t v30 = *(unsigned char *)(v26 + 86);
          uint64_t v31 = *(unsigned char *)(v26 + 87);
          uint64_t v32 = *(void *)(v26 + 88);
          uint64_t v33 = *(_DWORD *)(v26 + 96);
        }
        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          long long v28 = 0x302000000;
          uint64_t v27 = 0x8000000000;
        }
        *(void *)a2 = v27;
        *(_DWORD *)(a2 + 8) = v28;
        *(unsigned char *)(a2 + 12) = BYTE4(v28);
        *(unsigned char *)(a2 + 13) = v29;
        *(unsigned char *)(a2 + 14) = v30;
        *(unsigned char *)(a2 + 15) = v31;
        *(void *)(a2 + 16) = v32;
        *(_DWORD *)(a2 + 24) = v33;
        uint64_t v34 = v30;
        outlined copy of ContentTransition.Storage(v27, v28, v29);
        swift_retain();
        swift_release();
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContentTransition.State>>();
        uint64_t v40 = v35;
        uint64_t v41 = &protocol witness table for TrackedValue<A>;
        uint64_t v36 = swift_allocObject();
        v39[0] = v36;
        *(void *)(v36 + 16) = v27;
        *(unsigned char *)(v36 + 28) = BYTE4(v28);
        *(_DWORD *)(v36 + 24) = v28;
        *(unsigned char *)(v36 + 29) = v29;
        *(unsigned char *)(v36 + 30) = v34;
        *(unsigned char *)(v36 + 31) = v31;
        *(void *)(v36 + 32) = v32;
        *(_DWORD *)(v36 + 40) = v33;
        outlined copy of ContentTransition.Storage(v27, v28, v29);
        swift_retain();
        specialized Dictionary.subscript.setter((uint64_t)v39, v9);
        uint64_t v6 = (os_unfair_lock_s *)(v5 + 16);
      }
      goto LABEL_15;
    }
  }
  else if (!v7)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v5 + 56) = 1;
  uint64_t v15 = swift_retain();
  uint64_t v16 = specialized find<A>(_:key:)(v15);
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 72);
    int64_t v18 = *(unsigned __int8 *)(v16 + 84);
    unint64_t v19 = *(unsigned int *)(v16 + 80);
    int64_t v20 = *(unsigned char *)(v16 + 86);
    uint64_t v21 = *(unsigned char *)(v16 + 87);
    unint64_t v22 = *(void *)(v16 + 88);
    char v23 = *(_DWORD *)(v16 + 96);
    uint64_t v24 = *(unsigned char *)(v16 + 85);
    *(void *)a2 = v17;
    *(_DWORD *)(a2 + 8) = v19;
    *(unsigned char *)(a2 + 12) = v18;
    *(unsigned char *)(a2 + 13) = v24;
    *(unsigned char *)(a2 + 14) = v20;
    *(unsigned char *)(a2 + 15) = v21;
    *(void *)(a2 + 16) = v22;
    *(_DWORD *)(a2 + 24) = v23;
    outlined copy of ContentTransition.Storage(v17, v19 | (v18 << 32), v24);
    swift_retain();
  }
  else
  {
    *(void *)a2 = 0x8000000000;
    *(_DWORD *)(a2 + 8) = 0x2000000;
    *(unsigned char *)(a2 + 12) = 3;
    *(void *)(a2 + 13) = 0;
    *(void *)(a2 + 20) = 0;
  }
  swift_release();
LABEL_15:
  os_unfair_lock_unlock(v6);
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v20[2];
  void v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
    uint64_t v12 = v22;
    unint64_t v13 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    uint64_t v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    uint64_t v15 = type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for FallbackFontProvider);
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    uint64_t v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<FallbackFontProviderKey>>();
    unint64_t v22 = v18;
    char v23 = &protocol witness table for TrackedValue<A>;
    v21[0] = swift_allocObject();
    outlined init with copy of AnyTrackedValue(a2, v21[0] + 16);
    specialized Dictionary.subscript.setter((uint64_t)v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  long long v20[2];
  void v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
    uint64_t v12 = v22;
    unint64_t v13 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Text.Sizing, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *(unsigned char *)a2;
    uint64_t v17 = *(void *)(a2 + 8);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextSizingKey>>();
    unint64_t v22 = v18;
    char v23 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v21[0]) = v16;
    v21[1] = v17;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v19;
  long long v20[2];
  long long v21;
  uint64_t v22;
  uint64_t v23;
  _UNKNOWN **v24;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>, (uint64_t)&type metadata for EnvironmentValues.__Key_textShape, (uint64_t)&protocol witness table for EnvironmentValues.__Key_textShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)&v21);
    uint64_t v12 = v23;
    unint64_t v13 = v24;
    __swift_project_boxed_opaque_existential_1(&v21, v23);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for TextShape, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    unint64_t v19 = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>>();
    char v23 = v17;
    uint64_t v24 = &protocol witness table for TrackedValue<A>;
    uint64_t v21 = v19;
    unint64_t v22 = v16;
    specialized Dictionary.subscript.setter((uint64_t)&v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  long long v21[2];
  uint64_t v22[3];
  uint64_t v23;
  _UNKNOWN **v24;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v21);
    outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
    uint64_t v12 = v23;
    unint64_t v13 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    uint64_t v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    uint64_t v15 = type metadata accessor for TypesettingConfiguration();
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    uint64_t v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TypesettingConfigurationKey>>();
    char v23 = v18;
    uint64_t v24 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
    outlined init with copy of TypesettingConfiguration(a2, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
    specialized Dictionary.subscript.setter((uint64_t)v22, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v12 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    unint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for AnyTrackedValue?(0, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>();
    int64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = swift_allocObject();
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, v19[0] + 16, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver, (uint64_t)&protocol descriptor for AccessibilityTextAttributeResolver, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyTrackedValue?);
    specialized Dictionary.subscript.setter((uint64_t)v19, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  long long v22[2];
  uint64_t v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v22);
    outlined init with take of ScrollStateRequest(v22, (uint64_t)v23);
    uint64_t v12 = v24;
    unint64_t v13 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    uint64_t v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    uint64_t v15 = type metadata accessor for Calendar();
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    uint64_t v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<CalendarKey>>();
    uint64_t v24 = v18;
    int64_t v25 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    int64_t v20 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(boxed_opaque_existential_1, a2, v20);
    specialized Dictionary.subscript.setter((uint64_t)v23, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  long long v22[2];
  uint64_t v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v22);
    outlined init with take of ScrollStateRequest(v22, (uint64_t)v23);
    uint64_t v12 = v24;
    unint64_t v13 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    uint64_t v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    uint64_t v15 = type metadata accessor for TimeZone();
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    uint64_t v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TimeZoneKey>>();
    uint64_t v24 = v18;
    int64_t v25 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    int64_t v20 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(boxed_opaque_existential_1, a2, v20);
    specialized Dictionary.subscript.setter((uint64_t)v23, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  long long v19[2];
  uint64_t v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    unint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>();
    uint64_t v21 = v16;
    unint64_t v22 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, (uint64_t)boxed_opaque_existential_1, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Date?);
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  long long v21[2];
  void v22[3];
  uint64_t v23;
  _UNKNOWN **v24;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v21);
    outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
    uint64_t v12 = v23;
    unint64_t v13 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ContainerShapeData, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *(void *)(a2 + 24);
    uint64_t v17 = *(unsigned char *)(a2 + 56);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContainerShapeKey>>();
    char v23 = v18;
    uint64_t v24 = &protocol witness table for TrackedValue<A>;
    unint64_t v19 = swift_allocObject();
    v22[0] = v19;
    *(_OWORD *)(v19 + 16) = *(_OWORD *)a2;
    *(void *)(v19 + 32) = *(void *)(a2 + 16);
    *(void *)(v19 + 40) = v16;
    *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + 32);
    *(void *)(v19 + 64) = *(void *)(a2 + 48);
    *(unsigned char *)(v19 + 72) = v17;
    specialized Dictionary.subscript.setter((uint64_t)v22, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  long long v22;
  long long v23[2];
  void v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    uint64_t v12 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    unint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for HoverEffectContext?, (uint64_t)&type metadata for HoverEffectContext, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    unint64_t v22 = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
    uint64_t v17 = *(_WORD *)(a2 + 24);
    int64_t v18 = *(unsigned char *)(a2 + 26);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HoverEffectContextKey>>();
    int64_t v25 = v19;
    uint64_t v26 = &protocol witness table for TrackedValue<A>;
    int64_t v20 = swift_allocObject();
    v24[0] = v20;
    *(_OWORD *)(v20 + 16) = v22;
    *(void *)(v20 + 32) = v16;
    *(unsigned char *)(v20 + 42) = v18;
    *(_WORD *)(v20 + 40) = v17;
    specialized Dictionary.subscript.setter((uint64_t)v24, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  long long v24[2];
  void v25[3];
  uint64_t v26;
  _UNKNOWN **v27;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v24);
    outlined init with take of ScrollStateRequest(v24, (uint64_t)v25);
    uint64_t v12 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    unint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for OpenURLAction?, (uint64_t)&type metadata for OpenURLAction, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *(void *)a2;
    uint64_t v17 = *(void *)(a2 + 8);
    int64_t v18 = *(void *)(a2 + 16);
    unint64_t v19 = *(void *)(a2 + 24);
    int64_t v20 = *(_WORD *)(a2 + 32);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<OpenURLActionKey>>();
    uint64_t v26 = v21;
    uint64_t v27 = &protocol witness table for TrackedValue<A>;
    unint64_t v22 = swift_allocObject();
    v25[0] = v22;
    *(void *)(v22 + 16) = v16;
    *(void *)(v22 + 24) = v17;
    *(void *)(v22 + 32) = v18;
    *(void *)(v22 + 40) = v19;
    *(_WORD *)(v22 + 48) = v20;
    outlined copy of OpenURLAction?(v16, v17, v18, v19, v20);
    specialized Dictionary.subscript.setter((uint64_t)v25, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  long long v24[2];
  void v25[3];
  uint64_t v26;
  _UNKNOWN **v27;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v24);
    outlined init with take of ScrollStateRequest(v24, (uint64_t)v25);
    uint64_t v12 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    unint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for OpenURLAction?, (uint64_t)&type metadata for OpenURLAction, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *(void *)a2;
    uint64_t v17 = *(void *)(a2 + 8);
    int64_t v18 = *(void *)(a2 + 16);
    unint64_t v19 = *(void *)(a2 + 24);
    int64_t v20 = *(_WORD *)(a2 + 32);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>();
    uint64_t v26 = v21;
    uint64_t v27 = &protocol witness table for TrackedValue<A>;
    unint64_t v22 = swift_allocObject();
    v25[0] = v22;
    *(void *)(v22 + 16) = v16;
    *(void *)(v22 + 24) = v17;
    *(void *)(v22 + 32) = v18;
    *(void *)(v22 + 40) = v19;
    *(_WORD *)(v22 + 48) = v20;
    outlined copy of OpenURLAction?(v16, v17, v18, v19, v20);
    specialized Dictionary.subscript.setter((uint64_t)v25, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  long long v23[2];
  void v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    uint64_t v12 = v25;
    unint64_t v13 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ScrollAnchorStorage, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *(void *)a2;
    uint64_t v17 = *(void *)(a2 + 8);
    int64_t v18 = *(void *)(a2 + 16);
    unint64_t v19 = *(unsigned char *)(a2 + 24);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>();
    int64_t v25 = v20;
    uint64_t v26 = &protocol witness table for TrackedValue<A>;
    uint64_t v21 = swift_allocObject();
    v24[0] = v21;
    *(void *)(v21 + 16) = v16;
    *(void *)(v21 + 24) = v17;
    *(void *)(v21 + 32) = v18;
    *(unsigned char *)(v21 + 40) = v19;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v24, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>);
    }
  }
}

void type metadata accessor for (Date?, Date?)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for (Date??, Date??)(uint64_t a1)
{
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>);
    }
  }
}

uint64_t _ShapeStyle_Shape.PreparedTextResult.apply(to:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v9 = *v4;
  if (*v4)
  {
    swift_retain_n();
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
    }
    unint64_t v11 = a4[2];
    unint64_t v10 = a4[3];
    if (v11 >= v10 >> 1) {
      a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, a4);
    }
    a4[2] = v11 + 1;
    uint64_t v12 = &a4[2 * v11];
    v12[4] = v9;
    *((unsigned char *)v12 + 40) = 0;
    swift_release();
  }
  else
  {
    type metadata accessor for TextForegroundKeyColorModifier();
    uint64_t inited = swift_initStaticObject();
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
    }
    unint64_t v15 = a4[2];
    unint64_t v14 = a4[3];
    if (v15 >= v14 >> 1) {
      a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, a4);
    }
    a4[2] = v15 + 1;
    uint64_t v16 = &a4[2 * v15];
    v16[4] = inited;
    *((unsigned char *)v16 + 40) = -64;
  }
  return a1;
}

void *outlined release of Text.ResolvedProperties(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[12];
  uint64_t v9 = (void *)a1[16];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(v2, v3, v4, v5, v6, v7);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t destroy for ResolvedTextHelper.NextUpdate(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v4 = a1 + *(int *)(v3 + 48);
    uint64_t v5 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    return swift_release();
  }
  return result;
}

double ResolvedStyledText.schedule.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 216);
  if (v3 && (uint64_t)objc_msgSend(v3, sel_length) >= 1)
  {
    if (one-time initialization token for updateSchedule != -1) {
      swift_once();
    }
    uint64_t v4 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v3, sel_length);
    if (objc_msgSend(v3, sel_attribute_atIndex_effectiveRange_, v4, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_5((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
      NSAttributedString.updateSchedule.getter((void *)a1);
      return result;
    }
    memset(v6, 0, sizeof(v6));
    _sypSgWOhTm_5((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t destroy for EnvironmentValues.CapitalizationContext(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    return swift_release();
  }
  else
  {
    uint64_t v3 = type metadata accessor for FormatStyleCapitalizationContext();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
}

uint64_t type metadata accessor for CollapsibleTextModifier()
{
  return self;
}

uint64_t type metadata accessor for TextForegroundKeyColorModifier()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata completion function for _VariadicView.Tree()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t View.clipShape<A>(_:style:)(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a5;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for _ClipEffect();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, a4, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v11, a4);
  uint64_t v17 = &v16[*(int *)(v12 + 36)];
  *uint64_t v17 = a2 & 1;
  v17[1] = HIBYTE(a2) & 1;
  View.modifier<A>(_:)(v16, a3, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t type metadata accessor for _ClipEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static View.makeDebuggableViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v18 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  long long v16 = *(_OWORD *)(a2 + 3);
  uint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v10 = a2[7];
  int v11 = *((_DWORD *)a2 + 16);
  uint64_t v12 = a2[9];
  char v15 = *((unsigned char *)a2 + 80);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  v29[0] = v18;
  uint64_t v19 = v5;
  int v20 = v6;
  uint64_t v21 = v7;
  long long v22 = v16;
  uint64_t v23 = v9;
  uint64_t v24 = v8;
  uint64_t v25 = v10;
  int v26 = v11;
  uint64_t v27 = v12;
  char v28 = v15;
  uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v29, &v19, a3, a4);
  if (ShouldRecordTree)
  {
    return AGSubgraphEndTreeElement();
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance HStack<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ZStack<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t static EmptyView._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v8 = *(_DWORD *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  int v12 = *(_DWORD *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 80);
  if ((v11 & 0x10) != 0)
  {
    uint64_t v16 = *(void *)a1;
    int v17 = v3;
    uint64_t v18 = v4;
    int v19 = v5;
    int v20 = v6;
    int v21 = v8;
    int v22 = v7;
    uint64_t v23 = v10;
    uint64_t v24 = v9;
    uint64_t v25 = v11;
    int v26 = v12;
    uint64_t v27 = v13;
    char v28 = v14;
    return static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v16, a2);
  }
  else
  {
    uint64_t v30 = &type metadata for EmptyViewListElements;
    uint64_t v31 = &protocol witness table for EmptyViewListElements;
    uint64_t v16 = v2;
    int v17 = v3;
    uint64_t v18 = v4;
    int v19 = v5;
    int v20 = v6;
    int v21 = v8;
    int v22 = v7;
    uint64_t v23 = v10;
    uint64_t v24 = v9;
    uint64_t v25 = v11;
    int v26 = v12;
    uint64_t v27 = v13;
    char v28 = v14;
    static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v29, &v16, 0, a2);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
}

Swift::Void __swiftcall ScrollGeometry.applyLayoutDirection(_:contentSize:)(SwiftUI::LayoutDirection _, CGSize_optional contentSize)
{
  if (*(unsigned char *)_ == 1)
  {
    if (v2) {
      double v4 = v3[2];
    }
    else {
      double v4 = *(double *)&contentSize.is_nil;
    }
    double v5 = *v3;
    double v6 = v3[1];
    v9.size.double width = v3[8];
    v9.size.double height = v3[9];
    v9.origin.x = *v3;
    v9.origin.y = v6;
    CGFloat v7 = v4 - CGRectGetMaxX(v9);
    *int v3 = v7;
    v3[1] = v6;
    double v8 = v6 - v6 + v3[11];
    v3[10] = v7 - v5 + v3[10];
    v3[11] = v8;
  }
}

ValueMetadata *type metadata accessor for Text.LineStyle()
{
  return &type metadata for Text.LineStyle;
}

uint64_t instantiation function for generic protocol witness table for DynamicPreferenceCombiner<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

__n128 DisplayList.Item.init(_:frame:identity:version:)@<Q0>(__n128 *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  unint64_t v8 = a1[1].n128_u64[0];
  unsigned __int16 v9 = a1[1].n128_u16[4];
  unsigned __int8 v10 = a1[1].n128_u8[10];
  int v11 = *a2;
  uint64_t v12 = *a3;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(double *)(a4 + 16) = a7;
  *(double *)(a4 + 24) = a8;
  *(void *)(a4 + 32) = v12;
  __n128 result = *a1;
  *(__n128 *)(a4 + 40) = *a1;
  *(void *)(a4 + 56) = v8;
  *(unsigned char *)(a4 + 66) = v10;
  *(_WORD *)(a4 + 64) = v9;
  *(_DWORD *)(a4 + 68) = v11;
  return result;
}

uint64_t (*ViewSize.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t base witness table accessor for _AttributeBody in ValueActionDispatcher<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for DynamicViewList.WrappedList()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.WritingMode()
{
  return &type metadata for Text.WritingMode;
}

uint64_t static PreferenceKey._delay<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_retain();
}

double *CGSize.clamped(to:)(double *result)
{
  double v1 = result[2];
  if (*result > v1)
  {
    __break(1u);
    goto LABEL_5;
  }
  double v2 = result[3];
  if (v2 > result[5]) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance DynamicBody<A, B>()
{
}

void DynamicBody.destroy()()
{
}

ValueMetadata *type metadata accessor for _SemanticFeature_v3()
{
  return &type metadata for _SemanticFeature_v3;
}

uint64_t ResolvedStyledText.accessibilityText.getter()
{
  double v1 = *(void **)(v0 + 216);
  if (v1)
  {
    v9[3] = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v9[0] = v1;
    id v2 = v1;
    AccessibilityText.init(_:)(v9, (uint64_t)v10);
    uint64_t v3 = v10[0];
    uint64_t v4 = v10[1];
    char v5 = v11;
    char v6 = v12;
    type metadata accessor for AccessibilityTextStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(void *)(result + 24) = v4;
    *(unsigned char *)(result + 32) = v5;
    *(unsigned char *)(result + 33) = v6;
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    type metadata accessor for LocalizedTextStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0xE000000000000000;
    *(unsigned char *)(result + 32) = 0;
    *(void *)(result + 40) = v8;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 0;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityTextStorage()
{
  return self;
}

uint64_t AccessibilityText.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v13 = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v4 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  unsigned int v5 = objc_msgSend(v4, sel_isKindOfClass_, swift_getObjCClassFromMetadata());
  swift_unknownObjectRelease();
  if (v5)
  {
    outlined init with take of Any(a1, v12);
    uint64_t result = swift_dynamicCast();
    uint64_t v7 = 0;
    uint64_t v8 = v10;
    char v9 = v13;
LABEL_5:
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v7;
    *(unsigned char *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 17) = v9;
    return result;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v12);
  if (swift_dynamicCast())
  {
    uint64_t v8 = v10;
    uint64_t v7 = v11;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    char v9 = 0;
    goto LABEL_5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t instantiation function for generic protocol witness table for AppearanceEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AppearanceActionModifier(_DWORD *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  int v9 = *MEMORY[0x263F288F8];
  LODWORD(v14) = *a1;
  uint64_t v15 = 1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  LOBYTE(v19) = 0;
  DWORD1(v19) = 0;
  DWORD2(v19) = v9;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect();
  uint64_t v13 = a2[3];
  Attribute.init<A>(body:value:flags:update:)();
  uint64_t v10 = AGGraphSetFlags();
  uint64_t v14 = v5;
  LODWORD(v15) = v6;
  uint64_t v16 = v7;
  uint64_t v11 = a2[4];
  uint64_t v17 = v13;
  uint64_t v18 = v11;
  long long v19 = *(_OWORD *)(a2 + 5);
  long long v20 = *(_OWORD *)(a2 + 7);
  uint64_t v21 = a2[9];
  int v22 = v8;
  return a3(v10, &v14);
}

unint64_t lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect;
  if (!lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect);
  }
  return result;
}

uint64_t RadialGradient.init(gradient:center:startRadius:endRadius:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.StrikethroughColorAttribute()
{
  return 0xD00000000000001ALL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.UnderlineColorAttribute()
{
  return 0xD000000000000016;
}

uint64_t type metadata completion function for DynamicViewList.Item()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t EnvironmentValues.colorSchemeContrast.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.colorScheme.getter(void (*a1)(uint64_t), void (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    a2(v6, &v8);
  }
  return swift_release_n();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ColorSchemeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ColorSchemeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ColorSchemeKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ColorSchemeContrastKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ColorSchemeContrastKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ColorSchemeContrastKey>>);
    }
  }
}

uint64_t ResolvedMulticolorStyle.environment.getter@<X0>(uint64_t *a1@<X8>)
{
  char v3 = v1[16];
  char v4 = v1[17];
  char v5 = v1[18];
  *a1 = 0;
  a1[1] = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v7 = static CoreGlue2.shared;
  v6(a1);

  uint64_t v8 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v3);
  swift_release();
  uint64_t v9 = a1[1];
  if (v9)
  {
    uint64_t v10 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v10);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v10 = *a1;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v4);
  swift_release();
  if (v9)
  {
    uint64_t v11 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v10, v11);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v11 = *a1;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v5);
  swift_release();
  if (v9)
  {
    uint64_t v12 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v12);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ColorSchemeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ColorSchemeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ColorSchemeKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ColorSchemeContrastKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ColorSchemeContrastKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ColorSchemeContrastKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for StrokeStyle()
{
  return &type metadata for StrokeStyle;
}

uint64_t closure #1 in AGSubgraphRef.didReinsert()(uint64_t a1)
{
  uint64_t v2 = *(void *)AGGraphGetAttributeInfo();
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v4 = result;
  }
  else {
    uint64_t v4 = 0;
  }
  if (result) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(v4 + 24))(a1);
  }
  return result;
}

uint64_t specialized static AppearanceEffect.didReinsert(attribute:)()
{
  uint64_t result = AGGraphGetAttributeInfo();
  if (*(_DWORD *)(v1 + 48) != *MEMORY[0x263F288F8])
  {
    AGGraphInvalidateValue();
    id v2 = (id)AGGraphGetAttributeGraph();
    uint64_t result = AGGraphGetContext();
    if (result)
    {
      uint64_t v3 = result;
      swift_retain();

      if ((*(uint64_t (**)(void))(*(void *)v3 + 192))())
      {
        uint64_t v5 = v4;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
        swift_release();
        return swift_unknownObjectRelease();
      }
      else
      {
        return swift_release();
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in HostPreferencesTransform<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in DynamicContainerInfo.unremoveItem(at:)()
{
  return closure #4 in MatchedGeometryScope.frame<A>(index:for:view:)();
}

uint64_t closure #4 in MatchedGeometryScope.frame<A>(index:for:view:)()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    return AGGraphInvalidateValue();
  }
  return result;
}

uint64_t View.opacity(_:)(uint64_t a1, double a2)
{
  double v3 = a2;
  return View.modifier<A>(_:)(&v3, a1, &type metadata for _OpacityEffect);
}

uint64_t type metadata completion function for DynamicViewList()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in UpdateEnvironment<A>()
{
  return swift_getWitnessTable();
}

uint64_t ProposedViewSize.init(_:in:by:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3) {
    return a4;
  }
  return a1;
}

uint64_t static CountingIndex.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v22 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, double))(v6 + 16);
  v13((char *)v22 - v11, a1, v10);
  uint64_t v14 = type metadata accessor for CountingIndex();
  uint64_t v15 = a1 + *(int *)(v14 + 36);
  if (*(unsigned char *)(v15 + 8)) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = *(void *)v15;
  }
  v22[1] = v16;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v8, a2, a3);
  uint64_t v17 = a2 + *(int *)(v14 + 36);
  if (*(unsigned char *)(v17 + 8)) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)v17;
  }
  v22[0] = v18;
  char v19 = < infix<A, B>(_:_:)();
  long long v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v8, a3);
  v20(v12, a3);
  return v19 & 1;
}

uint64_t static CountingIndex.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for CountingIndex() + 36);
  uint64_t v5 = (void *)(a1 + v4);
  char v6 = *(unsigned char *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  char v8 = *(unsigned char *)(a2 + v4 + 8);
  if (v6)
  {
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*v5 != *v7) {
      char v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  return 1;
}

uint64_t CountingIndexCollection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, char *, uint64_t)@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v36 = a5;
  uint64_t v37 = a3;
  uint64_t v38 = *(void *)(*(void *)(a4 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v31 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v35 = (char *)&v31 - v16;
  MEMORY[0x270FA5388](v17);
  char v19 = (char *)&v31 - v18;
  uint64_t v31 = a2;
  uint64_t v32 = a1;
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
    swift_getAssociatedConformanceWitness();
    uint64_t v20 = type metadata accessor for CountingIndex();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v36, 1, 1, v20);
  }
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v37(v19, v10, AssociatedTypeWitness);
  int v22 = v35;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v35, v19, AssociatedTypeWitness);
  dispatch thunk of Collection.endIndex.getter();
  swift_getAssociatedConformanceWitness();
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v14, AssociatedTypeWitness);
  if (v23)
  {
    v24(v19, AssociatedTypeWitness);
    uint64_t v25 = 0;
    int v26 = v36;
LABEL_7:
    v37(v26, v22, AssociatedTypeWitness);
    uint64_t v29 = type metadata accessor for CountingIndex();
    uint64_t v30 = &v26[*(int *)(v29 + 36)];
    *(void *)uint64_t v30 = v25;
    v30[8] = v23 & 1;
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v26, 0, 1, v29);
  }
  uint64_t result = type metadata accessor for CountingIndex();
  uint64_t v27 = (uint64_t *)(v32 + *(int *)(result + 36));
  if ((v27[1] & 1) == 0)
  {
    uint64_t v28 = *v27;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v19, AssociatedTypeWitness);
    uint64_t v25 = v28 + v31;
    int v26 = v36;
    if (!__OFADD__(v28, v31)) {
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void storeEnumTagSinglePayload for CountingIndex(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v9 = 8 * v8;
  if (v7 >= a3)
  {
    int v13 = 0;
    if (v7 >= a2)
    {
LABEL_14:
      switch(v13)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v10 = (a3 - v7 + 255) >> v9;
    if (v8 <= 3) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    if (v7 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v14 = (~v7 + a2) >> v9;
  if (v8 < 4) {
    int v15 = v14 + 1;
  }
  else {
    int v15 = 1;
  }
  if (v8 >= 4) {
    unsigned int v16 = ~v7 + a2;
  }
  else {
    unsigned int v16 = (~(_BYTE)v7 + a2);
  }
  bzero(a1, v8);
  if (v8 == 1) {
    *a1 = v16;
  }
  else {
    *(_DWORD *)a1 = v16;
  }
  switch(v13)
  {
    case 1:
      a1[v8] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v15;
      break;
    case 3:
LABEL_38:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v8] = v15;
      break;
    default:
      return;
  }
}

uint64_t protocol witness for Sequence.makeIterator() in conformance CountingIndexCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CountingIndex();
  uint64_t v6 = *(void *)(v5 - 8);
  v7.n128_f64[0] = MEMORY[0x270FA5388](v5);
  char v9 = (char *)&v13 - v8;
  uint64_t v10 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 16))(a2, v2, a1, v7);
  CountingIndexCollection.startIndex.getter((uint64_t)v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2 + *(int *)(v11 + 36), v9, v5);
}

uint64_t CountingIndexCollection.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v9 - v4;
  dispatch thunk of Collection.startIndex.getter();
  char v6 = dispatch thunk of Collection.isEmpty.getter();
  swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, AssociatedTypeWitness);
  uint64_t result = type metadata accessor for CountingIndex();
  uint64_t v8 = a1 + *(int *)(result + 36);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = v6 & 1;
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance SectionAccumulator.RowIDs(void *a1@<X8>)
{
  if (*(void *)(*(void *)v1 + 16)) {
    *a1 = *(void *)(*(void *)v1 + 72);
  }
  else {
    *a1 = 0;
  }
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance CountingIndexCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, double))
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for CountingIndex();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - v10;
  a4(a1, a2, v9);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v11, v7);
}

uint64_t CountingIndexCollection.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  double v9 = (char *)&v21 - v8;
  MEMORY[0x270FA5388](v10);
  int v12 = (char *)&v21 - v11;
  dispatch thunk of Collection.index(after:)();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v12, AssociatedTypeWitness);
  dispatch thunk of Collection.endIndex.getter();
  swift_getAssociatedConformanceWitness();
  char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  unsigned int v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(v6, AssociatedTypeWitness);
  if (v13)
  {
    v14(v12, AssociatedTypeWitness);
    uint64_t v15 = 0;
LABEL_5:
    uint64_t v19 = v22;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v22, v9, AssociatedTypeWitness);
    uint64_t result = type metadata accessor for CountingIndex();
    uint64_t v20 = v19 + *(int *)(result + 36);
    *(void *)uint64_t v20 = v15;
    *(unsigned char *)(v20 + 8) = v13 & 1;
    return result;
  }
  uint64_t result = type metadata accessor for CountingIndex();
  uint64_t v17 = (uint64_t *)(a1 + *(int *)(result + 36));
  if ((v17[1] & 1) == 0)
  {
    uint64_t v18 = *v17;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v12, AssociatedTypeWitness);
    uint64_t v15 = v18 + 1;
    if (!__OFADD__(v18, 1)) {
      goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CountingIndex()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Collection.index(after:) in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t result)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (!v3)
  {
    uint64_t v9 = 0;
    if (result >= 0)
    {
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
LABEL_6:
    if (v9 <= result) {
      return ++result;
    }
    goto LABEL_8;
  }
  uint64_t v4 = v2 + 48 * v3;
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v5 = *(void *)(v4 + 24);
  BOOL v7 = __OFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  if (!v7)
  {
    uint64_t v9 = *(void *)(v2 + 72);
    if (v8 <= result) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t CountingIndexCollection.endIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v8 - v4;
  dispatch thunk of Collection.endIndex.getter();
  swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, AssociatedTypeWitness);
  uint64_t result = type metadata accessor for CountingIndex();
  uint64_t v7 = a1 + *(int *)(result + 36);
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SectionAccumulator.RowIDs.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t specialized Collection.count.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 72);
    uint64_t v4 = SectionAccumulator.RowIDs.endIndex.getter();
    uint64_t v5 = *(void *)(v1 + 72);
  }
  else
  {
    uint64_t v4 = SectionAccumulator.RowIDs.endIndex.getter();
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  uint64_t result = SectionAccumulator.RowIDs.endIndex.getter();
  if (v3 < v5 || result < v3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v2) {
    uint64_t v8 = *(void *)(v1 + 72);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t result = SectionAccumulator.RowIDs.endIndex.getter();
  if (v4 < v8 || result < v4) {
    goto LABEL_16;
  }
  uint64_t result = v4 - v3;
  if (__OFSUB__(v4, v3)) {
LABEL_17:
  }
    __break(1u);
  return result;
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = v0;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v3 = v0[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v5 = ViewList.count.getter(v3, v4);
  static Update.end()();
  _MovableLockUnlock(v2);
  _MovableLockLock(v2);
  specialized static Update.begin()();
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v6);
  uint64_t v8 = ViewList.count.getter(v6, v7);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v2);
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    _MovableLockLock(v2);
    specialized static Update.begin()();
    uint64_t v10 = v1[3];
    uint64_t v11 = v1[4];
    __swift_project_boxed_opaque_existential_1(v1, v10);
    int v12 = ViewList.count.getter(v10, v11);
    static Update.end()();
    uint64_t result = _MovableLockUnlock(v2);
    if ((v5 & 0x8000000000000000) == 0 && v12 >= v5) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

{
  void *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v3 = *v0 + 48;
  swift_beginAccess();
  if (*(void *)(*(void *)v3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v1, v2), (v4 & 1) != 0))
  {
    swift_endAccess();
    swift_beginAccess();
    uint64_t v5 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16))
    {
      uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v2);
      if (v7)
      {
        uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 16 * v6);
        swift_endAccess();
        return specialized RandomAccessCollection<>.distance(from:to:)(0, *(void *)(v8 + 16));
      }
    }
  }
  else
  {
    swift_endAccess();
    __break(1u);
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v4 = v1[1];
  uint64_t v3 = v1[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
    if (v5)
    {
      swift_endAccess();
      uint64_t v6 = swift_release();
      uint64_t v7 = specialized Text.Effect.DrawableContent.endIndex.getter(v6);
      return specialized RandomAccessCollection<>.distance(from:to:)(0, v7);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t SectionAccumulator.RowIDs.endIndex.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)v0 + 48 * v1;
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t result = v3 + v4;
  if (__OFADD__(v3, v4)) {
    __break(1u);
  }
  return result;
}

BOOL specialized Collection.isEmpty.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  if (!v2)
  {
    uint64_t v7 = 0;
    return v7 == v2;
  }
  uint64_t v3 = v1 + 48 * v2;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 24);
  BOOL v6 = __OFADD__(v4, v5);
  uint64_t v2 = v4 + v5;
  if (!v6)
  {
    uint64_t v7 = *(void *)(v1 + 72);
    return v7 == v2;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 48 * v5;
    uint64_t v8 = *(void *)(v6 + 16);
    uint64_t v7 = *(void *)(v6 + 24);
    BOOL v9 = __OFADD__(v7, v8);
    uint64_t v10 = v7 + v8;
    if (v9)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v11 = *(void *)(v4 + 72);
    if (v10 < result || v11 > result) {
      goto LABEL_29;
    }
    if (v11 > a3) {
      goto LABEL_30;
    }
  }
  else
  {
    if (result)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v10 = 0;
    if (a3 < 0)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }
  if (v10 < a3) {
    goto LABEL_30;
  }
  uint64_t v13 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (a2 >= 1)
  {
    if (v13 < 0 || v13 >= a2) {
      goto LABEL_21;
    }
    return 0;
  }
  if (v13 <= 0 && v13 > a2) {
    return 0;
  }
LABEL_21:
  BOOL v9 = __OFADD__(result, a2);
  result += a2;
  if (v9)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v5)
  {
    uint64_t v14 = v4 + 48 * v5;
    uint64_t v16 = *(void *)(v14 + 16);
    uint64_t v15 = *(void *)(v14 + 24);
    BOOL v9 = __OFADD__(v15, v16);
    uint64_t v5 = v15 + v16;
    if (v9)
    {
LABEL_35:
      __break(1u);
      return result;
    }
    if (result < *(void *)(v4 + 72))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  else if (result < 0)
  {
    goto LABEL_34;
  }
  if (v5 < result) {
    goto LABEL_34;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 < a3 || (a3 | result) < 0 || v4 < result)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= a2) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v5 <= 0 && v5 > a2) {
    return 0;
  }
LABEL_11:
  uint64_t v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v4 < result) {
    goto LABEL_17;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  BOOL v10;

  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t v4 = *(void *)(v3 + 56);
  if (v4 < a3 || v5 > a3 || v5 > result || v4 < result)
  {
    __break(1u);
    goto LABEL_24;
  }
  BOOL v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= (unint64_t)a2) {
      goto LABEL_19;
    }
    return 0;
  }
  if (v9 <= 0 && v9 > a2) {
    return 0;
  }
LABEL_19:
  uint64_t v10 = __OFADD__(result, a2);
  result += a2;
  if (v10)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (result < v5 || v4 < result) {
    goto LABEL_26;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  BOOL v10;

  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (v4 < a3 || v5 > a3 || v5 > result || v4 < result)
  {
    __break(1u);
    goto LABEL_24;
  }
  BOOL v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= (unint64_t)a2) {
      goto LABEL_19;
    }
    return 0;
  }
  if (v9 <= 0 && v9 > a2) {
    return 0;
  }
LABEL_19:
  uint64_t v10 = __OFADD__(result, a2);
  result += a2;
  if (v10)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (result < v5 || v4 < result) {
    goto LABEL_26;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;

  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24) >> 1;
  uint64_t v6 = __OFSUB__(v5, v4);
  uint64_t v7 = v5 - v4;
  if (v6)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = *(unsigned __int8 *)(v3 + 32);
  uint64_t v6 = __OFADD__(v8, v7);
  BOOL v9 = v8 + v7;
  if (v6)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v9 < a3 || v8 > a3 || v8 > result || v9 < result) {
    goto LABEL_26;
  }
  uint64_t v13 = a3 - result;
  if (a2 >= 1)
  {
    if (v13 < 0 || v13 >= (unint64_t)a2) {
      goto LABEL_20;
    }
    return 0;
  }
  if (v13 <= 0 && v13 > a2) {
    return 0;
  }
LABEL_20:
  uint64_t v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  if (result < v8 || v9 < result) {
    goto LABEL_28;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  uint64_t v4 = *(void *)(v3 + 40);
  if (v4 < a3 || (a3 | result) < 0 || v4 < result)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= a2) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v5 <= 0 && v5 > a2) {
    return 0;
  }
LABEL_11:
  uint64_t v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v4 < result) {
    goto LABEL_17;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  uint64_t v4 = *(void *)(v3 + 16);
  if (v4 < a3 || (a3 | result) < 0 || v4 < result)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= a2) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v5 <= 0 && v5 > a2) {
    return 0;
  }
LABEL_11:
  uint64_t v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v4 < result) {
    goto LABEL_17;
  }
  return result;
}

uint64_t EventBindingManager.addForwardedEventDispatcher(_:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  swift_getDynamicType();
  uint64_t v2 = (*(uint64_t (**)(void))(a1[4] + 8))();
  outlined init with copy of AnyTrackedValue((uint64_t)a1, (uint64_t)v4);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v4, v2);
  return swift_endAccess();
}

void *DisplayList.ViewUpdater.Platform.init(definition:)@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(a1 + 80))(&v5);
  *a2 = v5 | a1;
  return result;
}

void static PlatformViewDefinition.System.uiView.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

__n128 __swift_memcpy52_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t type metadata completion function for _EnvironmentKeyWritingModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static SafeAreaRegions.all.getter()
{
  return -1;
}

ValueMetadata *type metadata accessor for Rectangle._Inset()
{
  return &type metadata for Rectangle._Inset;
}

Swift::Void __swiftcall AnimatorState.removeListeners()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 168));
  swift_beginAccess();
  if ((unint64_t)*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v5 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (v6) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_6:
        if (v6 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v6; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0)
          {
            uint64_t v8 = MEMORY[0x24C523D60](i, v5);
          }
          else
          {
            uint64_t v8 = *(void *)(v5 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v8 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v2 = v4;
    swift_bridgeObjectRelease();
  }
  BOOL v9 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 176));
  swift_beginAccess();
  if ((unint64_t)*v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v14) {
      return;
    }
  }
  else if (!*(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  uint64_t v10 = *v9;
  if ((unint64_t)*v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11)
    {
LABEL_19:
      if (v11 >= 1)
      {
        for (uint64_t j = 0; j != v11; ++j)
        {
          if ((v10 & 0xC000000000000001) != 0)
          {
            uint64_t v13 = MEMORY[0x24C523D60](j, v10);
          }
          else
          {
            uint64_t v13 = *(void *)(v10 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v13 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *BOOL v9 = v4;
  swift_bridgeObjectRelease();
}

void DynamicAnimationListener.animationWasRemoved()()
{
  uint64_t v1 = *(void *)(v0 + 32) - 1;
  *(void *)(v0 + 32) = v1;
  if (!v1 && swift_weakLoadStrong())
  {
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = *(void *)(v0 + 24);
    GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicAnimationListener.animationWasRemoved(), v2);
    swift_release();
    swift_release();
  }
}

uint64_t static _DelayedPreferenceView._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  void (*v32)(uint64_t *__return_ptr, int *, unint64_t *);
  uint64_t v33;
  int v34;
  int v35;
  uint64_t result;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51[3];
  char v52[16];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56[16];
  uint64_t AssociatedTypeWitness;
  uint64_t v58;
  uint64_t WitnessTable;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  long long v94;
  uint64_t v95;
  uint64_t v96;
  long long v97;
  uint64_t v98;
  int v99;
  uint64_t v100;

  uint64_t v100 = *MEMORY[0x263EF8340];
  unsigned int v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  int v16 = *(_DWORD *)(a2 + 80);
  uint64_t v91 = *(void *)a2;
  uint64_t v92 = v12;
  uint64_t v94 = *(_OWORD *)(a2 + 24);
  uint64_t v93 = v13;
  uint64_t v95 = v15;
  uint64_t v96 = v14;
  uint64_t v97 = *(_OWORD *)(a2 + 56);
  char v98 = *(void *)(a2 + 72);
  uint64_t v99 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.add<A>(_:)(a3, a3, a5);
  uint64_t v76 = 0;
  LOBYTE(v77) = 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = type metadata accessor for PreferenceValueAttribute();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for Attribute();
  uint64_t v18 = MEMORY[0x263F8E628];
  uint64_t v19 = MEMORY[0x263F8E658];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v76, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v56, v58, MEMORY[0x263F8E628], v17, MEMORY[0x263F8E658], v20);
  uint64_t v60 = __PAIR64__(v60, v11);
  uint64_t v53 = a4;
  uint64_t v45 = a3;
  uint64_t v76 = a3;
  uint64_t v77 = a4;
  uint64_t v78 = a5;
  uint64_t v79 = a6;
  uint64_t v44 = a6;
  uint64_t v54 = type metadata accessor for DelayedPreferenceChild();
  uint64_t v55 = swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v60, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v52, v54, v18, v21, v19, v22);
  _GraphValue.init(_:)(v76, v51);
  uint64_t v47 = v51[0];
  unint64_t v23 = v91;
  uint64_t v24 = v93;
  uint64_t v40 = DWORD1(v94);
  uint64_t v41 = v94;
  uint64_t v25 = *((void *)&v94 + 1);
  uint64_t v42 = v92;
  uint64_t v26 = v95;
  uint64_t v27 = v96;
  int v29 = v97;
  int v28 = DWORD1(v97);
  int v30 = DWORD2(v97);
  int v31 = HIDWORD(v97);
  uint64_t v38 = HIDWORD(v98);
  uint64_t v39 = v98;
  uint64_t v37 = v99;
  LODWORD(v14) = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v43 = v14;
  if (v14) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v76 = v23;
  LODWORD(v77) = v42;
  uint64_t v78 = v24;
  uint64_t v79 = __PAIR64__(v40, v41);
  uint64_t v81 = HIDWORD(v25);
  uint64_t v82 = v26;
  uint64_t v83 = v27;
  uint64_t v84 = v29;
  uint64_t v85 = v28;
  uint64_t v86 = v30;
  uint64_t v87 = v31;
  char v88 = v39;
  char v89 = v38;
  id v90 = v37;
  uint64_t v48 = v47;
  uint64_t v60 = v23;
  uint64_t v61 = v42;
  char v62 = v24;
  uint64_t v63 = v41;
  uint64_t v64 = v40;
  uint64_t v65 = 0;
  uint64_t v66 = HIDWORD(v25);
  uint64_t v67 = v26;
  uint64_t v68 = v27;
  uint64_t v69 = v29;
  uint64_t v70 = v28;
  uint64_t v71 = v30;
  char v72 = v31;
  char v73 = v39;
  uint64_t v74 = v38;
  uint64_t v75 = v37;
  uint64_t v32 = *(void (**)(uint64_t *__return_ptr, int *, unint64_t *))(v44 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32(&v49, &v48, &v60);
  uint64_t v80 = v25;
  if (v43)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v49, (uint64_t)&v76);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  uint64_t v33 = v49;
  uint64_t v34 = v50;
  uint64_t v35 = HIDWORD(v50);
  uint64_t v76 = v49;
  uint64_t v77 = v50;
  _ViewOutputs.subscript.getter(v45, v45, a5);
  static PreferenceValueAttribute.setSource(_:of:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a7 = v33;
  *(_DWORD *)(a7 + 8) = v34;
  *(_DWORD *)(a7 + 12) = v35;
  return result;
}

uint64_t static PreferenceValueAttribute.setSource(_:of:)()
{
  return AGGraphMutateAttribute();
}

uint64_t type metadata accessor for PreferenceValueAttribute()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DelayedPreferenceChild()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in PreferenceBridge.addHostValues(_:for:)(uint64_t a1, int a2, uint64_t a3)
{
  return HostPreferencesCombiner.addChild(keys:values:)(a2, a3);
}

uint64_t HostPreferencesCombiner.addChild(keys:values:)(int a1, uint64_t a2)
{
  unint64_t v5 = AGCreateWeakAttribute();
  int v6 = v5;
  unint64_t v7 = HIDWORD(v5);
  uint64_t v8 = *(void *)(v2 + 8);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(v8 + 32) != a1)
  {
    if (v9 != 1)
    {
      unint64_t v11 = 1;
      uint64_t v12 = 48;
      while (*(_DWORD *)(v8 + v12) != a1)
      {
        unint64_t v13 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          goto LABEL_19;
        }
        ++v11;
        v12 += 16;
        if (v13 == v9) {
          goto LABEL_10;
        }
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
LABEL_10:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_19:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 + 1, 1, (void *)v8);
      uint64_t v8 = result;
    }
    unint64_t v11 = *(void *)(v8 + 16);
    unint64_t v14 = *(void *)(v8 + 24);
    if (v11 >= v14 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v11 + 1, 1, (void *)v8);
      uint64_t v8 = result;
    }
    *(void *)(v8 + 16) = v11 + 1;
    goto LABEL_17;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v11 = 0;
  if (result) {
    goto LABEL_16;
  }
LABEL_4:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v8);
  uint64_t v8 = result;
LABEL_15:
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
LABEL_16:
  if (v11 < *(void *)(v8 + 16))
  {
LABEL_17:
    uint64_t v15 = v8 + 16 * v11;
    *(_DWORD *)(v15 + 32) = v6;
    *(_DWORD *)(v15 + 36) = v7;
    *(void *)(v15 + 40) = a2;
    *(void *)(v2 + 8) = v8;
    return result;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t ViewGraph.__deallocating_deinit()
{
  ViewGraph.deinit();

  return swift_deallocClassInstance();
}

uint64_t ViewGraph.deinit()
{
  uint64_t v2 = v0;
  ViewGraph.removePreferenceOutlets(isInvalidating:)(1);
  swift_beginAccess();
  UnsafeHeterogeneousBuffer.destroy()();
  swift_endAccess();
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 128) == 1)
  {
    uint64_t v3 = swift_beginAccess();
    MEMORY[0x270FA5388](v3);
    id v5 = v4;
    AGSubgraphApply();

    *(unsigned char *)(v0 + 128) = 0;
  }
  swift_beginAccess();
  int v6 = *(void **)(v0 + 16);
  if (v6)
  {
    id v7 = v6;
    specialized static Update.begin()();
    AGSubgraphInvalidate();
    AGGraphSetContext();
    AGGraphInvalidate();
    uint64_t v8 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = 0;

    static Update.end()();
  }
  swift_endAccess();
  if (one-time initialization token for blockedGraphHosts != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    swift_beginAccess();
    rawValue = blockedGraphHosts._rawValue;
    unint64_t v10 = *((void *)blockedGraphHosts._rawValue + 2);
    if (!v10)
    {
      uint64_t v11 = 0;
      goto LABEL_21;
    }
    if (*((void *)blockedGraphHosts._rawValue + 4) != v2) {
      break;
    }
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        goto LABEL_42;
      }
      if (v12 != v10) {
        break;
      }
LABEL_14:
      if ((uint64_t)v10 >= v11) {
        goto LABEL_21;
      }
      __break(1u);
LABEL_16:
      uint64_t v13 = 5;
      while (1)
      {
        uint64_t v11 = v13 - 4;
        if (rawValue[v13] == v2) {
          break;
        }
        uint64_t v14 = v13 - 3;
        if (__OFADD__(v11, 1)) {
          goto LABEL_38;
        }
        ++v13;
        if (v14 == v10)
        {
          uint64_t v11 = v10;
          goto LABEL_21;
        }
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v1 = &unk_26B0F2000;
    blockedGraphHosts._rawValue = rawValue;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_23;
    }
LABEL_42:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew()(rawValue);
LABEL_23:
    v1[316] = rawValue;
    uint64_t v20 = v11 + 5;
    while ((v12 & 0x8000000000000000) == 0)
    {
      unint64_t v10 = rawValue[2];
      if (v20 - 4 >= v10) {
        goto LABEL_36;
      }
      uint64_t v22 = rawValue[v20];
      if (v22 != v2)
      {
        if (v20 - 4 != v11)
        {
          if (v11 >= v10) {
            goto LABEL_39;
          }
          uint64_t v23 = rawValue[v11 + 4];
          char v24 = swift_isUniquelyReferenced_nonNull_native();
          v1[316] = rawValue;
          if ((v24 & 1) == 0)
          {
            rawValue = specialized _ArrayBuffer._consumeAndCreateNew()(rawValue);
            v1[316] = rawValue;
          }
          rawValue[v11 + 4] = v22;
          *(void *)(v1[316] + 8 * v20) = v23;
          rawValue = (void *)v1[316];
        }
        if (__OFADD__(v11++, 1)) {
          goto LABEL_37;
        }
        unint64_t v10 = rawValue[2];
      }
      uint64_t v21 = v20 - 3;
      ++v20;
      if (v21 == v10) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    swift_once();
  }
  if (v10 != 1) {
    goto LABEL_16;
  }
  uint64_t v11 = 1;
LABEL_21:
  specialized Array.replaceSubrange<A>(_:with:)(v11, v10);
  swift_endAccess();
  uint64_t v15 = *(void **)(v2 + 16);
  int v16 = *(void **)(v2 + 24);
  uint64_t v17 = *(void **)(v2 + 32);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of weak GestureGraphDelegate?(v2 + 200);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  return v2;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  id v5 = *v3;
  uint64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v9 = a1 - a2;
  if (__OFSUB__(0, v8))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = v6 - v8;
  if (__OFADD__(v6, v9))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v10 <= *((void *)v5 + 3) >> 1)
  {
    if (!v9) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t result = (char *)a3();
    id v5 = result;
    if (!v9)
    {
LABEL_18:
      *uint64_t v3 = v5;
      return result;
    }
  }
  uint64_t v13 = *((void *)v5 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_24;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v5[8 * a1 + 32];
    int v16 = &v5[8 * a2 + 32];
    if (a1 != a2 || result >= &v16[8 * v15]) {
      uint64_t result = (char *)memmove(result, v16, 8 * v15);
    }
    uint64_t v17 = *((void *)v5 + 2);
    BOOL v14 = __OFADD__(v17, v9);
    uint64_t v18 = v17 + v9;
    if (!v14)
    {
      *((void *)v5 + 2) = v18;
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_26:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t partial apply for closure #1 in CAHostingLayer.preferenceValue<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  return GraphHost.preferenceValue<A>(_:)(*(void *)(v1 + 24), *(void *)(v1 + 40), a1);
}

uint64_t GraphHost.preferenceValue<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for PreferenceValues.Value();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v20 - v10;
  swift_beginAccess();
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = *(void *)(*(void *)Value + 16);
  if (v13)
  {
    BOOL v14 = (void *)(*(void *)Value + 32);
    while (*v14 != a1)
    {
      v14 += 2;
      if (!--v13) {
        goto LABEL_5;
      }
    }
    GraphHost.instantiateIfNeeded()();
    swift_beginAccess();
    uint64_t WeakValue = (uint64_t *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      uint64_t v18 = *WeakValue;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v18 = MEMORY[0x263F8EE78];
    }
    uint64_t v21 = v18;
    PreferenceValues.subscript.getter(a1, a1, v7, (uint64_t)v11);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, v11, AssociatedTypeWitness);
  }
  else
  {
LABEL_5:
    AGGraphClearUpdate();
    closure #1 in GraphHost.addPreference<A>(_:)(v3, a1, a2);
    AGGraphSetUpdate();
    GraphHost.instantiateIfNeeded()();
    swift_beginAccess();
    uint64_t v15 = (uint64_t *)AGGraphGetWeakValue();
    if (v15)
    {
      uint64_t v16 = *v15;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    uint64_t v21 = v16;
    PreferenceValues.subscript.getter(a1, a1, v7, (uint64_t)v11);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, v11, AssociatedTypeWitness);
    AGGraphClearUpdate();
    closure #1 in GraphHost.removePreference<A>(_:)(v3, a1);
    return AGGraphSetUpdate();
  }
}

uint64_t MergePreferenceKeys.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)AGGraphGetValue();
  uint64_t WeakValue = AGGraphGetWeakValue();
  if (WeakValue && (uint64_t v4 = *(void *)WeakValue, (v5 = *(void *)(*(void *)WeakValue + 16)) != 0))
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    while (v7 < *(void *)(v4 + 16))
    {
      uint64_t v8 = v2[2];
      if (v8)
      {
        uint64_t v9 = 4;
        uint64_t v10 = v2[2];
        while (v2[v9] != *(void *)(v4 + 32 + 16 * v7))
        {
          v9 += 2;
          if (!--v10) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        long long v14 = *(_OWORD *)(v4 + 32 + 16 * v7);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 + 1, 1, v2);
          uint64_t v2 = (void *)result;
        }
        unint64_t v12 = v2[2];
        unint64_t v11 = v2[3];
        long long v13 = v14;
        if (v12 >= v11 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v2);
          long long v13 = v14;
          uint64_t v2 = (void *)result;
        }
        v2[2] = v12 + 1;
        *(_OWORD *)&v2[2 * v12 + 4] = v13;
      }
      if (++v7 == v5)
      {
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRetain();
LABEL_17:
    *a1 = v2;
  }
  return result;
}

uint64_t ViewGraph.updatePreferenceBridge(environment:deferredUpdate:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v5, (uint64_t)v19);
    swift_release();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v19);
    swift_release_n();
  }
  swift_release();
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v19);
  swift_release();
  uint64_t result = swift_release();
  if (Strong)
  {
    uint64_t v9 = swift_weakLoadStrong();
    if (!v9 || (uint64_t v10 = v9, swift_release(), Strong != v10))
    {
      if (one-time initialization token for sharedGraph != -1) {
        swift_once();
      }
      if (AGGraphGetCounter())
      {
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = a2;
        *(void *)(v11 + 24) = a3;
        swift_retain();
        specialized static Update.begin()();
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = partial apply for closure #1 in Transaction.addAnimationListener(allFinished:);
        *(void *)(v12 + 24) = v11;
        uint64_t v13 = one-time initialization token for actions;
        swift_retain();
        if (v13 != -1) {
          swift_once();
        }
        long long v14 = static Update.actions;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        }
        unint64_t v16 = v14[2];
        unint64_t v15 = v14[3];
        if (v16 >= v15 >> 1) {
          long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
        }
        uint64_t v14[2] = v16 + 1;
        uint64_t v17 = &v14[2 * v16];
        v17[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
        v17[5] = v12;
        static Update.actions = v14;
        swift_bridgeObjectRelease();
        static Update.end()();
      }
      else
      {
        uint64_t v18 = swift_retain();
        specialized ViewGraph.preferenceBridge.setter(v18);
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t ViewGraph.preferenceBridge.setter(uint64_t a1)
{
  specialized ViewGraph.preferenceBridge.setter(a1);

  return swift_release();
}

uint64_t closure #1 in DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32) - 1;
  *(void *)(result + 32) = v1;
  if (!v1)
  {
    uint64_t v2 = result;
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v3 = swift_allocObject();
      *(void *)(v3 + 16) = *(void *)(v2 + 24);
      GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicAnimationListener.animationWasRemoved(), v3);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t GraphHost.continueTransaction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    char v6 = *(unsigned char *)(v2 + 152);
    uint64_t v7 = swift_retain_n();
    if (v6)
    {
      uint64_t v8 = v3;
LABEL_12:
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = a1;
      *(void *)(v11 + 24) = a2;
      uint64_t v12 = (void *)(v8 + 160);
      swift_beginAccess();
      uint64_t v13 = *(void **)(v8 + 160);
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v8 + 160) = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        *uint64_t v12 = v13;
      }
      unint64_t v16 = v13[2];
      unint64_t v15 = v13[3];
      if (v16 >= v15 >> 1)
      {
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
        *uint64_t v12 = v13;
      }
      v13[2] = v16 + 1;
      uint64_t v17 = &v13[2 * v16];
      v17[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v17[5] = v11;
      swift_endAccess();
      return swift_release_n();
    }
    else
    {
      uint64_t v9 = v3;
      while (1)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 200))(v7);
        swift_release();
        swift_release();
        if (!v8) {
          break;
        }
        char v10 = *(unsigned char *)(v8 + 152);
        uint64_t v7 = swift_retain();
        uint64_t v9 = v8;
        if (v10) {
          goto LABEL_12;
        }
      }
      uint64_t v19 = (void *)swift_allocObject();
      long long v19[2] = v3;
      v19[3] = a1;
      v19[4] = a2;
      swift_retain();
      swift_retain();
      specialized static Update.begin()();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = partial apply for closure #1 in GraphHost.continueTransaction(_:);
      *(void *)(v20 + 24) = v19;
      uint64_t v21 = one-time initialization token for actions;
      swift_retain();
      if (v21 != -1) {
        swift_once();
      }
      uint64_t v22 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      }
      unint64_t v24 = v22[2];
      unint64_t v23 = v22[3];
      if (v24 >= v23 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v22);
      }
      void v22[2] = v24 + 1;
      uint64_t v25 = &v22[2 * v24];
      v25[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      void v25[5] = v20;
      static Update.actions = v22;
      swift_bridgeObjectRelease();
      static Update.end()();
      return swift_release();
    }
  }
  return result;
}

void specialized ViewGraph.preferenceBridge.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    swift_release();
    if (a1 && v5 == a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  ViewGraph.removePreferenceOutlets(isInvalidating:)(0);
  swift_weakAssign();
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 128) == 1) {
    GraphHost.uninstantiate(immediately:)(0);
  }
  swift_weakAssign();
  if (swift_weakLoadStrong())
  {
    PreferenceBridge.addChild(_:)(v2);
    swift_release();
  }
  GraphHost.updateRemovedState()();
}

Swift::Void __swiftcall GraphHost.updateRemovedState()()
{
  uint64_t v1 = swift_beginAccess();
  LOBYTE(v2) = *(unsigned char *)(v0 + 169);
  if ((_BYTE)v2)
  {
    int v3 = 1;
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 200))(v1);
    if (v4)
    {
      uint64_t v5 = v4;
      swift_beginAccess();
      unsigned int v2 = *(unsigned __int8 *)(v5 + 169);
      swift_release();
      int v3 = (v2 >> 1) & 1;
    }
    else
    {
      int v3 = 0;
      LOBYTE(v2) = 0;
    }
  }
  unsigned int v6 = v2 & 2;
  uint64_t v7 = swift_beginAccess();
  if (v3 != *(unsigned __int8 *)(v0 + 40))
  {
    if (v3)
    {
      id v8 = *(id *)(v0 + 32);
      AGSubgraphApply();

      uint64_t v7 = AGSubgraphRemoveChild();
    }
    else
    {
      AGSubgraphAddChild();
      id v9 = *(id *)(v0 + 32);
      AGSubgraphApply();
    }
    *(unsigned char *)(v0 + 40) = v3;
  }
  if ((v6 != 0) != *(unsigned char *)(v0 + 41))
  {
    *(unsigned char *)(v0 + 41) = v6 >> 1;
    (*(void (**)(uint64_t))(*(void *)v0 + 232))(v7);
  }
}

uint64_t ViewGraph.parentHost.getter()
{
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_release();
  return Strong;
}

Swift::Void __swiftcall ViewGraph.isHiddenForReuseDidChange()()
{
  uint64_t v1 = v0;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong;
    swift_beginAccess();
    int v4 = *(unsigned __int8 *)(v0 + 41);
    uint64_t v5 = (uint64_t *)(v0 + 432);
    if (v4 == 1)
    {
      swift_beginAccess();
      uint64_t v6 = *v5;
      uint64_t v7 = *(void *)(*v5 + 16);
      if (v7)
      {
        uint64_t v51 = v3;
        uint64_t v56 = v6 + 32;
        swift_bridgeObjectRetain();
        uint64_t v57 = v3 + 16;
        swift_beginAccess();
        uint64_t v55 = v3 + 72;
        swift_beginAccess();
        unint64_t v8 = 0;
        int v54 = *MEMORY[0x263F288F8];
        uint64_t v52 = v7;
        while (v8 < *(void *)(v6 + 16))
        {
          id v9 = (uint64_t *)(v56 + 24 * v8);
          uint64_t v10 = *v9;
          uint64_t v11 = v9[1];
          uint64_t v12 = *((unsigned int *)v9 + 4);
          if (swift_weakLoadStrong())
          {
            unint64_t v13 = *(void *)(*(void *)v55 + 16);
            if (v13)
            {
              unint64_t v14 = 0;
              uint64_t v15 = *(void *)v55 + 48;
              while (*(void *)(v15 - 16) != v10)
              {
                ++v14;
                v15 += 24;
                if (v13 == v14) {
                  goto LABEL_5;
                }
              }
              if (v14 >= v13) {
                goto LABEL_59;
              }
              uint64_t Attribute = AGWeakAttributeGetAttribute();
              if (Attribute != v54)
              {
                uint64_t v53 = &v50;
                v59[0] = 0;
                MEMORY[0x270FA5388](Attribute);
                *(&v50 - 4) = v10;
                *(&v50 - 3) = v11;
                *((_DWORD *)&v50 - 4) = v12;
                *(&v50 - 1) = (uint64_t)v59;
                uint64_t v17 = type metadata accessor for PreferenceCombiner();
                MEMORY[0x270FA5388](v17);
                *(&v50 - 4) = v18;
                *(&v50 - 3) = (uint64_t)partial apply for closure #1 in removeValue #1 <A>(key:) in PreferenceBridge.removeValue(_:for:isInvalidating:);
                *(&v50 - 2) = (uint64_t)(&v50 - 6);
                uint64_t v7 = v52;
                AGGraphMutateAttribute();
                if (v59[0] == 1)
                {
                  v59[0] = 0;
                  GraphHost.graphInvalidation(from:)(v12);
                }
              }
            }
LABEL_5:
            swift_release();
          }
          if (++v8 == v7)
          {
            swift_bridgeObjectRelease();
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
LABEL_33:
      uint64_t v32 = *(unsigned int *)(v1 + 56);
      swift_beginAccess();
      if (!swift_weakLoadStrong()) {
        goto LABEL_44;
      }
      swift_beginAccess();
      uint64_t v33 = AGWeakAttributeGetAttribute();
      if (v33 == *MEMORY[0x263F288F8]) {
        goto LABEL_43;
      }
      v59[0] = 0;
      MEMORY[0x270FA5388](v33);
      *(&v50 - 2) = (uint64_t)v59;
      *((_DWORD *)&v50 - 2) = v32;
      MEMORY[0x270FA5388](v34);
      *(&v50 - 2) = (uint64_t)partial apply for closure #1 in PreferenceBridge.removeHostValues(for:isInvalidating:);
      *(&v50 - 1) = v35;
      AGGraphMutateAttribute();
      if ((v59[0] & 1) == 0)
      {
LABEL_43:
        swift_release();
LABEL_44:
        swift_release();
        goto LABEL_45;
      }
      LOBYTE(v58) = 0;
    }
    else
    {
      swift_beginAccess();
      uint64_t v19 = *v5;
      uint64_t v52 = *(void *)(*v5 + 16);
      if (v52)
      {
        uint64_t v51 = v3;
        uint64_t v56 = v19 + 32;
        swift_bridgeObjectRetain();
        uint64_t v57 = v3 + 16;
        swift_beginAccess();
        uint64_t v55 = v3 + 72;
        swift_beginAccess();
        unint64_t v20 = 0;
        int v54 = *MEMORY[0x263F288F8];
        uint64_t v21 = v52;
        while (v20 < *(void *)(v19 + 16))
        {
          uint64_t v22 = (uint64_t *)(v56 + 24 * v20);
          uint64_t v23 = *v22;
          uint64_t v24 = v22[1];
          uint64_t v25 = *((unsigned int *)v22 + 4);
          if (swift_weakLoadStrong())
          {
            unint64_t v26 = *(void *)(*(void *)v55 + 16);
            if (v26)
            {
              unint64_t v27 = 0;
              uint64_t v28 = *(void *)v55 + 48;
              while (*(void *)(v28 - 16) != v23)
              {
                ++v27;
                v28 += 24;
                if (v26 == v27) {
                  goto LABEL_20;
                }
              }
              if (v27 >= v26) {
                goto LABEL_60;
              }
              uint64_t v29 = AGWeakAttributeGetAttribute();
              if (v29 != v54)
              {
                uint64_t v53 = &v50;
                MEMORY[0x270FA5388](v29);
                *(&v50 - 4) = v23;
                *(&v50 - 3) = v24;
                *((_DWORD *)&v50 - 4) = v25;
                uint64_t v30 = type metadata accessor for PreferenceCombiner();
                MEMORY[0x270FA5388](v30);
                *(&v50 - 4) = v31;
                *(&v50 - 3) = (uint64_t)partial apply for closure #1 in addValue #1 <A>(key:) in PreferenceBridge.addValue(_:for:);
                *(&v50 - 2) = (uint64_t)(&v50 - 6);
                uint64_t v21 = v52;
                AGGraphMutateAttribute();
                v59[0] = 0;
                GraphHost.graphInvalidation(from:)(v25);
              }
            }
LABEL_20:
            swift_release();
          }
          if (++v20 == v21)
          {
            swift_bridgeObjectRelease();
            goto LABEL_38;
          }
        }
        goto LABEL_58;
      }
LABEL_38:
      swift_beginAccess();
      if (static WeakAttribute.== infix(_:_:)()) {
        goto LABEL_44;
      }
      uint64_t v36 = *(void *)(v1 + 132);
      uint64_t v32 = *(unsigned int *)(v1 + 56);
      swift_beginAccess();
      if (!swift_weakLoadStrong()) {
        goto LABEL_44;
      }
      swift_beginAccess();
      uint64_t v37 = AGWeakAttributeGetAttribute();
      if (v37 == *MEMORY[0x263F288F8]) {
        goto LABEL_43;
      }
      MEMORY[0x270FA5388](v37);
      *((_DWORD *)&v50 - 4) = v32;
      *(uint64_t *)((char *)&v50 - 12) = v36;
      MEMORY[0x270FA5388](v38);
      *(&v50 - 2) = (uint64_t)_s7SwiftUI16PreferenceBridgeC13addHostValues_3fory14AttributeGraph04WeakI0VyAA0cG0VG_AF0I0VyAA0C4KeysVGtFyAA0F19PreferencesCombinerVzXEfU_TA_0;
      *(&v50 - 1) = v39;
      AGGraphMutateAttribute();
      v59[0] = 0;
    }
    GraphHost.graphInvalidation(from:)(v32);
    goto LABEL_43;
  }
LABEL_45:
  uint64_t v40 = (uint64_t *)(v1 + 216);
  swift_beginAccess();
  int v41 = *(_DWORD *)(v1 + 228);
  if (v41)
  {
    uint64_t v42 = *v40;
    if (!*v40)
    {
LABEL_61:
      __break(1u);
      return;
    }
    int v43 = 0;
    int v44 = v41 - 1;
    do
    {
      uint64_t v47 = (uint64_t *)(v42 + v43);
      if (v44) {
        v43 += *((_DWORD *)v47 + 2);
      }
      else {
        int v43 = 0;
      }
      int v45 = v44 | v43;
      uint64_t v46 = *v47;
      uint64_t v58 = v47;
      (*(void (**)(uint64_t **, uint64_t))(v46 + 136))(&v58, v1);
      --v44;
    }
    while (v45);
  }
  swift_beginAccess();
  if ((*(unsigned char *)(v1 + 128) & 1) != 0 || (swift_beginAccess(), (*(unsigned char *)(v1 + 41) & 1) == 0))
  {
    swift_beginAccess();
    if (MEMORY[0x24C527E00](v1 + 200))
    {
      uint64_t v48 = *(void *)(v1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v48 + 8) + 16))(ObjectType);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t static ViewGraphFeatureBuffer._VTable.isHiddenForReuseDidChange(elt:graph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 168);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 + 176) + 32))(a2, v4);
}

uint64_t PreferenceBridge.wrapOutputs(_:inputs:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  v56[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[6];
  unsigned int v48 = *((_DWORD *)a2 + 14);
  v3[6] = v5;
  swift_retain();
  uint64_t result = swift_release();
  unint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    uint64_t v51 = v3 + 9;
    uint64_t v52 = v3 + 5;
    v46[7] = v3 + 7;
    uint64_t v47 = v3;
    v46[6] = v3 + 8;
    uint64_t v9 = v6 + 32;
    swift_bridgeObjectRetain();
    unint64_t v10 = 0;
    uint64_t v49 = v6 + 32;
    uint64_t v50 = v6;
    do
    {
      if (v10 >= v8) {
        __break(1u);
      }
      long long v15 = *(_OWORD *)(v9 + 16 * v10);
      unint64_t v16 = *(ValueMetadata **)(v9 + 16 * v10);
      uint64_t v17 = *a1;
      uint64_t v18 = *(void *)(*a1 + 16);
      if (v16 == &type metadata for HostPreferencesKey)
      {
        long long v53 = *(_OWORD *)(v9 + 16 * v10);
        if (v18)
        {
          uint64_t v11 = (ValueMetadata **)(v17 + 48);
          while (*(v11 - 2) != &type metadata for HostPreferencesKey)
          {
            v11 += 3;
            if (!--v18) {
              goto LABEL_3;
            }
          }
        }
        else
        {
LABEL_3:
          uint64_t v11 = (ValueMetadata **)MEMORY[0x263F288F8];
        }
        v56[0] = __PAIR64__(*(_DWORD *)v11, v48);
        v56[1] = MEMORY[0x263F8EE78];
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        lazy protocol witness table accessor for type HostPreferencesCombiner and conformance HostPreferencesCombiner();
        unsigned int v12 = Attribute.init<A>(body:value:flags:update:)();
        swift_release();
        LOBYTE(v56[0]) = 0;
        PreferencesOutputs.subscript.setter(v12, &type metadata for HostPreferencesKey, *((uint64_t *)&v53 + 1));
        swift_beginAccess();
        uint64_t v13 = AGCreateWeakAttribute();
        unint64_t v14 = v47;
        v47[7] = v13;
        swift_endAccess();
        swift_beginAccess();
        unsigned char v14[8] = AGCreateWeakAttribute();
        swift_endAccess();
      }
      else if (v18)
      {
        uint64_t v19 = (ValueMetadata **)(v17 + 32);
        while (*v19 != v16)
        {
          v19 += 3;
          if (!--v18) {
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        long long v53 = *(_OWORD *)(v9 + 16 * v10);
        uint64_t v20 = *((void *)&v15 + 1);
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t v22 = type metadata accessor for Attribute();
        uint64_t v23 = static Array._allocateUninitialized(_:)();
        uint64_t v24 = PreferenceCombiner.init(attributes:)(v23, (uint64_t)v16, v20, v56);
        uint64_t v55 = v56[0];
        MEMORY[0x270FA5388](v24);
        v46[2] = AssociatedTypeWitness;
        uint64_t v25 = type metadata accessor for PreferenceCombiner();
        v46[3] = v25;
        v46[4] = swift_getWitnessTable();
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v55, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v46, v25, MEMORY[0x263F8E628], v22, MEMORY[0x263F8E658], v26);
        swift_bridgeObjectRelease();
        uint64_t v27 = v54;
        uint64_t v28 = (void **)v52;
        swift_beginAccess();
        uint64_t v29 = *v28;
        uint64_t v30 = v29[2];
        if (v30)
        {
          uint64_t v31 = (ValueMetadata **)(v29 + 4);
          while (*v31 != v16)
          {
            v31 += 2;
            if (!--v30) {
              goto LABEL_16;
            }
          }
        }
        else
        {
LABEL_16:
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v52 = v29;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
            *uint64_t v52 = v29;
          }
          unint64_t v34 = v29[2];
          unint64_t v33 = v29[3];
          long long v35 = v53;
          if (v34 >= v33 >> 1)
          {
            int v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v29);
            long long v35 = v53;
            uint64_t v29 = v45;
            *uint64_t v52 = v45;
          }
          id v29[2] = v34 + 1;
          *(_OWORD *)&v29[2 * v34 + 4] = v35;
        }
        swift_endAccess();
        uint64_t v36 = AGCreateWeakAttribute();
        uint64_t v37 = (void **)v51;
        swift_beginAccess();
        uint64_t v38 = *v37;
        char v39 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v37 = v38;
        if ((v39 & 1) == 0)
        {
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
          *uint64_t v51 = v38;
        }
        unint64_t v41 = v38[2];
        unint64_t v40 = v38[3];
        long long v42 = v53;
        if (v41 >= v40 >> 1)
        {
          int v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v38);
          long long v42 = v53;
          uint64_t v38 = v44;
          *uint64_t v51 = v44;
        }
        v38[2] = v41 + 1;
        int v43 = &v38[3 * v41];
        *((_OWORD *)v43 + 2) = v42;
        v43[6] = v36;
        swift_endAccess();
        LOBYTE(v56[0]) = 0;
        PreferencesOutputs.subscript.setter(v27, v16, v20);
        uint64_t v9 = v49;
        uint64_t v6 = v50;
      }
      ++v10;
      unint64_t v8 = *(void *)(v6 + 16);
    }
    while (v10 != v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for PreferenceCombiner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PreferenceCombiner.init(attributes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *)@<X3>, uint64_t *a5@<X8>)
{
  v13[5] = a1;
  v13[2] = a2;
  v13[3] = a3;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Attribute();
  uint64_t v7 = type metadata accessor for Array();
  uint64_t v8 = type metadata accessor for WeakAttribute();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a4, (uint64_t)v13, v7, v8, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v10);
  uint64_t result = swift_bridgeObjectRelease();
  *a5 = v11;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v14 = (char *)&v26 - v13;
  MEMORY[0x270FA5388](v15);
  unint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  uint64_t v27 = v14;
  uint64_t v43 = Array.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  unint64_t v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t partial apply for closure #1 in PreferenceCombiner.init(attributes:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in PreferenceCombiner.init(attributes:)(a1);
}

{
  uint64_t result;

  uint64_t result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

uint64_t PreferenceCombiner.init(attributes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return PreferenceCombiner.init(attributes:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in PreferenceCombiner.init(attributes:), a4);
}

unint64_t lazy protocol witness table accessor for type HostPreferencesCombiner and conformance HostPreferencesCombiner()
{
  unint64_t result = lazy protocol witness table cache variable for type HostPreferencesCombiner and conformance HostPreferencesCombiner;
  if (!lazy protocol witness table cache variable for type HostPreferencesCombiner and conformance HostPreferencesCombiner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostPreferencesCombiner and conformance HostPreferencesCombiner);
  }
  return result;
}

uint64_t ViewGraph.removePreferenceOutlets(isInvalidating:)(int a1)
{
  uint64_t v2 = v1;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    swift_beginAccess();
    uint64_t v6 = *(void *)(v2 + 432);
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      v19[1] = v2 + 432;
      long long v19[2] = v5;
      int v21 = a1;
      uint64_t v20 = v2;
      uint64_t v8 = v5 + 72;
      uint64_t v25 = v6 + 32;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      uint64_t result = swift_beginAccess();
      unint64_t v9 = 0;
      int v24 = *MEMORY[0x263F288F8];
      uint64_t v22 = v5 + 72;
      while (v9 < *(void *)(v6 + 16))
      {
        uint64_t v10 = (uint64_t *)(v25 + 24 * v9);
        uint64_t v11 = *v10;
        uint64_t v12 = *((unsigned int *)v10 + 4);
        uint64_t result = swift_weakLoadStrong();
        if (result)
        {
          unint64_t v13 = *(void *)(*(void *)v8 + 16);
          if (v13)
          {
            unint64_t v14 = 0;
            uint64_t v15 = *(void *)v8 + 48;
            while (*(void *)(v15 - 16) != v11)
            {
              ++v14;
              v15 += 24;
              if (v13 == v14) {
                goto LABEL_4;
              }
            }
            if (v14 >= v13) {
              goto LABEL_24;
            }
            uint64_t Attribute = AGWeakAttributeGetAttribute();
            if (Attribute != v24)
            {
              uint64_t v23 = v19;
              char v26 = 0;
              MEMORY[0x270FA5388](Attribute);
              uint64_t v17 = type metadata accessor for PreferenceCombiner();
              MEMORY[0x270FA5388](v17);
              uint64_t v8 = v22;
              AGGraphMutateAttribute();
              if (v26 == 1)
              {
                char v26 = v21 & 1;
                if (v21) {
                  uint64_t v18 = 0;
                }
                else {
                  uint64_t v18 = v12;
                }
                GraphHost.graphInvalidation(from:)(v18 | ((unint64_t)(v21 & 1) << 32));
              }
            }
          }
LABEL_4:
          uint64_t result = swift_release();
        }
        if (++v9 == v7)
        {
          swift_bridgeObjectRelease();
          uint64_t v2 = v20;
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
    }
    else
    {
LABEL_21:
      *(void *)(v2 + 432) = MEMORY[0x263F8EE78];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      PreferenceBridge.removeHostValues(for:isInvalidating:)();
      PreferenceBridge.removeChild(_:)(v2);
      return swift_release();
    }
  }
  return result;
}

uint64_t PreferenceBridge.addChild(_:)(uint64_t a1)
{
  uint64_t v3 = (void **)(v1 + 32);
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = (void *)(v5 + 32);
    while (*v7 != a1)
    {
      ++v7;
      if (!--v6) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    swift_beginAccess();
    uint64_t v8 = *v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v3 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      *uint64_t v3 = v8;
    }
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
      *uint64_t v3 = v8;
    }
    unint64_t v8[2] = v11 + 1;
    v8[v11 + 4] = a1;
    return swift_endAccess();
  }
  return result;
}

uint64_t GraphHost.addPreference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  AGGraphClearUpdate();
  a4(v4, a2, a3);

  return AGGraphSetUpdate();
}

uint64_t closure #1 in GraphHost.addPreference<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = (void *)a1[2];
  uint64_t v6 = (void *)a1[3];
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = *(void *)(a3 + 8);
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v5;
  id v10 = v6;
  id v11 = v7;
  PreferenceKeys.add(_:)(a2, v8);
  AGGraphSetValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t PreferenceKeys.add(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void **)v2;
  uint64_t v6 = *(void *)(*(void *)v2 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 4;
    uint64_t v8 = *(void *)(*(void *)v2 + 16);
    while (*v7 != result)
    {
      v7 += 2;
      if (!--v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 1, v5);
      uint64_t v5 = (void *)result;
    }
    unint64_t v10 = v5[2];
    unint64_t v9 = v5[3];
    if (v10 >= v9 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      uint64_t v5 = (void *)result;
    }
    v5[2] = v10 + 1;
    id v11 = &v5[2 * v10];
    v11[4] = v4;
    v11[5] = a2;
    *(void *)uint64_t v2 = v5;
  }
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      type metadata accessor for _ContiguousArrayStorage<PreferenceKey.Type>(0, a5, a6, a7);
      unint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (char *)v16, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<PreferenceKey.Type>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    type metadata accessor for PreferenceKey.Type(255, a3, a4);
    unint64_t v5 = type metadata accessor for _ContiguousArrayStorage();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t closure #1 in GraphHost.removePreference<A>(_:)(void *a1, uint64_t a2)
{
  swift_beginAccess();
  unint64_t v5 = (void *)a1[2];
  uint64_t v4 = (void *)a1[3];
  uint64_t v6 = (void *)a1[4];
  uint64_t Value = AGGraphGetValue();
  uint64_t v8 = *(void *)(*(void *)Value + 16);
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 32;
    while (*(void *)(*(void *)Value + v10) != a2)
    {
      ++v9;
      v10 += 16;
      if (v8 == v9) {
        goto LABEL_5;
      }
    }
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v11 = v5;
    id v14 = v4;
    id v15 = v6;
    specialized Array.remove(at:)(v9);
  }
  else
  {
LABEL_5:
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v11 = v5;
    id v12 = v4;
    id v13 = v6;
  }
  AGGraphSetValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PreferenceKey.Type(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    type metadata accessor for PreferenceKey(255, a3);
    uint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t keypath_get_2Tm@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = a1(v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t keypath_get_2Tm_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t outlined destroy of Slice<SubviewsCollection>(uint64_t a1)
{
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of _VariadicView_Children(uint64_t a1)
{
  return a1;
}

uint64_t ForEachState.count(style:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v20 - v6;
  unint64_t v9 = *v8;
  if (!AGSubgraphIsValid()) {
    return 0;
  }
  uint64_t v10 = (uint64_t)v2 + *(void *)(v3 + 160);
  swift_beginAccess();
  v24[1] = v4;
  long long v25 = *(_OWORD *)(v3 + 88);
  long long v20 = *(_OWORD *)(v3 + 104);
  long long v26 = v20;
  uint64_t v11 = type metadata accessor for ForEach();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (result == 1)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
  uint64_t v13 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = ForEachState.fetchViewsPerElement()();
  if (v15)
  {
    uint64_t v18 = (uint64_t)v2 + *(void *)(*v2 + 176);
    uint64_t result = swift_beginAccess();
    unint64_t v19 = *(void *)(*(void *)v18 + 16);
    if ((uint64_t)v19 < v13 || *(uint64_t *)((char *)v2 + *(void *)(*v2 + 184)) != v9)
    {
      uint64_t v23 = 0;
      v24[0] = 0;
      uint64_t v22 = 0;
      MEMORY[0x270FA5388](result);
      *((void *)&v20 - 4) = &v23;
      *((void *)&v20 - 3) = v9;
      *((void *)&v20 - 2) = v2;
      *((void *)&v20 - 1) = v24;
      unint64_t v21 = 2;
      ForEachState.forEachItem(from:style:do:)(&v22, &v21, (uint64_t (*)(uint64_t *, void *, uint64_t))partial apply for closure #1 in ForEachState.count(style:), (uint64_t)(&v20 - 3));
      return v23;
    }
    if (v13 - 1 < v19) {
      return *(void *)(*(void *)v18 + 8 * (v13 - 1) + 32);
    }
    goto LABEL_17;
  }
  uint64_t v16 = v14;
  uint64_t result = v14 * v13;
  if ((unsigned __int128)(v16 * (__int128)v13) >> 64 != result >> 63)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v9)
  {
    uint64_t v17 = (unsigned __int128)(result * (__int128)(v9 >> 1)) >> 64;
    result *= v9 >> 1;
    if (v17 != result >> 63)
    {
      __break(1u);
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in ForEachState.item(at:offset:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  v21[2] = a2;
  uint64_t v28 = *a1;
  uint64_t v4 = v28;
  uint64_t v5 = *(void *)(v28 + 104);
  v21[1] = *(void *)(*(void *)(v5 + 8) + 8);
  uint64_t v6 = *(void *)(v28 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v9 = (char *)v21 - v8;
  uint64_t v10 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v21 - v12;
  uint64_t v14 = (char *)a1 + *(void *)(v4 + 160);
  swift_beginAccess();
  uint64_t v15 = *(void *)(v4 + 112);
  uint64_t v24 = v6;
  long long v25 = *(_OWORD *)(v28 + 88);
  uint64_t v26 = v5;
  uint64_t v27 = v15;
  uint64_t v16 = type metadata accessor for ForEach();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v14, 1, v16);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = *(void (**)(char *))&v14[*(int *)(v16 + 60)];
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v6);
    swift_retain();
    unint64_t v19 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v20 = AssociatedTypeWitness;
    (*(void (**)(char *))(v7 + 16))(v9);
    v19(&v24, 0);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v6);
    v18(v9);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v20);
  }
  return result;
}

uint64_t ForEachState.estimatedCount(style:)(unint64_t *a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v6 = *(void *)(*(void *)v1 + 96);
  uint64_t v7 = *(void *)(*(void *)v1 + 104);
  *(void *)&long long v109 = *(void *)(*(void *)v1 + 80);
  uint64_t v5 = v109;
  *((void *)&v109 + 1) = v4;
  uint64_t v110 = v6;
  uint64_t v111 = v7;
  long long v104 = *(_OWORD *)(v3 + 112);
  long long v112 = v104;
  uint64_t v96 = type metadata accessor for ForEachState.Item();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v103 = type metadata accessor for Optional();
  uint64_t v101 = *(void (***)(char *, char *, uint64_t))(v103 - 8);
  MEMORY[0x270FA5388](v103);
  uint64_t v102 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v74 - v11;
  uint64_t v13 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v95 = (char *)&v74 - v15;
  unint64_t v16 = *a1;
  int IsValid = AGSubgraphIsValid();
  uint64_t v18 = 0;
  if (!IsValid) {
    return v18;
  }
  unint64_t v92 = v16;
  uint64_t v19 = *(void *)(v3 + 160);
  uint64_t v97 = v1;
  uint64_t v20 = &v1[v19];
  swift_beginAccess();
  *(void *)&long long v109 = v5;
  *((void *)&v109 + 1) = v4;
  uint64_t v110 = v6;
  uint64_t v111 = v7;
  *(void *)&long long v112 = v104;
  uint64_t v21 = type metadata accessor for ForEach();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v90 = v21;
  char v89 = v23;
  uint64_t v88 = v22 + 48;
  uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v23)(v20, 1);
  if (result == 1) {
    goto LABEL_86;
  }
  long long v25 = *(void (**)(char *, unsigned char *, uint64_t))(v13 + 16);
  uint64_t v26 = v95;
  uint64_t v87 = v20;
  uint64_t v84 = v13 + 16;
  uint64_t v83 = v25;
  v25(v95, v20, v5);
  uint64_t v82 = *(void *)(*(void *)(v7 + 8) + 8);
  uint64_t v27 = dispatch thunk of Collection.count.getter();
  uint64_t v28 = *(void (**)(char *))(v13 + 8);
  uint64_t v86 = v5;
  uint64_t v85 = v13 + 8;
  v28(v26);
  if (!v27) {
    return 0;
  }
  uint64_t v79 = (uint64_t (*)(char *, uint64_t))v28;
  uint64_t v29 = v97;
  uint64_t result = ForEachState.fetchViewsPerElement()();
  if ((v30 & 1) == 0)
  {
    if ((unsigned __int128)(result * (__int128)v27) >> 64 == (result * v27) >> 63)
    {
      uint64_t v18 = result * v27;
      if ((v92 & 1) == 0) {
        return v18;
      }
      v18 *= v92 >> 1;
      if ((unsigned __int128)(result * v27 * (__int128)(v92 >> 1)) >> 64 == v18 >> 63) {
        return v18;
      }
      __break(1u);
      return 0;
    }
    goto LABEL_76;
  }
  uint64_t v31 = &v29[*(void *)(*(void *)v29 + 176)];
  uint64_t result = swift_beginAccess();
  unint64_t v32 = *(void *)(*(void *)v31 + 16);
  unint64_t v33 = *(void *)v29;
  if ((uint64_t)v32 >= v27 && *(void *)&v29[*(void *)(v33 + 184)] == v92)
  {
    if (v27 - 1 >= v32) {
      goto LABEL_84;
    }
    uint64_t v18 = *(void *)(*(void *)v31 + 8 * (v27 - 1) + 32);
    if ((v92 & 1) == 0) {
      return v18;
    }
    unint64_t v33 = v92 >> 1;
    uint64_t v34 = (unsigned __int128)(v18 * (__int128)(v92 >> 1)) >> 64;
    v18 *= v92 >> 1;
    if (v34 == v18 >> 63) {
      return v18;
    }
    __break(1u);
  }
  uint64_t v35 = (unint64_t *)&v29[*(void *)(v33 + 192)];
  swift_beginAccess();
  unint64_t v36 = *v35;
  if ((v36 & 0xC000000000000001) != 0)
  {
    uint64_t v37 = __CocoaDictionary.makeIterator()();
    unint64_t v91 = 0;
    uint64_t v38 = 0;
    unint64_t v39 = 0;
    unint64_t v40 = v37 | 0x8000000000000000;
  }
  else
  {
    uint64_t v41 = -1 << *(unsigned char *)(v36 + 32);
    uint64_t v38 = ~v41;
    uint64_t v42 = *(void *)(v36 + 64);
    unint64_t v91 = v36 + 64;
    uint64_t v43 = -v41;
    if (v43 < 64) {
      uint64_t v44 = ~(-1 << v43);
    }
    else {
      uint64_t v44 = -1;
    }
    unint64_t v39 = v44 & v42;
    unint64_t v40 = v36;
  }
  uint64_t v45 = *(void *)v29;
  uint64_t v94 = v40 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v99 = TupleTypeMetadata2 - 8;
  uint64_t v78 = v38;
  uint64_t v98 = *(void *)(v45 + 232);
  *(void *)&long long v104 = v4 - 8;
  v101 += 4;
  unint64_t v77 = v92 >> 1;
  int64_t v93 = (unint64_t)(v38 + 64) >> 6;
  int64_t v76 = v93 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  int64_t v46 = 0;
  uint64_t v47 = v102;
  unint64_t v100 = v40;
  if ((v40 & 0x8000000000000000) != 0) {
    goto LABEL_27;
  }
LABEL_24:
  if (!v39)
  {
    int64_t v50 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    int64_t v53 = v46;
    if (v50 < v93)
    {
      unint64_t v55 = *(void *)(v91 + 8 * v50);
      if (v55)
      {
LABEL_32:
        uint64_t v48 = (v55 - 1) & v55;
        unint64_t v49 = __clz(__rbit64(v55)) + (v50 << 6);
        goto LABEL_26;
      }
      int64_t v53 = v46 + 1;
      if (v46 + 2 < v93)
      {
        unint64_t v55 = *(void *)(v91 + 8 * (v46 + 2));
        if (v55)
        {
          int64_t v50 = v46 + 2;
          goto LABEL_32;
        }
        int64_t v50 = v46 + 3;
        int64_t v53 = v46 + 2;
        if (v46 + 3 < v93)
        {
          unint64_t v55 = *(void *)(v91 + 8 * v50);
          if (v55) {
            goto LABEL_32;
          }
          int64_t v56 = v46 + 4;
          while (v93 != v56)
          {
            unint64_t v55 = *(void *)(v91 + 8 * v56++);
            if (v55)
            {
              int64_t v50 = v56 - 1;
              goto LABEL_32;
            }
          }
          int64_t v53 = v76;
        }
      }
    }
    uint64_t v52 = *(void *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v47, 1, 1, TupleTypeMetadata2);
    uint64_t v48 = 0;
    goto LABEL_46;
  }
  uint64_t v48 = (v39 - 1) & v39;
  unint64_t v49 = __clz(__rbit64(v39)) | (v46 << 6);
  int64_t v50 = v46;
LABEL_26:
  uint64_t v51 = v102;
  (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v102, *(void *)(v40 + 48) + *(void *)(*(void *)(v4 - 8) + 72) * v49, v4);
  *(void *)&v51[*(int *)(TupleTypeMetadata2 + 48)] = *(void *)(*(void *)(v40 + 56) + 8 * v49);
  uint64_t v52 = *(void *)(TupleTypeMetadata2 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v51, 0, 1, TupleTypeMetadata2);
  uint64_t v47 = v51;
  swift_retain();
  int64_t v53 = v50;
LABEL_46:
  uint64_t v29 = v97;
  while (1)
  {
    (*v101)(v12, v47, v103);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48))(v12, 1, TupleTypeMetadata2);
    if (result == 1) {
      break;
    }
    uint64_t v57 = *(void *)&v12[*(int *)(TupleTypeMetadata2 + 48)];
    unint64_t v40 = v100;
    if (*(_DWORD *)(v57 + *(void *)(*(void *)v57 + 216)) == *(_DWORD *)&v29[v98])
    {
      uint64_t v58 = v81 + 1;
      if (__OFADD__(v81, 1)) {
        goto LABEL_78;
      }
      outlined init with copy of _ViewListOutputs.Views(v57 + *(void *)(*(void *)v57 + 176), (uint64_t)&v109);
      uint64_t v81 = v58;
      if (BYTE8(v112))
      {
        uint64_t result = swift_release();
        if (v29[124] == 1) {
          goto LABEL_88;
        }
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
        Inputuint64_t Value = AGGraphGetInputValue();
        outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)&v106);
        uint64_t v60 = v107;
        uint64_t v75 = v108;
        __swift_project_boxed_opaque_existential_1(&v106, v107);
        unint64_t v105 = v92;
        uint64_t v61 = (*(uint64_t (**)(unint64_t *, uint64_t))(v75 + 16))(&v105, v60);
        uint64_t result = swift_release();
        uint64_t v62 = v80 + v61;
        if (__OFADD__(v80, v61)) {
          goto LABEL_79;
        }
      }
      else
      {
        outlined init with take of ScrollStateRequest(&v109, (uint64_t)&v106);
        uint64_t v64 = v107;
        uint64_t v63 = v108;
        __swift_project_boxed_opaque_existential_1(&v106, v107);
        uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v64, v63);
        uint64_t result = swift_release();
        if (v92)
        {
          uint64_t v66 = (unsigned __int128)(v65 * (__int128)(uint64_t)v77) >> 64;
          v65 *= v77;
          if (v66 != v65 >> 63) {
            goto LABEL_85;
          }
        }
        uint64_t v62 = v80 + v65;
        if (__OFADD__(v80, v65)) {
          goto LABEL_80;
        }
      }
      uint64_t v80 = v62;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v106);
      uint64_t v47 = v102;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v12, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v12, v4);
      uint64_t result = swift_release();
    }
    int64_t v46 = v53;
    unint64_t v39 = v48;
    if ((v40 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    if (__CocoaDictionary.Iterator.next()())
    {
      unsigned int v54 = v102;
      _forceBridgeFromObjectiveC<A>(_:_:)();
      swift_unknownObjectRelease();
      _forceBridgeFromObjectiveC<A>(_:_:)();
      uint64_t v47 = v54;
      swift_unknownObjectRelease();
      uint64_t v52 = *(void *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v54, 0, 1, TupleTypeMetadata2);
    }
    else
    {
      uint64_t v52 = *(void *)(TupleTypeMetadata2 - 8);
      uint64_t v47 = v102;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v102, 1, 1, TupleTypeMetadata2);
    }
    int64_t v53 = v46;
    uint64_t v48 = v39;
  }
  outlined consume of Set<EventID>.Iterator._Variant();
  uint64_t v67 = v87;
  uint64_t result = v89(v87, 1, v90);
  if (result == 1) {
    goto LABEL_87;
  }
  uint64_t v68 = v95;
  uint64_t v69 = v86;
  v83(v95, v67, v86);
  uint64_t v70 = dispatch thunk of Collection.count.getter();
  uint64_t result = v79(v68, v69);
  uint64_t v71 = v70 - v81;
  if (__OFSUB__(v70, v81)) {
    goto LABEL_77;
  }
  uint64_t v18 = v80;
  if (v71 < 1) {
    return v18;
  }
  if (v81 < 1) {
    goto LABEL_72;
  }
  double v72 = ceil((double)v80 / (double)v81 * (double)v71);
  if ((~*(void *)&v72 & 0x7FF0000000000000) == 0)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (v72 <= -9.22337204e18)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (v72 < 9.22337204e18)
  {
    uint64_t v71 = (uint64_t)v72;
    uint64_t v18 = v80 + (uint64_t)v72;
    if (!__OFADD__(v80, (uint64_t)v72)) {
      return v18;
    }
    __break(1u);
LABEL_72:
    BOOL v73 = __OFADD__(v18, v71);
    v18 += v71;
    if (!v73) {
      return v18;
    }
    __break(1u);
    goto LABEL_75;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

uint64_t ModifiedViewList.estimatedCount(style:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(&v6, v3, v4);
}

uint64_t closure #1 in ForEachChild.updateValue()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v35 = a2;
  uint64_t v44 = *a1;
  uint64_t v4 = v44;
  uint64_t v5 = *(void *)(v44 + 104);
  uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8);
  uint64_t v7 = *(void *)(v44 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v38 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v36 = (char *)v32 - v9;
  uint64_t v34 = v6;
  uint64_t v33 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v12 = (char *)v32 - v11;
  uint64_t v13 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)v32 - v15;
  uint64_t v17 = (char *)a1 + *(void *)(v4 + 160);
  swift_beginAccess();
  uint64_t v18 = *(void *)(v4 + 112);
  uint64_t v19 = v7;
  uint64_t v40 = v7;
  long long v41 = *(_OWORD *)(v44 + 88);
  uint64_t v42 = v5;
  uint64_t v43 = v18;
  uint64_t v20 = type metadata accessor for ForEach();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v17, 1, v20);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = *(void *)&v17[*(int *)(v20 + 60)];
    uint64_t v23 = *(void *)&v17[*(int *)(v20 + 60) + 8];
    v32[0] = v19;
    v32[1] = v23;
    uint64_t v44 = v22;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v17, v19);
    uint64_t v24 = v35 + *(void *)(*(void *)v35 + 192);
    swift_beginAccess();
    long long v25 = v12;
    uint64_t v26 = v12;
    uint64_t v27 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v26, v24, v33);
    swift_retain();
    uint64_t v28 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    char v30 = v36;
    uint64_t v29 = v37;
    uint64_t v31 = v38;
    (*(void (**)(char *))(v37 + 16))(v36);
    v28(&v40, 0);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v25, v27);
    (*(void (**)(char *, void))(v13 + 8))(v16, v32[0]);
    ((void (*)(char *))v44)(v30);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v30, v31);
  }
  return result;
}

uint64_t ForEachState.forEachItem(from:style:do:)(uint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t *, void *, uint64_t), uint64_t a4)
{
  uint64_t v71 = a3;
  uint64_t v72 = a4;
  uint64_t v75 = a1;
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 80);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v59 - v12;
  uint64_t v15 = *(void *)(v14 + 104);
  uint64_t v78 = *(void *)(*(void *)(v15 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v18 = (uint64_t *)((char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v19);
  unint64_t v77 = (char *)&v59 - v20;
  unint64_t v74 = *a2;
  if (!AGSubgraphIsValid()) {
    return 1;
  }
  uint64_t v61 = v10;
  uint64_t v63 = v16;
  uint64_t v21 = *(void *)(v6 + 160);
  uint64_t v65 = v4;
  uint64_t v22 = (uint64_t)v4 + v21;
  swift_beginAccess();
  uint64_t v23 = *(void *)(v6 + 112);
  v79[1] = v7;
  long long v80 = *(_OWORD *)(v6 + 88);
  uint64_t v81 = v15;
  uint64_t v82 = v23;
  uint64_t v24 = type metadata accessor for ForEach();
  long long v25 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48);
  BOOL v73 = *v25;
  uint64_t result = v73(v22, 1, v24);
  if (result == 1) {
    goto LABEL_53;
  }
  uint64_t v27 = v8 + 16;
  uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v70(v13, v22, v7);
  dispatch thunk of Collection.endIndex.getter();
  char v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v28 = v8 + 8;
  uint64_t v29 = v30;
  v30(v13, v7);
  uint64_t v68 = v25;
  uint64_t v69 = v24;
  uint64_t v31 = v24;
  unint64_t v32 = v73;
  uint64_t result = v73(v22, 1, v31);
  if (result == 1)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v64 = v22;
  v70(v13, v22, v7);
  dispatch thunk of Collection.startIndex.getter();
  v29(v13, v7);
  uint64_t v33 = *v75;
  uint64_t v66 = v27;
  uint64_t v67 = (uint64_t (*)(char *, uint64_t))v29;
  if (v33 < 1)
  {
    uint64_t v38 = v65;
    uint64_t v39 = 0;
    uint64_t v36 = v64;
    goto LABEL_38;
  }
  uint64_t v62 = v28;
  uint64_t v34 = v65;
  uint64_t result = ForEachState.fetchViewsPerElement()();
  if (v35)
  {
    uint64_t v40 = (char *)v34 + *(void *)(*v34 + 176);
    uint64_t result = swift_beginAccess();
    uint64_t v41 = *(void *)v40;
    unint64_t v42 = *(void *)(*(void *)v40 + 16);
    uint64_t v36 = v64;
    if (!v42)
    {
      uint64_t v38 = v34;
      goto LABEL_37;
    }
    if (*(uint64_t *)((char *)v34 + *(void *)(*v34 + 184)) != v74)
    {
      uint64_t v38 = v34;
      goto LABEL_37;
    }
    uint64_t v61 = v40;
    uint64_t v39 = 0;
    uint64_t v43 = v41 + 32;
    unint64_t v44 = v42;
    do
    {
      unint64_t v45 = v44 >> 1;
      unint64_t v46 = v39 + (v44 >> 1);
      if (__OFADD__(v39, v44 >> 1))
      {
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      if (v46 >= v42) {
        goto LABEL_48;
      }
      v44 += ~v45;
      if (v33 >= *(void *)(v43 + 8 * v46)) {
        uint64_t v39 = v46 + 1;
      }
      else {
        unint64_t v44 = v45;
      }
    }
    while ((uint64_t)v44 > 0);
    uint64_t result = v32(v64, 1, v69);
    if (result == 1) {
      goto LABEL_57;
    }
    v70(v13, v36, v7);
    Collection.formIndex(_:offsetBy:)();
    uint64_t result = v67(v13, v7);
    unint64_t v47 = v39 - 1;
    if (v39 < 1)
    {
      uint64_t v38 = v34;
      goto LABEL_38;
    }
    if (v47 >= *(void *)(*(void *)v61 + 16)) {
      goto LABEL_51;
    }
    uint64_t v38 = v34;
    uint64_t v48 = *(void *)(*(void *)v61 + 8 * v47 + 32);
LABEL_34:
    *v75 -= v48;
    goto LABEL_38;
  }
  uint64_t v36 = v64;
  if (v74)
  {
    uint64_t v37 = (unsigned __int128)(result * (__int128)(v74 >> 1)) >> 64;
    result *= v74 >> 1;
    if (v37 != result >> 63)
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
  }
  if (v33 < result)
  {
    uint64_t v38 = v65;
LABEL_37:
    uint64_t v39 = 0;
LABEL_38:
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        unint64_t v55 = *(void (**)(char *, uint64_t))(v63 + 8);
        uint64_t v56 = AssociatedTypeWitness;
        v55((char *)v18, AssociatedTypeWitness);
        v55(v77, v56);
        uint64_t result = 1;
        *((unsigned char *)v38 + *(void *)(*v38 + 240)) = 1;
        return result;
      }
      uint64_t v54 = ForEachState.item(at:offset:)((char *)v18, v39);
      v79[0] = v74;
      if ((v71(v75, v79, v54) & 1) == 0) {
        break;
      }
      uint64_t result = v73(v36, 1, v69);
      if (result == 1) {
        goto LABEL_52;
      }
      v70(v13, v36, v7);
      dispatch thunk of Collection.formIndex(after:)();
      swift_release();
      v67(v13, v7);
      ++v39;
    }
    swift_release();
    uint64_t v57 = *(void (**)(char *, uint64_t))(v63 + 8);
    uint64_t v58 = AssociatedTypeWitness;
    v57((char *)v18, AssociatedTypeWitness);
    v57(v77, v58);
    return 0;
  }
  uint64_t v59 = result;
  unint64_t v49 = v33 / (unint64_t)result;
  if (result < 2) {
    unint64_t v49 = v33;
  }
  uint64_t v60 = v49;
  uint64_t result = v73(v64, 1, v69);
  if (result == 1) {
    goto LABEL_55;
  }
  int64_t v50 = v61;
  uint64_t v51 = v70;
  v70(v61, v36, v7);
  uint64_t v52 = dispatch thunk of Collection.count.getter();
  v29(v50, v7);
  int64_t v53 = v51;
  if (v52 >= v60) {
    uint64_t v39 = v60;
  }
  else {
    uint64_t v39 = v52;
  }
  uint64_t result = v73(v36, 1, v69);
  if (result != 1)
  {
    uint64_t v38 = v65;
    v53(v13, v36, v7);
    Collection.formIndex(_:offsetBy:)();
    uint64_t result = v67(v13, v7);
    uint64_t v48 = v59 * v39;
    if ((unsigned __int128)(v59 * (__int128)v39) >> 64 == (v59 * v39) >> 63)
    {
      uint64_t v36 = v64;
      goto LABEL_34;
    }
    goto LABEL_50;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t ForEachState.item(at:offset:)(void *a1, uint64_t a2)
{
  uint64_t v188 = a2;
  uint64_t v189 = a1;
  uint64_t v215 = *MEMORY[0x263EF8340];
  long long v182 = (void *)*v2;
  uint64_t v3 = v182;
  uint64_t v162 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v168 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162);
  uint64_t v165 = (char *)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unsigned __int8 v167 = (char *)&v149 - v6;
  uint64_t v7 = v3[12];
  uint64_t v164 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v8);
  char v174 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v163 = (char *)&v149 - v11;
  type metadata accessor for _ContiguousArrayStorage<ObservationTracking._AccessList>(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8D8F0]);
  uint64_t v159 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v160 = (uint64_t)&v149 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v173 = (uint64_t)&v149 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v161 = (uint64_t)&v149 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v172 = (uint64_t)&v149 - v19;
  uint64_t v20 = v3[13];
  uint64_t v21 = (void *)v3[10];
  uint64_t v166 = *(void *)(*(void *)(v20 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v176 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v177 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v158 = (char *)&v149 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v155 = (char *)&v149 - v25;
  uint64_t v26 = v3[11];
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v180 = *(void *)(v27 - 8);
  uint64_t v181 = (uint64_t *)v27;
  MEMORY[0x270FA5388](v27);
  uint64_t v179 = (char *)&v149 - v28;
  uint64_t v29 = *(v21 - 1);
  MEMORY[0x270FA5388](v30);
  unint64_t v32 = (char *)&v149 - v31;
  uint64_t v184 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v33);
  char v157 = (char *)&v149 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v171 = (uint64_t)&v149 - v36;
  MEMORY[0x270FA5388](v37);
  uint64_t v190 = (uint64_t)&v149 - v38;
  *((unsigned char *)v2 + v3[32]) = 1;
  uint64_t v39 = (uint64_t)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  uint64_t v40 = v3[14];
  uint64_t v186 = v21;
  uint64_t v187 = v26;
  id v205 = v21;
  uint64_t v206 = v26;
  uint64_t v191 = v7;
  uint64_t v207 = v7;
  *(void *)&long long v208 = v20;
  uint64_t v185 = v40;
  *((void *)&v208 + 1) = v40;
  uint64_t v41 = type metadata accessor for ForEach();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(unsigned int (**)(void, void, void))(v42 + 48);
  uint64_t v44 = v42 + 48;
  if (v43(v39, 1, v41) == 1)
  {
    __break(1u);
LABEL_49:
    __break(1u);
  }
  uint64_t v178 = v2;
  v203[0] = *(void *)(v39 + *(int *)(v41 + 64));
  uint64_t v175 = v41;
  uint64_t v169 = v44;
  char v170 = (uint64_t (*)(void, void, void))v43;
  if (v43(v39, 1, v41) == 1) {
    goto LABEL_49;
  }
  unint64_t v45 = v186;
  (*(void (**)(char *, uint64_t, uint64_t *))(v29 + 16))(v32, v39, v186);
  swift_retain();
  uint64_t v156 = v39;
  uint64_t v46 = v187;
  id v205 = v45;
  uint64_t v206 = v187;
  uint64_t v207 = v191;
  *(void *)&long long v208 = v20;
  uint64_t v47 = v185;
  *((void *)&v208 + 1) = v185;
  uint64_t v48 = type metadata accessor for ForEach.IDGenerator();
  uint64_t v183 = v20;
  uint64_t v49 = v190;
  ForEach.IDGenerator.makeID(data:index:offset:)(v188, v48, v190);
  int64_t v50 = *(void (**)(void, void))(v29 + 8);
  uint64_t v51 = v46;
  v50(v32, v45);
  swift_release();
  uint64_t v52 = v178;
  swift_beginAccess();
  type metadata accessor for Set();
  int64_t v53 = v179;
  Set.remove(_:)();
  swift_endAccess();
  (*(void (**)(char *, uint64_t *))(v180 + 8))(v53, v181);
  uint64_t v54 = (uint64_t *)((char *)v52 + *(void *)(*v52 + 192));
  swift_beginAccess();
  uint64_t v55 = *v54;
  uint64_t v56 = (char *)v182[15];
  id v205 = v45;
  uint64_t v206 = v51;
  uint64_t v207 = v191;
  *(void *)&long long v208 = v183;
  *((void *)&v208 + 1) = v47;
  uint64_t v209 = v56;
  uint64_t v57 = type metadata accessor for ForEachState.Item();
  MEMORY[0x24C522390](&v194, v49, v55, v51, v57, v47);
  uint64_t v58 = (_DWORD *)v194;
  if ((void)v194)
  {
    swift_endAccess();
    uint64_t v59 = *(void **)v58;
    uint64_t v60 = v52;
    if (*((unsigned char *)v58 + *(void *)(*(void *)v58 + 240)) == 1)
    {
      ForEachState.uneraseItem(_:)(v58);
      uint64_t v59 = *(void **)v58;
    }
    uint64_t v61 = v59[27];
    uint64_t v62 = *(void *)(*v52 + 232);
    if (*(_DWORD *)((char *)v58 + v61) != *(_DWORD *)((char *)v52 + v62))
    {
      (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v190, v51);
      uint64_t v98 = (char *)v58 + *(void *)(*(void *)v58 + 192);
      swift_beginAccess();
      (*(void (**)(char *, void *, uint64_t))(v176 + 24))(v98, v189, v177);
      swift_endAccess();
      *(void *)((char *)v58 + *(void *)(*(void *)v58 + 200)) = v188;
      *(void *)((char *)v58 + *(void *)(*(void *)v58 + 208)) = *(uint64_t *)((char *)v60 + *(void *)(*v60 + 224));
      *(_DWORD *)((char *)v58 + v61) = *(_DWORD *)((char *)v60 + v62);
      goto LABEL_16;
    }
    uint64_t v63 = v59[31];
    if (*((unsigned char *)v58 + v63)) {
      goto LABEL_9;
    }
    uint64_t v64 = (char *)v58 + v59[24];
    swift_beginAccess();
    uint64_t v66 = v176;
    uint64_t v65 = v177;
    uint64_t v67 = v155;
    (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v155, v64, v177);
    swift_getAssociatedConformanceWitness();
    LOBYTE(v64) = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v65);
    if (v64)
    {
LABEL_9:
      (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v190, v51);
LABEL_16:
      *((unsigned char *)v58 + *(void *)(*(void *)v58 + 232)) = 8;
      return (uint64_t)v58;
    }
    if (one-time initialization token for v3 != -1) {
      swift_once();
    }
    unsigned int v142 = static Semantics.v3;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0) {
        goto LABEL_9;
      }
    }
    else if (static Semantics.forced < v142)
    {
      goto LABEL_9;
    }
    *((unsigned char *)v58 + v63) = 1;
    *(void *)&long long v194 = 0;
    *((void *)&v194 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(92);
    v143._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
    v144._countAndFlagsBits = 0x444920656874203ALL;
    v144._object = (void *)0xE900000000000020;
    String.append(_:)(v144);
    uint64_t v145 = v190;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v146._object = (void *)0x8000000246225AD0;
    v146._countAndFlagsBits = 0xD00000000000004FLL;
    String.append(_:)(v146);
    specialized static Log.externalWarning(_:)(v194, *((unint64_t *)&v194 + 1));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v145, v51);
    goto LABEL_16;
  }
  uint64_t v151 = v57;
  uint64_t v152 = v54;
  double v150 = v56;
  swift_endAccess();
  id v68 = (id)AGSubgraphGetGraph();
  if (*((unsigned char *)v52 + 124) == 1)
  {
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v69 = v68;
  uint64_t v70 = (void *)AGSubgraphCreate2();

  long long v182 = v70;
  AGSubgraphAddChild();
  uint64_t v71 = (uint64_t *)v52[2];
  int v72 = *((_DWORD *)v52 + 6);
  uint64_t v73 = v52[4];
  uint64_t v155 = (char *)v52[7];
  uint64_t v180 = v52[9];
  uint64_t v181 = v71;
  int v74 = *((_DWORD *)v52 + 20);
  uint64_t v179 = (char *)v52[11];
  char v75 = *((unsigned char *)v52 + 96);
  id v205 = v71;
  LODWORD(v206) = v72;
  long long v208 = *(_OWORD *)(v52 + 5);
  uint64_t v209 = v155;
  uint64_t v211 = v180;
  int v212 = v74;
  uint64_t v213 = v179;
  char v214 = v75;
  swift_beginAccess();
  int v76 = *(_DWORD *)(v73 + 16);
  uint64_t v77 = *(void *)(v73 + 24);
  long long v78 = *(_OWORD *)(v73 + 32);
  long long v153 = *(_OWORD *)(v73 + 48);
  long long v154 = v78;
  uint64_t v79 = *(void *)(v73 + 64);
  uint64_t v80 = *(void *)(v73 + 72);
  LOBYTE(v69) = *(unsigned char *)(v73 + 80);
  char v81 = *(unsigned char *)(v73 + 81);
  uint64_t v82 = *(void *)(v73 + 88);
  type metadata accessor for _ViewListOutputs?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v83 = swift_allocObject();
  *(_DWORD *)(v83 + 16) = v76;
  *(void *)(v83 + 24) = v77;
  long long v84 = v153;
  *(_OWORD *)(v83 + 32) = v154;
  *(_OWORD *)(v83 + 48) = v84;
  *(void *)(v83 + 64) = v79;
  *(void *)(v83 + 72) = v80;
  *(unsigned char *)(v83 + 80) = (_BYTE)v69;
  *(unsigned char *)(v83 + 81) = v81;
  *(void *)(v83 + 88) = v82;
  uint64_t v207 = v83;
  uint64_t v210 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v85 = swift_retain();
  if ((v180 & 1) == 0) {
    uint64_t v211 = v180 | 1;
  }
  uint64_t v181 = &v149;
  int v192 = 0;
  char v193 = 1;
  double v86 = MEMORY[0x270FA5388](v85);
  id v147 = v52;
  id v148 = v189;
  uint64_t v87 = v168;
  uint64_t v88 = v173;
  uint64_t v89 = v162;
  uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v168 + 56))(v173, 1, 1, v162, v86);
  MEMORY[0x270FA5388](v90);
  uint64_t v91 = v191;
  *(&v149 - 4) = v191;
  *(&v149 - 3) = (uint64_t)partial apply for closure #1 in ForEachState.item(at:offset:);
  id v147 = &v149 - 4;
  uint64_t v92 = type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for Error);
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v88, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v149 - 6), v159, v92, v91, MEMORY[0x263F8E4E0], (uint64_t)v203);
  uint64_t v93 = v175;
  uint64_t v94 = v88;
  uint64_t v95 = v160;
  outlined init with copy of ObservationTracking._AccessList?(v94, v160);
  int v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v95, 1, v89);
  uint64_t v97 = v167;
  if (v96 == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v95);
  }
  else
  {
    uint64_t v99 = *(void (**)(void, void, void))(v87 + 32);
    v99(v167, v95, v89);
    if (one-time initialization token for lastestAccessLists != -1) {
      swift_once();
    }
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v165, v97, v89);
    swift_beginAccess();
    unint64_t v100 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v100;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v100 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v100 + 2) + 1, 1, (unint64_t)v100);
      static ObservationRegistrar.lastestAccessLists = v100;
    }
    unint64_t v103 = *((void *)v100 + 2);
    unint64_t v102 = *((void *)v100 + 3);
    if (v103 >= v102 >> 1)
    {
      unint64_t v100 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1, (unint64_t)v100);
      static ObservationRegistrar.lastestAccessLists = v100;
    }
    *((void *)v100 + 2) = v103 + 1;
    uint64_t v104 = v168;
    v99(&v100[((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80))+ *(void *)(v168 + 72) * v103], v165, v89);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v167, v89);
    uint64_t v91 = v191;
  }
  uint64_t v105 = (uint64_t)v163;
  uint64_t v106 = v164;
  (*(void (**)(char *, char *, uint64_t))(v164 + 32))(v163, v174, v91);
  uint64_t v107 = v161;
  outlined init with take of ObservationTracking._AccessList?(v173, v161);
  uint64_t v108 = v172;
  outlined init with take of ObservationTracking._AccessList?(v107, v172);
  AGGraphClearUpdate();
  id v109 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #2 in ForEachState.item(at:offset:)((uint64_t)&v205, v190, (uint64_t)v52, v105, v108, &v192, (uint64_t)v203);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v110 = *(void (**)(void, void))(v106 + 8);
  uint64_t v51 = v106 + 8;
  v110(v105, v91);
  uint64_t v111 = v156;
  uint64_t v112 = v170(v156, 1, v93);
  if (v112 == 1) {
    goto LABEL_51;
  }
  uint64_t v200 = *(void *)(v111 + *(int *)(v93 + 68));
  MEMORY[0x270FA5388](v112);
  id v113 = v189;
  id v147 = v52;
  id v148 = v189;
  swift_getAssociatedTypeWitness();
  uint64_t v114 = MEMORY[0x263F8D6C8];
  type metadata accessor for KeyPath();
  type metadata accessor for Optional();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in ForEachState.item(at:offset:), (uint64_t)(&v149 - 4), MEMORY[0x263F8E628], v114, v115, (uint64_t)&v201);
  swift_release();
  uint64_t v116 = v201;
  int v117 = v202;
  uint64_t v51 = v184 + 16;
  uint64_t v118 = *(void **)(v184 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v118)(v171, v190, v187);
  outlined init with copy of _ViewListOutputs.Views((uint64_t)v203, (uint64_t)&v194);
  uint64_t v119 = (uint64_t)v158;
  id v120 = v113;
  uint64_t v121 = v175;
  (*(void (**)(char *, id, uint64_t))(v176 + 16))(v158, v120, v177);
  uint64_t v122 = *v52;
  if (v170(v111, 1, v121) != 1)
  {
    BOOL v123 = v117 == 0;
    uint64_t v124 = *(void *)(v122 + 224);
    int v125 = *(_DWORD *)((char *)v52 + *(void *)(v122 + 232));
    uint64_t v126 = *(uint64_t *)((char *)v52 + v124);
    if (!v123) {
      uint64_t v116 = v191;
    }
    char v127 = *(void *)(v111 + *(int *)(v121 + 64)) == 0;
    swift_retain();
    uint64_t v189 = v182;
    uint64_t v58 = (_DWORD *)specialized ForEachState.Item.__allocating_init(id:reuseID:views:subgraph:index:offset:contentID:seed:state:isConstant:)(v171, v116, &v194, (uint64_t)v189, v119, v188, v126, v125, v52, v127);
    swift_release();
    uint64_t v128 = v157;
    uint64_t v129 = v190;
    uint64_t v130 = v187;
    long long v182 = v118;
    ((void (*)(char *, uint64_t, uint64_t))v118)(v157, v190, v187);
    uint64_t v199 = v58;
    swift_beginAccess();
    uint64_t v131 = v185;
    type metadata accessor for Dictionary();
    swift_retain();
    Dictionary.subscript.setter();
    swift_endAccess();
    if ((v193 & 1) == 0)
    {
      *(void *)&long long v194 = v186;
      *((void *)&v194 + 1) = v130;
      uint64_t v195 = v191;
      uint64_t v196 = v183;
      uint64_t v197 = v131;
      uint64_t v198 = v150;
      uint64_t v132 = type metadata accessor for ForEachState.ItemList();
      MEMORY[0x270FA5388](v132);
      *(&v149 - 4) = v133;
      *(&v149 - 3) = (uint64_t)partial apply for closure #4 in ForEachState.item(at:offset:);
      id v147 = (uint64_t *)v58;
      AGGraphMutateAttribute();
    }
    uint64_t v134 = *v52;
    if (*(uint64_t *)((char *)v52 + *(void *)(*v52 + 216)) <= v188)
    {
      ((void (*)(char *, char *, uint64_t))v182)(v128, (char *)v58 + *(void *)(*(void *)v58 + 160), v130);
      LOBYTE(v199) = 0;
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      swift_endAccess();
      uint64_t v134 = *v52;
    }
    uint64_t v135 = (char *)v52 + *(void *)(v134 + 168);
    if (v135[9])
    {
      if (v204)
      {
        *(void *)&long long v194 = v205;
        *((void *)&v194 + 1) = v211;
        LODWORD(v195) = HIDWORD(v208);
        uint64_t v196 = MEMORY[0x263F8EE78];
        uint64_t v136 = (uint64_t (*)(void))*((void *)v150 + 5);
        swift_retain();
        uint64_t v137 = v136(&v194);
        char v139 = v138;
        swift_bridgeObjectRelease();
        swift_release();

        outlined destroy of _ViewListOutputs((uint64_t)v203);
        (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v190, v130);
        outlined destroy of ObservationTracking._AccessList?(v172);
        *(void *)uint64_t v135 = v137;
        v135[8] = v139 & 1;
        v135[9] = 0;
      }
      else
      {
        uint64_t v140 = v203[7];

        outlined destroy of _ViewListOutputs((uint64_t)v203);
        (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v129, v130);
        outlined destroy of ObservationTracking._AccessList?(v172);
        *(void *)uint64_t v135 = v140;
        *((_WORD *)v135 + 4) = 0;
      }
    }
    else
    {

      outlined destroy of _ViewListOutputs((uint64_t)v203);
      (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v129, v130);
      outlined destroy of ObservationTracking._AccessList?(v172);
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v58;
  }
LABEL_52:
  __break(1u);
  uint64_t result = outlined destroy of ObservationTracking._AccessList?(v51);
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for ForEach(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t type metadata accessor for ForEach()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ForEach.IDGenerator()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ForEachState.Item()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for _ContiguousArrayStorage<ObservationTracking._AccessList>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for ObservationTracking._AccessList();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t ForEach.IDGenerator.makeID(data:index:offset:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v13 = a1;
  uint64_t v14 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  v7.n128_f64[0] = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v9 = (char *)&v13 - v8;
  if (*v3)
  {
    swift_retain();
    uint64_t v10 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    (*(void (**)(char *))(v6 + 16))(v9);
    v10(v15, 0);
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  }
  else
  {
    uint64_t result = v14;
    v15[0] = v13;
    uint64_t v12 = *(void *)(*(void *)(a2 + 24) - 8);
    if (*(void *)(v12 + 64) == 8) {
      return (*(uint64_t (**)(uint64_t, void *, __n128))(v12 + 16))(v14, v15, v7);
    }
    else {
      __break(1u);
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in ForEachState.applyNodes(from:style:list:transform:to:)(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in ForEachState.applyNodes(from:style:list:transform:to:)(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(uint64_t (**)(void *, uint64_t **, unint64_t *, uint64_t))(v3 + 32), *(void *)(v3 + 40));
}

uint64_t destroy for _VariadicView_Children(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_bridgeObjectRelease();
}

uint64_t ForEachState.fetchViewsPerElement()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(*v0 + 104);
  uint64_t v5 = *(void *)(*v0 + 80);
  uint64_t v29 = *(void *)(*(void *)(v4 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v26 = (char *)&v22 - v7;
  uint64_t v8 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v9);
  unsigned int v11 = (char *)&v22 - v10;
  uint64_t v12 = (char *)v1 + *(void *)(v2 + 168);
  if (v12[9] != 1) {
    goto LABEL_6;
  }
  uint64_t v13 = (uint64_t)v1 + *(void *)(v3 + 160);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v3 + 112);
  uint64_t v30 = v5;
  long long v31 = *(_OWORD *)(v3 + 88);
  uint64_t v32 = v4;
  uint64_t v33 = v14;
  uint64_t v15 = type metadata accessor for ForEach();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  uint64_t v24 = v16 + 48;
  uint64_t v25 = v17;
  uint64_t result = v17(v13, 1, v15);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v23(v11, v13, v5);
  char v19 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v5);
  if (v19) {
    goto LABEL_6;
  }
  uint64_t result = v25(v13, 1, v15);
  if (result == 1)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v23(v11, v13, v5);
  uint64_t v21 = v26;
  dispatch thunk of Collection.startIndex.getter();
  v20(v11, v5);
  ForEachState.item(at:offset:)(v21, 0);
  swift_release();
  (*(void (**)(void *, uint64_t))(v27 + 8))(v21, v28);
LABEL_6:
  if (v12[9]) {
    return 0;
  }
  else {
    return *(void *)v12;
  }
}

uint64_t getEnumTagSinglePayload for _VariadicView_Children(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void type metadata accessor for _ViewListOutputs?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t protocol witness for Collection.endIndex.getter in conformance _VariadicView_Children@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v3 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  uint64_t v6 = ViewList.count.getter(v4, v5);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v3);
  *a1 = v6;
  return result;
}

uint64_t partial apply for closure #1 in ForEachState.viewIDs.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in ForEachState.viewIDs.getter(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance _VariadicView_Children(uint64_t *a1)
{
  uint64_t v3 = *a1;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v4 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v5);
  uint64_t v7 = ViewList.count.getter(v5, v6);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v4);
  if (v3 < 0 || v3 >= v7) {
    __break(1u);
  }
  else {
    *a1 = v3 + 1;
  }
  return result;
}

uint64_t closure #1 in _VariadicView_Children.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _VariadicView_Children.Element(a1, a2);
}

uint64_t partial apply for closure #1 in ForEachState.traitKeys.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in ForEachState.traitKeys.getter(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t closure #1 in ForEachState.traitKeys.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  outlined init with copy of _ViewListOutputs.Views(a3 + *(void *)(*(void *)a3 + 176), (uint64_t)&v17);
  if ((v18 & 1) == 0)
  {
    *(void *)a4 = MEMORY[0x263F8EE88];
    *(unsigned char *)(a4 + 8) = 0;
    swift_bridgeObjectRelease();
    outlined destroy of _ViewListOutputs.Views((uint64_t)&v17);
    return 0;
  }
  uint64_t result = swift_release();
  if (*(unsigned char *)(a5 + 124) != 1)
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    Inputuint64_t Value = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v14);
    uint64_t v9 = v15;
    uint64_t v10 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v12, v9, v10);
    char v11 = v13;
    *(void *)a4 = v12;
    *(unsigned char *)(a4 + 8) = v11;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Subview(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t closure #1 in SubviewsCollectionSlice.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of Subview(a1, a2);
}

uint64_t partial apply for closure #1 in ForEachState.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in ForEachState.firstOffset<A>(forID:style:)(a1, a2, a3, *(unsigned char *)(v3 + 32), *(void *)(v3 + 40), *(char **)(v3 + 48), *(uint64_t **)(v3 + 56), *(uint64_t **)(v3 + 64), *(char **)(v3 + 16), *(char **)(v3 + 24)) & 1;
}

uint64_t closure #1 in ForEachState.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4, uint64_t a5, char *a6, uint64_t *a7, uint64_t *a8, char *a9, char *a10)
{
  uint64_t v131 = a8;
  uint64_t v137 = a7;
  uint64_t v138 = a2;
  uint64_t v134 = a6;
  uint64_t v13 = *a3;
  uint64_t v14 = *a3;
  uint64_t v140 = *((void *)a9 - 1);
  uint64_t v135 = a10;
  MEMORY[0x270FA5388](a1);
  uint64_t v130 = (char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  MEMORY[0x270FA5388](v18);
  char v19 = *(char **)(v13 + 120);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v124 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  MEMORY[0x270FA5388](v24);
  MEMORY[0x270FA5388](v25);
  MEMORY[0x270FA5388](v26);
  MEMORY[0x270FA5388](v27);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v124 - v29;
  double v43 = MEMORY[0x270FA5388](v31);
  uint64_t v44 = (char *)&v124 - v39;
  unint64_t v133 = *(void *)v138;
  uint64_t v148 = 0;
  uint64_t v132 = a5;
  uint64_t v139 = v45;
  uint64_t v136 = v16;
  if (a4 >= 2u)
  {
    uint64_t v63 = v14;
    uint64_t v64 = v140;
    uint64_t v62 = a9;
    uint64_t v65 = a3;
    if (a4 != 2) {
      goto LABEL_20;
    }
    uint64_t v124 = v34;
    uint64_t v129 = v40;
    uint64_t v66 = v41;
    uint64_t v67 = v42;
    uint64_t v68 = (uint64_t)a3 + *(void *)(v63 + 160);
    uint64_t v69 = *(void (**)(char *, uint64_t, char *, double))(v37 + 16);
    uint64_t v138 = v32;
    uint64_t v70 = v35;
    v69(v22, v68, v19, v43);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for HasCustomIDRepresentation);
    swift_dynamicCast();
    uint64_t v71 = v144;
    uint64_t v72 = v145;
    __swift_project_boxed_opaque_existential_1(v143, v144);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v72 + 8))(&v146, v71, v72);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
    uint64_t v73 = v64;
    (*(void (**)(uint64_t *, uint64_t, char *))(v64 + 16))(v70, v132, a9);
    int v74 = *(void (**)(uint64_t *, void, uint64_t, char *))(v64 + 56);
    v74(v70, 0, 1, a9);
    outlined init with copy of AnyHashable((uint64_t)&v146, (uint64_t)v143);
    int v75 = swift_dynamicCast();
    v74(v67, v75 ^ 1u, 1, a9);
    uint64_t v76 = v139;
    uint64_t v77 = v66;
    long long v78 = &v66[*(int *)(v138 + 48)];
    uint64_t v79 = *(void (**)(char *, uint64_t *, uint64_t))(v139 + 16);
    uint64_t v126 = v70;
    uint64_t v80 = v70;
    uint64_t v81 = v136;
    v79(v77, v80, v136);
    int v125 = v78;
    char v127 = v67;
    uint64_t v82 = v67;
    uint64_t v83 = v81;
    v79(v78, v82, v81);
    long long v84 = *(unsigned int (**)(char *, uint64_t, char *))(v73 + 48);
    uint64_t v128 = v77;
    if (v84(v77, 1, a9) == 1)
    {
      uint64_t v85 = v128;
      double v86 = *(void (**)(uint64_t *, uint64_t))(v76 + 8);
      v86(v126, v83);
      outlined destroy of AnyHashable((uint64_t)&v146);
      if (v84(v125, 1, a9) == 1)
      {
        v86((uint64_t *)v85, v83);
        v86(v127, v83);
        goto LABEL_24;
      }
      uint64_t v92 = v83;
      uint64_t v93 = v85;
    }
    else
    {
      uint64_t v90 = v124;
      v79(v124, (uint64_t *)v128, v83);
      uint64_t v91 = v125;
      if (v84(v125, 1, a9) != 1)
      {
        uint64_t v99 = v140;
        unint64_t v100 = v130;
        (*(void (**)(char *, char *, char *))(v140 + 32))(v130, v91, a9);
        char v101 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v102 = *(void (**)(char *, char *))(v99 + 8);
        v102(v100, a9);
        unint64_t v103 = *(void (**)(uint64_t *, uint64_t))(v76 + 8);
        v103(v126, v83);
        outlined destroy of AnyHashable((uint64_t)&v146);
        v102(v90, a9);
        v103((uint64_t *)v128, v83);
        v103(v127, v83);
        if (v101) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      double v86 = *(void (**)(uint64_t *, uint64_t))(v76 + 8);
      uint64_t v92 = v83;
      v86(v126, v83);
      outlined destroy of AnyHashable((uint64_t)&v146);
      (*(void (**)(char *, char *))(v140 + 8))(v90, a9);
      uint64_t v93 = v128;
    }
    (*(void (**)(char *, uint64_t))(v129 + 8))(v93, v138);
    v86(v127, v92);
    goto LABEL_20;
  }
  int v125 = v36;
  uint64_t v129 = v40;
  uint64_t v128 = v19;
  uint64_t v46 = v140;
  uint64_t v47 = *(void (**)(char *, uint64_t, char *, double))(v140 + 16);
  uint64_t v138 = v32;
  uint64_t v48 = v33;
  uint64_t v49 = a5;
  uint64_t v50 = v37;
  uint64_t v51 = v38;
  v47((char *)&v124 - v39, v49, a9, v43);
  uint64_t v52 = *(void (**)(char *, void, uint64_t, char *))(v46 + 56);
  v52(v44, 0, 1, a9);
  uint64_t v53 = *(void *)(*a3 + 160);
  uint64_t v126 = a3;
  (*(void (**)(uint64_t, uint64_t, char *))(v50 + 16))(v51, (uint64_t)a3 + v53, v128);
  int v54 = swift_dynamicCast();
  v52(v30, v54 ^ 1u, 1, a9);
  uint64_t v55 = (uint64_t *)&v48[*(int *)(v138 + 48)];
  uint64_t v56 = *(void (**)(void))(v139 + 16);
  uint64_t v57 = v44;
  uint64_t v58 = v136;
  ((void (*)(char *, char *, uint64_t))v56)(v48, v44, v136);
  char v127 = v55;
  uint64_t v128 = v30;
  ((void (*)(uint64_t *, char *, uint64_t))v56)(v55, v30, v58);
  uint64_t v59 = *(unsigned int (**)(uint64_t, uint64_t, char *))(v46 + 48);
  uint64_t v60 = v48;
  if (v59((uint64_t)v48, 1, a9) == 1)
  {
    uint64_t v61 = *(void (**)(char *, uint64_t))(v139 + 8);
    v61(v57, v58);
    if (v59((uint64_t)v127, 1, a9) == 1)
    {
      v61(v48, v58);
      v61(v128, v58);
      uint64_t v62 = a9;
      goto LABEL_24;
    }
    uint64_t v62 = a9;
    uint64_t v65 = v126;
    goto LABEL_12;
  }
  uint64_t v124 = v57;
  uint64_t v87 = v139;
  uint64_t v88 = v125;
  v56();
  uint64_t v89 = v127;
  if (v59((uint64_t)v127, 1, a9) == 1)
  {
    uint64_t v61 = *(void (**)(char *, uint64_t))(v87 + 8);
    v61(v124, v58);
    (*(void (**)(char *, char *))(v140 + 8))(v88, a9);
    uint64_t v62 = a9;
    uint64_t v65 = v126;
LABEL_12:
    (*(void (**)(char *, uint64_t))(v129 + 8))(v60, v138);
    v61(v128, v58);
    goto LABEL_20;
  }
  uint64_t v94 = v140;
  uint64_t v95 = v130;
  (*(void (**)(char *, uint64_t *, char *))(v140 + 32))(v130, v89, a9);
  char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v97 = *(void (**)(char *, char *))(v94 + 8);
  v97(v95, a9);
  uint64_t v98 = *(void (**)(char *, uint64_t))(v87 + 8);
  v98(v124, v58);
  v97(v88, a9);
  v98(v60, v58);
  v98(v128, v58);
  uint64_t v62 = a9;
  uint64_t v65 = v126;
  if (v96) {
    goto LABEL_24;
  }
LABEL_20:
  outlined init with copy of _ViewListOutputs.Views((uint64_t)v65 + *(void *)(*v65 + 176), (uint64_t)&v146);
  if ((v147 & 1) == 0)
  {
LABEL_32:
    outlined destroy of _ViewListOutputs.Views((uint64_t)&v146);
LABEL_34:
    ++*v137;
    return 1;
  }
  uint64_t result = swift_release();
  if (v134[124] != 1)
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    Inputuint64_t Value = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v143);
    uint64_t v106 = v144;
    uint64_t v107 = v145;
    __swift_project_boxed_opaque_existential_1(v143, v144);
    unint64_t v142 = v133;
    uint64_t v108 = (*(uint64_t (**)(uint64_t, unint64_t *, char *, char *, uint64_t, uint64_t))(v107 + 64))(v132, &v142, v62, v135, v106, v107);
    if (v109)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
      goto LABEL_34;
    }
    uint64_t v110 = v108;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
    uint64_t v148 = v110;
LABEL_24:
    uint64_t v111 = (char *)v137;
    if (!*v137)
    {
LABEL_41:
      uint64_t result = 0;
      BOOL v123 = v131;
      *uint64_t v131 = v148;
      *((unsigned char *)v123 + 8) = 0;
      return result;
    }
    uint64_t v112 = v134;
    uint64_t result = ForEachState.fetchViewsPerElement()();
    if (v113)
    {
      uint64_t v118 = &v112[*(void *)(*(void *)v112 + 176)];
      uint64_t result = swift_beginAccess();
      unint64_t v119 = *(void *)(*(void *)v118 + 16);
      if ((int64_t)v119 < *(void *)v111 || *(void *)&v112[*(void *)(*(void *)v112 + 184)] != v133)
      {
        unint64_t v142 = 0;
        v143[0] = 0;
        unint64_t v141 = v133;
        MEMORY[0x270FA5388](result);
        uint64_t v122 = v135;
        *(&v124 - 6) = v62;
        *(&v124 - 5) = v122;
        *(&v124 - 4) = (char *)&v142;
        *(&v124 - 3) = v111;
        *(&v124 - 2) = (char *)&v148;
        *(&v124 - 1) = v112;
        ForEachState.forEachItem(from:style:do:)(v143, &v141, (uint64_t (*)(uint64_t *, void *, uint64_t))partial apply for closure #1 in closure #1 in ForEachState.firstOffset<A>(forID:style:), (uint64_t)(&v124 - 8));
        goto LABEL_41;
      }
      unint64_t v120 = *(void *)v111 - 1;
      if (v120 < v119)
      {
        uint64_t v121 = *(void *)(*(void *)v118 + 8 * v120 + 32);
        BOOL v116 = __OFADD__(v148, v121);
        uint64_t v117 = v148 + v121;
        if (!v116)
        {
LABEL_39:
          uint64_t v148 = v117;
          goto LABEL_41;
        }
        goto LABEL_45;
      }
    }
    else
    {
      if ((v133 & 1) == 0
        || (uint64_t v114 = (unsigned __int128)(result * (__int128)(v133 >> 1)) >> 64, result *= v133 >> 1, v114 == result >> 63))
      {
        uint64_t v115 = *(void *)v111 * result;
        if ((unsigned __int128)(*(uint64_t *)v111 * (__int128)result) >> 64 == v115 >> 63)
        {
          BOOL v116 = __OFADD__(v148, v115);
          uint64_t v117 = v148 + v115;
          if (!v116) {
            goto LABEL_39;
          }
          __break(1u);
          goto LABEL_32;
        }
        __break(1u);
      }
      __break(1u);
    }
    __break(1u);
LABEL_45:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Int) -> (@out C)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 32))(*a1);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance IDView<A, B>(long long *a1, uint64_t a2, uint64_t a3)
{
  return static IDView._viewListCount(inputs:)(a1, *(void *)(a2 + 16), a3, *(void *)(a2 + 32));
}

uint64_t static IDView._viewListCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *((void *)a1 + 3);
  long long v7 = *a1;
  int v8 = v4;
  uint64_t v9 = v5;
  return (*(uint64_t (**)(long long *))(a4 + 40))(&v7);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LinearGradient()
{
  return 1;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.TextScaleAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.TextScaleAttribute;
}

__n128 __swift_memcpy32_4(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t static HorizontalAlignment.listRowSeparatorTrailing.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for listRowSeparatorTrailing, (uint64_t)&static HorizontalAlignment.listRowSeparatorTrailing);
}

uint64_t StateObject.wrappedValue.getter(void (*a1)(uint64_t), uint64_t a2, char a3)
{
  StateObject.objectValue.getter(a1, a2, a3 & 1);
  return v3;
}

uint64_t StateObject.objectValue.getter(void (*a1)(uint64_t), uint64_t a2, char a3)
{
  if (a3)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    swift_retain();
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    uint64_t v5 = os_log(_:dso:log:_:_:)();
    a1(v5);
    outlined consume of StateObject<A>.Storage<A>((uint64_t)a1, a2, 0);
    return ObservedObject.init(wrappedValue:)();
  }
  return (uint64_t)a1;
}

uint64_t static Log.navigation.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for navigation, (uint64_t)static Log.navigation, a1);
}

ValueMetadata *type metadata accessor for Axis()
{
  return &type metadata for Axis;
}

ValueMetadata *type metadata accessor for ViewTraitCollection()
{
  return &type metadata for ViewTraitCollection;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AspectRatioLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

void *initializeWithCopy for ShapeStyledDisplayList(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  int v4 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v5 = *v6;
  long long v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *long long v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  char v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *char v11 = *v12;
  uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  uint64_t v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v15 = *v16;
  int v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v17 = *v18;
  char v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *char v19 = *v20;
  unint64_t v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = ((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  uint64_t v26 = v24 + 16;
  uint64_t v27 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v28 = (v27 + 5 + v21) & ~v27;
  uint64_t v29 = (v27 + 5 + v22) & ~v27;
  swift_retain();
  v25(v28, v29, AssociatedTypeWitness);
  *(_WORD *)((*(void *)(v26 + 48) + 1 + v28) & 0xFFFFFFFFFFFFFFFELL) = *(_WORD *)((*(void *)(v26 + 48) + 1 + v29) & 0xFFFFFFFFFFFFFFFELL);
  return a1;
}

BOOL static Font.Weight.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double static CGSize.invalidValue.getter()
{
  if (one-time initialization token for invalidValue != -1) {
    swift_once();
  }
  return *(double *)&static CGSize.invalidValue;
}

uint64_t View.disabled(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.disabled(_:)(a1, a2, a3, (uint64_t)&unk_2461BAA90, (uint64_t)&unk_26FA88508, (uint64_t)partial apply for closure #1 in View.disabled(_:));
}

double static ScrollGeometry.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

unsigned char *storeEnumTagSinglePayload for Font.Design(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *double result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.imageScale : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ImageScaleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ImageScaleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ImageScaleKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ImageScaleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ImageScaleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ImageScaleKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void static AccessibilityTraits.isStaticText.getter(void *a1@<X8>)
{
  *a1 = 256;
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t base witness table accessor for _AttributeBody in PreferenceCombiner<A>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for HorizontalEdge()
{
  return &type metadata for HorizontalEdge;
}

uint64_t getEnumTagSinglePayload for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245DF1680);
}

uint64_t Text.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v5);
  uint64_t v7 = String.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  return v7;
}

uint64_t assignWithCopy for CachedEnvironment.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

double ViewSizeCache.get(_:makeValue:)(uint64_t a1, double (*a2)(uint64_t))
{
  double v3 = *(double *)a1;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  __int16 v6 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v8 = *(void *)(v2 + 24);
  uint64_t v9 = *(void *)(v2 + 64);
  double v10 = *(double *)(v2 + 144);
  if ((*(unsigned char *)(v2 + 48) & 1) == 0)
  {
    if (v4)
    {
      if ((v7 & 1) == 0)
      {
        if (*(unsigned char *)(v2 + 64)) {
          char v11 = *(unsigned char *)(v2 + 104);
        }
        else {
          char v11 = 1;
        }
        if (v11) {
          goto LABEL_18;
        }
        goto LABEL_36;
      }
    }
    else if ((v7 & 1) != 0 || v3 != *(double *)v2)
    {
      goto LABEL_17;
    }
    if (v6)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_17;
      }
LABEL_16:
      double v10 = *(double *)(v2 + 32);
      goto LABEL_44;
    }
    if ((v8 & 1) == 0 && v5 == *(double *)(v2 + 16)) {
      goto LABEL_16;
    }
  }
LABEL_17:
  if (*(unsigned char *)(v2 + 104)) {
    goto LABEL_18;
  }
  if (v4)
  {
    if ((*(unsigned char *)(v2 + 64) & 1) == 0) {
      goto LABEL_18;
    }
  }
  else if ((*(unsigned char *)(v2 + 64) & 1) != 0 || v3 != *(double *)(v2 + 56))
  {
    goto LABEL_18;
  }
LABEL_36:
  if (v6)
  {
    if (*(unsigned char *)(v2 + 80))
    {
LABEL_41:
      double v10 = *(double *)(v2 + 88);
      goto LABEL_44;
    }
  }
  else if ((*(unsigned char *)(v2 + 80) & 1) == 0 && v5 == *(double *)(v2 + 72))
  {
    goto LABEL_41;
  }
LABEL_18:
  if ((*(unsigned char *)(v2 + 160) & 1) == 0)
  {
    if (v4)
    {
      if ((*(unsigned char *)(v2 + 120) & 1) == 0) {
        goto LABEL_19;
      }
    }
    else if ((*(unsigned char *)(v2 + 120) & 1) != 0 || *(double *)(v2 + 112) != v3)
    {
      goto LABEL_19;
    }
    if (v6)
    {
      if ((*(unsigned char *)(v2 + 136) & 1) == 0) {
        goto LABEL_19;
      }
    }
    else if ((*(unsigned char *)(v2 + 136) & 1) != 0 || *(double *)(v2 + 128) != v5)
    {
      goto LABEL_19;
    }
LABEL_44:
    swift_beginAccess();
    uint64_t v18 = (double *)static LayoutTrace.recorder;
    if (static LayoutTrace.recorder)
    {
      swift_beginAccess();
      v18[4] = v3;
      *((void *)v18 + 5) = v4;
      v18[6] = v5;
      *((_WORD *)v18 + 28) = v6 | 0x100;
    }
    return v10;
  }
LABEL_19:
  uint64_t v19 = *(void *)(v2 + 80);
  char v20 = *(unsigned char *)(v2 + 104);
  uint64_t v21 = *(void *)(v2 + 72);
  uint64_t v22 = *(void *)(v2 + 88);
  uint64_t v12 = *(void *)(v2 + 56);
  uint64_t v23 = *(void *)(v2 + 96);
  double v24 = *(double *)v2;
  char v27 = *(unsigned char *)(v2 + 48);
  uint64_t v28 = *(void *)(v2 + 24);
  uint64_t v29 = *(void *)(v2 + 32);
  uint64_t v25 = *(void *)(v2 + 8);
  uint64_t v26 = *(void *)(v2 + 16);
  uint64_t v30 = *(void *)(v2 + 40);
  uint64_t v14 = swift_beginAccess();
  uint64_t v15 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    uint64_t v14 = swift_beginAccess();
    void v15[4] = v3;
    *((void *)v15 + 5) = v4;
    v15[6] = v5;
    *((_WORD *)v15 + 28) = v6;
  }
  double v10 = a2(v14);
  *(void *)(v2 + 112) = v12;
  *(void *)(v2 + 120) = v9;
  *(void *)(v2 + 128) = v21;
  *(void *)(v2 + 136) = v19;
  *(void *)(v2 + 144) = v22;
  *(void *)(v2 + 152) = v23;
  *(unsigned char *)(v2 + 160) = v20;
  *(double *)(v2 + 56) = v24;
  *(void *)(v2 + 64) = v25;
  *(void *)(v2 + 72) = v26;
  *(void *)(v2 + 80) = v28;
  *(void *)(v2 + 88) = v29;
  *(void *)(v2 + 96) = v30;
  *(unsigned char *)(v2 + 104) = v27;
  *(double *)uint64_t v2 = v3;
  *(unsigned char *)(v2 + 8) = v4;
  *(double *)(v2 + 16) = v5;
  *(unsigned char *)(v2 + 24) = v6;
  *(double *)(v2 + 32) = v10;
  *(void *)(v2 + 40) = v16;
  *(unsigned char *)(v2 + 48) = 0;
  return v10;
}

double CGPoint.offset(by:)(double a1, double a2, double a3, double a4, double a5)
{
  return a2 + a5;
}

__n128 static Anchor.Source<A>.bounds.getter()
{
  if (one-time initialization token for one != -1) {
    swift_once();
  }
  long long v3 = static UnitRect.one;
  long long v0 = xmmword_26B0E8880;
  type metadata accessor for AnchorBox<UnitRect>();
  uint64_t v1 = swift_allocObject();
  __n128 result = (__n128)v3;
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v0;
  return result;
}

void type metadata accessor for AnchorBox<UnitRect>()
{
  if (!lazy cache variable for type metadata for AnchorBox<UnitRect>)
  {
    unint64_t v0 = type metadata accessor for AnchorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnchorBox<UnitRect>);
    }
  }
}

uint64_t type metadata accessor for AnchorBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for StateOrBinding()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for EnvironmentBox()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for TrackerData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t key path setter for EnvironmentValues.backgroundMaterial : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  outlined copy of Material?(*a1, v2);
  specialized EnvironmentValues.subscript.setter(v1, v2);

  return outlined consume of Material?(v1, v2);
}

uint64_t View.underline(_:pattern:color:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  KeyPath = (uint64_t *)swift_getKeyPath();
  if (a1)
  {
    uint64_t v11 = v9 | 1;
    swift_retain();
  }
  else
  {
    uint64_t v11 = 0;
    a3 = 1;
  }
  v13[0] = v11;
  v13[1] = a3;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)v13, a4, a5);
  swift_release();
  return outlined consume of Text.LineStyle?(v11, a3);
}

{
  return View.underline(_:pattern:color:)(a1, a2, a3, a4, a5);
}

uint64_t key path setter for EnvironmentValues.underlineStyle : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  outlined copy of Text.LineStyle?(*a1, v7);
  a5(v6, v7);

  return outlined consume of Text.LineStyle?(v6, v7);
}

uint64_t outlined copy of Text.LineStyle?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  double v5 = specialized find1<A>(_:key:filter:)(a1, v8);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v6 = &static EnvironmentValues.ContentShapesKey.defaultValue;
  }
  *a2 = *v6;
  return swift_bridgeObjectRetain();
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for BodyCountInput, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for BodyInput, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, uint64_t *a6@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  uint64_t result = a5(a1);
  if (result)
  {
    uint64_t v11 = *(void *)(result + 72);
    uint64_t v12 = *(void *)(result + 80);
    uint64_t result = outlined copy of Text.LineStyle?(v11, v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 1;
  }
  *a6 = v11;
  a6[1] = v12;
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<UnderlineStyleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<UnderlineStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<UnderlineStyleKey>>);
    }
  }
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t *, uint64_t, uint64_t, uint64_t *), void (*a5)(uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t))
{
  uint64_t v13 = *v6;
  swift_retain_n();
  a3(a1, a2);
  a4(v6, a1, a2, &v16);
  swift_release();
  a5(a1, a2);
  if (v6[1])
  {
    uint64_t v14 = *v6;
    swift_retain();
    swift_retain();
    a6(v13, v14);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t outlined consume of Text.LineStyle?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_release();
  }
  return result;
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentValues.subscript.setter(a1, a2, (void (*)(uint64_t, uint64_t))outlined copy of Text.LineStyle?, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))outlined consume of Text.LineStyle?, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, (void (*)(uint64_t, uint64_t))outlined copy of Material?, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))outlined consume of Material?, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, (void (*)(uint64_t, uint64_t))outlined copy of Text.LineStyle?, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))outlined consume of Text.LineStyle?, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<UnderlineStyleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<UnderlineStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<UnderlineStyleKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata completion function for StaticIf()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for PreferenceBridge()
{
  return self;
}

void protocol witness for static ViewInputsModifier.graphInputsSemantics.getter in conformance _EnvironmentBackgroundStyleModifier<A>(uint64_t a1@<X8>)
{
}

void static ViewInputsModifier.graphInputsSemantics.getter(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v4()
{
  return &type metadata for _SemanticFeature_v4;
}

uint64_t ViewGraph.preferenceBridge.getter()
{
  return swift_weakLoadStrong();
}

uint64_t specialized closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)(void *a1, uint64_t *a2, void (*a3)(void *__return_ptr, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 20);
  uint64_t v10 = *a2;
  int v11 = v4;
  uint64_t v12 = v5;
  long long v7 = *(_OWORD *)(a2 + 5);
  long long v13 = *(_OWORD *)(a2 + 3);
  long long v14 = v7;
  long long v15 = *(_OWORD *)(a2 + 7);
  uint64_t v16 = a2[9];
  int v17 = v6;
  a3(v18, &v10);
  uint64_t v8 = v18[1];
  *a1 = v18[0];
  a1[1] = v8;
  return 1;
}

uint64_t assignWithTake for VStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 40))((*(unsigned __int8 *)(v5 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithTake for SimultaneousGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for _ViewList_View(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v6 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  return a1;
}

_OWORD *assignWithTake for ZStack(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for _EnvironmentKeyTransformModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

void *assignWithTake for _EnvironmentKeyWritingModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t assignWithTake for _IntelligenceSupport.AnimatingText(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t View.hyphenationFactor(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewInfo()
{
  return &type metadata for DisplayList.ViewUpdater.ViewInfo;
}

uint64_t one-time initialization function for zeroSecondComponents()
{
  _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v0 - 8);
  unint64_t v2 = (char *)&v10 - v1;
  _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Calendar?, MEMORY[0x263F07920]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = type metadata accessor for DateComponents();
  __swift_allocate_value_buffer(v6, static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
  __swift_project_value_buffer(v6, (uint64_t)static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
  uint64_t v7 = type metadata accessor for Calendar();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  uint64_t v8 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v2, 1, 1, v8);
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
}

uint64_t one-time initialization function for defaultValue()
{
  uint64_t v0 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x270FA5388](v0);
  unint64_t v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v0, static TypesettingConfigurationKey.defaultValue);
  uint64_t v6 = __swift_project_value_buffer(v0, (uint64_t)static TypesettingConfigurationKey.defaultValue);
  if (one-time initialization token for automatic != -1) {
    swift_once();
  }
  uint64_t v7 = __swift_project_value_buffer(v3, (uint64_t)static TypesettingLanguage.automatic);
  _s7SwiftUI24TypesettingConfigurationVWOcTm_0(v7, (uint64_t)v5, type metadata accessor for TypesettingLanguage);
  _s7SwiftUI24TypesettingConfigurationVWOcTm_0(v7, (uint64_t)v2, type metadata accessor for TypesettingLanguage);
  uint64_t v8 = &v2[*(int *)(v0 + 20)];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  outlined assign with take of TypesettingLanguage((uint64_t)v5, (uint64_t)v2);
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  return outlined init with take of TypesettingConfiguration((uint64_t)v2, v6);
}

{
  uint64_t v0;
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  __swift_allocate_value_buffer(v0, static EnvironmentValues.Key.defaultValue);
  __swift_project_value_buffer(v0, (uint64_t)static EnvironmentValues.Key.defaultValue);
  MEMORY[0x24C520AE0]();

  return swift_storeEnumTagMultiPayload();
}

{
  uint64_t v0;
  uint64_t result;
  BOOL v2;
  int v3;

  swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    type metadata accessor for LayoutEngineBox<LayoutComputer.DefaultEngine>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LayoutComputer.DefaultEngine>, (uint64_t (*)(void, ValueMetadata *, _UNKNOWN **))type metadata accessor for TracingLayoutEngineBox);
    uint64_t v0 = swift_allocObject();
    uint64_t result = AGGraphGetCurrentAttribute();
    unint64_t v2 = result == *MEMORY[0x263F288F8];
    if (result == *MEMORY[0x263F288F8]) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = result;
    }
    *(_DWORD *)(v0 + 16) = v3;
    *(unsigned char *)(v0 + 20) = v2;
  }
  else
  {
    type metadata accessor for LayoutEngineBox<LayoutComputer.DefaultEngine>(0, &lazy cache variable for type metadata for LayoutEngineBox<LayoutComputer.DefaultEngine>, (uint64_t (*)(void, ValueMetadata *, _UNKNOWN **))type metadata accessor for LayoutEngineBox);
    uint64_t result = swift_allocObject();
    uint64_t v0 = result;
  }
  static LayoutComputer.defaultuint64_t Value = (_UNKNOWN *)v0;
  *(void *)algn_26B0F4178 = 0;
  return result;
}

{
  return swift_weakInit();
}

{
  uint64_t vars8;

  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  static TextSizingKey.defaultuint64_t Value = static Text.Sizing.standard;
  qword_26B0F0C60 = qword_26B0F0F48;

  return swift_bridgeObjectRetain();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Locale();
  __swift_allocate_value_buffer(v0, static LocaleKey.defaultValue);
  __swift_project_value_buffer(v0, (uint64_t)static LocaleKey.defaultValue);
  return Locale.init(identifier:)();
}

uint64_t outlined init with take of TypesettingConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypesettingConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t one-time initialization function for propertyChangeLog(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t one-time initialization function for oversizedScalarsWithoutEmoji()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v12 - v5;
  __swift_allocate_value_buffer(v7, static NSAttributedString.oversizedScalarsWithoutEmoji);
  __swift_project_value_buffer(v0, (uint64_t)static NSAttributedString.oversizedScalarsWithoutEmoji);
  if (one-time initialization token for oversizedScalars != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v0, (uint64_t)static NSAttributedString.oversizedScalars);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v6, v8, v0);
  id v9 = objc_msgSend(self, sel_ic_emojiCharacterSet);
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  CharacterSet.subtracting(_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v3, v0);
  return ((uint64_t (*)(char *, uint64_t))v10)(v6, v0);
}

uint64_t one-time initialization function for presentation()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.presentation);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.presentation);
  swift_beginAccess();
  if (static EnablePresentationLogging.cachedValue != 2)
  {
    if (static EnablePresentationLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD00000000000002BLL, 0x8000000246226110);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnablePresentationLogging.cacheduint64_t Value = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  int v11 = (void *)MEMORY[0x24C522820](0xD00000000000002BLL, 0x8000000246226110);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnablePresentationLogging.cacheduint64_t Value = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t one-time initialization function for splitViewVisibility()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.splitViewVisibility);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.splitViewVisibility);
  swift_beginAccess();
  if (static EnableSplitViewVisibilityLogging.cachedValue != 2)
  {
    if (static EnableSplitViewVisibilityLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD000000000000032, 0x8000000246226050);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableSplitViewVisibilityLogging.cacheduint64_t Value = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  int v11 = (void *)MEMORY[0x24C522820](0xD000000000000032, 0x8000000246226050);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableSplitViewVisibilityLogging.cacheduint64_t Value = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t one-time initialization function for navigation()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.navigation);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.navigation);
  swift_beginAccess();
  if (static EnableNavigationLogging.cachedValue != 2)
  {
    if (static EnableNavigationLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD000000000000029, 0x8000000246226230);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableNavigationLogging.cacheduint64_t Value = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  int v11 = (void *)MEMORY[0x24C522820](0xD000000000000029, 0x8000000246226230);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableNavigationLogging.cacheduint64_t Value = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t outlined init with take of Logger?(uint64_t a1, uint64_t a2)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static Log.focus.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v6 = __swift_project_value_buffer(v5, a2);

  return outlined init with copy of Logger?(v6, a3);
}

void type metadata accessor for _ContiguousArrayStorage<CVarArg>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_1(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_5(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for PreferenceKey(255, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t one-time initialization function for defaultValue(uint64_t a1, uint64_t *a2)
{
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v4 = v3;
  __swift_allocate_value_buffer(v3, a2);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)a2);
  uint64_t v6 = type metadata accessor for Date();
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

uint64_t one-time initialization function for oversizedScalars()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CharacterSet?(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v0, static NSAttributedString.oversizedScalars);
  uint64_t v7 = __swift_project_value_buffer(v0, (uint64_t)static NSAttributedString.oversizedScalars);
  uint64_t v8 = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v10(v6, v3, v0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v6, 0, 1, v0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v10)(v7, v6, v0);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1, 1, v0);
  }
  CharacterSet.init()();
  return _s10Foundation4DateVSgWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CharacterSet?);
}

uint64_t one-time initialization function for automatic(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TypesettingLanguage(0);
  __swift_allocate_value_buffer(v5, a2);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)a2);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, a3, 2, v7);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void type metadata accessor for CharacterSet?(uint64_t a1)
{
}

uint64_t ObjcColor.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v9);
  if (!v10)
  {
    outlined destroy of Any?((uint64_t)v9);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    char v6 = 0;
    return v6 & 1;
  }
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI9ObjcColor_color);
  if (v3 == *(void *)&v8[OBJC_IVAR____TtC7SwiftUI9ObjcColor_color])
  {

    char v6 = 1;
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 88);
    uint64_t v5 = swift_retain();
    char v6 = v4(v5);

    swift_release();
  }
  return v6 & 1;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance BothFeatures<A, B>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = static Feature.defaultValue.getter(a1, WitnessTable);
  *a2 = result & 1;
  return result;
}

uint64_t static Feature.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() & 1;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance BothFeatures<A, B>(uint64_t *a1)
{
  return static BothFeatures.isEnabled.getter(a1[2], a1[3], a1[4], a1[5]);
}

uint64_t static BothFeatures.isEnabled.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(uint64_t (**)(void))(a3 + 16))()) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4) & 1;
  }
  else {
    return 0;
  }
}

unint64_t static UserDefaultKeyedFeature.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  char v4 = (*(uint64_t (**)(void))(a2 + 40))();
  if (v4 == 2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 32);
    char v6 = (void *)v5(a1, a2);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
    uint64_t v8 = v7(a1, a2);
    uint64_t v9 = (void *)MEMORY[0x24C522820](v8);
    swift_bridgeObjectRelease();
    id v10 = objc_msgSend(v6, sel_objectForKey_, v9);

    if (v10)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined destroy of Any?((uint64_t)v18);
      int v11 = (void *)v5(a1, a2);
      uint64_t v12 = v7(a1, a2);
      uint64_t v13 = (void *)MEMORY[0x24C522820](v12);
      swift_bridgeObjectRelease();
      unint64_t v14 = (unint64_t)objc_msgSend(v11, sel_BOOLForKey_, v13);

      (*(void (**)(unint64_t, uint64_t, uint64_t))(a2 + 48))(v14, a1, a2);
    }
    else
    {
      memset(v18, 0, sizeof(v18));
      outlined destroy of Any?((uint64_t)v18);
      long long v15 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
      char v16 = v15(a1, a2);
      (*(void (**)(void, uint64_t, uint64_t))(a2 + 48))(v16 & 1, a1, a2);
      unint64_t v14 = v15(a1, a2);
    }
  }
  else
  {
    LOBYTE(v14) = v4 & 1;
  }
  return v14 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((void *)&v12 + 1) = swift_getObjectType();
    *(void *)&long long v11 = a2;
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return outlined destroy of Any?((uint64_t)&v11);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  type metadata accessor for [String](0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for [String](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSaySSGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t partial apply for closure #1 in NSAttributedString.hasLinkAttributes.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return closure #1 in NSAttributedString.hasLinkAttributes.getter(a1, a2, a3, a4, *(unsigned char **)(v4 + 16));
}

uint64_t closure #1 in NSAttributedString.hasLinkAttributes.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  uint64_t v8 = MEMORY[0x263F06EA8];
  uint64_t v9 = MEMORY[0x263F8D8F0];
  _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  long long v12 = &v15[-v11];
  _sypSgWOcTm_0(a1, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyGesture<()>);
  URL.init(urlValue:)((uint64_t)v15, v12);
  uint64_t v13 = type metadata accessor for URL();
  LODWORD(a1) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  uint64_t result = _sypSgWOhTm_6((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for URL?, v8, v9, (uint64_t (*)(void))_s10Foundation3URLVSgMaTm_0);
  if (a1 != 1)
  {
    *a5 = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t URL.init(urlValue:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = &v23[-v8];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = MEMORY[0x263F8EE58];
  uint64_t v15 = MEMORY[0x263F8EE58] + 8;
  _sypSgWOcTm_0(a1, (uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyGesture<()>);
  if (v24)
  {
    int v16 = swift_dynamicCast();
    int v17 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v17(v9, v16 ^ 1u, 1, v10);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
    {
      _sypSgWOhTm_6(a1, (uint64_t)&lazy cache variable for type metadata for Any?, v14 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AnyGesture<()>);
      uint64_t v18 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32);
      v18(v13, v9, v10);
LABEL_13:
      v18(a2, v13, v10);
      uint64_t v19 = a2;
      uint64_t v20 = 0;
      return v17(v19, v20, 1, v10);
    }
  }
  else
  {
    _sypSgWOhTm_6((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Any?, v15, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AnyGesture<()>);
    int v17 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v17(v9, 1, 1, v10);
  }
  _sypSgWOhTm_6((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0], (uint64_t (*)(void))_s10Foundation3URLVSgMaTm_0);
  _sypSgWOcTm_0(a1, (uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Any?, v14 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyGesture<()>);
  if (v24)
  {
    if (swift_dynamicCast())
    {
      URL.init(string:)();
      _sypSgWOhTm_6(a1, (uint64_t)&lazy cache variable for type metadata for Any?, v14 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AnyGesture<()>);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    _sypSgWOhTm_6((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Any?, v14 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AnyGesture<()>);
  }
  v17(v6, 1, 1, v10);
  _sypSgWOhTm_6(a1, (uint64_t)&lazy cache variable for type metadata for Any?, v14 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AnyGesture<()>);
LABEL_10:
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) != 1)
  {
    uint64_t v18 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32);
    v18(v13, v6, v10);
    goto LABEL_13;
  }
  _sypSgWOhTm_6((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0], (uint64_t (*)(void))_s10Foundation3URLVSgMaTm_0);
  uint64_t v19 = a2;
  uint64_t v20 = 1;
  return v17(v19, v20, 1, v10);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t _sypSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t partial apply for closure #1 in NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(a1, a2, a3, a4, *(void **)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t closure #1 in NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  type metadata accessor for [Date](0, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, type metadata accessor for ResolvableTextSegmentAttribute.Value, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  int v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v47);
  if (!v48)
  {
    _sypSgWOhTm_4((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    goto LABEL_6;
  }
  int v17 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, v17 ^ 1u, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
LABEL_6:
    uint64_t v18 = &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?;
    uint64_t v19 = type metadata accessor for ResolvableTextSegmentAttribute.Value;
    uint64_t v20 = (ProtocolDescriptor *)MEMORY[0x263F8D8F0];
    uint64_t v21 = (uint64_t (*)(void))type metadata accessor for [Date];
    uint64_t v22 = (long long *)v12;
    return _s7SwiftUI16TimelineSchedule_pSgWOhTm_0((uint64_t)v22, (uint64_t)v18, (uint64_t)v19, (uint64_t)v20, v21);
  }
  _sypSgWObTm_2((uint64_t)v12, (uint64_t)v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  if (objc_msgSend(a5, sel_attribute_atIndex_effectiveRange_, *(void *)&v16[*(int *)(v13 + 20)], a2, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v43, 0, sizeof(v43));
  }
  _sypSgWObTm_2((uint64_t)v43, (uint64_t)&v41, (uint64_t (*)(void))type metadata accessor for Any?);
  if (!v42)
  {
    _sypSgWOhTm_4((uint64_t)&v41, (uint64_t (*)(void))type metadata accessor for Any?);
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t AssociatedConformanceWitness = 0;
    goto LABEL_15;
  }
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttribute);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t AssociatedConformanceWitness = 0;
    long long v44 = 0u;
    long long v45 = 0u;
    goto LABEL_15;
  }
  if (!*((void *)&v45 + 1))
  {
LABEL_15:
    _sypSgWOhTm_4((uint64_t)v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    uint64_t v18 = (unint64_t *)&lazy cache variable for type metadata for ResolvableStringAttribute?;
    uint64_t v19 = (uint64_t (*)(uint64_t))&lazy cache variable for type metadata for ResolvableStringAttribute;
    uint64_t v20 = &protocol descriptor for ResolvableStringAttribute;
    uint64_t v21 = (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?;
    uint64_t v22 = &v44;
    return _s7SwiftUI16TimelineSchedule_pSgWOhTm_0((uint64_t)v22, (uint64_t)v18, (uint64_t)v19, (uint64_t)v20, v21);
  }
  outlined init with take of ScrollStateRequest(&v44, (uint64_t)v47);
  outlined init with copy of TimelineSchedule?(a6, (uint64_t)&v41);
  if (v42)
  {
    outlined init with take of ScrollStateRequest(&v41, (uint64_t)&v44);
    uint64_t v23 = v48;
    uint64_t v24 = v49;
    __swift_project_boxed_opaque_existential_1(v47, v48);
    uint64_t v25 = *((void *)&v45 + 1);
    uint64_t v26 = AssociatedConformanceWitness;
    char v27 = __swift_project_boxed_opaque_existential_1(&v44, *((uint64_t *)&v45 + 1));
    ResolvableStringAttribute.reduceSchedule<A>(with:)((uint64_t)v27, v23, v25, v24, v26, (uint64_t *)&v41);
    _sypSgWOhTm_4((uint64_t)v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    outlined assign with take of TimelineSchedule?((uint64_t)&v41, a6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
  }
  else
  {
    _s7SwiftUI16TimelineSchedule_pSgWOhTm_0((uint64_t)&v41, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule?, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
    uint64_t v29 = v48;
    uint64_t v30 = v49;
    __swift_project_boxed_opaque_existential_1(v47, v48);
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, double))(v30 + 48);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v39 = type metadata accessor for Optional();
    uint64_t v32 = *(void *)(v39 - 8);
    double v33 = MEMORY[0x270FA5388](v39);
    uint64_t v35 = (char *)&v38 - v34;
    v40(v29, v30, v33);
    uint64_t v36 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v35, 1, AssociatedTypeWitness) == 1)
    {
      _sypSgWOhTm_4((uint64_t)v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v39);
      uint64_t AssociatedConformanceWitness = 0;
      long long v44 = 0u;
      long long v45 = 0u;
    }
    else
    {
      *((void *)&v45 + 1) = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v44);
      (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 32))(boxed_opaque_existential_1, v35, AssociatedTypeWitness);
      _sypSgWOhTm_4((uint64_t)v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    }
    outlined assign with take of TimelineSchedule?((uint64_t)&v44, a6);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
}

void type metadata accessor for [Date](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Any?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ResolvableTextSegmentAttribute.Value(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvableTextSegmentAttribute.Value);
}

uint64_t storeEnumTagSinglePayload for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245DF1740);
}

uint64_t partial apply for closure #1 in NSAttributedString.maxFontMetrics.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in NSAttributedString.maxFontMetrics.getter(a1, a2, a3, a4, *(double **)(v4 + 16), *(double **)(v4 + 24), *(double **)(v4 + 32), *(void *)(v4 + 40), *(unsigned char *)(v4 + 48), *(unsigned char *)(v4 + 49), *(void *)(v4 + 56));
}

uint64_t closure #1 in NSAttributedString.maxFontMetrics.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, double *a6, double *a7, uint64_t a8, char a9, char a10, uint64_t a11)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0(a1, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for Any?);
  if (!v39) {
    return outlined destroy of Text.Style((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for Any?);
  }
  outlined init with take of Any(v38, v40);
  outlined init with copy of Any((uint64_t)v40, (uint64_t)v38);
  type metadata accessor for CTFontRef(0);
  swift_dynamicCast();
  double Ascent = CTFontGetAscent(font);
  double Descent = CTFontGetDescent(font);
  double v17 = *a5;
  double CapHeight = CTFontGetCapHeight(font);
  if (v17 > CapHeight) {
    double CapHeight = v17;
  }
  *a5 = CapHeight;
  double v19 = *a6;
  if (*a6 <= Ascent) {
    double v19 = Ascent;
  }
  *a6 = v19;
  double v20 = *a7;
  if (*a7 <= Descent) {
    double v20 = Descent;
  }
  *a7 = v20;
  if (*(unsigned char *)(a8 + 8))
  {
    double Leading = CTFontGetLeading(font);
  }
  else
  {
    double v23 = *(double *)a8;
    double Leading = CTFontGetLeading(font);
    if (v23 > Leading) {
      double Leading = v23;
    }
  }
  *(double *)a8 = Leading;
  *(unsigned char *)(a8 + 8) = 0;
  v38[0] = 0.0;
  if ((a9 & 1) != 0
    || (CTFontSymbolicTraits SymbolicTraits = CTFontGetSymbolicTraits(font), (SymbolicTraits & 1) != 0)
    || (CTFontSymbolicTraits v25 = SymbolicTraits, CTFontGetWeight(), *MEMORY[0x263F03BE8] < v26)
    || (v25 & 0xF0000000) == 0xA0000000
    || (v25 & 0xF0000000) == 0x90000000)
  {
    if (CTFontGetLanguageAwareOutsets())
    {

      uint64_t v27 = 0;
      double v28 = *(double *)a11;
      if (*(double *)(a11 + 8) > 0.0) {
        uint64_t v27 = *(void *)(a11 + 8);
      }
      uint64_t v29 = 0;
      double v30 = *(double *)(a11 + 16);
      if (*(double *)(a11 + 24) > 0.0) {
        uint64_t v29 = *(void *)(a11 + 24);
      }
      *(void *)(a11 + 24) = v29;
      double v31 = v38[0];
      if (v28 > v38[0]) {
        double v31 = v28;
      }
      *(double *)a11 = v31;
      *(void *)(a11 + 8) = v27;
      if (v30 > 0.0) {
        double v32 = v30;
      }
      else {
        double v32 = 0.0;
      }
LABEL_28:
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      *(double *)(a11 + 16) = v32;
      return result;
    }
  }
  if ((a10 & 1) != 0 && (CTFontIsSystemUIFont() & 1) == 0)
  {
    int ClippingMetrics = CTFontGetClippingMetrics();

    if (ClippingMetrics)
    {
      double v34 = *(double *)a11;
      double v35 = Ascent - Ascent;
      if (Ascent - Ascent < 0.0) {
        double v35 = 0.0;
      }
      if (v34 <= v35) {
        double v34 = v35;
      }
      *(double *)a11 = v34;
      double v36 = Descent - Descent;
      if (Descent - Descent < 0.0) {
        double v36 = 0.0;
      }
      if (*(double *)(a11 + 16) > v36) {
        double v32 = *(double *)(a11 + 16);
      }
      else {
        double v32 = v36;
      }
      goto LABEL_28;
    }
  }
  else
  {
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
}

id static UserDefaultKeyedFeature.defaults.getter()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);

  return v0;
}

{
  return static UserDefaultKeyedFeature.defaults.getter();
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v4(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v4.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(uint64_t a1, uint64_t a2, void *a3, unsigned int *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  unsigned int v5 = *a4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v5;
  }
}

void partial apply for closure #1 in NSAttributedString.replacingLineBreakModes(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #1 in NSAttributedString.replacingLineBreakModes(_:)(a1, a2, a3, a4, *(id *)(v4 + 16), *(void ***)(v4 + 24), *(void **)(v4 + 32));
}

void closure #1 in NSAttributedString.replacingLineBreakModes(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, void **a6, void *a7)
{
  outlined init with copy of Any?(a1, (uint64_t)v19);
  if (v20)
  {
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
    if (swift_dynamicCast())
    {
      if (objc_msgSend(v18, sel_lineBreakMode) == a5)
      {
LABEL_11:

        return;
      }
      objc_msgSend(v18, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
      swift_dynamicCast();
      objc_msgSend(v18, sel_setLineBreakMode_, a5);
      uint64_t v12 = *a6;
      if (*a6) {
        goto LABEL_8;
      }
      objc_msgSend(a7, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
      int v13 = swift_dynamicCast();
      id v14 = v18;
      if (!v13) {
        id v14 = 0;
      }
      uint64_t v15 = *a6;
      *a6 = v14;

      uint64_t v12 = *a6;
      if (*a6)
      {
LABEL_8:
        uint64_t v16 = one-time initialization token for kitParagraphStyle;
        id v17 = v12;
        if (v16 != -1) {
          swift_once();
        }
        objc_msgSend(v17, sel_addAttribute_value_range_, static NSAttributedStringKey.kitParagraphStyle, v18, a2, a3);

        goto LABEL_11;
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v19);
  }
}

unint64_t specialized RandomAccessCollection<>.distance(from:to:)(unint64_t result, unint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)(v2 + 8) + 16);
  if (v3 < result)
  {
    __break(1u);
  }
  else if (v3 >= a2)
  {
    return a2 - result;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ViewTransform.resetPosition(_:)(CGPoint a1)
{
  CGFloat y = a1.y;
  *(float64x2_t *)(v1 + 24) = vsubq_f64(*(float64x2_t *)(v1 + 24), vsubq_f64((float64x2_t)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&a1.x), *(float64x2_t *)(v1 + 8)));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
}

uint64_t instantiation function for generic protocol witness table for PairPreferenceCombiner<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void *static Edge.allCases.getter()
{
  return &outlined read-only object #0 of static Edge.allCases.getter;
}

uint64_t static SafeAreaRegions.container.getter()
{
  return 1;
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t getEnumTagSinglePayload for HStack(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 17) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 17) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

uint64_t destroy for Text.Effect.Timing.Chunk()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t ViewSize.init(_:proposal:)@<X0>(uint64_t result@<X0>, double *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double v4 = *(double *)result;
  double v5 = *(double *)(result + 16);
  if (*(unsigned char *)(result + 8)) {
    double v4 = NAN;
  }
  if (*(unsigned char *)(result + 24)) {
    double v5 = NAN;
  }
  *a2 = a3;
  a2[1] = a4;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

uint64_t PreferencesInputs.hostKeys.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t Binding.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

ValueMetadata *type metadata accessor for _VariadicView_Children()
{
  return &type metadata for _VariadicView_Children;
}

ValueMetadata *type metadata accessor for AlignmentKey()
{
  return &type metadata for AlignmentKey;
}

uint64_t type metadata accessor for AnyColorBox()
{
  return self;
}

uint64_t EnvironmentValues.accessibilityTextAttributeResolver.setter(uint64_t a1)
{
  outlined init with copy of ResolvableTextSegmentAttribute.Value?(a1, (uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v3);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  return outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
}

uint64_t outlined destroy of ResolvableTextSegmentAttribute.Value?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _s10Foundation4DateVSgMaTm_0(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of ResolvableTextSegmentAttribute.Value?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  _s10Foundation4DateVSgMaTm_0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with copy of SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI17SystemFormatStyleO13DateReferenceVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI17SystemFormatStyleO13DateReferenceVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Transaction.PendingListeners.WeakListener(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Transaction.PendingListeners.WeakListener);
}

uint64_t outlined destroy of ClosedRange<Date>?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for AccessibilityTextAttributeResolver?(uint64_t a1)
{
}

uint64_t static StyleableView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  int v8 = *a1;
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  unsigned int v11 = *(_DWORD *)(a2 + 24);
  unsigned int v12 = *(_DWORD *)(a2 + 28);
  unsigned int v13 = *(_DWORD *)(a2 + 32);
  unsigned int v14 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 48);
  int v17 = *(_DWORD *)(a2 + 80);
  uint64_t v77 = *(void *)a2;
  int v78 = v9;
  uint64_t v79 = v10;
  *(void *)&long long v80 = __PAIR64__(v12, v11);
  *((void *)&v80 + 1) = __PAIR64__(v14, v13);
  uint64_t v81 = v15;
  uint64_t v82 = v16;
  long long v83 = *(_OWORD *)(a2 + 56);
  unint64_t v84 = *(void *)(a2 + 72);
  int v85 = v17;
  uint64_t v68 = v77;
  LODWORD(v69) = v9;
  uint64_t v70 = v10;
  *(void *)&long long v71 = __PAIR64__(v12, v11);
  *((void *)&v71 + 1) = __PAIR64__(v14, v13);
  uint64_t v72 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!_GraphInputs.isCurrentStyleableView<A>(_:)(a3, a3))
  {
    _GraphInputs.setCurrentStyleableView<A>(_:)(a3, a3);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    LODWORD(v68) = v8;
    uint64_t ResolvedRepresentation = type metadata accessor for MakeResolvedRepresentation();
    uint64_t WitnessTable = swift_getWitnessTable();
    _GraphValue.init<A>(_:)((uint64_t)&v68, AssociatedTypeWitness, ResolvedRepresentation, WitnessTable, &v52);
    uint64_t v68 = v77;
    LODWORD(v69) = v78;
    uint64_t v70 = v79;
    long long v71 = v80;
    uint64_t v72 = v81;
    uint64_t v73 = v82;
    long long v74 = v83;
    unint64_t v75 = v84;
    int v76 = v85;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(&v52, &v68, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for StyleInput();
  _ViewInputs.popLast<A, B>(_:)(v18, (uint64_t)&protocol witness table for StyleInput<A>, (uint64_t)&v68);
  uint64_t v19 = v69;
  if (!v69)
  {
    uint64_t v48 = a5;
    LODWORD(v68) = v8;
    uint64_t v47 = swift_getAssociatedTypeWitness();
    uint64_t v26 = type metadata accessor for ModifiedContent();
    uint64_t DefaultRepresentation = type metadata accessor for MakeDefaultRepresentation();
    uint64_t v28 = swift_getWitnessTable();
    _GraphValue.init<A>(_:)((uint64_t)&v68, v26, DefaultRepresentation, v28, &v51);
    int v49 = v51;
    uint64_t v29 = v77;
    uint64_t v30 = v79;
    int v45 = v80;
    int v46 = v78;
    uint64_t v31 = *((void *)&v80 + 1);
    unsigned int v44 = DWORD1(v80);
    uint64_t v32 = v81;
    uint64_t v33 = v82;
    unsigned int v34 = DWORD1(v83);
    unsigned int v42 = DWORD2(v83);
    unsigned int v43 = v83;
    unsigned int v35 = v84;
    unsigned int v40 = HIDWORD(v84);
    unsigned int v41 = HIDWORD(v83);
    int v39 = v85;
    int ShouldRecordTree = AGSubgraphShouldRecordTree();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    uint64_t v68 = v29;
    LODWORD(v69) = v46;
    uint64_t v70 = v30;
    LODWORD(v71) = v45;
    *(void *)((char *)&v71 + 4) = v44;
    uint64_t v72 = v32;
    uint64_t v73 = v33;
    *(void *)&long long v74 = __PAIR64__(v34, v43);
    *((void *)&v74 + 1) = __PAIR64__(v41, v42);
    unint64_t v75 = __PAIR64__(v40, v35);
    int v76 = v39;
    HIDWORD(v71) = HIDWORD(v31);
    int v50 = v49;
    uint64_t v52 = v29;
    int v53 = v46;
    uint64_t v54 = v30;
    int v55 = v45;
    unsigned int v56 = v44;
    int v57 = 0;
    int v58 = HIDWORD(v31);
    uint64_t v59 = v32;
    uint64_t v60 = v33;
    unsigned int v61 = v43;
    unsigned int v62 = v34;
    unsigned int v63 = v42;
    unsigned int v64 = v41;
    unsigned int v65 = v35;
    unsigned int v66 = v40;
    int v67 = v39;
    uint64_t v37 = *(void *)(a4 + 8);
    uint64_t v38 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static ModifiedContent<>._makeView(view:inputs:)(&v50, &v52, a3, v47, v37, v38, v48);
    DWORD2(v71) = v31;
    if (ShouldRecordTree)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v48, (uint64_t)&v68);
      AGSubgraphEndTreeElement();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release();
    }
    swift_release();
    return swift_release();
  }
  uint64_t v20 = v68;
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    LODWORD(v52) = v8;
    uint64_t v68 = v77;
    LODWORD(v69) = v78;
    uint64_t v70 = v79;
    long long v71 = v80;
    uint64_t v72 = v81;
    uint64_t v73 = v82;
    long long v74 = v83;
    unint64_t v75 = v84;
    int v76 = v85;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8))(&v52, v20, v19, &v68, a3, a4, v19, result);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t static StyleableView._makeViewList(view:inputs:)(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = *a1;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  unsigned int v9 = *(_DWORD *)(a2 + 24);
  unsigned int v10 = *(_DWORD *)(a2 + 28);
  unsigned int v11 = *(_DWORD *)(a2 + 32);
  unsigned int v12 = *(_DWORD *)(a2 + 36);
  uint64_t v13 = *(void *)(a2 + 40);
  int v14 = *(_DWORD *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  char v16 = *(unsigned char *)(a2 + 80);
  uint64_t v56 = *(void *)a2;
  int v57 = v7;
  uint64_t v58 = v8;
  *(void *)&long long v59 = __PAIR64__(v10, v9);
  *((void *)&v59 + 1) = __PAIR64__(v12, v11);
  uint64_t v60 = v13;
  long long v61 = *(_OWORD *)(a2 + 48);
  int v62 = v14;
  uint64_t v63 = v15;
  char v64 = v16;
  uint64_t v46 = v56;
  LODWORD(v47) = v7;
  uint64_t v48 = v8;
  *(void *)&long long v49 = __PAIR64__(v10, v9);
  *((void *)&v49 + 1) = __PAIR64__(v12, v11);
  uint64_t v50 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (!_GraphInputs.isCurrentStyleableView<A>(_:)(a3, a3))
  {
    _GraphInputs.setCurrentStyleableView<A>(_:)(a3, a3);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    LODWORD(v46) = v6;
    uint64_t ResolvedRepresentation = type metadata accessor for MakeResolvedRepresentation();
    uint64_t WitnessTable = swift_getWitnessTable();
    _GraphValue.init<A>(_:)((uint64_t)&v46, AssociatedTypeWitness, ResolvedRepresentation, WitnessTable, &v55);
    uint64_t v46 = v56;
    LODWORD(v47) = v57;
    uint64_t v48 = v58;
    long long v49 = v59;
    uint64_t v50 = v60;
    long long v51 = v61;
    int v52 = v62;
    uint64_t v53 = v63;
    char v54 = v64;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(unsigned int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v55, &v46, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_6;
  }
  swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for StyleInput();
  _GraphInputs.popLast<A, B>(_:)(v17, (uint64_t)&protocol witness table for StyleInput<A>, (uint64_t)&v46);
  uint64_t v18 = v47;
  if (v47)
  {
    uint64_t v19 = v46;
    uint64_t result = swift_conformsToProtocol2();
    if (result)
    {
      unsigned int v55 = v6;
      uint64_t v46 = v56;
      LODWORD(v47) = v57;
      uint64_t v48 = v58;
      long long v49 = v59;
      uint64_t v50 = v60;
      long long v51 = v61;
      int v52 = v62;
      uint64_t v53 = v63;
      char v54 = v64;
      (*(void (**)(unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16))(&v55, v19, v18, &v46, a3, a4, v18, result);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_6:
      swift_release();
      return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  else
  {
    LODWORD(v46) = v6;
    uint64_t v43 = swift_getAssociatedTypeWitness();
    uint64_t v25 = type metadata accessor for ModifiedContent();
    uint64_t DefaultRepresentation = type metadata accessor for MakeDefaultRepresentation();
    uint64_t v27 = swift_getWitnessTable();
    uint64_t v44 = v25;
    _GraphValue.init<A>(_:)((uint64_t)&v46, v25, DefaultRepresentation, v27, &v55);
    uint64_t v28 = v55;
    uint64_t v29 = v56;
    int v42 = v57;
    uint64_t v30 = v58;
    long long v31 = v59;
    uint64_t v32 = v60;
    uint64_t v40 = *((void *)&v61 + 1);
    uint64_t v41 = v61;
    uint64_t v33 = v63;
    char v38 = v64;
    int v39 = v62;
    int ShouldRecordTree = AGSubgraphShouldRecordTree();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    int v45 = v28;
    uint64_t v46 = v29;
    LODWORD(v47) = v42;
    uint64_t v48 = v30;
    long long v49 = v31;
    uint64_t v50 = v32;
    *(void *)&long long v51 = v41;
    *((void *)&v51 + 1) = v40;
    int v52 = v39;
    uint64_t v53 = v33;
    char v54 = v38;
    uint64_t v35 = *(void *)(a4 + 8);
    uint64_t v36 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
    static ModifiedContent<>._makeViewList(view:inputs:)(&v45, &v46, a3, v43, v35, v36);
    uint64_t v37 = swift_getWitnessTable();
    $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v28, v44, v37);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  return result;
}

BOOL _GraphInputs.isCurrentStyleableView<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v5 && v5 == a2;
}

Swift::Void __swiftcall _GraphInputs.resetCurrentStyleableView()()
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, 0);
  swift_release();
}

uint64_t outlined init with copy of AccessibilityTextAttributeResolver?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for Date?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation4DateVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s10Foundation4DateVSgMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s10Foundation4DateVSgMaTm_2(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s10Foundation4DateVSgMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s10Foundation4DateVSgMaTm_4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation4DateVSgMaTm_5(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s10Foundation4DateVSgMaTm_6(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>);
    }
  }
}

uint64_t protocol witness for static AnyStyleModifierType.makeViewList<A>(view:modifier:inputs:) in conformance StyleModifierType<A>(int *a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  return static StyleModifierType.makeViewList<A>(view:modifier:inputs:)(a1, a2, a3, a4, *(void *)(a7 + 16), a5, *(void *)(a7 + 24));
}

uint64_t static StyleModifierType.makeViewList<A>(view:modifier:inputs:)(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  int v10 = *a1;
  uint64_t v11 = *(void *)a4;
  int v12 = *(_DWORD *)(a4 + 8);
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t v14 = *(void *)(a4 + 40);
  uint64_t v46 = *(void *)(a4 + 56);
  uint64_t v48 = *(void *)(a4 + 48);
  int v44 = *(_DWORD *)(a4 + 64);
  uint64_t v15 = *(void *)(a4 + 72);
  char v16 = *(unsigned char *)(a4 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v39 = *(_OWORD *)(a4 + 24);
  static DynamicPropertyCache.fields(of:)(AssociatedTypeWitness, (uint64_t)&v66);
  uint64_t v19 = v66;
  uint64_t v18 = v67;
  char v20 = v68;
  int v21 = HIDWORD(v68);
  uint64_t v66 = v11;
  LODWORD(v67) = v12;
  uint64_t v68 = v13;
  long long v69 = v39;
  uint64_t v70 = v14;
  uint64_t v71 = v48;
  uint64_t v72 = v46;
  int v73 = v44;
  uint64_t v74 = v15;
  char v75 = v16;
  int v35 = v21;
  int v36 = v10;
  int v51 = v10;
  uint64_t v45 = v19;
  uint64_t v47 = v18;
  uint64_t v53 = v19;
  uint64_t v54 = v18;
  char v49 = v20;
  LOBYTE(v55) = v20;
  HIDWORD(v55) = v21;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static StyleModifierType.makeStyleBody<A>(view:modifier:inputs:fields:)(&v52, (uint64_t)&v63, &v51, a2, a3, (uint64_t)&v66, &v53, a5, a6, a7);
  uint64_t v22 = v52;
  uint64_t v33 = v63;
  uint64_t v34 = v64;
  char v41 = v65;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v24 = v66;
  int v40 = v67;
  uint64_t v25 = v68;
  long long v26 = v69;
  uint64_t v27 = v70;
  uint64_t v38 = v71;
  uint64_t v28 = v72;
  int v37 = v73;
  uint64_t v29 = v74;
  char v30 = v75;
  LODWORD(v14) = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v14) {
    AGSubgraphBeginTreeElement();
  }
  LODWORD(v63) = v22;
  uint64_t v53 = v24;
  LODWORD(v54) = v40;
  uint64_t v55 = v25;
  long long v56 = v26;
  uint64_t v57 = v27;
  uint64_t v58 = v38;
  uint64_t v59 = v28;
  int v60 = v37;
  uint64_t v61 = v29;
  char v62 = v30;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v63, &v53, v23, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v22, v23, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v41 & 1) == 0)
  {
    uint64_t v63 = v33;
    uint64_t v64 = v34;
    unsigned int v52 = v36;
    uint64_t v53 = v45;
    uint64_t v54 = v47;
    LOBYTE(v55) = v49;
    HIDWORD(v55) = v35;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v52, &v53, a6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static StyleModifierType.makeStyleBody<A>(view:modifier:inputs:fields:)(_DWORD *a1, uint64_t a2, int *a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v12 = *a3;
  uint64_t v13 = a7[1];
  uint64_t v24 = *a7;
  char v14 = *((unsigned char *)a7 + 16);
  int v23 = *((_DWORD *)a7 + 5);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v15 = static _SemanticFeature_v2_3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if (static Semantics.forced < v15)
  {
    goto LABEL_10;
  }
  swift_getAssociatedTypeWitness();
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(71);
    v20._object = (void *)0x8000000246222650;
    v20._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v20);
    v21._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x6C63206120736920;
    v22._object = (void *)0xEC0000002E737361;
    String.append(_:)(v22);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_10:
  if (*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64)) {
    closure #1 in static StyleModifierType.makeStyleBody<A>(view:modifier:inputs:fields:)(1, a8, a9, a10);
  }
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v31[1] = v12;
  v31[2] = a4;
  _GraphValue.init(_:)(OffsetAttribute2, v31);
  v28[0] = v24;
  v28[1] = v13;
  char v29 = v14;
  int v30 = v23;
  uint64_t v17 = type metadata accessor for StyleBodyAccessor();
  uint64_t WitnessTable = swift_getWitnessTable();
  return BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, (uint64_t)v31, a6, (uint64_t)v28, v17, WitnessTable);
}

uint64_t StyleBodyAccessor.updateBody(of:changed:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v60 = a6;
  LODWORD(v63) = a2;
  uint64_t v56 = a1;
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t v55 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v61 = (char *)&v47 - v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v59 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v58 = (uint64_t)&v47 - v17;
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v19);
  Swift::String v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a3;
  uint64_t Value = AGGraphGetValue();
  char v24 = v23;
  uint64_t v62 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, Value, a4);
  if (v63 & 1) != 0 || (v24)
  {
    uint64_t v54 = AssociatedTypeWitness;
    int v25 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_16:
      AGGraphClearUpdate();
      uint64_t v41 = v58;
      uint64_t v42 = v60;
      closure #1 in StyleBodyAccessor.updateBody(of:changed:)(v56, (uint64_t)v21, a4, a5, v60, a7, v58);
      AGGraphSetUpdate();
      uint64_t v43 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x270FA5388](v43);
      v64[0] = a4;
      v64[1] = a5;
      v64[2] = v42;
      uint64_t v65 = a7;
      *(&v47 - 2) = type metadata accessor for StyleBodyAccessor();
      *(&v47 - 1) = swift_getWitnessTable();
      uint64_t v44 = v54;
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v41, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)(&v47 - 4), v54, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v45);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v41, v44);
      return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v21, a4);
    }
    int v50 = v25;
    int v51 = v21;
    uint64_t v52 = a5;
    uint64_t v53 = a7;
    swift_getAssociatedTypeWitness();
    static OSSignpostID.exclusive.getter();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v27 = AGTypeID.description.getter();
    uint64_t v29 = v28;
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v30 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v27;
    long long v31 = (void (**)(char *, uint64_t, uint64_t))(inited + 32);
    *(void *)(inited + 64) = v30;
    *(void *)(inited + 40) = v29;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v49 = inited + 72;
    *(void *)(inited + 96) = MEMORY[0x263F8D310];
    *(void *)(inited + 104) = v30;
    *(void *)(inited + 80) = v32;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v33 = v55 + 16;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v13, v61, v11);
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, MEMORY[0x263F8E0F8]);
    uint64_t v34 = swift_initStackObject();
    long long v63 = xmmword_2461BE2B0;
    *(_OWORD *)(v34 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v35 = v34;
      outlined init with copy of AnyTrackedValue(inited + 32, v34 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v47 = inited;
        uint64_t v48 = a4;
        uint64_t inited = v50 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(v49, v35 + 72);
        *(_OWORD *)(v35 + 128) = 0u;
        *(void *)(v35 + 144) = 0;
        *(_OWORD *)(v35 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v35, inited, (uint64_t)v13);
        outlined init with copy of CVarArg?(v35 + 112, (uint64_t)v64);
        swift_bridgeObjectRelease();
        if (!v65)
        {
LABEL_15:
          outlined destroy of CVarArg?((uint64_t)v64);
          swift_bridgeObjectRelease();
          int v40 = *(void (**)(char *, uint64_t))(v55 + 8);
          v40(v61, v11);
          v40(v13, v11);
          a4 = v48;
          a5 = v52;
          a7 = v53;
          Swift::String v21 = v51;
          goto LABEL_16;
        }
        long long v31 = (void (**)(char *, uint64_t, uint64_t))(v33 + 8);
        outlined destroy of CVarArg?((uint64_t)v64);
        if (one-time initialization token for continuation == -1)
        {
LABEL_10:
          uint64_t v36 = __swift_project_value_buffer(v11, (uint64_t)static OSSignpostID.continuation);
          int v37 = *v31;
          while (1)
          {
            v37(v13, v36, v11);
            uint64_t v38 = swift_initStackObject();
            *(_OWORD *)(v38 + 16) = v63;
            *(_OWORD *)(v38 + 32) = 0u;
            *(_OWORD *)(v38 + 48) = 0u;
            *(_OWORD *)(v38 + 64) = 0u;
            *(_OWORD *)(v38 + 80) = 0u;
            *(_OWORD *)(v38 + 96) = 0u;
            *(_OWORD *)(v38 + 128) = 0u;
            *(void *)(v38 + 144) = 0;
            *(_OWORD *)(v38 + 112) = 0u;
            uint64_t v39 = v38 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v38, inited, (uint64_t)v13);
            outlined init with copy of CVarArg?(v39, (uint64_t)v64);
            swift_bridgeObjectRelease();
            if (!v65) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v64);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v36 = __swift_project_value_buffer(v11, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_15;
        }
LABEL_20:
        swift_once();
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v21, a4);
}

uint64_t type metadata accessor for StyleBodyAccessor()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in StyleBodyAccessor.updateBody(of:changed:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v30 = a3;
  uint64_t v35 = a2;
  uint64_t v36 = a7;
  uint64_t v32 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v33 = (char *)&v28 - v9;
  uint64_t v31 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v31);
  uint64_t v28 = (char *)&v28 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  Swift::String v21 = (char *)&v28 - v20;
  uint64_t Value = AGGraphGetValue();
  char v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v23(v21, Value, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v32, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(a6 + 72))(v14, a4, a6);
  v23(v18, (uint64_t)v21, a4);
  (*(void (**)(uint64_t))(v29 + 40))(v30);
  char v24 = v33;
  uint64_t v25 = AssociatedTypeWitness;
  swift_dynamicCast();
  (*(void (**)(char *, uint64_t, uint64_t))(a6 + 88))(v24, a4, a6);
  long long v26 = *(void (**)(char *, uint64_t))(v15 + 8);
  v26(v18, a4);
  v26(v21, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v24, v25);
}

uint64_t _GraphInputs.setCurrentStyleableView<A>(_:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a2);
  return swift_release();
}

uint64_t type metadata accessor for MakeResolvedRepresentation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static StyleModifierType.makeStyleBody<A>(view:modifier:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 80))(v15, a2, a4);
  uint64_t v7 = v6;
  _OWORD v12[2] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, AssociatedTypeWitness, MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v9);
  uint64_t v10 = v14;
  v5(v15, 0);
  return v10;
}

uint64_t destroy for Transaction.PendingListeners.WeakListener(uint64_t a1, uint64_t a2)
{
  swift_weakDestroy();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _UnaryViewAdaptor<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for static AnyStyleModifierType.makeView<A>(view:modifier:inputs:) in conformance StyleModifierType<A>@<X0>(int *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>)
{
  return static StyleModifierType.makeView<A>(view:modifier:inputs:)(a1, a2, a3, a4, *(void *)(a6 + 16), a5, *(void *)(a6 + 24), a7);
}

uint64_t static StyleModifierType.makeView<A>(view:modifier:inputs:)@<X0>(int *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  void (*v35)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char v51;
  uint64_t v52;
  long long v53;
  uint64_t v54;
  long long v55;
  char v56;
  int v60;
  void v61[2];
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  long long v98;
  uint64_t v99;
  uint64_t v100;
  long long v101;
  uint64_t v102;
  int v103;
  uint64_t v104;

  uint64_t v104 = *MEMORY[0x263EF8340];
  int v11 = *a1;
  uint64_t v12 = *(void *)a4;
  int v13 = *(_DWORD *)(a4 + 8);
  uint64_t v14 = *(void *)(a4 + 16);
  uint64_t v16 = *(void *)(a4 + 40);
  uint64_t v15 = *(void *)(a4 + 48);
  int v17 = *(_DWORD *)(a4 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(_OWORD *)(a4 + 24);
  uint64_t v55 = *(_OWORD *)(a4 + 56);
  uint64_t v19 = *(void *)(a4 + 72);
  static DynamicPropertyCache.fields(of:)(AssociatedTypeWitness, (uint64_t)&v95);
  uint64_t v21 = v95;
  uint64_t v20 = v96;
  char v22 = v97;
  int v23 = HIDWORD(v97);
  uint64_t v95 = v12;
  LODWORD(v96) = v13;
  uint64_t v98 = v53;
  uint64_t v97 = v14;
  uint64_t v99 = v16;
  unint64_t v100 = v15;
  char v101 = v55;
  unint64_t v102 = v19;
  unint64_t v103 = v17;
  uint64_t v41 = v23;
  uint64_t v42 = v11;
  uint64_t v62 = v11;
  uint64_t v52 = v21;
  uint64_t v54 = v20;
  uint64_t v79 = v21;
  long long v80 = v20;
  uint64_t v56 = v22;
  LOBYTE(v81) = v22;
  HIDWORD(v81) = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static StyleModifierType.makeStyleBody<A>(view:modifier:inputs:fields:)(v61, (uint64_t)&v63, &v62, a2, a3, (uint64_t)&v95, &v79, a5, a6, a7);
  uint64_t v60 = v61[0];
  uint64_t v39 = v63;
  int v40 = v64;
  int v51 = v65;
  uint64_t v43 = swift_getAssociatedTypeWitness();
  uint64_t v24 = v95;
  uint64_t v25 = v97;
  uint64_t v48 = v98;
  uint64_t v49 = v96;
  uint64_t v26 = *((void *)&v98 + 1);
  uint64_t v47 = DWORD1(v98);
  uint64_t v27 = v99;
  uint64_t v28 = v100;
  int v29 = DWORD1(v101);
  int v30 = DWORD2(v101);
  int v31 = HIDWORD(v101);
  int v32 = v102;
  uint64_t v45 = HIDWORD(v102);
  uint64_t v46 = v101;
  uint64_t v44 = v103;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v79 = v24;
  LODWORD(v80) = v49;
  uint64_t v81 = v25;
  uint64_t v82 = v48;
  long long v83 = v47;
  uint64_t v86 = v27;
  uint64_t v87 = v28;
  uint64_t v88 = v46;
  uint64_t v89 = v29;
  uint64_t v90 = v30;
  uint64_t v91 = v31;
  uint64_t v92 = v32;
  uint64_t v93 = v45;
  uint64_t v94 = v44;
  int v85 = HIDWORD(v26);
  unint64_t v84 = 0;
  uint64_t v62 = v60;
  long long v63 = v24;
  LODWORD(v64) = v49;
  uint64_t v65 = v25;
  uint64_t v66 = v48;
  uint64_t v67 = v47;
  uint64_t v68 = 0;
  long long v69 = HIDWORD(v26);
  uint64_t v70 = v27;
  uint64_t v71 = v28;
  uint64_t v72 = v46;
  int v73 = v29;
  uint64_t v74 = v30;
  char v75 = v31;
  uint64_t v76 = v32;
  uint64_t v77 = v45;
  int v78 = v44;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v35 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35(v61, &v62, &v63, v43, AssociatedConformanceWitness);
  unint64_t v84 = v26;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v61, (uint64_t)&v79);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v36 = v61[0];
  uint64_t v37 = v61[1];
  if ((v51 & 1) == 0)
  {
    long long v63 = v39;
    uint64_t v64 = v40;
    LODWORD(v61[0]) = v42;
    uint64_t v79 = v52;
    long long v80 = v54;
    LOBYTE(v81) = v56;
    HIDWORD(v81) = v41;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)v61, &v79, a6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a8 = v36;
  a8[1] = v37;
  return result;
}

uint64_t type metadata accessor for MakeDefaultRepresentation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for Transaction.PendingListeners.WeakListener(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_weakCopyInit();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t type metadata accessor for AnyFontModifier()
{
  return self;
}

uint64_t static ConditionallyArchivableView._makeViewList(view:inputs:)(int *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  uint64_t v7 = *(void *)a2;
  int v30 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v28 = *(void *)(a2 + 56);
  int v11 = *(_DWORD *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  char v26 = *(unsigned char *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v47);
  uint64_t v13 = v47;
  uint64_t v14 = v48;
  char v15 = v49;
  int v16 = HIDWORD(v49);
  uint64_t v47 = v7;
  uint64_t v49 = v8;
  long long v50 = *(_OWORD *)(a2 + 24);
  uint64_t v51 = v10;
  *(void *)&long long v52 = v9;
  *((void *)&v52 + 1) = v28;
  LODWORD(v48) = v30;
  int v53 = v11;
  uint64_t v54 = v12;
  char v55 = v26;
  int v23 = v16;
  int v32 = v6;
  uint64_t v29 = v13;
  uint64_t v31 = v14;
  uint64_t v35 = v13;
  uint64_t v36 = v14;
  char v27 = v15;
  LOBYTE(v37) = v15;
  HIDWORD(v37) = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static ConditionallyArchivableView.makeBody(view:inputs:fields:)((uint64_t)&v33, (uint64_t)&v44, &v32, (uint64_t)&v47, &v35, a3, a4);
  uint64_t v21 = v44;
  uint64_t v22 = v45;
  char v25 = v46;
  LODWORD(v44) = v33;
  BYTE4(v44) = v34;
  uint64_t v35 = v47;
  LODWORD(v36) = v48;
  uint64_t v37 = v49;
  long long v38 = v50;
  uint64_t v39 = v51;
  long long v40 = v52;
  int v41 = v53;
  uint64_t v42 = v54;
  char v43 = v55;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for ConditionalGraphValue();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v19 = swift_getAssociatedConformanceWitness();
  ConditionalGraphValue<>.makeViewList(inputs:)(&v35, v17, AssociatedConformanceWitness, v19);
  if ((v25 & 1) == 0)
  {
    uint64_t v44 = v21;
    uint64_t v45 = v22;
    int v33 = v6;
    uint64_t v35 = v29;
    uint64_t v36 = v31;
    LOBYTE(v37) = v27;
    HIDWORD(v37) = v23;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v33, &v35, a3);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static ConditionallyArchivableView.makeBody(view:inputs:fields:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  int v11 = *a3;
  uint64_t v13 = *a5;
  uint64_t v12 = a5[1];
  char v14 = *((unsigned char *)a5 + 16);
  int v15 = *((_DWORD *)a5 + 5);
  if (AGTypeGetKind() - 2 < 4)
  {
    uint64_t v32 = a2;
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized find<A>(_:key:)(v16);
    if (v17)
    {
      char v18 = *(unsigned char *)(v17 + 72);
      swift_release();
      if (v18)
      {
        int v37 = v11;
        uint64_t v33 = v13;
        uint64_t v34 = v12;
        char v35 = v14;
        int v36 = v15;
        uint64_t v19 = type metadata accessor for ArchivedViewBodyAccessor();
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t result = BodyAccessor.makeBody(container:inputs:fields:)(&v40, (uint64_t)&v38, (uint64_t)&v37, a4, (uint64_t)&v33, v19, WitnessTable);
        int v22 = v40;
        long long v23 = v38;
        char v24 = 1;
LABEL_7:
        char v27 = v39;
        *(_DWORD *)a1 = v22;
        *(unsigned char *)(a1 + 4) = v24;
        *(_OWORD *)uint64_t v32 = v23;
        *(unsigned char *)(v32 + 16) = v27;
        return result;
      }
    }
    else
    {
      swift_release();
    }
    ViewBodyAccessor.init()(a6, *(void *)(a7 + 8));
    int v37 = v11;
    uint64_t v33 = v13;
    uint64_t v34 = v12;
    char v35 = v14;
    int v36 = v15;
    uint64_t v25 = type metadata accessor for ViewBodyAccessor();
    uint64_t v26 = swift_getWitnessTable();
    uint64_t result = BodyAccessor.makeBody(container:inputs:fields:)(&v40, (uint64_t)&v38, (uint64_t)&v37, a4, (uint64_t)&v33, v25, v26);
    char v24 = 0;
    int v22 = v40;
    long long v23 = v38;
    goto LABEL_7;
  }
  _StringGuts.grow(_:)(70);
  v28._object = (void *)0x800000024621DBE0;
  v28._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v28);
  v29._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x6C63206120736920;
  v30._object = (void *)0xEC0000002E737361;
  String.append(_:)(v30);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ConditionalGraphValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ConditionalGraphValue<>.makeViewList(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  int v11 = *((_DWORD *)a1 + 6);
  int v12 = *((_DWORD *)a1 + 7);
  int v22 = *((_DWORD *)a1 + 8);
  int v23 = *((_DWORD *)a1 + 9);
  uint64_t v24 = a1[5];
  uint64_t v25 = a1[6];
  uint64_t v26 = a1[7];
  int v27 = *((_DWORD *)a1 + 16);
  uint64_t v28 = a1[9];
  char v29 = *((unsigned char *)a1 + 80);
  uint64_t v13 = *v4;
  char v14 = *((unsigned char *)v4 + 4);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (v14)
  {
    uint64_t v16 = *(void *)(a2 + 24);
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    v43[0] = v13;
    uint64_t v30 = v8;
    int v31 = v9;
    uint64_t v32 = v10;
    int v33 = v11;
    int v34 = v12;
    int v35 = v22;
    int v36 = v23;
    uint64_t v37 = v24;
    uint64_t v38 = v25;
    uint64_t v39 = v26;
    int v40 = v27;
    uint64_t v41 = v28;
    char v42 = v29;
    (*(void (**)(_DWORD *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v43, &v30, v16, a4);
    uint64_t v17 = v13;
    uint64_t v18 = v16;
    uint64_t v19 = a4;
  }
  else
  {
    uint64_t v20 = *(void *)(a2 + 16);
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    v43[0] = v13;
    uint64_t v30 = v8;
    int v31 = v9;
    uint64_t v32 = v10;
    int v33 = v11;
    int v34 = v12;
    int v35 = v22;
    int v36 = v23;
    uint64_t v37 = v24;
    uint64_t v38 = v25;
    uint64_t v39 = v26;
    int v40 = v27;
    uint64_t v41 = v28;
    char v42 = v29;
    (*(void (**)(_DWORD *, uint64_t *, uint64_t, uint64_t))(a3 + 32))(v43, &v30, v20, a3);
    uint64_t v17 = v13;
    uint64_t v18 = v20;
    uint64_t v19 = a3;
  }

  return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v17, v18, v19);
}

double protocol witness for static View._makeView(view:inputs:) in conformance <> StaticIf<A, B, C>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static StaticIf<>._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> _VariadicView.Tree<A, B>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VariadicView.Tree<>._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <A> Group<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static MultiView._makeView(view:inputs:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t static MultiView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 80);
  int v19 = *a1;
  uint64_t v11 = v5;
  int v12 = v6;
  uint64_t v13 = v7;
  long long v9 = *(_OWORD *)(a2 + 40);
  long long v14 = *(_OWORD *)(a2 + 24);
  long long v15 = v9;
  long long v16 = *(_OWORD *)(a2 + 56);
  uint64_t v17 = *(void *)(a2 + 72);
  int v18 = v8;
  return static View.makeImplicitRoot(view:inputs:)(&v19, &v11, a3, *(void *)(a4 + 8), a5);
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>);
    }
  }
}

unint64_t type metadata accessor for Any.Type()
{
  unint64_t result = lazy cache variable for type metadata for Any.Type;
  if (!lazy cache variable for type metadata for Any.Type)
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Any.Type);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t type metadata accessor for AccessibilityTextAttributeResolver()
{
  unint64_t result = lazy cache variable for type metadata for AccessibilityTextAttributeResolver;
  if (!lazy cache variable for type metadata for AccessibilityTextAttributeResolver)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t static ConditionallyArchivableView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  int v7 = *a1;
  uint64_t v8 = *(void *)a2;
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  int v13 = *(_DWORD *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v47);
  uint64_t v14 = v47;
  uint64_t v15 = v48;
  char v16 = v49;
  int v17 = HIDWORD(v49);
  uint64_t v47 = v8;
  uint64_t v49 = v10;
  long long v50 = *(_OWORD *)(a2 + 24);
  uint64_t v51 = v12;
  uint64_t v52 = v11;
  long long v53 = *(_OWORD *)(a2 + 56);
  uint64_t v54 = *(void *)(a2 + 72);
  LODWORD(v48) = v9;
  int v55 = v13;
  int v26 = v17;
  int v33 = v7;
  uint64_t v29 = v14;
  uint64_t v35 = v14;
  uint64_t v36 = v15;
  uint64_t v31 = v15;
  char v30 = v16;
  LOBYTE(v37) = v16;
  HIDWORD(v37) = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ConditionallyArchivableView.makeBody(view:inputs:fields:)((uint64_t)&v34, (uint64_t)&v44, &v33, (uint64_t)&v47, &v35, a3, a4);
  uint64_t v24 = v44;
  uint64_t v25 = v45;
  char v28 = v46;
  uint64_t v35 = v47;
  LODWORD(v36) = v48;
  uint64_t v37 = v49;
  long long v38 = v50;
  uint64_t v39 = v51;
  uint64_t v40 = v52;
  long long v41 = v53;
  uint64_t v42 = v54;
  int v43 = v55;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for ConditionalGraphValue();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = swift_getAssociatedConformanceWitness();
  ConditionalGraphValue<>.makeView(inputs:)(&v35, v18, AssociatedConformanceWitness, v20, (double *)&v44);
  uint64_t v21 = v44;
  uint64_t v22 = v45;
  if ((v28 & 1) == 0)
  {
    uint64_t v44 = v24;
    uint64_t v45 = v25;
    int v34 = v7;
    uint64_t v35 = v29;
    uint64_t v36 = v31;
    LOBYTE(v37) = v30;
    HIDWORD(v37) = v26;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v34, &v35, a3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a5 = v21;
  a5[1] = v22;
  return result;
}

double ConditionalGraphValue<>.makeView(inputs:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  void (*v19)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double result;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;

  long long v69 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  int v8 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1[2];
  int v11 = *((_DWORD *)a1 + 6);
  int v10 = *((_DWORD *)a1 + 7);
  int v12 = *((_DWORD *)a1 + 9);
  char v30 = *((_DWORD *)a1 + 8);
  uint64_t v31 = a1[6];
  uint64_t v32 = a1[5];
  int v13 = *((_DWORD *)a1 + 14);
  int v23 = *((_DWORD *)a1 + 15);
  uint64_t v24 = *((_DWORD *)a1 + 16);
  uint64_t v25 = *((_DWORD *)a1 + 17);
  int v26 = *((_DWORD *)a1 + 18);
  int v27 = *((_DWORD *)a1 + 19);
  char v28 = *((_DWORD *)a1 + 20);
  int v14 = *v5;
  char v15 = *((unsigned char *)v5 + 4);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  uint64_t v29 = ShouldRecordTree;
  if (v15)
  {
    uint64_t v17 = *(void *)(a2 + 24);
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    long long v53 = v7;
    uint64_t v54 = v8;
    int v55 = v9;
    uint64_t v56 = v11;
    uint64_t v57 = v10;
    uint64_t v60 = v32;
    uint64_t v61 = v31;
    uint64_t v59 = v12;
    uint64_t v62 = v13;
    long long v63 = v23;
    uint64_t v64 = v24;
    uint64_t v65 = v25;
    uint64_t v66 = v26;
    uint64_t v67 = v27;
    uint64_t v68 = v28;
    int v34 = v14;
    uint64_t v37 = v7;
    long long v38 = v8;
    uint64_t v39 = v9;
    uint64_t v40 = v11;
    long long v41 = v10;
    uint64_t v42 = 0;
    int v43 = v12;
    uint64_t v44 = v32;
    uint64_t v45 = v31;
    char v46 = v13;
    uint64_t v47 = v23;
    uint64_t v48 = v24;
    uint64_t v49 = v25;
    long long v50 = v26;
    uint64_t v51 = v27;
    uint64_t v52 = v28;
    uint64_t v18 = a4;
  }
  else
  {
    uint64_t v17 = *(void *)(a2 + 16);
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    long long v53 = v7;
    uint64_t v54 = v8;
    int v55 = v9;
    uint64_t v56 = v11;
    uint64_t v57 = v10;
    uint64_t v60 = v32;
    uint64_t v61 = v31;
    uint64_t v59 = v12;
    uint64_t v62 = v13;
    long long v63 = v23;
    uint64_t v64 = v24;
    uint64_t v65 = v25;
    uint64_t v66 = v26;
    uint64_t v67 = v27;
    uint64_t v68 = v28;
    int v34 = v14;
    uint64_t v37 = v7;
    long long v38 = v8;
    uint64_t v39 = v9;
    uint64_t v40 = v11;
    long long v41 = v10;
    uint64_t v42 = 0;
    int v43 = v12;
    uint64_t v44 = v32;
    uint64_t v45 = v31;
    char v46 = v13;
    uint64_t v47 = v23;
    uint64_t v48 = v24;
    uint64_t v49 = v25;
    long long v50 = v26;
    uint64_t v51 = v27;
    uint64_t v52 = v28;
    uint64_t v18 = a3;
  }
  int v19 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(v18 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(&v35, &v34, &v37, v17, v18);
  uint64_t v58 = v30;
  if (v29)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v35, (uint64_t)&v53);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a5 = v35;
  uint64_t result = v36;
  a5[1] = v36;
  return result;
}

uint64_t storeEnumTagSinglePayload for SectionConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyTransition()
{
  return &type metadata for AnyTransition;
}

uint64_t _ShapeStyle_RenderedShape.renderKeyedText(_:style:name:layers:)(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  int v7 = *((unsigned __int8 *)a1 + 16);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v127 = a2[3];
  uint64_t v128 = a2[2];
  uint64_t v125 = a2[5];
  uint64_t v126 = a2[4];
  uint64_t v123 = a2[7];
  uint64_t v124 = a2[6];
  uint64_t v121 = a2[9];
  uint64_t v122 = a2[8];
  char v120 = *((unsigned char *)a2 + 80);
  int v131 = *((_DWORD *)a2 + 21);
  uint64_t v119 = a2[11];
  char v118 = *((unsigned char *)a2 + 96);
  unint64_t v116 = *a3;
  uint64_t v117 = a2[13];
  double v10 = *(double *)(v4 + 120);
  double v11 = *(double *)(v4 + 128);
  int v12 = *(_DWORD *)(v4 + 228);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v14 = *Value;
  if (Value[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v15 = specialized PropertyList.Tracker.value<A>(_:for:)(v14);
    swift_release_n();
  }
  else
  {
    uint64_t v16 = swift_retain_n();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v16);
  }
  swift_release_n();
  id v132 = ResolvedStyledText.layers(for:renderer:deviceScale:)(v5, v10, v11, v15);
  unint64_t v133 = v17;
  uint64_t v19 = v18;
  double v20 = (*(double (**)(void))(*(void *)v6 + 176))();
  double v22 = v21;
  swift_beginAccess();
  double v23 = *(double *)(v6 + 168);
  double v24 = -(v22 - *(double *)(v6 + 176));
  swift_beginAccess();
  uint64_t v129 = v9;
  uint64_t v130 = v8;
  if ((*(unsigned char *)(v6 + 43) & 1) == 0) {
    double v24 = v24 - *(double *)(v6 + 104);
  }
  *(double *)&uint64_t v142 = v24;
  uint64_t v25 = (float *)MEMORY[0x263F638F0];
  double v141 = v20 - v23;
  if (v5) {
    int v26 = v7 | 0x200;
  }
  else {
    int v26 = v7;
  }
  int v189 = v26;
  uint64_t v139 = v6;
  uint64_t v140 = v19;
  if (v133)
  {
    int v27 = *(_DWORD *)(v143 + 96);
    unint64_t v28 = *(unsigned __int16 *)(v143 + 100);
    uint64_t v29 = *(void *)(v143 + 136);
    int v30 = *(_DWORD *)(v143 + 144);
    __int16 v31 = *(_WORD *)(v143 + 216);
    char v32 = *(unsigned char *)(v143 + 218);
    int v33 = *(_DWORD *)(v143 + 220);
    char v34 = *(unsigned char *)(v143 + 224);
    uint64_t v35 = *(void *)(v143 + 232);
    char v36 = *(unsigned char *)(v143 + 240);
    int v37 = *(_DWORD *)(v143 + 244);
    char v38 = *(unsigned char *)(v143 + 248);
    long long v39 = *(_OWORD *)(v143 + 16);
    long long v179 = *(_OWORD *)v143;
    long long v180 = v39;
    long long v40 = *(_OWORD *)(v143 + 48);
    long long v181 = *(_OWORD *)(v143 + 32);
    long long v182 = v40;
    long long v41 = *(_OWORD *)(v143 + 80);
    long long v183 = *(_OWORD *)(v143 + 64);
    long long v184 = v41;
    *(_DWORD *)uint64_t v185 = v27;
    unint64_t v42 = v28;
    *(_WORD *)&v185[4] = v28;
    *(_OWORD *)&v185[8] = *(_OWORD *)(v143 + 104);
    *(double *)&v185[24] = v10;
    *(double *)&long long v186 = v11;
    *((void *)&v186 + 1) = v29;
    *(_DWORD *)uint64_t v187 = v30;
    *(_OWORD *)&v187[8] = *(_OWORD *)(v143 + 152);
    *(_OWORD *)&v187[24] = *(_OWORD *)(v143 + 168);
    *(_OWORD *)&v187[40] = *(_OWORD *)(v143 + 184);
    *(_OWORD *)&v187[56] = *(_OWORD *)(v143 + 200);
    v187[74] = v32;
    *(_WORD *)&v187[72] = v31;
    *(_DWORD *)&v187[76] = v33;
    v188[0] = v34;
    *(_DWORD *)&v188[4] = v12;
    *(void *)&v188[8] = v35;
    v188[16] = v36;
    *(_DWORD *)&v188[20] = v37;
    v188[24] = v38;
    swift_unknownObjectRetain();
    outlined retain of _ShapeStyle_RenderedShape((uint64_t)&v179);
    objc_msgSend(v133, sel_boundingRect);
    CGFloat x = v190.origin.x;
    CGFloat y = v190.origin.y;
    CGFloat width = v190.size.width;
    CGFloat height = v190.size.height;
    BOOL IsNull = CGRectIsNull(v190);
    CGFloat v48 = 0.0;
    CGFloat v49 = 0.0;
    CGFloat v50 = 0.0;
    CGFloat v51 = 0.0;
    if (!IsNull)
    {
      CGFloat v48 = x;
      CGFloat v49 = y;
      CGFloat v50 = width;
      CGFloat v51 = height;
    }
    CGRect v191 = CGRectIntegral(*(CGRect *)&v48);
    double v52 = v191.origin.x;
    double v53 = v191.origin.y;
    CGFloat v54 = v191.size.width;
    CGFloat v55 = v191.size.height;
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = v133;
    *(double *)(v56 + 24) = v52;
    *(double *)(v56 + 32) = v53;
    *(unsigned char *)(v56 + 40) = 0;
    *(unsigned char *)(v56 + 48) = 1;
    *(_DWORD *)(v56 + 52) = v26 | 0xA0;
    *(_DWORD *)(v56 + 44) = 0;
    *(unsigned char *)(v56 + 56) = 3;
    swift_unknownObjectRetain();
    outlined release of _ShapeStyle_RenderedShape((uint64_t)&v179);
    uint64_t v177 = 0;
    uint64_t v176 = 0;
    char v178 = 3;
    long long v174 = 0u;
    long long v175 = 0u;
    long long v172 = 0u;
    long long v173 = 0u;
    long long v170 = 0u;
    long long v171 = 0u;
    long long v169 = 0u;
    _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)&v176, &v169, v143);
    uint64_t v57 = *(void *)(v143 + 192);
    unint64_t v58 = *(void *)(v143 + 200);
    outlined copy of DisplayList.Item.Value(v56 | 0xA000000000000000, v42);
    outlined consume of DisplayList.Item.Value(v57, v58);
    *(void *)(v143 + 192) = v56 | 0xA000000000000000;
    *(void *)(v143 + 200) = v42;
    *(void *)(v143 + 208) = 0;
    *(unsigned char *)(v143 + 218) = 0;
    *(_WORD *)(v143 + 216) = 0;
    double v59 = v53 - v141 + *(double *)(v143 + 160);
    *(double *)(v143 + 152) = *(double *)&v142 + v52 + *(double *)(v143 + 152);
    *(double *)(v143 + 160) = v59;
    *(CGFloat *)(v143 + 168) = v54;
    *(CGFloat *)(v143 + 176) = v55;
    _ShapeStyle_RenderedLayers.endLayer(shape:)(v143);
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v19 = v140;
    uint64_t v25 = (float *)MEMORY[0x263F638F0];
  }
  float v136 = v25[1];
  float v137 = *v25;
  float v60 = v25[3];
  float v135 = v25[2];
  id v138 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63880]), sel_init);
  uint64_t v61 = *(void *)(v19 + 16);
  if (v61)
  {
    int v134 = v26 | 0xE0;
    swift_bridgeObjectRetain();
    int v62 = *MEMORY[0x263F638E0];
    long long v63 = (uint64_t *)(v19 + 16 * v61 + 24);
    while (1)
    {
      uint64_t v64 = *(v63 - 1);
      if (v64 < 0) {
        break;
      }
      uint64_t v65 = *(void *)(v6 + 264);
      if ((unint64_t)v64 >= *(void *)(v65 + 16)) {
        goto LABEL_33;
      }
      uint64_t v153 = *(v63 - 1);
      uint64_t v66 = v65 + 112 * v64;
      uint64_t v67 = *(void *)(v66 + 40);
      uint64_t v164 = *v63;
      uint64_t v165 = *(void **)(v66 + 32);
      uint64_t v68 = *(void **)(v66 + 48);
      long long v69 = *(void **)(v66 + 56);
      uint64_t v70 = *(void *)(v66 + 64);
      uint64_t v71 = *(void *)(v66 + 72);
      uint64_t v161 = (uint64_t)v68;
      uint64_t v166 = v71;
      uint64_t v167 = v67;
      uint64_t v72 = *(void *)(v66 + 80);
      uint64_t v168 = *(void *)(v66 + 88);
      uint64_t v73 = *(void *)(v66 + 96);
      uint64_t v74 = *(void *)(v66 + 104);
      *(void *)&long long v162 = v73;
      *((void *)&v162 + 1) = v74;
      unsigned __int8 v75 = *(unsigned char *)(v66 + 112);
      char v163 = v75;
      unsigned int v76 = *(_DWORD *)(v66 + 116);
      uint64_t v159 = *(void *)(v66 + 120);
      uint64_t v157 = *(void *)(v66 + 136);
      uint64_t v158 = *(unsigned __int8 *)(v66 + 128);
      float v77 = (float)v64 * 0.00097656;
      uint64_t v144 = v63;
      swift_unknownObjectRetain();
      uint64_t v160 = v72;
      outlined copy of _ShapeStyle_Pack.Fill(v165, v67, v68, v69, v70, v71, v72, v168, v73, v74, v75);
      outlined copy of GraphicsBlendMode?(v159, v158);
      swift_bridgeObjectRetain();
      uint64_t v155 = v61;
      objc_msgSend(v138, sel_removeAll);
      LODWORD(v78) = -1.0;
      LODWORD(v79) = -1.0;
      *(float *)&double v80 = v77;
      LODWORD(v81) = v62;
      *(float *)&double v83 = v136;
      *(float *)&double v82 = v137;
      *(float *)&double v84 = v135;
      *(float *)&double v85 = v60;
      objc_msgSend(v138, sel_addColorReplacementFrom_to_colorSpace_, 2, v78, v79, v80, v81, v82, v83, v84, v85);
      long long v86 = *(_OWORD *)(v143 + 208);
      *(_OWORD *)&v187[48] = *(_OWORD *)(v143 + 192);
      *(_OWORD *)&v187[64] = v86;
      *(_OWORD *)uint64_t v188 = *(_OWORD *)(v143 + 224);
      *(_OWORD *)&v188[9] = *(_OWORD *)(v143 + 233);
      long long v87 = *(_OWORD *)(v143 + 144);
      long long v186 = *(_OWORD *)(v143 + 128);
      *(_OWORD *)uint64_t v187 = v87;
      long long v88 = *(_OWORD *)(v143 + 176);
      *(_OWORD *)&v187[16] = *(_OWORD *)(v143 + 160);
      *(_OWORD *)&v187[32] = v88;
      long long v89 = *(_OWORD *)(v143 + 80);
      long long v183 = *(_OWORD *)(v143 + 64);
      long long v184 = v89;
      long long v90 = *(_OWORD *)(v143 + 112);
      *(_OWORD *)uint64_t v185 = *(_OWORD *)(v143 + 96);
      *(_OWORD *)&v185[16] = v90;
      long long v91 = *(_OWORD *)(v143 + 16);
      long long v179 = *(_OWORD *)v143;
      long long v180 = v91;
      long long v92 = *(_OWORD *)(v143 + 48);
      long long v181 = *(_OWORD *)(v143 + 32);
      long long v182 = v92;
      outlined retain of _ShapeStyle_RenderedShape((uint64_t)&v179);
      id v93 = objc_msgSend(v138, sel_copyApplyingToDisplayList_, v164);
      objc_msgSend(v93, sel_boundingRect);
      double v94 = v192.origin.x;
      double v95 = v192.origin.y;
      double v96 = v192.size.width;
      double v97 = v192.size.height;
      BOOL v98 = CGRectIsNull(v192);
      if (v98) {
        double v99 = 0.0;
      }
      else {
        double v99 = v94;
      }
      if (v98) {
        double v100 = 0.0;
      }
      else {
        double v100 = v95;
      }
      if (v98) {
        double v101 = 0.0;
      }
      else {
        double v101 = v96;
      }
      if (v98) {
        double v102 = 0.0;
      }
      else {
        double v102 = v97;
      }
      unint64_t v152 = *(unsigned __int16 *)&v185[4];
      uint64_t v151 = *(void *)&v187[40];
      CGRect v193 = CGRectIntegral(*(CGRect *)&v99);
      double v103 = v193.origin.x;
      double v104 = v193.origin.y;
      CGFloat v105 = v193.size.width;
      CGFloat v106 = v193.size.height;
      uint64_t v107 = swift_allocObject();
      *(void *)(v107 + 16) = v93;
      *(double *)(v107 + 24) = v103;
      *(double *)(v107 + 32) = v104;
      *(unsigned char *)(v107 + 40) = 0;
      *(_DWORD *)(v107 + 44) = 0;
      *(unsigned char *)(v107 + 48) = 1;
      *(_DWORD *)(v107 + 52) = v134;
      *(unsigned char *)(v107 + 56) = 3;
      outlined release of _ShapeStyle_RenderedShape((uint64_t)&v179);
      uint64_t v176 = v153;
      uint64_t v177 = 0;
      char v178 = 1;
      *(void *)&long long v169 = v165;
      *((void *)&v169 + 1) = v67;
      *(void *)&long long v170 = v161;
      *((void *)&v170 + 1) = v69;
      *(void *)&long long v171 = v70;
      *((void *)&v171 + 1) = v71;
      *(void *)&long long v172 = v72;
      *((void *)&v172 + 1) = v168;
      long long v173 = v162;
      *(void *)&long long v174 = v75 | ((unint64_t)v76 << 32);
      *((void *)&v174 + 1) = v159;
      *(void *)&long long v175 = v158;
      *((void *)&v175 + 1) = v157;
      _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)&v176, &v169, v143);
      uint64_t v108 = *(void *)(v143 + 8);
      long long v154 = *(void **)v143;
      uint64_t v109 = *(void *)(v143 + 16);
      uint64_t v149 = *(void *)(v143 + 32);
      uint64_t v150 = *(void *)(v143 + 24);
      unint64_t v147 = *(void *)(v143 + 48);
      uint64_t v148 = *(void *)(v143 + 40);
      uint64_t v146 = *(void *)(v143 + 56);
      long long v145 = *(_OWORD *)(v143 + 64);
      uint64_t v110 = *(void *)(v143 + 80);
      uint64_t v111 = *(void *)(v143 + 88);
      unsigned int v112 = *(_DWORD *)(v143 + 96);
      *(double *)uint64_t v143 = *(double *)&v142 + v103;
      *(double *)(v143 + 8) = v104 - v141;
      *(CGFloat *)(v143 + 16) = v105;
      *(CGFloat *)(v143 + 24) = v106;
      *(void *)(v143 + 32) = v151;
      *(void *)(v143 + 40) = v107 | 0xA000000000000000;
      *(void *)(v143 + 48) = v152;
      *(_OWORD *)(v143 + 56) = 0u;
      *(_OWORD *)(v143 + 72) = 0u;
      *(void *)(v143 + 88) = 0;
      *(_DWORD *)(v143 + 96) = 6291456;
      outlined copy of DisplayList.Item.Value(v107 | 0xA000000000000000, v152);
      outlined consume of _ShapeStyle_RenderedShape.Shape(v154, v108, v109, v150, v149, v148, v147, v146, v145, *((uint64_t *)&v145 + 1), v110, v111, v112);
      *(void *)&long long v169 = v165;
      *((void *)&v169 + 1) = v167;
      *(void *)&long long v170 = v161;
      *((void *)&v170 + 1) = v69;
      *(void *)&long long v171 = v70;
      *((void *)&v171 + 1) = v166;
      *(void *)&long long v172 = v160;
      *((void *)&v172 + 1) = v168;
      long long v173 = v162;
      LOBYTE(v174) = v163;
      DWORD1(v174) = v76;
      *((void *)&v174 + 1) = v159;
      LOBYTE(v175) = v158;
      *((void *)&v175 + 1) = v157;
      _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v169);
      _ShapeStyle_RenderedLayers.endLayer(shape:)(v143);
      swift_unknownObjectRelease();
      swift_release();
      outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v165, v167, v161, v69, v70, v166, v160, v168, v162, v74, v163);
      outlined consume of GraphicsBlendMode?(v159, v158);
      swift_bridgeObjectRelease();
      if (v155 == 1) {
        goto LABEL_34;
      }
      uint64_t v61 = v155 - 1;
      uint64_t v6 = v139;
      long long v63 = v144 - 2;
      if (v155 - 1 > *(void *)(v140 + 16))
      {
        __break(1u);
        break;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRelease();
  }
  if (v132)
  {
    long long v169 = v116;
    LOBYTE(v170) = 0;
    *(void *)&long long v179 = v130;
    *((void *)&v179 + 1) = v129;
    *(void *)&long long v180 = v128;
    *((void *)&v180 + 1) = v127;
    *(void *)&long long v181 = v126;
    *((void *)&v181 + 1) = v125;
    *(void *)&long long v182 = v124;
    *((void *)&v182 + 1) = v123;
    *(void *)&long long v183 = v122;
    *((void *)&v183 + 1) = v121;
    LOBYTE(v184) = v120;
    DWORD1(v184) = v131;
    *((void *)&v184 + 1) = v119;
    v185[0] = v118;
    *(void *)&v185[8] = v117;
    uint64_t v113 = one-time initialization token for foregroundKeyColorAnyAlpha;
    swift_unknownObjectRetain();
    if (v113 != -1) {
      swift_once();
    }
    specialized drawStyled #1 (list:id:style:keyColor:) in _ShapeStyle_RenderedShape.renderKeyedText(_:style:name:layers:)((uint64_t)v132, (uint64_t *)&v169, (uint64_t *)&v179, v138, v143, &v189, a4, v114, *(float *)&static RBColor.foregroundKeyColorAnyAlpha, *((float *)&static RBColor.foregroundKeyColorAnyAlpha + 1), *(float *)&dword_26B111980, *(float *)&dword_26B111984, v137, v136, v135, v60, v142, COERCE__INT64(-v141));
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_unknownObjectRelease();
}

void _ShapeStyle_RenderedShape.render(style:)(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  double v1 = *(double *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 80);
  float v12 = *(float *)(a1 + 84);
  uint64_t v13 = *(void *)(a1 + 88);
  int v14 = *(unsigned __int8 *)(a1 + 96);
  double v207 = v1;
  uint64_t v208 = v7;
  uint64_t v205 = v6;
  uint64_t v206 = *(void *)(a1 + 104);
  uint64_t v210 = v8;
  uint64_t v211 = v10;
  uint64_t v209 = v9;
  uint64_t v215 = v11;
  uint64_t v195 = v13;
  uint64_t v196 = *(void **)a1;
  int v179 = v14;
  uint64_t v197 = v4;
  uint64_t v198 = (uint64_t)v3;
  uint64_t v204 = v5;
  if (v14 == 255)
  {
    outlined copy of _ShapeStyle_Pack.Fill(v2, LOBYTE(v1), v3, v4, v5, v6, v8, v7, v10, v9, v11);
    outlined copy of GraphicsBlendMode?(v13, 0xFFu);
    uint64_t v18 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v200 = static GraphicsBlendMode.normal;
    char v212 = byte_26B0EB4A0;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
    unsigned __int8 v16 = LOBYTE(v207);
    uint64_t v15 = v204;
    uint64_t v9 = v209;
    char v17 = v215;
    uint64_t v2 = v196;
    LOBYTE(v14) = -1;
  }
  else
  {
    char v212 = v14 & 1;
    uint64_t v15 = *(void *)(a1 + 32);
    unsigned __int8 v16 = LOBYTE(v1);
    outlined copy of _ShapeStyle_Pack.Fill(v2, LOBYTE(v1), v3, v4, v5, v6, v8, v7, v10, v9, v11);
    outlined copy of GraphicsBlendMode?(v13, v14);
    swift_bridgeObjectRetain();
    char v17 = v215;
    uint64_t v200 = v13;
  }
  outlined copy of GraphicsBlendMode?(v13, v14);
  uint64_t v173 = v10;
  uint64_t v19 = v198;
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v2, v16, v198, v197, v15, v6, v8, v208, v173, v9, v17);
  outlined consume of GraphicsBlendMode?(v13, v14);
  swift_bridgeObjectRelease();
  outlined consume of GraphicsBlendMode(*(void *)(v199 + 232), *(unsigned char *)(v199 + 240));
  *(void *)(v199 + 232) = v200;
  *(unsigned char *)(v199 + 240) = v212;
  float v20 = *(float *)(v199 + 244);
  *(float *)(v199 + 244) = v12 * v20;
  uint64_t v21 = v208;
  uint64_t v22 = v6;
  switch(v215)
  {
    case 1:
      uint64_t v24 = swift_retain();
      _ShapeStyle_RenderedShape.render(paint:)(v24);
      outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v2, LOBYTE(v207), v198, v197, v15, v6, v8, v208, v211, v209, 1);
      goto LABEL_125;
    case 2:
      uint64_t v25 = v8;
      float v27 = *((float *)&v2 + 1);
      float v26 = *(float *)&v2;
      float v28 = *(float *)&v207;
      if (v197 == 3 && (v198 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        outlined copy of Material.ID(v198, 3u);
        uint64_t v29 = (void *)MEMORY[0x263F8EE78];
      }
      else
      {
        outlined copy of Material.ID(v198, v197);
        if (one-time initialization token for _shared != -1) {
          swift_once();
        }
        __int16 v31 = (os_unfair_lock_s *)(static CoreMaterialCache._shared + 16);
        swift_retain();
        os_unfair_lock_lock(v31);
        double v216 = *(double *)&v198;
        LOBYTE(v217) = (_BYTE)v197;
        HIDWORD(v217) = HIDWORD(v197);
        LOWORD(v218) = v204;
        uint64_t v29 = CoreMaterialCache.subscript.getter((uint64_t)&v216);
        os_unfair_lock_unlock(v31);
        swift_release();
        uint64_t v22 = v6;
        uint64_t v21 = v208;
      }
      uint64_t v193 = v29[2];
      if (v193)
      {
        char v32 = v29 + 4;
        uint64_t v188 = v29 + 4;
        uint64_t v33 = v29[2];
        do
        {
          if (v32[12] == 9 && *(unsigned char *)(*(void *)v32 + 132) == 12)
          {
            unsigned __int8 v34 = v197;
            float v28 = 1.0;
            float v27 = 1.0;
            float v26 = 1.0;
            goto LABEL_28;
          }
          v32 += 16;
          --v33;
        }
        while (v33);
        unsigned __int8 v34 = v197;
LABEL_28:
        _ShapeStyle_RenderedShape.render(color:)(v26, v27, v28, *((float *)&v207 + 1));
        uint64_t v35 = 0;
        CGSize v175 = *(CGSize *)(MEMORY[0x263F001A0] + 16);
        CGPoint v176 = (CGPoint)*MEMORY[0x263F001A0];
        uint64_t v36 = v209;
        while (1)
        {
          unint64_t v42 = &v188[2 * v35];
          uint64_t v43 = *v42;
          uint64_t v44 = *((unsigned int *)v42 + 2);
          uint64_t v45 = *((unsigned __int8 *)v42 + 12);
          switch(*((unsigned char *)v42 + 12))
          {
            case 4:
              *(float *)(v199 + 244) = *(float *)(v199 + 244) * *(float *)&v43;
              goto LABEL_31;
            case 5:
              char v46 = v44 & 1;
              uint64_t v47 = *v42;
              uint64_t v48 = *(void *)(v199 + 232);
              char v49 = *(unsigned char *)(v199 + 240);
              outlined copy of GraphicsBlendMode(*v42, v46);
              outlined consume of GraphicsBlendMode(v48, v49);
              *(void *)(v199 + 232) = v47;
              *(unsigned char *)(v199 + 240) = v46;
              uint64_t v36 = v209;
              goto LABEL_31;
            case 9:
              if (*(unsigned char *)(v43 + 132) != 12)
              {
                uint64_t v51 = *((unsigned int *)v42 + 2);
                swift_retain();
                goto LABEL_91;
              }
              char v50 = *(unsigned char *)(v199 + 248);
              if ((v50 & 1) == 0)
              {
                swift_retain();
                uint64_t v51 = v44;
                if ((v50 & 2) != 0) {
                  goto LABEL_91;
                }
LABEL_90:
                *(unsigned char *)(v199 + 248) = v50 | 2;
                goto LABEL_91;
              }
              unint64_t v53 = *(void *)(v199 + 192);
              unint64_t v54 = *(void *)(v199 + 200);
              uint64_t v55 = *(void *)(v199 + 208);
              unsigned int v56 = *(unsigned __int16 *)(v199 + 216) | (*(unsigned __int8 *)(v199 + 218) << 16);
              unint64_t v57 = v54 >> 62;
              if (v54 >> 62 == 3 && (v56 & 0xFFFFFF) == 0 && v54 == 0xC000000000000000 && !(v55 | v53))
              {
                swift_retain();
                goto LABEL_89;
              }
              uint64_t v182 = *(unsigned __int16 *)(v199 + 100);
              uint64_t v184 = *((unsigned int *)v42 + 2);
              uint64_t v190 = *((unsigned __int8 *)v42 + 12);
              v231.CGPoint origin = v176;
              v231.CGSize size = v175;
              double v58 = *(double *)(v199 + 160);
              uint64_t v59 = *(void *)(v199 + 168);
              float v60 = *(void **)(v199 + 176);
              uint64_t v61 = *(void *)(v199 + 184);
              int v62 = *(_DWORD *)(v199 + 220);
              double v180 = *(double *)(v199 + 152);
              double v216 = v180;
              double v217 = v58;
              double v177 = v58;
              uint64_t v218 = v59;
              __int16 v219 = v60;
              uint64_t v220 = v61;
              unint64_t v221 = v53;
              unint64_t v222 = v54;
              uint64_t v223 = v55;
              uint64_t v201 = v55;
              unsigned int v63 = HIWORD(v56);
              BYTE2(v224) = BYTE2(v56);
              unsigned int v213 = v56;
              LOWORD(v224) = v56;
              HIDWORD(v224) = v62;
              swift_retain();
              DisplayList.Item.addExtent(to:)(&v231.origin.x);
              CGPoint origin = v231.origin;
              CGSize size = v231.size;
              BOOL IsNull = CGRectIsNull(v231);
              double height = 0.0;
              if (IsNull) {
                double x = 0.0;
              }
              else {
                double x = origin.x;
              }
              if (IsNull) {
                double y = 0.0;
              }
              else {
                double y = origin.y;
              }
              if (IsNull) {
                double width = 0.0;
              }
              else {
                double width = size.width;
              }
              if (!IsNull) {
                double height = size.height;
              }
              CGRect v250 = CGRectIntegral(*(CGRect *)(&height - 3));
              double v71 = v250.origin.x;
              double v72 = v250.origin.y;
              *(CGRect *)(v199 + 152) = v250;
              if (v57 == 3 && (v213 & 0xFFFFFF) == 0 && v54 == 0xC000000000000000 && !(v201 | v53))
              {
                outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
                LOBYTE(v63) = 0;
                __int16 v73 = 0;
                uint64_t v74 = MEMORY[0x263F8EE78];
LABEL_88:
                uint64_t v88 = swift_allocObject();
                *(void *)(v88 + 16) = v74;
                *(_WORD *)(v88 + 24) = v73;
                *(unsigned char *)(v88 + 26) = v63;
                *(double *)(v88 + 32) = v71 - v180;
                *(double *)(v88 + 40) = v72 - v177;
                *(unsigned char *)(v88 + 48) = 0;
                *(_DWORD *)(v88 + 52) = 0;
                *(unsigned char *)(v88 + 56) = 1;
                *(_DWORD *)(v88 + 60) = 161;
                *(unsigned char *)(v88 + 64) = 3;
                outlined consume of DisplayList.Item.Value(v53, v54);
                *(void *)(v199 + 192) = v88 | 0x9000000000000000;
                uint64_t v44 = v184;
                *(void *)(v199 + 200) = v182;
                *(void *)(v199 + 208) = 0;
                *(unsigned char *)(v199 + 218) = 0;
                *(_WORD *)(v199 + 216) = 0;
                uint64_t v45 = v190;
LABEL_89:
                v50 &= ~1u;
                *(unsigned char *)(v199 + 248) = v50;
                uint64_t v51 = v44;
                if ((v50 & 2) != 0) {
                  goto LABEL_91;
                }
                goto LABEL_90;
              }
              _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              uint64_t v74 = swift_allocObject();
              *(_OWORD *)(v74 + 16) = xmmword_2461B9DC0;
              *(void *)(v74 + 32) = 0;
              *(void *)(v74 + 40) = 0;
              *(void *)(v74 + 48) = v59;
              *(void *)(v74 + 56) = v60;
              *(void *)(v74 + 64) = v61;
              *(void *)(v74 + 72) = v53;
              *(void *)(v74 + 80) = v54;
              *(void *)(v74 + 88) = v201;
              *(unsigned char *)(v74 + 98) = v63;
              *(_WORD *)(v74 + 96) = v213;
              *(_DWORD *)(v74 + 100) = 0;
              double v216 = 0.0;
              double v217 = 0.0;
              uint64_t v218 = v59;
              __int16 v219 = v60;
              uint64_t v220 = v61;
              unint64_t v221 = v53;
              unint64_t v222 = v54;
              uint64_t v223 = v201;
              BYTE2(v224) = v63;
              LOWORD(v224) = v213;
              HIDWORD(v224) = 0;
              outlined copy of DisplayList.Item.Value(v53, v54);
              DisplayList.Item.features.getter((__int16 *)&v243);
              __int16 v73 = v243;
              LOBYTE(v63) = 0;
              switch((int)v57)
              {
                case 1:
                  uint64_t v174 = v43;
                  switch(BYTE4(v54))
                  {
                    case 2u:
                      int v76 = v53;
                      outlined copy of DisplayList.Effect(v53, v54, 2);
                      break;
                    case 7u:
                      int v76 = *(unsigned __int8 *)(v53 + 26);
                      unsigned int v75 = v213;
                      outlined copy of DisplayList.Item.Value(v53, v54);
                      outlined consume of DisplayList.Effect(v53, v54, 7);
                      swift_bridgeObjectRelease();
                      goto LABEL_87;
                    case 0x11u:
                      (*(void (**)(double *__return_ptr))(*(void *)v53 + 120))(&v216);
                      unsigned int v75 = v213;
                      outlined copy of DisplayList.Item.Value(v53, v54);
                      outlined consume of DisplayList.Effect(v53, v54, 17);
                      swift_bridgeObjectRelease();
                      int v76 = LOBYTE(v216);
LABEL_87:
                      unsigned int v63 = v76 | ((v75 & 0xFF0000) >> 16);
                      uint64_t v43 = v174;
                      goto LABEL_88;
                    default:
                      outlined copy of DisplayList.Effect(v53, v54, SBYTE4(v54));
                      swift_bridgeObjectRetain();
                      outlined consume of DisplayList.Effect(v53, v54, SBYTE4(v54));
                      swift_bridgeObjectRelease();
                      int v76 = 0;
                      break;
                  }
                  unsigned int v75 = v213;
                  goto LABEL_87;
                case 2:
                  uint64_t v77 = *(void *)(v53 + 16);
                  if (!v77) {
                    goto LABEL_76;
                  }
                  if (v77 == 1)
                  {
                    uint64_t v78 = 0;
                    LOBYTE(v63) = 0;
                  }
                  else
                  {
                    char v79 = 0;
                    char v80 = 0;
                    uint64_t v78 = v77 & 0x7FFFFFFFFFFFFFFELL;
                    double v81 = (char *)(v53 + 106);
                    uint64_t v82 = v77 & 0x7FFFFFFFFFFFFFFELL;
                    do
                    {
                      char v83 = *(v81 - 40);
                      char v84 = *v81;
                      v81 += 80;
                      v79 |= v83;
                      v80 |= v84;
                      v82 -= 2;
                    }
                    while (v82);
                    LOBYTE(v63) = v80 | v79;
                    if (v77 == v78) {
                      goto LABEL_88;
                    }
                  }
                  uint64_t v85 = v77 - v78;
                  long long v86 = (char *)(v53 + 40 * v78 + 66);
                  do
                  {
                    char v87 = *v86;
                    v86 += 40;
                    LOBYTE(v63) = v87 | v63;
                    --v85;
                  }
                  while (v85);
                  goto LABEL_88;
                case 3:
                  goto LABEL_88;
                default:
                  if (v53 >> 60 == 9) {
                    LOBYTE(v63) = *(unsigned char *)((v53 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
                  }
                  else {
LABEL_76:
                  }
                    LOBYTE(v63) = 0;
                  goto LABEL_88;
              }
            case 0x13:
              if (v43) {
                BOOL v52 = 0;
              }
              else {
                BOOL v52 = v44 == 0;
              }
              if (!v52) {
                goto LABEL_43;
              }
              goto LABEL_31;
            default:
LABEL_43:
              uint64_t v51 = *((unsigned int *)v42 + 2);
              outlined copy of DisplayList.Effect(*v42, *((_DWORD *)v42 + 2), *((unsigned char *)v42 + 12));
LABEL_91:
              unint64_t v89 = *(void *)(v199 + 192);
              unint64_t v90 = *(void *)(v199 + 200);
              uint64_t v91 = *(void *)(v199 + 208);
              int v92 = *(unsigned __int16 *)(v199 + 216) | (*(unsigned __int8 *)(v199 + 218) << 16);
              BOOL v95 = v90 >> 62 == 3 && (v92 & 0xFFFFFF) == 0 && v90 == 0xC000000000000000 && (v91 | v89) == 0;
              uint64_t v191 = v45;
              int v202 = *(unsigned __int16 *)(v199 + 216) | (*(unsigned __int8 *)(v199 + 218) << 16);
              if (v95)
              {
                uint64_t v37 = *(void *)(v199 + 192);
                uint64_t v38 = v51;
                outlined copy of DisplayList.Effect(v43, v51, v45);
                char v39 = 0;
                __int16 x_low = 0;
                uint64_t v41 = MEMORY[0x263F8EE78];
                goto LABEL_30;
              }
              break;
          }
          uint64_t v96 = *(void *)(v199 + 168);
          double v97 = *(void **)(v199 + 176);
          uint64_t v98 = v43;
          uint64_t v99 = *(void *)(v199 + 184);
          _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
          uint64_t v100 = swift_allocObject();
          char v101 = v45;
          uint64_t v41 = v100;
          *(_OWORD *)(v100 + 16) = xmmword_2461B9DC0;
          *(void *)(v100 + 32) = 0;
          *(void *)(v100 + 40) = 0;
          *(void *)(v100 + 48) = v96;
          *(void *)(v100 + 56) = v97;
          *(void *)(v100 + 64) = v99;
          *(void *)(v100 + 72) = v89;
          *(void *)(v100 + 80) = v90;
          *(void *)(v100 + 88) = v91;
          *(unsigned char *)(v100 + 98) = BYTE2(v92);
          *(_WORD *)(v100 + 96) = v92;
          *(_DWORD *)(v100 + 100) = 0;
          double v216 = 0.0;
          double v217 = 0.0;
          uint64_t v218 = v96;
          __int16 v219 = v97;
          uint64_t v220 = v99;
          unint64_t v221 = v89;
          uint64_t v43 = v98;
          unint64_t v222 = v90;
          uint64_t v223 = v91;
          BYTE2(v224) = BYTE2(v92);
          LOWORD(v224) = v92;
          HIDWORD(v224) = 0;
          outlined copy of DisplayList.Effect(v98, v51, v101);
          uint64_t v37 = v89;
          outlined copy of DisplayList.Item.Value(v89, v90);
          DisplayList.Item.features.getter((__int16 *)&v231);
          __int16 x_low = LOWORD(v231.origin.x);
          char v39 = 0;
          uint64_t v38 = v51;
          switch(v90 >> 62)
          {
            case 1uLL:
              switch(BYTE4(v90))
              {
                case 2u:
                  char v103 = v89;
                  outlined copy of DisplayList.Effect(v89, v90, 2);
                  break;
                case 7u:
                  char v103 = *(unsigned char *)(v89 + 26);
                  char v102 = BYTE2(v202);
                  outlined copy of DisplayList.Item.Value(v89, v90);
                  outlined consume of DisplayList.Effect(v89, v90, 7);
                  swift_bridgeObjectRelease();
                  goto LABEL_122;
                case 0x11u:
                  (*(void (**)(double *__return_ptr))(*(void *)v89 + 120))(&v216);
                  char v102 = BYTE2(v202);
                  outlined copy of DisplayList.Item.Value(v89, v90);
                  outlined consume of DisplayList.Effect(v89, v90, 17);
                  swift_bridgeObjectRelease();
                  char v103 = LOBYTE(v216);
LABEL_122:
                  char v39 = v103 | v102;
                  uint64_t v43 = v98;
                  goto LABEL_30;
                default:
                  outlined copy of DisplayList.Effect(v89, v90, SBYTE4(v90));
                  swift_bridgeObjectRetain();
                  outlined consume of DisplayList.Effect(v89, v90, SBYTE4(v90));
                  swift_bridgeObjectRelease();
                  char v103 = 0;
                  break;
              }
              char v102 = BYTE2(v202);
              goto LABEL_122;
            case 2uLL:
              uint64_t v104 = *(void *)(v89 + 16);
              if (!v104) {
                goto LABEL_111;
              }
              if (v104 == 1)
              {
                uint64_t v105 = 0;
                char v39 = 0;
LABEL_115:
                uint64_t v112 = v104 - v105;
                uint64_t v113 = (char *)(v89 + 40 * v105 + 66);
                do
                {
                  char v114 = *v113;
                  v113 += 40;
                  v39 |= v114;
                  --v112;
                }
                while (v112);
                goto LABEL_30;
              }
              char v106 = 0;
              char v107 = 0;
              uint64_t v105 = v104 & 0x7FFFFFFFFFFFFFFELL;
              uint64_t v108 = (char *)(v89 + 106);
              uint64_t v109 = v104 & 0x7FFFFFFFFFFFFFFELL;
              do
              {
                char v110 = *(v108 - 40);
                char v111 = *v108;
                v108 += 80;
                v106 |= v110;
                v107 |= v111;
                v109 -= 2;
              }
              while (v109);
              char v39 = v107 | v106;
              if (v104 != v105) {
                goto LABEL_115;
              }
LABEL_30:
              *(void *)(v199 + 192) = v43;
              *(void *)(v199 + 200) = v38 | (v191 << 32) | 0x4000000000000000;
              *(void *)(v199 + 208) = v41;
              *(unsigned char *)(v199 + 218) = v39;
              *(_WORD *)(v199 + 216) = x_low;
              LOBYTE(v216) = *(unsigned char *)(v199 + 224);
              DisplayList.Item.canonicalize(options:)((char *)&v216);
              outlined consume of DisplayList.Item.Value(v37, v90);
              outlined consume of DisplayList.Effect(v43, v38, v191);
              unsigned __int8 v34 = v197;
              uint64_t v19 = v198;
              uint64_t v21 = v208;
              uint64_t v36 = v209;
LABEL_31:
              if (++v35 == v193)
              {
                swift_bridgeObjectRelease();
                outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v196, LOBYTE(v207), v19, v34, v204, v205, v210, v21, v211, v36, 2);
                goto LABEL_125;
              }
              break;
            case 3uLL:
              goto LABEL_30;
            default:
              if (v89 >> 60 == 9) {
                char v39 = *(unsigned char *)((v89 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
              }
              else {
LABEL_111:
              }
                char v39 = 0;
              goto LABEL_30;
          }
        }
      }
      _ShapeStyle_RenderedShape.render(color:)(*(float *)&v2, *((float *)&v2 + 1), *(float *)&v207, *((float *)&v207 + 1));
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v2, LOBYTE(v207), v198, v197, v204, v22, v25, v21, v211, v209, 2);
LABEL_125:
      uint64_t v115 = v206;
      uint64_t v116 = *(void *)(v206 + 16);
      if (!v116) {
        return;
      }
      uint64_t v117 = *(void *)(v199 + 184);
      __int16 v118 = *(_WORD *)(v199 + 100);
      char v119 = *(unsigned char *)(v199 + 224);
      if (one-time initialization token for normal != -1) {
        swift_once();
      }
      uint64_t v120 = static GraphicsBlendMode.normal;
      char v121 = byte_26B0EB4A0;
      uint64_t v243 = v117;
      __int16 v244 = v118;
      char v245 = v119;
      uint64_t v246 = MEMORY[0x263F8EE78];
      uint64_t v247 = MEMORY[0x263F8EE78];
      uint64_t v248 = static GraphicsBlendMode.normal;
      __int16 v249 = byte_26B0EB4A0;
      uint64_t v236 = v117;
      __int16 v237 = v118;
      char v238 = v119;
      uint64_t v239 = MEMORY[0x263F8EE78];
      uint64_t v240 = MEMORY[0x263F8EE78];
      uint64_t v241 = static GraphicsBlendMode.normal;
      __int16 v242 = byte_26B0EB4A0;
      uint64_t v122 = *(void *)(v199 + 232);
      char v123 = *(unsigned char *)(v199 + 240);
      uint64_t v124 = v211;
      if ((v123 & 1) == 0)
      {
        float v125 = *((float *)&v207 + 1);
        if ((byte_26B0EB4A0 & 1) == 0)
        {
          swift_bridgeObjectRetain_n();
          outlined copy of GraphicsBlendMode(v120, 0);
          outlined consume of GraphicsBlendMode(v122, 0);
          outlined consume of GraphicsBlendMode(v120, 0);
          BOOL v126 = v122 == v120;
          goto LABEL_133;
        }
LABEL_137:
        outlined copy of GraphicsBlendMode(v120, v121);
        swift_bridgeObjectRetain_n();
        outlined copy of GraphicsBlendMode(v120, v121);
        outlined copy of GraphicsBlendMode(v120, v121);
        outlined consume of GraphicsBlendMode(v122, v123);
        outlined consume of GraphicsBlendMode(v120, v121);
        outlined consume of GraphicsBlendMode(v122, v123);
        char v127 = 0;
        goto LABEL_138;
      }
      float v125 = *((float *)&v207 + 1);
      if ((byte_26B0EB4A0 & 1) == 0)
      {
        swift_unknownObjectRetain_n();
        goto LABEL_137;
      }
      outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, 1);
      swift_bridgeObjectRetain_n();
      outlined copy of GraphicsBlendMode(v120, 1);
      outlined copy of GraphicsBlendMode(v120, 1);
      outlined copy of GraphicsBlendMode(v122, 1);
      outlined consume of GraphicsBlendMode(v122, 1);
      outlined consume of GraphicsBlendMode(v120, 1);
      BOOL v126 = v122 == v120;
LABEL_133:
      char v127 = v126;
LABEL_138:
      char v235 = v127;
      BOOL v178 = v125 == 1.0;
      swift_bridgeObjectRetain();
      uint64_t v128 = 0;
      do
      {
        uint64_t v131 = v115 + v128;
        if ((*(unsigned char *)(v115 + v128 + 77) & 1) == 0)
        {
          char v189 = *(unsigned char *)(v131 + 76);
          uint64_t v192 = v128;
          uint64_t v194 = v116;
          if ((v189 & 8) != 0) {
            float v132 = v20 * *(float *)(v131 + 80);
          }
          else {
            float v132 = *(float *)(v199 + 244);
          }
          uint64_t v133 = *(void *)(v131 + 88);
          uint64_t v203 = v133;
          unsigned __int8 v134 = *(unsigned char *)(v131 + 96);
          unsigned __int8 v214 = v134;
          int v187 = *(_DWORD *)(v131 + 72);
          CGFloat v136 = *(double *)(v131 + 56);
          uint64_t v135 = *(void *)(v131 + 64);
          CGFloat v137 = *(double *)(v131 + 48);
          unsigned int v186 = *(_DWORD *)(v131 + 40);
          unsigned int v185 = *(_DWORD *)(v131 + 44);
          unsigned int v183 = *(_DWORD *)(v131 + 32);
          unsigned int v181 = *(_DWORD *)(v131 + 36);
          outlined copy of GraphicsBlendMode?(v133, v134);
          outlined copy of GraphicsBlendMode?(v133, v134);
          outlined copy of _ShapeStyle_Pack.Fill(v196, LOBYTE(v207), (void *)v198, v197, v204, v205, v210, v208, v124, v209, v215);
          outlined copy of GraphicsBlendMode?(v195, v179);
          swift_bridgeObjectRetain();
          outlined copy of _ShapeStyle_Pack.Fill(v196, LOBYTE(v207), (void *)v198, v197, v204, v205, v210, v208, v211, v209, v215);
          swift_bridgeObjectRetain();
          outlined copy of GraphicsBlendMode?(v133, v134);
          outlined consume of GraphicsBlendMode?(v195, v179);
          *(void *)&v231.origin.double x = __PAIR64__(v181, v183);
          *(void *)&v231.origin.double y = __PAIR64__(v185, v186);
          v231.size.double width = v137;
          v231.size.double height = v136;
          uint64_t v232 = v135;
          int v233 = v187;
          char v234 = v189;
          outlined copy of _ShapeStyle_Pack.Fill(v196, LOBYTE(v207), (void *)v198, v197, v204, v205, v210, v208, v211, v209, v215);
          outlined copy of GraphicsBlendMode?(v133, v134);
          outlined consume of GraphicsBlendMode?(v133, v134);
          outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v196, LOBYTE(v207), v198, v197, v204, v205, v210, v208, v211, v209, v215);
          char v138 = 0;
          double v216 = *(double *)&v196;
          double v217 = v207;
          uint64_t v218 = v198;
          __int16 v219 = v197;
          uint64_t v220 = v204;
          unint64_t v221 = v205;
          uint64_t v139 = v205;
          unint64_t v222 = v210;
          uint64_t v223 = v208;
          uint64_t v140 = v211;
          uint64_t v224 = v211;
          uint64_t v225 = v209;
          char v226 = v215;
          float v227 = v132;
          uint64_t v228 = v133;
          unsigned __int8 v229 = v134;
          float v141 = *(float *)(v199 + 244);
          uint64_t v230 = v206;
          if (v141 == 1.0)
          {
            uint64_t v129 = (uint64_t)v196;
            if (v12 == 1.0)
            {
              uint64_t v142 = static GraphicsBlendMode.normal;
              char v143 = byte_26B0EB4A0;
              unsigned __int8 v144 = v179;
              if (v179 == 255)
              {
                outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
                uint64_t v146 = static GraphicsBlendMode.normal;
                int v145 = byte_26B0EB4A0;
                uint64_t v148 = v209;
                uint64_t v147 = v210;
                if ((v143 & 1) == 0) {
                  goto LABEL_150;
                }
              }
              else
              {
                int v145 = byte_26B0EB4A0;
                uint64_t v146 = static GraphicsBlendMode.normal;
                uint64_t v142 = v195;
                uint64_t v148 = v209;
                uint64_t v147 = v210;
                if ((v179 & 1) == 0)
                {
LABEL_150:
                  if (v145)
                  {
                    uint64_t v149 = v146;
                    char v150 = 0;
                    char v151 = 1;
LABEL_160:
                    outlined copy of _ShapeStyle_Pack.Fill(v196, LOBYTE(v207), (void *)v198, v197, v204, v205, v210, v208, v211, v148, v215);
                    unsigned __int8 v144 = v179;
                    outlined copy of GraphicsBlendMode?(v195, v179);
                    swift_bridgeObjectRetain();
                    outlined copy of GraphicsBlendMode?(v195, v179);
                    outlined copy of GraphicsBlendMode(v149, v151);
                    outlined consume of GraphicsBlendMode(v142, v150);
                    outlined consume of GraphicsBlendMode(v149, v151);
                    uint64_t v140 = v211;
                    outlined consume of GraphicsBlendMode(v142, v150);
LABEL_161:
                    char v152 = 0;
LABEL_162:
                    char v153 = v215;
                    goto LABEL_163;
                  }
                  outlined copy of _ShapeStyle_Pack.Fill(v196, LOBYTE(v207), (void *)v198, v197, v204, v205, v147, v208, v211, v148, v215);
                  outlined copy of GraphicsBlendMode?(v195, v179);
                  swift_bridgeObjectRetain();
                  outlined copy of GraphicsBlendMode?(v195, v179);
                  outlined consume of GraphicsBlendMode(v142, 0);
                  outlined consume of GraphicsBlendMode(v146, 0);
                  char v152 = 0;
                  char v153 = v215;
                  if (v142 != v146)
                  {
LABEL_163:
                    uint64_t v139 = v205;
                    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v196, LOBYTE(v207), v198, v197, v204, v205, v210, v208, v140, v209, v153);
                    outlined consume of GraphicsBlendMode?(v195, v144);
                    swift_bridgeObjectRelease();
                    char v138 = v152;
                    goto LABEL_140;
                  }
                  goto LABEL_157;
                }
              }
              if (!v145)
              {
                uint64_t v149 = v146;
                swift_unknownObjectRetain();
                char v151 = 0;
                char v150 = 1;
                goto LABEL_160;
              }
              outlined copy of _ShapeStyle_Pack.Fill(v196, LOBYTE(v207), (void *)v198, v197, v204, v205, v147, v208, v211, v148, v215);
              outlined copy of GraphicsBlendMode?(v195, v179);
              swift_bridgeObjectRetain();
              outlined copy of GraphicsBlendMode?(v195, v179);
              outlined copy of GraphicsBlendMode(v146, 1);
              outlined consume of GraphicsBlendMode(v142, 1);
              outlined consume of GraphicsBlendMode(v146, 1);
              if (v142 != v146) {
                goto LABEL_161;
              }
LABEL_157:
              char v153 = v215;
              char v152 = v178;
              switch(v215)
              {
                case 1:
                  long long v154 = *(uint64_t (**)(uint64_t))(*(void *)v196 + 104);
                  uint64_t v155 = swift_retain();
                  char v152 = v154(v155);
                  char v153 = 1;
                  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v196, LOBYTE(v207), v198, v197, v204, v205, v210, v208, v211, v209, 1);
                  break;
                case 2:
                case 3:
                case 4:
                case 5:
                  goto LABEL_161;
                case 6:
                  char v152 = 1;
                  goto LABEL_162;
                default:
                  goto LABEL_163;
              }
              goto LABEL_163;
            }
          }
          else
          {
            uint64_t v129 = (uint64_t)v196;
          }
LABEL_140:
          _ShapeStyle_RenderedShape.render(shadow:style:above:below:opaqueFill:mayAdjustItem:)((int *)&v231, (uint64_t)&v216, (uint64_t)&v236, (uint64_t)&v243, v138 & 1, &v235);
          outlined consume of GraphicsBlendMode?(v203, v214);
          outlined consume of _ShapeStyle_Pack.Fill(v129, LOBYTE(v207), v198, v197, v204, v139, v210, v208, v140, v209, v215);
          outlined consume of GraphicsBlendMode?(v203, v214);
          uint64_t v130 = v129;
          uint64_t v115 = v206;
          swift_bridgeObjectRelease();
          uint64_t v124 = v140;
          outlined consume of _ShapeStyle_Pack.Fill(v130, LOBYTE(v207), v198, v197, v204, v205, v210, v208, v140, v209, v215);
          outlined consume of GraphicsBlendMode?(v203, v214);
          swift_bridgeObjectRelease();
          uint64_t v128 = v192;
          uint64_t v116 = v194;
        }
        v128 += 72;
        --v116;
      }
      while (v116);
      swift_bridgeObjectRelease();
      if (!*(void *)(v246 + 16) && !*(void *)(v247 + 16) && !*(void *)(v239 + 16) && !*(void *)(v240 + 16))
      {
LABEL_187:
        uint64_t v170 = v241;
        char v171 = v242;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of GraphicsBlendMode(v170, v171);
        uint64_t v172 = v248;
        LOBYTE(v170) = v249;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v168 = v172;
        char v169 = v170;
        goto LABEL_183;
      }
      uint64_t v156 = *(void *)(v199 + 232);
      int v157 = *(unsigned __int8 *)(v199 + 240);
      if (v156) {
        int v158 = 1;
      }
      else {
        int v158 = *(unsigned __int8 *)(v199 + 240);
      }
      if (v158 == 1)
      {
        double v216 = *(double *)(v199 + 232);
        LODWORD(v217) = v157;
        BYTE4(v217) = 5;
        _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v216);
        uint64_t v159 = static GraphicsBlendMode.normal;
        char v160 = byte_26B0EB4A0;
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
        outlined consume of GraphicsBlendMode(v156, v157);
        *(void *)(v199 + 232) = v159;
        *(unsigned char *)(v199 + 240) = v160;
        float v161 = *(float *)(v199 + 244);
        if (v161 != 1.0)
        {
LABEL_176:
          *(void *)&double v216 = LODWORD(v161);
          LODWORD(v217) = 0;
          BYTE4(v217) = 4;
          _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v216);
          *(_DWORD *)(v199 + 244) = 1065353216;
          if ((v158 & 1) == 0) {
            goto LABEL_177;
          }
        }
        goto LABEL_180;
      }
      float v161 = *(float *)(v199 + 244);
      if (v161 != 1.0) {
        goto LABEL_176;
      }
LABEL_177:
      char v162 = *(unsigned char *)(v199 + 248);
      if ((v162 & 2) == 0 && (v242 & 0x100) == 0 && HIBYTE(v249) != 1)
      {
        push #1 (layers:above:) in _ShapeStyle_RenderedShape.render(style:)(&v247, 0, v199);
        push #1 (layers:above:) in _ShapeStyle_RenderedShape.render(style:)(&v240, 1, v199);
        if ((v162 & 1) == 0) {
          *(unsigned char *)(v199 + 248) = v162 | 1;
        }
        goto LABEL_187;
      }
LABEL_180:
      char v163 = *(unsigned char *)(v199 + 248);
      if (v163)
      {
        LOWORD(v216) = *(_WORD *)(v199 + 100);
        DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)&v216);
        *(unsigned char *)(v199 + 248) = v163 & 0xFE;
      }
      CompositedItemAccumulator.commitPendingItems()();
      CompositedItemAccumulator.commitPendingItems()();
      push #1 (layers:above:) in _ShapeStyle_RenderedShape.render(style:)(&v246, 0, v199);
      push #1 (layers:above:) in _ShapeStyle_RenderedShape.render(style:)(&v239, 1, v199);
      uint64_t v164 = v241;
      char v165 = v242;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of GraphicsBlendMode(v164, v165);
      uint64_t v166 = v248;
      char v167 = v249;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v168 = v166;
      char v169 = v167;
LABEL_183:
      outlined consume of GraphicsBlendMode(v168, v169);
      return;
    case 3:
      double v216 = *(double *)&v2;
      LOBYTE(v217) = LOBYTE(v207);
      HIDWORD(v217) = HIDWORD(v207);
      _ShapeStyle_RenderedShape.render(material:)((uint64_t)&v216);
      goto LABEL_125;
    case 4:
      _ShapeStyle_RenderedShape.render(color:)(1.0, 1.0, 1.0, 1.0);
      *(double *)&uint64_t v30 = COERCE_DOUBLE(swift_allocObject());
      *(_DWORD *)(v30 + 16) = v2;
      *(void *)(v30 + 20) = 0;
      *(_DWORD *)(v30 + 28) = 0;
      *(void *)(v30 + 32) = HIDWORD(v2);
      *(_DWORD *)(v30 + 40) = v2;
      *(void *)(v30 + 44) = 0;
      *(_DWORD *)(v30 + 52) = LODWORD(v207);
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = v2;
      *(_DWORD *)(v30 + 68) = 0;
      *(_DWORD *)(v30 + 72) = HIDWORD(v207);
      *(_OWORD *)(v30 + 76) = xmmword_2461C6A90;
      *(_DWORD *)(v30 + 92) = 0;
      goto LABEL_17;
    case 5:
      _ShapeStyle_RenderedShape.render(color:)(1.0, 1.0, 1.0, 1.0);
      *(double *)&uint64_t v30 = COERCE_DOUBLE(swift_allocObject());
      *(_DWORD *)(v30 + 16) = v196;
      *(_DWORD *)(v30 + 20) = HIDWORD(v2);
      *(double *)(v30 + 24) = v207;
      *(double *)(v30 + 32) = *(double *)&v198;
      *(void *)(v30 + 40) = v197;
      *(void *)(v30 + 48) = v204;
      *(void *)(v30 + 56) = v6;
      *(void *)(v30 + 64) = v8;
      *(void *)(v30 + 72) = v208;
      *(void *)(v30 + 80) = v211;
      *(void *)(v30 + 88) = v209;
LABEL_17:
      *(unsigned char *)(v30 + 132) = 12;
      double v216 = *(double *)&v30;
      LODWORD(v217) = 0;
      BYTE4(v217) = 9;
      _ShapeStyle_RenderedShape.render(effect:)((uint64_t)&v216);
      swift_release();
      goto LABEL_125;
    case 6:
      goto LABEL_125;
    default:
      float v23 = *((float *)&v207 + 1);
      if (!*(void *)(v206 + 16))
      {
        float v23 = (float)(v12 * v20) * *((float *)&v207 + 1);
        *(_DWORD *)(v199 + 244) = 1065353216;
      }
      _ShapeStyle_RenderedShape.render(color:)(*(float *)&v2, *((float *)&v2 + 1), *(float *)&v207, v23);
      goto LABEL_125;
  }
}

void _ShapeStyle_RenderedShape.render(color:)(float a1, float a2, float a3, float a4)
{
  uint64_t v5 = v4;
  if (a4 == 0.0)
  {
LABEL_2:
    uint64_t v7 = v5 + 17;
    uint64_t v6 = *((void *)v5 + 17);
    if (!v6) {
      return;
    }
    goto LABEL_3;
  }
  float64x2_t v9 = *(float64x2_t *)v4;
  CGFloat v11 = v4[2];
  CGFloat v10 = v4[3];
  uint64_t v12 = *((void *)v5 + 4);
  uint64_t v13 = *((void *)v5 + 5);
  unint64_t v14 = *((void *)v5 + 6);
  uint64_t v15 = *((void *)v5 + 7);
  uint64_t v16 = *((void *)v5 + 8);
  unint64_t v17 = *((unsigned int *)v5 + 24);
  switch((v17 >> 21) & 7)
  {
    case 1uLL:
      uint64_t v26 = swift_allocObject();
      uint64_t v20 = v26 | 0x1000000000000000;
      *(void *)(v26 + 16) = 0;
      *(void *)(v26 + 24) = 0;
      break;
    case 2uLL:
      char rect = LOBYTE(v9.f64[1]);
      uint64_t v44 = *((void *)v5 + 10);
      uint64_t v46 = *((void *)v5 + 9);
      unint64_t v27 = LODWORD(a1) | ((unint64_t)LODWORD(a2) << 32);
      unint64_t v28 = LODWORD(a3) | ((unint64_t)LODWORD(a4) << 32);
      uint64_t v29 = *((void *)v5 + 11);
      float64x2_t v57 = v9;
      uint64_t v30 = swift_allocObject();
      *(float64_t *)(v30 + 16) = v57.f64[0];
      *(unsigned char *)(v30 + 24) = LOBYTE(v57.f64[1]);
      *(CGFloat *)(v30 + 32) = v11;
      *(CGFloat *)(v30 + 40) = v10;
      *(void *)(v30 + 48) = v12;
      *(unsigned char *)(v30 + 56) = v13;
      *(void *)(v30 + 60) = v27;
      *(void *)(v30 + 68) = v28;
      *(unsigned char *)(v30 + 76) = 0;
      *(void *)(v30 + 80) = v16;
      *(void *)(v30 + 88) = v46;
      *(void *)(v30 + 96) = v44;
      *(void *)(v30 + 104) = v29;
      *(unsigned char *)(v30 + 112) = v17;
      *(unsigned char *)(v30 + 113) = BYTE1(v17) & 1;
      *(unsigned char *)(v30 + 114) = BYTE2(v17) & 0x1F;
      uint64_t v20 = v30 | 0x3000000000000000;
      *(unsigned char *)(v30 + 115) = BYTE3(v17);
      outlined copy of GraphicsImage.Contents?(*(id *)&v57.f64[0], rect);
      break;
    case 3uLL:
      uint64_t v40 = *((void *)v5 + 11);
      uint64_t v45 = *((void *)v5 + 10);
      uint64_t v47 = *((void *)v5 + 9);
      float64x2_t v31 = v9;
      CGFloat recta = v9.f64[1];
      uint64_t v41 = *(void *)&v11;
      CGFloat v32 = v5[19];
      CGFloat v33 = v5[20];
      CGFloat v58 = v9.f64[0];
      outlined copy of DisplayList.Item.Value(v13, v14);
      v62.origin.double x = v58;
      v62.origin.double y = recta;
      v62.size.double width = v11;
      v62.size.double height = v10;
      *(CGRect *)(v5 + 19) = CGRectOffset(v62, v32, v33);
      uint64_t v34 = *((void *)v5 + 24);
      unint64_t v35 = *((void *)v5 + 25);
      outlined copy of DisplayList.Item.Value(v13, v14);
      outlined consume of DisplayList.Item.Value(v34, v35);
      *((void *)v5 + 24) = v13;
      *((void *)v5 + 25) = v14;
      *((void *)v5 + 26) = v15;
      *((unsigned char *)v5 + 218) = BYTE2(v16);
      *((_WORD *)v5 + 108) = v16;
      if (a1 == 1.0 && a2 == 1.0 && a3 == 1.0 && a4 == 1.0)
      {
        outlined consume of _ShapeStyle_RenderedShape.Shape(*(void **)&v31.f64[0], *(uint64_t *)&v31.f64[1], v41, *(uint64_t *)&v10, v12, v13, v14, v15, v16, v47, v45, v40, v17);
      }
      else
      {
        uint64_t v36 = swift_allocObject();
        v37.i64[0] = LODWORD(a1);
        v37.i64[1] = LODWORD(a3);
        *(int8x16_t *)(v36 + 16) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(LODWORD(a4), LODWORD(a2)), 0x20uLL), v37);
        *(_OWORD *)(v36 + 32) = 0u;
        *(_OWORD *)(v36 + 48) = 0u;
        *(_OWORD *)(v36 + 64) = 0u;
        *(_OWORD *)(v36 + 80) = 0u;
        *(_OWORD *)(v36 + 96) = 0u;
        *(_OWORD *)(v36 + 112) = 0u;
        *(_DWORD *)(v36 + 128) = 0;
        *(unsigned char *)(v36 + 132) = 5;
        uint64_t v59 = v36;
        int v60 = 0;
        char v61 = 9;
        _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v59);
        outlined consume of _ShapeStyle_RenderedShape.Shape(*(void **)&v31.f64[0], *(uint64_t *)&v31.f64[1], v41, *(uint64_t *)&v10, v12, v13, v14, v15, v16, v47, v45, v40, v17);
        swift_release();
      }
      goto LABEL_2;
    case 4uLL:
      goto LABEL_2;
    default:
      float64x2_t v56 = *(float64x2_t *)v5;
      if (*((void *)v5 + 4))
      {
        type metadata accessor for _AnyResolvedPaint<Color.Resolved>();
        uint64_t v18 = (float *)swift_allocObject();
        v18[4] = a1;
        v18[5] = a2;
        v18[6] = a3;
        v18[7] = a4;
        uint64_t v19 = swift_allocObject();
        *(float64x2_t *)(v19 + 16) = v56;
        *(CGFloat *)(v19 + 32) = v11;
        *(CGFloat *)(v19 + 40) = v10;
        *(unsigned char *)(v19 + 48) = v12;
        *(void *)(v19 + 56) = v18;
        *(unsigned char *)(v19 + 64) = BYTE1(v12) & 1;
        *(unsigned char *)(v19 + 65) = BYTE2(v12) & 1;
        uint64_t v20 = v19 | 0x4000000000000000;
        uint64_t v22 = *(void *)&v56.f64[1];
        uint64_t v21 = *(void *)&v56.f64[0];
        uint64_t v23 = *(void *)&v11;
        uint64_t v24 = *(void *)&v10;
        unsigned __int8 v25 = v12;
      }
      else
      {
        uint64_t v38 = swift_allocObject();
        *(float *)(v38 + 16) = a1;
        *(float *)(v38 + 20) = a2;
        *(float *)(v38 + 24) = a3;
        *(float *)(v38 + 28) = a4;
        uint64_t v20 = v38 | 0x1000000000000000;
        *(float64x2_t *)(v5 + 19) = vaddq_f64(*(float64x2_t *)(v5 + 19), v56);
        v5[21] = v11;
        v5[22] = v10;
        uint64_t v22 = *(void *)&v56.f64[1];
        uint64_t v21 = *(void *)&v56.f64[0];
        uint64_t v23 = *(void *)&v11;
        uint64_t v24 = *(void *)&v10;
        unsigned __int8 v25 = 0;
      }
      outlined copy of Path.Storage(v21, v22, v23, v24, v25);
      break;
  }
  uint64_t v39 = *((unsigned __int16 *)v5 + 50);
  outlined consume of DisplayList.Item.Value(*((void *)v5 + 24), *((void *)v5 + 25));
  *((void *)v5 + 24) = v20;
  *((void *)v5 + 25) = v39;
  v5[26] = 0.0;
  *((unsigned char *)v5 + 218) = 0;
  *((_WORD *)v5 + 108) = 0;
  uint64_t v7 = v5 + 17;
  uint64_t v6 = *((void *)v5 + 17);
  if (v6)
  {
LABEL_3:
    int v8 = *((_DWORD *)v5 + 36);
    uint64_t v59 = v6;
    int v60 = v8;
    char v61 = 17;
    _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v59);
    swift_release();
    *uint64_t v7 = 0;
    *((_DWORD *)v5 + 36) = 0;
  }
}

uint64_t Text.ResolvedProperties.addCustomStyle(_:)(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 24);
  char v123 = *(void **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  float v11 = *(float *)(a1 + 84);
  uint64_t v107 = *(void *)(a1 + 88);
  int v108 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v115 = v4;
  uint64_t v116 = v3;
  uint64_t v118 = v5;
  uint64_t v119 = *(void *)a1;
  char v122 = *(unsigned char *)(a1 + 80);
  uint64_t v117 = v6;
  uint64_t v120 = v8;
  uint64_t v121 = v7;
  uint64_t v113 = v9;
  uint64_t v114 = v10;
  if (v122) {
    goto LABEL_20;
  }
  unsigned __int8 v12 = *(unsigned char *)(a1 + 96);
  if (v108 == 255)
  {
    unsigned __int8 v27 = v3;
    unint64_t v28 = *(void **)(a1 + 24);
    uint64_t v29 = *(void **)a1;
    uint64_t v30 = *(void *)(a1 + 32);
    uint64_t v31 = *(void *)(a1 + 40);
    uint64_t v32 = *(void *)(a1 + 64);
    uint64_t v33 = *(void *)(a1 + 72);
    outlined copy of _ShapeStyle_Pack.Fill(v2, v3, v123, v4, v5, v6, v7, v8, v9, v10, 0);
    outlined copy of GraphicsBlendMode?(v107, 0xFFu);
    swift_bridgeObjectRetain();
    outlined copy of _ShapeStyle_Pack.Fill(v29, v27, v123, v28, v30, v31, v121, v120, v32, v33, 0);
    outlined copy of GraphicsBlendMode?(v107, 0xFFu);
    uint64_t v34 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v34 != -1) {
      swift_once();
    }
    uint64_t v133 = static GraphicsBlendMode.normal;
    char v135 = byte_26B0EB4A0;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
    LOBYTE(v14) = (_BYTE)v115;
    unsigned __int8 v13 = v116;
    uint64_t v20 = v107;
    uint64_t v22 = (uint64_t)v123;
    uint64_t v24 = v117;
    uint64_t v26 = v120;
    uint64_t v18 = v113;
    uint64_t v19 = v114;
    unsigned __int8 v12 = -1;
  }
  else
  {
    char v135 = v108 & 1;
    unsigned __int8 v13 = v3;
    unint64_t v14 = *(void **)(a1 + 24);
    uint64_t v15 = *(void **)a1;
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 64);
    uint64_t v19 = *(void *)(a1 + 72);
    outlined copy of _ShapeStyle_Pack.Fill(v2, v3, v123, v4, v5, v6, v7, v8, v9, v10, 0);
    uint64_t v20 = v107;
    outlined copy of GraphicsBlendMode?(v107, v108);
    swift_bridgeObjectRetain();
    uint64_t v21 = v15;
    uint64_t v22 = (uint64_t)v123;
    uint64_t v23 = v16;
    uint64_t v24 = v117;
    uint64_t v25 = v17;
    uint64_t v26 = v120;
    outlined copy of _ShapeStyle_Pack.Fill(v21, v13, v123, v14, v23, v117, v25, v120, v18, v19, 0);
    outlined copy of GraphicsBlendMode?(v107, v108);
    swift_bridgeObjectRetain();
    uint64_t v133 = v107;
  }
  outlined copy of GraphicsBlendMode?(v20, v12);
  outlined consume of _ShapeStyle_Pack.Fill(v119, v13, v22, v14, v118, v24, v121, v26, v18, v19, 0);
  outlined consume of GraphicsBlendMode?(v20, v12);
  swift_bridgeObjectRelease();
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v35 = static GraphicsBlendMode.normal;
  char v36 = byte_26B0EB4A0;
  if (v135)
  {
    if (byte_26B0EB4A0)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(v133, 1);
      outlined consume of GraphicsBlendMode(v35, 1);
      if (v133 == v35)
      {
LABEL_15:
        uint64_t v136 = *(void *)(v106 + 16);
        outlined consume of _ShapeStyle_Pack.Fill(v119, v116, (uint64_t)v123, v115, v118, v117, v121, v120, v113, v114, 0);
        outlined consume of GraphicsBlendMode?(v107, v108);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v10 = v114;
        uint64_t v9 = v113;
        uint64_t v8 = v120;
        uint64_t v7 = v121;
        uint64_t v6 = v117;
        uint64_t v5 = v118;
        uint64_t v4 = v115;
        uint64_t v2 = (void *)v119;
        uint64_t v3 = v116;
        uint64_t v1 = v105;
        if (!v136) {
          return result;
        }
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    swift_unknownObjectRetain();
  }
  else if ((byte_26B0EB4A0 & 1) == 0)
  {
    outlined consume of GraphicsBlendMode(v133, 0);
    outlined consume of GraphicsBlendMode(v35, 0);
    if (v133 == v35) {
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  outlined copy of GraphicsBlendMode(v35, v36);
  outlined consume of GraphicsBlendMode(v133, v135);
  outlined consume of GraphicsBlendMode(v35, v36);
  outlined consume of GraphicsBlendMode(v133, v135);
LABEL_19:
  outlined consume of _ShapeStyle_Pack.Fill(v119, v116, (uint64_t)v123, v115, v118, v117, v121, v120, v113, v114, 0);
  outlined consume of GraphicsBlendMode?(v107, v108);
  swift_bridgeObjectRelease();
  uint64_t v10 = v114;
  uint64_t v9 = v113;
  uint64_t v8 = v120;
  uint64_t v7 = v121;
  uint64_t v6 = v117;
  uint64_t v5 = v118;
  uint64_t v4 = v115;
  uint64_t v2 = (void *)v119;
  uint64_t v3 = v116;
  uint64_t v1 = v105;
LABEL_20:
  uint64_t v124 = *(void **)(v1 + 40);
  uint64_t v112 = v124[2];
  if (!v112)
  {
    uint64_t v1 = 0;
LABEL_84:
    outlined copy of _ShapeStyle_Pack.Fill(v2, v3, v123, v4, v5, v6, v7, v8, v9, v10, v122);
    outlined copy of GraphicsBlendMode?(v107, v108);
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      goto LABEL_93;
    }
    goto LABEL_85;
  }
  unint64_t v38 = 0;
  while (1)
  {
    if (v38 >= v124[2])
    {
      __break(1u);
      goto LABEL_92;
    }
    unint64_t v125 = v38;
    uint64_t v39 = (uint64_t)&v124[14 * v38 + 4];
    uint64_t v40 = *(void **)(v39 + 8);
    uint64_t v41 = *(void **)(v39 + 16);
    unint64_t v42 = *(void **)(v39 + 24);
    uint64_t v43 = *(void **)(v39 + 32);
    uint64_t v44 = *(void **)(v39 + 40);
    uint64_t v46 = *(void **)(v39 + 48);
    uint64_t v45 = *(void **)(v39 + 56);
    uint64_t v1 = *(void *)(v39 + 64);
    uint64_t v47 = *(void **)(v39 + 72);
    char v48 = *(unsigned char *)(v39 + 80);
    float v49 = *(float *)(v39 + 84);
    uint64_t v50 = *(void *)(v39 + 88);
    unsigned int v51 = *(unsigned __int8 *)(v39 + 96);
    uint64_t v52 = *(void *)(v39 + 104);
    v140[0] = *(id *)v39;
    v140[1] = v40;
    v140[2] = v41;
    v140[3] = v42;
    v140[4] = v43;
    v140[5] = v44;
    v140[6] = v46;
    v140[7] = v45;
    v140[8] = (id)v1;
    v140[9] = v47;
    char v141 = v48;
    v138[0] = v2;
    v138[1] = v3;
    v138[2] = v123;
    v138[3] = v4;
    v138[4] = v5;
    v138[5] = v6;
    v138[6] = v7;
    v138[7] = v8;
    v138[8] = v9;
    v138[9] = v10;
    char v139 = v122;
    uint64_t v131 = (uint64_t)v41;
    id v132 = v140[0];
    uint64_t v126 = (uint64_t)v45;
    unsigned __int8 v127 = v40;
    outlined copy of _ShapeStyle_Pack.Fill(v140[0], v40, v41, v42, (uint64_t)v43, (uint64_t)v44, (uint64_t)v46, (uint64_t)v45, v1, (uint64_t)v47, v48);
    uint64_t v134 = v50;
    unsigned int v130 = v51;
    outlined copy of GraphicsBlendMode?(v50, v51);
    uint64_t v137 = v52;
    swift_bridgeObjectRetain();
    if ((specialized static _ShapeStyle_Pack.Fill.== infix(_:_:)((uint64_t)v140, (uint64_t)v138) & 1) == 0)
    {
      outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v132, v127, v131, v42, (uint64_t)v43, (uint64_t)v44, (uint64_t)v46, v126, v1, (uint64_t)v47, v48);
      uint64_t v58 = v50;
      unsigned __int8 v59 = v51;
      goto LABEL_80;
    }
    char v111 = v48;
    uint64_t v53 = (uint64_t)v132;
    unsigned __int8 v54 = v127;
    if (v49 != v11)
    {
      outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v132, v127, v131, v42, (uint64_t)v43, (uint64_t)v44, (uint64_t)v46, v126, v1, (uint64_t)v47, v48);
      goto LABEL_78;
    }
    uint64_t v109 = (uint64_t)v43;
    uint64_t v110 = (uint64_t)v44;
    unsigned __int8 v55 = v42;
    uint64_t v56 = v1;
    if (v130 == 255)
    {
      unsigned __int8 v57 = v108;
      if (v108 != 255)
      {
LABEL_34:
        uint64_t v1 = v130;
        unsigned __int8 v60 = v57;
        outlined copy of GraphicsBlendMode?(v107, v57);
        outlined copy of GraphicsBlendMode?(v134, v130);
        outlined consume of GraphicsBlendMode?(v134, v130);
        outlined consume of GraphicsBlendMode?(v107, v60);
        outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v132, v127, v131, v42, v109, v110, (uint64_t)v46, v126, v56, (uint64_t)v47, v48);
        uint64_t v58 = v134;
        unsigned __int8 v59 = v130;
        goto LABEL_80;
      }
    }
    else
    {
      unsigned __int8 v57 = v108;
      if (v108 == 255) {
        goto LABEL_34;
      }
      if (v130)
      {
        uint64_t v1 = v134;
        if ((v108 & 1) == 0)
        {
          swift_unknownObjectRetain();
          unsigned __int8 v57 = v108;
          uint64_t v61 = v131;
          uint64_t v62 = (uint64_t)v47;
LABEL_71:
          char v89 = v57 & 1;
          outlined copy of GraphicsBlendMode(v107, v57 & 1);
          outlined consume of GraphicsBlendMode(v1, v130 & 1);
          outlined consume of GraphicsBlendMode(v107, v89);
          outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v132, v127, v61, v55, v109, v110, (uint64_t)v46, v126, v56, v62, v111);
          uint64_t v58 = v1;
          goto LABEL_79;
        }
        outlined copy of GraphicsBlendMode?(v107, v108);
        outlined copy of GraphicsBlendMode?(v134, v130);
        outlined consume of GraphicsBlendMode(v134, 1);
        outlined consume of GraphicsBlendMode(v107, 1);
        if (v134 != v107) {
          goto LABEL_77;
        }
      }
      else
      {
        uint64_t v1 = v134;
        uint64_t v61 = v131;
        uint64_t v62 = (uint64_t)v47;
        if (v108) {
          goto LABEL_71;
        }
        outlined consume of GraphicsBlendMode(v134, 0);
        outlined consume of GraphicsBlendMode(v107, 0);
        if (v134 != v107)
        {
LABEL_77:
          outlined consume of _ShapeStyle_Pack.Fill(v53, v54, v131, v55, v109, v110, (uint64_t)v46, v126, v56, (uint64_t)v47, v111);
LABEL_78:
          uint64_t v58 = v134;
LABEL_79:
          unsigned __int8 v59 = v130;
LABEL_80:
          outlined consume of GraphicsBlendMode?(v58, v59);
          goto LABEL_81;
        }
      }
    }
    uint64_t v63 = v137;
    uint64_t v1 = *(void *)(v137 + 16);
    uint64_t v64 = v106;
    if (v1 == *(void *)(v106 + 16)) {
      break;
    }
    uint64_t v1 = v137;
    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v132, v127, v131, v55, v109, v110, (uint64_t)v46, v126, v56, (uint64_t)v47, v48);
    outlined consume of GraphicsBlendMode?(v134, v130);
LABEL_81:
    swift_bridgeObjectRelease();
    unint64_t v38 = v125 + 1;
    uint64_t v9 = v113;
    uint64_t v4 = v115;
    uint64_t v3 = v116;
    uint64_t v5 = v118;
    uint64_t v2 = (void *)v119;
    uint64_t v6 = v117;
    uint64_t v8 = v120;
    uint64_t v7 = v121;
    uint64_t v10 = v114;
    if (v125 + 1 == v112)
    {
      uint64_t v1 = v124[2];
      goto LABEL_84;
    }
  }
  if (!v1 || v137 == v106)
  {
LABEL_90:
    outlined consume of _ShapeStyle_Pack.Fill(v53, v127, v131, v55, v109, v110, (uint64_t)v46, v126, v56, (uint64_t)v47, v111);
    outlined consume of GraphicsBlendMode?(v134, v130);
    return swift_bridgeObjectRelease();
  }
  uint64_t v65 = 0;
  unint64_t v66 = 0;
  uint64_t v103 = v56;
  uint64_t v104 = *(void *)(v137 + 16);
  while (v66 < *(void *)(v64 + 16))
  {
    uint64_t v67 = v63 + v65;
    float v68 = *(float *)(v67 + 80);
    uint64_t v69 = *(void *)(v67 + 88);
    uint64_t v70 = *(unsigned __int8 *)(v67 + 96);
    uint64_t v71 = v64 + v65;
    char v72 = *(unsigned char *)(v64 + v65 + 77);
    float v73 = *(float *)(v71 + 80);
    uint64_t v74 = *(void *)(v71 + 88);
    int v75 = *(unsigned __int8 *)(v71 + 96);
    if (*(unsigned char *)(v67 + 77))
    {
      if ((v72 & 1) == 0) {
        goto LABEL_77;
      }
    }
    else
    {
      if (v72) {
        goto LABEL_77;
      }
      uint64_t v76 = *(void *)(v67 + 32);
      uint64_t v77 = *(void *)(v71 + 32);
      if (*(float *)&v76 != *(float *)&v77) {
        goto LABEL_77;
      }
      if (*((float *)&v76 + 1) != *((float *)&v77 + 1)) {
        goto LABEL_77;
      }
      uint64_t v78 = *(void *)(v67 + 40);
      uint64_t v79 = *(void *)(v71 + 40);
      if (*(float *)&v78 != *(float *)&v79 || *((float *)&v78 + 1) != *((float *)&v79 + 1)) {
        goto LABEL_77;
      }
      if (*(double *)(v67 + 48) != *(double *)(v71 + 48)
        || *(double *)(v67 + 56) != *(double *)(v71 + 56)
        || *(double *)(v67 + 64) != *(double *)(v71 + 64))
      {
        outlined consume of _ShapeStyle_Pack.Fill(v53, v127, v131, v55, v109, v110, (uint64_t)v46, v126, v56, (uint64_t)v47, v111);
        goto LABEL_78;
      }
      unint64_t v80 = *(unsigned int *)(v67 + 72) | ((unint64_t)*(unsigned __int8 *)(v67 + 76) << 32);
      unint64_t v81 = *(unsigned int *)(v71 + 72) | ((unint64_t)*(unsigned __int8 *)(v71 + 76) << 32);
      if (*(float *)&v80 != *(float *)&v81 || BYTE4(v80) != BYTE4(v81)) {
        goto LABEL_77;
      }
    }
    if (v68 != v73) {
      goto LABEL_77;
    }
    if (v70 == 255)
    {
      uint64_t v85 = v69;
      if (v75 != 255) {
        goto LABEL_74;
      }
      outlined copy of GraphicsBlendMode?(v74, 0xFFu);
      outlined copy of GraphicsBlendMode?(v85, 0xFFu);
    }
    else
    {
      if (v75 == 255)
      {
        uint64_t v85 = v69;
LABEL_74:
        unsigned __int8 v90 = v75;
        uint64_t v128 = v74;
        uint64_t v1 = v70;
        outlined copy of GraphicsBlendMode?(v74, v75);
        outlined copy of GraphicsBlendMode?(v85, v1);
        outlined consume of GraphicsBlendMode?(v85, v1);
        outlined consume of GraphicsBlendMode?(v128, v90);
        goto LABEL_77;
      }
      if (v70)
      {
        if ((v75 & 1) == 0)
        {
          uint64_t v82 = v69;
          char v129 = v75;
          uint64_t v91 = v74;
          char v92 = v70;
          outlined copy of GraphicsBlendMode?(v69, v70);
          LOBYTE(v70) = v92;
          LOBYTE(v75) = v129;
          uint64_t v74 = v91;
LABEL_76:
          char v93 = v70 & 1;
          char v94 = (v70 & 1) == 0;
          uint64_t v1 = v74;
          outlined copy of GraphicsBlendMode?(v74, v75);
          outlined consume of GraphicsBlendMode(v82, v93);
          outlined consume of GraphicsBlendMode(v1, v94);
          goto LABEL_77;
        }
        uint64_t v86 = v69;
        uint64_t v1 = v65;
        uint64_t v87 = v74;
        unsigned __int8 v88 = v70;
        outlined copy of GraphicsBlendMode?(v74, v75);
        outlined copy of GraphicsBlendMode?(v86, v88);
        outlined consume of GraphicsBlendMode(v86, 1);
        outlined consume of GraphicsBlendMode(v87, 1);
        BOOL v84 = v86 == v87;
        uint64_t v65 = v1;
        uint64_t v53 = (uint64_t)v132;
      }
      else
      {
        uint64_t v82 = v69;
        if (v75) {
          goto LABEL_76;
        }
        uint64_t v1 = v65;
        uint64_t v83 = v74;
        outlined copy of GraphicsBlendMode?(v74, v75);
        outlined consume of GraphicsBlendMode(v82, 0);
        outlined consume of GraphicsBlendMode(v83, 0);
        BOOL v84 = v82 == v83;
        uint64_t v65 = v1;
      }
      uint64_t v56 = v103;
      if (!v84) {
        goto LABEL_77;
      }
    }
    ++v66;
    v65 += 72;
    uint64_t v64 = v106;
    uint64_t v63 = v137;
    if (v104 == v66) {
      goto LABEL_90;
    }
  }
LABEL_92:
  __break(1u);
LABEL_93:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1 + 1, 1, v124);
  uint64_t v124 = (void *)result;
LABEL_85:
  unint64_t v96 = v124[2];
  unint64_t v95 = v124[3];
  uint64_t v98 = v115;
  uint64_t v97 = v116;
  uint64_t v99 = v119;
  uint64_t v100 = v114;
  if (v96 >= v95 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v95 > 1), v96 + 1, 1, v124);
    uint64_t v100 = v114;
    uint64_t v98 = v115;
    uint64_t v99 = v119;
    uint64_t v97 = v116;
    uint64_t v124 = (void *)result;
  }
  v124[2] = v96 + 1;
  char v101 = &v124[14 * v96];
  v101[4] = v99;
  v101[5] = v97;
  v101[6] = v123;
  v101[7] = v98;
  v101[8] = v118;
  v101[9] = v117;
  v101[10] = v121;
  v101[11] = v120;
  v101[12] = v113;
  v101[13] = v100;
  *((unsigned char *)v101 + 112) = v122;
  *((float *)v101 + 29) = v11;
  v101[15] = v107;
  *((unsigned char *)v101 + 128) = v108;
  v101[17] = v106;
  *(void *)(v105 + 40) = v124;
  __int16 v102 = *(_WORD *)(v105 + 32);
  if ((v102 & 1) == 0) {
    *(_WORD *)(v105 + 32) = v102 | 1;
  }
  return result;
}

uint64_t outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 104);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)(a1 + 8), *(void *)(a1 + 16), *(void **)(a1 + 24), *(void **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  outlined copy of GraphicsBlendMode?(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of GraphicsBlendMode?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined copy of GraphicsBlendMode(result, a2 & 1);
  }
  return result;
}

id outlined copy of _ShapeStyle_Pack.Fill(id result, unsigned __int8 a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 1:
      uint64_t result = (id)swift_retain();
      break;
    case 2:
      uint64_t result = a3;
      a2 = a4;
      goto LABEL_4;
    case 3:
LABEL_4:
      uint64_t result = (id)outlined copy of Material.ID((uint64_t)result, a2);
      break;
    case 6:
      uint64_t result = a4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Material(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Material.ID(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t outlined copy of Material.ID(uint64_t a1, unsigned __int8 a2)
{
  if (a2 == 2) {
    return swift_bridgeObjectRetain();
  }
  if (a2 <= 1u) {
    return swift_retain();
  }
  return result;
}

uint64_t GraphicsContext.ResolvedShading.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void **)(a1 + 16);
  unsigned __int8 v5 = *(void **)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  char v13 = *(unsigned char *)(a1 + 80);
  float v14 = *(float *)(a1 + 84);
  uint64_t v15 = *(void *)(a1 + 88);
  int v16 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v17 = *(void *)(a1 + 104);
  if (v13) {
    goto LABEL_20;
  }
  char v44 = *(unsigned char *)(a1 + 80);
  uint64_t v54 = *(void *)(a1 + 88);
  uint64_t v45 = a2;
  uint64_t v52 = *(void *)(a1 + 32);
  uint64_t v53 = *(void *)(a1 + 8);
  uint64_t v56 = *(void *)(a1 + 64);
  unsigned __int8 v57 = *(void **)a1;
  uint64_t v49 = *(void *)(a1 + 48);
  uint64_t v50 = *(void *)(a1 + 56);
  uint64_t v47 = *(void **)(a1 + 24);
  uint64_t v48 = *(void *)(a1 + 40);
  unsigned int v51 = *(void **)(a1 + 16);
  unsigned __int8 v46 = *(unsigned char *)(a1 + 96);
  uint64_t v55 = *(void *)(a1 + 72);
  if (v16 == 255)
  {
    unsigned __int8 v30 = *(void *)(a1 + 8);
    uint64_t v31 = *(void **)(a1 + 24);
    uint64_t v32 = *(void *)(a1 + 32);
    uint64_t v33 = *(void *)(a1 + 40);
    uint64_t v34 = *(void *)(a1 + 72);
    outlined copy of _ShapeStyle_Pack.Fill(v3, v30, v6, v5, v7, v8, v9, v10, v11, v12, 0);
    outlined copy of GraphicsBlendMode?(v15, 0xFFu);
    swift_bridgeObjectRetain();
    outlined copy of _ShapeStyle_Pack.Fill(v57, v30, v6, v31, v32, v33, v9, v10, v56, v34, 0);
    outlined copy of GraphicsBlendMode?(v15, 0xFFu);
    uint64_t v35 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v35 != -1) {
      swift_once();
    }
    uint64_t v41 = static GraphicsBlendMode.normal;
    char v42 = byte_26B0EB4A0;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
    uint64_t v27 = v52;
    unsigned __int8 v29 = v53;
    LOBYTE(v25) = (_BYTE)v47;
    uint64_t v26 = v48;
    LOBYTE(v16) = -1;
  }
  else
  {
    char v42 = v16 & 1;
    uint64_t v18 = *(void **)(a1 + 24);
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void **)a1;
    uint64_t v23 = *(void *)(a1 + 64);
    uint64_t v24 = *(void *)(a1 + 72);
    outlined copy of _ShapeStyle_Pack.Fill(v3, *(void *)(a1 + 8), *(void **)(a1 + 16), v5, v7, v8, v20, v21, v11, v12, 0);
    outlined copy of GraphicsBlendMode?(v15, v16);
    swift_bridgeObjectRetain();
    uint64_t v39 = v23;
    uint64_t v40 = v24;
    uint64_t v25 = v18;
    uint64_t v10 = v21;
    uint64_t v9 = v20;
    uint64_t v26 = v19;
    uint64_t v6 = v51;
    uint64_t v27 = v52;
    unint64_t v28 = v22;
    unsigned __int8 v29 = v53;
    outlined copy of _ShapeStyle_Pack.Fill(v28, v53, v51, v25, v52, v26, v9, v10, v39, v40, 0);
    outlined copy of GraphicsBlendMode?(v15, v16);
    swift_bridgeObjectRetain();
    uint64_t v41 = v15;
  }
  outlined copy of GraphicsBlendMode?(v15, v16);
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v57, v29, (uint64_t)v6, v25, v27, v26, v9, v10, v56, v55, 0);
  outlined consume of GraphicsBlendMode?(v15, v16);
  swift_bridgeObjectRelease();
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v36 = static GraphicsBlendMode.normal;
  char v37 = byte_26B0EB4A0;
  if ((v42 & 1) == 0)
  {
    if ((byte_26B0EB4A0 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v41, 0);
      outlined consume of GraphicsBlendMode(v36, 0);
      if (v41 == v36) {
        goto LABEL_15;
      }
LABEL_19:
      uint64_t v10 = v50;
      uint64_t v6 = v51;
      uint64_t v9 = v49;
      outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v57, v53, (uint64_t)v51, v47, v52, v48, v49, v50, v56, v55, 0);
      LOBYTE(v16) = v46;
      outlined consume of GraphicsBlendMode?(v15, v46);
      swift_bridgeObjectRelease();
      uint64_t v12 = v55;
      uint64_t v11 = v56;
      unsigned __int8 v5 = v47;
      uint64_t v7 = v52;
      uint64_t v8 = v48;
      unsigned __int8 v3 = v57;
      uint64_t v4 = v53;
      a2 = v45;
      char v13 = v44;
      goto LABEL_20;
    }
LABEL_18:
    outlined copy of GraphicsBlendMode(v36, v37);
    outlined consume of GraphicsBlendMode(v41, v42);
    outlined consume of GraphicsBlendMode(v36, v37);
    outlined consume of GraphicsBlendMode(v41, v42);
    goto LABEL_19;
  }
  if (!byte_26B0EB4A0)
  {
    swift_unknownObjectRetain();
    goto LABEL_18;
  }
  swift_unknownObjectRetain();
  outlined consume of GraphicsBlendMode(v41, 1);
  outlined consume of GraphicsBlendMode(v36, 1);
  if (v41 != v36) {
    goto LABEL_19;
  }
LABEL_15:
  uint64_t v43 = *(void *)(v17 + 16);
  uint64_t v10 = v50;
  uint64_t v6 = v51;
  uint64_t v9 = v49;
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v57, v53, (uint64_t)v51, v47, v52, v48, v49, v50, v56, v55, 0);
  LOBYTE(v16) = v46;
  outlined consume of GraphicsBlendMode?(v15, v46);
  swift_bridgeObjectRelease();
  uint64_t v12 = v55;
  uint64_t v11 = v56;
  unsigned __int8 v5 = v47;
  uint64_t v7 = v52;
  uint64_t v8 = v48;
  unsigned __int8 v3 = v57;
  uint64_t v4 = v53;
  a2 = v45;
  char v13 = v44;
  if (v43)
  {
LABEL_20:
    uint64_t v58 = v3;
    uint64_t v59 = v4;
    unsigned __int8 v60 = v6;
    uint64_t v61 = v5;
    uint64_t v62 = v7;
    uint64_t v63 = v8;
    uint64_t v64 = v9;
    uint64_t v65 = v10;
    uint64_t v66 = v11;
    uint64_t v67 = v12;
    char v68 = v13;
    float v69 = v14;
    uint64_t v70 = v15;
    char v71 = v16;
    uint64_t v72 = v17;
    _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_((uint64_t)&v58);
    goto LABEL_21;
  }
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v57, v53, (uint64_t)v51, v47, v52, v48, v49, v50, v56, v55, 0);
  outlined consume of GraphicsBlendMode?(v54, v46);
  swift_bridgeObjectRelease();
  uint64_t v58 = v57;
  LODWORD(v59) = v53;
  *((float *)&v59 + 1) = v14 * *((float *)&v53 + 1);
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v58);
LABEL_21:
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v58, (uint64_t)v73);
  return outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v73, a2);
}

uint64_t outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 104);
  outlined consume of _ShapeStyle_Pack.Fill(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  outlined consume of GraphicsBlendMode?(v2, v3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of _ShapeStyle_Pack.Fill(uint64_t result, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 1:
      uint64_t result = swift_release();
      break;
    case 2:
      uint64_t result = a3;
      a2 = a4;
      goto LABEL_4;
    case 3:
LABEL_4:
      uint64_t result = outlined consume of Material.ID(result, a2);
      break;
    case 6:
      uint64_t result = MEMORY[0x270F9A828]();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of GraphicsBlendMode?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined consume of GraphicsBlendMode(result, a2 & 1);
  }
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_(uint64_t result)
{
  *(void *)(result + 96) = *(void *)(result + 96) & 0xFF0301FFLL | 0x1000000000000000;
  return result;
}

void type metadata accessor for _AnyResolvedPaint<Color.Resolved>()
{
  if (!lazy cache variable for type metadata for _AnyResolvedPaint<Color.Resolved>)
  {
    lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
    unint64_t v0 = type metadata accessor for _AnyResolvedPaint();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<Color.Resolved>);
    }
  }
}

void _ShapeStyle_RenderedShape.render(paint:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if ((*(_DWORD *)(v1 + 96) & 0xE00000) != 0)
  {
    _ShapeStyle_RenderedShape.render(color:)(1.0, 1.0, 1.0, 1.0);
    uint64_t v3 = v1 + 216;
    __int16 v36 = *(_WORD *)(v1 + 216);
    CGFloat v4 = *(double *)(v1 + 168);
    CGFloat v5 = *(double *)(v1 + 176);
    uint64_t v6 = *(void *)(v1 + 192);
    uint64_t v38 = *(void *)(v1 + 184);
    unint64_t v7 = *(void *)(v1 + 200);
    uint64_t v8 = *(void *)(v1 + 208);
    char v35 = *(unsigned char *)(v1 + 218);
    outlined copy of DisplayList.Item.Value(v6, v7);
    outlined copy of DisplayList.Item.Value(v6, v7);
    outlined copy of DisplayList.Item.Value(v6, v7);
    v53.origin.double x = 0.0;
    v53.origin.double y = 0.0;
    v53.size.double width = v4;
    v53.size.double height = v5;
    BOOL IsNull = CGRectIsNull(v53);
    if (IsNull) {
      CGFloat v10 = 0.0;
    }
    else {
      CGFloat v10 = v4;
    }
    if (IsNull) {
      CGFloat v11 = 0.0;
    }
    else {
      CGFloat v11 = v5;
    }
    if (IsNull) {
      char v12 = 6;
    }
    else {
      char v12 = 0;
    }
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    *(CGFloat *)(v13 + 32) = v10;
    *(CGFloat *)(v13 + 40) = v11;
    *(unsigned char *)(v13 + 48) = v12;
    *(void *)(v13 + 56) = a1;
    *(_WORD *)(v13 + 64) = 256;
    uint64_t v14 = v13 | 0x4000000000000000;
    unint64_t v34 = *(unsigned __int16 *)(v3 - 116);
    swift_retain();
    swift_retain();
    outlined consume of DisplayList.Item.Value(v6, v7);
    uint64_t v15 = swift_allocObject();
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    CGFloat v44 = v4;
    CGFloat v45 = v5;
    uint64_t v46 = v38;
    uint64_t v47 = v6;
    unint64_t v48 = v7;
    uint64_t v49 = v8;
    char v51 = v35;
    __int16 v50 = v36;
    int v52 = 0;
    DisplayList.init(_:)(&v42, v15 + 16);
    *(_DWORD *)(v15 + 28) = 0;
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_2461B9DC0;
    *(void *)(v16 + 32) = 0;
    *(void *)(v16 + 40) = 0;
    *(CGFloat *)(v16 + 48) = v4;
    *(CGFloat *)(v16 + 56) = v5;
    *(void *)(v16 + 64) = v38;
    *(void *)(v16 + 72) = v14;
    *(void *)(v16 + 80) = v34;
    *(void *)(v16 + 88) = 0;
    *(unsigned char *)(v16 + 98) = 0;
    *(_WORD *)(v16 + 96) = 0;
    *(_DWORD *)(v16 + 100) = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    CGFloat v44 = v4;
    CGFloat v45 = v5;
    uint64_t v46 = v38;
    uint64_t v47 = v14;
    unint64_t v48 = v34;
    uint64_t v49 = 0;
    char v51 = 0;
    __int16 v50 = 0;
    int v52 = 0;
    DisplayList.Item.features.getter(&v41);
    outlined consume of DisplayList.Item.Value(v6, v7);
    outlined consume of DisplayList.Item.Value(v6, v7);
    swift_release();
    __int16 v17 = v41;
    *(void *)(v3 - 24) = v15;
    *(void *)(v3 - 16) = 0x4000000700000000;
    *(void *)(v3 - 8) = v16;
    *(unsigned char *)(v3 + 2) = 0;
    *(_WORD *)uint64_t v3 = v17;
  }
  else
  {
    uint64_t v19 = *(void **)v1;
    uint64_t v18 = *(void *)(v1 + 8);
    uint64_t v20 = *(void *)(v1 + 16);
    uint64_t v21 = *(void *)(v1 + 24);
    unsigned int v33 = *(_DWORD *)(v1 + 96);
    uint64_t v22 = *(void *)(v1 + 32);
    unint64_t v37 = *(void *)(v2 + 48);
    uint64_t v39 = *(void *)(v2 + 40);
    uint64_t v23 = *(void *)(v2 + 64);
    uint64_t v32 = *(void *)(v2 + 56);
    uint64_t v25 = *(void *)(v2 + 72);
    uint64_t v24 = *(void *)(v2 + 80);
    uint64_t v26 = *(void *)(v2 + 88);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v19;
    *(void *)(v27 + 24) = v18;
    *(void *)(v27 + 32) = v20;
    *(void *)(v27 + 40) = v21;
    *(unsigned char *)(v27 + 48) = v22;
    *(void *)(v27 + 56) = a1;
    *(unsigned char *)(v27 + 64) = BYTE1(v22) & 1;
    *(unsigned char *)(v27 + 65) = BYTE2(v22) & 1;
    uint64_t v28 = *(unsigned __int16 *)(v2 + 100);
    uint64_t v31 = *(void *)(v2 + 192);
    unint64_t v30 = *(void *)(v2 + 200);
    *(void *)(v2 + 192) = v27 | 0x4000000000000000;
    *(void *)(v2 + 200) = v28;
    *(void *)(v2 + 208) = 0;
    *(_WORD *)(v2 + 216) = 0;
    *(unsigned char *)(v2 + 218) = 0;
    outlined copy of _ShapeStyle_RenderedShape.Shape(v19, v18, v20, v21, v22, v39, v37, v32, v23, v25, v24, v26, v33);
    outlined copy of _ShapeStyle_RenderedShape.Shape(v19, v18, v20, v21, v22, v39, v37, v32, v23, v25, v24, v26, v33);
    swift_retain();
    outlined consume of DisplayList.Item.Value(v31, v30);
    if (*(void *)(v2 + 136))
    {
      int v29 = *(_DWORD *)(v2 + 144);
      uint64_t v42 = *(void *)(v2 + 136);
      LODWORD(v43) = v29;
      BYTE4(v43) = 17;
      _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v42);
      swift_release();
      outlined consume of _ShapeStyle_RenderedShape.Shape(v19, v18, v20, v21, v22, v39, v37, v32, v23, v25, v24, v26, v33);
      *(void *)(v2 + 136) = 0;
      *(_DWORD *)(v2 + 144) = 0;
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedShape.Shape(v19, v18, v20, v21, v22, v39, v37, v32, v23, v25, v24, v26, v33);
    }
  }
}

void *CoreMaterialCache.subscript.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  __int16 v6 = *(unsigned __int8 *)(a1 + 16);
  __int16 v7 = *(unsigned __int8 *)(a1 + 17);
  uint64_t v8 = *(void *)(v1 + 8);
  if (!*(void *)(v8 + 16))
  {
    unint64_t v9 = v4 | (v5 << 32);
    __int16 v10 = v6 | (v7 << 8);
LABEL_6:
    uint64_t v16 = v3;
    char v17 = v4;
    int v18 = v5;
    char v19 = v6;
    char v20 = v7;
    uint64_t v13 = specialized CoreMaterialCache.loadEffects(style:)((uint64_t)&v16);
    outlined copy of Material.ID(v3, v4);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, v3, v9, v10, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 8) = v16;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined copy of Material.ID(*(void *)a1, v4);
  unint64_t v9 = v4 | (v5 << 32);
  __int16 v10 = v6 | (v7 << 8);
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v9, v10);
  if ((v12 & 1) == 0)
  {
    outlined consume of Material.ID(v3, v4);
    goto LABEL_6;
  }
  uint64_t v13 = *(void **)(*(void *)(v8 + 56) + 8 * v11);
  swift_bridgeObjectRetain();
LABEL_7:
  outlined consume of Material.ID(v3, v4);
  return v13;
}

unint64_t lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, char a5)
{
  __int16 v6 = (void **)v5;
  unsigned __int8 v9 = a3;
  char v12 = (void *)*v5;
  unint64_t v13 = a3 & 0xFFFFFFFF000000FFLL;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 0xFFFFFFFF000000FFLL, a4);
  uint64_t v16 = v12[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = v12[3];
  if (v20 >= v18 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v6;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a5 & 1);
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v13, a4);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  uint64_t v21 = *v6;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v15, a2, v13, a4, a1, v21);

  return outlined copy of Material.ID(a2, v9);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(void *)uint64_t v6 = a2;
  *(unsigned char *)(v6 + 8) = a3;
  *(_DWORD *)(v6 + 12) = HIDWORD(a3);
  *(_WORD *)(v6 + 16) = a4;
  *(void *)(a6[7] + 8 * result) = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t getEnumTag for StateOrBinding(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v5 = ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v5 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  uint64_t v7 = a1[v6];
  int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_13:
        unsigned int v11 = (v10 | (v8 << (8 * v6))) + 2;
        LODWORD(v7) = v10 + 2;
        if (v6 >= 4) {
          uint64_t v7 = v7;
        }
        else {
          uint64_t v7 = v11;
        }
        break;
      default:
        return v7;
    }
  }
  return v7;
}

double CGSize.outset(by:)(double a1, double a2, double a3, double a4, double a5)
{
  double v5 = a5 - (-a4 - a2);
  if (v5 < 0.0) {
    return 0.0;
  }
  else {
    return v5;
  }
}

uint64_t key path setter for EnvironmentValues.subscript<A>(_:) : <A>EnvironmentValuesA()
{
  uint64_t v0 = swift_unknownObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_unknownObjectRelease();
}

{
  uint64_t v0;
  uint64_t vars8;

  uint64_t v0 = swift_unknownObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_unknownObjectRelease();
}

uint64_t key path setter for EnvironmentValues.subscript<A>(_:) : <A><A1>EnvironmentValuesA1()
{
  uint64_t v0 = swift_unknownObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_unknownObjectRelease();
}

BOOL DynamicTypeSize.isAccessibilitySize.getter()
{
  return *v0 - 7 < 5;
}

uint64_t AnchorWriter.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void v10[2] = a3;
  void v10[3] = a4;
  v10[4] = a5;
  v10[5] = a1;
  v10[6] = a2;
  uint64_t v7 = type metadata accessor for _AnchorWritingModifier();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in AnchorWriter.value.getter, (uint64_t)v10, v7, AssociatedTypeWitness, a6);
}

uint64_t type metadata accessor for _AnchorWritingModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ChildEnvironment()
{
  type metadata accessor for _EnvironmentKeyWritingModifier();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #1 in AGSubgraphRef.willInvalidate(isInserted:)(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)AGGraphGetAttributeInfo();
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v6 = result;
  }
  else {
    uint64_t v6 = 0;
  }
  if (result) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(v6 + 16))(a1);
  }
  if (a2)
  {
    uint64_t result = swift_conformsToProtocol2();
    uint64_t v6 = result ? result : 0;
    if (result ? v4 : 0) {
      return (*(uint64_t (**)(uint64_t))(v6 + 16))(a1);
    }
  }
  return result;
}

uint64_t EventBindingBridge.deinit()
{
  swift_weakDestroy();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _AppearanceActionModifier.MergedBox.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 48);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);

  return swift_deallocClassInstance();
}

uint64_t DefaultLayoutViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t HitTestBindingResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t OpacityViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t DefaultLayoutViewResponder.deinit()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v0 + 200));
  return v0;
}

uint64_t closure #1 in AGSubgraphRef.willRemove()(uint64_t a1)
{
  uint64_t v2 = *(void *)AGGraphGetAttributeInfo();
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v4 = result;
  }
  else {
    uint64_t v4 = 0;
  }
  if (result) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(v4 + 16))(a1);
  }
  return result;
}

void protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance AppearanceEffect()
{
  AGGraphGetAttributeInfo();
  if (*(void *)(v0 + 8) != 1) {
    AppearanceEffect.disappeared()();
  }
}

Swift::Void __swiftcall AppearanceEffect.disappeared()()
{
  if (*(unsigned char *)(v0 + 40) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 8);
    if (v1 != 1)
    {
      uint64_t v2 = *(void *)(v0 + 24);
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v0 + 8));
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
      uint64_t v3 = *(void *)(v0 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v0 + 32);
        uint64_t v5 = swift_allocObject();
        *(void *)(v5 + 16) = v3;
        *(void *)(v5 + 24) = v4;
        uint64_t v6 = swift_allocObject();
        *(void *)(v6 + 16) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
        *(void *)(v6 + 24) = v5;
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
        swift_retain();
        specialized static Update.begin()();
        uint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
        *(void *)(v7 + 24) = v6;
        uint64_t v8 = one-time initialization token for actions;
        swift_retain();
        if (v8 != -1) {
          swift_once();
        }
        uint64_t v9 = static Update.actions;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        }
        unint64_t v10 = v9[2];
        unint64_t v11 = v9[3];
        unint64_t v12 = v10 + 1;
        if (v10 >= v11 >> 1)
        {
          unint64_t v17 = v10 + 1;
          char v14 = v9;
          unint64_t v15 = v9[2];
          uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v10 + 1, 1, v14);
          unint64_t v10 = v15;
          unint64_t v12 = v17;
          uint64_t v9 = v16;
        }
        v9[2] = v12;
        unint64_t v13 = &v9[2 * v10];
        v13[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
        v13[5] = v7;
        static Update.actions = v9;
        swift_bridgeObjectRelease();
        static Update.end()();
        swift_release();
        swift_release();
      }
    }
    *(unsigned char *)(v0 + 40) = 0;
  }
}

void specialized static NSRunLoop.addObserver(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CFRunLoopGetCurrent();
  if (!observer.value)
  {
    uint64_t v5 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0, (CFRunLoopObserverCallBack)@objc closure #1 in static NSRunLoop.addObserver(_:), 0);
    CFRunLoopObserverRef value = observer.value;
    observer.CFRunLoopObserverRef value = v5;

    if (!observer.value) {
      goto LABEL_18;
    }
    CFRunLoopAddObserver(v4, observer.value, (CFRunLoopMode)*MEMORY[0x263EFFE78]);
  }
  CFStringRef v7 = CFRunLoopCopyCurrentMode(v4);
  if (v7)
  {
    if (observer.value)
    {
      uint64_t v8 = (__CFString *)v7;
      if (CFRunLoopContainsObserver(v4, observer.value, v7))
      {
LABEL_9:

        goto LABEL_10;
      }
      if (observer.value)
      {
        CFRunLoopAddObserver(v4, observer.value, v8);
        goto LABEL_9;
      }
LABEL_19:
      __break(1u);
      return;
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_10:
  if (one-time initialization token for observerActions != -1) {
    swift_once();
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  swift_beginAccess();
  rawuint64_t Value = observerActions._rawValue;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  observerActions._rawuint64_t Value = rawValue;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    rawuint64_t Value = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, rawValue[2] + 1, 1, rawValue);
    observerActions._rawuint64_t Value = rawValue;
  }
  unint64_t v13 = rawValue[2];
  unint64_t v12 = rawValue[3];
  if (v13 >= v12 >> 1)
  {
    rawuint64_t Value = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, rawValue);
    observerActions._rawuint64_t Value = rawValue;
  }
  rawValue[2] = v13 + 1;
  char v14 = &rawValue[2 * v13];
  v14[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v14[5] = v9;
  swift_endAccess();
}

void PlatformDrawableContent.draw(in:size:contentsScale:state:)(CGContext *a1, uint64_t a2, double a3, double a4, double a5)
{
  CFStringRef v7 = *(void (**)(id, double, double))v5;
  unint64_t v6 = *(void *)(v5 + 8);
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v10 = *(void *)(v5 + 32);
  switch(*(unsigned char *)(v5 + 40))
  {
    case 1:
      id v23 = objc_allocWithZone((Class)CoreGraphicsContext);
      swift_retain();
      id v24 = objc_msgSend(v23, sel_initWithCGContext_, a1);
      v7(objc_msgSend(v24, sel_push), a3, a4);
      [v24 pop];

      outlined consume of PlatformDrawableContent.Storage(v7, (id)v6, v9, v8, v10, 1);
      return;
    case 2:
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      outlined copy of PlatformDrawableContent.Storage(v7, (id)v6, v9, v8, v10, 2);
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v26 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
      uint64_t v27 = static CoreGlue2.shared;
      v26(&v37);

      uint64_t v35 = v37;
      uint64_t v36 = v38;
      specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, &v35, *(uint64_t *)&a5, 0, a2, (uint64_t)v7, v6 & 0xFFFFFF, *(double *)&v9, *(double *)&v8, *(double *)&v10);
      swift_release();
      swift_release();
      unint64_t v17 = v7;
      uint64_t v18 = (void *)v6;
      uint64_t v19 = v9;
      uint64_t v20 = v8;
      uint64_t v21 = v10;
      char v22 = 2;
      goto LABEL_15;
    case 3:
      swift_unknownObjectRetain();
      CGContextTranslateCTM(a1, COERCE_CGFLOAT(v6 ^ 0x8000000000000000), COERCE_CGFLOAT(v9 ^ 0x8000000000000000));
      type metadata accessor for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>();
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
      int v29 = (void *)*MEMORY[0x263F63908];
      *(void *)(inited + 32) = *MEMORY[0x263F63908];
      *(void *)(inited + 64) = MEMORY[0x263F8EF38];
      *(double *)(inited + 40) = a5;
      id v30 = v29;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      type metadata accessor for RBDisplayListRenderKey(0);
      lazy protocol witness table accessor for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_renderInContext_options_, a1, isa);

      unint64_t v17 = v7;
      uint64_t v18 = (void *)v6;
      uint64_t v19 = v9;
      uint64_t v20 = v8;
      uint64_t v21 = v10;
      char v22 = 3;
      goto LABEL_15;
    case 4:
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      outlined copy of PlatformDrawableContent.Storage(v7, (id)v6, v9, v8, v10, 4);
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v32 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
      unsigned int v33 = static CoreGlue2.shared;
      v32(&v37);

      uint64_t v35 = v37;
      uint64_t v36 = v38;
      specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, &v35, *(uint64_t *)&a5, 0, v7, *(double *)&v9, *(double *)&v8, *(float *)&v6);
      swift_release();
      swift_release();
      unint64_t v17 = v7;
      uint64_t v18 = (void *)v6;
      uint64_t v19 = v9;
      uint64_t v20 = v8;
      uint64_t v21 = v10;
      char v22 = 4;
      goto LABEL_15;
    case 5:
      return;
    default:
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      outlined copy of PlatformDrawableContent.Storage(v7, (id)v6, v9, v8, v10, 0);
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      unint64_t v15 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
      uint64_t v16 = static CoreGlue2.shared;
      v15(&v37);

      uint64_t v35 = v37;
      uint64_t v36 = v38;
      specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, &v35, *(uint64_t *)&a5, 0, (void (*)(uint64_t *, double, double))v7, a3, a4);
      swift_release();
      swift_release();
      unint64_t v17 = v7;
      uint64_t v18 = (void *)v6;
      uint64_t v19 = v9;
      uint64_t v20 = v8;
      uint64_t v21 = v10;
      char v22 = 0;
LABEL_15:
      outlined consume of PlatformDrawableContent.Storage(v17, v18, v19, v20, v21, v22);
      return;
  }
}

uint64_t DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:content:sizeChanged:)(uint64_t a1, char *a2, uint64_t a3, unsigned int a4, double a5)
{
  char v8 = *a2;
  int v9 = *((_DWORD *)a2 + 1);
  char v10 = a2[8];
  int v11 = *((_DWORD *)a2 + 3);
  char v12 = a2[16];
  unint64_t v13 = *(void **)a3;
  char v14 = *(void **)(a3 + 8);
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(a3 + 32);
  uint64_t v29 = *(void *)a1;
  char v18 = *(unsigned char *)(a3 + 40);
  uint64_t v26 = *v5;
  uint64_t v37 = *v5;
  LOBYTE(v31) = v8;
  HIDWORD(v31) = v9;
  LOBYTE(v32) = v10;
  HIDWORD(v32) = v11;
  LOBYTE(v33) = v12;
  swift_unknownObjectRetain();
  specialized DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:)((uint64_t *)a1, (char *)&v31, a5);
  uint64_t v20 = v19;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v16;
  uint64_t v34 = v15;
  uint64_t v35 = v17;
  char v36 = v18;
  uint64_t v27 = *(uint64_t (**)(void **, void, uint64_t, uint64_t))(v20 + 40);
  uint64_t v28 = ObjectType;
  swift_unknownObjectRetain();
  outlined copy of PlatformDrawableContent.Storage(v13, v14, v16, v15, v17, v18);
  LOBYTE(v20) = v27(&v31, a4, v28, v20);
  outlined consume of PlatformDrawableContent.Storage(v13, v14, v16, v15, v17, v18);
  *(unsigned char *)(a1 + 105) = (v20 & 1) == 0;
  if (*(void *)a1 == v29)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    id v22 = (id)CoreViewLayer(v26 & 3, *(void **)a1);

    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(_WORD *)(a1 + 96) = 0;
    int64x2_t v23 = vdupq_n_s64(0x7FF0000000000000uLL);
    *(int64x2_t *)(a1 + 24) = v23;
    *(int64x2_t *)(a1 + 40) = v23;
    *(unsigned char *)(a1 + 57) = 0;
    if (one-time initialization token for infinity != -1) {
      swift_once();
    }
    uint64_t v24 = static Time.infinity;
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(a1 + 112) = v24;
  }
  return result;
}

void outlined consume of PlatformDrawableContent.Storage(void *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      swift_release();
      break;
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 3:
      swift_unknownObjectRelease();
      break;
    case 4:

      break;
    default:
      return;
  }
}

uint64_t specialized DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:)(uint64_t *a1, char *a2, double a3)
{
  void (*v18)(uint64_t *__return_ptr, uint64_t, void *);
  unsigned __int8 v19;
  int v20;
  char v21;
  int v22;
  char v23;
  void (*v24)(uint64_t *, uint64_t, void *);
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, void *, double);
  uint64_t v30;
  int v31;
  unsigned __int8 v33[4];
  int v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  char v39;
  int v40;
  char v41;

  char v5 = *a2;
  int v6 = *((_DWORD *)a2 + 1);
  char v7 = a2[8];
  int v8 = *((_DWORD *)a2 + 3);
  char v9 = a2[16];
  uint64_t v10 = *v3;
  uint64_t v11 = *a1;
  swift_getObjectType();
  uint64_t v12 = swift_conformsToProtocol2();
  if (v12) {
    unint64_t v13 = (void *)v12;
  }
  else {
    unint64_t v13 = 0;
  }
  if (v12) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  id v30 = v10;
  uint64_t v31 = v8;
  if (!v14)
  {
    swift_unknownObjectRelease();
    LOBYTE(v38) = v5;
    HIDWORD(v38) = v6;
    uint64_t v39 = v7;
    uint64_t v40 = v8;
    __int16 v41 = v9;
    uint64_t v14 = (*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFFCLL) + 112))(&v38);
    unint64_t v13 = v15;
  }
  char v16 = v5;
  uint64_t ObjectType = swift_getObjectType();
  char v18 = (void (*)(uint64_t *__return_ptr, uint64_t, void *))v13[1];
  swift_unknownObjectRetain();
  v18(&v38, ObjectType, v13);
  swift_unknownObjectRelease();
  uint64_t v19 = v38;
  uint64_t v20 = HIDWORD(v38);
  uint64_t v21 = v39;
  id v22 = v40;
  int64x2_t v23 = v41;
  LOBYTE(v38) = v16;
  HIDWORD(v38) = v6;
  uint64_t v39 = v7;
  uint64_t v40 = v31;
  __int16 v41 = v9;
  v33[0] = v19;
  uint64_t v34 = v20;
  uint64_t v35 = v21;
  char v36 = v22;
  uint64_t v37 = v23;
  if (!specialized static RasterizationOptions.== infix(_:_:)((unsigned __int8 *)&v38, v33))
  {
    LOBYTE(v38) = v16;
    HIDWORD(v38) = v6;
    uint64_t v39 = v7;
    uint64_t v40 = v31;
    __int16 v41 = v9;
    if ((((v31 & 1) == 0) ^ v22))
    {
      uint64_t v24 = (void (*)(uint64_t *, uint64_t, void *))v13[2];
      swift_unknownObjectRetain();
      v24(&v38, ObjectType, v13);
      swift_unknownObjectRelease();
    }
    else
    {
      char v25 = (*(uint64_t (**)(uint64_t *))((v30 & 0xFFFFFFFFFFFFFFFCLL) + 112))(&v38);
      unint64_t v13 = v26;
      swift_unknownObjectRelease();
      uint64_t v14 = v25;
    }
  }
  uint64_t v27 = swift_getObjectType();
  uint64_t v28 = (void (*)(uint64_t, void *, double))v13[7];
  swift_unknownObjectRetain();
  v28(v27, v13, a3);
  swift_unknownObjectRelease();
  *a1 = v14;
  return v14;
}

id outlined copy of PlatformDrawableContent.Storage(id result, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      uint64_t result = (id)swift_retain();
      break;
    case 2:
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    case 3:
      uint64_t result = (id)swift_unknownObjectRetain();
      break;
    case 4:
      uint64_t result = result;
      break;
    default:
      return result;
  }
  return result;
}

BOOL specialized static RasterizationOptions.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = *((_DWORD *)a1 + 3);
  int v3 = *((_DWORD *)a2 + 3);
  if (a1[8])
  {
    if (v2 == v3) {
      unsigned __int8 v4 = a2[8];
    }
    else {
      unsigned __int8 v4 = 0;
    }
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (a2[8]) {
      return 0;
    }
    if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1) || v2 != v3) {
      return 0;
    }
  }
  return a1[16] == a2[16];
}

uint64_t partial apply for closure #1 in DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(double a1, double a2)
{
  return closure #1 in DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(*(void **)(v2 + 16), *(void *)(v2 + 24), a1, a2, *(double *)(v2 + 40), *(double *)(v2 + 48));
}

uint64_t closure #1 in DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v12 = static TextDrawingContext.shared;
  if (a1[27])
  {
    swift_retain();
    BOOL v13 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    BOOL v13 = 0;
  }
  (*(void (**)(uint64_t, BOOL, uint64_t, uint64_t, double, double, double, double, double, double))(*a1 + 288))(1, v13, v12, a2, 0.0, 0.0, a3, a4, a5, a6);

  return swift_release();
}

void ResolvedStyledText.StringDrawing.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(char a1, char a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v10 = (void *)v9[27];
  if (!v10) {
    return;
  }
  uint64_t v11 = (double *)v9;
  swift_beginAccess();
  double v18 = *((double *)v9 + 21);
  double v19 = *((double *)v9 + 22);
  uint64_t v20 = v9 + 44;
  double v22 = v11[23];
  double v21 = v11[24];
  swift_beginAccess();
  uint64_t v23 = one-time initialization token for shared;
  id v24 = v10;
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v25 = static TextDrawingContext.shared;
  swift_retain();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v25, (uint64_t)v89, a8, a9, v18, v19, v22, v21);
  swift_endAccess();
  swift_release();
  uint64_t v26 = v11 + 25;
  swift_beginAccess();
  if (*((unsigned char *)v11 + 208) != 1) {
    goto LABEL_7;
  }
  swift_beginAccess();
  double v27 = 1.0;
  if (v11[6] != 1.0)
  {
    uint64_t v26 = v90;
LABEL_7:
    double v27 = *v26;
  }
  uint64_t v28 = 0;
  if (v27 == 1.0 && (a2 & 1) == 0)
  {
    uint64_t v28 = *v20;
    swift_unknownObjectRetain();
  }
  double v30 = *(double *)v89;
  CGFloat v29 = *(double *)&v89[1];
  double v31 = v90[3] + a5;
  swift_beginAccess();
  double v32 = v30 + v11[13];
  if (a1)
  {
    double v33 = CGRect.inset(by:)(v11[21], v11[22], v11[23], v11[24], a4, v31, v32, v29);
    double v35 = v34;
    double v32 = v36;
    CGFloat v29 = v37;
    ResolvedStyledText.StringDrawing.drawingMargins.getter();
    a4 = v33 + v38 - v11[22];
    double v31 = v35 + ResolvedStyledText.StringDrawing.drawingMargins.getter() - v11[21];
  }
  if (*((unsigned char *)v11 + 425) == 1)
  {
    double v39 = v91;
    if (v91 != INFINITY)
    {
      if (*((unsigned char *)v11 + 42))
      {
        if (*((unsigned char *)v11 + 42) == 1)
        {
          double v49 = (v32 - v91) * 0.5;
LABEL_31:
          a4 = a4 + v49;
          goto LABEL_16;
        }
        double v49 = 0.0;
        if (*((unsigned char *)v11 + 43)) {
          goto LABEL_31;
        }
      }
      else
      {
        double v49 = 0.0;
        if ((*((unsigned char *)v11 + 43) & 1) == 0) {
          goto LABEL_31;
        }
      }
      double v49 = v32 - v91;
      goto LABEL_31;
    }
  }
  double v39 = v32;
LABEL_16:
  id v40 = objc_msgSend(self, sel_current);
  if (!v40) {
    goto LABEL_22;
  }
  __int16 v41 = v40;
  id v42 = objc_msgSend(v40, sel_CGContext);

  if (!v42)
  {
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    goto LABEL_37;
  }
  uint64_t v43 = MEMORY[0x24C5269B0](v42, 0, 0);

  if (!v43 || (id v44 = (id)RBDrawingStateGetDisplayList()) == 0)
  {
LABEL_22:
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    id v42 = 0;
    goto LABEL_37;
  }
  CGFloat v45 = v44;
  id v46 = objc_msgSend(v44, sel_CGStyleHandler);
  if (v46)
  {
    id v47 = v46;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v47;
    uint64_t v76 = v48;
    uint64_t v77 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
  }
  else
  {
    uint64_t v76 = 0;
    uint64_t v77 = 0;
  }
  uint64_t v50 = *((void *)v11 + 34);
  id v42 = v45;
  if (*(void *)(v50 + 16))
  {
    id v51 = v24;
    char v52 = *((unsigned char *)v11 + 43);
    char v53 = *((unsigned char *)v11 + 44);
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v50;
    *(unsigned char *)(v54 + 24) = v53;
    *(unsigned char *)(v54 + 25) = v52;
    id v24 = v51;
    uint64_t v86 = (uint64_t)partial apply for closure #1 in ResolvedStyledText.cgStyleHandler.getter;
    uint64_t v87 = (void *)v54;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v83 = 1107296256;
    BOOL v84 = thunk for @escaping @callee_guaranteed (@unowned RBDrawingState, @unowned Int) -> ();
    uint64_t v85 = &block_descriptor_15_0;
    uint64_t v55 = _Block_copy(&aBlock);
    id v56 = v42;
    swift_bridgeObjectRetain();
    swift_release();
  }
  else
  {
    id v57 = v45;
    uint64_t v55 = 0;
  }
  objc_msgSend(v42, sel_setCGStyleHandler_, v55);
  _Block_release(v55);

LABEL_37:
  uint64_t v79 = (void **)v42;
  uint64_t v81 = v28;
  uint64_t v58 = *((void *)v11 + 2);
  int v78 = *((unsigned __int8 *)v11 + 24);
  unsigned __int8 v88 = 0;
  if (one-time initialization token for kitLink != -1) {
    swift_once();
  }
  uint64_t v59 = static NSAttributedStringKey.kitLink;
  id v60 = objc_msgSend(v24, sel_length);
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16) = &v88;
  uint64_t v62 = (void *)swift_allocObject();
  v62[2] = partial apply for closure #1 in NSAttributedString.hasLinkAttributes.getter;
  v62[3] = v61;
  uint64_t v86 = (uint64_t)_sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
  uint64_t v87 = v62;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v83 = 1107296256;
  uint64_t v63 = &v84;
  BOOL v84 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v85 = &block_descriptor_20;
  uint64_t v64 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t v65 = (uint64_t)v24;
  objc_msgSend(v24, sel_enumerateAttribute_inRange_options_usingBlock_, v59, 0, v60, 0, v64);
  _Block_release(v64);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    int v67 = v88;
    swift_release();
    uint64_t v68 = *(void *)(a3 + 16);
    uint64_t v61 = v68 + 16;
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v68 + 16));
    float v69 = *(void **)(v68 + 24);
    objc_msgSend(v69, sel_setMinimumScaleFactor_, 0.0);
    objc_msgSend(v69, sel_setScaledLineHeight_, 0.0);
    objc_msgSend(v69, sel_setScaledBaselineOffset_, 0.0);
    if (v58 <= 1) {
      uint64_t v70 = 1;
    }
    else {
      uint64_t v70 = v58;
    }
    if (v78) {
      uint64_t v71 = 0;
    }
    else {
      uint64_t v71 = v70;
    }
    objc_msgSend(v69, sel_setMaximumNumberOfLines_, v71);
    objc_msgSend(v69, sel_setCachesLayout_, 1);
    objc_msgSend(v69, sel_setLayout_, v81);
    objc_msgSend(v69, sel_setWantsNumberOfLineFragments_, 0);
    if (v67) {
      uint64_t v72 = 8;
    }
    else {
      uint64_t v72 = 0;
    }
    objc_msgSend(v69, sel_setActiveRenderers_, v72);
    uint64_t v86 = (uint64_t)closure #2 in closure #1 in TextDrawingContext.withStringDrawingContext<A>(minScaleFactor:lineLimit:kitCache:useNSLayoutManager:do:);
    uint64_t v87 = 0;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v83 = 1107296256;
    BOOL v84 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any]?, @unowned Int) -> (@owned [NSAttributedStringKey : Any]?);
    uint64_t v85 = &block_descriptor_6;
    float v73 = _Block_copy(&aBlock);
    objc_msgSend(v69, sel_setLinkTextAttributesProvider_, v73);
    _Block_release(v73);
    uint64_t v59 = *(void *)(v68 + 24);
    if (v27 == 1.0) {
      uint64_t v74 = v24;
    }
    else {
      uint64_t v74 = objc_msgSend(v24, sel__ui_attributedSubstringFromRange_scaledByScaleFactor_, 0, objc_msgSend(v24, sel_length), v27);
    }
    uint64_t v62 = v74;
    uint64_t v63 = v79;
    uint64_t v65 = (uint64_t)v77;
    if (one-time initialization token for swiftUIOptions == -1) {
      goto LABEL_53;
    }
  }
  swift_once();
LABEL_53:
  objc_msgSend(v62, sel_drawWithRect_options_context_, static NSStringDrawingOptions.swiftUIOptions, v59, a4, v31, v39, v29);

  os_unfair_lock_unlock((os_unfair_lock_t)v61);
  swift_release_n();
  if (v63)
  {
    if (v65)
    {
      uint64_t v86 = v65;
      uint64_t v87 = (void *)v76;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v83 = 1107296256;
      BOOL v84 = thunk for @escaping @callee_guaranteed (@unowned RBDrawingState, @unowned Int) -> ();
      uint64_t v85 = &block_descriptor_9;
      int v75 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
    }
    else
    {
      int v75 = 0;
    }
    objc_msgSend(v63, sel_setCGStyleHandler_, v75);
    _Block_release(v75);
    swift_unknownObjectRelease();

    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v65);
  }
  else
  {
    swift_unknownObjectRelease();

    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v65);
  }
}

void closure #1 in SafeAreaInsets.adjust(_:regions:to:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t a12, void *a13, unsigned char *a14)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)&v65);
  if (v73 == 4)
  {
    CGFloat v62 = v71;
    CGFloat v63 = v70;
    outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(&v65, v74);
    outlined init with copy of CoordinateSpace.Name((uint64_t)v74, (uint64_t)&v65);
    if (LOBYTE(v69))
    {
      if ((void)v65 == a2)
      {
        double v26 = CGRect.inset(by:)(a3, a4, a5, a6, 0.0, 0.0, v63, v62);
        double v28 = v27;
        double v30 = v29;
        double v32 = v31;
        double v33 = CGRect.inset(by:)(-a7, -a8, -a9, -a10, v26, v27, v29, v31);
        double v35 = v34;
        double v37 = v36;
        double v39 = v38;
        type metadata accessor for _ContiguousArrayStorage<CGPoint>();
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2461C6AA0;
        *(double *)(inited + 32) = v26;
        *(double *)(inited + 40) = v28;
        *(double *)(inited + 48) = v26 + v30;
        *(double *)(inited + 56) = v28;
        *(double *)(inited + 64) = v26 + v30;
        *(double *)(inited + 72) = v28 + v32;
        *(double *)(inited + 80) = v26;
        *(double *)(inited + 88) = v28 + v32;
        __int16 v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, 8, 1, (void *)inited);
        unint64_t v43 = v41[2];
        unint64_t v42 = v41[3];
        int64_t v44 = v42 >> 1;
        unint64_t v45 = v43 + 1;
        if (v42 >> 1 <= v43)
        {
          __int16 v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v41);
          unint64_t v42 = v41[3];
          int64_t v44 = v42 >> 1;
        }
        v41[2] = v45;
        id v46 = (double *)&v41[2 * v43];
        v46[4] = v33;
        v46[5] = v35;
        int64_t v47 = v43 + 2;
        if (v44 < (uint64_t)(v43 + 2))
        {
          id v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v47, 1, v41);
          int64_t v47 = v43 + 2;
          __int16 v41 = v60;
        }
        double v48 = v33 + v37;
        v41[2] = v47;
        double v49 = (double *)&v41[2 * v45];
        v49[4] = v48;
        v49[5] = v35;
        unint64_t v50 = v41[3];
        unint64_t v51 = v43 + 3;
        if ((uint64_t)(v43 + 3) > (uint64_t)(v50 >> 1))
        {
          int64_t v64 = v47;
          uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v43 + 3, 1, v41);
          int64_t v47 = v64;
          __int16 v41 = v61;
        }
        double v52 = v35 + v39;
        v41[2] = v51;
        char v53 = (double *)&v41[2 * v47];
        v53[4] = v48;
        v53[5] = v52;
        unint64_t v54 = v41[3];
        int64_t v55 = v43 + 4;
        if (v55 > (uint64_t)(v54 >> 1)) {
          __int16 v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55, 1, v41);
        }
        v41[2] = v55;
        id v56 = (double *)&v41[2 * v51];
        uint64_t v56[4] = v33;
        v56[5] = v52;
        outlined destroy of CoordinateSpace.Name((uint64_t)v74);
        *a13 = v41;
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of CoordinateSpace.Name((uint64_t)v74);
      }
    }
    else
    {
      outlined destroy of CoordinateSpace.Name((uint64_t)v74);
      outlined destroy of CoordinateSpace.Name((uint64_t)&v65);
    }
  }
  else
  {
    outlined destroy of ViewTransform.Item((uint64_t)&v65);
    outlined init with copy of ViewTransform.Item(a1, (uint64_t)&v65);
    switch(v57)
    {
      case 1:
        if (*((double *)&v65 + 1) == 0.0 && v66 == 0.0) {
          goto LABEL_31;
        }
        if (*(double *)&v65 != 0.0) {
          goto LABEL_29;
        }
        double v58 = v67;
        goto LABEL_28;
      case 2:
        double v58 = v68;
        if (v66 == 0.0 && v69 == 0.0 && v72 == 1.0) {
          goto LABEL_31;
        }
        if (*((double *)&v65 + 1) == 0.0 && v67 == 0.0) {
          goto LABEL_31;
        }
        if (*(double *)&v65 != 0.0) {
          goto LABEL_29;
        }
LABEL_28:
        if (v58 == 0.0)
        {
LABEL_31:
          if ((*a14 & 1) == 0)
          {
LABEL_32:
            if (*a13) {
              specialized MutableCollection<>._applyTransform(item:)(a1);
            }
          }
        }
        else
        {
LABEL_29:
          *a14 = 1;
        }
        break;
      case 3:
        outlined destroy of ViewTransform.Item((uint64_t)&v65);
        goto LABEL_31;
      case 4:
        outlined destroy of CoordinateSpace.Name((uint64_t)&v65);
        if (*a14) {
          return;
        }
        goto LABEL_32;
      default:
        goto LABEL_31;
    }
  }
}

uint64_t _ShapeStyle_RenderedShape.renderUnstyledText(_:layers:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  int v5 = *((unsigned __int8 *)a1 + 16);
  v91[0] = 0;
  v91[1] = 0;
  char v92 = 3;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)v91, &v62, v1);
  double v7 = *(double *)(v1 + 120);
  double v6 = *(double *)(v1 + 128);
  ResolvedStyledText.frame(in:renderer:)(v3, *(double *)(v2 + 120), *(double *)(v2 + 128));
  uint64_t v8 = *(void *)(v1 + 104);
  uint64_t v9 = *(void *)(v1 + 112);
  CGRect v94 = CGRectOffset(v93, *(CGFloat *)(v2 + 104), *(CGFloat *)(v2 + 112));
  CGFloat x = v94.origin.x;
  double y = v94.origin.y;
  CGFloat width = v94.size.width;
  CGFloat height = v94.size.height;
  *(CGRect *)(v1 + 152) = v94;
  if (ResolvedStyledText.needsRBDisplayList.getter())
  {
    double v61 = x;
    int v14 = *(_DWORD *)(v1 + 228);
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v16 = *Value;
    if (Value[1])
    {
      swift_retain_n();
      swift_retain_n();
      double v17 = specialized PropertyList.Tracker.value<A>(_:for:)(v16);
      swift_release_n();
    }
    else
    {
      uint64_t v23 = swift_retain_n();
      double v17 = specialized closure #1 in PropertyList.subscript.getter(v23);
    }
    swift_release_n();
    id v24 = ResolvedStyledText.makeRBDisplayList(for:renderer:deviceScale:)(v3, v7, v6, v17);
    int v25 = *(_DWORD *)(v1 + 96);
    int v26 = v5 | 0x200;
    uint64_t v27 = *(unsigned __int16 *)(v1 + 100);
    if (!v3) {
      int v26 = v5;
    }
    int v60 = v26;
    uint64_t v28 = *(void *)(v1 + 136);
    int v29 = *(_DWORD *)(v1 + 144);
    uint64_t v31 = *(void *)(v1 + 184);
    uint64_t v30 = *(void *)(v1 + 192);
    unint64_t v32 = *(void *)(v2 + 200);
    uint64_t v33 = *(void *)(v2 + 208);
    __int16 v34 = *(_WORD *)(v2 + 216);
    char v35 = *(unsigned char *)(v2 + 218);
    int v36 = *(_DWORD *)(v2 + 220);
    char v37 = *(unsigned char *)(v2 + 224);
    uint64_t v38 = *(void *)(v2 + 232);
    char v39 = *(unsigned char *)(v2 + 240);
    int v40 = *(_DWORD *)(v2 + 244);
    char v41 = *(unsigned char *)(v2 + 248);
    long long v42 = *(_OWORD *)(v2 + 16);
    long long v62 = *(_OWORD *)v2;
    long long v63 = v42;
    long long v43 = *(_OWORD *)(v2 + 48);
    long long v64 = *(_OWORD *)(v2 + 32);
    long long v65 = v43;
    long long v44 = *(_OWORD *)(v2 + 80);
    long long v66 = *(_OWORD *)(v2 + 64);
    long long v67 = v44;
    LODWORD(v68) = v25;
    WORD2(v68) = v27;
    *((void *)&v68 + 1) = v8;
    uint64_t v69 = v9;
    double v70 = v7;
    double v71 = v6;
    uint64_t v72 = v28;
    int v73 = v29;
    double v74 = v61;
    double v75 = y;
    CGFloat v76 = width;
    CGFloat v77 = height;
    uint64_t v78 = v31;
    uint64_t v79 = v30;
    unint64_t v80 = v32;
    uint64_t v81 = v33;
    char v83 = v35;
    __int16 v82 = v34;
    int v84 = v36;
    char v85 = v37;
    int v86 = v14;
    uint64_t v87 = v38;
    char v88 = v39;
    int v89 = v40;
    char v90 = v41;
    outlined retain of _ShapeStyle_RenderedShape((uint64_t)&v62);
    objc_msgSend(v24, sel_boundingRect);
    double v45 = v95.origin.x;
    double v46 = v95.origin.y;
    double v47 = v95.size.width;
    double v48 = v95.size.height;
    BOOL IsNull = CGRectIsNull(v95);
    double v50 = 0.0;
    if (IsNull) {
      double v51 = 0.0;
    }
    else {
      double v51 = v45;
    }
    if (IsNull) {
      double v52 = 0.0;
    }
    else {
      double v52 = v46;
    }
    if (IsNull) {
      double v53 = 0.0;
    }
    else {
      double v53 = v47;
    }
    if (!IsNull) {
      double v50 = v48;
    }
    CGRect v96 = CGRectIntegral(*(CGRect *)(&v50 - 3));
    double v54 = v96.origin.x;
    double v55 = v96.origin.y;
    CGFloat v56 = v96.size.width;
    CGFloat v57 = v96.size.height;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v24;
    *(double *)(v58 + 24) = v54;
    *(double *)(v58 + 32) = v55;
    *(unsigned char *)(v58 + 40) = 0;
    *(_DWORD *)(v58 + 44) = 0;
    *(unsigned char *)(v58 + 48) = 1;
    *(_DWORD *)(v58 + 52) = v60 | 0xA0;
    *(unsigned char *)(v58 + 56) = 3;
    outlined release of _ShapeStyle_RenderedShape((uint64_t)&v62);
    outlined consume of DisplayList.Item.Value(v30, v32);
    *(double *)(v2 + 152) = v61 + v54;
    *(double *)(v2 + 160) = y + v55;
    *(CGFloat *)(v2 + 168) = v56;
    *(CGFloat *)(v2 + 176) = v57;
    *(void *)(v2 + 184) = v31;
    *(void *)(v2 + 192) = v58 | 0xA000000000000000;
    *(void *)(v2 + 200) = v27;
    *(void *)(v2 + 208) = 0;
    *(unsigned char *)(v2 + 218) = 0;
    *(_WORD *)(v2 + 216) = 0;
    *(_DWORD *)(v2 + 220) = 0;
  }
  else
  {
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v4;
    *(void *)(v18 + 24) = v3;
    *(unsigned char *)(v18 + 32) = v5;
    *(double *)(v18 + 40) = v7;
    *(double *)(v18 + 48) = v6;
    unint64_t v19 = v18 | 0x8000000000000000;
    uint64_t v20 = *(unsigned __int16 *)(v1 + 100);
    uint64_t v21 = *(void *)(v1 + 192);
    unint64_t v22 = *(void *)(v2 + 200);
    swift_retain();
    swift_retain();
    outlined consume of DisplayList.Item.Value(v21, v22);
    *(void *)(v2 + 192) = v19;
    *(void *)(v2 + 200) = v20;
    *(void *)(v2 + 208) = 0;
    *(unsigned char *)(v2 + 218) = 0;
    *(_WORD *)(v2 + 216) = 0;
  }
  return _ShapeStyle_RenderedLayers.endLayer(shape:)(v2);
}

void ResolvedStyledText.frame(in:renderer:)(uint64_t a1, double a2, double a3)
{
  if (a1)
  {
    unint64_t v22 = v3;
    double v6 = *(double (**)(void, void, void, void, double **))(*(void *)a1 + 104);
    swift_retain();
    swift_retain();
    double v7 = v6(*(void *)&a2, 0, *(void *)&a3, 0, &v22);
    CGFloat v9 = v8;
    swift_release();
    swift_release();
  }
  else
  {
    double v7 = (*(double (**)(void))(*(void *)v3 + 240))();
    CGFloat v9 = v10;
  }
  uint64_t v11 = swift_beginAccess();
  double v12 = v3[13];
  if (*((unsigned char *)v3 + 43)) {
    double v13 = 0.0;
  }
  else {
    double v13 = 0.0 - v12;
  }
  CGFloat v14 = v7 + v12;
  double v15 = (*(double (**)(uint64_t))(*(void *)v3 + 176))(v11);
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  swift_beginAccess();
  CGRect.inset(by:)(v3[21] - v15 + 0.0, v3[22] - v17 + 0.0, v3[23] - v19 + 0.0, v3[24] - v21 + 0.0, v13, 0.0, v14, v9);
}

double CGRect.inset(by:)(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v11 = a5;
  v21.origin.CGFloat x = a5;
  v21.origin.double y = a6;
  v21.size.CGFloat width = a7;
  v21.size.CGFloat height = a8;
  if (!CGRectIsNull(v21))
  {
    v22.origin.CGFloat x = v11;
    v22.origin.double y = a6;
    v22.size.CGFloat width = a7;
    v22.size.CGFloat height = a8;
    CGRect v23 = CGRectStandardize(v22);
    if (a2 == a4) {
      double v16 = a4;
    }
    else {
      double v16 = a2;
    }
    double v11 = v16 + v23.origin.x;
    double v17 = v23.origin.y + a1;
    double v18 = v23.size.width - (a2 + a4);
    double v19 = v23.size.height - (a1 + a3);
    v24.origin.CGFloat x = v16 + v23.origin.x;
    v24.origin.double y = v23.origin.y + a1;
    v24.size.CGFloat width = v18;
    v24.size.CGFloat height = v19;
    if (CGRectGetWidth(v24) < 0.0) {
      return *MEMORY[0x263F001A0];
    }
    v25.origin.CGFloat x = v11;
    v25.origin.double y = v17;
    v25.size.CGFloat width = v18;
    v25.size.CGFloat height = v19;
    if (CGRectGetHeight(v25) < 0.0) {
      return *MEMORY[0x263F001A0];
    }
  }
  return v11;
}

CGSize __swiftcall ResolvedStyledText.frameSize(in:)(CGSize in)
{
  (*(void (**)(__n128, __n128))(*(void *)v1 + 232))((__n128)__PAIR128__(v2, *(unint64_t *)&in.width), (__n128)__PAIR128__(v3, *(unint64_t *)&in.height));
  result.CGFloat height = v5;
  result.CGFloat width = v4;
  return result;
}

uint64_t ResolvedStyledText.needsRBDisplayList.getter()
{
  uint64_t v1 = *(void **)(v0 + 216);
  if (v1 && (uint64_t)objc_msgSend(*(id *)(v0 + 216), sel_length) >= 1)
  {
    if (one-time initialization token for updateSchedule != -1) {
      swift_once();
    }
    uint64_t v2 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v1, sel_length);
    if (objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, v2, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_5((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
      return 0;
    }
    memset(v5, 0, sizeof(v5));
    _sypSgWOhTm_5((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
  }
  if ((*(_WORD *)(v0 + 260) & 8) != 0) {
    return 1;
  }
  unsigned int v4 = *(unsigned __int8 *)(v0 + 256);
  if (v4) {
    return (v4 >> 4) & 1;
  }
  else {
    return 0;
  }
}

CGSize __swiftcall ResolvedStyledText.StringDrawing.size(in:)(CGSize in)
{
  double height = in.height;
  double width = in.width;
  swift_beginAccess();
  double v4 = v1[21];
  double v5 = v1[22];
  double v7 = v1[23];
  double v6 = v1[24];
  swift_beginAccess();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v8 = static TextDrawingContext.shared;
  swift_retain();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v8, (uint64_t)v12, width, height, v4, v5, v7, v6);
  swift_endAccess();
  swift_release();
  double v9 = *(double *)v12;
  double v10 = *(double *)&v12[1];
  result.double height = v10;
  result.double width = v9;
  return result;
}

void type metadata accessor for RBDisplayListRenderKey(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, type metadata accessor for RBDisplayListRenderKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, type metadata accessor for RBDisplayListRenderKey);
}

void type metadata accessor for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>)
  {
    type metadata accessor for (RBDisplayListRenderKey, Any)();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>);
    }
  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    double v10 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  a2(0);
  uint64_t v9 = static _DictionaryStorage.allocate(capacity:)();
  double v10 = (void *)v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v10;
  }
  uint64_t v12 = v9 + 64;
  uint64_t v13 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (RBImageRendererProperty, Any)(v13, (uint64_t)&v20, a3, a4);
    uint64_t v14 = v20;
    unint64_t result = a5(v20);
    if (v16) {
      break;
    }
    *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v10[6] + 8 * result) = v14;
    unint64_t result = (unint64_t)outlined init with take of Any(&v21, (_OWORD *)(v10[7] + 32 * result));
    uint64_t v17 = v10[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    void v10[2] = v19;
    v13 += 40;
    if (!--v11)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void type metadata accessor for _DictionaryStorage<RBDisplayListRenderKey, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<RBDisplayListRenderKey, Any>)
  {
    type metadata accessor for RBDisplayListRenderKey(255);
    lazy protocol witness table accessor for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<RBDisplayListRenderKey, Any>);
    }
  }
}

uint64_t outlined init with copy of (RBImageRendererProperty, Any)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (RBImageRendererProperty, Any)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for (RBImageRendererProperty, Any)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for (RBDisplayListRenderKey, Any)()
{
  if (!lazy cache variable for type metadata for (RBDisplayListRenderKey, Any))
  {
    type metadata accessor for RBDisplayListRenderKey(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (RBDisplayListRenderKey, Any));
    }
  }
}

Swift::Void __swiftcall AppearanceEffect.updateValue()()
{
  if (*(_DWORD *)(v0 + 48) == *MEMORY[0x263F288F8]) {
    *(_DWORD *)(v0 + 48) = AGGraphGetCurrentAttribute();
  }
  int v1 = *(_DWORD *)(v0 + 44);
  int v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v1 != v2)
  {
    *(_DWORD *)(v0 + 44) = v2;
    AppearanceEffect.disappeared()();
  }
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v5 = Value[1];
  uint64_t v6 = Value[2];
  uint64_t v7 = Value[3];
  uint64_t v8 = *(void *)(v0 + 8);
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v10 = *(void *)(v0 + 24);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*Value);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v6);
  outlined consume of _AppearanceActionModifier?(v8, v9, v10);
  *(void *)(v0 + 8) = v4;
  *(void *)(v0 + 16) = v5;
  *(void *)(v0 + 24) = v6;
  *(void *)(v0 + 32) = v7;

  AppearanceEffect.appeared()();
}

uint64_t outlined consume of _AppearanceActionModifier?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(result);
    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  }
  return result;
}

Swift::Void __swiftcall AppearanceEffect.appeared()()
{
  if (*(unsigned char *)(v0 + 40)) {
    return;
  }
  uint64_t v1 = *(void *)(v0 + 8);
  if (v1 != 1)
  {
    uint64_t v2 = *(void *)(v0 + 24);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v0 + 8));
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
    uint64_t v3 = *(void *)(v0 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v0 + 16);
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v3;
      *(void *)(v5 + 24) = v4;
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      *(void *)(v6 + 24) = v5;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
      swift_retain();
      specialized static Update.begin()();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
      *(void *)(v7 + 24) = v6;
      uint64_t v8 = one-time initialization token for actions;
      swift_retain();
      if (v8 != -1) {
        swift_once();
      }
      uint64_t v9 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v10 = v9[2];
      unint64_t v11 = v9[3];
      unint64_t v12 = v10 + 1;
      if (v10 >= v11 >> 1)
      {
        unint64_t v33 = v10 + 1;
        uint64_t v30 = v9;
        unint64_t v31 = v9[2];
        unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v10 + 1, 1, v30);
        unint64_t v10 = v31;
        unint64_t v12 = v33;
        uint64_t v9 = v32;
      }
      v9[2] = v12;
      uint64_t v13 = &v9[2 * v10];
      v13[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v13[5] = v7;
      static Update.actions = v9;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release();
      swift_release();
    }
  }
  *(unsigned char *)(v0 + 40) = 1;
  Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
  int v15 = *MEMORY[0x263F288F8];
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    id v16 = (id)AGSubgraphGetCurrent();
    if (!v16)
    {
LABEL_36:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    uint64_t v17 = v16;
    id v18 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v18 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (!Context)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v20 = Context;
  swift_retain();

  swift_beginAccess();
  char v21 = *(unsigned char *)(v20 + 169);
  swift_release();
  if ((v21 & 1) == 0) {
    return;
  }
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  uint64_t v22 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      return;
    }
  }
  else if (static Semantics.forced < v22)
  {
    return;
  }
  if (AGGraphGetCurrentAttribute() == v15)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v23 = AGCreateWeakAttribute();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  specialized static Update.begin()();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for closure #2 in AppearanceEffect.appeared();
  *(void *)(v22 + 24) = v24;
  uint64_t v25 = one-time initialization token for actions;
  swift_retain();
  if (v25 != -1) {
LABEL_34:
  }
    swift_once();
  int v26 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
  }
  unint64_t v28 = v26[2];
  unint64_t v27 = v26[3];
  if (v28 >= v27 >> 1) {
    int v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v26);
  }
  v26[2] = v28 + 1;
  int v29 = &v26[2 * v28];
  v29[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v29[5] = v22;
  static Update.actions = v26;
  swift_bridgeObjectRelease();
  static Update.end()();
  swift_release();
}

uint64_t _AppearanceActionModifier.MergedCallbacks.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (v1)
  {
    int v2 = *(_DWORD *)(v1 + 16);
    if (v2 == *(_DWORD *)AGGraphGetValue() >> 1)
    {
      uint64_t v3 = *(void *)(v1 + 32);
      uint64_t v4 = *(void *)(v1 + 48);
      goto LABEL_6;
    }
    swift_release();
  }
  int v5 = *(_DWORD *)AGGraphGetValue() >> 1;
  type metadata accessor for _AppearanceActionModifier.MergedBox();
  uint64_t v1 = swift_allocObject();
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  *(_DWORD *)(v1 + 20) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(unsigned char *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 16) = v5;
  *(void *)(v0 + 8) = v1;
LABEL_6:
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = *Value;
  uint64_t v7 = Value[1];
  uint64_t v9 = Value[2];
  uint64_t v10 = Value[3];
  *(void *)(v1 + 32) = *Value;
  *(void *)(v1 + 40) = v7;
  *(void *)(v1 + 48) = v9;
  *(void *)(v1 + 56) = v10;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v9);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v4);
  if (!*(void *)(v0 + 8)) {
    __break(1u);
  }
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t static Update.enqueueAction(_:)(uint64_t a1, uint64_t a2)
{
  specialized static Update.begin()();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v5 = one-time initialization token for actions;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  _OWORD v6[2] = v8 + 1;
  uint64_t v9 = &v6[2 * v8];
  void v9[4] = partial apply for closure #1 in Transaction.addAnimationListener(allFinished:);
  v9[5] = v4;
  static Update.actions = v6;
  swift_bridgeObjectRelease();

  return static Update.end()();
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      uint64_t v14 = v13 - 32;
      if (v13 < 32) {
        uint64_t v14 = v13 - 17;
      }
      _OWORD v12[2] = v10;
      void v12[3] = 2 * (v14 >> 4);
      int v15 = v12 + 4;
      if (v7) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      int v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v10 + 4]) {
          memmove(v15, a4 + 4, 16 * v10);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int64_t v13;
  uint64_t v14;
  void *v15;

  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      uint64_t v14 = v13 - 32;
      if (v13 < 32) {
        uint64_t v14 = v13 - 25;
      }
      _OWORD v12[2] = v10;
      void v12[3] = 2 * (v14 >> 3);
      int v15 = v12 + 4;
      if (v7) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      int v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v10 + 4]) {
          memmove(v15, a4 + 4, 8 * v10);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

unint64_t type metadata accessor for ()()
{
  unint64_t result = lazy cache variable for type metadata for ();
  if (!lazy cache variable for type metadata for ())
  {
    unint64_t result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ());
  }
  return result;
}

uint64_t type metadata accessor for _AppearanceActionModifier.MergedBox()
{
  return self;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int16 a1, char a2, double a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a2 & 1) != 0)
  {
LABEL_7:
    id v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(double *)(v16[7] + 8 * v10) = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  id v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3);
}

uint64_t assignWithCopy for ScaledMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(unsigned char *)(v11 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v12, v6);
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  char v14 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v10 + 16) = v12;
  *(unsigned char *)(v10 + 24) = v6;
  outlined consume of Environment<CGFloat>.Content(v13, v14);
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v16 = v15 + 24;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  unint64_t v18 = (v17 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v17;
  uint64_t v19 = (v17 + 25 + v11) & ~v17;
  (*(void (**)(unint64_t, uint64_t))(v15 + 24))(v18, v19);
  *(unsigned char *)(*(void *)(v16 + 40) + v18) = *(unsigned char *)(*(void *)(v16 + 40) + v19);
  return a1;
}

uint64_t ScaledMetric.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = *(int *)(v8 + 44);
  uint64_t v10 = v2 + *(int *)(v8 + 40);
  uint64_t v16 = (char *)&v15 - v11;
  uint64_t v17 = v10;
  LOBYTE(v19) = *(unsigned char *)(v2 + v9);
  ScaledMetric.dynamicTypeSize.getter(&v20);
  double v19 = specialized static Font.scaleFactor(textStyle:in:)((unsigned __int8 *)&v19, &v20);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  dispatch thunk of static Numeric.* infix(_:_:)();
  uint64_t v12 = *(void (**)(void, void))(v4 + 8);
  v12(v6, v3);
  double v19 = ScaledMetric.pixelLength.getter();
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  uint64_t v13 = v16;
  FloatingPoint.rounded(toMultipleOf:)((uint64_t)v6, v3, v18);
  v12(v6, v3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v13, v3);
}

uint64_t FloatingPoint.rounded(toMultipleOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v8 + 104))(v11, *MEMORY[0x263F8E210], v7, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t FloatingPoint.round(_:toMultipleOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = a1;
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = *(void *)(*(void *)(v7 + 16) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  if (v9) {
    return dispatch thunk of FloatingPoint.round(_:)();
  }
  dispatch thunk of static FloatingPoint./= infix(_:_:)();
  dispatch thunk of FloatingPoint.round(_:)();
  return dispatch thunk of static Numeric.*= infix(_:_:)();
}

double specialized static Font.scaleFactor(textStyle:in:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  void (*v11)(void *__return_ptr);
  void *v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  void *v16;
  void v17[3];
  char v18;
  uint64_t v19;

  double v19 = *MEMORY[0x263EF8340];
  __int16 v2 = *a1;
  __int16 v3 = *a2;
  if (one-time initialization token for ratioCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static Font.ratioCache;
  if (*((void *)static Font.ratioCache + 2)
    && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v2 | (unsigned __int16)(v3 << 8)), (v6 & 1) != 0))
  {
    double v7 = *(double *)(v4[7] + 8 * v5);
  }
  else
  {
    swift_endAccess();
    specialized Font.TextStyle.ctTextStyle.getter();
    specialized DynamicTypeSize.ctTextSize.getter();
    CTFontDescriptorGetTextStyleSize();
    uint64_t v18 = v2;
    uint64_t v8 = (void *)specialized Font.TextStyle.ctTextStyle.getter();
    uint64_t v9 = one-time initialization token for shared;
    id v10 = v8;
    if (v9 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v11 = *(void (**)(void *__return_ptr))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared)
                                                      + 0x78);
    uint64_t v12 = static CoreGlue2.shared;
    v11(v17);

    uint64_t v13 = (id)specialized DynamicTypeSize.ctTextSize.getter();
    CTFontDescriptorGetTextStyleSize();

    double v7 = 0.0 / 0.0;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = static Font.ratioCache;
    static Font.ratioCache = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v2 | (v3 << 8), isUniquelyReferenced_nonNull_native, 0.0 / 0.0);
    static Font.ratioCache = v16;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return v7;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(__int16 a1)
{
  Hasher.init(_seed:)();
  Swift::UInt v2 = a1;
  switch((char)a1)
  {
    case 1:
      Swift::UInt v2 = 1;
      goto LABEL_12;
    case 2:
      Swift::UInt v2 = 2;
      goto LABEL_12;
    case 3:
      Swift::UInt v2 = 3;
      goto LABEL_12;
    case 4:
      Swift::UInt v2 = 4;
      goto LABEL_12;
    case 5:
      Swift::UInt v2 = 5;
      goto LABEL_12;
    case 6:
      Swift::UInt v2 = 6;
      goto LABEL_12;
    case 7:
      Swift::UInt v2 = 7;
      goto LABEL_12;
    case 8:
      Swift::UInt v2 = 8;
      goto LABEL_12;
    case 9:
      Swift::UInt v2 = 9;
      goto LABEL_12;
    case 10:
      Swift::UInt v2 = 10;
      goto LABEL_12;
    case 11:
    case 12:
    case 13:
      unint64_t result = _diagnoseUnavailableCodeReached()();
      __break(1u);
      return result;
    default:
LABEL_12:
      Hasher._combine(_:)(v2);
      Hasher._combine(_:)(HIBYTE(a1));
      Swift::Int v3 = Hasher._finalize()();
      return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(__int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = a1;
    int v8 = HIBYTE(a1);
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v2 + 48);
    while (2)
    {
      uint64_t v12 = (unsigned __int8 *)(v10 + 2 * result);
      uint64_t v13 = *v12;
      int v14 = v12[1];
      char v15 = 1;
      char v16 = 0;
      char v17 = 0;
      char v18 = 0;
      char v19 = 0;
      char v20 = 0;
      char v21 = 0;
      char v22 = 0;
      char v23 = 0;
      char v24 = 0;
      char v25 = 0;
      switch(v13)
      {
        case 1:
          char v16 = 0;
          char v17 = 0;
          char v18 = 0;
          char v19 = 0;
          char v20 = 0;
          char v21 = 0;
          char v22 = 0;
          char v23 = 0;
          char v24 = 0;
          char v15 = 0;
          char v25 = 1;
          goto LABEL_19;
        case 2:
          char v16 = 0;
          char v17 = 0;
          char v18 = 0;
          char v19 = 0;
          char v20 = 0;
          char v21 = 0;
          char v22 = 0;
          char v23 = 0;
          char v25 = 0;
          char v15 = 0;
          char v24 = 1;
          goto LABEL_19;
        case 3:
          char v16 = 0;
          char v17 = 0;
          char v18 = 0;
          char v19 = 0;
          char v20 = 0;
          char v21 = 0;
          char v22 = 0;
          char v24 = 0;
          char v25 = 0;
          char v15 = 0;
          char v23 = 1;
          goto LABEL_19;
        case 4:
          char v16 = 0;
          char v17 = 0;
          char v18 = 0;
          char v19 = 0;
          char v20 = 0;
          char v21 = 0;
          char v23 = 0;
          char v24 = 0;
          char v25 = 0;
          char v15 = 0;
          char v22 = 1;
          goto LABEL_19;
        case 5:
          char v16 = 0;
          char v17 = 0;
          char v18 = 0;
          char v19 = 0;
          char v20 = 0;
          char v22 = 0;
          char v23 = 0;
          char v24 = 0;
          char v25 = 0;
          char v15 = 0;
          char v21 = 1;
          goto LABEL_19;
        case 6:
          char v16 = 0;
          char v17 = 0;
          char v18 = 0;
          char v19 = 0;
          char v21 = 0;
          char v22 = 0;
          char v23 = 0;
          char v24 = 0;
          char v25 = 0;
          char v15 = 0;
          char v20 = 1;
          goto LABEL_19;
        case 7:
          char v16 = 0;
          char v17 = 0;
          char v18 = 0;
          char v20 = 0;
          char v21 = 0;
          char v22 = 0;
          char v23 = 0;
          char v24 = 0;
          char v25 = 0;
          char v15 = 0;
          char v19 = 1;
          goto LABEL_19;
        case 8:
          char v16 = 0;
          char v17 = 0;
          char v19 = 0;
          char v20 = 0;
          char v21 = 0;
          char v22 = 0;
          char v23 = 0;
          char v24 = 0;
          char v25 = 0;
          char v15 = 0;
          char v18 = 1;
          goto LABEL_19;
        case 9:
          char v16 = 0;
          char v18 = 0;
          char v19 = 0;
          char v20 = 0;
          char v21 = 0;
          char v22 = 0;
          char v23 = 0;
          char v24 = 0;
          char v25 = 0;
          char v15 = 0;
          char v17 = 1;
          goto LABEL_19;
        case 10:
          char v17 = 0;
          char v18 = 0;
          char v19 = 0;
          char v20 = 0;
          char v21 = 0;
          char v22 = 0;
          char v23 = 0;
          char v24 = 0;
          char v25 = 0;
          char v15 = 0;
          char v16 = 1;
          goto LABEL_19;
        case 11:
        case 12:
        case 13:
LABEL_70:
          unint64_t result = _diagnoseUnavailableCodeReached()();
          __break(1u);
          return result;
        default:
LABEL_19:
          switch(v7)
          {
            case 1:
              if (v8 == v14) {
                char v29 = v25;
              }
              else {
                char v29 = 0;
              }
              if (v29) {
                return result;
              }
              goto LABEL_7;
            case 2:
              if (v8 == v14) {
                char v27 = v24;
              }
              else {
                char v27 = 0;
              }
              if (v27) {
                return result;
              }
              goto LABEL_7;
            case 3:
              if (v8 == v14) {
                char v30 = v23;
              }
              else {
                char v30 = 0;
              }
              if (v30) {
                return result;
              }
              goto LABEL_7;
            case 4:
              if (v8 == v14) {
                char v28 = v22;
              }
              else {
                char v28 = 0;
              }
              if (v28) {
                return result;
              }
              goto LABEL_7;
            case 5:
              if (v8 == v14) {
                char v31 = v21;
              }
              else {
                char v31 = 0;
              }
              if (v31) {
                return result;
              }
              goto LABEL_7;
            case 6:
              if (v8 == v14) {
                char v32 = v20;
              }
              else {
                char v32 = 0;
              }
              if (v32) {
                return result;
              }
              goto LABEL_7;
            case 7:
              if (v8 == v14) {
                char v33 = v19;
              }
              else {
                char v33 = 0;
              }
              if (v33) {
                return result;
              }
              goto LABEL_7;
            case 8:
              if (v8 == v14) {
                char v34 = v18;
              }
              else {
                char v34 = 0;
              }
              if (v34) {
                return result;
              }
              goto LABEL_7;
            case 9:
              if (v8 == v14) {
                char v11 = v17;
              }
              else {
                char v11 = 0;
              }
              if ((v11 & 1) == 0) {
                goto LABEL_7;
              }
              return result;
            case 10:
              if (v8 == v14) {
                char v35 = v16;
              }
              else {
                char v35 = 0;
              }
              if (v35) {
                return result;
              }
              goto LABEL_7;
            case 11:
            case 12:
            case 13:
              goto LABEL_70;
            default:
              if (v8 == v14) {
                char v26 = v15;
              }
              else {
                char v26 = 0;
              }
              if (v26) {
                return result;
              }
LABEL_7:
              unint64_t result = (result + 1) & v9;
              if ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result)) {
                continue;
              }
              return result;
          }
      }
    }
  }
  return result;
}

uint64_t ScaledMetric.dynamicTypeSize.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(v3, v4);
  specialized Environment.wrappedValue.getter(v3, v4, a1);

  return outlined consume of Environment<CGFloat>.Content(v3, v4);
}

double ScaledMetric.pixelLength.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v1, v2);
  double v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<CGFloat>.Content(v1, v2);
  return v3;
}

uint64_t initializeWithCopy for ScaledMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  unint64_t v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(unsigned char *)(v9 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v10, v6);
  *(void *)(v8 + 16) = v10;
  *(unsigned char *)(v8 + 24) = v6;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = (v13 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  uint64_t v15 = (v13 + 25 + v9) & ~v13;
  (*(void (**)(unint64_t, uint64_t))(v11 + 16))(v14, v15);
  *(unsigned char *)(*(void *)(v12 + 48) + v14) = *(unsigned char *)(*(void *)(v12 + 48) + v15);
  return a1;
}

uint64_t outlined copy of Environment<DynamicTypeSize>.Content(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for ScaledMetric(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  v3 &= 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat>.Content(*(void *)(v3 + 16), *(unsigned char *)(v3 + 24));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t outlined consume of Environment<CGFloat>.Content(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = result;
  if (a2)
  {
    *a3 = result;
  }
  else
  {
    outlined copy of Environment<DynamicTypeSize>.Content(result, 0);
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    uint64_t v5 = (void *)static Log.runtimeIssuesLog;
    os_log_type_t v6 = v4;
    if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v4))
    {
      char v7 = v5;
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      v12[0] = v9;
      *(_DWORD *)unint64_t v8 = 136315138;
      v13[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x5463696D616E7944, 0xEF657A6953657079, v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_245728000, v7, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v9, -1, -1);
      MEMORY[0x24C527CC0](v8, -1, -1);
    }
    v13[0] = 0;
    v13[1] = 0;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v10 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v11 = static CoreGlue2.shared;
    v10(v13);

    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

double specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  if (a2) {
    return *(double *)&a1;
  }
  swift_retain();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  os_log_type_t v4 = (void *)static Log.runtimeIssuesLog;
  os_log_type_t v5 = v3;
  if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v3))
  {
    os_log_type_t v6 = v4;
    char v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v12[0] = v8;
    *(_DWORD *)char v7 = 136315138;
    v13[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x74616F6C464743, 0xE700000000000000, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_245728000, v6, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C527CC0](v8, -1, -1);
    MEMORY[0x24C527CC0](v7, -1, -1);
  }
  v13[0] = 0;
  v13[1] = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v10 = static CoreGlue2.shared;
  v9(v13);

  swift_getAtKeyPath();
  outlined consume of Environment<CGFloat>.Content(a1, 0);
  swift_release();
  swift_release();
  return *(double *)&v13[2];
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, __int16 a2, void *a3, double a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(_WORD *)(a3[6] + 2 * result) = a2;
  *(double *)(a3[7] + 8 * result) = a4;
  uint64_t v4 = a3[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a3[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  os_log_type_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Font.RatioKey, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type Font.RatioKey and conformance Font.RatioKey);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v8 = (void *)(v5 + 64);
    uint64_t v9 = -1;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }
      else
      {
        int64_t v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        if (v16 >= v11) {
          goto LABEL_20;
        }
        unint64_t v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          int64_t v13 = v16 + 1;
          if (v16 + 1 >= v11) {
            goto LABEL_20;
          }
          unint64_t v17 = v8[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_20:
              swift_release();
              if (a2)
              {
                uint64_t v19 = 1 << *(unsigned char *)(v5 + 32);
                if (v19 > 63) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v19 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v19;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_27;
                }
                if (v13 >= v11) {
                  goto LABEL_20;
                }
                unint64_t v17 = v8[v13];
                ++v18;
                if (v17) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v13 = v18;
          }
        }
LABEL_19:
        unint64_t v10 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      unint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(*(_WORD *)(*(void *)(v5 + 48) + 2 * v15), v6, *(double *)(*(void *)(v5 + 56) + 8 * v15));
    }
  }
  unint64_t result = swift_release();
  *os_log_type_t v3 = v6;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt16 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int64_t v27;
  void *v28;
  void *v29;

  os_log_type_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.CallbackKey, RBDisplayListContents>, (void (*)(uint64_t))type metadata accessor for RBDisplayListContents, (void (*)(void))lazy protocol witness table accessor for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey);
  uint64_t v6 = a2;
  char v29 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    char v28 = (void *)(v5 + 64);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    uint64_t v9 = v8 & *(void *)(v5 + 64);
    char v26 = v2;
    char v27 = (unint64_t)(v7 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v9)
      {
        uint64_t v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v13 = v12 | (v11 << 6);
      }
      else
      {
        unint64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v14 >= v27) {
          goto LABEL_22;
        }
        unint64_t v15 = v28[v14];
        ++v11;
        if (!v15)
        {
          int64_t v11 = v14 + 1;
          if (v14 + 1 >= v27) {
            goto LABEL_22;
          }
          unint64_t v15 = v28[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 2;
            if (v16 >= v27)
            {
LABEL_22:
              swift_release();
              os_log_type_t v3 = v26;
              if (v6)
              {
                char v25 = 1 << *(unsigned char *)(v5 + 32);
                if (v25 > 63) {
                  bzero(v28, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v28 = -1 << v25;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v15 = v28[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_29;
                }
                if (v11 >= v27) {
                  goto LABEL_22;
                }
                unint64_t v15 = v28[v11];
                ++v16;
                if (v15) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
LABEL_19:
        uint64_t v9 = (v15 - 1) & v15;
        int64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      unint64_t v17 = (unsigned int *)(*(void *)(v5 + 48) + 32 * v13);
      int64_t v18 = *v17;
      uint64_t v19 = v17[1];
      char v21 = v17[2];
      char v20 = v17[3];
      char v22 = *((_WORD *)v17 + 8);
      char v23 = *((double *)v17 + 3);
      char v24 = *(void *)(*(void *)(v5 + 56) + 8 * v13);
      if ((v6 & 1) == 0) {
        swift_unknownObjectRetain();
      }
      unint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18 | (v19 << 32), v21 | (v20 << 32), v22, v24, v29, v23);
    }
  }
  unint64_t result = swift_release();
  *os_log_type_t v3 = v29;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  int64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  int64_t v33;
  void *v34;
  char v35;
  void *v36;
  int v37;

  os_log_type_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<ColorCacheKey, NamedColorInfo>, (void (*)(void))lazy protocol witness table accessor for type ColorCacheKey and conformance ColorCacheKey);
  char v35 = a2;
  int v36 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
    char v34 = (void *)(v5 + 64);
    uint64_t v7 = -1;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    uint64_t v8 = v7 & *(void *)(v5 + 64);
    char v32 = v3;
    char v33 = (unint64_t)(v6 + 63) >> 6;
    unint64_t result = swift_retain();
    unint64_t v10 = 0;
    while (1)
    {
      char v37 = (int)v3;
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v10 << 6);
      }
      else
      {
        int64_t v16 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          return result;
        }
        if (v16 >= v33) {
          goto LABEL_28;
        }
        unint64_t v17 = v34[v16];
        ++v10;
        if (!v17)
        {
          unint64_t v10 = v16 + 1;
          if (v16 + 1 >= v33) {
            goto LABEL_28;
          }
          unint64_t v17 = v34[v10];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v33)
            {
LABEL_28:
              swift_release();
              os_log_type_t v3 = v32;
              if (v35)
              {
                char v31 = 1 << *(unsigned char *)(v5 + 32);
                if (v31 > 63) {
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v34 = -1 << v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v17 = v34[v18];
            if (!v17)
            {
              while (1)
              {
                unint64_t v10 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_35;
                }
                if (v10 >= v33) {
                  goto LABEL_28;
                }
                unint64_t v17 = v34[v10];
                ++v18;
                if (v17) {
                  goto LABEL_25;
                }
              }
            }
            unint64_t v10 = v18;
          }
        }
LABEL_25:
        uint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v10 << 6);
      }
      uint64_t v19 = *(void *)(v5 + 56);
      char v20 = v5;
      char v21 = (unsigned __int8 *)(*(void *)(v5 + 48) + 32 * v15);
      char v22 = *v21;
      char v23 = v21[1];
      char v24 = v21[2];
      char v26 = *((void *)v21 + 1);
      char v25 = *((void *)v21 + 2);
      char v27 = (void *)*((void *)v21 + 3);
      char v28 = *(void **)(v19 + 8 * v15);
      if ((v35 & 1) == 0)
      {
        char v29 = v28;
        swift_bridgeObjectRetain();
        char v30 = v27;
      }
      if (v23) {
        int64_t v11 = 256;
      }
      else {
        int64_t v11 = 0;
      }
      uint64_t v12 = v37 & 0xFF000000 | v22 | v11;
      if (v24) {
        int64_t v13 = 0x10000;
      }
      else {
        int64_t v13 = 0;
      }
      LODWORD(v3) = v12 | v13;
      unint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v12 | v13, v26, v25, v27, (uint64_t)v28, v36);
      uint64_t v5 = v20;
    }
  }
  unint64_t result = swift_release();
  *os_log_type_t v3 = v36;
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(__int16 a1, void *a2, double a3)
{
  Hasher.init(_seed:)();
  Swift::UInt v6 = a1;
  switch((char)a1)
  {
    case 1:
      Swift::UInt v6 = 1;
      goto LABEL_12;
    case 2:
      Swift::UInt v6 = 2;
      goto LABEL_12;
    case 3:
      Swift::UInt v6 = 3;
      goto LABEL_12;
    case 4:
      Swift::UInt v6 = 4;
      goto LABEL_12;
    case 5:
      Swift::UInt v6 = 5;
      goto LABEL_12;
    case 6:
      Swift::UInt v6 = 6;
      goto LABEL_12;
    case 7:
      Swift::UInt v6 = 7;
      goto LABEL_12;
    case 8:
      Swift::UInt v6 = 8;
      goto LABEL_12;
    case 9:
      Swift::UInt v6 = 9;
      goto LABEL_12;
    case 10:
      Swift::UInt v6 = 10;
      goto LABEL_12;
    case 11:
    case 12:
    case 13:
      unint64_t result = _diagnoseUnavailableCodeReached()();
      __break(1u);
      return result;
    default:
LABEL_12:
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(HIBYTE(a1));
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_WORD *)(a2[6] + 2 * result) = a1;
      *(double *)(a2[7] + 8 * result) = a3;
      ++a2[2];
      return result;
  }
}

BOOL DisplayList.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

uint64_t AnyViewChild.updateValue()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  AGGraphGetValue();
  type metadata accessor for AnyViewStorage();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v4 = result + *(void *)(*(void *)result + 144);
    MEMORY[0x270FA5388](result);
    _OWORD v6[2] = a1;
    v6[3] = swift_getWitnessTable();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v6, v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v5);
    return swift_release();
  }
  return result;
}

uint64_t AnyView.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v5);
  if (swift_dynamicCast())
  {
    uint64_t v7 = v9[1];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  }
  else
  {
    type metadata accessor for AnyViewStorage();
    return GradientBox.__allocating_init(_:)(a1);
  }
  return v7;
}

uint64_t type metadata accessor for AnyViewStorage()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for ViewDimensions()
{
  return &type metadata for ViewDimensions;
}

uint64_t closure #2 in static Layout.makeStaticView(root:inputs:properties:list:)@<X0>(uint64_t result@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t *)@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X4>, void **a5@<X5>, void *a6@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)result;
  int v7 = *(_DWORD *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  uint64_t v9 = *(void *)(result + 24);
  int v10 = *(_DWORD *)(result + 32);
  int v11 = *(_DWORD *)(result + 36);
  uint64_t v12 = *(void *)(result + 40);
  uint64_t v13 = *(void *)(result + 48);
  uint64_t v14 = *(void *)(result + 56);
  int v15 = *(_DWORD *)(result + 68);
  uint64_t v16 = *(void *)(result + 76);
  if ((v11 & 0x20) != 0)
  {
    if (*(unsigned char *)(a3 + 4))
    {
      __break(1u);
      return result;
    }
    uint64_t v19 = *a4;
    LODWORD(v38) = *(_DWORD *)a3;
    uint64_t v39 = v19;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type LayoutChildGeometry and conformance LayoutChildGeometry();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Attribute.init<A>(body:value:flags:update:)();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v17 = AGGraphCreateOffsetAttribute2();
    v10 |= 0x18u;
  }
  else
  {
    int v17 = *(_DWORD *)(result + 72);
    int OffsetAttribute2 = *(_DWORD *)(result + 64);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v38 = v6;
  LODWORD(v39) = v7;
  uint64_t v40 = v8;
  uint64_t v41 = v9;
  int v42 = v10;
  int v43 = v11;
  uint64_t v44 = v12;
  uint64_t v45 = v13;
  uint64_t v46 = v14;
  int v47 = OffsetAttribute2;
  int v48 = v15;
  int v49 = v17;
  uint64_t v50 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a2(&v35, &v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v20 = v35;
  uint64_t v21 = v36;
  uint64_t v22 = v37;
  if ((v11 & 0x20) != 0)
  {
    uint64_t v31 = v35;
    char v23 = (int *)MEMORY[0x263F288F8];
    char v24 = *a5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a5 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      *a5 = v24;
    }
    int v26 = *v23;
    unint64_t v28 = v24[2];
    unint64_t v27 = v24[3];
    if (v28 >= v27 >> 1) {
      char v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v24);
    }
    void v24[2] = v28 + 1;
    char v29 = &v24[v28];
    *((_DWORD *)v29 + 8) = v22;
    *((_DWORD *)v29 + 9) = v26;
    *a5 = v24;
    uint64_t v20 = v31;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  ++*a4;
  *a6 = v20;
  a6[1] = v21 | (v22 << 32);
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutChildGeometry and conformance LayoutChildGeometry()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutChildGeometry and conformance LayoutChildGeometry;
  if (!lazy protocol witness table cache variable for type LayoutChildGeometry and conformance LayoutChildGeometry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutChildGeometry and conformance LayoutChildGeometry);
  }
  return result;
}

uint64_t View.lineLimit(_:reservesSpace:)(uint64_t a1, char a2, uint64_t a3)
{
  if (a2) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = v3;
  BOOL v6 = (a2 & 1) == 0;
  uint64_t v7 = a1;
  char v8 = 0;
  return View.modifier<A>(_:)(&v5, a3, &type metadata for LineLimitModifier);
}

uint64_t AnyHashable2.anyValue.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t key path getter for Identifiable.id : <A, B, C>A.Element()
{
  return dispatch thunk of Identifiable.id.getter();
}

void _ViewList_View.viewID.getter()
{
  int v1 = *(_DWORD *)(v0 + 52);
  uint64_t v2 = *(void *)(v0 + 56);
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 32);
    uint64_t v4 = *(void *)(v0 + 72);
    if (*(unsigned char *)(v2 + 52))
    {
      uint64_t v5 = swift_retain();
      if (v4 != 1)
      {
        int v1 = -1;
        goto LABEL_12;
      }
LABEL_11:
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 96))(v12, v5);
      BOOL v6 = __swift_project_boxed_opaque_existential_1(v12, v12[3]);
      double v7 = MEMORY[0x270FA5388](v6);
      (*(void (**)(char *, double))(v9 + 16))((char *)&v12[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      swift_retain();
      AnyHashable.init<A>(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      swift_release_n();
      return;
    }
    uint64_t v5 = swift_retain();
    if (v4 == 1 && v1 < 0)
    {
      if (!v3)
      {
LABEL_18:
        __break(1u);
        return;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (*(void *)(v0 + 72) == 1 && v1 < 0) {
      goto LABEL_18;
    }
  }
LABEL_12:
  uint64_t v10 = *(void *)(v0 + 64);
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v12[0] = __PAIR64__(v1, v10);
  v12[1] = v3;
  lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
  AnyHashable.init<A>(_:)();
}

uint64_t _AnyHashableBox.anyValue.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = (uint64_t)v1 + *(void *)(*v1 + 144);
  uint64_t v4 = *(void *)(*v1 + 128);
  a1[3] = v4;
  a1[4] = *(void *)(v2 + 136);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  BOOL v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v6(boxed_opaque_existential_1, v3, v4);
}

unint64_t lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  }
  return result;
}

uint64_t View.zIndex(_:)(uint64_t a1, double a2)
{
  double v3 = a2;
  return View._trait<A>(_:_:)((uint64_t)&type metadata for ZIndexTraitKey, (uint64_t)&v3, a1);
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute;
}

uint64_t static Alignment.top.getter()
{
  return static Alignment.center.getter(&one-time initialization token for top, (uint64_t)&static Alignment.top);
}

void @objc closure #1 in closure #1 in ShapeType.init(_:)(uint64_t a1, int a2, uint64_t a3)
{
}

void ShapeType.initFromFilled(type:shape:)(int a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (a1 == 6)
  {
    if (RBPathIsEmpty())
    {
      outlined consume of ShapeType(v2->i64[0], v2->i64[1], v2[1].i64[0], v2[1].i64[1], v2[2].i64[0], v2[2].i64[1], v2[3].i64[0], v2[3].i64[1], v2[4].i64[0], v2[4].i64[1], v2[5].i8[0]);
      v2[3] = 0u;
      v2[4] = 0u;
      v2[1] = 0u;
      v2[2] = 0u;
      *uint64_t v2 = 0u;
      char v6 = 3;
    }
    else
    {
      uint64_t v25 = *(void *)(a2 + 48);
      if (v25 < 0) {
        __break(1u);
      }
      CGFloat v26 = *(double *)(a2 + 16);
      uint64_t v42 = *(unsigned int *)(a2 + 24);
      uint64_t v44 = *(unsigned int *)(a2 + 28);
      CGFloat v27 = *(double *)(a2 + 32);
      CGFloat v28 = *(double *)(a2 + 40);
      if (v25)
      {
        char v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
        uint64_t v30 = 0;
        unint64_t v31 = v29[2];
        do
        {
          uint64_t v32 = *(void *)(*(void *)(a2 + 56) + 8 * v30);
          unint64_t v33 = v29[3];
          if (v31 >= v33 >> 1) {
            char v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v31 + 1, 1, v29);
          }
          ++v30;
          id v29[2] = v31 + 1;
          v29[v31++ + 4] = v32;
        }
        while (v25 != v30);
      }
      else
      {
        char v29 = (void *)MEMORY[0x263F8EE78];
      }
      *(void *)&v45.a = v2;
      v45.b = v26;
      *(void *)&v45.c = __PAIR64__(v44, v42);
      v45.d = v27;
      *(void *)&v45.tCGFloat x = v29;
      v45.tCGFloat y = v28;
      swift_bridgeObjectRetain();
      RBPathApplyShape();
      swift_bridgeObjectRelease();
      if (v2[5].i8[0] != 3
        || v2->i64[0] != 1
        || (int8x16_t v34 = vorrq_s8(vorrq_s8(v2[1], v2[3]), vorrq_s8(v2[2], v2[4])),
            *(void *)&vorr_s8(*(int8x8_t *)v34.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)) | v2->i64[1]))
      {
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v35 = RBPathRetain();
      uint64_t v37 = v36;
      type metadata accessor for Path.PathBox();
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 24) = 0u;
      *(_OWORD *)(v38 + 104) = 0u;
      *(_OWORD *)(v38 + 88) = 0u;
      *(_OWORD *)(v38 + 72) = 0u;
      *(_OWORD *)(v38 + 56) = 0u;
      *(_OWORD *)(v38 + 40) = 0u;
      *(unsigned char *)(v38 + 16) = 1;
      *(void *)(v38 + 24) = v35;
      *(void *)(v38 + 32) = v37;
      v2->i64[0] = v38;
      v2[1].i64[0] = 0;
      v2[1].i64[1] = 0;
      v2->i64[1] = 0;
      v2[2].i64[0] = 5;
      *(CGFloat *)&v2[2].i64[1] = v26;
      v2[3].i64[0] = v42 | (v44 << 32);
      *(CGFloat *)&v2[3].i64[1] = v27;
      v2[4].i64[0] = (uint64_t)v29;
      *(CGFloat *)&v2[4].i64[1] = v28;
      char v6 = 2;
    }
    v2[5].i8[0] = v6;
    return;
  }
  if (a1 == 3)
  {
    double v7 = *(double *)a2;
    double v8 = *(double *)(a2 + 8);
    double v9 = *(double *)(a2 + 16);
    double v10 = *(double *)(a2 + 24);
    CGFloat v11 = *(double *)(a2 + 32);
    CGFloat v12 = *(double *)(a2 + 40);
    uint64_t v13 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    uint64_t v15 = *(void *)(a2 + 64);
    uint64_t v16 = *(void *)(a2 + 72);
    CGFloat v17 = *(double *)(a2 + 80);
    CGFloat v18 = *(double *)(a2 + 88);
    int v19 = *(_DWORD *)(a2 + 96);
    if (v8 == 0.0 && v9 == 0.0 || v7 == 0.0 && v10 == 0.0)
    {
      v45.a = *(CGFloat *)a2;
      v45.b = v8;
      v45.c = v9;
      v45.d = v10;
      v45.tCGFloat x = v11;
      v45.tCGFloat y = v12;
      CGRect v48 = CGRectApplyAffineTransform(*(CGRect *)&v13, &v45);
      CGFloat y = v48.origin.y;
      CGFloat x = v48.origin.x;
      CGFloat height = v48.size.height;
      CGFloat width = v48.size.width;
      v45.a = v7;
      v45.b = v8;
      v45.c = v9;
      v45.d = v10;
      v45.tCGFloat x = v11;
      v45.tCGFloat y = v12;
      v48.origin.CGFloat x = v17;
      v48.origin.CGFloat y = v18;
      CGSize v20 = CGSizeApplyAffineTransform((CGSize)v48.origin, &v45);
      if (v20.width == v20.height)
      {
        BOOL v21 = v19 == 1;
        outlined consume of ShapeType(v2->i64[0], v2->i64[1], v2[1].i64[0], v2[1].i64[1], v2[2].i64[0], v2[2].i64[1], v2[3].i64[0], v2[3].i64[1], v2[4].i64[0], v2[4].i64[1], v2[5].i8[0]);
        v49.origin.CGFloat x = x;
        v49.origin.CGFloat y = y;
        v49.size.CGFloat width = width;
        v49.size.CGFloat height = height;
        double v22 = CGRectGetWidth(v49);
        v50.origin.CGFloat x = x;
        v50.origin.CGFloat y = y;
        v50.size.CGFloat width = width;
        v50.size.CGFloat height = height;
        double v23 = CGRectGetHeight(v50);
        if (v23 >= v22) {
          double v23 = v22;
        }
        double v24 = v23 * 0.5;
        *(CGFloat *)v2->i64 = x;
        *(CGFloat *)&v2->i64[1] = y;
        if (v24 >= v20.width) {
          double v24 = v20.width;
        }
        *(CGFloat *)v2[1].i64 = width;
        *(CGFloat *)&v2[1].i64[1] = height;
        *(double *)v2[2].i64 = v24;
        v2[2].i64[1] = v21;
        int8x16_t v5 = 0uLL;
        goto LABEL_22;
      }
    }
  }
  else if (!a1 {
         && (*(double *)(a2 + 8) == 0.0 && *(double *)(a2 + 16) == 0.0
  }
          || *(double *)a2 == 0.0 && *(double *)(a2 + 24) == 0.0))
  {
    outlined consume of ShapeType(v2->i64[0], v2->i64[1], v2[1].i64[0], v2[1].i64[1], v2[2].i64[0], v2[2].i64[1], v2[3].i64[0], v2[3].i64[1], v2[4].i64[0], v2[4].i64[1], v2[5].i8[0]);
    CGRect v47 = *(CGRect *)(a2 + 48);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v45.a = *(_OWORD *)a2;
    *(_OWORD *)&v45.c = v4;
    *(_OWORD *)&v45.tCGFloat x = *(_OWORD *)(a2 + 32);
    *(CGRect *)v2->i8 = CGRectApplyAffineTransform(v47, &v45);
    int8x16_t v5 = 0uLL;
    v2[2] = 0u;
LABEL_22:
    v2[3] = v5;
    v2[4] = v5;
    v2[5].i8[0] = 0;
  }
}

uint64_t Path.PathBox.__deallocating_deinit()
{
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) == 1) {
      RBPathRelease();
    }
    else {
      MEMORY[0x24C526C60](v0 + 24);
    }
  }
  else
  {
    int v1 = *(void **)(v0 + 24);
    if (!v1)
    {
      __break(1u);
      return result;
    }
  }

  return swift_deallocClassInstance();
}

uint64_t Path.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (CGPathIsEmpty((CGPathRef)a1))
  {

    uint64_t result = 0;
    char v5 = 6;
  }
  else
  {
    type metadata accessor for Path.PathBox();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(unsigned char *)(result + 16) = 0;
    char v5 = 5;
    *(void *)(result + 24) = a1;
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = v5;
  return result;
}

{
  uint64_t result;
  char v5;
  uint64_t v6;

  if (CGPathIsEmpty((CGPathRef)a1))
  {

    uint64_t result = 0;
    char v5 = 6;
LABEL_5:
    *(void *)a2 = result;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = v5;
    return result;
  }
  uint64_t result = (uint64_t)CGPathCreateMutableCopy((CGPathRef)a1);
  if (result)
  {
    char v6 = result;

    type metadata accessor for Path.PathBox();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(unsigned char *)(result + 16) = 0;
    char v5 = 5;
    *(void *)(result + 24) = v6;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t GraphicsContext.clip(to:style:options:)(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v4 = a2 & 0x101;
  long long v5 = 0u;
  long long v6 = 0u;
  char v7 = 0;
  return GraphicsContext.clip(to:opacity:style:options:)(a1, (uint64_t)&v4, a3, 1.0);
}

uint64_t GraphicsContext.clip(to:opacity:style:options:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v5 = v4;
  double v9 = *(double *)a2;
  double v10 = *(double *)(a2 + 8);
  double v11 = *(double *)(a2 + 16);
  double v12 = *(double *)(a2 + 24);
  double v13 = *(double *)(a2 + 32);
  char v14 = *(unsigned char *)(a2 + 40);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v15 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v16 = swift_retain();
    *(void *)uint64_t v5 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v16, v15, 1, 0);
    swift_release();
  }
  CGFloat v17 = *(void **)(*(void *)(*(void *)v5 + 16) + 32);
  if (v14)
  {
    v25[0] = v9;
    v25[1] = v10;
    v25[2] = v11;
    v25[3] = v12;
    v25[4] = v13;
    id v18 = v17;
    RBShape.setStrokedPath(_:style:)(a1, v25);
  }
  else
  {
    double v19 = *(double *)(*(void *)v5 + 56);
    id v20 = v17;
    RBShape.setPath(_:style:shapeDistance:)(a1, LOBYTE(v9) & 1, v19);
  }

  uint64_t v22 = *(void *)(*(void *)v5 + 24);
  uint64_t v23 = *(void *)(*(void *)(*(void *)v5 + 16) + 32);

  v21.n128_f32[0] = a4;
  return MEMORY[0x270F5ABE0](v22, v23, a3 & 1, v21);
}

double _AnyShapeBox.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v12 = *v6;
  uint64_t v13 = *(void *)(*v6 + 136);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = &v20[-v15];
  uint64_t v17 = (uint64_t)v6 + *(void *)(v12 + 152);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v13);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, double, double, double, double))(*(void *)(v12 + 144) + 24))(v21, v13, a3, a4, a5, a6);
  (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v16, v13);
  double result = *(double *)v21;
  long long v19 = v21[1];
  *(_OWORD *)a2 = v21[0];
  *(_OWORD *)(a2 + 16) = v19;
  *(unsigned char *)(a2 + 32) = v22;
  return result;
}

void *protocol witness for Shape.path(in:) in conformance UnevenRoundedRectangle@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v11 = *(double *)v5;
  double v12 = *(double *)(v5 + 8);
  double v14 = *(double *)(v5 + 16);
  double v13 = *(double *)(v5 + 24);
  char v15 = *(unsigned char *)(v5 + 32);
  long long v20 = 0u;
  long long v21 = 0u;
  char v16 = 6;
  char v22 = 6;
  uint64_t v23 = 0x3FF0000000000000;
  long long v24 = 0u;
  uint64_t v25 = 0x3FF0000000000000;
  long long v26 = 0u;
  double result = (void *)CGRectIsNull(*(CGRect *)&a2);
  long long v18 = 0uLL;
  long long v19 = 0uLL;
  if ((result & 1) == 0)
  {
    double result = specialized Path.withMutableBuffer(do:)((uint64_t)&v20, &v23, v15, a2, a3, a4, a5, v11, v12, v14, v13);
    long long v18 = v20;
    long long v19 = v21;
    char v16 = v22;
  }
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v19;
  *(unsigned char *)(a1 + 32) = v16;
  return result;
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2, char a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  char v11 = a3;
  long long v20 = a2;
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = (void *)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 8);
  int v25 = *(unsigned __int8 *)(a1 + 32);
  if (v25 != 5)
  {
    uint64_t v30 = *(void *)(a1 + 16);
    uint64_t v31 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 24) = 0u;
    *(_OWORD *)(v32 + 104) = 0u;
    *(_OWORD *)(v32 + 88) = 0u;
    *(_OWORD *)(v32 + 72) = 0u;
    *(_OWORD *)(v32 + 56) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    *(unsigned char *)(v32 + 16) = 2;
    RBPathStorageInit();
    int v33 = *(unsigned __int8 *)(v32 + 16);
    swift_retain();
    if (v33 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    uint64_t v46 = v22;
    uint64_t v47 = v24;
    uint64_t v48 = v30;
    uint64_t v49 = v31;
    char v50 = v25;
    outlined copy of Path.Storage(v22, v24, v30, v31, v25);
    Path.append(to:)(v32 + 24);
    outlined consume of Path.Storage(v22, v24, v30, v31, v25);
    uint64_t v26 = v32;
    char v11 = a3;
    long long v20 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v26 = v22;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 24) = 0u;
    double result = (void *)(v26 + 24);
    *(_OWORD *)(v26 + 104) = 0u;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 40) = 0u;
    int v28 = *(unsigned __int8 *)(v22 + 16);
    *(unsigned char *)(v26 + 16) = v28;
    if (v28)
    {
      if (v28 == 1)
      {
        swift_retain();
        *(void *)(v26 + 24) = RBPathRetain();
        *(void *)(v26 + 32) = v29;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      int8x16_t v34 = *(void **)(v22 + 24);
      if (!v34)
      {
        __break(1u);
        return result;
      }
      *double result = v34;
      id v35 = v34;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v36 = *(void *)a1;
  uint64_t v37 = *(void *)(a1 + 8);
  uint64_t v38 = *(void *)(a1 + 16);
  uint64_t v39 = *(void *)(a1 + 24);
  unsigned __int8 v40 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v36, v37, v38, v39, v40);
  *(void *)a1 = v26;
  v23[1] = 0;
  v23[2] = 0;
  *uint64_t v23 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v26 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  long long v41 = v20[1];
  v45[0] = *v20;
  v45[1] = v41;
  v45[2] = v20[2];
  *(double *)uint64_t v44 = a4;
  *(double *)&v44[1] = a5;
  *(double *)&v44[2] = a6;
  *(double *)&v44[3] = a7;
  *(double *)&v44[4] = a8;
  *(double *)&v44[5] = a9;
  *(double *)&v44[6] = a10;
  *(double *)&v44[7] = a11;
  MEMORY[0x24C526C30](v26 + 24, v11 & 1 | 0xAu, v44, v45);
  return (void *)swift_release();
}

uint64_t GraphicsContext.Storage.Shared.__deallocating_deinit()
{
  GraphicsContext.Storage.Shared.deinit();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall Path.move(to:)(CGPoint to)
{
  specialized Path.withMutableBuffer(do:)(v1, 0, to.x, to.y);
}

id *GraphicsContext.Storage.Shared.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)(v0 + 10), (uint64_t)v2, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  outlined retain of GraphicsContext.ResolvedShading(v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading?);

  swift_release();
  return v0;
}

uint64_t GraphicsContext.fill(_:with:style:)(uint64_t a1, uint64_t a2, __int16 a3, double *a4)
{
  uint64_t v4 = *(void *)(a2 + 64);
  char v5 = *(unsigned char *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  void v13[2] = *(_OWORD *)(a2 + 32);
  void v13[3] = v7;
  uint64_t v14 = v4;
  char v15 = v5;
  uint64_t v9 = a3 & 0x101;
  long long v10 = 0u;
  long long v11 = 0u;
  char v12 = 0;
  return GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v13, (uint64_t)&v9, a4);
}

uint64_t GraphicsContext.draw(_:with:style:)(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t result = *(void *)(a2 + 48);
  char v11 = *(unsigned char *)(a2 + 72);
  uint64_t v12 = *(void *)a3;
  uint64_t v13 = *(void *)(a3 + 8);
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(a3 + 32);
  char v17 = *(unsigned char *)(a3 + 40);
  switch(v11)
  {
    case 0:
      long long v18 = *(void **)(*((void *)a4 + 2) + 32);
      if (*(unsigned char *)(a3 + 40))
      {
        uint64_t v127 = *(void *)a3;
        uint64_t v128 = v13;
        uint64_t v129 = v14;
        uint64_t v130 = v15;
        uint64_t v131 = v16;
        id v19 = v18;
        RBShape.setStrokedPath(_:style:)(a1, (double *)&v127);
      }
      else
      {
        double v55 = a4[7];
        char v56 = v12 & 1;
        id v57 = v18;
        RBShape.setPath(_:style:shapeDistance:)(a1, v56, v55);
      }

      uint64_t v58 = RBDrawingStateInit();
      RBDrawingStateClipShape();
      GraphicsContext.beginLayerWithBackdrop(color:in:)(*(float *)&v6, *((float *)&v6 + 1), *(float *)&v7, *((float *)&v7 + 1), v58, (uint64_t)a4);
      RBDrawingStateDrawLayer();
      return RBDrawingStateDestroy();
    case 4:
      uint64_t v91 = *(void *)(a2 + 64);
      uint64_t v93 = *(void *)(a2 + 56);
      uint64_t v95 = *(void *)(a2 + 48);
      uint64_t v97 = *(void *)(a2 + 40);
      uint64_t v99 = *(void *)(a2 + 32);
      uint64_t v88 = *(void *)(a2 + 16);
      char v82 = *(unsigned char *)(a3 + 40);
      uint64_t v80 = *(void *)(a3 + 8);
      uint64_t v81 = *(void *)a3;
      uint64_t v84 = *(void *)(a3 + 16);
      uint64_t v86 = *(void *)(a3 + 24);
      uint64_t v20 = *((void *)a4 + 4);
      uint64_t v21 = v20;
      uint64_t v22 = *((void *)a4 + 5);
      if (v20 == 1)
      {
        uint64_t v23 = *((void *)a4 + 2);
        uint64_t v21 = *(void *)(v23 + 48);
        uint64_t v22 = *(void *)(v23 + 56);
        swift_retain();
        swift_retain();
      }
      memset(v147, 0, sizeof(v147));
      char v148 = 1;
      v111[34] = 0;
      uint64_t v102 = 0;
      uint64_t v103 = 0;
      uint64_t v104 = 1;
      LOBYTE(v105) = 1;
      uint64_t v106 = 0;
      char v107 = 5;
      uint64_t v108 = v21;
      uint64_t v109 = v22;
      uint64_t v110 = 0;
      outlined init with take of CGRect?((uint64_t)v147, (uint64_t)v111);
      v111[33] = 0;
      uint64_t v24 = *(void (**)(uint64_t *))(*(void *)v6 + 80);
      outlined copy of GraphicsContext.Shading.Storage((void *)v6, v7, v9, v8, v99, v97, v95, v93, v91, 4);
      outlined copy of EnvironmentValues?(v20);
      v24(&v102);
      uint64_t v25 = v106;
      char v78 = v107;
      uint64_t v89 = a1;
      uint64_t v79 = v106;
      if (v107 == 1) {
        swift_bridgeObjectRetain();
      }
      else {
        uint64_t v25 = MEMORY[0x263F8EE78];
      }
      uint64_t v112 = v25;
      LOBYTE(v142) = 0;
      _ShapeStyle_Pack.subscript.getter((unsigned __int8 *)&v142, 0, (uint64_t)&v127);
      swift_bridgeObjectRelease();
      unsigned __int8 v76 = v128;
      uint64_t v77 = v127;
      unsigned __int8 v74 = v130;
      uint64_t v75 = v129;
      uint64_t v72 = v132;
      uint64_t v73 = v131;
      uint64_t v70 = v134;
      uint64_t v71 = v133;
      uint64_t v59 = v135;
      uint64_t v60 = v136;
      char v61 = v137;
      uint64_t v62 = v139;
      uint64_t v112 = v127;
      uint64_t v113 = v128;
      uint64_t v114 = v129;
      uint64_t v115 = v130;
      uint64_t v116 = v131;
      uint64_t v117 = v132;
      uint64_t v118 = v133;
      uint64_t v119 = v134;
      uint64_t v120 = v135;
      uint64_t v121 = v136;
      char v122 = v137;
      int v123 = v138;
      uint64_t v124 = v139;
      char v125 = v140;
      uint64_t v126 = v141;
      *(void *)&long long v142 = v81;
      *((void *)&v142 + 1) = v80;
      uint64_t v143 = v84;
      uint64_t v144 = v86;
      uint64_t v145 = v16;
      char v146 = v82;
      _ShapeStyle_Pack.Style.draw(_:style:in:bounds:)(v89, &v142, (uint64_t)a4, (uint64_t)v147);
      outlined consume of GraphicsContext.Shading.Storage((void *)v6, v7, v88, v8, v99, v97, v95, v93, v91, 4);
      outlined consume of _ShapeStyle_Pack.Fill(v77, v76, v75, v74, v73, v72, v71, v70, v59, v60, v61);
      outlined consume of GraphicsBlendMode?(v62, v69);
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_Shape.Result(v79, v78);
      swift_release();
      swift_release();
      return swift_release();
    case 8:
      uint64_t v90 = a1;
      if (*(void *)(v6 + 16))
      {
        uint64_t v26 = *(void *)(a3 + 24);
        uint64_t v27 = *(void *)(a3 + 32);
        int v28 = *(void **)(v6 + 32);
        uint64_t v29 = *(void *)(v6 + 40);
        uint64_t v30 = *(void *)(v6 + 48);
        uint64_t v31 = *(void *)(v6 + 56);
        uint64_t v32 = *(void *)(v6 + 64);
        uint64_t v33 = *(void *)(v6 + 72);
        uint64_t v34 = *(void *)(v6 + 80);
        uint64_t v35 = *(void *)(v6 + 88);
        uint64_t v36 = *(void *)(v6 + 96);
        char v37 = *(unsigned char *)(v6 + 104);
        uint64_t v127 = (uint64_t)v28;
        uint64_t v128 = v29;
        uint64_t v129 = v30;
        uint64_t v130 = v31;
        uint64_t v131 = v32;
        uint64_t v132 = v33;
        uint64_t v133 = v34;
        uint64_t v134 = v35;
        uint64_t v135 = v36;
        LOBYTE(v136) = v37;
        uint64_t v112 = v12;
        uint64_t v113 = v13;
        uint64_t v114 = v14;
        uint64_t v115 = v26;
        uint64_t v116 = v27;
        LOBYTE(v117) = v17;
        outlined copy of GraphicsContext.Shading.Storage(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
        GraphicsContext.draw(_:with:style:)(v90, &v127, &v112, a4);
        return (uint64_t)outlined consume of GraphicsContext.Shading.Storage(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
      }
      else
      {
        __break(1u);
      }
      return result;
    case 9:
      uint64_t v38 = v6 + 16;
      uint64_t v39 = *(void *)(a3 + 16);
      uint64_t v40 = *(void *)a3;
      uint64_t v41 = *(void *)(a3 + 8);
      char v42 = *(unsigned char *)(a3 + 40);
      outlined init with take of GraphicsContext.ResolvedShading(v38, (uint64_t)&v127);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v127, (uint64_t)&v112);
      uint64_t v102 = v40;
      uint64_t v103 = v41;
      uint64_t v104 = v39;
      uint64_t v105 = v15;
      uint64_t v106 = v16;
      char v107 = v42;
      outlined retain of GraphicsContext.ResolvedShading(&v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of GraphicsContext.ResolvedShading);
      GraphicsContext.draw(_:with:style:)(a1, (uint64_t)&v112, (uint64_t)&v102, (uint64_t)a4);
      int v43 = &v127;
      goto LABEL_31;
    case 10:
      if (v7 | v6 | v9 | v8 | *(void *)(a2 + 32) | *(void *)(a2 + 40) | result | *(void *)(a2 + 56) | *(void *)(a2 + 64)) {
        goto LABEL_12;
      }
      char v83 = *(unsigned char *)(a3 + 40);
      uint64_t v63 = *(void *)(a3 + 8);
      uint64_t v64 = *(void *)a3;
      uint64_t v85 = *(void *)(a3 + 16);
      uint64_t v87 = *(void *)(a3 + 24);
      uint64_t v65 = *((void *)a4 + 2);
      uint64_t v66 = *((void *)a4 + 4);
      if (v66 == 1)
      {
        uint64_t v67 = *(void *)(v65 + 48);
        uint64_t v68 = *(void *)(v65 + 56);
        swift_retain();
        swift_retain();
      }
      else
      {
        uint64_t v68 = *((void *)a4 + 5);
        uint64_t v67 = *((void *)a4 + 4);
      }
      uint64_t v112 = v67;
      uint64_t v113 = v68;
      outlined copy of EnvironmentValues?(v66);
      GraphicsContext.Storage.Shared.resolvedForeground(in:)(&v112, (uint64_t)&v127);
      swift_release();
      swift_release();
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v127, (uint64_t)&v112);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v112, (uint64_t)&v102);
      *(void *)&long long v142 = v64;
      *((void *)&v142 + 1) = v63;
      uint64_t v143 = v85;
      uint64_t v144 = v87;
      uint64_t v145 = v16;
      char v146 = v83;
      GraphicsContext.draw(_:with:style:)(a1, (uint64_t)&v102, (uint64_t)&v142, (uint64_t)a4);
      int v43 = &v112;
LABEL_31:
      uint64_t result = (uint64_t)outlined retain of GraphicsContext.ResolvedShading(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
      break;
    default:
LABEL_12:
      uint64_t v92 = *(void *)(a2 + 64);
      uint64_t v94 = *(void *)(a2 + 56);
      uint64_t v96 = *(void *)(a2 + 48);
      uint64_t v98 = *(void *)(a2 + 40);
      uint64_t v101 = *(void *)(a2 + 32);
      uint64_t v44 = *(void *)(a3 + 32);
      uint64_t v45 = a1;
      uint64_t v46 = (void *)*((void *)a4 + 2);
      uint64_t v47 = (void *)v46[4];
      if (*(unsigned char *)(a3 + 40))
      {
        uint64_t v112 = *(void *)a3;
        uint64_t v113 = v13;
        uint64_t v114 = v14;
        uint64_t v115 = v15;
        uint64_t v116 = v44;
        id v48 = v47;
        RBShape.setStrokedPath(_:style:)(v45, (double *)&v112);
      }
      else
      {
        double v49 = a4[7];
        char v50 = v12 & 1;
        id v51 = v47;
        RBShape.setPath(_:style:shapeDistance:)(v45, v50, v49);
      }

      uint64_t v127 = v6;
      uint64_t v128 = v7;
      uint64_t v129 = v9;
      uint64_t v130 = v8;
      uint64_t v131 = v101;
      uint64_t v132 = v98;
      uint64_t v133 = v96;
      uint64_t v134 = v94;
      uint64_t v135 = v92;
      LOBYTE(v136) = v11;
      uint64_t v52 = *((void *)a4 + 4);
      if (v52 == 1)
      {
        uint64_t v53 = v46[6];
        uint64_t v54 = v46[7];
        swift_retain();
        swift_retain();
      }
      else
      {
        uint64_t v54 = *((void *)a4 + 5);
        uint64_t v53 = *((void *)a4 + 4);
      }
      uint64_t v102 = v53;
      uint64_t v103 = v54;
      outlined copy of EnvironmentValues?(v52);
      GraphicsContext.Storage.Shared.setShading(_:in:)((uint64_t)&v127, &v102);
      swift_release();
      swift_release();
      uint64_t result = RBDrawingStateDrawShape();
      break;
  }
  return result;
}

void *outlined retain of GraphicsContext.ResolvedShading(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

void *GraphicsContext.draw(_:with:style:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of GraphicsContext.ResolvedShading(a2, (uint64_t)v58);
  double v7 = *(double *)a3;
  double v8 = *(double *)(a3 + 8);
  double v10 = *(double *)(a3 + 16);
  double v9 = *(double *)(a3 + 24);
  double v11 = *(double *)(a3 + 32);
  char v12 = *(unsigned char *)(a3 + 40);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v58, (uint64_t)v59);
  int v13 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)v59);
  if (v13 == 8)
  {
    uint64_t result = (void *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v59);
    if (*(void *)(*result + 16))
    {
      outlined init with take of GraphicsContext.ResolvedShading(*result + 32, (uint64_t)v55);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v55, (uint64_t)&v45);
      *(double *)&long long v40 = v7;
      *((double *)&v40 + 1) = v8;
      double v41 = v10;
      double v42 = v9;
      double v43 = v11;
      char v44 = v12;
      outlined retain of GraphicsContext.ResolvedShading(v55, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of GraphicsContext.ResolvedShading);
      GraphicsContext.draw(_:with:style:)(a1, &v45, &v40, a4);
      return outlined retain of GraphicsContext.ResolvedShading(v55, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
    }
    else
    {
      __break(1u);
    }
  }
  else if (v13 == 4)
  {
    uint64_t v22 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v59);
    char v23 = *(unsigned char *)(v22 + 80);
    int v24 = *(_DWORD *)(v22 + 84);
    uint64_t v25 = *(void *)(v22 + 88);
    char v26 = *(unsigned char *)(v22 + 96);
    uint64_t v27 = *(void *)(v22 + 104);
    long long v28 = *(_OWORD *)(v22 + 16);
    long long v45 = *(_OWORD *)v22;
    long long v46 = v28;
    long long v29 = *(_OWORD *)(v22 + 48);
    long long v47 = *(_OWORD *)(v22 + 32);
    long long v48 = v29;
    long long v49 = *(_OWORD *)(v22 + 64);
    char v50 = v23;
    int v51 = v24;
    uint64_t v52 = v25;
    char v53 = v26;
    uint64_t v54 = v27;
    *(double *)&long long v40 = v7;
    *((double *)&v40 + 1) = v8;
    double v41 = v10;
    double v42 = v9;
    double v43 = v11;
    char v44 = v12;
    memset(v56, 0, sizeof(v56));
    char v57 = 1;
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v58, (uint64_t)v55);
    uint64_t v30 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v55);
    uint64_t v31 = *(void *)(v30 + 88);
    unsigned __int8 v32 = *(unsigned char *)(v30 + 96);
    outlined copy of _ShapeStyle_Pack.Fill(*(id *)v30, *(void *)(v30 + 8), *(void **)(v30 + 16), *(void **)(v30 + 24), *(void *)(v30 + 32), *(void *)(v30 + 40), *(void *)(v30 + 48), *(void *)(v30 + 56), *(void *)(v30 + 64), *(void *)(v30 + 72), *(unsigned char *)(v30 + 80));
    outlined copy of GraphicsBlendMode?(v31, v32);
    swift_bridgeObjectRetain();
    _ShapeStyle_Pack.Style.draw(_:style:in:bounds:)(a1, &v40, a4, (uint64_t)v56);
    return outlined retain of GraphicsContext.ResolvedShading(v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
  }
  else if (v13)
  {
    uint64_t v33 = *(void **)(*(void *)(a4 + 16) + 32);
    if (v12)
    {
      *(double *)&long long v45 = v7;
      *((double *)&v45 + 1) = v8;
      *(double *)&long long v46 = v10;
      *((double *)&v46 + 1) = v9;
      *(double *)&long long v47 = v11;
      id v34 = v33;
      RBShape.setStrokedPath(_:style:)(a1, (double *)&v45);
    }
    else
    {
      double v38 = *(double *)(a4 + 56);
      id v39 = v33;
      RBShape.setPath(_:style:shapeDistance:)(a1, LOBYTE(v7) & 1, v38);
    }

    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v58, (uint64_t)v55);
    GraphicsContext.Storage.Shared.setShading(_:)((uint64_t)v55);
    return (void *)RBDrawingStateDrawShape();
  }
  else
  {
    uint64_t v14 = (float *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v59);
    float v15 = *v14;
    float v16 = v14[1];
    float v17 = v14[2];
    float v18 = v14[3];
    id v19 = *(void **)(*(void *)(a4 + 16) + 32);
    if (v12)
    {
      v55[0] = v7;
      v55[1] = v8;
      v55[2] = v10;
      v55[3] = v9;
      v55[4] = v11;
      id v20 = v19;
      RBShape.setStrokedPath(_:style:)(a1, v55);
    }
    else
    {
      double v35 = *(double *)(a4 + 56);
      id v36 = v19;
      RBShape.setPath(_:style:shapeDistance:)(a1, LOBYTE(v7) & 1, v35);
    }

    uint64_t v37 = RBDrawingStateInit();
    RBDrawingStateClipShape();
    GraphicsContext.beginLayerWithBackdrop(color:in:)(v15, v16, v17, v18, v37, a4);
    RBDrawingStateDrawLayer();
    return (void *)RBDrawingStateDestroy();
  }
  return result;
}

uint64_t outlined init with take of GraphicsContext.ResolvedShading(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg(uint64_t a1)
{
  return *(void *)(a1 + 96) >> 60;
}

id RBShape.setPath(_:style:shapeDistance:)(uint64_t a1, char a2, double a3)
{
  long long v4 = v3;
  outlined init with take of Path.Storage(a1, (uint64_t)v23);
  outlined init with take of Path.Storage((uint64_t)v23, (uint64_t)&v24);
  switch(v26)
  {
    case 0:
      objc_msgSend(v3, sel_setRect_, *(_OWORD *)&v24, *(_OWORD *)&v25);
      break;
    case 1:
      objc_msgSend(v3, sel_setEllipseInRect_, *(_OWORD *)&v24, *(_OWORD *)&v25);
      break;
    case 2:
      double v7 = *(double *)(v24.i64[0] + 16);
      double v8 = *(double *)(v24.i64[0] + 24);
      double v9 = *(double *)(v24.i64[0] + 32);
      double v10 = *(double *)(v24.i64[0] + 40);
      double v11 = *(double *)(v24.i64[0] + 48);
      double v12 = *(double *)(v24.i64[0] + 56);
      uint64_t v13 = *(unsigned __int8 *)(v24.i64[0] + 64);
      v27.origin.CGFloat x = v7;
      v27.origin.CGFloat y = v8;
      v27.size.CGFloat width = v9;
      v27.size.CGFloat height = v10;
      double v14 = fabs(CGRectGetWidth(v27)) * 0.5;
      v28.origin.CGFloat x = v7;
      v28.origin.CGFloat y = v8;
      v28.size.CGFloat width = v9;
      v28.size.CGFloat height = v10;
      double v15 = fabs(CGRectGetHeight(v28)) * 0.5;
      if (v15 >= v14) {
        double v15 = v14;
      }
      if (v15 >= v11) {
        double v16 = v11;
      }
      else {
        double v16 = v15;
      }
      if (v15 >= v12) {
        double v17 = v12;
      }
      else {
        double v17 = v15;
      }
      objc_msgSend(v4, sel_setRoundedRect_cornerSize_cornerStyle_, v13, v7, v8, v9, v10, v16, v17);
      break;
    case 6:
      int8x16_t v18 = vorrq_s8(v24, v25);
      if (vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL))) {
        goto LABEL_15;
      }
      objc_msgSend(v3, sel_setEmpty);
      break;
    default:
LABEL_15:
      uint64_t v19 = Path.retainRBPath()();
      v22[0] = 0x3FF0000000000000;
      v22[1] = 0;
      void v22[2] = 0;
      v22[3] = 0x3FF0000000000000;
      v22[4] = 0;
      v22[5] = 0;
      objc_msgSend(v3, sel_setRBPath_transform_, v19, v20, v22);
      objc_msgSend(v3, sel_setEOFill_, a2 & 1);
      RBPathRelease();
      break;
  }
  return RBShape.setRenderingMode(style:shapeDistance:)(a3);
}

id RBShape.setRenderingMode(style:shapeDistance:)(double a1)
{
  double v2 = a1;
  if ((~*(void *)&a1 & 0x7FF0000000000000) != 0 || (*(void *)&a1 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    if (a1 < 0.0) {
      uint64_t v4 = 3;
    }
    else {
      uint64_t v4 = 2;
    }
    objc_msgSend(v1, sel_setRenderingMode_, v4);
    a1 = fabs(v2);
    long long v5 = sel_setRenderingModeArgument_;
    uint64_t v6 = v1;
  }
  else
  {
    long long v5 = sel_setRenderingMode_;
    uint64_t v6 = v1;
  }
  return objc_msgSend(v6, v5, a1);
}

void *GraphicsContext.Storage.Shared.setShading(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  v93[20] = *MEMORY[0x263EF8340];
  outlined init with take of GraphicsContext.ResolvedShading(a1, (uint64_t)v92);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v92, (uint64_t)v93);
  switch(_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)v93))
  {
    case 1u:
      long long v3 = (_DWORD *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v93);
      LODWORD(v4) = *v3;
      LODWORD(v5) = v3[1];
      LODWORD(v6) = v3[2];
      LODWORD(v7) = v3[3];
      double v8 = *(void **)(v1 + 40);
      if (*(_DWORD *)(v2 + 64) != 2) {
        RBColorFromLinear();
      }
      objc_msgSend(v8, sel_setColor_, v4, v5, v6, v7);
      goto LABEL_9;
    case 2u:
      double v14 = (_DWORD *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v93);
      LODWORD(v15) = *v14;
      LODWORD(v16) = v14[1];
      LODWORD(v17) = v14[2];
      LODWORD(v18) = v14[3];
      if (*(_DWORD *)(v1 + 64) == 2) {
        RBColorToLinear();
      }
      objc_msgSend(*(id *)(v1 + 40), sel_setColor_, v15, v16, v17, v18);
LABEL_9:
      *(void *)(v2 + 264) = 0;
      return (void *)swift_release();
    case 3u:
      uint64_t v19 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v93);
      uint64_t v22 = *(void *)v19;
      int v23 = *(_DWORD *)(v19 + 24);
      long long v24 = *(_OWORD *)(v19 + 32);
      long long v25 = *(_OWORD *)(v19 + 48);
      long long v82 = v24;
      long long v83 = v25;
      if (v22) {
        return objc_msgSend(*(id *)(v1 + 40), sel_setShader_bounds_flags_, v22, &v82, v23 & 1);
      }
      LODWORD(v24) = *MEMORY[0x263F638F0];
      LODWORD(v25) = *(_DWORD *)(MEMORY[0x263F638F0] + 4);
      LODWORD(v20) = *(_DWORD *)(MEMORY[0x263F638F0] + 8);
      LODWORD(v21) = *(_DWORD *)(MEMORY[0x263F638F0] + 12);
      return objc_msgSend(*(id *)(v1 + 40), sel_setColor_, *(double *)&v24, *(double *)&v25, v20, v21);
    case 5u:
      uint64_t v9 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v93);
      char v10 = *(unsigned char *)(v9 + 8);
      char v11 = *(unsigned char *)(v9 + 64);
      *(void *)&long long v86 = *(void *)v9;
      BYTE8(v86) = v10;
      long long v12 = *(_OWORD *)(v9 + 32);
      long long v82 = *(_OWORD *)(v9 + 16);
      long long v83 = v12;
      long long v84 = *(_OWORD *)(v9 + 48);
      char v85 = v11;
      return (void *)GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:)((uint64_t *)&v86, &v82);
    case 6u:
      uint64_t v46 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v93);
      uint64_t v47 = *(void *)v46;
      int v49 = *(_DWORD *)(v46 + 24);
      int v48 = *(_DWORD *)(v46 + 28);
      int v51 = *(_DWORD *)(v46 + 32);
      int v50 = *(_DWORD *)(v46 + 36);
      uint64_t v53 = *(void *)(v46 + 40);
      uint64_t v52 = *(void *)(v46 + 48);
      int v54 = *(_DWORD *)(v46 + 56);
      uint64_t v55 = *(void *)(v46 + 64);
      uint64_t v56 = *(void *)(v46 + 72);
      unint64_t v58 = *(void *)(v46 + 80);
      uint64_t v57 = *(void *)(v46 + 88);
      uint64_t v59 = *(void *)(v46 + 16) + 32;
      uint64_t v60 = v53 * v52;
      if ((*(unsigned char *)(v46 + 8) & 1) == 0)
      {
        if ((unsigned __int128)(v53 * (__int128)v52) >> 64 == (v53 * v52) >> 63)
        {
          char v61 = *(void **)(v2 + 40);
          uint64_t v62 = v47 + 32;
          swift_bridgeObjectRetain();
          LODWORD(v73) = v54;
          uint64_t v67 = v61;
          uint64_t v68 = 1;
          goto LABEL_18;
        }
LABEL_22:
        __break(1u);
      }
      if ((unsigned __int128)(v53 * (__int128)v52) >> 64 != (v53 * v52) >> 63)
      {
        __break(1u);
        goto LABEL_22;
      }
      char v61 = *(void **)(v2 + 40);
      uint64_t v62 = v47 + 32;
      swift_bridgeObjectRetain();
      LODWORD(v73) = v54;
      uint64_t v67 = v61;
      uint64_t v68 = 2;
LABEL_18:
      LODWORD(v63) = v49;
      LODWORD(v64) = v48;
      LODWORD(v65) = v51;
      LODWORD(v66) = v50;
      objc_msgSend(v67, sel_setMeshGradientType_positions_colors_count_width_background_colorSpace_flags_, v68, v62, v59, v60, v53, 2, v63, v64, v65, v66, v73);
      swift_bridgeObjectRelease();
      long long v82 = v58;
      *(void *)&long long v83 = 0;
      *((void *)&v83 + 1) = v57;
      *(void *)&long long v84 = v55;
      *((void *)&v84 + 1) = v56;
      return objc_msgSend(v61, sel_concat_, &v82);
    case 7u:
      uint64_t v26 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v93);
      char v27 = *(unsigned char *)(v26 + 8);
      uint64_t v28 = *(void *)(v26 + 32);
      char v29 = *(unsigned char *)(v26 + 40);
      char v30 = *(unsigned char *)(v26 + 60);
      char v31 = *(unsigned char *)(v26 + 96);
      char v32 = *(unsigned char *)(v26 + 97);
      *(void *)&long long v86 = *(void *)v26;
      __int16 v33 = *(_WORD *)(v26 + 98);
      BYTE8(v86) = v27;
      long long v87 = *(_OWORD *)(v26 + 16);
      *(void *)&v88[0] = v28;
      BYTE8(v88[0]) = v29;
      *(_OWORD *)((char *)v88 + 12) = *(_OWORD *)(v26 + 44);
      BYTE12(v88[1]) = v30;
      long long v34 = *(_OWORD *)(v26 + 80);
      long long v89 = *(_OWORD *)(v26 + 64);
      long long v90 = v34;
      LOBYTE(v91) = v31;
      BYTE1(v91) = v32;
      HIWORD(v91) = v33;
      long long v79 = v89;
      long long v80 = v34;
      int v81 = v91;
      long long v77 = v88[0];
      long long v78 = v88[1];
      long long v75 = v86;
      long long v76 = v87;
      _OWORD v69[2] = &v86;
      v69[3] = MEMORY[0x270FA5388](v26);
      long long v70 = v35;
      long long v71 = v36;
      long long v72 = v37;
      uint64_t v73 = v38;
      int v74 = v39;
      MEMORY[0x270FA5388](v40);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v92, (uint64_t)&v82);
      uint64_t v41 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v82);
      outlined retain of GraphicsImage(v41);
      GraphicsImage.withRBImage(image:color:)((void (*)(uint64_t))partial apply for closure #1 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:), v42, v43, v44, v45, (uint64_t)v69, (void (*)(__n128, __n128, __n128, __n128))closure #2 in RBFill.setImage(_:destRect:in:)partial apply);
      *(void *)(v1 + 264) = 0;
      swift_release();
      return outlined retain of GraphicsContext.ResolvedShading(v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
    default:
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v93);
      __n128 result = (void *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
  }
}

id outlined copy of GraphicsContext.ResolvedShading(id result, char a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unint64_t a13)
{
  switch(a13 >> 60)
  {
    case 3uLL:
      return result;
    case 4uLL:
      outlined copy of _ShapeStyle_Pack.Fill(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      outlined copy of GraphicsBlendMode?(a12, a13);
      goto LABEL_7;
    case 5uLL:
    case 8uLL:
      goto LABEL_7;
    case 6uLL:
      swift_bridgeObjectRetain();
LABEL_7:
      __n128 result = (id)swift_bridgeObjectRetain();
      break;
    case 7uLL:
      __n128 result = outlined copy of GraphicsImage.Contents?(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_(uint64_t result)
{
  *(void *)(result + 96) &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

Swift::Void __swiftcall Path.addLine(to:)(CGPoint to)
{
  specialized Path.withMutableBuffer(do:)(v1, 1u, to.x, to.y);
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, unsigned __int8 a2, double a3, double a4)
{
  unsigned __int8 v4 = a2;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = (void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = *(unsigned __int8 *)(a1 + 32);
  if (v11 != 5)
  {
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    *(unsigned char *)(v18 + 16) = 2;
    RBPathStorageInit();
    int v19 = *(unsigned __int8 *)(v18 + 16);
    swift_retain();
    if (v19 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    void v28[2] = v8;
    v28[3] = v10;
    v28[4] = v16;
    v28[5] = v17;
    char v29 = v11;
    outlined copy of Path.Storage(v8, v10, v16, v17, v11);
    Path.append(to:)(v18 + 24);
    outlined consume of Path.Storage(v8, v10, v16, v17, v11);
    uint64_t v12 = v18;
    unsigned __int8 v4 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v12 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 24) = 0u;
    __n128 result = (void *)(v12 + 24);
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    int v14 = *(unsigned __int8 *)(v8 + 16);
    *(unsigned char *)(v12 + 16) = v14;
    if (v14)
    {
      if (v14 == 1)
      {
        swift_retain();
        *(void *)(v12 + 24) = RBPathRetain();
        *(void *)(v12 + 32) = v15;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      double v20 = *(void **)(v8 + 24);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      *__n128 result = v20;
      id v21 = v20;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v25 = *(void *)(a1 + 24);
  unsigned __int8 v26 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v22, v23, v24, v25, v26);
  *(void *)a1 = v12;
  v9[1] = 0;
  void v9[2] = 0;
  *uint64_t v9 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v12 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  *(double *)uint64_t v28 = a3;
  *(double *)&v28[1] = a4;
  MEMORY[0x24C526C30](v12 + 24, v4, v28, 0);
  return (void *)swift_release();
}

uint64_t Path.strokedPath(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)v2;
  char v5 = *(unsigned char *)(v2 + 32);
  double v6 = (void *)result;
  uint64_t v7 = 0;
  switch(v5)
  {
    case 2:
      __n128 result = CGRectIsNull(*(CGRect *)(v4 + 16));
      if (result) {
        goto LABEL_3;
      }
      goto LABEL_5;
    case 3:
    case 4:
      goto LABEL_17;
    case 5:
      if (!*(unsigned char *)(v4 + 16))
      {
        if (!*(void *)(v4 + 24))
        {
          __break(1u);
LABEL_17:
          __n128 result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        goto LABEL_9;
      }
      if (*(unsigned char *)(v4 + 16) == 1)
      {
LABEL_9:
        swift_retain();
        goto LABEL_14;
      }
      uint64_t v8 = one-time initialization token for bufferCallbacks;
      swift_retain();
      if (v8 != -1) {
        swift_once();
      }
LABEL_14:
      IsEmptCGFloat y = RBPathIsEmpty();
      __n128 result = _s7SwiftUI4PathVWOsTm_0(v2, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      if (IsEmpty)
      {
LABEL_3:
        uint64_t v7 = 0;
        char v5 = 6;
      }
      else
      {
LABEL_5:
        Path.retainRBPath()();
        type metadata accessor for Path.PathBox();
        uint64_t v7 = swift_allocObject();
        *(_OWORD *)(v7 + 104) = 0u;
        *(_OWORD *)(v7 + 88) = 0u;
        *(_OWORD *)(v7 + 72) = 0u;
        *(_OWORD *)(v7 + 56) = 0u;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 24) = 0u;
        *(unsigned char *)(v7 + 16) = 2;
        RBPathStorageInit();
        closure #1 in Path.strokedPath(_:)(v7 + 24, v6);
        __n128 result = RBPathRelease();
        char v5 = 5;
      }
LABEL_6:
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 32) = v5;
      return result;
    case 6:
      goto LABEL_6;
    default:
      __n128 result = CGRectIsNull(*(CGRect *)v2);
      if (result) {
        goto LABEL_3;
      }
      goto LABEL_5;
  }
}

uint64_t type metadata accessor for Path.PathBox()
{
  return self;
}

uint64_t Path.retainRBPath()()
{
  uint64_t v1 = *(void *)v0;
  switch(*(unsigned char *)(v0 + 32))
  {
    case 1:
      return RBPathMakeEllipse();
    case 2:
      return RBPathMakeRoundedRect();
    case 3:
    case 4:
      goto LABEL_17;
    case 5:
      if (!*(unsigned char *)(v1 + 16))
      {
        if (!*(void *)(v1 + 24))
        {
          __break(1u);
LABEL_17:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        goto LABEL_5;
      }
      if (*(unsigned char *)(v1 + 16) == 1)
      {
LABEL_5:
        swift_retain();
        goto LABEL_14;
      }
      uint64_t v4 = one-time initialization token for bufferCallbacks;
      swift_retain();
      if (v4 != -1) {
        swift_once();
      }
LABEL_14:
      uint64_t v3 = RBPathRetain();
      _s7SwiftUI4PathVWOsTm_0(v0, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      return v3;
    case 6:
      return *MEMORY[0x263F63948];
    default:
      return RBPathMakeRect();
  }
}

uint64_t outlined release of Path(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t _s7SwiftUI4PathVWOsTm_0(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t @objc closure #5 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = a1 + 24;
  swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t @objc closure #5 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1)
{
  return @objc closure #5 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(a1, MEMORY[0x263F63958]);
}

uint64_t closure #1 in Path.strokedPath(_:)(uint64_t a1, void *a2)
{
  void v8[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = a2[1];
  uint64_t v3 = a2[2];
  v7[0] = *a2;
  v7[1] = v3;
  v7[2] = a2[4];
  v8[0] = v4;
  uint64_t v5 = a2[3];
  v8[1] = *(void *)(v5 + 16);
  unint64_t v8[2] = v5 + 32;
  MEMORY[0x24C526C30](a1, 19, v7, v8);
  Path.append(to:)(a1);
  return MEMORY[0x24C526C30](a1, 16, 0, 0);
}

uint64_t Path.append(to:)(uint64_t result)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  switch(*(unsigned char *)(v1 + 32))
  {
    case 1:
      *(void *)&long long v10 = *(void *)v1;
      *((void *)&v10 + 1) = v2;
      *(void *)&long long v11 = v4;
      *((void *)&v11 + 1) = v5;
      uint64_t v6 = 7;
      return MEMORY[0x24C526C30](result, v6, &v10, 0);
    case 2:
      int v7 = *(unsigned __int8 *)(v3 + 64);
      long long v8 = *(_OWORD *)(v3 + 32);
      long long v10 = *(_OWORD *)(v3 + 16);
      long long v11 = v8;
      long long v12 = *(_OWORD *)(v3 + 48);
      if (v7) {
        uint64_t v6 = 9;
      }
      else {
        uint64_t v6 = 8;
      }
      return MEMORY[0x24C526C30](result, v6, &v10, 0);
    case 3:
    case 4:
      goto LABEL_17;
    case 5:
      if (*(unsigned char *)(v3 + 16))
      {
        if (*(unsigned char *)(v3 + 16) != 1)
        {
          uint64_t v9 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v9 != -1) {
            swift_once();
          }
          goto LABEL_15;
        }
LABEL_10:
        swift_retain();
LABEL_15:
        RBPathStorageAppendPath();
        return _s7SwiftUI4PathVWOsTm_0(v1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      }
      if (*(void *)(v3 + 24)) {
        goto LABEL_10;
      }
      __break(1u);
LABEL_17:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    case 6:
      return result;
    default:
      *(void *)&long long v10 = *(void *)v1;
      *((void *)&v10 + 1) = v2;
      *(void *)&long long v11 = v4;
      *((void *)&v11 + 1) = v5;
      uint64_t v6 = 5;
      return MEMORY[0x24C526C30](result, v6, &v10, 0);
  }
}

uint64_t @objc closure #3 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 24;
  swift_retain();
  uint64_t v6 = MEMORY[0x24C526C50](v5, a2, a3);
  swift_release();
  return v6;
}

void outlined consume of GraphicsContext.ResolvedShading?(void *a1, char a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unint64_t a13)
{
  if ((a13 & 0xFFFFFFFF00FCFE00) != 0x7FFFF00FCFE00)
  {
    outlined consume of GraphicsContext.ResolvedShading(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
}

void GraphicsContext.Storage.Shared.setShading(_:in:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v108 = *MEMORY[0x263EF8340];
  _sSo6CGRectVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  long long v8 = (char *)&v77 - v7;
  uint64_t v9 = (int *)type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v9);
  long long v11 = (uint64_t *)((char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v18 = (char *)&v77 - v17;
  double v20 = *(void **)a1;
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t v24 = *(void *)(a1 + 32);
  uint64_t v23 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v26 = *(void *)(a1 + 56);
  unint64_t v27 = *(void *)(a1 + 64);
  uint64_t v28 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v30 = *a2;
  uint64_t v29 = a2[1];
  switch(v28)
  {
    case 1:
      char v31 = *(void **)(v3 + 264);
      if (!v31 || v31 != v20)
      {
        char v32 = *(void **)(v3 + 40);
        *(void *)&long long v95 = v30;
        *((void *)&v95 + 1) = v29;
        __int16 v33 = *(void (**)(long long *))(*(void *)v20 + 104);
        swift_retain();
        v33(&v95);
        if (*(_DWORD *)(v3 + 64) != 2) {
          RBColorFromLinear();
        }
        objc_msgSend(v32, sel_setColor_);
        *(void *)(v3 + 264) = v20;
        goto LABEL_11;
      }
      break;
    case 2:
      LODWORD(v14) = HIDWORD(v20);
      LODWORD(v13) = v20;
      LODWORD(v16) = HIDWORD(v19);
      LODWORD(v15) = v19;
      if (*(_DWORD *)(v3 + 64) == 2) {
        RBColorToLinear();
      }
      objc_msgSend(*(id *)(v3 + 40), sel_setColor_, v13, v14, v15, v16);
      *(void *)(v3 + 264) = 0;
LABEL_11:
      swift_release();
      break;
    case 3:
      *(void *)&long long v102 = v23;
      *((void *)&v102 + 1) = v25;
      *(void *)&long long v103 = v26;
      *((void *)&v103 + 1) = v27;
      *(void *)&long long v95 = v20;
      *((void *)&v95 + 1) = v19;
      *(void *)&long long v96 = v22;
      *((void *)&v96 + 1) = v21;
      *(_DWORD *)uint64_t v97 = v24;
      *(void *)&v93[0] = v30;
      *((void *)&v93[0] + 1) = v29;
      char v39 = v19;
      uint64_t v90 = v25;
      uint64_t v92 = v23;
      uint64_t v40 = v24;
      uint64_t v41 = v21;
      uint64_t v42 = v22;
      uint64_t v43 = v27;
      id v44 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v45 = Shader.makeRBShader(in:)((uint64_t *)v93);
      objc_msgSend(*(id *)(v3 + 40), sel_setShader_bounds_flags_, v45, &v102, v40 & 1);
      outlined consume of GraphicsContext.Shading.Storage(v20, v39, v42, v41, v40, v92, v90, v26, v43, 3);

      break;
    case 5:
      char v34 = v19;
      uint64_t v92 = v23;
      *(void *)&v93[0] = v20;
      uint64_t v35 = HIDWORD(v27);
      BYTE8(v93[0]) = v19 & 1;
      *(void *)&long long v95 = v22;
      *((void *)&v95 + 1) = v21;
      *(void *)&long long v96 = v24;
      *((void *)&v96 + 1) = v23;
      *(void *)uint64_t v97 = v25;
      *(void *)&v97[8] = v26;
      v97[16] = v27;
      *(void *)&long long v102 = v30;
      *((void *)&v102 + 1) = v29;
      uint64_t v90 = v25;
      uint64_t v91 = v24;
      uint64_t v36 = v21;
      uint64_t v37 = v22;
      uint64_t v38 = v27;
      outlined copy of EitherGradient((uint64_t)v20, v19 & 1);
      GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:colorSpace:)((uint64_t)v93, &v95, v35, (uint64_t *)&v102);
      outlined consume of GraphicsContext.Shading.Storage(v20, v34, v37, v36, v91, v92, v90, v26, v38, 5);
      break;
    case 6:
      unint64_t v87 = v27;
      *(void *)&long long v95 = v20;
      *((void *)&v95 + 1) = v19;
      *(void *)&long long v96 = v22;
      BYTE8(v96) = v21 & 1;
      *(void *)uint64_t v97 = v24;
      v97[8] = v23 & 1;
      *(void *)&v97[16] = v25;
      *(_WORD *)&v97[24] = v26 & 0xFF01;
      *(void *)&long long v102 = v30;
      *((void *)&v102 + 1) = v29;
      uint64_t v67 = *(float (**)(long long *))(*(void *)v25 + 104);
      uint64_t v88 = v21;
      uint64_t v89 = v19;
      uint64_t v68 = v25;
      uint64_t v91 = v24;
      uint64_t v92 = v23;
      uint64_t v69 = v22;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      float v70 = v67(&v102);
      float v72 = v71;
      float v74 = v73;
      float v76 = v75;
      long long v102 = v95;
      long long v103 = v96;
      *(_OWORD *)uint64_t v104 = *(_OWORD *)v97;
      *(_OWORD *)&v104[10] = *(_OWORD *)&v97[10];
      *(void *)&v93[0] = v30;
      *((void *)&v93[0] + 1) = v29;
      swift_retain();
      specialized MeshGradient.withResolvedColors(in:_:)((uint64_t *)v93, (uint64_t *)&v102, v3, (uint64_t)&v95, v70, v72, v74, v76);
      outlined consume of GraphicsContext.Shading.Storage(v20, v89, v69, v88, v91, v92, v68, v26, v87, 6);
      swift_release();
      break;
    case 7:
      uint64_t v86 = v3;
      unint64_t v87 = v27;
      uint64_t v89 = v19;
      uint64_t v90 = v25;
      uint64_t v91 = v24;
      uint64_t v92 = v23;
      uint64_t v88 = v21;
      uint64_t v84 = v22;
      uint64_t v46 = type metadata accessor for Text.Style(0);
      long long v83 = v20;
      uint64_t v47 = *(void (**)(void))(*(void *)(v46 - 8) + 56);
      uint64_t v85 = v26;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v47)(v8, 1, 1, v46);
      long long v78 = v18;
      int v48 = *MEMORY[0x263F288F8];
      void v11[2] = 0;
      uint64_t v82 = (uint64_t)v11 + v9[6];
      v47();
      uint64_t v49 = v9[7];
      *(_DWORD *)((char *)v11 + v49) = v48;
      *((unsigned char *)v11 + v9[8]) = 8;
      *((unsigned char *)v11 + v9[9]) = 3;
      *((unsigned char *)v11 + v9[10]) = 1;
      *long long v11 = v30;
      v11[1] = v29;
      int v50 = v83;
      uint64_t v51 = v90;
      outlined copy of GraphicsContext.Shading.Storage(v83, v89, v84, v88, v91, v92, v90, v85, v87, 7);
      swift_retain();
      swift_retain();
      outlined assign with take of Text.Style?((uint64_t)v8, v82);
      *(_DWORD *)((char *)v11 + v49) = v48;
      uint64_t v52 = (uint64_t)v78;
      outlined init with take of ImageResolutionContext((uint64_t)v11, (uint64_t)v78);
      uint64_t v53 = v9[10];
      if (*(unsigned char *)(v52 + v53)) {
        *(unsigned char *)(v52 + v53) &= ~1u;
      }
      uint64_t v82 = *(void *)(v86 + 40);
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v50 + 80))(&v95, v52);
      *(void *)&long long v102 = v95;
      int v81 = (void *)v95;
      BYTE8(v102) = BYTE8(v95);
      int v80 = BYTE8(v95);
      long long v103 = v96;
      *(void *)uint64_t v104 = *(void *)v97;
      v104[8] = v97[8];
      *(_OWORD *)&v104[12] = *(_OWORD *)&v97[12];
      v104[28] = v98;
      long long v105 = v99;
      long long v106 = v100;
      int v107 = v101;
      outlined copy of GraphicsImage.Contents?((id)v95, SBYTE8(v95));
      uint64_t v54 = outlined release of Image.Resolved((uint64_t)&v95);
      long long v79 = &v77;
      int v94 = v107;
      v93[4] = v105;
      v93[5] = v106;
      v93[0] = v102;
      v93[1] = v103;
      v93[2] = *(_OWORD *)v104;
      v93[3] = *(_OWORD *)&v104[16];
      MEMORY[0x270FA5388](v54);
      uint64_t v55 = v84;
      uint64_t v56 = v85;
      *(&v77 - 10) = (uint64_t)&v102;
      *(&v77 - 9) = v56;
      uint64_t v57 = v88;
      char v58 = v89;
      *(&v77 - 8) = v89;
      *(&v77 - 7) = v55;
      uint64_t v60 = v91;
      uint64_t v59 = v92;
      *(&v77 - 6) = v57;
      *(&v77 - 5) = v60;
      *(&v77 - 4) = v59;
      *(&v77 - 3) = v51;
      v62.n128_f64[0] = MEMORY[0x270FA5388](v61);
      GraphicsImage.withRBImage(image:color:)((void (*)(uint64_t))partial apply for closure #1 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:), v62, v64, v65, v66, v63, (void (*)(__n128, __n128, __n128, __n128))partial apply for closure #2 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:));
      outlined consume of GraphicsImage.Contents?(v81, v80);
      *(void *)(v86 + 264) = 0;
      swift_release();
      outlined consume of GraphicsContext.Shading.Storage(v83, v58, v55, v57, v60, v59, v51, v56, v87, 7);
      outlined destroy of ImageResolutionContext(v52, (uint64_t (*)(void))type metadata accessor for ImageResolutionContext);
      break;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
}

uint64_t outlined consume of EitherGradient(uint64_t a1, char a2)
{
  if (a2) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:colorSpace:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  uint64_t v7 = outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)v17);
  uint64_t v9 = *a4;
  uint64_t v8 = a4[1];
  if (v6) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v5 + 16);
  if (v10 != 1)
  {
    if (!v10)
    {
      uint64_t v11 = one-time initialization token for clear;
      swift_bridgeObjectRetain();
      if (v11 != -1) {
        swift_once();
      }
      uint64_t v12 = static Color.clear;
      swift_retain();
      outlined consume of EitherGradient(v5, 0);
      goto LABEL_9;
    }
LABEL_7:
    *((void *)&v14 + 1) = v8;
    uint64_t v15 = v5;
    char v16 = v6;
    *(void *)&long long v14 = v9;
    MEMORY[0x270FA5388](v7);
    return withGradient(_:in:colorSpace:do:)((uint64_t)&v15, (uint64_t *)&v14);
  }
  uint64_t v12 = *(void *)(v5 + 32);
  swift_retain();
LABEL_9:
  *(void *)&long long v14 = v9;
  *((void *)&v14 + 1) = v8;
  GraphicsContext.Storage.Shared.setColor(_:in:)(v12, &v14);
  return swift_release();
}

uint64_t outlined init with take of GraphicsContext.GradientGeometry(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(unsigned char *)(a2 + 48) = *((unsigned char *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t outlined copy of EitherGradient(uint64_t a1, char a2)
{
  if (a2) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t withGradient(_:in:colorSpace:do:)(uint64_t a1, uint64_t *a2)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  uint64_t v2 = *(void *)a1;
  uint64_t v3 = a2[1];
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v8 = *a2;
    uint64_t v9 = v3;
    long long v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(void *)v2 + 104);
    swift_retain();
    v4(&v10, &v8);
    outlined consume of EitherGradient(v2, 1);
    uint64_t v8 = v10;
    LOBYTE(v9) = v11;
    withGradient(_:in:do:)((uint64_t)&v8);
    return swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    MEMORY[0x270FA5388](v6);
    type metadata accessor for RBColor(0);
    MEMORY[0x270FA5388](v7);
    return AGTupleWithBuffer();
  }
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PushPopTransactionModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return static _PushPopTransactionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t PreferencesInputs.hostKeys.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for GlobalCoordinateSpace()
{
  return &type metadata for GlobalCoordinateSpace;
}

ValueMetadata *type metadata accessor for VerticalAlignment()
{
  return &type metadata for VerticalAlignment;
}

unsigned char *storeEnumTagSinglePayload for BlendMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEB)
  {
    unsigned int v6 = ((a2 - 236) >> 8) + 1;
    *uint64_t result = a2 + 20;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 20;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for KeyframeTrack()
{
  return swift_getGenericMetadata();
}

uint64_t View.frame(width:height:alignment:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  specialized _FrameLayout.init(width:height:alignment:)(*(double *)&a1, a2 & 1, *(double *)&a3, a4 & 1, a5, a6, (uint64_t)v9);
  return View.modifier<A>(_:)(v9, a7, &type metadata for _FrameLayout);
}

double _FrameLayout.init(width:height:alignment:)@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  specialized _FrameLayout.init(width:height:alignment:)(a1, a2 & 1, a3, a4 & 1, a5, a6, (uint64_t)v10);
  long long v8 = v10[1];
  *a7 = v10[0];
  a7[1] = v8;
  double result = *(double *)&v11;
  a7[2] = v11;
  return result;
}

uint64_t specialized _FrameLayout.init(width:height:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (one-time initialization token for v2 != -1) {
    swift_once();
  }
  char v13 = a2 & 1;
  LOBYTE(v14) = a4 & 1;
  unsigned int v15 = static Semantics.v2;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    uint64_t result = dyld_program_sdk_at_least();
    if ((result & 1) == 0) {
      goto LABEL_31;
    }
  }
  else if (static Semantics.forced < v15)
  {
    goto LABEL_31;
  }
  if ((a2 & 1) != 0 || (char v17 = a1 >= 0.0) != 0 && (*(void *)&a1 & 0x7FF0000000000000) != 0x7FF0000000000000)
  {
    if (a4)
    {
      LOBYTE(v14) = 1;
      goto LABEL_31;
    }
    int v14 = 0;
    char v17 = a2 & 1;
    goto LABEL_17;
  }
  a1 = 0.0;
  int v14 = 1;
  if ((a4 & 1) == 0)
  {
LABEL_17:
    if (a3 >= 0.0)
    {
      BOOL v18 = (*(void *)&a3 & 0x7FF0000000000000) == 0x7FF0000000000000;
      if ((*(void *)&a3 & 0x7FF0000000000000) == 0x7FF0000000000000) {
        int v19 = 1;
      }
      else {
        int v19 = v14;
      }
      if ((*(void *)&a3 & 0x7FF0000000000000) == 0x7FF0000000000000) {
        double v20 = 0.0;
      }
      else {
        double v20 = a3;
      }
      if (v19 != 1)
      {
        LOBYTE(v14) = 0;
        char v13 = v17;
        goto LABEL_31;
      }
      char v13 = v17;
      a3 = v20;
      LOBYTE(v14) = v18;
    }
    else
    {
      a3 = 0.0;
      LOBYTE(v14) = 0;
      char v13 = v17;
    }
    goto LABEL_27;
  }
  char v13 = v17;
LABEL_27:
  static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  uint64_t result = os_log(_:dso:log:_:_:)();
LABEL_31:
  *(double *)a7 = a1;
  *(unsigned char *)(a7 + 8) = v13;
  *(double *)(a7 + 16) = a3;
  *(unsigned char *)(a7 + 24) = v14;
  *(void *)(a7 + 32) = a5;
  *(void *)(a7 + 40) = a6;
  return result;
}

uint64_t initializeWithCopy for AccessibilityValueStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *, uint64_t, uint64_t))
{
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  int v7 = *((_DWORD *)a2 + 20);
  uint64_t v10 = *a2;
  int v11 = v5;
  uint64_t v12 = v6;
  long long v8 = *(_OWORD *)(a2 + 5);
  long long v13 = *(_OWORD *)(a2 + 3);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a2 + 7);
  uint64_t v16 = a2[9];
  int v17 = v7;
  a5(&v10, a3, a4);
  return 0;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ViewOrigin()
{
  return _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
}

uint64_t specialized ForEachState.Item.__allocating_init(id:reuseID:views:subgraph:index:offset:contentID:seed:state:isConstant:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t *a9, char a10)
{
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = specialized ForEachState.Item.init(id:reuseID:views:subgraph:index:offset:contentID:seed:state:isConstant:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, v17);
  swift_release();
  return v18;
}

uint64_t specialized ForEachState.Item.init(id:reuseID:views:subgraph:index:offset:contentID:seed:state:isConstant:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t *a9, char a10, uint64_t a11)
{
  uint64_t v18 = *a9;
  swift_weakInit();
  *(unsigned char *)(a11 + *(void *)(*(void *)a11 + 232)) = 8;
  *(unsigned char *)(a11 + *(void *)(*(void *)a11 + 240)) = 0;
  *(unsigned char *)(a11 + *(void *)(*(void *)a11 + 248)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v18 + 88) - 8) + 32))(a11 + *(void *)(*(void *)a11 + 160), a1);
  *(void *)(a11 + *(void *)(*(void *)a11 + 168)) = a2;
  outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a3, (_OWORD *)(a11 + *(void *)(*(void *)a11 + 176)));
  swift_weakAssign();
  uint64_t v19 = a11 + *(void *)(*(void *)a11 + 192);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v19, a5, AssociatedTypeWitness);
  *(void *)(a11 + *(void *)(*(void *)a11 + 200)) = a6;
  *(void *)(a11 + *(void *)(*(void *)a11 + 208)) = a7;
  *(_DWORD *)(a11 + *(void *)(*(void *)a11 + 216)) = a8;
  *(unsigned char *)(a11 + *(void *)(*(void *)a11 + 224)) = a10;
  *(_DWORD *)(a11 + 24) = 1;
  *(void *)(a11 + 16) = a4;

  return swift_retain();
}

Swift::Void __swiftcall ShapeStyleResolver.updateValue()()
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v76 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  ((void (*)())MEMORY[0x270FA5388])();
  float v75 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  int v7 = (char *)&v72 - v6;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = swift_getTupleTypeMetadata2();
  uint64_t v83 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  long long v78 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  long long v13 = (char *)&v72 - v12;
  double v16 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v72 - v15;
  uint64_t v87 = *(int *)(v18 + 48);
  LODWORD(v18) = *(_DWORD *)v1;
  int v19 = *MEMORY[0x263F288F8];
  uint64_t v88 = (char *)&v72 - v15;
  uint64_t v79 = v8;
  uint64_t v80 = v3;
  uint64_t v77 = v2;
  if (v18 == v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v3 + 56))((char *)&v72 - v15, 1, 1, v2, v16);
    int v20 = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v85 = v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v7, Value, v2);
    uint64_t v23 = *(int *)(v9 + 48);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v13, v7, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v13, 0, 1, v2);
    v13[v23] = v85 & 1;
    uint64_t v17 = v88;
    uint64_t v24 = *(int *)(v9 + 48);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v88, v13, v8);
    int v20 = v13[v24];
  }
  int v25 = v20;
  v17[v87] = v20;
  int v26 = *(_DWORD *)(v1 + 4);
  uint64_t v86 = v9;
  if (v26 == v19
    || (uint64_t v27 = AGGraphGetValue(),
        char v29 = v28,
        uint64_t v30 = *(void **)v27,
        unsigned __int16 v31 = *(_WORD *)(v27 + 8),
        LODWORD(v87) = *(unsigned __int8 *)(v27 + 10),
        id v32 = v30,
        id v84 = v30,
        v30 == (void *)1))
  {
    int v33 = 0;
    id v84 = 0;
    LODWORD(v87) = 0;
    unsigned __int16 v31 = 1;
  }
  else
  {
    int v33 = v29 & 1;
  }
  uint64_t v82 = v1;
  uint64_t v34 = v1 + 16;
  int v81 = *(unsigned __int8 *)(v1 + 12);
  uint64_t v35 = *(void *)(v1 + 40);
  int v74 = *(_DWORD *)(v1 + 48);
  uint64_t v36 = *(void *)(v1 + 56);
  uint64_t v37 = (uint64_t *)AGGraphGetValue();
  uint64_t v40 = *v37;
  uint64_t v39 = v37[1];
  uint64_t v90 = MEMORY[0x263F8EE78];
  if (v25) {
    BOOL v41 = 0;
  }
  else {
    BOOL v41 = v33 == 0;
  }
  uint64_t v85 = v39;
  if (!v41)
  {
    char v42 = 1;
    char v91 = 1;
    swift_retain();
    swift_retain();
    if (v35) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  char v43 = v38;
  Outputuint64_t Value = AGGraphGetOutputValue();
  char v91 = OutputValue == 0;
  if (OutputValue)
  {
    if ((v43 & 1) == 0)
    {
      swift_retain();
      swift_retain();
      if (v35)
      {
LABEL_18:
        int v74 = 0;
        goto LABEL_27;
      }
      goto LABEL_21;
    }
    swift_retain();
    uint64_t v45 = swift_retain_n();
    char v42 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v45);
    swift_release();
    char v91 = v42 & 1;
    if (!v35)
    {
LABEL_20:
      if (v42) {
        goto LABEL_26;
      }
LABEL_21:
      if (v74 == *(_DWORD *)AGGraphGetValue() >> 1)
      {
        (*(void (**)(char *, uint64_t))(v83 + 8))(v88, v86);

        swift_release();
        goto LABEL_73;
      }
      specialized AnimatableAttributeHelper.reset()();
      char v91 = 1;
      goto LABEL_26;
    }
  }
  else
  {
    swift_retain();
    swift_retain();
    char v42 = 1;
    if (!v35) {
      goto LABEL_20;
    }
  }
LABEL_13:
  if ((v42 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_26:
  PropertyList.Tracker.reset()();
  int v74 = 1;
LABEL_27:
  uint64_t v73 = v31;
  if (v87) {
    uint64_t v46 = v31;
  }
  else {
    uint64_t v46 = v31 != 0;
  }
  if (v40) {
    uint64_t v47 = *(void *)(v40 + 64);
  }
  else {
    uint64_t v47 = 0;
  }
  uint64_t v48 = *(void *)(v36 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v48 + 16));
  *(void *)(v48 + 24) = v47;
  os_unfair_lock_unlock((os_unfair_lock_t)(v48 + 16));
  swift_release();
  swift_release();
  swift_release();
  char v115 = 0;
  long long v104 = 0uLL;
  uint64_t v105 = v46;
  char v106 = 1;
  uint64_t v107 = 0;
  char v108 = 5;
  *(void *)&long long v109 = v40;
  *((void *)&v109 + 1) = v36;
  long long v110 = 0u;
  long long v111 = 0u;
  uint64_t v112 = 0;
  char v113 = 1;
  char v114 = v81;
  if (v46)
  {
    uint64_t v49 = *(int *)(v86 + 48);
    uint64_t v51 = v78;
    uint64_t v50 = v79;
    uint64_t v52 = *(void *)(v79 - 8);
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v78, v88, v79);
    v51[v49] = v25;
    uint64_t v53 = v80;
    uint64_t v54 = v77;
    int v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48))(v51, 1, v77);
    uint64_t v56 = v82;
    if (v55 == 1)
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v50);
      specialized ForegroundStyle._apply(to:)((uint64_t)&v104);
    }
    else
    {
      uint64_t v59 = v75;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v75, v51, v54);
      (*(void (**)(long long *, uint64_t))(*(void *)(v76 + 24) + 32))(&v104, v54);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v59, v54);
    }
    id v57 = v84;
    char v58 = v87;
    if ((v87 & 1) == 0)
    {
      unsigned __int8 v89 = 0;
      long long v92 = v109;
      uint64_t v60 = MEMORY[0x263F8EE78];
      if (v108 == 1)
      {
        uint64_t v60 = v107;
        uint64_t v61 = 0;
      }
      else
      {
        uint64_t v61 = v107;
      }
      if (v108 == 1) {
        char v62 = 5;
      }
      else {
        char v62 = v108;
      }
      *(void *)&long long v103 = v60;
      _ShapeStyle_Pack.createOpacities(count:name:environment:)(v73, (char *)&v89, (uint64_t *)&v92);
      outlined consume of _ShapeStyle_Shape.Result(v61, v62);
      uint64_t v107 = v103;
      char v108 = 1;
    }
  }
  else
  {
    uint64_t v56 = v82;
    id v57 = v84;
    char v58 = v87;
    if (v74) {
      specialized AnimatableAttributeHelper.reset()();
    }
  }
  if ((v58 & 2) != 0)
  {
    long long v104 = xmmword_24619B520;
    uint64_t v105 = 1;
    char v106 = 1;
    char v114 = 0;
    BackgroundStyle._apply(to:)((uint64_t)&v104);
  }
  if ((v58 & 4) != 0)
  {
    long long v103 = v109;
    id v64 = v57;
    swift_retain();
    swift_retain();
    ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v103, (uint64_t)v57, (uint64_t)&v92);
    uint64_t v65 = 256;
    if (!BYTE1(v93)) {
      uint64_t v65 = 0;
    }
    uint64_t v66 = v65 | v93;
    uint64_t v67 = 0x10000;
    if (!BYTE2(v93)) {
      uint64_t v67 = 0;
    }
    uint64_t v93 = v66 | v67;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    char v98 = 6;
    int v99 = 1065353216;
    uint64_t v100 = 0;
    char v101 = -1;
    uint64_t v68 = MEMORY[0x263F8EE78];
    uint64_t v102 = MEMORY[0x263F8EE78];
    if (v108 == 1) {
      uint64_t v68 = v107;
    }
    unsigned __int8 v89 = 2;
    if (v108 == 1) {
      uint64_t v69 = 0;
    }
    else {
      uint64_t v69 = v107;
    }
    if (v108 == 1) {
      char v70 = 5;
    }
    else {
      char v70 = v108;
    }
    *(void *)&long long v103 = v68;
    id v71 = v94;
    _ShapeStyle_Pack.subscript.setter((uint64_t *)&v92, &v89, 0);
    outlined consume of _ShapeStyle_Shape.Result(v69, v70);

    uint64_t v63 = v103;
    uint64_t v107 = v103;
    char v108 = 1;
  }
  else
  {
    if (v108 != 1)
    {
      uint64_t v63 = MEMORY[0x263F8EE78];
      goto LABEL_67;
    }
    uint64_t v63 = v107;
  }
  swift_bridgeObjectRetain();
LABEL_67:
  swift_bridgeObjectRelease();
  uint64_t v90 = v63;
  if ((*(unsigned char *)(v56 + 13) & 1) == 0) {
    specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v90, 0, *(_DWORD *)(v56 + 8), v34);
  }
  if (v91 == 1)
  {
    *(void *)&long long v92 = v90;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    (*(void (**)(char *, uint64_t))(v83 + 8))(v88, v86);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v88, v86);
    swift_release();

    swift_release();
  }
  outlined consume of _ShapeStyle_Shape.Result(v107, v108);
  swift_release();
  swift_release();
LABEL_73:
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for Material(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Material(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _AnchoredShapeStyle(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 >= a2)
  {
LABEL_22:
    if (v5) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    return 0;
  }
  unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  unsigned int v7 = a2 - v5;
  uint64_t v8 = v6 & 0xFFFFFFF8;
  if ((v6 & 0xFFFFFFF8) != 0) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = v7 + 1;
  }
  if (v9 >= 0x10000) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = 2;
  }
  if (v9 < 0x100) {
    unsigned int v10 = 1;
  }
  if (v9 >= 2) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  switch(v11)
  {
    case 1:
      int v12 = *(unsigned __int8 *)(result + v6);
      if (!v12) {
        goto LABEL_22;
      }
      goto LABEL_18;
    case 2:
      int v12 = *(unsigned __int16 *)(result + v6);
      if (!v12) {
        goto LABEL_22;
      }
      goto LABEL_18;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v12 = *(_DWORD *)(result + v6);
      if (!v12) {
        goto LABEL_22;
      }
LABEL_18:
      int v13 = v12 - 1;
      if (v8)
      {
        int v13 = 0;
        LODWORD(v8) = *(_DWORD *)result;
      }
      uint64_t result = v5 + (v8 | v13) + 1;
      break;
    default:
      goto LABEL_22;
  }
  return result;
}

void storeEnumTagSinglePayload for _AnchoredShapeStyle(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            double v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for _AnchoredShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unsigned int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  *unsigned int v7 = *v8;
  v7[1] = v9;
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for LinearGradient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _AnchoredShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  long long v3 = (_OWORD *)(v2 + *(int *)(a2 + 36));
  long long v4 = v3[1];
  *(_OWORD *)(a1 + 72) = *v3;
  *(_OWORD *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 104) = 0;
  return (*(uint64_t (**)(void))(*(void *)(a2 + 24) + 32))();
}

void _BlendModeShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  v7.n128_f64[0] = MEMORY[0x270FA5388](a1);
  long long v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)v6;
  uint64_t v10 = *(void *)(v6 + 8);
  uint64_t v58 = *(void *)(v6 + 16);
  uint64_t v59 = v10;
  switch(*(unsigned char *)(v6 + 24))
  {
    case 1:
      uint64_t v14 = v6;
      (*(void (**)(double))(*(void *)(a2 + 24) + 32))(v7.n128_f64[0]);
      unsigned __int8 v62 = *(unsigned char *)(v2 + *(int *)(a2 + 36));
      GraphicsBlendMode.init(_:)((char *)&v62, (uint64_t)&v60);
      uint64_t v15 = (uint64_t)v60;
      char v16 = v61;
      uint64_t v17 = *(void **)(v14 + 32);
      uint64_t v54 = v14;
      int v18 = *(unsigned __int8 *)(v14 + 40);
      if (v18 == 1) {
        int v19 = 0;
      }
      else {
        int v19 = v17;
      }
      if (v18 == 1) {
        LODWORD(v20) = 5;
      }
      else {
        LODWORD(v20) = v18;
      }
      if (v18 != 1) {
        uint64_t v17 = (void *)MEMORY[0x263F8EE78];
      }
      id v57 = v17;
      uint64_t v60 = v17;
      unsigned __int8 v62 = v11;
      int64_t v21 = _ShapeStyle_Pack.indices(of:)(&v62);
      if (v21 == v22)
      {
        uint64_t v23 = (uint64_t)v19;
        goto LABEL_54;
      }
      unint64_t v28 = v21;
      unint64_t v29 = v22;
      if (v22 < v21) {
        goto LABEL_60;
      }
      if (v21 >= v22) {
        goto LABEL_61;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v53 = (uint64_t)v19;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_23;
      }
      break;
    case 2:
    case 4:
      goto LABEL_2;
    case 3:
      uint64_t v24 = v6;
      uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v9, v2, v4, v7.n128_f64[0]);
      MEMORY[0x270FA5388](v25);
      uint64_t v26 = *(void *)(a2 + 24);
      *(&v52 - 4) = v4;
      *(&v52 - 3) = v26;
      *(&v52 - 2) = v2;
      type metadata accessor for _BlendModeShapeStyle<AnyShapeStyle>();
      ShapeStyle.mapCopiedStyle<A>(in:body:)(v24, (void (*)(uint64_t))partial apply for closure #2 in _BlendModeShapeStyle._apply(to:), (uint64_t)(&v52 - 6), v4, v27);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      return;
    case 5:
      if (!(v58 | v59 | v11)) {
        goto LABEL_2;
      }
      return;
    default:
      if (*(unsigned char *)(v2 + *(int *)(a2 + 36)))
      {
        uint64_t v13 = v6;
        outlined consume of _ShapeStyle_Shape.Result(*(void *)(v6 + 32), *(unsigned char *)(v6 + 40));
        *(void *)(v13 + 32) = 0;
        *(unsigned char *)(v13 + 40) = 0;
      }
      else
      {
LABEL_2:
        int v12 = *(void (**)(__n128))(*(void *)(a2 + 24) + 32);
        v12(v7);
      }
      return;
  }
LABEL_62:
  id v57 = specialized _ArrayBuffer._consumeAndCreateNew()(v57);
LABEL_23:
  unsigned __int16 v31 = v57 + 4;
  int v56 = (int)v20;
  unint64_t v55 = v29;
  do
  {
    if ((v28 & 0x8000000000000000) != 0) {
      goto LABEL_58;
    }
    if (v28 >= v57[2])
    {
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    id v32 = v31;
    uint64_t v33 = BYTE1(v31[15 * v28]);
    if (v59 <= v33 && v58 > v33)
    {
      if (one-time initialization token for introduced != -1) {
        swift_once();
      }
      unsigned int v35 = static _SemanticFeature_v6.introduced;
      if (one-time initialization token for forced != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (byte_26B0F44FC == 1)
      {
        if ((dyld_program_sdk_at_least() & 1) == 0)
        {
LABEL_37:
          int v36 = 0;
LABEL_40:
          uint64_t v37 = &v32[15 * v28];
          uint64_t v38 = v37[12];
          unsigned __int8 v39 = *((unsigned char *)v37 + 104);
          outlined copy of GraphicsBlendMode(v15, v16);
          outlined consume of GraphicsBlendMode?(v38, v39);
          v37[12] = v15;
          *((unsigned char *)v37 + 104) = v16;
LABEL_41:
          uint64_t v40 = &v32[15 * v28];
          char v42 = (void *)v40[14];
          int v20 = v40 + 14;
          BOOL v41 = v42;
          uint64_t v43 = v42[2];
          if (v43)
          {
            char v44 = swift_isUniquelyReferenced_nonNull_native();
            *int v20 = v41;
            if ((v44 & 1) == 0) {
              *int v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
            }
            uint64_t v45 = 0;
            unint64_t v29 = 0;
            while (1)
            {
              uint64_t v46 = (void *)*v20;
              if (!v36) {
                goto LABEL_49;
              }
              if (v29 >= v46[2]) {
                goto LABEL_57;
              }
              if (LOBYTE(v46[v45 + 12]) == 255)
              {
LABEL_49:
                outlined copy of GraphicsBlendMode(v15, v16);
                char v47 = swift_isUniquelyReferenced_nonNull_native();
                *int v20 = v46;
                if ((v47 & 1) == 0)
                {
                  uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew()(v46);
                  *int v20 = v46;
                }
                if (v29 >= v46[2])
                {
                  __break(1u);
LABEL_57:
                  __break(1u);
LABEL_58:
                  __break(1u);
                  goto LABEL_59;
                }
                uint64_t v48 = &v46[v45];
                uint64_t v49 = v46[v45 + 11];
                v48[11] = v15;
                unsigned __int8 v50 = v46[v45 + 12];
                *((unsigned char *)v48 + 96) = v16;
                outlined consume of GraphicsBlendMode?(v49, v50);
              }
              ++v29;
              v45 += 9;
              if (v43 == v29) {
                goto LABEL_24;
              }
            }
          }
          goto LABEL_24;
        }
      }
      else if (static Semantics.forced < v35)
      {
        goto LABEL_37;
      }
      int v36 = 1;
      if (LOBYTE(v32[15 * v28 + 13]) != 255) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
LABEL_24:
    ++v28;
    unint64_t v29 = v55;
    LODWORD(v20) = v56;
    unsigned __int16 v31 = v32;
  }
  while (v28 != v55);
  uint64_t v23 = v53;
LABEL_54:
  outlined consume of _ShapeStyle_Shape.Result(v23, (char)v20);
  outlined consume of GraphicsBlendMode(v15, v16);
  uint64_t v51 = v54;
  *(void *)(v54 + 32) = v57;
  *(unsigned char *)(v51 + 40) = 1;
}

void type metadata accessor for _BlendModeShapeStyle<AnyShapeStyle>()
{
  if (!lazy cache variable for type metadata for _BlendModeShapeStyle<AnyShapeStyle>)
  {
    unint64_t v0 = type metadata accessor for _BlendModeShapeStyle();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BlendModeShapeStyle<AnyShapeStyle>);
    }
  }
}

uint64_t type metadata accessor for _BlendModeShapeStyle()
{
  return __swift_instantiateGenericMetadata();
}

void ShapeStyle.mapCopiedStyle<A>(in:body:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v10 = MEMORY[0x270FA5388](a1);
  int v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v13 + 24) == 3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v9 + 32))(a1, v8, v9, v10);
    if (*(unsigned char *)(a1 + 40) == 2)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = swift_retain();
      a2(v15);
      uint64_t v16 = AnyShapeStyle.init<A>(_:)((uint64_t)v12, a5);
      outlined consume of _ShapeStyle_Shape.Result(v14, 2);
      outlined consume of _ShapeStyle_Shape.Result(v14, 2);
      *(void *)(a1 + 32) = v16;
      *(unsigned char *)(a1 + 40) = 2;
    }
  }
}

void storeEnumTagSinglePayload for _BlendModeShapeStyle(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xEB) {
    unsigned int v8 = 235;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_39:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 < 0xEB)
          {
            a1[v9] = a2 + 20;
          }
          else
          {
            int v18 = *(void (**)(void))(v6 + 56);
            v18();
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t getEnumTagSinglePayload for _BlendModeShapeStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xEB) {
    unsigned int v7 = 235;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 >= 0xEB) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + v6);
      if (v15 >= 0x15) {
        return v15 - 20;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance LinearGradient(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance EllipticalGradient(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1);
}

uint64_t specialized Paint._apply(to:)(uint64_t result)
{
  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v4 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v2 != *(void *)(result + 16))
      {
        uint64_t v6 = *(void *)(result + 48);
        uint64_t v5 = *(void *)(result + 56);
        uint64_t v7 = *v1;
        swift_retain_n();
        swift_retain_n();
        outlined retain of LinearGradient((uint64_t)v1);
        uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_n(v7, v6, v5);
        outlined release of LinearGradient((uint64_t)v1);
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        char v9 = static ResolvedGradient.ColorSpace.default;
        swift_release();
        uint64_t v28 = v6;
        swift_release();
        uint64_t v11 = v1[1];
        uint64_t v10 = v1[2];
        uint64_t v13 = v1[3];
        uint64_t v12 = v1[4];
        if (*(unsigned char *)(v4 + 104))
        {
          type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<EllipticalGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t)&type metadata for EllipticalGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v8;
          *(unsigned char *)(v14 + 24) = v9;
          *(void *)(v14 + 32) = v11;
          *(void *)(v14 + 40) = v10;
          *(void *)(v14 + 48) = v13;
          *(void *)(v14 + 56) = v12;
        }
        else
        {
          uint64_t v19 = *(void *)(v4 + 88);
          uint64_t v18 = *(void *)(v4 + 96);
          long long v27 = *(_OWORD *)(v4 + 72);
          type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<EllipticalGradient._Paint>>();
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v8;
          *(unsigned char *)(v14 + 24) = v9;
          *(void *)(v14 + 32) = v11;
          *(void *)(v14 + 40) = v10;
          *(void *)(v14 + 48) = v13;
          *(void *)(v14 + 56) = v12;
          *(_OWORD *)(v14 + 64) = v27;
          *(void *)(v14 + 80) = v19;
          *(void *)(v14 + 88) = v18;
        }
        uint64_t v20 = *(void *)(v4 + 32);
        int v21 = *(unsigned __int8 *)(v4 + 40);
        swift_bridgeObjectRetain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v20, v21);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        uint64_t v31 = v28;
        *(void *)&long long v32 = v5;
        float v23 = (*(float (**)(uint64_t, uint64_t *))(v22 + 16))(v2, &v31);
        outlined consume of _ShapeStyle_Shape.Result(v20, v21);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v31 = v14;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        uint64_t v36 = 0;
        char v37 = 1;
        float v38 = v23;
        uint64_t v39 = 0;
        char v40 = -1;
        uint64_t v41 = MEMORY[0x263F8EE78];
        unsigned __int8 v30 = v3;
        if (v21 == 1) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = MEMORY[0x263F8EE78];
        }
        if (v21 == 1) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v20;
        }
        if (v21 == 1) {
          char v26 = 5;
        }
        else {
          char v26 = v21;
        }
        uint64_t v29 = v24;
        outlined copy of _ShapeStyle_Pack.Fill((id)v14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined copy of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRetain();
        _ShapeStyle_Pack.subscript.setter(&v31, &v30, v2);
        outlined consume of _ShapeStyle_Shape.Result(v25, v26);
        swift_release();
        outlined consume of _ShapeStyle_Pack.Fill(v14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined consume of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRelease();
        __n128 result = swift_bridgeObjectRelease();
        *(void *)(v4 + 32) = v29;
        *(unsigned char *)(v4 + 40) = 1;
      }
      break;
    case 2:
      if (*(void *)(*v1 + 16))
      {
        uint64_t v15 = *(void *)(*v1 + 32);
        uint64_t v16 = *(void *)(result + 32);
        char v17 = *(unsigned char *)(result + 40);
        swift_retain();
        __n128 result = outlined consume of _ShapeStyle_Shape.Result(v16, v17);
        *(void *)(v4 + 32) = v15;
        *(unsigned char *)(v4 + 40) = 3;
      }
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v4 + 32) = 0;
      *(unsigned char *)(v4 + 40) = 0;
      break;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  uint64_t v36;
  char v37;
  float v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v4 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v2 != *(void *)(result + 16))
      {
        uint64_t v6 = *(void *)(result + 48);
        uint64_t v5 = *(void *)(result + 56);
        uint64_t v7 = *v1;
        swift_retain_n();
        swift_retain_n();
        outlined retain of LinearGradient((uint64_t)v1);
        uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_n(v7, v6, v5);
        outlined release of LinearGradient((uint64_t)v1);
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        char v9 = static ResolvedGradient.ColorSpace.default;
        swift_release();
        uint64_t v28 = v6;
        swift_release();
        uint64_t v11 = v1[1];
        uint64_t v10 = v1[2];
        uint64_t v13 = v1[3];
        uint64_t v12 = v1[4];
        if (*(unsigned char *)(v4 + 104))
        {
          type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v8;
          *(unsigned char *)(v14 + 24) = v9;
          *(void *)(v14 + 32) = v11;
          *(void *)(v14 + 40) = v10;
          *(void *)(v14 + 48) = v13;
          *(void *)(v14 + 56) = v12;
        }
        else
        {
          uint64_t v19 = *(void *)(v4 + 88);
          uint64_t v18 = *(void *)(v4 + 96);
          long long v27 = *(_OWORD *)(v4 + 72);
          type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<LinearGradient._Paint>>();
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v8;
          *(unsigned char *)(v14 + 24) = v9;
          *(void *)(v14 + 32) = v11;
          *(void *)(v14 + 40) = v10;
          *(void *)(v14 + 48) = v13;
          *(void *)(v14 + 56) = v12;
          *(_OWORD *)(v14 + 64) = v27;
          *(void *)(v14 + 80) = v19;
          *(void *)(v14 + 88) = v18;
        }
        uint64_t v20 = *(void *)(v4 + 32);
        int v21 = *(unsigned __int8 *)(v4 + 40);
        swift_bridgeObjectRetain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v20, v21);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        uint64_t v31 = v28;
        *(void *)&long long v32 = v5;
        float v23 = (*(float (**)(uint64_t, uint64_t *))(v22 + 16))(v2, &v31);
        outlined consume of _ShapeStyle_Shape.Result(v20, v21);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v31 = v14;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        uint64_t v36 = 0;
        char v37 = 1;
        float v38 = v23;
        uint64_t v39 = 0;
        char v40 = -1;
        uint64_t v41 = MEMORY[0x263F8EE78];
        unsigned __int8 v30 = v3;
        if (v21 == 1) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = MEMORY[0x263F8EE78];
        }
        if (v21 == 1) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v20;
        }
        if (v21 == 1) {
          char v26 = 5;
        }
        else {
          char v26 = v21;
        }
        uint64_t v29 = v24;
        outlined copy of _ShapeStyle_Pack.Fill((id)v14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined copy of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRetain();
        _ShapeStyle_Pack.subscript.setter(&v31, &v30, v2);
        outlined consume of _ShapeStyle_Shape.Result(v25, v26);
        swift_release();
        outlined consume of _ShapeStyle_Pack.Fill(v14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined consume of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRelease();
        __n128 result = swift_bridgeObjectRelease();
        *(void *)(v4 + 32) = v29;
        *(unsigned char *)(v4 + 40) = 1;
      }
      break;
    case 2:
      if (*(void *)(*v1 + 16))
      {
        uint64_t v15 = *(void *)(*v1 + 32);
        uint64_t v16 = *(void *)(result + 32);
        char v17 = *(unsigned char *)(result + 40);
        swift_retain();
        __n128 result = outlined consume of _ShapeStyle_Shape.Result(v16, v17);
        *(void *)(v4 + 32) = v15;
        *(unsigned char *)(v4 + 40) = 3;
      }
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v4 + 32) = 0;
      *(unsigned char *)(v4 + 40) = 0;
      break;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  uint64_t v36;
  char v37;
  float v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v4 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v2 != *(void *)(result + 16))
      {
        uint64_t v6 = *(void *)(result + 48);
        uint64_t v5 = *(void *)(result + 56);
        uint64_t v7 = *v1;
        swift_retain_n();
        swift_retain_n();
        outlined retain of LinearGradient((uint64_t)v1);
        uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_n(v7, v6, v5);
        outlined release of LinearGradient((uint64_t)v1);
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        char v9 = static ResolvedGradient.ColorSpace.default;
        swift_release();
        uint64_t v28 = v6;
        swift_release();
        uint64_t v11 = v1[1];
        uint64_t v10 = v1[2];
        uint64_t v13 = v1[3];
        uint64_t v12 = v1[4];
        if (*(unsigned char *)(v4 + 104))
        {
          type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<RadialGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t)&type metadata for RadialGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v8;
          *(unsigned char *)(v14 + 24) = v9;
          *(void *)(v14 + 32) = v11;
          *(void *)(v14 + 40) = v10;
          *(void *)(v14 + 48) = v13;
          *(void *)(v14 + 56) = v12;
        }
        else
        {
          uint64_t v19 = *(void *)(v4 + 88);
          uint64_t v18 = *(void *)(v4 + 96);
          long long v27 = *(_OWORD *)(v4 + 72);
          type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<RadialGradient._Paint>>();
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v8;
          *(unsigned char *)(v14 + 24) = v9;
          *(void *)(v14 + 32) = v11;
          *(void *)(v14 + 40) = v10;
          *(void *)(v14 + 48) = v13;
          *(void *)(v14 + 56) = v12;
          *(_OWORD *)(v14 + 64) = v27;
          *(void *)(v14 + 80) = v19;
          *(void *)(v14 + 88) = v18;
        }
        uint64_t v20 = *(void *)(v4 + 32);
        int v21 = *(unsigned __int8 *)(v4 + 40);
        swift_bridgeObjectRetain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v20, v21);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        uint64_t v31 = v28;
        *(void *)&long long v32 = v5;
        float v23 = (*(float (**)(uint64_t, uint64_t *))(v22 + 16))(v2, &v31);
        outlined consume of _ShapeStyle_Shape.Result(v20, v21);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v31 = v14;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        uint64_t v36 = 0;
        char v37 = 1;
        float v38 = v23;
        uint64_t v39 = 0;
        char v40 = -1;
        uint64_t v41 = MEMORY[0x263F8EE78];
        unsigned __int8 v30 = v3;
        if (v21 == 1) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = MEMORY[0x263F8EE78];
        }
        if (v21 == 1) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v20;
        }
        if (v21 == 1) {
          char v26 = 5;
        }
        else {
          char v26 = v21;
        }
        uint64_t v29 = v24;
        outlined copy of _ShapeStyle_Pack.Fill((id)v14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined copy of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRetain();
        _ShapeStyle_Pack.subscript.setter(&v31, &v30, v2);
        outlined consume of _ShapeStyle_Shape.Result(v25, v26);
        swift_release();
        outlined consume of _ShapeStyle_Pack.Fill(v14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined consume of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRelease();
        __n128 result = swift_bridgeObjectRelease();
        *(void *)(v4 + 32) = v29;
        *(unsigned char *)(v4 + 40) = 1;
      }
      break;
    case 2:
      if (*(void *)(*v1 + 16))
      {
        uint64_t v15 = *(void *)(*v1 + 32);
        uint64_t v16 = *(void *)(result + 32);
        char v17 = *(unsigned char *)(result + 40);
        swift_retain();
        __n128 result = outlined consume of _ShapeStyle_Shape.Result(v16, v17);
        *(void *)(v4 + 32) = v15;
        *(unsigned char *)(v4 + 40) = 3;
      }
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v4 + 32) = 0;
      *(unsigned char *)(v4 + 40) = 0;
      break;
  }
  return result;
}

{
  int64_t **v1;
  int64_t *v2;
  int64_t *v3;
  int64_t *v4;
  int64_t *v5;
  int64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float (*v18)(uint64_t *);
  float v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  ValueMetadata *v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int64_t *v45;
  long long v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  uint64_t v55;
  char v56;
  float v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;

  uint64_t v2 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v7 = *(void *)result;
  uint64_t v8 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (*(void *)(result + 8) != *(void *)(result + 16))
      {
        char v9 = (uint64_t)v1;
        char v47 = *(void *)(result + 8);
        uint64_t v10 = *(void *)(result + 48);
        uint64_t v11 = v2[2];
        uint64_t v12 = MEMORY[0x263F8EE78];
        uint64_t v48 = *(void *)(result + 56);
        if (v11)
        {
          uint64_t v45 = v5;
          swift_retain();
          swift_retain();
          outlined retain of LinearGradient(v9);
          char v61 = v12;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
          uint64_t v13 = v12;
          uint64_t v14 = v2 + 5;
          do
          {
            uint64_t v15 = *(v14 - 1);
            uint64_t v16 = *v14;
            char v17 = v10;
            unsigned __int8 v50 = v10;
            *(void *)&uint64_t v51 = v48;
            uint64_t v18 = *(float (**)(uint64_t *))(*(void *)v15 + 104);
            swift_retain();
            uint64_t v19 = v18(&v50);
            int v21 = v20;
            float v23 = v22;
            uint64_t v25 = v24;
            swift_release();
            char v61 = v13;
            long long v27 = *(void *)(v13 + 16);
            char v26 = *(void *)(v13 + 24);
            if (v27 >= v26 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
              uint64_t v13 = v61;
            }
            *(void *)(v13 + 16) = v27 + 1;
            uint64_t v28 = v13 + 48 * v27;
            *(float *)(v28 + 32) = v19;
            *(_DWORD *)(v28 + 36) = v21;
            *(_DWORD *)(v28 + 40) = v23;
            *(_DWORD *)(v28 + 44) = v25;
            *(void *)(v28 + 48) = v16;
            *(void *)(v28 + 56) = 0;
            *(void *)(v28 + 64) = 0;
            *(unsigned char *)(v28 + 72) = 1;
            v14 += 2;
            --v11;
            uint64_t v10 = v17;
          }
          while (v11);
          outlined release of LinearGradient(v9);
          uint64_t v5 = v45;
        }
        else
        {
          swift_retain();
          swift_retain();
          uint64_t v13 = MEMORY[0x263F8EE78];
        }
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        long long v32 = static ResolvedGradient.ColorSpace.default;
        swift_release();
        swift_release();
        if (*(unsigned char *)(v8 + 104))
        {
          type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<AngularGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t)&type metadata for AngularGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
          long long v33 = swift_allocObject();
          *(void *)(v33 + 16) = v13;
          *(unsigned char *)(v33 + 24) = v32;
          *(void *)(v33 + 32) = v4;
          *(void *)(v33 + 40) = v3;
          *(void *)(v33 + 48) = v6;
          *(void *)(v33 + 56) = v5;
        }
        else
        {
          long long v35 = *(void *)(v8 + 88);
          long long v34 = *(void *)(v8 + 96);
          uint64_t v46 = *(_OWORD *)(v8 + 72);
          type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<AngularGradient._Paint>>();
          long long v33 = swift_allocObject();
          *(void *)(v33 + 16) = v13;
          *(unsigned char *)(v33 + 24) = v32;
          *(void *)(v33 + 32) = v4;
          *(void *)(v33 + 40) = v3;
          *(void *)(v33 + 48) = v6;
          *(void *)(v33 + 56) = v5;
          *(_OWORD *)(v33 + 64) = v46;
          *(void *)(v33 + 80) = v35;
          *(void *)(v33 + 88) = v34;
        }
        uint64_t v36 = *(void *)(v8 + 32);
        char v37 = *(unsigned __int8 *)(v8 + 40);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v36, v37);
        swift_retain();
        swift_retain();
        swift_retain();
        float v38 = specialized EnvironmentValues.getValue<A>(for:)(v10, v48);
        char v40 = v39;
        swift_release();
        swift_release();
        unsigned __int8 v50 = v10;
        *(void *)&uint64_t v51 = v48;
        uint64_t v41 = (*(float (**)(uint64_t, uint64_t *, ValueMetadata *, uint64_t))(v40 + 16))(v47, &v50, v38, v40);
        outlined consume of _ShapeStyle_Shape.Result(v36, v37);
        swift_release();
        swift_release();
        swift_release();
        unsigned __int8 v50 = v33;
        uint64_t v51 = 0u;
        uint64_t v52 = 0u;
        uint64_t v53 = 0u;
        uint64_t v54 = 0u;
        unint64_t v55 = 0;
        int v56 = 1;
        id v57 = v41;
        uint64_t v58 = 0;
        uint64_t v59 = -1;
        uint64_t v60 = MEMORY[0x263F8EE78];
        if (v37 == 1) {
          char v42 = v36;
        }
        else {
          char v42 = MEMORY[0x263F8EE78];
        }
        uint64_t v49 = v7;
        if (v37 == 1) {
          uint64_t v43 = 0;
        }
        else {
          uint64_t v43 = v36;
        }
        if (v37 == 1) {
          char v44 = 5;
        }
        else {
          char v44 = v37;
        }
        char v61 = v42;
        outlined copy of _ShapeStyle_Pack.Fill((id)v33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined copy of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRetain();
        _ShapeStyle_Pack.subscript.setter(&v50, &v49, v47);
        outlined consume of _ShapeStyle_Shape.Result(v43, v44);
        swift_release();
        outlined consume of _ShapeStyle_Pack.Fill(v33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined consume of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRelease();
        __n128 result = swift_bridgeObjectRelease();
        *(void *)(v8 + 32) = v61;
        *(unsigned char *)(v8 + 40) = 1;
      }
      break;
    case 2:
      if (v2[2])
      {
        uint64_t v29 = v2[4];
        unsigned __int8 v30 = *(void *)(result + 32);
        uint64_t v31 = *(unsigned char *)(result + 40);
        swift_retain();
        __n128 result = outlined consume of _ShapeStyle_Shape.Result(v30, v31);
        *(void *)(v8 + 32) = v29;
        *(unsigned char *)(v8 + 40) = 3;
      }
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v8 + 32) = 0;
      *(unsigned char *)(v8 + 40) = 0;
      break;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  id v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  long long v21;
  id v22;
  unsigned __int8 v23;
  unsigned char v24[80];
  char v25;
  float v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30[3];

  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v4 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v2 != *(void *)(result + 16))
      {
        uint64_t v5 = v1;
        uint64_t v6 = *(void *)(result + 48);
        uint64_t v7 = *(void *)(result + 56);
        uint64_t v8 = *(_OWORD *)(v1 + 16);
        *(_OWORD *)uint64_t v24 = *(_OWORD *)v1;
        *(_OWORD *)&v24[16] = v8;
        *(_DWORD *)&v24[32] = *(_DWORD *)(v1 + 32);
        v30[0] = v6;
        v30[1] = v7;
        char v9 = Shader.makeRBShader(in:)(v30);
        uint64_t v10 = *(_DWORD *)(v5 + 32);
        if (*(unsigned char *)(v4 + 104))
        {
          type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 24) = 0;
          *(void *)(v11 + 32) = 0;
          *(void *)(v11 + 16) = v9;
          *(_DWORD *)(v11 + 40) = v10;
        }
        else
        {
          uint64_t v13 = *(void *)(v4 + 88);
          uint64_t v12 = *(void *)(v4 + 96);
          int v21 = *(_OWORD *)(v4 + 72);
          type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<Shader.ResolvedShader>>();
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 24) = 0;
          *(void *)(v11 + 32) = 0;
          *(void *)(v11 + 16) = v9;
          *(_DWORD *)(v11 + 40) = v10;
          *(_OWORD *)(v11 + 48) = v21;
          *(void *)(v11 + 64) = v13;
          *(void *)(v11 + 72) = v12;
        }
        uint64_t v14 = *(void *)(v4 + 32);
        uint64_t v15 = *(unsigned __int8 *)(v4 + 40);
        uint64_t v22 = v9;
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v14, v15);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        *(void *)uint64_t v24 = v6;
        *(void *)&v24[8] = v7;
        char v17 = (*(float (**)(uint64_t, unsigned char *))(v16 + 16))(v2, v24);
        outlined consume of _ShapeStyle_Shape.Result(v14, v15);
        swift_release();
        swift_release();
        swift_release();
        *(void *)uint64_t v24 = v11;
        memset(&v24[8], 0, 72);
        uint64_t v25 = 1;
        char v26 = v17;
        long long v27 = 0;
        uint64_t v28 = -1;
        uint64_t v29 = MEMORY[0x263F8EE78];
        float v23 = v3;
        if (v15 == 1) {
          uint64_t v18 = v14;
        }
        else {
          uint64_t v18 = MEMORY[0x263F8EE78];
        }
        if (v15 == 1) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = v14;
        }
        if (v15 == 1) {
          uint64_t v20 = 5;
        }
        else {
          uint64_t v20 = v15;
        }
        v30[0] = v18;
        outlined copy of _ShapeStyle_Pack.Fill((id)v11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined copy of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRetain();
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v24, &v23, v2);
        outlined consume of _ShapeStyle_Shape.Result(v19, v20);
        swift_release();
        outlined consume of _ShapeStyle_Pack.Fill(v11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined consume of GraphicsBlendMode?(0, 0xFFu);

        __n128 result = swift_bridgeObjectRelease();
        *(void *)(v4 + 32) = v30[0];
        *(unsigned char *)(v4 + 40) = 1;
      }
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      return result;
    default:
      __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v4 + 32) = 0;
      *(unsigned char *)(v4 + 40) = 0;
      break;
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  long long v30;
  unsigned __int8 v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  uint64_t v37;
  char v38;
  float v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v4 = v1;
  uint64_t v5 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v2 != *(void *)(result + 16))
      {
        uint64_t v10 = *(void *)(result + 48);
        uint64_t v11 = *(void *)(result + 56);
        uint64_t v12 = *v1;
        long long v32 = v10;
        *(void *)&long long v33 = v11;
        uint64_t v13 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(void *)v12 + 104);
        swift_retain();
        swift_retain();
        v13(&v43, &v32);
        swift_release();
        swift_release();
        uint64_t v14 = v43;
        uint64_t v15 = v44;
        char v17 = v4[1];
        uint64_t v16 = v4[2];
        uint64_t v19 = v4[3];
        uint64_t v18 = v4[4];
        if (*(unsigned char *)(v5 + 104))
        {
          type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<AngularGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t)&type metadata for AngularGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
          uint64_t v20 = swift_allocObject();
          *(void *)(v20 + 16) = v14;
          *(unsigned char *)(v20 + 24) = v15;
          *(void *)(v20 + 32) = v17;
          *(void *)(v20 + 40) = v16;
          *(void *)(v20 + 48) = v19;
          *(void *)(v20 + 56) = v18;
        }
        else
        {
          uint64_t v22 = *(void *)(v5 + 88);
          int v21 = *(void *)(v5 + 96);
          unsigned __int8 v30 = *(_OWORD *)(v5 + 72);
          type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<AngularGradient._Paint>>();
          uint64_t v20 = swift_allocObject();
          *(void *)(v20 + 16) = v14;
          *(unsigned char *)(v20 + 24) = v15;
          *(void *)(v20 + 32) = v17;
          *(void *)(v20 + 40) = v16;
          *(void *)(v20 + 48) = v19;
          *(void *)(v20 + 56) = v18;
          *(_OWORD *)(v20 + 64) = v30;
          *(void *)(v20 + 80) = v22;
          *(void *)(v20 + 88) = v21;
        }
        float v23 = *(void *)(v5 + 32);
        uint64_t v24 = *(unsigned __int8 *)(v5 + 40);
        long long v32 = v10;
        *(void *)&long long v33 = v11;
        swift_retain();
        swift_bridgeObjectRetain();
        outlined copy of _ShapeStyle_Shape.Result(v23, v24);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        long long v32 = v10;
        *(void *)&long long v33 = v11;
        char v26 = (*(float (**)(uint64_t, uint64_t *))(v25 + 16))(v2, &v32);
        outlined consume of _ShapeStyle_Shape.Result(v23, v24);
        swift_release();
        swift_release();
        swift_release();
        long long v32 = v20;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        uint64_t v36 = 0u;
        char v37 = 0;
        float v38 = 1;
        uint64_t v39 = v26;
        char v40 = 0;
        uint64_t v41 = -1;
        char v42 = MEMORY[0x263F8EE78];
        uint64_t v31 = v3;
        if (v24 == 1) {
          long long v27 = v23;
        }
        else {
          long long v27 = MEMORY[0x263F8EE78];
        }
        if (v24 == 1) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v28 = v23;
        }
        if (v24 == 1) {
          uint64_t v29 = 5;
        }
        else {
          uint64_t v29 = v24;
        }
        uint64_t v43 = v27;
        outlined copy of _ShapeStyle_Pack.Fill((id)v20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined copy of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRetain();
        _ShapeStyle_Pack.subscript.setter(&v32, &v31, v2);
        outlined consume of _ShapeStyle_Shape.Result(v28, v29);
        swift_release();
        outlined consume of _ShapeStyle_Pack.Fill(v20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined consume of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRelease();
        __n128 result = swift_bridgeObjectRelease();
        *(void *)(v5 + 32) = v43;
        *(unsigned char *)(v5 + 40) = 1;
      }
      break;
    case 2:
      uint64_t v6 = *(void *)(result + 56);
      uint64_t v7 = *v1;
      long long v32 = *(void *)(result + 48);
      *(void *)&long long v33 = v6;
      uint64_t v8 = *(uint64_t (**)(uint64_t *))(*(void *)v7 + 112);
      swift_retain();
      swift_retain();
      char v9 = v8(&v32);
      swift_release();
      __n128 result = swift_release();
      if (v9)
      {
        __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v5 + 32), *(unsigned char *)(v5 + 40));
        *(void *)(v5 + 32) = v9;
        *(unsigned char *)(v5 + 40) = 3;
      }
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v5 + 32) = 0;
      *(unsigned char *)(v5 + 40) = 0;
      break;
  }
  return result;
}

{
  long long *v1;
  long long v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  long long v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  uint64_t v41;
  char v42;
  float v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  long long v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  long long v54;
  long long v55;
  _OWORD v56[3];

  uint64_t v2 = v1[1];
  uint64_t v54 = *v1;
  unint64_t v55 = v2;
  v56[0] = v1[2];
  *(_OWORD *)((char *)v56 + 10) = *(long long *)((char *)v1 + 42);
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v5 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v3 != *(void *)(result + 16))
      {
        char v9 = *(void *)(result + 48);
        uint64_t v10 = *(void *)(result + 56);
        uint64_t v36 = v9;
        *(void *)&char v37 = v10;
        MeshGradient.resolvePaint(in:)(&v36, (uint64_t)&v47);
        if (*(unsigned char *)(v5 + 104))
        {
          uint64_t v11 = v47;
          uint64_t v12 = v48;
          uint64_t v13 = v49;
          unsigned __int8 v30 = v52;
          long long v32 = v51;
          uint64_t v28 = v53;
          type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v11;
          *(unsigned char *)(v14 + 24) = v12;
          *(void *)(v14 + 32) = v13;
          *(_OWORD *)(v14 + 40) = v50;
          *(void *)(v14 + 56) = v32;
          *(void *)(v14 + 64) = v30;
          *(_DWORD *)(v14 + 72) = v28;
        }
        else
        {
          uint64_t v16 = *(void *)(v5 + 88);
          uint64_t v15 = *(void *)(v5 + 96);
          long long v33 = *(_OWORD *)(v5 + 72);
          char v17 = v47;
          uint64_t v18 = v48;
          uint64_t v19 = v49;
          uint64_t v29 = v52;
          uint64_t v31 = v51;
          long long v27 = v53;
          type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<MeshGradient._Paint>>();
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v17;
          *(unsigned char *)(v14 + 24) = v18;
          *(void *)(v14 + 32) = v19;
          *(_OWORD *)(v14 + 40) = v50;
          *(void *)(v14 + 56) = v31;
          *(void *)(v14 + 64) = v29;
          *(_DWORD *)(v14 + 72) = v27;
          *(_OWORD *)(v14 + 80) = v33;
          *(void *)(v14 + 96) = v16;
          *(void *)(v14 + 104) = v15;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v20 = *(void *)(v5 + 32);
        int v21 = *(unsigned __int8 *)(v5 + 40);
        uint64_t v36 = v9;
        *(void *)&char v37 = v10;
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v20, v21);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        uint64_t v36 = v9;
        *(void *)&char v37 = v10;
        float v23 = (*(float (**)(uint64_t, uint64_t *))(v22 + 16))(v3, &v36);
        outlined consume of _ShapeStyle_Shape.Result(v20, v21);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v36 = v14;
        char v37 = 0u;
        float v38 = 0u;
        uint64_t v39 = 0u;
        char v40 = 0u;
        uint64_t v41 = 0;
        char v42 = 1;
        uint64_t v43 = v23;
        char v44 = 0;
        uint64_t v45 = -1;
        uint64_t v46 = MEMORY[0x263F8EE78];
        long long v35 = v4;
        if (v21 == 1) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = MEMORY[0x263F8EE78];
        }
        if (v21 == 1) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v20;
        }
        if (v21 == 1) {
          char v26 = 5;
        }
        else {
          char v26 = v21;
        }
        long long v34 = v24;
        outlined copy of _ShapeStyle_Pack.Fill((id)v14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined copy of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRetain();
        _ShapeStyle_Pack.subscript.setter(&v36, &v35, v3);
        outlined consume of _ShapeStyle_Shape.Result(v25, v26);
        swift_release();
        outlined consume of _ShapeStyle_Pack.Fill(v14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined consume of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __n128 result = swift_bridgeObjectRelease();
        *(void *)(v5 + 32) = v34;
        *(unsigned char *)(v5 + 40) = 1;
      }
      break;
    case 2:
      uint64_t v6 = *((void *)v1 + 6);
      uint64_t v7 = *(void *)(result + 32);
      uint64_t v8 = *(unsigned char *)(result + 40);
      swift_retain();
      __n128 result = outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      *(void *)(v5 + 32) = v6;
      *(unsigned char *)(v5 + 40) = 3;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v5 + 32) = 0;
      *(unsigned char *)(v5 + 40) = 0;
      break;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  long long v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;
  char v33;
  float v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;

  uint64_t v2 = *(void *)result;
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v3 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v1 != *(void *)(result + 16))
      {
        uint64_t v4 = *(void *)(result + 48);
        uint64_t v5 = *(void *)(result + 56);
        *(void *)&char v47 = v4;
        *((void *)&v47 + 1) = v5;
        ImagePaint.resolvePaint(in:)((double *)&v47, (uint64_t)&v38);
        if (*(unsigned char *)(v3 + 104))
        {
          uint64_t v53 = v44;
          uint64_t v54 = v45;
          unint64_t v55 = v46;
          uint64_t v49 = v40;
          unsigned __int8 v50 = v41;
          uint64_t v51 = v42;
          uint64_t v52 = v43;
          char v47 = v38;
          uint64_t v48 = v39;
          type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<ImagePaint._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint, (uint64_t)&type metadata for ImagePaint._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
          uint64_t v6 = swift_allocObject();
          uint64_t v7 = v45;
          *(_OWORD *)(v6 + 112) = v44;
          *(_OWORD *)(v6 + 128) = v7;
          *(_OWORD *)(v6 + 144) = v46;
          uint64_t v8 = v41;
          *(_OWORD *)(v6 + 48) = v40;
          *(_OWORD *)(v6 + 64) = v8;
          char v9 = v43;
          *(_OWORD *)(v6 + 80) = v42;
          *(_OWORD *)(v6 + 96) = v9;
          uint64_t v10 = v39;
          *(_OWORD *)(v6 + 16) = v38;
          *(_OWORD *)(v6 + 32) = v10;
        }
        else
        {
          uint64_t v12 = *(void *)(v3 + 88);
          uint64_t v11 = *(void *)(v3 + 96);
          uint64_t v24 = *(_OWORD *)(v3 + 72);
          uint64_t v53 = v44;
          uint64_t v54 = v45;
          unint64_t v55 = v46;
          uint64_t v49 = v40;
          unsigned __int8 v50 = v41;
          uint64_t v51 = v42;
          uint64_t v52 = v43;
          char v47 = v38;
          uint64_t v48 = v39;
          type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<ImagePaint._Paint>>();
          uint64_t v6 = swift_allocObject();
          uint64_t v13 = v45;
          *(_OWORD *)(v6 + 112) = v44;
          *(_OWORD *)(v6 + 128) = v13;
          uint64_t v14 = v41;
          *(_OWORD *)(v6 + 48) = v40;
          *(_OWORD *)(v6 + 64) = v14;
          uint64_t v15 = v43;
          *(_OWORD *)(v6 + 80) = v42;
          *(_OWORD *)(v6 + 96) = v15;
          uint64_t v16 = v39;
          *(_OWORD *)(v6 + 16) = v38;
          *(_OWORD *)(v6 + 32) = v16;
          *(_OWORD *)(v6 + 144) = v46;
          *(_OWORD *)(v6 + 160) = v24;
          *(void *)(v6 + 176) = v12;
          *(void *)(v6 + 184) = v11;
        }
        char v17 = *(void *)(v3 + 32);
        uint64_t v18 = *(unsigned __int8 *)(v3 + 40);
        swift_retain();
        outlined retain of GraphicsImage((uint64_t)&v47);
        outlined copy of _ShapeStyle_Shape.Result(v17, v18);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        long long v27 = v4;
        *(void *)&uint64_t v28 = v5;
        uint64_t v20 = (*(float (**)(uint64_t, uint64_t *))(v19 + 16))(v1, &v27);
        outlined consume of _ShapeStyle_Shape.Result(v17, v18);
        swift_release();
        swift_release();
        swift_release();
        long long v27 = v6;
        uint64_t v28 = 0u;
        uint64_t v29 = 0u;
        unsigned __int8 v30 = 0u;
        uint64_t v31 = 0u;
        long long v32 = 0;
        long long v33 = 1;
        long long v34 = v20;
        long long v35 = 0;
        uint64_t v36 = -1;
        char v37 = MEMORY[0x263F8EE78];
        char v26 = v2;
        if (v18 == 1) {
          int v21 = v17;
        }
        else {
          int v21 = MEMORY[0x263F8EE78];
        }
        if (v18 == 1) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = v17;
        }
        if (v18 == 1) {
          float v23 = 5;
        }
        else {
          float v23 = v18;
        }
        uint64_t v25 = v21;
        outlined copy of _ShapeStyle_Pack.Fill((id)v6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined copy of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRetain();
        _ShapeStyle_Pack.subscript.setter(&v27, &v26, v1);
        outlined consume of _ShapeStyle_Shape.Result(v22, v23);
        swift_release();
        outlined consume of _ShapeStyle_Pack.Fill(v6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined consume of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRelease();
        __n128 result = outlined release of GraphicsImage((uint64_t)&v47);
        *(void *)(v3 + 32) = v25;
        *(unsigned char *)(v3 + 40) = 1;
      }
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      return result;
    default:
      __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v3 + 32) = 0;
      *(unsigned char *)(v3 + 40) = 0;
      break;
  }
  return result;
}

uint64_t BackgroundStyle._apply(to:)(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 106);
  if ((v2 & 4) == 0)
  {
    uint64_t v3 = *(void *)(result + 48);
    if (*(void *)(result + 56))
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
      swift_release_n();
      __n128 result = swift_release_n();
      if (v4) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = swift_retain_n();
      uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v69);
      __n128 result = swift_release_n();
      if (v4)
      {
LABEL_4:
        *(unsigned char *)(v1 + 106) = v2 | 4;
        (*(void (**)(uint64_t))(*(void *)v4 + 80))(v1);
        __n128 result = swift_release();
        if ((*(unsigned char *)(v1 + 106) & 4) != 0) {
          *(unsigned char *)(v1 + 106) &= ~4u;
        }
        return result;
      }
    }
  }
  uint64_t v7 = *(void *)v1;
  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v8 = *(void *)(v1 + 16);
  switch(*(unsigned char *)(v1 + 24))
  {
    case 1:
      unsigned __int8 v41 = *(void *)v1;
      if (v41 == 1) {
        return HierarchicalShapeStyle._apply(to:)(v1, 3u);
      }
      if (v6 != v8)
      {
        if (v8 < v6) {
          goto LABEL_40;
        }
        if (v6 >= v8) {
          goto LABEL_41;
        }
        uint64_t v37 = *(void *)(v1 + 56);
        uint64_t v38 = *(void *)(v1 + 48);
        long long v35 = *(_OWORD *)(v1 + 80);
        long long v36 = *(_OWORD *)(v1 + 64);
        uint64_t v34 = *(void *)(v1 + 96);
        char v32 = *(unsigned char *)(v1 + 105);
        char v33 = *(unsigned char *)(v1 + 104);
        uint64_t v17 = *(void *)(v1 + 32);
        char v18 = *(unsigned char *)(v1 + 40);
        uint64_t v31 = *(void *)v1;
        uint64_t v19 = MEMORY[0x263F8EE78];
        char v40 = v2;
        uint64_t v39 = *(void *)(v1 + 16);
        do
        {
          uint64_t v59 = v17;
          char v60 = v18;
          uint64_t v61 = v38;
          uint64_t v62 = v37;
          long long v63 = v36;
          long long v64 = v35;
          uint64_t v65 = v34;
          char v66 = v33;
          char v67 = v32;
          char v68 = v2;
          uint64_t v56 = v31;
          long long v57 = xmmword_24619B550;
          char v58 = 1;
          *(void *)&v50[0] = v38;
          *((void *)&v50[0] + 1) = v37;
          outlined copy of _ShapeStyle_Shape.Result(v17, v18);
          swift_retain();
          swift_retain();
          swift_retain();
          BackgroundStyle.base(level:env:)(v6, (uint64_t *)v50, v44);
          (*(void (**)(uint64_t *))(**(void **)&v44[0] + 80))(&v56);
          swift_release();
          uint64_t v22 = v59;
          char v23 = v60;
          uint64_t v24 = v19;
          if (v60 == 1)
          {
            swift_bridgeObjectRetain();
            uint64_t v24 = v22;
          }
          uint64_t v20 = v6 + 1;
          *(void *)&v44[0] = v24;
          LOBYTE(v42) = v41;
          _ShapeStyle_Pack.subscript.getter((unsigned __int8 *)&v42, 0, (uint64_t)v50);
          swift_bridgeObjectRelease();
          v44[0] = v50[0];
          v44[1] = v50[1];
          v44[2] = v50[2];
          v44[3] = v50[3];
          v44[4] = v50[4];
          char v45 = v51;
          int v46 = v52;
          uint64_t v47 = v53;
          char v48 = v54;
          uint64_t v49 = v55;
          unsigned __int8 v43 = v41;
          if (v18 == 1) {
            uint64_t v21 = v17;
          }
          else {
            uint64_t v21 = v19;
          }
          if (v18 == 1)
          {
            uint64_t v17 = 0;
            char v18 = 5;
          }
          uint64_t v42 = v21;
          _ShapeStyle_Pack.subscript.setter((uint64_t *)v44, &v43, v6);
          outlined consume of _ShapeStyle_Shape.Result(v17, v18);
          uint64_t v17 = v42;
          outlined consume of _ShapeStyle_Shape.Result(v22, v23);
          swift_release();
          swift_release();
          __n128 result = swift_release();
          char v18 = 1;
          ++v6;
          char v2 = v40;
        }
        while (v39 != v20);
        *(void *)(v1 + 32) = v17;
        *(unsigned char *)(v1 + 40) = 1;
      }
      return result;
    case 3:
      goto LABEL_17;
    case 4:
      uint64_t v11 = *(void *)(v1 + 48);
      uint64_t v10 = *(void *)(v1 + 56);
      char v9 = (uint64_t *)(v1 + 48);
      if (!v10)
      {
        type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
        BloomFilter.init(hashValue:)(v25);
        uint64_t v26 = swift_retain_n();
        uint64_t v27 = specialized find1<A>(_:key:filter:)(v26, *(uint64_t *)&v50[0]);
        if (v27)
        {
          uint64_t v28 = *(void *)(v27 + 72);
          uint64_t v29 = *(void *)(v27 + 80);
        }
        else
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
        }
        *(void *)&v50[0] = v28;
        __n128 result = swift_release_n();
        BOOL v30 = __OFADD__(v29, v7);
        uint64_t v12 = v29 + v7;
        if (!v30) {
          goto LABEL_13;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v11, (uint64_t *)v50);
      swift_release_n();
      __n128 result = swift_release_n();
      uint64_t v12 = *((void *)&v50[0] + 1) + v7;
      if (__OFADD__(*((void *)&v50[0] + 1), v7)) {
        goto LABEL_39;
      }
LABEL_13:
      uint64_t v13 = *(void *)&v50[0];
      swift_retain_n();
      specialized closure #1 in PropertyList.subscript.setter(v9, v13, v12);
      swift_release();
      if (v10)
      {
        uint64_t v14 = *v9;
        swift_retain();
        swift_retain();
        specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v14);
        swift_release();
        swift_release();
      }
      return swift_release();
    case 5:
      if (v8 | v6 | v7)
      {
LABEL_17:
        type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, &lazy cache variable for type metadata for ShapeStyleBox<BackgroundStyle>, (uint64_t)&type metadata for BackgroundStyle, (uint64_t)&protocol witness table for BackgroundStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
        uint64_t v15 = swift_allocObject();
        __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
        *(void *)(v1 + 32) = v15;
        char v16 = 2;
      }
      else
      {
        __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
        *(void *)(v1 + 32) = 0;
        char v16 = 4;
      }
      *(unsigned char *)(v1 + 40) = v16;
      return result;
    default:
      v50[0] = *(_OWORD *)(v1 + 48);
      BackgroundStyle.base(level:env:)(v7, (uint64_t *)v50, v44);
      (*(void (**)(uint64_t))(**(void **)&v44[0] + 80))(v1);
      return swift_release();
  }
}

_DWORD *BackgroundStyle.base(level:env:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  if (a2[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v5, &v34);
    swift_release_n();
    __n128 result = (_DWORD *)swift_release_n();
    if (!__OFADD__(v35, a1))
    {
      uint64_t v32 = v34;
      uint64_t v33 = v35 + a1;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v5, &v31);
      swift_release_n();
      swift_release_n();
      char v30 = v31;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v5, &v29);
      swift_release_n();
      swift_release_n();
      char v7 = v29;
LABEL_15:
      char v28 = v7;
      specialized static Color.systemBackgroundColor(info:context:scheme:)(&v32, (unsigned __int8 *)&v30, &v28);
      int v21 = v20;
      int v23 = v22;
      int v25 = v24;
      int v27 = v26;
      type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, &lazy cache variable for type metadata for ShapeStyleBox<Color.Resolved>, (uint64_t)&type metadata for Color.Resolved, (uint64_t)&protocol witness table for Color.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
      __n128 result = (_DWORD *)swift_allocObject();
      result[4] = v21;
      result[5] = v23;
      result[6] = v25;
      result[7] = v27;
      *a3 = result;
      return result;
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v8);
    uint64_t v9 = swift_retain_n();
    uint64_t v10 = specialized find1<A>(_:key:filter:)(v9, v34);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 72);
      uint64_t v12 = *(void *)(v10 + 80);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    __n128 result = (_DWORD *)swift_release_n();
    if (!__OFADD__(v12, a1))
    {
      uint64_t v32 = v11;
      uint64_t v33 = v12 + a1;
      type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v13);
      uint64_t v14 = swift_retain_n();
      uint64_t v15 = specialized find1<A>(_:key:filter:)(v14, v34);
      if (v15) {
        unsigned __int8 v16 = *(unsigned char *)(v15 + 72);
      }
      else {
        unsigned __int8 v16 = 0;
      }
      swift_release_n();
      char v30 = v16;
      type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v17);
      uint64_t v18 = swift_retain_n();
      uint64_t v19 = specialized find1<A>(_:key:filter:)(v18, v34);
      if (v19) {
        char v7 = *(unsigned char *)(v19 + 72);
      }
      else {
        char v7 = 0;
      }
      swift_release_n();
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

void specialized static Color.systemBackgroundColor(info:context:scheme:)(void *a1, unsigned __int8 *a2, unsigned char *a3)
{
  uint64_t v3 = a1[1];
  if (*a3)
  {
    BOOL v4 = __OFADD__(*a1, v3);
    uint64_t v5 = *a1 + v3;
    if (!v4)
    {
      switch(v5)
      {
        case 0:
          return;
        case 2:
          char v13 = 0;
          float v6 = 0.17255;
          float v7 = 0.18039;
          Swift::Int v8 = &v13;
          break;
        case 1:
          char v12 = 0;
          float v6 = 0.1098;
          float v7 = 0.11765;
          Swift::Int v8 = &v12;
          break;
        default:
          char v14 = 0;
          float v6 = 0.22745;
          float v7 = 0.23529;
          Swift::Int v8 = &v14;
          break;
      }
      goto LABEL_13;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  uint64_t v9 = *a2;
  BOOL v4 = __OFADD__(v3, v9);
  char v10 = v3 + v9;
  if (v4) {
    goto LABEL_16;
  }
  if ((v10 & 1) == 0) {
    return;
  }
  char v11 = 0;
  float v6 = 0.94902;
  float v7 = 0.96863;
  Swift::Int v8 = &v11;
LABEL_13:
  specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(v8, v6, v6, v7);
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundContextKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundContextKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundContextKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundStyleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundStyleKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance AnyGradient(uint64_t a1)
{
  swift_retain();
  specialized Paint._apply(to:)(a1);

  return swift_release();
}

uint64_t specialized Paint._apply(to:)(uint64_t result, void (*a2)(void), unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  void (*v38)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  uint64_t v46;
  char v47;
  float v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  uint64_t v6 = *(void *)(result + 8);
  float v7 = v5;
  uint64_t v8 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v6 != *(void *)(result + 16))
      {
        uint64_t v37 = *(void *)result;
        uint64_t v17 = *(void *)(result + 56);
        uint64_t v19 = *v5;
        unsigned __int8 v41 = *(void *)(result + 48);
        uint64_t v18 = v41;
        *(void *)&uint64_t v42 = v17;
        uint64_t v38 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(void *)v19 + 104);
        swift_retain();
        swift_retain();
        v38(&v52, &v41);
        swift_release();
        uint64_t v39 = v18;
        swift_release();
        uint64_t v20 = v52;
        char v21 = v53;
        uint64_t v23 = v7[1];
        uint64_t v22 = v7[2];
        uint64_t v25 = v7[3];
        uint64_t v24 = v7[4];
        if (*(unsigned char *)(v8 + 104))
        {
          type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
          uint64_t v26 = swift_allocObject();
          *(void *)(v26 + 16) = v20;
          *(unsigned char *)(v26 + 24) = v21;
          *(void *)(v26 + 32) = v23;
          *(void *)(v26 + 40) = v22;
          *(void *)(v26 + 48) = v25;
          *(void *)(v26 + 56) = v24;
        }
        else
        {
          uint64_t v28 = *(void *)(v8 + 88);
          uint64_t v27 = *(void *)(v8 + 96);
          long long v36 = *(_OWORD *)(v8 + 72);
          a2(0);
          uint64_t v26 = swift_allocObject();
          *(void *)(v26 + 16) = v20;
          *(unsigned char *)(v26 + 24) = v21;
          *(void *)(v26 + 32) = v23;
          *(void *)(v26 + 40) = v22;
          *(void *)(v26 + 48) = v25;
          *(void *)(v26 + 56) = v24;
          *(_OWORD *)(v26 + 64) = v36;
          *(void *)(v26 + 80) = v28;
          *(void *)(v26 + 88) = v27;
        }
        uint64_t v29 = *(void *)(v8 + 32);
        int v30 = *(unsigned __int8 *)(v8 + 40);
        unsigned __int8 v41 = v39;
        *(void *)&uint64_t v42 = v17;
        swift_retain();
        swift_bridgeObjectRetain();
        outlined copy of _ShapeStyle_Shape.Result(v29, v30);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        unsigned __int8 v41 = v39;
        *(void *)&uint64_t v42 = v17;
        float v32 = (*(float (**)(uint64_t, uint64_t *))(v31 + 16))(v6, &v41);
        outlined consume of _ShapeStyle_Shape.Result(v29, v30);
        swift_release();
        swift_release();
        swift_release();
        unsigned __int8 v41 = v26;
        uint64_t v42 = 0u;
        unsigned __int8 v43 = 0u;
        char v44 = 0u;
        char v45 = 0u;
        int v46 = 0;
        uint64_t v47 = 1;
        char v48 = v32;
        uint64_t v49 = 0;
        unsigned __int8 v50 = -1;
        char v51 = MEMORY[0x263F8EE78];
        char v40 = v37;
        if (v30 == 1) {
          uint64_t v33 = v29;
        }
        else {
          uint64_t v33 = MEMORY[0x263F8EE78];
        }
        if (v30 == 1) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = v29;
        }
        if (v30 == 1) {
          char v35 = 5;
        }
        else {
          char v35 = v30;
        }
        int v52 = v33;
        outlined copy of _ShapeStyle_Pack.Fill((id)v26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined copy of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRetain();
        _ShapeStyle_Pack.subscript.setter(&v41, &v40, v6);
        outlined consume of _ShapeStyle_Shape.Result(v34, v35);
        swift_release();
        outlined consume of _ShapeStyle_Pack.Fill(v26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        outlined consume of GraphicsBlendMode?(0, 0xFFu);
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        *(void *)(v8 + 32) = v52;
        *(unsigned char *)(v8 + 40) = 1;
      }
      break;
    case 2:
      uint64_t v9 = *(void *)(result + 56);
      uint64_t v10 = *v5;
      unsigned __int8 v41 = *(void *)(result + 48);
      *(void *)&uint64_t v42 = v9;
      char v11 = *(uint64_t (**)(uint64_t *))(*(void *)v10 + 112);
      swift_retain();
      swift_retain();
      uint64_t v12 = v11(&v41);
      swift_release();
      unint64_t result = swift_release();
      if (v12)
      {
        unint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v8 + 32), *(unsigned char *)(v8 + 40));
        *(void *)(v8 + 32) = v12;
        *(unsigned char *)(v8 + 40) = 3;
      }
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      unint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v8 + 32) = 0;
      *(unsigned char *)(v8 + 40) = 0;
      break;
  }
  return result;
}

uint64_t specialized Paint._apply(to:)(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1, (void (*)(void))type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<LinearGradient._Paint>>, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint);
}

uint64_t GradientBox.resolve(in:)(long long *a1)
{
  uint64_t v2 = *v1;
  long long v4 = *a1;
  return (*(uint64_t (**)(long long *, void))(*(void *)(v2 + 136) + 16))(&v4, *(void *)(v2 + 128));
}

uint64_t OffsetShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  v11.n128_f64[0] = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v10;
  uint64_t v15 = v10 + 1;
  uint64_t v16 = v10[1];
  uint64_t v17 = v10[2];
  switch(*((unsigned char *)v10 + 24))
  {
    case 1:
      uint64_t v4 = *(void *)(v2 + *(int *)(a2 + 36));
      if (__OFADD__(v16, v4)) {
        goto LABEL_74;
      }
      BOOL v19 = __OFADD__(v17, v4);
      uint64_t v30 = v17 + v4;
      if (v19) {
        goto LABEL_75;
      }
      uint64_t v89 = a2;
      uint64_t v90 = v2;
      if (v30 < v16 + v4) {
        goto LABEL_76;
      }
      uint64_t v87 = v30;
      uint64_t v88 = v16 + v4;
      unsigned int v5 = v14;
      uint64_t v31 = *(void **)(v7 + 32);
      int v32 = *(unsigned __int8 *)(v7 + 40);
      BOOL v33 = v32 == 1;
      if (v32 == 1) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = *(void *)(v7 + 32);
      }
      uint64_t v86 = v34;
      if (v32 == 1) {
        int v32 = 5;
      }
      int v85 = v32;
      char v35 = (void *)MEMORY[0x263F8EE78];
      if (v33) {
        uint64_t v3 = v31;
      }
      else {
        uint64_t v3 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v13 = v3[2];
      unsigned int v102 = v14;
      if (!v13) {
        goto LABEL_37;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v83 = v14;
      uint64_t v84 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_78;
      }
      goto LABEL_26;
    case 2:
      uint64_t v24 = *(void *)(v2 + *(int *)(a2 + 36));
      BOOL v19 = __OFADD__(v24, v14);
      uint64_t v25 = v24 + v14;
      if (v19) {
        goto LABEL_73;
      }
      *(void *)uint64_t v7 = v25;
      *uint64_t v15 = 0;
      _OWORD v10[2] = 0;
      char v23 = 2;
      goto LABEL_8;
    case 3:
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v9 + 16))(v13, v2, v8, v11.n128_f64[0]);
      MEMORY[0x270FA5388](v28);
      uint64_t v80 = v8;
      uint64_t v81 = *(void *)(a2 + 24);
      uint64_t v82 = v2;
      type metadata accessor for OffsetShapeStyle<AnyShapeStyle>();
      ShapeStyle.mapCopiedStyle<A>(in:body:)(v7, (void (*)(uint64_t))partial apply for closure #1 in OffsetShapeStyle._apply(to:), (uint64_t)(&v83 - 6), v8, v29);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v13, v8);
    case 4:
      uint64_t v21 = *(void *)(v2 + *(int *)(a2 + 36));
      BOOL v19 = __OFADD__(v21, v14);
      uint64_t v22 = v21 + v14;
      if (v19) {
        goto LABEL_72;
      }
      *(void *)uint64_t v7 = v22;
      *uint64_t v15 = 0;
      _OWORD v10[2] = 0;
      char v23 = 4;
LABEL_8:
      *(unsigned char *)(v7 + 24) = v23;
      goto LABEL_9;
    case 5:
      if (v17 | v16 | v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v9 + 16))(v13, v2, v8, v11.n128_f64[0]);
        uint64_t v79 = AnyShapeStyle.init<A>(_:)(v13, v8);
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v7 + 32), *(unsigned char *)(v7 + 40));
        *(void *)(v7 + 32) = v79;
        char v78 = 2;
      }
      else
      {
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v7 + 32), *(unsigned char *)(v7 + 40));
        *(void *)(v7 + 32) = 0;
        char v78 = 4;
      }
      goto LABEL_65;
    default:
      uint64_t v18 = *(void *)(v2 + *(int *)(a2 + 36));
      BOOL v19 = __OFADD__(v18, v14);
      uint64_t v20 = v18 + v14;
      if (v19)
      {
        while (1)
        {
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
          while (1)
          {
            __break(1u);
LABEL_78:
            uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_26:
            uint64_t v37 = 0;
            uint64_t v38 = v3 + 4;
LABEL_29:
            unint64_t v39 = v3[2];
            if (v37 >= v39) {
              break;
            }
            char v40 = (unsigned __int8 *)&v38[15 * v37];
            unsigned int v41 = *v40;
            if (v41 < v5) {
              goto LABEL_28;
            }
            if (v41 > v5) {
              goto LABEL_36;
            }
            uint64_t v42 = v40[1];
            BOOL v19 = __OFADD__(v42, v4);
            uint64_t v43 = v42 + v4;
            if (v19) {
              goto LABEL_69;
            }
            if ((v43 & 0x8000000000000000) == 0)
            {
              v40[1] = v43;
LABEL_28:
              if (++v37 >= v13) {
                goto LABEL_36;
              }
              goto LABEL_29;
            }
            unint64_t v44 = v39 - 1;
            uint64_t v45 = v39 - 1 - v37;
            if (v45 < 0)
            {
LABEL_79:
              uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            uint64_t v46 = v7;
            uint64_t v47 = v4;
            char v48 = &v38[15 * v37];
            uint64_t v49 = v48[14];
            uint64_t v100 = v48[12];
            uint64_t v101 = v49;
            int v94 = *((unsigned __int8 *)v48 + 88);
            uint64_t v50 = v48[10];
            uint64_t v92 = v48[9];
            uint64_t v93 = v50;
            uint64_t v51 = v48[8];
            uint64_t v98 = v48[7];
            uint64_t v99 = v51;
            uint64_t v52 = v48[6];
            uint64_t v96 = v48[5];
            uint64_t v97 = v52;
            uint64_t v53 = v48[3];
            uint64_t v91 = v48[4];
            uint64_t v55 = v48[1];
            uint64_t v54 = v48[2];
            int v95 = *((unsigned __int8 *)v48 + 104);
            memmove(v40, v40 + 120, 120 * v45);
            v3[2] = v44;
            outlined consume of _ShapeStyle_Pack.Fill(v55, v54, v53, v91, v96, v97, v98, v99, v92, v93, v94);
            outlined consume of GraphicsBlendMode?(v100, v95);
            swift_bridgeObjectRelease();
            --v13;
            unsigned int v5 = v102;
            uint64_t v4 = v47;
            uint64_t v7 = v46;
            if (v37 < v13) {
              goto LABEL_29;
            }
LABEL_36:
            LOBYTE(v14) = v83;
            uint64_t v8 = v84;
            char v35 = (void *)MEMORY[0x263F8EE78];
LABEL_37:
            outlined consume of _ShapeStyle_Shape.Result(v86, v85);
            *(void *)(v7 + 32) = v3;
            *(unsigned char *)(v7 + 40) = 1;
            uint64_t v56 = v88;
            *(void *)uint64_t v7 = v14;
            *(void *)(v7 + 8) = v56;
            *(void *)(v7 + 16) = v87;
            *(unsigned char *)(v7 + 24) = 1;
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v89 + 24) + 32))(v7, v8);
            uint64_t v57 = -v4;
            if (!__OFSUB__(0, v4))
            {
              int v58 = *(unsigned __int8 *)(v7 + 40);
              if (v58 == 1) {
                uint64_t v59 = 0;
              }
              else {
                uint64_t v59 = *(void *)(v7 + 32);
              }
              if (v58 == 1) {
                uint64_t v13 = 5;
              }
              else {
                uint64_t v13 = *(unsigned __int8 *)(v7 + 40);
              }
              if (v58 == 1) {
                char v60 = *(void **)(v7 + 32);
              }
              else {
                char v60 = v35;
              }
              uint64_t v4 = v60[2];
              if (!v4)
              {
LABEL_61:
                uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v59, v13);
                *(void *)(v7 + 32) = v60;
                char v78 = 1;
LABEL_65:
                *(unsigned char *)(v7 + 40) = v78;
                return result;
              }
              char v61 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v90 = v59;
              LODWORD(v89) = v13;
              if ((v61 & 1) == 0) {
                char v60 = specialized _ArrayBuffer._consumeAndCreateNew()(v60);
              }
              unint64_t v62 = 0;
              uint64_t v3 = v60 + 4;
              while (1)
              {
LABEL_53:
                unint64_t v63 = v60[2];
                if (v62 >= v63) {
                  goto LABEL_68;
                }
                long long v64 = (unsigned __int8 *)&v3[15 * v62];
                unsigned int v65 = *v64;
                if (v65 < v5) {
                  goto LABEL_52;
                }
                if (v65 > v5) {
                  goto LABEL_60;
                }
                uint64_t v66 = v64[1];
                BOOL v19 = __OFADD__(v66, v57);
                uint64_t v67 = v66 + v57;
                if (v19) {
                  goto LABEL_70;
                }
                if ((v67 & 0x8000000000000000) == 0) {
                  break;
                }
                unint64_t v68 = v63 - 1;
                uint64_t v69 = v63 - 1 - v62;
                if (v69 < 0) {
                  goto LABEL_79;
                }
                uint64_t v70 = v57;
                id v71 = &v3[15 * v62];
                uint64_t v72 = v71[14];
                uint64_t v100 = v71[12];
                uint64_t v101 = v72;
                int v94 = *((unsigned __int8 *)v71 + 88);
                uint64_t v73 = v71[10];
                uint64_t v92 = v71[9];
                uint64_t v93 = v73;
                uint64_t v74 = v71[8];
                uint64_t v98 = v71[7];
                uint64_t v99 = v74;
                uint64_t v75 = v71[6];
                uint64_t v96 = v71[5];
                uint64_t v97 = v75;
                uint64_t v76 = v71[3];
                uint64_t v91 = v71[4];
                uint64_t v77 = v71[1];
                uint64_t v13 = v71[2];
                int v95 = *((unsigned __int8 *)v71 + 104);
                memmove(v64, v64 + 120, 120 * v69);
                v60[2] = v68;
                outlined consume of _ShapeStyle_Pack.Fill(v77, v13, v76, v91, v96, v97, v98, v99, v92, v93, v94);
                outlined consume of GraphicsBlendMode?(v100, v95);
                swift_bridgeObjectRelease();
                --v4;
                unsigned int v5 = v102;
                uint64_t v57 = v70;
                if ((uint64_t)v62 >= v4)
                {
LABEL_60:
                  uint64_t v59 = v90;
                  LOBYTE(v13) = v89;
                  goto LABEL_61;
                }
              }
              v64[1] = v67;
LABEL_52:
              if ((uint64_t)++v62 >= v4) {
                goto LABEL_60;
              }
              goto LABEL_53;
            }
          }
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
        }
      }
      *(void *)uint64_t v7 = v20;
      *uint64_t v15 = 0;
      _OWORD v10[2] = 0;
      *((unsigned char *)v10 + 24) = 0;
LABEL_9:
      uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)(a2 + 24) + 32);
      return v26(v7, v8, v11);
  }
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance SystemColorsStyle(uint64_t a1)
{
  return SystemColorsStyle._apply(to:)(a1);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance AnyShapeStyle()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

void *assignWithCopy for ViewTransform(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

void *static ScrollCoordinateSpace.safeArea.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for safeArea, &static ScrollCoordinateSpace.safeArea, a1);
}

void *static ScrollCoordinateSpace.content.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for content, &static ScrollCoordinateSpace.content, a1);
}

void *static ScrollCoordinateSpace.all.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for all, &static ScrollCoordinateSpace.all, a1);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance CountingIndexCollection<A>()
{
  return CountingIndexCollection.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t CountingIndexCollection.withContiguousStorageIfAvailable<A>(_:)()
{
  return dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

ValueMetadata *type metadata accessor for OpacityRendererEffect()
{
  return &type metadata for OpacityRendererEffect;
}

uint64_t one-time initialization function for sharedCache()
{
  type metadata accessor for AtomicBuffer<NamedImage.Cache.ImageCacheData>(0, &lazy cache variable for type metadata for AtomicBuffer<NamedImage.Cache.ImageCacheData>, (uint64_t)&unk_26FA402C8, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  uint64_t v1 = MEMORY[0x263F8EE80];
  *(void *)(result + 24) = MEMORY[0x263F8EE80];
  *(void *)(result + 32) = v1;
  *(void *)(result + 40) = v1;
  *(void *)(result + 48) = v1;
  static NamedImage.sharedCache = 0;
  unk_26B0EE920 = result;
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AllowsTighteningKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AllowsTighteningKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AllowsTighteningKey>>);
    }
  }
}

uint64_t key path getter for EnvironmentValues.paragraphTypesetting : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t key path getter for EnvironmentValues.backgroundProminence : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t ResolvedStyledText.StringDrawing.__deallocating_deinit()
{
  long long v1 = *(_OWORD *)(v0 + 128);
  v7[6] = *(_OWORD *)(v0 + 112);
  v7[7] = v1;
  v7[8] = *(_OWORD *)(v0 + 144);
  char v8 = *(unsigned char *)(v0 + 160);
  long long v2 = *(_OWORD *)(v0 + 64);
  v7[2] = *(_OWORD *)(v0 + 48);
  void v7[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 96);
  v7[4] = *(_OWORD *)(v0 + 80);
  v7[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  v7[0] = *(_OWORD *)(v0 + 16);
  v7[1] = v4;
  outlined release of TextLayoutProperties((uint64_t)v7);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned int v5 = *(void **)(v0 + 360);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TextSuffixKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a2 + 48);
  long long v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  void v9[2] = *(_OWORD *)(a1 + 32);
  uint64_t v10 = v2;
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = v3;
  return static ResolvedTextSuffix.== infix(_:_:)(v9, v7) & 1;
}

uint64_t specialized ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, long long *a2, uint64_t a3, __int16 *a4, char a5, __int16 *a6, uint64_t a7, double a8, double a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = v14;
  uint64_t v26 = (_OWORD *)(v15 + 280);
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(*(void **)a7, *(void *)(a7 + 8), *(void *)(a7 + 16), *(void *)(a7 + 24), *(void *)(a7 + 32), *(void *)(a7 + 40));
  long long v27 = a2[7];
  long long v29 = a2[5];
  long long v73 = a2[6];
  long long v28 = v73;
  long long v74 = v27;
  long long v30 = a2[7];
  long long v75 = a2[8];
  long long v31 = a2[3];
  long long v33 = a2[1];
  long long v69 = a2[2];
  long long v32 = v69;
  long long v70 = v31;
  long long v34 = a2[3];
  long long v35 = a2[5];
  long long v71 = a2[4];
  long long v36 = v71;
  long long v72 = v35;
  long long v37 = a2[1];
  long long v67 = *a2;
  long long v38 = v67;
  long long v68 = v37;
  *(double *)(v15 + 224) = a8;
  *(double *)(v15 + 232) = a9;
  *(double *)(v15 + 240) = a10;
  *(double *)(v15 + 248) = a11;
  *(_OWORD *)(v15 + 112) = v28;
  *(_OWORD *)(v15 + 128) = v30;
  *(_OWORD *)(v15 + 144) = a2[8];
  char v76 = *((unsigned char *)a2 + 144);
  __int16 v39 = *a4;
  __int16 v40 = *a6;
  *(void *)(v15 + 200) = 0;
  *(unsigned char *)(v15 + 208) = 1;
  *(_OWORD *)(v15 + 48) = v32;
  *(_OWORD *)(v15 + 64) = v34;
  *(_OWORD *)(v15 + 280) = 0u;
  *(_OWORD *)(v15 + 296) = 0u;
  *(_OWORD *)(v15 + 312) = 0u;
  *(_OWORD *)(v15 + 328) = 0u;
  *(unsigned char *)(v15 + 344) = 1;
  *(void *)(v15 + 216) = a1;
  *(_WORD *)(v15 + 256) = v39;
  *(unsigned char *)(v15 + 258) = a5;
  *(_WORD *)(v15 + 260) = v40;
  *(void *)(v15 + 264) = a13;
  *(void *)(v15 + 272) = a14;
  *(unsigned char *)(v15 + 160) = *((unsigned char *)a2 + 144);
  *(_OWORD *)(v15 + 80) = v36;
  *(_OWORD *)(v15 + 96) = v29;
  *(_OWORD *)(v15 + 16) = v38;
  *(_OWORD *)(v15 + 32) = v33;
  _sypSgWObTm_3(a3, (uint64_t)v65, &lazy cache variable for type metadata for EdgeInsets?, (uint64_t)&type metadata for EdgeInsets);
  if (v66 == 1)
  {
    if (a1)
    {
      long long v62 = 0uLL;
      long long v63 = 0uLL;
      long long v60 = 0uLL;
      long long v61 = 0uLL;
      char v64 = 1;
      char v58 = BYTE8(v73);
      uint64_t v59 = v74;
      v56[6] = v73;
      v56[7] = v74;
      v56[8] = v75;
      char v57 = v76;
      _OWORD v56[2] = v69;
      v56[3] = v70;
      uint64_t v56[4] = v71;
      v56[5] = v72;
      v56[0] = v67;
      v56[1] = v68;
      id v41 = a1;
      outlined retain of TextLayoutProperties((uint64_t)&v67);
      double v42 = Text.Sizing.layoutMargins(for:metrics:layoutProperties:)((uint64_t)v41, (uint64_t)&v60, (uint64_t)v56);
      uint64_t v44 = v43;
      uint64_t v46 = v45;
      uint64_t v48 = v47;

      outlined release of TextLayoutProperties((uint64_t)&v67);
      char v49 = v64;
      long long v50 = v61;
      long long v51 = v62;
      long long v52 = v63;
      *uint64_t v26 = v60;
      *(_OWORD *)(v15 + 296) = v50;
      *(_OWORD *)(v15 + 312) = v51;
      *(_OWORD *)(v15 + 328) = v52;
      *(unsigned char *)(v15 + 344) = v49;
      *(double *)(v15 + 168) = v42;
      *(void *)(v15 + 176) = v44;
      *(void *)(v15 + 184) = v46;
      *(void *)(v15 + 192) = v48;
    }
    else
    {
      *(_OWORD *)(v15 + 312) = 0uLL;
      *(_OWORD *)(v15 + 328) = 0uLL;
      *uint64_t v26 = 0uLL;
      *(_OWORD *)(v15 + 296) = 0uLL;
      *(unsigned char *)(v15 + 344) = 1;
      *(_OWORD *)(v15 + 168) = 0uLL;
      *(_OWORD *)(v15 + 184) = 0uLL;
    }
  }
  else
  {
    *(_OWORD *)(v15 + 312) = 0u;
    *(_OWORD *)(v15 + 328) = 0u;
    *uint64_t v26 = 0u;
    *(_OWORD *)(v15 + 296) = 0u;
    *(unsigned char *)(v15 + 344) = 1;
    long long v53 = v65[1];
    *(_OWORD *)(v15 + 168) = v65[0];
    *(_OWORD *)(v15 + 184) = v53;
  }
  return v15;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t _sypSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t _sypSgWObTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for TextRenderLayer.Layout?(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _sypSgWObTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _sypSgWObTm_3(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_3(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _sypSgWObTm_4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for AtomicBuffer<NamedImage.Cache.ImageCacheData>(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _sypSgWObTm_5(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_5(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _sypSgWObTm_6(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for AtomicBuffer<NamedImage.Cache.ImageCacheData>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

double Text.Sizing.layoutMargins(for:metrics:layoutProperties:)(uint64_t isEscapingClosureAtFileLocation, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for CharacterSet();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v53[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v53[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v15 = *(unsigned __int8 *)(a3 + 81);
  double v16 = *(double *)(a3 + 96);
  int v17 = *v3;
  unint64_t v18 = *((void *)v3 + 1);
  long long v68 = 0u;
  long long v69 = 0u;
  double v19 = 0.0;
  if (v17)
  {
    uint64_t v58 = v12;
    if (v17 == 1)
    {
      NSAttributedString.maxFontMetrics.getter((uint64_t)&aBlock);
      double v20 = *(double *)&v60;
      double v21 = *(double *)&v61;
      uint64_t v22 = v64;
      *(double *)a2 = aBlock;
      *(double *)(a2 + 8) = v20;
      *(double *)(a2 + 16) = v21;
      long long v23 = v62;
      *(_OWORD *)(a2 + 24) = v62;
      *(_OWORD *)(a2 + 40) = v63;
      double v24 = 0.0;
      *(void *)(a2 + 56) = v22;
      double v25 = 0.0;
      double v26 = 0.0;
      *(unsigned char *)(a2 + 64) = 0;
      if (*(double *)&v23 != 0.0)
      {
        long long v57 = v23;
        double v27 = v20 - v21;
        uint64_t v28 = v58;
        (*(void (**)(unsigned char *, void, uint64_t))(v58 + 104))(v14, *MEMORY[0x263F8E218], v11);
        double aBlock = v27;
        specialized FloatingPoint.round(_:toMultipleOf:)(v14, v16);
        double v29 = aBlock;
        (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v14, v11);
        double v25 = (v27 - v29 + *(double *)&v57) * 0.5;
        double v24 = *((double *)&v68 + 1);
        double v19 = *((double *)&v69 + 1);
        double v26 = v25;
      }
    }
    else
    {
      *(void *)&long long v57 = v11;
      if (one-time initialization token for oversizedScalarsWithoutEmoji != -1) {
        swift_once();
      }
      uint64_t v30 = __swift_project_value_buffer(v7, (uint64_t)static NSAttributedString.oversizedScalarsWithoutEmoji);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v10, v30, v7);
      id v31 = objc_msgSend((id)isEscapingClosureAtFileLocation, sel_string);
      *(double *)&uint64_t v32 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)());
      uint64_t v34 = v33;

      double aBlock = *(double *)&v32;
      uint64_t v60 = v34;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      LOBYTE(v31) = v35;
      swift_bridgeObjectRelease();
      double v36 = 0.0;
      double v37 = 0.0;
      double v38 = 0.0;
      if ((v31 & 1) == 0)
      {
        int v54 = v15;
        double v67 = MEMORY[0x263F8EE88];
        if (one-time initialization token for kitFont != -1) {
          goto LABEL_32;
        }
        while (1)
        {
          uint64_t v56 = static NSAttributedStringKey.kitFont;
          id v55 = objc_msgSend((id)isEscapingClosureAtFileLocation, sel_length);
          uint64_t v39 = swift_allocObject();
          *(void *)(v39 + 16) = &v67;
          uint64_t v40 = swift_allocObject();
          *(void *)(v40 + 16) = partial apply for closure #1 in NSAttributedString.allFonts();
          *(void *)(v40 + 24) = v39;
          *((void *)&v62 + 1) = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
          *(void *)&long long v63 = v40;
          double aBlock = MEMORY[0x263EF8330];
          uint64_t v60 = 1107296256;
          *(double *)&long long v61 = COERCE_DOUBLE(thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
          *(void *)&long long v62 = &block_descriptor_17;
          id v41 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          objc_msgSend((id)isEscapingClosureAtFileLocation, sel_enumerateAttribute_inRange_options_usingBlock_, v56, 0, v55, 0, v41);
          _Block_release(v41);
          char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((isEscapingClosureAtFileLocation & 1) == 0) {
            break;
          }
          __break(1u);
LABEL_32:
          swift_once();
        }
        uint64_t v42 = *(void *)&v67;
        swift_release();
        double v36 = specialized Sequence.reduce<A>(into:_:)(v42, 0.0, 0.0, 0.0, 0.0);
        double v37 = v43;
        double v19 = v44;
        double v38 = v45;
        swift_bridgeObjectRelease();
        int v15 = v54;
      }
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      uint64_t v46 = v58;
      uint64_t v47 = v57;
      (*(void (**)(unsigned char *, void, void))(v58 + 104))(v14, *MEMORY[0x263F8E218], v57);
      double aBlock = v36;
      double v66 = v19;
      double v67 = v37;
      double v65 = v38;
      specialized FloatingPoint.round(_:toMultipleOf:)(v14, v16);
      specialized FloatingPoint.round(_:toMultipleOf:)(v14, v16);
      specialized FloatingPoint.round(_:toMultipleOf:)(v14, v16);
      specialized FloatingPoint.round(_:toMultipleOf:)(v14, v16);
      double v26 = aBlock;
      double v25 = v66;
      double v24 = v67;
      double v19 = v65;
      (*(void (**)(unsigned char *, uint64_t))(v46 + 8))(v14, v47);
      *(double *)&long long v68 = v26;
      *((double *)&v68 + 1) = v24;
    }
  }
  else
  {
    double v24 = 0.0;
    double v25 = 0.0;
    double v26 = 0.0;
  }
  if (v15) {
    double v48 = v24;
  }
  else {
    double v48 = v26;
  }
  if (v15)
  {
    double v24 = v25;
    double v25 = v19;
    double v19 = v26;
  }
  *(double *)&long long v68 = v48;
  *((double *)&v68 + 1) = v24;
  *(double *)&long long v69 = v25;
  *((double *)&v69 + 1) = v19;
  if (v18 >> 62) {
    goto LABEL_29;
  }
  unint64_t v49 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v49)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    return v48;
  }
  do
  {
    while (1)
    {
      if (__OFSUB__(v49--, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if ((v49 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      swift_bridgeObjectRetain();
      unint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
      if (!v49) {
        goto LABEL_30;
      }
    }
    if (v49 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_28;
    }
    long long v51 = *(void (**)(long long *))(**(void **)(v18 + 32 + 8 * v49) + 80);
    swift_retain();
    v51(&v68);
    swift_release();
  }
  while (v49);
  swift_bridgeObjectRelease();
  return *(double *)&v68;
}

uint64_t specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, long long *a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t a7, uint64_t *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, char a20)
{
  long long v21 = a2[7];
  long long v82 = a2[6];
  long long v83 = v21;
  long long v84 = a2[8];
  char v85 = *((unsigned char *)a2 + 144);
  long long v22 = a2[3];
  v80[2] = a2[2];
  v80[3] = v22;
  long long v23 = a2[5];
  v80[4] = a2[4];
  long long v81 = v23;
  long long v24 = a2[1];
  v80[0] = *a2;
  v80[1] = v24;
  char v25 = *a4;
  char v26 = a4[1];
  __int16 v27 = *a6;
  double v29 = *(void **)a7;
  uint64_t v28 = *(void *)(a7 + 8);
  uint64_t v30 = *(void *)(a7 + 16);
  uint64_t v31 = *(void *)(a7 + 24);
  uint64_t v33 = *(void *)(a7 + 32);
  uint64_t v32 = *(void *)(a7 + 40);
  uint64_t v34 = *(void *)(a7 + 48);
  uint64_t v35 = *a8;
  if (!*(void *)&vand_s8((int8x8_t)vdup_n_s16((unsigned __int16)*a6), (int8x8_t)0x80001000400008)
    && (BYTE1(v81) & 1) == 0
    && !*(void *)(v35 + 16))
  {
    char v53 = *a4;
    char v54 = a4[1];
    __int16 v55 = *a6;
    if (v32 < 0)
    {
      outlined consume of ResolvedTextSuffix(v29, v28, v30, v31, v33, v32);
      outlined consume of ResolvedTextSuffix(0, 0, 0, 0, 0, 0x8000000000000000);
      char v26 = v54;
      __int16 v27 = v55;
      char v25 = v53;
      if (BYTE8(v83) == 2)
      {
        long long v36 = a2[7];
        long long v76 = a2[6];
        long long v77 = v36;
        long long v78 = a2[8];
        char v79 = *((unsigned char *)a2 + 144);
        long long v37 = a2[3];
        long long v72 = a2[2];
        long long v73 = v37;
        long long v38 = a2[5];
        long long v74 = a2[4];
        long long v75 = v38;
        long long v39 = a2[1];
        long long v70 = *a2;
        long long v71 = v39;
        char v68 = v53;
        char v69 = v54;
        __int16 v67 = v55;
        uint64_t v60 = v29;
        uint64_t v61 = v28;
        uint64_t v62 = v30;
        uint64_t v63 = v31;
        uint64_t v64 = v33;
        uint64_t v65 = v32;
        uint64_t v66 = v34;
        uint64_t v59 = v35;
        type metadata accessor for ResolvedStyledText.StringDrawing();
        swift_allocObject();
        id v40 = a1;
        outlined retain of TextLayoutProperties((uint64_t)v80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v41 = swift_bridgeObjectRetain();
        return ResolvedStyledText.StringDrawing.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, (uint64_t)&v70, a3, &v68, a5 & 1, &v67, (uint64_t *)&v60, &v59, a9, a10, a11, a12, v42, v43, v44, v45, a17, v41, a19,
                 a20 & 1);
      }
    }
    else
    {
      outlined copy of ResolvedTextSuffix(v29, v28, v30, v31, v33, v32);
      outlined consume of ResolvedTextSuffix(v29, v28, v30, v31, v33, v32);
      outlined consume of ResolvedTextSuffix(0, 0, 0, 0, 0, 0x8000000000000000);
      char v26 = v54;
      __int16 v27 = v55;
      char v25 = v53;
    }
  }
  long long v47 = a2[7];
  long long v76 = a2[6];
  long long v77 = v47;
  long long v78 = a2[8];
  char v79 = *((unsigned char *)a2 + 144);
  long long v48 = a2[3];
  long long v72 = a2[2];
  long long v73 = v48;
  long long v49 = a2[5];
  long long v74 = a2[4];
  long long v75 = v49;
  long long v50 = a2[1];
  long long v70 = *a2;
  long long v71 = v50;
  char v68 = v25;
  char v69 = v26;
  __int16 v67 = v27;
  uint64_t v60 = v29;
  uint64_t v61 = v28;
  uint64_t v62 = v30;
  uint64_t v63 = v31;
  uint64_t v64 = v33;
  uint64_t v65 = v32;
  uint64_t v66 = v34;
  uint64_t v59 = v35;
  type metadata accessor for ResolvedStyledText.TextLayoutManager();
  swift_allocObject();
  outlined copy of ResolvedTextSuffix(v29, v28, v30, v31, v33, v32);
  id v51 = a1;
  outlined retain of TextLayoutProperties((uint64_t)v80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v52 = swift_bridgeObjectRetain();
  return specialized ResolvedStyledText.TextLayoutManager.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, (uint64_t *)&v70, a3, &v68, a5 & 1, &v67, (uint64_t)&v60, &v59, a9, a10, a11, a12, a17, v52);
}

uint64_t outlined retain of TextLayoutProperties(uint64_t a1)
{
  return a1;
}

uint64_t specialized static ResolvedTextSuffix.== infix(_:_:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(uint64_t *)(a1 + 24);
  uint64_t v6 = *(uint64_t *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  unint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v10 = a2[2];
  uint64_t v11 = *((uint64_t *)a2 + 3);
  uint64_t v13 = *((uint64_t *)a2 + 4);
  unint64_t v12 = a2[5];
  uint64_t v14 = a2[6];
  char v43 = v10;
  uint64_t v44 = *(void *)(a1 + 48);
  if (v7 >> 62)
  {
    if (v7 >> 62 == 1)
    {
      if (v12 >> 62 == 1)
      {
        BOOL v15 = *(double *)&v5 == *(double *)&v11 && *(double *)&v6 == *(double *)&v13;
        uint64_t v35 = a2[3];
        uint64_t v36 = a2[4];
        if (!v15) {
          goto LABEL_27;
        }
        if (v4)
        {
LABEL_10:
          if ((v10 & 1) == 0) {
            goto LABEL_27;
          }
          goto LABEL_20;
        }
LABEL_19:
        if (v10)
        {
LABEL_27:
          char v28 = v10;
          char v29 = *(void *)(a1 + 16);
          uint64_t v30 = a2[5];
          uint64_t v31 = a2[1];
          outlined copy of ResolvedTextSuffix((void *)v9, v8, v28, v11, a2[4], v12);
          outlined copy of ResolvedTextSuffix(v3, v2, v29, v5, v6, v7);
          outlined consume of ResolvedTextSuffix(v3, v2, v29, v5, v6, v7);
          long long v22 = (void *)v9;
          uint64_t v23 = v31;
          char v24 = v43;
          uint64_t v26 = v35;
          uint64_t v27 = v36;
          uint64_t v25 = v30;
          goto LABEL_28;
        }
LABEL_20:
        if (v3 == (void *)v9)
        {
          char v32 = v4 & 1;
          char v33 = v10 & 1;
          char v17 = v10;
          char v18 = *(void *)(a1 + 16);
          uint64_t v34 = *(void *)(a1 + 16);
          uint64_t v39 = a2[1];
          uint64_t v41 = a2[5];
          outlined copy of ResolvedTextSuffix((void *)v9, v8, v17, v11, v13, v12);
          outlined copy of ResolvedTextSuffix(v3, v2, v18, v5, v6, v7);
          outlined copy of Text.Layout.Line.Line(v3, v2, v32);
          outlined copy of Text.Layout.Line.Line((void *)v9, v39, v33);
          char v37 = specialized static Array<A>.== infix(_:_:)(v44, v14);
          outlined consume of Text.Layout.Line.Line((void *)v9, v39, v33);
          outlined consume of Text.Layout.Line.Line(v3, v2, v32);
          outlined consume of ResolvedTextSuffix(v3, v2, v34, v5, v6, v7);
          outlined consume of ResolvedTextSuffix((void *)v9, v39, v43, v35, v36, v41);
          return v37 & 1;
        }
        goto LABEL_27;
      }
    }
    else if (v12 >> 62 == 2 && v12 == 0x8000000000000000 && !(v8 | v9 | v10 | v11 | v13 | v14))
    {
      outlined consume of ResolvedTextSuffix(v3, v2, v4, v5, v6, v7);
      outlined consume of ResolvedTextSuffix(0, 0, v10, v11, v13, 0x8000000000000000);
      return 1;
    }
  }
  else if (!(v12 >> 62))
  {
    BOOL v16 = *(double *)&v5 == *(double *)&v11 && *(double *)&v6 == *(double *)&v13;
    uint64_t v35 = a2[3];
    uint64_t v36 = a2[4];
    if (!v16) {
      goto LABEL_27;
    }
    if (v4) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
  char v20 = v10;
  char v21 = *(void *)(a1 + 16);
  uint64_t v40 = a2[1];
  uint64_t v42 = a2[5];
  long long v38 = (void *)*a2;
  outlined copy of ResolvedTextSuffix((void *)*a2, v8, v20, v11, v13, v12);
  outlined copy of ResolvedTextSuffix(v3, v2, v21, v5, v6, v7);
  outlined consume of ResolvedTextSuffix(v3, v2, v21, v5, v6, v7);
  long long v22 = v38;
  uint64_t v23 = v40;
  uint64_t v25 = v42;
  char v24 = v43;
  uint64_t v26 = v11;
  uint64_t v27 = v13;
LABEL_28:
  outlined consume of ResolvedTextSuffix(v22, v23, v24, v26, v27, v25);
  return 0;
}

void *outlined consume of ResolvedTextSuffix(void *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    outlined consume of Text.Layout.Line.Line(result, a2, a3 & 1);
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(void *a1, unint64_t *a2, char *a3, char a4, __int16 *a5, long long *a6, uint64_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, unsigned __int8 *a14, char a15)
{
  unint64_t v19 = *a2;
  char v20 = *a3;
  char v21 = a3[1];
  __int16 v22 = *a5;
  long long v35 = a6[1];
  long long v36 = *a6;
  long long v34 = a6[2];
  uint64_t v23 = *((void *)a6 + 6);
  uint64_t v24 = *a7;
  int v25 = *a14;
  if (a2[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v19, (uint64_t)v71);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    long long v63 = *a2;
    swift_retain();
    TextLayoutProperties.init(from:)((uint64_t *)&v63, (uint64_t)v71);
  }
  *(_OWORD *)&v68[16] = v73;
  *(_OWORD *)char v69 = v74;
  *(_OWORD *)&v69[16] = v75;
  char v70 = v76;
  long long v65 = v71[2];
  long long v66 = v71[3];
  long long v67 = v71[4];
  *(_OWORD *)char v68 = v72;
  long long v63 = v71[0];
  long long v64 = v71[1];
  char v30 = BYTE1(v72);
  if (v25 != 2) {
    char v30 = v25;
  }
  if (a15) {
    char v31 = 2;
  }
  else {
    char v31 = 0;
  }
  char v62 = BYTE8(v63);
  char v61 = BYTE8(v64);
  *(void *)&long long v45 = v63;
  BYTE8(v45) = BYTE8(v63);
  uint64_t v46 = v64;
  char v47 = BYTE8(v64);
  __int16 v48 = *(_WORD *)((char *)&v64 + 9);
  __int16 v49 = *(_WORD *)((char *)&v64 + 11);
  long long v50 = v65;
  long long v51 = v66;
  long long v52 = v67;
  char v53 = v68[0];
  char v54 = v30 & 1;
  long long v55 = *(_OWORD *)&v68[8];
  char v56 = v68[24];
  long long v58 = *(_OWORD *)&v69[8];
  uint64_t v57 = *(void *)v69;
  uint64_t v59 = *(void *)&v69[24];
  char v60 = v70 & 0xFD | v31;
  memset(v77, 0, 32);
  v77[32] = 1;
  v44[0] = v20;
  v44[1] = v21;
  __int16 v43 = v22;
  v41[0] = v36;
  v41[1] = v35;
  v41[2] = v34;
  uint64_t v42 = v23;
  uint64_t v40 = v24;
  uint64_t v32 = specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, &v45, (uint64_t)v77, v44, a4 & 1, &v43, (uint64_t)v41, &v40, a9, a10, a11, a12, v26, v27, v28, v29, a8, a13, 0.0,
          1);
  outlined release of TextLayoutProperties((uint64_t)&v63);
  return v32;
}

void *makeParagraphStyle(environment:)(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1, (uint64_t)v44);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    long long v34 = v1;
    swift_retain();
    TextLayoutProperties.init(from:)((uint64_t *)&v34, (uint64_t)v44);
  }
  long long v40 = v44[6];
  long long v41 = v44[7];
  long long v42 = v44[8];
  char v43 = v45;
  long long v36 = v44[2];
  long long v37 = v44[3];
  long long v38 = v44[4];
  long long v39 = v44[5];
  long long v34 = v44[0];
  long long v35 = v44[1];
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81650]), sel_init);
  uint64_t v4 = v3;
  uint64_t v5 = BYTE11(v35);
  if (BYTE1(v39))
  {
    uint64_t v6 = qword_2461D3278[SBYTE10(v35)];
    goto LABEL_13;
  }
  if (BYTE10(v35))
  {
    if (BYTE10(v35) == 1)
    {
      uint64_t v6 = 4;
      goto LABEL_13;
    }
    if ((BYTE11(v35) & 1) == 0) {
      goto LABEL_12;
    }
LABEL_10:
    uint64_t v6 = 2;
    goto LABEL_13;
  }
  if ((BYTE11(v35) & 1) == 0) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v6 = 3;
LABEL_13:
  objc_msgSend(v3, sel_setHorizontalAlignment_, v6);
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (char *)&v32);
    swift_release_n();
    swift_release_n();
    char v7 = v32;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v32);
    swift_release_n();
    swift_release_n();
    LOBYTE(v8) = v32;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TextScaleKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v9);
    uint64_t v10 = swift_retain_n();
    uint64_t v11 = specialized find1<A>(_:key:filter:)(v10, v33);
    if (v11) {
      char v7 = *(unsigned char *)(v11 + 72);
    }
    else {
      char v7 = 0;
    }
    LOBYTE(v8) = 2;
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<TextScaleKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v12);
    uint64_t v13 = swift_retain_n();
    uint64_t v14 = specialized find1<A>(_:key:filter:)(v13, v33);
    if (v14) {
      __int16 v8 = *(_WORD *)(v14 + 72);
    }
    swift_release_n();
  }
  if (v8 == 2)
  {
    objc_msgSend(v4, sel_setFullyJustified_, 0);
  }
  else
  {
    objc_msgSend(v4, sel_setFullyJustified_, 1);
    v7 |= v8;
  }
  objc_msgSend(v4, sel_setSpansAllLines_, v7 & 1);
  objc_msgSend(v4, sel_setLineBreakMode_, BYTE9(v35) + 3);
  objc_msgSend(v4, sel_setLineSpacing_, *((double *)&v36 + 1));
  objc_msgSend(v4, sel_setLineBreakStrategy_, 0xFFFFLL);
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    char v15 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if (v15) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t v19 = swift_retain_n();
  char v20 = specialized closure #1 in PropertyList.subscript.getter(v19, (uint64_t)v31);
  swift_release_n();
  if ((v20 & 1) == 0) {
LABEL_26:
  }
    objc_msgSend(v4, sel_setLineBreakStrategy_, (unint64_t)objc_msgSend(v4, sel_lineBreakStrategy) & 0xFFFFFFFFFFFFFFFELL);
LABEL_27:
  objc_msgSend(v4, sel_setLineHeightMultiple_, *(double *)&v37);
  objc_msgSend(v4, sel_setMaximumLineHeight_, *((double *)&v37 + 1));
  objc_msgSend(v4, sel_setMinimumLineHeight_, *(double *)&v38);
  HIDWORD(v16) = HIDWORD(v38);
  *(float *)&double v16 = *((double *)&v38 + 1);
  if ((_BYTE)v39)
  {
    *(float *)&double v16 = 0.0;
    uint64_t v17 = 2;
  }
  else
  {
    uint64_t v17 = 0;
  }
  objc_msgSend(v4, sel_setHyphenationFactor_, v16);
  objc_msgSend(v4, sel_setSecondaryLineBreakMode_, v17);
  objc_msgSend(v4, sel_setFirstLineHeadIndent_, *((double *)&v39 + 1));
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    double v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if (v18 > 0.0)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v1, (char *)&v32);
      swift_release_n();
      swift_release_n();
      outlined release of TextLayoutProperties((uint64_t)&v34);
      if ((v32 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_39:
      objc_msgSend(v4, sel_setBaseWritingDirection_, 0);
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v21 = swift_retain_n();
    double v22 = specialized closure #1 in PropertyList.subscript.getter(v21);
    swift_release_n();
    if (v22 > 0.0)
    {
      type metadata accessor for EnvironmentPropertyKey<TextScaleKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v23);
      uint64_t v24 = v33;
      uint64_t v25 = swift_retain_n();
      uint64_t v26 = specialized find1<A>(_:key:filter:)(v25, v24);
      if (v26)
      {
        char v27 = *(unsigned char *)(v26 + 72);
        swift_release_n();
        outlined release of TextLayoutProperties((uint64_t)&v34);
        if (v27) {
          goto LABEL_39;
        }
      }
      else
      {
        swift_release_n();
        outlined release of TextLayoutProperties((uint64_t)&v34);
      }
LABEL_43:
      objc_msgSend(v4, sel_setBaseWritingDirection_, v5);
LABEL_44:
      if (v2) {
        goto LABEL_45;
      }
      goto LABEL_41;
    }
  }
  outlined release of TextLayoutProperties((uint64_t)&v34);
  if (v2)
  {
LABEL_45:
    swift_retain_n();
    swift_retain_n();
    char v29 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    goto LABEL_46;
  }
LABEL_41:
  uint64_t v28 = swift_retain_n();
  char v29 = specialized closure #1 in PropertyList.subscript.getter(v28);
LABEL_46:
  swift_release_n();
  swift_release_n();
  objc_msgSend(v4, sel_setAllowsDefaultTighteningForTruncation_, v29 & 1);
  return v4;
}

uint64_t outlined release of TextLayoutProperties(uint64_t a1)
{
  return a1;
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, __int16 *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for TextJustification, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    __int16 v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextJustificationKey>>();
    uint64_t v21 = v17;
    double v22 = &protocol witness table for TrackedValue<A>;
    LOWORD(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

uint64_t type metadata accessor for ResolvedStyledText.StringDrawing()
{
  return self;
}

uint64_t ResolvedStyledText.StringDrawing.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, uint64_t a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t *a7, uint64_t *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, char a20)
{
  uint64_t v17 = v16;
  char v24 = *(unsigned char *)(a2 + 8);
  char v25 = *(unsigned char *)(a2 + 24);
  double v26 = *(double *)(a2 + 32);
  double v27 = *(double *)(a2 + 72);
  double v28 = *(double *)(a2 + 88);
  double v29 = *(double *)(a2 + 96);
  char v30 = *a4;
  char v51 = *a4;
  char v52 = *(unsigned char *)(a2 + 144);
  __int16 v49 = *a6;
  char v50 = a4[1];
  uint64_t v47 = a7[1];
  uint64_t v48 = *a7;
  uint64_t v45 = a7[3];
  uint64_t v46 = a7[2];
  uint64_t v43 = a7[5];
  uint64_t v44 = a7[4];
  uint64_t v41 = *a8;
  uint64_t v42 = a7[6];
  uint64_t v39 = *(void *)(a2 + 16);
  uint64_t v40 = *(void *)(a2 + 80);
  uint64_t v38 = *(void *)a2;
  if (v52)
  {
    swift_retain();
    char v31 = 1;
    goto LABEL_8;
  }
  if (!a1)
  {
    swift_retain();
    goto LABEL_7;
  }
  swift_retain();
  if (!NSAttributedString.isDynamic.getter())
  {
LABEL_7:
    char v31 = 0;
    goto LABEL_8;
  }
  char v31 = v30 & 1;
LABEL_8:
  id v32 = a1;
  char v37 = a5 & 1;
  specialized NSAttributedString.MetricsCache.init(_:scaleFactorOverride:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:pixelLength:widthIsFlexible:drawWithRequestedWidth:isCollapsible:)(a1, a19, a20 & 1, v38, v24 & 1, v39, v25 & 1, v31, (uint64_t)v73, v26, v28, v29, v27 != 0.0, v37);
  long long v33 = v73[3];
  *(_OWORD *)(v17 + 384) = v73[2];
  *(_OWORD *)(v17 + 400) = v33;
  *(_OWORD *)(v17 + 416) = v73[4];
  *(void *)(v17 + 432) = v74;
  long long v34 = v73[1];
  *(_OWORD *)(v17 + 352) = v73[0];
  *(_OWORD *)(v17 + 368) = v34;
  swift_release();
  *(void *)&long long v58 = v38;
  BYTE8(v58) = v24;
  *(_DWORD *)((char *)&v58 + 9) = *(_DWORD *)(a2 + 9);
  HIDWORD(v58) = *(_DWORD *)(a2 + 12);
  uint64_t v59 = v39;
  char v60 = v25;
  *(_DWORD *)char v61 = *(_DWORD *)(a2 + 25);
  *(_DWORD *)&v61[3] = *(_DWORD *)(a2 + 28);
  double v62 = v26;
  long long v63 = *(_OWORD *)(a2 + 40);
  long long v64 = *(_OWORD *)(a2 + 56);
  double v65 = v27;
  uint64_t v66 = v40;
  double v67 = v28;
  double v68 = v29;
  long long v69 = *(_OWORD *)(a2 + 104);
  long long v70 = *(_OWORD *)(a2 + 120);
  uint64_t v71 = *(void *)(a2 + 136);
  char v72 = v52;
  LOBYTE(v57) = v51;
  HIBYTE(v57) = v50;
  __int16 v56 = v49;
  v55[0] = v48;
  v55[1] = v47;
  v55[2] = v46;
  v55[3] = v45;
  v55[4] = v44;
  v55[5] = v43;
  v55[6] = v42;
  uint64_t v54 = v41;
  return specialized ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, &v58, a3, &v57, v37, &v56, (uint64_t)v55, a9, a10, a11, a12, (uint64_t)&v54, a17, a18);
}

BOOL NSAttributedString.isDynamic.getter()
{
  if ((uint64_t)objc_msgSend(v0, sel_length) < 1) {
    return 0;
  }
  if (one-time initialization token for updateSchedule != -1) {
    swift_once();
  }
  uint64_t v1 = static NSAttributedStringKey.updateSchedule;
  objc_msgSend(v0, sel_length);
  id v2 = objc_msgSend(v0, sel_attribute_atIndex_effectiveRange_, v1, 0, 0);
  BOOL v3 = v2 != 0;
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  _sypSgWOhTm_4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Any?);
  return v3;
}

void specialized NSAttributedString.MetricsCache.init(_:scaleFactorOverride:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:pixelLength:widthIsFlexible:drawWithRequestedWidth:isCollapsible:)(id a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, char a13, char a14)
{
  if (a1)
  {
    id v24 = a1;
    if (a3) {
      a2 = 1.0;
    }
    if (a2 != 1.0)
    {
      id v27 = objc_msgSend(a1, sel__ui_attributedSubstringFromRange_scaledByScaleFactor_, 0, objc_msgSend(a1, sel_length), a2);

      id v24 = v27;
    }
  }
  else
  {
    if (one-time initialization token for emptyString != -1) {
      swift_once();
    }
    id v24 = (id)static NSAttributedString.emptyString;
  }
  double v26 = 1.0;
  if (a3) {
    double v26 = a10;
  }
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = v24;
  *(void *)(a9 + 16) = a4;
  *(unsigned char *)(a9 + 24) = a5 & 1;
  *(void *)(a9 + 32) = a6;
  *(unsigned char *)(a9 + 40) = a7 & 1;
  *(double *)(a9 + 48) = v26;
  *(double *)(a9 + 56) = a11;
  *(double *)(a9 + 64) = a12;
  *(unsigned char *)(a9 + 72) = a8 & 1;
  *(unsigned char *)(a9 + 73) = a13 & 1;
  *(unsigned char *)(a9 + 74) = a14 & 1;
  *(void *)(a9 + 80) = MEMORY[0x263F8EE78];
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, __int16 *a2@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result) {
    __int16 v6 = *(_WORD *)(result + 72);
  }
  else {
    __int16 v6 = 2;
  }
  *a2 = v6;
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ParagraphTypesettingKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ParagraphTypesettingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ParagraphTypesettingKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextJustificationKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextJustificationKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextJustificationKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AllowsTighteningKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AllowsTighteningKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AllowsTighteningKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BodyHeadOutdentKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BodyHeadOutdentKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BodyHeadOutdentKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AvoidsOrphansKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AvoidsOrphansKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AvoidsOrphansKey>>);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<TextScaleKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void outlined consume of Text.Layout.Line.Line(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_release();
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata accessor for ResolvedStyledText.TextLayoutManager()
{
  return self;
}

uint64_t specialized ResolvedStyledText.TextLayoutManager.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, uint64_t *a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t a7, uint64_t *a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = v14;
  uint64_t v21 = *a2;
  char v22 = *((unsigned char *)a2 + 8);
  long long v23 = *(_OWORD *)((char *)a2 + 89);
  long long v24 = *(_OWORD *)((char *)a2 + 121);
  long long v94 = *(_OWORD *)((char *)a2 + 105);
  long long v95 = v24;
  uint64_t v96 = *(uint64_t *)((char *)a2 + 137);
  long long v25 = *(_OWORD *)((char *)a2 + 25);
  long long v26 = *(_OWORD *)((char *)a2 + 57);
  long long v90 = *(_OWORD *)((char *)a2 + 41);
  long long v91 = v26;
  long long v92 = *(_OWORD *)((char *)a2 + 73);
  long long v93 = v23;
  long long v88 = *(_OWORD *)((char *)a2 + 9);
  long long v89 = v25;
  char v27 = *a4;
  char v28 = a4[1];
  __int16 v29 = *a6;
  long long v70 = *(void **)a7;
  uint64_t v71 = *(void *)(a7 + 8);
  uint64_t v30 = *(void *)(a7 + 24);
  uint64_t v72 = *(void *)(a7 + 16);
  uint64_t v31 = *(void *)(a7 + 32);
  unint64_t v32 = *(void *)(a7 + 40);
  uint64_t v33 = *(void *)(a7 + 48);
  uint64_t v34 = *a8;
  *(void *)(v14 + 416) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v14 + 424) = 0u;
  *(_OWORD *)(v14 + 440) = 0u;
  *(_OWORD *)(v14 + 456) = 0u;
  *(_OWORD *)(v14 + 472) = 0u;
  *(_WORD *)(v14 + 488) = 512;
  uint64_t v67 = v34;
  double v68 = a1;
  uint64_t v65 = v31;
  uint64_t v66 = v33;
  __int16 v69 = v29;
  uint64_t v64 = v30;
  uint64_t v59 = v21;
  char v57 = v27;
  char v58 = v22;
  char v56 = v28;
  if ((v22 & 1) != 0 || v21 != 1)
  {
    if (a1)
    {
      swift_retain();
      a1 = NSAttributedString.replacingLineBreakModes(_:)(0);
      goto LABEL_7;
    }
  }
  else
  {
    id v35 = a1;
  }
  swift_retain();
LABEL_7:
  id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F816B8]), sel_init);
  id v37 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ResolvedStyledText.TextLayoutManager.Delegate()), sel_init);
  objc_msgSend(v36, sel_setDelegate_, v37);
  objc_msgSend(v36, sel_setUsesFontLeading_, 0);
  id v38 = objc_allocWithZone(MEMORY[0x263F81688]);
  id v39 = a1;
  id v40 = v36;
  id v41 = objc_msgSend(v38, sel_init);
  if (a1)
  {
    id v42 = v40;
    id v43 = v39;
    uint64_t v44 = (void *)MEMORY[0x24C526EA0]();
    objc_msgSend(v41, sel_setAttributedString_, v43);
    objc_msgSend(v42, sel_replaceTextContentManager_, v41);
  }
  *(void *)(v15 + 496) = v41;
  *(void *)(v15 + 504) = v40;
  *(void *)(v15 + 520) = 0;
  *(void *)(v15 + 512) = 0;
  *(unsigned char *)(v15 + 528) = 0;
  *(void *)(v15 + 544) = 0;
  *(void *)(v15 + 536) = 0;
  *(void *)(v15 + 552) = 4;
  *(void *)(v15 + 568) = 0;
  *(void *)(v15 + 560) = 0;
  *(void *)(v15 + 576) = v37;
  *(void *)(v15 + 352) = v70;
  *(void *)(v15 + 360) = v71;
  *(void *)(v15 + 368) = v72;
  *(void *)(v15 + 376) = v64;
  *(void *)(v15 + 384) = v65;
  *(void *)(v15 + 392) = v32;
  *(void *)(v15 + 400) = v66;
  *(void *)(v15 + 408) = v67;
  id v61 = v37;
  outlined copy of ResolvedTextSuffix(v70, v71, v72, v64, v65, v32);
  swift_bridgeObjectRetain();
  swift_release();
  long long v84 = v93;
  long long v85 = v94;
  long long v86 = v95;
  long long v80 = v89;
  long long v81 = v90;
  long long v82 = v91;
  long long v83 = v92;
  uint64_t v77 = v59;
  char v78 = v58;
  uint64_t v87 = v96;
  long long v79 = v88;
  LOBYTE(v76) = v57;
  HIBYTE(v76) = v56;
  __int16 v75 = v69;
  v74[0] = v70;
  v74[1] = v71;
  v74[2] = v72;
  _OWORD v74[3] = v64;
  v74[4] = v65;
  v74[5] = v32;
  v74[6] = v66;
  uint64_t v73 = v67;
  id v60 = v39;
  outlined copy of ResolvedTextSuffix(v70, v71, v72, v64, v65, v32);
  swift_bridgeObjectRetain();
  uint64_t v45 = specialized ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, (long long *)&v77, a3, &v76, a5 & 1, &v75, (uint64_t)v74, a9, a10, a11, a12, (uint64_t)&v73, a13, a14);
  swift_beginAccess();
  int v46 = *(unsigned __int8 *)(v45 + 97);
  swift_retain();
  id v47 = _TextContainer(v46);
  if (one-time initialization token for lineFragmentPadding != -1) {
    swift_once();
  }
  objc_msgSend(v47, sel_setLineFragmentPadding_, *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding);
  objc_msgSend(v40, sel_setTextContainer_, v47);
  if ((v69 & 0x40) != 0)
  {
    uint64_t v48 = v70;
    uint64_t v49 = v71;
    char v50 = v72;
    uint64_t v51 = v64;
    uint64_t v52 = v65;
    uint64_t v53 = v32;
    goto LABEL_15;
  }
  if ((v32 >> 62) <= 1)
  {
    outlined consume of ResolvedTextSuffix(v70, v71, v72, v64, v65, v32);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    char v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0x8000000000000000;
LABEL_15:
    outlined consume of ResolvedTextSuffix(v48, v49, v50, v51, v52, v53);
    goto LABEL_16;
  }
  outlined consume of ResolvedTextSuffix(v70, v71, v72, v64, v65, v32);
  outlined consume of ResolvedTextSuffix(0, 0, 0, 0, 0, 0x8000000000000000);
  if ((v69 & 0x80) == 0)
  {
    uint64_t v55 = *(void *)(v67 + 16);
    swift_bridgeObjectRelease();
    if (!v55) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_16:
  swift_bridgeObjectRelease();
LABEL_17:
  _NSTextLayoutManagerRequiresCTLine(v40);
LABEL_18:
  swift_release();

  return v45;
}

id _TextContainer(int a1)
{
  uint64_t v1 = (Class *)&off_2651D3CF0;
  if (!a1) {
    uint64_t v1 = (Class *)0x263F81680;
  }
  id v2 = objc_alloc_init(*v1);

  return v2;
}

void _NSTextLayoutManagerRequiresCTLine(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    [v1 setRequiresCTLineRef:1];
  }
}

uint64_t type metadata accessor for ResolvedStyledText.TextLayoutManager.Delegate()
{
  return self;
}

uint64_t NSAttributedString.replacingLineBreakModes(_:)(uint64_t a1)
{
  uint64_t v13 = 0;
  if (one-time initialization token for kitParagraphStyle != -1) {
    swift_once();
  }
  uint64_t v3 = static NSAttributedStringKey.kitParagraphStyle;
  id v4 = objc_msgSend(v1, sel_length);
  uint64_t v5 = (void *)swift_allocObject();
  _OWORD v5[2] = a1;
  void v5[3] = &v13;
  v5[4] = v1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for closure #1 in NSAttributedString.replacingLineBreakModes(_:);
  *(void *)(v6 + 24) = v5;
  aBlock[4] = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_19;
  uint64_t v7 = _Block_copy(aBlock);
  id v8 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_enumerateAttribute_inRange_options_usingBlock_, v3, 0, v4, 0x100000, v7);
  _Block_release(v7);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v13;
    if (v13)
    {
      swift_release();
      return v10;
    }
    else
    {
      id v11 = v8;
      swift_release();
      return (uint64_t)v11;
    }
  }
  return result;
}

uint64_t type metadata accessor for ConcreteCustomTextAttachment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DynamicPreferenceCombiner<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t EnvironmentValues.init(_:tracker:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1) {
    uint64_t v6 = *(void *)(a1 + 64);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 16));
  *(void *)(v7 + 24) = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 16));
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a3 = a1;
  a3[1] = a2;
  return result;
}

uint64_t EnvironmentValues.accessibilityPrefersCrossFadeTransitions.getter()
{
  return EnvironmentValues.accessibilityEnabled.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

ValueMetadata *type metadata accessor for Image.TemplateRenderingMode()
{
  return &type metadata for Image.TemplateRenderingMode;
}

BOOL ViewRendererHost.isRootHost.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 16))();
  if (swift_weakLoadStrong())
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    swift_release();
    BOOL v3 = Strong == 0;
    swift_release();
  }
  else
  {
    swift_release();
    BOOL v3 = 1;
  }
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSAttributedStringKey()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

Swift::Void __swiftcall ViewTransform.UnsafeBuffer.appendTranslation(_:)(CGSize a1)
{
  CGFloat height = a1.height;
  CGFloat width = a1.width;
  if (a1.width != 0.0 || a1.height != 0.0)
  {
    type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for ViewTransform.UnsafeBuffer._VTable<TranslationElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type TranslationElement and conformance TranslationElement, (uint64_t)&unk_26FA5CC08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewTransform.UnsafeBuffer._VTable);
    uint64_t v5 = v4;
    uint64_t v6 = (CGFloat *)UnsafeHeterogeneousBuffer.allocate(bytes:)(32);
    *(void *)uint64_t v6 = v5;
    *((void *)v6 + 1) = 32;
    _OWORD v6[2] = width;
    v6[3] = height;
    if (!*(void *)v1)
    {
LABEL_12:
      __break(1u);
      return;
    }
    uint64_t v7 = (uint64_t)v6 - *(void *)v1;
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v7 <= 0x7FFFFFFF)
    {
      int v8 = *(_DWORD *)(v1 + 12);
      BOOL v9 = __OFADD__(v8, 1);
      int v10 = v8 + 1;
      if (!v9)
      {
        *(_DWORD *)(v1 + 12) = v10;
        return;
      }
      goto LABEL_11;
    }
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
}

double GeometryProxy.frame<A>(in:)(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *v4;
  int v8 = v4[1];
  int v9 = v4[2];
  a1.n128_u64[0] = *(void *)(v4 + 3);
  __n128 v26 = a1;
  uint64_t v10 = *(void *)(v4 + 5);
  uint64_t v11 = *(void *)(v4 + 7);
  uint64_t v12 = *(void *)(v4 + 9);
  uint64_t v13 = *(void *)(v4 + 11);
  specialized static Update.begin()();
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x263F288F8])
  {
    AGWeakAttributeGetAttribute();
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
    uint64_t v15 = *InputValue;
    uint64_t v14 = InputValue[1];
  }
  static Update.end()();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 8))(v37, a3, a4);
  specialized static Update.begin()();
  v36[0] = 0;
  v36[1] = 0;
  v36[2] = v15;
  v36[3] = v14;
  int v27 = v7;
  int v28 = v8;
  int v29 = v9;
  unint64_t v30 = v26.n128_u64[0];
  uint64_t v31 = v10;
  uint64_t v32 = v11;
  uint64_t v33 = v12;
  uint64_t v34 = v13;
  uint64_t v17 = GeometryProxy.placementContext.getter((uint64_t)&v35);
  MEMORY[0x270FA5388](v17);
  v25[2] = v36;
  v25[3] = v37;
  LOBYTE(v27) = v18;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_PositionAwarePlacementContextV_s5NeverOytTB5((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in GeometryProxy.rect(_:in:), (uint64_t)v25, v20, v21, v22, v19 | ((unint64_t)v18 << 32));
  double v23 = *(double *)v36;
  static Update.end()();
  outlined destroy of CoordinateSpace((uint64_t)v37);
  return v23;
}

void *_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_PositionAwarePlacementContextV_s5NeverOytTB5(void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x100000000) != 0) {
    return (void *)((a6 & 0x100000000uLL) >> 32);
  }
  v9[0] = a3;
  v9[1] = a4;
  void v9[2] = a5;
  int v10 = a6;
  uint64_t result = a1(&v11, v9);
  if (!v6) {
    return (void *)((a6 & 0x100000000uLL) >> 32);
  }
  return result;
}

uint64_t partial apply for closure #1 in GeometryProxy.rect(_:in:)(uint64_t a1)
{
  return partial apply for closure #1 in GeometryProxy.rect(_:in:)(a1);
}

{
  uint64_t v1;

  return specialized ViewTransformable.convert(from:to:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24), *(void *)(v1 + 24));
}

uint64_t _s7SwiftUI13GeometryProxyV4rect_2inSo6CGRectVAG_AA15CoordinateSpaceOtFyAA30_PositionAwarePlacementContextVXEfU_TA_0(uint64_t a1)
{
  return closure #1 in GeometryProxy.rect(_:in:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t specialized ViewTransformable.convert(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Inputuint64_t Value = AGGraphGetInputValue();
  double v7 = *(double *)InputValue;
  double v8 = *(double *)(InputValue + 8);
  double v9 = *(double *)(InputValue + 16);
  double v10 = *(double *)(InputValue + 24);
  double v11 = *(double *)(InputValue + 32);
  uint64_t v12 = AGGraphGetInputValue();
  double v13 = *(double *)v12;
  double v14 = *(double *)(v12 + 8);
  double v15 = v10 - (*(double *)v12 - v8);
  v17[0] = v7;
  v17[1] = v13;
  void v17[2] = v14;
  v17[3] = v15;
  v17[4] = v11 - (v14 - v9);
  return CGRect.convert(to:transform:)(a5, v17);
}

uint64_t protocol witness for CoordinateSpaceProtocol.coordinateSpace.getter in conformance NamedCoordinateSpace@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = outlined init with copy of CoordinateSpace.Name(v1, (uint64_t)v6);
  if (v8)
  {
    *(void *)a1 = *(void *)&v6[0];
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    long long v5 = v6[1];
    *(_OWORD *)a1 = v6[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = v7;
  }
  *(unsigned char *)(a1 + 40) = v4;
  return result;
}

double protocol witness for CoordinateSpaceProtocol.coordinateSpace.getter in conformance GlobalCoordinateSpace@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = 2;
  return result;
}

double GeometryProxy.safeAreaInsets.getter()
{
  int v1 = *((_DWORD *)v0 + 12);
  specialized static Update.begin()();
  long long v2 = v0[1];
  long long v12 = *v0;
  long long v13 = v2;
  long long v14 = v0[2];
  int v15 = v1;
  GeometryProxy.placementContext.getter((uint64_t)&v16);
  if (v20)
  {
    double v3 = 0.0;
  }
  else
  {
    int v4 = v19;
    double v3 = 0.0;
    if (v19 != *MEMORY[0x263F288F8])
    {
      unsigned int v6 = v17;
      unsigned int v5 = v18;
      unint64_t v7 = HIDWORD(v18);
      unsigned int v8 = v16;
      unint64_t v9 = HIDWORD(v17);
      unint64_t v10 = HIDWORD(v16);
      AGGraphGetInputValue();
      *(void *)&long long v12 = __PAIR64__(v10, v8);
      *((void *)&v12 + 1) = __PAIR64__(v9, v6);
      *(void *)&long long v13 = __PAIR64__(v7, v5);
      DWORD2(v13) = v4;
      double v3 = SafeAreaInsets.resolve(regions:in:)(-1, (int *)&v12);
    }
  }
  static Update.end()();
  return v3;
}

double GeometryProxy.bounds(of:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v5 = *(_DWORD *)(v2 + 48);
  long long v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)long long v14 = *(_OWORD *)v2;
  *(_OWORD *)&v14[16] = v6;
  *(_OWORD *)&v14[32] = *(_OWORD *)(v2 + 32);
  int v15 = v5;
  GeometryProxy.transform.getter((uint64_t)&v16);
  long long v11 = 0u;
  long long v12 = 0u;
  char v13 = 1;
  *(void *)long long v14 = v16;
  *(_OWORD *)&unsigned char v14[8] = v17;
  *(_OWORD *)&v14[24] = v18;
  _OWORD v10[2] = &v11;
  void v10[3] = a1;
  ViewTransform.forEach(inverted:_:)(0, (void (*)(double *, char *))partial apply for closure #1 in ViewTransform.containingSizedCoordinateSpace(name:), (uint64_t)v10);
  swift_release();
  char v7 = v13;
  double result = *(double *)&v11;
  long long v9 = v12;
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 32) = v7;
  return result;
}

uint64_t GeometryProxy.transform.getter@<X0>(uint64_t a1@<X8>)
{
  specialized static Update.begin()();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8]
    || (int v2 = *MEMORY[0x263F288F8], AGWeakAttributeGetAttribute() == v2))
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    AGWeakAttributeGetAttribute();
    Inputuint64_t Value = AGGraphGetInputValue();
    double v4 = *(double *)(InputValue + 8);
    double v5 = *(double *)(InputValue + 16);
    double v6 = *(double *)(InputValue + 24);
    double v7 = *(double *)(InputValue + 32);
    *(void *)a1 = *(void *)InputValue;
    uint64_t v8 = AGGraphGetInputValue();
    double v9 = *(double *)v8;
    double v10 = *(double *)(v8 + 8);
    *(double *)(a1 + 24) = v6 - (*(double *)v8 - v4);
    *(double *)(a1 + 32) = v7 - (v10 - v5);
    *(double *)(a1 + 8) = v9;
    *(double *)(a1 + 16) = v10;
    swift_retain();
  }

  return static Update.end()();
}

void ViewTransform.UnsafeBuffer.appendProjectionTransform(_:inverse:)(CGFloat *a1, char a2)
{
  CGFloat v5 = *a1;
  CGFloat v4 = a1[1];
  double v7 = a1[2];
  CGFloat v6 = a1[3];
  CGFloat v8 = a1[4];
  double v9 = a1[5];
  CGFloat v11 = a1[6];
  CGFloat v10 = a1[7];
  double v12 = a1[8];
  if (v7 == 0.0 && v9 == 0.0 && v12 == 1.0)
  {
    _.a = *a1;
    _.b = v4;
    _.c = v6;
    _.d = v8;
    _.tCGFloat x = v11;
    _.tCGFloat y = v10;
    ViewTransform.UnsafeBuffer.appendAffineTransform(_:inverse:)(&_, a2 & 1);
    return;
  }
  uint64_t v21 = *((void *)a1 + 7);
  type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for ViewTransform.UnsafeBuffer._VTable<ProjectionTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement, (uint64_t)&type metadata for ProjectionTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewTransform.UnsafeBuffer._VTable);
  uint64_t v15 = v14;
  uint64_t v16 = UnsafeHeterogeneousBuffer.allocate(bytes:)(96);
  *(void *)uint64_t v16 = v15;
  *(void *)(v16 + 8) = 96;
  *(CGFloat *)(v16 + 16) = v5;
  *(CGFloat *)(v16 + 24) = v4;
  *(double *)(v16 + 32) = v7;
  *(CGFloat *)(v16 + 40) = v6;
  *(CGFloat *)(v16 + 48) = v8;
  *(double *)(v16 + 56) = v9;
  *(CGFloat *)(v16 + 64) = v11;
  *(void *)(v16 + 72) = v21;
  *(double *)(v16 + 80) = v12;
  *(unsigned char *)(v16 + 88) = a2 & 1;
  if (!*(void *)v2) {
    goto LABEL_16;
  }
  uint64_t v17 = v16 - *(void *)v2;
  if (v17 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v17 <= 0x7FFFFFFF)
  {
    int v18 = *(_DWORD *)(v2 + 12);
    BOOL v19 = __OFADD__(v18, 1);
    int v20 = v18 + 1;
    if (!v19)
    {
      *(_DWORD *)(v2 + 12) = v20;
      return;
    }
    goto LABEL_15;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
}

Swift::Void __swiftcall ViewTransform.UnsafeBuffer.appendAffineTransform(_:inverse:)(CGAffineTransform *_, Swift::Bool inverse)
{
  LOBYTE(v3) = inverse;
  CGFloat a = _->a;
  double b = _->b;
  double c = _->c;
  double d = _->d;
  tCGFloat x = _->tx;
  tCGFloat y = _->ty;
  if (_->a != 1.0 || b != 0.0) {
    goto LABEL_18;
  }
  if (c != 0.0 || d != 1.0) {
    goto LABEL_18;
  }
  if (inverse)
  {
    tCGFloat x = -tx;
    tCGFloat y = -ty;
  }
  if (tx != 0.0 || ty != 0.0)
  {
    type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for ViewTransform.UnsafeBuffer._VTable<TranslationElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type TranslationElement and conformance TranslationElement, (uint64_t)&unk_26FA5CC08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewTransform.UnsafeBuffer._VTable);
    uint64_t v3 = v11;
    uint64_t v12 = UnsafeHeterogeneousBuffer.allocate(bytes:)(32);
    *(void *)uint64_t v12 = v3;
    *(void *)(v12 + 8) = 32;
    *(double *)(v12 + 16) = tx;
    *(double *)(v12 + 24) = ty;
    if (!*(void *)v2)
    {
LABEL_30:
      __break(1u);
      return;
    }
    uint64_t v13 = v12 - *(void *)v2;
    if (v13 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_27;
    }
    if (v13 > 0x7FFFFFFF)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    int v14 = *(_DWORD *)(v2 + 12);
    v2 += 12;
    int v15 = v14 + 1;
    if (!__OFADD__(v14, 1)) {
      goto LABEL_22;
    }
    __break(1u);
LABEL_18:
    type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for ViewTransform.UnsafeBuffer._VTable<AffineTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement, (uint64_t)&type metadata for AffineTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewTransform.UnsafeBuffer._VTable);
    uint64_t v17 = v16;
    uint64_t v18 = UnsafeHeterogeneousBuffer.allocate(bytes:)(80);
    *(void *)uint64_t v18 = v17;
    *(void *)(v18 + 8) = 80;
    *(CGFloat *)(v18 + 16) = a;
    *(double *)(v18 + 24) = b;
    *(double *)(v18 + 32) = c;
    *(double *)(v18 + 40) = d;
    *(double *)(v18 + 48) = tx;
    *(double *)(v18 + 56) = ty;
    *(unsigned char *)(v18 + 64) = v3 & 1;
    if (!*(void *)v2)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v19 = v18 - *(void *)v2;
    if (v19 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v19 <= 0x7FFFFFFF)
    {
      int v20 = *(_DWORD *)(v2 + 12);
      v2 += 12;
      int v15 = v20 + 1;
      if (!__OFADD__(v20, 1))
      {
LABEL_22:
        *(_DWORD *)uint64_t v2 = v15;
        return;
      }
      goto LABEL_26;
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
}

uint64_t ViewTransform.appendSizedSpace(name:size:)(uint64_t a1, double a2, double a3)
{
  outlined init with copy of AnyHashable(a1, (uint64_t)v17);
  double v18 = a2;
  double v19 = a3;
  uint64_t v6 = *v3;
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  outlined init with copy of SizedSpaceElement((uint64_t)v17, (uint64_t)v15);
  type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for Element<SizedSpaceElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizedSpaceElement and conformance SizedSpaceElement, (uint64_t)&unk_26FA58110, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 32) = v7;
  *(void *)(v9 + 40) = v8;
  long long v10 = v15[1];
  *(_OWORD *)(v9 + 48) = v15[0];
  *(_OWORD *)(v9 + 64) = v10;
  *(_OWORD *)(v9 + 80) = v15[2];
  *(void *)(v9 + 96) = v16;
  *(void *)(v9 + 16) = v6;
  if (v6)
  {
    uint64_t v11 = *(void *)(v6 + 24);
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (!v12) {
      goto LABEL_6;
    }
    __break(1u);
  }
  uint64_t v13 = 1;
LABEL_6:
  *(void *)(v9 + 24) = v13;
  *uint64_t v3 = v9;
  v3[3] = 0;
  v3[4] = 0;
  return outlined destroy of CodableEffectAnimation((uint64_t)v17);
}

Swift::Void __swiftcall ViewTransform.appendSizedSpace(id:size:)(SwiftUI::CoordinateSpace::ID id, CGSize size)
{
  CGFloat height = size.height;
  CGFloat width = size.width;
  uint64_t v5 = *(void *)id.value.value;
  uint64_t v6 = *v2;
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  type metadata accessor for Element<ProjectionTransformElement>(0, (unint64_t *)&lazy cache variable for type metadata for Element<SizedSpaceIDElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizedSpaceIDElement and conformance SizedSpaceIDElement, (uint64_t)&type metadata for SizedSpaceIDElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t v9 = (CGFloat *)swift_allocObject();
  *((void *)v9 + 4) = v7;
  *((void *)v9 + 5) = v8;
  *((void *)v9 + 6) = v5;
  v9[7] = width;
  unsigned char v9[8] = height;
  *((void *)v9 + 2) = v6;
  if (v6)
  {
    uint64_t v10 = *((void *)v6 + 3);
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (!v11) {
      goto LABEL_6;
    }
    __break(1u);
  }
  uint64_t v12 = 1;
LABEL_6:
  *((void *)v9 + 3) = v12;
  *uint64_t v2 = v9;
  v2[3] = 0;
  v2[4] = 0;
}

uint64_t ViewTransform.UnsafeBuffer.appendScrollGeometry(_:isClipped:)(long long *a1, char a2)
{
  long long v18 = *a1;
  long long v16 = a1[2];
  long long v17 = a1[1];
  long long v14 = a1[4];
  long long v15 = a1[3];
  long long v13 = a1[5];
  uint64_t v4 = *((void *)a1 + 12);
  uint64_t v5 = *((void *)a1 + 13);
  type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for ViewTransform.UnsafeBuffer._VTable<ViewTransform.ScrollGeometryItem>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem, (uint64_t)&type metadata for ViewTransform.ScrollGeometryItem, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewTransform.UnsafeBuffer._VTable);
  uint64_t v7 = v6;
  uint64_t result = UnsafeHeterogeneousBuffer.allocate(bytes:)(144);
  *(void *)uint64_t result = v7;
  *(void *)(result + 8) = 144;
  *(_OWORD *)(result + 16) = v18;
  *(_OWORD *)(result + 32) = v17;
  *(_OWORD *)(result + 48) = v16;
  *(_OWORD *)(result + 64) = v15;
  *(_OWORD *)(result + 80) = v14;
  *(_OWORD *)(result + 96) = v13;
  *(void *)(result + 112) = v4;
  *(void *)(result + 120) = v5;
  *(unsigned char *)(result + 128) = a2;
  if (!*(void *)v2) {
    goto LABEL_9;
  }
  uint64_t v9 = result - *(void *)v2;
  if (v9 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v9 <= 0x7FFFFFFF)
  {
    int v10 = *(_DWORD *)(v2 + 12);
    BOOL v11 = __OFADD__(v10, 1);
    int v12 = v10 + 1;
    if (!v11)
    {
      *(_DWORD *)(v2 + 12) = v12;
      return result;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ViewTransform.UnsafeBuffer.appendCoordinateSpace(id:)(SwiftUI::CoordinateSpace::ID id)
{
  uint64_t v2 = *(void *)id.value.value;
  type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for ViewTransform.UnsafeBuffer._VTable<CoordinateSpaceIDElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type CoordinateSpaceIDElement and conformance CoordinateSpaceIDElement, (uint64_t)&unk_26FA6ACC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewTransform.UnsafeBuffer._VTable);
  uint64_t v4 = v3;
  uint64_t v5 = (void *)UnsafeHeterogeneousBuffer.allocate(bytes:)(32);
  void *v5 = v4;
  v5[1] = 32;
  _OWORD v5[2] = v2;
  if (!*(void *)v1) {
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t)v5 - *(void *)v1;
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v6 <= 0x7FFFFFFF)
  {
    int v7 = *(_DWORD *)(v1 + 12);
    BOOL v8 = __OFADD__(v7, 1);
    int v9 = v7 + 1;
    if (!v8)
    {
      *(_DWORD *)(v1 + 12) = v9;
      return;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  __break(1u);
}

Swift::Void __swiftcall ViewTransform.UnsafeBuffer.appendSizedSpace(id:size:)(SwiftUI::CoordinateSpace::ID id, CGSize size)
{
  CGFloat height = size.height;
  CGFloat width = size.width;
  uint64_t v5 = *(void *)id.value.value;
  type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for ViewTransform.UnsafeBuffer._VTable<SizedSpaceIDElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizedSpaceIDElement and conformance SizedSpaceIDElement, (uint64_t)&type metadata for SizedSpaceIDElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewTransform.UnsafeBuffer._VTable);
  uint64_t v7 = v6;
  BOOL v8 = (CGFloat *)UnsafeHeterogeneousBuffer.allocate(bytes:)(48);
  *(void *)BOOL v8 = v7;
  *((void *)v8 + 1) = 48;
  *((void *)v8 + 2) = v5;
  void v8[3] = width;
  void v8[4] = height;
  if (!*(void *)v2) {
    goto LABEL_9;
  }
  uint64_t v9 = (uint64_t)v8 - *(void *)v2;
  if (v9 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v9 <= 0x7FFFFFFF)
  {
    int v10 = *(_DWORD *)(v2 + 12);
    BOOL v11 = __OFADD__(v10, 1);
    int v12 = v10 + 1;
    if (!v11)
    {
      *(_DWORD *)(v2 + 12) = v12;
      return;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  __break(1u);
}

void type metadata accessor for Element<ProjectionTransformElement>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined destroy of CodableEffectAnimation(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of SizedSpaceElement(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  return a2;
}

uint64_t type metadata accessor for ViewTransform.UnsafeBuffer._VTable()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem;
  if (!lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem;
  if (!lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceIDElement and conformance CoordinateSpaceIDElement()
{
  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceIDElement and conformance CoordinateSpaceIDElement;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceIDElement and conformance CoordinateSpaceIDElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceIDElement and conformance CoordinateSpaceIDElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceIDElement and conformance CoordinateSpaceIDElement;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceIDElement and conformance CoordinateSpaceIDElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceIDElement and conformance CoordinateSpaceIDElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TranslationElement and conformance TranslationElement()
{
  unint64_t result = lazy protocol witness table cache variable for type TranslationElement and conformance TranslationElement;
  if (!lazy protocol witness table cache variable for type TranslationElement and conformance TranslationElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranslationElement and conformance TranslationElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TranslationElement and conformance TranslationElement;
  if (!lazy protocol witness table cache variable for type TranslationElement and conformance TranslationElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranslationElement and conformance TranslationElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SizedSpaceElement and conformance SizedSpaceElement()
{
  unint64_t result = lazy protocol witness table cache variable for type SizedSpaceElement and conformance SizedSpaceElement;
  if (!lazy protocol witness table cache variable for type SizedSpaceElement and conformance SizedSpaceElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizedSpaceElement and conformance SizedSpaceElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SizedSpaceElement and conformance SizedSpaceElement;
  if (!lazy protocol witness table cache variable for type SizedSpaceElement and conformance SizedSpaceElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizedSpaceElement and conformance SizedSpaceElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement()
{
  unint64_t result = lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement;
  if (!lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement;
  if (!lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement);
  }
  return result;
}

double ViewTransform.nearestScrollGeometry.getter@<D0>(void (*a1)(void, uint64_t *, long long *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  long long v20 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  char v21 = 1;
  uint64_t v11 = v4;
  long long v5 = *(_OWORD *)(v2 + 3);
  long long v12 = *(_OWORD *)(v2 + 1);
  long long v13 = v5;
  a1(0, &v11, &v14);
  char v6 = v21;
  long long v7 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v7;
  long long v8 = v17;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 48) = v8;
  long long v9 = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = v9;
  double result = *(double *)&v20;
  *(_OWORD *)(a2 + 96) = v20;
  *(unsigned char *)(a2 + 112) = v6;
  return result;
}

uint64_t GeometryProxy.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = &v16[-v9];
  int v11 = *((_DWORD *)v3 + 12);
  specialized static Update.begin()();
  long long v12 = v3[1];
  long long v19 = *v3;
  long long v20 = v12;
  long long v21 = v3[2];
  int v22 = v11;
  GeometryProxy.placementContext.getter((uint64_t)&v23);
  long long v19 = v23;
  *(void *)&long long v20 = v24;
  DWORD2(v20) = v25;
  BYTE12(v20) = v26;
  uint64_t v17 = a2;
  uint64_t v18 = a1;
  type metadata accessor for _PositionAwarePlacementContext?();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in GeometryProxy.subscript.getter, (uint64_t)v16, MEMORY[0x263F8E628], a2, v13, (uint64_t)v10);
  uint64_t v14 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, a2) == 1)
  {
    Anchor.defaultValue.getter(a1);
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v14 + 32))(a3, v10, a2);
  }
  return static Update.end()();
}

uint64_t GeometryProxy.frameClippedToScrollViews(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v5 = *v2;
  int v6 = v2[1];
  int v7 = v2[2];
  uint64_t v27 = *(void *)(v2 + 3);
  uint64_t v8 = *(void *)(v2 + 5);
  uint64_t v9 = *(void *)(v2 + 7);
  uint64_t v10 = *(void *)(v2 + 9);
  uint64_t v11 = *(void *)(v2 + 11);
  specialized static Update.begin()();
  specialized static Update.begin()();
  CGFloat height = 0.0;
  CGFloat width = 0.0;
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x263F288F8])
  {
    AGWeakAttributeGetAttribute();
    Inputuint64_t Value = AGGraphGetInputValue();
    CGFloat width = *(double *)InputValue;
    CGFloat height = *(double *)(InputValue + 8);
  }
  static Update.end()();
  v40.origin.CGFloat x = 0.0;
  v40.origin.CGFloat y = 0.0;
  v40.size.CGFloat width = width;
  v40.size.CGFloat height = height;
  v29[0] = v5;
  v29[1] = v6;
  id v29[2] = v7;
  uint64_t v30 = v27;
  uint64_t v31 = v8;
  uint64_t v32 = v9;
  uint64_t v33 = v10;
  uint64_t v34 = v11;
  GeometryProxy.placementContext.getter((uint64_t)v36);
  if (BYTE4(v37))
  {
    BOOL v15 = 1;
    CGFloat y = 0.0;
    CGFloat x = 0.0;
  }
  else
  {
    uint64_t v18 = AGGraphGetInputValue();
    double v19 = *(double *)v18;
    double v20 = *(double *)(v18 + 8);
    double v21 = *(double *)(v18 + 16);
    double v22 = *(double *)(v18 + 24);
    double v28 = *(double *)(v18 + 32);
    long long v23 = (double *)AGGraphGetInputValue();
    double v25 = *v23;
    double v24 = v23[1];
    CGFloat y = 0.0;
    swift_retain();
    v41.origin.CGFloat x = 0.0;
    v41.origin.CGFloat y = 0.0;
    v41.size.CGFloat width = width;
    v41.size.CGFloat height = height;
    if (CGRectIsNull(v41)
      || (v42.origin.x = 0.0, v42.origin.CGFloat y = 0.0,
                              v42.size.CGFloat width = width,
                              v42.size.CGFloat height = height,
                              CGRectIsInfinite(v42)))
    {
      swift_release();
      BOOL v15 = 1;
      CGFloat x = 0.0;
    }
    else
    {
      BOOL v39 = 0;
      v36[0] = v19;
      v36[1] = v25;
      v36[2] = v24;
      double v37 = v22 - (v25 - v20);
      double v38 = v28 - (v24 - v21);
      outlined init with copy of CoordinateSpace(a1, (uint64_t)v29);
      char v35 = 2;
      specialized ViewTransform.convert(_:_:)((uint64_t)v29, v36, &v40, &v39);
      outlined destroy of ViewTransform.Conversion((uint64_t)v29);
      swift_release();
      BOOL v15 = !v39;
      CGFloat x = v40.origin.x;
      CGFloat y = v40.origin.y;
      CGFloat width = v40.size.width;
      CGFloat height = v40.size.height;
    }
  }
  uint64_t result = static Update.end()();
  *(CGFloat *)a2 = x;
  *(CGFloat *)(a2 + 8) = y;
  *(CGFloat *)(a2 + 16) = width;
  *(CGFloat *)(a2 + 24) = height;
  *(unsigned char *)(a2 + 32) = v15;
  return result;
}

BOOL CGRect.convertAndClipToScrollView(to:transform:)(uint64_t a1, double *a2)
{
  double v4 = *a2;
  double v5 = a2[1];
  double v6 = a2[2];
  double v7 = a2[3];
  double v8 = a2[4];
  CGFloat x = v2->origin.x;
  CGFloat y = v2->origin.y;
  CGFloat width = v2->size.width;
  CGFloat height = v2->size.height;
  v18.origin.CGFloat x = v2->origin.x;
  v18.origin.CGFloat y = y;
  v18.size.CGFloat width = width;
  v18.size.CGFloat height = height;
  if (CGRectIsNull(v18)) {
    return 1;
  }
  v19.origin.CGFloat x = x;
  v19.origin.CGFloat y = y;
  v19.size.CGFloat width = width;
  v19.size.CGFloat height = height;
  if (CGRectIsInfinite(v19))
  {
    return 1;
  }
  else
  {
    BOOL v17 = 0;
    v16[0] = v4;
    v16[1] = v5;
    _OWORD v16[2] = v6;
    v16[3] = v7;
    v16[4] = v8;
    outlined init with copy of CoordinateSpace(a1, (uint64_t)v15);
    v15[89] = 2;
    specialized ViewTransform.convert(_:_:)((uint64_t)v15, v16, v2, &v17);
    outlined destroy of ViewTransform.Conversion((uint64_t)v15);
    return !v17;
  }
}

uint64_t specialized ViewTransform.convert(_:_:)(uint64_t result, double *a2, CGRect *a3, BOOL *a4)
{
  double v6 = *a2;
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v8 = *((void *)a2 + 2);
  double v9 = a2[3];
  double v10 = a2[4];
  if (!*(void *)a2 && v9 == 0.0 && v10 == 0.0) {
    return result;
  }
  outlined init with copy of ViewTransform.Conversion(result, (uint64_t)v38);
  outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
  if (v36 != 4)
  {
    outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
    goto LABEL_24;
  }
  outlined init with take of CoordinateSpace((uint64_t)&v28, (uint64_t)&v23);
  outlined init with take of CoordinateSpace((uint64_t)&v32, (uint64_t)v37);
  outlined init with copy of CoordinateSpace((uint64_t)&v23, (uint64_t)&v28);
  outlined init with copy of CoordinateSpace((uint64_t)v37, (uint64_t)&v32);
  if (v31 == 2 && *(void *)&v28 == 1)
  {
    int8x16_t v11 = vorrq_s8(v29, v30);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))
    {
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      outlined init with take of CoordinateSpace((uint64_t)v37, (uint64_t)v38);
      char v39 = 2;
      long long v12 = &v32;
LABEL_23:
      outlined destroy of CoordinateSpace((uint64_t)v12);
      goto LABEL_24;
    }
  }
  if (v35 == 2 && v32 == 1)
  {
    int8x16_t v13 = vorrq_s8(v33, v34);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))
    {
      outlined destroy of CoordinateSpace((uint64_t)v37);
      outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      outlined init with take of CoordinateSpace((uint64_t)&v23, (uint64_t)v38);
      char v39 = 3;
LABEL_22:
      long long v12 = (uint64_t *)&v28;
      goto LABEL_23;
    }
  }
  outlined init with copy of CoordinateSpace((uint64_t)&v28, (uint64_t)v22);
  if (one-time initialization token for root != -1) {
    swift_once();
  }
  char v14 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v22);
  if (v14)
  {
    outlined destroy of CoordinateSpace((uint64_t)&v23);
    outlined destroy of ViewTransform.Conversion((uint64_t)v38);
    outlined init with take of CoordinateSpace((uint64_t)v37, (uint64_t)v38);
    char v39 = 0;
LABEL_21:
    outlined destroy of CoordinateSpace((uint64_t)&v32);
    goto LABEL_22;
  }
  outlined init with copy of CoordinateSpace((uint64_t)&v32, (uint64_t)v22);
  char v15 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v37);
  if (v15)
  {
    outlined destroy of ViewTransform.Conversion((uint64_t)v38);
    outlined init with take of CoordinateSpace((uint64_t)&v23, (uint64_t)v38);
    char v39 = 1;
    goto LABEL_21;
  }
  outlined destroy of CoordinateSpace((uint64_t)&v23);
  outlined destroy of (CoordinateSpace, CoordinateSpace)((uint64_t)&v28, &lazy cache variable for type metadata for (CoordinateSpace, CoordinateSpace));
LABEL_24:
  char v27 = 0;
  outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
  switch(v36)
  {
    case 1:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (v26 == 2 && v23 == 1)
      {
        int8x16_t v17 = vorrq_s8(v24, v25);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))) {
          goto LABEL_42;
        }
      }
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      goto LABEL_40;
    case 2:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (v26 == 2 && v23 == 1)
      {
        int8x16_t v18 = vorrq_s8(v24, v25);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL))) {
          goto LABEL_36;
        }
      }
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      goto LABEL_42;
    case 3:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (one-time initialization token for root != -1) {
        swift_once();
      }
      char v19 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)&v23);
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      if ((v19 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_42;
    case 4:
LABEL_40:
      outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
      goto LABEL_43;
    default:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (one-time initialization token for root != -1) {
        swift_once();
      }
      char v16 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)&v23);
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      if (v16)
      {
LABEL_36:
        outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
      }
      else
      {
LABEL_42:
        outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
        char v27 = 1;
LABEL_43:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
        switch(v36)
        {
          case 0:
          case 3:
            outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
            char v20 = 0;
            break;
          case 1:
          case 2:
            outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
            char v20 = 1;
            break;
          case 4:
            outlined init with take of CoordinateSpace((uint64_t)&v28, (uint64_t)&v23);
            outlined init with take of CoordinateSpace((uint64_t)&v32, (uint64_t)v37);
            *(double *)double v22 = v6;
            v22[1] = v7;
            void v22[2] = v8;
            *(double *)&v22[3] = v9;
            *(double *)&v22[4] = v10;
            char v21 = ViewTransform.spaceBeforeSpace(_:_:)((uint64_t)&v23, (uint64_t)v37);
            outlined destroy of CoordinateSpace((uint64_t)v37);
            outlined destroy of CoordinateSpace((uint64_t)&v23);
            char v20 = v21 ^ 1;
            break;
          default:
            JUMPOUT(0);
        }
        double v28 = v6;
        v29.i64[0] = v7;
        v29.i64[1] = v8;
        *(double *)v30.i64 = v9;
        *(double *)&v30.i64[1] = v10;
        specialized ViewTransform.forEach(inverted:_:)(v20 & 1, (uint64_t)&v28, (uint64_t)v38, &v27, a3, a4);
      }
      uint64_t result = outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      break;
  }
  return result;
}

uint64_t GeometryProxy.placementContext.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    uint64_t result = AGWeakAttributeGetAttribute();
    int v3 = *MEMORY[0x263F288F8];
    if (result == *MEMORY[0x263F288F8]) {
      goto LABEL_12;
    }
    unsigned int v4 = result;
    uint64_t result = AGWeakAttributeGetAttribute();
    if (result == v3
      || (v5 = result, uint64_t result = AGWeakAttributeGetAttribute(), result == v3)
      || (v6 = result, uint64_t result = AGWeakAttributeGetAttribute(), result == v3)
      || (v7 = result, uint64_t result = AGWeakAttributeGetAttribute(), result == v3))
    {
LABEL_12:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 28) = 1;
    }
    else
    {
      uint64_t v8 = result;
      uint64_t result = AGWeakAttributeGetAttribute();
      *(void *)a1 = v4 | ((unint64_t)v4 << 32);
      *(void *)(a1 + 8) = v5 | (unint64_t)(v6 << 32);
      *(void *)(a1 + 16) = v7 | (unint64_t)(v8 << 32);
      *(_DWORD *)(a1 + 24) = result;
      *(unsigned char *)(a1 + 28) = 0;
    }
  }
  return result;
}

uint64_t ViewTransform.forEach(inverted:_:)(uint64_t result, void (*a2)(double *, char *), uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(void **)v3;
  if (*(void *)v3)
  {
    double v8 = *(double *)(v3 + 24);
    double v7 = *(double *)(v3 + 32);
    char v25 = 0;
    if (result)
    {
      if (v8 == 0.0 && v7 == 0.0)
      {
        swift_retain();
LABEL_22:
        uint64_t v17 = v4[2];
        (*(void (**)(uint64_t, char *, void (*)(double *, char *), uint64_t))(*v4 + 104))(1, &v25, a2, a3);
        while ((v25 & 1) == 0 && v17)
        {
          uint64_t v18 = v17;
          uint64_t v17 = *(void *)(v17 + 16);
          (*(void (**)(uint64_t, char *, void (*)(double *, char *), uint64_t))(*(void *)v18
                                                                                                  + 104))(1, &v25, a2, a3);
        }
        return swift_release();
      }
      double v26 = -v8;
      double v27 = -v7;
      char v28 = 0;
      swift_retain();
      a2(&v26, &v25);
      outlined destroy of ViewTransform.Item((uint64_t)&v26);
      if ((v25 & 1) == 0) {
        goto LABEL_22;
      }
      return swift_release();
    }
    uint64_t v9 = v4[3];
    if (v9 < 0)
    {
      __break(1u);
    }
    else if (!((unint64_t)(v9 + 0x1000000000000000) >> 61))
    {
      uint64_t isStackAllocationSafe = swift_retain();
      if (8 * v9 <= 1024
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
      {
        v11.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
        int8x16_t v13 = &v24[-v12];
        *(void *)&v24[-v12] = v4;
        uint64_t v14 = v4[2];
        if (v14)
        {
          char v15 = v13 + 8;
          do
          {
            *v15++ = v14;
            uint64_t v14 = *(void *)(v14 + 16);
          }
          while (v14);
        }
        if (v9)
        {
          (*(void (**)(void, char *, void (*)(double *, char *), uint64_t, __n128))(**(void **)&v13[8 * v9 - 8] + 104))(0, &v25, a2, a3, v11);
          if ((v25 & 1) != 0 || v9 == 1)
          {
            if (v25) {
              return swift_release();
            }
          }
          else
          {
            (*(void (**)(void, char *, void (*)(double *, char *), uint64_t))(**(void **)&v13[8 * v9 - 16] + 104))(0, &v25, a2, a3);
            if (v25) {
              return swift_release();
            }
            char v16 = v13 - 24;
            while (v9 != 2)
            {
              (*(void (**)(void, char *, void (*)(double *, char *), uint64_t))(**(void **)&v16[8 * v9--] + 104))(0, &v25, a2, a3);
              if (v25 == 1) {
                return swift_release();
              }
            }
          }
        }
        goto LABEL_42;
      }
      char v19 = (void *)swift_slowAlloc();
      char v20 = v19;
      *char v19 = v4;
      uint64_t v21 = v4[2];
      if (v21)
      {
        double v22 = v19 + 1;
        do
        {
          *v22++ = v21;
          uint64_t v21 = *(void *)(v21 + 16);
        }
        while (v21);
      }
      if (v9)
      {
        (*(void (**)(void, char *, void (*)(double *, char *), uint64_t))(*(void *)v19[v9 - 1]
                                                                                               + 104))(0, &v25, a2, a3);
        char v23 = v25;
        if ((v25 & 1) != 0 || v9 == 1)
        {
          MEMORY[0x24C527CC0](v20, -1, -1);
          if (v23) {
            return swift_release();
          }
LABEL_42:
          if (v8 != 0.0 || v7 != 0.0)
          {
            double v26 = v8;
            double v27 = v7;
            char v28 = 0;
            ((void (*)(double *, char *, __n128))a2)(&v26, &v25, v11);
            outlined destroy of ViewTransform.Item((uint64_t)&v26);
          }
          return swift_release();
        }
        (*(void (**)(void, char *, void (*)(double *, char *), uint64_t))(*(void *)v20[v9 - 2]
                                                                                               + 104))(0, &v25, a2, a3);
        if (v25)
        {
LABEL_37:
          MEMORY[0x24C527CC0](v20, -1, -1);
          return swift_release();
        }
        while (v9 != 2)
        {
          (*(void (**)(void, char *, void (*)(double *, char *), uint64_t))(*(void *)v20[v9-- - 3]
                                                                                                 + 104))(0, &v25, a2, a3);
          if (v25) {
            goto LABEL_37;
          }
        }
      }
      MEMORY[0x24C527CC0](v20, -1, -1);
      goto LABEL_42;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized ViewTransform.forEach(inverted:_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v25 = a3;
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    double v6 = *(double *)(a2 + 24);
    double v5 = *(double *)(a2 + 32);
    char v23 = 0;
    if (result)
    {
      if (v6 == 0.0 && v5 == 0.0)
      {
        swift_retain();
      }
      else
      {
        double v26 = -v6;
        double v27 = -v5;
        char v28 = 0;
        swift_retain();
        ViewTransform.Item.apply(to:allowUnclipped:)(a3, 0);
        outlined destroy of ViewTransform.Item((uint64_t)&v26);
      }
      uint64_t v15 = v3[2];
      (*(void (**)(uint64_t, char *, void (*)(), unsigned char *))(*v3 + 104))(1, &v23, partial apply for closure #1 in ViewTransform.containingScrollGeometry.getter, v24);
      while ((v23 & 1) == 0 && v15)
      {
        uint64_t v16 = v15;
        uint64_t v15 = *(void *)(v15 + 16);
        (*(void (**)(uint64_t, char *, void (*)(), unsigned char *))(*(void *)v16 + 104))(1, &v23, partial apply for closure #1 in ViewTransform.containingScrollGeometry.getter, v24);
      }
      return swift_release();
    }
    uint64_t v7 = v3[3];
    if (v7 < 0)
    {
      __break(1u);
    }
    else if (!((unint64_t)(v7 + 0x1000000000000000) >> 61))
    {
      uint64_t isStackAllocationSafe = swift_retain();
      if (8 * v7 < 1025
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v9.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
        __n128 v11 = &v22[-v10];
        *(void *)&v22[-v10] = v3;
        uint64_t v12 = v3[2];
        if (v12)
        {
          int8x16_t v13 = v11 + 8;
          do
          {
            *v13++ = v12;
            uint64_t v12 = *(void *)(v12 + 16);
          }
          while (v12);
        }
        if (v7)
        {
          (*(void (**)(void, char *, void (*)(), unsigned char *, __n128))(**(void **)&v11[8 * v7 - 8] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.containingScrollGeometry.getter, v24, v9);
          if ((v23 & 1) == 0 && v7 != 1)
          {
            (*(void (**)(void, char *, void (*)(), unsigned char *))(**(void **)&v11[8 * v7 - 16] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.containingScrollGeometry.getter, v24);
            if ((v23 & 1) == 0)
            {
              uint64_t v14 = v11 - 24;
              while (v7 != 2)
              {
                (*(void (**)(void, char *, void (*)(), unsigned char *))(**(void **)&v14[8 * v7--] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.containingScrollGeometry.getter, v24);
                if (v23) {
                  return swift_release();
                }
              }
              goto LABEL_42;
            }
            return swift_release();
          }
          if (v23) {
            return swift_release();
          }
        }
LABEL_42:
        if (v6 != 0.0 || v5 != 0.0)
        {
          double v26 = v6;
          double v27 = v5;
          char v28 = 0;
          ViewTransform.Item.apply(to:allowUnclipped:)(a3, 0);
          outlined destroy of ViewTransform.Item((uint64_t)&v26);
        }
        return swift_release();
      }
      uint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v18 = v17;
      *uint64_t v17 = v3;
      uint64_t v19 = v3[2];
      if (v19)
      {
        char v20 = v17 + 1;
        do
        {
          *v20++ = v19;
          uint64_t v19 = *(void *)(v19 + 16);
        }
        while (v19);
      }
      if (v7)
      {
        (*(void (**)(void, char *, void (*)(), unsigned char *))(*(void *)v17[v7 - 1] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.containingScrollGeometry.getter, v24);
        char v21 = v23;
        if ((v23 & 1) != 0 || v7 == 1)
        {
          MEMORY[0x24C527CC0](v18, -1, -1);
          if (v21) {
            return swift_release();
          }
          goto LABEL_42;
        }
        (*(void (**)(void, char *, void (*)(), unsigned char *))(*(void *)v18[v7 - 2] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.containingScrollGeometry.getter, v24);
        if (v23)
        {
LABEL_37:
          MEMORY[0x24C527CC0](v18, -1, -1);
          return swift_release();
        }
        while (v7 != 2)
        {
          (*(void (**)(void, char *, void (*)(), unsigned char *))(*(void *)v18[v7-- - 3] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.containingScrollGeometry.getter, v24);
          if (v23) {
            goto LABEL_37;
          }
        }
      }
      MEMORY[0x24C527CC0](v18, -1, -1);
      goto LABEL_42;
    }
    __break(1u);
  }
  return result;
}

{
  void *v3;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t isStackAllocationSafe;
  __n128 v9;
  uint64_t v10;
  unsigned char *v11;
  uint64_t v12;
  void *v13;
  unsigned char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned char v22[15];
  char v23;
  unsigned char v24[16];
  uint64_t v25;
  double v26;
  double v27;
  char v28;
  uint64_t v29;

  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v25 = a3;
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    double v6 = *(double *)(a2 + 24);
    double v5 = *(double *)(a2 + 32);
    char v23 = 0;
    if (result)
    {
      if (v6 == 0.0 && v5 == 0.0)
      {
        swift_retain();
      }
      else
      {
        double v26 = -v6;
        double v27 = -v5;
        char v28 = 0;
        swift_retain();
        ViewTransform.Item.apply(to:allowUnclipped:)(a3, 1);
        outlined destroy of ViewTransform.Item((uint64_t)&v26);
      }
      uint64_t v15 = v3[2];
      (*(void (**)(uint64_t, char *, void (*)(), unsigned char *))(*v3 + 104))(1, &v23, partial apply for closure #1 in ViewTransform.nearestScrollGeometry.getter, v24);
      while ((v23 & 1) == 0 && v15)
      {
        uint64_t v16 = v15;
        uint64_t v15 = *(void *)(v15 + 16);
        (*(void (**)(uint64_t, char *, void (*)(), unsigned char *))(*(void *)v16 + 104))(1, &v23, partial apply for closure #1 in ViewTransform.nearestScrollGeometry.getter, v24);
      }
      return swift_release();
    }
    uint64_t v7 = v3[3];
    if (v7 < 0)
    {
      __break(1u);
    }
    else if (!((unint64_t)(v7 + 0x1000000000000000) >> 61))
    {
      uint64_t isStackAllocationSafe = swift_retain();
      if (8 * v7 < 1025
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v9.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
        __n128 v11 = &v22[-v10];
        *(void *)&v22[-v10] = v3;
        uint64_t v12 = v3[2];
        if (v12)
        {
          int8x16_t v13 = v11 + 8;
          do
          {
            *v13++ = v12;
            uint64_t v12 = *(void *)(v12 + 16);
          }
          while (v12);
        }
        if (v7)
        {
          (*(void (**)(void, char *, void (*)(), unsigned char *, __n128))(**(void **)&v11[8 * v7 - 8] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.nearestScrollGeometry.getter, v24, v9);
          if ((v23 & 1) == 0 && v7 != 1)
          {
            (*(void (**)(void, char *, void (*)(), unsigned char *))(**(void **)&v11[8 * v7 - 16] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.nearestScrollGeometry.getter, v24);
            if ((v23 & 1) == 0)
            {
              uint64_t v14 = v11 - 24;
              while (v7 != 2)
              {
                (*(void (**)(void, char *, void (*)(), unsigned char *))(**(void **)&v14[8 * v7--] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.nearestScrollGeometry.getter, v24);
                if (v23) {
                  return swift_release();
                }
              }
              goto LABEL_42;
            }
            return swift_release();
          }
          if (v23) {
            return swift_release();
          }
        }
LABEL_42:
        if (v6 != 0.0 || v5 != 0.0)
        {
          double v26 = v6;
          double v27 = v5;
          char v28 = 0;
          ViewTransform.Item.apply(to:allowUnclipped:)(a3, 1);
          outlined destroy of ViewTransform.Item((uint64_t)&v26);
        }
        return swift_release();
      }
      uint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v18 = v17;
      *uint64_t v17 = v3;
      uint64_t v19 = v3[2];
      if (v19)
      {
        char v20 = v17 + 1;
        do
        {
          *v20++ = v19;
          uint64_t v19 = *(void *)(v19 + 16);
        }
        while (v19);
      }
      if (v7)
      {
        (*(void (**)(void, char *, void (*)(), unsigned char *))(*(void *)v17[v7 - 1] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.nearestScrollGeometry.getter, v24);
        char v21 = v23;
        if ((v23 & 1) != 0 || v7 == 1)
        {
          MEMORY[0x24C527CC0](v18, -1, -1);
          if (v21) {
            return swift_release();
          }
          goto LABEL_42;
        }
        (*(void (**)(void, char *, void (*)(), unsigned char *))(*(void *)v18[v7 - 2] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.nearestScrollGeometry.getter, v24);
        if (v23)
        {
LABEL_37:
          MEMORY[0x24C527CC0](v18, -1, -1);
          return swift_release();
        }
        while (v7 != 2)
        {
          (*(void (**)(void, char *, void (*)(), unsigned char *))(*(void *)v18[v7-- - 3] + 104))(0, &v23, partial apply for closure #1 in ViewTransform.nearestScrollGeometry.getter, v24);
          if (v23) {
            goto LABEL_37;
          }
        }
      }
      MEMORY[0x24C527CC0](v18, -1, -1);
      goto LABEL_42;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized ViewTransform.forEach(inverted:_:)(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, CGRect *a5, BOOL *a6)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  char v36 = a5;
  double v37 = a6;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  int8x16_t v33 = closure #1 in CGRect.convertAndClipToScrollView(to:transform:)partial apply;
  int8x16_t v34 = &v35;
  double v6 = *(void **)a2;
  if (*(void *)a2)
  {
    double v12 = *(double *)(a2 + 24);
    double v11 = *(double *)(a2 + 32);
    char v29 = 0;
    if (result)
    {
      if (v12 == 0.0 && v11 == 0.0)
      {
        swift_retain();
LABEL_22:
        uint64_t v21 = v6[2];
        (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*v6 + 104))(1, &v29, closure #1 in ViewTransform.convert(_:_:)partial apply, v30);
        while ((v29 & 1) == 0 && v21)
        {
          uint64_t v22 = v21;
          uint64_t v21 = *(void *)(v21 + 16);
          (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*(void *)v22 + 104))(1, &v29, closure #1 in ViewTransform.convert(_:_:)partial apply, v30);
        }
        return swift_release();
      }
      double v38 = -v12;
      double v39 = -v11;
      char v40 = 0;
      swift_retain();
      specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v38, &v29, a3, a4, a5, a6);
      outlined destroy of ViewTransform.Item((uint64_t)&v38);
      if ((v29 & 1) == 0) {
        goto LABEL_22;
      }
      return swift_release();
    }
    uint64_t v13 = v6[3];
    if (v13 < 0)
    {
      __break(1u);
    }
    else if (!((unint64_t)(v13 + 0x1000000000000000) >> 61))
    {
      uint64_t isStackAllocationSafe = swift_retain();
      if (8 * v13 < 1025
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v15.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
        uint64_t v17 = &v28[-v16];
        *(void *)&v28[-v16] = v6;
        uint64_t v18 = v6[2];
        if (v18)
        {
          uint64_t v19 = v17 + 8;
          do
          {
            *v19++ = v18;
            uint64_t v18 = *(void *)(v18 + 16);
          }
          while (v18);
        }
        if (v13)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *, __n128))(**(void **)&v17[8 * v13 - 8]
                                                                                            + 104))(0, &v29, closure #1 in ViewTransform.convert(_:_:)partial apply, v30, v15);
          if ((v29 & 1) != 0 || v13 == 1)
          {
            if (v29) {
              return swift_release();
            }
          }
          else
          {
            (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v17[8 * v13 - 16]
                                                                                      + 104))(0, &v29, closure #1 in ViewTransform.convert(_:_:)partial apply, v30);
            if (v29) {
              return swift_release();
            }
            char v20 = v17 - 24;
            while (v13 != 2)
            {
              (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v20[8 * v13--]
                                                                                        + 104))(0, &v29, closure #1 in ViewTransform.convert(_:_:)partial apply, v30);
              if (v29) {
                return swift_release();
              }
            }
          }
        }
        goto LABEL_42;
      }
      char v23 = (void *)swift_slowAlloc();
      int8x16_t v24 = v23;
      *char v23 = v6;
      uint64_t v25 = v6[2];
      if (v25)
      {
        double v26 = v23 + 1;
        do
        {
          *v26++ = v25;
          uint64_t v25 = *(void *)(v25 + 16);
        }
        while (v25);
      }
      if (v13)
      {
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v23[v13 - 1] + 104))(0, &v29, closure #1 in ViewTransform.convert(_:_:)partial apply, v30);
        char v27 = v29;
        if ((v29 & 1) != 0 || v13 == 1)
        {
          MEMORY[0x24C527CC0](v24, -1, -1);
          if (v27) {
            return swift_release();
          }
LABEL_42:
          if (v12 != 0.0 || v11 != 0.0)
          {
            double v38 = v12;
            double v39 = v11;
            char v40 = 0;
            specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v38, &v29, a3, a4, a5, a6);
            outlined destroy of ViewTransform.Item((uint64_t)&v38);
          }
          return swift_release();
        }
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v24[v13 - 2] + 104))(0, &v29, closure #1 in ViewTransform.convert(_:_:)partial apply, v30);
        if (v29)
        {
LABEL_37:
          MEMORY[0x24C527CC0](v24, -1, -1);
          return swift_release();
        }
        while (v13 != 2)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v24[v13-- - 3] + 104))(0, &v29, closure #1 in ViewTransform.convert(_:_:)partial apply, v30);
          if (v29) {
            goto LABEL_37;
          }
        }
      }
      MEMORY[0x24C527CC0](v24, -1, -1);
      goto LABEL_42;
    }
    __break(1u);
  }
  return result;
}

uint64_t Element.forEach(inverted:stop:_:)(char a1, unsigned char *a2, void (*a3)(double *, unsigned char *), uint64_t a4)
{
  double v9 = *v4;
  if ((a1 & 1) != 0
    || (double v10 = v4[5], v4[4] == 0.0) && v10 == 0.0
    || (double v14 = v4[4],
        double v15 = v10,
        char v16 = 0,
        a3(&v14, a2),
        uint64_t result = outlined destroy of ViewTransform.Item((uint64_t)&v14),
        (*a2 & 1) == 0))
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, void (*)(double *, unsigned char *), uint64_t, void))(*(void *)(*(void *)&v9 + 136) + 16))(a1 & 1, a2, a3, a4, *(void *)(*(void *)&v9 + 128));
    if (*a2 & 1) == 0 && (a1)
    {
      double v12 = v4[4];
      double v13 = v4[5];
      if (v12 != 0.0 || v13 != 0.0)
      {
        double v14 = -v12;
        double v15 = -v13;
        char v16 = 0;
        a3(&v14, a2);
        return outlined destroy of ViewTransform.Item((uint64_t)&v14);
      }
    }
  }
  return result;
}

uint64_t BufferedElement.forEach(inverted:stop:_:)(char a1, unsigned char *a2, void (*a3)(double *, unsigned char *), uint64_t a4)
{
  if ((a1 & 1) != 0
    || (double v9 = v4[5], v4[4] == 0.0) && v9 == 0.0
    || (double v13 = v4[4],
        double v14 = v9,
        char v15 = 0,
        a3(&v13, a2),
        uint64_t result = outlined destroy of ViewTransform.Item((uint64_t)&v13),
        (*a2 & 1) == 0))
  {
    swift_beginAccess();
    double v13 = v4[6];
    double v14 = v4[7];
    uint64_t result = ViewTransform.UnsafeBuffer.forEach(inverted:stop:_:)(a1 & 1, a2, (uint64_t)a3, a4);
    if (*a2 & 1) == 0 && (a1)
    {
      double v11 = v4[4];
      double v12 = v4[5];
      if (v11 != 0.0 || v12 != 0.0)
      {
        double v13 = -v11;
        double v14 = -v12;
        char v15 = 0;
        a3(&v13, a2);
        return outlined destroy of ViewTransform.Item((uint64_t)&v13);
      }
    }
  }
  return result;
}

uint64_t ViewTransform.UnsafeBuffer.forEach(inverted:stop:_:)(uint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  v17[1] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)v4;
  uint64_t v9 = *(unsigned int *)(v4 + 12);
  if (result)
  {
    if ((v9 & 0x80000000) != 0)
    {
      __break(1u);
LABEL_18:
      __break(1u);
    }
    uint64_t v10 = *(unsigned int *)(v4 + 8);
    if ((int)v9 > 128)
    {
      uint64_t result = swift_stdlib_isStackAllocationSafe();
      if (!result)
      {
        uint64_t v15 = swift_slowAlloc();
        closure #1 in ViewTransform.UnsafeBuffer.forEach(inverted:stop:_:)(v15, (int)v9, v8, v10 | (v9 << 32), a2, a3, a4);
        JUMPOUT(0x24C527CC0);
      }
    }
    MEMORY[0x270FA5388](result);
    return closure #1 in ViewTransform.UnsafeBuffer.forEach(inverted:stop:_:)((uint64_t)v17 - v11, (int)v9, v8, v10 | (v9 << 32), a2, a3, a4);
  }
  else
  {
    int v12 = 0;
    do
    {
      if (!(v9 | v12)) {
        break;
      }
      if (!v8) {
        goto LABEL_18;
      }
      uint64_t v14 = v8 + v12;
      LODWORD(v9) = v9 - 1;
      if (v9) {
        v12 += *(_DWORD *)(v14 + 8);
      }
      else {
        int v12 = 0;
      }
      uint64_t v13 = *(void *)v14;
      v17[0] = v14;
      uint64_t result = (*(uint64_t (**)(void *, void, unsigned char *, uint64_t, uint64_t))(v13 + 112))(v17, 0, a2, a3, a4);
    }
    while ((*a2 & 1) == 0);
  }
  return result;
}

uint64_t protocol witness for ViewTransformElement.forEach(inverted:stop:_:) in conformance SizedSpaceElement(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  outlined init with copy of AnyHashable(v3, (uint64_t)v7);
  v7[40] = 0;
  long long v8 = *(_OWORD *)(v3 + 40);
  char v9 = 4;
  a3(v7, a2);
  return outlined destroy of ViewTransform.Item((uint64_t)v7);
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

void partial apply for closure #1 in ViewTransform.containingSizedCoordinateSpace(name:)(uint64_t a1, uint64_t a2)
{
  closure #1 in ViewTransform.containingSizedCoordinateSpace(name:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void _s7SwiftUI13ViewTransformV30containingSizedCoordinateSpace4nameSo6CGRectVSgAA0gH0O4NameO_tFyAC4ItemO_SbztXEfU_TA_0()
{
  ViewTransform.Item.apply(to:coordinateSpaceName:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void closure #1 in ViewTransform.containingSizedCoordinateSpace(name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void ViewTransform.Item.apply(to:coordinateSpaceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  outlined init with copy of ViewTransform.Item(v3, (uint64_t)&v21);
  switch(v28)
  {
    case 1:
      float64_t b = v21.f64[1];
      float64_t a = v21.f64[0];
      CGFloat c = v22;
      CGFloat d = v23;
      tCGFloat x = v24;
      tCGFloat y = v25;
      if ((v21.f64[1] != 0.0 || v22 != 0.0) && (v21.f64[0] != 0.0 || v23 != 0.0)) {
        goto LABEL_12;
      }
      if ((*(unsigned char *)(a1 + 32) & 1) == 0)
      {
        CGFloat v13 = *(double *)(a1 + 16);
        CGFloat v12 = *(double *)(a1 + 24);
        CGFloat v15 = *(double *)a1;
        CGFloat v14 = *(double *)(a1 + 8);
        if ((_BYTE)v26)
        {
          *(float64x2_t *)&v20.float64_t a = v21;
          v20.CGFloat c = v22;
          v20.CGFloat d = v23;
          v20.tCGFloat x = v24;
          v20.tCGFloat y = v25;
          CGAffineTransformInvert(&v19, &v20);
          float64_t a = v19.a;
          float64_t b = v19.b;
          CGFloat c = v19.c;
          CGFloat d = v19.d;
          tCGFloat x = v19.tx;
          tCGFloat y = v19.ty;
        }
        v20.float64_t a = a;
        v20.float64_t b = b;
        v20.CGFloat c = c;
        v20.CGFloat d = d;
        v20.tCGFloat x = tx;
        v20.tCGFloat y = ty;
        v29.origin.CGFloat x = v15;
        v29.origin.CGFloat y = v14;
        v29.size.CGFloat width = v13;
        v29.size.CGFloat height = v12;
        *(CGRect *)a1 = CGRectApplyAffineTransform(v29, &v20);
        goto LABEL_16;
      }
      break;
    case 2:
LABEL_12:
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(unsigned char *)(a1 + 32) = 1;
      break;
    case 3:
      outlined destroy of ViewTransform.Item((uint64_t)&v21);
      break;
    case 4:
      uint64_t v16 = v26;
      uint64_t v17 = v27;
      outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content((long long *)&v21, &v20);
      char v18 = specialized static CoordinateSpace.Name.== infix(_:_:)((uint64_t)&v20, a2);
      outlined destroy of CoordinateSpace.Name((uint64_t)&v20);
      if (v18)
      {
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = v16;
        *(void *)(a1 + 24) = v17;
        goto LABEL_16;
      }
      break;
    case 5:
      return;
    default:
      if ((*(unsigned char *)(a1 + 32) & 1) == 0)
      {
        *(float64x2_t *)a1 = vaddq_f64(*(float64x2_t *)a1, v21);
LABEL_16:
        *(unsigned char *)(a1 + 32) = 0;
      }
      break;
  }
}

uint64_t specialized static CoordinateSpace.Name.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of CoordinateSpace.Name(a1, (uint64_t)v11);
  outlined init with copy of CoordinateSpace.Name(a2, (uint64_t)v12);
  if (v11[40])
  {
    outlined init with copy of CoordinateSpace.Name((uint64_t)v11, (uint64_t)v9);
    if (v14 == 1)
    {
      char v3 = *(void *)&v9[0] == *(void *)&v12[0];
LABEL_8:
      outlined destroy of CoordinateSpace.Name((uint64_t)v11);
      return v3 & 1;
    }
  }
  else
  {
    outlined init with copy of CoordinateSpace.Name((uint64_t)v11, (uint64_t)v9);
    if ((v14 & 1) == 0)
    {
      v7[0] = v9[0];
      v7[1] = v9[1];
      uint64_t v8 = v10;
      v5[0] = v12[0];
      v5[1] = v12[1];
      uint64_t v6 = v13;
      char v3 = MEMORY[0x24C523BA0](v7, v5);
      outlined destroy of AnyHashable((uint64_t)v5);
      outlined destroy of AnyHashable((uint64_t)v7);
      goto LABEL_8;
    }
    outlined destroy of AnyHashable((uint64_t)v9);
  }
  outlined destroy of (CoordinateSpace, CoordinateSpace)((uint64_t)v11, &lazy cache variable for type metadata for (CoordinateSpace.Name, CoordinateSpace.Name));
  char v3 = 0;
  return v3 & 1;
}

void specialized closure #1 in ViewTransform.convert(_:_:)(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, CGRect *a5, BOOL *a6)
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)v21);
  if (v25 - 3 >= 2)
  {
    outlined destroy of ViewTransform.Item((uint64_t)v21);
  }
  else
  {
    outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v21, v26);
    outlined init with copy of CoordinateSpace.Name((uint64_t)v26, (uint64_t)v21);
    if (v23)
    {
      *(void *)&v16[0] = *(void *)&v21[0];
      char v12 = 1;
    }
    else
    {
      char v12 = 0;
      v16[0] = v21[0];
      v16[1] = v21[1];
      uint64_t v17 = v22;
    }
    char v18 = v12;
    outlined init with take of CoordinateSpace((uint64_t)v16, (uint64_t)v21);
    outlined destroy of CoordinateSpace.Name((uint64_t)v26);
    outlined init with take of CoordinateSpace((uint64_t)v21, (uint64_t)v20);
    outlined init with copy of ViewTransform.Conversion(a3, (uint64_t)v21);
    switch(v24)
    {
      case 1:
      case 3:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v21, (uint64_t)v16);
        char v14 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v20, (uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v20);
        outlined destroy of CoordinateSpace((uint64_t)v16);
        if ((v14 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_10;
      case 4:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v21, (uint64_t)v16);
        if (specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v20, (uint64_t)v19))
        {
          outlined destroy of CoordinateSpace((uint64_t)v20);
          outlined destroy of CoordinateSpace((uint64_t)v19);
          outlined destroy of CoordinateSpace((uint64_t)v16);
LABEL_13:
          outlined destroy of ViewTransform.Conversion((uint64_t)v21);
          *a2 = 1;
          return;
        }
        char v15 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v20, (uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v20);
        outlined destroy of CoordinateSpace((uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v19);
        if (v15)
        {
LABEL_10:
          outlined destroy of ViewTransform.Conversion((uint64_t)v21);
          *a4 = 1;
        }
        else
        {
LABEL_15:
          outlined destroy of ViewTransform.Conversion((uint64_t)v21);
        }
        break;
      default:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v21, (uint64_t)v16);
        char v13 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v20, (uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v20);
        outlined destroy of CoordinateSpace((uint64_t)v16);
        if ((v13 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_13;
    }
  }
  if (*a4 == 1) {
    closure #1 in CGRect.convertAndClipToScrollView(to:transform:)(a1, a5, a6);
  }
}

void type metadata accessor for _PositionAwarePlacementContext?()
{
  if (!lazy cache variable for type metadata for _PositionAwarePlacementContext?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PositionAwarePlacementContext?);
    }
  }
}

uint64_t protocol witness for ViewTransformElement.forEach(inverted:stop:_:) in conformance CoordinateSpaceElement(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  outlined init with copy of AnyHashable(v3, (uint64_t)v7);
  v7[40] = 0;
  v7[113] = 3;
  a3(v7, a2);
  return outlined destroy of ViewTransform.Item((uint64_t)v7);
}

void *initializeBufferWithCopyOfBuffer for _SafeAreaInsetsModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  swift_bridgeObjectRetain();
  if (v3 != 1) {
    swift_retain();
  }
  a1[1] = v3;
  return a1;
}

uint64_t View.configuresScrollPhaseState()(uint64_t a1)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for ScrollPhaseStateConfigurationModifier);
}

uint64_t View.resetScrollInputs()(uint64_t a1)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for ResetScrollInputsModifier);
}

uint64_t initializeWithCopy for GestureFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  double v5 = *(void **)(a2 + 96);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_retain();
  return a1;
}

unsigned char *storeEnumTagSinglePayload for SymbolRenderingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

double ViewTraitCollection.zIndex.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  double v1 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v0, 0.0);
  swift_bridgeObjectRelease();
  return v1;
}

void static ContentTransition.identity.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x8000000001;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

ValueMetadata *type metadata accessor for Font._StylisticAlternative()
{
  return &type metadata for Font._StylisticAlternative;
}

ValueMetadata *type metadata accessor for VariableBlurEffect()
{
  return &type metadata for VariableBlurEffect;
}

ValueMetadata *type metadata accessor for _GeometryGroupEffect()
{
  return &type metadata for _GeometryGroupEffect;
}

uint64_t Canvas.isAccelerated.setter(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) = *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) & 0xFFFFFFFE | result & 1;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance StrokeShapeView<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return protocol witness for static View._makeView(view:inputs:) in conformance FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))static StrokeShapeView._makeView(view:inputs:));
}

uint64_t instantiation function for generic protocol witness table for RendererEffectDisplayList<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _StackLayoutCache()
{
  return &type metadata for _StackLayoutCache;
}

unint64_t ResolvedStyledText.isDynamic.getter()
{
  unint64_t v1 = *(void *)(v0 + 216);
  if (v1)
  {
    if ((uint64_t)objc_msgSend(*(id *)(v0 + 216), sel_length) < 1)
    {
      return 0;
    }
    else
    {
      if (one-time initialization token for updateSchedule != -1) {
        swift_once();
      }
      uint64_t v2 = static NSAttributedStringKey.updateSchedule;
      objc_msgSend((id)v1, sel_length);
      id v3 = objc_msgSend((id)v1, sel_attribute_atIndex_effectiveRange_, v2, 0, 0);
      unint64_t v1 = v3 != 0;
      if (v3)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v5, 0, sizeof(v5));
      }
      _sypSgWOhTm_5((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
    }
  }
  return v1;
}

uint64_t base witness table accessor for Equatable in AGAttributeTypeFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags, type metadata accessor for AGAttributeTypeFlags);
}

void FontProvider.resolveTraits(in:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 25);
  LOWORD(v12) = *(_WORD *)a1;
  long long v13 = *(_OWORD *)(a1 + 8);
  char v14 = v4;
  char v15 = v5;
  unsigned int v6 = (const __CTFontDescriptor *)(*(uint64_t (**)(CFTypeRef *))(a2 + 16))(&v12);
  CFTypeRef v7 = CTFontDescriptorCopyAttribute(v6, (CFStringRef)*MEMORY[0x263F03B28]);
  uint64_t v8 = 0;
  if (v7)
  {
    CFTypeRef v12 = v7;
    if (swift_dynamicCast()) {
      uint64_t v8 = v11;
    }
  }
  CTFontDescriptorGetWeight();
  uint64_t v10 = v9;

  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 1;
}

uint64_t Font.ModifierProvider.resolve(in:)(char *a1, uint64_t a2)
{
  char v5 = a1[1];
  uint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = *((void *)a1 + 2);
  char v8 = a1[24];
  char v9 = a1[25];
  uint64_t v10 = *v2;
  char v12 = *a1;
  char v4 = v12;
  char v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  char v16 = v8;
  char v17 = v9;
  uint64_t v18 = (*(uint64_t (**)(char *))(*(void *)v10 + 80))(&v12);
  char v12 = v4;
  char v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  char v16 = v8;
  char v17 = v9;
  (*(void (**)(uint64_t *, char *, void))(*(void *)(a2 + 24) + 16))(&v18, &v12, *(void *)(a2 + 16));
  return v18;
}

void closure #1 in variable initialization expression of static Font.fontCache(uint64_t *a1@<X0>, CTFontRef *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  char v5 = *((unsigned char *)a1 + 17);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  char v8 = *((unsigned char *)a1 + 40);
  char v9 = *((unsigned char *)a1 + 41);
  char v16 = *((unsigned char *)a1 + 16);
  char v17 = v16;
  char v18 = v5;
  uint64_t v19 = v6;
  uint64_t v20 = v7;
  char v21 = v8;
  char v22 = v9;
  uint64_t v10 = (const __CTFontDescriptor *)(*(uint64_t (**)(char *))(*(void *)v3 + 80))(&v17);
  CTFontDescriptorRef descriptor = v10;
  if (!(v4 >> 62))
  {
    uint64_t v11 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    CTFontRef v14 = CTFontCreateWithFontDescriptor(v10, 0.0, 0);

    *a2 = v14;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  if (!v11) {
    goto LABEL_11;
  }
LABEL_3:
  if (v11 >= 1)
  {
    uint64_t v15 = a2;
    uint64_t v12 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = MEMORY[0x24C523D60](v12, v4);
      }
      else
      {
        uint64_t v13 = *(void *)(v4 + 8 * v12 + 32);
        swift_retain();
      }
      ++v12;
      char v17 = v16;
      char v18 = v5;
      uint64_t v19 = v6;
      uint64_t v20 = v7;
      char v21 = v8;
      char v22 = v9;
      (*(void (**)(CTFontDescriptorRef *, char *))(*(void *)v13 + 80))(&descriptor, &v17);
      swift_release();
    }
    while (v11 != v12);
    swift_bridgeObjectRelease();
    uint64_t v10 = descriptor;
    a2 = v15;
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t FontBox.resolve(in:)(__int16 *a1)
{
  uint64_t v2 = *v1;
  char v3 = *((unsigned char *)a1 + 24);
  char v4 = *((unsigned char *)a1 + 25);
  __int16 v6 = *a1;
  long long v7 = *(_OWORD *)(a1 + 4);
  char v8 = v3;
  char v9 = v4;
  return (*(uint64_t (**)(__int16 *, void))(*(void *)(v2 + 128) + 16))(&v6, *(void *)(v2 + 120));
}

uint64_t protocol witness for FontProvider.resolve(in:) in conformance Font.TextStyleProvider(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 24);
  char v6 = *((unsigned char *)a1 + 25);
  char v7 = v1[1];
  uint64_t v8 = *((void *)v1 + 1);
  uint64_t v9 = v1[16];
  char v17 = *v1;
  char v16 = v7;
  __int16 v11 = v2;
  uint64_t v12 = v3;
  uint64_t v13 = v4;
  char v14 = v5;
  char v15 = v6;
  return (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, __int16 *))(v4 + 8))(&v17, &v16, v8, v9, &v11);
}

uint64_t protocol witness for static FontDefinition.resolveTextStyleFont(textStyle:design:weight:in:) in conformance DefaultFontDefinition(char *a1, unsigned __int8 *a2, uint64_t a3, char a4, char *a5)
{
  return specialized static DefaultFontDefinition.resolveTextStyleFont(textStyle:design:weight:in:)(a1, a2, a3, a4 & 1, a5);
}

uint64_t Font.ResolvedTraits.init(textStyle:weight:dynamicTypeSize:)@<X0>(double a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  specialized Font.TextStyle.ctTextStyle.getter();
  specialized DynamicTypeSize.ctTextSize.getter();
  uint64_t result = CTFontDescriptorGetTextStyleSize();
  double v8 = 0.0;
  if ((a2 & 1) == 0) {
    double v8 = a1;
  }
  *(void *)a3 = v7;
  *(double *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

uint64_t specialized static DefaultFontDefinition.resolveTextStyleFont(textStyle:design:weight:in:)(char *a1, unsigned __int8 *a2, uint64_t a3, char a4, char *a5)
{
  uint64_t v7 = *a2;
  char v8 = *a5;
  unsigned __int8 v9 = a5[1];
  v18[1] = *a1;
  uint64_t result = specialized Font.TextStyle.ctTextStyle.getter();
  __int16 v11 = (void *)result;
  uint64_t v12 = 0;
  switch(v7)
  {
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_10;
    default:
      uint64_t v12 = (void *)*MEMORY[0x263F03B80];
      if (*MEMORY[0x263F03B80]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_4:
      uint64_t v12 = (void *)*MEMORY[0x263F03B98];
      if (*MEMORY[0x263F03B98]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_6:
      uint64_t v12 = (void *)*MEMORY[0x263F03B90];
      if (*MEMORY[0x263F03B90]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_8:
      uint64_t v12 = (void *)*MEMORY[0x263F03B88];
      if (*MEMORY[0x263F03B88])
      {
LABEL_9:
        id v13 = v12;
LABEL_10:
        v18[0] = v8;
        unsigned __int8 v17 = v9;
        id v14 = v11;
        specialized static CTFontDescriptorRef.fontDescriptor(textStyle:design:weight:sizeCategory:legibilityWeight:)((uint64_t)v14, v12, a3, a4 & 1, v18, &v17);
        uint64_t v16 = v15;

        return v16;
      }
      else
      {
        __break(1u);
      }
      return result;
  }
}

uint64_t specialized Font.TextStyle.ctTextStyle.getter()
{
  unint64_t v1 = *v0;
  if (v1 < 0xB) {
    return **((void **)&unk_2651D62F0 + v1);
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

void specialized static CTFontDescriptorRef.fontDescriptor(textStyle:design:weight:sizeCategory:legibilityWeight:)(uint64_t a1, void *a2, uint64_t a3, char a4, char *a5, unsigned __int8 *a6)
{
  char v8 = *a5;
  int v9 = *a6;
  uint64_t v10 = MEMORY[0x263F8EE80];
  if (!a2)
  {
    uint64_t v17 = MEMORY[0x263F8EE80];
    if (a4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  __int16 v11 = (void *)*MEMORY[0x263F03BA8];
  if (!*MEMORY[0x263F03BA8])
  {
    __break(1u);
    return;
  }
  type metadata accessor for CFStringRef(0);
  uint64_t v33 = v13;
  *(void *)&long long v32 = a2;
  outlined init with take of Any(&v32, v31);
  id v14 = a2;
  id v15 = v11;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v15, isUniquelyReferenced_nonNull_native);
  uint64_t v17 = v10;

  swift_bridgeObjectRelease();
  if ((a4 & 1) == 0)
  {
LABEL_4:
    char v18 = (void *)*MEMORY[0x263F03C00];
    uint64_t v33 = MEMORY[0x263F8EF38];
    *(void *)&long long v32 = a3;
    outlined init with take of Any(&v32, v31);
    id v19 = v18;
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v19, v20);

    swift_bridgeObjectRelease();
  }
LABEL_5:
  if (*(void *)(v17 + 16))
  {
    char v21 = (void *)*MEMORY[0x263F03B60];
    type metadata accessor for [CFStringRef : Any]();
    uint64_t v33 = v22;
    *(void *)&long long v32 = v17;
    outlined init with take of Any(&v32, v31);
    id v23 = v21;
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v23, v24);
  }
  swift_bridgeObjectRelease();
  if (v9 != 2)
  {
    unsigned __int8 v25 = (void *)*MEMORY[0x263F03AD0];
    uint64_t v33 = MEMORY[0x263F8D6C8];
    *(void *)&long long v32 = v9 & 1;
    outlined init with take of Any(&v32, v31);
    id v26 = v25;
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v26, v27);

    swift_bridgeObjectRelease();
  }
  LOBYTE(v32) = v8;
  char v28 = (void *)specialized DynamicTypeSize.ctTextSize.getter();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v29 = v28;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CTFontDescriptorCreateWithTextStyleAndAttributes();
}

uint64_t lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static AsyncAttribute.flags.getter()
{
  type metadata accessor for AGAttributeTypeFlags(0);
  lazy protocol witness table accessor for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  OptionSet<>.init()();
  return v1;
}

void type metadata accessor for AGAttributeTypeFlags(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags;
  if (!lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags)
  {
    type metadata accessor for AGAttributeTypeFlags(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags);
  }
  return result;
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t i = a2 & ~v7;
  if ((*(void *)(v5 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    a3(0);
    __int16 v11 = *(void **)(*(void *)(v5 + 48) + 8 * i);
    lazy protocol witness table accessor for type UUID and conformance UUID(a4, a5);
    id v12 = v11;
    LOBYTE(a4) = static _CFObject.== infix(_:_:)();

    if ((a4 & 1) == 0)
    {
      uint64_t v13 = ~v7;
      for (unint64_t i = (i + 1) & v13; ((*(void *)(v6 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
      {
        id v14 = *(id *)(*(void *)(v5 + 48) + 8 * i);
        char v15 = static _CFObject.== infix(_:_:)();

        if (v15) {
          break;
        }
      }
    }
  }
  return i;
}

void type metadata accessor for _DictionaryStorage<CFStringRef, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>)
  {
    type metadata accessor for CFStringRef(255);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
    }
  }
}

uint64_t specialized DynamicTypeSize.ctTextSize.getter()
{
  return **((void **)&unk_2651D6348 + *v0);
}

uint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void Font.LeadingModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1)
{
  uint64_t v3 = *v1;
  CTFontDescriptorRef v4 = *a1;
  CopyWithCTFontSymbolicTraits SymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(*a1, v3 << 15, dword_2461F3608[v3]);
  if (CopyWithSymbolicTraits)
  {
    uint64_t v6 = CopyWithSymbolicTraits;

    CTFontDescriptorRef v4 = v6;
  }
  *a1 = v4;
}

void Font.WeightModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    uint64_t v4 = *v2;
    CFStringRef v5 = (const __CFString *)*MEMORY[0x263F03B60];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    id v12 = *a1;
    if (CTFontDescriptorIsSystemUIFont())
    {
      uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
      type metadata accessor for _ContiguousArrayStorage<(String, [String : CGFloat])>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, [String : CGFloat])>, (uint64_t (*)(uint64_t))type metadata accessor for (String, [String : CGFloat]), MEMORY[0x263F8E0F8]);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
      *(void *)(inited + 32) = v6;
      *(void *)(inited + 40) = v8;
      type metadata accessor for _ContiguousArrayStorage<(String, [String : CGFloat])>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, CGFloat)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, CGFloat), v13);
      uint64_t v15 = swift_initStackObject();
      *(_OWORD *)(v15 + 16) = xmmword_2461B9DC0;
      *(void *)(v15 + 32) = v9;
      *(void *)(v15 + 40) = v11;
      *(void *)(v15 + 48) = v4;
      *(void *)(inited + 48) = specialized Dictionary.init(dictionaryLiteral:)(v15);
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : CGFloat]);
      CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      CTFontDescriptorRef CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v12, isa);

      *a1 = CopyWithAttributes;
    }
    else
    {
      CFTypeRef v18 = CTFontDescriptorCopyAttribute(v12, (CFStringRef)*MEMORY[0x263F03A80]);
      if (v18)
      {
        CFTypeRef v19 = v18;
        CFDictionaryRef v20 = CTFontDescriptorCopyAttributes(v12);
        *(void *)&long long v37 = 0;
        static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

        unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        specialized Dictionary._Variant.removeValue(forKey:)(v21, v22, &v37);
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)&v37);
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;
        uint64_t ObjectType = swift_getObjectType();
        *(void *)&long long v37 = v19;
        outlined init with take of Any(&v37, v36);
        swift_unknownObjectRetain();
        unint64_t v26 = v39;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v39 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v23, v25, isUniquelyReferenced_nonNull_native);
        unint64_t v39 = v26;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        CFTypeRef v28 = CTFontDescriptorCopyAttribute(*a1, v5);
        if (v28
          && (*(void *)&long long v37 = v28,
              type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any]), swift_dynamicCast()))
        {
          unint64_t v29 = *(void *)&v36[0];
        }
        else
        {
          unint64_t v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        }

        uint64_t ObjectType = MEMORY[0x263F8EF38];
        *(void *)&long long v37 = v4;
        outlined init with take of Any(&v37, v36);
        char v30 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v9, v11, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any]);
        uint64_t ObjectType = v31;
        *(void *)&long long v37 = v29;
        outlined init with take of Any(&v37, v36);
        unint64_t v32 = v39;
        char v33 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v39 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v6, v8, v33);
        unint64_t v39 = v32;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        CFDictionaryRef v34 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        CTFontDescriptorRef v35 = CTFontDescriptorCreateWithAttributes(v34);

        swift_unknownObjectRelease();
        *a1 = v35;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, CGFloat>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, CGFloat>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, CGFloat>);
    }
  }
}

Swift::Void __swiftcall DisplayList.ViewUpdater.ViewCache.commitAsyncValues(targetTimestamp:)(SwiftUI::Time_optional targetTimestamp)
{
  uint64_t v2 = v1;
  uint64_t v117 = *(void *)(v1 + 48);
  if (!*(void *)(v117 + 16) && !*(void *)(*(void *)(v1 + 64) + 16)) {
    return;
  }
  if ((objc_msgSend(self, sel_isMainThread) & 1) == 0) {
    objc_msgSend(self, sel_activateBackground_, 1);
  }
  uint64_t v3 = self;
  unsigned __int8 v113 = objc_msgSend(v3, sel_disableActions);
  if ((v113 & 1) == 0) {
    objc_msgSend(v3, sel_setDisableActions_, 1);
  }
  id v112 = v3;
  unint64_t v127 = MEMORY[0x263F8EE88];
  uint64_t v115 = v117 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v117 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v117 + 64);
  int64_t v116 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v122 = *MEMORY[0x263F15AB0];
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  int64_t v8 = 0;
  uint64_t v114 = v1;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v8 << 6);
    }
    else
    {
      int64_t v12 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_109;
      }
      if (v12 >= v116) {
        goto LABEL_77;
      }
      unint64_t v13 = *(void *)(v115 + 8 * v12);
      ++v8;
      if (!v13)
      {
        int64_t v8 = v12 + 1;
        if (v12 + 1 >= v116) {
          goto LABEL_77;
        }
        unint64_t v13 = *(void *)(v115 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 2;
          if (v12 + 2 >= v116) {
            goto LABEL_77;
          }
          unint64_t v13 = *(void *)(v115 + 8 * v8);
          if (!v13)
          {
            int64_t v14 = v12 + 3;
            if (v14 >= v116) {
              goto LABEL_77;
            }
            unint64_t v13 = *(void *)(v115 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                int64_t v8 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_111;
                }
                if (v8 >= v116) {
                  break;
                }
                unint64_t v13 = *(void *)(v115 + 8 * v8);
                ++v14;
                if (v13) {
                  goto LABEL_28;
                }
              }
LABEL_77:
              swift_release();
              if ((v113 & 1) == 0) {
                objc_msgSend(v112, sel_setDisableActions_, 0);
              }
              swift_beginAccess();
              unint64_t v95 = v127;
              unint64_t v96 = v127 + 56;
              uint64_t v97 = 1 << *(unsigned char *)(v127 + 32);
              uint64_t v98 = -1;
              if (v97 < 64) {
                uint64_t v98 = ~(-1 << v97);
              }
              unint64_t v99 = v98 & *(void *)(v127 + 56);
              int64_t v100 = (unint64_t)(v97 + 63) >> 6;
              swift_bridgeObjectRetain();
              int64_t v101 = 0;
              while (1)
              {
                if (v99)
                {
                  unint64_t v102 = __clz(__rbit64(v99));
                  v99 &= v99 - 1;
                  unint64_t v103 = v102 | (v101 << 6);
                }
                else
                {
                  int64_t v104 = v101 + 1;
                  if (__OFADD__(v101, 1)) {
                    goto LABEL_110;
                  }
                  if (v104 >= v100) {
                    goto LABEL_99;
                  }
                  unint64_t v105 = *(void *)(v96 + 8 * v104);
                  ++v101;
                  if (!v105)
                  {
                    int64_t v101 = v104 + 1;
                    if (v104 + 1 >= v100) {
                      goto LABEL_99;
                    }
                    unint64_t v105 = *(void *)(v96 + 8 * v101);
                    if (!v105)
                    {
                      int64_t v101 = v104 + 2;
                      if (v104 + 2 >= v100) {
                        goto LABEL_99;
                      }
                      unint64_t v105 = *(void *)(v96 + 8 * v101);
                      if (!v105)
                      {
                        int64_t v106 = v104 + 3;
                        if (v106 >= v100) {
                          goto LABEL_99;
                        }
                        unint64_t v105 = *(void *)(v96 + 8 * v106);
                        if (!v105)
                        {
                          while (1)
                          {
                            int64_t v101 = v106 + 1;
                            if (__OFADD__(v106, 1)) {
                              goto LABEL_112;
                            }
                            if (v101 >= v100) {
                              break;
                            }
                            unint64_t v105 = *(void *)(v96 + 8 * v101);
                            ++v106;
                            if (v105) {
                              goto LABEL_98;
                            }
                          }
LABEL_99:
                          swift_release();
                          uint64_t v107 = *(void *)(v2 + 64);
                          uint64_t v108 = *(void *)(v107 + 16);
                          if (v108)
                          {
                            swift_bridgeObjectRetain();
                            uint64_t v109 = v107 + 40;
                            do
                            {
                              long long v110 = *(void (**)(uint64_t))(v109 - 8);
                              uint64_t v111 = swift_retain();
                              v110(v111);
                              swift_release();
                              v109 += 16;
                              --v108;
                            }
                            while (v108);
                            swift_bridgeObjectRelease();
                          }
                          swift_bridgeObjectRelease();
                          *(void *)(v2 + 48) = MEMORY[0x263F8EE80];
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v7);
                          *(void *)(v2 + 64) = MEMORY[0x263F8EE78];
                          return;
                        }
                        int64_t v101 = v106;
                      }
                    }
                  }
LABEL_98:
                  unint64_t v99 = (v105 - 1) & v105;
                  unint64_t v103 = __clz(__rbit64(v105)) + (v101 << 6);
                }
                objc_msgSend(*(id *)(*(void *)(v95 + 48) + 8 * v103), sel_flushWithTransaction);
              }
            }
            int64_t v8 = v14;
          }
        }
      }
LABEL_28:
      unint64_t v6 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
    }
    uint64_t v15 = 8 * v11;
    uint64_t v16 = *(void *)(*(void *)(v117 + 48) + v15);
    uint64_t v17 = *(void *)(*(void *)(v117 + 56) + v15);
    id v126 = *(id *)(v2 + 56);
    id v18 = v126;
    swift_bridgeObjectRetain();
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v124 = *(void **)(v2 + 40);
    Swift::Int v20 = (Swift::Int)v124;
    *(void *)(v2 + 40) = 0x8000000000000000;
    uint64_t v121 = v16;
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
    uint64_t v23 = *(void *)(v20 + 16);
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      goto LABEL_107;
    }
    char v26 = v21;
    if (*(void *)(v20 + 24) >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        Swift::Int v20 = (Swift::Int)v124;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
      Swift::Int v20 = (Swift::Int)v124;
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v121);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_117;
      }
      unint64_t v22 = v27;
    }
    *(void *)(v2 + 40) = v20;
    swift_bridgeObjectRelease();
    unint64_t v29 = *(void **)(v2 + 40);
    if (v26)
    {
      uint64_t v30 = swift_bridgeObjectRetain();
    }
    else
    {
      v29[(v22 >> 6) + 8] |= 1 << v22;
      *(void *)(v29[6] + 8 * v22) = v121;
      uint64_t v31 = (void *)(v29[7] + 16 * v22);
      *uint64_t v31 = MEMORY[0x263F8EE88];
      v31[1] = MEMORY[0x263F8EE80];
      uint64_t v32 = v29[2];
      uint64_t v33 = v32 + 1;
      BOOL v34 = __OFADD__(v32, 1);
      uint64_t v30 = swift_bridgeObjectRetain();
      if (v34) {
        goto LABEL_108;
      }
      *(void *)(v30 + 16) = v33;
    }
    uint64_t v35 = *(void *)(v30 + 56);
    swift_bridgeObjectRelease();
    uint64_t v120 = *(void *)(v17 + 16);
    if (v120) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_beginAccess();
    id v9 = v126;

    *(void *)(v2 + 56) = v9;
    uint64_t v7 = specialized thunk for @callee_guaranteed () -> (@owned DisplayList.ViewUpdater.ViewCache.AsyncValues);
  }
  unint64_t v118 = v6;
  int64_t v119 = v8;
  uint64_t v123 = v17 + 32;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v36 = 0;
  uint64_t v37 = v35 + 16 * v22 + 8;
  uint64_t v38 = v120;
  unint64_t v39 = (void *)v121;
  while (1)
  {
    uint64_t v44 = v123 + 32 * v36;
    Swift::Int v45 = *(void *)v44;
    Swift::Int v46 = *(void *)(v44 + 8);
    id v47 = *(void **)(v44 + 16);
    if (*(unsigned char *)(v44 + 24) != 1)
    {
      swift_bridgeObjectRetain_n();
      id v40 = v47;
      uint64_t v41 = (void *)MEMORY[0x24C522820](v45, v46);
      swift_bridgeObjectRelease();
      id v42 = objc_msgSend(self, sel_animationWithKeyPath_, v41);

      objc_msgSend(v42, sel_setBeginTime_, -1.0);
      objc_msgSend(v42, sel_setDuration_, 1.0);
      objc_msgSend(v42, sel_setFillMode_, v122);
      objc_msgSend(v42, sel_setToValue_, v40);
      objc_msgSend(v42, sel_setRemovedOnCompletion_, 0);
      id v43 = (void *)MEMORY[0x24C522820](v45, v46);
      objc_msgSend(v39, sel_addAnimation_forKey_, v42, v43);

      specialized Set._Variant.insert(_:)((Swift::Int *)&v124, v45, v46);
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
    uint64_t v48 = *(void *)v37;
    uint64_t v49 = *(void *)(*(void *)v37 + 16);
    swift_bridgeObjectRetain();
    if (v49)
    {
      swift_bridgeObjectRetain();
      id v50 = v47;
      unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46);
      if (v52)
      {
        id v53 = *(id *)(*(void *)(v48 + 56) + 8 * v51);
        swift_bridgeObjectRelease();
        objc_msgSend(v53, sel_setValue_, v50);
        id v54 = objc_msgSend(v53, sel_group);
        if (!v54) {
          goto LABEL_115;
        }
        uint64_t v55 = (uint64_t)v54;

        swift_beginAccess();
        unint64_t v56 = v127;
        uint64_t v57 = static Hasher._hash(seed:_:)();
        uint64_t v58 = -1 << *(unsigned char *)(v56 + 32);
        unint64_t v59 = v57 & ~v58;
        if ((*(void *)(v56 + 56 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59))
        {
          uint64_t v60 = *(void *)(v56 + 48);
          if (*(void *)(v60 + 8 * v59) == v55)
          {
LABEL_75:
            swift_endAccess();

            swift_bridgeObjectRelease();
            goto LABEL_45;
          }
          uint64_t v61 = ~v58;
          while (1)
          {
            unint64_t v59 = (v59 + 1) & v61;
            if (((*(void *)(v56 + 56 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59) & 1) == 0) {
              break;
            }
            if (*(void *)(v60 + 8 * v59) == v55) {
              goto LABEL_75;
            }
          }
        }
        char v94 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v125 = v127;
        unint64_t v127 = 0x8000000000000000;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v55, v59, v94);
        unint64_t v127 = v125;
        swift_bridgeObjectRelease();
        goto LABEL_75;
      }
      swift_bridgeObjectRelease();
      id v63 = v126;
      if (v126)
      {
LABEL_59:
        id v64 = v63;
        id v65 = objc_msgSend(v64, sel_count);
        id v66 = objc_msgSend(v64, sel_capacity);

        if ((uint64_t)v65 < (uint64_t)v66) {
          goto LABEL_62;
        }
      }
    }
    else
    {
      id v62 = v47;
      id v63 = v126;
      if (v126) {
        goto LABEL_59;
      }
    }
    id v64 = objc_msgSend(self, sel_groupWithCapacity_, 100);
    id v67 = v126;
    id v126 = v64;

    if (!v64) {
      goto LABEL_114;
    }
    objc_msgSend(v64, sel_setUpdatesAsynchronously_, 0);
LABEL_62:
    id v68 = objc_allocWithZone(MEMORY[0x263F15848]);
    swift_bridgeObjectRetain();
    id v69 = v47;
    id v70 = v64;
    uint64_t v71 = (void *)MEMORY[0x24C522820](v45, v46);
    swift_bridgeObjectRelease();
    id v72 = v69;
    id v73 = objc_msgSend(v68, sel_initWithKeyPath_initialValue_additive_group_, v71, v72, 0, v70);

    objc_msgSend(v39, sel_addPresentationModifier_, v73);
    swift_bridgeObjectRetain();
    id v74 = v73;
    char v75 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v124 = *(void **)v37;
    Swift::Int v76 = (Swift::Int)v124;
    *(void *)uint64_t v37 = 0x8000000000000000;
    unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46);
    uint64_t v79 = *(void *)(v76 + 16);
    BOOL v80 = (v77 & 1) == 0;
    uint64_t v81 = v79 + v80;
    if (__OFADD__(v79, v80)) {
      break;
    }
    char v82 = v77;
    if (*(void *)(v76 + 24) >= v81)
    {
      if ((v75 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v81, v75);
      unint64_t v83 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46);
      if ((v82 & 1) != (v84 & 1)) {
        goto LABEL_116;
      }
      unint64_t v78 = v83;
    }
    uint64_t v38 = v120;
    long long v85 = v124;
    if (v82)
    {
      uint64_t v86 = v124[7];
      uint64_t v87 = 8 * v78;

      *(void *)(v86 + v87) = v74;
    }
    else
    {
      v124[(v78 >> 6) + 8] |= 1 << v78;
      long long v88 = (Swift::Int *)(v85[6] + 16 * v78);
      *long long v88 = v45;
      v88[1] = v46;
      *(void *)(v85[7] + 8 * v78) = v74;
      uint64_t v89 = v85[2];
      BOOL v90 = __OFADD__(v89, 1);
      uint64_t v91 = v89 + 1;
      if (v90) {
        goto LABEL_106;
      }
      v85[2] = v91;
      swift_bridgeObjectRetain();
    }
    *(void *)uint64_t v37 = v85;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v92 = objc_msgSend(v74, sel_group);
    unint64_t v39 = (void *)v121;
    if (!v92) {
      goto LABEL_113;
    }
    uint64_t v93 = (uint64_t)v92;

    swift_beginAccess();
    specialized Set._Variant.insert(_:)((uint64_t *)&v125, v93);
    swift_endAccess();

    swift_bridgeObjectRelease();
LABEL_45:
    if (++v36 == v38)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v2 = v114;
      unint64_t v6 = v118;
      int64_t v8 = v119;
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_117:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void Image.NamedImageProvider.resolve(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v52 = a1;
  uint64_t v4 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v49 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = *(void **)v2;
  uint64_t v7 = *(void *)(v2 + 8);
  unint64_t v8 = *(unsigned int *)(v2 + 16);
  int v9 = *(unsigned __int8 *)(v2 + 20);
  unint64_t v11 = *(void **)(v2 + 24);
  unint64_t v10 = *(void **)(v2 + 32);
  uint64_t v12 = *(void *)(v2 + 48);
  uint64_t v56 = *(void *)(v2 + 40);
  unint64_t v57 = (unint64_t)v11;
  uint64_t v13 = *(void *)(v2 + 64);
  uint64_t v53 = *(void *)(v2 + 56);
  uint64_t v54 = v13;
  int v55 = *(unsigned __int8 *)(v2 + 72);
  id v14 = Image.Location.catalog.getter();
  if (!v14)
  {
    unint64_t v57 = (unint64_t)v6;
    uint64_t v58 = v7;
    LODWORD(v59) = v8;
    BYTE4(v59) = v9;
    uint64_t v60 = (uint64_t)v11;
    uint64_t v61 = (uint64_t)v10;
    uint64_t v62 = v56;
    uint64_t v63 = v12;
    uint64_t v64 = v53;
    uint64_t v65 = v54;
    char v66 = v55;
    Image.NamedImageProvider.resolveError(in:)(a2);
    return;
  }
  uint64_t v50 = a2;
  uint64_t v51 = v7;
  id v68 = v6;
  uint64_t v69 = v7;
  int v70 = v8;
  char v71 = v9;
  id v72 = v11;
  id v73 = v10;
  uint64_t v74 = v56;
  uint64_t v75 = v12;
  uint64_t v76 = v53;
  uint64_t v77 = v54;
  char v78 = v55;
  id v67 = v11;
  uint64_t v15 = v14;
  outlined copy of Image.Location(v11);
  uint64_t v16 = v52;
  Image.NamedImageProvider.vectorInfo(in:from:at:)(v52, (uint64_t *)&v67, (uint64_t)&v79);
  outlined consume of Image.Location(v11);
  if (v79)
  {
    outlined init with take of NamedImage.VectorInfo((uint64_t)&v79, (uint64_t)&v57);
    uint64_t v79 = (uint64_t)v6;
    uint64_t v80 = v51;
    int v81 = v8;
    unsigned __int8 v82 = v9;
    uint64_t v83 = (uint64_t)v11;
    char v84 = v10;
    uint64_t v85 = v56;
    uint64_t v86 = v12;
    uint64_t v87 = v53;
    uint64_t v88 = v54;
    char v89 = v55;
    id v68 = v11;
    outlined copy of Image.Location(v11);
    LOBYTE(v67) = v9;
    Image.NamedImageProvider.resolveVector(info:value:in:at:catalog:)((uint64_t)&v57, v8 | ((unint64_t)v9 << 32), (uint64_t)v16, &v68, v15, v50);

    outlined consume of Image.Location(v11);
    outlined destroy of NamedImage.VectorInfo((id *)&v57);
    return;
  }
  uint64_t v47 = v12;
  id v45 = v15;
  _sypSgWOhTm_10((uint64_t)&v79, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
  char v17 = v55;
  unint64_t v18 = v8;
  int v46 = v9;
  uint64_t v20 = v53;
  uint64_t v19 = v54;
  char v21 = v16;
  uint64_t v22 = v56;
  uint64_t v48 = v6;
  if (v10 != (void *)2)
  {
    unint64_t v23 = v18;
    BOOL v24 = v21;
    unint64_t v57 = (unint64_t)v10;
    outlined copy of Image.Location(v10);
    id v25 = Image.Location.catalog.getter();
    if (v25)
    {
      id v26 = v25;
      id v68 = v48;
      uint64_t v69 = v51;
      id v43 = v11;
      unint64_t v44 = v23;
      int v70 = v23;
      unsigned __int8 v27 = v46;
      char v71 = v46;
      id v72 = v11;
      id v73 = v10;
      uint64_t v28 = v47;
      uint64_t v74 = v22;
      uint64_t v75 = v47;
      uint64_t v76 = v20;
      uint64_t v77 = v19;
      char v78 = v17;
      id v67 = v10;
      unint64_t v29 = v24;
      uint64_t v30 = v26;
      Image.NamedImageProvider.vectorInfo(in:from:at:)(v29, (uint64_t *)&v67, (uint64_t)&v79);
      if (v79)
      {
        outlined init with take of NamedImage.VectorInfo((uint64_t)&v79, (uint64_t)&v57);
        uint64_t v79 = (uint64_t)v48;
        uint64_t v80 = v51;
        int v81 = v44;
        unsigned __int8 v82 = v27;
        uint64_t v83 = (uint64_t)v43;
        char v84 = v10;
        uint64_t v85 = v22;
        uint64_t v86 = v28;
        uint64_t v87 = v20;
        uint64_t v88 = v19;
        char v89 = v17;
        LOBYTE(v67) = v27;
        id v68 = v10;
        Image.NamedImageProvider.resolveVector(info:value:in:at:catalog:)((uint64_t)&v57, v44 | ((unint64_t)v27 << 32), (uint64_t)v52, &v68, v30, v50);

        outlined destroy of NamedImage.VectorInfo((id *)&v57);
        outlined consume of Image.Location?(v10);
        return;
      }
      outlined consume of Image.Location?(v10);

      _sypSgWOhTm_10((uint64_t)&v79, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
      unint64_t v11 = v43;
      LODWORD(v18) = v44;
      char v21 = v52;
    }
    else
    {
      outlined consume of Image.Location?(v10);
      char v21 = v24;
      LODWORD(v18) = v23;
    }
  }
  unsigned __int8 v31 = v46;
  if ((unint64_t)v11 < 2) {
    goto LABEL_16;
  }
  int v32 = v18;
  uint64_t v79 = (uint64_t)v11;
  uint64_t v33 = v21[1];
  unint64_t v57 = *v21;
  uint64_t v58 = v33;
  outlined copy of Image.Location(v11);
  swift_retain();
  uint64_t v34 = v51;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v36 = (uint64_t)v48;
  uint64_t v35 = v49;
  NamedImage.BitmapKey.init(name:location:in:)((uint64_t)v48, v34, &v79, (uint64_t *)&v57, v49);
  if (one-time initialization token for sharedCache != -1) {
    swift_once();
  }
  uint64_t v37 = *(void **)(v35 + 32);
  uint64_t v79 = static NamedImage.sharedCache;
  uint64_t v80 = unk_26B0EE920;
  id v68 = v37;
  NamedImage.Cache.subscript.getter(v35, &v68, (uint64_t)&v57);
  char v38 = v63;
  if (v63 == 3)
  {
    outlined destroy of NamedImage.BitmapKey(v35, type metadata accessor for NamedImage.BitmapKey);
    uint64_t v22 = v56;
    char v17 = v55;
    uint64_t v20 = v53;
    uint64_t v19 = v54;
    LODWORD(v18) = v32;
LABEL_16:
    unint64_t v57 = (unint64_t)v48;
    uint64_t v58 = v51;
    LODWORD(v59) = v18;
    BYTE4(v59) = v31;
    uint64_t v60 = (uint64_t)v11;
    uint64_t v61 = (uint64_t)v10;
    uint64_t v62 = v22;
    uint64_t v63 = v47;
    uint64_t v64 = v20;
    uint64_t v65 = v19;
    char v66 = v17;
    swift_retain();
    swift_retain();
    Image.NamedImageProvider.resolveError(in:)(v50);
    swift_release();
    swift_release();

    return;
  }
  uint64_t v40 = v60;
  uint64_t v41 = v62;
  uint64_t v42 = v58;
  id v43 = (void *)v59;
  unint64_t v44 = v57;
  uint64_t v79 = v36;
  uint64_t v80 = v34;
  int v81 = v32;
  unsigned __int8 v82 = v31;
  uint64_t v83 = (uint64_t)v11;
  char v84 = v10;
  uint64_t v85 = v56;
  uint64_t v86 = v47;
  uint64_t v87 = v53;
  uint64_t v88 = v54;
  char v89 = v55;
  uint64_t v39 = v61;
  Image.NamedImageProvider.resolveBitmap(key:info:in:)(v35, (uint64_t)&v57, v52, v50);

  outlined destroy of NamedImage.BitmapKey(v35, type metadata accessor for NamedImage.BitmapKey);
  outlined consume of NamedImage.BitmapInfo?((void *)v44, v42, (uint64_t)v43, v40, v39, v41, v38);
}

uint64_t type metadata accessor for NamedImage.BitmapKey(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for NamedImage.BitmapKey);
}

id Image.Location.catalog.getter()
{
  uint64_t v1 = *v0;
  if (!*v0)
  {
    if (one-time initialization token for systemAssetManager != -1) {
      swift_once();
    }
    id v2 = (id)static Image.Location.systemAssetManager;
    goto LABEL_9;
  }
  if (v1 == (void *)1)
  {
    if (one-time initialization token for privateSystemAssetManager != -1) {
      swift_once();
    }
    id v2 = (id)static Image.Location.privateSystemAssetManager;
LABEL_9:
    id v3 = v2;
    return v2;
  }
  uint64_t v4 = one-time initialization token for sharedCache;
  id v5 = v1;
  if (v4 != -1) {
    swift_once();
  }
  swift_retain();
  swift_retain();
  id v2 = NamedImage.Cache.subscript.getter(v5);
  outlined consume of Image.Location(v1);
  swift_release();
  swift_release();
  return v2;
}

uint64_t Image.NamedImageProvider.vectorInfo(in:from:at:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a2;
  long long v7 = v3[3];
  long long v27 = v3[2];
  v28[0] = v7;
  *(_OWORD *)((char *)v28 + 9) = *(long long *)((char *)v3 + 57);
  long long v8 = v3[1];
  long long v25 = *v3;
  long long v26 = v8;
  uint64_t v9 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v9, v24);
    swift_release_n();
    uint64_t v10 = swift_release_n();
    __int16 v11 = LOBYTE(v24[0]);
    __int16 v12 = BYTE1(v24[0]);
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>);
    BloomFilter.init(hashValue:)(v13);
    uint64_t v14 = swift_retain_n();
    uint64_t v15 = specialized find1<A>(_:key:filter:)(v14, v24[0]);
    if (v15)
    {
      __int16 v11 = *(unsigned __int8 *)(v15 + 72);
      __int16 v12 = *(unsigned __int8 *)(v15 + 73);
    }
    else
    {
      __int16 v11 = 0;
      __int16 v12 = 3;
    }
    uint64_t v10 = swift_release_n();
  }
  MEMORY[0x270FA5388](v10);
  specialized Image.Location.findName<A>(_:base:body:)(v29, v11 | (v12 << 8), (void (*)(void))partial apply for closure #1 in Image.NamedImageProvider.vectorInfo(in:from:at:), v6, (uint64_t)v24);
  if (!v24[0]) {
    return _sypSgWObTm_4((uint64_t)v24, a3, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
  }
  uint64_t v16 = *a1;
  if (!a1[1])
  {
    v23[0] = *a1;
    v23[1] = 0;
    swift_retain_n();
    if (specialized static ShouldRedactContentKey.value(in:)(v23))
    {
      uint64_t v18 = swift_retain_n();
      char v19 = specialized closure #1 in PropertyList.subscript.getter(v18);
      swift_release_n();
      if ((v19 & 1) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      swift_release_n();
    }
    return _sypSgWObTm_4((uint64_t)v24, a3, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
  }
  swift_retain_n();
  swift_retain_n();
  char v17 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v16);
  swift_release_n();
  swift_release_n();
  if ((v17 & 1) == 0) {
    return _sypSgWObTm_4((uint64_t)v24, a3, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
  }
LABEL_13:
  if (one-time initialization token for systemAssetManager != -1) {
    swift_once();
  }
  uint64_t v22 = 0;
  id v20 = (id)static Image.Location.systemAssetManager;
  Image.NamedImageProvider.vectorInfo(name:in:from:at:)(0x662E656C63726963, (void *)0xEB000000006C6C69, a1, v20, &v22, a3);

  return _sypSgWOhTm_10((uint64_t)v24, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
}

uint64_t specialized Image.Location.findName<A>(_:base:body:)@<X0>(Swift::String name@<0:X1, 8:X2>, __int16 a2@<W0>, void (*a3)(void)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  object = name._object;
  uint64_t countAndFlagsBits = name._countAndFlagsBits;
  if ((a2 & 4) != 0) {
    __int16 v9 = 3;
  }
  else {
    __int16 v9 = HIBYTE(a2);
  }
  if ((a2 & 4) != 0) {
    __int16 v10 = ((a2 & 1) == 0) | a2 & 0xFB;
  }
  else {
    __int16 v10 = a2;
  }
  if ((v10 & 2) != 0)
  {
    uint64_t v14 = a5;
    v15[0] = 0x6873616C732ELL;
    v15[1] = 0xE600000000000000;
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = String.init<A>(_:)();
    v16._object = v12;
    String.append<A>(contentsOf:)();
    __int16 v11 = v10 | (v9 << 8);
    specialized Image.Location.findShapeAndFillVariantName<A>(_:base:body:)(v16, v11, a3, a4, (uint64_t)v15);
    swift_bridgeObjectRelease();
    if (v15[0]) {
      return outlined init with take of NamedImage.VectorInfo((uint64_t)v15, v14);
    }
    _sypSgWOhTm_10((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
    a5 = v14;
  }
  else
  {
    __int16 v11 = v10 | (v9 << 8);
  }
  v17._uint64_t countAndFlagsBits = countAndFlagsBits;
  v17._object = object;
  return specialized Image.Location.findShapeAndFillVariantName<A>(_:base:body:)(v17, v11, a3, a4, a5);
}

uint64_t specialized Image.Location.findShapeAndFillVariantName<A>(_:base:body:)@<X0>(Swift::String name@<0:X1, 8:X2>, __int16 a2@<W0>, void (*a3)(void)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  object = name._object;
  uint64_t countAndFlagsBits = name._countAndFlagsBits;
  LOWORD(v31[0]) = a2;
  Swift::String_optional v11 = SymbolVariants.shapeVariantName(name:)(name);
  if (v11.value._object)
  {
    uint64_t v27 = a5;
    v31[0] = a4;
    uint64_t v12 = Image.Location.aliasedName(_:)(v11.value._countAndFlagsBits, (uint64_t)v11.value._object);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v29 = a4;
    __int16 v28 = a2;
    uint64_t v15 = Image.Location.fillVariant(_:name:)((unsigned __int8 *)&v28, v12, v14);
    if (v16)
    {
      uint64_t v17 = v15;
      uint64_t v18 = v16;
      swift_bridgeObjectRelease();
      uint64_t v12 = v17;
      uint64_t v14 = v18;
    }
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))a3)(v30, v12, v14);
    swift_bridgeObjectRelease();
    if (v30[0])
    {
      outlined init with take of NamedImage.VectorInfo((uint64_t)v30, (uint64_t)v31);
      uint64_t v19 = v27;
      return outlined init with take of NamedImage.VectorInfo((uint64_t)v31, v19);
    }
    _sypSgWOhTm_10((uint64_t)v30, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
    a5 = v27;
  }
  v31[0] = a4;
  LOWORD(v29) = a2;
  v30[0] = a4;
  uint64_t v20 = Image.Location.aliasedName(_:)(countAndFlagsBits, (uint64_t)object);
  uint64_t v22 = Image.Location.fillVariant(_:name:)((unsigned __int8 *)&v29, v20, v21);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if (v24)
  {
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))a3)(v30, v22, v24);
    swift_bridgeObjectRelease();
    if (v30[0])
    {
      outlined init with take of NamedImage.VectorInfo((uint64_t)v30, (uint64_t)v31);
      uint64_t v19 = a5;
      return outlined init with take of NamedImage.VectorInfo((uint64_t)v31, v19);
    }
    _sypSgWOhTm_10((uint64_t)v30, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
  }
  v31[0] = a4;
  uint64_t v26 = Image.Location.aliasedName(_:)(countAndFlagsBits, (uint64_t)object);
  a3(v26);
  return swift_bridgeObjectRelease();
}

uint64_t Image.Location.aliasedName(_:)(uint64_t a1, uint64_t a2)
{
  if (*v2)
  {
    if (*v2 != 1) {
      goto LABEL_13;
    }
    if (one-time initialization token for privateSystemAssetManager != -1) {
      swift_once();
    }
    id v5 = off_26B0EB018;
    if (!*((void *)off_26B0EB018 + 2)) {
      goto LABEL_13;
    }
  }
  else
  {
    if (one-time initialization token for systemAssetManager != -1) {
      swift_once();
    }
    id v5 = off_26B0EE3C0;
    if (!*((void *)off_26B0EE3C0 + 2)) {
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRetain();
    return a1;
  }
  a1 = *(void *)(v5[7] + 16 * v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    __int16 v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);

  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = a3 & ~v4;
  if ((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    long long v8 = ~v4;
    do
    {
      uint64_t v9 = *(void *)(v3 + 48);
      if (*(void *)(v9 + 16 * v5) == a1)
      {
        __int16 v10 = *(uint64_t (**)(uint64_t))(**(void **)(v9 + 16 * v5 + 8) + 80);
        swift_retain();
        LOBYTE(v10) = v10(a2);
        swift_release();
        if (v10) {
          break;
        }
      }
      uint64_t v5 = (v5 + 1) & v8;
    }
    while (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  void *v8;

  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    char v7 = ~v5;
    do
    {
      long long v8 = (void *)(*(void *)(v3 + 48) + 16 * result);
      if (v8[1] == a2 && *v8 == a1) {
        break;
      }
      uint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  int32x4_t v7;

  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    v7.i64[0] = a1;
    v7.i64[1] = a2;
    do
    {
      if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)(*(void *)(v3 + 48) + 16 * result), v7)), 0xFuLL))))break; {
      uint64_t result = (result + 1) & ~v5;
      }
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    char v7 = ~v5;
    long long v8 = *(void *)(v3 + 48);
    do
    {
      if (*(void *)(v8 + 16 * result) == a1)
      {
        uint64_t v9 = *(void *)(v8 + 16 * result + 8);
        if (__OFSUB__(a2, v9))
        {
          __break(1u);
          return result;
        }
        if (v9 == a2) {
          return result;
        }
      }
      uint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    char v7 = ~v5;
    do
    {
      long long v8 = (uint64_t *)(*(void *)(v3 + 48) + 16 * result);
      __int16 v10 = *v8;
      uint64_t v9 = v8[1];
      if (v10 == a1 && v9 == a2) {
        break;
      }
      uint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t Image.Location.fillVariant(_:name:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *a1;
  int v7 = a1[1];
  uint64_t v8 = *v3;
  if (one-time initialization token for fill != -1) {
    swift_once();
  }
  if ((static SymbolVariants.fill & ~v6) != 0) {
    return 0;
  }
  if (HIBYTE(static SymbolVariants.fill) != 3 && (v7 == 3 || v7 != HIBYTE(static SymbolVariants.fill))) {
    return 0;
  }
  if (v8)
  {
    if (v8 != 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = String.init<A>(_:)();
      String.append<A>(contentsOf:)();
      return v15;
    }
    if (one-time initialization token for privateSystemAssetManager != -1) {
      swift_once();
    }
    __int16 v10 = off_26B0EB010;
    if (!*((void *)off_26B0EB010 + 2)) {
      return 0;
    }
  }
  else
  {
    if (one-time initialization token for systemAssetManager != -1) {
      swift_once();
    }
    __int16 v10 = off_26B0EE3B8;
    if (!*((void *)off_26B0EE3B8 + 2)) {
      return 0;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = *(void *)(v10[7] + 16 * v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t partial apply for closure #1 in Image.NamedImageProvider.vectorInfo(in:from:at:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t *)v3[3];
  uint64_t v5 = (void *)v3[4];
  int v7 = (void *)v3[5];
  return Image.NamedImageProvider.vectorInfo(name:in:from:at:)(a1, a2, v4, v5, &v7, a3);
}

Swift::String_optional __swiftcall SymbolVariants.shapeVariantName(name:)(Swift::String name)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  switch(*(unsigned char *)(v1 + 1))
  {
    case 3:
      break;
    default:
      swift_bridgeObjectRetain();
      uint64_t v8 = String.init<A>(_:)();
      uint64_t v9 = v4;
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      uint64_t v2 = v8;
      uint64_t v3 = v9;
      break;
  }
  uint64_t v5 = v2;
  int v6 = v3;
  result.value._object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

id *outlined destroy of NamedImage.VectorInfo(id *a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolVariantsKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolVariantsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolVariantsKey>>);
    }
  }
}

void outlined consume of Image.Location?(id a1)
{
  if (a1 != (id)2) {
    outlined consume of Image.Location(a1);
  }
}

uint64_t protocol witness for FontProvider.resolve(in:) in conformance Font.PlatformFontProvider(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 72))(*v1);
}

uint64_t Image.NamedImageProvider.resolveError(in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v5 = *(void **)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v21 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  char v9 = *(unsigned char *)(v1 + 72);
  if ((unint64_t)v5 >= 2)
  {
    id v12 = objc_msgSend(v5, sel_bundlePath);
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v20 = v9;
    BOOL v14 = v13;

    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = v4;
    v15._object = v3;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v16._object = (void *)0x8000000246221200;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = v19;
    v17._object = v14;
    String.append(_:)(v17);
    char v9 = v20;
    swift_bridgeObjectRelease();
    specialized static Log.externalWarning(_:)(0xD000000000000010, 0x80000002462211E0);
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(v5);
  }
  else
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = v4;
    v10._object = v3;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v11._object = (void *)0x80000002462211C0;
    String.append(_:)(v11);
    specialized static Log.externalWarning(_:)(0xD000000000000011, 0x80000002462211A0);
    swift_bridgeObjectRelease();
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 44) = 0;
  *(unsigned char *)(a1 + 60) = 1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 50397442;
  *(void *)(a1 + 104) = v21;
  *(void *)(a1 + 112) = v6;
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = v9;
  *(unsigned char *)(a1 + 153) = 3;
  *(_DWORD *)(a1 + 156) = 0;
  *(unsigned char *)(a1 + 160) = 1;
  *(void *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 178) = 0;

  return outlined copy of AccessibilityImageLabel?(v21, v6, v7);
}

uint64_t specialized static Log.externalWarning(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for unlocatedIssuesLog != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v4, (uint64_t)static Log.unlocatedIssuesLog);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  swift_bridgeObjectRetain_n();
  char v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v15[0] = a1;
    id v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v16 = v13;
    *(_DWORD *)id v12 = 136446210;
    swift_bridgeObjectRetain();
    v15[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15[0], a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_245728000, v9, v10, "%{public}s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C527CC0](v13, -1, -1);
    MEMORY[0x24C527CC0](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for FontProvider.resolve(in:) in conformance Font.StaticModifierProvider<A>(char *a1, uint64_t a2)
{
  return Font.StaticModifierProvider.resolve(in:)(a1, *v2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

void type metadata accessor for (String, CGFloat)()
{
  if (!lazy cache variable for type metadata for (String, CGFloat))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, CGFloat));
    }
  }
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance Font.FeatureSettingModifier(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    uint64_t v3 = *a1;
    CFNumberRef isa = Int._bridgeToObjectiveC()().super.super.isa;
    CFNumberRef v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CTFontDescriptorRef CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

void type metadata accessor for (CFStringRef, [String])()
{
  if (!lazy cache variable for type metadata for (CFStringRef, [String]))
  {
    type metadata accessor for CFStringRef(255);
    type metadata accessor for Int?(255, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef, [String]));
    }
  }
}

void type metadata accessor for (CFStringRef, CGFloat)()
{
  if (!lazy cache variable for type metadata for (CFStringRef, CGFloat))
  {
    type metadata accessor for CFStringRef(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef, CGFloat));
    }
  }
}

uint64_t protocol witness for FontProvider.resolve(in:) in conformance Font.PrivateTextStyleProvider(__int16 *a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = *((unsigned __int8 *)v1 + 24);
  uint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = *((void *)a1 + 2);
  char v8 = *((unsigned char *)a1 + 24);
  char v9 = *((unsigned char *)a1 + 25);
  __int16 v11 = *a1;
  uint64_t v12 = v6;
  uint64_t v13 = v7;
  char v14 = v8;
  char v15 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(v7 + 40))(v3, v2, v4, v5, &v11);
}

void protocol witness for static FontDefinition.resolvePrivateTextStyleFont(textStyle:design:weight:in:) in conformance DefaultFontDefinition(uint64_t a1, void *a2, uint64_t a3, char a4, char *a5)
{
  unsigned __int8 v5 = a5[1];
  char v7 = *a5;
  unsigned __int8 v6 = v5;
  specialized static CTFontDescriptorRef.fontDescriptor(textStyle:design:weight:sizeCategory:legibilityWeight:)(a1, a2, a3, a4 & 1, &v7, &v6);
}

void type metadata accessor for Unmanaged<DynamicViewList<AnyView>.Item>()
{
  if (!lazy cache variable for type metadata for Unmanaged<DynamicViewList<AnyView>.Item>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for DynamicViewList<AnyView>.Item, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewList.Item);
    unint64_t v0 = type metadata accessor for Unmanaged();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Unmanaged<DynamicViewList<AnyView>.Item>);
    }
  }
}

void type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void protocol witness for Collection.subscript.read in conformance SubviewsCollection(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of Subview(*a1);

  free(v1);
}

uint64_t outlined destroy of Subview(uint64_t a1)
{
  return a1;
}

void (*protocol witness for Collection.subscript.read in conformance SubviewsCollection(void *a1, uint64_t *a2))(uint64_t *a1)
{
  uint64_t v4 = malloc(0x60uLL);
  *a1 = v4;
  _VariadicView_Children.subscript.getter(*a2, (uint64_t)v4);
  return protocol witness for Collection.subscript.read in conformance SubviewsCollection;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AnyView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static DynamicView.makeDynamicView(metadata:view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static DynamicView.makeDynamicView(metadata:view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)a2;
  int v20 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  long long v21 = *(_OWORD *)(a2 + 56);
  long long v22 = *(_OWORD *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 72);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v30 = *(_OWORD *)(a2 + 32);
  long long v31 = v10;
  long long v32 = *(_OWORD *)(a2 + 64);
  LODWORD(v33) = *(_DWORD *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v28 = *(_OWORD *)a2;
  long long v29 = v11;
  _ViewInputs.makeIndirectOutputs()((uint64_t)&v25);
  uint64_t v12 = v25;
  int v13 = v26;
  int v14 = v27;
  id v15 = (id)AGSubgraphGetCurrent();
  if (!v15) {
    __break(1u);
  }
  uint64_t v16 = v15;
  LODWORD(v28) = a1;
  *((void *)&v28 + 1) = v4;
  LODWORD(v29) = v20;
  *((void *)&v29 + 1) = v5;
  long long v30 = v22;
  *(void *)&long long v31 = v7;
  *((void *)&v31 + 1) = v6;
  long long v32 = v21;
  uint64_t v33 = v8;
  int v34 = v9;
  uint64_t v35 = v12;
  int v36 = v13;
  int v37 = v14;
  id v38 = v15;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewInputs(a2);
  type metadata accessor for DynamicViewList<AnyView>.Item(0, &lazy cache variable for type metadata for DynamicViewContainer<AnyView>.Value, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for DynamicViewContainer.Value);
  type metadata accessor for DynamicViewList<AnyView>.Item(0, &lazy cache variable for type metadata for DynamicViewContainer<AnyView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for DynamicViewContainer);
  lazy protocol witness table accessor for type DynamicViewList<AnyView> and conformance DynamicViewList<A>(&lazy protocol witness table cache variable for type DynamicViewContainer<AnyView> and conformance DynamicViewContainer<A>, &lazy cache variable for type metadata for DynamicViewContainer<AnyView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for DynamicViewContainer);
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = AGGraphSetFlags();
  uint64_t v18 = *(void *)(v12 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v19 += 24;
      --v18;
    }
    while (v18);
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (v14 != *MEMORY[0x263F288F8]) {
    uint64_t result = AGGraphSetIndirectDependency();
  }
  *(void *)a3 = v12;
  *(_DWORD *)(a3 + 8) = v13;
  *(_DWORD *)(a3 + 12) = v14;
  return result;
}

void type metadata accessor for DynamicViewList<AnyView>.Item(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type AnyView and conformance AnyView();
    unint64_t v7 = a3(a1, &type metadata for AnyView, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyView and conformance AnyView()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyView and conformance AnyView;
  if (!lazy protocol witness table cache variable for type AnyView and conformance AnyView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyView and conformance AnyView);
  }
  return result;
}

uint64_t type metadata accessor for DynamicViewContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DynamicViewContainer.Value()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ViewOutputs.attachIndirectOutputs(to:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  int v4 = *((_DWORD *)a1 + 3);
  int v5 = *((_DWORD *)v1 + 2);
  int v6 = *((_DWORD *)v1 + 3);
  uint64_t v11 = *v1;
  int v12 = v5;
  uint64_t v9 = v2;
  int v10 = v3;
  uint64_t result = PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v9);
  if (v6 != *MEMORY[0x263F288F8] && v4 != *MEMORY[0x263F288F8])
  {
    return AGGraphSetIndirectAttribute();
  }
  return result;
}

uint64_t _ViewInputs.init(withoutGeometry:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v15 = *a1;
  int v14 = *((_DWORD *)a1 + 2);
  uint64_t v13 = a1[2];
  uint64_t v17 = a1[5];
  uint64_t v4 = specialized static ViewGraph.current.getter();
  int v16 = *(_DWORD *)(v4 + 248);
  int v5 = specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for ViewSize, 0);
  memset(v18, 0, sizeof(v18));
  uint64_t v19 = 0;
  int v6 = specialized GraphHost.intern<A>(_:for:id:)((uint64_t)v18, (Swift::UInt)&type metadata for ViewTransform, 0);
  int v7 = *(_DWORD *)(v4 + 248);
  uint64_t v8 = MEMORY[0x263F8EE78];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
  uint64_t v9 = v2[3];
  uint64_t v10 = v2[4];
  LODWORD(v2) = Attribute.init<A>(body:value:flags:update:)();
  int v11 = *MEMORY[0x263F288F8];
  uint64_t result = swift_release();
  *(void *)a2 = v15;
  *(_DWORD *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = v17;
  *(void *)(a2 + 48) = v8;
  *(_DWORD *)(a2 + 56) = v2;
  *(_DWORD *)(a2 + 60) = v6;
  *(_DWORD *)(a2 + 64) = v16;
  *(_DWORD *)(a2 + 68) = v7;
  *(_DWORD *)(a2 + 72) = v5;
  *(_DWORD *)(a2 + 76) = v11;
  *(_DWORD *)(a2 + 80) = v11;
  return result;
}

double _ViewInputs.withoutGeometryDependencies.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 2);
  uint64_t v5 = v1[2];
  int v6 = *((_DWORD *)v1 + 9);
  int v18 = *((_DWORD *)v1 + 8);
  uint64_t v8 = v1[5];
  uint64_t v7 = v1[6];
  int v9 = *((_DWORD *)v1 + 14);
  uint64_t v10 = specialized static ViewGraph.current.getter();
  *(void *)&long long v19 = v1[3];
  *(void *)&v21[4] = *(uint64_t *)((char *)v1 + 76);
  LODWORD(v20) = v9;
  DWORD2(v20) = *(_DWORD *)(v10 + 248);
  memset(v22, 0, sizeof(v22));
  uint64_t v23 = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DWORD1(v20) = specialized GraphHost.intern<A>(_:for:id:)((uint64_t)v22, (Swift::UInt)&type metadata for ViewTransform, 0);
  int v11 = specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for ViewSize, 0);
  HIDWORD(v20) = *(_DWORD *)(v10 + 248);
  *(_DWORD *)long long v21 = v11;
  uint64_t v12 = *(void *)(v7 + 16);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 32;
    while (*(ValueMetadata **)(v7 + v14) != &type metadata for DisplayList.Key)
    {
      ++v13;
      v14 += 16;
      if (v12 == v13) {
        goto LABEL_7;
      }
    }
    specialized Array.remove(at:)(v13);
    uint64_t v12 = *(void *)(v7 + 16);
    if (!v12) {
      goto LABEL_10;
    }
LABEL_7:
    unint64_t v15 = 0;
    uint64_t v16 = 32;
    while (*(ValueMetadata **)(v7 + v16) != &type metadata for ViewRespondersKey)
    {
      ++v15;
      v16 += 16;
      if (v12 == v15) {
        goto LABEL_10;
      }
    }
    specialized Array.remove(at:)(v15);
    swift_release();
  }
  else
  {
LABEL_10:
    swift_release();
  }
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  HIDWORD(v19) = (v6 & 0xFFFFFFFD ^ 0x20) & v6;
  DWORD2(v19) = v18 | 0x1C;
  *(_OWORD *)(a1 + 24) = v19;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = v20;
  double result = *(double *)v21;
  *(void *)(a1 + 72) = *(void *)v21;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)&v21[8];
  return result;
}

uint64_t specialized GraphHost.intern<A>(_:for:id:)(uint64_t a1, Swift::UInt a2, char a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v10 = v6;
  swift_beginAccess();
  uint64_t v13 = *(void *)(v6 + 120);
  if (*(void *)(v13 + 16))
  {
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v15) {
      return *(unsigned int *)(*(void *)(v13 + 56) + 4 * v14);
    }
  }
  swift_beginAccess();
  id v17 = *(id *)(v10 + 24);
  AGGraphClearUpdate();
  Swift::UInt v21 = a2;
  id v18 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, a4, a5, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(a6, a4, a5);
  swift_bridgeObjectRetain();
  uint64_t v16 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v22 = *(void *)(v10 + 120);
  *(void *)(v10 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v21, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(v10 + 120) = v22;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v16;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _VariadicView_Children.Element@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 80);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v10 = v4;
  int v11 = v5;
  uint64_t v12 = v6;
  long long v8 = *(_OWORD *)(a1 + 40);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 72);
  int v17 = v7;
  return static _ViewList_View._makeView(view:inputs:)(&OffsetAttribute2, &v10, a2);
}

uint64_t static _ViewList_View._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  int v29 = *a1;
  int v4 = *((_DWORD *)a2 + 2);
  unint64_t v5 = a2[2];
  unsigned int v27 = *((_DWORD *)a2 + 7);
  unsigned int v28 = *((_DWORD *)a2 + 6);
  unsigned int v6 = *((_DWORD *)a2 + 9);
  unint64_t v7 = a2[5];
  unint64_t v8 = a2[6];
  unsigned int v9 = *((_DWORD *)a2 + 15);
  unsigned int v25 = *((_DWORD *)a2 + 14);
  unsigned int v26 = *((_DWORD *)a2 + 8);
  unsigned int v10 = *((_DWORD *)a2 + 16);
  unsigned int v11 = *((_DWORD *)a2 + 17);
  unsigned int v23 = *((_DWORD *)a2 + 19);
  unsigned int v24 = *((_DWORD *)a2 + 18);
  unsigned int v22 = *((_DWORD *)a2 + 20);
  uint64_t v32 = *a2;
  uint64_t v3 = v32;
  LODWORD(v33) = v4;
  unint64_t v34 = v5;
  unint64_t v35 = __PAIR64__(v27, v28);
  unsigned int v36 = v26;
  unsigned int v37 = v6;
  unint64_t v38 = v7;
  unint64_t v39 = v8;
  unint64_t v40 = __PAIR64__(v9, v25);
  unsigned int v41 = v10;
  unsigned int v42 = v11;
  unsigned int v43 = v24;
  unsigned int v44 = v23;
  unsigned int v45 = v22;
  _ViewInputs.makeIndirectOutputs()((uint64_t)v30);
  uint64_t v12 = *(void *)&v30[0];
  int v13 = DWORD2(v30[0]);
  int v14 = HIDWORD(v30[0]);
  uint64_t v31 = 0;
  memset(v30, 0, sizeof(v30));
  LODWORD(v32) = v29;
  uint64_t v33 = v3;
  LODWORD(v34) = v4;
  unint64_t v35 = v5;
  unsigned int v36 = v28;
  unsigned int v37 = v27;
  unint64_t v38 = __PAIR64__(v6, v26);
  int v15 = v14;
  unint64_t v39 = v7;
  unint64_t v40 = v8;
  unsigned int v41 = v25;
  unsigned int v42 = v9;
  unsigned int v43 = v10;
  unsigned int v44 = v11;
  unsigned int v45 = v24;
  unsigned int v46 = v23;
  unsigned int v47 = v22;
  uint64_t v48 = v12;
  int v16 = v13;
  int v49 = v13;
  int v50 = v14;
  id v17 = (id)AGSubgraphGetCurrent();
  if (!v17) {
    __break(1u);
  }
  id v51 = v17;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  outlined init with take of _ViewList_Elements?((uint64_t)v30, (uint64_t)v55);
  memset(&v55[40], 0, 24);
  int v56 = 0;
  char v57 = 1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type PlaceholderInfo and conformance PlaceholderInfo();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  uint64_t result = outlined destroy of PlaceholderInfo((uint64_t)&v32);
  uint64_t v19 = *(void *)(v12 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v20 += 24;
      --v19;
    }
    while (v19);
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (v15 != *MEMORY[0x263F288F8]) {
    uint64_t result = AGGraphSetIndirectDependency();
  }
  *(void *)a3 = v12;
  *(_DWORD *)(a3 + 8) = v16;
  *(_DWORD *)(a3 + 12) = v15;
  return result;
}

uint64_t _ViewInputs.makeIndirectOutputs()@<X0>(uint64_t a1@<X8>)
{
  void (*v8)(uint64_t *__return_ptr);
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  int v3 = *(_DWORD *)(v1 + 36);
  int v4 = *(_DWORD *)(v1 + 56);
  uint64_t v12 = *(void *)(v1 + 48);
  int v13 = v4;
  PreferencesInputs.makeIndirectOutputs()((uint64_t)&v10);
  uint64_t v5 = v10;
  int v6 = v11;
  if ((v3 & 2) != 0)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    unint64_t v8 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                      + 0x80);
    unsigned int v9 = static CoreGlue.shared;
    v8(&v12);

    uint64_t result = AGGraphCreateIndirectAttribute2();
    v6 |= 0x80u;
  }
  else
  {
    uint64_t result = *MEMORY[0x263F288F8];
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

uint64_t CoreGlue.MakeDefaultLayoutComputerResult.init(_:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t outlined init with take of _ViewList_Elements?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ViewList_Elements?(0, &lazy cache variable for type metadata for _ViewList_Elements?, (unint64_t *)&lazy cache variable for type metadata for _ViewList_Elements, (uint64_t)&protocol descriptor for _ViewList_Elements, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlaceholderInfo(uint64_t a1)
{
  return a1;
}

void destroy for PlaceholderInfo(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  if (*(void *)(a1 + 168)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 144);
  }
  swift_release();
  uint64_t v2 = *(void **)(a1 + 192);
}

unint64_t lazy protocol witness table accessor for type PlaceholderInfo and conformance PlaceholderInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaceholderInfo and conformance PlaceholderInfo;
  if (!lazy protocol witness table cache variable for type PlaceholderInfo and conformance PlaceholderInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaceholderInfo and conformance PlaceholderInfo);
  }
  return result;
}

uint64_t specialized GraphHost.intern<A>(_:for:id:)(Swift::UInt a1, char a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 120);
  if (*(void *)(v6 + 16))
  {
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v8) {
      return *(unsigned int *)(*(void *)(v6 + 56) + 4 * v7);
    }
  }
  swift_beginAccess();
  id v10 = *(id *)(v3 + 24);
  AGGraphClearUpdate();
  id v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<ViewSize>, (uint64_t)&type metadata for ViewSize, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewSize> and conformance External<A>, &lazy cache variable for type metadata for External<ViewSize>, (uint64_t)&type metadata for ViewSize);
  uint64_t v9 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(v3 + 120);
  *(void *)(v3 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 120) = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 120);
  if (*(void *)(v6 + 16))
  {
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v8) {
      return *(unsigned int *)(*(void *)(v6 + 56) + 4 * v7);
    }
  }
  swift_beginAccess();
  id v10 = *(id *)(v3 + 24);
  AGGraphClearUpdate();
  id v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for _UnaryViewAdaptor<EmptyView>();
  type metadata accessor for External<_UnaryViewAdaptor<EmptyView>>(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type External<_UnaryViewAdaptor<EmptyView>> and conformance External<A>, type metadata accessor for External<_UnaryViewAdaptor<EmptyView>>);
  uint64_t v9 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(v3 + 120);
  *(void *)(v3 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 120) = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 120);
  if (*(void *)(v6 + 16))
  {
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v8) {
      return *(unsigned int *)(*(void *)(v6 + 56) + 4 * v7);
    }
  }
  swift_beginAccess();
  id v10 = *(id *)(v3 + 24);
  AGGraphClearUpdate();
  id v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<_GeometryGroupEffect>, (uint64_t)&type metadata for _GeometryGroupEffect, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<_GeometryGroupEffect> and conformance External<A>, &lazy cache variable for type metadata for External<_GeometryGroupEffect>, (uint64_t)&type metadata for _GeometryGroupEffect);
  uint64_t v9 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(v3 + 120);
  *(void *)(v3 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 120) = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 120);
  if (*(void *)(v6 + 16))
  {
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v8) {
      return *(unsigned int *)(*(void *)(v6 + 56) + 4 * v7);
    }
  }
  swift_beginAccess();
  id v10 = *(id *)(v3 + 24);
  AGGraphClearUpdate();
  id v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewOrigin> and conformance External<A>, &lazy cache variable for type metadata for External<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin);
  uint64_t v9 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(v3 + 120);
  *(void *)(v3 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 120) = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v9;
}

uint64_t specialized GraphHost.intern<A>(_:for:id:)(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = v3;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 120);
  if (*(void *)(v8 + 16))
  {
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v10) {
      return *(unsigned int *)(*(void *)(v8 + 56) + 4 * v9);
    }
  }
  swift_beginAccess();
  id v12 = *(id *)(v4 + 24);
  AGGraphClearUpdate();
  id v13 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  outlined retain of ViewTransform(a1);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<ViewTransform>, (uint64_t)&type metadata for ViewTransform, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewTransform> and conformance External<A>, &lazy cache variable for type metadata for External<ViewTransform>, (uint64_t)&type metadata for ViewTransform);
  uint64_t v11 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of ViewTransform(a1);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(v4 + 120);
  *(void *)(v4 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 120) = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v11;
}

{
  uint64_t vars8;

  return specialized GraphHost.intern<A>(_:for:id:)(a1, a2, a3, &lazy cache variable for type metadata for External<_ShapeStyle_Pack>, (uint64_t)&type metadata for _ShapeStyle_Pack, &lazy protocol witness table cache variable for type External<_ShapeStyle_Pack> and conformance External<A>);
}

{
  uint64_t vars8;

  return specialized GraphHost.intern<A>(_:for:id:)(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  uint64_t v4 = v3;
  swift_beginAccess();
  unint64_t v7 = *(void *)(v3 + 120);
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v9) {
      return *(unsigned int *)(*(void *)(v7 + 56) + 4 * v8);
    }
  }
  swift_beginAccess();
  uint64_t v11 = *(id *)(v4 + 24);
  AGGraphClearUpdate();
  id v12 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for [ViewResponder](0);
  type metadata accessor for External<[ViewResponder]>(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type External<[ViewResponder]> and conformance External<A>, type metadata accessor for External<[ViewResponder]>);
  swift_bridgeObjectRetain();
  char v10 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int v15 = *(void *)(v4 + 120);
  *(void *)(v4 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 120) = v15;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v10;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  uint64_t v4 = v3;
  swift_beginAccess();
  unint64_t v7 = *(void *)(v3 + 120);
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v9) {
      return *(unsigned int *)(*(void *)(v7 + 56) + 4 * v8);
    }
  }
  swift_beginAccess();
  uint64_t v11 = *(id *)(v4 + 24);
  AGGraphClearUpdate();
  id v12 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for External<GesturePhase<()>>();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type External<GesturePhase<()>> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<GesturePhase<()>>);
  char v10 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int v15 = *(void *)(v4 + 120);
  *(void *)(v4 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 120) = v15;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v10;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  uint64_t v4 = v3;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 120);
  if (*(void *)(v8 + 16))
  {
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v10) {
      return *(unsigned int *)(*(void *)(v8 + 56) + 4 * v9);
    }
  }
  swift_beginAccess();
  id v12 = *(id *)(v4 + 24);
  AGGraphClearUpdate();
  id v13 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  outlined retain of GestureDebug.Data(a1);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<GestureDebug.Data> and conformance External<A>, &lazy cache variable for type metadata for External<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data);
  uint64_t v11 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of GestureDebug.Data(a1);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(v4 + 120);
  *(void *)(v4 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 120) = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v11;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  uint64_t v4 = v3;
  swift_beginAccess();
  unint64_t v7 = *(void *)(v3 + 120);
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v9) {
      return *(unsigned int *)(*(void *)(v7 + 56) + 4 * v8);
    }
  }
  swift_beginAccess();
  uint64_t v11 = *(id *)(v4 + 24);
  AGGraphClearUpdate();
  id v12 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  id v13 = MEMORY[0x263F8D4F8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, &lazy cache variable for type metadata for External<Bool>, v13);
  char v10 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(v4 + 120);
  *(void *)(v4 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 120) = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v10;
}

uint64_t PreferencesInputs.makeIndirectOutputs()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v3 = *v1;
  uint64_t v25 = MEMORY[0x263F8EE78];
  int v26 = 0;
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v20 = a1;
    int v22 = *MEMORY[0x263F288F8];
    swift_bridgeObjectRetain();
    unint64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v3 + 40);
    uint64_t v21 = v3;
    while (v5 < v4)
    {
      Swift::UInt v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      if (AGGraphGetCurrentAttribute() == v22)
      {
        id v9 = (id)AGSubgraphGetCurrent();
        if (!v9) {
          goto LABEL_14;
        }
        char v10 = v9;
        id v11 = (id)AGSubgraphGetGraph();
      }
      else
      {
        id v11 = (id)AGGraphGetAttributeGraph();
      }
      if (!AGGraphGetContext()) {
        goto LABEL_13;
      }
      ++v5;
      swift_retain();

      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      unsigned int v23 = &v19;
      uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
      double v14 = MEMORY[0x270FA5388](AssociatedTypeWitness);
      uint64_t v16 = (char *)&v19 - v15;
      (*(void (**)(Swift::UInt, uint64_t, double))(v8 + 16))(v7, v8, v14);
      v24[0] = 6;
      GraphHost.intern<A>(_:for:id:)((uint64_t)v16, v7, v24, AssociatedTypeWitness);
      swift_release();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
      LODWORD(v16) = AGGraphCreateIndirectAttribute2();
      swift_beginAccess();
      PreferencesOutputs.appendPreference<A>(key:value:)(v7, (int)v16, v7, v8);
      swift_endAccess();
      unint64_t v4 = *(void *)(v21 + 16);
      v6 += 2;
      if (v5 == v4)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v20;
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_11:
    uint64_t result = swift_beginAccess();
    int v18 = v26;
    *(void *)uint64_t v2 = v25;
    *(_DWORD *)(v2 + 8) = v18;
  }
  return result;
}

uint64_t PreferencesOutputs.appendPreference<A>(key:value:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    uint64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    uint64_t v8 = (void *)result;
  }
  unint64_t v8[2] = v11 + 1;
  id v12 = &v8[3 * v11];
  void v12[4] = a1;
  v12[5] = a4;
  *((_DWORD *)v12 + 12) = a2;
  *unint64_t v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, Swift::UInt a2, char a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    int v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(_DWORD *)(v18[7] + 4 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  int v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

uint64_t GraphHost.intern<A>(_:for:id:)(uint64_t a1, Swift::UInt a2, char *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  char v9 = *a3;
  swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 120);
  if (*(void *)(v10 + 16))
  {
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v9);
    if (v12) {
      return *(unsigned int *)(*(void *)(v10 + 56) + 4 * v11);
    }
  }
  swift_beginAccess();
  id v14 = *(id *)(v5 + 24);
  AGGraphClearUpdate();
  id v15 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in GraphHost.intern<A>(_:for:id:)(a1, a4, v19);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v13 = v19[0];
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *(void *)(v5 + 120);
  *(void *)(v5 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, a2, v9, isUniquelyReferenced_nonNull_native);
  *(void *)(v5 + 120) = v18;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v13;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, int a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = a5[6] + 16 * result;
  *(void *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = a3;
  *(_DWORD *)(a5[7] + 4 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t closure #1 in GraphHost.intern<A>(_:for:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 - 8);
  double v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v6);
  uint64_t v14 = a2;
  uint64_t v9 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v13, a2, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a2);
  *a3 = v12[3];
  return result;
}

void type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for _DictionaryStorage();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollablePreferenceKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static ScrollablePreferenceKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a2, a3, MEMORY[0x263F288C8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConstantKey and conformance ConstantKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey;
  if (!lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey;
  if (!lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey);
  }
  return result;
}

unint64_t type metadata accessor for RBDisplayListContents()
{
  unint64_t result = lazy cache variable for type metadata for RBDisplayListContents;
  if (!lazy cache variable for type metadata for RBDisplayListContents)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBDisplayListContents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey;
  if (!lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey;
  if (!lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey);
  }
  return result;
}

uint64_t closure #1 in closure #1 in PlaceholderInfo.makeItem(placeholder:seed:)@<X0>(uint64_t *a1@<X0>, void (*a2)(void *__return_ptr, uint64_t *)@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = a1;
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  int v7 = *((_DWORD *)a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = a1[5];
  uint64_t v9 = a1[6];
  long long v29 = *(_OWORD *)(a1 + 7);
  uint64_t v11 = a1[9];
  int v12 = *((_DWORD *)a1 + 20);
  *(void *)&v42[4] = *(unsigned int *)(a3 + 32);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type PlaceholderViewPhase and conformance PlaceholderViewPhase();
  uint64_t v27 = v5[3];
  *(_DWORD *)(a3 + 208) = Attribute.init<A>(body:value:flags:update:)();
  *(unsigned char *)(a3 + 212) = 0;
  *(void *)unsigned int v42 = v6;
  *(_DWORD *)&v42[8] = v7;
  uint64_t v43 = v8;
  uint64_t v13 = v5[4];
  int v31 = v13;
  *(void *)&long long v44 = v27;
  *((void *)&v44 + 1) = v13;
  uint64_t v45 = v10;
  uint64_t v46 = v9;
  *(_OWORD *)unsigned int v47 = v29;
  *(void *)&v47[16] = v11;
  int v48 = v12;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)v42, 1);
  swift_release();
  swift_beginAccess();
  LODWORD(v11) = *(_DWORD *)(v8 + 16);
  uint64_t v14 = *(void *)(v8 + 24);
  long long v28 = *(_OWORD *)(v8 + 48);
  long long v30 = *(_OWORD *)(v8 + 32);
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = *(void *)(v8 + 72);
  LOBYTE(v5) = *(unsigned char *)(v8 + 80);
  char v17 = *(unsigned char *)(v8 + 81);
  uint64_t v18 = *(void *)(v8 + 88);
  type metadata accessor for AnyHashable2?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = v11;
  *(void *)(v19 + 24) = v14;
  *(_OWORD *)(v19 + 32) = v30;
  *(_OWORD *)(v19 + 48) = v28;
  *(void *)(v19 + 64) = v15;
  *(void *)(v19 + 72) = v16;
  *(unsigned char *)(v19 + 80) = (_BYTE)v5;
  *(unsigned char *)(v19 + 81) = v17;
  *(void *)(v19 + 88) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v43 = v19;
  *(_OWORD *)&v47[4] = *(_OWORD *)(a3 + 68);
  DWORD2(v44) = v31 | 0x1C;
  int v20 = *(_DWORD *)(a3 + 16);
  uint64_t v21 = *(void *)(a3 + 24);
  uint64_t v22 = *(void *)(a3 + 48);
  uint64_t v33 = *(void *)(a3 + 8);
  int v34 = v20;
  uint64_t v35 = v21;
  long long v36 = *(_OWORD *)(a3 + 32);
  uint64_t v37 = v22;
  _GraphInputs.merge(_:ignoringPhase:)((uint64_t)&v33, 1);
  if (*(unsigned char *)(a3 + 212)) {
    __break(1u);
  }
  LODWORD(v44) = *(_DWORD *)(a3 + 208);
  if ((BYTE8(v44) & 0x40) == 0) {
    DWORD2(v44) |= 0x40u;
  }
  specialized Set._Variant.insert(_:)(&v33, *(unsigned int *)(a3 + 32));
  uint64_t v33 = *(void *)v42;
  int v34 = *(_DWORD *)&v42[8];
  uint64_t v35 = v43;
  long long v36 = v44;
  uint64_t v37 = v45;
  uint64_t v38 = v46;
  long long v39 = *(_OWORD *)v47;
  uint64_t v40 = *(void *)&v47[16];
  int v41 = v48;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a2(v32, &v33);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  uint64_t v24 = v32[1];
  *a4 = v32[0];
  a4[1] = v24;
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaceholderViewPhase and conformance PlaceholderViewPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaceholderViewPhase and conformance PlaceholderViewPhase;
  if (!lazy protocol witness table cache variable for type PlaceholderViewPhase and conformance PlaceholderViewPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaceholderViewPhase and conformance PlaceholderViewPhase);
  }
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance _VariadicView_Children(void *a1, uint64_t *a2))(uint64_t *a1)
{
  uint64_t v4 = malloc(0x60uLL);
  *a1 = v4;
  _VariadicView_Children.subscript.getter(*a2, (uint64_t)v4);
  return protocol witness for Collection.subscript.read in conformance _VariadicView_Children;
}

uint64_t _VariadicView_Children.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  memset(v32, 0, 96);
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v5 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v30 = *(void *)(v2 + 48);
  uint64_t v31 = a1;
  outlined init with copy of AnyTrackedValue(v2, (uint64_t)&v23);
  uint64_t v22 = a1;
  uint64_t v6 = *((void *)&v24 + 1);
  uint64_t v7 = v25;
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(&v23, *((uint64_t *)&v24 + 1));
  MEMORY[0x270FA5388](v8);
  long long v21[2] = v2;
  void v21[3] = v32;
  swift_bridgeObjectRetain();
  char v29 = 1;
  ViewList.applySublists(from:list:transform:to:)((uint64_t)&v31, 0x100000000, (uint64_t)&v30, (uint64_t)partial apply for closure #1 in closure #1 in _VariadicView_Children.subscript.getter, (uint64_t)v21, v6, v7);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  static Update.end()();
  _MovableLockUnlock(v5);
  outlined init with copy of _VariadicView_Children.Element?((uint64_t)v32, (uint64_t)&v23);
  if (*((void *)&v24 + 1))
  {
    long long v9 = v26;
    *(_OWORD *)(a2 + 32) = v25;
    *(_OWORD *)(a2 + 48) = v9;
    long long v10 = v28;
    *(_OWORD *)(a2 + 64) = v27;
    *(_OWORD *)(a2 + 80) = v10;
    long long v11 = v24;
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v11;
    return outlined destroy of _VariadicView_Children.Element?((uint64_t)v32);
  }
  uint64_t v12 = v22;
  outlined destroy of _VariadicView_Children.Element?((uint64_t)&v23);
  static os_log_type_t.fault.getter();
  if (one-time initialization token for internalErrorsLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v13 = (void *)static Log.internalErrorsLog;
  type metadata accessor for _ViewList_Elements?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = MEMORY[0x263F8D6C8];
  *(_OWORD *)(v14 + 16) = xmmword_2461B9DC0;
  uint64_t v16 = MEMORY[0x263F8D750];
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  uint64_t v17 = v12;
  *(void *)(v14 + 32) = v12;
  id v18 = v13;
  os_log(_:dso:log:_:_:)();

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 24) = &type metadata for EmptyViewListElements;
  *(void *)(a2 + 32) = &protocol witness table for EmptyViewListElements;
  *(void *)(a2 + 40) = 0;
  if (v17 > 0x7FFFFFFF)
  {
    __break(1u);
  }
  else if (v17 >= (uint64_t)0xFFFFFFFF80000000)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    *(_DWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 52) = ~v17;
    *(void *)(a2 + 56) = v20;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = v20;
    return outlined destroy of _VariadicView_Children.Element?((uint64_t)v32);
  }
  __break(1u);
  return result;
}

uint64_t ViewList.applySublists(from:list:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v9[0] = BYTE4(a2) & 1;
  uint64_t v13 = 2;
  uint64_t v10 = a4;
  uint64_t v11 = a5;
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t (*)(), unsigned char *, uint64_t))(a7 + 48);
  char v12 = BYTE4(a2) & 1;
  return v7(a1, &v13, a2 | ((unint64_t)(BYTE4(a2) & 1) << 32), a3, partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:), v9, a6) & 1;
}

uint64_t outlined init with copy of _VariadicView_Children.Element?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyHashable2?(0, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PlaceholderInfo.updateValue()()
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = AGGraphGetOutputValue();
  if (!OutputValue)
  {
    int v15 = 0;
    if (!*(void *)(v0 + 120))
    {
LABEL_16:
      uint64_t Value = AGGraphGetValue();
      outlined init with copy of _ViewList_View(Value, (uint64_t)v21);
      PlaceholderInfo.makeItem(placeholder:seed:)((uint64_t)v21, v15, (uint64_t)&v17);
      outlined destroy of _ViewList_View((uint64_t)v21);
      uint64_t v14 = v18;
      goto LABEL_17;
    }
LABEL_15:
    PlaceholderInfo.eraseItem()();
    goto LABEL_16;
  }
  uint64_t v2 = OutputValue;
  uint64_t v3 = *(void *)(OutputValue + 24);
  uint64_t v4 = AGGraphGetValue();
  if (v3 != *(void *)(v4 + 64)) {
    goto LABEL_9;
  }
  BOOL v5 = *(_DWORD *)v2 == *(_DWORD *)(v4 + 48) && *(_DWORD *)(v2 + 4) == *(_DWORD *)(v4 + 52);
  if (!v5
    || (uint64_t v6 = *(void *)(v4 + 56),
        uint64_t v7 = *(void *)(v2 + 8),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        char v8 = specialized static Array<A>.== infix(_:_:)(v7, v6),
        swift_bridgeObjectRelease(),
        uint64_t result = swift_bridgeObjectRelease(),
        (v8 & 1) == 0))
  {
LABEL_9:
    uint64_t result = AGGraphGetOutputValue();
    if (result)
    {
      uint64_t v10 = *(void *)(result + 8);
      int v11 = *(_DWORD *)(result + 16);
      uint64_t v12 = *(void *)(result + 24);
      uint64_t v17 = *(void *)result;
      uint64_t v18 = v10;
      int v19 = v11;
      uint64_t v20 = v12;
      uint64_t v13 = AGGraphGetValue();
      outlined init with copy of _ViewList_View(v13, (uint64_t)v21);
      swift_bridgeObjectRetain();
      LOBYTE(v10) = PlaceholderInfo.reuseItem(info:placeholder:)(&v17, v21);
      outlined destroy of _ViewList_View((uint64_t)v21);
      uint64_t v14 = v18;
      if (v10)
      {
LABEL_17:
        v21[0] = v17;
        v21[1] = v14;
        int v22 = v19;
        uint64_t v23 = v20;
        AGGraphSetOutputValue();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t result = AGGraphGetOutputValue();
      if (result)
      {
        int v15 = *(_DWORD *)(result + 16) + 1;
        if (!*(void *)(v0 + 120)) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

BOOL closure #1 in closure #1 in _VariadicView_Children.subscript.getter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 < v3)
  {
    outlined init with copy of AnyTrackedValue((uint64_t)(a1 + 4), (uint64_t)v27);
    uint64_t v18 = a1[3];
    int v19 = *(void **)(a2 + 40);
    uint64_t v21 = 0;
    id v26 = 0;
    uint64_t v8 = a1[2];
    outlined init with copy of AnyTrackedValue((uint64_t)v27, (uint64_t)v20);
    uint64_t v9 = v28;
    uint64_t v10 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    int v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 32);
    swift_bridgeObjectRetain();
    id v12 = v19;
    uint64_t v21 = v11(v9, v10);
    uint64_t v22 = v8;
    uint64_t v23 = v18;
    uint64_t v24 = v4;
    uint64_t v25 = v3;
    id v26 = v12;
    outlined init with copy of _ViewList_View((uint64_t)v20, (uint64_t)v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    outlined destroy of _ViewList_View((uint64_t)v20);
    outlined destroy of _VariadicView_Children.Element?(a3);
    uint64_t v13 = a1[9];
    long long v14 = v30[3];
    *(_OWORD *)(a3 + 32) = v30[2];
    *(_OWORD *)(a3 + 48) = v14;
    *(_OWORD *)(a3 + 64) = v30[4];
    uint64_t v15 = v31;
    long long v16 = v30[1];
    *(_OWORD *)a3 = v30[0];
    *(_OWORD *)(a3 + 16) = v16;
    *(void *)(a3 + 80) = v15;
    *(void *)(a3 + 88) = v13;
    swift_bridgeObjectRetain();
  }
  return v4 >= v3;
}

uint64_t _ViewList_View.init(elements:id:index:count:contentSubgraph:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = a2[1];
  uint64_t v17 = 0;
  uint64_t v22 = 0;
  outlined init with copy of AnyTrackedValue((uint64_t)a1, (uint64_t)v16);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
  uint64_t v18 = *a2;
  uint64_t v19 = v12;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  outlined init with copy of _ViewList_View((uint64_t)v16, a6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of _ViewList_View((uint64_t)v16);
}

uint64_t outlined destroy of _ViewList_View(uint64_t a1)
{
  return a1;
}

void destroy for _ViewList_View(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 80);
}

uint64_t outlined init with copy of _ViewList_View(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _ViewList_View(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  BOOL v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

uint64_t outlined destroy of _VariadicView_Children.Element?(uint64_t a1)
{
  type metadata accessor for AnyHashable2?(0, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for _VariadicView_Children.Element(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void type metadata accessor for AnyHashable2?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t PlaceholderInfo.makeItem(placeholder:seed:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void **)(result + 80);
  if (!v7 || (v8 = (void *)result, uint64_t result = AGSubgraphIsValid(), !result))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = MEMORY[0x263F8EE78];
    *(_DWORD *)(a3 + 16) = a2;
    *(void *)(a3 + 24) = 0x8000000000000000;
    return result;
  }
  int v31 = a2;
  id v9 = *(id *)(v4 + 112);
  id v10 = (id)AGSubgraphGetGraph();
  uint64_t v30 = v7;
  id v11 = v7;
  uint64_t v12 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  uint64_t v13 = *(void *)(v4 + 8);
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  char v14 = specialized closure #1 in PropertyList.subscript.getter(v13);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (v9 != v11 && (v14 & 1) != 0) {
    AGSubgraphAddChild2();
  }
  AGGraphClearUpdate();
  id v15 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in PlaceholderInfo.makeItem(placeholder:seed:)(v12, (uint64_t)v8, v4);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  long long v16 = *(void **)(v4 + 120);
  id v17 = v12;

  *(void *)(v4 + 120) = v12;
  uint64_t v18 = v8[3];
  uint64_t v19 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v18);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
  swift_release();
  *(void *)(v4 + 128) = v20;
  outlined destroy of _ViewList_Elements?(v4 + 144);
  outlined init with copy of AnyTrackedValue((uint64_t)v8, v4 + 144);
  id v21 = (id)AGSubgraphGetGraph();
  id v22 = (id)AGSubgraphGetGraph();

  if (v21 == v22)
  {
  }
  else
  {
    uint64_t result = AGGraphGetCurrentAttribute();
    if (result == *MEMORY[0x263F288F8])
    {
      __break(1u);
      return result;
    }
    int v23 = result;
    uint64_t v24 = *(void **)(v4 + 112);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    *(_DWORD *)(v25 + 24) = v23;
    id v26 = v24;
    uint64_t v27 = AGSubgraphAddObserver();

    swift_release();
    *(void *)(v4 + 192) = v30;
    *(void *)(v4 + 200) = v27;
  }
  uint64_t v28 = v8[7];
  uint64_t v29 = v8[8];
  *(void *)a3 = v8[6];
  *(void *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 16) = v31;
  *(void *)(a3 + 24) = v29;
  return swift_bridgeObjectRetain();
}

uint64_t outlined destroy of _ViewList_Elements?(uint64_t a1)
{
  type metadata accessor for _ViewList_Elements?(0, &lazy cache variable for type metadata for _ViewList_Elements?, (unint64_t *)&lazy cache variable for type metadata for _ViewList_Elements, (uint64_t)&protocol descriptor for _ViewList_Elements, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _ViewList_Elements?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t closure #1 in PlaceholderInfo.makeItem(placeholder:seed:)(void *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for IndirectAttributeMap();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = MEMORY[0x263F8EE80];
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = v7;
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)&v42);
  uint64_t v25 = v44;
  uint64_t v23 = v45;
  __swift_project_boxed_opaque_existential_1(&v42, v44);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a3 + 8);
  int v10 = *(_DWORD *)(a3 + 16);
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(a3 + 48);
  uint64_t v13 = *(void *)(a3 + 56);
  int v14 = *(_DWORD *)(a3 + 88);
  uint64_t v30 = a3;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = partial apply for closure #1 in closure #1 in PlaceholderInfo.makeItem(placeholder:seed:);
  *(void *)(v15 + 24) = &v29;
  uint64_t v41 = v8;
  uint64_t v31 = v9;
  int v32 = v10;
  uint64_t v33 = v11;
  long long v34 = *(_OWORD *)(a3 + 32);
  uint64_t v35 = v12;
  uint64_t v36 = v13;
  long long v37 = *(_OWORD *)(a3 + 64);
  uint64_t v38 = *(void *)(a3 + 80);
  int v39 = v14;
  uint64_t v27 = _s7SwiftUI11_ViewInputsVAcA01_C7OutputsVIegnr_AESgIgngr_A2cEIegnr_AFIegngr_TRTA_0;
  uint64_t v28 = v15;
  long long v16 = *(void (**)(void *, uint64_t *, uint64_t *, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), unsigned char *, uint64_t, uint64_t))(v23 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = a1;
  swift_retain();
  v16(v40, &v41, &v31, v6, partial apply for closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:), v26, v25, v23);
  uint64_t v18 = v40[0];
  uint64_t v19 = v40[1];
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    if (v18)
    {
      int v21 = *(_DWORD *)(a3 + 104);
      int v22 = *(_DWORD *)(a3 + 108);
      uint64_t v31 = *(void *)(a3 + 96);
      int v32 = v21;
      uint64_t v42 = v18;
      int v43 = v19;
      swift_bridgeObjectRetain();
      PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v42);
      if (v22 != *MEMORY[0x263F288F8] && *MEMORY[0x263F288F8] != HIDWORD(v19)) {
        AGGraphSetIndirectAttribute();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    *(void *)(a3 + 184) = v6;
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for IndirectAttributeMap()
{
  return self;
}

uint64_t PreferencesOutputs.attachIndirectOutputs(to:)(uint64_t result)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)result + 16);
    uint64_t v5 = *(void *)result + 48;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (v4)
      {
        uint64_t v7 = v5;
        uint64_t v8 = v4;
        while (*(void *)(v7 - 16) != *(void *)(v2 + 32 + 24 * i))
        {
          v7 += 24;
          if (!--v8) {
            goto LABEL_4;
          }
        }
        AGGraphSetIndirectAttribute();
      }
LABEL_4:
      ;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PlaceholderInfo.Value(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

void destructiveInjectEnumTag for StateOrBinding(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (a2 > 1)
  {
    uint64_t v8 = *(void *)(v4 + 64);
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    size_t v10 = ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v8;
    if (v10 <= v9) {
      size_t v11 = v9;
    }
    else {
      size_t v11 = v10;
    }
    unsigned int v12 = a2 - 2;
    if (v11 < 4)
    {
      unsigned int v13 = v12 >> (8 * v11);
      int v14 = v12 & ~(-1 << (8 * v11));
      a1[v11] = v13 + 2;
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v11] = 2;
      bzero(a1, v11);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 64);
    unint64_t v6 = ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
    unint64_t v7 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v6 <= v7) {
      unint64_t v6 = v7;
    }
    a1[v6] = a2;
  }
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.center.getter(&one-time initialization token for leading, (uint64_t)&static Alignment.leading);
}

ValueMetadata *type metadata accessor for PreferredColorSchemeKey()
{
  return &type metadata for PreferredColorSchemeKey;
}

uint64_t LocationBox.__deallocating_deinit()
{
  LocationBox.deinit();

  return swift_deallocClassInstance();
}

uint64_t LocationBox.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 168) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 184));
  swift_release();
  return v0;
}

double static GraphicsContext.Shading.style<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  *(void *)a3 = AnyShapeStyle.init<A>(_:)((uint64_t)v7, a2);
  double result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(unsigned char *)(a3 + 72) = 4;
  return result;
}

double ViewFrame.round(toMultipleOf:)(double a1)
{
  long long v3 = *v1;
  long long v4 = v1[1];
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(a1);
  double result = *(double *)&v3;
  *uint64_t v1 = v3;
  v1[1] = v4;
  return result;
}

BOOL CGRect.subscript.getter(double a1, double a2, double a3, double a4)
{
  return CGRectIsNull(*(CGRect *)&a1);
}

uint64_t base witness table accessor for _AttributeBody in HostPreferencesWriter<A>()
{
  return swift_getWitnessTable();
}

uint64_t _ZStackLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t result, char a2, uint64_t a3, char a4, int *a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t v43 = result;
  uint64_t v8 = *((void *)a5 + 1);
  if (*(void *)(v8 + 16))
  {
    char v9 = *((unsigned char *)a5 + 16);
    char v10 = *((unsigned char *)a5 + 17);
    int v47 = *a5;
    LODWORD(v57[0]) = *a5;
    v57[1] = v8;
    char v49 = v9;
    char v58 = v9;
    char v59 = v10;
    unint64_t v60 = 0;
    uint64_t v61 = closure #1 in _ZStackLayout.placeSubviews(in:proposal:subviews:cache:);
    uint64_t v62 = 0;
    swift_bridgeObjectRetain_n();
    unint64_t v11 = specialized LazyMapSequence.Iterator.next()();
    unsigned int v12 = (int *)MEMORY[0x263F288F8];
    if (v13)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      double v14 = 0.0;
    }
    else
    {
      double v14 = *(double *)&v11;
      unint64_t v15 = v60;
      unint64_t v16 = *(void *)(v8 + 16);
      if (v60 != v16)
      {
        int v33 = *MEMORY[0x263F288F8];
        uint64_t v34 = v8 + 32 + 12 * v60;
        do
        {
          if (v49)
          {
            if ((v15 & 0x8000000000000000) != 0) {
              goto LABEL_55;
            }
            uint64_t v36 = (_DWORD *)v34;
            if (v15 >= v16) {
              goto LABEL_57;
            }
          }
          else
          {
            if ((v15 & 0x8000000000000000) != 0) {
              goto LABEL_56;
            }
            if (v15 >= v16) {
              goto LABEL_58;
            }
            uint64_t v36 = (_DWORD *)(v8 + 32 + 8 * v15);
          }
          if (v15 >= v16) {
            goto LABEL_54;
          }
          if (*v36 == v33)
          {
            Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
            }
          }
          else
          {
            Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
          }
          uint64_t v38 = *InputValue;
          uint64_t v39 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v39 != -1) {
            swift_once();
          }
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1) {
              swift_once();
            }
            if (!_MovableLockIsOwner(static Update._lock)) {
              goto LABEL_59;
            }
          }
          ++v15;
          double v35 = (*(double (**)(void))(*(void *)v38 + 88))();
          swift_release();
          if (v14 < v35) {
            double v14 = v35;
          }
          unint64_t v16 = *(void *)(v8 + 16);
          v34 += 12;
        }
        while (v15 != v16);
      }
      swift_bridgeObjectRelease_n();
    }
    *(double *)(swift_allocObject() + 16) = v14;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v43;
    *(unsigned char *)(v17 + 24) = a2 & 1;
    *(void *)(v17 + 32) = a3;
    *(unsigned char *)(v17 + 40) = a4 & 1;
    int64x2_t v55 = vdupq_n_s64(0xFFF0000000000000);
    int64x2_t v56 = v55;
    uint64_t v18 = v8 + 32;
    int v48 = *v12;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    unint64_t v19 = 0;
    uint64_t v20 = v8 + 36;
    uint64_t v21 = v8;
    uint64_t v40 = v8 + 36;
LABEL_8:
    int v22 = (int *)(v20 + 8 * v19);
    uint64_t v23 = (int *)(v18 + 12 * v19);
    while (1)
    {
      unint64_t v25 = *(void *)(v8 + 16);
      if (v19 == v25)
      {
        swift_release_n();
        swift_release_n();
        return swift_bridgeObjectRelease_n();
      }
      if (v49)
      {
        if (v19 >= v25) {
          goto LABEL_52;
        }
        id v26 = (int *)(v18 + 12 * v19 + 4);
        uint64_t v27 = v23;
      }
      else
      {
        if (v19 >= v25) {
          goto LABEL_53;
        }
        uint64_t v27 = (int *)(v18 + 8 * v19);
        id v26 = v22;
      }
      if (v19 >= v25) {
        break;
      }
      int v28 = *v26;
      int v29 = *v27;
      if (*v27 == v48)
      {
        uint64_t v30 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          uint64_t v30 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        uint64_t v30 = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v31 = *v30;
      uint64_t v32 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v32 != -1) {
        swift_once();
      }
      uint64_t v8 = v21;
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_59;
        }
      }
      v22 += 2;
      v23 += 3;
      ++v19;
      double v24 = (*(double (**)(void))(*(void *)v31 + 88))();
      swift_release();
      if (v24 == v14)
      {
        int v52 = v47;
        int v53 = v29;
        int v54 = v28;
        v50.i64[0] = v43;
        v50.i8[8] = a2 & 1;
        v51.i64[0] = a3;
        v51.i8[8] = a4 & 1;
        LayoutProxy.dimensions(in:)((uint64_t)&v50, (uint64_t)v57);
        closure #4 in _ZStackLayout.sizeThatFits(proposal:subviews:cache:)((double *)v55.i64, (uint64_t)v57, a7, a8, (double *)v50.i64);
        swift_release();
        int64x2_t v55 = v50;
        int64x2_t v56 = v51;
        uint64_t v20 = v40;
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    double result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t closure #4 in _ZStackLayout.sizeThatFits(proposal:subviews:cache:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, double *a5@<X8>)
{
  double v7 = *a1;
  double v8 = a1[1];
  double v9 = a1[2];
  double v22 = a1[3];
  double v10 = *(double *)(a2 + 16);
  double v11 = *(double *)(a2 + 24);
  ViewDimensions.subscript.getter(a3);
  double v13 = v12;
  uint64_t result = ViewDimensions.subscript.getter(a4);
  if (v10 == INFINITY) {
    double v16 = 0.0;
  }
  else {
    double v16 = v13;
  }
  double v17 = v10 - v16;
  if (v11 == INFINITY) {
    double v18 = 0.0;
  }
  else {
    double v18 = v15;
  }
  double v19 = v11 - v18;
  if (v7 > v13) {
    double v20 = v7;
  }
  else {
    double v20 = v13;
  }
  if (v8 > v15) {
    double v15 = v8;
  }
  *a5 = v20;
  a5[1] = v15;
  if (v9 > v17) {
    double v21 = v9;
  }
  else {
    double v21 = v17;
  }
  if (v22 > v19) {
    double v19 = v22;
  }
  a5[2] = v21;
  a5[3] = v19;
  return result;
}

id specialized GestureResponder.init(modifier:inputs:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_DWORD *)(a3 + 216) = a1;
  uint64_t v9 = v3;
  int v10 = v4;
  uint64_t v11 = v5;
  long long v7 = *(_OWORD *)(a2 + 40);
  long long v12 = *(_OWORD *)(a2 + 24);
  long long v13 = v7;
  long long v14 = *(_OWORD *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 72);
  int v16 = v6;
  return specialized DefaultLayoutViewResponder.init(inputs:)(&v9, a3);
}

uint64_t static Image.Resolved._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  unsigned int v76 = *a1;
  long long v4 = a2[3];
  long long v87 = a2[2];
  long long v88 = v4;
  long long v89 = a2[4];
  int v90 = *((_DWORD *)a2 + 20);
  long long v5 = a2[1];
  long long v85 = *a2;
  long long v86 = v5;
  long long v98 = v5;
  long long v99 = v87;
  long long v97 = v85;
  int v6 = DWORD1(v87);
  long long v7 = v85;
  long long v8 = v5;
  unsigned int v9 = DWORD1(v87);
  uint64_t v10 = *((void *)&v87 + 1);
  uint64_t v77 = v4;
  unsigned int v69 = v87;
  uint64_t v70 = *((void *)&v4 + 1);
  uint64_t v72 = *((void *)&v89 + 1);
  uint64_t v71 = v89;
  int v73 = v90;
  outlined retain of _ViewInputs((uint64_t)&v85);
  if ((v6 & 2) != 0)
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v12 = static _SemanticFeature_v2.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC) {
      int v11 = dyld_program_sdk_at_least();
    }
    else {
      int v11 = static Semantics.forced >= v12;
    }
    if (v11) {
      unsigned int v9 = v6 & 0xFFFFFFFD;
    }
    unsigned int v74 = v9;
  }
  else
  {
    unsigned int v74 = v9;
    int v11 = 0;
  }
  uint64_t v13 = v98;
  uint64_t v14 = *(void *)(v88 + 16);
  uint64_t v75 = a3;
  if (v14)
  {
    LODWORD(v15) = v89;
    int v16 = (ValueMetadata **)(v88 + 32);
    double v17 = (ValueMetadata **)(v88 + 32);
    uint64_t v18 = *(void *)(v88 + 16);
    while (*v17 != &type metadata for DisplayList.Key)
    {
      v17 += 2;
      if (!--v18)
      {
        while (*v16 != &type metadata for ViewRespondersKey)
        {
          v16 += 2;
          if (!--v14) {
            goto LABEL_19;
          }
        }
        break;
      }
    }
    uint64_t v64 = DWORD2(v97);
    uint64_t v65 = v89;
    uint64_t v66 = DWORD2(v89);
    int v67 = v11;
    uint64_t v68 = v10;
    uint64_t KeyPath = swift_getKeyPath();
    swift_beginAccess();
    outlined retain of _GraphInputs((uint64_t)&v97);
    uint64_t v63 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_endAccess();
    outlined release of _GraphInputs((uint64_t)&v97);
    swift_release();
    outlined retain of _ViewInputs((uint64_t)&v85);
    outlined retain of _GraphInputs((uint64_t)&v97);
    uint64_t v22 = swift_retain();
    uint64_t v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      char v24 = *(unsigned char *)(v23 + 72);
      swift_release();
      outlined release of _GraphInputs((uint64_t)&v97);
      outlined release of _ViewInputs((uint64_t)&v85);
      if (v24)
      {
        int v25 = *(_DWORD *)(v13 + 16);
        *((void *)&v91 + 1) = 0x8000000004;
        BYTE4(v92) = 3;
        LODWORD(v91) = v25;
        LODWORD(v92) = 0x2000000;
        *(_WORD *)((char *)&v92 + 5) = 0;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        lazy protocol witness table accessor for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init();
        unsigned int v26 = Attribute.init<A>(body:value:flags:update:)();
        unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        long long v93 = v87;
        long long v94 = v88;
        long long v95 = v89;
        int v96 = v90;
        long long v91 = v85;
        long long v92 = v86;
        LOBYTE(v78) = 1;
        swift_beginAccess();
        unsigned int v28 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v91, (unsigned __int8 *)&v78, OffsetAttribute2);
        swift_endAccess();
        long long v91 = v7;
        long long v92 = v8;
        *(void *)&long long v93 = __PAIR64__(v74, v69);
        *((void *)&v93 + 1) = v10;
        *(void *)&long long v94 = v77;
        *((void *)&v94 + 1) = v70;
        *(void *)&long long v95 = v71;
        *((void *)&v95 + 1) = v72;
        int v96 = v73;
        outlined retain of _ViewInputs((uint64_t)&v91);
        specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v26, (uint64_t)&v91, v76, v28, v64 | (v65 << 32), v66 | (v63 << 32), &v79);
        outlined release of _ViewInputs((uint64_t)&v91);
        long long v78 = v79;
        goto LABEL_41;
      }
    }
    else
    {
      swift_release();
      outlined release of _GraphInputs((uint64_t)&v97);
      outlined release of _ViewInputs((uint64_t)&v85);
    }
    type metadata accessor for _ShapeStyle_InterpolatorGroup();
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = MEMORY[0x263F8EE78];
    *(_DWORD *)(v29 + 32) = 0;
    *(unsigned char *)(v29 + 36) = 0;
    *(_DWORD *)(v29 + 40) = 0;
    *(unsigned char *)(v29 + 44) = 1;
    *(_DWORD *)(v29 + 48) = 160;
    *(unsigned char *)(v29 + 52) = 3;
    *(void *)(v29 + 56) = 0;
    *(void *)(v29 + 16) = 0x7FF0000000000000;
    *(void *)(v29 + 24) = v30;
    swift_beginAccess();
    if ((v6 & 0x20) == 0)
    {
LABEL_40:
      swift_endAccess();
      unsigned int v44 = AGGraphCreateOffsetAttribute2();
      long long v93 = v87;
      long long v94 = v88;
      long long v95 = v89;
      int v96 = v90;
      long long v91 = v85;
      long long v92 = v86;
      LOBYTE(v78) = 1;
      swift_beginAccess();
      unsigned int v45 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v91, (unsigned __int8 *)&v78, v44);
      swift_endAccess();
      *(void *)&long long v91 = v7;
      DWORD2(v91) = DWORD2(v7);
      long long v92 = v8;
      *(void *)&long long v93 = __PAIR64__(v74, v69);
      *((void *)&v93 + 1) = v68;
      *(void *)&long long v94 = v77;
      *((void *)&v94 + 1) = v70;
      *(void *)&long long v95 = __PAIR64__(v15, v71);
      *((void *)&v95 + 1) = v72;
      int v96 = v73;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v76, (uint64_t)&v91, v45, v29, v64 | (v65 << 32), v66 | (v63 << 32), &v79);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      long long v78 = v79;
      specialized _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)(v29, v76, (uint64_t)&v85, 1, 0);
      swift_release();
LABEL_41:
      if (!v67) {
        goto LABEL_42;
      }
      goto LABEL_20;
    }
    uint64_t v61 = v86;
    uint64_t v62 = v85;
    int v31 = DWORD2(v85);
    unsigned int v32 = DWORD2(v86);
    uint64_t v33 = v87;
    uint64_t v59 = v88;
    uint64_t v60 = *((void *)&v87 + 1);
    uint64_t v34 = *((void *)&v88 + 1);
    uint64_t v57 = *((void *)&v89 + 1);
    uint64_t v58 = v89;
    int v35 = v90;
    long long v93 = v87;
    long long v94 = v88;
    long long v95 = v89;
    int v96 = v90;
    long long v91 = v85;
    long long v92 = v86;
    outlined retain of _ViewInputs((uint64_t)&v85);
    unsigned int v36 = _ViewInputs.geometryTransaction()();
    uint64_t v37 = swift_getKeyPath();
    int v38 = specialized CachedEnvironment.attribute<A>(keyPath:)(v37);
    swift_release();
    if ((*(unsigned char *)(v13 + 81) & 1) == 0
      && v58 == *(_DWORD *)(v13 + 32)
      && v57 == *(_DWORD *)(v13 + 36)
      && v38 == *(_DWORD *)(v13 + 40)
      && v31 == *(_DWORD *)(v13 + 44)
      && v36 == *(_DWORD *)(v13 + 48)
      && v32 == *(_DWORD *)(v13 + 52))
    {
      if ((*(unsigned char *)(v13 + 64) & 1) == 0)
      {
        LODWORD(v15) = *(_DWORD *)(v13 + 60);
LABEL_39:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_40;
      }
    }
    else
    {
      *(void *)&long long v91 = v62;
      *(void *)&long long v92 = v61;
      DWORD2(v91) = v31;
      *((void *)&v92 + 1) = __PAIR64__(v36, v32);
      *(void *)&long long v93 = v33;
      *((void *)&v93 + 1) = v60;
      *(void *)&long long v94 = v59;
      *((void *)&v94 + 1) = v34;
      *(void *)&long long v95 = v58;
      *((void *)&v95 + 1) = v57;
      int v96 = v35;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v91, v38, (uint64_t)&v79);
      long long v39 = v80;
      uint64_t v40 = v81;
      unsigned __int8 v41 = v82;
      unint64_t v42 = v81 | ((unint64_t)DWORD1(v81) << 32);
      unint64_t v43 = BYTE8(v81) | ((unint64_t)HIDWORD(v81) << 32);
      *(_OWORD *)(v13 + 32) = v79;
      *(_OWORD *)(v13 + 48) = v39;
      *(void *)(v13 + 64) = v42;
      *(void *)(v13 + 72) = v43;
      *(_WORD *)(v13 + 80) = v41;
      if (v40 != 1)
      {
        uint64_t v15 = HIDWORD(*((void *)&v39 + 1));
        goto LABEL_39;
      }
    }
    LODWORD(v15) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v13 + 60) = v15;
    *(unsigned char *)(v13 + 64) = 0;
    goto LABEL_39;
  }
LABEL_19:
  int v19 = *MEMORY[0x263F288F8];
  *(void *)&long long v78 = MEMORY[0x263F8EE78];
  DWORD2(v78) = 0;
  HIDWORD(v78) = v19;
  if (!v11)
  {
LABEL_42:
    if ((v74 & 2) != 0)
    {
      LODWORD(v79) = v76;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for LeafLayoutComputer<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafLayoutComputer);
      lazy protocol witness table accessor for type LeafLayoutComputer<Image.Resolved> and conformance LeafLayoutComputer<A>();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v46 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      HIDWORD(v78) = v46;
      int v20 = DWORD2(v78);
      if ((BYTE8(v78) & 0x80) == 0) {
        goto LABEL_44;
      }
    }
    goto LABEL_45;
  }
LABEL_20:
  LODWORD(v79) = v76;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer();
  HIDWORD(v78) = Attribute.init<A>(body:value:flags:update:)();
  int v20 = DWORD2(v78);
  if ((BYTE8(v78) & 0x80) == 0) {
LABEL_44:
  }
    DWORD2(v78) = v20 | 0x80;
LABEL_45:
  outlined retain of _ViewInputs((uint64_t)&v85);
  outlined retain of _GraphInputs((uint64_t)&v97);
  uint64_t v47 = swift_retain();
  uint64_t v48 = specialized find<A>(_:key:)(v47);
  if (v48)
  {
    uint64_t v49 = *(void *)(v48 + 72);
    uint64_t v50 = *(void *)(v48 + 80);
    swift_release();
    outlined release of _GraphInputs((uint64_t)&v97);
    outlined release of _ViewInputs((uint64_t)&v85);
    if (v49)
    {
      long long v81 = v87;
      long long v82 = v88;
      long long v83 = v89;
      int v84 = v90;
      long long v79 = v85;
      long long v80 = v86;
      if ((*(uint64_t (**)(long long *, uint64_t, uint64_t))(v50 + 8))(&v79, v49, v50))
      {
        uint64_t v51 = swift_getKeyPath();
        swift_beginAccess();
        outlined retain of _GraphInputs((uint64_t)&v97);
        unsigned int v52 = specialized CachedEnvironment.attribute<A>(keyPath:)(v51);
        swift_endAccess();
        outlined release of _GraphInputs((uint64_t)&v97);
        swift_release();
        uint64_t v53 = swift_getKeyPath();
        swift_beginAccess();
        outlined retain of _GraphInputs((uint64_t)&v97);
        int v54 = specialized CachedEnvironment.attribute<A>(keyPath:)(v53);
        swift_endAccess();
        outlined release of _GraphInputs((uint64_t)&v97);
        swift_release();
        *(void *)&long long v79 = __PAIR64__(v52, v76);
        DWORD2(v79) = v54;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        lazy protocol witness table accessor for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext();
        uint64_t v55 = Attribute.init<A>(body:value:flags:update:)();
        long long v81 = v87;
        long long v82 = v88;
        long long v83 = v89;
        int v84 = v90;
        long long v79 = v85;
        long long v80 = v86;
        (*(void (**)(long long *, uint64_t, long long *, uint64_t, uint64_t))(v50 + 16))(&v79, v55, &v78, v49, v50);
      }
    }
  }
  else
  {
    swift_release();
    outlined release of _GraphInputs((uint64_t)&v97);
    outlined release of _ViewInputs((uint64_t)&v85);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v75 = v78;
  return result;
}

uint64_t static StyledTextContentView._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  long long v4 = a2[1];
  long long v5 = a2[3];
  long long v95 = a2[2];
  long long v96 = v5;
  long long v6 = a2[3];
  *(_OWORD *)long long v97 = a2[4];
  long long v7 = a2[1];
  long long v93 = *a2;
  long long v94 = v7;
  unsigned int v8 = *a1;
  *(_DWORD *)&v97[16] = *((_DWORD *)a2 + 20);
  long long v103 = v4;
  long long v104 = v95;
  long long v102 = v93;
  char v9 = BYTE4(v95);
  *(_OWORD *)&v89[16] = v95;
  long long v90 = v6;
  long long v91 = a2[4];
  int v10 = *((_DWORD *)a2 + 20);
  long long v88 = v93;
  *(_OWORD *)long long v89 = v4;
  unsigned int v11 = DWORD1(v95) & 0xFFFFFFFD;
  int v92 = v10;
  *(_DWORD *)&v89[20] = DWORD1(v95) & 0xFFFFFFFD;
  uint64_t v12 = *(void *)(v96 + 16);
  unsigned int v78 = v8;
  uint64_t v79 = v96;
  if (v12)
  {
    char v13 = BYTE4(v95);
    unint64_t v14 = 0;
    uint64_t v15 = (ValueMetadata **)(v96 + 32);
    while (*v15 != &type metadata for ViewRespondersKey)
    {
      ++v14;
      v15 += 2;
      if (v12 == v14)
      {
        outlined retain of _ViewInputs((uint64_t)&v93);
        goto LABEL_8;
      }
    }
    outlined retain of _ViewInputs((uint64_t)&v93);
    specialized Array.remove(at:)(v14);
LABEL_8:
    char v9 = v13;
  }
  else
  {
    outlined retain of _ViewInputs((uint64_t)&v93);
  }
  unsigned int v75 = HIDWORD(v96);
  unsigned int v76 = *(_DWORD *)v97;
  uint64_t v16 = v103;
  *(_OWORD *)&v99[16] = v95;
  long long v100 = v96;
  *(_OWORD *)int64_t v101 = *(_OWORD *)v97;
  int v74 = *(_DWORD *)&v97[8];
  *(_DWORD *)&v101[16] = *(_DWORD *)&v97[16];
  long long v98 = v93;
  *(_OWORD *)long long v99 = v94;
  v81[0] = 1;
  swift_beginAccess();
  unsigned int v77 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v98, v81, 0x100000000);
  swift_endAccess();
  if (!v12)
  {
LABEL_16:
    *(_OWORD *)&v99[16] = *(_OWORD *)&v89[16];
    long long v100 = v90;
    *(_OWORD *)int64_t v101 = v91;
    *(_DWORD *)&v101[16] = v92;
    long long v98 = v88;
    *(_OWORD *)long long v99 = *(_OWORD *)v89;
    outlined retain of _ViewInputs((uint64_t)&v98);
    int v22 = v77;
    int v21 = v78;
    specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v78, (uint64_t)&v98, v77, 0, &v82);
    outlined release of _ViewInputs((uint64_t)&v98);
    long long v80 = v82;
    if ((v9 & 2) == 0) {
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  double v17 = (ValueMetadata **)(v79 + 32);
  uint64_t v18 = (ValueMetadata **)(v79 + 32);
  uint64_t v19 = v12;
  while (*v18 != &type metadata for DisplayList.Key)
  {
    v18 += 2;
    if (!--v19)
    {
      uint64_t v20 = v12;
      while (*v17 != &type metadata for ViewRespondersKey)
      {
        v17 += 2;
        if (!--v20) {
          goto LABEL_16;
        }
      }
      break;
    }
  }
  uint64_t v23 = v102;
  outlined retain of _ViewInputs((uint64_t)&v93);
  outlined retain of _GraphInputs((uint64_t)&v102);
  uint64_t v24 = swift_retain();
  uint64_t v25 = specialized find<A>(_:key:)(v24);
  int v73 = a3;
  char v72 = v9;
  if (!v25)
  {
    swift_release();
    outlined release of _GraphInputs((uint64_t)&v102);
    outlined release of _ViewInputs((uint64_t)&v93);
LABEL_24:
    type metadata accessor for _ShapeStyle_InterpolatorGroup();
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = MEMORY[0x263F8EE78];
    *(_DWORD *)(v35 + 32) = 0;
    *(unsigned char *)(v35 + 36) = 0;
    *(_DWORD *)(v35 + 40) = 0;
    *(unsigned char *)(v35 + 44) = 1;
    *(_DWORD *)(v35 + 48) = 160;
    *(unsigned char *)(v35 + 52) = 3;
    *(void *)(v35 + 56) = 0;
    *(void *)(v35 + 16) = 0x7FF0000000000000;
    *(void *)(v35 + 24) = v36;
    swift_beginAccess();
    LODWORD(v37) = v76;
    if ((v9 & 0x20) == 0)
    {
LABEL_38:
      swift_endAccess();
      *(void *)&long long v98 = v88;
      DWORD2(v98) = DWORD2(v88);
      *(_OWORD *)&v99[8] = *(_OWORD *)&v89[8];
      *(void *)long long v99 = *(void *)v89;
      *(void *)&v99[24] = *(void *)&v89[24];
      long long v100 = v90;
      *(_DWORD *)int64_t v101 = v91;
      *(_DWORD *)&v101[4] = v37;
      *(void *)&v101[8] = *((void *)&v91 + 1);
      *(_DWORD *)&v101[16] = v92;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      int v22 = v77;
      int v21 = v78;
      specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v78, (uint64_t)&v98, v77, v35, &v82);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      long long v80 = v82;
      unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      specialized _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)(v35, OffsetAttribute2, (uint64_t)&v93, 0, 0);
      swift_release();
      goto LABEL_39;
    }
    int v64 = DWORD2(v93);
    uint64_t v68 = v94;
    uint64_t v71 = v93;
    int v38 = DWORD2(v94);
    uint64_t v39 = v95;
    uint64_t v65 = v96;
    uint64_t v66 = *((void *)&v95 + 1);
    uint64_t v40 = *((void *)&v96 + 1);
    uint64_t v62 = *(void *)&v97[8];
    uint64_t v63 = *(void *)v97;
    *(_OWORD *)&v99[16] = v95;
    long long v100 = v96;
    *(_OWORD *)int64_t v101 = *(_OWORD *)v97;
    int v61 = *(_DWORD *)&v97[16];
    *(_DWORD *)&v101[16] = *(_DWORD *)&v97[16];
    long long v98 = v93;
    *(_OWORD *)long long v99 = v94;
    outlined retain of _ViewInputs((uint64_t)&v93);
    int v41 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v43 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v16 + 81) & 1) == 0
      && v63 == *(_DWORD *)(v16 + 32)
      && v62 == *(_DWORD *)(v16 + 36)
      && v43 == *(_DWORD *)(v16 + 40)
      && v64 == *(_DWORD *)(v16 + 44)
      && v41 == *(_DWORD *)(v16 + 48)
      && v38 == *(_DWORD *)(v16 + 52))
    {
      if ((*(unsigned char *)(v16 + 64) & 1) == 0)
      {
        LODWORD(v37) = *(_DWORD *)(v16 + 60);
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_38;
      }
    }
    else
    {
      *(void *)&long long v98 = v71;
      DWORD2(v98) = v64;
      *(void *)long long v99 = v68;
      *(_DWORD *)&v99[8] = v38;
      *(_DWORD *)&v99[12] = v41;
      *(void *)&v99[16] = v39;
      *(void *)&v99[24] = v66;
      *(void *)&long long v100 = v65;
      *((void *)&v100 + 1) = v40;
      *(void *)int64_t v101 = v63;
      *(void *)&v101[8] = v62;
      *(_DWORD *)&v101[16] = v61;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v98, v43, (uint64_t)&v82);
      long long v44 = v83;
      uint64_t v45 = v84;
      unsigned __int8 v46 = v85;
      unint64_t v47 = v84 | ((unint64_t)DWORD1(v84) << 32);
      unint64_t v48 = BYTE8(v84) | ((unint64_t)HIDWORD(v84) << 32);
      *(_OWORD *)(v16 + 32) = v82;
      *(_OWORD *)(v16 + 48) = v44;
      *(void *)(v16 + 64) = v47;
      *(void *)(v16 + 72) = v48;
      *(_WORD *)(v16 + 80) = v46;
      if (v45 != 1)
      {
        uint64_t v37 = HIDWORD(*((void *)&v44 + 1));
        goto LABEL_37;
      }
    }
    LODWORD(v37) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v16 + 60) = v37;
    *(unsigned char *)(v16 + 64) = 0;
    goto LABEL_37;
  }
  char v26 = *(unsigned char *)(v25 + 72);
  swift_release();
  outlined release of _GraphInputs((uint64_t)&v102);
  outlined release of _ViewInputs((uint64_t)&v93);
  if ((v26 & 1) == 0) {
    goto LABEL_24;
  }
  int v69 = v104;
  *(void *)&long long v98 = __PAIR64__(*(_DWORD *)(v16 + 16), v78);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment();
  int v27 = Attribute.init<A>(body:value:flags:update:)();
  unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v29 = swift_allocObject();
  *(_DWORD *)(v29 + 16) = v27;
  *(void *)(v29 + 24) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v29 + 32) = 0u;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_WORD *)(v29 + 80) = 256;
  *(void *)(v29 + 88) = v28;
  swift_release();
  *(void *)long long v89 = v29;
  int v30 = v69;
  if ((v69 & 0x20) == 0)
  {
    int v30 = v69 | 0x20;
    *(_DWORD *)&v89[16] = v69 | 0x20;
  }
  int v70 = *(_DWORD *)&v97[4];
  uint64_t v31 = *((void *)&v104 + 1);
  int v67 = DWORD2(v102);
  uint64_t v32 = *((void *)&v103 + 1);
  uint64_t v33 = *(void *)&v97[12];
  swift_beginAccess();
  LODWORD(v98) = *(_DWORD *)(v29 + 16);
  *((void *)&v98 + 1) = 1;
  v99[4] = 3;
  *(_DWORD *)long long v99 = 0x2000000;
  *(_WORD *)&v99[5] = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init();
  unsigned int v34 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v98 = v23;
  DWORD2(v98) = v67;
  *(void *)long long v99 = v29;
  *(void *)&v99[8] = v32;
  *(_DWORD *)&v99[16] = v30;
  *(_DWORD *)&v99[20] = v11;
  *(void *)&v99[24] = v31;
  *(void *)&long long v100 = v90;
  *((void *)&v100 + 1) = __PAIR64__(v75, DWORD2(v90));
  *(_DWORD *)int64_t v101 = v76;
  *(_DWORD *)&v101[4] = v70;
  *(_DWORD *)&v101[8] = v74;
  *(void *)&v101[12] = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v22 = v77;
  int v21 = v78;
  specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v34, (uint64_t)&v98, v78, v77, &v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v80 = v82;
LABEL_39:
  a3 = v73;
  if ((v72 & 2) == 0) {
    goto LABEL_42;
  }
LABEL_40:
  LODWORD(v82) = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer();
  HIDWORD(v80) = Attribute.init<A>(body:value:flags:update:)();
  if ((BYTE8(v80) & 0x80) == 0) {
    DWORD2(v80) |= 0x80u;
  }
LABEL_42:
  if (v12)
  {
    uint64_t v50 = (ValueMetadata **)(v79 + 32);
    uint64_t v51 = (ValueMetadata **)(v79 + 32);
    uint64_t v52 = v12;
    while (*v51 != &type metadata for Text.LayoutKey)
    {
      v51 += 2;
      if (!--v52) {
        goto LABEL_48;
      }
    }
    unsigned int v53 = AGGraphCreateOffsetAttribute2();
    unsigned int v54 = AGGraphCreateOffsetAttribute2();
    *(void *)&long long v82 = __PAIR64__(v76, v53);
    *((void *)&v82 + 1) = __PAIR64__(v75, v54);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [Text.LayoutKey.AnchoredLayout], (uint64_t)&type metadata for Text.LayoutKey.AnchoredLayout, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type TextLayoutQuery and conformance TextLayoutQuery();
    unsigned int v55 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v82) = 0;
    PreferencesOutputs.subscript.setter(v55, &type metadata for Text.LayoutKey, (uint64_t)&protocol witness table for Text.LayoutKey);
LABEL_48:
    uint64_t v56 = 0;
    while (1)
    {
      uint64_t v57 = v56 + 1;
      if (__OFADD__(v56, 1)) {
        __break(1u);
      }
      if (*v50 == &type metadata for ViewRespondersKey) {
        break;
      }
      ++v56;
      v50 += 2;
      if (v57 == v12) {
        goto LABEL_54;
      }
    }
    long long v84 = v95;
    long long v85 = v96;
    long long v86 = *(_OWORD *)v97;
    int v87 = *(_DWORD *)&v97[16];
    long long v82 = v93;
    long long v83 = v94;
    type metadata accessor for StyledTextResponder();
    uint64_t v58 = swift_allocObject();
    outlined retain of _ViewInputs((uint64_t)&v93);
    uint64_t v59 = specialized StyledTextResponder.init(view:styles:inputs:)(v21, v22, (uint64_t *)&v82, v58);
    swift_release();
    *(void *)&long long v82 = v59;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _s10Foundation4DateVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], 255, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type StyledTextResponderFilter and conformance StyledTextResponderFilter();
    LODWORD(v58) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v82) = 0;
    PreferencesOutputs.subscript.setter(v58, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
  }
LABEL_54:
  *a3 = v80;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t CachedEnvironment.resolvedShapeStyles(for:role:mode:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_5:
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
    {
      id v13 = (id)AGSubgraphGetCurrent();
      if (!v13) {
        goto LABEL_23;
      }
      unint64_t v14 = v13;
      id v15 = (id)AGSubgraphGetGraph();
    }
    else
    {
      id v15 = (id)AGGraphGetAttributeGraph();
    }
    if (AGGraphGetContext())
    {
      swift_retain();

      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      uint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v17 = specialized GraphHost.intern<A>(_:for:id:)(v16, (Swift::UInt)&type metadata for _ShapeStyle_Pack, 0);
      swift_bridgeObjectRelease();
      swift_release();
      return v17;
    }
    __break(1u);
LABEL_23:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  long long v6 = v3;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(a1 + 28);
  uint64_t v11 = *a2;
  uint64_t v12 = (ValueMetadata **)(v4 + 32);
  while (*v12 != &type metadata for DisplayList.Key)
  {
    v12 += 2;
    if (!--v5) {
      goto LABEL_5;
    }
  }
  uint64_t v19 = *v3;
  uint64_t v27 = *MEMORY[0x263F288F8];
  if ((a3 & 0x100000000) != 0) {
    uint64_t v20 = *MEMORY[0x263F288F8];
  }
  else {
    uint64_t v20 = a3;
  }
  uint64_t v21 = *(_DWORD *)(a1 + 36) & 1;
  uint64_t v22 = *((void *)v3 + 9);
  if (*(void *)(v22 + 16))
  {
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19 | (v8 << 32), v10 | (v9 << 32), v20 | (v11 << 32) | (v21 << 40));
    if (v24) {
      return *(unsigned int *)(*(void *)(v22 + 56) + 4 * v23);
    }
  }
  uint64_t v25 = ResolvedShapeStyles.makeStyles()();
  if ((a3 & 0x100000000) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *((void *)v6 + 9);
    *((void *)v6 + 9) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, v19 | (v8 << 32), v10 | (v9 << 32), v27 | (v11 << 32) | (v21 << 40), isUniquelyReferenced_nonNull_native);
    *((void *)v6 + 9) = v28;
    swift_bridgeObjectRelease();
  }
  return v25;
}

uint64_t ResolvedShapeStyles.makeStyles()()
{
  type metadata accessor for PropertyList.Tracker();
  uint64_t v0 = swift_allocObject();
  type metadata accessor for AnyShapeStyle?(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  uint64_t v2 = MEMORY[0x263F8EE80];
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = v2;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  *(unsigned char *)(v1 + 56) = 0;
  *(void *)(v0 + 16) = v1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for Focus<EnvironmentValues, RedactionReasons>(0, &lazy cache variable for type metadata for ShapeStyleResolver<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<AnyShapeStyle> and conformance ShapeStyleResolver<A>();
  uint64_t v4 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  return v4;
}

uint64_t type metadata accessor for PropertyList.Tracker()
{
  return self;
}

void type metadata accessor for AnyShapeStyle?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<AnyShapeStyle> and conformance ShapeStyleResolver<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyleResolver<AnyShapeStyle> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<AnyShapeStyle> and conformance ShapeStyleResolver<A>)
  {
    type metadata accessor for Focus<EnvironmentValues, RedactionReasons>(255, &lazy cache variable for type metadata for ShapeStyleResolver<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<AnyShapeStyle> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

uint64_t type metadata accessor for _ShapeStyle_InterpolatorGroup()
{
  return self;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v11 = (void *)*v5;
  uint64_t v12 = a4 & 0x1FFFFFFFFFFLL;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0x1FFFFFFFFFFLL);
  uint64_t v15 = v11[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v11[3];
  if (v19 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      *(_DWORD *)(v20[7] + 4 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v12);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v12, a1, v20);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(BYTE4(a3));
  Hasher._combine(_:)(BYTE5(a3) & 1);
  Swift::Int v8 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3 & 0x1FFFFFFFFFFLL, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t result = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v8 = ~v6;
    do
    {
      uint64_t v9 = *(void *)(v4 + 48) + 24 * result;
      int v10 = *(_DWORD *)v9;
      int v11 = *(_DWORD *)(v9 + 4);
      int v12 = *(_DWORD *)(v9 + 8);
      int v13 = *(_DWORD *)(v9 + 12);
      int v14 = *(_DWORD *)(v9 + 16);
      int v15 = *(unsigned __int8 *)(v9 + 20);
      unsigned __int8 v16 = *(unsigned char *)(v9 + 21);
      BOOL v22 = v10 != a1
         || v11 != HIDWORD(a1)
         || v12 != a2
         || v13 != HIDWORD(a2)
         || v14 != a3
         || v15 != BYTE4(a3);
      if (((v22 | BYTE5(a3) & 1 ^ v16) & 1) == 0) {
        break;
      }
      unint64_t result = (result + 1) & v8;
    }
    while (((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  *(_DWORD *)(v6 + 16) = a4;
  *(unsigned char *)(v6 + 20) = BYTE4(a4);
  *(unsigned char *)(v6 + 21) = BYTE5(a4) & 1;
  *(_DWORD *)(a6[7] + 4 * result) = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = a6[7] + 12 * result;
  *(void *)uint64_t v7 = a4;
  *(_DWORD *)(v7 + 8) = a5;
  BOOL v8 = a6[2];
  uint64_t v9 = __OFADD__(v8, 1);
  int v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<_ShapeStyle_Pack>, (uint64_t)&type metadata for _ShapeStyle_Pack, MEMORY[0x263F28898]);
    lazy protocol witness table accessor for type ResolvedShapeStyles and conformance ResolvedShapeStyles();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>);
    }
  }
}

uint64_t specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v134 = __PAIR64__(a3, a1);
  uint64_t v7 = MEMORY[0x263F8EE78];
  v155[1] = *MEMORY[0x263EF8340];
  uint64_t v136 = MEMORY[0x263F8EE78];
  int v8 = *MEMORY[0x263F288F8];
  LODWORD(v137) = 0;
  HIDWORD(v137) = *MEMORY[0x263F288F8];
  uint64_t v138 = *(void *)(a2 + 48);
  int v139 = *(_DWORD *)(a2 + 56);
  uint64_t v135 = v138;
  uint64_t v9 = *(void *)(v138 + 16);
  if (!v9) {
    goto LABEL_36;
  }
  int v11 = (ValueMetadata **)(v138 + 32);
  uint64_t v12 = *(void *)(v138 + 16);
  while (*v11 != &type metadata for DisplayList.Key)
  {
    v11 += 2;
    if (!--v12) {
      goto LABEL_36;
    }
  }
  Swift::UInt32 v13 = ++lastIdentity;
  long long v14 = *(_OWORD *)(a2 + 32);
  long long v153 = *(_OWORD *)(a2 + 16);
  long long v154 = v14;
  long long v152 = *(_OWORD *)a2;
  char v15 = BYTE4(v14);
  if ((WORD2(v14) & 0x100) != 0)
  {
    outlined retain of _ViewInputs(a2);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs(a2);
    uint64_t result = AGWeakAttributeGetAttribute();
    if (result == v8)
    {
      __break(1u);
      return result;
    }
    LODWORD(v140) = v13;
    long long v102 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v140);
    v102(v147, 0);
  }
  int v16 = *(_DWORD *)(a2 + 72);
  swift_retain();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v18 = v153;
  uint64_t v19 = (unsigned int *)(v153 + 16);
  swift_beginAccess();
  Swift::UInt32 v129 = v13;
  int v126 = OffsetAttribute2;
  if ((v15 & 0x20) != 0)
  {
    uint64_t v132 = a5;
    uint64_t v21 = *(void *)a2;
    int v22 = *(_DWORD *)(a2 + 8);
    uint64_t v123 = *(void *)(a2 + 16);
    int v23 = *(_DWORD *)(a2 + 24);
    uint64_t v24 = *(void *)(a2 + 32);
    uint64_t v116 = *(void *)(a2 + 40);
    uint64_t v110 = a4;
    uint64_t v112 = *(void *)(a2 + 48);
    uint64_t v25 = *(void *)(a2 + 56);
    uint64_t v107 = *(void *)(a2 + 72);
    uint64_t v108 = *(void *)(a2 + 64);
    int v105 = *(_DWORD *)(a2 + 80);
    long long v26 = *(_OWORD *)(a2 + 48);
    long long v148 = *(_OWORD *)(a2 + 32);
    long long v149 = v26;
    long long v150 = *(_OWORD *)(a2 + 64);
    int v151 = *(_DWORD *)(a2 + 80);
    long long v27 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
    *(_OWORD *)&v147[16] = v27;
    outlined retain of _ViewInputs(a2);
    int v28 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v30 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v18 + 81) & 1) == 0
      && v108 == *(_DWORD *)(v18 + 32)
      && v107 == *(_DWORD *)(v18 + 36)
      && v30 == *(_DWORD *)(v18 + 40)
      && v22 == *(_DWORD *)(v18 + 44)
      && v28 == *(_DWORD *)(v18 + 48)
      && v23 == *(_DWORD *)(v18 + 52))
    {
      if ((*(unsigned char *)(v18 + 72) & 1) == 0)
      {
        int v31 = *(_DWORD *)(v18 + 68);
        goto LABEL_20;
      }
    }
    else
    {
      *(void *)uint64_t v147 = v21;
      *(_DWORD *)&v147[8] = v22;
      *(void *)&v147[16] = v123;
      *(_DWORD *)&v147[24] = v23;
      *(_DWORD *)&v147[28] = v28;
      *(void *)&long long v148 = v24;
      *((void *)&v148 + 1) = v116;
      *(void *)&long long v149 = v112;
      *((void *)&v149 + 1) = v25;
      *(void *)&long long v150 = v108;
      *((void *)&v150 + 1) = v107;
      int v151 = v105;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v30, (uint64_t)&v140);
      int v31 = v143;
      uint64_t v32 = v144;
      unsigned __int8 v33 = v146;
      unint64_t v34 = v142 | ((unint64_t)v143 << 32);
      unint64_t v35 = v144 | ((unint64_t)v145 << 32);
      long long v36 = v141;
      *(_OWORD *)(v18 + 32) = v140;
      *(_OWORD *)(v18 + 48) = v36;
      *(void *)(v18 + 64) = v34;
      *(void *)(v18 + 72) = v35;
      *(_WORD *)(v18 + 80) = v33;
      if (v32 != 1) {
        goto LABEL_20;
      }
    }
    int v31 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 68) = v31;
    *(unsigned char *)(v18 + 72) = 0;
LABEL_20:
    int v122 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v37 = *(void *)a2;
    int v38 = *(_DWORD *)(a2 + 8);
    uint64_t v109 = *(void *)(a2 + 16);
    int v39 = *(_DWORD *)(a2 + 24);
    uint64_t v40 = *(void *)(a2 + 32);
    uint64_t v117 = *(void *)(a2 + 40);
    uint64_t v113 = *(void *)(a2 + 48);
    uint64_t v41 = *(void *)(a2 + 56);
    uint64_t v104 = *(void *)(a2 + 72);
    uint64_t v106 = *(void *)(a2 + 64);
    int v103 = *(_DWORD *)(a2 + 80);
    long long v42 = *(_OWORD *)(a2 + 48);
    long long v148 = *(_OWORD *)(a2 + 32);
    long long v149 = v42;
    long long v150 = *(_OWORD *)(a2 + 64);
    int v151 = *(_DWORD *)(a2 + 80);
    long long v43 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
    *(_OWORD *)&v147[16] = v43;
    outlined retain of _ViewInputs(a2);
    int v44 = _ViewInputs.geometryTransaction()();
    uint64_t v45 = swift_getKeyPath();
    int v46 = specialized CachedEnvironment.attribute<A>(keyPath:)(v45);
    swift_release();
    a4 = v110;
    if ((*(unsigned char *)(v18 + 81) & 1) == 0
      && v106 == *(_DWORD *)(v18 + 32)
      && v104 == *(_DWORD *)(v18 + 36)
      && v46 == *(_DWORD *)(v18 + 40)
      && v38 == *(_DWORD *)(v18 + 44)
      && v44 == *(_DWORD *)(v18 + 48)
      && v39 == *(_DWORD *)(v18 + 52))
    {
      a5 = v132;
      if ((*(unsigned char *)(v18 + 64) & 1) == 0)
      {
        LODWORD(v20) = *(_DWORD *)(v18 + 60);
        goto LABEL_31;
      }
    }
    else
    {
      *(void *)uint64_t v147 = v37;
      *(_DWORD *)&v147[8] = v38;
      *(void *)&v147[16] = v109;
      *(_DWORD *)&v147[24] = v39;
      *(_DWORD *)&v147[28] = v44;
      *(void *)&long long v148 = v40;
      *((void *)&v148 + 1) = v117;
      *(void *)&long long v149 = v113;
      *((void *)&v149 + 1) = v41;
      *(void *)&long long v150 = v106;
      *((void *)&v150 + 1) = v104;
      int v151 = v103;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v46, (uint64_t)&v140);
      long long v47 = v141;
      uint64_t v48 = v142;
      unsigned __int8 v49 = v146;
      unint64_t v50 = v142 | ((unint64_t)v143 << 32);
      unint64_t v51 = v144 | ((unint64_t)v145 << 32);
      *(_OWORD *)(v18 + 32) = v140;
      *(_OWORD *)(v18 + 48) = v47;
      *(void *)(v18 + 64) = v50;
      *(void *)(v18 + 72) = v51;
      *(_WORD *)(v18 + 80) = v49;
      a5 = v132;
      if (v48 != 1)
      {
        uint64_t v20 = HIDWORD(*((void *)&v47 + 1));
LABEL_31:
        uint64_t v19 = (unsigned int *)(v18 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_32;
      }
    }
    LODWORD(v20) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 60) = v20;
    *(unsigned char *)(v18 + 64) = 0;
    goto LABEL_31;
  }
  int v122 = v16;
  LODWORD(v20) = *(_DWORD *)(a2 + 64);
LABEL_32:
  swift_endAccess();
  unsigned int v52 = *v19;
  uint64_t v53 = v152;
  v155[0] = v152;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)&v152);
  outlined retain of ViewTransform((uint64_t)v155);
  uint64_t v54 = specialized find<A>(_:key:)(v53);
  unsigned int v55 = a5;
  if (v54) {
    char v56 = *(unsigned char *)(v54 + 72);
  }
  else {
    char v56 = 0;
  }
  unsigned int v57 = *(_DWORD *)(a2 + 68);
  unsigned int v58 = *(_DWORD *)(a2 + 60);
  unsigned int v59 = *(_DWORD *)(a2 + 76);
  outlined release of ViewTransform((uint64_t)v155);
  outlined release of _GraphInputs((uint64_t)&v152);
  outlined release of _ViewInputs(a2);
  *(void *)uint64_t v147 = a4;
  *(_DWORD *)&v147[8] = v129;
  *(void *)&v147[12] = v134;
  *(_DWORD *)&v147[20] = v126;
  *(_DWORD *)&v147[24] = v122;
  *(_DWORD *)&v147[28] = v20;
  *(void *)&long long v148 = __PAIR64__(v58, v57);
  *((void *)&v148 + 1) = __PAIR64__(v59, v52);
  LOBYTE(v149) = v56;
  WORD1(v149) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
  lazy protocol witness table accessor for type ShapeStyledDisplayList<StyledTextContentView> and conformance ShapeStyledDisplayList<A>();
  unsigned int v60 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v147[0] = 0;
  PreferencesOutputs.subscript.setter(v60, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
  a5 = v55;
  uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_36:
  uint64_t v61 = *(void *)(a2 + 16);
  int v62 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  if ((v62 & 0x20) != 0)
  {
    uint64_t v133 = a5;
    int v65 = *(_DWORD *)(a2 + 8);
    uint64_t v124 = *(void *)(a2 + 16);
    uint64_t v127 = *(void *)a2;
    int v66 = *(_DWORD *)(a2 + 24);
    uint64_t v67 = *(void *)(a2 + 32);
    uint64_t v68 = *(void *)(a2 + 48);
    uint64_t v120 = *(void *)(a2 + 40);
    uint64_t v69 = *(void *)(a2 + 56);
    uint64_t v130 = *(void *)(a2 + 64);
    uint64_t v118 = *(void *)(a2 + 72);
    int v114 = *(_DWORD *)(a2 + 80);
    long long v70 = *(_OWORD *)(a2 + 48);
    long long v148 = *(_OWORD *)(a2 + 32);
    long long v149 = v70;
    long long v150 = *(_OWORD *)(a2 + 64);
    int v151 = *(_DWORD *)(a2 + 80);
    long long v71 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
    *(_OWORD *)&v147[16] = v71;
    outlined retain of _ViewInputs(a2);
    int v72 = _ViewInputs.geometryTransaction()();
    uint64_t v73 = swift_getKeyPath();
    int v74 = specialized CachedEnvironment.attribute<A>(keyPath:)(v73);
    swift_release();
    if ((*(unsigned char *)(v61 + 81) & 1) == 0
      && v130 == *(_DWORD *)(v61 + 32)
      && v118 == *(_DWORD *)(v61 + 36)
      && v74 == *(_DWORD *)(v61 + 40)
      && v65 == *(_DWORD *)(v61 + 44)
      && v72 == *(_DWORD *)(v61 + 48)
      && v66 == *(_DWORD *)(v61 + 52))
    {
      if ((*(unsigned char *)(v61 + 72) & 1) == 0)
      {
        int v131 = *(_DWORD *)(v61 + 68);
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v80 = *(_DWORD *)(a2 + 8);
        uint64_t v125 = *(void *)(a2 + 16);
        uint64_t v128 = *(void *)a2;
        int v81 = *(_DWORD *)(a2 + 24);
        uint64_t v82 = *(void *)(a2 + 32);
        uint64_t v83 = *(void *)(a2 + 48);
        uint64_t v121 = *(void *)(a2 + 40);
        uint64_t v84 = *(void *)(a2 + 56);
        uint64_t v115 = *(void *)(a2 + 72);
        uint64_t v119 = *(void *)(a2 + 64);
        int v111 = *(_DWORD *)(a2 + 80);
        long long v85 = *(_OWORD *)(a2 + 48);
        long long v148 = *(_OWORD *)(a2 + 32);
        long long v149 = v85;
        long long v150 = *(_OWORD *)(a2 + 64);
        int v151 = *(_DWORD *)(a2 + 80);
        long long v86 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
        *(_OWORD *)&v147[16] = v86;
        outlined retain of _ViewInputs(a2);
        int v87 = _ViewInputs.geometryTransaction()();
        uint64_t v88 = swift_getKeyPath();
        int v89 = specialized CachedEnvironment.attribute<A>(keyPath:)(v88);
        swift_release();
        if ((*(unsigned char *)(v61 + 81) & 1) == 0
          && v119 == *(_DWORD *)(v61 + 32)
          && v115 == *(_DWORD *)(v61 + 36)
          && v89 == *(_DWORD *)(v61 + 40)
          && v80 == *(_DWORD *)(v61 + 44)
          && v87 == *(_DWORD *)(v61 + 48)
          && v81 == *(_DWORD *)(v61 + 52))
        {
          a5 = v133;
          if ((*(unsigned char *)(v61 + 64) & 1) == 0)
          {
            LODWORD(v64) = *(_DWORD *)(v61 + 60);
LABEL_61:
            int v63 = v131;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            uint64_t v7 = MEMORY[0x263F8EE78];
            goto LABEL_62;
          }
        }
        else
        {
          *(void *)uint64_t v147 = v128;
          *(_DWORD *)&v147[8] = v80;
          *(void *)&v147[16] = v125;
          *(_DWORD *)&v147[24] = v81;
          *(_DWORD *)&v147[28] = v87;
          *(void *)&long long v148 = v82;
          *((void *)&v148 + 1) = v121;
          *(void *)&long long v149 = v83;
          *((void *)&v149 + 1) = v84;
          *(void *)&long long v150 = v119;
          *((void *)&v150 + 1) = v115;
          int v151 = v111;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v89, (uint64_t)&v140);
          long long v90 = v141;
          uint64_t v91 = v142;
          unsigned __int8 v92 = v146;
          unint64_t v93 = v142 | ((unint64_t)v143 << 32);
          unint64_t v94 = v144 | ((unint64_t)v145 << 32);
          *(_OWORD *)(v61 + 32) = v140;
          *(_OWORD *)(v61 + 48) = v90;
          *(void *)(v61 + 64) = v93;
          *(void *)(v61 + 72) = v94;
          *(_WORD *)(v61 + 80) = v92;
          a5 = v133;
          if (v91 != 1)
          {
            uint64_t v64 = HIDWORD(*((void *)&v90 + 1));
            goto LABEL_61;
          }
        }
        LODWORD(v64) = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v61 + 60) = v64;
        *(unsigned char *)(v61 + 64) = 0;
        goto LABEL_61;
      }
    }
    else
    {
      *(void *)uint64_t v147 = v127;
      *(_DWORD *)&v147[8] = v65;
      *(void *)&v147[16] = v124;
      *(_DWORD *)&v147[24] = v66;
      *(_DWORD *)&v147[28] = v72;
      *(void *)&long long v148 = v67;
      *((void *)&v148 + 1) = v120;
      *(void *)&long long v149 = v68;
      *((void *)&v149 + 1) = v69;
      *(void *)&long long v150 = v130;
      *((void *)&v150 + 1) = v118;
      int v151 = v114;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v74, (uint64_t)&v140);
      uint64_t v75 = v144;
      unsigned __int8 v76 = v146;
      int v131 = v143;
      unint64_t v77 = v142 | ((unint64_t)v143 << 32);
      unint64_t v78 = v144 | ((unint64_t)v145 << 32);
      long long v79 = v141;
      *(_OWORD *)(v61 + 32) = v140;
      *(_OWORD *)(v61 + 48) = v79;
      *(void *)(v61 + 64) = v77;
      *(void *)(v61 + 72) = v78;
      *(_WORD *)(v61 + 80) = v76;
      if (v75 != 1) {
        goto LABEL_49;
      }
    }
    int v131 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v61 + 68) = v131;
    *(unsigned char *)(v61 + 72) = 0;
    goto LABEL_49;
  }
  int v63 = *(_DWORD *)(a2 + 72);
  LODWORD(v64) = *(_DWORD *)(a2 + 64);
LABEL_62:
  swift_endAccess();
  int v95 = *(_DWORD *)(a2 + 60);
  type metadata accessor for LeafViewResponder<ShapeStyledResponderData<StyledTextContentView>>();
  uint64_t v96 = swift_allocObject();
  *(_OWORD *)(v96 + 40) = 0u;
  *(_OWORD *)(v96 + 56) = 0u;
  *(_OWORD *)(v96 + 72) = 0u;
  *(_OWORD *)(v96 + 88) = 0u;
  *(_OWORD *)(v96 + 104) = 0u;
  *(void *)(v96 + 120) = 0;
  *(void *)(v96 + 128) = v7;
  *(void *)(v96 + 24) = 0;
  *(_OWORD *)(v96 + 136) = 0u;
  *(_OWORD *)(v96 + 152) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  uint64_t v97 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v97 + 200);
  uint64_t v98 = *(void *)(v97 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v96 + 24) = v98;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    long long v99 = (ValueMetadata **)(v135 + 32);
    while (*v99 != &type metadata for ViewRespondersKey)
    {
      v99 += 2;
      if (!--v9) {
        goto LABEL_68;
      }
    }
    *(void *)uint64_t v147 = v134;
    *(_DWORD *)&v147[8] = v63;
    *(_DWORD *)&v147[12] = v64;
    *(_DWORD *)&v147[16] = v95;
    *(void *)&v147[24] = v96;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v138);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<StyledTextContentView> and conformance ShapeStyledResponderFilter<A>();
    swift_retain();
    unsigned int v100 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v147[0] = 0;
    PreferencesOutputs.subscript.setter(v100, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v138);
  }
LABEL_68:
  uint64_t result = swift_release();
  *a5 = v136;
  a5[1] = v137;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  *(void *)(v38 + 152) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 160) = 0u;
  *(_OWORD *)(v38 + 176) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>> and conformance ShapeStyledDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>>);
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<RoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<RoundedRectangle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(void *)(v38 + 120) = 0;
  *(void *)(v38 + 128) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 136) = 0u;
  *(_OWORD *)(v38 + 152) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>> and conformance ShapeStyledResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>>);
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, RadialGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, RadialGradient>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  *(void *)(v38 + 152) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 160) = 0u;
  *(_OWORD *)(v38 + 176) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(void *)(v38 + 104) = 0;
  *(void *)(v38 + 112) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  char v15;
  int v16;
  int OffsetAttribute2;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  int v28;
  uint64_t KeyPath;
  int v30;
  int v31;
  uint64_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  unint64_t v35;
  long long v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  long long v43;
  int v44;
  uint64_t v45;
  int v46;
  long long v47;
  uint64_t v48;
  unsigned __int8 v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  long long v70;
  long long v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unsigned __int8 v76;
  unint64_t v77;
  unint64_t v78;
  long long v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  long long v85;
  long long v86;
  int v87;
  uint64_t v88;
  int v89;
  long long v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  ValueMetadata **v99;
  unsigned int v100;
  uint64_t result;
  void (*v102)(unsigned char *, void);
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  Swift::UInt32 v129;
  uint64_t v130;
  int v131;
  void *v132;
  void *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  long long v140;
  long long v141;
  unsigned __int8 v142;
  unsigned int v143;
  unsigned __int8 v144;
  unsigned int v145;
  unsigned __int8 v146;
  unsigned char v147[32];
  long long v148;
  long long v149;
  long long v150;
  int v151;
  long long v152;
  long long v153;
  long long v154;
  void v155[3];

  unint64_t v134 = __PAIR64__(a3, a1);
  uint64_t v7 = MEMORY[0x263F8EE78];
  v155[1] = *MEMORY[0x263EF8340];
  uint64_t v136 = MEMORY[0x263F8EE78];
  int v8 = *MEMORY[0x263F288F8];
  LODWORD(v137) = 0;
  HIDWORD(v137) = *MEMORY[0x263F288F8];
  uint64_t v138 = *(void *)(a2 + 48);
  int v139 = *(_DWORD *)(a2 + 56);
  uint64_t v135 = v138;
  uint64_t v9 = *(void *)(v138 + 16);
  if (!v9) {
    goto LABEL_36;
  }
  int v11 = (ValueMetadata **)(v138 + 32);
  uint64_t v12 = *(void *)(v138 + 16);
  while (*v11 != &type metadata for DisplayList.Key)
  {
    v11 += 2;
    if (!--v12) {
      goto LABEL_36;
    }
  }
  Swift::UInt32 v13 = ++lastIdentity;
  long long v14 = *(_OWORD *)(a2 + 32);
  long long v153 = *(_OWORD *)(a2 + 16);
  long long v154 = v14;
  long long v152 = *(_OWORD *)a2;
  char v15 = BYTE4(v14);
  if ((WORD2(v14) & 0x100) != 0)
  {
    outlined retain of _ViewInputs(a2);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs(a2);
    uint64_t result = AGWeakAttributeGetAttribute();
    if (result == v8)
    {
      __break(1u);
      return result;
    }
    LODWORD(v140) = v13;
    long long v102 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v140);
    v102(v147, 0);
  }
  int v16 = *(_DWORD *)(a2 + 72);
  swift_retain();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v18 = v153;
  uint64_t v19 = (unsigned int *)(v153 + 16);
  swift_beginAccess();
  Swift::UInt32 v129 = v13;
  int v126 = OffsetAttribute2;
  if ((v15 & 0x20) != 0)
  {
    uint64_t v132 = a5;
    uint64_t v21 = *(void *)a2;
    int v22 = *(_DWORD *)(a2 + 8);
    uint64_t v123 = *(void *)(a2 + 16);
    int v23 = *(_DWORD *)(a2 + 24);
    uint64_t v24 = *(void *)(a2 + 32);
    uint64_t v116 = *(void *)(a2 + 40);
    uint64_t v110 = a4;
    uint64_t v112 = *(void *)(a2 + 48);
    uint64_t v25 = *(void *)(a2 + 56);
    uint64_t v107 = *(void *)(a2 + 72);
    uint64_t v108 = *(void *)(a2 + 64);
    int v105 = *(_DWORD *)(a2 + 80);
    long long v26 = *(_OWORD *)(a2 + 48);
    long long v148 = *(_OWORD *)(a2 + 32);
    long long v149 = v26;
    long long v150 = *(_OWORD *)(a2 + 64);
    int v151 = *(_DWORD *)(a2 + 80);
    long long v27 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
    *(_OWORD *)&v147[16] = v27;
    outlined retain of _ViewInputs(a2);
    int v28 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v30 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v18 + 81) & 1) == 0
      && v108 == *(_DWORD *)(v18 + 32)
      && v107 == *(_DWORD *)(v18 + 36)
      && v30 == *(_DWORD *)(v18 + 40)
      && v22 == *(_DWORD *)(v18 + 44)
      && v28 == *(_DWORD *)(v18 + 48)
      && v23 == *(_DWORD *)(v18 + 52))
    {
      if ((*(unsigned char *)(v18 + 72) & 1) == 0)
      {
        int v31 = *(_DWORD *)(v18 + 68);
        goto LABEL_20;
      }
    }
    else
    {
      *(void *)uint64_t v147 = v21;
      *(_DWORD *)&v147[8] = v22;
      *(void *)&v147[16] = v123;
      *(_DWORD *)&v147[24] = v23;
      *(_DWORD *)&v147[28] = v28;
      *(void *)&long long v148 = v24;
      *((void *)&v148 + 1) = v116;
      *(void *)&long long v149 = v112;
      *((void *)&v149 + 1) = v25;
      *(void *)&long long v150 = v108;
      *((void *)&v150 + 1) = v107;
      int v151 = v105;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v30, (uint64_t)&v140);
      int v31 = v143;
      uint64_t v32 = v144;
      unsigned __int8 v33 = v146;
      unint64_t v34 = v142 | ((unint64_t)v143 << 32);
      unint64_t v35 = v144 | ((unint64_t)v145 << 32);
      long long v36 = v141;
      *(_OWORD *)(v18 + 32) = v140;
      *(_OWORD *)(v18 + 48) = v36;
      *(void *)(v18 + 64) = v34;
      *(void *)(v18 + 72) = v35;
      *(_WORD *)(v18 + 80) = v33;
      if (v32 != 1) {
        goto LABEL_20;
      }
    }
    int v31 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 68) = v31;
    *(unsigned char *)(v18 + 72) = 0;
LABEL_20:
    int v122 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v37 = *(void *)a2;
    int v38 = *(_DWORD *)(a2 + 8);
    uint64_t v109 = *(void *)(a2 + 16);
    int v39 = *(_DWORD *)(a2 + 24);
    uint64_t v40 = *(void *)(a2 + 32);
    uint64_t v117 = *(void *)(a2 + 40);
    uint64_t v113 = *(void *)(a2 + 48);
    uint64_t v41 = *(void *)(a2 + 56);
    uint64_t v104 = *(void *)(a2 + 72);
    uint64_t v106 = *(void *)(a2 + 64);
    int v103 = *(_DWORD *)(a2 + 80);
    long long v42 = *(_OWORD *)(a2 + 48);
    long long v148 = *(_OWORD *)(a2 + 32);
    long long v149 = v42;
    long long v150 = *(_OWORD *)(a2 + 64);
    int v151 = *(_DWORD *)(a2 + 80);
    long long v43 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
    *(_OWORD *)&v147[16] = v43;
    outlined retain of _ViewInputs(a2);
    int v44 = _ViewInputs.geometryTransaction()();
    uint64_t v45 = swift_getKeyPath();
    int v46 = specialized CachedEnvironment.attribute<A>(keyPath:)(v45);
    swift_release();
    a4 = v110;
    if ((*(unsigned char *)(v18 + 81) & 1) == 0
      && v106 == *(_DWORD *)(v18 + 32)
      && v104 == *(_DWORD *)(v18 + 36)
      && v46 == *(_DWORD *)(v18 + 40)
      && v38 == *(_DWORD *)(v18 + 44)
      && v44 == *(_DWORD *)(v18 + 48)
      && v39 == *(_DWORD *)(v18 + 52))
    {
      a5 = v132;
      if ((*(unsigned char *)(v18 + 64) & 1) == 0)
      {
        LODWORD(v20) = *(_DWORD *)(v18 + 60);
        goto LABEL_31;
      }
    }
    else
    {
      *(void *)uint64_t v147 = v37;
      *(_DWORD *)&v147[8] = v38;
      *(void *)&v147[16] = v109;
      *(_DWORD *)&v147[24] = v39;
      *(_DWORD *)&v147[28] = v44;
      *(void *)&long long v148 = v40;
      *((void *)&v148 + 1) = v117;
      *(void *)&long long v149 = v113;
      *((void *)&v149 + 1) = v41;
      *(void *)&long long v150 = v106;
      *((void *)&v150 + 1) = v104;
      int v151 = v103;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v46, (uint64_t)&v140);
      long long v47 = v141;
      uint64_t v48 = v142;
      unsigned __int8 v49 = v146;
      unint64_t v50 = v142 | ((unint64_t)v143 << 32);
      unint64_t v51 = v144 | ((unint64_t)v145 << 32);
      *(_OWORD *)(v18 + 32) = v140;
      *(_OWORD *)(v18 + 48) = v47;
      *(void *)(v18 + 64) = v50;
      *(void *)(v18 + 72) = v51;
      *(_WORD *)(v18 + 80) = v49;
      a5 = v132;
      if (v48 != 1)
      {
        uint64_t v20 = HIDWORD(*((void *)&v47 + 1));
LABEL_31:
        uint64_t v19 = (unsigned int *)(v18 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_32;
      }
    }
    LODWORD(v20) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 60) = v20;
    *(unsigned char *)(v18 + 64) = 0;
    goto LABEL_31;
  }
  int v122 = v16;
  LODWORD(v20) = *(_DWORD *)(a2 + 64);
LABEL_32:
  swift_endAccess();
  unsigned int v52 = *v19;
  uint64_t v53 = v152;
  v155[0] = v152;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)&v152);
  outlined retain of ViewTransform((uint64_t)v155);
  uint64_t v54 = specialized find<A>(_:key:)(v53);
  unsigned int v55 = a5;
  if (v54) {
    char v56 = *(unsigned char *)(v54 + 72);
  }
  else {
    char v56 = 0;
  }
  unsigned int v57 = *(_DWORD *)(a2 + 68);
  unsigned int v58 = *(_DWORD *)(a2 + 60);
  unsigned int v59 = *(_DWORD *)(a2 + 76);
  outlined release of ViewTransform((uint64_t)v155);
  outlined release of _GraphInputs((uint64_t)&v152);
  outlined release of _ViewInputs(a2);
  *(void *)uint64_t v147 = a4;
  *(_DWORD *)&v147[8] = v129;
  *(void *)&v147[12] = v134;
  *(_DWORD *)&v147[20] = v126;
  *(_DWORD *)&v147[24] = v122;
  *(_DWORD *)&v147[28] = v20;
  *(void *)&long long v148 = __PAIR64__(v58, v57);
  *((void *)&v148 + 1) = __PAIR64__(v59, v52);
  LOBYTE(v149) = v56;
  WORD1(v149) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
  lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
  unsigned int v60 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v147[0] = 0;
  PreferencesOutputs.subscript.setter(v60, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
  a5 = v55;
  uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_36:
  uint64_t v61 = *(void *)(a2 + 16);
  int v62 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  if ((v62 & 0x20) != 0)
  {
    uint64_t v133 = a5;
    int v65 = *(_DWORD *)(a2 + 8);
    uint64_t v124 = *(void *)(a2 + 16);
    uint64_t v127 = *(void *)a2;
    int v66 = *(_DWORD *)(a2 + 24);
    uint64_t v67 = *(void *)(a2 + 32);
    uint64_t v68 = *(void *)(a2 + 48);
    uint64_t v120 = *(void *)(a2 + 40);
    uint64_t v69 = *(void *)(a2 + 56);
    uint64_t v130 = *(void *)(a2 + 64);
    uint64_t v118 = *(void *)(a2 + 72);
    int v114 = *(_DWORD *)(a2 + 80);
    long long v70 = *(_OWORD *)(a2 + 48);
    long long v148 = *(_OWORD *)(a2 + 32);
    long long v149 = v70;
    long long v150 = *(_OWORD *)(a2 + 64);
    int v151 = *(_DWORD *)(a2 + 80);
    long long v71 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
    *(_OWORD *)&v147[16] = v71;
    outlined retain of _ViewInputs(a2);
    int v72 = _ViewInputs.geometryTransaction()();
    uint64_t v73 = swift_getKeyPath();
    int v74 = specialized CachedEnvironment.attribute<A>(keyPath:)(v73);
    swift_release();
    if ((*(unsigned char *)(v61 + 81) & 1) == 0
      && v130 == *(_DWORD *)(v61 + 32)
      && v118 == *(_DWORD *)(v61 + 36)
      && v74 == *(_DWORD *)(v61 + 40)
      && v65 == *(_DWORD *)(v61 + 44)
      && v72 == *(_DWORD *)(v61 + 48)
      && v66 == *(_DWORD *)(v61 + 52))
    {
      if ((*(unsigned char *)(v61 + 72) & 1) == 0)
      {
        int v131 = *(_DWORD *)(v61 + 68);
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v80 = *(_DWORD *)(a2 + 8);
        uint64_t v125 = *(void *)(a2 + 16);
        uint64_t v128 = *(void *)a2;
        int v81 = *(_DWORD *)(a2 + 24);
        uint64_t v82 = *(void *)(a2 + 32);
        uint64_t v83 = *(void *)(a2 + 48);
        uint64_t v121 = *(void *)(a2 + 40);
        uint64_t v84 = *(void *)(a2 + 56);
        uint64_t v115 = *(void *)(a2 + 72);
        uint64_t v119 = *(void *)(a2 + 64);
        int v111 = *(_DWORD *)(a2 + 80);
        long long v85 = *(_OWORD *)(a2 + 48);
        long long v148 = *(_OWORD *)(a2 + 32);
        long long v149 = v85;
        long long v150 = *(_OWORD *)(a2 + 64);
        int v151 = *(_DWORD *)(a2 + 80);
        long long v86 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
        *(_OWORD *)&v147[16] = v86;
        outlined retain of _ViewInputs(a2);
        int v87 = _ViewInputs.geometryTransaction()();
        uint64_t v88 = swift_getKeyPath();
        int v89 = specialized CachedEnvironment.attribute<A>(keyPath:)(v88);
        swift_release();
        if ((*(unsigned char *)(v61 + 81) & 1) == 0
          && v119 == *(_DWORD *)(v61 + 32)
          && v115 == *(_DWORD *)(v61 + 36)
          && v89 == *(_DWORD *)(v61 + 40)
          && v80 == *(_DWORD *)(v61 + 44)
          && v87 == *(_DWORD *)(v61 + 48)
          && v81 == *(_DWORD *)(v61 + 52))
        {
          a5 = v133;
          if ((*(unsigned char *)(v61 + 64) & 1) == 0)
          {
            LODWORD(v64) = *(_DWORD *)(v61 + 60);
LABEL_61:
            int v63 = v131;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            uint64_t v7 = MEMORY[0x263F8EE78];
            goto LABEL_62;
          }
        }
        else
        {
          *(void *)uint64_t v147 = v128;
          *(_DWORD *)&v147[8] = v80;
          *(void *)&v147[16] = v125;
          *(_DWORD *)&v147[24] = v81;
          *(_DWORD *)&v147[28] = v87;
          *(void *)&long long v148 = v82;
          *((void *)&v148 + 1) = v121;
          *(void *)&long long v149 = v83;
          *((void *)&v149 + 1) = v84;
          *(void *)&long long v150 = v119;
          *((void *)&v150 + 1) = v115;
          int v151 = v111;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v89, (uint64_t)&v140);
          long long v90 = v141;
          uint64_t v91 = v142;
          unsigned __int8 v92 = v146;
          unint64_t v93 = v142 | ((unint64_t)v143 << 32);
          unint64_t v94 = v144 | ((unint64_t)v145 << 32);
          *(_OWORD *)(v61 + 32) = v140;
          *(_OWORD *)(v61 + 48) = v90;
          *(void *)(v61 + 64) = v93;
          *(void *)(v61 + 72) = v94;
          *(_WORD *)(v61 + 80) = v92;
          a5 = v133;
          if (v91 != 1)
          {
            uint64_t v64 = HIDWORD(*((void *)&v90 + 1));
            goto LABEL_61;
          }
        }
        LODWORD(v64) = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v61 + 60) = v64;
        *(unsigned char *)(v61 + 64) = 0;
        goto LABEL_61;
      }
    }
    else
    {
      *(void *)uint64_t v147 = v127;
      *(_DWORD *)&v147[8] = v65;
      *(void *)&v147[16] = v124;
      *(_DWORD *)&v147[24] = v66;
      *(_DWORD *)&v147[28] = v72;
      *(void *)&long long v148 = v67;
      *((void *)&v148 + 1) = v120;
      *(void *)&long long v149 = v68;
      *((void *)&v149 + 1) = v69;
      *(void *)&long long v150 = v130;
      *((void *)&v150 + 1) = v118;
      int v151 = v114;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v74, (uint64_t)&v140);
      uint64_t v75 = v144;
      unsigned __int8 v76 = v146;
      int v131 = v143;
      unint64_t v77 = v142 | ((unint64_t)v143 << 32);
      unint64_t v78 = v144 | ((unint64_t)v145 << 32);
      long long v79 = v141;
      *(_OWORD *)(v61 + 32) = v140;
      *(_OWORD *)(v61 + 48) = v79;
      *(void *)(v61 + 64) = v77;
      *(void *)(v61 + 72) = v78;
      *(_WORD *)(v61 + 80) = v76;
      if (v75 != 1) {
        goto LABEL_49;
      }
    }
    int v131 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v61 + 68) = v131;
    *(unsigned char *)(v61 + 72) = 0;
    goto LABEL_49;
  }
  int v63 = *(_DWORD *)(a2 + 72);
  LODWORD(v64) = *(_DWORD *)(a2 + 64);
LABEL_62:
  swift_endAccess();
  int v95 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  uint64_t v96 = swift_allocObject();
  *(_OWORD *)(v96 + 40) = 0u;
  *(_OWORD *)(v96 + 56) = 0u;
  *(_OWORD *)(v96 + 72) = 0u;
  *(_OWORD *)(v96 + 88) = 0u;
  *(_OWORD *)(v96 + 104) = 0u;
  *(_OWORD *)(v96 + 120) = 0u;
  *(void *)(v96 + 136) = 0;
  *(void *)(v96 + 144) = v7;
  *(void *)(v96 + 24) = 0;
  *(_OWORD *)(v96 + 152) = 0u;
  *(_OWORD *)(v96 + 168) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  uint64_t v97 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v97 + 200);
  uint64_t v98 = *(void *)(v97 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v96 + 24) = v98;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    long long v99 = (ValueMetadata **)(v135 + 32);
    while (*v99 != &type metadata for ViewRespondersKey)
    {
      v99 += 2;
      if (!--v9) {
        goto LABEL_68;
      }
    }
    *(void *)uint64_t v147 = v134;
    *(_DWORD *)&v147[8] = v63;
    *(_DWORD *)&v147[12] = v64;
    *(_DWORD *)&v147[16] = v95;
    *(void *)&v147[24] = v96;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v138);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    swift_retain();
    unsigned int v100 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v147[0] = 0;
    PreferencesOutputs.subscript.setter(v100, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v138);
  }
LABEL_68:
  uint64_t result = swift_release();
  *a5 = v136;
  a5[1] = v137;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  char v15;
  int v16;
  int OffsetAttribute2;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  int v28;
  uint64_t KeyPath;
  int v30;
  int v31;
  uint64_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  unint64_t v35;
  long long v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  long long v43;
  int v44;
  uint64_t v45;
  int v46;
  long long v47;
  uint64_t v48;
  unsigned __int8 v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  long long v70;
  long long v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unsigned __int8 v76;
  unint64_t v77;
  unint64_t v78;
  long long v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  long long v85;
  long long v86;
  int v87;
  uint64_t v88;
  int v89;
  long long v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  ValueMetadata **v99;
  unsigned int v100;
  uint64_t result;
  void (*v102)(unsigned char *, void);
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  Swift::UInt32 v129;
  uint64_t v130;
  int v131;
  void *v132;
  void *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  long long v140;
  long long v141;
  unsigned __int8 v142;
  unsigned int v143;
  unsigned __int8 v144;
  unsigned int v145;
  unsigned __int8 v146;
  unsigned char v147[32];
  long long v148;
  long long v149;
  long long v150;
  int v151;
  long long v152;
  long long v153;
  long long v154;
  void v155[3];

  unint64_t v134 = __PAIR64__(a3, a1);
  uint64_t v7 = MEMORY[0x263F8EE78];
  v155[1] = *MEMORY[0x263EF8340];
  uint64_t v136 = MEMORY[0x263F8EE78];
  int v8 = *MEMORY[0x263F288F8];
  LODWORD(v137) = 0;
  HIDWORD(v137) = *MEMORY[0x263F288F8];
  uint64_t v138 = *(void *)(a2 + 48);
  int v139 = *(_DWORD *)(a2 + 56);
  uint64_t v135 = v138;
  uint64_t v9 = *(void *)(v138 + 16);
  if (!v9) {
    goto LABEL_36;
  }
  int v11 = (ValueMetadata **)(v138 + 32);
  uint64_t v12 = *(void *)(v138 + 16);
  while (*v11 != &type metadata for DisplayList.Key)
  {
    v11 += 2;
    if (!--v12) {
      goto LABEL_36;
    }
  }
  Swift::UInt32 v13 = ++lastIdentity;
  long long v14 = *(_OWORD *)(a2 + 32);
  long long v153 = *(_OWORD *)(a2 + 16);
  long long v154 = v14;
  long long v152 = *(_OWORD *)a2;
  char v15 = BYTE4(v14);
  if ((WORD2(v14) & 0x100) != 0)
  {
    outlined retain of _ViewInputs(a2);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs(a2);
    uint64_t result = AGWeakAttributeGetAttribute();
    if (result == v8)
    {
      __break(1u);
      return result;
    }
    LODWORD(v140) = v13;
    long long v102 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v140);
    v102(v147, 0);
  }
  int v16 = *(_DWORD *)(a2 + 72);
  swift_retain();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v18 = v153;
  uint64_t v19 = (unsigned int *)(v153 + 16);
  swift_beginAccess();
  Swift::UInt32 v129 = v13;
  int v126 = OffsetAttribute2;
  if ((v15 & 0x20) != 0)
  {
    uint64_t v132 = a5;
    uint64_t v21 = *(void *)a2;
    int v22 = *(_DWORD *)(a2 + 8);
    uint64_t v123 = *(void *)(a2 + 16);
    int v23 = *(_DWORD *)(a2 + 24);
    uint64_t v24 = *(void *)(a2 + 32);
    uint64_t v116 = *(void *)(a2 + 40);
    uint64_t v110 = a4;
    uint64_t v112 = *(void *)(a2 + 48);
    uint64_t v25 = *(void *)(a2 + 56);
    uint64_t v107 = *(void *)(a2 + 72);
    uint64_t v108 = *(void *)(a2 + 64);
    int v105 = *(_DWORD *)(a2 + 80);
    long long v26 = *(_OWORD *)(a2 + 48);
    long long v148 = *(_OWORD *)(a2 + 32);
    long long v149 = v26;
    long long v150 = *(_OWORD *)(a2 + 64);
    int v151 = *(_DWORD *)(a2 + 80);
    long long v27 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
    *(_OWORD *)&v147[16] = v27;
    outlined retain of _ViewInputs(a2);
    int v28 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v30 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v18 + 81) & 1) == 0
      && v108 == *(_DWORD *)(v18 + 32)
      && v107 == *(_DWORD *)(v18 + 36)
      && v30 == *(_DWORD *)(v18 + 40)
      && v22 == *(_DWORD *)(v18 + 44)
      && v28 == *(_DWORD *)(v18 + 48)
      && v23 == *(_DWORD *)(v18 + 52))
    {
      if ((*(unsigned char *)(v18 + 72) & 1) == 0)
      {
        int v31 = *(_DWORD *)(v18 + 68);
        goto LABEL_20;
      }
    }
    else
    {
      *(void *)uint64_t v147 = v21;
      *(_DWORD *)&v147[8] = v22;
      *(void *)&v147[16] = v123;
      *(_DWORD *)&v147[24] = v23;
      *(_DWORD *)&v147[28] = v28;
      *(void *)&long long v148 = v24;
      *((void *)&v148 + 1) = v116;
      *(void *)&long long v149 = v112;
      *((void *)&v149 + 1) = v25;
      *(void *)&long long v150 = v108;
      *((void *)&v150 + 1) = v107;
      int v151 = v105;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v30, (uint64_t)&v140);
      int v31 = v143;
      uint64_t v32 = v144;
      unsigned __int8 v33 = v146;
      unint64_t v34 = v142 | ((unint64_t)v143 << 32);
      unint64_t v35 = v144 | ((unint64_t)v145 << 32);
      long long v36 = v141;
      *(_OWORD *)(v18 + 32) = v140;
      *(_OWORD *)(v18 + 48) = v36;
      *(void *)(v18 + 64) = v34;
      *(void *)(v18 + 72) = v35;
      *(_WORD *)(v18 + 80) = v33;
      if (v32 != 1) {
        goto LABEL_20;
      }
    }
    int v31 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 68) = v31;
    *(unsigned char *)(v18 + 72) = 0;
LABEL_20:
    int v122 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v37 = *(void *)a2;
    int v38 = *(_DWORD *)(a2 + 8);
    uint64_t v109 = *(void *)(a2 + 16);
    int v39 = *(_DWORD *)(a2 + 24);
    uint64_t v40 = *(void *)(a2 + 32);
    uint64_t v117 = *(void *)(a2 + 40);
    uint64_t v113 = *(void *)(a2 + 48);
    uint64_t v41 = *(void *)(a2 + 56);
    uint64_t v104 = *(void *)(a2 + 72);
    uint64_t v106 = *(void *)(a2 + 64);
    int v103 = *(_DWORD *)(a2 + 80);
    long long v42 = *(_OWORD *)(a2 + 48);
    long long v148 = *(_OWORD *)(a2 + 32);
    long long v149 = v42;
    long long v150 = *(_OWORD *)(a2 + 64);
    int v151 = *(_DWORD *)(a2 + 80);
    long long v43 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
    *(_OWORD *)&v147[16] = v43;
    outlined retain of _ViewInputs(a2);
    int v44 = _ViewInputs.geometryTransaction()();
    uint64_t v45 = swift_getKeyPath();
    int v46 = specialized CachedEnvironment.attribute<A>(keyPath:)(v45);
    swift_release();
    a4 = v110;
    if ((*(unsigned char *)(v18 + 81) & 1) == 0
      && v106 == *(_DWORD *)(v18 + 32)
      && v104 == *(_DWORD *)(v18 + 36)
      && v46 == *(_DWORD *)(v18 + 40)
      && v38 == *(_DWORD *)(v18 + 44)
      && v44 == *(_DWORD *)(v18 + 48)
      && v39 == *(_DWORD *)(v18 + 52))
    {
      a5 = v132;
      if ((*(unsigned char *)(v18 + 64) & 1) == 0)
      {
        LODWORD(v20) = *(_DWORD *)(v18 + 60);
        goto LABEL_31;
      }
    }
    else
    {
      *(void *)uint64_t v147 = v37;
      *(_DWORD *)&v147[8] = v38;
      *(void *)&v147[16] = v109;
      *(_DWORD *)&v147[24] = v39;
      *(_DWORD *)&v147[28] = v44;
      *(void *)&long long v148 = v40;
      *((void *)&v148 + 1) = v117;
      *(void *)&long long v149 = v113;
      *((void *)&v149 + 1) = v41;
      *(void *)&long long v150 = v106;
      *((void *)&v150 + 1) = v104;
      int v151 = v103;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v46, (uint64_t)&v140);
      long long v47 = v141;
      uint64_t v48 = v142;
      unsigned __int8 v49 = v146;
      unint64_t v50 = v142 | ((unint64_t)v143 << 32);
      unint64_t v51 = v144 | ((unint64_t)v145 << 32);
      *(_OWORD *)(v18 + 32) = v140;
      *(_OWORD *)(v18 + 48) = v47;
      *(void *)(v18 + 64) = v50;
      *(void *)(v18 + 72) = v51;
      *(_WORD *)(v18 + 80) = v49;
      a5 = v132;
      if (v48 != 1)
      {
        uint64_t v20 = HIDWORD(*((void *)&v47 + 1));
LABEL_31:
        uint64_t v19 = (unsigned int *)(v18 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_32;
      }
    }
    LODWORD(v20) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 60) = v20;
    *(unsigned char *)(v18 + 64) = 0;
    goto LABEL_31;
  }
  int v122 = v16;
  LODWORD(v20) = *(_DWORD *)(a2 + 64);
LABEL_32:
  swift_endAccess();
  unsigned int v52 = *v19;
  uint64_t v53 = v152;
  v155[0] = v152;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)&v152);
  outlined retain of ViewTransform((uint64_t)v155);
  uint64_t v54 = specialized find<A>(_:key:)(v53);
  unsigned int v55 = a5;
  if (v54) {
    char v56 = *(unsigned char *)(v54 + 72);
  }
  else {
    char v56 = 0;
  }
  unsigned int v57 = *(_DWORD *)(a2 + 68);
  unsigned int v58 = *(_DWORD *)(a2 + 60);
  unsigned int v59 = *(_DWORD *)(a2 + 76);
  outlined release of ViewTransform((uint64_t)v155);
  outlined release of _GraphInputs((uint64_t)&v152);
  outlined release of _ViewInputs(a2);
  *(void *)uint64_t v147 = a4;
  *(_DWORD *)&v147[8] = v129;
  *(void *)&v147[12] = v134;
  *(_DWORD *)&v147[20] = v126;
  *(_DWORD *)&v147[24] = v122;
  *(_DWORD *)&v147[28] = v20;
  *(void *)&long long v148 = __PAIR64__(v58, v57);
  *((void *)&v148 + 1) = __PAIR64__(v59, v52);
  LOBYTE(v149) = v56;
  WORD1(v149) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
  lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
  unsigned int v60 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v147[0] = 0;
  PreferencesOutputs.subscript.setter(v60, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
  a5 = v55;
  uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_36:
  uint64_t v61 = *(void *)(a2 + 16);
  int v62 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  if ((v62 & 0x20) != 0)
  {
    uint64_t v133 = a5;
    int v65 = *(_DWORD *)(a2 + 8);
    uint64_t v124 = *(void *)(a2 + 16);
    uint64_t v127 = *(void *)a2;
    int v66 = *(_DWORD *)(a2 + 24);
    uint64_t v67 = *(void *)(a2 + 32);
    uint64_t v68 = *(void *)(a2 + 48);
    uint64_t v120 = *(void *)(a2 + 40);
    uint64_t v69 = *(void *)(a2 + 56);
    uint64_t v130 = *(void *)(a2 + 64);
    uint64_t v118 = *(void *)(a2 + 72);
    int v114 = *(_DWORD *)(a2 + 80);
    long long v70 = *(_OWORD *)(a2 + 48);
    long long v148 = *(_OWORD *)(a2 + 32);
    long long v149 = v70;
    long long v150 = *(_OWORD *)(a2 + 64);
    int v151 = *(_DWORD *)(a2 + 80);
    long long v71 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
    *(_OWORD *)&v147[16] = v71;
    outlined retain of _ViewInputs(a2);
    int v72 = _ViewInputs.geometryTransaction()();
    uint64_t v73 = swift_getKeyPath();
    int v74 = specialized CachedEnvironment.attribute<A>(keyPath:)(v73);
    swift_release();
    if ((*(unsigned char *)(v61 + 81) & 1) == 0
      && v130 == *(_DWORD *)(v61 + 32)
      && v118 == *(_DWORD *)(v61 + 36)
      && v74 == *(_DWORD *)(v61 + 40)
      && v65 == *(_DWORD *)(v61 + 44)
      && v72 == *(_DWORD *)(v61 + 48)
      && v66 == *(_DWORD *)(v61 + 52))
    {
      if ((*(unsigned char *)(v61 + 72) & 1) == 0)
      {
        int v131 = *(_DWORD *)(v61 + 68);
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v80 = *(_DWORD *)(a2 + 8);
        uint64_t v125 = *(void *)(a2 + 16);
        uint64_t v128 = *(void *)a2;
        int v81 = *(_DWORD *)(a2 + 24);
        uint64_t v82 = *(void *)(a2 + 32);
        uint64_t v83 = *(void *)(a2 + 48);
        uint64_t v121 = *(void *)(a2 + 40);
        uint64_t v84 = *(void *)(a2 + 56);
        uint64_t v115 = *(void *)(a2 + 72);
        uint64_t v119 = *(void *)(a2 + 64);
        int v111 = *(_DWORD *)(a2 + 80);
        long long v85 = *(_OWORD *)(a2 + 48);
        long long v148 = *(_OWORD *)(a2 + 32);
        long long v149 = v85;
        long long v150 = *(_OWORD *)(a2 + 64);
        int v151 = *(_DWORD *)(a2 + 80);
        long long v86 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v147 = *(_OWORD *)a2;
        *(_OWORD *)&v147[16] = v86;
        outlined retain of _ViewInputs(a2);
        int v87 = _ViewInputs.geometryTransaction()();
        uint64_t v88 = swift_getKeyPath();
        int v89 = specialized CachedEnvironment.attribute<A>(keyPath:)(v88);
        swift_release();
        if ((*(unsigned char *)(v61 + 81) & 1) == 0
          && v119 == *(_DWORD *)(v61 + 32)
          && v115 == *(_DWORD *)(v61 + 36)
          && v89 == *(_DWORD *)(v61 + 40)
          && v80 == *(_DWORD *)(v61 + 44)
          && v87 == *(_DWORD *)(v61 + 48)
          && v81 == *(_DWORD *)(v61 + 52))
        {
          a5 = v133;
          if ((*(unsigned char *)(v61 + 64) & 1) == 0)
          {
            LODWORD(v64) = *(_DWORD *)(v61 + 60);
LABEL_61:
            int v63 = v131;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            uint64_t v7 = MEMORY[0x263F8EE78];
            goto LABEL_62;
          }
        }
        else
        {
          *(void *)uint64_t v147 = v128;
          *(_DWORD *)&v147[8] = v80;
          *(void *)&v147[16] = v125;
          *(_DWORD *)&v147[24] = v81;
          *(_DWORD *)&v147[28] = v87;
          *(void *)&long long v148 = v82;
          *((void *)&v148 + 1) = v121;
          *(void *)&long long v149 = v83;
          *((void *)&v149 + 1) = v84;
          *(void *)&long long v150 = v119;
          *((void *)&v150 + 1) = v115;
          int v151 = v111;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v89, (uint64_t)&v140);
          long long v90 = v141;
          uint64_t v91 = v142;
          unsigned __int8 v92 = v146;
          unint64_t v93 = v142 | ((unint64_t)v143 << 32);
          unint64_t v94 = v144 | ((unint64_t)v145 << 32);
          *(_OWORD *)(v61 + 32) = v140;
          *(_OWORD *)(v61 + 48) = v90;
          *(void *)(v61 + 64) = v93;
          *(void *)(v61 + 72) = v94;
          *(_WORD *)(v61 + 80) = v92;
          a5 = v133;
          if (v91 != 1)
          {
            uint64_t v64 = HIDWORD(*((void *)&v90 + 1));
            goto LABEL_61;
          }
        }
        LODWORD(v64) = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v61 + 60) = v64;
        *(unsigned char *)(v61 + 64) = 0;
        goto LABEL_61;
      }
    }
    else
    {
      *(void *)uint64_t v147 = v127;
      *(_DWORD *)&v147[8] = v65;
      *(void *)&v147[16] = v124;
      *(_DWORD *)&v147[24] = v66;
      *(_DWORD *)&v147[28] = v72;
      *(void *)&long long v148 = v67;
      *((void *)&v148 + 1) = v120;
      *(void *)&long long v149 = v68;
      *((void *)&v149 + 1) = v69;
      *(void *)&long long v150 = v130;
      *((void *)&v150 + 1) = v118;
      int v151 = v114;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v147, v74, (uint64_t)&v140);
      uint64_t v75 = v144;
      unsigned __int8 v76 = v146;
      int v131 = v143;
      unint64_t v77 = v142 | ((unint64_t)v143 << 32);
      unint64_t v78 = v144 | ((unint64_t)v145 << 32);
      long long v79 = v141;
      *(_OWORD *)(v61 + 32) = v140;
      *(_OWORD *)(v61 + 48) = v79;
      *(void *)(v61 + 64) = v77;
      *(void *)(v61 + 72) = v78;
      *(_WORD *)(v61 + 80) = v76;
      if (v75 != 1) {
        goto LABEL_49;
      }
    }
    int v131 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v61 + 68) = v131;
    *(unsigned char *)(v61 + 72) = 0;
    goto LABEL_49;
  }
  int v63 = *(_DWORD *)(a2 + 72);
  LODWORD(v64) = *(_DWORD *)(a2 + 64);
LABEL_62:
  swift_endAccess();
  int v95 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  uint64_t v96 = swift_allocObject();
  *(_OWORD *)(v96 + 40) = 0u;
  *(_OWORD *)(v96 + 56) = 0u;
  *(_OWORD *)(v96 + 72) = 0u;
  *(_OWORD *)(v96 + 88) = 0u;
  *(_OWORD *)(v96 + 104) = 0u;
  *(void *)(v96 + 120) = v7;
  *(void *)(v96 + 24) = 0;
  *(_OWORD *)(v96 + 128) = 0u;
  *(_OWORD *)(v96 + 144) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  uint64_t v97 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v97 + 200);
  uint64_t v98 = *(void *)(v97 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v96 + 24) = v98;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    long long v99 = (ValueMetadata **)(v135 + 32);
    while (*v99 != &type metadata for ViewRespondersKey)
    {
      v99 += 2;
      if (!--v9) {
        goto LABEL_68;
      }
    }
    *(void *)uint64_t v147 = v134;
    *(_DWORD *)&v147[8] = v63;
    *(_DWORD *)&v147[12] = v64;
    *(_DWORD *)&v147[16] = v95;
    *(void *)&v147[24] = v96;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v138);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    swift_retain();
    unsigned int v100 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v147[0] = 0;
    PreferencesOutputs.subscript.setter(v100, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v138);
  }
LABEL_68:
  uint64_t result = swift_release();
  *a5 = v136;
  a5[1] = v137;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>> and conformance ShapeStyledDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>>);
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<Rectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<Rectangle._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(void *)(v38 + 120) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 128) = 0u;
  *(_OWORD *)(v38 + 144) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>> and conformance ShapeStyledResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>>);
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<AnyShape>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<AnyShape>> and conformance ShapeStyledDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<AnyShape>>);
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<AnyShape>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<AnyShape>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(void *)(v38 + 120) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 128) = 0u;
  *(_OWORD *)(v38 + 144) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<AnyShape>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<AnyShape>> and conformance ShapeStyledResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<AnyShape>>);
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Ellipse, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(void *)(v38 + 104) = 0;
  *(void *)(v38 + 112) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>> and conformance ShapeStyledDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>>);
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<Ellipse._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<Ellipse._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(void *)(v38 + 120) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 128) = 0u;
  *(_OWORD *)(v38 + 144) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>> and conformance ShapeStyledResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>>);
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Capsule, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(void *)(v38 + 104) = 0;
  *(void *)(v38 + 112) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>> and conformance ShapeStyledDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>>);
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<Capsule._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<Capsule._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(void *)(v38 + 120) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 128) = 0u;
  *(_OWORD *)(v38 + 144) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>> and conformance ShapeStyledResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>>);
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Circle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Circle, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(void *)(v38 + 104) = 0;
  *(void *)(v38 + 112) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Circle._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<Circle._Inset>> and conformance ShapeStyledDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Circle._Inset>>);
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<Circle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<Circle._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(void *)(v38 + 120) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 128) = 0u;
  *(_OWORD *)(v38 + 144) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>> and conformance ShapeStyledResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>>);
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(void *)(v38 + 136) = 0;
  *(void *)(v38 + 144) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 152) = 0u;
  *(_OWORD *)(v38 + 168) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>> and conformance ShapeStyledDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>>);
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(void *)(v38 + 136) = 0;
  *(void *)(v38 + 144) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 152) = 0u;
  *(_OWORD *)(v38 + 168) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>> and conformance ShapeStyledResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>>);
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance ShapeStyledDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>>);
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  *(void *)(v38 + 152) = 0;
  *(void *)(v38 + 160) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 168) = 0u;
  *(_OWORD *)(v38 + 184) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance ShapeStyledResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>>);
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<ContainerRelativeShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(void *)(v38 + 104) = 0;
  *(void *)(v38 + 112) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>>);
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<ContainerRelativeShape._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<ContainerRelativeShape._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(void *)(v38 + 120) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 128) = 0u;
  *(_OWORD *)(v38 + 144) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>>);
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  *(void *)(v38 + 152) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 160) = 0u;
  *(_OWORD *)(v38 + 176) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>> and conformance ShapeStyledDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>>);
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<RoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<RoundedRectangle._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(void *)(v38 + 136) = 0;
  *(void *)(v38 + 144) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 152) = 0u;
  *(_OWORD *)(v38 + 168) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>> and conformance ShapeStyledResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>>);
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  *(void *)(v38 + 152) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 160) = 0u;
  *(_OWORD *)(v38 + 176) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v11;
  uint64_t v12;
  Swift::UInt32 v13;
  long long v14;
  int OffsetAttribute2;
  uint64_t v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t result;
  void (*v44)(unsigned char *, void);
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  Swift::UInt32 v55[6];
  unsigned char v56[32];
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  void v64[3];

  unsigned __int8 v49 = __PAIR64__(a3, a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  v64[1] = *MEMORY[0x263EF8340];
  unint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v7 = *MEMORY[0x263F288F8];
  LODWORD(v52) = 0;
  HIDWORD(v52) = *MEMORY[0x263F288F8];
  int v8 = *(void *)(a2 + 48);
  uint64_t v53 = v8;
  uint64_t v54 = *(_DWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v11 = (ValueMetadata **)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 16);
    while (*v11 != &type metadata for DisplayList.Key)
    {
      v11 += 2;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    Swift::UInt32 v13 = ++lastIdentity;
    long long v14 = *(_OWORD *)(a2 + 32);
    int v62 = *(_OWORD *)(a2 + 16);
    int v63 = v14;
    uint64_t v61 = *(_OWORD *)a2;
    if (BYTE5(v14))
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v7)
      {
        __break(1u);
        return result;
      }
      v55[0] = v13;
      int v44 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v55);
      v44(v56, 0);
    }
    long long v47 = v8;
    uint64_t v48 = a4;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v16 = v62;
    uint64_t v17 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v17;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v18;
    swift_beginAccess();
    uint64_t v19 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
    uint64_t v20 = *(_OWORD *)(a2 + 48);
    unsigned int v57 = *(_OWORD *)(a2 + 32);
    unsigned int v58 = v20;
    unsigned int v59 = *(_OWORD *)(a2 + 64);
    unsigned int v60 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)char v56 = *(_OWORD *)a2;
    *(_OWORD *)&v56[16] = v21;
    int v22 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
    swift_endAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    int v23 = v61;
    v64[0] = v61;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v61);
    outlined retain of ViewTransform((uint64_t)v64);
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    int v46 = v16;
    uint64_t v25 = v13;
    if (v24) {
      uint64_t v45 = *(unsigned char *)(v24 + 72);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v26 = *(_DWORD *)(a2 + 68);
    long long v27 = *(_DWORD *)(a2 + 60);
    int v28 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v64);
    outlined release of _GraphInputs((uint64_t)&v61);
    outlined release of _ViewInputs(a2);
    *(void *)char v56 = v48;
    *(_DWORD *)&v56[8] = v25;
    *(void *)&v56[12] = v49;
    *(_DWORD *)&v56[20] = OffsetAttribute2;
    *(_DWORD *)&v56[24] = v19;
    *(_DWORD *)&v56[28] = v22;
    *(void *)&unsigned int v57 = __PAIR64__(v27, v26);
    *((void *)&v57 + 1) = __PAIR64__(v28, v46);
    LOBYTE(v58) = v45;
    WORD1(v58) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledDisplayList<A>();
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v29, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v8 = v47;
  }
LABEL_11:
  int v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_OWORD *)(a2 + 64);
  uint64_t v32 = *(_OWORD *)(a2 + 16);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v30;
  unsigned int v59 = v31;
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v32;
  swift_beginAccess();
  unsigned __int8 v33 = CachedEnvironment.animatedSize(for:)((uint64_t *)v56);
  unint64_t v34 = *(_OWORD *)(a2 + 48);
  unsigned int v57 = *(_OWORD *)(a2 + 32);
  unsigned int v58 = v34;
  unsigned int v59 = *(_OWORD *)(a2 + 64);
  unsigned int v60 = *(_DWORD *)(a2 + 80);
  unint64_t v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v56 = *(_OWORD *)a2;
  *(_OWORD *)&v56[16] = v35;
  long long v36 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v56);
  swift_endAccess();
  uint64_t v37 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  int v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  *(_OWORD *)(v38 + 152) = 0u;
  *(void *)(v38 + 168) = v6;
  *(void *)(v38 + 24) = 0;
  *(_OWORD *)(v38 + 176) = 0u;
  *(_OWORD *)(v38 + 192) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  int v39 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v39 + 200);
  uint64_t v40 = *(void *)(v39 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v38 + 24) = v40;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v9)
  {
    uint64_t v41 = (ValueMetadata **)(v8 + 32);
    while (*v41 != &type metadata for ViewRespondersKey)
    {
      v41 += 2;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    *(void *)char v56 = v49;
    *(_DWORD *)&v56[8] = v33;
    *(_DWORD *)&v56[12] = v36;
    *(_DWORD *)&v56[16] = v37;
    *(void *)&v56[24] = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v53);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledResponderFilter<A>();
    long long v42 = Attribute.init<A>(body:value:flags:update:)();
    v56[0] = 0;
    PreferencesOutputs.subscript.setter(v42, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v53);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a5 = v51;
  a5[1] = v52;
  return result;
}

uint64_t RootGeometry.value.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  int v4 = v1[2];
  int v5 = *MEMORY[0x263F288F8];
  if (v1[3] == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
  }
  uint64_t v7 = *Value;
  uint64_t v8 = Value[1];
  if (v4 == v5 || (uint64_t v9 = AGGraphGetValue(), v10 = *(float64x2_t **)v9, (v11 = *(void *)(*(void *)v9 + 16)) == 0))
  {
    BOOL v15 = v3 == v5;
    double rect = 0.0;
    double v42 = 0.0;
    double v16 = 0.0;
    double v17 = 0.0;
    goto LABEL_11;
  }
  if (v11 == 1)
  {
    uint64_t v12 = 0;
    float64x2_t v13 = 0uLL;
    float64x2_t v14 = 0uLL;
  }
  else
  {
    uint64_t v12 = v11 & 0x7FFFFFFFFFFFFFFELL;
    int v31 = v10 + 5;
    float64x2_t v13 = 0uLL;
    uint64_t v32 = v11 & 0x7FFFFFFFFFFFFFFELL;
    float64x2_t v14 = 0uLL;
    do
    {
      float64x2_t v33 = *(float64x2_t *)((char *)v31 - 24);
      float64x2_t v34 = *(float64x2_t *)((char *)v31 - 40);
      float64x2_t v35 = *v31;
      float64x2_t v36 = v31[1];
      v31 += 5;
      float64x2_t v14 = vaddq_f64(vaddq_f64(v14, v33), v36);
      float64x2_t v13 = vaddq_f64(vaddq_f64(v13, v34), v35);
      v32 -= 2;
    }
    while (v32);
    if (v11 == v12) {
      goto LABEL_35;
    }
  }
  uint64_t v37 = v11 - v12;
  int v38 = (float64x2_t *)((char *)v10 + 40 * v12 + 40);
  do
  {
    float64x2_t v14 = vaddq_f64(v14, v38[1]);
    float64x2_t v13 = vaddq_f64(v13, *v38);
    int v38 = (float64x2_t *)((char *)v38 + 40);
    --v37;
  }
  while (v37);
LABEL_35:
  double v42 = v14.f64[0];
  double v17 = v13.f64[1];
  double rect = v13.f64[0];
  double v16 = v14.f64[1];
  BOOL v15 = v3 == v5;
  if (v13.f64[1] != v14.f64[1] && v3 != v5)
  {
    uint64_t v40 = (unsigned char *)AGGraphGetValue();
    BOOL v15 = 0;
    if (*v40) {
      double v41 = v17;
    }
    else {
      double v41 = v16;
    }
    if (*v40) {
      double v17 = v16;
    }
    double v16 = v41;
  }
LABEL_11:
  uint64_t v18 = (double *)AGGraphGetValue();
  double v19 = v18[1];
  if (*v18 - (v16 + v17) < 0.0) {
    double v20 = 0.0;
  }
  else {
    double v20 = *v18 - (v16 + v17);
  }
  if (v19 - (rect + v42) < 0.0) {
    double v21 = 0.0;
  }
  else {
    double v21 = v19 - (rect + v42);
  }
  uint64_t v22 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_23;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_23:
    double v44 = v20;
    char v45 = 0;
    double v46 = v21;
    char v47 = 0;
    double v23 = (*(double (**)(double *))(*(void *)v7 + 120))(&v44);
    double v25 = v24;
    swift_retain();
    uint64_t v26 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    int v27 = *(unsigned __int8 *)(v26 + 232);
    swift_release();
    if (v27 == 1)
    {
      double v17 = v17 + (v20 - v23) * 0.5;
      double rect = rect + (v21 - v25) * 0.5;
    }
    if (v15 || (*(unsigned char *)AGGraphGetValue() & 1) == 0)
    {
      uint64_t result = swift_release();
    }
    else
    {
      double v28 = *(double *)AGGraphGetValue();
      v48.origin.CGFloat x = v17;
      v48.origin.CGFloat y = rect;
      v48.size.CGFloat width = v23;
      v48.size.CGFloat height = v25;
      double MaxX = CGRectGetMaxX(v48);
      uint64_t result = swift_release();
      double v17 = v28 - MaxX;
    }
    *(double *)a1 = v17;
    *(double *)(a1 + 8) = rect;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    *(double *)(a1 + 32) = v23;
    *(double *)(a1 + 40) = v25;
    *(double *)(a1 + 48) = v20;
    *(double *)(a1 + 56) = v21;
  }
  return result;
}

id DefaultLayoutViewResponder.init(inputs:)(uint64_t *a1)
{
  id v2 = specialized DefaultLayoutViewResponder.init(inputs:)(a1, v1);
  swift_release();
  return v2;
}

id specialized DefaultLayoutViewResponder.init(inputs:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = a1[2];
  int v6 = *((_DWORD *)a1 + 20);
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(void *)(a2 + 88) = v3;
  *(_DWORD *)(a2 + 96) = v4;
  *(void *)(a2 + 104) = v5;
  long long v7 = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a2 + 128) = v7;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 7);
  *(void *)(a2 + 160) = a1[9];
  *(_DWORD *)(a2 + 168) = v6;
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(void *)(a2 + 176) = result;
    uint64_t v9 = MEMORY[0x263F8EE78];
    *(void *)(a2 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(void *)(a2 + 80) = v9;
    *(void *)(a2 + 24) = 0;
    swift_unknownObjectWeakInit();
    swift_weakInit();
    swift_retain();
    uint64_t v10 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    MEMORY[0x24C527E00](v10 + 200);
    uint64_t v11 = *(void *)(v10 + 208);
    swift_release();
    swift_beginAccess();
    *(void *)(a2 + 24) = v11;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    return (id)a2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static ViewGraph.current.getter()
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v0 = (id)AGSubgraphGetCurrent();
    if (!v0)
    {
LABEL_10:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v1 = v0;
    id v2 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v2 = (id)AGGraphGetAttributeGraph();
  }
  if (!AGGraphGetContext())
  {
    __break(1u);
    goto LABEL_10;
  }
  swift_retain();

  type metadata accessor for ViewGraph();

  return swift_dynamicCastClassUnconditional();
}

uint64_t type metadata accessor for ViewGraph()
{
  return self;
}

void type metadata accessor for LeafViewResponder<ShapeStyledResponderData<StyledTextContentView>>()
{
  if (!lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<StyledTextContentView>>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for ShapeStyledResponderData<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
    unint64_t v0 = type metadata accessor for LeafViewResponder();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<StyledTextContentView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer()
{
  unint64_t result = lazy protocol witness table cache variable for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer;
  if (!lazy protocol witness table cache variable for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<StyledTextContentView> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<StyledTextContentView> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<StyledTextContentView> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<StyledTextContentView> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyledTextResponderFilter and conformance StyledTextResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type StyledTextResponderFilter and conformance StyledTextResponderFilter;
  if (!lazy protocol witness table cache variable for type StyledTextResponderFilter and conformance StyledTextResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyledTextResponderFilter and conformance StyledTextResponderFilter);
  }
  return result;
}

uint64_t type metadata accessor for StyledTextResponder()
{
  return self;
}

uint64_t specialized StyledTextResponder.init(view:styles:inputs:)(int a1, int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a3;
  int v6 = *((_DWORD *)a3 + 2);
  uint64_t v7 = a3[2];
  int v8 = *((_DWORD *)a3 + 20);
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(a4 + 224) = 0;
  *(void *)(a4 + 232) = v9;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_DWORD *)(a4 + 40) = a1;
  *(_DWORD *)(a4 + 44) = a2;
  *(void *)(a4 + 48) = v5;
  *(_DWORD *)(a4 + 56) = v6;
  *(void *)(a4 + 64) = v7;
  *(_OWORD *)(a4 + 72) = *(_OWORD *)(a3 + 3);
  *(_OWORD *)(a4 + 88) = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(a4 + 104) = *(_OWORD *)(a3 + 7);
  *(void *)(a4 + 120) = a3[9];
  *(_DWORD *)(a4 + 128) = v8;
  *(void *)(a4 + 136) = (id)AGGraphGetAttributeSubgraph();
  *(void *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  uint64_t v10 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v10 + 200);
  uint64_t v11 = *(void *)(v10 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(a4 + 24) = v11;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return a4;
}

unint64_t lazy protocol witness table accessor for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer;
  if (!lazy protocol witness table cache variable for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedShapeStyles and conformance ResolvedShapeStyles()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles;
  if (!lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles;
  if (!lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext;
  if (!lazy protocol witness table cache variable for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext);
  }
  return result;
}

uint64_t getEnumTag for DisplayList.GraphicsRenderer.PlatformViewMode(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

void static ZStack._makeView(view:inputs:)(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v9 = *(void *)a2;
  int v10 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(a2 + 80);
  LODWORD(v19) = *a1;
  type metadata accessor for ZStack();
  type metadata accessor for _GraphValue();
  uint64_t v13 = type metadata accessor for _VariadicView.Tree();
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  long long v17 = *(_OWORD *)(a2 + 56);
  long long v18 = *(_OWORD *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 72);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ZStack._makeView(view:inputs:), v13, &v28);
  uint64_t v19 = v9;
  int v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v14;
  uint64_t v23 = v15;
  long long v24 = v18;
  long long v25 = v17;
  uint64_t v26 = v16;
  int v27 = v12;
  static _VariadicView.Tree<>.makePlatformSubstitutableView(view:inputs:)(&v28, &v19, a3, a4, a5);
}

uint64_t closure #1 in static ZStack._makeView(view:inputs:)(uint64_t a1)
{
  _OWORD v5[2] = type metadata accessor for ZStack();
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v5, v6, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v7;
}

uint64_t type metadata accessor for ZStack()
{
  return __swift_instantiateGenericMetadata();
}

double static _VariadicView.Tree<>.makePlatformSubstitutableView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  int v31 = *a1;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 7);
  int v23 = *((_DWORD *)a2 + 6);
  int v24 = *((_DWORD *)a2 + 9);
  uint64_t v10 = a2[6];
  uint64_t v22 = a2[5];
  int v11 = *((_DWORD *)a2 + 14);
  int v12 = *((_DWORD *)a2 + 16);
  int v25 = *((_DWORD *)a2 + 15);
  int v26 = *((_DWORD *)a2 + 17);
  int v13 = *((_DWORD *)a2 + 18);
  int v27 = *((_DWORD *)a2 + 19);
  int v28 = *((_DWORD *)a2 + 8);
  int v14 = *((_DWORD *)a2 + 20);
  uint64_t v15 = swift_conformsToProtocol2();
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15) {
    uint64_t v17 = a3;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17)
  {
    LODWORD(v35) = v31;
    uint64_t v51 = v6;
    int v52 = v7;
    uint64_t v53 = v8;
    int v54 = v23;
    int v55 = v9;
    int v56 = v28;
    int v57 = v24;
    uint64_t v58 = v22;
    uint64_t v59 = v10;
    int v60 = v11;
    int v61 = v25;
    int v62 = v12;
    int v63 = v26;
    int v64 = v13;
    int v65 = v27;
    int v66 = v14;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v16 + 8))(&v35, &v51, a3, a4);
  }
  else
  {
    int v21 = v12;
    int ShouldRecordTree = AGSubgraphShouldRecordTree();
    char v20 = ShouldRecordTree;
    if (ShouldRecordTree)
    {
      type metadata accessor for _VariadicView.Tree();
      AGSubgraphBeginTreeElement();
    }
    uint64_t v51 = v6;
    int v52 = v7;
    uint64_t v53 = v8;
    int v54 = v23;
    int v55 = v9;
    uint64_t v58 = v22;
    uint64_t v59 = v10;
    int v57 = v24;
    int v60 = v11;
    int v61 = v25;
    int v62 = v21;
    int v63 = v26;
    int v64 = v13;
    int v65 = v27;
    int v66 = v14;
    int v32 = v31;
    uint64_t v35 = v6;
    int v36 = v7;
    uint64_t v37 = v8;
    int v38 = v23;
    int v39 = v9;
    int v40 = 0;
    int v41 = v24;
    uint64_t v42 = v22;
    uint64_t v43 = v10;
    int v44 = v11;
    int v45 = v25;
    int v46 = v21;
    int v47 = v26;
    int v48 = v13;
    int v49 = v27;
    int v50 = v14;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static _VariadicView.Tree<>._makeView(view:inputs:)(&v32, (uint64_t)&v35, (uint64_t)&type metadata for _ZStackLayout, a3, (uint64_t)&protocol witness table for _ZStackLayout, a4, (uint64_t)&v33);
    int v56 = v28;
    if (v20)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v33, (uint64_t)&v51);
      AGSubgraphEndTreeElement();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)a5 = v33;
    double result = v34;
    a5[1] = v34;
  }
  return result;
}

uint64_t static HorizontalAlignment.leadingText.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for leadingText, (uint64_t)&static HorizontalAlignment.leadingText);
}

SwiftUI::ScrollPhaseState __swiftcall ScrollPhaseState.init(phase:velocity:)(SwiftUI::ScrollPhase phase, CGVector velocity)
{
  *(unsigned char *)uint64_t v2 = phase;
  *(CGFloat *)(v2 + 8) = velocity.dx;
  *(CGFloat *)(v2 + 16) = velocity.dy;
  result.velocity.dCGFloat y = velocity.dy;
  result.velocity.dCGFloat x = velocity.dx;
  result.phase = phase;
  return result;
}

uint64_t static AnyTransition.opacity.getter()
{
  if (one-time initialization token for opacity != -1) {
    swift_once();
  }

  return swift_retain();
}

ValueMetadata *type metadata accessor for ScrollAnchorStorage()
{
  return &type metadata for ScrollAnchorStorage;
}

uint64_t _ProposedSize.height.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

BOOL static Visibility.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t EnvironmentValues.resolvedTextProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for ResolvedTextProvider.Type?()
{
  if (!lazy cache variable for type metadata for ResolvedTextProvider.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for ResolvedTextProvider.Type, &lazy cache variable for type metadata for ResolvedTextProvider);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ResolvedTextProvider.Type?);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in RendererEffectDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t EnvironmentValues.cuiAssetMatchTypes.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t assignWithTake for Text.ResolvedProperties.Transition(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  __int16 v5 = *((_WORD *)a2 + 6);
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  char v9 = *(unsigned char *)(a1 + 13);
  *(_WORD *)(a1 + 12) = v5;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  *(unsigned char *)(a1 + 14) = *((unsigned char *)a2 + 14);
  return a1;
}

id GraphHost.globalSubgraph.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 24);

  return v1;
}

uint64_t static CoreTesting.isRunning.getter()
{
  return static CoreTesting.isRunning;
}

uint64_t EnvironmentValues.cuiNamedColorProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for CoreUINamedColorProvider.Type?()
{
  if (!lazy cache variable for type metadata for CoreUINamedColorProvider.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for CoreUINamedColorProvider.Type, &lazy cache variable for type metadata for CoreUINamedColorProvider);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CoreUINamedColorProvider.Type?);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyStyleModifier()
{
  return &type metadata for AnyStyleModifier;
}

uint64_t DynamicViewList.Item.__deallocating_deinit()
{
  DynamicViewList.Item.deinit();

  return swift_deallocClassInstance();
}

id *DynamicViewList.Item.deinit()
{
  uint64_t v1 = (char *)v0 + *((void *)*v0 + 17);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  swift_release();
  return v0;
}

uint64_t destroy for SectionAccumulator.RowIDs.IDs(uint64_t a1)
{
  return outlined consume of SectionAccumulator.RowIDs.IDs(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

void one-time initialization function for off()
{
  unint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 6710863;
    *(void *)(v3 + 24) = 0xE300000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.off = v3;
    unk_268EEBA10 = 0;
    byte_268EEBA18 = 1;
    qword_268EEBA20 = v4;
  }
  else
  {
    __break(1u);
  }
}

void one-time initialization function for search()
{
  unint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0x686372616553;
    *(void *)(v3 + 24) = 0xE600000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.search = v3;
    unk_268EEBA40 = 0;
    byte_268EEBA48 = 1;
    qword_268EEBA50 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t Text.init(_:tableName:bundle:comment:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for LocalizedTextStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(unsigned char *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  *(void *)(result + 48) = a5;
  *(void *)(result + 56) = a6;
  *(void *)(result + 64) = a7;
  return result;
}

uint64_t type metadata accessor for LocalizedTextStorage()
{
  return self;
}

uint64_t base witness table accessor for _AttributeBody in ShapeStyledDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t ViewDimensions.subscript.getter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v11[0] = v4;
    v11[1] = v5;
    void v11[2] = v6;
    void v11[3] = v7;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 144))(a1, v11);
    swift_release();
    return v9;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[4];

  uint64_t v3 = *v1;
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v11[0] = v4;
    v11[1] = v5;
    void v11[2] = v6;
    void v11[3] = v7;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 144))(a1, v11);
    swift_release();
    return v9;
  }
  return result;
}

uint64_t keypath_get_27Tm@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *a4 = result & 1;
  return result;
}

uint64_t EnvironmentValues.accessibilityReduceTransparency.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    LOBYTE(a1) = a1(v3);
    swift_release_n();
    swift_release_n();
    return a1 & 1;
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    char v8 = a2(v7, &v9);
    swift_release_n();
    return v8 & 1;
  }
}

uint64_t EnvironmentValues.accessibilityInvertColors.getter()
{
  return EnvironmentValues.accessibilityReduceTransparency.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.accessibilityShowButtonShapes.getter()
{
  return EnvironmentValues.accessibilityReduceTransparency.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.accessibilityDifferentiateWithoutColor.getter()
{
  return EnvironmentValues.accessibilityReduceTransparency.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.accessibilityReduceTransparency.getter()
{
  return EnvironmentValues.accessibilityReduceTransparency.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.accessibilityDifferentiateWithoutColor.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.defaultAccentColorProvider.setter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, uint64_t, uint64_t, uint64_t *), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v9 = *v4;
  swift_retain_n();
  a3(v4, a1, a2, &v12);
  swift_release();
  if (v4[1])
  {
    uint64_t v10 = *v4;
    swift_retain();
    swift_retain();
    a4(v9, v10);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for DefaultAccentColorProvider.Type?()
{
  if (!lazy cache variable for type metadata for DefaultAccentColorProvider.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for DefaultAccentColorProvider.Type, &lazy cache variable for type metadata for DefaultAccentColorProvider);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultAccentColorProvider.Type?);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticLines(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t static Transaction.current.getter()
{
  uint64_t result = _threadTransactionData();
  if (result)
  {
    type metadata accessor for PropertyList.Element();
    swift_unknownObjectRetain();
    return swift_dynamicCastClassUnconditional();
  }
  return result;
}

uint64_t default argument 1 of GraphHost.asyncTransaction(_:id:_:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = _threadTransactionID();
  *a1 = result;
  return result;
}

uint64_t GraphHost.emptyTransaction(_:)(unint64_t a1)
{
  uint64_t v2 = _threadTransactionID();

  return specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(a1, v2, 1, 1);
}

uint64_t default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = _threadTransactionID();
  *a1 = result;
  return result;
}

uint64_t closure #1 in withTransaction<A>(_:_:)(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = v5;
  _threadTransactionData();
  uint64_t v10 = one-time initialization token for v5;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  unsigned int v11 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0) {
      goto LABEL_13;
    }
  }
  else if (dword_26B0F4500 < v11)
  {
    goto LABEL_13;
  }
  if (_threadTransactionData())
  {
    swift_unknownObjectRetain();
    swift_release();
    type metadata accessor for PropertyList.Element();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_release();
  }
  PropertyList.merge(_:)(a1);
LABEL_13:
  uint64_t v12 = _setThreadTransactionData();
  a2(v12);
  _setThreadTransactionData();
  uint64_t result = swift_release();
  if (v7) {
    *a5 = v7;
  }
  return result;
}

void *_setThreadTransactionData()
{
  uint64_t result = (void *)_perThreadTransactionData();
  *uint64_t result = v1;
  return result;
}

uint64_t State.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized State.wrappedValue.setter(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

uint64_t specialized State.wrappedValue.setter(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a2 + 28));
  if (v3) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 128))(result, 0);
  }
  return result;
}

uint64_t SubscriptionLifetime.Connection.receive(_:)(uint64_t a1, uint64_t a2)
{
  if (swift_weakLoadStrong())
  {
    if (SubscriptionLifetime.shouldAcceptValue(for:)(*(void *)(v2 + *(int *)(a2 + 60)))) {
      dispatch thunk of Subscriber.receive(_:)();
    }
    swift_release();
  }

  return static Subscribers.Demand.none.getter();
}

uint64_t SubscriptionLifetime.shouldAcceptValue(for:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = type metadata accessor for SubscriptionLifetime.StateType();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v15 - v7;
  uint64_t v9 = (uint64_t)v1 + *(void *)(v3 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    MEMORY[0x270FA5388](EnumCaseMultiPayload);
    strcpy((char *)&v15[-6], "to subscriber subscription subscriptionID ");
    v15[1] = v4;
    uint64_t v15[2] = type metadata accessor for AnyCancellable();
    _OWORD v15[3] = type metadata accessor for Subscription();
    void v15[4] = MEMORY[0x263F8D6C8];
    TupleTypeMetadatfloat64_t a = swift_getTupleTypeMetadata();
    swift_release();
    uint64_t v12 = (uint64_t)&v8[*(int *)(TupleTypeMetadata + 64)];
    uint64_t v13 = *(void *)&v8[*(int *)(TupleTypeMetadata + 80)];
    __swift_destroy_boxed_opaque_existential_1(v12);
    (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v8, v4);
    if (v13 == a1) {
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return 0;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AttributeInvalidatingSubscriber<A>()
{
  return specialized AttributeInvalidatingSubscriber.receive(_:)();
}

uint64_t specialized AttributeInvalidatingSubscriber.receive(_:)()
{
  swift_beginAccess();
  uint64_t v1 = type metadata accessor for AttributeInvalidatingSubscriber.StateType();
  uint64_t v2 = *(void *)(v1 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + 32, v1);
  unint64_t v3 = v5[3];
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v3 >= 2) {
    AttributeInvalidatingSubscriber.invalidateAttribute()();
  }
  return static Subscribers.Demand.none.getter();
}

uint64_t destroy for AttributeInvalidatingSubscriber.StateType(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t AttributeInvalidatingSubscriber.invalidateAttribute()()
{
  if (!pthread_main_np())
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    goto LABEL_16;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock) || static Update.dispatchDepth >= static Update.depth)
  {
LABEL_16:
    char v2 = 0;
    goto LABEL_17;
  }
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v1 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_28;
    }
LABEL_25:
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    goto LABEL_28;
  }
  if (static Semantics.forced >= v1) {
    goto LABEL_25;
  }
LABEL_28:
  char v2 = 1;
LABEL_17:
  uint64_t Strong = swift_weakLoadStrong();
  unint64_t v4 = *(void *)(v0 + 24);
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v5 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  if (Strong)
  {
    unint64_t v6 = _threadTransactionData();
    if (v6)
    {
      type metadata accessor for PropertyList.Element();
      swift_unknownObjectRetain();
      unint64_t v6 = swift_dynamicCastClassUnconditional();
    }
    uint64_t v7 = _threadTransactionID();
    specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v6, v7, v4, v2, 1);
    swift_release();
  }
  static Update.end()();
  _MovableLockUnlock(v5);
  return swift_release();
}

uint64_t specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, uint64_t a2, unint64_t a3, char a4, char a5)
{
  uint64_t v6 = v5;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  uint64_t v13 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(void *)(v6 + 16))
  {
    BOOL v14 = (a4 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(unsigned char *)(v6 + 168) &= a5 & 1;
    uint64_t v15 = v6 + 144;
    uint64_t v16 = swift_beginAccess();
    unint64_t v17 = *(void *)(*(void *)(v6 + 144) + 16);
    if (v17)
    {
      swift_beginAccess();
      long long v18 = *(void **)v15;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v15 = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        long long v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
        *(void *)uint64_t v15 = v18;
      }
      if (v17 > v18[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      char v20 = &v18[3 * v17];
      if (*((_DWORD *)v20 + 4) == a2)
      {
        long long v18 = v20 + 1;
        unint64_t v21 = v20[1];
        if (v21)
        {
          if (a1)
          {
            v39[0] = MEMORY[0x263F8EE78];
            swift_retain();
            swift_retain();
            BOOL v22 = compareLists(_:_:ignoredTypes:)(v21, a1, (uint64_t)v39);
            swift_release();
            swift_release();
            p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
            swift_bridgeObjectRelease();
            if (v22)
            {
LABEL_15:
              specialized AsyncTransaction.append<A>(_:)(a3);
              swift_endAccess();
              if (v14)
              {
LABEL_31:
                uint64_t v13 = (uint64_t)p_cache[509];
                return _MovableLockUnlock(v13);
              }
              swift_beginAccess();
              if (*(void *)(*(void *)v15 + 16))
              {
                specialized Array._customRemoveLast()((uint64_t)&v40);
                a1 = v41;
                if (v41)
                {
                  LODWORD(a3) = DWORD2(v40);
                  a2 = v40;
                }
                else
                {
                  specialized Array.remove(at:)(*(void *)(*(void *)v15 + 16) - 1, (uint64_t)&v40);
                  a2 = v40;
                  LODWORD(a3) = DWORD2(v40);
                  a1 = v41;
                }
                swift_endAccess();
                GraphHost.flushTransactions()();
                swift_beginAccess();
                long long v18 = *(void **)(v6 + 144);
                swift_retain();
                swift_bridgeObjectRetain();
                char v35 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v6 + 144) = v18;
                if (v35)
                {
LABEL_35:
                  unint64_t v37 = v18[2];
                  unint64_t v36 = v18[3];
                  if (v37 >= v36 >> 1)
                  {
                    long long v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v18);
                    *(void *)uint64_t v15 = v18;
                  }
                  _OWORD v18[2] = v37 + 1;
                  int v38 = &v18[3 * v37];
                  v38[4] = a2;
                  *((_DWORD *)v38 + 10) = a3;
                  v38[6] = a1;
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_31;
                }
LABEL_40:
                long long v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
                *(void *)uint64_t v15 = v18;
                goto LABEL_35;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      if (!v14) {
        GraphHost.flushTransactions()();
      }
    }
    else if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 192))(v16))
    {
      uint64_t v24 = v23;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v24 + 32))(ObjectType, v24);
      swift_unknownObjectRelease();
    }
    swift_retain();
    int v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v28 = v26[2];
    unint64_t v27 = v26[3];
    if (v28 >= v27 >> 1) {
      int v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v26);
    }
    uint64_t v42 = &type metadata for InvalidatingGraphMutation;
    uint64_t v43 = &protocol witness table for InvalidatingGraphMutation;
    *(void *)&long long v40 = a3;
    v26[2] = v28 + 1;
    outlined init with take of ScrollStateRequest(&v40, (uint64_t)&v26[5 * v28 + 4]);
    swift_beginAccess();
    uint64_t v29 = *(void **)v15;
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v15 = v29;
    if ((v30 & 1) == 0)
    {
      uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
      *(void *)uint64_t v15 = v29;
    }
    unint64_t v32 = v29[2];
    unint64_t v31 = v29[3];
    if (v32 >= v31 >> 1)
    {
      uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v29);
      *(void *)uint64_t v15 = v29;
    }
    id v29[2] = v32 + 1;
    uint64_t v33 = &v29[3 * v32];
    v33[4] = a1;
    *((_DWORD *)v33 + 10) = a2;
    v33[6] = v26;
    swift_endAccess();
    goto LABEL_31;
  }
  return _MovableLockUnlock(v13);
}

uint64_t specialized AsyncTransaction.append<A>(_:)(unint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void **)(v1 + 16);
  unint64_t v6 = v5[2];
  unint64_t v17 = a1;
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      *(void *)(v3 + 16) = v5;
    }
    if (v6 > v5[2])
    {
      __break(1u);
      goto LABEL_12;
    }
    uint64_t v8 = &v5[5 * v6 - 5];
    uint64_t v9 = v8[7];
    uint64_t v10 = v8[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v8 + 4), v9);
    uint64_t result = (*(uint64_t (**)(unint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v10 + 16))(&v17, &type metadata for InvalidatingGraphMutation, &protocol witness table for InvalidatingGraphMutation, v9, v10);
    *(void *)(v3 + 16) = v5;
    if (result) {
      return result;
    }
  }
  unint64_t v2 = HIDWORD(a1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_12:
  }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  unint64_t v13 = v5[2];
  unint64_t v12 = v5[3];
  if (v13 >= v12 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v5);
  }
  uint64_t v15 = &type metadata for InvalidatingGraphMutation;
  uint64_t v16 = &protocol witness table for InvalidatingGraphMutation;
  *(void *)&long long v14 = __PAIR64__(v2, a1);
  _OWORD v5[2] = v13 + 1;
  uint64_t result = outlined init with take of ScrollStateRequest(&v14, (uint64_t)&v5[5 * v13 + 4]);
  *(void *)(v3 + 16) = v5;
  return result;
}

uint64_t EnvironmentValues.preferenceBridge.setter()
{
  swift_weakInit();
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v1);
  outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v1);
  return swift_release();
}

uint64_t closure #2 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = AGSubgraphIsValid();
  if (result)
  {
    uint64_t v23 = a5;
    unint64_t v22 = _ViewInputs.base.modify(a3, a6);
    unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
    _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking>, MEMORY[0x263F8F208], MEMORY[0x263F8E0F8]);
    uint64_t v14 = type metadata accessor for ObservationTracking();
    uint64_t v15 = *(void *)(v14 - 8);
    unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_2461B9DC0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v17 + v16, a1, v14);
    _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(AGSubgraphRef, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (AGSubgraphRef, Int), v13);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2461B9DC0;
    *(void *)(v18 + 32) = a2;
    *(void *)(v18 + 40) = a4;
    uint64_t v19 = one-time initialization token for _lock;
    id v20 = a2;
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v21 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    closure #1 in closure #2 in installObservationSlow<A>(accessList:attribute:)(a3, v23, v22, v17, v18);
    static Update.end()();
    _MovableLockUnlock(v21);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void StoredLocationBase.set(_:transaction:)(uint64_t a1, void *value)
{
  uint64_t v5 = *v2;
  if ((*(uint64_t (**)(void))(*v2 + 208))())
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
  else if ((*(uint64_t (**)(void))(*v2 + 200))())
  {
    StoredLocationBase.$data.getter(&v33);
    unint64_t v6 = v33;
    uint64_t v7 = v33 + 4;
    uint64_t v8 = *(void *)(v5 + 168);
    uint64_t v9 = *(void *)(type metadata accessor for StoredLocationBase.Data() - 8);
    uint64_t v10 = (uint64_t)v6 + ((*(unsigned __int8 *)(v9 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    swift_retain();
    os_unfair_lock_lock(v7);
    closure #2 in StoredLocationBase.set(_:transaction:)(v10, a1, v8, v34);
    $defer #1 <A>() in AtomicBox.wrappedValue.modify(v7);
    swift_release_n();
    if (v34[0] == 1)
    {
      swift_retain();
      if (_threadTransactionData())
      {
        type metadata accessor for PropertyList.Element();
        swift_unknownObjectRetain();
        uint64_t v11 = swift_dynamicCastClassUnconditional();
        uint64_t v12 = v11;
        if (value)
        {
          if (v11)
          {
            if (value[3])
            {
              type metadata accessor for TypedElement<EmptyKey>();
              swift_allocObject();
              CFRunLoopObserverRef value = (void *)PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v12, (uint64_t)value).value;
            }
            else
            {
              uint64_t v18 = value[4];
              uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(*value + 216);
              swift_retain();
              uint64_t v20 = swift_retain();
              uint64_t v21 = v19(v20, v18);
              swift_release();
              swift_release_n();
              swift_release();
              CFRunLoopObserverRef value = (void *)v21;
            }
          }
        }
        else
        {
          CFRunLoopObserverRef value = (void *)v11;
        }
      }
      int v22 = _threadTransactionID();
      uint64_t v23 = swift_allocObject();
      swift_weakInit();
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v8;
      *(void *)(v24 + 24) = v23;
      *(void *)(v24 + 32) = value;
      *(_DWORD *)(v24 + 40) = v22;
      int v25 = self;
      swift_retain_n();
      swift_retain();
      swift_retain();
      if (objc_msgSend(v25, sel_isMainThread))
      {
        closure #3 in StoredLocationBase.set(_:transaction:)(v23, (uint64_t)value, v22);
        swift_release_n();
        swift_release_n();
        swift_release();
      }
      else
      {
        id v26 = objc_msgSend(self, sel_mainRunLoop);
        _ss23_ContiguousArrayStorageCySo13NSRunLoopModeaGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, MEMORY[0x263F8E0F8]);
        uint64_t v27 = swift_allocObject();
        *(_OWORD *)(v27 + 16) = xmmword_2461B9DC0;
        unint64_t v28 = (void *)*MEMORY[0x263EFF588];
        *(void *)(v27 + 32) = *MEMORY[0x263EFF588];
        type metadata accessor for NSRunLoopMode(0);
        id v29 = v28;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        aBlock[4] = partial apply for closure #3 in StoredLocationBase.set(_:transaction:);
        aBlock[5] = v24;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_26;
        unint64_t v31 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v26, sel_performInModes_block_, isa, v31);
        _Block_release(v31);
        swift_release_n();
        swift_release_n();
        swift_release();
      }
    }
  }
  else
  {
    StoredLocationBase.$data.getter(aBlock);
    uint64_t v13 = aBlock[0];
    uint64_t v14 = (os_unfair_lock_s *)(aBlock[0] + 16);
    uint64_t v15 = *(void *)(v5 + 168);
    uint64_t v16 = *(void *)(type metadata accessor for StoredLocationBase.Data() - 8);
    uint64_t v17 = v13 + ((*(unsigned __int8 *)(v16 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    swift_retain();
    os_unfair_lock_lock(v14);
    closure #1 in StoredLocationBase.set(_:transaction:)(v17, a1, v15);
    $defer #1 <A>() in AtomicBox.wrappedValue.modify(v14);
    swift_release_n();
  }
}

uint64_t closure #1 in closure #2 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result == *MEMORY[0x263F288F8] || (uint64_t result = swift_weakLoadStrong()) == 0)
  {
    uint64_t v11 = *(void *)(a4 + 16);
    if (v11)
    {
      uint64_t v12 = *(void *)(type metadata accessor for ObservationTracking() - 8);
      unint64_t v13 = a4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      uint64_t v14 = *(void *)(v12 + 72);
      swift_bridgeObjectRetain();
      do
      {
        ObservationTracking.cancel()();
        v13 += v14;
        --v11;
      }
      while (v11);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    unint64_t v9 = _threadTransactionData();
    if (v9)
    {
      type metadata accessor for PropertyList.Element();
      swift_unknownObjectRetain();
      unint64_t v9 = swift_dynamicCastClassUnconditional();
    }
    uint64_t v10 = _threadTransactionID();
    specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v9, v10, a3, a4, a5, 0, 1);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t _threadTransactionData()
{
  return *(void *)_perThreadTransactionData();
}

uint64_t _threadTransactionID()
{
  uint64_t v0 = (_DWORD *)_perThreadTransactionID();
  if ((v1 & 1) != 0 || (uint64_t v2 = *v0, !v2))
  {
    uint64_t v2 = atomic_fetch_add_explicit(_threadTransactionID_last_id, 1u, memory_order_relaxed) + 1;
    *uint64_t v0 = v2;
  }
  return v2;
}

uint64_t specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v8 = v7;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v16 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(void *)(v8 + 16))
  {
    BOOL v17 = (a6 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(unsigned char *)(v8 + 168) &= a7 & 1;
    uint64_t v18 = v8 + 144;
    uint64_t v19 = swift_beginAccess();
    unint64_t v20 = *(void *)(*(void *)(v8 + 144) + 16);
    if (v20)
    {
      swift_beginAccess();
      uint64_t v21 = *(void **)v18;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v18 = v21;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
        *(void *)uint64_t v18 = v21;
      }
      if (v20 > v21[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      uint64_t v23 = &v21[3 * v20];
      if (*((_DWORD *)v23 + 4) == a2)
      {
        uint64_t v21 = v23 + 1;
        unint64_t v24 = v23[1];
        if (v24)
        {
          if (a1)
          {
            v42[0] = MEMORY[0x263F8EE78];
            swift_retain();
            swift_retain();
            BOOL v41 = compareLists(_:_:ignoredTypes:)(v24, a1, (uint64_t)v42);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            if (v41)
            {
LABEL_15:
              specialized AsyncTransaction.append<A>(_:)(a3, a4, a5);
              swift_endAccess();
              if (v17)
              {
LABEL_37:
                uint64_t v16 = static Update._lock;
                return _MovableLockUnlock(v16);
              }
              swift_beginAccess();
              if (*(void *)(*(void *)v18 + 16))
              {
                specialized Array._customRemoveLast()((uint64_t)&v43);
                a1 = v44;
                if (v44)
                {
                  LODWORD(a5) = DWORD2(v43);
                  a2 = v43;
                }
                else
                {
                  specialized Array.remove(at:)(*(void *)(*(void *)v18 + 16) - 1, (uint64_t)&v43);
                  a2 = v43;
                  LODWORD(a5) = DWORD2(v43);
                  a1 = v44;
                }
                swift_endAccess();
                GraphHost.flushTransactions()();
                swift_beginAccess();
                uint64_t v21 = *(void **)(v8 + 144);
                swift_retain();
                swift_bridgeObjectRetain();
                char v37 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v8 + 144) = v21;
                if (v37)
                {
LABEL_34:
                  unint64_t v39 = v21[2];
                  unint64_t v38 = v21[3];
                  if (v39 >= v38 >> 1)
                  {
                    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v21);
                    *(void *)uint64_t v18 = v21;
                  }
                  void v21[2] = v39 + 1;
                  long long v40 = &v21[3 * v39];
                  v40[4] = a2;
                  *((_DWORD *)v40 + 10) = a5;
                  v40[6] = a1;
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_37;
                }
LABEL_40:
                uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
                *(void *)uint64_t v18 = v21;
                goto LABEL_34;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      if (!v17) {
        GraphHost.flushTransactions()();
      }
    }
    else if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 192))(v19))
    {
      uint64_t v26 = v25;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v26 + 32))(ObjectType, v26);
      swift_unknownObjectRelease();
    }
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v30 = v28[2];
    unint64_t v29 = v28[3];
    if (v30 >= v29 >> 1) {
      unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v28);
    }
    int v45 = &type metadata for ObservationGraphMutation;
    int v46 = &protocol witness table for ObservationGraphMutation;
    *(void *)&long long v43 = a3;
    *((void *)&v43 + 1) = a4;
    unint64_t v44 = a5;
    _OWORD v28[2] = v30 + 1;
    outlined init with take of ScrollStateRequest(&v43, (uint64_t)&v28[5 * v30 + 4]);
    swift_beginAccess();
    unint64_t v31 = *(void **)v18;
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v18 = v31;
    if ((v32 & 1) == 0)
    {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
      *(void *)uint64_t v18 = v31;
    }
    unint64_t v34 = v31[2];
    unint64_t v33 = v31[3];
    if (v34 >= v33 >> 1)
    {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v31);
      *(void *)uint64_t v18 = v31;
    }
    _OWORD v31[2] = v34 + 1;
    char v35 = &v31[3 * v34];
    v35[4] = a1;
    *((_DWORD *)v35 + 10) = a2;
    v35[6] = v28;
    swift_endAccess();
    uint64_t v16 = static Update._lock;
  }
  return _MovableLockUnlock(v16);
}

uint64_t specialized Array._customRemoveLast()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v5 = v3[2];
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      uint64_t v7 = &v3[3 * v6];
      uint64_t v8 = v7[4];
      int v9 = *((_DWORD *)v7 + 10);
      uint64_t v10 = v7[6];
      *(void *)a1 = v8;
      *(_DWORD *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v10;
      v3[2] = v6;
      *char v1 = v3;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

{
  void **v1;
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  char v9;
  long long v10;
  long long v11;
  long long v12;

  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v5 = v3[2];
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      uint64_t v7 = &v3[15 * v6];
      uint64_t v8 = *((_DWORD *)v7 + 36);
      int v9 = *((unsigned char *)v7 + 148);
      uint64_t v10 = *((_OWORD *)v7 + 3);
      *(_OWORD *)a1 = *((_OWORD *)v7 + 2);
      *(_OWORD *)(a1 + 16) = v10;
      uint64_t v11 = *((_OWORD *)v7 + 5);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)v7 + 4);
      *(_OWORD *)(a1 + 48) = v11;
      uint64_t v12 = *((_OWORD *)v7 + 7);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)v7 + 6);
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = *((_OWORD *)v7 + 8);
      *(_DWORD *)(a1 + 112) = v8;
      *(unsigned char *)(a1 + 116) = v9;
      v3[2] = v6;
      *char v1 = v3;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      uint64_t v7 = v3 + 20 * v6;
      uint64_t v8 = *(_DWORD *)(v7 + 48);
      *(_OWORD *)a1 = *(_OWORD *)(v7 + 32);
      *(_DWORD *)(a1 + 16) = v8;
      *(void *)(v3 + 16) = v6;
      *char v1 = v3;
      *(unsigned char *)(a1 + 20) = 0;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

{
  void **v1;
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v5 = v3[2];
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      uint64_t v7 = &v3[14 * v6];
      uint64_t v8 = *((_WORD *)v7 + 20);
      int v9 = *((unsigned char *)v7 + 42);
      uint64_t v10 = v7[8];
      uint64_t v11 = v7[9];
      uint64_t v12 = *((_DWORD *)v7 + 20);
      unint64_t v13 = *((unsigned char *)v7 + 84);
      uint64_t v14 = v7[13];
      uint64_t v15 = v7[14];
      uint64_t result = *((unsigned __int8 *)v7 + 136);
      *(void *)a1 = v7[4];
      *(_WORD *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 10) = v9;
      *(_OWORD *)(a1 + 16) = *((_OWORD *)v7 + 3);
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      *(_DWORD *)(a1 + 48) = v12;
      *(unsigned char *)(a1 + 52) = v13;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(v7 + 11);
      *(void *)(a1 + 72) = v14;
      *(void *)(a1 + 80) = v15;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(v7 + 15);
      *(unsigned char *)(a1 + 104) = result;
      v3[2] = v6;
      *char v1 = v3;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

{
  void **v1;
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  int v9;

  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v5 = v3[2];
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      uint64_t v7 = &v3[6 * v6];
      uint64_t v8 = *((unsigned char *)v7 + 48);
      int v9 = *((_DWORD *)v7 + 18);
      *(_OWORD *)a1 = *((_OWORD *)v7 + 2);
      *(unsigned char *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + 7);
      *(_DWORD *)(a1 + 40) = v9;
      v3[2] = v6;
      *char v1 = v3;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

{
  void **v1;
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;

  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v5 = v3[2];
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      uint64_t v7 = &v3[4 * v6];
      uint64_t v8 = *((_DWORD *)v7 + 12);
      int v9 = v7[7];
      *(_OWORD *)a1 = *((_OWORD *)v7 + 2);
      *(_DWORD *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v9;
      v3[2] = v6;
      *char v1 = v3;
      *(unsigned char *)(a1 + 32) = 0;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized AsyncTransaction.append<A>(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unsigned int v7 = a1;
  uint64_t v8 = *(void **)(v3 + 16);
  unint64_t v9 = v8[2];
  unint64_t v10 = HIDWORD(a1);
  v23[0] = a1;
  v23[1] = a2;
  v23[2] = a3;
  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v4 + 16) = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      *(void *)(v4 + 16) = v8;
    }
    if (v9 > v8[2])
    {
      __break(1u);
      goto LABEL_12;
    }
    uint64_t v12 = &v8[5 * v9 - 5];
    uint64_t v13 = v12[7];
    uint64_t v14 = v12[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v12 + 4), v13);
    char v15 = (*(uint64_t (**)(void *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v14 + 16))(v23, &type metadata for ObservationGraphMutation, &protocol witness table for ObservationGraphMutation, v13, v14);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = v8;
    if (v15) {
      return result;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_12:
  }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  unint64_t v18 = v8[2];
  unint64_t v17 = v8[3];
  if (v18 >= v17 >> 1) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v8);
  }
  uint64_t v21 = &type metadata for ObservationGraphMutation;
  int v22 = &protocol witness table for ObservationGraphMutation;
  *(void *)&long long v19 = __PAIR64__(v10, v7);
  *((void *)&v19 + 1) = a2;
  uint64_t v20 = a3;
  unint64_t v8[2] = v18 + 1;
  uint64_t result = outlined init with take of ScrollStateRequest(&v19, (uint64_t)&v8[5 * v18 + 4]);
  *(void *)(v4 + 16) = v8;
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t ObservationGraphMutation.combine<A>(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = InvalidatingGraphMutation.combine<A>(with:)(v7);
  if (v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
    if (swift_dynamicCast())
    {
      uint64_t v9 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v9);
      uint64_t v10 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v8 & 1;
}

uint64_t InvalidatingGraphMutation.combine<A>(with:)(uint64_t a1)
{
  double v2 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  uint64_t result = swift_dynamicCast();
  if (result) {
    return v6[2] == *v1 && v6[3] == v1[1];
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ObservationGraphMutation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t StoredLocation.isValid.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 16);
    swift_release();
    return v2 != 0;
  }
  return result;
}

uint64_t StoredLocation.isUpdating.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    if (*(void *)(v1 + 16))
    {
      uint64_t Counter = AGGraphGetCounter();
      swift_release();
      return Counter != 0;
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

uint64_t closure #2 in StoredLocationBase.set(_:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = v12;
  uint64_t v19 = v11;
  int v20 = 3;
  uint64_t result = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v13, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)v17, a3, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v14);
  if (v21)
  {
    char v16 = 0;
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
    type metadata accessor for StoredLocationBase.Data();
    type metadata accessor for Array();
    Array.append(_:)();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, a2, a3);
    char v16 = 1;
  }
  *a4 = v16;
  return result;
}

uint64_t closure #3 in StoredLocationBase.set(_:transaction:)(uint64_t a1, uint64_t a2, int a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    int v9 = a3;
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    (*(void (**)(uint64_t, int *, unsigned char *))(*(void *)v6 + 216))(a2, &v9, v8);
    swift_release();
    uint64_t v7 = type metadata accessor for StoredLocationBase.BeginUpdate();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v7 - 8) + 8))(v8, v7);
  }
  return result;
}

uint64_t type metadata accessor for StoredLocationBase.BeginUpdate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t StoredLocation.commit(transaction:id:mutation:)(void **a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    int v9 = v5;
    char v8 = 1;
    uint64_t v7 = type metadata accessor for StoredLocationBase.BeginUpdate();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(a1, (uint64_t)&v9, a3, (uint64_t)&v8, 1, v7, (uint64_t)&protocol witness table for StoredLocationBase<A>.BeginUpdate);
    return swift_release();
  }
  return result;
}

uint64_t GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v10 = a6;
  uint64_t v54 = a3;
  p_cache = a1;
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  char v15 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v51 - v17;
  int v55 = *v19;
  char v21 = *v20;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v22 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(void *)(v8 + 16))
  {
    BOOL v23 = (v21 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(unsigned char *)(v8 + 168) &= a5 & 1;
    uint64_t v24 = v8 + 144;
    uint64_t v25 = swift_beginAccess();
    unint64_t v26 = *(void *)(*(void *)(v8 + 144) + 16);
    uint64_t v53 = a7;
    if (v26)
    {
      BOOL v52 = v23;
      swift_beginAccess();
      uint64_t v27 = *(void **)v24;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v24 = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
        *(void *)uint64_t v24 = v27;
      }
      if (v26 > v27[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v29 = &v27[3 * v26];
      if (*((_DWORD *)v29 + 4) == v55)
      {
        uint64_t v27 = v29 + 1;
        unint64_t v30 = v29[1];
        if (v30)
        {
          if (p_cache)
          {
            v56[0] = MEMORY[0x263F8EE78];
            swift_retain();
            swift_retain();
            BOOL v31 = compareLists(_:_:ignoredTypes:)(v30, (unint64_t)p_cache, (uint64_t)v56);
            v51[1] = v56[0];
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            if (v31)
            {
LABEL_15:
              AsyncTransaction.append<A>(_:)(v54, v10, v53);
              swift_endAccess();
              p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
              if (v52)
              {
LABEL_31:
                uint64_t v22 = (uint64_t)p_cache[509];
                return _MovableLockUnlock(v22);
              }
              swift_beginAccess();
              if (*(void *)(*(void *)v24 + 16))
              {
                specialized Array._customRemoveLast()((uint64_t)&v57);
                uint64_t v13 = (uint64_t)v59;
                if (v59)
                {
                  LODWORD(v18) = v58;
                  uint64_t v10 = (uint64_t)v57;
                }
                else
                {
                  specialized Array.remove(at:)(*(void *)(*(void *)v24 + 16) - 1, (uint64_t)&v57);
                  uint64_t v10 = (uint64_t)v57;
                  LODWORD(v18) = v58;
                  uint64_t v13 = (uint64_t)v59;
                }
                swift_endAccess();
                GraphHost.flushTransactions()();
                swift_beginAccess();
                uint64_t v27 = *(void **)(v8 + 144);
                swift_retain();
                swift_bridgeObjectRetain();
                char v47 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v8 + 144) = v27;
                if (v47)
                {
LABEL_35:
                  unint64_t v49 = v27[2];
                  unint64_t v48 = v27[3];
                  if (v49 >= v48 >> 1)
                  {
                    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v49 + 1, 1, v27);
                    *(void *)uint64_t v24 = v27;
                  }
                  v27[2] = v49 + 1;
                  int v50 = &v27[3 * v49];
                  _OWORD v50[4] = v10;
                  *((_DWORD *)v50 + 10) = v18;
                  v50[6] = v13;
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_31;
                }
LABEL_40:
                uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
                *(void *)uint64_t v24 = v27;
                goto LABEL_35;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else if (!p_cache)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      if (!v52) {
        GraphHost.flushTransactions()();
      }
    }
    else if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 192))(v25))
    {
      uint64_t v33 = v32;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v33 + 32))(ObjectType, v33);
      swift_unknownObjectRelease();
    }
    char v35 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v35(v18, v54, v10);
    int v57 = p_cache;
    int v58 = v55;
    swift_retain();
    unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    uint64_t v59 = v36;
    unint64_t v38 = v36[2];
    unint64_t v37 = v36[3];
    if (v38 >= v37 >> 1)
    {
      unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v36);
      uint64_t v59 = v36;
    }
    v35(v15, (uint64_t)v18, v10);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, (uint64_t)v15, (uint64_t *)&v59, v10, v53);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v10);
    unint64_t v39 = v57;
    int v40 = v58;
    swift_beginAccess();
    BOOL v41 = *(void **)v24;
    char v42 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v24 = v41;
    if ((v42 & 1) == 0)
    {
      BOOL v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
      *(void *)uint64_t v24 = v41;
    }
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
    unint64_t v44 = v41[2];
    unint64_t v43 = v41[3];
    if (v44 >= v43 >> 1)
    {
      BOOL v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v44 + 1, 1, v41);
      *(void *)uint64_t v24 = v41;
    }
    v41[2] = v44 + 1;
    int v45 = &v41[3 * v44];
    v45[4] = v39;
    *((_DWORD *)v45 + 10) = v40;
    v45[6] = v36;
    swift_endAccess();
    goto LABEL_31;
  }
  return _MovableLockUnlock(v22);
}

uint64_t AsyncTransaction.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a3;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v35 - v10;
  double v13 = MEMORY[0x270FA5388](v12);
  char v15 = (char *)&v35 - v14;
  uint64_t v16 = (uint64_t *)(v3 + 16);
  uint64_t v17 = *(void **)(v3 + 16);
  uint64_t v18 = (void *)v17[2];
  unint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v36((char *)&v35 - v14, v5, a2, v13);
  unint64_t v37 = v8;
  if (v18)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v16 = (uint64_t)v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      *uint64_t v16 = (uint64_t)v17;
    }
    if ((unint64_t)v18 > v17[2])
    {
      __break(1u);
      goto LABEL_13;
    }
    int v20 = &v17[5 * ((void)v18 - 1)];
    char v35 = v16;
    char v21 = v11;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v20[7];
    uint64_t v25 = v20[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v20 + 4), v24);
    unint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 16);
    uint64_t v27 = v25;
    uint64_t v28 = v23;
    uint64_t v5 = v22;
    uint64_t v11 = v21;
    uint64_t v16 = v35;
    char v29 = v26(v15, a2, v38, v24, v27);
    *uint64_t v16 = (uint64_t)v17;
    uint64_t v8 = *(char **)(v28 + 8);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v8)(v15, a2);
    if (v29) {
      return result;
    }
  }
  else
  {
    uint64_t v8 = *(char **)(v6 + 8);
    ((void (*)(char *, uint64_t))v8)(v15, a2);
  }
  char v15 = (char *)v36;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v11, v5, a2);
  uint64_t v18 = (void *)*v16;
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v16 = (uint64_t)v18;
  if ((v31 & 1) == 0)
  {
LABEL_13:
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *uint64_t v16 = (uint64_t)v18;
  }
  unint64_t v33 = v18[2];
  unint64_t v32 = v18[3];
  if (v33 >= v32 >> 1) {
    *uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v18);
  }
  uint64_t v34 = (uint64_t)v37;
  ((void (*)(char *, char *, uint64_t))v15)(v37, v11, a2);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v34, v16, a2, v38);
  return ((uint64_t (*)(char *, uint64_t))v8)(v11, a2);
}

uint64_t EnvironmentValues.preferenceBridge.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (uint64_t)v5);
    swift_release_n();
  }
  else
  {
    uint64_t v2 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v2, (uint64_t)v5);
    swift_release();
  }
  swift_release_n();
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v5);
  return Strong;
}

uint64_t outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>);
    }
  }
}

uint64_t protocol witness for GraphMutation.combine<A>(with:) in conformance StoredLocationBase<A>.BeginUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StoredLocationBase.BeginUpdate.combine<A>(with:)(a1, a4);
}

uint64_t StoredLocationBase.BeginUpdate.combine<A>(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x270FA5388](v7);
  (*(void (**)(char *, double))(v10 + 16))((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  if (swift_dynamicCast())
  {
    char v22 = 0;
    uint64_t v11 = *(void *)(a2 - 8);
    (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v11 + 32))(v23, &v21, a2);
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v13 = Strong;
      uint64_t v14 = swift_weakLoadStrong();
      if (v14)
      {
        uint64_t v15 = v14;
        swift_release();
        if (v15 == v13)
        {
          swift_beginAccess();
          uint64_t v18 = *(os_unfair_lock_s **)(v13 + 16);
          os_unfair_lock_t v20 = v18 + 4;
          uint64_t v19 = type metadata accessor for StoredLocationBase.Data();
          swift_retain();
          os_unfair_lock_lock(v18 + 4);
          type metadata accessor for Array();
          swift_getWitnessTable();
          swift_getWitnessTable();
          RangeReplaceableCollection<>.removeLast()();
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
          $defer #1 <A>() in AtomicBox.wrappedValue.modify(v20);
          swift_release();
          swift_release();
          (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v23, a2);
          return 1;
        }
      }
      (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v23, a2);
      swift_release();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v23, a2);
    }
  }
  else
  {
    uint64_t v21 = 0;
    char v22 = 1;
    uint64_t v16 = type metadata accessor for Optional();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v16 - 8) + 8))(&v21, v16);
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void closure #1 in StoredLocationBase.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t type metadata completion function for State()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t View.transformAnchorGeometry<A>(key:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v5 = type metadata accessor for AnchorGeometryTransformModifier();
  return View.modifier<A>(_:)(v7, a4, v5);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance LayoutProxyCollection()
{
  return *(void *)(*(void *)(v0 + 8) + 16) == 0;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t (*AnchorTransform.value.getter(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  int v8 = a2;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = AnchorTransform.modifier.getter();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  *(void *)(v16 + 32) = a5;
  *(void *)(v16 + 40) = v11;
  *(void *)(v16 + 48) = v13;
  *(void *)(v16 + 56) = v15;
  *(_DWORD *)(v16 + 64) = v9;
  *(_DWORD *)(v16 + 68) = v8;
  *(_DWORD *)(v16 + 72) = v10;
  return partial apply for closure #1 in AnchorTransform.value.getter;
}

uint64_t AnchorTransform.modifier.getter()
{
  type metadata accessor for _AnchorTransformModifier();
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t View.transformAnchorPreference<A, B>(key:value:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a2;
  v8[1] = a3;
  unint64_t v8[2] = a4;
  uint64_t v6 = type metadata accessor for _AnchorTransformModifier();
  return View.modifier<A>(_:)(v8, a5, v6);
}

uint64_t type metadata accessor for _AnchorTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for SecondaryLookupTrackedValue(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

ValueMetadata *type metadata accessor for _VariadicView_Children.Element()
{
  return &type metadata for _VariadicView_Children.Element;
}

ValueMetadata *type metadata accessor for ClarityUIInterfaceIdiom()
{
  return &type metadata for ClarityUIInterfaceIdiom;
}

uint64_t EnvironmentValues.nearestScrollableAxes.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void EnvironmentValues.allScrollableAxes.modify(uint64_t a1, char a2)
{
}

uint64_t type metadata accessor for ScaledShape()
{
  return __swift_instantiateGenericMetadata();
}

void *static CoordinateSpaceProtocol<>.scrollView.getter@<X0>(uint64_t a1@<X8>)
{
  return static CoordinateSpace.scrollView.getter(&one-time initialization token for all, &static ScrollCoordinateSpace.all, a1);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GeometryReader<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t View.scaleEffect(_:anchor:)(uint64_t a1, double a2, double a3, double a4)
{
  *(double *)uint64_t v5 = a2;
  *(double *)&v5[1] = a2;
  *(double *)&_OWORD v5[2] = a3;
  *(double *)&void v5[3] = a4;
  return View.modifier<A>(_:)(v5, a1, &type metadata for _ScaleEffect);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PairPreferenceCombiner<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t instantiation function for generic protocol witness table for AnimatableAttribute<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

Swift::Void __swiftcall _GraphInputs.pushStableIndex(_:)(Swift::Int a1)
{
  if (*(unsigned char *)(v1 + 37)) {
    specialized _GraphInputs.pushScope<A>(id:)((void *)a1);
  }
}

uint64_t specialized StatefulRule<>.update<A>(modify:create:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v13);
    uint64_t v10 = v13;
    uint64_t v9 = v14;
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<StyledTextLayoutEngine>, (uint64_t)&type metadata for StyledTextLayoutEngine, (uint64_t)&protocol witness table for StyledTextLayoutEngine, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      swift_allocObject();
      uint64_t v11 = specialized TracingLayoutEngineBox.init(_:)(v10, v9);
    }
    else
    {
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<StyledTextLayoutEngine>, (uint64_t)&type metadata for StyledTextLayoutEngine, (uint64_t)&protocol witness table for StyledTextLayoutEngine, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = v9;
    }
    uint64_t v13 = v11;
    uint64_t v14 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  uint64_t IsOwner = swift_retain();
  if (v6 != -1) {
    uint64_t IsOwner = swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t IsOwner = _MovableLockIsOwner(static Update._lock);
  if (IsOwner)
  {
LABEL_8:
    double v8 = MEMORY[0x270FA5388](IsOwner);
    (*(void (**)(double))(*(void *)v5 + 80))(v8);
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int CurrentAttribute;
  BOOL v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  char v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v18);
    uint64_t v10 = v18;
    uint64_t v11 = v19;
    uint64_t v12 = BYTE1(v19);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>();
      uint64_t v13 = swift_allocObject();
      Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
      uint64_t v15 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = CurrentAttribute;
      }
      *(_DWORD *)(v13 + 28) = v16;
      *(unsigned char *)(v13 + 32) = v15;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>();
      uint64_t v13 = swift_allocObject();
    }
    *(void *)(v13 + 16) = v10;
    *(unsigned char *)(v13 + 24) = v11;
    *(unsigned char *)(v13 + 25) = v12;
    uint64_t v18 = v13;
    uint64_t v19 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<Spacer>.Engine, (uint64_t)&type metadata for Spacer, (uint64_t)&protocol witness table for Spacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    uint64_t v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    os_unfair_lock_t v20 = v5;
    uint64_t v21 = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int CurrentAttribute;
  BOOL v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  char v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v18);
    uint64_t v10 = v18;
    uint64_t v11 = v19;
    uint64_t v12 = BYTE1(v19);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>();
      uint64_t v13 = swift_allocObject();
      Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
      uint64_t v15 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = CurrentAttribute;
      }
      *(_DWORD *)(v13 + 28) = v16;
      *(unsigned char *)(v13 + 32) = v15;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>();
      uint64_t v13 = swift_allocObject();
    }
    *(void *)(v13 + 16) = v10;
    *(unsigned char *)(v13 + 24) = v11;
    *(unsigned char *)(v13 + 25) = v12;
    uint64_t v18 = v13;
    uint64_t v19 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_VSpacer>.Engine, (uint64_t)&type metadata for _VSpacer, (uint64_t)&protocol witness table for _VSpacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    uint64_t v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    os_unfair_lock_t v20 = v5;
    uint64_t v21 = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int CurrentAttribute;
  BOOL v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  char v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v18);
    uint64_t v10 = v18;
    uint64_t v11 = v19;
    uint64_t v12 = BYTE1(v19);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>();
      uint64_t v13 = swift_allocObject();
      Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
      uint64_t v15 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = CurrentAttribute;
      }
      *(_DWORD *)(v13 + 28) = v16;
      *(unsigned char *)(v13 + 32) = v15;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>();
      uint64_t v13 = swift_allocObject();
    }
    *(void *)(v13 + 16) = v10;
    *(unsigned char *)(v13 + 24) = v11;
    *(unsigned char *)(v13 + 25) = v12;
    uint64_t v18 = v13;
    uint64_t v19 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_HSpacer>.Engine, (uint64_t)&type metadata for _HSpacer, (uint64_t)&protocol witness table for _HSpacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    uint64_t v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    os_unfair_lock_t v20 = v5;
    uint64_t v21 = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int CurrentAttribute;
  BOOL v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  char v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v18);
    uint64_t v10 = v18;
    uint64_t v11 = v19;
    uint64_t v12 = BYTE1(v19);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>();
      uint64_t v13 = swift_allocObject();
      Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
      uint64_t v15 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = CurrentAttribute;
      }
      *(_DWORD *)(v13 + 28) = v16;
      *(unsigned char *)(v13 + 32) = v15;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>();
      uint64_t v13 = swift_allocObject();
    }
    *(void *)(v13 + 16) = v10;
    *(unsigned char *)(v13 + 24) = v11;
    *(unsigned char *)(v13 + 25) = v12;
    uint64_t v18 = v13;
    uint64_t v19 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&protocol witness table for _TextBaselineRelativeSpacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    uint64_t v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    os_unfair_lock_t v20 = v5;
    uint64_t v21 = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v18 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(&v14);
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>>, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for TracingLayoutEngineBox);
      swift_allocObject();
      uint64_t v12 = specialized TracingLayoutEngineBox.init(_:)(v10, v11);
    }
    else
    {
      type metadata accessor for TracingLayoutEngineBox<SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>>(0, &lazy cache variable for type metadata for LayoutEngineBox<SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>>, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for LayoutEngineBox);
      uint64_t v12 = swift_allocObject();
      *(_DWORD *)(v12 + 16) = v10;
      *(void *)(v12 + 24) = v11;
    }
    uint64_t v14 = v12;
    uint64_t v15 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>(0, &lazy cache variable for type metadata for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextLayoutComputer.Engine);
    uint64_t v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    uint64_t v16 = v5;
    uint64_t v17 = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(void *a1@<X8>)
{
  return specialized closure #2 in StatefulRule<>.update<A>(to:)(*(uint64_t **)(v1 + 16), a1);
}

{
  uint64_t v1;
  const void *v3;
  unsigned char v5[512];

  char v3 = *(const void **)(v1 + 16);
  memcpy(v5, v3, 0x1F9uLL);
  memcpy(a1, v3, 0x1F9uLL);
  return outlined retain of LinearGradient((uint64_t)v5);
}

{
  uint64_t v1;
  const void *v3;
  unsigned char v5[352];

  char v3 = *(const void **)(v1 + 16);
  memcpy(v5, v3, 0x159uLL);
  memcpy(a1, v3, 0x159uLL);
  return outlined retain of Image.Resolved((uint64_t)v5);
}

uint64_t _s14AttributeGraph12StatefulRuleP7SwiftUIAD14LayoutComputerV5ValueRtzrlE6update2toyqd___tAD0G6EngineRd__lFqd__yXEfU0_AD010StyledTextgH033_641995D812913A47B866B20B88782376LLV_AD0mngL0VTG5TA_0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = v2[1];
  *a1 = *v2;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  *a2 = v3;
  a2[1] = v2;
  swift_retain();

  return swift_retain();
}

ValueMetadata *type metadata accessor for OpacityTransition()
{
  return &type metadata for OpacityTransition;
}

ValueMetadata *type metadata accessor for AccessibilityRepresentableStyleContext()
{
  return &type metadata for AccessibilityRepresentableStyleContext;
}

uint64_t AGGraphRef.viewGraph()()
{
  uint64_t result = AGGraphGetContext();
  if (result)
  {
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Group.init<A, B>(subviews:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Group.init<A, B>(elementsOf:transform:)(a1, a2, a3, a4, a5, a6, a7, partial apply for closure #1 in Group.init<A, B>(elementsOf:transform:));
}

uint64_t static _ViewListOutputs.groupViewListCount<A, B, C>(inputs:contentType:headerType:footerType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = *(void *)a1;
  uint64_t v14 = *(void *)(a1 + 8);
  int v15 = *(_DWORD *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFF7;
  if ((v14 & 0x100) != 0) {
    unint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF7 ^ 0x100) & v14;
  }
  if ((v14 & 0x1000) != 0) {
    uint64_t v18 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t v47 = *(void *)a1;
  uint64_t v48 = v18;
  int v49 = v15;
  uint64_t v50 = v16;
  uint64_t v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a8 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v19(&v47, a5, a8);
  uint64_t v21 = v20;
  if (v22) {
    goto LABEL_21;
  }
  uint64_t v42 = v20;
  uint64_t v47 = v13;
  uint64_t v48 = v18;
  int v49 = v15;
  uint64_t v23 = v18;
  uint64_t v50 = v16;
  if ((v14 & 8) != 0)
  {
    uint64_t v23 = v18;
    if ((v18 & 0x10) == 0)
    {
      uint64_t v23 = v18 | 0x10;
      uint64_t v48 = v18 | 0x10;
    }
  }
  if ((v14 & 0x20) != 0)
  {
    uint64_t v27 = one-time initialization token for defaultValue;
    swift_retain();
    swift_bridgeObjectRetain();
    if (v27 != -1) {
      swift_once();
    }
    uint64_t v29 = *((void *)&static StyleContextInput.defaultValue + 1);
    uint64_t v28 = static StyleContextInput.defaultValue;
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(&v47, v28, v29);
    swift_release();
    uint64_t v24 = v47;
    uint64_t v23 = v48;
    int v26 = v49;
    uint64_t v25 = v50;
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v24 = v13;
    uint64_t v25 = v16;
    int v26 = v15;
  }
  uint64_t v43 = v24;
  uint64_t v44 = v23;
  int v45 = v26;
  uint64_t v46 = v25;
  uint64_t v21 = (*(uint64_t (**)(uint64_t *, uint64_t))(a9 + 40))(&v43, a6);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  swift_release();
  if (v31)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    swift_release();
    return v21;
  }
  uint64_t v32 = v42 + v21;
  if (__OFADD__(v42, v21))
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v31 = a10;
  uint64_t v47 = v13;
  uint64_t v48 = v18;
  int v49 = v15;
  uint64_t v50 = v16;
  if ((v14 & 8 & v18) != 0)
  {
    v18 &= ~8uLL;
    uint64_t v48 = v18;
  }
  if ((v14 & 0x40) != 0)
  {
    uint64_t v36 = one-time initialization token for defaultValue;
    swift_retain();
    swift_bridgeObjectRetain();
    if (v36 == -1)
    {
LABEL_24:
      uint64_t v38 = *((void *)&static StyleContextInput.defaultValue + 1);
      uint64_t v37 = static StyleContextInput.defaultValue;
      swift_retain();
      specialized closure #1 in PropertyList.subscript.setter(&v47, v37, v38);
      swift_release();
      uint64_t v33 = v47;
      uint64_t v18 = v48;
      int v15 = v49;
      uint64_t v34 = v50;
      goto LABEL_25;
    }
LABEL_29:
    swift_once();
    goto LABEL_24;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v33 = v13;
  uint64_t v34 = v16;
LABEL_25:
  uint64_t v43 = v33;
  uint64_t v44 = v18;
  int v45 = v15;
  uint64_t v46 = v34;
  uint64_t v21 = (*(uint64_t (**)(uint64_t *))(v31 + 40))(&v43);
  char v40 = v39;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (v40) {
    return v21;
  }
  BOOL v41 = __OFADD__(v32, v21);
  v21 += v32;
  if (!v41) {
    return v21;
  }
  __break(1u);
  return result;
}

uint64_t static StyleableView._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)&long long v21 = *(void *)a1;
  *((void *)&v21 + 1) = v5;
  int v22 = v6;
  uint64_t v23 = v7;
  *(void *)&long long v18 = v21;
  *((void *)&v18 + 1) = v5;
  int v19 = v6;
  uint64_t v20 = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  if ((_ViewListCountInputs.isCurrentStyleableView<A>(_:)(a2, a2) & 1) == 0)
  {
    _GraphInputs.setCurrentStyleableView<A>(_:)(a2, a2);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    long long v18 = v21;
    int v19 = v22;
    uint64_t v20 = v23;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v14 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(&v18, AssociatedTypeWitness, AssociatedConformanceWitness);
LABEL_7:
    uint64_t v11 = v14;
    goto LABEL_8;
  }
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for StyleInput();
  _ViewListCountInputs.popLast<A, B>(_:)(v8, (uint64_t)&protocol witness table for StyleInput<A>, (uint64_t)&v18);
  uint64_t v9 = *((void *)&v18 + 1);
  if (!*((void *)&v18 + 1))
  {
    long long v18 = v21;
    int v19 = v22;
    uint64_t v20 = v23;
    uint64_t v15 = swift_getAssociatedTypeWitness();
    uint64_t v16 = *(void *)(a3 + 8);
    uint64_t v17 = swift_getAssociatedConformanceWitness();
    uint64_t v14 = static ModifiedContent<>._viewListCount(inputs:)(&v18, a2, v15, v16, *(void *)(*(void *)(v17 + 8) + 8));
    goto LABEL_7;
  }
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    long long v18 = v21;
    int v19 = v22;
    uint64_t v20 = v23;
    uint64_t v11 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(result + 24))(&v18, v9, result);
LABEL_8:
    swift_bridgeObjectRelease();
    swift_release();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t _ViewListCountInputs.isCurrentStyleableView<A>(_:)(uint64_t a1, uint64_t a2)
{
  int v3 = *MEMORY[0x263F288F8];
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(void *)(v6 + 88) = v5;
  swift_retain();
  LOBYTE(v4) = _GraphInputs.isCurrentStyleableView<A>(_:)(a2, a2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v4 & 1;
}

uint64_t _ViewListCountInputs.popLast<A, B>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 8);
  PropertyList.subscript.getter(a1, *v3, a1, v6);
  uint64_t v7 = type metadata accessor for Stack();
  Stack.pop()(v7, a3);
  v9[0] = v9[1];
  return PropertyList.subscript.setter((uint64_t)v9, a1, a1, v6);
}

uint64_t protocol witness for static AnyStyleModifierType.viewListCount(inputs:) in conformance StyleModifierType<A>(uint64_t *a1)
{
  return static StyleModifierType.viewListCount(inputs:)(a1);
}

uint64_t static StyleModifierType.viewListCount(inputs:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = a1[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  int v9 = v3;
  uint64_t v10 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t static StaticIf<>._viewListCount(inputs:body:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  int v13 = *((_DWORD *)a1 + 4);
  uint64_t v14 = a1[3];
  int v15 = *MEMORY[0x263F288F8];
  uint64_t v16 = MEMORY[0x263F8EE78];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = v15;
  *(void *)(v18 + 24) = v16;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_WORD *)(v18 + 80) = 256;
  *(void *)(v18 + 88) = v17;
  uint64_t v24 = v12;
  LODWORD(v25) = v15;
  uint64_t v26 = v18;
  LODWORD(v27) = v15;
  HIDWORD(v27) = v15;
  int v28 = -1;
  int v29 = v13;
  uint64_t v30 = MEMORY[0x263F8EE88];
  int v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a7 + 8);
  swift_retain();
  LOBYTE(a4) = v19(&v24, a4, a7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  LODWORD(v26) = v13;
  uint64_t v27 = v14;
  if (a4) {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a8 + 40))(&v24, a2, a3);
  }
  else {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a9 + 40))(&v24, a2, a3);
  }
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _MaskEffect<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t static StyleModifier._viewListCount(inputs:body:)(long long *a1, uint64_t (*a2)(long long *))
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 3);
  long long v11 = *a1;
  int v12 = v3;
  uint64_t v13 = v4;
  LODWORD(v8) = *MEMORY[0x263F288F8];
  *((void *)&v8 + 1) = type metadata accessor for StyleModifierType();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for StyleInput();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListCountInputs.append<A, B>(_:to:)((uint64_t)&v8, v5, v5, (uint64_t)&type metadata for AnyStyleModifier, (uint64_t)&protocol witness table for StyleInput<A>);
  long long v8 = v11;
  int v9 = v12;
  uint64_t v10 = v13;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = a2(&v8);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v6;
}

uint64_t static ViewModifier._viewListCount(inputs:body:)(long long *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 3);
  long long v6 = *a1;
  int v7 = v3;
  uint64_t v8 = v4;
  return static ViewModifier.viewListCount(inputs:body:)((uint64_t)&v6, a2, a3);
}

uint64_t static ViewModifier.viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  uint64_t v10 = closure #1 in static ViewModifier.viewListCount(inputs:body:)((uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewListCountInputs) -> (@unowned Int?), v9, v5, v6, v7, v8);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((a3 & 1) == 0) {
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static ViewModifier.viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(void *)&long long v18 = a3;
  *((void *)&v18 + 1) = a4;
  int v19 = a5;
  uint64_t v20 = a6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)&long long v15 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed _ViewListCountInputs) -> (@unowned Int?);
  *((void *)&v15 + 1) = v8;
  type metadata accessor for _ViewModifier_Content();
  uint64_t v9 = type metadata accessor for BodyCountInput();
  unint64_t v10 = type metadata accessor for (_:)();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  _ViewListCountInputs.append<A, B>(_:to:)((uint64_t)&v15, v9, v9, v10, (uint64_t)&protocol witness table for BodyCountInput<A>);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v15 = v18;
  int v16 = v19;
  uint64_t v17 = v20;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(&v15, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_release();
  return v13;
}

uint64_t _ViewListCountInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 8);
  PropertyList.subscript.getter(a3, *v5, a3, v8);
  uint64_t v9 = type metadata accessor for Stack();
  Stack.push(_:)(a1, v9);
  v11[0] = v11[1];
  return PropertyList.subscript.setter((uint64_t)v11, a3, a3, v8);
}

unint64_t type metadata accessor for (_:)()
{
  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [LayoutDirection](255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for ScrollStateRequest?(255, &lazy cache variable for type metadata for [ScrollStateRequest], (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, MEMORY[0x263F8D488]);
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for AGSubgraphRef(255);
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for Int?();
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

uint64_t type metadata accessor for BodyCountInput()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> _ConditionalContent<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static _ConditionalContent<>._viewListCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t static _ConditionalContent<>._viewListCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  int v9 = *((_DWORD *)a1 + 4);
  uint64_t v10 = a1[3];
  uint64_t v16 = *a1;
  uint64_t v17 = v8;
  int v18 = v9;
  uint64_t v19 = v10;
  uint64_t v11 = (*(uint64_t (**)(uint64_t *))(a4 + 40))(&v16);
  if ((v12 & 1) == 0)
  {
    uint64_t v16 = v7;
    uint64_t v17 = v8;
    int v18 = v9;
    uint64_t v19 = v10;
    BOOL v13 = v11 != (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 40))(&v16, a3, a5);
    if ((v14 | v13)) {
      return 0;
    }
  }
  return v11;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _TraitWritingModifier<A>()
{
  return static _TraitWritingModifier._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _OffsetEffect(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._viewListCount(inputs:)(long long *a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 3);
  long long v6 = *a1;
  int v7 = v3;
  uint64_t v8 = v4;
  return (*(uint64_t (**)(long long *))(v2 + 40))(&v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> ModifiedContent<A, B>(long long *a1, uint64_t a2, uint64_t a3)
{
  return static ModifiedContent<>._viewListCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t static ModifiedContent<>._viewListCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *((_DWORD *)a1 + 4);
  uint64_t v6 = *((void *)a1 + 3);
  long long v9 = *a1;
  int v10 = v5;
  uint64_t v11 = v6;
  void v8[2] = a2;
  void v8[3] = a3;
  void v8[4] = a4;
  v8[5] = a5;
  return (*(uint64_t (**)(long long *, uint64_t (*)(long long *), void *, uint64_t))(a5 + 40))(&v9, partial apply for closure #1 in static ModifiedContent<>._viewListCount(inputs:), v8, a3);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _ViewModifier_Content<A>()
{
  return protocol witness for CodingKey.intValue.getter in conformance _DisplayList_Identity.CodingKeys();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance <> StaticIf<A, B, C>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return static StaticIf<>._viewListCount(inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], *(void *)(a5 - 8), *(void *)(a5 - 16));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance OffsetShape<A>(uint64_t *a1)
{
  return static View._viewListCount(inputs:)(a1);
}

uint64_t static View._viewListCount(inputs:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = a1[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  int v9 = v3;
  uint64_t v10 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TupleView<A>(uint64_t a1, uint64_t a2)
{
  return static TupleView._viewListCount(inputs:)(a1, *(void *)(a2 + 16));
}

uint64_t static TupleView._viewListCount(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  specialized static TupleDescriptor.tupleDescription(_:)(a2, v12);
  uint64_t v6 = v12[0];
  if ((v3 & 0x200) != 0)
  {
    uint64_t v10 = *(void *)(v12[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12[0] = v2;
    v12[1] = v3;
    int v13 = v4;
    uint64_t v14 = v5;
    uint64_t v15 = 0;
    char v16 = 0;
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = type metadata accessor for TupleView.CountViews();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v9 = 40;
      do
      {
        TypeConformance<>.visitType<A>(visitor:)((uint64_t)v12, v8, (uint64_t)&protocol witness table for TupleView<A>.CountViews);
        v9 += 24;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      uint64_t v10 = v15;
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v10 = 0;
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v10;
}

uint64_t type metadata accessor for TupleView.CountViews()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EmptyView(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 4) & 1;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance StyleContextWriter<A>(long long *a1, uint64_t (*a2)(long long *))
{
  return static ViewModifier<>._viewListCount(inputs:body:)(a1, a2);
}

uint64_t static ViewModifier<>._viewListCount(inputs:body:)(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, ConditionalTypeDescriptor<ViewDescriptor>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ConditionalTypeDescriptor<ViewDescriptor>>)
  {
    type metadata accessor for Set<Int>(255, &lazy cache variable for type metadata for ConditionalTypeDescriptor<ViewDescriptor>, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ConditionalTypeDescriptor);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ConditionalTypeDescriptor<ViewDescriptor>>);
    }
  }
}

uint64_t static TupleDescriptor.tupleDescription(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  uint64_t v16 = a1;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = type metadata accessor for TupleTypeDescription();
  MEMORY[0x24C522390](v15, &v16, v8, MEMORY[0x263F8D1F0], v10, MEMORY[0x263F8D1F8]);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = v15[0];
  if (!v15[0])
  {
    TupleTypeDescription.init(_:)(a1, a2, v9, v15);
    uint64_t v12 = v15[0];
    void v15[4] = a1;
    uint64_t v16 = v15[0];
    int v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a3 + 32);
    swift_bridgeObjectRetain();
    uint64_t v14 = (uint64_t (*)(uint64_t *, void))v13(v15, a2, a3);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    uint64_t result = v14(v15, 0);
  }
  *a4 = v12;
  return result;
}

void protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t TupleTypeDescription.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TypeConformance();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = Array.init()();
  uint64_t v49 = v12;
  uint64_t result = AGTupleCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = result;
    if (result)
    {
      v36[0] = a4;
      uint64_t v16 = 0;
      BOOL v41 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v42 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      unint64_t v40 = 0x800000024621E0A0;
      *(void *)&long long v14 = 136446210;
      long long v37 = v14;
      v36[1] = MEMORY[0x263F8EE58] + 8;
      uint64_t v38 = a3;
      uint64_t v39 = v8;
      uint64_t v43 = result;
      do
      {
        uint64_t v18 = AGTupleElementType();
        static ProtocolDescriptor.conformance(of:)(v18, a2, a3, &v45);
        uint64_t v19 = v45;
        if (v45)
        {
          unint64_t v17 = v46;
          uint64_t v45 = v16;
          unint64_t v46 = v19;
          unint64_t v47 = v17;
          type metadata accessor for Array();
          uint64_t result = Array.append(_:)();
        }
        else
        {
          uint64_t v45 = 0;
          unint64_t v46 = 0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          uint64_t v45 = 0x65646E6920746120;
          unint64_t v46 = 0xEA00000000002078;
          uint64_t v48 = v16;
          v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v20);
          swift_bridgeObjectRelease();
          v21._uint64_t countAndFlagsBits = 0x2065707974202CLL;
          v21._object = (void *)0xE700000000000000;
          String.append(_:)(v21);
          v22._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v22);
          swift_bridgeObjectRelease();
          v23._uint64_t countAndFlagsBits = v45;
          uint64_t v24 = (void *)v46;
          uint64_t v45 = 0xD000000000000015;
          unint64_t v46 = v40;
          v23._object = v24;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          uint64_t v26 = v45;
          unint64_t v25 = v46;
          if (one-time initialization token for unlocatedIssuesLog != -1) {
            swift_once();
          }
          uint64_t v27 = __swift_project_value_buffer(v8, (uint64_t)static Log.unlocatedIssuesLog);
          swift_beginAccess();
          (*v42)(v11, v27, v8);
          swift_bridgeObjectRetain_n();
          int v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v30 = swift_slowAlloc();
            uint64_t v31 = v11;
            uint64_t v32 = a1;
            uint64_t v33 = swift_slowAlloc();
            uint64_t v45 = v33;
            *(_DWORD *)uint64_t v30 = v37;
            swift_bridgeObjectRetain();
            *(void *)(v30 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, &v45);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_245728000, v28, v29, "%{public}s", (uint8_t *)v30, 0xCu);
            swift_arrayDestroy();
            uint64_t v34 = v33;
            a1 = v32;
            uint64_t v11 = v31;
            MEMORY[0x24C527CC0](v34, -1, -1);
            uint64_t v35 = v30;
            a3 = v38;
            uint64_t v8 = v39;
            MEMORY[0x24C527CC0](v35, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*v41)(v11, v8);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v15 = v43;
        }
        ++v16;
      }
      while (v15 != v16);
      uint64_t v12 = v49;
      a4 = (uint64_t *)v36[0];
    }
    *a4 = v12;
  }
  return result;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance ViewDescriptor()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance ViewDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

Swift::Void __swiftcall DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)(NSObject _, Swift::String a2, CALayer in, Swift::Bool usingPresentationModifier)
{
  uint64_t v5 = v4;
  char refcount = in._attr.refcount;
  Class isa = in.super.isa;
  object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  swift_bridgeObjectRetain();
  uint64_t v11 = _.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int v13 = *(void **)(v5 + 48);
  *(void *)(v5 + 48) = 0x8000000000000000;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)isa);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
LABEL_14:
    int v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *(void *)(v5 + 8 * v15) = v13;
    goto LABEL_10;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)isa);
    if ((v19 & 1) != (v21 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    unint64_t v15 = v20;
  }
  *(void *)(v5 + 48) = v13;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v5 + 48);
  if ((v19 & 1) == 0) {
    specialized _NativeDictionary._insert(at:key:value:)(v15, isa, MEMORY[0x263F8EE78], *(void *)(v5 + 48));
  }
  uint64_t v5 = *(void *)(v22 + 56);
  int v13 = *(void **)(v5 + 8 * v15);
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 8 * v15) = v13;
  if ((v23 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_10:
  unint64_t v25 = v13[2];
  unint64_t v24 = v13[3];
  if (v25 >= v24 >> 1)
  {
    int v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v13);
    *(void *)(v5 + 8 * v15) = v13;
  }
  void v13[2] = v25 + 1;
  uint64_t v26 = &v13[4 * v25];
  v26[4] = countAndFlagsBits;
  v26[5] = object;
  v26[6] = v11;
  *((unsigned char *)v26 + 56) = refcount & 1;
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue]>)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(255, &lazy cache variable for type metadata for [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue], (uint64_t)&type metadata for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue, MEMORY[0x263F8D488]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue]>);
    }
  }
}

uint64_t static TupleView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v4 = *a1;
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  unsigned int v9 = *(_DWORD *)(a2 + 28);
  unsigned int v10 = *(_DWORD *)(a2 + 32);
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v26 = *(void *)(a2 + 48);
  unsigned int v21 = *(_DWORD *)(a2 + 36);
  unint64_t v22 = *(void *)(a2 + 56);
  unint64_t v23 = *(void *)(a2 + 64);
  unint64_t v24 = *(void *)(a2 + 72);
  int v25 = *(_DWORD *)(a2 + 80);
  specialized static TupleDescriptor.tupleDescription(_:)(a3, &v30);
  uint64_t v12 = v30;
  uint64_t v13 = *(void *)(v30 + 16);
  if (v13 == 1)
  {
    LODWORD(v30) = v4;
    uint64_t v31 = v5;
    LODWORD(v32) = v6;
    unint64_t v33 = v7;
    unsigned int v34 = v8;
    unsigned int v35 = v9;
    unint64_t v36 = __PAIR64__(v21, v10);
    unint64_t v37 = v11;
    unint64_t v38 = v26;
    unint64_t v39 = v22;
    unint64_t v40 = v23;
    unint64_t v41 = v24;
    int v42 = v25;
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v27 = *(_OWORD *)(v12 + 40);
    swift_bridgeObjectRelease();
    long long v29 = v27;
    UnarCGFloat y = type metadata accessor for TupleView.MakeUnary();
    uint64_t result = TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v30, Unary, (uint64_t)&protocol witness table for TupleView<A>.MakeUnary);
    uint64_t v17 = v43;
    if (v43)
    {
      int v18 = v44;
      unint64_t v19 = HIDWORD(v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      *(void *)a4 = v17;
      *(_DWORD *)(a4 + 8) = v18;
      *(_DWORD *)(a4 + 12) = v19;
    }
    else
    {
      __break(1u);
    }
  }
  else if (v13)
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = type metadata accessor for TupleView();
    LODWORD(v29) = v4;
    uint64_t v30 = v5;
    LODWORD(v31) = v6;
    unint64_t v32 = v7;
    unint64_t v33 = __PAIR64__(v9, v8);
    unsigned int v34 = v10;
    unsigned int v35 = v21;
    unint64_t v36 = v11;
    unint64_t v37 = v26;
    unint64_t v38 = v22;
    unint64_t v39 = v23;
    unint64_t v40 = v24;
    LODWORD(v41) = v25;
    return static View.makeImplicitRoot(view:inputs:)((int *)&v29, &v30, v20, (uint64_t)&protocol witness table for TupleView<A>, a4);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a4 = MEMORY[0x263F8EE78];
    int v15 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = v15;
  }
  return result;
}

uint64_t type metadata accessor for TupleView()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

{
  uint64_t v4;
  long long v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 40 * result;
  uint64_t v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(void *)(v4 + 32) = *(void *)(a2 + 32);
  *(void *)(a4[7] + 8 * result) = a3;
  BOOL v6 = a4[2];
  uint64_t v7 = __OFADD__(v6, 1);
  unsigned int v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v4;
  long long v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 56 * result;
  uint64_t v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(v4 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a4[7] + 8 * result) = a3;
  BOOL v6 = a4[2];
  uint64_t v7 = __OFADD__(v6, 1);
  unsigned int v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v4 = a4[7] + 120 * result;
  uint64_t v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  BOOL v6 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v6;
  *(unsigned char *)(v4 + 112) = *(unsigned char *)(a3 + 112);
  uint64_t v7 = *(_OWORD *)(a3 + 96);
  unsigned int v8 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 96) = v7;
  *(_OWORD *)(v4 + 64) = v8;
  unsigned int v9 = a4[2];
  unsigned int v10 = __OFADD__(v9, 1);
  unint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  unsigned int v9 = v6;
  uint64_t v13 = *v6;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v19 = v14;
  uint64_t v20 = *(void *)(v13 + 24);
  if (v20 < v18 || (a3 & 1) == 0)
  {
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v24 & 1))
    {
      unint64_t v15 = v23;
      uint64_t v21 = *v9;
      if (v19) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v21 = *v9;
  if (v19)
  {
LABEL_8:
    *(void *)(*(void *)(v21 + 56) + 8 * v15) = a1;
    return swift_bridgeObjectRelease();
  }
LABEL_13:

  return a6(v15, a2, a1, v21);
}

uint64_t specialized TupleTypeDescription.init(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t (*a3)(BOOL, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = AGTupleCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v40 = a4;
    if (result)
    {
      unint64_t v39 = a3;
      uint64_t v14 = 0;
      unint64_t v46 = (void (**)(char *, uint64_t))(v9 + 8);
      unint64_t v47 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      uint64_t v15 = MEMORY[0x263F8EE78];
      unint64_t v45 = 0x800000024621E0A0;
      *(void *)&long long v13 = 136446210;
      long long v42 = v13;
      uint64_t v41 = MEMORY[0x263F8EE58] + 8;
      uint64_t v48 = result;
      uint64_t v43 = a1;
      uint64_t v44 = v8;
      do
      {
        uint64_t v16 = AGTupleElementType();
        a2();
        uint64_t v17 = swift_conformsToProtocol();
        if (v17)
        {
          uint64_t v18 = v17;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = v39(0, *(void *)(v15 + 16) + 1, 1, v15);
            uint64_t v15 = result;
          }
          unint64_t v20 = *(void *)(v15 + 16);
          unint64_t v19 = *(void *)(v15 + 24);
          if (v20 >= v19 >> 1)
          {
            uint64_t result = v39(v19 > 1, v20 + 1, 1, v15);
            uint64_t v15 = result;
          }
          *(void *)(v15 + 16) = v20 + 1;
          uint64_t v21 = (void *)(v15 + 24 * v20);
          void v21[4] = v14;
          v21[5] = v16;
          v21[6] = v18;
        }
        else
        {
          uint64_t v50 = 0;
          unint64_t v51 = 0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          uint64_t v49 = v14;
          uint64_t v50 = 0x65646E6920746120;
          unint64_t v51 = 0xEA00000000002078;
          v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v22);
          swift_bridgeObjectRelease();
          v23._uint64_t countAndFlagsBits = 0x2065707974202CLL;
          v23._object = (void *)0xE700000000000000;
          String.append(_:)(v23);
          v24._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          v25._uint64_t countAndFlagsBits = v50;
          unint64_t v26 = (void *)v51;
          uint64_t v50 = 0xD000000000000015;
          unint64_t v51 = v45;
          v25._object = v26;
          String.append(_:)(v25);
          swift_bridgeObjectRelease();
          uint64_t v27 = v50;
          unint64_t v28 = v51;
          if (one-time initialization token for unlocatedIssuesLog != -1) {
            swift_once();
          }
          uint64_t v29 = __swift_project_value_buffer(v8, (uint64_t)static Log.unlocatedIssuesLog);
          swift_beginAccess();
          (*v47)(v11, v29, v8);
          swift_bridgeObjectRetain_n();
          uint64_t v30 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v30, v31))
          {
            unint64_t v32 = a2;
            uint64_t v33 = swift_slowAlloc();
            unsigned int v34 = v11;
            uint64_t v35 = swift_slowAlloc();
            uint64_t v50 = v35;
            *(_DWORD *)uint64_t v33 = v42;
            swift_bridgeObjectRetain();
            *(void *)(v33 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v50);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_245728000, v30, v31, "%{public}s", (uint8_t *)v33, 0xCu);
            swift_arrayDestroy();
            uint64_t v36 = v35;
            unint64_t v11 = v34;
            MEMORY[0x24C527CC0](v36, -1, -1);
            uint64_t v37 = v33;
            a2 = v32;
            uint64_t v8 = v44;
            MEMORY[0x24C527CC0](v37, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*v46)(v11, v8);
          uint64_t result = swift_bridgeObjectRelease();
        }
        ++v14;
      }
      while (v48 != v14);
    }
    else
    {
      uint64_t v15 = MEMORY[0x263F8EE78];
    }
    *unint64_t v40 = v15;
  }
  return result;
}

uint64_t static ProtocolDescriptor.conformance(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  uint64_t result = swift_conformsToProtocol();
  if (result) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0;
  }
  *a4 = v7;
  a4[1] = result;
  return result;
}

ProtocolDescriptor *_viewProtocolDescriptor()
{
  return &protocol descriptor for View;
}

void type metadata accessor for _ContiguousArrayStorage<(Int, TypeConformance<ViewDescriptor>)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, TypeConformance<ViewDescriptor>)>)
  {
    type metadata accessor for (Int, TypeConformance<ViewDescriptor>)(255, (unint64_t *)&lazy cache variable for type metadata for (Int, TypeConformance<ViewDescriptor>), &lazy cache variable for type metadata for TypeConformance<ViewDescriptor>, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, TypeConformance<ViewDescriptor>)>);
    }
  }
}

void *_styleContextProtocolDescriptor()
{
  return &protocol descriptor for StyleContext;
}

void type metadata accessor for _ContiguousArrayStorage<(Int, TypeConformance<StyleContextDescriptor>)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, TypeConformance<StyleContextDescriptor>)>)
  {
    type metadata accessor for (Int, TypeConformance<ViewDescriptor>)(255, &lazy cache variable for type metadata for (Int, TypeConformance<StyleContextDescriptor>), &lazy cache variable for type metadata for TypeConformance<StyleContextDescriptor>, (uint64_t)&type metadata for StyleContextDescriptor, (uint64_t)&protocol witness table for StyleContextDescriptor);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, TypeConformance<StyleContextDescriptor>)>);
    }
  }
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v9 = *v6;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>(0, a3, a4, a5, a6);
  char v38 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = result;
  if (*(void *)(v9 + 16))
  {
    uint64_t v37 = v7;
    int64_t v12 = 0;
    long long v13 = (void *)(v9 + 64);
    uint64_t v14 = 1 << *(unsigned char *)(v9 + 32);
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & *(void *)(v9 + 64);
    int64_t v17 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v18 = result + 64;
    while (1)
    {
      if (v16)
      {
        unint64_t v24 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v25 = v24 | (v12 << 6);
      }
      else
      {
        if (__OFADD__(v12++, 1)) {
          goto LABEL_40;
        }
        if (v12 >= v17)
        {
LABEL_31:
          if ((v38 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v7 = v37;
            goto LABEL_38;
          }
          uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
          if (v36 >= 64) {
            bzero((void *)(v9 + 64), ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *long long v13 = -1 << v36;
          }
          uint64_t v7 = v37;
          *(void *)(v9 + 16) = 0;
          break;
        }
        unint64_t v27 = v13[v12];
        if (!v27)
        {
          int64_t v28 = v12 + 1;
          if (v12 + 1 >= v17) {
            goto LABEL_31;
          }
          unint64_t v27 = v13[v28];
          if (!v27)
          {
            while (1)
            {
              int64_t v12 = v28 + 1;
              if (__OFADD__(v28, 1)) {
                break;
              }
              if (v12 >= v17) {
                goto LABEL_31;
              }
              unint64_t v27 = v13[v12];
              ++v28;
              if (v27) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v12;
        }
LABEL_20:
        unint64_t v16 = (v27 - 1) & v27;
        unint64_t v25 = __clz(__rbit64(v27)) + (v12 << 6);
      }
      uint64_t v29 = 8 * v25;
      uint64_t v30 = *(void *)(*(void *)(v9 + 48) + v29);
      uint64_t v31 = *(void *)(*(void *)(v9 + 56) + v29);
      if ((v38 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v18 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v18 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v34 = v21 == v33;
          if (v21 == v33) {
            unint64_t v21 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v18 + 8 * v21);
        }
        while (v35 == -1);
        unint64_t v22 = __clz(__rbit64(~v35)) + (v21 << 6);
      }
      *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      uint64_t v23 = 8 * v22;
      *(void *)(*(void *)(v11 + 48) + v23) = v30;
      *(void *)(*(void *)(v11 + 56) + v23) = v31;
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v7 = v11;
  return result;
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for Set<Int>(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TupleTypeDescription);
    unint64_t v6 = type metadata accessor for _DictionaryStorage();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for Set<Int>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for TupleTypeDescription()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for (Int, TypeConformance<ViewDescriptor>)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for CombinedAnimationState<Double>.Entry(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypeConformance);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for CombinedAnimationState<Double>.Entry(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata completion function for StoredLocationBase.Data()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = AGSubgraphShouldRecordTree();
  if (result) {
    return static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(a1, v8, a4, a3);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _MatchedGeometryEffect(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 >= 0xFE) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    unsigned int v16 = *(unsigned __int8 *)(((((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v16 >= 2) {
      return ((v16 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    return 0;
  }
  unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25;
  unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
  if (v8 < 4) {
    unsigned int v10 = v9 + 1;
  }
  else {
    unsigned int v10 = 2;
  }
  if (v10 >= 0x10000) {
    unsigned int v11 = 4;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v10 < 0x100) {
    unsigned int v11 = 1;
  }
  if (v10 >= 2) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  switch(v12)
  {
    case 1:
      int v13 = *(unsigned __int8 *)(result + v8);
      if (!*(unsigned char *)(result + v8)) {
        goto LABEL_26;
      }
      goto LABEL_21;
    case 2:
      int v13 = *(unsigned __int16 *)(result + v8);
      if (!*(_WORD *)(result + v8)) {
        goto LABEL_26;
      }
      goto LABEL_21;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v13 = *(_DWORD *)(result + v8);
      if (!v13) {
        goto LABEL_26;
      }
LABEL_21:
      int v14 = (v13 - 1) << (8 * v8);
      if (v8 >= 4) {
        int v14 = 0;
      }
      if (((((v6 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFE8) {
        int v15 = *(unsigned __int8 *)result;
      }
      else {
        int v15 = *(_DWORD *)result;
      }
      uint64_t result = v7 + (v15 | v14) + 1;
      break;
    default:
      goto LABEL_26;
  }
  return result;
}

void PreferencesOutputs.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t one-time initialization function for introduced(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  if (*a2 != -1) {
    uint64_t result = swift_once();
  }
  *a4 = *a3;
  return result;
}

__n128 ResolvedShadowStyle.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  int8x16_t v9 = *(int8x16_t *)v1;
  __n128 v10 = *(__n128 *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 32);
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float32x4_t v5 = (float32x4_t)v9;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v11.f32, v9, *(float *)&v9.i32[1], v9.u32[2], *(float *)&v9.i32[3], v4);
    float32x4_t v5 = v11;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  float32x4_t v7 = vmulq_f32(v5, v6);
  __n128 result = v10;
  *(float32x4_t *)a1 = v7;
  *(__n128 *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  return result;
}

uint64_t specialized AnimatableAttribute.updateValue()(uint64_t a1, void (*a2)(long long *, void, void, uint64_t))
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  long long v6 = *(_OWORD *)AGGraphGetValue();
  char v7 = v4 & 1;
  a2(&v6, 0, *(unsigned int *)(v2 + 4), v2 + 8);
  if (v7) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v2;
  char v4;
  uint64_t result;
  long long v6;
  char v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x263EF8340];
  long long v6 = *(_OWORD *)AGGraphGetValue();
  char v7 = v4 & 1;
  a2(&v6, 0, *(unsigned int *)(v2 + 4), v2 + 8);
  if (v7) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int64_t v17 = (char *)&Counter - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  unint64_t v21 = (double *)&unk_26B0EB000;
  if (*(_DWORD *)(a4 + 40) == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    if (*(unsigned char *)(a1 + 16) != 1)
    {
      unint64_t v22 = (double *)&unk_26B0EB000;
      unint64_t v21 = *(double **)(a4 + 32);
      if (v21) {
        goto LABEL_62;
      }
      return;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 16) = 1;
  }
  float v4 = *(float *)a1;
  float v5 = *(float *)(a1 + 4);
  float v6 = *(float *)(a1 + 8);
  float v23 = *(float *)(a1 + 12);
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v100.i8[0] = 2;
    *(float *)v24.i32 = v4;
    ResolvedGradient.ColorSpace.convertIn(_:)((float *)&v102, v24, v5, LODWORD(v6), v23, v25);
    float v5 = *((float *)&v102 + 1);
    float v4 = *(float *)&v102;
    float v23 = *((float *)&v103 + 1);
    float v6 = *(float *)&v103;
  }
  float v8 = v4 * 128.0;
  float v10 = v5 * 128.0;
  float v26 = v6 * 128.0;
  float v7 = v23 * 128.0;
  if (*(unsigned char *)(a4 + 28)) {
    goto LABEL_61;
  }
  float v4 = *(float *)(a4 + 12);
  float v6 = *(float *)(a4 + 16);
  float v9 = *(float *)(a4 + 20);
  float v5 = *(float *)(a4 + 24);
  BOOL v27 = v8 == v4 && v10 == v6;
  BOOL v28 = v27 && v26 == v9;
  if (v28 && v7 == v5) {
    goto LABEL_61;
  }
  float v92 = v26;
  v93.i64[0] = v15;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v30 = swift_retain();
  uint64_t v31 = specialized find<A>(_:key:)(v30);
  if (v31)
  {
    uint64_t v32 = *(void *)(v31 + 72);
    swift_retain();
    swift_release();
    if (v32) {
      goto LABEL_35;
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v33 = swift_retain();
  char v34 = specialized closure #1 in PropertyList.subscript.getter(v33);
  swift_release();
  if ((v34 & 1) == 0)
  {
    unint64_t v21 = (double *)&unk_26B0EB000;
    if (!a2) {
      goto LABEL_60;
    }
    swift_retain();
    uint64_t v32 = a2;
    goto LABEL_35;
  }
  unint64_t v21 = (double *)&unk_26B0EB000;
  if (one-time initialization token for velocityTracking != -1) {
    goto LABEL_89;
  }
  while (1)
  {
    uint64_t v32 = static Animation.velocityTracking;
    swift_retain();
LABEL_35:
    float v35 = v7;
    float v36 = v8 - v4;
    float v6 = v10 - v6;
    float v4 = v92 - v9;
    float v9 = v35;
    float v5 = v35 - v5;
    double v18 = *(double *)AGGraphGetValue();
    uint64_t v37 = *(void *)(a4 + 32);
    uint64_t v91 = v32;
    if (!v37)
    {
      type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      uint64_t v48 = swift_retain();
      uint64_t i = specialized AnimatorState.init(animation:interval:at:in:)(v48, v36, v6, v4, v5, v18);
      swift_retain();
      int v49 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        int v90 = v49;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        uint64_t v50 = (void *)_signpostLog;
        float v7 = v9;
        if (OS_os_log.signpostsEnabled.getter())
        {
          swift_retain();
          id v51 = v50;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v52 = swift_allocObject();
          *(_OWORD *)(v52 + 16) = xmmword_2461BE2B0;
          Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
          int v89 = *MEMORY[0x263F288F8];
          if (CurrentAttribute == v89) {
            goto LABEL_92;
          }
          id v54 = (id)AGGraphGetAttributeGraph();
          uint64_t Counter = AGGraphGetCounter();

          uint64_t v55 = MEMORY[0x263F8DA20];
          *(void *)(v52 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v52 + 64) = v55;
          *(void *)(v52 + 32) = Counter;
          int v56 = AGGraphGetCurrentAttribute();
          if (v56 == v89) {
            goto LABEL_93;
          }
          uint64_t v57 = MEMORY[0x263F8E960];
          *(void *)(v52 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v52 + 104) = v57;
          *(_DWORD *)(v52 + 72) = v56;
          *(void *)(v52 + 136) = MEMORY[0x263F8D310];
          *(void *)(v52 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v52 + 112) = 0x656956726F6C6F43;
          *(void *)(v52 + 120) = 0xE900000000000077;
          LOBYTE(v97) = v90;
          v95.i64[0] = (uint64_t)&dword_245728000;
          v105[0].i64[0] = _signpostLog;
          long long v102 = "AnimationState";
          uint64_t v103 = 14;
          char v104 = 2;
          v100.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ started";
          v100.i64[1] = 39;
          char v101 = 2;
          uint64_t v98 = (int *)v52;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          (*(void (**)(char *, uint64_t))(v93.i64[0] + 8))(v17, v14);
          swift_bridgeObjectRelease();
          unint64_t v21 = (double *)&unk_26B0EB000;
        }
        else
        {
          swift_release();
        }
        goto LABEL_58;
      }
      goto LABEL_53;
    }
    swift_retain();
    LOBYTE(v102) = 0;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v32, v36, v6, v4, v5, v18);
    swift_retain_n();
    int v38 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled())
    {
      int v90 = v38;
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      unint64_t v39 = (void *)_signpostLog;
      float v7 = v9;
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        id v40 = v39;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_2461BE2B0;
        int v42 = AGGraphGetCurrentAttribute();
        int v89 = *MEMORY[0x263F288F8];
        if (v42 == v89)
        {
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
          return;
        }
        id v43 = (id)AGGraphGetAttributeGraph();
        uint64_t Counter = AGGraphGetCounter();

        uint64_t v44 = MEMORY[0x263F8DA20];
        *(void *)(v41 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v41 + 64) = v44;
        *(void *)(v41 + 32) = Counter;
        int v45 = AGGraphGetCurrentAttribute();
        if (v45 == v89) {
          goto LABEL_91;
        }
        uint64_t v46 = MEMORY[0x263F8E960];
        *(void *)(v41 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v41 + 104) = v46;
        *(_DWORD *)(v41 + 72) = v45;
        *(void *)(v41 + 136) = MEMORY[0x263F8D310];
        *(void *)(v41 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v41 + 112) = 0x656956726F6C6F43;
        *(void *)(v41 + 120) = 0xE900000000000077;
        LOBYTE(v97) = v90;
        v95.i64[0] = (uint64_t)&dword_245728000;
        v105[0].i64[0] = _signpostLog;
        long long v102 = "AnimationState";
        uint64_t v103 = 14;
        char v104 = 2;
        v100.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ updated";
        v100.i64[1] = 39;
        char v101 = 2;
        uint64_t v98 = (int *)v41;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v93.i64[0] + 8))(v17, v14);
        swift_bridgeObjectRelease();
        unint64_t v21 = (double *)&unk_26B0EB000;
        for (uint64_t i = *(void *)(a4 + 32); !i; *(void *)(a4 + 32) = i)
        {
LABEL_52:
          __break(1u);
LABEL_53:
          swift_release();
          float v7 = v9;
LABEL_58:
          swift_release();
        }
      }
      else
      {
        swift_release_n();
        uint64_t i = *(void *)(a4 + 32);
        if (!i) {
          goto LABEL_52;
        }
      }
    }
    else
    {
      swift_release_n();
      float v7 = v9;
      uint64_t i = *(void *)(a4 + 32);
      if (!i) {
        goto LABEL_52;
      }
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
LABEL_60:
    swift_release();
    uint64_t v15 = v93.i64[0];
    float v26 = v92;
LABEL_61:
    unint64_t v22 = v21;
    *(void *)(a4 + 12) = LODWORD(v8) | ((unint64_t)LODWORD(v10) << 32);
    *(void *)(a4 + 20) = LODWORD(v26) | ((unint64_t)LODWORD(v7) << 32);
    *(unsigned char *)(a4 + 28) = 0;
    unint64_t v21 = *(double **)(a4 + 32);
    if (!v21) {
      return;
    }
LABEL_62:
    int8x16_t v93 = *(int8x16_t *)a1;
    uint64_t v58 = *((void *)v22 + 229);
    swift_retain();
    if (v58 != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      float32x4_t v60 = (float32x4_t)v93;
    }
    else
    {
      v95.i8[0] = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v100.f32, v93, *(float *)&v93.i32[1], v93.u32[2], *(float *)&v93.i32[3], v59);
      float32x4_t v60 = v100;
    }
    v61.i64[0] = 0x4300000043000000;
    v61.i64[1] = 0x4300000043000000;
    v105[0] = vmulq_f32(v60, v61);
    v100.i8[0] = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v105, v18) & 1) == 0) {
      break;
    }
    swift_retain_n();
    char v62 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_79;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int v63 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_79:
      swift_release_n();
      if (!*(void *)(a4 + 32))
      {
LABEL_81:
        *(void *)(a4 + 32) = 0;
        goto LABEL_82;
      }
LABEL_80:
      specialized AnimatorState.removeListeners()();
      swift_release();
      goto LABEL_81;
    }
    v93.i64[0] = v15;
    swift_retain();
    id v64 = v63;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_2461BE2B0;
    int v66 = AGGraphGetCurrentAttribute();
    int v67 = *MEMORY[0x263F288F8];
    if (v66 == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      id v68 = (id)AGGraphGetAttributeGraph();
      uint64_t v69 = AGGraphGetCounter();

      uint64_t v70 = MEMORY[0x263F8DA20];
      *(void *)(v65 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v65 + 64) = v70;
      *(void *)(v65 + 32) = v69;
      int v71 = AGGraphGetCurrentAttribute();
      if (v71 != v67)
      {
        uint64_t v72 = MEMORY[0x263F8E960];
        *(void *)(v65 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v65 + 104) = v72;
        *(_DWORD *)(v65 + 72) = v71;
        *(void *)(v65 + 136) = MEMORY[0x263F8D310];
        *(void *)(v65 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v65 + 112) = 0x656956726F6C6F43;
        *(void *)(v65 + 120) = 0xE900000000000077;
        char v99 = v62;
        uint64_t v97 = _signpostLog;
        uint64_t v98 = &dword_245728000;
        v100.i64[0] = (uint64_t)"AnimationState";
        v100.i64[1] = 14;
        char v101 = 2;
        v95.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ ended";
        v95.i64[1] = 37;
        char v96 = 2;
        uint64_t v94 = v65;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v93.i64[0] + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (!*(void *)(a4 + 32)) {
          goto LABEL_81;
        }
        goto LABEL_80;
      }
    }
    __break(1u);
LABEL_89:
    swift_once();
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v73 = v21[7];
  v95.i64[0] = (uint64_t)v21[8];
  uint64_t v74 = *((unsigned int *)v21 + 22);
  unsigned __int8 v75 = *((unsigned char *)v21 + 92);
  unsigned __int8 v76 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                       + 0x58);
  unint64_t v77 = static CoreGlue.shared;
  LOBYTE(v98) = v75;
  v76(&v95, v74 | ((unint64_t)v75 << 32), v73);

LABEL_82:
  v78.i64[0] = 0x3C0000003C000000;
  v78.i64[1] = 0x3C0000003C000000;
  float32x4_t v79 = vmulq_f32(v105[0], v78);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    int8x16_t v93 = (int8x16_t)v79;
    swift_release();
    __int32 v81 = v93.i32[1];
    __int32 v80 = v93.i32[0];
    __int32 v83 = v93.i32[3];
    __int32 v82 = v93.i32[2];
  }
  else
  {
    LOBYTE(v98) = 2;
    float32x4_t v95 = v79;
    *(float *)&uint64_t v84 = ResolvedGradient.ColorSpace.convertOut(_:)(v95.f32);
    v93.i64[0] = v84;
    __int32 v81 = v85;
    __int32 v82 = v86;
    __int32 v83 = v87;
    swift_release();
    __int32 v80 = v93.i32[0];
  }
  *(_DWORD *)a1 = v80;
  *(_DWORD *)(a1 + 4) = v81;
  *(_DWORD *)(a1 + 8) = v82;
  *(_DWORD *)(a1 + 12) = v83;
  *(unsigned char *)(a1 + 16) = 1;
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  float64x2_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  void *v30;
  id v31;
  uint64_t v32;
  int v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  float64x2_t v40;
  char v41;
  void *v42;
  id v43;
  uint64_t v44;
  int CurrentAttribute;
  id v46;
  uint64_t Counter;
  uint64_t v48;
  int v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unsigned __int8 v53;
  void (*v54)(void *, unint64_t, double);
  void *v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  id v61;
  uint64_t v62;
  int v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  float64x2_t v75;
  uint64_t v76;
  void v77[2];
  char v78;
  uint64_t v79;
  int *v80;
  char v81;
  const char *v82;
  uint64_t v83;
  char v84;
  float64x2_t v85;
  float64x2_t v86;

  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 56))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 32) = 1;
LABEL_11:
    float v8 = *(double *)a1;
    float v9 = *(double *)(a1 + 8);
    unint64_t v22 = vmulq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    if (*(unsigned char *)(a4 + 48)) {
      goto LABEL_39;
    }
    float v4 = *(double *)(a4 + 32);
    float v5 = *(double *)(a4 + 40);
    float v7 = *(double *)(a4 + 16);
    float v6 = *(double *)(a4 + 24);
    float v10 = v22.f64[1];
    if (v8 == v7 && v9 == v6 && v22.f64[0] == v4 && v22.f64[1] == v5) {
      goto LABEL_39;
    }
    unsigned __int8 v75 = v22;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    int8x16_t v24 = swift_retain();
    int8x16_t v25 = specialized find<A>(_:key:)(v24);
    if (v25)
    {
      float v26 = *(void *)(v25 + 72);
      swift_retain();
      swift_release();
      if (v26) {
        goto LABEL_27;
      }
    }
    else
    {
      swift_release();
    }
    BOOL v27 = swift_retain();
    BOOL v28 = specialized closure #1 in PropertyList.subscript.getter(v27);
    swift_release();
    if ((v28 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_38;
      }
      swift_retain();
      float v26 = a2;
      goto LABEL_27;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_70;
    }
    goto LABEL_24;
  }
  if (*(unsigned char *)(a1 + 32) == 1) {
    goto LABEL_11;
  }
  unint64_t v21 = *(void *)(a4 + 56);
  if (!v21) {
    return;
  }
  while (1)
  {
    id v40 = vmulq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    __int32 v85 = *(float64x2_t *)a1;
    __int32 v86 = v40;
    swift_retain();
    LOBYTE(v82) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v85, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v51 = *(double *)(v21 + 72);
      v77[0] = *(void *)(v21 + 80);
      uint64_t v52 = *(unsigned int *)(v21 + 120);
      uint64_t v53 = *(unsigned char *)(v21 + 124);
      id v54 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      uint64_t v55 = static CoreGlue.shared;
      LOBYTE(v80) = v53;
      v54(v77, v52 | ((unint64_t)v53 << 32), v51);
      swift_release();

      goto LABEL_55;
    }
    swift_retain_n();
    uint64_t v41 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_52;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int v42 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_52:
      swift_release_n();
      if (*(void *)(a4 + 56))
      {
LABEL_53:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_54:
      swift_release();
      *(void *)(a4 + 56) = 0;
LABEL_55:
      int v56 = vmulq_f64(v86, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
      *(float64x2_t *)a1 = v85;
      *(float64x2_t *)(a1 + 16) = v56;
      *(unsigned char *)(a1 + 32) = 1;
      return;
    }
    uint64_t v74 = v15;
    swift_retain();
    id v43 = v42;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    uint64_t v15 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v46 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v48 = MEMORY[0x263F8DA20];
      *(void *)(v44 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v44 + 64) = v48;
      *(void *)(v44 + 32) = Counter;
      int v49 = AGGraphGetCurrentAttribute();
      if (v49 != v15)
      {
        uint64_t v50 = MEMORY[0x263F8E960];
        *(void *)(v44 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v44 + 104) = v50;
        *(_DWORD *)(v44 + 72) = v49;
        *(void *)(v44 + 136) = MEMORY[0x263F8D310];
        *(void *)(v44 + 144) = lazy protocol witness table accessor for type String and conformance String();
        strcpy((char *)(v44 + 112), "_ScaleEffect");
        *(unsigned char *)(v44 + 125) = 0;
        *(_WORD *)(v44 + 126) = -5120;
        __int32 v81 = v41;
        float32x4_t v79 = _signpostLog;
        __int32 v80 = &dword_245728000;
        __int32 v82 = "AnimationState";
        __int32 v83 = 14;
        uint64_t v84 = 2;
        v77[0] = "Animation: (%p) [%d] %{public}@ ended";
        v77[1] = 37;
        float32x4_t v78 = 2;
        unsigned __int8 v76 = v44;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (*(void *)(a4 + 56)) {
          goto LABEL_53;
        }
        goto LABEL_54;
      }
    }
    __break(1u);
LABEL_70:
    swift_once();
LABEL_24:
    float v26 = static Animation.velocityTracking;
    swift_retain();
LABEL_27:
    float v7 = v8 - v7;
    float v6 = v9 - v6;
    float v4 = v75.f64[0] - v4;
    float v5 = v10 - v5;
    double v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 56)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v57 = swift_retain();
    uint64_t v58 = specialized AnimatorState.init(animation:interval:at:in:)(v57, v7, v6, v4, v5, v18);
    swift_retain();
    int8x16_t v59 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_64;
    }
    uint64_t v72 = v59;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    float32x4_t v60 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      double v73 = v26;
      uint64_t v74 = v15;
      swift_retain();
      float32x4_t v61 = v60;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      char v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_2461BE2B0;
      int v63 = AGGraphGetCurrentAttribute();
      int v71 = *MEMORY[0x263F288F8];
      if (v63 == v71) {
        goto LABEL_73;
      }
      id v64 = (id)AGGraphGetAttributeGraph();
      uint64_t v65 = AGGraphGetCounter();

      int v66 = MEMORY[0x263F8DA20];
      *(void *)(v62 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v62 + 64) = v66;
      *(void *)(v62 + 32) = v65;
      int v67 = AGGraphGetCurrentAttribute();
      if (v67 == v71) {
        goto LABEL_74;
      }
      id v68 = MEMORY[0x263F8E960];
      *(void *)(v62 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v62 + 104) = v68;
      *(_DWORD *)(v62 + 72) = v67;
      *(void *)(v62 + 136) = MEMORY[0x263F8D310];
      *(void *)(v62 + 144) = lazy protocol witness table accessor for type String and conformance String();
      strcpy((char *)(v62 + 112), "_ScaleEffect");
      *(unsigned char *)(v62 + 125) = 0;
      *(_WORD *)(v62 + 126) = -5120;
      LOBYTE(v76) = v72;
      v77[0] = &dword_245728000;
      float32x4_t v79 = v62;
      __int32 v80 = (int *)_signpostLog;
      *(void *)&v85.f64[0] = "AnimationState";
      *(void *)&v85.f64[1] = 14;
      LOBYTE(v86.f64[0]) = 2;
      __int32 v82 = "Animation: (%p) [%d] %{public}@ started";
      __int32 v83 = 39;
      uint64_t v84 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v69 = v74;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
      uint64_t v15 = v69;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_64:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 56) = v58;
    if (v58)
    {
LABEL_37:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_38;
    }
LABEL_66:
    __break(1u);
LABEL_38:
    swift_release();
    unint64_t v22 = v75;
LABEL_39:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(float64x2_t *)(a4 + 32) = v22;
    *(unsigned char *)(a4 + 48) = 0;
    unint64_t v21 = *(void *)(a4 + 56);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v85.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v26, v7, v6, v4, v5, v18);
  swift_retain_n();
  uint64_t v29 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_35;
  }
  uint64_t v72 = v29;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_35:
    swift_release_n();
    goto LABEL_36;
  }
  double v73 = v26;
  uint64_t v74 = v15;
  swift_retain();
  uint64_t v31 = v30;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_2461BE2B0;
  uint64_t v33 = AGGraphGetCurrentAttribute();
  int v71 = *MEMORY[0x263F288F8];
  if (v33 != v71)
  {
    char v34 = (id)AGGraphGetAttributeGraph();
    float v35 = AGGraphGetCounter();

    float v36 = MEMORY[0x263F8DA20];
    *(void *)(v32 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v32 + 64) = v36;
    *(void *)(v32 + 32) = v35;
    uint64_t v37 = AGGraphGetCurrentAttribute();
    if (v37 == v71) {
      goto LABEL_72;
    }
    int v38 = MEMORY[0x263F8E960];
    *(void *)(v32 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v32 + 104) = v38;
    *(_DWORD *)(v32 + 72) = v37;
    *(void *)(v32 + 136) = MEMORY[0x263F8D310];
    *(void *)(v32 + 144) = lazy protocol witness table accessor for type String and conformance String();
    strcpy((char *)(v32 + 112), "_ScaleEffect");
    *(unsigned char *)(v32 + 125) = 0;
    *(_WORD *)(v32 + 126) = -5120;
    LOBYTE(v76) = v72;
    v77[0] = &dword_245728000;
    float32x4_t v79 = v32;
    __int32 v80 = (int *)_signpostLog;
    *(void *)&v85.f64[0] = "AnimationState";
    *(void *)&v85.f64[1] = 14;
    LOBYTE(v86.f64[0]) = 2;
    __int32 v82 = "Animation: (%p) [%d] %{public}@ updated";
    __int32 v83 = 39;
    uint64_t v84 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    unint64_t v39 = v74;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
    uint64_t v15 = v39;
    swift_bridgeObjectRelease();
LABEL_36:
    if (*(void *)(a4 + 56)) {
      goto LABEL_37;
    }
    goto LABEL_66;
  }
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0xD000000000000015, 0x8000000246222D60);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x7974696361704F5FLL, 0xEE00746365666645);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  char v40;
  void *v41;
  id v42;
  uint64_t v43;
  int CurrentAttribute;
  id v45;
  uint64_t Counter;
  uint64_t v47;
  int v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  unsigned __int8 v52;
  void (*v53)(void *, unint64_t, double);
  void *v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  id v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  void v75[2];
  char v76;
  uint64_t v77;
  int *v78;
  char v79;
  const char *v80;
  uint64_t v81;
  char v82;
  float64x2_t v83;
  long long v84;

  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 56))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 48) = 1;
LABEL_11:
    float v8 = *(double *)a1;
    float v9 = *(double *)(a1 + 8);
    float v10 = *(double *)(a1 + 16);
    unint64_t v22 = *(double *)(a1 + 24);
    if (*(unsigned char *)(a4 + 48)) {
      goto LABEL_37;
    }
    float v4 = *(double *)(a4 + 32);
    float v5 = *(double *)(a4 + 40);
    float v7 = *(double *)(a4 + 16);
    float v6 = *(double *)(a4 + 24);
    if (v8 == v7 && v9 == v6 && v10 == v4 && v22 == v5) {
      goto LABEL_37;
    }
    double v73 = *(double *)(a1 + 24);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    float v23 = swift_retain();
    int8x16_t v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      int8x16_t v25 = *(void *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    float v26 = swift_retain();
    BOOL v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      int8x16_t v25 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 48) == 1) {
    goto LABEL_11;
  }
  unint64_t v21 = *(void *)(a4 + 56);
  if (!v21) {
    return;
  }
  while (1)
  {
    unint64_t v39 = *(_OWORD *)(a1 + 16);
    __int32 v83 = *(float64x2_t *)a1;
    uint64_t v84 = v39;
    swift_retain();
    LOBYTE(v80) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v83, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v50 = *(double *)(v21 + 72);
      v75[0] = *(void *)(v21 + 80);
      id v51 = *(unsigned int *)(v21 + 120);
      uint64_t v52 = *(unsigned char *)(v21 + 124);
      uint64_t v53 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      id v54 = static CoreGlue.shared;
      LOBYTE(v78) = v52;
      v53(v75, v51 | ((unint64_t)v52 << 32), v50);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    id v40 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v41 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (*(void *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_52:
      swift_release();
      *(void *)(a4 + 56) = 0;
LABEL_53:
      uint64_t v55 = v84;
      *(float64x2_t *)a1 = v83;
      *(_OWORD *)(a1 + 16) = v55;
      *(unsigned char *)(a1 + 48) = 1;
      return;
    }
    uint64_t v72 = v15;
    swift_retain();
    int v42 = v41;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    id v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    uint64_t v15 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v15)
    {
      __break(1u);
    }
    else
    {
      int v45 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      unint64_t v47 = MEMORY[0x263F8DA20];
      *(void *)(v43 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v43 + 64) = v47;
      *(void *)(v43 + 32) = Counter;
      uint64_t v48 = AGGraphGetCurrentAttribute();
      if (v48 != v15)
      {
        int v49 = MEMORY[0x263F8E960];
        *(void *)(v43 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v43 + 104) = v49;
        *(_DWORD *)(v43 + 72) = v48;
        *(void *)(v43 + 136) = MEMORY[0x263F8D310];
        *(void *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v43 + 112) = 0x6D61724677656956;
        *(void *)(v43 + 120) = 0xE900000000000065;
        float32x4_t v79 = v40;
        unint64_t v77 = _signpostLog;
        float32x4_t v78 = &dword_245728000;
        __int32 v80 = "AnimationState";
        __int32 v81 = 14;
        __int32 v82 = 2;
        v75[0] = "Animation: (%p) [%d] %{public}@ ended";
        v75[1] = 37;
        unsigned __int8 v76 = 2;
        uint64_t v74 = v43;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (*(void *)(a4 + 56)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    int8x16_t v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    float v7 = v8 - v7;
    float v6 = v9 - v6;
    float v4 = v10 - v4;
    float v5 = v73 - v5;
    double v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 56)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v56 = swift_retain();
    uint64_t v57 = specialized AnimatorState.init(animation:interval:at:in:)(v56, v7, v6, v4, v5, v18);
    swift_retain();
    uint64_t v58 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    uint64_t v70 = v58;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int8x16_t v59 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      int v71 = v25;
      uint64_t v72 = v15;
      swift_retain();
      float32x4_t v60 = v59;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      float32x4_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_2461BE2B0;
      char v62 = AGGraphGetCurrentAttribute();
      uint64_t v69 = *MEMORY[0x263F288F8];
      if (v62 == v69) {
        goto LABEL_71;
      }
      int v63 = (id)AGGraphGetAttributeGraph();
      id v64 = AGGraphGetCounter();

      uint64_t v65 = MEMORY[0x263F8DA20];
      *(void *)(v61 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v61 + 64) = v65;
      *(void *)(v61 + 32) = v64;
      int v66 = AGGraphGetCurrentAttribute();
      if (v66 == v69) {
        goto LABEL_72;
      }
      int v67 = MEMORY[0x263F8E960];
      *(void *)(v61 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v61 + 104) = v67;
      *(_DWORD *)(v61 + 72) = v66;
      *(void *)(v61 + 136) = MEMORY[0x263F8D310];
      *(void *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v61 + 112) = 0x6D61724677656956;
      *(void *)(v61 + 120) = 0xE900000000000065;
      LOBYTE(v74) = v70;
      v75[0] = &dword_245728000;
      unint64_t v77 = v61;
      float32x4_t v78 = (int *)_signpostLog;
      *(void *)&v83.f64[0] = "AnimationState";
      *(void *)&v83.f64[1] = 14;
      LOBYTE(v84) = 2;
      __int32 v80 = "Animation: (%p) [%d] %{public}@ started";
      __int32 v81 = 39;
      __int32 v82 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      id v68 = v72;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
      uint64_t v15 = v68;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 56) = v57;
    if (v57)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    unint64_t v22 = v73;
LABEL_37:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(double *)(a4 + 32) = v10;
    *(double *)(a4 + 40) = v22;
    *(unsigned char *)(a4 + 48) = 0;
    unint64_t v21 = *(void *)(a4 + 56);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v83.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v7, v6, v4, v5, v18);
  swift_retain();
  BOOL v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v70 = v28;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  int v71 = v25;
  uint64_t v72 = v15;
  swift_retain();
  uint64_t v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2461BE2B0;
  uint64_t v32 = AGGraphGetCurrentAttribute();
  uint64_t v69 = *MEMORY[0x263F288F8];
  if (v32 != v69)
  {
    uint64_t v33 = (id)AGGraphGetAttributeGraph();
    char v34 = AGGraphGetCounter();

    float v35 = MEMORY[0x263F8DA20];
    *(void *)(v31 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v31 + 64) = v35;
    *(void *)(v31 + 32) = v34;
    float v36 = AGGraphGetCurrentAttribute();
    if (v36 == v69) {
      goto LABEL_70;
    }
    uint64_t v37 = MEMORY[0x263F8E960];
    *(void *)(v31 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v31 + 104) = v37;
    *(_DWORD *)(v31 + 72) = v36;
    *(void *)(v31 + 136) = MEMORY[0x263F8D310];
    *(void *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 112) = 0x6D61724677656956;
    *(void *)(v31 + 120) = 0xE900000000000065;
    LOBYTE(v74) = v70;
    v75[0] = &dword_245728000;
    unint64_t v77 = v31;
    float32x4_t v78 = (int *)_signpostLog;
    *(void *)&v83.f64[0] = "AnimationState";
    *(void *)&v83.f64[1] = 14;
    LOBYTE(v84) = 2;
    __int32 v80 = "Animation: (%p) [%d] %{public}@ updated";
    __int32 v81 = 39;
    __int32 v82 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    int v38 = v72;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
    uint64_t v15 = v38;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 56)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  char v40;
  void *v41;
  id v42;
  uint64_t v43;
  int CurrentAttribute;
  id v45;
  uint64_t Counter;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unsigned __int8 v53;
  void (*v54)(void *, unint64_t, double);
  void *v55;
  long long v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  id v61;
  uint64_t v62;
  int v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  void v76[2];
  char v77;
  uint64_t v78;
  int *v79;
  char v80;
  const char *v81;
  uint64_t v82;
  char v83;
  float64x2_t v84;
  long long v85;

  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 56))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 32) = 1;
LABEL_11:
    float v8 = *(double *)a1;
    float v9 = *(double *)(a1 + 8);
    float v10 = *(double *)(a1 + 16);
    unint64_t v22 = *(double *)(a1 + 24);
    if (*(unsigned char *)(a4 + 48)) {
      goto LABEL_37;
    }
    float v4 = *(double *)(a4 + 32);
    float v5 = *(double *)(a4 + 40);
    float v7 = *(double *)(a4 + 16);
    float v6 = *(double *)(a4 + 24);
    if (v8 == v7 && v9 == v6 && v10 == v4 && v22 == v5) {
      goto LABEL_37;
    }
    uint64_t v74 = *(double *)(a1 + 24);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    float v23 = swift_retain();
    int8x16_t v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      int8x16_t v25 = *(void *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    float v26 = swift_retain();
    BOOL v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      int8x16_t v25 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 32) == 1) {
    goto LABEL_11;
  }
  unint64_t v21 = *(void *)(a4 + 56);
  if (!v21) {
    return;
  }
  while (1)
  {
    unint64_t v39 = *(_OWORD *)(a1 + 16);
    uint64_t v84 = *(float64x2_t *)a1;
    __int32 v85 = v39;
    swift_retain();
    LOBYTE(v81) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v84, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v51 = *(double *)(v21 + 72);
      v76[0] = *(void *)(v21 + 80);
      uint64_t v52 = *(unsigned int *)(v21 + 120);
      uint64_t v53 = *(unsigned char *)(v21 + 124);
      id v54 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      uint64_t v55 = static CoreGlue.shared;
      LOBYTE(v79) = v53;
      v54(v76, v52 | ((unint64_t)v53 << 32), v51);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    id v40 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v41 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      uint64_t v50 = swift_release();
      if (*(void *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v50);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(void *)(a4 + 56) = 0;
LABEL_53:
      int v56 = v85;
      *(float64x2_t *)a1 = v84;
      *(_OWORD *)(a1 + 16) = v56;
      *(unsigned char *)(a1 + 32) = 1;
      return;
    }
    double v73 = v15;
    swift_retain();
    int v42 = v41;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    id v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    uint64_t v15 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v15)
    {
      __break(1u);
    }
    else
    {
      int v45 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      unint64_t v47 = MEMORY[0x263F8DA20];
      *(void *)(v43 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v43 + 64) = v47;
      *(void *)(v43 + 32) = Counter;
      uint64_t v48 = AGGraphGetCurrentAttribute();
      if (v48 != v15)
      {
        int v49 = MEMORY[0x263F8E960];
        *(void *)(v43 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v43 + 104) = v49;
        *(_DWORD *)(v43 + 72) = v48;
        *(void *)(v43 + 136) = MEMORY[0x263F8D310];
        *(void *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v43 + 112) = 0x65736E4965676445;
        *(void *)(v43 + 120) = 0xEA00000000007374;
        __int32 v80 = v40;
        float32x4_t v78 = _signpostLog;
        float32x4_t v79 = &dword_245728000;
        __int32 v81 = "AnimationState";
        __int32 v82 = 14;
        __int32 v83 = 2;
        v76[0] = "Animation: (%p) [%d] %{public}@ ended";
        v76[1] = 37;
        unint64_t v77 = 2;
        unsigned __int8 v75 = v43;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v73 + 8))(v17, v14);
        uint64_t v50 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 56)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    int8x16_t v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    float v7 = v8 - v7;
    float v6 = v9 - v6;
    float v4 = v10 - v4;
    float v5 = v74 - v5;
    double v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 56)) {
      break;
    }
    type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>();
    swift_allocObject();
    swift_retain();
    uint64_t v57 = swift_retain();
    uint64_t v58 = specialized AnimatorState.init(animation:interval:at:in:)(v57, v7, v6, v4, v5, v18);
    swift_retain();
    int8x16_t v59 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    int v71 = v59;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    float32x4_t v60 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v72 = v25;
      double v73 = v15;
      swift_retain();
      float32x4_t v61 = v60;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      char v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_2461BE2B0;
      int v63 = AGGraphGetCurrentAttribute();
      uint64_t v70 = *MEMORY[0x263F288F8];
      if (v63 == v70) {
        goto LABEL_71;
      }
      id v64 = (id)AGGraphGetAttributeGraph();
      uint64_t v65 = AGGraphGetCounter();

      int v66 = MEMORY[0x263F8DA20];
      *(void *)(v62 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v62 + 64) = v66;
      *(void *)(v62 + 32) = v65;
      int v67 = AGGraphGetCurrentAttribute();
      if (v67 == v70) {
        goto LABEL_72;
      }
      id v68 = MEMORY[0x263F8E960];
      *(void *)(v62 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v62 + 104) = v68;
      *(_DWORD *)(v62 + 72) = v67;
      *(void *)(v62 + 136) = MEMORY[0x263F8D310];
      *(void *)(v62 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v62 + 112) = 0x65736E4965676445;
      *(void *)(v62 + 120) = 0xEA00000000007374;
      LOBYTE(v75) = v71;
      v76[0] = &dword_245728000;
      float32x4_t v78 = v62;
      float32x4_t v79 = (int *)_signpostLog;
      *(void *)&v84.f64[0] = "AnimationState";
      *(void *)&v84.f64[1] = 14;
      LOBYTE(v85) = 2;
      __int32 v81 = "Animation: (%p) [%d] %{public}@ started";
      __int32 v82 = 39;
      __int32 v83 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v69 = v73;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v17, v14);
      uint64_t v15 = v69;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 56) = v58;
    if (v58)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    unint64_t v22 = v74;
LABEL_37:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(double *)(a4 + 32) = v10;
    *(double *)(a4 + 40) = v22;
    *(unsigned char *)(a4 + 48) = 0;
    unint64_t v21 = *(void *)(a4 + 56);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v84.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v7, v6, v4, v5, v18);
  swift_retain();
  BOOL v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  int v71 = v28;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  uint64_t v72 = v25;
  double v73 = v15;
  swift_retain();
  uint64_t v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2461BE2B0;
  uint64_t v32 = AGGraphGetCurrentAttribute();
  uint64_t v70 = *MEMORY[0x263F288F8];
  if (v32 != v70)
  {
    uint64_t v33 = (id)AGGraphGetAttributeGraph();
    char v34 = AGGraphGetCounter();

    float v35 = MEMORY[0x263F8DA20];
    *(void *)(v31 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v31 + 64) = v35;
    *(void *)(v31 + 32) = v34;
    float v36 = AGGraphGetCurrentAttribute();
    if (v36 == v70) {
      goto LABEL_70;
    }
    uint64_t v37 = MEMORY[0x263F8E960];
    *(void *)(v31 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v31 + 104) = v37;
    *(_DWORD *)(v31 + 72) = v36;
    *(void *)(v31 + 136) = MEMORY[0x263F8D310];
    *(void *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 112) = 0x65736E4965676445;
    *(void *)(v31 + 120) = 0xEA00000000007374;
    LOBYTE(v75) = v71;
    v76[0] = &dword_245728000;
    float32x4_t v78 = v31;
    float32x4_t v79 = (int *)_signpostLog;
    *(void *)&v84.f64[0] = "AnimationState";
    *(void *)&v84.f64[1] = 14;
    LOBYTE(v85) = 2;
    __int32 v81 = "Animation: (%p) [%d] %{public}@ updated";
    __int32 v82 = 39;
    __int32 v83 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    int v38 = v73;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v17, v14);
    uint64_t v15 = v38;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 56)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  id v35;
  uint64_t v36;
  int CurrentAttribute;
  id v38;
  uint64_t Counter;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  void (*v47)(const char **, unint64_t, double);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void *v52;
  id v53;
  uint64_t v54;
  int v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  int *v72;
  char v73;
  const char *v74;
  uint64_t v75;
  char v76;
  int *v77;

  float v9 = type metadata accessor for OSSignpostID();
  float v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  int v13 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v15) {
      int v13 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 9) = 1;
LABEL_11:
    float v5 = *(double *)a1;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    float v4 = *(double *)(a4 + 16);
    if (v5 == v4) {
      goto LABEL_34;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    int64_t v17 = swift_retain();
    double v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    char v20 = swift_retain();
    unint64_t v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      uint64_t v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 9) == 1) {
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a4 + 32);
  if (!v16) {
    return;
  }
  while (1)
  {
    unint64_t v77 = *(int **)a1;
    swift_retain();
    LOBYTE(v74) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v77, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v44 = *(double *)(v16 + 48);
      id v68 = *(const char **)(v16 + 56);
      int v45 = *(unsigned int *)(v16 + 72);
      uint64_t v46 = *(unsigned char *)(v16 + 76);
      unint64_t v47 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      uint64_t v48 = static CoreGlue.shared;
      LOBYTE(v72) = v46;
      v47(&v68, v45 | ((unint64_t)v46 << 32), v44);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    uint64_t v33 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    char v34 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      id v43 = swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v43);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(void *)a1 = v77;
      *(unsigned char *)(a1 + 9) = 1;
      return;
    }
    int v66 = v10;
    swift_retain();
    float v35 = v34;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    float v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    float v10 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v10)
    {
      __break(1u);
    }
    else
    {
      int v38 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      id v40 = MEMORY[0x263F8DA20];
      *(void *)(v36 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v36 + 64) = v40;
      *(void *)(v36 + 32) = Counter;
      uint64_t v41 = AGGraphGetCurrentAttribute();
      if (v41 != v10)
      {
        int v42 = MEMORY[0x263F8E960];
        *(void *)(v36 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v36 + 104) = v42;
        *(_DWORD *)(v36 + 72) = v41;
        *(void *)(v36 + 136) = MEMORY[0x263F8D310];
        *(void *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v36 + 112) = 0x66664572756C425FLL;
        *(void *)(v36 + 120) = 0xEB00000000746365;
        double v73 = v33;
        int v71 = _signpostLog;
        uint64_t v72 = &dword_245728000;
        uint64_t v74 = "AnimationState";
        unsigned __int8 v75 = 14;
        unsigned __int8 v76 = 2;
        id v68 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v69 = 37;
        uint64_t v70 = 2;
        int v67 = v36;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
        id v43 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    float v4 = v5 - v4;
    int v13 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v49 = swift_retain();
    uint64_t v50 = specialized AnimatorState.init(animation:interval:at:in:)(v49, v4, v13);
    swift_retain();
    id v51 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    id v64 = v51;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v52 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v65 = v19;
      int v66 = v10;
      swift_retain();
      uint64_t v53 = v52;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      id v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_2461BE2B0;
      uint64_t v55 = AGGraphGetCurrentAttribute();
      int v63 = *MEMORY[0x263F288F8];
      if (v55 == v63) {
        goto LABEL_68;
      }
      int v56 = (id)AGGraphGetAttributeGraph();
      uint64_t v57 = AGGraphGetCounter();

      uint64_t v58 = MEMORY[0x263F8DA20];
      *(void *)(v54 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v54 + 64) = v58;
      *(void *)(v54 + 32) = v57;
      int8x16_t v59 = AGGraphGetCurrentAttribute();
      if (v59 == v63) {
        goto LABEL_69;
      }
      float32x4_t v60 = MEMORY[0x263F8E960];
      *(void *)(v54 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v54 + 104) = v60;
      *(_DWORD *)(v54 + 72) = v59;
      *(void *)(v54 + 136) = MEMORY[0x263F8D310];
      *(void *)(v54 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v54 + 112) = 0x66664572756C425FLL;
      *(void *)(v54 + 120) = 0xEB00000000746365;
      LOBYTE(v67) = v64;
      unint64_t v77 = &dword_245728000;
      int v71 = v54;
      uint64_t v72 = (int *)_signpostLog;
      uint64_t v74 = "AnimationState";
      unsigned __int8 v75 = 14;
      unsigned __int8 v76 = 2;
      id v68 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v69 = 39;
      uint64_t v70 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      float32x4_t v61 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
      float v10 = v61;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v50;
    if (v50)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v16 = *(void *)(a4 + 32);
    if (!v16) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v74) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain();
  unint64_t v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  id v64 = v22;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  float v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  uint64_t v65 = v19;
  int v66 = v10;
  swift_retain();
  int8x16_t v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  int8x16_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_2461BE2B0;
  float v26 = AGGraphGetCurrentAttribute();
  int v63 = *MEMORY[0x263F288F8];
  if (v26 != v63)
  {
    BOOL v27 = (id)AGGraphGetAttributeGraph();
    BOOL v28 = AGGraphGetCounter();

    uint64_t v29 = MEMORY[0x263F8DA20];
    *(void *)(v25 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v25 + 64) = v29;
    *(void *)(v25 + 32) = v28;
    uint64_t v30 = AGGraphGetCurrentAttribute();
    if (v30 == v63) {
      goto LABEL_67;
    }
    uint64_t v31 = MEMORY[0x263F8E960];
    *(void *)(v25 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v25 + 104) = v31;
    *(_DWORD *)(v25 + 72) = v30;
    *(void *)(v25 + 136) = MEMORY[0x263F8D310];
    *(void *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v25 + 112) = 0x66664572756C425FLL;
    *(void *)(v25 + 120) = 0xEB00000000746365;
    LOBYTE(v67) = v64;
    unint64_t v77 = &dword_245728000;
    int v71 = v25;
    uint64_t v72 = (int *)_signpostLog;
    uint64_t v74 = "AnimationState";
    unsigned __int8 v75 = 14;
    unsigned __int8 v76 = 2;
    id v68 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v69 = 39;
    uint64_t v70 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v32 = v66;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
    float v10 = v32;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  id v35;
  uint64_t v36;
  int CurrentAttribute;
  id v38;
  uint64_t Counter;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  void (*v47)(const char **, unint64_t, double);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void *v52;
  id v53;
  uint64_t v54;
  int v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  int *v72;
  char v73;
  const char *v74;
  uint64_t v75;
  char v76;
  int *v77;

  float v9 = type metadata accessor for OSSignpostID();
  float v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  int v13 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v15) {
      int v13 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 116) = 1;
LABEL_11:
    float v5 = *(double *)a1;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    float v4 = *(double *)(a4 + 16);
    if (v5 == v4) {
      goto LABEL_34;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    int64_t v17 = swift_retain();
    double v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    char v20 = swift_retain();
    unint64_t v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      uint64_t v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 116) == 1) {
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a4 + 32);
  if (!v16) {
    return;
  }
  while (1)
  {
    unint64_t v77 = *(int **)a1;
    swift_retain();
    LOBYTE(v74) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v77, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v44 = *(double *)(v16 + 48);
      id v68 = *(const char **)(v16 + 56);
      int v45 = *(unsigned int *)(v16 + 72);
      uint64_t v46 = *(unsigned char *)(v16 + 76);
      unint64_t v47 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      uint64_t v48 = static CoreGlue.shared;
      LOBYTE(v72) = v46;
      v47(&v68, v45 | ((unint64_t)v46 << 32), v44);
      swift_release();

      goto LABEL_50;
    }
    swift_retain_n();
    uint64_t v33 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    char v34 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      id v43 = swift_release_n();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v43);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(void *)a1 = v77;
      *(unsigned char *)(a1 + 116) = 1;
      return;
    }
    int v66 = v10;
    swift_retain();
    float v35 = v34;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    float v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    float v10 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v10)
    {
      __break(1u);
    }
    else
    {
      int v38 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      id v40 = MEMORY[0x263F8DA20];
      *(void *)(v36 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v36 + 64) = v40;
      *(void *)(v36 + 32) = Counter;
      uint64_t v41 = AGGraphGetCurrentAttribute();
      if (v41 != v10)
      {
        int v42 = MEMORY[0x263F8E960];
        *(void *)(v36 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v36 + 104) = v42;
        *(_DWORD *)(v36 + 72) = v41;
        *(void *)(v36 + 136) = MEMORY[0x263F8D310];
        *(void *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v36 + 112) = 0xD000000000000011;
        *(void *)(v36 + 120) = 0x8000000246222CA0;
        double v73 = v33;
        int v71 = _signpostLog;
        uint64_t v72 = &dword_245728000;
        uint64_t v74 = "AnimationState";
        unsigned __int8 v75 = 14;
        unsigned __int8 v76 = 2;
        id v68 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v69 = 37;
        uint64_t v70 = 2;
        int v67 = v36;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
        id v43 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    float v4 = v5 - v4;
    int v13 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v49 = swift_retain();
    uint64_t v50 = specialized AnimatorState.init(animation:interval:at:in:)(v49, v4, v13);
    swift_retain();
    id v51 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    id v64 = v51;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v52 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v65 = v19;
      int v66 = v10;
      swift_retain();
      uint64_t v53 = v52;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      id v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_2461BE2B0;
      uint64_t v55 = AGGraphGetCurrentAttribute();
      int v63 = *MEMORY[0x263F288F8];
      if (v55 == v63) {
        goto LABEL_68;
      }
      int v56 = (id)AGGraphGetAttributeGraph();
      uint64_t v57 = AGGraphGetCounter();

      uint64_t v58 = MEMORY[0x263F8DA20];
      *(void *)(v54 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v54 + 64) = v58;
      *(void *)(v54 + 32) = v57;
      int8x16_t v59 = AGGraphGetCurrentAttribute();
      if (v59 == v63) {
        goto LABEL_69;
      }
      float32x4_t v60 = MEMORY[0x263F8E960];
      *(void *)(v54 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v54 + 104) = v60;
      *(_DWORD *)(v54 + 72) = v59;
      *(void *)(v54 + 136) = MEMORY[0x263F8D310];
      *(void *)(v54 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v54 + 112) = 0xD000000000000011;
      *(void *)(v54 + 120) = 0x8000000246222CA0;
      LOBYTE(v67) = v64;
      unint64_t v77 = &dword_245728000;
      int v71 = v54;
      uint64_t v72 = (int *)_signpostLog;
      uint64_t v74 = "AnimationState";
      unsigned __int8 v75 = 14;
      unsigned __int8 v76 = 2;
      id v68 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v69 = 39;
      uint64_t v70 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      float32x4_t v61 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
      float v10 = v61;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v50;
    if (v50)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v16 = *(void *)(a4 + 32);
    if (!v16) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v74) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain_n();
  unint64_t v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  id v64 = v22;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  float v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  uint64_t v65 = v19;
  int v66 = v10;
  swift_retain();
  int8x16_t v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  int8x16_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_2461BE2B0;
  float v26 = AGGraphGetCurrentAttribute();
  int v63 = *MEMORY[0x263F288F8];
  if (v26 != v63)
  {
    BOOL v27 = (id)AGGraphGetAttributeGraph();
    BOOL v28 = AGGraphGetCounter();

    uint64_t v29 = MEMORY[0x263F8DA20];
    *(void *)(v25 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v25 + 64) = v29;
    *(void *)(v25 + 32) = v28;
    uint64_t v30 = AGGraphGetCurrentAttribute();
    if (v30 == v63) {
      goto LABEL_67;
    }
    uint64_t v31 = MEMORY[0x263F8E960];
    *(void *)(v25 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v25 + 104) = v31;
    *(_DWORD *)(v25 + 72) = v30;
    *(void *)(v25 + 136) = MEMORY[0x263F8D310];
    *(void *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v25 + 112) = 0xD000000000000011;
    *(void *)(v25 + 120) = 0x8000000246222CA0;
    LOBYTE(v67) = v64;
    unint64_t v77 = &dword_245728000;
    int v71 = v25;
    uint64_t v72 = (int *)_signpostLog;
    uint64_t v74 = "AnimationState";
    unsigned __int8 v75 = 14;
    unsigned __int8 v76 = 2;
    id v68 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v69 = 39;
    uint64_t v70 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v32 = v66;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
    float v10 = v32;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  char v40;
  void *v41;
  id v42;
  uint64_t v43;
  int CurrentAttribute;
  id v45;
  uint64_t Counter;
  uint64_t v47;
  int v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  unsigned __int8 v52;
  void (*v53)(void *, unint64_t, double);
  void *v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  id v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  void v75[2];
  char v76;
  uint64_t v77;
  int *v78;
  char v79;
  const char *v80;
  uint64_t v81;
  char v82;
  float64x2_t v83;
  long long v84;

  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 56))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 33) = 1;
LABEL_11:
    float v8 = *(double *)a1;
    float v9 = *(double *)(a1 + 8);
    float v10 = *(double *)(a1 + 16);
    unint64_t v22 = *(double *)(a1 + 24);
    if (*(unsigned char *)(a4 + 48)) {
      goto LABEL_37;
    }
    float v4 = *(double *)(a4 + 32);
    float v5 = *(double *)(a4 + 40);
    float v7 = *(double *)(a4 + 16);
    float v6 = *(double *)(a4 + 24);
    if (v8 == v7 && v9 == v6 && v10 == v4 && v22 == v5) {
      goto LABEL_37;
    }
    double v73 = *(double *)(a1 + 24);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    float v23 = swift_retain();
    int8x16_t v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      int8x16_t v25 = *(void *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    float v26 = swift_retain();
    BOOL v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      int8x16_t v25 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 33) == 1) {
    goto LABEL_11;
  }
  unint64_t v21 = *(void *)(a4 + 56);
  if (!v21) {
    return;
  }
  while (1)
  {
    unint64_t v39 = *(_OWORD *)(a1 + 16);
    __int32 v83 = *(float64x2_t *)a1;
    uint64_t v84 = v39;
    swift_retain();
    LOBYTE(v80) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v83, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v50 = *(double *)(v21 + 72);
      v75[0] = *(void *)(v21 + 80);
      id v51 = *(unsigned int *)(v21 + 120);
      uint64_t v52 = *(unsigned char *)(v21 + 124);
      uint64_t v53 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      id v54 = static CoreGlue.shared;
      LOBYTE(v78) = v52;
      v53(v75, v51 | ((unint64_t)v52 << 32), v50);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    id v40 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v41 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (*(void *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_52:
      swift_release();
      *(void *)(a4 + 56) = 0;
LABEL_53:
      uint64_t v55 = v84;
      *(float64x2_t *)a1 = v83;
      *(_OWORD *)(a1 + 16) = v55;
      *(unsigned char *)(a1 + 33) = 1;
      return;
    }
    uint64_t v72 = v15;
    swift_retain();
    int v42 = v41;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    id v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    uint64_t v15 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v15)
    {
      __break(1u);
    }
    else
    {
      int v45 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      unint64_t v47 = MEMORY[0x263F8DA20];
      *(void *)(v43 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v43 + 64) = v47;
      *(void *)(v43 + 32) = Counter;
      uint64_t v48 = AGGraphGetCurrentAttribute();
      if (v48 != v15)
      {
        int v49 = MEMORY[0x263F8E960];
        *(void *)(v43 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v43 + 104) = v49;
        *(_DWORD *)(v43 + 72) = v48;
        *(void *)(v43 + 136) = MEMORY[0x263F8D310];
        *(void *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v43 + 112) = 0xD000000000000016;
        *(void *)(v43 + 120) = 0x800000024621FE40;
        float32x4_t v79 = v40;
        unint64_t v77 = _signpostLog;
        float32x4_t v78 = &dword_245728000;
        __int32 v80 = "AnimationState";
        __int32 v81 = 14;
        __int32 v82 = 2;
        v75[0] = "Animation: (%p) [%d] %{public}@ ended";
        v75[1] = 37;
        unsigned __int8 v76 = 2;
        uint64_t v74 = v43;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (*(void *)(a4 + 56)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    int8x16_t v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    float v7 = v8 - v7;
    float v6 = v9 - v6;
    float v4 = v10 - v4;
    float v5 = v73 - v5;
    double v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 56)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v56 = swift_retain();
    uint64_t v57 = specialized AnimatorState.init(animation:interval:at:in:)(v56, v7, v6, v4, v5, v18);
    swift_retain();
    uint64_t v58 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    uint64_t v70 = v58;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int8x16_t v59 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      int v71 = v25;
      uint64_t v72 = v15;
      swift_retain();
      float32x4_t v60 = v59;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      float32x4_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_2461BE2B0;
      char v62 = AGGraphGetCurrentAttribute();
      uint64_t v69 = *MEMORY[0x263F288F8];
      if (v62 == v69) {
        goto LABEL_71;
      }
      int v63 = (id)AGGraphGetAttributeGraph();
      id v64 = AGGraphGetCounter();

      uint64_t v65 = MEMORY[0x263F8DA20];
      *(void *)(v61 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v61 + 64) = v65;
      *(void *)(v61 + 32) = v64;
      int v66 = AGGraphGetCurrentAttribute();
      if (v66 == v69) {
        goto LABEL_72;
      }
      int v67 = MEMORY[0x263F8E960];
      *(void *)(v61 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v61 + 104) = v67;
      *(_DWORD *)(v61 + 72) = v66;
      *(void *)(v61 + 136) = MEMORY[0x263F8D310];
      *(void *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v61 + 112) = 0xD000000000000016;
      *(void *)(v61 + 120) = 0x800000024621FE40;
      LOBYTE(v74) = v70;
      v75[0] = &dword_245728000;
      unint64_t v77 = v61;
      float32x4_t v78 = (int *)_signpostLog;
      *(void *)&v83.f64[0] = "AnimationState";
      *(void *)&v83.f64[1] = 14;
      LOBYTE(v84) = 2;
      __int32 v80 = "Animation: (%p) [%d] %{public}@ started";
      __int32 v81 = 39;
      __int32 v82 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      id v68 = v72;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
      uint64_t v15 = v68;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 56) = v57;
    if (v57)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    unint64_t v22 = v73;
LABEL_37:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(double *)(a4 + 32) = v10;
    *(double *)(a4 + 40) = v22;
    *(unsigned char *)(a4 + 48) = 0;
    unint64_t v21 = *(void *)(a4 + 56);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v83.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v7, v6, v4, v5, v18);
  swift_retain();
  BOOL v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v70 = v28;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  int v71 = v25;
  uint64_t v72 = v15;
  swift_retain();
  uint64_t v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2461BE2B0;
  uint64_t v32 = AGGraphGetCurrentAttribute();
  uint64_t v69 = *MEMORY[0x263F288F8];
  if (v32 != v69)
  {
    uint64_t v33 = (id)AGGraphGetAttributeGraph();
    char v34 = AGGraphGetCounter();

    float v35 = MEMORY[0x263F8DA20];
    *(void *)(v31 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v31 + 64) = v35;
    *(void *)(v31 + 32) = v34;
    float v36 = AGGraphGetCurrentAttribute();
    if (v36 == v69) {
      goto LABEL_70;
    }
    uint64_t v37 = MEMORY[0x263F8E960];
    *(void *)(v31 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v31 + 104) = v37;
    *(_DWORD *)(v31 + 72) = v36;
    *(void *)(v31 + 136) = MEMORY[0x263F8D310];
    *(void *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 112) = 0xD000000000000016;
    *(void *)(v31 + 120) = 0x800000024621FE40;
    LOBYTE(v74) = v70;
    v75[0] = &dword_245728000;
    unint64_t v77 = v31;
    float32x4_t v78 = (int *)_signpostLog;
    *(void *)&v83.f64[0] = "AnimationState";
    *(void *)&v83.f64[1] = 14;
    LOBYTE(v84) = 2;
    __int32 v80 = "Animation: (%p) [%d] %{public}@ updated";
    __int32 v81 = 39;
    __int32 v82 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    int v38 = v72;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
    uint64_t v15 = v38;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 56)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  id v35;
  uint64_t v36;
  int CurrentAttribute;
  id v38;
  uint64_t Counter;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  void (*v47)(const char **, unint64_t, double);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void *v52;
  id v53;
  uint64_t v54;
  int v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  int *v72;
  char v73;
  const char *v74;
  uint64_t v75;
  char v76;
  int *v77;

  float v9 = type metadata accessor for OSSignpostID();
  float v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  int v13 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v15) {
      int v13 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 16) = 1;
LABEL_11:
    float v5 = *(double *)a1;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    float v4 = *(double *)(a4 + 16);
    if (v5 == v4) {
      goto LABEL_34;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    int64_t v17 = swift_retain();
    double v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    char v20 = swift_retain();
    unint64_t v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      uint64_t v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 16) == 1) {
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a4 + 32);
  if (!v16) {
    return;
  }
  while (1)
  {
    unint64_t v77 = *(int **)a1;
    swift_retain();
    LOBYTE(v74) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v77, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v44 = *(double *)(v16 + 48);
      id v68 = *(const char **)(v16 + 56);
      int v45 = *(unsigned int *)(v16 + 72);
      uint64_t v46 = *(unsigned char *)(v16 + 76);
      unint64_t v47 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      uint64_t v48 = static CoreGlue.shared;
      LOBYTE(v72) = v46;
      v47(&v68, v45 | ((unint64_t)v46 << 32), v44);
      swift_release();

      goto LABEL_50;
    }
    swift_retain_n();
    uint64_t v33 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    char v34 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      id v43 = swift_release_n();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v43);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(void *)a1 = v77;
      *(unsigned char *)(a1 + 16) = 1;
      return;
    }
    int v66 = v10;
    swift_retain();
    float v35 = v34;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    float v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    float v10 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v10)
    {
      __break(1u);
    }
    else
    {
      int v38 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      id v40 = MEMORY[0x263F8DA20];
      *(void *)(v36 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v36 + 64) = v40;
      *(void *)(v36 + 32) = Counter;
      uint64_t v41 = AGGraphGetCurrentAttribute();
      if (v41 != v10)
      {
        int v42 = MEMORY[0x263F8E960];
        *(void *)(v36 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v36 + 104) = v42;
        *(_DWORD *)(v36 + 72) = v41;
        *(void *)(v36 + 136) = MEMORY[0x263F8D310];
        *(void *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v36 + 112) = 0xD000000000000034;
        *(void *)(v36 + 120) = 0x800000024621FD80;
        double v73 = v33;
        int v71 = _signpostLog;
        uint64_t v72 = &dword_245728000;
        uint64_t v74 = "AnimationState";
        unsigned __int8 v75 = 14;
        unsigned __int8 v76 = 2;
        id v68 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v69 = 37;
        uint64_t v70 = 2;
        int v67 = v36;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
        id v43 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    float v4 = v5 - v4;
    int v13 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<Double>(0, &lazy cache variable for type metadata for AnimatorState<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v49 = swift_retain();
    uint64_t v50 = specialized AnimatorState.init(animation:interval:at:in:)(v49, v4, v13);
    swift_retain();
    id v51 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    id v64 = v51;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v52 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v65 = v19;
      int v66 = v10;
      swift_retain();
      uint64_t v53 = v52;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      id v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_2461BE2B0;
      uint64_t v55 = AGGraphGetCurrentAttribute();
      int v63 = *MEMORY[0x263F288F8];
      if (v55 == v63) {
        goto LABEL_68;
      }
      int v56 = (id)AGGraphGetAttributeGraph();
      uint64_t v57 = AGGraphGetCounter();

      uint64_t v58 = MEMORY[0x263F8DA20];
      *(void *)(v54 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v54 + 64) = v58;
      *(void *)(v54 + 32) = v57;
      int8x16_t v59 = AGGraphGetCurrentAttribute();
      if (v59 == v63) {
        goto LABEL_69;
      }
      float32x4_t v60 = MEMORY[0x263F8E960];
      *(void *)(v54 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v54 + 104) = v60;
      *(_DWORD *)(v54 + 72) = v59;
      *(void *)(v54 + 136) = MEMORY[0x263F8D310];
      *(void *)(v54 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v54 + 112) = 0xD000000000000034;
      *(void *)(v54 + 120) = 0x800000024621FD80;
      LOBYTE(v67) = v64;
      unint64_t v77 = &dword_245728000;
      int v71 = v54;
      uint64_t v72 = (int *)_signpostLog;
      uint64_t v74 = "AnimationState";
      unsigned __int8 v75 = 14;
      unsigned __int8 v76 = 2;
      id v68 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v69 = 39;
      uint64_t v70 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      float32x4_t v61 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
      float v10 = v61;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v50;
    if (v50)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v16 = *(void *)(a4 + 32);
    if (!v16) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v74) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain_n();
  unint64_t v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  id v64 = v22;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  float v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  uint64_t v65 = v19;
  int v66 = v10;
  swift_retain();
  int8x16_t v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  int8x16_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_2461BE2B0;
  float v26 = AGGraphGetCurrentAttribute();
  int v63 = *MEMORY[0x263F288F8];
  if (v26 != v63)
  {
    BOOL v27 = (id)AGGraphGetAttributeGraph();
    BOOL v28 = AGGraphGetCounter();

    uint64_t v29 = MEMORY[0x263F8DA20];
    *(void *)(v25 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v25 + 64) = v29;
    *(void *)(v25 + 32) = v28;
    uint64_t v30 = AGGraphGetCurrentAttribute();
    if (v30 == v63) {
      goto LABEL_67;
    }
    uint64_t v31 = MEMORY[0x263F8E960];
    *(void *)(v25 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v25 + 104) = v31;
    *(_DWORD *)(v25 + 72) = v30;
    *(void *)(v25 + 136) = MEMORY[0x263F8D310];
    *(void *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v25 + 112) = 0xD000000000000034;
    *(void *)(v25 + 120) = 0x800000024621FD80;
    LOBYTE(v67) = v64;
    unint64_t v77 = &dword_245728000;
    int v71 = v25;
    uint64_t v72 = (int *)_signpostLog;
    uint64_t v74 = "AnimationState";
    unsigned __int8 v75 = 14;
    unsigned __int8 v76 = 2;
    id v68 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v69 = 39;
    uint64_t v70 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v32 = v66;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
    float v10 = v32;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  double *Value;
  char v18;
  uint64_t v19;
  float64x2_t v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  char v40;
  void *v41;
  id v42;
  uint64_t v43;
  int CurrentAttribute;
  id v45;
  uint64_t Counter;
  uint64_t v47;
  int v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  unsigned __int8 v52;
  void (*v53)(void *, unint64_t, double);
  void *v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  id v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  float64x2_t v74;
  uint64_t v75;
  void v76[2];
  char v77;
  uint64_t v78;
  int *v79;
  char v80;
  const char *v81;
  uint64_t v82;
  char v83;
  float64x2_t v84;
  double v85;

  uint64_t v12 = type metadata accessor for OSSignpostID();
  int v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  uint64_t v16 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 48))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v18) {
      uint64_t v16 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 56) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 24) = 1;
LABEL_11:
    char v20 = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    float v7 = *(double *)(a1 + 16) * 128.0;
    if (*(unsigned char *)(a4 + 40)) {
      goto LABEL_40;
    }
    float v5 = *(double *)(a4 + 24);
    float v4 = *(double *)(a4 + 32);
    float v6 = *(double *)(a4 + 16);
    float v8 = v20.f64[1];
    unint64_t v21 = v20.f64[0] == v6 && v20.f64[1] == v5;
    if (v21 && v7 == v4) {
      goto LABEL_40;
    }
    uint64_t v74 = v20;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    float v23 = swift_retain();
    int8x16_t v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      int8x16_t v25 = *(void *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25) {
        goto LABEL_28;
      }
    }
    else
    {
      swift_release();
    }
    float v26 = swift_retain();
    BOOL v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_39;
      }
      swift_retain();
      int8x16_t v25 = a2;
      goto LABEL_28;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_71;
    }
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 24) == 1) {
    goto LABEL_11;
  }
  uint64_t v19 = *(void *)(a4 + 48);
  if (!v19) {
    return;
  }
  while (1)
  {
    unint64_t v39 = *(double *)(a1 + 16) * 128.0;
    uint64_t v84 = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    __int32 v85 = v39;
    swift_retain();
    LOBYTE(v81) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v84, v16) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v50 = *(double *)(v19 + 64);
      v76[0] = *(void *)(v19 + 72);
      id v51 = *(unsigned int *)(v19 + 104);
      uint64_t v52 = *(unsigned char *)(v19 + 108);
      uint64_t v53 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      id v54 = static CoreGlue.shared;
      LOBYTE(v79) = v52;
      v53(v76, v51 | ((unint64_t)v52 << 32), v50);
      swift_release();

      goto LABEL_56;
    }
    swift_retain_n();
    id v40 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_53;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v41 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_53:
      swift_release_n();
      if (*(void *)(a4 + 48))
      {
LABEL_54:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_55:
      swift_release();
      *(void *)(a4 + 48) = 0;
LABEL_56:
      uint64_t v55 = v85 * 0.0078125;
      *(float64x2_t *)a1 = vmulq_f64(v84, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
      *(double *)(a1 + 16) = v55;
      *(unsigned char *)(a1 + 24) = 1;
      return;
    }
    double v73 = v13;
    swift_retain();
    int v42 = v41;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    id v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    int v13 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v13)
    {
      __break(1u);
    }
    else
    {
      int v45 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      unint64_t v47 = MEMORY[0x263F8DA20];
      *(void *)(v43 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v43 + 64) = v47;
      *(void *)(v43 + 32) = Counter;
      uint64_t v48 = AGGraphGetCurrentAttribute();
      if (v48 != v13)
      {
        int v49 = MEMORY[0x263F8E960];
        *(void *)(v43 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v43 + 104) = v49;
        *(_DWORD *)(v43 + 72) = v48;
        *(void *)(v43 + 136) = MEMORY[0x263F8D310];
        *(void *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v43 + 112) = 0x6F697461746F525FLL;
        *(void *)(v43 + 120) = 0xEF7463656666456ELL;
        __int32 v80 = v40;
        float32x4_t v78 = _signpostLog;
        float32x4_t v79 = &dword_245728000;
        __int32 v81 = "AnimationState";
        __int32 v82 = 14;
        __int32 v83 = 2;
        v76[0] = "Animation: (%p) [%d] %{public}@ ended";
        v76[1] = 37;
        unint64_t v77 = 2;
        unsigned __int8 v75 = v43;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v73 + 8))(v15, v12);
        swift_bridgeObjectRelease();
        if (*(void *)(a4 + 48)) {
          goto LABEL_54;
        }
        goto LABEL_55;
      }
    }
    __break(1u);
LABEL_71:
    swift_once();
LABEL_25:
    int8x16_t v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_28:
    float v6 = v74.f64[0] - v6;
    float v5 = v8 - v5;
    float v4 = v7 - v4;
    uint64_t v16 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 48)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v56 = swift_retain();
    uint64_t v57 = specialized AnimatorState.init(animation:interval:at:in:)(v56, v6, v5, v4, v16);
    swift_retain();
    uint64_t v58 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_65;
    }
    int v71 = v58;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int8x16_t v59 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v72 = v25;
      double v73 = v13;
      swift_retain();
      float32x4_t v60 = v59;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      float32x4_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_2461BE2B0;
      char v62 = AGGraphGetCurrentAttribute();
      uint64_t v70 = *MEMORY[0x263F288F8];
      if (v62 == v70) {
        goto LABEL_74;
      }
      int v63 = (id)AGGraphGetAttributeGraph();
      id v64 = AGGraphGetCounter();

      uint64_t v65 = MEMORY[0x263F8DA20];
      *(void *)(v61 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v61 + 64) = v65;
      *(void *)(v61 + 32) = v64;
      int v66 = AGGraphGetCurrentAttribute();
      if (v66 == v70) {
        goto LABEL_75;
      }
      int v67 = MEMORY[0x263F8E960];
      *(void *)(v61 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v61 + 104) = v67;
      *(_DWORD *)(v61 + 72) = v66;
      *(void *)(v61 + 136) = MEMORY[0x263F8D310];
      *(void *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v61 + 112) = 0x6F697461746F525FLL;
      *(void *)(v61 + 120) = 0xEF7463656666456ELL;
      LOBYTE(v75) = v71;
      v76[0] = &dword_245728000;
      float32x4_t v78 = v61;
      float32x4_t v79 = (int *)_signpostLog;
      *(void *)&v84.f64[0] = "AnimationState";
      *(void *)&v84.f64[1] = 14;
      LOBYTE(v85) = 2;
      __int32 v81 = "Animation: (%p) [%d] %{public}@ started";
      __int32 v82 = 39;
      __int32 v83 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      id v68 = v73;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v15, v12);
      int v13 = v68;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_65:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 48) = v57;
    if (v57)
    {
LABEL_38:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_39;
    }
LABEL_67:
    __break(1u);
LABEL_39:
    swift_release();
    char v20 = v74;
LABEL_40:
    *(float64x2_t *)(a4 + 16) = v20;
    *(double *)(a4 + 32) = v7;
    *(unsigned char *)(a4 + 40) = 0;
    uint64_t v19 = *(void *)(a4 + 48);
    if (!v19) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v84.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v6, v5, v4, v16);
  swift_retain_n();
  BOOL v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_36;
  }
  int v71 = v28;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_36:
    swift_release_n();
    goto LABEL_37;
  }
  uint64_t v72 = v25;
  double v73 = v13;
  swift_retain();
  uint64_t v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2461BE2B0;
  uint64_t v32 = AGGraphGetCurrentAttribute();
  uint64_t v70 = *MEMORY[0x263F288F8];
  if (v32 != v70)
  {
    uint64_t v33 = (id)AGGraphGetAttributeGraph();
    char v34 = AGGraphGetCounter();

    float v35 = MEMORY[0x263F8DA20];
    *(void *)(v31 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v31 + 64) = v35;
    *(void *)(v31 + 32) = v34;
    float v36 = AGGraphGetCurrentAttribute();
    if (v36 == v70) {
      goto LABEL_73;
    }
    uint64_t v37 = MEMORY[0x263F8E960];
    *(void *)(v31 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v31 + 104) = v37;
    *(_DWORD *)(v31 + 72) = v36;
    *(void *)(v31 + 136) = MEMORY[0x263F8D310];
    *(void *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 112) = 0x6F697461746F525FLL;
    *(void *)(v31 + 120) = 0xEF7463656666456ELL;
    LOBYTE(v75) = v71;
    v76[0] = &dword_245728000;
    float32x4_t v78 = v31;
    float32x4_t v79 = (int *)_signpostLog;
    *(void *)&v84.f64[0] = "AnimationState";
    *(void *)&v84.f64[1] = 14;
    LOBYTE(v85) = 2;
    __int32 v81 = "Animation: (%p) [%d] %{public}@ updated";
    __int32 v82 = 39;
    __int32 v83 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    int v38 = v73;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v15, v12);
    int v13 = v38;
    swift_bridgeObjectRelease();
LABEL_37:
    if (*(void *)(a4 + 48)) {
      goto LABEL_38;
    }
    goto LABEL_67;
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  id v35;
  uint64_t v36;
  int CurrentAttribute;
  id v38;
  uint64_t Counter;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  void (*v47)(const char **, unint64_t, double);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void *v52;
  id v53;
  uint64_t v54;
  int v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  int *v72;
  char v73;
  const char *v74;
  uint64_t v75;
  char v76;
  int *v77;

  float v9 = type metadata accessor for OSSignpostID();
  float v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  int v13 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v15) {
      int v13 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 8) = 1;
LABEL_11:
    float v5 = *(double *)a1;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    float v4 = *(double *)(a4 + 16);
    if (v5 == v4) {
      goto LABEL_34;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    int64_t v17 = swift_retain();
    double v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    char v20 = swift_retain();
    unint64_t v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      uint64_t v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a4 + 32);
  if (!v16) {
    return;
  }
  while (1)
  {
    unint64_t v77 = *(int **)a1;
    swift_retain();
    LOBYTE(v74) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v77, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v44 = *(double *)(v16 + 48);
      id v68 = *(const char **)(v16 + 56);
      int v45 = *(unsigned int *)(v16 + 72);
      uint64_t v46 = *(unsigned char *)(v16 + 76);
      unint64_t v47 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      uint64_t v48 = static CoreGlue.shared;
      LOBYTE(v72) = v46;
      v47(&v68, v45 | ((unint64_t)v46 << 32), v44);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    uint64_t v33 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    char v34 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      id v43 = swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v43);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(void *)a1 = v77;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
    int v66 = v10;
    swift_retain();
    float v35 = v34;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    float v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    float v10 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v10)
    {
      __break(1u);
    }
    else
    {
      int v38 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      id v40 = MEMORY[0x263F8DA20];
      *(void *)(v36 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v36 + 64) = v40;
      *(void *)(v36 + 32) = Counter;
      uint64_t v41 = AGGraphGetCurrentAttribute();
      if (v41 != v10)
      {
        int v42 = MEMORY[0x263F8E960];
        *(void *)(v36 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v36 + 104) = v42;
        *(_DWORD *)(v36 + 72) = v41;
        *(void *)(v36 + 136) = MEMORY[0x263F8D310];
        *(void *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v36 + 112) = 0x74616F6C464743;
        *(void *)(v36 + 120) = 0xE700000000000000;
        double v73 = v33;
        int v71 = _signpostLog;
        uint64_t v72 = &dword_245728000;
        uint64_t v74 = "AnimationState";
        unsigned __int8 v75 = 14;
        unsigned __int8 v76 = 2;
        id v68 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v69 = 37;
        uint64_t v70 = 2;
        int v67 = v36;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
        id v43 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    float v4 = v5 - v4;
    int v13 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v49 = swift_retain();
    uint64_t v50 = specialized AnimatorState.init(animation:interval:at:in:)(v49, v4, v13);
    swift_retain();
    id v51 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    id v64 = v51;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v52 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v65 = v19;
      int v66 = v10;
      swift_retain();
      uint64_t v53 = v52;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      id v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_2461BE2B0;
      uint64_t v55 = AGGraphGetCurrentAttribute();
      int v63 = *MEMORY[0x263F288F8];
      if (v55 == v63) {
        goto LABEL_68;
      }
      int v56 = (id)AGGraphGetAttributeGraph();
      uint64_t v57 = AGGraphGetCounter();

      uint64_t v58 = MEMORY[0x263F8DA20];
      *(void *)(v54 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v54 + 64) = v58;
      *(void *)(v54 + 32) = v57;
      int8x16_t v59 = AGGraphGetCurrentAttribute();
      if (v59 == v63) {
        goto LABEL_69;
      }
      float32x4_t v60 = MEMORY[0x263F8E960];
      *(void *)(v54 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v54 + 104) = v60;
      *(_DWORD *)(v54 + 72) = v59;
      *(void *)(v54 + 136) = MEMORY[0x263F8D310];
      *(void *)(v54 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v54 + 112) = 0x74616F6C464743;
      *(void *)(v54 + 120) = 0xE700000000000000;
      LOBYTE(v67) = v64;
      unint64_t v77 = &dword_245728000;
      int v71 = v54;
      uint64_t v72 = (int *)_signpostLog;
      uint64_t v74 = "AnimationState";
      unsigned __int8 v75 = 14;
      unsigned __int8 v76 = 2;
      id v68 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v69 = 39;
      uint64_t v70 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      float32x4_t v61 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
      float v10 = v61;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v50;
    if (v50)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v16 = *(void *)(a4 + 32);
    if (!v16) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v74) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain();
  unint64_t v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  id v64 = v22;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  float v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  uint64_t v65 = v19;
  int v66 = v10;
  swift_retain();
  int8x16_t v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  int8x16_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_2461BE2B0;
  float v26 = AGGraphGetCurrentAttribute();
  int v63 = *MEMORY[0x263F288F8];
  if (v26 != v63)
  {
    BOOL v27 = (id)AGGraphGetAttributeGraph();
    BOOL v28 = AGGraphGetCounter();

    uint64_t v29 = MEMORY[0x263F8DA20];
    *(void *)(v25 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v25 + 64) = v29;
    *(void *)(v25 + 32) = v28;
    uint64_t v30 = AGGraphGetCurrentAttribute();
    if (v30 == v63) {
      goto LABEL_67;
    }
    uint64_t v31 = MEMORY[0x263F8E960];
    *(void *)(v25 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v25 + 104) = v31;
    *(_DWORD *)(v25 + 72) = v30;
    *(void *)(v25 + 136) = MEMORY[0x263F8D310];
    *(void *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v25 + 112) = 0x74616F6C464743;
    *(void *)(v25 + 120) = 0xE700000000000000;
    LOBYTE(v67) = v64;
    unint64_t v77 = &dword_245728000;
    int v71 = v25;
    uint64_t v72 = (int *)_signpostLog;
    uint64_t v74 = "AnimationState";
    unsigned __int8 v75 = 14;
    unsigned __int8 v76 = 2;
    id v68 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v69 = 39;
    uint64_t v70 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v32 = v66;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
    float v10 = v32;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x736172746E6F435FLL, 0xEF74636566664574);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0xD000000000000010, 0x8000000246222DA0);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0xD000000000000011, 0x8000000246222D40);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0xD000000000000011, 0x8000000246222D00);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0xD000000000000012, 0x8000000246222CC0);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  char v40;
  void *v41;
  id v42;
  uint64_t v43;
  int CurrentAttribute;
  id v45;
  uint64_t Counter;
  uint64_t v47;
  int v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  unsigned __int8 v52;
  void (*v53)(void *, unint64_t, double);
  void *v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  id v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  void v75[2];
  char v76;
  uint64_t v77;
  int *v78;
  char v79;
  const char *v80;
  uint64_t v81;
  char v82;
  float64x2_t v83;
  long long v84;

  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 56))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 32) = 1;
LABEL_11:
    float v8 = *(double *)a1;
    float v9 = *(double *)(a1 + 8);
    float v10 = *(double *)(a1 + 16);
    unint64_t v22 = *(double *)(a1 + 24);
    if (*(unsigned char *)(a4 + 48)) {
      goto LABEL_37;
    }
    float v4 = *(double *)(a4 + 32);
    float v5 = *(double *)(a4 + 40);
    float v7 = *(double *)(a4 + 16);
    float v6 = *(double *)(a4 + 24);
    if (v8 == v7 && v9 == v6 && v10 == v4 && v22 == v5) {
      goto LABEL_37;
    }
    double v73 = *(double *)(a1 + 24);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    float v23 = swift_retain();
    int8x16_t v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      int8x16_t v25 = *(void *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    float v26 = swift_retain();
    BOOL v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      int8x16_t v25 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 32) == 1) {
    goto LABEL_11;
  }
  unint64_t v21 = *(void *)(a4 + 56);
  if (!v21) {
    return;
  }
  while (1)
  {
    unint64_t v39 = *(_OWORD *)(a1 + 16);
    __int32 v83 = *(float64x2_t *)a1;
    uint64_t v84 = v39;
    swift_retain();
    LOBYTE(v80) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v83, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v50 = *(double *)(v21 + 72);
      v75[0] = *(void *)(v21 + 80);
      id v51 = *(unsigned int *)(v21 + 120);
      uint64_t v52 = *(unsigned char *)(v21 + 124);
      uint64_t v53 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      id v54 = static CoreGlue.shared;
      LOBYTE(v78) = v52;
      v53(v75, v51 | ((unint64_t)v52 << 32), v50);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    id v40 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v41 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (*(void *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_52:
      swift_release();
      *(void *)(a4 + 56) = 0;
LABEL_53:
      uint64_t v55 = v84;
      *(float64x2_t *)a1 = v83;
      *(_OWORD *)(a1 + 16) = v55;
      *(unsigned char *)(a1 + 32) = 1;
      return;
    }
    uint64_t v72 = v15;
    swift_retain();
    int v42 = v41;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    id v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    uint64_t v15 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v15)
    {
      __break(1u);
    }
    else
    {
      int v45 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      unint64_t v47 = MEMORY[0x263F8DA20];
      *(void *)(v43 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v43 + 64) = v47;
      *(void *)(v43 + 32) = Counter;
      uint64_t v48 = AGGraphGetCurrentAttribute();
      if (v48 != v15)
      {
        int v49 = MEMORY[0x263F8E960];
        *(void *)(v43 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v43 + 104) = v49;
        *(_DWORD *)(v43 + 72) = v48;
        *(void *)(v43 + 136) = MEMORY[0x263F8D310];
        *(void *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v43 + 112) = 0xD000000000000014;
        *(void *)(v43 + 120) = 0x8000000246222CE0;
        float32x4_t v79 = v40;
        unint64_t v77 = _signpostLog;
        float32x4_t v78 = &dword_245728000;
        __int32 v80 = "AnimationState";
        __int32 v81 = 14;
        __int32 v82 = 2;
        v75[0] = "Animation: (%p) [%d] %{public}@ ended";
        v75[1] = 37;
        unsigned __int8 v76 = 2;
        uint64_t v74 = v43;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (*(void *)(a4 + 56)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    int8x16_t v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    float v7 = v8 - v7;
    float v6 = v9 - v6;
    float v4 = v10 - v4;
    float v5 = v73 - v5;
    double v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 56)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v56 = swift_retain();
    uint64_t v57 = specialized AnimatorState.init(animation:interval:at:in:)(v56, v7, v6, v4, v5, v18);
    swift_retain();
    uint64_t v58 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    uint64_t v70 = v58;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int8x16_t v59 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      int v71 = v25;
      uint64_t v72 = v15;
      swift_retain();
      float32x4_t v60 = v59;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      float32x4_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_2461BE2B0;
      char v62 = AGGraphGetCurrentAttribute();
      uint64_t v69 = *MEMORY[0x263F288F8];
      if (v62 == v69) {
        goto LABEL_71;
      }
      int v63 = (id)AGGraphGetAttributeGraph();
      id v64 = AGGraphGetCounter();

      uint64_t v65 = MEMORY[0x263F8DA20];
      *(void *)(v61 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v61 + 64) = v65;
      *(void *)(v61 + 32) = v64;
      int v66 = AGGraphGetCurrentAttribute();
      if (v66 == v69) {
        goto LABEL_72;
      }
      int v67 = MEMORY[0x263F8E960];
      *(void *)(v61 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v61 + 104) = v67;
      *(_DWORD *)(v61 + 72) = v66;
      *(void *)(v61 + 136) = MEMORY[0x263F8D310];
      *(void *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v61 + 112) = 0xD000000000000014;
      *(void *)(v61 + 120) = 0x8000000246222CE0;
      LOBYTE(v74) = v70;
      v75[0] = &dword_245728000;
      unint64_t v77 = v61;
      float32x4_t v78 = (int *)_signpostLog;
      *(void *)&v83.f64[0] = "AnimationState";
      *(void *)&v83.f64[1] = 14;
      LOBYTE(v84) = 2;
      __int32 v80 = "Animation: (%p) [%d] %{public}@ started";
      __int32 v81 = 39;
      __int32 v82 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      id v68 = v72;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
      uint64_t v15 = v68;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 56) = v57;
    if (v57)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    unint64_t v22 = v73;
LABEL_37:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(double *)(a4 + 32) = v10;
    *(double *)(a4 + 40) = v22;
    *(unsigned char *)(a4 + 48) = 0;
    unint64_t v21 = *(void *)(a4 + 56);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v83.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v7, v6, v4, v5, v18);
  swift_retain();
  BOOL v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v70 = v28;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  int v71 = v25;
  uint64_t v72 = v15;
  swift_retain();
  uint64_t v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2461BE2B0;
  uint64_t v32 = AGGraphGetCurrentAttribute();
  uint64_t v69 = *MEMORY[0x263F288F8];
  if (v32 != v69)
  {
    uint64_t v33 = (id)AGGraphGetAttributeGraph();
    char v34 = AGGraphGetCounter();

    float v35 = MEMORY[0x263F8DA20];
    *(void *)(v31 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v31 + 64) = v35;
    *(void *)(v31 + 32) = v34;
    float v36 = AGGraphGetCurrentAttribute();
    if (v36 == v69) {
      goto LABEL_70;
    }
    uint64_t v37 = MEMORY[0x263F8E960];
    *(void *)(v31 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v31 + 104) = v37;
    *(_DWORD *)(v31 + 72) = v36;
    *(void *)(v31 + 136) = MEMORY[0x263F8D310];
    *(void *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 112) = 0xD000000000000014;
    *(void *)(v31 + 120) = 0x8000000246222CE0;
    LOBYTE(v74) = v70;
    v75[0] = &dword_245728000;
    unint64_t v77 = v31;
    float32x4_t v78 = (int *)_signpostLog;
    *(void *)&v83.f64[0] = "AnimationState";
    *(void *)&v83.f64[1] = 14;
    LOBYTE(v84) = 2;
    __int32 v80 = "Animation: (%p) [%d] %{public}@ updated";
    __int32 v81 = 39;
    __int32 v82 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    int v38 = v72;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
    uint64_t v15 = v38;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 56)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double *Value;
  char v19;
  double *v20;
  double *v21;
  float v22;
  int8x16_t v23;
  int8x16_t v24;
  float v25;
  float v26;
  BOOL v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  float v35;
  uint64_t v36;
  int v37;
  void *v38;
  id v39;
  uint64_t v40;
  int v41;
  id v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  char v50;
  void *v51;
  id v52;
  uint64_t v53;
  int CurrentAttribute;
  int v55;
  id v56;
  uint64_t Counter;
  uint64_t v58;
  int v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  unsigned __int8 v63;
  void (*v64)(float32x4_t *, unint64_t, double);
  void *v65;
  float32x4_t v66;
  float32x4_t v67;
  __int32 v68;
  __int32 v69;
  __int32 v70;
  __int32 v71;
  uint64_t v72;
  __int32 v73;
  __int32 v74;
  __int32 v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  void *v79;
  id v80;
  uint64_t v81;
  int v82;
  id v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  float v91;
  float v92;
  int8x16_t v93;
  uint64_t v94;
  float32x4_t v95;
  char v96;
  uint64_t v97;
  int *v98;
  char v99;
  float32x4_t v100;
  char v101;
  const char *v102;
  uint64_t v103;
  char v104;
  float32x4_t v105[2];

  int v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  int64_t v17 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v19) {
      int64_t v17 = *Value;
    }
  }
  char v20 = (double *)&unk_26B0EB000;
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 16) = 1;
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 16) == 1)
  {
LABEL_11:
    float v4 = *(float *)a1;
    float v5 = *(float *)(a1 + 4);
    float v6 = *(float *)(a1 + 8);
    unint64_t v22 = *(float *)(a1 + 12);
    if (one-time initialization token for legacyInterpolation != -1) {
      swift_once();
    }
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      v100.i8[0] = 2;
      *(float *)v23.i32 = v4;
      ResolvedGradient.ColorSpace.convertIn(_:)((float *)&v102, v23, v5, LODWORD(v6), v22, v24);
      float v5 = *((float *)&v102 + 1);
      float v4 = *(float *)&v102;
      unint64_t v22 = *((float *)&v103 + 1);
      float v6 = *(float *)&v103;
    }
    float v7 = v4 * 128.0;
    float v9 = v5 * 128.0;
    int8x16_t v25 = v6 * 128.0;
    float v26 = v22 * 128.0;
    if (*(unsigned char *)(a4 + 28)) {
      goto LABEL_47;
    }
    float v4 = *(float *)(a4 + 12);
    float v6 = *(float *)(a4 + 16);
    float v8 = *(float *)(a4 + 20);
    float v5 = *(float *)(a4 + 24);
    BOOL v27 = v7 == v4 && v9 == v6;
    BOOL v28 = v27 && v25 == v8;
    if (v28 && v26 == v5) {
      goto LABEL_47;
    }
    uint64_t v91 = v25;
    float v92 = v22 * 128.0;
    v93.i64[0] = v14;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v30 = swift_retain();
    uint64_t v31 = specialized find<A>(_:key:)(v30);
    if (v31)
    {
      uint64_t v32 = *(void *)(v31 + 72);
      swift_retain();
      swift_release();
      if (v32) {
        goto LABEL_35;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v33 = swift_retain();
    char v34 = specialized closure #1 in PropertyList.subscript.getter(v33);
    swift_release();
    if ((v34 & 1) == 0)
    {
      char v20 = (double *)&unk_26B0EB000;
      if (!a2) {
        goto LABEL_83;
      }
      swift_retain();
      uint64_t v32 = a2;
      goto LABEL_35;
    }
    char v20 = (double *)&unk_26B0EB000;
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_86;
    }
    goto LABEL_32;
  }
  unint64_t v21 = (double *)&unk_26B0EB000;
  char v20 = *(double **)(a4 + 32);
  if (!v20) {
    return;
  }
  while (1)
  {
    int8x16_t v93 = *(int8x16_t *)a1;
    uint64_t v46 = *((void *)v21 + 229);
    swift_retain();
    if (v46 != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      uint64_t v48 = (float32x4_t)v93;
    }
    else
    {
      v95.i8[0] = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v100.f32, v93, *(float *)&v93.i32[1], v93.u32[2], *(float *)&v93.i32[3], v47);
      uint64_t v48 = v100;
    }
    v49.i64[0] = 0x4300000043000000;
    v49.i64[1] = 0x4300000043000000;
    v105[0] = vmulq_f32(v48, v49);
    v100.i8[0] = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v105, v17) & 1) == 0) {
      break;
    }
    swift_retain();
    uint64_t v50 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_65;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v51 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_65:
      swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_66:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_67:
      *(void *)(a4 + 32) = 0;
      goto LABEL_68;
    }
    v93.i64[0] = v14;
    swift_retain();
    uint64_t v52 = v51;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    uint64_t v55 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      int v56 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v58 = MEMORY[0x263F8DA20];
      *(void *)(v53 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v53 + 64) = v58;
      *(void *)(v53 + 32) = Counter;
      int8x16_t v59 = AGGraphGetCurrentAttribute();
      if (v59 != v55)
      {
        float32x4_t v60 = MEMORY[0x263F8E960];
        *(void *)(v53 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v53 + 104) = v60;
        *(_DWORD *)(v53 + 72) = v59;
        *(void *)(v53 + 136) = MEMORY[0x263F8D310];
        *(void *)(v53 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v53 + 112) = 0x65766C6F7365525FLL;
        *(void *)(v53 + 120) = 0xE900000000000064;
        char v99 = v50;
        uint64_t v97 = _signpostLog;
        uint64_t v98 = &dword_245728000;
        v100.i64[0] = (uint64_t)"AnimationState";
        v100.i64[1] = 14;
        char v101 = 2;
        v95.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ ended";
        v95.i64[1] = 37;
        char v96 = 2;
        uint64_t v94 = v53;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v93.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_66;
        }
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_86:
    swift_once();
LABEL_32:
    uint64_t v32 = static Animation.velocityTracking;
    swift_retain();
LABEL_35:
    float v35 = v7 - v4;
    float v6 = v9 - v6;
    float v4 = v91 - v8;
    float v5 = v92 - v5;
    int64_t v17 = *(double *)AGGraphGetValue();
    float v36 = *(void *)(a4 + 32);
    int v90 = v32;
    if (v36)
    {
      swift_retain();
      LOBYTE(v102) = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v32, v35, v6, v4, v5, v17);
      swift_retain();
      uint64_t v37 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_43;
      }
      int v89 = v37;
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      int v38 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        unint64_t v39 = v38;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        id v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = xmmword_2461BE2B0;
        uint64_t v41 = AGGraphGetCurrentAttribute();
        uint64_t v88 = *MEMORY[0x263F288F8];
        if (v41 == v88)
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          return;
        }
        int v42 = (id)AGGraphGetAttributeGraph();
        __int32 v87 = AGGraphGetCounter();

        id v43 = MEMORY[0x263F8DA20];
        *(void *)(v40 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v40 + 64) = v43;
        *(void *)(v40 + 32) = v87;
        uint64_t v44 = AGGraphGetCurrentAttribute();
        if (v44 == v88) {
          goto LABEL_88;
        }
        int v45 = MEMORY[0x263F8E960];
        *(void *)(v40 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v40 + 104) = v45;
        *(_DWORD *)(v40 + 72) = v44;
        *(void *)(v40 + 136) = MEMORY[0x263F8D310];
        *(void *)(v40 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v40 + 112) = 0x65766C6F7365525FLL;
        *(void *)(v40 + 120) = 0xE900000000000064;
        LOBYTE(v97) = v89;
        v95.i64[0] = (uint64_t)&dword_245728000;
        v105[0].i64[0] = _signpostLog;
        long long v102 = "AnimationState";
        uint64_t v103 = 14;
        char v104 = 2;
        v100.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ updated";
        v100.i64[1] = 39;
        char v101 = 2;
        uint64_t v98 = (int *)v40;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v93.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        char v20 = (double *)&unk_26B0EB000;
      }
      else
      {
LABEL_43:
        swift_release_n();
      }
      if (*(void *)(a4 + 32))
      {
LABEL_45:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v14 = v93.i64[0];
        goto LABEL_46;
      }
    }
    else
    {
      type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      unsigned __int8 v76 = swift_retain();
      unint64_t v77 = specialized AnimatorState.init(animation:interval:at:in:)(v76, v35, v6, v4, v5, v17);
      swift_retain();
      float32x4_t v78 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_80;
      }
      int v89 = v78;
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      float32x4_t v79 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        __int32 v80 = v79;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        __int32 v81 = swift_allocObject();
        *(_OWORD *)(v81 + 16) = xmmword_2461BE2B0;
        __int32 v82 = AGGraphGetCurrentAttribute();
        uint64_t v88 = *MEMORY[0x263F288F8];
        if (v82 == v88) {
          goto LABEL_89;
        }
        __int32 v83 = (id)AGGraphGetAttributeGraph();
        __int32 v87 = AGGraphGetCounter();

        uint64_t v84 = MEMORY[0x263F8DA20];
        *(void *)(v81 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v81 + 64) = v84;
        *(void *)(v81 + 32) = v87;
        __int32 v85 = AGGraphGetCurrentAttribute();
        if (v85 == v88) {
          goto LABEL_90;
        }
        __int32 v86 = MEMORY[0x263F8E960];
        *(void *)(v81 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v81 + 104) = v86;
        *(_DWORD *)(v81 + 72) = v85;
        *(void *)(v81 + 136) = MEMORY[0x263F8D310];
        *(void *)(v81 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v81 + 112) = 0x65766C6F7365525FLL;
        *(void *)(v81 + 120) = 0xE900000000000064;
        LOBYTE(v97) = v89;
        v95.i64[0] = (uint64_t)&dword_245728000;
        v105[0].i64[0] = _signpostLog;
        long long v102 = "AnimationState";
        uint64_t v103 = 14;
        char v104 = 2;
        v100.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ started";
        v100.i64[1] = 39;
        char v101 = 2;
        uint64_t v98 = (int *)v81;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v93.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        char v20 = (double *)&unk_26B0EB000;
      }
      else
      {
LABEL_80:
        swift_release();
      }
      swift_release();
      *(void *)(a4 + 32) = v77;
      if (v77) {
        goto LABEL_45;
      }
    }
    __break(1u);
LABEL_83:
    swift_release();
    uint64_t v14 = v93.i64[0];
LABEL_46:
    float v26 = v92;
    int8x16_t v25 = v91;
LABEL_47:
    unint64_t v21 = v20;
    *(void *)(a4 + 12) = LODWORD(v7) | ((unint64_t)LODWORD(v9) << 32);
    *(void *)(a4 + 20) = LODWORD(v25) | ((unint64_t)LODWORD(v26) << 32);
    *(unsigned char *)(a4 + 28) = 0;
    char v20 = *(double **)(a4 + 32);
    if (!v20) {
      return;
    }
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  float32x4_t v61 = v20[7];
  v95.i64[0] = (uint64_t)v20[8];
  char v62 = *((unsigned int *)v20 + 22);
  int v63 = *((unsigned char *)v20 + 92);
  id v64 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                       + 0x58);
  uint64_t v65 = static CoreGlue.shared;
  LOBYTE(v98) = v63;
  v64(&v95, v62 | ((unint64_t)v63 << 32), v61);

LABEL_68:
  v66.i64[0] = 0x3C0000003C000000;
  v66.i64[1] = 0x3C0000003C000000;
  int v67 = vmulq_f32(v105[0], v66);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    int8x16_t v93 = (int8x16_t)v67;
    swift_release();
    uint64_t v69 = v93.i32[1];
    id v68 = v93.i32[0];
    int v71 = v93.i32[3];
    uint64_t v70 = v93.i32[2];
  }
  else
  {
    LOBYTE(v98) = 2;
    float32x4_t v95 = v67;
    *(float *)&uint64_t v72 = ResolvedGradient.ColorSpace.convertOut(_:)(v95.f32);
    v93.i64[0] = v72;
    uint64_t v69 = v73;
    uint64_t v70 = v74;
    int v71 = v75;
    swift_release();
    id v68 = v93.i32[0];
  }
  *(_DWORD *)a1 = v68;
  *(_DWORD *)(a1 + 4) = v69;
  *(_DWORD *)(a1 + 8) = v70;
  *(_DWORD *)(a1 + 12) = v71;
  *(unsigned char *)(a1 + 16) = 1;
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset());
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  double v30;
  double v31;
  int v32;
  void *v33;
  char v34;
  id v35;
  uint64_t v36;
  int v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  char v47;
  id v48;
  uint64_t v49;
  int v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  long long v58;
  char v59;
  void *v60;
  id v61;
  uint64_t v62;
  int CurrentAttribute;
  id v64;
  uint64_t Counter;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  unsigned __int8 v72;
  void (*v73)(void *, unint64_t, double);
  void *v74;
  uint64_t v75;
  long long v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  void v87[2];
  char v88;
  uint64_t v89;
  int *v90;
  char v91;
  const char *v92;
  uint64_t v93;
  char v94;
  float64x2_t v95;
  long long v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;

  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int64_t v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1) {
    goto LABEL_2;
  }
LABEL_68:
  swift_once();
LABEL_2:
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 64))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 72) == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    if (*(unsigned char *)(a1 + 48) != 1)
    {
      unint64_t v21 = *(void *)(a4 + 64);
      if (v21) {
        goto LABEL_47;
      }
      return;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 48) = 1;
  }
  float v4 = *(double *)a1;
  float v5 = *(double *)(a1 + 8);
  unint64_t v22 = *(double *)(a1 + 16);
  float v23 = *(double *)(a1 + 24);
  int8x16_t v24 = *(double *)(a1 + 40);
  if ((*(unsigned char *)(a4 + 56) & 1) == 0)
  {
    float v10 = *(double *)(a4 + 40);
    float v9 = *(double *)(a4 + 48);
    float v7 = *(double *)(a4 + 24);
    float v8 = *(double *)(a4 + 32);
    float v6 = *(double *)(a4 + 16);
    if (v4 != v6 || v5 != v7 || v22 != v8 || v23 != v10 || v24 != v9)
    {
      __int32 v83 = *(double *)(a1 + 40);
      uint64_t v84 = v23;
      __int32 v85 = v22;
      AGGraphClearUpdate();
      AGGraphGetValue();
      swift_retain();
      AGGraphSetUpdate();
      int8x16_t v25 = swift_retain();
      float v26 = specialized find<A>(_:key:)(v25);
      if (v26)
      {
        BOOL v27 = *(void *)(v26 + 72);
        swift_retain();
        swift_release();
        if (v27) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_release();
      }
      BOOL v28 = swift_retain();
      uint64_t v29 = specialized closure #1 in PropertyList.subscript.getter(v28);
      swift_release();
      if (v29)
      {
        if (one-time initialization token for velocityTracking != -1) {
          goto LABEL_71;
        }
        goto LABEL_22;
      }
      if (a2)
      {
        swift_retain();
        BOOL v27 = a2;
        goto LABEL_25;
      }
      goto LABEL_45;
    }
  }
  while (1)
  {
    *(double *)(a4 + 16) = v4;
    *(double *)(a4 + 24) = v5;
    *(double *)(a4 + 32) = v22;
    *(double *)(a4 + 40) = v23;
    *(double *)(a4 + 48) = v24;
    *(unsigned char *)(a4 + 56) = 0;
    unint64_t v21 = *(void *)(a4 + 64);
    if (!v21) {
      return;
    }
LABEL_47:
    uint64_t v57 = *(void *)(a1 + 40);
    uint64_t v58 = *(_OWORD *)(a1 + 16);
    float32x4_t v95 = *(float64x2_t *)a1;
    char v96 = v58;
    uint64_t v97 = v57;
    swift_retain();
    LOBYTE(v92) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v95, v18) & 1) == 0) {
      break;
    }
    swift_retain();
    int8x16_t v59 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    float32x4_t v60 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_59:
      uint64_t v69 = swift_release();
      if (!*(void *)(a4 + 64))
      {
LABEL_61:
        swift_release();
        *(void *)(a4 + 64) = 0;
        goto LABEL_62;
      }
LABEL_60:
      specialized AnimatorState.removeListeners()(v69);
      swift_release();
      goto LABEL_61;
    }
    __int32 v80 = v15;
    swift_retain();
    float32x4_t v61 = v60;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    char v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    uint64_t v15 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v15)
    {
      __break(1u);
    }
    else
    {
      id v64 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      int v66 = MEMORY[0x263F8DA20];
      *(void *)(v62 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v62 + 64) = v66;
      *(void *)(v62 + 32) = Counter;
      int v67 = AGGraphGetCurrentAttribute();
      if (v67 != v15)
      {
        id v68 = MEMORY[0x263F8E960];
        *(void *)(v62 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v62 + 104) = v68;
        *(_DWORD *)(v62 + 72) = v67;
        *(void *)(v62 + 136) = MEMORY[0x263F8D310];
        *(void *)(v62 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v62 + 112) = 0x7465736E495FLL;
        *(void *)(v62 + 120) = 0xE600000000000000;
        uint64_t v91 = v59;
        int v90 = &dword_245728000;
        int v89 = _signpostLog;
        float v92 = "AnimationState";
        int8x16_t v93 = 14;
        uint64_t v94 = 2;
        v87[0] = "Animation: (%p) [%d] %{public}@ ended";
        v87[1] = 37;
        uint64_t v88 = 2;
        __int32 v86 = v62;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v80 + 8))(v17, v14);
        uint64_t v69 = swift_bridgeObjectRelease();
        if (!*(void *)(a4 + 64)) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }
    }
    __break(1u);
LABEL_71:
    swift_once();
LABEL_22:
    BOOL v27 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    __int32 v82 = v4;
    uint64_t v30 = v4 - v6;
    __int32 v81 = v5;
    uint64_t v31 = v5 - v7;
    float v8 = v85 - v8;
    float v6 = v84 - v10;
    float v7 = v83 - v9;
    double v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 64))
    {
      uint64_t v98 = v30;
      char v99 = v31;
      float32x4_t v100 = v8;
      char v101 = v6;
      long long v102 = v7;
      swift_retain();
      LOBYTE(v95.f64[0]) = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v27, (uint64_t)&v98, v18);
      swift_retain();
      uint64_t v32 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        float32x4_t v78 = v32;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        uint64_t v33 = (void *)_signpostLog;
        char v34 = OS_os_log.signpostsEnabled.getter();
        float v4 = v82;
        float v5 = v81;
        if (v34)
        {
          float32x4_t v79 = v27;
          __int32 v80 = v15;
          swift_retain();
          float v35 = v33;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          float v36 = swift_allocObject();
          *(_OWORD *)(v36 + 16) = xmmword_2461BE2B0;
          uint64_t v37 = AGGraphGetCurrentAttribute();
          unint64_t v77 = *MEMORY[0x263F288F8];
          if (v37 == v77)
          {
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
            return;
          }
          int v38 = (id)AGGraphGetAttributeGraph();
          unint64_t v39 = AGGraphGetCounter();

          id v40 = MEMORY[0x263F8DA20];
          *(void *)(v36 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v36 + 64) = v40;
          *(void *)(v36 + 32) = v39;
          uint64_t v41 = AGGraphGetCurrentAttribute();
          if (v41 == v77) {
            goto LABEL_73;
          }
          int v42 = MEMORY[0x263F8E960];
          *(void *)(v36 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v36 + 104) = v42;
          *(_DWORD *)(v36 + 72) = v41;
          *(void *)(v36 + 136) = MEMORY[0x263F8D310];
          *(void *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v36 + 112) = 0x7465736E495FLL;
          *(void *)(v36 + 120) = 0xE600000000000000;
          LOBYTE(v86) = v78;
          v87[0] = &dword_245728000;
          int v90 = (int *)_signpostLog;
          *(void *)&v95.f64[0] = "AnimationState";
          *(void *)&v95.f64[1] = 14;
          LOBYTE(v96) = 2;
          float v92 = "Animation: (%p) [%d] %{public}@ updated";
          int8x16_t v93 = 39;
          uint64_t v94 = 2;
          int v89 = v36;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release_n();
          id v43 = v80;
          (*(void (**)(char *, uint64_t))(v80 + 8))(v17, v14);
          uint64_t v15 = v43;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release_n();
        }
      }
      else
      {
        swift_release_n();
        float v4 = v82;
        float v5 = v81;
      }
      a2 = *(void *)(a4 + 64);
      if (!a2)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v98 = v30;
      char v99 = v31;
      float32x4_t v100 = v8;
      char v101 = v6;
      long long v102 = v7;
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>();
      swift_allocObject();
      swift_retain();
      uint64_t v44 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v44, (uint64_t)&v98, v18);
      swift_retain();
      int v45 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        float32x4_t v78 = v45;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        uint64_t v46 = (void *)_signpostLog;
        unint64_t v47 = OS_os_log.signpostsEnabled.getter();
        float v4 = v82;
        float v5 = v81;
        if (v47)
        {
          float32x4_t v79 = v27;
          __int32 v80 = v15;
          swift_retain();
          uint64_t v48 = v46;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          int v49 = swift_allocObject();
          *(_OWORD *)(v49 + 16) = xmmword_2461BE2B0;
          uint64_t v50 = AGGraphGetCurrentAttribute();
          unint64_t v77 = *MEMORY[0x263F288F8];
          if (v50 == v77) {
            goto LABEL_74;
          }
          id v51 = (id)AGGraphGetAttributeGraph();
          uint64_t v52 = AGGraphGetCounter();

          uint64_t v53 = MEMORY[0x263F8DA20];
          *(void *)(v49 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v49 + 64) = v53;
          *(void *)(v49 + 32) = v52;
          id v54 = AGGraphGetCurrentAttribute();
          if (v54 == v77) {
            goto LABEL_75;
          }
          uint64_t v55 = MEMORY[0x263F8E960];
          *(void *)(v49 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v49 + 104) = v55;
          *(_DWORD *)(v49 + 72) = v54;
          *(void *)(v49 + 136) = MEMORY[0x263F8D310];
          *(void *)(v49 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v49 + 112) = 0x7465736E495FLL;
          *(void *)(v49 + 120) = 0xE600000000000000;
          LOBYTE(v86) = v78;
          v87[0] = &dword_245728000;
          int v90 = (int *)_signpostLog;
          *(void *)&v95.f64[0] = "AnimationState";
          *(void *)&v95.f64[1] = 14;
          LOBYTE(v96) = 2;
          float v92 = "Animation: (%p) [%d] %{public}@ started";
          int8x16_t v93 = 39;
          uint64_t v94 = 2;
          int v89 = v49;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          int v56 = v80;
          (*(void (**)(char *, uint64_t))(v80 + 8))(v17, v14);
          uint64_t v15 = v56;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        float v4 = v82;
        float v5 = v81;
      }
      swift_release();
      *(void *)(a4 + 64) = a2;
      if (!a2) {
        goto LABEL_67;
      }
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
LABEL_45:
    swift_release();
    unint64_t v22 = v85;
    float v23 = v84;
    int8x16_t v24 = v83;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v70 = *(double *)(v21 + 80);
  v87[0] = *(void *)(v21 + 88);
  int v71 = *(unsigned int *)(v21 + 136);
  uint64_t v72 = *(unsigned char *)(v21 + 140);
  double v73 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                  + 0x58);
  uint64_t v74 = static CoreGlue.shared;
  LOBYTE(v90) = v72;
  v73(v87, v71 | ((unint64_t)v72 << 32), v70);
  swift_release();

LABEL_62:
  unsigned __int8 v75 = v97;
  unsigned __int8 v76 = v96;
  *(float64x2_t *)a1 = v95;
  *(_OWORD *)(a1 + 16) = v76;
  *(void *)(a1 + 40) = v75;
  *(unsigned char *)(a1 + 48) = 1;
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x656C676E41, 0xE500000000000000);
}

{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double *Value;
  char v19;
  double *v20;
  double *v21;
  float v22;
  int8x16_t v23;
  int8x16_t v24;
  float v25;
  float v26;
  BOOL v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  float v35;
  uint64_t v36;
  int v37;
  void *v38;
  id v39;
  uint64_t v40;
  int v41;
  id v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  char v50;
  void *v51;
  id v52;
  uint64_t v53;
  int CurrentAttribute;
  int v55;
  id v56;
  uint64_t Counter;
  uint64_t v58;
  int v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  unsigned __int8 v63;
  void (*v64)(float32x4_t *, unint64_t, double);
  void *v65;
  float32x4_t v66;
  float32x4_t v67;
  __int32 v68;
  __int32 v69;
  __int32 v70;
  __int32 v71;
  uint64_t v72;
  __int32 v73;
  __int32 v74;
  __int32 v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  void *v79;
  id v80;
  uint64_t v81;
  int v82;
  id v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  float v91;
  float v92;
  int8x16_t v93;
  uint64_t v94;
  float32x4_t v95;
  char v96;
  uint64_t v97;
  int *v98;
  char v99;
  float32x4_t v100;
  char v101;
  const char *v102;
  uint64_t v103;
  char v104;
  float32x4_t v105[2];

  int v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  int64_t v17 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v19) {
      int64_t v17 = *Value;
    }
  }
  char v20 = (double *)&unk_26B0EB000;
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 16) = 1;
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 16) == 1)
  {
LABEL_11:
    float v4 = *(float *)a1;
    float v5 = *(float *)(a1 + 4);
    float v6 = *(float *)(a1 + 8);
    unint64_t v22 = *(float *)(a1 + 12);
    if (one-time initialization token for legacyInterpolation != -1) {
      swift_once();
    }
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      v100.i8[0] = 2;
      *(float *)v23.i32 = v4;
      ResolvedGradient.ColorSpace.convertIn(_:)((float *)&v102, v23, v5, LODWORD(v6), v22, v24);
      float v5 = *((float *)&v102 + 1);
      float v4 = *(float *)&v102;
      unint64_t v22 = *((float *)&v103 + 1);
      float v6 = *(float *)&v103;
    }
    float v7 = v4 * 128.0;
    float v9 = v5 * 128.0;
    int8x16_t v25 = v6 * 128.0;
    float v26 = v22 * 128.0;
    if (*(unsigned char *)(a4 + 28)) {
      goto LABEL_47;
    }
    float v4 = *(float *)(a4 + 12);
    float v6 = *(float *)(a4 + 16);
    float v8 = *(float *)(a4 + 20);
    float v5 = *(float *)(a4 + 24);
    BOOL v27 = v7 == v4 && v9 == v6;
    BOOL v28 = v27 && v25 == v8;
    if (v28 && v26 == v5) {
      goto LABEL_47;
    }
    uint64_t v91 = v25;
    float v92 = v22 * 128.0;
    v93.i64[0] = v14;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v30 = swift_retain();
    uint64_t v31 = specialized find<A>(_:key:)(v30);
    if (v31)
    {
      uint64_t v32 = *(void *)(v31 + 72);
      swift_retain();
      swift_release();
      if (v32) {
        goto LABEL_35;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v33 = swift_retain();
    char v34 = specialized closure #1 in PropertyList.subscript.getter(v33);
    swift_release();
    if ((v34 & 1) == 0)
    {
      char v20 = (double *)&unk_26B0EB000;
      if (!a2) {
        goto LABEL_83;
      }
      swift_retain();
      uint64_t v32 = a2;
      goto LABEL_35;
    }
    char v20 = (double *)&unk_26B0EB000;
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_86;
    }
    goto LABEL_32;
  }
  unint64_t v21 = (double *)&unk_26B0EB000;
  char v20 = *(double **)(a4 + 32);
  if (!v20) {
    return;
  }
  while (1)
  {
    int8x16_t v93 = *(int8x16_t *)a1;
    uint64_t v46 = *((void *)v21 + 229);
    swift_retain();
    if (v46 != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      uint64_t v48 = (float32x4_t)v93;
    }
    else
    {
      v95.i8[0] = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v100.f32, v93, *(float *)&v93.i32[1], v93.u32[2], *(float *)&v93.i32[3], v47);
      uint64_t v48 = v100;
    }
    v49.i64[0] = 0x4300000043000000;
    v49.i64[1] = 0x4300000043000000;
    v105[0] = vmulq_f32(v48, v49);
    v100.i8[0] = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v105, v17) & 1) == 0) {
      break;
    }
    swift_retain();
    uint64_t v50 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_65;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v51 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_65:
      swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_66:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_67:
      *(void *)(a4 + 32) = 0;
      goto LABEL_68;
    }
    v93.i64[0] = v14;
    swift_retain();
    uint64_t v52 = v51;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    uint64_t v55 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      int v56 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v58 = MEMORY[0x263F8DA20];
      *(void *)(v53 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v53 + 64) = v58;
      *(void *)(v53 + 32) = Counter;
      int8x16_t v59 = AGGraphGetCurrentAttribute();
      if (v59 != v55)
      {
        float32x4_t v60 = MEMORY[0x263F8E960];
        *(void *)(v53 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v53 + 104) = v60;
        *(_DWORD *)(v53 + 72) = v59;
        *(void *)(v53 + 136) = MEMORY[0x263F8D310];
        *(void *)(v53 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v53 + 112) = 0x6465766C6F736552;
        *(void *)(v53 + 120) = 0xE800000000000000;
        char v99 = v50;
        uint64_t v97 = _signpostLog;
        uint64_t v98 = &dword_245728000;
        v100.i64[0] = (uint64_t)"AnimationState";
        v100.i64[1] = 14;
        char v101 = 2;
        v95.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ ended";
        v95.i64[1] = 37;
        char v96 = 2;
        uint64_t v94 = v53;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v93.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_66;
        }
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_86:
    swift_once();
LABEL_32:
    uint64_t v32 = static Animation.velocityTracking;
    swift_retain();
LABEL_35:
    float v35 = v7 - v4;
    float v6 = v9 - v6;
    float v4 = v91 - v8;
    float v5 = v92 - v5;
    int64_t v17 = *(double *)AGGraphGetValue();
    float v36 = *(void *)(a4 + 32);
    int v90 = v32;
    if (v36)
    {
      swift_retain();
      LOBYTE(v102) = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v32, v35, v6, v4, v5, v17);
      swift_retain();
      uint64_t v37 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_43;
      }
      int v89 = v37;
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      int v38 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        unint64_t v39 = v38;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        id v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = xmmword_2461BE2B0;
        uint64_t v41 = AGGraphGetCurrentAttribute();
        uint64_t v88 = *MEMORY[0x263F288F8];
        if (v41 == v88)
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          return;
        }
        int v42 = (id)AGGraphGetAttributeGraph();
        __int32 v87 = AGGraphGetCounter();

        id v43 = MEMORY[0x263F8DA20];
        *(void *)(v40 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v40 + 64) = v43;
        *(void *)(v40 + 32) = v87;
        uint64_t v44 = AGGraphGetCurrentAttribute();
        if (v44 == v88) {
          goto LABEL_88;
        }
        int v45 = MEMORY[0x263F8E960];
        *(void *)(v40 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v40 + 104) = v45;
        *(_DWORD *)(v40 + 72) = v44;
        *(void *)(v40 + 136) = MEMORY[0x263F8D310];
        *(void *)(v40 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v40 + 112) = 0x6465766C6F736552;
        *(void *)(v40 + 120) = 0xE800000000000000;
        LOBYTE(v97) = v89;
        v95.i64[0] = (uint64_t)&dword_245728000;
        v105[0].i64[0] = _signpostLog;
        long long v102 = "AnimationState";
        uint64_t v103 = 14;
        char v104 = 2;
        v100.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ updated";
        v100.i64[1] = 39;
        char v101 = 2;
        uint64_t v98 = (int *)v40;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v93.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        char v20 = (double *)&unk_26B0EB000;
      }
      else
      {
LABEL_43:
        swift_release_n();
      }
      if (*(void *)(a4 + 32))
      {
LABEL_45:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v14 = v93.i64[0];
        goto LABEL_46;
      }
    }
    else
    {
      type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      unsigned __int8 v76 = swift_retain();
      unint64_t v77 = specialized AnimatorState.init(animation:interval:at:in:)(v76, v35, v6, v4, v5, v17);
      swift_retain();
      float32x4_t v78 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_80;
      }
      int v89 = v78;
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      float32x4_t v79 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        __int32 v80 = v79;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        __int32 v81 = swift_allocObject();
        *(_OWORD *)(v81 + 16) = xmmword_2461BE2B0;
        __int32 v82 = AGGraphGetCurrentAttribute();
        uint64_t v88 = *MEMORY[0x263F288F8];
        if (v82 == v88) {
          goto LABEL_89;
        }
        __int32 v83 = (id)AGGraphGetAttributeGraph();
        __int32 v87 = AGGraphGetCounter();

        uint64_t v84 = MEMORY[0x263F8DA20];
        *(void *)(v81 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v81 + 64) = v84;
        *(void *)(v81 + 32) = v87;
        __int32 v85 = AGGraphGetCurrentAttribute();
        if (v85 == v88) {
          goto LABEL_90;
        }
        __int32 v86 = MEMORY[0x263F8E960];
        *(void *)(v81 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v81 + 104) = v86;
        *(_DWORD *)(v81 + 72) = v85;
        *(void *)(v81 + 136) = MEMORY[0x263F8D310];
        *(void *)(v81 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v81 + 112) = 0x6465766C6F736552;
        *(void *)(v81 + 120) = 0xE800000000000000;
        LOBYTE(v97) = v89;
        v95.i64[0] = (uint64_t)&dword_245728000;
        v105[0].i64[0] = _signpostLog;
        long long v102 = "AnimationState";
        uint64_t v103 = 14;
        char v104 = 2;
        v100.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ started";
        v100.i64[1] = 39;
        char v101 = 2;
        uint64_t v98 = (int *)v81;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v93.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        char v20 = (double *)&unk_26B0EB000;
      }
      else
      {
LABEL_80:
        swift_release();
      }
      swift_release();
      *(void *)(a4 + 32) = v77;
      if (v77) {
        goto LABEL_45;
      }
    }
    __break(1u);
LABEL_83:
    swift_release();
    uint64_t v14 = v93.i64[0];
LABEL_46:
    float v26 = v92;
    int8x16_t v25 = v91;
LABEL_47:
    unint64_t v21 = v20;
    *(void *)(a4 + 12) = LODWORD(v7) | ((unint64_t)LODWORD(v9) << 32);
    *(void *)(a4 + 20) = LODWORD(v25) | ((unint64_t)LODWORD(v26) << 32);
    *(unsigned char *)(a4 + 28) = 0;
    char v20 = *(double **)(a4 + 32);
    if (!v20) {
      return;
    }
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  float32x4_t v61 = v20[7];
  v95.i64[0] = (uint64_t)v20[8];
  char v62 = *((unsigned int *)v20 + 22);
  int v63 = *((unsigned char *)v20 + 92);
  id v64 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                       + 0x58);
  uint64_t v65 = static CoreGlue.shared;
  LOBYTE(v98) = v63;
  v64(&v95, v62 | ((unint64_t)v63 << 32), v61);

LABEL_68:
  v66.i64[0] = 0x3C0000003C000000;
  v66.i64[1] = 0x3C0000003C000000;
  int v67 = vmulq_f32(v105[0], v66);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    int8x16_t v93 = (int8x16_t)v67;
    swift_release();
    uint64_t v69 = v93.i32[1];
    id v68 = v93.i32[0];
    int v71 = v93.i32[3];
    uint64_t v70 = v93.i32[2];
  }
  else
  {
    LOBYTE(v98) = 2;
    float32x4_t v95 = v67;
    *(float *)&uint64_t v72 = ResolvedGradient.ColorSpace.convertOut(_:)(v95.f32);
    v93.i64[0] = v72;
    uint64_t v69 = v73;
    uint64_t v70 = v74;
    int v71 = v75;
    swift_release();
    id v68 = v93.i32[0];
  }
  *(_DWORD *)a1 = v68;
  *(_DWORD *)(a1 + 4) = v69;
  *(_DWORD *)(a1 + 8) = v70;
  *(_DWORD *)(a1 + 12) = v71;
  *(unsigned char *)(a1 + 16) = 1;
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  void *v24;
  id v25;
  uint64_t v26;
  int v27;
  id v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  void *v33;
  id v34;
  uint64_t v35;
  int CurrentAttribute;
  id v37;
  uint64_t Counter;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  unsigned __int8 v45;
  void (*v46)(const char **, unint64_t, double);
  void *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void *v51;
  id v52;
  uint64_t v53;
  int v54;
  id v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  int *v69;
  char v70;
  const char *v71;
  uint64_t v72;
  char v73;
  unint64_t v74;

  float v9 = type metadata accessor for OSSignpostID();
  float v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  int v13 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v15) {
      int v13 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 8) = 1;
LABEL_11:
    *(void *)&int64_t v17 = *(void *)a1 & 0xFFFFFFFFFFFFFFFELL;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    *(void *)&float v4 = *(void *)a1 & 0xFFFFFFFFFFFFFFFELL;
    float v5 = *(double *)(a4 + 16);
    if (v5 == v17) {
      goto LABEL_34;
    }
    int v63 = v10;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    double v18 = swift_retain();
    uint64_t v19 = specialized find<A>(_:key:)(v18);
    if (v19)
    {
      char v20 = *(void *)(v19 + 72);
      swift_retain();
      swift_release();
      if (v20) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    unint64_t v21 = swift_retain();
    unint64_t v22 = specialized closure #1 in PropertyList.subscript.getter(v21);
    swift_release();
    if ((v22 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      char v20 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a4 + 32);
  if (!v16) {
    return;
  }
  while (1)
  {
    uint64_t v74 = *(void *)a1 & 0xFFFFFFFFFFFFFFFELL;
    swift_retain();
    LOBYTE(v71) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v74, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v43 = *(double *)(v16 + 48);
      uint64_t v65 = *(const char **)(v16 + 56);
      uint64_t v44 = *(unsigned int *)(v16 + 72);
      int v45 = *(unsigned char *)(v16 + 76);
      uint64_t v46 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      unint64_t v47 = static CoreGlue.shared;
      LOBYTE(v69) = v45;
      v46(&v65, v44 | ((unint64_t)v45 << 32), v43);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    uint64_t v32 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v33 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      int v42 = swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v42);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(void *)a1 = v74 & 0xFFFFFFFFFFFFFFFELL | *(void *)a1 & 1;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
    int v63 = v10;
    swift_retain();
    char v34 = v33;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    float v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    *(void *)&int64_t v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == LODWORD(v17))
    {
      __break(1u);
    }
    else
    {
      uint64_t v37 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      unint64_t v39 = MEMORY[0x263F8DA20];
      *(void *)(v35 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v35 + 64) = v39;
      *(void *)(v35 + 32) = Counter;
      id v40 = AGGraphGetCurrentAttribute();
      if (v40 != LODWORD(v17))
      {
        uint64_t v41 = MEMORY[0x263F8E960];
        *(void *)(v35 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v35 + 104) = v41;
        *(_DWORD *)(v35 + 72) = v40;
        *(void *)(v35 + 136) = MEMORY[0x263F8D310];
        *(void *)(v35 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v35 + 112) = 0x7465736E495FLL;
        *(void *)(v35 + 120) = 0xE600000000000000;
        uint64_t v70 = v32;
        id v68 = _signpostLog;
        uint64_t v69 = &dword_245728000;
        int v71 = "AnimationState";
        uint64_t v72 = 14;
        double v73 = 2;
        uint64_t v65 = "Animation: (%p) [%d] %{public}@ ended";
        int v66 = 37;
        int v67 = 2;
        id v64 = v35;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v12, v9);
        int v42 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    char v20 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    float v4 = v4 - v5;
    int v13 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v48 = swift_retain();
    int v49 = specialized AnimatorState.init(animation:interval:at:in:)(v48, v4, v13);
    swift_retain();
    uint64_t v50 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    float32x4_t v61 = v50;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v51 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      char v62 = v20;
      swift_retain();
      uint64_t v52 = v51;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = xmmword_2461BE2B0;
      id v54 = AGGraphGetCurrentAttribute();
      float32x4_t v60 = *MEMORY[0x263F288F8];
      if (v54 == v60) {
        goto LABEL_68;
      }
      uint64_t v55 = (id)AGGraphGetAttributeGraph();
      int8x16_t v59 = AGGraphGetCounter();

      int v56 = MEMORY[0x263F8DA20];
      *(void *)(v53 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v53 + 64) = v56;
      *(void *)(v53 + 32) = v59;
      uint64_t v57 = AGGraphGetCurrentAttribute();
      if (v57 == v60) {
        goto LABEL_69;
      }
      uint64_t v58 = MEMORY[0x263F8E960];
      *(void *)(v53 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v53 + 104) = v58;
      *(_DWORD *)(v53 + 72) = v57;
      *(void *)(v53 + 136) = MEMORY[0x263F8D310];
      *(void *)(v53 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v53 + 112) = 0x7465736E495FLL;
      *(void *)(v53 + 120) = 0xE600000000000000;
      LOBYTE(v64) = v61;
      uint64_t v74 = (unint64_t)&dword_245728000;
      id v68 = v53;
      uint64_t v69 = (int *)_signpostLog;
      int v71 = "AnimationState";
      uint64_t v72 = 14;
      double v73 = 2;
      uint64_t v65 = "Animation: (%p) [%d] %{public}@ started";
      int v66 = 39;
      int v67 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v12, v9);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v49;
    if (v49)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
    float v10 = v63;
LABEL_34:
    *(double *)(a4 + 16) = v17;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v16 = *(void *)(a4 + 32);
    if (!v16) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v71) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v20, v4, v13);
  swift_retain();
  float v23 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  float32x4_t v61 = v23;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  int8x16_t v24 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  char v62 = v20;
  swift_retain();
  int8x16_t v25 = v24;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  float v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
  BOOL v27 = AGGraphGetCurrentAttribute();
  float32x4_t v60 = *MEMORY[0x263F288F8];
  if (v27 != v60)
  {
    BOOL v28 = (id)AGGraphGetAttributeGraph();
    int8x16_t v59 = AGGraphGetCounter();

    uint64_t v29 = MEMORY[0x263F8DA20];
    *(void *)(v26 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v26 + 64) = v29;
    *(void *)(v26 + 32) = v59;
    uint64_t v30 = AGGraphGetCurrentAttribute();
    if (v30 == v60) {
      goto LABEL_67;
    }
    uint64_t v31 = MEMORY[0x263F8E960];
    *(void *)(v26 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v26 + 104) = v31;
    *(_DWORD *)(v26 + 72) = v30;
    *(void *)(v26 + 136) = MEMORY[0x263F8D310];
    *(void *)(v26 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v26 + 112) = 0x7465736E495FLL;
    *(void *)(v26 + 120) = 0xE600000000000000;
    LOBYTE(v64) = v61;
    uint64_t v74 = (unint64_t)&dword_245728000;
    id v68 = v26;
    uint64_t v69 = (int *)_signpostLog;
    int v71 = "AnimationState";
    uint64_t v72 = 14;
    double v73 = 2;
    uint64_t v65 = "Animation: (%p) [%d] %{public}@ updated";
    int v66 = 39;
    int v67 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v12, v9);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  uint64_t v7;
  float64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double *Value;
  char v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float64_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  char v42;
  void *v43;
  id v44;
  uint64_t v45;
  int CurrentAttribute;
  id v47;
  uint64_t Counter;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  unsigned __int8 v55;
  void (*v56)(void *, unint64_t, double);
  void *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  void *v64;
  id v65;
  uint64_t v66;
  int v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  float64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  long long v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  uint64_t v81;
  void v82[2];
  char v83;
  uint64_t v84;
  int *v85;
  char v86;
  const char *v87;
  uint64_t v88;
  char v89;
  float64x2_t v90;
  float64x2_t v91;

  float v7 = type metadata accessor for OSSignpostID();
  float v8 = *(double *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  float v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  float32x4_t v11 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 56))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v13) {
      float32x4_t v11 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 32) = 1;
LABEL_11:
    uint64_t v15 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    uint64_t v16 = vmulq_f64(*(float64x2_t *)a1, v15);
    int64_t v17 = vmulq_f64(*(float64x2_t *)(a1 + 16), v15);
    if (*(unsigned char *)(a4 + 48)) {
      goto LABEL_34;
    }
    double v18 = *(float64x2_t *)(a4 + 32);
    if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v16, *(float64x2_t *)(a4 + 16)), (int32x4_t)vceqq_f64(v17, v18))), 0xFuLL))))goto LABEL_34; {
    unint64_t v77 = *(_OWORD *)(a4 + 16);
    }
    float32x4_t v78 = v18;
    float32x4_t v79 = v17;
    __int32 v80 = v16;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v19 = swift_retain();
    char v20 = specialized find<A>(_:key:)(v19);
    if (v20)
    {
      unint64_t v21 = *(void *)(v20 + 72);
      swift_retain();
      swift_release();
      if (v21) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    unint64_t v22 = swift_retain();
    float v23 = specialized closure #1 in PropertyList.subscript.getter(v22);
    swift_release();
    if ((v23 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      unint64_t v21 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 32) == 1) {
    goto LABEL_11;
  }
  uint64_t v14 = *(void *)(a4 + 56);
  if (!v14) {
    return;
  }
  while (1)
  {
    unint64_t v39 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    id v40 = vmulq_f64(*(float64x2_t *)a1, v39);
    uint64_t v41 = vmulq_f64(*(float64x2_t *)(a1 + 16), v39);
    int v90 = v40;
    uint64_t v91 = v41;
    swift_retain();
    LOBYTE(v87) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v90, v11) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v53 = *(double *)(v14 + 72);
      v82[0] = *(void *)(v14 + 80);
      id v54 = *(unsigned int *)(v14 + 120);
      uint64_t v55 = *(unsigned char *)(v14 + 124);
      int v56 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      uint64_t v57 = static CoreGlue.shared;
      LOBYTE(v85) = v55;
      v56(v82, v54 | ((unint64_t)v55 << 32), v53);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    int v42 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v43 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      uint64_t v52 = swift_release();
      if (*(void *)(a4 + 56))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v52);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 56) = 0;
LABEL_50:
      uint64_t v58 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
      int8x16_t v59 = vmulq_f64(v90, v58);
      float32x4_t v60 = vmulq_f64(v91, v58);
      *(float64x2_t *)a1 = v59;
      *(float64x2_t *)(a1 + 16) = v60;
      *(unsigned char *)(a1 + 32) = 1;
      return;
    }
    v78.f64[0] = v8;
    swift_retain();
    uint64_t v44 = v43;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    int v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    *(void *)&float v8 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == LODWORD(v8))
    {
      __break(1u);
    }
    else
    {
      unint64_t v47 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      int v49 = MEMORY[0x263F8DA20];
      *(void *)(v45 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v45 + 64) = v49;
      *(void *)(v45 + 32) = Counter;
      uint64_t v50 = AGGraphGetCurrentAttribute();
      if (v50 != LODWORD(v8))
      {
        id v51 = MEMORY[0x263F8E960];
        *(void *)(v45 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v45 + 104) = v51;
        *(_DWORD *)(v45 + 72) = v50;
        *(void *)(v45 + 136) = MEMORY[0x263F8D310];
        *(void *)(v45 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v45 + 112) = 0x7463655274696E55;
        *(void *)(v45 + 120) = 0xE800000000000000;
        __int32 v86 = v42;
        uint64_t v84 = _signpostLog;
        __int32 v85 = &dword_245728000;
        __int32 v87 = "AnimationState";
        uint64_t v88 = 14;
        int v89 = 2;
        v82[0] = "Animation: (%p) [%d] %{public}@ ended";
        v82[1] = 37;
        __int32 v83 = 2;
        __int32 v81 = v45;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(*(void *)&v78.f64[0] + 8))(v10, v7);
        uint64_t v52 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 56)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    unint64_t v21 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    int8x16_t v24 = v80.f64[0] - *(double *)&v77;
    int8x16_t v25 = v80.f64[1] - *((double *)&v77 + 1);
    float v26 = v79.f64[0] - v78.f64[0];
    BOOL v27 = v79.f64[1] - v78.f64[1];
    float32x4_t v11 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 56)) {
      break;
    }
    type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>();
    swift_allocObject();
    swift_retain();
    float32x4_t v61 = swift_retain();
    char v62 = specialized AnimatorState.init(animation:interval:at:in:)(v61, v24, v25, v26, v27, v11);
    swift_retain();
    int v63 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    unsigned __int8 v76 = v63;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v64 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      *(void *)&unint64_t v77 = v21;
      v78.f64[0] = v8;
      swift_retain();
      uint64_t v65 = v64;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      int v66 = swift_allocObject();
      *(_OWORD *)(v66 + 16) = xmmword_2461BE2B0;
      int v67 = AGGraphGetCurrentAttribute();
      unsigned __int8 v75 = *MEMORY[0x263F288F8];
      if (v67 == v75) {
        goto LABEL_68;
      }
      id v68 = (id)AGGraphGetAttributeGraph();
      uint64_t v69 = AGGraphGetCounter();

      uint64_t v70 = MEMORY[0x263F8DA20];
      *(void *)(v66 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v66 + 64) = v70;
      *(void *)(v66 + 32) = v69;
      int v71 = AGGraphGetCurrentAttribute();
      if (v71 == v75) {
        goto LABEL_69;
      }
      uint64_t v72 = MEMORY[0x263F8E960];
      *(void *)(v66 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v66 + 104) = v72;
      *(_DWORD *)(v66 + 72) = v71;
      *(void *)(v66 + 136) = MEMORY[0x263F8D310];
      *(void *)(v66 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v66 + 112) = 0x7463655274696E55;
      *(void *)(v66 + 120) = 0xE800000000000000;
      LOBYTE(v81) = v76;
      v82[0] = &dword_245728000;
      uint64_t v84 = v66;
      __int32 v85 = (int *)_signpostLog;
      *(void *)&v90.f64[0] = "AnimationState";
      *(void *)&v90.f64[1] = 14;
      LOBYTE(v91.f64[0]) = 2;
      __int32 v87 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v88 = 39;
      int v89 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      double v73 = v78.f64[0];
      (*(void (**)(char *, uint64_t))(*(void *)&v78.f64[0] + 8))(v10, v7);
      float v8 = v73;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 56) = v62;
    if (v62)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
    uint64_t v16 = v80;
    int64_t v17 = v79;
LABEL_34:
    *(float64x2_t *)(a4 + 16) = v16;
    *(float64x2_t *)(a4 + 32) = v17;
    *(unsigned char *)(a4 + 48) = 0;
    uint64_t v14 = *(void *)(a4 + 56);
    if (!v14) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v90.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v21, v24, v25, v26, v27, v11);
  swift_retain();
  BOOL v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  unsigned __int8 v76 = v28;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  *(void *)&unint64_t v77 = v21;
  v78.f64[0] = v8;
  swift_retain();
  uint64_t v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2461BE2B0;
  uint64_t v32 = AGGraphGetCurrentAttribute();
  unsigned __int8 v75 = *MEMORY[0x263F288F8];
  if (v32 != v75)
  {
    uint64_t v33 = (id)AGGraphGetAttributeGraph();
    char v34 = AGGraphGetCounter();

    float v35 = MEMORY[0x263F8DA20];
    *(void *)(v31 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v31 + 64) = v35;
    *(void *)(v31 + 32) = v34;
    float v36 = AGGraphGetCurrentAttribute();
    if (v36 == v75) {
      goto LABEL_67;
    }
    uint64_t v37 = MEMORY[0x263F8E960];
    *(void *)(v31 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v31 + 104) = v37;
    *(_DWORD *)(v31 + 72) = v36;
    *(void *)(v31 + 136) = MEMORY[0x263F8D310];
    *(void *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 112) = 0x7463655274696E55;
    *(void *)(v31 + 120) = 0xE800000000000000;
    LOBYTE(v81) = v76;
    v82[0] = &dword_245728000;
    uint64_t v84 = v31;
    __int32 v85 = (int *)_signpostLog;
    *(void *)&v90.f64[0] = "AnimationState";
    *(void *)&v90.f64[1] = 14;
    LOBYTE(v91.f64[0]) = 2;
    __int32 v87 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v88 = 39;
    int v89 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    int v38 = v78.f64[0];
    (*(void (**)(char *, uint64_t))(*(void *)&v78.f64[0] + 8))(v10, v7);
    float v8 = v38;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 56)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  id v35;
  uint64_t v36;
  int CurrentAttribute;
  id v38;
  uint64_t Counter;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  void (*v47)(const char **, unint64_t, double);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void *v52;
  id v53;
  uint64_t v54;
  int v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  int *v72;
  char v73;
  const char *v74;
  uint64_t v75;
  char v76;
  int *v77;

  float v9 = type metadata accessor for OSSignpostID();
  float v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  int v13 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v15) {
      int v13 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 10) = 1;
LABEL_11:
    float v5 = *(double *)a1;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    float v4 = *(double *)(a4 + 16);
    if (v5 == v4) {
      goto LABEL_34;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    int64_t v17 = swift_retain();
    double v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    char v20 = swift_retain();
    unint64_t v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      uint64_t v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 10) == 1) {
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a4 + 32);
  if (!v16) {
    return;
  }
  while (1)
  {
    unint64_t v77 = *(int **)a1;
    swift_retain();
    LOBYTE(v74) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v77, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v44 = *(double *)(v16 + 48);
      id v68 = *(const char **)(v16 + 56);
      int v45 = *(unsigned int *)(v16 + 72);
      uint64_t v46 = *(unsigned char *)(v16 + 76);
      unint64_t v47 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      uint64_t v48 = static CoreGlue.shared;
      LOBYTE(v72) = v46;
      v47(&v68, v45 | ((unint64_t)v46 << 32), v44);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    uint64_t v33 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    char v34 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      id v43 = swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v43);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(void *)a1 = v77;
      *(unsigned char *)(a1 + 10) = 1;
      return;
    }
    int v66 = v10;
    swift_retain();
    float v35 = v34;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    float v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    float v10 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v10)
    {
      __break(1u);
    }
    else
    {
      int v38 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      id v40 = MEMORY[0x263F8DA20];
      *(void *)(v36 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v36 + 64) = v40;
      *(void *)(v36 + 32) = Counter;
      uint64_t v41 = AGGraphGetCurrentAttribute();
      if (v41 != v10)
      {
        int v42 = MEMORY[0x263F8E960];
        *(void *)(v36 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v36 + 104) = v42;
        *(_DWORD *)(v36 + 72) = v41;
        *(void *)(v36 + 136) = MEMORY[0x263F8D310];
        *(void *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v36 + 112) = 0x6C79745372756C42;
        *(void *)(v36 + 120) = 0xE900000000000065;
        double v73 = v33;
        int v71 = _signpostLog;
        uint64_t v72 = &dword_245728000;
        uint64_t v74 = "AnimationState";
        unsigned __int8 v75 = 14;
        unsigned __int8 v76 = 2;
        id v68 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v69 = 37;
        uint64_t v70 = 2;
        int v67 = v36;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
        id v43 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    float v4 = v5 - v4;
    int v13 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v49 = swift_retain();
    uint64_t v50 = specialized AnimatorState.init(animation:interval:at:in:)(v49, v4, v13);
    swift_retain();
    id v51 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    id v64 = v51;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v52 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v65 = v19;
      int v66 = v10;
      swift_retain();
      uint64_t v53 = v52;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      id v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_2461BE2B0;
      uint64_t v55 = AGGraphGetCurrentAttribute();
      int v63 = *MEMORY[0x263F288F8];
      if (v55 == v63) {
        goto LABEL_68;
      }
      int v56 = (id)AGGraphGetAttributeGraph();
      uint64_t v57 = AGGraphGetCounter();

      uint64_t v58 = MEMORY[0x263F8DA20];
      *(void *)(v54 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v54 + 64) = v58;
      *(void *)(v54 + 32) = v57;
      int8x16_t v59 = AGGraphGetCurrentAttribute();
      if (v59 == v63) {
        goto LABEL_69;
      }
      float32x4_t v60 = MEMORY[0x263F8E960];
      *(void *)(v54 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v54 + 104) = v60;
      *(_DWORD *)(v54 + 72) = v59;
      *(void *)(v54 + 136) = MEMORY[0x263F8D310];
      *(void *)(v54 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v54 + 112) = 0x6C79745372756C42;
      *(void *)(v54 + 120) = 0xE900000000000065;
      LOBYTE(v67) = v64;
      unint64_t v77 = &dword_245728000;
      int v71 = v54;
      uint64_t v72 = (int *)_signpostLog;
      uint64_t v74 = "AnimationState";
      unsigned __int8 v75 = 14;
      unsigned __int8 v76 = 2;
      id v68 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v69 = 39;
      uint64_t v70 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      float32x4_t v61 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
      float v10 = v61;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v50;
    if (v50)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v16 = *(void *)(a4 + 32);
    if (!v16) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v74) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain();
  unint64_t v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  id v64 = v22;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  float v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  uint64_t v65 = v19;
  int v66 = v10;
  swift_retain();
  int8x16_t v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  int8x16_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_2461BE2B0;
  float v26 = AGGraphGetCurrentAttribute();
  int v63 = *MEMORY[0x263F288F8];
  if (v26 != v63)
  {
    BOOL v27 = (id)AGGraphGetAttributeGraph();
    BOOL v28 = AGGraphGetCounter();

    uint64_t v29 = MEMORY[0x263F8DA20];
    *(void *)(v25 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v25 + 64) = v29;
    *(void *)(v25 + 32) = v28;
    uint64_t v30 = AGGraphGetCurrentAttribute();
    if (v30 == v63) {
      goto LABEL_67;
    }
    uint64_t v31 = MEMORY[0x263F8E960];
    *(void *)(v25 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v25 + 104) = v31;
    *(_DWORD *)(v25 + 72) = v30;
    *(void *)(v25 + 136) = MEMORY[0x263F8D310];
    *(void *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v25 + 112) = 0x6C79745372756C42;
    *(void *)(v25 + 120) = 0xE900000000000065;
    LOBYTE(v67) = v64;
    unint64_t v77 = &dword_245728000;
    int v71 = v25;
    uint64_t v72 = (int *)_signpostLog;
    uint64_t v74 = "AnimationState";
    unsigned __int8 v75 = 14;
    unsigned __int8 v76 = 2;
    id v68 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v69 = 39;
    uint64_t v70 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v32 = v66;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
    float v10 = v32;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  id v35;
  uint64_t v36;
  int CurrentAttribute;
  id v38;
  uint64_t Counter;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  void (*v47)(const char **, unint64_t, double);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void *v52;
  id v53;
  uint64_t v54;
  int v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  int *v72;
  char v73;
  const char *v74;
  uint64_t v75;
  char v76;
  int *v77;

  float v9 = type metadata accessor for OSSignpostID();
  float v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  int v13 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v15) {
      int v13 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 8) = 1;
LABEL_11:
    float v5 = *(double *)a1;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    float v4 = *(double *)(a4 + 16);
    if (v5 == v4) {
      goto LABEL_34;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    int64_t v17 = swift_retain();
    double v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    char v20 = swift_retain();
    unint64_t v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      uint64_t v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a4 + 32);
  if (!v16) {
    return;
  }
  while (1)
  {
    unint64_t v77 = *(int **)a1;
    swift_retain();
    LOBYTE(v74) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v77, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v44 = *(double *)(v16 + 48);
      id v68 = *(const char **)(v16 + 56);
      int v45 = *(unsigned int *)(v16 + 72);
      uint64_t v46 = *(unsigned char *)(v16 + 76);
      unint64_t v47 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      uint64_t v48 = static CoreGlue.shared;
      LOBYTE(v72) = v46;
      v47(&v68, v45 | ((unint64_t)v46 << 32), v44);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    uint64_t v33 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    char v34 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      id v43 = swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v43);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(void *)a1 = v77;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
    int v66 = v10;
    swift_retain();
    float v35 = v34;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    float v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    float v10 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v10)
    {
      __break(1u);
    }
    else
    {
      int v38 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      id v40 = MEMORY[0x263F8DA20];
      *(void *)(v36 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v36 + 64) = v40;
      *(void *)(v36 + 32) = Counter;
      uint64_t v41 = AGGraphGetCurrentAttribute();
      if (v41 != v10)
      {
        int v42 = MEMORY[0x263F8E960];
        *(void *)(v36 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v36 + 104) = v42;
        *(_DWORD *)(v36 + 72) = v41;
        *(void *)(v36 + 136) = MEMORY[0x263F8D310];
        *(void *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v36 + 112) = 0x656C62756F44;
        *(void *)(v36 + 120) = 0xE600000000000000;
        double v73 = v33;
        int v71 = _signpostLog;
        uint64_t v72 = &dword_245728000;
        uint64_t v74 = "AnimationState";
        unsigned __int8 v75 = 14;
        unsigned __int8 v76 = 2;
        id v68 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v69 = 37;
        uint64_t v70 = 2;
        int v67 = v36;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
        id v43 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    float v4 = v5 - v4;
    int v13 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<Double>(0, &lazy cache variable for type metadata for AnimatorState<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v49 = swift_retain();
    uint64_t v50 = specialized AnimatorState.init(animation:interval:at:in:)(v49, v4, v13);
    swift_retain();
    id v51 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    id v64 = v51;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v52 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v65 = v19;
      int v66 = v10;
      swift_retain();
      uint64_t v53 = v52;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      id v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_2461BE2B0;
      uint64_t v55 = AGGraphGetCurrentAttribute();
      int v63 = *MEMORY[0x263F288F8];
      if (v55 == v63) {
        goto LABEL_68;
      }
      int v56 = (id)AGGraphGetAttributeGraph();
      uint64_t v57 = AGGraphGetCounter();

      uint64_t v58 = MEMORY[0x263F8DA20];
      *(void *)(v54 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v54 + 64) = v58;
      *(void *)(v54 + 32) = v57;
      int8x16_t v59 = AGGraphGetCurrentAttribute();
      if (v59 == v63) {
        goto LABEL_69;
      }
      float32x4_t v60 = MEMORY[0x263F8E960];
      *(void *)(v54 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v54 + 104) = v60;
      *(_DWORD *)(v54 + 72) = v59;
      *(void *)(v54 + 136) = MEMORY[0x263F8D310];
      *(void *)(v54 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v54 + 112) = 0x656C62756F44;
      *(void *)(v54 + 120) = 0xE600000000000000;
      LOBYTE(v67) = v64;
      unint64_t v77 = &dword_245728000;
      int v71 = v54;
      uint64_t v72 = (int *)_signpostLog;
      uint64_t v74 = "AnimationState";
      unsigned __int8 v75 = 14;
      unsigned __int8 v76 = 2;
      id v68 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v69 = 39;
      uint64_t v70 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      float32x4_t v61 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
      float v10 = v61;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v50;
    if (v50)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v16 = *(void *)(a4 + 32);
    if (!v16) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v74) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain();
  unint64_t v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  id v64 = v22;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  float v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  uint64_t v65 = v19;
  int v66 = v10;
  swift_retain();
  int8x16_t v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  int8x16_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_2461BE2B0;
  float v26 = AGGraphGetCurrentAttribute();
  int v63 = *MEMORY[0x263F288F8];
  if (v26 != v63)
  {
    BOOL v27 = (id)AGGraphGetAttributeGraph();
    BOOL v28 = AGGraphGetCounter();

    uint64_t v29 = MEMORY[0x263F8DA20];
    *(void *)(v25 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v25 + 64) = v29;
    *(void *)(v25 + 32) = v28;
    uint64_t v30 = AGGraphGetCurrentAttribute();
    if (v30 == v63) {
      goto LABEL_67;
    }
    uint64_t v31 = MEMORY[0x263F8E960];
    *(void *)(v25 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v25 + 104) = v31;
    *(_DWORD *)(v25 + 72) = v30;
    *(void *)(v25 + 136) = MEMORY[0x263F8D310];
    *(void *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v25 + 112) = 0x656C62756F44;
    *(void *)(v25 + 120) = 0xE600000000000000;
    LOBYTE(v67) = v64;
    unint64_t v77 = &dword_245728000;
    int v71 = v25;
    uint64_t v72 = (int *)_signpostLog;
    uint64_t v74 = "AnimationState";
    unsigned __int8 v75 = 14;
    unsigned __int8 v76 = 2;
    id v68 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v69 = 39;
    uint64_t v70 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v32 = v66;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v9);
    float v10 = v32;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  char v40;
  void *v41;
  id v42;
  uint64_t v43;
  int CurrentAttribute;
  id v45;
  uint64_t Counter;
  uint64_t v47;
  int v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  unsigned __int8 v52;
  void (*v53)(void *, unint64_t, double);
  void *v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  id v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  void v75[2];
  char v76;
  uint64_t v77;
  int *v78;
  char v79;
  const char *v80;
  uint64_t v81;
  char v82;
  float64x2_t v83;
  long long v84;

  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 56))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 32) = 1;
LABEL_11:
    float v8 = *(double *)a1;
    float v9 = *(double *)(a1 + 8);
    float v10 = *(double *)(a1 + 16);
    unint64_t v22 = *(double *)(a1 + 24);
    if (*(unsigned char *)(a4 + 48)) {
      goto LABEL_37;
    }
    float v4 = *(double *)(a4 + 32);
    float v5 = *(double *)(a4 + 40);
    float v7 = *(double *)(a4 + 16);
    float v6 = *(double *)(a4 + 24);
    if (v8 == v7 && v9 == v6 && v10 == v4 && v22 == v5) {
      goto LABEL_37;
    }
    double v73 = *(double *)(a1 + 24);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    float v23 = swift_retain();
    int8x16_t v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      int8x16_t v25 = *(void *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    float v26 = swift_retain();
    BOOL v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      int8x16_t v25 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 32) == 1) {
    goto LABEL_11;
  }
  unint64_t v21 = *(void *)(a4 + 56);
  if (!v21) {
    return;
  }
  while (1)
  {
    unint64_t v39 = *(_OWORD *)(a1 + 16);
    __int32 v83 = *(float64x2_t *)a1;
    uint64_t v84 = v39;
    swift_retain();
    LOBYTE(v80) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v83, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v50 = *(double *)(v21 + 72);
      v75[0] = *(void *)(v21 + 80);
      id v51 = *(unsigned int *)(v21 + 120);
      uint64_t v52 = *(unsigned char *)(v21 + 124);
      uint64_t v53 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      id v54 = static CoreGlue.shared;
      LOBYTE(v78) = v52;
      v53(v75, v51 | ((unint64_t)v52 << 32), v50);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    id v40 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v41 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (*(void *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_52:
      swift_release();
      *(void *)(a4 + 56) = 0;
LABEL_53:
      uint64_t v55 = v84;
      *(float64x2_t *)a1 = v83;
      *(_OWORD *)(a1 + 16) = v55;
      *(unsigned char *)(a1 + 32) = 1;
      return;
    }
    uint64_t v72 = v15;
    swift_retain();
    int v42 = v41;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    id v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_2461BE2B0;
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    uint64_t v15 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v15)
    {
      __break(1u);
    }
    else
    {
      int v45 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      unint64_t v47 = MEMORY[0x263F8DA20];
      *(void *)(v43 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v43 + 64) = v47;
      *(void *)(v43 + 32) = Counter;
      uint64_t v48 = AGGraphGetCurrentAttribute();
      if (v48 != v15)
      {
        int v49 = MEMORY[0x263F8E960];
        *(void *)(v43 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v43 + 104) = v49;
        *(_DWORD *)(v43 + 72) = v48;
        *(void *)(v43 + 136) = MEMORY[0x263F8D310];
        *(void *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v43 + 112) = 0x746365524743;
        *(void *)(v43 + 120) = 0xE600000000000000;
        float32x4_t v79 = v40;
        unint64_t v77 = _signpostLog;
        float32x4_t v78 = &dword_245728000;
        __int32 v80 = "AnimationState";
        __int32 v81 = 14;
        __int32 v82 = 2;
        v75[0] = "Animation: (%p) [%d] %{public}@ ended";
        v75[1] = 37;
        unsigned __int8 v76 = 2;
        uint64_t v74 = v43;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (*(void *)(a4 + 56)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    int8x16_t v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    float v7 = v8 - v7;
    float v6 = v9 - v6;
    float v4 = v10 - v4;
    float v5 = v73 - v5;
    double v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 56)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    int v56 = swift_retain();
    uint64_t v57 = specialized AnimatorState.init(animation:interval:at:in:)(v56, v7, v6, v4, v5, v18);
    swift_retain();
    uint64_t v58 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    uint64_t v70 = v58;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int8x16_t v59 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      int v71 = v25;
      uint64_t v72 = v15;
      swift_retain();
      float32x4_t v60 = v59;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      float32x4_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_2461BE2B0;
      char v62 = AGGraphGetCurrentAttribute();
      uint64_t v69 = *MEMORY[0x263F288F8];
      if (v62 == v69) {
        goto LABEL_71;
      }
      int v63 = (id)AGGraphGetAttributeGraph();
      id v64 = AGGraphGetCounter();

      uint64_t v65 = MEMORY[0x263F8DA20];
      *(void *)(v61 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v61 + 64) = v65;
      *(void *)(v61 + 32) = v64;
      int v66 = AGGraphGetCurrentAttribute();
      if (v66 == v69) {
        goto LABEL_72;
      }
      int v67 = MEMORY[0x263F8E960];
      *(void *)(v61 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v61 + 104) = v67;
      *(_DWORD *)(v61 + 72) = v66;
      *(void *)(v61 + 136) = MEMORY[0x263F8D310];
      *(void *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v61 + 112) = 0x746365524743;
      *(void *)(v61 + 120) = 0xE600000000000000;
      LOBYTE(v74) = v70;
      v75[0] = &dword_245728000;
      unint64_t v77 = v61;
      float32x4_t v78 = (int *)_signpostLog;
      *(void *)&v83.f64[0] = "AnimationState";
      *(void *)&v83.f64[1] = 14;
      LOBYTE(v84) = 2;
      __int32 v80 = "Animation: (%p) [%d] %{public}@ started";
      __int32 v81 = 39;
      __int32 v82 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      id v68 = v72;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
      uint64_t v15 = v68;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 56) = v57;
    if (v57)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    unint64_t v22 = v73;
LABEL_37:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(double *)(a4 + 32) = v10;
    *(double *)(a4 + 40) = v22;
    *(unsigned char *)(a4 + 48) = 0;
    unint64_t v21 = *(void *)(a4 + 56);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v83.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v7, v6, v4, v5, v18);
  swift_retain();
  BOOL v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v70 = v28;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  int v71 = v25;
  uint64_t v72 = v15;
  swift_retain();
  uint64_t v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2461BE2B0;
  uint64_t v32 = AGGraphGetCurrentAttribute();
  uint64_t v69 = *MEMORY[0x263F288F8];
  if (v32 != v69)
  {
    uint64_t v33 = (id)AGGraphGetAttributeGraph();
    char v34 = AGGraphGetCounter();

    float v35 = MEMORY[0x263F8DA20];
    *(void *)(v31 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v31 + 64) = v35;
    *(void *)(v31 + 32) = v34;
    float v36 = AGGraphGetCurrentAttribute();
    if (v36 == v69) {
      goto LABEL_70;
    }
    uint64_t v37 = MEMORY[0x263F8E960];
    *(void *)(v31 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v31 + 104) = v37;
    *(_DWORD *)(v31 + 72) = v36;
    *(void *)(v31 + 136) = MEMORY[0x263F8D310];
    *(void *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 112) = 0x746365524743;
    *(void *)(v31 + 120) = 0xE600000000000000;
    LOBYTE(v74) = v70;
    v75[0] = &dword_245728000;
    unint64_t v77 = v31;
    float32x4_t v78 = (int *)_signpostLog;
    *(void *)&v83.f64[0] = "AnimationState";
    *(void *)&v83.f64[1] = 14;
    LOBYTE(v84) = 2;
    __int32 v80 = "Animation: (%p) [%d] %{public}@ updated";
    __int32 v81 = 39;
    __int32 v82 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    int v38 = v72;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
    uint64_t v15 = v38;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 56)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

SwiftUI::ResolvedGradientVector __swiftcall ResolvedGradientVector.init(_:)(SwiftUI::ResolvedGradient a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1.stops._rawValue;
  char v4 = *((unsigned char *)a1.stops._rawValue + 8);
  float v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)a1.stops._rawValue + 16), 0, MEMORY[0x263F8EE78]);
  uint64_t v6 = *(void *)(v3 + 16);
  if (v6)
  {
    uint64_t v21 = v2;
    swift_bridgeObjectRetain();
    uint64_t v9 = v3 + 36;
    do
    {
      v7.i32[0] = *(_DWORD *)(v9 - 4);
      uint64_t v10 = *(void *)(v9 + 12);
      uint64_t v11 = *(void *)(v9 + 20);
      uint64_t v12 = *(void *)(v9 + 28);
      __int8 v13 = *(unsigned char *)(v9 + 36);
      ResolvedGradient.ColorSpace.convertIn(_:)((float *)v22.i32, v7, *(float *)v9, *(_DWORD *)(v9 + 4), *(float *)(v9 + 8), v8);
      int8x16_t v7 = v22;
      unint64_t v15 = v5[2];
      unint64_t v14 = v5[3];
      if (v15 >= v14 >> 1)
      {
        int8x16_t v20 = v22;
        int64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v5);
        int8x16_t v7 = v20;
        float v5 = v17;
      }
      _OWORD v5[2] = v15 + 1;
      uint64_t v16 = (int8x16_t *)&v5[6 * v15];
      _OWORD v16[2] = v7;
      v16[3].i64[0] = v10;
      v16[3].i64[1] = v11;
      v16[4].i64[0] = v12;
      v16[4].i8[8] = v13;
      v9 += 48;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    uint64_t v2 = v21;
  }
  double v18 = (void *)swift_bridgeObjectRelease();
  *(void *)uint64_t v2 = v5;
  *(unsigned char *)(v2 + 8) = v4;
  result.stops._rawuint64_t Value = v18;
  result.colorSpace = v19;
  return result;
}

CGColorRef protocol witness for ColorProvider.staticColor.getter in conformance Color.OpacityColor()
{
  double v1 = v0[1];
  uint64_t v2 = (CGColor *)(*(uint64_t (**)(void))(**(void **)v0 + 120))();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  Alphfloat64_t a = CGColorGetAlpha(v2);
  CGColorRef result = CGColorCreateCopyWithAlpha(v3, v1 * Alpha);
  if (result)
  {
    CGColorRef v6 = result;

    return v6;
  }
  __break(1u);
  return result;
}

uint64_t Color.cgColor.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t ColorBox.staticColor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 168) + 32))(*(void *)(*(void *)v0 + 160));
}

uint64_t protocol witness for ColorProvider.staticColor.getter in conformance ResolvedColorProvider()
{
  float v1 = *v0;
  float v2 = v0[1];
  float v3 = v0[2];
  float v4 = v0[3];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  return specialized ObjectCache.subscript.getter(v1, v2, v3, v4);
}

uint64_t Color.Resolved.kitColor.getter(float a1, float a2, float a3, float a4)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  return specialized ObjectCache.subscript.getter(a1, a2, a3, a4);
}

uint64_t Color.Resolved.cgColor.getter(float a1, float a2, float a3, float a4)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  return specialized ObjectCache.subscript.getter(a1, a2, a3, a4);
}

uint64_t specialized static GradientLayer.clippedValues(gradient:function:)(uint64_t *a1, long long *a2)
{
  uint64_t v93 = *a1;
  unsigned int v89 = *((unsigned __int8 *)a1 + 8);
  outlined init with take of GradientLayer.Function(a2, (uint64_t)v116);
  double v2 = 1.0;
  double v3 = 0.0;
  if (v119 - 1 <= 1 && v117 != 0.0)
  {
    if (v117 >= v118)
    {
      double v2 = v118 / v117 + -1.0;
      double v3 = 1.0;
    }
    else
    {
      double v2 = (v118 - v117) / v118;
      double v3 = v117 / v118;
    }
  }
  double v92 = v3;
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v115 = MEMORY[0x263F8EE78];
  uint64_t v114 = MEMORY[0x263F8EE78];
  uint64_t v5 = swift_allocObject();
  double v8 = v92;
  unint64_t v9 = v5;
  *(void *)(v5 + 16) = v4;
  uint64_t v10 = (void *)(v5 + 16);
  if (v92 < 0.0) {
    double v11 = 0.0;
  }
  else {
    double v11 = v92;
  }
  if (v11 > 1.0) {
    double v11 = 1.0;
  }
  double v12 = v2 + v92;
  if (v2 + v92 < 0.0) {
    double v12 = 0.0;
  }
  if (v12 > 1.0) {
    double v12 = 1.0;
  }
  if (v12 >= v11) {
    double v13 = v11;
  }
  else {
    double v13 = v12;
  }
  if (v11 > v12) {
    *(double *)v7.i64 = v11;
  }
  else {
    *(double *)v7.i64 = v12;
  }
  unint64_t v14 = *(void *)(v93 + 16);
  if (v14)
  {
    __int32 v87 = (void *)(v5 + 16);
    uint64_t v88 = v5;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    char v20 = 0;
    unint64_t v21 = 0;
    uint64_t v100 = v93 + 32;
    char v22 = 1;
    double v23 = 0.0;
    uint64_t v24 = v93;
    double v91 = v13;
    double v94 = *(double *)v7.i64;
    unint64_t v90 = *(void *)(v93 + 16);
    while (1)
    {
      if (v2 <= 0.0) {
        unint64_t v31 = v14 + v15 - 1;
      }
      else {
        unint64_t v31 = v21;
      }
      if ((v31 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      unint64_t v32 = *(void *)(v24 + 16);
      if (v31 >= v32) {
        goto LABEL_85;
      }
      double v33 = v23;
      uint64_t v34 = v100 + 48 * v31;
      float v25 = *(float *)v34;
      float v26 = *(float *)(v34 + 4);
      unsigned __int32 v27 = *(unsigned __int32 *)(v34 + 8);
      float v35 = *(float *)(v34 + 12);
      uint64_t v28 = *(void *)(v34 + 24);
      uint64_t v29 = *(void *)(v34 + 32);
      char v30 = *(unsigned char *)(v34 + 40);
      double v23 = v8 + v2 * *(double *)(v34 + 16);
      if (v23 >= v13)
      {
        if (*(double *)v7.i64 >= v23) {
          goto LABEL_49;
        }
        if (v15)
        {
          unint64_t v38 = v21 - 1;
          if (v2 <= 0.0) {
            unint64_t v38 = v14 + v15;
          }
          if (v38 >= v32) {
            goto LABEL_88;
          }
          uint64_t v39 = v100 + 48 * v38;
          *(double *)v6.i64 = v2 * *(double *)(v39 + 16);
          double v40 = v8 + *(double *)v6.i64;
          if (v8 + *(double *)v6.i64 <= *(double *)v7.i64)
          {
            unsigned __int32 v41 = *(_DWORD *)(v39 + 8);
            float v42 = *(float *)(v39 + 12);
            v6.i32[0] = *(_DWORD *)v39;
            float v43 = *(float *)(v39 + 4);
            *(double *)v7.i64 = v94 - v40;
            float v44 = (v94 - v40) / (v23 - v40);
            float v97 = v44;
            unint64_t v9 = v89;
            v112.i8[0] = v89;
            __int32 v45 = LODWORD(v25);
            float v46 = v26;
            unsigned __int32 v47 = v27;
            uint64_t v104 = v29;
            uint64_t v107 = v28;
            char v101 = v30;
            ResolvedGradient.ColorSpace.convertIn(_:)(v113[0].f32, v6, v43, v41, v42, v7);
            v110.i8[0] = v89;
            v48.i32[0] = v45;
            ResolvedGradient.ColorSpace.convertIn(_:)(v112.f32, v48, v46, v47, v35, v49);
            char v111 = v89;
            float32x4_t v110 = vaddq_f32(vmulq_n_f32(v113[0], 1.0 - v97), vmulq_n_f32(v112, v97));
            *(float *)v6.i32 = ResolvedGradient.ColorSpace.convertOut(_:)(v110.f32);
            uint64_t v24 = v93;
            char v30 = v101;
            uint64_t v29 = v104;
            uint64_t v28 = v107;
            unint64_t v14 = v90;
            *(double *)v7.i64 = v94;
            float v25 = *(float *)v6.i32;
            float v26 = v50;
            unsigned __int32 v27 = v51;
            float v35 = v52;
            double v13 = v91;
            double v8 = v92;
          }
        }
        double v23 = *(double *)v7.i64;
        if (v22) {
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v36 = v21 + 1;
        if (v21 + 1 >= v14)
        {
          double v23 = v13;
LABEL_49:
          if (v22) {
            goto LABEL_25;
          }
          goto LABEL_50;
        }
        if (v2 <= 0.0) {
          unint64_t v36 = v14 + v15 - 2;
        }
        if (v36 >= v32) {
          goto LABEL_86;
        }
        uint64_t v37 = v100 + 48 * v36;
        *(double *)v6.i64 = v8 + v2 * *(double *)(v37 + 16);
        if (v13 <= *(double *)v6.i64)
        {
          unsigned __int32 v70 = *(_DWORD *)(v37 + 8);
          float v69 = *(float *)(v37 + 12);
          __int32 v72 = *(_DWORD *)v37;
          float v71 = *(float *)(v37 + 4);
          *(double *)v6.i64 = (v13 - v23) / (*(double *)v6.i64 - v23);
          *(float *)v6.i32 = *(double *)v6.i64;
          float v99 = *(float *)v6.i32;
          unint64_t v9 = v89;
          v112.i8[0] = v89;
          *(float *)v6.i32 = v25;
          uint64_t v106 = v29;
          uint64_t v109 = v28;
          char v103 = v30;
          ResolvedGradient.ColorSpace.convertIn(_:)(v113[0].f32, v6, v26, v27, v35, v7);
          v110.i8[0] = v89;
          v73.i32[0] = v72;
          ResolvedGradient.ColorSpace.convertIn(_:)(v112.f32, v73, v71, v70, v69, v74);
          char v111 = v89;
          float32x4_t v110 = vaddq_f32(vmulq_n_f32(v113[0], 1.0 - v99), vmulq_n_f32(v112, v99));
          *(float *)v6.i32 = ResolvedGradient.ColorSpace.convertOut(_:)(v110.f32);
          uint64_t v24 = v93;
          char v30 = v103;
          uint64_t v29 = v106;
          uint64_t v28 = v109;
          unint64_t v14 = v90;
          *(double *)v7.i64 = v94;
          float v25 = *(float *)v6.i32;
          float v26 = v75;
          unsigned __int32 v27 = v76;
          float v35 = v77;
          double v13 = v91;
          double v8 = v92;
          double v23 = v91;
          if (v22) {
            goto LABEL_25;
          }
        }
        else
        {
          double v23 = v13;
          if (v22) {
            goto LABEL_25;
          }
        }
      }
LABEL_50:
      char v102 = v30;
      uint64_t v105 = v29;
      uint64_t v108 = v28;
      float v95 = *(float *)&v27;
      float v96 = v26;
      float v98 = v25;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v33);
      MEMORY[0x24C522D60]();
      if (*(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      unint64_t v9 = specialized ObjectCache.subscript.getter(*(float *)&v16, *((float *)&v16 + 1), *(float *)&v17, *((float *)&v17 + 1));
      MEMORY[0x24C522D60]();
      if (*(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v20)
      {
        uint64_t v24 = v93;
        double v13 = v91;
        double v8 = v92;
        *(double *)v7.i64 = v94;
        unint64_t v14 = v90;
        float v26 = v96;
        float v25 = v98;
        *(float *)&unsigned __int32 v27 = v95;
        uint64_t v29 = v105;
        uint64_t v28 = v108;
        char v30 = v102;
        if (v89 != 2) {
          goto LABEL_25;
        }
        v113[0].i8[0] = 2;
        v6.i32[0] = v16;
        *(float *)v7.i32 = v96;
        ResolvedGradient.ColorSpace.mix(_:_:by:)(v6, *((float *)&v16 + 1), *(float *)&v17, *((float *)&v17 + 1), v98, v7, v95, v35, 0.5);
        float v54 = v53;
        float v56 = v55;
        float v58 = v57;
        float v60 = v59;
        objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v33 + (v23 - v33) * 0.5);
        MEMORY[0x24C522D60]();
        if (*(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        specialized ObjectCache.subscript.getter(v54, v56, v58, v60);
        MEMORY[0x24C522D60]();
        unint64_t v9 = *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v9 >= *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        if (v115 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v62 = v78 - 1;
          if (__OFSUB__(v78, 1)) {
            goto LABEL_87;
          }
        }
        else
        {
          uint64_t v61 = *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v62 = v61 - 1;
          if (__OFSUB__(v61, 1)) {
            goto LABEL_87;
          }
        }
        addMissingInterpolations #1 (to:) in static GradientLayer.clippedValues(gradient:function:)(v62, v88);
        id v63 = objc_allocWithZone(MEMORY[0x263F15808]);
        LODWORD(v65) = HIDWORD(v18);
        LODWORD(v64) = v18;
        LODWORD(v67) = HIDWORD(v19);
        LODWORD(v66) = v19;
        objc_msgSend(v63, sel_initWithControlPoints__::, v64, v65, v66, v67);
        uint64_t v68 = swift_beginAccess();
        MEMORY[0x24C522D60](v68);
        unint64_t v9 = *(void *)((*(void *)(v88 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v9 >= *(void *)((*(void *)(v88 + 16) & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
      }
      uint64_t v24 = v93;
      double v13 = v91;
      double v8 = v92;
      *(double *)v7.i64 = v94;
      unint64_t v14 = v90;
      float v26 = v96;
      float v25 = v98;
      *(float *)&unsigned __int32 v27 = v95;
      uint64_t v29 = v105;
      uint64_t v28 = v108;
      char v30 = v102;
LABEL_25:
      char v22 = 0;
      unint64_t v16 = LODWORD(v25) | ((unint64_t)LODWORD(v26) << 32);
      unint64_t v17 = v27 | ((unint64_t)LODWORD(v35) << 32);
      --v15;
      ++v21;
      uint64_t v18 = v28;
      uint64_t v19 = v29;
      char v20 = v30;
      if (!(v14 + v15))
      {
        float v79 = *(float *)&v27;
        float v80 = v26;
        float v81 = v25;
        objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v23);
        MEMORY[0x24C522D60]();
        if (*(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v10 = v87;
        unint64_t v9 = v88;
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        specialized ObjectCache.subscript.getter(v81, v80, v79, v35);
        MEMORY[0x24C522D60]();
        if (*(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        break;
      }
    }
  }
  swift_beginAccess();
  if (!(*v10 >> 62))
  {
    if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_81;
    }
LABEL_90:
    uint64_t v84 = v114;
    goto LABEL_91;
  }
LABEL_89:
  swift_bridgeObjectRetain();
  uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v85) {
    goto LABEL_90;
  }
LABEL_81:
  if (v115 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t result = v86 - 1;
    if (!__OFSUB__(v86, 1)) {
      goto LABEL_83;
    }
  }
  else
  {
    uint64_t v82 = *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = v82 - 1;
    if (!__OFSUB__(v82, 1))
    {
LABEL_83:
      addMissingInterpolations #1 (to:) in static GradientLayer.clippedValues(gradient:function:)(result, v9);
      uint64_t v84 = v114;
      swift_bridgeObjectRetain();
LABEL_91:
      swift_release();
      return v84;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized ObjectCache.subscript.getter(uint64_t (*a1)(uint64_t), float a2, float a3, float a4, float a5)
{
  uint64_t v8 = v5;
  *(float *)float v42 = a2;
  *(float *)&v42[1] = a3;
  *(float *)&v42[2] = a4;
  *(float *)&void v42[3] = a5;
  Hasher.init(_seed:)();
  Color.Resolved.hash(into:)(a2, a3, a4, a5);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = 4 * (v9 & 7);
  uint64_t v11 = *(void *)(v5 + 32);
  uint64_t v12 = v11 + 16;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 16));
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  uint64_t v15 = *(void *)(v11 + 24);
  uint64_t v16 = 160 * (v9 & 7) + 64;
  int v17 = 0x80000000;
  while (1)
  {
    unint64_t v18 = v10 + v13;
    if ((uint64_t)(v10 + v13) < 0)
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      uint64_t v7 = a1(v7);
LABEL_33:
      if (v13 < *(void *)(v7 + 16))
      {
        *(_DWORD *)(v7 + v16) = v8;
        *(void *)(v11 + 24) = v7;
        uint64_t v8 = v35;
        goto LABEL_35;
      }
      __break(1u);
      goto LABEL_49;
    }
    if (v18 >= *(void *)(v15 + 16)) {
      goto LABEL_44;
    }
    uint64_t v19 = v15 + v16;
    id v6 = *(id *)(v15 + v16 - 8);
    if (!v6) {
      break;
    }
    BOOL v20 = *(void *)(v19 - 16) == v9 && *(float *)(v19 - 32) == a2;
    if (v20 && *(float *)(v19 - 28) == a3 && *(float *)(v19 - 24) == a4 && *(float *)(v19 - 20) == a5)
    {
      uint64_t v35 = v8;
      uint64_t v8 = (*(_DWORD *)(v11 + 32) + 1);
      *(_DWORD *)(v11 + 32) = v8;
      uint64_t v7 = *(void *)(v11 + 24);
      id v27 = v6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v11 + 24) = v7;
      v13 += v10;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_33;
      }
      goto LABEL_47;
    }
    uint64_t v24 = *(void *)(v11 + 24);
    if (v18 >= *(void *)(v24 + 16)) {
      goto LABEL_46;
    }
    int v25 = *(_DWORD *)(v11 + 32) - *(_DWORD *)(v24 + v16);
    BOOL v26 = v17 < v25;
    if (v17 <= v25) {
      int v17 = *(_DWORD *)(v11 + 32) - *(_DWORD *)(v24 + v16);
    }
    if (v26) {
      unint64_t v14 = v13;
    }
    if (v13 == 3)
    {
LABEL_31:
      id v6 = 0;
      goto LABEL_35;
    }
LABEL_5:
    ++v13;
    v16 += 40;
    if (__OFADD__(v10, v13)) {
      goto LABEL_45;
    }
  }
  BOOL v20 = v17 == 0x7FFFFFFF;
  int v17 = 0x7FFFFFFF;
  if (v20)
  {
    if (v13 == 3) {
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v13 != 3)
  {
    unint64_t v14 = v13;
    goto LABEL_5;
  }
  id v6 = 0;
  unint64_t v14 = 3;
LABEL_35:
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 16));
  swift_release_n();
  if (v6) {
    return (uint64_t)v6;
  }
  (*(void (**)(void **__return_ptr, _DWORD *))(v8 + 16))(&v41, v42);
  uint64_t v11 = *(void *)(v8 + 32);
  uint64_t v8 = v11 + 16;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 16));
  BOOL v29 = __OFADD__(v10, v14);
  v14 += v10;
  if (v29)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  char v30 = v41;
  LODWORD(v7) = *(_DWORD *)(v11 + 32) + 1;
  *(_DWORD *)(v11 + 32) = v7;
  uint64_t v12 = *(void *)(v11 + 24);
  id v6 = v30;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v11 + 24) = v12;
  if (result)
  {
    if ((v14 & 0x8000000000000000) == 0) {
      goto LABEL_39;
    }
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_50:
  uint64_t result = a1(v12);
  uint64_t v12 = result;
  *(void *)(v11 + 24) = result;
  if ((v14 & 0x8000000000000000) != 0) {
    goto LABEL_51;
  }
LABEL_39:
  if (v14 < *(void *)(v12 + 16))
  {
    v32.i64[0] = LODWORD(a2);
    v32.i64[1] = LODWORD(a4);
    double v33 = (int8x16_t *)(v12 + 40 * v14);
    uint64_t v34 = (void *)v33[3].i64[1];
    v33[2] = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(LODWORD(a5), LODWORD(a3)), 0x20uLL), v32);
    v33[3].i64[0] = v9;
    v33[3].i64[1] = (uint64_t)v6;
    v33[4].i32[0] = v7;

    os_unfair_lock_unlock((os_unfair_lock_t)v8);
    swift_release_n();
    return (uint64_t)v6;
  }
LABEL_52:
  __break(1u);
  return result;
}

void Color.Resolved.hash(into:)(float a1, float a2, float a3, float a4)
{
  if ((LODWORD(a1) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v7 = LODWORD(a1);
  }
  else {
    Swift::UInt32 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((LODWORD(a2) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v8 = LODWORD(a2);
  }
  else {
    Swift::UInt32 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((LODWORD(a3) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v9 = LODWORD(a3);
  }
  else {
    Swift::UInt32 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((LODWORD(a4) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v10 = LODWORD(a4);
  }
  else {
    Swift::UInt32 v10 = 0;
  }
  Hasher._combine(_:)(v10);
}

CGColorRef closure #1 in variable initialization expression of static Color.Resolved.cache@<X0>(float *a1@<X0>, CGColorRef *a2@<X8>)
{
  float v4 = *a1;
  float v3 = a1[1];
  float v6 = a1[2];
  float v5 = a1[3];
  float v7 = -*a1;
  if (*a1 > 0.0) {
    float v7 = *a1;
  }
  if (v7 <= 0.0031308)
  {
    float v8 = v7 * 12.92;
  }
  else
  {
    float v8 = 1.0;
    if (v7 != 1.0) {
      float v8 = (float)(powf(v7, 0.41667) * 1.055) + -0.055;
    }
  }
  float v9 = -v8;
  if (v4 > 0.0) {
    float v9 = v8;
  }
  v17[0] = v9;
  float v10 = -v3;
  if (v3 > 0.0) {
    float v10 = v3;
  }
  if (v10 <= 0.0031308)
  {
    float v11 = v10 * 12.92;
  }
  else
  {
    float v11 = 1.0;
    if (v10 != 1.0) {
      float v11 = (float)(powf(v10, 0.41667) * 1.055) + -0.055;
    }
  }
  float v12 = -v11;
  if (v3 > 0.0) {
    float v12 = v11;
  }
  v17[1] = v12;
  float v13 = -v6;
  if (v6 > 0.0) {
    float v13 = v6;
  }
  if (v13 <= 0.0031308)
  {
    float v14 = v13 * 12.92;
  }
  else
  {
    float v14 = 1.0;
    if (v13 != 1.0) {
      float v14 = (float)(powf(v13, 0.41667) * 1.055) + -0.055;
    }
  }
  float v15 = -v14;
  if (v6 > 0.0) {
    float v15 = v14;
  }
  void v17[2] = v15;
  v17[3] = v5;
  if (one-time initialization token for srgbExtended != -1) {
    swift_once();
  }
  CGColorRef result = CGColorCreate((CGColorSpaceRef)static Color.Resolved.srgbExtended, v17);
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

void ResolvedGradient.ColorSpace.mix(_:_:by:)(int8x16_t a1, float a2, float a3, float a4, float a5, int8x16_t a6, float a7, float a8, float a9)
{
  float v20 = *(float *)a6.i32;
  v27.i8[0] = *v17;
  __int8 v22 = v27.i8[0];
  ResolvedGradient.ColorSpace.convertIn(_:)(v28.f32, a1, a2, LODWORD(a3), a4, a6);
  *(float *)v23.i32 = a5;
  ResolvedGradient.ColorSpace.convertIn(_:)(v27.f32, v23, v20, LODWORD(a7), a8, v24);
  __int8 v26 = v22;
  float32x4_t v25 = vaddq_f32(vmulq_n_f32(v28, 1.0 - a9), vmulq_n_f32(v27, a9));
  ResolvedGradient.ColorSpace.convertOut(_:)(v25.f32);
}

float ResolvedGradient.ColorSpace.convertIn(_:)@<S0>(float *a1@<X8>, int8x16_t a2@<Q0>, float a3@<S1>, unsigned __int32 a4@<S2>, float a5@<S3>, int8x16_t a6@<Q5>)
{
  float v8 = a3;
  float v9 = *(float *)a2.i32;
  if (*v6)
  {
    if (*v6 != 1)
    {
      *(float *)a6.i32 = (float)((float)(*(float *)a2.i32 * 0.41222) + (float)(a3 * 0.53633))
                       + (float)(*(float *)&a4 * 0.051446);
      *(float *)a2.i32 = (float)((float)(*(float *)a2.i32 * 0.2119) + (float)(a3 * 0.6807))
                       + (float)(*(float *)&a4 * 0.1074);
      int8x16_t v31 = a2;
      int8x16_t v35 = a6;
      *(float *)a2.i32 = (float)((float)(v9 * 0.088302) + (float)(a3 * 0.28172)) + (float)(*(float *)&a4 * 0.62998);
      int8x16_t v27 = a2;
      *(float *)v11.i32 = powf(fabsf(*(float *)a6.i32), 0.33333);
      v12.i64[0] = 0x8000000080000000;
      v12.i64[1] = 0x8000000080000000;
      v35.i32[0] = vbslq_s8(v12, v11, v35).u32[0];
      *(float *)v13.i32 = powf(fabsf(*(float *)v31.i32), 0.33333);
      v14.i64[0] = 0x8000000080000000;
      v14.i64[1] = 0x8000000080000000;
      v31.i32[0] = vbslq_s8(v14, v13, v31).u32[0];
      *(float *)v15.i32 = powf(fabsf(*(float *)v27.i32), 0.33333);
      float v8 = *(float *)v31.i32;
      float v9 = *(float *)v35.i32;
      v16.i64[0] = 0x8000000080000000;
      v16.i64[1] = 0x8000000080000000;
      a4 = vbslq_s8(v16, v15, v27).u32[0];
    }
  }
  else
  {
    float v17 = -*(float *)a2.i32;
    if (v9 > 0.0) {
      float v17 = v9;
    }
    if (v17 <= 0.0031308)
    {
      float v18 = v17 * 12.92;
    }
    else
    {
      float v18 = 1.0;
      if (v17 != 1.0)
      {
        float v32 = v8;
        float v36 = v9;
        unsigned __int32 v28 = a4;
        float v19 = powf(v17, 0.41667);
        a4 = v28;
        float v8 = v32;
        float v9 = v36;
        float v18 = (float)(v19 * 1.055) + -0.055;
      }
    }
    if (v9 <= 0.0) {
      float v9 = -v18;
    }
    else {
      float v9 = v18;
    }
    float v20 = -v8;
    if (v8 > 0.0) {
      float v20 = v8;
    }
    if (v20 <= 0.0031308)
    {
      float v21 = v20 * 12.92;
    }
    else
    {
      float v21 = 1.0;
      if (v20 != 1.0)
      {
        float v33 = v8;
        float v37 = v9;
        unsigned __int32 v29 = a4;
        float v22 = powf(v20, 0.41667);
        a4 = v29;
        float v8 = v33;
        float v9 = v37;
        float v21 = (float)(v22 * 1.055) + -0.055;
      }
    }
    if (v8 <= 0.0) {
      float v8 = -v21;
    }
    else {
      float v8 = v21;
    }
    float v23 = -*(float *)&a4;
    if (*(float *)&a4 > 0.0) {
      float v23 = *(float *)&a4;
    }
    if (v23 <= 0.0031308)
    {
      float v24 = v23 * 12.92;
    }
    else
    {
      float v24 = 1.0;
      if (v23 != 1.0)
      {
        float v34 = v8;
        float v38 = v9;
        unsigned __int32 v30 = a4;
        float v25 = powf(v23, 0.41667);
        a4 = v30;
        float v8 = v34;
        float v9 = v38;
        float v24 = (float)(v25 * 1.055) + -0.055;
      }
    }
    if (*(float *)&a4 <= 0.0) {
      *(float *)&a4 = -v24;
    }
    else {
      *(float *)&a4 = v24;
    }
  }
  *a1 = v9 * a5;
  a1[1] = v8 * a5;
  float result = *(float *)&a4 * a5;
  a1[2] = *(float *)&a4 * a5;
  a1[3] = a5;
  return result;
}

float ResolvedGradient.ColorSpace.convertOut(_:)(float *a1)
{
  float v2 = *a1;
  float v3 = a1[1];
  float v5 = a1[2];
  float v4 = a1[3];
  if (v4 == 0.0)
  {
    if (*v1) {
      goto LABEL_3;
    }
  }
  else
  {
    float v2 = v2 * (float)(1.0 / v4);
    float v3 = v3 * (float)(1.0 / v4);
    float v5 = v5 * (float)(1.0 / v4);
    if (*v1)
    {
LABEL_3:
      if (*v1 != 1) {
        return (float)((float)(v5 * (float)(v5 * v5)) * 0.23097)
      }
             + (float)((float)((float)(v2 * (float)(v2 * v2)) * 4.0767)
                     + (float)((float)(v3 * (float)(v3 * v3)) * -3.3077));
      return v2;
    }
  }
  if (v2 <= 0.0) {
    float v6 = -v2;
  }
  else {
    float v6 = v2;
  }
  if (v6 <= 0.04045)
  {
    float v7 = v6 * 0.077399;
  }
  else
  {
    float v7 = 1.0;
    if (v6 != 1.0) {
      float v7 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
    }
  }
  if (v2 <= 0.0) {
    float v2 = -v7;
  }
  else {
    float v2 = v7;
  }
  if (v3 <= 0.0) {
    float v8 = -v3;
  }
  else {
    float v8 = v3;
  }
  if (v8 > 0.04045 && v8 != 1.0) {
    powf((float)(v8 * 0.94787) + 0.052133, 2.4);
  }
  if (v5 <= 0.0) {
    float v9 = -v5;
  }
  else {
    float v9 = v5;
  }
  if (v9 > 0.04045 && v9 != 1.0) {
    powf((float)(v9 * 0.94787) + 0.052133, 2.4);
  }
  return v2;
}

uint64_t outlined init with take of GradientLayer.Function(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

objc_class *closure #1 in variable initialization expression of static Color.Resolved.cache@<X0>(float *a1@<X0>, objc_class **a2@<X8>)
{
  float result = specialized static CoreColor.platformColor(resolvedColor:)(*a1, a1[1], a1[2], a1[3]);
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

objc_class *CorePlatformColorForRGBA(char a1, double a2, double a3, double a4, double a5)
{
  float result = (objc_class *)CoreColorClass(a1);
  if (result)
  {
    id v10 = [result alloc];
    return (objc_class *)[v10 initWithRed:a2 green:a3 blue:a4 alpha:a5];
  }
  return result;
}

float Color.Resolved.init(_:)(void *a1)
{
  LODWORD(result) = specialized Color.Resolved.init(failableCGColor:)(a1);
  if (v2) {
    return 0.0;
  }
  return result;
}

unint64_t specialized Color.Resolved.init(failableCGColor:)(void *a1)
{
  float v1 = a1;
  char v2 = CGColorGetColorSpace(v1);
  uint64_t v3 = one-time initialization token for srgb;
  float v4 = v2;
  float v5 = v4;
  if (v3 == -1)
  {
    if (!v4) {
      goto LABEL_4;
    }
  }
  else
  {
    swift_once();
    if (!v5)
    {
LABEL_4:
      uint64_t v7 = one-time initialization token for srgbExtended;
      float v8 = v5;
      if (v7 == -1)
      {
        if (v5) {
          goto LABEL_6;
        }
      }
      else
      {
        swift_once();
        if (v5)
        {
LABEL_6:
          uint64_t v9 = static Color.Resolved.srgbExtended;

          if (v8 == (CGColorSpace *)v9) {
            goto LABEL_7;
          }
LABEL_12:
          uint64_t v11 = one-time initialization token for displayP3;
          int8x16_t v12 = v8;
          if (v11 == -1)
          {
            if (!v2) {
              goto LABEL_15;
            }
          }
          else
          {
            swift_once();
            if (!v2) {
              goto LABEL_15;
            }
          }
          uint64_t v13 = static Color.Resolved.displayP3;

          if ((CGColorSpace *)v13 == v2)
          {
            char v10 = 2;
            goto LABEL_25;
          }
LABEL_15:
          uint64_t v14 = one-time initialization token for srgbLinear;
          CGColorRef CopyByMatchingToColorSpace = v12;
          if (v14 != -1) {
            goto LABEL_37;
          }
          if (!v5) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      char v2 = 0;
      goto LABEL_12;
    }
  }
  uint64_t v6 = static Color.Resolved.srgb;

  if (v5 != (CGColorSpace *)v6) {
    goto LABEL_4;
  }
LABEL_7:
  char v10 = 0;
LABEL_25:
  CGColorRef CopyByMatchingToColorSpace = v1;
  while (1)
  {
    CGColorRef CopyByMatchingToColorSpace = CopyByMatchingToColorSpace;
    uint64_t v20 = CGColorRef.components.getter();

    if (!v20) {
      break;
    }
    char v29 = v10;
    unint64_t v21 = *(void *)(v20 + 16);
    if (!v21)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v21 == 1) {
      goto LABEL_35;
    }
    if (v21 >= 3)
    {
      float v22 = *(double *)(v20 + 32);
      float v23 = *(double *)(v20 + 40);
      double v24 = *(double *)(v20 + 48);
      swift_bridgeObjectRelease();
      CGColorGetAlpha(v1);
      *(float *)&double v24 = v24;
      float v25 = specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v29, v22, v23, *(float *)&v24);
      unsigned int v27 = v26;

      return LODWORD(v25) | ((unint64_t)v27 << 32);
    }
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once();
    if (v5)
    {
LABEL_17:
      uint64_t v16 = static Color.Resolved.srgbLinear;

      if (CopyByMatchingToColorSpace == (CGColorRef)v16) {
        goto LABEL_23;
      }
    }
LABEL_18:
    uint64_t v17 = one-time initialization token for srgbExtendedLinear;
    float v18 = CopyByMatchingToColorSpace;
    if (v17 == -1)
    {
      if (!v5) {
        goto LABEL_21;
      }
    }
    else
    {
      swift_once();
      if (!v5) {
        goto LABEL_21;
      }
    }
    uint64_t v19 = static Color.Resolved.srgbExtendedLinear;

    if (v18 == (CGColor *)v19)
    {
LABEL_23:
      char v10 = 1;
      goto LABEL_25;
    }
LABEL_21:
    CGColorRef CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.Resolved.srgbExtended, kCGRenderingIntentDefault, v1, 0);

    if (!CopyByMatchingToColorSpace) {
      break;
    }
    char v10 = 0;
  }

  return 0;
}

unint64_t Color.Resolved.init(platformColor:)(void *a1)
{
  return specialized Color.Resolved.init(platformColor:)(a1);
}

unint64_t specialized Color.Resolved.init(platformColor:)(void *a1)
{
  v12[1] = *(double *)MEMORY[0x263EF8340];
  double v11 = 0.0;
  v12[0] = 0.0;
  uint64_t v9 = 0;
  double v10 = 0.0;
  if (CoreColorPlatformColorGetComponents(0, a1, (uint64_t)v12, (uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v9))
  {
    float v1 = v12[0];
    float v2 = v11;
    float v3 = v10;
    char v8 = 0;
    float v4 = specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v8, v1, v2, v3);
    unsigned int v6 = v5;
    swift_unknownObjectRelease();
    return LODWORD(v4) | ((unint64_t)v6 << 32);
  }
  else
  {
    swift_unknownObjectRelease();
    return 0;
  }
}

float specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(unsigned char *a1, float a2, float a3, float a4)
{
  float v6 = a2;
  if (*a1)
  {
    if (*a1 != 1) {
      return specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(a2, a3, a4);
    }
  }
  else
  {
    if (a2 <= 0.0) {
      float v7 = -a2;
    }
    else {
      float v7 = a2;
    }
    if (v7 <= 0.04045)
    {
      float v8 = v7 * 0.077399;
    }
    else
    {
      float v8 = 1.0;
      if (v7 != 1.0) {
        float v8 = powf((float)(v7 * 0.94787) + 0.052133, 2.4);
      }
    }
    if (v6 <= 0.0) {
      float v6 = -v8;
    }
    else {
      float v6 = v8;
    }
    if (a3 <= 0.0) {
      float v9 = -a3;
    }
    else {
      float v9 = a3;
    }
    if (v9 > 0.04045 && v9 != 1.0) {
      powf((float)(v9 * 0.94787) + 0.052133, 2.4);
    }
    if (a4 <= 0.0) {
      float v10 = -a4;
    }
    else {
      float v10 = a4;
    }
    if (v10 > 0.04045 && v10 != 1.0) {
      powf((float)(v10 * 0.94787) + 0.052133, 2.4);
    }
  }
  return v6;
}

uint64_t CoreColorPlatformColorGetComponents(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = CoreColorClass(a1);
  if (result)
  {
    return [a2 getRed:a3 green:a4 blue:a5 alpha:a6];
  }
  return result;
}

uint64_t CoreColorClass(char a1)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __CoreColorClass_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v3 = a1;
  if (CoreColorClass_once != -1) {
    dispatch_once(&CoreColorClass_once, block);
  }
  if (!CoreColorClass_isValid) {
    [MEMORY[0x263EFF940] raise:@"Invalid core color" format:&stru_26FA95DA0];
  }
  return CoreColorClass_colorClass;
}

objc_class *specialized static CoreColor.platformColor(resolvedColor:)(float a1, float a2, float a3, float a4)
{
  float v8 = -a1;
  if (a1 > 0.0) {
    float v8 = a1;
  }
  if (v8 <= 0.0031308)
  {
    float v9 = v8 * 12.92;
  }
  else
  {
    float v9 = 1.0;
    if (v8 != 1.0) {
      float v9 = (float)(powf(v8, 0.41667) * 1.055) + -0.055;
    }
  }
  float v10 = -a2;
  if (a2 > 0.0) {
    float v10 = a2;
  }
  if (v10 <= 0.0031308)
  {
    float v11 = v10 * 12.92;
  }
  else
  {
    float v11 = 1.0;
    if (v10 != 1.0) {
      float v11 = (float)(powf(v10, 0.41667) * 1.055) + -0.055;
    }
  }
  float v12 = -a3;
  if (a3 > 0.0) {
    float v12 = a3;
  }
  if (v12 <= 0.0031308)
  {
    float v13 = v12 * 12.92;
  }
  else
  {
    float v13 = 1.0;
    if (v12 != 1.0) {
      float v13 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
    }
  }
  if (a2 <= 0.0) {
    float v14 = -v11;
  }
  else {
    float v14 = v11;
  }
  float v15 = -v9;
  if (a1 > 0.0) {
    float v15 = v9;
  }
  float v16 = -v13;
  if (a3 > 0.0) {
    float v16 = v13;
  }
  double v17 = v15;

  return CorePlatformColorForRGBA(0, v17, v14, v16, a4);
}

float specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(float a1, float a2, float a3)
{
  float v6 = -a1;
  if (a1 > 0.0) {
    float v6 = a1;
  }
  if (v6 <= 0.04045)
  {
    float v7 = v6 * 0.077399;
  }
  else
  {
    float v7 = 1.0;
    if (v6 != 1.0) {
      float v7 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
    }
  }
  float v8 = -a2;
  if (a2 > 0.0) {
    float v8 = a2;
  }
  if (v8 <= 0.04045)
  {
    float v9 = v8 * 0.077399;
  }
  else
  {
    float v9 = 1.0;
    if (v8 != 1.0) {
      float v9 = powf((float)(v8 * 0.94787) + 0.052133, 2.4);
    }
  }
  if (a3 <= 0.0) {
    float v10 = -a3;
  }
  else {
    float v10 = a3;
  }
  if (v10 > 0.04045 && v10 != 1.0) {
    powf((float)(v10 * 0.94787) + 0.052133, 2.4);
  }
  if (a2 <= 0.0) {
    float v11 = -v9;
  }
  else {
    float v11 = v9;
  }
  if (a1 <= 0.0) {
    float v12 = -v7;
  }
  else {
    float v12 = v7;
  }
  return (float)(v12 * 1.2249) + (float)(v11 * -0.2247);
}

void addMissingInterpolations #1 (to:) in static GradientLayer.clippedValues(gradient:function:)(uint64_t a1, uint64_t a2)
{
  float v4 = (void *)(a2 + 16);
  swift_beginAccess();
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v7 = a1 - v10;
    if (a1 <= v10) {
      return;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = a1 - v6;
    if (a1 <= v6) {
      return;
    }
  }
  id v8 = objc_msgSend(self, sel_functionWithName_, *MEMORY[0x263F15EC8]);
  swift_beginAccess();
  do
  {
    id v9 = v8;
    MEMORY[0x24C522D60]();
    if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    --v7;
  }
  while (v7);
  swift_endAccess();
}

ValueMetadata *type metadata accessor for WidgetInterfaceIdiom()
{
  return &type metadata for WidgetInterfaceIdiom;
}

uint64_t base witness table accessor for _AttributeBody in ShapeStyledResponderFilter<A>()
{
  return swift_getWitnessTable();
}

uint64_t outlined release of ShapeStyledResponderData<Image.Resolved>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  unint64_t v5 = *(void **)(a1 + 168);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(unsigned char *)(a1 + 8));
  outlined consume of AccessibilityImageLabel?(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return a1;
}

uint64_t specialized static GraphicsImage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  int v3 = *(unsigned __int8 *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  double v6 = *(double *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 52);
  char v10 = *(unsigned char *)(a1 + 60);
  int v11 = *(unsigned __int8 *)(a1 + 96);
  int v12 = *(unsigned __int8 *)(a1 + 97);
  int v13 = *(unsigned __int8 *)(a1 + 98);
  int v14 = *(unsigned __int8 *)(a1 + 99);
  float v15 = *(void **)a2;
  int v16 = *(unsigned __int8 *)(a2 + 8);
  double v18 = *(double *)(a2 + 16);
  double v17 = *(double *)(a2 + 24);
  double v19 = *(double *)(a2 + 32);
  char v20 = *(unsigned char *)(a2 + 40);
  uint64_t v21 = *(void *)(a2 + 44);
  uint64_t v22 = *(void *)(a2 + 52);
  int v23 = *(unsigned __int8 *)(a2 + 60);
  float64x2_t v25 = *(float64x2_t *)(a1 + 64);
  float64x2_t v24 = *(float64x2_t *)(a1 + 80);
  float64x2_t v27 = *(float64x2_t *)(a2 + 64);
  float64x2_t v26 = *(float64x2_t *)(a2 + 80);
  int v28 = *(unsigned __int8 *)(a2 + 96);
  int v29 = *(unsigned __int8 *)(a2 + 97);
  int v30 = *(unsigned __int8 *)(a2 + 98);
  int v31 = *(unsigned __int8 *)(a2 + 99);
  if (v3 != 255)
  {
    float v50 = *(void **)a1;
    char v51 = v3;
    if (v16 != 255)
    {
      int v41 = v23;
      char v42 = v10;
      uint64_t v43 = v21;
      float64x2_t v44 = v27;
      float64x2_t v45 = v26;
      float64x2_t v46 = v25;
      float64x2_t v47 = v24;
      int v39 = v29;
      int v40 = v28;
      int v37 = v31;
      int v38 = v30;
      int v35 = v13;
      int v36 = v12;
      int v34 = v14;
      int8x16_t v48 = v15;
      char v49 = v16;
      outlined copy of GraphicsImage.Contents?(v2, v3);
      outlined copy of GraphicsImage.Contents(v2, v3);
      char v32 = specialized static GraphicsImage.Contents.== infix(_:_:)((uint64_t)&v50, (uint64_t)&v48);
      outlined consume of GraphicsImage.Contents(v50, v51);
      outlined consume of GraphicsImage.Contents?(v2, v3);
      uint64_t result = 0;
      if ((v32 & 1) == 0) {
        return result;
      }
      if (v5 != v18) {
        return result;
      }
      if (v4 != v17) {
        return result;
      }
      float64x2_t v25 = v46;
      float64x2_t v24 = v47;
      float64x2_t v27 = v44;
      float64x2_t v26 = v45;
      uint64_t v21 = v43;
      int v23 = v41;
      char v10 = v42;
      if (v6 != v19) {
        return result;
      }
LABEL_12:
      if (((0x507030104060200uLL >> (8 * v7)) & 7) == ((0x507030104060200uLL >> (8 * v20)) & 7))
      {
        if (v10)
        {
          if (!v23) {
            return 0;
          }
        }
        else
        {
          if (v23) {
            return 0;
          }
          uint64_t result = 0;
          if (*(float *)&v8 != *(float *)&v21
            || *((float *)&v8 + 1) != *((float *)&v21 + 1)
            || *(float *)&v9 != *(float *)&v22
            || *((float *)&v9 + 1) != *((float *)&v22 + 1))
          {
            return result;
          }
        }
        if (v11 == 2)
        {
          if (v40 != 2) {
            return 0;
          }
        }
        else
        {
          if (v40 == 2) {
            return 0;
          }
          uint64_t result = 0;
          if (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v25, v27), (int32x4_t)vceqq_f64(v24, v26)))), 0xFuLL))) & 1) != 0|| ((v40 ^ v11))
          {
            return result;
          }
        }
        uint64_t result = 0;
        if (v36 != v39 || v35 != v38) {
          return result;
        }
        if (v34 == 3)
        {
          if (v37 == 3) {
            return 1;
          }
        }
        else if (v37 != 3 && v34 == v37)
        {
          return 1;
        }
      }
      return 0;
    }
    outlined copy of GraphicsImage.Contents(v2, v3);
    outlined copy of GraphicsImage.Contents(v2, v3);
    outlined consume of GraphicsImage.Contents(v2, v3);
LABEL_17:
    outlined copy of GraphicsImage.Contents?(v15, v16);
    outlined consume of GraphicsImage.Contents?(v2, v3);
    outlined consume of GraphicsImage.Contents?(v15, v16);
    return 0;
  }
  if (v16 != 255) {
    goto LABEL_17;
  }
  int v39 = *(unsigned __int8 *)(a2 + 97);
  int v40 = *(unsigned __int8 *)(a2 + 96);
  int v37 = *(unsigned __int8 *)(a2 + 99);
  int v38 = *(unsigned __int8 *)(a2 + 98);
  uint64_t result = 0;
  if (v5 == v18 && v4 == v17)
  {
    int v35 = v13;
    int v36 = v12;
    int v34 = v14;
    if (v6 == v19) {
      goto LABEL_12;
    }
  }
  return result;
}

void Image.NamedImageProvider.resolveVector(info:value:in:at:catalog:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v13 - 8);
  float v15 = (uint64_t *)((char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v16 = *a4;
  *(void *)&long long v85 = *(void *)(v6 + 40);
  *(void *)&long long v84 = *(void *)(v6 + 48);
  uint64_t v17 = *(void *)(v6 + 56);
  uint64_t v82 = *(void *)(v6 + 64);
  *(void *)&long long v83 = v17;
  int v77 = *(unsigned __int8 *)(v6 + 72);
  double v18 = *(void **)a1;
  char v19 = *(unsigned char *)(a1 + 8);
  outlined init with copy of NamedImage.Key(a3, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ImageResolutionContext);
  *(void *)&long long v104 = v16;
  id v20 = v18;
  id v21 = a5;
  outlined copy of Image.Location(v16);
  ResolvedVectorGlyph.init(glyph:value:flipsRightToLeft:in:at:catalog:)(v20, a2 | ((HIDWORD(a2) & 1) << 32), v19, v15, (uint64_t *)&v104, (uint64_t)v21, (uint64_t)&v93);
  id v22 = v93;
  LODWORD(v81) = v94;
  double v87 = v95;
  int v79 = BYTE4(v96);
  LODWORD(v80) = LODWORD(v96);
  int v78 = BYTE5(v96);
  double v23 = v97;
  objc_msgSend(v93, sel_alignmentRect);
  double v108 = v24;
  double v109 = v25;
  long long v26 = *(_OWORD *)(a1 + 32);
  long long v104 = *(_OWORD *)(a1 + 16);
  long long v105 = v26;
  long long v27 = *(_OWORD *)(a1 + 64);
  long long v106 = *(_OWORD *)(a1 + 48);
  long long v107 = v27;
  int v28 = *(void **)a3;
  uint64_t v29 = *(void *)(a3 + 8);
  if (v29)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)((uint64_t)v28, &v93);
    swift_release_n();
    swift_release_n();
    int v30 = v93;
    int v31 = BYTE1(v93);
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>);
    BloomFilter.init(hashValue:)(v32);
    uint64_t v33 = (uint64_t)v93;
    uint64_t v34 = swift_retain_n();
    uint64_t v35 = specialized find1<A>(_:key:filter:)(v34, v33);
    if (v35)
    {
      int v30 = *(unsigned __int8 *)(v35 + 72);
      int v31 = *(unsigned __int8 *)(v35 + 73);
    }
    else
    {
      int v30 = 0;
      int v31 = 3;
    }
    swift_release_n();
  }
  if (one-time initialization token for background != -1) {
    swift_once();
  }
  uint64_t v86 = a6;
  if ((static SymbolVariants.background & ~v30) != 0)
  {
    double v75 = 0.0;
    int v76 = 3;
    int v36 = 1;
LABEL_20:
    HIDWORD(v74) = v36;
    goto LABEL_21;
  }
  if (HIBYTE(static SymbolVariants.background) == 3)
  {
    if (v31 == 3) {
      int v31 = 1;
    }
    goto LABEL_16;
  }
  if (v31 != 3 && v31 == HIBYTE(static SymbolVariants.background))
  {
LABEL_16:
    int v76 = v31;
    if (v29)
    {
      swift_retain_n();
      swift_retain_n();
      char v37 = specialized PropertyList.Tracker.value<A>(_:for:)((uint64_t)v28);
      swift_release_n();
      swift_release_n();
      LOBYTE(v93) = v31;
      Image.LayoutMetrics.adjustForBackground(glyph:shape:size:growsToFitBackground:)(v20, (unsigned __int8 *)&v93, &v108, v37 & 1);
      swift_retain_n();
      swift_retain_n();
      *(void *)&double v75 = specialized PropertyList.Tracker.value<A>(_:for:)((uint64_t)v28);
      char v39 = v38;
      swift_release_n();
    }
    else
    {
      uint64_t v40 = swift_retain_n();
      char v41 = specialized closure #1 in PropertyList.subscript.getter(v40);
      swift_release_n();
      LOBYTE(v93) = v31;
      Image.LayoutMetrics.adjustForBackground(glyph:shape:size:growsToFitBackground:)(v20, (unsigned __int8 *)&v93, &v108, v41 & 1);
      uint64_t v42 = swift_retain_n();
      *(void *)&double v75 = specialized closure #1 in PropertyList.subscript.getter(v42, (uint64_t)&v88);
      char v39 = v43;
    }
    swift_release_n();
    int v36 = v39 & 1;
    goto LABEL_20;
  }
  HIDWORD(v74) = 1;
  double v75 = 0.0;
  int v76 = 3;
LABEL_21:
  objc_msgSend(v20, sel_scale);
  double v45 = v44;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = v22;
  *(unsigned char *)(v46 + 24) = (_BYTE)v81;
  double v47 = v87;
  *(double *)(v46 + 32) = v87;
  *(_DWORD *)(v46 + 40) = v80;
  *(unsigned char *)(v46 + 44) = v79;
  *(unsigned char *)(v46 + 45) = v78;
  *(double *)(v46 + 48) = v23;
  double v48 = v45 * v108;
  double v49 = v45 * v109;
  id v93 = (id)v46;
  LOBYTE(v94) = 2;
  double v95 = v45;
  double v96 = v45 * v108;
  double v97 = v45 * v109;
  char v98 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  long long v80 = _Q0;
  long long v99 = _Q0;
  char v100 = 0;
  long long v101 = 0u;
  long long v102 = 0u;
  int v103 = 50397442;
  id v81 = v22;
  outlined copy of Image.Location(*(id *)&v47);
  id v55 = *(id *)&v23;
  ImageResolutionContext.effectiveAllowedDynamicRange(for:)((uint64_t)&v93, (unsigned __int8 *)&v90);
  char v56 = v90;
  if (!v29)
  {
    id v93 = v28;
    uint64_t v94 = 0;
    swift_retain_n();
    if (specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&v93))
    {
      uint64_t v59 = swift_retain_n();
      char v60 = specialized closure #1 in PropertyList.subscript.getter(v59);
      swift_release_n();
      if ((v60 & 1) == 0) {
        goto LABEL_26;
      }
    }
    else
    {
      swift_release_n();
    }
    char v57 = 2;
LABEL_31:
    uint64_t v61 = v46;
    goto LABEL_32;
  }
  char v57 = 2;
  swift_retain_n();
  swift_retain_n();
  char v58 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)((uint64_t)v28);
  swift_release_n();
  swift_release_n();
  if ((v58 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_26:
  uint64_t v61 = swift_allocObject();
  uint64_t v62 = one-time initialization token for foreground;
  swift_retain();
  swift_retain();
  if (v62 != -1) {
    swift_once();
  }
  id v93 = v28;
  uint64_t v94 = v29;
  *(float *)(v61 + 16) = (*(float (**)(id *))(*(void *)static Color.foreground + 104))(&v93);
  *(_DWORD *)(v61 + 20) = v63;
  *(_DWORD *)(v61 + 24) = v65;
  *(float *)(v61 + 28) = v64 * 0.16;
  swift_release();
  swift_release();
  swift_release();
  char v57 = 4;
LABEL_32:
  char v66 = v77;
  id v93 = (id)v61;
  LOBYTE(v94) = v57;
  double v95 = v45;
  double v96 = v48;
  double v97 = v49;
  char v98 = 0;
  long long v99 = v80;
  char v100 = 0;
  long long v101 = 0u;
  long long v102 = 0u;
  LOWORD(v103) = 258;
  BYTE2(v103) = 1;
  HIBYTE(v103) = v56;
  uint64_t v67 = v85;
  uint64_t v68 = v84;
  *(void *)&long long v90 = v85;
  *((void *)&v90 + 1) = v84;
  uint64_t v69 = v83;
  uint64_t v91 = v83;
  uint64_t v92 = v82;
  unsigned __int8 v89 = v76;
  outlined copy of GraphicsImage.Contents?((id)v61, v57);
  outlined copy of AccessibilityImageLabel?(v67, v68, v69);
  uint64_t v70 = v86;
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)((uint64_t *)&v93, v66, &v90, 0, &v89, v75, SBYTE4(v74), v86);
  long long v84 = v105;
  long long v85 = v104;
  long long v83 = v106;
  long long v71 = v107;
  swift_release();
  __int32 v72 = (_OWORD *)swift_allocObject();
  long long v73 = v84;
  v72[1] = v85;
  v72[2] = v73;
  v72[3] = v83;
  v72[4] = v71;

  outlined consume of Image.Location(*(id *)&v87);
  outlined consume of GraphicsImage.Contents?((void *)v61, v57);
  *(void *)(v70 + 144) = v72;
}

void ImageResolutionContext.effectiveAllowedDynamicRange(for:)(uint64_t a1@<X0>, unsigned __int8 *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(int *)(v9 + 44);
  int v11 = *(unsigned __int8 *)(v2 + v10);
  if (!*(unsigned char *)(v2 + v10)) {
    goto LABEL_10;
  }
  int v12 = *(void **)a1;
  int v13 = *(unsigned __int8 *)(a1 + 8);
  if (v13 == 255) {
    goto LABEL_9;
  }
  if (v13)
  {
LABEL_10:
    *a2 = 0;
    return;
  }
  outlined copy of GraphicsImage.Contents?(v12, 0);
  uint64_t v14 = CGImageGetColorSpace((CGImageRef)v12);
  if (!v14)
  {
LABEL_9:
    outlined consume of GraphicsImage.Contents?(v12, v13);
    goto LABEL_10;
  }
  float v15 = v14;
  BOOL v16 = CGColorSpaceUsesITUR_2100TF(v14);

  outlined consume of GraphicsImage.Contents?(v12, 0);
  if (!v16) {
    goto LABEL_10;
  }
  outlined init with copy of ImageResolutionContext(v3, (uint64_t)v8);
  if (v11 == 3)
  {
    uint64_t v17 = *v8;
    if (v8[1])
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v17, (char *)&v30);
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>();
      BloomFilter.init(hashValue:)(v18);
      uint64_t v19 = v29;
      uint64_t v20 = swift_retain_n();
      uint64_t v21 = specialized find1<A>(_:key:filter:)(v20, v19);
      if (v21) {
        unsigned __int8 v22 = *(unsigned char *)(v21 + 72);
      }
      else {
        unsigned __int8 v22 = 3;
      }
      unsigned __int8 v30 = v22;
    }
    swift_release_n();
    _s7SwiftUI22ImageResolutionContextVWOhTm_0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ImageResolutionContext);
  }
  else
  {
    _s7SwiftUI22ImageResolutionContextVWOhTm_0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ImageResolutionContext);
    unsigned __int8 v30 = v11;
  }
  uint64_t v23 = *(void *)(v3 + 8);
  swift_retain();
  uint64_t v24 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v24, v23, (char *)&v28);
  swift_release();
  swift_release();
  if (v28 >= v30) {
    unsigned __int8 v25 = v30;
  }
  else {
    unsigned __int8 v25 = v28;
  }
  if (v30 == 3) {
    unsigned __int8 v25 = v28;
  }
  if (v28 == 3) {
    unsigned __int8 v26 = v30;
  }
  else {
    unsigned __int8 v26 = v25;
  }
  *a2 = v26;
}

void outlined consume of Image.Resolved?(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a16 >> 1 != 4294967294)
  {
    outlined consume of GraphicsImage.Contents?(a1, a2);
    outlined consume of AccessibilityImageLabel?(a14, a15, a16);
    swift_unknownObjectRelease();
    swift_release();
  }
}

uint64_t outlined release of Image.Resolved(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  double v5 = *(void **)(a1 + 168);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(unsigned char *)(a1 + 8));
  outlined consume of AccessibilityImageLabel?(v2, v3, v4);
  swift_unknownObjectRelease();
  swift_release();

  return a1;
}

void outlined consume of GraphicsImage.Contents?(void *a1, char a2)
{
  if (a2 != -1) {
    outlined consume of GraphicsImage.Contents(a1, a2);
  }
}

uint64_t outlined consume of AccessibilityImageLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF) {
    return outlined consume of AccessibilityImageLabel(a1, a2, a3);
  }
  return a1;
}

void destroy for Image.Resolved(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 != 255) {
    outlined consume of GraphicsImage.Contents(*(void **)a1, v2);
  }
  unint64_t v3 = *(void *)(a1 + 120);
  if (v3 >> 1 != 0xFFFFFFFF) {
    outlined consume of AccessibilityImageLabel(*(void *)(a1 + 104), *(void *)(a1 + 112), v3);
  }
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v4 = *(void **)(a1 + 168);
}

void outlined consume of GraphicsImage.Contents(void *a1, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:

      break;
    case 2:
    case 3:
    case 4:
    case 5:
      swift_release();
      break;
    default:
      return;
  }
}

uint64_t outlined consume of AccessibilityImageLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0) {
    outlined consume of Text.Storage(a1, a2, a3 & 1);
  }

  return swift_bridgeObjectRelease();
}

__C::CGRect __swiftcall Image.Resolved.frame(in:)(CGSize in)
{
  double height = in.height;
  double width = in.width;
  double v4 = 0.0;
  double v5 = 0.0;
  if (*(unsigned char *)(v1 + 96) == 2)
  {
    double v6 = *(double *)(v1 + 16);
    uint64_t v7 = *(void *)(v1 + 144);
    double width = 0.0;
    if (v7)
    {
      double v4 = *(double *)(v7 + 48);
      double v5 = *(double *)(v7 + 56);
    }
    if (v6 == 0.0)
    {
      double height = 0.0;
    }
    else
    {
      double v8 = *(double *)(v1 + 24);
      double v9 = *(double *)(v1 + 32);
      switch(*(unsigned char *)(v1 + 40))
      {
        case 4:
        case 5:
        case 6:
        case 7:
          double v9 = *(double *)(v1 + 24);
          double v8 = *(double *)(v1 + 32);
          break;
        default:
          break;
      }
      double v10 = 1.0 / v6;
      double width = v10 * v8;
      double height = v10 * v9;
    }
  }
  result.size.double height = height;
  result.size.double width = width;
  result.origin.CGFloat y = v5;
  result.origin.CGFloat x = v4;
  return result;
}

uint64_t Image.Resolved.mustUpdate(data:position:)()
{
  if (v0[8] != 2) {
    return 0;
  }
  uint64_t v1 = v0;
  int v2 = *(void **)v0;
  unint64_t v3 = *(void **)(*(void *)v0 + 16);
  double v4 = *(void **)(*(void *)v0 + 32);
  char v25 = *(unsigned char *)(*(void *)v0 + 24);
  int v26 = *(_DWORD *)(*(void *)v0 + 40);
  char v24 = *(unsigned char *)(*(void *)v0 + 44);
  char v23 = *(unsigned char *)(*(void *)v0 + 45);
  double v5 = *(void **)(*(void *)v0 + 48);
  uint64_t Value = (double *)AGGraphGetValue();
  double v27 = *Value;
  double v28 = Value[1];
  CGSize v29 = *(CGSize *)AGGraphGetValue();
  double v7 = *(double *)AGGraphGetValue();
  id v8 = v3;
  outlined copy of Image.Location(v4);
  id v9 = v5;
  outlined copy of Image.Location(v4);
  id v10 = v9;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v7);
  __C::CGRect v30 = Image.Resolved.frame(in:)(v29);
  double width = v30.size.width;
  double height = v30.size.height;
  objc_msgSend(v8, sel_setPosition_, v30.origin.x + v27, v30.origin.y + v28);
  objc_msgSend(v8, sel_setSize_, width, height);
  int v13 = (double *)AGGraphGetValue();
  objc_msgSend(v8, sel_setPresentationPosition_, *v13, v13[1]);
  if (objc_msgSend(v8, sel_isAnimating))
  {
    double v14 = *(double *)AGGraphGetValue();
    objc_msgSend(v8, sel_setCurrentTime_, v14);
    uint64_t v15 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    double v16 = *(double *)(v15 + 376);
    if (v14 < v16) {
      double v16 = v14;
    }
    *(double *)(v15 + 376) = v16;
    objc_msgSend(v8, sel_maxVelocity);
    double v18 = v17;
    swift_beginAccess();
    ViewGraph.NextUpdate.maxVelocity(_:)(v18);
    swift_endAccess();
    swift_release();
  }
  unsigned int v19 = objc_msgSend(v8, sel_version);

  if (v26 == v19)
  {

    outlined consume of Image.Location(v4);
    outlined consume of Image.Location(v4);

    return 0;
  }
  uint64_t v21 = swift_allocObject();
  id v22 = v8;
  outlined copy of Image.Location(v4);
  outlined consume of Image.Location(v4);

  *(void *)(v21 + 16) = v22;
  *(unsigned char *)(v21 + 24) = v25;
  *(void *)(v21 + 32) = v4;
  *(_DWORD *)(v21 + 40) = v19;
  *(unsigned char *)(v21 + 44) = v24;
  *(unsigned char *)(v21 + 45) = v23;
  *(void *)(v21 + 48) = v10;
  outlined consume of GraphicsImage.Contents?(v2, 2);
  *(void *)uint64_t v1 = v21;
  unsigned char v1[8] = 2;
  Image.Resolved.image.didset();

  outlined consume of Image.Location(v4);
  return 1;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>>()
{
  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>, (uint64_t)&type metadata for ShouldRedactSymbolImagesKey, (uint64_t)&protocol witness table for ShouldRedactSymbolImagesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DerivedEnvironmentPropertyKey);
    lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<ShouldRedactContentKey> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>, (uint64_t)&type metadata for ShouldRedactSymbolImagesKey, (uint64_t)&protocol witness table for ShouldRedactSymbolImagesKey);
    unint64_t v0 = type metadata accessor for DerivedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>>);
    }
  }
}

void Image.Resolved.image.didset()
{
  char v1 = *(unsigned char *)(v0 + 178);
  int v2 = *(unsigned __int8 *)(v0 + 8);
  if (v2 == 255)
  {
    __int16 v13 = 0;
    goto LABEL_7;
  }
  if (v2 != 2)
  {
    __int16 v13 = *(unsigned __int8 *)(v0 + 60) ^ 1;
LABEL_7:

    char v11 = 0;
    *(void *)(v0 + 168) = 0;
    *(_WORD *)(v0 + 176) = v13;
    if ((v1 & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    char v12 = v11 & 0xFD;
    goto LABEL_9;
  }
  unint64_t v3 = *(void **)(*(void *)v0 + 32);
  double v4 = *(void **)(*(void *)v0 + 48);
  id v5 = *(id *)(*(void *)v0 + 16);
  outlined copy of Image.Location(v3);
  id v6 = v4;
  id v7 = v5;
  outlined copy of Image.Location(v3);
  id v8 = v6;
  __int16 v9 = (unsigned __int16)objc_msgSend(v7, sel_styleMask);
  double v14 = v3;
  outlined copy of Image.Location(v3);
  _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v9, &v14, (uint64_t)&v15);

  outlined consume of Image.Location(v3);
  outlined consume of Image.Location(v3);

  uint64_t v10 = v15;
  LOWORD(v8) = v16;
  char v11 = v17;

  *(void *)(v0 + 168) = v10;
  *(_WORD *)(v0 + 176) = (_WORD)v8;
  if ((v1 & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  char v12 = v11 | 2;
LABEL_9:
  *(unsigned char *)(v0 + 178) = v12;
}

uint64_t specialized static GraphicsImage.Contents.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(float **)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  double v4 = *(float **)a2;
  int v5 = *(unsigned __int8 *)(a2 + 8);
  switch(v3)
  {
    case 1:
      if (v5 != 1) {
        goto LABEL_21;
      }
      outlined copy of GraphicsImage.Contents(*(id *)a2, 1);
      outlined copy of GraphicsImage.Contents(v2, 1);
      outlined consume of GraphicsImage.Contents(v2, 1);
      id v6 = v4;
      char v7 = 1;
      goto LABEL_6;
    case 2:
      if (v5 != 2) {
        goto LABEL_21;
      }
      uint64_t v9 = *((void *)v2 + 6);
      char v10 = *((unsigned char *)v2 + 45);
      char v11 = *((unsigned char *)v2 + 44);
      int v12 = *((_DWORD *)v2 + 10);
      uint64_t v13 = *((void *)v2 + 4);
      char v14 = *((unsigned char *)v2 + 24);
      uint64_t v15 = *((void *)v2 + 2);
      uint64_t v16 = *((void *)v4 + 2);
      char v17 = *((unsigned char *)v4 + 24);
      uint64_t v18 = *((void *)v4 + 4);
      int v19 = *((_DWORD *)v4 + 10);
      char v20 = *((unsigned char *)v4 + 44);
      char v21 = *((unsigned char *)v4 + 45);
      uint64_t v41 = *((void *)v4 + 6);
      uint64_t v42 = v15;
      char v43 = v14;
      uint64_t v44 = v13;
      int v45 = v12;
      char v46 = v11;
      char v47 = v10;
      uint64_t v48 = v9;
      uint64_t v35 = v16;
      char v36 = v17;
      uint64_t v37 = v18;
      int v38 = v19;
      char v39 = v20;
      char v40 = v21;
      outlined copy of GraphicsImage.Contents(v4, 2);
      outlined copy of GraphicsImage.Contents(v2, 2);
      char v8 = specialized static ResolvedVectorGlyph.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v35);
      outlined consume of GraphicsImage.Contents(v2, 2);
      outlined consume of GraphicsImage.Contents(v4, 2);
      return v8 & 1;
    case 3:
      if (v5 != 3) {
        goto LABEL_21;
      }
      uint64_t v22 = *((void *)v2 + 2);
      uint64_t v23 = *((void *)v4 + 2);
      outlined copy of GraphicsImage.Contents(*(id *)a2, 3);
      outlined copy of GraphicsImage.Contents(v2, 3);
      outlined consume of GraphicsImage.Contents(v2, 3);
      outlined consume of GraphicsImage.Contents(v4, 3);
      char v8 = v22 == v23;
      return v8 & 1;
    case 4:
      if (v5 != 4) {
        goto LABEL_21;
      }
      float v25 = v2[6];
      float v24 = v2[7];
      float v27 = v2[4];
      float v26 = v2[5];
      float v28 = v4[4];
      float v29 = v4[5];
      float v31 = v4[6];
      float v30 = v4[7];
      outlined copy of GraphicsImage.Contents(*(id *)a2, 4);
      outlined copy of GraphicsImage.Contents(v2, 4);
      outlined consume of GraphicsImage.Contents(v2, 4);
      outlined consume of GraphicsImage.Contents(v4, 4);
      if (v27 != v28 || v26 != v29 || v25 != v31) {
        goto LABEL_22;
      }
      char v8 = v24 == v30;
      break;
    case 5:
      goto LABEL_21;
    default:
      if (*(unsigned char *)(a2 + 8))
      {
LABEL_21:
        outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
        outlined copy of GraphicsImage.Contents(v2, v3);
        outlined consume of GraphicsImage.Contents(v2, v3);
        outlined consume of GraphicsImage.Contents(v4, v5);
LABEL_22:
        char v8 = 0;
      }
      else
      {
        outlined copy of GraphicsImage.Contents(*(id *)a2, 0);
        outlined copy of GraphicsImage.Contents(v2, 0);
        outlined consume of GraphicsImage.Contents(v2, 0);
        id v6 = v4;
        char v7 = 0;
LABEL_6:
        outlined consume of GraphicsImage.Contents(v6, v7);
        char v8 = v2 == v4;
      }
      break;
  }
  return v8 & 1;
}

uint64_t specialized static ResolvedVectorGlyph.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3 = 0;
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  if (v4 && ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0)
  {
    int v5 = *(void **)(a1 + 16);
    id v7 = *(id *)(a2 + 16);
    char v8 = v5;
    char v3 = specialized static Image.Location.== infix(_:_:)(&v8, &v7);
  }
  return v3 & 1;
}

uint64_t DisplayList.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v33 = a2;
    __C::CGRect result = swift_bridgeObjectRetain();
    unint64_t v4 = 0;
    int v5 = 0;
    __int16 v6 = 0;
    uint64_t v35 = v2;
    uint64_t v36 = v3 - 1;
    while (1)
    {
      int v34 = v5;
      if (v4 >= *(void *)(v2 + 16)) {
        break;
      }
      uint64_t v7 = 72 * v4;
      while (2)
      {
        unint64_t v8 = v4;
        uint64_t v9 = v2 + v7;
        unint64_t v11 = *(void *)(v2 + v7 + 80);
        uint64_t v10 = *(void *)(v9 + 88);
        int v12 = *(unsigned __int8 *)(v9 + 98);
        int v13 = *(unsigned __int16 *)(v9 + 96);
        int v14 = v13 | (v12 << 16);
        ++v4;
        int v15 = *(_DWORD *)(v9 + 100);
        uint64_t v16 = *(void *)(v9 + 64);
        unint64_t v17 = *(void *)(v9 + 72);
        long long v18 = *(_OWORD *)(v9 + 48);
        v37[0] = *(_OWORD *)(v9 + 32);
        v37[1] = v18;
        uint64_t v38 = v16;
        unint64_t v39 = v17;
        unint64_t v40 = v11;
        uint64_t v41 = v10;
        char v43 = v12;
        __int16 v42 = v13;
        int v44 = v15;
        outlined copy of DisplayList.Item.Value(v17, v11);
        DisplayList.Item.features.getter(&v45);
        v6 |= v45;
        switch(v11 >> 62)
        {
          case 1uLL:
            switch(BYTE4(v11))
            {
              case 2u:
                __C::CGRect result = swift_bridgeObjectRelease();
                int v20 = v17;
                break;
              case 7u:
                int v20 = *(unsigned __int8 *)(v17 + 26);
                outlined copy of DisplayList.Item.Value(v17, v11);
                outlined copy of DisplayList.Item.Value(v17, v11);
                outlined consume of DisplayList.Effect(v17, v11, 7);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Item.Value(v17, v11);
                __C::CGRect result = outlined consume of DisplayList.Item.Value(v17, v11);
                break;
              case 0x11u:
                (*(void (**)(_OWORD *__return_ptr))(*(void *)v17 + 120))(v37);
                outlined copy of DisplayList.Item.Value(v17, v11);
                outlined copy of DisplayList.Item.Value(v17, v11);
                outlined consume of DisplayList.Effect(v17, v11, 17);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Item.Value(v17, v11);
                __C::CGRect result = outlined consume of DisplayList.Item.Value(v17, v11);
                int v20 = LOBYTE(v37[0]);
                break;
              default:
                outlined copy of DisplayList.Item.Value(v17, v11);
                outlined copy of DisplayList.Effect(v17, v11, SBYTE4(v11));
                swift_bridgeObjectRetain();
                outlined consume of DisplayList.Effect(v17, v11, SBYTE4(v11));
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Item.Value(v17, v11);
                __C::CGRect result = outlined consume of DisplayList.Item.Value(v17, v11);
                int v20 = 0;
                break;
            }
            int v32 = v34;
            uint64_t v2 = v35;
            unsigned int v21 = v20 | ((v14 & 0xFF0000u) >> 16);
            goto LABEL_30;
          case 2uLL:
            uint64_t v19 = *(void *)(v17 + 16);
            if (!v19) {
              goto LABEL_11;
            }
            if (v19 == 1)
            {
              uint64_t v22 = 0;
              unsigned int v21 = 0;
LABEL_23:
              uint64_t v29 = v19 - v22;
              float v30 = (unsigned __int8 *)(v17 + 40 * v22 + 66);
              do
              {
                int v31 = *v30;
                v30 += 40;
                v21 |= v31;
                --v29;
              }
              while (v29);
              goto LABEL_25;
            }
            int v23 = 0;
            int v24 = 0;
            uint64_t v22 = v19 & 0x7FFFFFFFFFFFFFFELL;
            float v25 = (unsigned __int8 *)(v17 + 106);
            uint64_t v26 = v19 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              int v27 = *(v25 - 40);
              int v28 = *v25;
              v25 += 80;
              v23 |= v27;
              v24 |= v28;
              v26 -= 2;
            }
            while (v26);
            unsigned int v21 = v24 | v23;
            if (v19 != v22) {
              goto LABEL_23;
            }
LABEL_25:
            __C::CGRect result = outlined consume of DisplayList.Item.Value(v17, v11);
            int v32 = v34;
            uint64_t v2 = v35;
LABEL_30:
            int v5 = v21 | v32;
            unint64_t v4 = v8 + 1;
            if (v36 == v8)
            {
              __C::CGRect result = swift_bridgeObjectRelease();
              a2 = v33;
              goto LABEL_34;
            }
            break;
          case 3uLL:
            outlined consume of DisplayList.Item.Value(v17, v11);
            goto LABEL_11;
          default:
            if (v17 >> 60 == 9)
            {
              unsigned int v21 = *(unsigned __int8 *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
              goto LABEL_25;
            }
LABEL_11:
            __C::CGRect result = outlined consume of DisplayList.Item.Value(v17, v11);
            if (v36 == v8)
            {
              uint64_t v2 = v35;
              __C::CGRect result = swift_bridgeObjectRelease();
              a2 = v33;
              LOBYTE(v5) = v34;
              goto LABEL_34;
            }
            uint64_t v2 = v35;
            v7 += 72;
            if (v4 >= *(void *)(v35 + 16)) {
              goto LABEL_35;
            }
            continue;
        }
        break;
      }
    }
LABEL_35:
    __break(1u);
  }
  else
  {
    LOBYTE(v5) = 0;
    __int16 v6 = 0;
LABEL_34:
    *(void *)a2 = v2;
    *(_WORD *)(a2 + 8) = v6;
    *(unsigned char *)(a2 + 10) = v5;
  }
  return result;
}

uint64_t View.bodyHeadOutdent(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

void AtomicBox.wrappedValue.modifyspecialized (os_unfair_lock_s **a1)
{
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute()
{
  return 0xD000000000000011;
}

uint64_t type metadata accessor for AnyHashableBox()
{
  return self;
}

uint64_t base witness table accessor for _AttributeBody in DynamicLayoutComputer<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for LocationBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)@<X0>(int a1@<W6>, uint64_t a2@<X8>)
{
  unint64_t v3 = AGCreateWeakAttribute();
  int v4 = v3;
  unint64_t v18 = HIDWORD(v3);
  unint64_t v5 = AGCreateWeakAttribute();
  int v6 = v5;
  unint64_t v17 = HIDWORD(v5);
  unint64_t v7 = AGCreateWeakAttribute();
  int v8 = v7;
  unint64_t v9 = HIDWORD(v7);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  unint64_t v13 = AGCreateWeakAttribute();
  int v14 = v13;
  unint64_t v15 = HIDWORD(v13);
  uint64_t result = AGCreateWeakAttribute();
  *(_DWORD *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v18;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v17;
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 28) = v12;
  *(_DWORD *)(a2 + 32) = v14;
  *(_DWORD *)(a2 + 36) = v15;
  *(void *)(a2 + 40) = result;
  *(_DWORD *)(a2 + 48) = a1;
  return result;
}

ValueMetadata *type metadata accessor for UnevenRoundedRectangle()
{
  return &type metadata for UnevenRoundedRectangle;
}

ValueMetadata *type metadata accessor for ToolbarStyleContext()
{
  return &type metadata for ToolbarStyleContext;
}

void *static ScrollCoordinateSpace.horizontal.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for horizontal, &static ScrollCoordinateSpace.horizontal, a1);
}

uint64_t EnvironmentValues.bridgedEnvironmentResolver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void *Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)(uint64_t a1, uint64_t *a2, char a3, float64_t *a4, uint64_t *a5, uint64_t a6, void *a7, int a8, uint64_t a9)
{
  id v110 = a7;
  uint64_t v107 = a1;
  uint64_t v106 = a9;
  uint64_t v15 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x270FA5388](v15 - 8);
  unint64_t v17 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Text.Resolved(0);
  uint64_t v19 = (int *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  unsigned int v21 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *a2;
  uint64_t v22 = a2[1];
  v111.f64[0] = *a4;
  uint64_t v25 = *a5;
  uint64_t v24 = a5[1];
  Text.Style.init()((uint64_t)v21);
  uint64_t v102 = v19[7];
  *(void *)&v21[v102] = 0;
  uint64_t v26 = v19[8];
  int v27 = &v21[v19[9]];
  uint64_t v28 = v19[10];
  uint64_t v29 = (uint64_t)v21;
  float v30 = &v21[v28];
  *((_WORD *)v30 + 16) = 0;
  uint64_t v31 = MEMORY[0x263F8EE78];
  *(_OWORD *)float v30 = 0u;
  *((_OWORD *)v30 + 1) = 0u;
  *((void *)v30 + 5) = v31;
  *((void *)v30 + 6) = v31;
  *(_OWORD *)(v30 + 56) = 0u;
  long long v104 = v30 + 56;
  *(_OWORD *)(v30 + 72) = 0u;
  *((void *)v30 + 11) = 0;
  long long v103 = xmmword_24619B530;
  *((_OWORD *)v30 + 6) = xmmword_24619B530;
  *((void *)v30 + 15) = 0;
  *((void *)v30 + 16) = 0;
  *((void *)v30 + 14) = v31;
  *(unsigned char *)(v29 + v26) = a3;
  *(void *)int v27 = v25;
  *((void *)v27 + 1) = v24;
  swift_retain();
  uint64_t v32 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v32, v22, (uint64_t)v17);
  swift_release();
  swift_release();
  LODWORD(v105.f64[0]) = a8;
  if (a8)
  {
    uint64_t v33 = *(uint64_t (**)(uint64_t))(*(void *)a6 + 112);
    uint64_t v34 = swift_retain();
    char v35 = v33(v34);
    outlined consume of Text.Storage(a6, (uint64_t)v110, 1);
    if ((v35 & 1) == 0)
    {
      if (one-time initialization token for automatic != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for TypesettingLanguage(0);
      uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)static TypesettingLanguage.automatic);
      outlined assign with copy of TypesettingLanguage(v37, (uint64_t)v17, type metadata accessor for TypesettingLanguage);
    }
  }
  uint64_t v38 = type metadata accessor for Text.Style(0);
  outlined assign with copy of TypesettingLanguage((uint64_t)v17, v29 + *(int *)(v38 + 84), (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  uint64_t v39 = unk_26FA789A8;
  if ((unk_26FA789A8 & ~qword_26FA789A0) == 0) {
    uint64_t v39 = 0;
  }
  uint64_t v109 = v29;
  if (((v39 | qword_26FA789A0) & ~*(void *)&v111.f64[0]) == 0)
  {
    swift_retain();
    if (v22)
    {
      swift_retain_n();
      uint64_t v40 = swift_retain();
      specialized PropertyList.Tracker.value<A>(_:for:)(v40, &v116);
      swift_release_n();
      swift_release_n();
      if ((*((void *)&v118 + 1) & 0x8000000000000000) != 0) {
        goto LABEL_20;
      }
      uint64_t v42 = *((void *)&v116 + 1);
      uint64_t v41 = (void *)v116;
      LOBYTE(v43) = v117;
      uint64_t v44 = v119;
    }
    else
    {
      swift_retain_n();
      swift_retain();
      __int16 v45 = (void *)specialized find<A>(_:key:)(v23);
      if (v45)
      {
        uint64_t v41 = (void *)v45[9];
        uint64_t v42 = v45[10];
        uint64_t v43 = v45[11];
        uint64_t v46 = v45[14];
        uint64_t v44 = v45[15];
        outlined copy of ResolvedTextSuffix(v41, v42, v43, v45[12], v45[13], v46);
      }
      else
      {
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        LOBYTE(v43) = 0;
        uint64_t v44 = 0;
        uint64_t v46 = 0x8000000000000000;
      }
      swift_release();
      swift_release_n();
      if (v46 < 0) {
        goto LABEL_20;
      }
    }
    outlined consume of Text.Layout.Line.Line(v41, v42, v43 & 1);
    if (*(void *)(v44 + 16))
    {
      swift_bridgeObjectRelease();
      *((void *)v30 + 5) = v44;
      __int16 v47 = *((_WORD *)v30 + 16);
      uint64_t v29 = v109;
      if ((v47 & 1) == 0) {
        *((_WORD *)v30 + 16) = v47 | 1;
      }
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
LABEL_20:
    uint64_t v29 = v109;
  }
LABEL_21:
  double v108 = v17;
  char v48 = LOBYTE(v111.f64[0]);
  specialized Text.resolve<A>(into:in:with:)(v29, v23, v22, *(uint64_t *)&v111.f64[0], a6, (uint64_t)v110, LOBYTE(v105.f64[0]) & 1, v106);
  double v49 = *(void **)(v29 + v102);
  float v50 = (void *)*((void *)v30 + 7);
  uint64_t v51 = *((void *)v30 + 8);
  uint64_t v52 = *((void *)v30 + 9);
  uint64_t v53 = *((void *)v30 + 10);
  uint64_t v101 = v23;
  uint64_t v106 = v22;
  uint64_t v54 = *((void *)v30 + 11);
  uint64_t v55 = *((void *)v30 + 12);
  id v110 = v49;
  outlined consume of ResolvedTextSuffix(v50, v51, v52, v53, v54, v55);
  char v56 = v104;
  *((void *)v104 + 4) = 0;
  *(_OWORD *)char v56 = 0u;
  *((_OWORD *)v56 + 1) = 0u;
  *((_OWORD *)v30 + 6) = v103;
  if ((v48 & 0x40) == 0) {
    goto LABEL_32;
  }
  uint64_t v57 = v101;
  swift_retain();
  if (v106)
  {
    swift_retain_n();
    uint64_t v58 = swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v58, &v116);
    swift_release_n();
    swift_release_n();
    uint64_t v60 = *((void *)&v116 + 1);
    uint64_t v59 = (void *)v116;
    uint64_t v62 = *((void *)&v117 + 1);
    uint64_t v61 = v117;
    unint64_t v64 = *((void *)&v118 + 1);
    uint64_t v63 = v118;
    int v65 = (char *)v119;
    uint64_t v66 = *((void *)&v118 + 1) >> 62;
    if (*((void *)&v118 + 1) >> 62) {
      goto LABEL_24;
    }
LABEL_31:
    *((void *)v30 + 7) = v59;
    *((void *)v30 + 8) = v60;
    *((void *)v30 + 9) = v61;
    *((void *)v30 + 10) = v62;
    *((void *)v30 + 11) = v63;
    *((void *)v30 + 12) = v64;
    *((void *)v30 + 13) = v65;
    goto LABEL_32;
  }
  swift_retain_n();
  swift_retain();
  uint64_t v69 = (void *)specialized find<A>(_:key:)(v57);
  if (v69)
  {
    uint64_t v59 = (void *)v69[9];
    uint64_t v60 = v69[10];
    uint64_t v61 = v69[11];
    uint64_t v62 = v69[12];
    uint64_t v63 = v69[13];
    unint64_t v64 = v69[14];
    int v65 = (char *)v69[15];
    outlined copy of ResolvedTextSuffix(v59, v60, v61, v62, v63, v64);
  }
  else
  {
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    int v65 = 0;
    unint64_t v64 = 0x8000000000000000;
  }
  *(void *)&long long v116 = v59;
  *((void *)&v116 + 1) = v60;
  *(void *)&long long v117 = v61;
  *((void *)&v117 + 1) = v62;
  *(void *)&long long v118 = v63;
  *((void *)&v118 + 1) = v64;
  *(void *)&long long v119 = v65;
  swift_release();
  swift_release_n();
  uint64_t v66 = v64 >> 62;
  if (!(v64 >> 62)) {
    goto LABEL_31;
  }
LABEL_24:
  if (v66 == 1)
  {
    long long v104 = v65;
    uint64_t v67 = v61 & 1;
    if (v49) {
      uint64_t v68 = (uint64_t)objc_msgSend(v110, sel_length);
    }
    else {
      uint64_t v68 = 0;
    }
    *(void *)&long long v112 = v59;
    *((void *)&v112 + 1) = v60;
    LOBYTE(v113) = v67 != 0;
    *((void *)&v113 + 1) = v62;
    uint64_t v114 = v63;
    int v115 = v64;
    *(void *)&long long v103 = v67;
    outlined copy of Text.Layout.Line.Line(v59, v60, v67);
    Text.Layout.Line.typographicBounds.getter(v125);
    float64x2_t v111 = v125[0];
    float64x2_t v105 = v125[1];
    uint64_t v71 = v126;
    uint64_t v72 = v127;
    type metadata accessor for EnvironmentPropertyKey<TextScaleKey>(0, (unint64_t *)&lazy cache variable for type metadata for ConcreteCustomTextAttachment<LineAttachment>, (uint64_t)&type metadata for LineAttachment, (uint64_t)&protocol witness table for LineAttachment, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ConcreteCustomTextAttachment);
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = v59;
    *(void *)(v73 + 24) = v60;
    *(unsigned char *)(v73 + 32) = v67 != 0;
    uint64_t v106 = v62;
    *(void *)(v73 + 40) = v62;
    *(void *)(v73 + 48) = v63;
    *(_DWORD *)(v73 + 56) = v64;
    float64x2_t v74 = v105;
    *(float64x2_t *)(v73 + 64) = v111;
    *(float64x2_t *)(v73 + 80) = v74;
    *(void *)(v73 + 96) = v71;
    *(void *)(v73 + 104) = v72;
    *(void *)&v111.f64[0] = v68;
    *(void *)&v105.f64[0] = v63;
    if (v68 < 1)
    {
      v78._rawuint64_t Value = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      if (!v49)
      {
        swift_bridgeObjectRelease();
LABEL_41:
        id v81 = (void *)*((void *)v30 + 14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v81[2] + 1, 1, v81);
        }
        unint64_t v83 = v81[2];
        unint64_t v82 = v81[3];
        float64_t v84 = v111.f64[0];
        if (v83 >= v82 >> 1)
        {
          id v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v82 > 1), v83 + 1, 1, v81);
          float64_t v84 = v111.f64[0];
        }
        v81[2] = v83 + 1;
        *(float64_t *)&v81[v83 + 4] = v84;
        swift_release();
        *((void *)v30 + 7) = v59;
        *((void *)v30 + 8) = v60;
        uint64_t v85 = v106;
        *((void *)v30 + 9) = v103;
        *((void *)v30 + 10) = v85;
        *((void *)v30 + 11) = *(void *)&v105.f64[0];
        *((void *)v30 + 12) = v64 | 0x4000000000000000;
        *((void *)v30 + 13) = v104;
        *((void *)v30 + 14) = v81;
        if (!v49) {
          goto LABEL_46;
        }
        goto LABEL_33;
      }
      double v75 = v49;
      id v76 = v110;
    }
    else
    {
      if (!v49) {
        goto LABEL_41;
      }
      double v75 = v49;
      id v76 = v110;
      id v77 = objc_msgSend(v110, sel_attributesAtIndex_effectiveRange_, v68 - 1, 0);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
      v78._rawuint64_t Value = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v79 = v76;
    Class isa = AnyCustomTextAttachment.nsAttributedString(with:)(v78).super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v79, sel_appendAttributedString_, isa);

    double v49 = v75;
    goto LABEL_41;
  }
LABEL_32:
  if (!v49)
  {
LABEL_46:
    uint64_t v114 = 0;
    long long v113 = 0u;
    long long v112 = 0u;
    goto LABEL_47;
  }
LABEL_33:
  id v70 = v110;
  NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(1, (uint64_t)&v112);

LABEL_47:
  uint64_t v86 = (uint64_t)v108;
  uint64_t v87 = v109;
  outlined destroy of TimelineSchedule?((uint64_t)&v112, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule?, (void (*)(uint64_t))type metadata accessor for TimelineSchedule);
  long long v88 = *((_OWORD *)v30 + 5);
  long long v89 = *((_OWORD *)v30 + 7);
  long long v122 = *((_OWORD *)v30 + 6);
  long long v123 = v89;
  long long v90 = *((_OWORD *)v30 + 1);
  long long v91 = *((_OWORD *)v30 + 3);
  long long v118 = *((_OWORD *)v30 + 2);
  long long v92 = v118;
  long long v119 = v91;
  long long v93 = *((_OWORD *)v30 + 3);
  long long v94 = *((_OWORD *)v30 + 5);
  long long v120 = *((_OWORD *)v30 + 4);
  long long v95 = v120;
  long long v121 = v94;
  long long v96 = *(_OWORD *)v30;
  long long v97 = *(_OWORD *)v30;
  long long v117 = *((_OWORD *)v30 + 1);
  long long v116 = v96;
  long long v98 = *((_OWORD *)v30 + 7);
  uint64_t v99 = v107;
  *(_OWORD *)(v107 + 96) = v122;
  *(_OWORD *)(v99 + 112) = v98;
  *(_OWORD *)(v99 + 32) = v92;
  *(_OWORD *)(v99 + 48) = v93;
  *(_OWORD *)(v99 + 64) = v95;
  *(_OWORD *)(v99 + 80) = v88;
  uint64_t v124 = *((void *)v30 + 16);
  *(void *)(v99 + 128) = *((void *)v30 + 16);
  *(_OWORD *)uint64_t v99 = v97;
  *(_OWORD *)(v99 + 16) = v90;
  outlined retain of Text.ResolvedProperties(&v116);
  outlined destroy of Text.Style(v86, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  outlined destroy of Text.Style(v87, type metadata accessor for Text.Resolved);
  return v49;
}

uint64_t EnvironmentValues.typesettingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  swift_retain();
  uint64_t v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, a1);
  swift_release();

  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    uint64_t v11 = swift_retain_n();
    uint64_t v6 = specialized closure #1 in PropertyList.subscript.getter(v11, (uint64_t)v15);
    uint64_t v8 = v12;
    swift_release_n();
    if (!v6)
    {
      uint64_t v13 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v13, a3);
      return swift_release_n();
    }
    goto LABEL_7;
  }
  swift_retain_n();
  swift_retain_n();
  uint64_t v6 = specialized PropertyList.Tracker.value<A>(_:for:)(a1);
  uint64_t v8 = v7;
  swift_release_n();
  swift_release_n();
  if (v6)
  {
LABEL_7:
    v14[0] = a1;
    v14[1] = a2;
    return (*(uint64_t (**)(ValueMetadata *, void *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v8 + 8))(&type metadata for TypesettingConfigurationKey, v14, &type metadata for TypesettingConfigurationKey, &protocol witness table for TypesettingConfigurationKey, v6, v8);
  }
  swift_retain();
  uint64_t v9 = swift_retain();
  specialized PropertyList.Tracker.value<A>(_:for:)(v9, a3);
  swift_release();

  return swift_release();
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v5 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v7 = *(void *)(v5 + 24);
  if (a1)
  {
    if (v7 == *(void *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)(v5 + 32);
      if (*(void *)(v10 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v12 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(void *)(v10 + 56) + 40 * v11, (uint64_t)v37);
        outlined init with take of ScrollStateRequest(v37, (uint64_t)v38);
        uint64_t v13 = v39;
        int v14 = v40;
        __swift_project_boxed_opaque_existential_1(v38, v39);
        ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v14[1])(&type metadata for ResolvedTextSuffix, v13, v14);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      }
      else
      {
        uint64_t v24 = swift_retain();
        uint64_t v25 = (void *)specialized find<A>(_:key:)(v24);
        uint64_t v36 = v9;
        if (v25)
        {
          uint64_t v26 = (void *)v25[9];
          uint64_t v27 = v25[10];
          uint64_t v28 = v25[11];
          uint64_t v29 = v25[12];
          uint64_t v30 = v25[13];
          uint64_t v31 = v25[14];
          uint64_t v32 = v25[15];
          *a2 = v26;
          a2[1] = v27;
          a2[2] = v28;
          a2[3] = v29;
          a2[4] = v30;
          a2[5] = v31;
          a2[6] = v32;
          outlined copy of ResolvedTextSuffix(v26, v27, v28, v29, v30, v31);
        }
        else
        {
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v32 = 0;
          a2[4] = 0;
          *(_OWORD *)a2 = 0u;
          *((_OWORD *)a2 + 1) = 0u;
          *(_OWORD *)(a2 + 5) = xmmword_24619B530;
          uint64_t v31 = 0x8000000000000000;
        }
        swift_release();
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextSuffixKey>>();
        uint64_t v39 = v33;
        uint64_t v40 = &protocol witness table for TrackedValue<A>;
        uint64_t v34 = (void *)swift_allocObject();
        v38[0] = v34;
        v34[2] = v26;
        v34[3] = v27;
        long long v34[4] = v28;
        v34[5] = v29;
        v34[6] = v30;
        v34[7] = v31;
        v34[8] = v32;
        outlined copy of ResolvedTextSuffix(v26, v27, v28, v29, v30, v31);
        specialized Dictionary.subscript.setter((uint64_t)v38, v36);
        uint64_t v6 = (os_unfair_lock_s *)(v5 + 16);
      }
      goto LABEL_15;
    }
  }
  else if (!v7)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v5 + 56) = 1;
  uint64_t v15 = swift_retain();
  uint64_t v16 = (void *)specialized find<A>(_:key:)(v15);
  if (v16)
  {
    uint64_t v18 = (void *)v16[9];
    uint64_t v17 = v16[10];
    uint64_t v19 = v16[11];
    uint64_t v20 = v16[12];
    uint64_t v21 = v16[13];
    uint64_t v22 = v16[14];
    uint64_t v23 = v16[15];
    *a2 = v18;
    a2[1] = v17;
    a2[2] = v19;
    a2[3] = v20;
    a2[4] = v21;
    a2[5] = v22;
    a2[6] = v23;
    outlined copy of ResolvedTextSuffix(v18, v17, v19, v20, v21, v22);
  }
  else
  {
    a2[4] = 0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)(a2 + 5) = xmmword_24619B530;
  }
  swift_release();
LABEL_15:
  os_unfair_lock_unlock(v6);
  return swift_release();
}

void type metadata accessor for BridgedEnvironmentResolver.Type?()
{
  if (!lazy cache variable for type metadata for BridgedEnvironmentResolver.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for BridgedEnvironmentResolver.Type, &lazy cache variable for type metadata for BridgedEnvironmentResolver);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BridgedEnvironmentResolver.Type?);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>);
    }
  }
}

uint64_t outlined assign with copy of TypesettingLanguage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t Text.Style.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x263F8EE78];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0x8000000000000000;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = xmmword_24619B550;
  *(_OWORD *)(a1 + 96) = xmmword_24619B550;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 1;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 248) = 1;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 320) = 258;
  uint64_t v9 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v10 = v9[21];
  if (one-time initialization token for automatic != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v5, (uint64_t)static TypesettingLanguage.automatic);
  _s7SwiftUI4TextV5StyleVWOcTm_0(v11, (uint64_t)v7, type metadata accessor for TypesettingLanguage);
  _s7SwiftUI4TextV5StyleVWOcTm_0(v11, (uint64_t)v4, type metadata accessor for TypesettingLanguage);
  char v12 = &v4[*(int *)(v2 + 20)];
  *(void *)char v12 = 0;
  v12[8] = 1;
  outlined assign with take of Text.Style((uint64_t)v7, (uint64_t)v4, type metadata accessor for TypesettingLanguage);
  *(void *)char v12 = 0;
  v12[8] = 1;
  _s7SwiftUI33ResolvableStringResolutionContextVWObTm_2((uint64_t)v4, a1 + v10, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  *(void *)(a1 + v9[22]) = v8;
  uint64_t v13 = a1 + v9[23];
  uint64_t v14 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(void *)(a1 + v9[24]) = MEMORY[0x263F8EE88];
  return result;
}

uint64_t outlined init with copy of Text.Style(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI4TextV5StyleVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of ResolvableStringResolutionContext(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33ResolvableStringResolutionContextVWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33ResolvableStringResolutionContextVWObTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of Text.Style(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unsigned char *assignWithCopy for TypesettingConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 2, v6);
  int v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v19 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 24))(a1, a2, v19);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      goto LABEL_7;
    }
    _s7SwiftUI24TypesettingConfigurationVWOhTm_0((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v12 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
  a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = *(void *)v16;
  unsigned char v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  return a1;
}

uint64_t NSMutableAttributedString.resolveUpdateSchedule(recalculate:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  uint64_t result = (uint64_t)objc_msgSend(v3, sel_length);
  if (result < 1) {
    goto LABEL_18;
  }
  if ((a1 & 1) == 0)
  {
    if (one-time initialization token for updateSchedule == -1) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  if (one-time initialization token for resolvableTextSegment != -1) {
    swift_once();
  }
  uint64_t v7 = static NSAttributedStringKey.resolvableTextSegment;
  id v8 = objc_msgSend(v3, sel_length);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v3;
  *(void *)(v9 + 24) = &v20;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in NSMutableAttributedString.resolveUpdateSchedule(recalculate:);
  *(void *)(v10 + 24) = v9;
  uint64_t v18 = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
  uint64_t v19 = v10;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v17 = &block_descriptor_9;
  int v11 = _Block_copy(aBlock);
  id v3 = v3;
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_enumerateAttribute_inRange_options_usingBlock_, v7, 0, v8, 0, v11);
  _Block_release(v11);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v7)
  {
    __break(1u);
LABEL_24:
    swift_once();
LABEL_11:
    uint64_t v13 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v3, sel_length);
    if (objc_msgSend(v3, sel_attribute_atIndex_effectiveRange_, v13, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
    }
    _sypSgWObTm_2((uint64_t)&v20, (uint64_t)aBlock, (uint64_t (*)(void))type metadata accessor for Any?);
    if (v17)
    {
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
      uint64_t result = swift_dynamicCast();
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = _sypSgWOhTm_4((uint64_t)aBlock, (uint64_t (*)(void))type metadata accessor for Any?);
    }
LABEL_18:
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  outlined init with copy of TimelineSchedule?((uint64_t)&v20, (uint64_t)&v14);
  if (v15)
  {
    outlined init with take of ScrollStateRequest(&v14, (uint64_t)aBlock);
    if (one-time initialization token for updateSchedule != -1) {
      swift_once();
    }
    uint64_t v12 = static NSAttributedStringKey.updateSchedule;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v17);
    objc_msgSend(v3, sel_addAttribute_value_range_, v12, _bridgeAnythingToObjectiveC<A>(_:)(), 0, objc_msgSend(v3, sel_length));
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  else
  {
    _s7SwiftUI16TimelineSchedule_pSgWOhTm_0((uint64_t)&v14, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule?, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
    if (one-time initialization token for updateSchedule != -1) {
      swift_once();
    }
    objc_msgSend(v3, sel_removeAttribute_range_, static NSAttributedStringKey.updateSchedule, 0, objc_msgSend(v3, sel_length));
  }
  outlined init with take of TimelineSchedule?((uint64_t)&v20, a2);
  return swift_release();
}

uint64_t outlined assign with take of Text.Style(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Style(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t assignWithTake for Text.Style(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)a2;
  if (*(void *)a1 < 2uLL) {
    goto LABEL_4;
  }
  if (v6 < 2)
  {
    outlined destroy of Font(a1);
    unint64_t v6 = *(void *)a2;
LABEL_4:
    *(void *)a1 = v6;
    goto LABEL_6;
  }
  *(void *)a1 = v6;
  swift_release();
LABEL_6:
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  outlined consume of Text.Style.TextStyleColor(v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  id v8 = (_OWORD *)(a2 + 80);
  if ((unint64_t)(*(void *)(a1 + 88) - 1) < 2)
  {
LABEL_9:
    *(_OWORD *)(a1 + 80) = *v8;
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(a2 + 88);
  if ((unint64_t)(v9 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
    goto LABEL_9;
  }
  *(void *)(a1 + 80) = *(void *)v8;
  *(void *)(a1 + 88) = v9;
  swift_release();
LABEL_11:
  uint64_t v10 = (_OWORD *)(a2 + 96);
  if ((unint64_t)(*(void *)(a1 + 104) - 1) < 2)
  {
LABEL_14:
    *(_OWORD *)(a1 + 96) = *v10;
    goto LABEL_16;
  }
  uint64_t v11 = *(void *)(a2 + 104);
  if ((unint64_t)(v11 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
    goto LABEL_14;
  }
  *(void *)(a1 + 96) = *(void *)v10;
  *(void *)(a1 + 104) = v11;
  swift_release();
LABEL_16:
  uint64_t v12 = (_OWORD *)(a1 + 112);
  uint64_t v13 = (_OWORD *)(a2 + 112);
  if (*(void *)(a1 + 176) == 1)
  {
LABEL_19:
    long long v15 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v15;
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    long long v16 = *(_OWORD *)(a2 + 128);
    *uint64_t v12 = *v13;
    *(_OWORD *)(a1 + 128) = v16;
    long long v17 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v17;
    goto LABEL_21;
  }
  uint64_t v14 = *(void *)(a2 + 176);
  if (v14 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    goto LABEL_19;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 176) = v14;
  swift_release();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
LABEL_21:
  if (*(void *)(a1 + 248) == 1)
  {
LABEL_24:
    long long v19 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v19;
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(a2 + 248);
  if (v18 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    goto LABEL_24;
  }
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v18;
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v20 = *(void *)(a1 + 288);
  if (v20 == 1)
  {
LABEL_29:
    long long v22 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v22;
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    goto LABEL_30;
  }
  uint64_t v21 = *(void *)(a2 + 288);
  if (v21 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    goto LABEL_29;
  }
  char v48 = (_OWORD *)(a1 + 264);
  double v49 = (_OWORD *)(a2 + 264);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
  if (v20)
  {
    if (v21)
    {
      char v50 = *(unsigned char *)(a2 + 280);
      uint64_t v51 = *(void *)(a1 + 264);
      uint64_t v52 = *(void *)(a1 + 272);
      char v53 = *(unsigned char *)(a1 + 280);
      *char v48 = *v49;
      *(unsigned char *)(a1 + 280) = v50;
      outlined consume of Text.Storage(v51, v52, v53);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    outlined destroy of Text(a1 + 264);
  }
  long long v55 = *(_OWORD *)(a2 + 280);
  *char v48 = *v49;
  *(_OWORD *)(a1 + 280) = v55;
LABEL_30:
  uint64_t v23 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);

  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_release();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_release();
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  uint64_t v24 = a3[21];
  uint64_t v25 = (unsigned char *)(a1 + v24);
  uint64_t v26 = (unsigned char *)(a2 + v24);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v27 - 8);
  uint64_t v30 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v25, 2, v27);
  int v32 = v30(v26, 2, v28);
  if (v31)
  {
    if (!v32)
    {
      uint64_t v33 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v33 - 8) + 32))(v25, v26, v33);
      v25[*(int *)(v28 + 48)] = v26[*(int *)(v28 + 48)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v29 + 56))(v25, 0, 2, v28);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v32)
  {
    outlined destroy of Text.Resolved((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_35:
    uint64_t v34 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v25, v26, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_36;
  }
  uint64_t v54 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v54 - 8) + 40))(v25, v26, v54);
  v25[*(int *)(v28 + 48)] = v26[*(int *)(v28 + 48)];
LABEL_36:
  uint64_t v35 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v36 = &v25[v35];
  uint64_t v37 = &v26[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v37[8];
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[23];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (void *)(a2 + v38);
  uint64_t v41 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v42 + 48);
  int v44 = v43(v39, 1, v41);
  int v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(void *, void *, uint64_t))(v42 + 40))(v39, v40, v41);
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v42 + 8))(v39, v41);
    goto LABEL_41;
  }
  if (v45)
  {
LABEL_41:
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v39, v40, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, void *, uint64_t))(v42 + 32))(v39, v40, v41);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
LABEL_42:
  *(void *)(a1 + a3[24]) = *(void *)(a2 + a3[24]);
  swift_bridgeObjectRelease();
  return a1;
}

void *outlined retain of Text.ResolvedProperties(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[12];
  id v8 = (void *)a1[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ResolvedTextSuffix(v2, v3, v4, v5, v6, v7);
  id v9 = v8;
  swift_bridgeObjectRetain();
  return a1;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextSuffixKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextSuffixKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextSuffixKey>>);
    }
  }
}

uint64_t initializeWithCopy for Text.Resolved(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)a2;
  if (*(void *)a2 >= 2uLL) {
    uint64_t v5 = swift_retain();
  }
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain();
  outlined copy of Text.Style.TextStyleColor(v7);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  id v9 = (void *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 16) = v7;
  swift_retain();
  if ((unint64_t)(v10 - 1) >= 2)
  {
    *(void *)(a1 + 80) = *v9;
    *(void *)(a1 + 88) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v9;
  }
  uint64_t v11 = (void *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 104);
  if ((unint64_t)(v12 - 1) >= 2)
  {
    *(void *)(a1 + 96) = *v11;
    *(void *)(a1 + 104) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v11;
  }
  uint64_t v13 = (_OWORD *)(a1 + 112);
  uint64_t v14 = (_OWORD *)(a2 + 112);
  uint64_t v15 = *(void *)(a2 + 176);
  if (v15 == 1)
  {
    long long v16 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v16;
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    long long v17 = *(_OWORD *)(a2 + 128);
    *uint64_t v13 = *v14;
    *(_OWORD *)(a1 + 128) = v17;
    long long v18 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v18;
  }
  else
  {
    *(void *)uint64_t v13 = *(void *)v14;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    uint64_t v19 = *(void *)(a2 + 184);
    *(void *)(a1 + 176) = v15;
    *(void *)(a1 + 184) = v19;
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_retain();
  }
  uint64_t v20 = *(void *)(a2 + 248);
  if (v20 == 1)
  {
    long long v21 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v21;
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
  }
  else
  {
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = v20;
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = *(void *)(a2 + 288);
  if (v22 == 1)
  {
    long long v23 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v23;
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
  }
  else
  {
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
    if (v22)
    {
      uint64_t v24 = *(void *)(a2 + 264);
      uint64_t v25 = *(void *)(a2 + 272);
      char v26 = *(unsigned char *)(a2 + 280);
      outlined copy of Text.Storage(v24, v25, v26);
      *(void *)(a1 + 264) = v24;
      *(void *)(a1 + 272) = v25;
      *(unsigned char *)(a1 + 280) = v26;
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v27 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v27;
    }
  }
  uint64_t v28 = *(void **)(a2 + 296);
  uint64_t v29 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = v28;
  *(void *)(a1 + 304) = v29;
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  uint64_t v30 = type metadata accessor for Text.Style(0);
  uint64_t v31 = *(int *)(v30 + 84);
  __dst = (char *)(a1 + v31);
  uint64_t v71 = (int *)v30;
  int v32 = (char *)(a2 + v31);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v34 = v33;
  uint64_t v35 = *(void *)(v33 - 8);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  id v37 = v28;
  swift_retain();
  swift_retain();
  if (v36(v32, 2, v34))
  {
    uint64_t v38 = type metadata accessor for TypesettingLanguage.Storage(0);
    uint64_t v39 = __dst;
    memcpy(__dst, v32, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    uint64_t v40 = type metadata accessor for Locale.Language();
    uint64_t v39 = __dst;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(__dst, v32, v40);
    __dst[*(int *)(v34 + 48)] = v32[*(int *)(v34 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 2, v34);
  }
  uint64_t v41 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v42 = &v39[v41];
  uint64_t v43 = &v32[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  *(void *)(a1 + v71[22]) = *(void *)(a2 + v71[22]);
  uint64_t v44 = v71[23];
  int v45 = (void *)(a1 + v44);
  uint64_t v46 = (const void *)(a2 + v44);
  uint64_t v47 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v48 = *(void *)(v47 - 8);
  double v49 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48);
  swift_bridgeObjectRetain();
  if (v49(v46, 1, v47))
  {
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  *(void *)(a1 + v71[24]) = *(void *)(a2 + v71[24]);
  uint64_t v51 = a3[5];
  uint64_t v52 = a3[6];
  char v53 = *(void **)(a2 + v51);
  *(void *)(a1 + v51) = v53;
  *(unsigned char *)(a1 + v52) = *(unsigned char *)(a2 + v52);
  uint64_t v54 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v55 = a1 + v54;
  char v56 = (void *)(a2 + v54);
  long long v57 = *(_OWORD *)(a2 + v54 + 16);
  *(_OWORD *)uint64_t v55 = *(_OWORD *)(a2 + v54);
  *(_OWORD *)(v55 + 16) = v57;
  *(_WORD *)(v55 + 32) = *(_WORD *)(a2 + v54 + 32);
  uint64_t v58 = *(void *)(a2 + v54 + 48);
  *(void *)(v55 + 40) = *(void *)(a2 + v54 + 40);
  *(void *)(v55 + 48) = v58;
  uint64_t v59 = *(void *)(a2 + v54 + 72);
  __dstfloat64_t a = *(void **)(a2 + v54 + 64);
  uint64_t v72 = *(void **)(a2 + v54 + 56);
  uint64_t v60 = *(void *)(a2 + v54 + 80);
  uint64_t v61 = *(void *)(a2 + v54 + 88);
  uint64_t v62 = *(void *)(a2 + v54 + 96);
  uint64_t v74 = *(void *)(a2 + v54 + 104);
  swift_bridgeObjectRetain();
  id v63 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ResolvedTextSuffix(v72, (uint64_t)__dsta, v59, v60, v61, v62);
  *(void *)(v55 + 56) = v72;
  *(void *)(v55 + 64) = __dsta;
  *(void *)(v55 + 72) = v59;
  *(void *)(v55 + 80) = v60;
  *(void *)(v55 + 88) = v61;
  *(void *)(v55 + 96) = v62;
  uint64_t v64 = v56[14];
  uint64_t v65 = v56[15];
  *(void *)(v55 + 104) = v74;
  *(void *)(v55 + 112) = v64;
  uint64_t v66 = (void *)v56[16];
  *(void *)(v55 + 120) = v65;
  *(void *)(v55 + 128) = v66;
  swift_bridgeObjectRetain();
  id v67 = v66;
  return a1;
}

uint64_t outlined init with copy of TimelineSchedule?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyTrackedValue?(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of TimelineSchedule?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyTrackedValue?(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Font(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t partial apply for closure #1 in Text.Resolved.append(_:in:with:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in Text.Resolved.append(_:in:with:isUniqueSizeVariant:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(void **)(v4 + 48));
}

uint64_t closure #1 in Text.Resolved.append(_:in:with:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v74 = a2;
  uint64_t v75 = a6;
  uint64_t v14 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v14 - 8);
  long long v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v72 - v18;
  uint64_t v76 = a5;
  _s7SwiftUI4TextV5StyleVWOcTm_0(a5, (uint64_t)&v72 - v18, type metadata accessor for Text.Style);
  uint64_t v82 = a1;
  swift_bridgeObjectRetain();
  Dictionary<>.transferAttributedStringStyles(to:)((uint64_t)v19);
  if (one-time initialization token for kitLink == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_26:
    long long v80 = 0u;
    long long v81 = 0u;
LABEL_27:
    outlined destroy of Text.Resolved((uint64_t)&v80, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_28;
  }
  swift_once();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t v20 = a3;
  id v21 = (id)static NSAttributedStringKey.kitLink;
  uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
  if (v23)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v22, (uint64_t)&v80);
  }
  else
  {
    long long v80 = 0u;
    long long v81 = 0u;
  }

  a3 = v20;
  if (!*((void *)&v81 + 1)) {
    goto LABEL_27;
  }
  outlined destroy of Text.Resolved((uint64_t)&v80, (uint64_t (*)(void))type metadata accessor for Any?);
  uint64_t v24 = (void *)MEMORY[0x24C522820](0xD000000000000017, 0x8000000246220600);
  if ((v75 & 0x10) != 0)
  {

    goto LABEL_28;
  }
  uint64_t v25 = *(void *)(a1 + 16);
  id v73 = v24;
  if (v25)
  {
    id v26 = v24;
    uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
    if (v28)
    {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v27, (uint64_t)&v80);
    }
    else
    {
      long long v80 = 0u;
      long long v81 = 0u;
    }

    if (*((void *)&v81 + 1))
    {

      outlined destroy of Text.Resolved((uint64_t)&v80, (uint64_t (*)(void))type metadata accessor for Any?);
      a3 = v20;
      goto LABEL_28;
    }
  }
  else
  {
    long long v80 = 0u;
    long long v81 = 0u;
  }
  outlined destroy of Text.Resolved((uint64_t)&v80, (uint64_t (*)(void))type metadata accessor for Any?);
  *(void *)&long long v80 = a7;
  *((void *)&v80 + 1) = a8;
  uint64_t v29 = EnvironmentValues.tintColor.getter();
  if (v29)
  {
    uint64_t v30 = v29;

    a3 = v20;
  }
  else
  {
    a3 = v20;
    if (a8)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v32 = specialized PropertyList.Tracker.value<A>(_:for:)(a7);
    }
    else
    {
      uint64_t v34 = swift_retain_n();
      uint64_t v32 = specialized closure #1 in PropertyList.subscript.getter(v34, (uint64_t)v77);
    }
    uint64_t v33 = v31;
    swift_release_n();
    swift_release_n();
    if (v32)
    {
      *(void *)&long long v80 = a7;
      *((void *)&v80 + 1) = a8;
      uint64_t v30 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v33 + 8))(&v80, v32, v33);
    }
    else
    {

      _s7SwiftUI22AnyDynamicFontModifierCyAA0E0V06WeightF0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.AccentColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider, (uint64_t)&type metadata for Color.AccentColorProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ColorBox);
      uint64_t v30 = swift_allocObject();
    }
  }
  outlined consume of Text.Style.TextStyleColor(*((void *)v19 + 2));
  *((void *)v19 + 2) = v30;
LABEL_28:
  id v35 = objc_msgSend(a9, sel_attributedSubstringFromRange_, v74, a3);
  id v36 = objc_msgSend(v35, sel_string);

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  *(void *)&long long v80 = a7;
  *((void *)&v80 + 1) = a8;
  uint64_t v40 = String.caseConvertedIfNeeded(_:)((uint64_t *)&v80, v37, v39);
  unint64_t v42 = v41;
  swift_bridgeObjectRelease();
  _s7SwiftUI4TextV5StyleVWOcTm_0((uint64_t)v19, (uint64_t)v16, type metadata accessor for Text.Style);
  uint64_t v43 = swift_allocObject();
  uint64_t v44 = a8;
  uint64_t v45 = v43;
  *(void *)(v43 + 16) = v40;
  *(void *)(v43 + 24) = v42;
  uint64_t v74 = a7;
  *(void *)&long long v80 = a7;
  *((void *)&v80 + 1) = v44;
  uint64_t v46 = v44;
  uint64_t v47 = (int *)type metadata accessor for Text.Resolved(0);
  LODWORD(v37) = *(unsigned __int8 *)(v76 + v47[6]);
  *(void *)&v79[0] = v75;
  uint64_t v48 = v76 + v47[8];
  swift_bridgeObjectRetain();
  uint64_t v49 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:), v45, (uint64_t *)&v80, v37, (uint64_t *)v79, v48);
  swift_release();
  outlined destroy of Text.Resolved((uint64_t)v16, type metadata accessor for Text.Style);
  uint64_t v50 = v82;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v80 = v50;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v49, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v80);
  uint64_t v82 = v80;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v52 = specialized Collection.first.getter(v40, v42);
  swift_bridgeObjectRelease();
  uint64_t v53 = v46;
  if ((v52 & 0x1FFFFFFFFLL) != 0xFFFC) {
    goto LABEL_41;
  }
  uint64_t v54 = (void *)MEMORY[0x24C522820](0xD00000000000001BLL, 0x80000002462207C0);
  uint64_t v55 = v54;
  uint64_t v56 = v82;
  if (*(void *)(v82 + 16))
  {
    id v57 = v54;
    uint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v57);
    if (v59)
    {
      outlined init with copy of Any(*(void *)(v56 + 56) + 32 * v58, (uint64_t)&v80);
    }
    else
    {
      long long v80 = 0u;
      long long v81 = 0u;
    }

    if (*((void *)&v81 + 1))
    {
      uint64_t v60 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSEmojiImageTextAttachment);
      if (swift_dynamicCast())
      {
        uint64_t v61 = *(void **)&v79[0];
        if (one-time initialization token for kitAttachment != -1) {
          swift_once();
        }
        uint64_t v62 = (void *)static NSAttributedStringKey.kitAttachment;
        *((void *)&v81 + 1) = v60;
        *(void *)&long long v80 = v61;
        outlined init with take of Any(&v80, v79);
        id v63 = v62;
        id v64 = v61;
        uint64_t v65 = v82;
        char v66 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v78 = v65;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v79, v63, v66);
        uint64_t v82 = v78;

        swift_bridgeObjectRelease();
        uint64_t v53 = v46;
      }
      goto LABEL_40;
    }
  }
  else
  {
    long long v80 = 0u;
    long long v81 = 0u;
  }
  outlined destroy of Text.Resolved((uint64_t)&v80, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_40:
  id v67 = v55;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v67, &v80);

  outlined destroy of Text.Resolved((uint64_t)&v80, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_41:
  uint64_t v68 = v82;
  *(void *)&long long v80 = v74;
  *((void *)&v80 + 1) = v53;
  swift_bridgeObjectRetain();
  uint64_t v69 = v76;
  Text.Resolved.append(_:with:in:)(v40, v42, v68, (uint64_t *)&v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v70 = *(void **)(v69 + v47[5]);
  if (v70)
  {
    if (objc_msgSend(v70, sel_isEmptyOrTerminatedByParagraphSeparator))
    {

      *(void *)(v48 + 128) = 0;
    }
    swift_bridgeObjectRelease();
    return outlined destroy of Text.Resolved((uint64_t)v19, type metadata accessor for Text.Style);
  }
  else
  {
    __break(1u);
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}