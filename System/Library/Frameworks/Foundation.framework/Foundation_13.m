uint64_t AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  long long v18;
  _OWORD *v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[7];
  _OWORD v33[7];
  _OWORD v34[4];

  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = *(void **)v3;
    v9 = *(_OWORD *)(*(void *)v3 + 16);
    v10 = *(_OWORD *)(*(void *)v3 + 48);
    v34[1] = *(_OWORD *)(*(void *)v3 + 32);
    v34[2] = v10;
    v34[0] = v9;
    v11 = v8[8];
    v12 = v8[9];
    v29 = a3;
    v13 = v8[10];
    v14 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v34);
    swift_unknownObjectRetain();
    v15 = v14;
    a3 = v29;
    *(void *)v4 = AttributedString.Guts.init(string:runs:)(v34, v11, v12, v13, v15);
    swift_release();
  }
  if (a3 == MEMORY[0x1E4F59DA8])
  {
    v16 = a2[5];
    v32[4] = a2[4];
    v32[5] = v16;
    v32[6] = a2[6];
    v17 = a2[1];
    v32[0] = *a2;
    v32[1] = v17;
    v18 = a2[3];
    v32[2] = a2[2];
    v32[3] = v18;
    v19 = *(_OWORD **)v4;
    v20 = *(_OWORD *)(v4 + 8);
    v21 = *(_OWORD *)(v4 + 24);
    v22 = *(_OWORD *)(v4 + 56);
    v33[5] = *(_OWORD *)(v4 + 40);
    v33[6] = v22;
    v33[3] = v20;
    v33[4] = v21;
    v23 = v19[1];
    v24 = v19[3];
    v33[1] = v19[2];
    v33[2] = v24;
    v33[0] = v23;
    outlined retain of Locale((uint64_t)v32);
    outlined retain of Locale((uint64_t)v33);
    BigSubstring.init(_unchecked:in:)();
    BigSubstring.subscript.getter();
    outlined release of Locale((uint64_t)&v30);
    BigSubstring.isIdentical(to:)();
    outlined release of Locale((uint64_t)v32);
    outlined release of Locale((uint64_t)&v31);
  }
  v25 = AttributedString.Guts.attributesToUseForTextReplacement(in:)();
  v27 = v26;
  MEMORY[0x1F4188790](v25);
  AttributedString.CharacterView._mutateStringContents(in:attributes:with:)(a1, v25, v27, (void (*)(_OWORD *, uint64_t))partial apply for closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.CharacterView.subscript.modify(void *a1, void *a2)
{
  v5 = malloc(0x360uLL);
  *a1 = v5;
  *((void *)v5 + 103) = v2;
  uint64_t v6 = a2[1];
  *((void *)v5 + 104) = *a2;
  *((void *)v5 + 105) = v6;
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  *((void *)v5 + 106) = v7;
  *((void *)v5 + 107) = v8;
  v9 = (_OWORD *)*v2;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
      long long v11 = v9[1];
      long long v12 = v9[3];
      *((_OWORD *)v5 + 33) = v9[2];
      *((_OWORD *)v5 + 34) = v12;
      *((_OWORD *)v5 + 32) = v11;
      long long v13 = v9[1];
      long long v14 = v9[3];
      *((_OWORD *)v5 + 27) = v9[2];
      *((_OWORD *)v5 + 28) = v14;
      *((_OWORD *)v5 + 26) = v13;
      outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)v5 + 26, (uint64_t)v5 + 648);
      outlined retain of Locale((uint64_t)v5 + 648);
      uint64_t v15 = BigString.subscript.getter();
      uint64_t v17 = v16;
      outlined release of Locale((uint64_t)v5 + 512);
      *((void *)v5 + 101) = v15;
      *((void *)v5 + 102) = v17;
      return (uint64_t)AttributedString.CharacterView.subscript.modify;
    }
  }
  __break(1u);
  return result;
}

void AttributedString.CharacterView.subscript.modify(void **a1, char a2)
{
  v2 = *a1;
  if ((a2 & 1) == 0)
  {
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
    {
      if (static BigString.Index.< infix(_:_:)())
      {
        uint64_t v32 = *((void *)v2 + 107);
        uint64_t v33 = *((void *)v2 + 106);
        uint64_t v34 = *((void *)v2 + 105);
        uint64_t v35 = *((void *)v2 + 104);
        uint64_t v36 = *((void *)v2 + 103);
        v37 = *(_OWORD **)v36;
        long long v39 = *(_OWORD *)(*(void *)v36 + 32);
        long long v38 = *(_OWORD *)(*(void *)v36 + 48);
        *((_OWORD *)v2 + 20) = *(_OWORD *)(*(void *)v36 + 16);
        *((_OWORD *)v2 + 21) = v39;
        *((_OWORD *)v2 + 22) = v38;
        long long v40 = v37[1];
        long long v41 = v37[3];
        *((_OWORD *)v2 + 12) = v37[2];
        *((_OWORD *)v2 + 13) = v41;
        *((_OWORD *)v2 + 11) = v40;
        outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)v2 + 11, (uint64_t)v2 + 768);
        outlined retain of Locale((uint64_t)v2 + 768);
        uint64_t v42 = MEMORY[0x185301530](v35, v34, v33, v32);
        uint64_t v44 = v43;
        uint64_t v46 = v45;
        uint64_t v48 = v47;
        outlined release of Locale((uint64_t)v2 + 320);
        long long v50 = v37[2];
        long long v49 = v37[3];
        *((_OWORD *)v2 + 14) = v37[1];
        *((_OWORD *)v2 + 15) = v50;
        *((_OWORD *)v2 + 16) = v49;
        long long v51 = v37[1];
        long long v52 = v37[3];
        *((_OWORD *)v2 + 9) = v37[2];
        *((_OWORD *)v2 + 10) = v52;
        *((_OWORD *)v2 + 8) = v51;
        outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)v2 + 8, (uint64_t)v2 + 608);
        outlined retain of Locale((uint64_t)v2 + 608);
        uint64_t v53 = BigString.index(after:)();
        uint64_t v55 = v54;
        uint64_t v57 = v56;
        uint64_t v59 = v58;
        outlined release of Locale((uint64_t)v2 + 224);
        if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
        {
          *((void *)v2 + 8) = v42;
          *((void *)v2 + 9) = v44;
          *((void *)v2 + 10) = v46;
          *((void *)v2 + 11) = v48;
          *((void *)v2 + 12) = v53;
          *((void *)v2 + 13) = v55;
          *((void *)v2 + 14) = v57;
          *((void *)v2 + 15) = v59;
          specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v2 + 64);
          goto LABEL_10;
        }
LABEL_18:
        __break(1u);
        return;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  if (static BigString.Index.< infix(_:_:)())
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v3 = *((void *)v2 + 107);
  uint64_t v4 = *((void *)v2 + 106);
  uint64_t v5 = *((void *)v2 + 105);
  uint64_t v6 = *((void *)v2 + 104);
  uint64_t v7 = *((void *)v2 + 103);
  uint64_t v8 = *(_OWORD **)v7;
  long long v10 = *(_OWORD *)(*(void *)v7 + 32);
  long long v9 = *(_OWORD *)(*(void *)v7 + 48);
  *((_OWORD *)v2 + 35) = *(_OWORD *)(*(void *)v7 + 16);
  *((_OWORD *)v2 + 36) = v10;
  *((_OWORD *)v2 + 37) = v9;
  long long v11 = v8[1];
  long long v12 = v8[3];
  *((_OWORD *)v2 + 24) = v8[2];
  *((_OWORD *)v2 + 25) = v12;
  *((_OWORD *)v2 + 23) = v11;
  outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)v2 + 23, (uint64_t)v2 + 688);
  outlined retain of Locale((uint64_t)v2 + 688);
  uint64_t v13 = MEMORY[0x185301530](v6, v5, v4, v3);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  outlined release of Locale((uint64_t)v2 + 560);
  long long v21 = v8[2];
  long long v20 = v8[3];
  *((_OWORD *)v2 + 29) = v8[1];
  *((_OWORD *)v2 + 30) = v21;
  *((_OWORD *)v2 + 31) = v20;
  long long v22 = v8[1];
  long long v23 = v8[3];
  *((_OWORD *)v2 + 18) = v8[2];
  *((_OWORD *)v2 + 19) = v23;
  *((_OWORD *)v2 + 17) = v22;
  outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)v2 + 17, (uint64_t)v2 + 728);
  outlined retain of Locale((uint64_t)v2 + 728);
  uint64_t v24 = BigString.index(after:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v29 = v13;
  uint64_t v31 = v30;
  outlined release of Locale((uint64_t)v2 + 464);
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(void *)v2 = v29;
  *((void *)v2 + 1) = v15;
  *((void *)v2 + 2) = v17;
  *((void *)v2 + 3) = v19;
  *((void *)v2 + 4) = v24;
  *((void *)v2 + 5) = v31;
  *((void *)v2 + 6) = v26;
  *((void *)v2 + 7) = v28;
  specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v2);
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();

  free(v2);
}

uint64_t AttributedString.CharacterView.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v28 = a1[5];
  uint64_t v29 = a1[4];
  uint64_t v26 = a1[7];
  uint64_t v27 = a1[6];
  uint64_t v7 = (_OWORD *)*v2;
  uint64_t v8 = *a1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      uint64_t v31 = v8;
      uint64_t v32 = v4;
      uint64_t v33 = v5;
      uint64_t v34 = v6;
      uint64_t v35 = v29;
      uint64_t v36 = v28;
      uint64_t v37 = v27;
      uint64_t v38 = v26;
      long long v10 = v7[1];
      long long v11 = v7[3];
      v39[1] = v7[2];
      v39[2] = v11;
      v39[0] = v10;
      swift_retain_n();
      outlined retain of Locale((uint64_t)v39);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v39);
      uint64_t v12 = BigSubstring.startIndex.getter();
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      uint64_t v19 = BigSubstring.endIndex.getter();
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      uint64_t v25 = v24;
      outlined release of Locale((uint64_t)v30);
      uint64_t result = swift_release();
      a2[8] = (uint64_t)v7;
      a2[9] = v12;
      a2[10] = v14;
      a2[11] = v16;
      a2[12] = v18;
      a2[13] = v19;
      a2[14] = v21;
      a2[15] = v23;
      a2[16] = v25;
      a2[17] = 0;
      *a2 = v12;
      a2[1] = v14;
      a2[2] = v16;
      a2[3] = v18;
      a2[4] = v19;
      a2[5] = v21;
      a2[6] = v23;
      a2[7] = v25;
      return result;
    }
  }
  __break(1u);
  return result;
}

__n128 key path getter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView@<Q0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1[9];
  uint64_t v12 = *a1;
  long long v13 = *(_OWORD *)(a1 + 1);
  long long v14 = *(_OWORD *)(a1 + 3);
  long long v15 = *(_OWORD *)(a1 + 5);
  long long v16 = *(_OWORD *)(a1 + 7);
  uint64_t v17 = v4;
  long long v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  long long v6 = a2[3];
  v11[2] = a2[2];
  v11[3] = v6;
  AttributedString.CharacterView.subscript.getter((uint64_t *)v11, (uint64_t *)v18);
  long long v7 = v18[7];
  *(_OWORD *)(a3 + 96) = v18[6];
  *(_OWORD *)(a3 + 112) = v7;
  *(_OWORD *)(a3 + 128) = v18[8];
  long long v8 = v18[3];
  *(_OWORD *)(a3 + 32) = v18[2];
  *(_OWORD *)(a3 + 48) = v8;
  long long v9 = v18[5];
  *(_OWORD *)(a3 + 64) = v18[4];
  *(_OWORD *)(a3 + 80) = v9;
  __n128 result = (__n128)v18[1];
  *(_OWORD *)a3 = v18[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

uint64_t key path setter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView(_OWORD *a1, uint64_t a2, _OWORD *a3)
{
  long long v3 = a3[1];
  v10[0] = *a3;
  v10[1] = v3;
  long long v4 = a3[3];
  v10[2] = a3[2];
  v10[3] = v4;
  long long v5 = a1[7];
  v11[6] = a1[6];
  v11[7] = v5;
  v11[8] = a1[8];
  long long v6 = a1[3];
  v11[2] = a1[2];
  v11[3] = v6;
  long long v7 = a1[5];
  _OWORD v11[4] = a1[4];
  v11[5] = v7;
  long long v8 = a1[1];
  v11[0] = *a1;
  v11[1] = v8;
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v11);
  specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)((uint64_t *)v10, (uint64_t)v11);
  return outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v11);
}

uint64_t AttributedString.CharacterView.subscript.setter(long long *a1, uint64_t *a2)
{
  long long v3 = *a1;
  long long v4 = a1[1];
  long long v5 = a1[3];
  long long v88 = a1[2];
  long long v89 = v5;
  long long v86 = v3;
  long long v87 = v4;
  long long v6 = a1[4];
  long long v7 = a1[5];
  long long v8 = a1[8];
  long long v93 = a1[7];
  long long v94 = v8;
  long long v9 = a1[6];
  long long v91 = v7;
  long long v92 = v9;
  long long v90 = v6;
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  uint64_t v15 = a2[5];
  uint64_t v17 = a2[6];
  uint64_t v16 = a2[7];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      uint64_t v58 = v16;
      uint64_t v19 = *(_OWORD **)v2;
      long long v20 = *(_OWORD *)(*(void *)v2 + 16);
      long long v21 = *(_OWORD *)(*(void *)v2 + 48);
      v79[1] = *(_OWORD *)(*(void *)v2 + 32);
      v79[2] = v21;
      v79[0] = v20;
      long long v22 = v19[1];
      v80[1] = v19[2];
      v80[2] = v21;
      v80[0] = v22;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v80, (uint64_t)v81);
      outlined retain of Locale((uint64_t)v81);
      uint64_t v23 = MEMORY[0x185301530](v10, v11, v12, v13);
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      outlined release of Locale((uint64_t)v79);
      long long v30 = v19[1];
      long long v31 = v19[3];
      v78[1] = v19[2];
      v78[2] = v31;
      v78[0] = v30;
      long long v32 = v19[1];
      v82[1] = v19[2];
      v82[2] = v31;
      v82[0] = v32;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v82, (uint64_t)v83);
      outlined retain of Locale((uint64_t)v83);
      uint64_t v33 = MEMORY[0x185301530](v14, v15, v17, v58);
      uint64_t v35 = v34;
      uint64_t v37 = v36;
      uint64_t v39 = v38;
      outlined release of Locale((uint64_t)v78);
      v61[0] = v23;
      v61[1] = v25;
      v61[2] = v27;
      v61[3] = v29;
      v61[4] = v33;
      v61[5] = v35;
      v61[6] = v37;
      v61[7] = v39;
      long long v73 = v86;
      long long v74 = v87;
      long long v75 = v88;
      long long v76 = v89;
      long long v40 = (_OWORD *)v90;
      long long v41 = *(_OWORD *)(v90 + 16);
      long long v42 = *(_OWORD *)(v90 + 48);
      v77[1] = *(_OWORD *)(v90 + 32);
      v77[2] = v42;
      v77[0] = v41;
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v86);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v86);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v86);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v86);
      outlined retain of Locale((uint64_t)v77);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v77);
      uint64_t v43 = BigSubstring.startIndex.getter();
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      uint64_t v50 = BigSubstring.endIndex.getter();
      uint64_t v52 = v51;
      uint64_t v54 = v53;
      uint64_t v56 = v55;
      outlined release of Locale((uint64_t)v59);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v86);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v86);
      uint64_t v65 = v43;
      uint64_t v66 = v45;
      uint64_t v67 = v47;
      uint64_t v68 = v49;
      uint64_t v69 = v50;
      uint64_t v70 = v52;
      uint64_t v71 = v54;
      uint64_t v72 = v56;
      long long v57 = v40[2];
      long long v62 = v40[1];
      long long v63 = v57;
      long long v64 = v40[3];
      v84[1] = v57;
      v84[2] = v64;
      v84[0] = v62;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v84, (uint64_t)v85);
      outlined retain of Locale((uint64_t)v85);
      BigSubstring.init(_unchecked:in:)();
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v86);
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v61);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v86);
      outlined release of Locale((uint64_t)v60);
      return outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v86);
    }
  }
  __break(1u);
  return result;
}

uint64_t AttributedString.CharacterView.subscript.modify(void *a1, uint64_t *a2)
{
  long long v5 = malloc(0x9A8uLL);
  *a1 = v5;
  v5[300] = v2;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  v5[301] = *a2;
  v5[302] = v6;
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  v5[303] = v8;
  v5[304] = v9;
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  v5[305] = v10;
  v5[306] = v11;
  uint64_t v12 = a2[6];
  uint64_t v13 = a2[7];
  v5[307] = v12;
  v5[308] = v13;
  uint64_t v14 = (_OWORD *)*v2;
  uint64_t v15 = v7;
  uint64_t v32 = v6;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      v5[156] = v15;
      v5[157] = v32;
      v5[158] = v8;
      v5[159] = v9;
      v5[160] = v10;
      v5[161] = v11;
      v5[162] = v12;
      v5[163] = v13;
      long long v17 = v14[1];
      long long v18 = v14[3];
      *((_OWORD *)v5 + 118) = v14[2];
      *((_OWORD *)v5 + 119) = v18;
      *((_OWORD *)v5 + 117) = v17;
      swift_retain_n();
      outlined retain of Locale((uint64_t)(v5 + 234));
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)(v5 + 234));
      uint64_t v33 = BigSubstring.startIndex.getter();
      uint64_t v20 = v19;
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      uint64_t v25 = BigSubstring.endIndex.getter();
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      outlined release of Locale((uint64_t)(v5 + 54));
      swift_release();
      v5[44] = v14;
      v5[45] = v33;
      v5[46] = v20;
      v5[47] = v22;
      v5[48] = v24;
      v5[49] = v25;
      v5[50] = v27;
      v5[51] = v29;
      v5[52] = v31;
      v5[53] = 0;
      v5[36] = v33;
      v5[37] = v20;
      v5[38] = v22;
      v5[39] = v24;
      v5[40] = v25;
      v5[41] = v27;
      v5[42] = v29;
      v5[43] = v31;
      return (uint64_t)AttributedString.CharacterView.subscript.modify;
    }
  }
  __break(1u);
  return result;
}

void AttributedString.CharacterView.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(_OWORD **)a1;
  long long v3 = (_OWORD *)(*(void *)a1 + 288);
  if ((a2 & 1) == 0)
  {
    long long v59 = *(_OWORD *)(*(void *)a1 + 400);
    v2[6] = *(_OWORD *)(*(void *)a1 + 384);
    v2[7] = v59;
    v2[8] = v3[8];
    long long v60 = v3[3];
    v2[2] = v3[2];
    v2[3] = v60;
    long long v61 = v3[5];
    v2[4] = v3[4];
    v2[5] = v61;
    long long v62 = v3[1];
    _OWORD *v2 = *v3;
    v2[1] = v62;
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
    {
      if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
      {
        uint64_t v126 = *((void *)v2 + 308);
        uint64_t v121 = *((void *)v2 + 306);
        uint64_t v124 = *((void *)v2 + 307);
        uint64_t v119 = *((void *)v2 + 305);
        uint64_t v115 = *((void *)v2 + 304);
        uint64_t v63 = *((void *)v2 + 303);
        uint64_t v64 = *((void *)v2 + 302);
        uint64_t v65 = *((void *)v2 + 301);
        uint64_t v129 = *((void *)v2 + 300);
        uint64_t v66 = *(_OWORD **)v129;
        long long v68 = *(_OWORD *)(*(void *)v129 + 32);
        long long v67 = *(_OWORD *)(*(void *)v129 + 48);
        v2[105] = *(_OWORD *)(*(void *)v129 + 16);
        v2[106] = v68;
        v2[107] = v67;
        long long v69 = v66[1];
        long long v70 = v66[3];
        v2[133] = v66[2];
        v2[134] = v70;
        v2[132] = v69;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v2 + 132, (uint64_t)v2 + 2200);
        outlined retain of Locale((uint64_t)v2 + 2200);
        uint64_t v71 = MEMORY[0x185301530](v65, v64, v63, v115);
        uint64_t v114 = v72;
        uint64_t v116 = v71;
        uint64_t v74 = v73;
        uint64_t v76 = v75;
        outlined release of Locale((uint64_t)(v2 + 105));
        long long v78 = v66[2];
        long long v77 = v66[3];
        v2[108] = v66[1];
        v2[109] = v78;
        v2[110] = v77;
        long long v79 = v66[1];
        long long v80 = v66[3];
        v2[127] = v66[2];
        v2[128] = v80;
        v2[126] = v79;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v2 + 126, (uint64_t)v2 + 2280);
        outlined retain of Locale((uint64_t)v2 + 2280);
        uint64_t v81 = MEMORY[0x185301530](v119, v121, v124, v126);
        uint64_t v83 = v82;
        uint64_t v85 = v84;
        uint64_t v87 = v86;
        outlined release of Locale((uint64_t)(v2 + 108));
        *((void *)v2 + 140) = v116;
        *((void *)v2 + 141) = v74;
        *((void *)v2 + 142) = v76;
        *((void *)v2 + 143) = v114;
        *((void *)v2 + 144) = v81;
        *((void *)v2 + 145) = v83;
        *((void *)v2 + 146) = v85;
        *((void *)v2 + 147) = v87;
        long long v88 = v2[1];
        v2[82] = *v2;
        v2[83] = v88;
        long long v89 = v2[3];
        v2[84] = v2[2];
        v2[85] = v89;
        long long v90 = (_OWORD *)*((void *)v2 + 8);
        long long v91 = v90[3];
        long long v92 = v90[1];
        v2[103] = v90[2];
        v2[104] = v91;
        v2[102] = v92;
        outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
        outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
        outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
        outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
        outlined retain of Locale((uint64_t)(v2 + 102));
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)(v2 + 102));
        uint64_t v127 = BigSubstring.startIndex.getter();
        uint64_t v94 = v93;
        uint64_t v96 = v95;
        uint64_t v98 = v97;
        uint64_t v99 = BigSubstring.endIndex.getter();
        uint64_t v101 = v100;
        uint64_t v103 = v102;
        uint64_t v105 = v104;
        outlined release of Locale((uint64_t)(v2 + 34));
        outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
        outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
        *((void *)v2 + 148) = v127;
        *((void *)v2 + 149) = v94;
        *((void *)v2 + 150) = v96;
        *((void *)v2 + 151) = v98;
        *((void *)v2 + 152) = v99;
        *((void *)v2 + 153) = v101;
        *((void *)v2 + 154) = v103;
        *((void *)v2 + 155) = v105;
        long long v107 = v90[2];
        long long v106 = v90[3];
        v2[120] = v90[1];
        v2[121] = v107;
        v2[122] = v106;
        long long v108 = v90[1];
        long long v109 = v90[3];
        v2[112] = v90[2];
        v2[113] = v109;
        v2[111] = v108;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v2 + 111, (uint64_t)v2 + 2360);
        outlined retain of Locale((uint64_t)v2 + 2360);
        BigSubstring.init(_unchecked:in:)();
        outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
        specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)(v2 + 70));
        outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
        outlined release of Locale((uint64_t)(v2 + 41));
        uint64_t v55 = (uint64_t)v2;
        goto LABEL_8;
      }
LABEL_14:
      __break(1u);
      return;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  long long v4 = *(_OWORD *)(*(void *)a1 + 400);
  v2[6] = *(_OWORD *)(*(void *)a1 + 384);
  v2[7] = v4;
  v2[8] = v3[8];
  long long v5 = v3[3];
  v2[2] = v3[2];
  v2[3] = v5;
  long long v6 = v3[5];
  v2[4] = v3[4];
  v2[5] = v6;
  long long v7 = v3[1];
  _OWORD *v2 = *v3;
  v2[1] = v7;
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
  if (static BigString.Index.< infix(_:_:)())
  {
    __break(1u);
    goto LABEL_12;
  }
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v122 = *((void *)v2 + 308);
  uint64_t v118 = *((void *)v2 + 306);
  uint64_t v120 = *((void *)v2 + 307);
  uint64_t v117 = *((void *)v2 + 305);
  uint64_t v110 = *((void *)v2 + 303);
  uint64_t v112 = *((void *)v2 + 304);
  uint64_t v8 = *((void *)v2 + 302);
  uint64_t v9 = *((void *)v2 + 301);
  uint64_t v128 = *((void *)v2 + 300);
  uint64_t v10 = *(_OWORD **)v128;
  long long v12 = *(_OWORD *)(*(void *)v128 + 32);
  long long v11 = *(_OWORD *)(*(void *)v128 + 48);
  v2[114] = *(_OWORD *)(*(void *)v128 + 16);
  v2[115] = v12;
  v2[116] = v11;
  long long v13 = v10[1];
  long long v14 = v10[3];
  v2[124] = v10[2];
  v2[125] = v14;
  v2[123] = v13;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v2 + 123, (uint64_t)(v2 + 145));
  outlined retain of Locale((uint64_t)(v2 + 145));
  uint64_t v15 = MEMORY[0x185301530](v9, v8, v110, v112);
  uint64_t v111 = v16;
  uint64_t v113 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  outlined release of Locale((uint64_t)(v2 + 114));
  long long v22 = v10[2];
  long long v21 = v10[3];
  v2[93] = v10[1];
  v2[94] = v22;
  v2[95] = v21;
  long long v23 = v10[1];
  long long v24 = v10[3];
  v2[97] = v10[2];
  v2[98] = v24;
  v2[96] = v23;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v2 + 96, (uint64_t)(v2 + 140));
  outlined retain of Locale((uint64_t)(v2 + 140));
  uint64_t v25 = MEMORY[0x185301530](v117, v118, v120, v122);
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  outlined release of Locale((uint64_t)(v2 + 93));
  *((void *)v2 + 132) = v113;
  *((void *)v2 + 133) = v111;
  *((void *)v2 + 134) = v18;
  *((void *)v2 + 135) = v20;
  *((void *)v2 + 136) = v25;
  *((void *)v2 + 137) = v27;
  *((void *)v2 + 138) = v29;
  *((void *)v2 + 139) = v31;
  long long v32 = v2[1];
  v2[86] = *v2;
  v2[87] = v32;
  long long v33 = v2[3];
  v2[88] = v2[2];
  v2[89] = v33;
  uint64_t v34 = (_OWORD *)*((void *)v2 + 8);
  long long v35 = v34[3];
  long long v36 = v34[1];
  v2[91] = v34[2];
  v2[92] = v35;
  v2[90] = v36;
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
  outlined retain of Locale((uint64_t)(v2 + 90));
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)(v2 + 90));
  uint64_t v37 = BigSubstring.startIndex.getter();
  uint64_t v123 = v38;
  uint64_t v125 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v43 = BigSubstring.endIndex.getter();
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  outlined release of Locale((uint64_t)(v2 + 48));
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
  *((void *)v2 + 124) = v125;
  *((void *)v2 + 125) = v123;
  *((void *)v2 + 126) = v40;
  *((void *)v2 + 127) = v42;
  *((void *)v2 + 128) = v43;
  *((void *)v2 + 129) = v45;
  *((void *)v2 + 130) = v47;
  *((void *)v2 + 131) = v49;
  long long v51 = v34[2];
  long long v50 = v34[3];
  v2[99] = v34[1];
  v2[100] = v51;
  v2[101] = v50;
  long long v52 = v34[1];
  long long v53 = v34[3];
  v2[130] = v34[2];
  v2[131] = v53;
  v2[129] = v52;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v2 + 129, (uint64_t)(v2 + 135));
  outlined retain of Locale((uint64_t)(v2 + 135));
  BigSubstring.init(_unchecked:in:)();
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
  specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)(v2 + 66));
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
  outlined release of Locale((uint64_t)(v2 + 55));
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v2);
  long long v54 = v3[7];
  uint64_t v55 = (uint64_t)(v2 + 9);
  v2[15] = v3[6];
  v2[16] = v54;
  v2[17] = v3[8];
  long long v56 = v3[3];
  v2[11] = v3[2];
  v2[12] = v56;
  long long v57 = v3[5];
  v2[13] = v3[4];
  v2[14] = v57;
  long long v58 = v3[1];
  v2[9] = *v3;
  v2[10] = v58;
LABEL_8:
  outlined release of Slice<AttributedString.UnicodeScalarView>(v55);

  free(v2);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.CharacterView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v4 = v2[1];
  long long v5 = v2[3];
  v15[1] = v2[2];
  v15[2] = v5;
  v15[0] = v4;
  long long v6 = v2[1];
  v16[1] = v2[2];
  v16[2] = v5;
  v16[0] = v6;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v17);
  outlined retain of Locale((uint64_t)v17);
  uint64_t v7 = BigString.index(before:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v15);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v7;
    a1[1] = v9;
    a1[2] = v11;
    a1[3] = v13;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.CharacterView(uint64_t *a1)
{
  long long v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v5 = v3[1];
  long long v6 = v3[3];
  v15[1] = v3[2];
  v15[2] = v6;
  v15[0] = v5;
  long long v7 = v3[1];
  v16[1] = v3[2];
  v16[2] = v6;
  v16[0] = v7;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v17);
  outlined retain of Locale((uint64_t)v17);
  uint64_t v8 = BigString.index(before:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  outlined release of Locale((uint64_t)v15);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v12;
    a1[3] = v14;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.CharacterView()
{
  v1 = *(_OWORD **)v0;
  long long v2 = *(_OWORD *)(v0 + 24);
  long long v11 = *(_OWORD *)(v0 + 8);
  long long v12 = v2;
  long long v3 = *(_OWORD *)(v0 + 56);
  long long v13 = *(_OWORD *)(v0 + 40);
  long long v14 = v3;
  long long v4 = v1[2];
  long long v8 = v1[1];
  long long v9 = v4;
  long long v10 = v1[3];
  v15[0] = v8;
  v15[1] = v4;
  v15[2] = v10;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v15, (uint64_t)v16);
  outlined retain of Locale((uint64_t)v16);
  BigSubstring.init(_unchecked:in:)();
  uint64_t v5 = BigSubstring.count.getter();
  outlined release of Locale((uint64_t)&v7);
  return v5;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString.CharacterView@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  long long v5 = v3[1];
  long long v6 = v3[3];
  v15[1] = v3[2];
  v15[2] = v6;
  v15[0] = v5;
  long long v7 = v3[1];
  v16[1] = v3[2];
  v16[2] = v6;
  v16[0] = v7;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v17);
  outlined retain of Locale((uint64_t)v17);
  uint64_t v8 = BigString.index(_:offsetBy:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  outlined release of Locale((uint64_t)v15);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v12;
    a1[3] = v14;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString.CharacterView()
{
  v1 = *(_OWORD **)v0;
  long long v2 = *(_OWORD *)(v0 + 24);
  long long v11 = *(_OWORD *)(v0 + 8);
  long long v12 = v2;
  long long v3 = *(_OWORD *)(v0 + 56);
  long long v13 = *(_OWORD *)(v0 + 40);
  long long v14 = v3;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v5 = v1[2];
    long long v8 = v1[1];
    long long v9 = v5;
    long long v10 = v1[3];
    v15[1] = v5;
    v15[2] = v10;
    v15[0] = v8;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v15, (uint64_t)v16);
    outlined retain of Locale((uint64_t)v16);
    BigSubstring.init(_unchecked:in:)();
    uint64_t v6 = BigSubstring.distance(from:to:)();
    outlined release of Locale((uint64_t)v7);
    return v6;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AttributedString.CharacterView@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v5 = v3[1];
  long long v6 = v3[3];
  v15[1] = v3[2];
  v15[2] = v6;
  v15[0] = v5;
  long long v7 = v3[1];
  v16[1] = v3[2];
  v16[2] = v6;
  v16[0] = v7;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v17);
  outlined retain of Locale((uint64_t)v17);
  uint64_t v8 = BigString.index(after:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  outlined release of Locale((uint64_t)v15);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v12;
    a1[3] = v14;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.CharacterView()
{
  long long v1 = v0[3];
  v5[2] = v0[2];
  v5[3] = v1;
  v5[4] = v0[4];
  long long v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v5);
  outlined release of AttributedString.Runs((uint64_t)v5);
  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.CharacterView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t AttributedString.CharacterView._mutateStringContents(in:attributes:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t))
{
  long long v5 = v4;
  uint64_t v8 = (_OWORD *)*v4;
  uint64_t v9 = BigString.Index.utf8Offset.getter();
  uint64_t v10 = BigString.Index.utf8Offset.getter();
  uint64_t v51 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v9, v10);
  uint64_t v52 = v11;
  long long v12 = v8[1];
  long long v13 = v8[3];
  v76[1] = v8[2];
  v76[2] = v13;
  v76[0] = v12;
  long long v14 = v8[1];
  v77[1] = v8[2];
  v77[2] = v13;
  v77[0] = v14;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v77, (uint64_t)v78);
  outlined retain of Locale((uint64_t)v78);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v76);
  uint64_t v55 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v57);
  long long v15 = *(_OWORD *)(v5 + 3);
  long long v72 = *(_OWORD *)(v5 + 1);
  long long v73 = v15;
  long long v16 = *(_OWORD *)(v5 + 7);
  long long v74 = *(_OWORD *)(v5 + 5);
  long long v75 = v16;
  long long v17 = v8[2];
  long long v69 = v8[1];
  long long v70 = v17;
  long long v71 = v8[3];
  v79[1] = v17;
  v79[2] = v71;
  v79[0] = v69;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v79, (uint64_t)v80);
  outlined retain of Locale((uint64_t)v80);
  BigSubstring.init(_unchecked:in:)();
  BigString.init()();
  long long v18 = v59;
  v8[1] = v58;
  v8[2] = v18;
  v8[3] = v60;
  swift_unknownObjectRelease();
  a4(v56, a1);
  v68[4] = v56[4];
  v68[5] = v56[5];
  v68[6] = v56[6];
  v68[0] = v56[0];
  v68[1] = v56[1];
  v68[2] = v56[2];
  v68[3] = v56[3];
  outlined retain of Locale((uint64_t)v68);
  BigSubstring.base.getter();
  outlined release of Locale((uint64_t)v68);
  long long v19 = v62;
  v8[1] = v61;
  v8[2] = v19;
  v8[3] = v63;
  swift_unknownObjectRelease();
  outlined retain of Locale((uint64_t)v68);
  uint64_t v20 = BigSubstring.startIndex.getter();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  outlined release of Locale((uint64_t)v68);
  outlined retain of Locale((uint64_t)v68);
  uint64_t v27 = BigSubstring.endIndex.getter();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  outlined release of Locale((uint64_t)v68);
  v5[1] = v20;
  v5[2] = v22;
  v5[3] = v24;
  v5[4] = v26;
  _OWORD v5[5] = v27;
  v5[6] = v29;
  v5[7] = v31;
  v5[8] = v33;
  uint64_t v34 = BigString.Index.utf8Offset.getter();
  uint64_t v35 = BigString.Index.utf8Offset.getter();
  long long v36 = v8[1];
  long long v37 = v8[3];
  v67[1] = v8[2];
  v67[2] = v37;
  v67[0] = v36;
  long long v38 = v8[1];
  long long v39 = v8[2];
  v81[2] = v37;
  v81[1] = v39;
  v81[0] = v38;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v81, (uint64_t)v82);
  outlined retain of Locale((uint64_t)v82);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v67);
  uint64_t v40 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v64);
  uint64_t v42 = v40 - v55;
  if (__OFSUB__(v40, v55))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v43 = v35 - v34;
  if (__OFSUB__(v35, v34))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v44 = v43 + v42;
  if (__OFADD__(v43, v42))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v34, v35, v44, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v45 = v8[1];
  long long v46 = v8[3];
  v66[1] = v8[2];
  v66[2] = v46;
  v66[0] = v45;
  long long v47 = v8[1];
  v83[1] = v8[2];
  v83[2] = v46;
  v83[0] = v47;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v83, (uint64_t)v84);
  outlined retain of Locale((uint64_t)v84);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v66);
  uint64_t v48 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v65);
  uint64_t v49 = v48 - v55;
  if (__OFSUB__(v48, v55))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v50 = v52 + v49;
  if (__OFADD__(v52, v49))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = v51;
  if (v50 >= v51)
  {
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v51, v50, 1, 0);
    return outlined release of Locale((uint64_t)v68);
  }
LABEL_13:
  __break(1u);
  return result;
}

void closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v9 = MEMORY[0x1F4188790](a1);
  if (*v10 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6, a5, v9);
    BigSubstring.replaceSubrange<A>(_:with:)();
  }
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance AttributedString.CharacterView(uint64_t *a1, _OWORD *a2, ValueMetadata *a3)
{
  AttributedString.CharacterView.replaceSubrange<A>(_:with:)(a1, a2, a3);
  long long v5 = (uint64_t (*)(_OWORD *, ValueMetadata *))*((void *)a3[-1].Description + 1);

  return v5(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance AttributedString.CharacterView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return specialized RangeReplaceableCollection.init(repeating:count:)(a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance AttributedString.CharacterView()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    uint64_t v6 = (_OWORD *)*v0;
    long long v7 = *(_OWORD *)(*v0 + 16);
    long long v8 = *(_OWORD *)(*v0 + 48);
    v29[1] = *(_OWORD *)(*v0 + 32);
    v29[2] = v8;
    v29[0] = v7;
    long long v9 = v6[1];
    v30[1] = v6[2];
    v30[2] = v8;
    v30[0] = v9;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v30, (uint64_t)v31);
    outlined retain of Locale((uint64_t)v31);
    uint64_t v10 = MEMORY[0x185301530](v1, v2, v3, v4);
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v26 = v15;
    outlined release of Locale((uint64_t)v29);
    long long v16 = v6[1];
    long long v17 = v6[3];
    v28[1] = v6[2];
    v28[2] = v17;
    v28[0] = v16;
    long long v18 = v6[1];
    v32[1] = v6[2];
    v32[2] = v17;
    v32[0] = v18;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v32, (uint64_t)v33);
    outlined retain of Locale((uint64_t)v33);
    uint64_t v19 = MEMORY[0x185301530](v1, v2, v3, v4);
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    outlined release of Locale((uint64_t)v28);
    v27[0] = v10;
    v27[1] = v12;
    v27[2] = v14;
    v27[3] = v26;
    v27[4] = v19;
    v27[5] = v21;
    v27[6] = v23;
    v27[7] = v25;
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v27);
    return swift_bridgeObjectRelease();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance AttributedString.CharacterView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v8 = *(_OWORD **)v2;
    long long v9 = *(_OWORD *)(*(void *)v2 + 16);
    long long v10 = *(_OWORD *)(*(void *)v2 + 48);
    v31[1] = *(_OWORD *)(*(void *)v2 + 32);
    v31[2] = v10;
    v31[0] = v9;
    long long v11 = v8[1];
    v32[1] = v8[2];
    v32[2] = v10;
    v32[0] = v11;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v32, (uint64_t)v33);
    outlined retain of Locale((uint64_t)v33);
    uint64_t v12 = MEMORY[0x185301530](v3, v4, v5, v6);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v28 = v17;
    outlined release of Locale((uint64_t)v31);
    long long v18 = v8[1];
    long long v19 = v8[3];
    v30[1] = v8[2];
    v30[2] = v19;
    v30[0] = v18;
    long long v20 = v8[1];
    v34[1] = v8[2];
    v34[2] = v19;
    v34[0] = v20;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v34, (uint64_t)v35);
    outlined retain of Locale((uint64_t)v35);
    uint64_t v21 = MEMORY[0x185301530](v3, v4, v5, v6);
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    outlined release of Locale((uint64_t)v30);
    v29[0] = v12;
    v29[1] = v14;
    v29[2] = v16;
    _OWORD v29[3] = v28;
    v29[4] = v21;
    v29[5] = v23;
    v29[6] = v25;
    v29[7] = v27;
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v29);
    return swift_bridgeObjectRelease();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance AttributedString.CharacterView(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, *a2, a2[1], a2[2], a2[3], a3, a4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v6(a1, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance AttributedString.CharacterView@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RangeReplaceableCollection.remove(at:)(*a1, a1[1], a1[2], a1[3]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance AttributedString.CharacterView(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      uint64_t v32 = v8;
      long long v11 = *(_OWORD **)v1;
      long long v12 = *(_OWORD *)(*(void *)v1 + 16);
      long long v13 = *(_OWORD *)(*(void *)v1 + 48);
      v35[1] = *(_OWORD *)(*(void *)v1 + 32);
      v35[2] = v13;
      v35[0] = v12;
      long long v14 = v11[1];
      v36[1] = v11[2];
      v36[2] = v13;
      v36[0] = v14;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v36, (uint64_t)v37);
      outlined retain of Locale((uint64_t)v37);
      uint64_t v15 = MEMORY[0x185301530](v2, v3, v4, v5);
      uint64_t v17 = v16;
      uint64_t v19 = v18;
      uint64_t v21 = v20;
      outlined release of Locale((uint64_t)v35);
      long long v22 = v11[1];
      long long v23 = v11[3];
      v34[1] = v11[2];
      v34[2] = v23;
      v34[0] = v22;
      long long v24 = v11[1];
      v38[1] = v11[2];
      v38[2] = v23;
      v38[0] = v24;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v38, (uint64_t)v39);
      outlined retain of Locale((uint64_t)v39);
      uint64_t v25 = MEMORY[0x185301530](v6, v7, v9, v32);
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      outlined release of Locale((uint64_t)v34);
      v33[0] = v15;
      v33[1] = v17;
      v33[2] = v19;
      v33[3] = v21;
      v33[4] = v25;
      v33[5] = v27;
      v33[6] = v29;
      v33[7] = v31;
      return specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v33);
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeFirst() in conformance AttributedString.CharacterView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized RangeReplaceableCollection.removeFirst()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance AttributedString.CharacterView(char a1)
{
  uint64_t v2 = v1;
  if (a1)
  {
    uint64_t v3 = v1[1];
    uint64_t v4 = v1[2];
    uint64_t v5 = v1[3];
    uint64_t v6 = v1[4];
    uint64_t v7 = v1[5];
    uint64_t v8 = v2[6];
    uint64_t v9 = v2[7];
    uint64_t v10 = v2[8];
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0)
        {
          long long v12 = (_OWORD *)*v2;
          long long v13 = *(_OWORD *)(*v2 + 16);
          long long v14 = *(_OWORD *)(*v2 + 48);
          v35[1] = *(_OWORD *)(*v2 + 32);
          v35[2] = v14;
          v35[0] = v13;
          long long v15 = v12[1];
          v36[1] = v12[2];
          v36[2] = v14;
          v36[0] = v15;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v36, (uint64_t)v37);
          outlined retain of Locale((uint64_t)v37);
          uint64_t v16 = MEMORY[0x185301530](v3, v4, v5, v6);
          uint64_t v18 = v17;
          uint64_t v20 = v19;
          uint64_t v22 = v21;
          outlined release of Locale((uint64_t)v35);
          long long v23 = v12[1];
          long long v24 = v12[3];
          v34[1] = v12[2];
          v34[2] = v24;
          v34[0] = v23;
          long long v25 = v12[1];
          v38[1] = v12[2];
          v38[2] = v24;
          v38[0] = v25;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v38, (uint64_t)v39);
          outlined retain of Locale((uint64_t)v39);
          uint64_t v26 = MEMORY[0x185301530](v7, v8, v9, v10);
          uint64_t v28 = v27;
          uint64_t v30 = v29;
          uint64_t v32 = v31;
          outlined release of Locale((uint64_t)v34);
          v33[0] = v16;
          v33[1] = v18;
          v33[2] = v20;
          v33[3] = v22;
          v33[4] = v26;
          v33[5] = v28;
          v33[6] = v30;
          v33[7] = v32;
          return specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v33);
        }
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  swift_release();

  return AttributedString.CharacterView.init()(v1);
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance AttributedString.CharacterView(uint64_t (*a1)(void *))
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1);
}

uint64_t specialized Rope.Builder._appendNow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v10 = (void *)*v3;
  if (!*(void *)(*v3 + 16))
  {
    swift_unknownObjectRetain();
    uint64_t v11 = a1;
LABEL_38:
    uint64_t v50 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x185309530](&v50, 8);
    uint64_t v41 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    }
    unint64_t v43 = v10[2];
    unint64_t v42 = v10[3];
    if (v43 >= v42 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v10);
    }
    v10[2] = v43 + 1;
    uint64_t v44 = &v10[4 * v43];
    v44[4] = v11;
    v44[5] = v8;
    v44[6] = v7;
    v44[7] = v41;
LABEL_43:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v48 = v10;
    return result;
  }
  swift_unknownObjectRetain();
  uint64_t v11 = a1;
  while (1)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v13 = v10[2];
      if (!v13) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      uint64_t v10 = (void *)result;
      uint64_t v13 = *(void *)(result + 16);
      if (!v13)
      {
LABEL_33:
        __break(1u);
LABEL_34:
        uint64_t v49 = 0;
        swift_unknownObjectRetain();
        MEMORY[0x185309530](&v49, 8);
        uint64_t v31 = specialized static Rope.join(_:_:)((uint64_t)v3, v6, v4, v5, v11, v8, v7);
        uint64_t v33 = v32;
        uint64_t v35 = v34;
        uint64_t v37 = v36;
        unint64_t v38 = v10[2];
        unint64_t v39 = v10[3];
        swift_unknownObjectRetain();
        if (v38 >= v39 >> 1) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v38 + 1, 1, v10);
        }
        v10[2] = v38 + 1;
        uint64_t v40 = &v10[4 * v38];
        v40[4] = v31;
        v40[5] = v33;
        v40[6] = v35;
        v40[7] = v37;
        swift_unknownObjectRelease();
        goto LABEL_43;
      }
    }
    uint64_t v14 = v13 - 1;
    unint64_t v15 = (unint64_t)(v10 + 4);
    uint64_t v16 = &v10[4 * v14 + 4];
    uint64_t v3 = (void *)*v16;
    uint64_t v6 = v16[1];
    uint64_t v4 = v16[2];
    uint64_t v5 = v16[3];
    v10[2] = v14;
    if (!v3) {
      break;
    }
    while (*((unsigned __int8 *)v3 + 18) < *(unsigned __int8 *)(v11 + 18))
    {
LABEL_9:
      uint64_t v17 = v10[2];
      if (!v17) {
        goto LABEL_34;
      }
      uint64_t v18 = v17 - 1;
      uint64_t v19 = (uint64_t *)(v15 + 32 * v18);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = v19[2];
      uint64_t v23 = v19[3];
      v10[2] = v18;
      uint64_t result = specialized static Rope.join(_:_:)(v20, v21, v22, v23, (uint64_t)v3, v6, v4);
      uint64_t v3 = (void *)result;
      uint64_t v6 = v24;
      uint64_t v4 = v25;
      uint64_t v5 = v26;
      if (!result) {
        goto LABEL_8;
      }
    }
    uint64_t v50 = v3;
    uint64_t v51 = v6;
    uint64_t v52 = v4;
    int v27 = *(unsigned __int8 *)(v11 + 18);
    if (*((unsigned __int8 *)v3 + 18) != v27) {
      goto LABEL_16;
    }
    uint64_t v3 = &v50;
    BOOL v28 = specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)&v53);
    uint64_t v11 = (uint64_t)v50;
    uint64_t v8 = v51;
    uint64_t v7 = v52;
    if (v28)
    {
      swift_unknownObjectRelease();
LABEL_25:
      uint64_t v53 = v11;
      goto LABEL_26;
    }
    unint64_t v15 = *((unsigned __int8 *)v50 + 18) + 1;
    unint64_t v30 = v15 >> 8;
    if ((v15 & 0x100) != 0) {
      goto LABEL_47;
    }
    uint64_t v47 = v53;
    uint64_t v5 = v54;
    uint64_t v6 = v55;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    uint64_t v4 = swift_allocObject();
    *(_WORD *)(v4 + 16) = 0;
    *(unsigned char *)(v4 + 18) = v15;
    unint64_t v15 = v8 + v5;
    if (__OFADD__(v8, v5)) {
      goto LABEL_48;
    }
    uint64_t v3 = (void *)(v7 + v6);
    if (__OFADD__(v7, v6)) {
      goto LABEL_49;
    }
    specialized closure #1 in static Rope._Node.createInner(children:_:)((_WORD *)(v4 + 16), v4 + 24, v11, v8, v7, v47, v5, v6);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v53 = v4;
    v8 += v5;
    v7 += v6;
    uint64_t v11 = v4;
LABEL_26:
    uint64_t v54 = v8;
    uint64_t v55 = v7;
    if (!v10[2]) {
      goto LABEL_38;
    }
  }
LABEL_8:
  if (*(unsigned char *)(v11 + 18)) {
    goto LABEL_9;
  }
  uint64_t v50 = 0;
  uint64_t v51 = v6;
  uint64_t v52 = v4;
  int v27 = *(unsigned __int8 *)(v11 + 18);
  if (!*(unsigned char *)(v11 + 18)) {
    goto LABEL_52;
  }
LABEL_16:
  if (*(_WORD *)(v11 + 16) != 15 || *((_WORD *)v3 + 8) == 15)
  {
LABEL_44:
    unint64_t v15 = v10[2];
    unint64_t v46 = v10[3];
    uint64_t v47 = v15 + 1;
    swift_unknownObjectRetain();
    unint64_t v30 = v46;
    if (v15 < v46 >> 1)
    {
LABEL_45:
      v10[2] = v47;
      long long v45 = &v10[4 * v15];
      v45[4] = v3;
      v45[5] = v6;
      v45[6] = v4;
      v45[7] = v5;
      swift_unknownObjectRelease();
      goto LABEL_38;
    }
LABEL_50:
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v47, 1, v10);
    goto LABEL_45;
  }
  if (v3)
  {
    int v29 = *((unsigned __int8 *)v3 + 18);
    int v27 = *(unsigned __int8 *)(v11 + 18);
  }
  else
  {
    int v29 = 0;
  }
  unint64_t v30 = (v27 + 1);
  if ((v30 >> 8))
  {
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v29 != v30) {
    goto LABEL_44;
  }
  if (v3)
  {
    uint64_t v3 = &v50;
    specialized Rope._Node._appendNode(_:)(v11, v8, v7);
    uint64_t v11 = (uint64_t)v50;
    uint64_t v8 = v51;
    uint64_t v7 = v52;
    goto LABEL_25;
  }
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t specialized static Rope.join(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a1;
  if (!a5) {
    return v7;
  }
  if (!*(_WORD *)(a5 + 16))
  {
    swift_unknownObjectRelease();
    return v7;
  }
  if (!a1) {
    return a5;
  }
  if (!*(_WORD *)(a1 + 16))
  {
    swift_unknownObjectRelease();
    return a5;
  }
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  if (*(unsigned __int8 *)(a1 + 18) < *(unsigned __int8 *)(a5 + 18))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t result = specialized Rope._Node._graftFront(_:)(v31, &v35);
    if (!result)
    {
      uint64_t v18 = v32;
      uint64_t v30 = 0;
      swift_unknownObjectRetain();
      MEMORY[0x185309530](&v30, 8);
      swift_unknownObjectRelease();
      goto LABEL_20;
    }
    uint64_t v12 = result;
    unsigned int v13 = *(unsigned __int8 *)(result + 18) + 1;
    if ((v13 >> 8))
    {
      __break(1u);
    }
    else
    {
      uint64_t v14 = v10;
      uint64_t v15 = v11;
      uint64_t v16 = v33;
      uint64_t v29 = v32;
      uint64_t v17 = v34;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
      uint64_t v18 = swift_allocObject();
      *(_WORD *)(v18 + 16) = 0;
      uint64_t result = v18 + 16;
      *(unsigned char *)(v18 + 18) = v13;
      if (!__OFADD__(v14, v16))
      {
        if (!__OFADD__(v15, v17))
        {
          specialized closure #1 in static Rope._Node.createInner(children:_:)((_WORD *)result, v18 + 24, v12, v14, v15, v29, v16, v17);
          uint64_t v30 = 0;
          swift_unknownObjectRetain();
          MEMORY[0x185309530](&v30, 8);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
LABEL_20:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
LABEL_22:
          swift_unknownObjectRelease();
          return v18;
        }
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t result = specialized Rope._Node._graftBack(_:)(v31, &v32);
  if (!result)
  {
    uint64_t v18 = v35;
    uint64_t v30 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x185309530](&v30, 8);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_22;
  }
  uint64_t v21 = v35;
  unsigned int v22 = *(unsigned __int8 *)(v35 + 18) + 1;
  if ((v22 >> 8)) {
    goto LABEL_27;
  }
  uint64_t v23 = result;
  uint64_t v24 = v19;
  uint64_t v25 = v20;
  uint64_t v27 = v36;
  uint64_t v26 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
  uint64_t v28 = swift_allocObject();
  *(_WORD *)(v28 + 16) = 0;
  uint64_t result = v28 + 16;
  *(unsigned char *)(v28 + 18) = v22;
  if (__OFADD__(v27, v24))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (!__OFADD__(v26, v25))
  {
    specialized closure #1 in static Rope._Node.createInner(children:_:)((_WORD *)result, v28 + 24, v21, v27, v26, v23, v24, v25);
    uint64_t v30 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x185309530](&v30, 8);
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v28;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized Rope.Builder._insertBeforeTip(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v50 = a1;
  *(void *)&long long v51 = a2;
  *((void *)&v51 + 1) = a3;
  if (*(unsigned char *)(a1 + 18))
  {
    uint64_t v9 = v3[4];
    uint64_t v8 = v3[5];
    uint64_t v10 = v3[6];
    v3[5] = 0;
    v3[6] = 0;
    v3[4] = 0;
    if (v8)
    {
      uint64_t v11 = v3[1];
      long long v12 = *((_OWORD *)v3 + 1);
      v3[2] = 0;
      v3[3] = 0;
      v3[1] = 0;
      if (!v11)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        uint64_t v11 = swift_allocObject();
        *(_WORD *)(v11 + 16) = 0;
        *(unsigned char *)(v11 + 18) = 0;
        long long v12 = 0uLL;
      }
      uint64_t v44 = v11;
      long long v47 = v12;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v9, v8, v10);
      if (*(_WORD *)(v44 + 16) == 15)
      {
        specialized Rope.Builder._appendNow(_:)(v44, v47, *((uint64_t *)&v47 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3[1] = v44;
        *((_OWORD *)v3 + 1) = v47;
      }
    }
    else
    {
      swift_unknownObjectRetain();
    }
    uint64_t v24 = v3[1];
    uint64_t v25 = v3[2];
    uint64_t v26 = v3[3];
    v3[2] = 0;
    v3[3] = 0;
    v3[1] = 0;
    if (v24) {
      specialized Rope.Builder._appendNow(_:)(v24, v25, v26);
    }
    specialized Rope.Builder._appendNow(_:)(a1, a2, a3);
    goto LABEL_19;
  }
  if (*(_WORD *)(a1 + 16) != 1)
  {
    uint64_t v29 = v3[4];
    uint64_t v28 = v3[5];
    uint64_t v30 = v3[6];
    v3[5] = 0;
    v3[6] = 0;
    v3[4] = 0;
    if (v28)
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (specialized Rope._Node.insert(_:at:)(v29, v28, v30, 0))
      {
        uint64_t v33 = v31;
        uint64_t v34 = v32;
        uint64_t v35 = swift_unknownObjectRetain();
        specialized Rope.Builder._insertBeforeTip(_:)(v35, v51, *((void *)&v51 + 1));
        uint64_t v36 = swift_unknownObjectRetain();
        specialized Rope.Builder._insertBeforeTip(_:)(v36, v33, v34);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_37:
        swift_unknownObjectRelease();
LABEL_19:
        return swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
    }
    uint64_t v37 = v3[1];
    long long v38 = *((_OWORD *)v3 + 1);
    v3[2] = 0;
    v3[3] = 0;
    v3[1] = 0;
    if (v37)
    {
      uint64_t v46 = v37;
      long long v49 = v38;
      uint64_t v39 = v37;
      if (specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)&v50) && *(_WORD *)(v46 + 16) != 15)
      {
        swift_unknownObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        v4[1] = v39;
        long long v43 = v49;
        goto LABEL_43;
      }
      specialized Rope.Builder._appendNow(_:)(v46, v49, *((uint64_t *)&v49 + 1));
    }
    uint64_t v40 = v50;
    if (*(_WORD *)(v50 + 16) == 15)
    {
      long long v41 = v51;
      uint64_t v42 = swift_unknownObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v42, v41, *((uint64_t *)&v41 + 1));
      goto LABEL_37;
    }
    uint64_t result = swift_unknownObjectRelease();
    v4[1] = v40;
    long long v43 = v51;
LABEL_43:
    *((_OWORD *)v4 + 1) = v43;
    return result;
  }
  swift_unknownObjectRetain();
  unint64_t v13 = specialized Rope._Node.subscript.getter(0, a1);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  if (v13)
  {
    unint64_t v18 = v13;
    uint64_t v19 = v3[5];
    if (v19)
    {
      uint64_t v20 = v3[4];
      uint64_t v21 = v3[6];
      uint64_t v22 = v3[1];
      long long v23 = *((_OWORD *)v3 + 1);
      v3[2] = 0;
      v3[3] = 0;
      v3[1] = 0;
      if (!v22)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        uint64_t v22 = swift_allocObject();
        *(_WORD *)(v22 + 16) = 0;
        *(unsigned char *)(v22 + 18) = 0;
        long long v23 = 0uLL;
      }
      uint64_t v45 = v22;
      long long v48 = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v20, v19, v21);
      if (*(_WORD *)(v45 + 16) == 15)
      {
        specialized Rope.Builder._appendNow(_:)(v45, v48, *((uint64_t *)&v48 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3[1] = v45;
        *((_OWORD *)v3 + 1) = v48;
      }
      swift_unknownObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t result = swift_unknownObjectRelease_n();
    }
    v3[4] = v18;
    v3[5] = v15;
    v3[6] = v17;
  }
  else
  {
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL specialized Rope._Node.rebalance(nextNeighbor:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(unsigned __int16 *)(*v1 + 16);
  uint64_t v5 = *(void *)a1;
  if (*(_WORD *)(*v1 + 16))
  {
    uint64_t v6 = *(unsigned __int16 *)(v5 + 16);
    if (v4 >= 8 && v6 >= 8)
    {
      return 0;
    }
    else
    {
      specialized static Rope._Node.redistributeChildren(_:_:to:)(v1, (uint64_t *)a1, (unint64_t)(v6 + v4) >> ((unint64_t)(v6 + v4) > 0xF));
      return *(_WORD *)(*(void *)a1 + 16) == 0;
    }
  }
  else
  {
    long long v9 = *(_OWORD *)(a1 + 8);
    uint64_t *v1 = v5;
    long long v10 = *(_OWORD *)(v1 + 1);
    *(_OWORD *)(v1 + 1) = v9;
    *(void *)a1 = v3;
    *(_OWORD *)(a1 + 8) = v10;
    return 1;
  }
}

uint64_t specialized Rope._Node._appendNode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if (result)
  {
    uint64_t v8 = v3[1];
  }
  else
  {
    uint64_t v9 = specialized Rope._Node.copy()(*v3);
    uint64_t v8 = v10;
    uint64_t v12 = v11;
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v3 = v9;
    v3[1] = v8;
    v3[2] = v12;
  }
  if (__OFADD__(v8, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  v3[1] = v8 + a2;
  uint64_t v13 = v3[2];
  BOOL v14 = __OFADD__(v13, a3);
  uint64_t v15 = v13 + a3;
  if (v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3[2] = v15;
  uint64_t v16 = *v3;
  int v17 = *(unsigned __int16 *)(*v3 + 16);
  unint64_t v18 = (void *)(*v3 + 24 * *(unsigned __int16 *)(*v3 + 16));
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  if (v17 != 0xFFFF)
  {
    *(_WORD *)(v16 + 16) = v17 + 1;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v10 = *v4;
  if ((result & 1) == 0)
  {
    uint64_t v10 = specialized Rope._Node.copy()(*v4);
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v4 = v10;
    v4[1] = v12;
    v4[2] = v14;
  }
  unint64_t v15 = (a4 >> ((4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C)) & 0xF;
  unint64_t v16 = *(unsigned __int16 *)(v10 + 16);
  if (*(unsigned char *)(v10 + 18))
  {
    if (v15 < v16)
    {
      MEMORY[0x1F4188790](result);
      uint64_t v18 = specialized Rope._Node._innerInsert(at:with:)(v17, (void *(*)(void *__return_ptr, void *))partial apply for specialized closure #1 in Rope._Node.insert(_:at:));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
    __break(1u);
  }
  else if (v15 <= v16)
  {
    return specialized Rope._Node._leafInsert(_:at:)(a1, a2, a3, v15);
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._leafInsert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_WORD *)(*(void *)v4 + 16) != 15)
  {
    specialized Rope._Node._insertItem(_:at:)(a1, a2, a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a4 < 8)
  {
    uint64_t v9 = specialized Rope._Node.split(keeping:)(7);
    specialized Rope._Node._insertItem(_:at:)(a1, a2, a3, a4);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return v9;
  }
  uint64_t v9 = specialized Rope._Node.split(keeping:)(8);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = *(unsigned __int16 *)(*(void *)v4 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) == 0)
  {
    uint64_t v16 = specialized Rope._Node.copy()(v9);
    uint64_t v11 = v17;
    uint64_t v13 = v18;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v9 = v16;
  }
  if (__OFADD__(v11, 1))
  {
    __break(1u);
  }
  else if (!__OFADD__(v13, a1))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    specialized Rope._UnsafeHandle._insertChild(_:at:)(a1, a2, a3, a4 - v14, (_WORD *)(v9 + 16), v9 + 24);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._innerInsert(at:with:)(uint64_t result, void *(*a2)(void *__return_ptr, void *))
{
  uint64_t v3 = v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = *v2 + 24 * result;
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = (void *)(v5 + 32);
  uint64_t v8 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v9 = v2[2];
  uint64_t v10 = v6 + 1;
  uint64_t v11 = v6[1];
  uint64_t v12 = v9 - v11;
  if (__OFSUB__(v9, v11))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = result;
  swift_unknownObjectRetain();
  uint64_t result = (uint64_t)a2(v21, v6 - 1);
  BOOL v15 = __OFADD__(v8, *v6);
  uint64_t v16 = v8 + *v6;
  if (v15)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v17 = v12 + *v10;
  if (__OFADD__(v12, *v10))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v19 = v21[0];
  uint64_t v18 = v21[1];
  uint64_t v20 = v21[2];
  swift_unknownObjectRelease();
  v3[1] = v16;
  v3[2] = v17;
  if (v19) {
    return specialized Rope._Node._applySpawn(_:of:)(v19, v18, v20, v14);
  }
  else {
    return 0;
  }
}

uint64_t specialized Rope._Node.split(keeping:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  char v5 = *(unsigned char *)(*v2 + 18);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    uint64_t v6 = swift_allocObject();
    *(_WORD *)(v6 + 16) = 0;
    *(unsigned char *)(v6 + 18) = v5;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
    uint64_t v6 = swift_allocObject();
    *(_WORD *)(v6 + 16) = 0;
    *(unsigned char *)(v6 + 18) = 0;
  }
  uint64_t v14 = v6;
  if (*(unsigned __int16 *)(v4 + 16) <= a1) {
    return v6;
  }
  if (a1 < 1)
  {
    v2[1] = 0;
    v2[2] = 0;
    uint64_t *v2 = v6;
  }
  else
  {
    char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
    uint64_t v8 = *v2;
    if ((isUniquelyReferenced_nonNull & 1) == 0)
    {
      uint64_t v8 = specialized Rope._Node.copy()(*v2);
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      swift_unknownObjectRelease();
      uint64_t *v2 = v8;
      v2[1] = v10;
      v2[2] = v12;
    }
    specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(v2, *(unsigned __int16 *)(v8 + 16) - a1);
    return v14;
  }
  return v4;
}

uint64_t specialized Rope._Node._applySpawn(_:of:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v36[0] = result;
  v36[1] = a2;
  v36[2] = a3;
  uint64_t v5 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = result;
  if (a4 >= 1)
  {
    uint64_t v10 = *v4;
    uint64_t v11 = *v4 + 24;
    uint64_t v12 = v11 + 24 * a4;
    uint64_t v14 = *(void *)(v12 - 24);
    uint64_t v13 = (uint64_t *)(v12 - 24);
    unint64_t v15 = *(unsigned __int16 *)(*(void *)(v11 + 24 * a4) + 16) + (unint64_t)*(unsigned __int16 *)(v14 + 16);
    if (v15 >= 0x10)
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
LABEL_8:
      swift_unknownObjectRelease();
      uint64_t v8 = a2;
      goto LABEL_9;
    }
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized static Rope._Node.redistributeChildren(_:_:to:)(v13, (uint64_t *)(v11 + 24 * a4), v15);
    specialized Rope._UnsafeHandle._removeChild(at:)(a4, (_WORD *)(v10 + 16), v11);
    uint64_t result = swift_unknownObjectRelease();
    BOOL v16 = __OFSUB__(v5--, 1);
    if (!v16)
    {
      uint64_t v7 = a3;
      goto LABEL_8;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_unknownObjectRetain();
LABEL_9:
  uint64_t v17 = *(unsigned __int16 *)(*v4 + 16);
  if (v5 < v17)
  {
    uint64_t v18 = *v4 + 24 * v5;
    uint64_t v20 = *(void *)(v18 + 24);
    uint64_t v19 = (uint64_t *)(v18 + 24);
    if (*(unsigned __int16 *)(v20 + 16) + (unint64_t)*(unsigned __int16 *)(v9 + 16) <= 0xF)
    {
      swift_unknownObjectRetain();
      specialized static Rope._Node.redistributeChildren(_:_:to:)(v36, v19, 0);
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v26 = v4[1];
      BOOL v16 = __OFADD__(v26, v8);
      uint64_t v27 = v26 + v8;
      if (!v16)
      {
        v4[1] = v27;
        uint64_t v28 = v4[2];
        BOOL v16 = __OFADD__(v28, v7);
        uint64_t v29 = v28 + v7;
        if (!v16)
        {
          uint64_t v21 = 0;
          v4[2] = v29;
          goto LABEL_24;
        }
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }
  if (v17 != 15)
  {
    specialized Rope._Node._insertNode(_:at:)(v9, v8, v7, v5);
    swift_unknownObjectRelease();
    uint64_t v21 = 0;
LABEL_24:
    swift_unknownObjectRelease();
    return v21;
  }
  uint64_t v21 = specialized Rope._Node.split(keeping:)(7);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if (v5 < 8)
  {
    specialized Rope._Node._insertNode(_:at:)(v9, v8, v7, v5);
LABEL_23:
    swift_unknownObjectRelease();
    goto LABEL_24;
  }
  uint64_t v30 = *(unsigned __int16 *)(*v4 + 16);
  swift_unknownObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) == 0)
  {
    uint64_t v31 = specialized Rope._Node.copy()(v21);
    uint64_t v23 = v32;
    uint64_t v25 = v33;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v21 = v31;
  }
  if (__OFADD__(v23, v8)) {
    goto LABEL_29;
  }
  if (!__OFADD__(v25, v7))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized Rope._UnsafeHandle._insertChild(_:at:)(v9, v8, v7, v5 - v30, (_WORD *)(v21 + 16), v21 + 24);
    swift_unknownObjectRelease_n();
    goto LABEL_23;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._insertChild(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6)
{
  uint64_t v6 = (unsigned __int16)*a5;
  BOOL v7 = __OFSUB__(v6, a4);
  uint64_t v8 = v6 - a4;
  if (v7)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((v8 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = (void *)(a6 + 24 * a4);
    uint64_t result = (uint64_t)memmove(v13 + 3, v13, 24 * v8);
    *uint64_t v13 = a1;
    v13[1] = a2;
    v13[2] = a3;
    int v15 = (unsigned __int16)*a5;
    if (v15 != 0xFFFF)
    {
      *a5 = v15 + 1;
      return result;
    }
    goto LABEL_6;
  }
LABEL_7:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._graftBack(_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v6 = specialized Rope._Node.copy()(*v2);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_unknownObjectRelease();
    *uint64_t v3 = v6;
    v3[1] = v8;
    v3[2] = v10;
  }
  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v12 = *a2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v12 = specialized Rope._Node.copy()(*a2);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    swift_unknownObjectRelease();
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v16;
  }
  if (*(unsigned __int8 *)(v12 + 18) >= *(unsigned __int8 *)(*v3 + 18))
  {
    uint64_t v34 = v3[1];
    uint64_t v33 = v3[2];
    if (specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)a2)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = swift_unknownObjectRetain();
    }
    uint64_t v35 = v3[1];
    BOOL v25 = __OFSUB__(v35, v34);
    uint64_t v36 = v35 - v34;
    if (!v25)
    {
      uint64_t v37 = v3[2];
      BOOL v25 = __OFSUB__(v37, v33);
      uint64_t v38 = v37 - v33;
      if (!v25)
      {
        *a1 = v36;
        a1[1] = v38;
        return result;
      }
      goto LABEL_29;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_unknownObjectRetain();
  uint64_t v17 = specialized Rope._Node._graftBack(_:)(&v39, a2);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v23 = v39;
  uint64_t v24 = v3[1];
  BOOL v25 = __OFADD__(v24, v39);
  uint64_t v26 = v24 + v39;
  if (v25)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v27 = v40;
  v3[1] = v26;
  uint64_t v28 = v3[2];
  BOOL v25 = __OFADD__(v28, v27);
  uint64_t v29 = v28 + v27;
  if (v25)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v3[2] = v29;
  if (!v17)
  {
    uint64_t result = 0;
    goto LABEL_23;
  }
  if (*(_WORD *)(*v3 + 16) != 15)
  {
    BOOL v25 = __OFADD__(v23, v19);
    v23 += v19;
    if (v25)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    BOOL v25 = __OFADD__(v27, v21);
    v27 += v21;
    if (v25)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    specialized Rope._Node._appendNode(_:)(v17, v19, v21);
    uint64_t result = 0;
LABEL_23:
    *a1 = v23;
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t result = specialized Rope._Node.split(keeping:)(7);
  uint64_t v39 = result;
  uint64_t v40 = v31;
  uint64_t v41 = v30;
  uint64_t v32 = v23 - v31;
  if (__OFSUB__(v23, v31))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  BOOL v25 = __OFSUB__(v27, v30);
  v27 -= v30;
  if (v25)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  specialized Rope._Node._appendNode(_:)(v17, v19, v21);
  swift_unknownObjectRelease();
  uint64_t result = v39;
  *a1 = v32;
LABEL_24:
  a1[1] = v27;
  return result;
}

uint64_t specialized Rope._Node._graftFront(_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v6 = specialized Rope._Node.copy()(*v2);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_unknownObjectRelease();
    *uint64_t v3 = v6;
    v3[1] = v8;
    v3[2] = v10;
  }
  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v12 = *a2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v12 = specialized Rope._Node.copy()(*a2);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    swift_unknownObjectRelease();
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v16;
  }
  if (*(unsigned __int8 *)(v12 + 18) >= *(unsigned __int8 *)(*v3 + 18))
  {
    uint64_t v40 = a2[1];
    uint64_t v39 = a2[2];
    uint64_t result = specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)v3);
    if (result)
    {
      uint64_t v30 = 0;
      uint64_t v41 = *v3;
      long long v42 = *(_OWORD *)(a2 + 1);
      *uint64_t v3 = *a2;
      long long v43 = *(_OWORD *)(v3 + 1);
      *(_OWORD *)(v3 + 1) = v42;
      *a2 = v41;
      *(_OWORD *)(a2 + 1) = v43;
      *a1 = v40;
      a1[1] = v39;
      return v30;
    }
    uint64_t v44 = a2[1];
    if (!__OFSUB__(v40, v44))
    {
      uint64_t v45 = a2[2];
      if (!__OFSUB__(v39, v45))
      {
        uint64_t v30 = *a2;
        *a1 = v40 - v44;
        a1[1] = v39 - v45;
        swift_unknownObjectRetain();
        return v30;
      }
      goto LABEL_30;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_unknownObjectRetain();
  uint64_t v17 = specialized Rope._Node._graftFront(_:)(v47, a2);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v23 = v47[0];
  uint64_t v24 = v3[1];
  BOOL v25 = __OFADD__(v24, v47[0]);
  uint64_t v26 = v24 + v47[0];
  if (v25)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v27 = v47[1];
  v3[1] = v26;
  uint64_t v28 = v3[2];
  BOOL v25 = __OFADD__(v28, v27);
  uint64_t v29 = v28 + v27;
  if (v25)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v3[2] = v29;
  if (!v17)
  {
    uint64_t v30 = 0;
    *a1 = v23;
    a1[1] = v27;
    return v30;
  }
  if (*(_WORD *)(*v3 + 16) != 15)
  {
    if (!__OFADD__(v23, v19))
    {
      if (!__OFADD__(v27, v21))
      {
        specialized Rope._Node._insertNode(_:at:)(v17, v19, v21, 0);
        swift_unknownObjectRelease();
        uint64_t v30 = 0;
        *a1 = v23 + v19;
        a1[1] = v27 + v21;
        return v30;
      }
      goto LABEL_35;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  swift_unknownObjectRetain();
  uint64_t result = specialized Rope._Node.split(keeping:)(7);
  uint64_t v30 = *v3;
  uint64_t v31 = v3[1];
  uint64_t v32 = v3[2];
  *uint64_t v3 = result;
  v3[1] = v33;
  v3[2] = v34;
  if (__OFSUB__(v23, v31)) {
    goto LABEL_31;
  }
  BOOL v25 = __OFSUB__(v27, v32);
  uint64_t v35 = v27 - v32;
  if (v25)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v46 = v23 - v31;
  if ((result & 1) == 0)
  {
    uint64_t v36 = specialized Rope._Node.copy()(v30);
    uint64_t v31 = v37;
    uint64_t v32 = v38;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v30 = v36;
  }
  if (__OFADD__(v31, v19)) {
    goto LABEL_33;
  }
  if (!__OFADD__(v32, v21))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized Rope._UnsafeHandle._insertChild(_:at:)(v17, v19, v21, 0, (_WORD *)(v30 + 16), v30 + 24);
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
    *a1 = v46;
    a1[1] = v35;
    return v30;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._innerSplit(at:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v7 = *v2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v7 = specialized Rope._Node.copy()(v7);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    swift_unknownObjectRelease();
    *uint64_t v3 = v7;
    v3[1] = v9;
    v3[2] = v11;
  }
  uint64_t v12 = *(unsigned __int16 *)(v7 + 16);
  if (v12 - 2 == a1)
  {
    uint64_t v13 = specialized Rope._Node._removeNode(at:)(v12 - 1);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v52 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x185309530](&v52, 8);
    uint64_t v18 = v52;
    uint64_t v19 = *(void **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    }
    unint64_t v21 = v19[2];
    unint64_t v20 = v19[3];
    if (v21 >= v20 >> 1) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
    }
    v19[2] = v21 + 1;
    uint64_t v22 = &v19[4 * v21];
    v22[4] = v13;
    v22[5] = v15;
    v22[6] = v17;
    v22[7] = v18;
    swift_unknownObjectRelease();
    *(void *)(a2 + 80) = v19;
  }
  if (a1 == 1)
  {
    uint64_t v23 = specialized Rope._Node._removeNode(at:)(0);
    specialized Rope.Builder._insertBeforeTip(_:)(v23, v24, v25);
    a1 = 0;
  }
  uint64_t v26 = specialized Rope._Node._removeNode(at:)(a1);
  uint64_t v27 = *v3;
  uint64_t v28 = v3[1];
  uint64_t v29 = v3[2];
  *uint64_t v3 = v26;
  v3[1] = v30;
  v3[2] = v31;
  uint64_t v52 = v27;
  uint64_t v53 = v28;
  uint64_t v54 = v29;
  if (!*(_WORD *)(v27 + 16)) {
    return swift_unknownObjectRelease();
  }
  if (a1)
  {
    if (a1 == *(unsigned __int16 *)(v27 + 16))
    {
      return specialized Rope.Builder._insertBeforeTip(_:)(v27, v28, v29);
    }
    else
    {
      uint64_t v38 = specialized Rope._Node.split(keeping:)(a1);
      uint64_t v40 = v39;
      uint64_t v42 = v41;
      uint64_t v43 = v53;
      uint64_t v44 = v54;
      uint64_t v45 = swift_unknownObjectRetain();
      specialized Rope.Builder._insertBeforeTip(_:)(v45, v43, v44);
      uint64_t v51 = 0;
      swift_unknownObjectRetain();
      MEMORY[0x185309530](&v51, 8);
      uint64_t v46 = v51;
      long long v47 = *(void **)(a2 + 80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
      }
      unint64_t v49 = v47[2];
      unint64_t v48 = v47[3];
      if (v49 >= v48 >> 1) {
        long long v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v49 + 1, 1, v47);
      }
      void v47[2] = v49 + 1;
      uint64_t v50 = &v47[4 * v49];
      v50[4] = v38;
      v50[5] = v40;
      v50[6] = v42;
      v50[7] = v46;
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(a2 + 80) = v47;
    }
  }
  else
  {
    uint64_t v51 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x185309530](&v51, 8);
    uint64_t v33 = v51;
    uint64_t v34 = *(void **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
    }
    unint64_t v36 = v34[2];
    unint64_t v35 = v34[3];
    if (v36 >= v35 >> 1) {
      uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v34);
    }
    v34[2] = v36 + 1;
    uint64_t v37 = &v34[4 * v36];
    v37[4] = v27;
    v37[5] = v28;
    v37[6] = v29;
    v37[7] = v33;
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(a2 + 80) = v34;
  }
  return result;
}

uint64_t specialized Rope._Node._removeNode(at:)(uint64_t a1)
{
  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v4 = *v1;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v4 = specialized Rope._Node.copy()(*v1);
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    swift_unknownObjectRelease();
    uint64_t *v1 = v4;
    v1[1] = v6;
    v1[2] = v8;
  }
  swift_unknownObjectRetain();
  uint64_t v9 = specialized Rope._UnsafeHandle._removeChild(at:)(a1, (_WORD *)(v4 + 16), v4 + 24);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v15 = v1[1];
  BOOL v16 = __OFSUB__(v15, v11);
  uint64_t v17 = v15 - v11;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    v1[1] = v17;
    uint64_t v18 = v1[2];
    BOOL v16 = __OFSUB__(v18, v13);
    uint64_t v19 = v18 - v13;
    if (!v16)
    {
      v1[2] = v19;
      return v9;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope.Builder._insertBeforeTip(slots:in:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    return result;
  }
  if (v4 < 1) {
    goto LABEL_8;
  }
  if (v4 != 1)
  {
    specialized Rope._Node.copy(slots:)(result, a2, a3);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v11 = swift_unknownObjectRetain();
LABEL_7:
    specialized Rope.Builder._insertBeforeTip(_:)(v11, v8, v10);
    swift_unknownObjectRelease();
LABEL_8:
    return swift_unknownObjectRelease();
  }
  uint64_t v5 = a3 + 24;
  if (*(unsigned char *)(a3 + 18))
  {
    uint64_t v6 = v5 + 24 * result;
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v10 = *(void *)(v6 + 16);
    uint64_t v11 = swift_unknownObjectRetain_n();
    goto LABEL_7;
  }
  uint64_t v12 = (uint64_t *)(v5 + 24 * result);
  uint64_t v13 = *v12;
  if (!*v12) {
    goto LABEL_8;
  }
  uint64_t v15 = v12[1];
  uint64_t v14 = v12[2];
  uint64_t v16 = v3[4];
  uint64_t v17 = v3[5];
  uint64_t v18 = v3[6];
  v3[5] = 0;
  v3[6] = 0;
  v3[4] = 0;
  if (v17)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Rope.Builder._appendNow(_:)(v16, v17, v18);
    outlined consume of Rope<AttributedString._InternalRun>._Item?(v3[4], v3[5]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t result = swift_unknownObjectRelease();
  v3[4] = v13;
  v3[5] = v15;
  v3[6] = v14;
  return result;
}

uint64_t specialized Rope.Builder._insertAfterTip(slots:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v9 >= 1)
  {
    if (v9 != 1)
    {
      uint64_t v4 = specialized Rope._Node.copy(slots:)(a1, a2, a3);
      uint64_t v5 = v22;
      uint64_t v6 = v23;
      uint64_t v37 = 0;
      swift_unknownObjectRetain();
      MEMORY[0x185309530](&v37, 8);
      uint64_t v8 = v37;
      uint64_t v7 = *(void **)(v3 + 80);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_12:
        unint64_t v26 = v7[2];
        unint64_t v25 = v7[3];
        unint64_t v27 = v26 + 1;
        if (v26 >= v25 >> 1)
        {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v7);
          unint64_t v27 = v26 + 1;
          uint64_t v7 = v33;
        }
        v7[2] = v27;
        uint64_t v28 = &v7[4 * v26];
        v28[4] = v4;
        v28[5] = v5;
        v28[6] = v6;
        v28[7] = v8;
        swift_unknownObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        *(void *)(v3 + 80) = v7;
        return result;
      }
LABEL_20:
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      goto LABEL_12;
    }
    uint64_t v10 = a3 + 24;
    if (*(unsigned char *)(a3 + 18))
    {
      uint64_t v11 = (uint64_t *)(v10 + 24 * a1);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = v11[2];
      uint64_t v37 = 0;
      swift_unknownObjectRetain_n();
      MEMORY[0x185309530](&v37, 8);
      uint64_t v15 = v37;
      uint64_t v16 = *(void **)(v3 + 80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      }
      unint64_t v17 = v16[2];
      unint64_t v18 = v16[3];
      unint64_t v19 = v17 + 1;
      if (v17 >= v18 >> 1)
      {
        uint64_t v34 = v16;
        unint64_t v35 = v16[2];
        unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v17 + 1, 1, v34);
        unint64_t v17 = v35;
        uint64_t v16 = v36;
      }
      v16[2] = v19;
      unint64_t v20 = &v16[4 * v17];
      v20[4] = v12;
      v20[5] = v13;
      v20[6] = v14;
      v20[7] = v15;
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v3 + 80) = v16;
      return result;
    }
    uint64_t v29 = (uint64_t *)(v10 + 24 * a1);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v32 = v29[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Rope.Builder._insertAfterTip(_:)(v30, v31, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_unknownObjectRelease();
}

_WORD *specialized Rope.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = v4[3];
  unint64_t v11 = swift_unknownObjectRetain();
  unint64_t v12 = specialized Rope._endPath.getter(v11);
  uint64_t result = (_WORD *)swift_unknownObjectRelease();
  if (v12 != a4)
  {
    if (!v9)
    {
LABEL_16:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (_WORD *)specialized Rope._Node.insert(_:at:)(a1, a2, a3, a4);
    if (!result)
    {
      swift_bridgeObjectRelease();
      uint64_t result = (_WORD *)swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    uint64_t v16 = *v4;
    unsigned int v17 = *(unsigned __int8 *)(*v4 + 18) + 1;
    if ((v17 >> 8))
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = (uint64_t)result;
      uint64_t v26 = v15;
      uint64_t v20 = v4[1];
      uint64_t v19 = v4[2];
      uint64_t v21 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
      uint64_t v22 = swift_allocObject();
      uint64_t v23 = v21;
      uint64_t v24 = v22;
      *(_WORD *)(v22 + 16) = 0;
      uint64_t result = (_WORD *)(v22 + 16);
      *(unsigned char *)(v24 + 18) = v17;
      uint64_t v25 = v20 + v23;
      if (!__OFADD__(v20, v23))
      {
        if (!__OFADD__(v19, v26))
        {
          specialized closure #1 in static Rope._Node.createInner(children:_:)(result, v24 + 24, v16, v20, v19, v18, v23, v26);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = (_WORD *)swift_bridgeObjectRelease();
          *uint64_t v4 = v24;
          v4[1] = v25;
          v4[2] = v19 + v26;
LABEL_12:
          v4[3] = v10 + 1;
          return result;
        }
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  return specialized Rope.append(_:)(a1, a2, a3);
}

_WORD *specialized Rope._Node.copy(slots:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a3 + 18);
  unint64_t v7 = a2 - a1;
  BOOL v8 = __OFSUB__(a2, a1);
  if (*(unsigned char *)(a3 + 18))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    uint64_t v9 = swift_allocObject();
    *(_WORD *)(v9 + 16) = 0;
    uint64_t result = (_WORD *)(v9 + 16);
    *(unsigned char *)(v9 + 18) = v6;
    if (v8)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    uint64_t result = (_WORD *)specialized closure #1 in Rope._UnsafeHandle.copy(slots:)(result, v9 + 24, v7, a3 + 24, a1, a2);
    if (*(_WORD *)(v9 + 16))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *(void *)(v9 + v11 + 32);
        BOOL v15 = __OFADD__(v13, v14);
        v13 += v14;
        if (v15) {
          break;
        }
        uint64_t v16 = *(void *)(v9 + v11 + 40);
        BOOL v15 = __OFADD__(v12, v16);
        v12 += v16;
        if (v15) {
          goto LABEL_19;
        }
        v11 += 24;
        if (24 * *(unsigned __int16 *)(v9 + 16) == v11) {
          return (_WORD *)v9;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    return (_WORD *)v9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
  uint64_t v9 = swift_allocObject();
  *(_WORD *)(v9 + 16) = 0;
  uint64_t result = (_WORD *)(v9 + 16);
  *(unsigned char *)(v9 + 18) = 0;
  if (!v8)
  {
    uint64_t result = (_WORD *)specialized closure #1 in Rope._UnsafeHandle.copy(slots:)(result, v9 + 24, v7, a3 + 24, a1, a2);
    if (*(_WORD *)(v9 + 16))
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      while (1)
      {
        uint64_t v19 = *(void *)(v9 + v17 + 24);
        BOOL v15 = __OFADD__(v18, v19);
        v18 += v19;
        if (v15) {
          break;
        }
        v17 += 24;
        if (24 * *(unsigned __int16 *)(v9 + 16) == v17) {
          return (_WORD *)v9;
        }
      }
      goto LABEL_20;
    }
    return (_WORD *)v9;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._leafRemoveSuffix(returning:into:)(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1 == 1)
  {
    uint64_t v9 = a3[3];
    uint64_t v10 = a3[5];
    uint64_t v8 = a3[6];
    if (v9)
    {
      uint64_t v11 = a3[4];
      uint64_t v13 = a2[4];
      uint64_t v12 = a2[5];
      uint64_t v14 = a2[6];
      a2[5] = 0;
      a2[6] = 0;
      a2[4] = 0;
      if (v12)
      {
        uint64_t v34 = v14;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v13, v12, v34);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(a2[4], a2[5]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      a2[4] = v9;
      a2[5] = v11;
      a2[6] = v10;
      return v8;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_21:
    swift_unknownObjectRelease();
    return v8;
  }
  if (!a1)
  {
    uint64_t v8 = a3[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
  swift_unknownObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if (result)
  {
    uint64_t v18 = (uint64_t)a3;
  }
  else
  {
    uint64_t v18 = specialized Rope._Node.copy()((uint64_t)a3);
    a4 = v19;
    a5 = v20;
    uint64_t result = swift_unknownObjectRelease();
  }
  uint64_t v21 = *(unsigned __int16 *)(v18 + 16);
  if (v21 - 1 <= a1) {
    goto LABEL_15;
  }
  BOOL v22 = __OFSUB__(v21, a1);
  uint64_t v23 = v21 - a1;
  if (v22)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v24 = v23 - 1;
  if (__OFSUB__(v23, 1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  swift_unknownObjectRetain();
  uint64_t v25 = specialized Rope._UnsafeHandle._removeSuffix(_:)(v24, (_WORD *)(v18 + 16), v18 + 24);
  uint64_t v27 = v26;
  uint64_t result = swift_unknownObjectRelease();
  BOOL v22 = __OFSUB__(a4, v25);
  a4 -= v25;
  if (v22)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  BOOL v22 = __OFSUB__(a5, v27);
  a5 -= v27;
  if (!v22)
  {
LABEL_15:
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v28 = specialized Rope._Node.copy()(v18);
      a4 = v29;
      a5 = v30;
      swift_unknownObjectRelease();
      uint64_t v18 = v28;
    }
    swift_unknownObjectRetain();
    uint64_t v8 = specialized Rope._UnsafeHandle._removeChild(at:)(a1, (_WORD *)(v18 + 16), v18 + 24);
    uint64_t result = swift_unknownObjectRelease();
    BOOL v22 = __OFSUB__(a4, 1);
    uint64_t v31 = a4 - 1;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      BOOL v22 = __OFSUB__(a5, v8);
      uint64_t v32 = a5 - v8;
      if (!v22)
      {
        uint64_t v33 = swift_unknownObjectRetain();
        specialized Rope.Builder._insertBeforeTip(_:)(v33, v31, v32);
        swift_unknownObjectRelease();
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._innerRemovePrefix(descending:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(unsigned __int16 *)(*v2 + 16);
  if (v6 - 1 == a1)
  {
    unint64_t v7 = (void *)(v5 + 24 * a1);
    uint64_t v8 = v7[3];
    uint64_t v9 = v7[4];
    uint64_t v10 = v7[5];
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t *v2 = v8;
    v2[1] = v9;
    v2[2] = v10;
    return result;
  }
  if (v6 - 2 == a1)
  {
    uint64_t v13 = (uint64_t *)(v5 + 24 + 24 * a1);
    uint64_t v14 = *v13;
    uint64_t v42 = v13[1];
    uint64_t v15 = v13[2];
    uint64_t v16 = (uint64_t *)(v5 + 24 + 24 * ((int)v6 - 1));
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v44 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x185309530](&v44, 8);
    uint64_t v20 = v44;
    uint64_t v21 = *(void **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    }
    unint64_t v23 = v21[2];
    unint64_t v22 = v21[3];
    unint64_t v24 = v23 + 1;
    if (v23 >= v22 >> 1)
    {
      uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v21);
      unint64_t v24 = v23 + 1;
      uint64_t v21 = v41;
    }
    v21[2] = v24;
    uint64_t v25 = &v21[4 * v23];
    v25[4] = v17;
    v25[5] = v18;
    v25[6] = v19;
    v25[7] = v20;
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(a2 + 80) = v21;
    uint64_t *v2 = v14;
    v2[1] = v42;
    v2[2] = v15;
    return result;
  }
  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v27 = *v2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v27 = specialized Rope._Node.copy()(*v2);
    uint64_t v5 = v28;
    uint64_t v30 = v29;
    swift_unknownObjectRelease();
    uint64_t *v2 = v27;
    v2[1] = v5;
    v2[2] = v30;
  }
  uint64_t v31 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v3 = v27 + 24;
  uint64_t v32 = v27 + 24 + 24 * v4;
  uint64_t v5 = *(void *)v32;
  long long v43 = *(_OWORD *)(v32 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v33 = specialized Rope._UnsafeHandle._removePrefix(_:)(v4 + 1, (_WORD *)(v27 + 16), (char *)(v27 + 24));
  uint64_t v4 = v34;
  swift_unknownObjectRelease();
  uint64_t v35 = v2[1];
  BOOL v36 = __OFSUB__(v35, v33);
  uint64_t v31 = v35 - v33;
  if (v36)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v37 = v2[2];
  uint64_t v3 = v37 - v4;
  if (__OFSUB__(v37, v4))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v4 = *v2;
  uint64_t *v2 = v5;
  *(_OWORD *)(v2 + 1) = v43;
  uint64_t v44 = 0;
  swift_unknownObjectRetain();
  MEMORY[0x185309530](&v44, 8);
  uint64_t v5 = v44;
  uint64_t v2 = *(uint64_t **)(a2 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_21:
  }
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
  unint64_t v39 = v2[2];
  unint64_t v38 = v2[3];
  if (v39 >= v38 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v2);
  }
  v2[2] = v39 + 1;
  uint64_t v40 = &v2[4 * v39];
  v40[4] = v4;
  v40[5] = v31;
  v40[6] = v3;
  v40[7] = v5;
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(a2 + 80) = v2;
  return result;
}

uint64_t specialized Rope._Node._leafRemovePrefix(returning:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(unsigned __int16 *)(a3 + 16);
  if (v8 - 1 == a1)
  {
    uint64_t v7 = *(void *)(a3 + 24 * a1 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  if (v8 - 2 == a1)
  {
    uint64_t v7 = *(void *)(a3 + 24 + 24 * a1);
    uint64_t v10 = (uint64_t *)(a3 + 24 + 24 * ((int)v8 - 1));
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = v10[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.Builder._insertAfterTip(_:)(v11, v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  swift_unknownObjectRetain();
  if (swift_isUniquelyReferenced_nonNull())
  {
    uint64_t v16 = a3;
  }
  else
  {
    uint64_t v16 = specialized Rope._Node.copy()(a3);
    a4 = v17;
    a5 = v18;
    swift_unknownObjectRelease();
  }
  uint64_t v19 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v28 = a2;
  uint64_t v5 = v16 + 24;
  uint64_t v7 = *(void *)(v16 + 24 + 24 * v7);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = specialized Rope._UnsafeHandle._removePrefix(_:)(v19, (_WORD *)(v16 + 16), (char *)(v16 + 24));
  uint64_t v19 = v21;
  swift_unknownObjectRelease();
  if (__OFSUB__(a4, v20))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  BOOL v22 = __OFSUB__(a5, v19);
  uint64_t v19 = (uint64_t)a5 - v19;
  if (v22)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v27 = a4 - v20;
  uint64_t v29 = 0;
  swift_unknownObjectRetain_n();
  MEMORY[0x185309530](&v29, 8);
  uint64_t v5 = v29;
  a5 = *(void **)(v28 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  unint64_t v24 = a5[2];
  unint64_t v23 = a5[3];
  if (v24 >= v23 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, a5);
  }
  a5[2] = v24 + 1;
  uint64_t v25 = &a5[4 * v24];
  v25[4] = v16;
  v25[5] = v27;
  v25[6] = v19;
  v25[7] = v5;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(void *)(v28 + 80) = a5;
LABEL_15:
  swift_unknownObjectRelease();
  return v7;
}

uint64_t specialized Rope._UnsafeHandle._removePrefix(_:)(uint64_t result, _WORD *a2, char *__dst)
{
  if (result < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v8 = (uint64_t *)(__dst + 16);
    uint64_t v9 = result;
    while (1)
    {
      uint64_t v10 = *(v8 - 1);
      uint64_t v11 = *v8;
      uint64_t result = swift_unknownObjectRelease();
      BOOL v12 = __OFADD__(v6, v10);
      v6 += v10;
      if (v12) {
        break;
      }
      BOOL v12 = __OFADD__(v5, v11);
      v5 += v11;
      if (v12) {
        goto LABEL_13;
      }
      v8 += 3;
      if (!--v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_7:
  uint64_t v13 = (unsigned __int16)*a2 - v7;
  if (v13 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *a2 = v13;
  uint64_t v14 = &__dst[24 * v7];
  if (v7 > 0 || &v14[24 * (unsigned __int16)v13] <= __dst) {
    memmove(__dst, v14, 24 * (unsigned __int16)v13);
  }
  return v6;
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char *v12;

  if (result < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = 0;
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = __dst + 16;
    uint64_t v8 = result;
    while (1)
    {
      uint64_t v9 = *((void *)v7 - 2);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v10 = __OFADD__(v5, v9);
      v5 += v9;
      if (v10) {
        break;
      }
      v7 += 24;
      if (!--v8) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v11 = (unsigned __int16)*a2 - v6;
  if (v11 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  *a2 = v11;
  BOOL v12 = &__dst[24 * v6];
  if (v6 > 0 || &v12[24 * (unsigned __int16)v11] <= __dst) {
    memmove(__dst, v12, 24 * (unsigned __int16)v11);
  }
  return v6;
}

uint64_t specialized Rope._UnsafeHandle._removeSuffix(_:)(uint64_t result, _WORD *a2, uint64_t a3)
{
  uint64_t v3 = (unsigned __int16)*a2;
  int64_t v4 = v3 - result;
  BOOL v5 = __OFSUB__(v3, result);
  if (__OFSUB__(v3, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v4 > v3)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v4 == v3)
  {
    uint64_t v7 = 0;
    goto LABEL_16;
  }
  if (v4 < v3)
  {
    uint64_t v7 = result;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 24 * (unsigned __int16)*a2 - 24 * result + a3 + 16;
    do
    {
      uint64_t v11 = *(void *)(v10 - 16);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      BOOL v12 = __OFADD__(v9, v11);
      v9 += v11;
      if (v12) {
        goto LABEL_21;
      }
      v10 += 24;
      ++v8;
    }
    while (v7 != v8);
    uint64_t v13 = (unsigned __int16)*a2;
    BOOL v12 = __OFSUB__(v13, v7);
    int64_t v4 = v13 - v7;
    BOOL v5 = v12;
LABEL_16:
    if (!v5)
    {
      if ((v4 & 0x8000000000000000) == 0)
      {
        if (!((unint64_t)v4 >> 16))
        {
          *a2 = v4;
          return v7;
        }
        goto LABEL_26;
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.insert(_:at:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = specialized Rope._Node.insert(_:at:)(v5, v6, v7, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  return result;
}

uint64_t specialized Rope._Node._insertNode(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if (result)
  {
    uint64_t v9 = v4[1];
  }
  else
  {
    uint64_t v10 = specialized Rope._Node.copy()(*v4);
    uint64_t v9 = v11;
    uint64_t v13 = v12;
    uint64_t result = swift_unknownObjectRelease();
    *int64_t v4 = v10;
    v4[1] = v9;
    v4[2] = v13;
  }
  if (__OFADD__(v9, a2))
  {
    __break(1u);
    goto LABEL_10;
  }
  v4[1] = v9 + a2;
  uint64_t v14 = v4[2];
  BOOL v15 = __OFADD__(v14, a3);
  uint64_t v16 = v14 + a3;
  if (v15)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v4[2] = v16;
  uint64_t v17 = *v4;
  swift_unknownObjectRetain();
  uint64_t v18 = swift_unknownObjectRetain();
  specialized Rope._UnsafeHandle._insertChild(_:at:)(v18, a2, a3, a4, (_WORD *)(v17 + 16), v17 + 24);

  return swift_unknownObjectRelease();
}

uint64_t specialized Rope._Node._insertItem(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if (result)
  {
    uint64_t v10 = v4[1];
  }
  else
  {
    uint64_t v11 = specialized Rope._Node.copy()(*v4);
    uint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t result = swift_unknownObjectRelease();
    *int64_t v4 = v11;
    v4[1] = v10;
    v4[2] = v14;
  }
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v4[1] = v10 + 1;
  uint64_t v15 = v4[2];
  BOOL v16 = __OFADD__(v15, a1);
  uint64_t v17 = v15 + a1;
  if (v16)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v4[2] = v17;
  uint64_t v18 = *v4;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope._UnsafeHandle._insertChild(_:at:)(a1, a2, a3, a4, (_WORD *)(v18 + 16), v18 + 24);

  return swift_unknownObjectRelease();
}

_WORD *specialized Rope.prepend(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ++v3[3];
  if (*v3)
  {
    unint64_t v7 = *(unsigned __int8 *)(*v3 + 18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = 0;
  }

  return specialized Rope.insert(_:at:)(a1, a2, a3, v7);
}

uint64_t specialized closure #1 in Rope._UnsafeHandle.copy(slots:)(_WORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a3 >> 16)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *a1 = a3;
  uint64_t v7 = a6 - a5;
  if (!__OFSUB__(a6, a5))
  {
    if (v7 < 0) {
      goto LABEL_19;
    }
    uint64_t v8 = (void *)a2;
    unint64_t v9 = a4 + 24 * a5;
    if (v9 < a2 + 24 * v7 && v9 + 24 * v7 > a2) {
      goto LABEL_19;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Item);
    swift_arrayInitWithCopy();
    uint64_t v11 = 0;
    if (!a3) {
      return 0;
    }
    uint64_t result = ((a3 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v13 = 24 * a3;
    while (1)
    {
      BOOL v14 = __OFADD__(v11, *v8);
      v11 += *v8;
      if (v14) {
        break;
      }
      v8 += 3;
      v13 -= 24;
      if (!v13) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  unint64_t v9;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a3 >> 16)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *a1 = a3;
  uint64_t v7 = a6 - a5;
  if (__OFSUB__(a6, a5))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v7 < 0) {
    goto LABEL_20;
  }
  unint64_t v9 = a4 + 24 * a5;
  if (v9 < a2 + 24 * v7 && v9 + 24 * v7 > a2) {
    goto LABEL_20;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Node);
  swift_arrayInitWithCopy();
  uint64_t v11 = 0;
  uint64_t result = 0;
  if (a3)
  {
    uint64_t v13 = (void *)(a2 + 16);
    BOOL v14 = 24 * a3;
    while (1)
    {
      uint64_t v15 = *(v13 - 1);
      BOOL v16 = __OFADD__(result, v15);
      result += v15;
      if (v16) {
        break;
      }
      BOOL v16 = __OFADD__(v11, *v13);
      v11 += *v13;
      if (v16) {
        goto LABEL_16;
      }
      v13 += 3;
      v14 -= 24;
      if (!v14) {
        return result;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t specialized closure #2 in Rope._Node.removeSuffix<A>(from:in:into:)(unsigned __int16 *a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t result = *a1;
  if (result)
  {
    uint64_t v6 = v4 - *a2;
    if (!__OFSUB__(v4, *a2))
    {
      if (__OFADD__(v6, 1))
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (v6 + 1 < 1) {
        return 0;
      }
      if (result == 1)
      {
        v4 -= *a2;
        goto LABEL_13;
      }
      uint64_t v7 = a2 + 3;
      uint64_t v8 = 1;
      while (1)
      {
        uint64_t v9 = *v7;
        v7 += 3;
        uint64_t v4 = v6 - v9;
        if (__OFSUB__(v6, v9)) {
          break;
        }
        if (__OFADD__(v4, 1)) {
          goto LABEL_17;
        }
        if (v4 + 1 < 1) {
          return v8;
        }
        ++v8;
        uint64_t v6 = v4;
        if (result == v8) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_13:
  if (v4) {
LABEL_20:
  }
    __break(1u);
  return result;
}

uint64_t specialized Rope._Node.removeSuffix<A>(from:in:into:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3;
  uint64_t v67 = a1;
  if (a1 < 1)
  {
LABEL_55:
    return swift_unknownObjectRelease();
  }
  uint64_t v6 = a5;
  uint64_t v9 = a1;
  if (a1 >= a5)
  {
    swift_unknownObjectRetain();
LABEL_52:
    uint64_t v61 = swift_unknownObjectRetain();
    specialized Rope.Builder._insertBeforeTip(_:)(v61, a4, v6);
    swift_unknownObjectRelease();
    goto LABEL_55;
  }
  int v10 = *(unsigned __int8 *)(a3 + 18);
  swift_unknownObjectRetain();
  uint64_t v66 = a2;
  if (v10)
  {
    while (1)
    {
      uint64_t v11 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16)) {
        goto LABEL_74;
      }
      uint64_t v12 = *(void *)(v5 + 40);
      uint64_t v13 = v9 - v12;
      if (__OFSUB__(v9, v12)) {
        break;
      }
      if (v13 <= 0)
      {
        uint64_t v30 = *(void *)(v5 + 24);
        a4 = *(void *)(v5 + 32);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        goto LABEL_42;
      }
      if (v11 == 1) {
        goto LABEL_74;
      }
      uint64_t v14 = v6;
      uint64_t v6 = *(void *)(v5 + 64);
      uint64_t v9 = v13 - v6;
      if (__OFSUB__(v13, v6)) {
        goto LABEL_63;
      }
      if (v9 < 1)
      {
        uint64_t v67 = v13;
        uint64_t v31 = *(void *)(v5 + 24);
        uint64_t v32 = *(void *)(v5 + 32);
        uint64_t v34 = *(void *)(v5 + 48);
        uint64_t v33 = *(void *)(v5 + 56);
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        uint64_t v35 = v31;
        a4 = v33;
        a2 = v66;
        specialized Rope.Builder._insertBeforeTip(_:)(v35, v32, v12);
        uint64_t v5 = v34;
        uint64_t v9 = v13;
        goto LABEL_43;
      }
      if (v11 == 2) {
        goto LABEL_74;
      }
      uint64_t v15 = v14;
      uint64_t v16 = 0;
      uint64_t v17 = 2 - v11;
      uint64_t v18 = 112;
      uint64_t v19 = 3;
      while (1)
      {
        if (v17 + v19 == 3)
        {
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        uint64_t v20 = *(void *)(v5 + 88 + v16);
        BOOL v21 = __OFSUB__(v9, v20);
        uint64_t v22 = v9 - v20;
        if (v21) {
          goto LABEL_59;
        }
        if (v22 < 1) {
          break;
        }
        ++v19;
        v16 += 24;
        v18 += 24;
        uint64_t v9 = v22;
        if (v17 + v19 == 3) {
          goto LABEL_74;
        }
      }
      uint64_t v67 = v9;
      if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
      {
        uint64_t v23 = specialized Rope._Node.copy()(v5);
        a4 = v24;
        uint64_t v15 = v25;
        swift_unknownObjectRelease();
        uint64_t v5 = v23;
      }
      uint64_t v26 = *(unsigned __int16 *)(v5 + 16);
      if (v19 - 1 >= v26 - 1) {
        goto LABEL_35;
      }
      if (v19 > v26) {
        goto LABEL_67;
      }
      uint64_t v65 = v15;
      if (v26 != v19)
      {
        uint64_t v64 = a4;
        if (v19 >= v26) {
          goto LABEL_72;
        }
        swift_unknownObjectRetain();
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        BOOL v36 = (uint64_t *)(v5 + v18);
        uint64_t v63 = v26;
        while (1)
        {
          uint64_t v37 = *(v36 - 1);
          uint64_t v38 = *v36;
          swift_unknownObjectRelease();
          BOOL v21 = __OFADD__(v28, v37);
          v28 += v37;
          if (v21) {
            goto LABEL_60;
          }
          BOOL v21 = __OFADD__(v27, v38);
          v27 += v38;
          if (v21) {
            goto LABEL_61;
          }
          v36 += 3;
          if (v19 == --v26)
          {
            uint64_t v29 = *(unsigned __int16 *)(v5 + 16);
            a2 = v66;
            uint64_t v26 = v63;
            a4 = v64;
            goto LABEL_31;
          }
        }
      }
      swift_unknownObjectRetain();
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = v26;
LABEL_31:
      uint64_t v39 = v29 - v26 + v19;
      if (v39 < 0) {
        goto LABEL_68;
      }
      if ((unint64_t)v39 >> 16) {
        goto LABEL_69;
      }
      *(_WORD *)(v5 + 16) = v39;
      swift_unknownObjectRelease();
      BOOL v21 = __OFSUB__(a4, v28);
      a4 -= v28;
      if (v21) {
        goto LABEL_70;
      }
      uint64_t v15 = v65 - v27;
      if (__OFSUB__(v65, v27)) {
        goto LABEL_71;
      }
LABEL_35:
      if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
      {
        uint64_t v40 = specialized Rope._Node.copy()(v5);
        a4 = v41;
        uint64_t v15 = v42;
        swift_unknownObjectRelease();
        uint64_t v5 = v40;
      }
      uint64_t v43 = *(unsigned __int16 *)(v5 + 16) - v19;
      if (v43 < 0) {
        goto LABEL_75;
      }
      uint64_t v44 = v15;
      uint64_t v45 = a4;
      uint64_t v46 = (void *)(v5 + v16);
      long long v47 = (const void *)(v5 + v16 + 96);
      uint64_t v30 = *(void *)(v5 + v16 + 72);
      uint64_t v48 = v46[10];
      v46 += 9;
      uint64_t v12 = v46[2];
      memmove(v46, v47, 24 * v43);
      int v49 = *(unsigned __int16 *)(v5 + 16);
      swift_unknownObjectRetain();
      if (!v49) {
        goto LABEL_64;
      }
      *(_WORD *)(v5 + 16) = v49 - 1;
      swift_unknownObjectRelease();
      if (__OFSUB__(v45, v48)) {
        goto LABEL_65;
      }
      if (__OFSUB__(v44, v12)) {
        goto LABEL_66;
      }
      specialized Rope.Builder._insertBeforeTip(_:)(v5, v45 - v48, v44 - v12);
      a4 = v48;
LABEL_42:
      uint64_t v6 = v12;
      uint64_t v5 = v30;
LABEL_43:
      if (v9 >= v6) {
        goto LABEL_52;
      }
      if (!*(unsigned char *)(v5 + 18)) {
        goto LABEL_45;
      }
    }
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
LABEL_45:
  uint64_t v50 = specialized closure #2 in Rope._Node.removeSuffix<A>(from:in:into:)((unsigned __int16 *)(v5 + 16), (void *)(v5 + 24), &v67);
  uint64_t v52 = v51;
  swift_unknownObjectRetain();
  uint64_t v53 = specialized Rope._Node._leafRemoveSuffix(returning:into:)(v50, a2, (void *)v5, a4, v6);
  if ((v52 & 0x8000000000000000) == 0 && v53 >= v52)
  {
    uint64_t v56 = v54;
    uint64_t v57 = v55;
    if (v52)
    {
      uint64_t v58 = v66[4];
      uint64_t v59 = v66[5];
      uint64_t v60 = v66[6];
      v66[5] = 0;
      v66[6] = 0;
      v66[4] = 0;
      if (v59)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v58, v59, v60);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(v66[4], v66[5]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease();
      v66[4] = v52;
      v66[5] = v56;
      v66[6] = v57;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    goto LABEL_55;
  }
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.removePrefix<A>(upTo:in:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = a5;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  BOOL v36 = a5;
  uint64_t v33 = a1;
  if (a1 < 1)
  {
    uint64_t v12 = a4;
    swift_unknownObjectRetain();
    uint64_t v32 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x185309530](&v32, 8);
    uint64_t v5 = v32;
    uint64_t v9 = *(void *)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_38:
    }
      uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (void *)v9);
    unint64_t v30 = *(void *)(v9 + 16);
    unint64_t v29 = *(void *)(v9 + 24);
    if (v30 >= v29 >> 1) {
      uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, (void *)v9);
    }
    *(void *)(v9 + 16) = v30 + 1;
    uint64_t v31 = (void *)(v9 + 32 * v30);
    v31[4] = a3;
    v31[5] = v12;
    v31[6] = v6;
    v31[7] = v5;
    uint64_t result = swift_unknownObjectRelease_n();
    *(void *)(a2 + 80) = v9;
  }
  else
  {
    uint64_t v9 = a1;
    if (a1 < (uint64_t)a5)
    {
      int v10 = *(unsigned __int8 *)(a3 + 18);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v12 = a3;
      if (v10)
      {
        uint64_t v12 = a3;
        while (1)
        {
          uint64_t v13 = *(unsigned __int16 *)(v12 + 16);
          if (!*(_WORD *)(v12 + 16)) {
            goto LABEL_40;
          }
          uint64_t v14 = *(void *)(v12 + 40);
          BOOL v15 = __OFSUB__(v9, v14);
          uint64_t v16 = v9 - v14;
          if (v15) {
            goto LABEL_36;
          }
          if (v16 <= 0)
          {
            uint64_t result = 0;
          }
          else
          {
            if (v13 == 1) {
              goto LABEL_40;
            }
            uint64_t v17 = *(void *)(v12 + 64);
            uint64_t v9 = v16 - v17;
            if (__OFSUB__(v16, v17)) {
              goto LABEL_37;
            }
            if (v9 >= 1)
            {
              if (v13 == 2) {
                goto LABEL_40;
              }
              uint64_t v18 = (void *)(v12 + 88);
              uint64_t result = 2;
              while (v13 != result)
              {
                uint64_t v19 = v9 - *v18;
                if (__OFSUB__(v9, *v18)) {
                  goto LABEL_35;
                }
                if (v19 < 1) {
                  goto LABEL_20;
                }
                ++result;
                v18 += 3;
                uint64_t v9 = v19;
                if (v13 == result) {
                  goto LABEL_40;
                }
              }
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
            uint64_t result = 1;
            uint64_t v9 = v16;
          }
LABEL_20:
          uint64_t result = specialized Rope._Node._innerRemovePrefix(descending:into:)(result, a2);
          uint64_t v6 = v36;
          if (v9 >= (uint64_t)v36)
          {
            swift_unknownObjectRelease();
            goto LABEL_31;
          }
          uint64_t v12 = v34;
          if (!*(unsigned char *)(v34 + 18))
          {
            uint64_t v33 = v9;
            break;
          }
        }
      }
      uint64_t v20 = specialized closure #2 in Rope.builder<A>(splittingAt:in:)(v12 + 16, (void *)(v12 + 24), &v33);
      uint64_t v22 = v21;
      uint64_t v23 = v35;
      swift_unknownObjectRetain();
      uint64_t result = specialized Rope._Node._leafRemovePrefix(returning:into:)(v20, a2, v12, v23, v6);
      if (v22 < 0 || (uint64_t v26 = result - v22, result < v22))
      {
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      uint64_t v27 = v24;
      uint64_t v28 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._insertAfterTip(_:)(v26, v27, v28);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
LABEL_31:
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized Rope._Node._removeSubrange<A>(from:to:in:into:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v11 = result;
  swift_unknownObjectRetain();
  uint64_t result = specialized Rope.Builder._insertBeforeTip(slots:in:)(0, v11, a6);
  uint64_t v12 = *(unsigned __int16 *)(a6 + 16);
  if (v12 > a3)
  {
    swift_unknownObjectRetain();
    uint64_t result = specialized Rope.Builder._insertAfterTip(slots:in:)(a3 + 1, v12, a6);
  }
  uint64_t v13 = a6 + 24;
  if (!*(unsigned char *)(a6 + 18))
  {
    if (((a4 | a2) & 0x8000000000000000) == 0)
    {
      uint64_t v22 = (uint64_t *)(v13 + 24 * v11);
      uint64_t v23 = (uint64_t *)(v13 + 24 * a3);
      uint64_t v24 = *v23;
      if (*v22 >= a2 && v24 >= a4)
      {
        uint64_t v26 = v22[1];
        uint64_t v27 = v22[2];
        uint64_t v28 = v23[1];
        uint64_t v29 = v23[2];
        if (a2)
        {
          uint64_t v30 = a5[4];
          uint64_t v31 = a5[5];
          uint64_t v32 = a5[6];
          a5[5] = 0;
          a5[6] = 0;
          a5[4] = 0;
          if (v31)
          {
            uint64_t v35 = v32;
            uint64_t v36 = v30;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized Rope.Builder._appendNow(_:)(v36, v31, v35);
            uint64_t result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
            a5[4] = a2;
            a5[5] = v26;
            a5[6] = v27;
            goto LABEL_17;
          }
          a5[4] = a2;
          a5[5] = v26;
          a5[6] = v27;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
LABEL_17:
        BOOL v33 = __OFSUB__(v24, a4);
        uint64_t v34 = v24 - a4;
        if (!v33)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Rope.Builder._insertAfterTip(_:)(v34, v28, v29);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
LABEL_24:
        __break(1u);
        return result;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v14 = (uint64_t *)(v13 + 24 * v11);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = v14[2];
  uint64_t v18 = (uint64_t *)(v13 + 24 * a3);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  uint64_t v21 = (void *)v18[2];
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  specialized Rope._Node.removeSuffix<A>(from:in:into:)(a2, a5, v15, v16, v17);
  swift_unknownObjectRetain();
  specialized Rope._Node.removePrefix<A>(upTo:in:into:)(a4, (uint64_t)a5, v19, v20, v21);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
LABEL_19:

  return swift_unknownObjectRelease();
}

uint64_t specialized AttributedString.CharacterView.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v9 = *(_OWORD **)v3;
  long long v10 = *(_OWORD *)(*(void *)v3 + 16);
  long long v11 = *(_OWORD *)(*(void *)v3 + 48);
  v32[1] = *(_OWORD *)(*(void *)v3 + 32);
  v32[2] = v11;
  v32[0] = v10;
  long long v12 = v9[1];
  v33[1] = v9[2];
  v33[2] = v11;
  v33[0] = v12;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v33, (uint64_t)v34);
  outlined retain of Locale((uint64_t)v34);
  uint64_t v13 = MEMORY[0x185301530](v4, v5, v6, v7);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  outlined release of Locale((uint64_t)v32);
  long long v20 = v9[1];
  long long v21 = v9[3];
  v31[1] = v9[2];
  uint64_t v31[2] = v21;
  v31[0] = v20;
  long long v22 = v9[1];
  v35[1] = v9[2];
  v35[2] = v21;
  v35[0] = v22;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v35, (uint64_t)v36);
  outlined retain of Locale((uint64_t)v36);
  uint64_t v23 = BigString.index(after:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  outlined release of Locale((uint64_t)v31);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    v30[0] = v13;
    v30[1] = v15;
    v30[2] = v17;
    _OWORD v30[3] = v19;
    v30[4] = v23;
    v30[5] = v25;
    v30[6] = v27;
    v30[7] = v29;
    return specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v30);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.CharacterView>, (void (*)(void))lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.CharacterView>, (void (*)(void))lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.CharacterView>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.CharacterView>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.CharacterView>, (void (*)(void))lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_181E6A390()
{
  return 0;
}

uint64_t sub_181E6A3A8()
{
  return 0;
}

uint64_t partial apply for specialized closure #1 in Rope._Node.insert(_:at:)@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #1 in Rope._Node.insert(_:at:)(*(uint64_t **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t outlined destroy of (key: String, value: AttributedString._AttributeValue)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(a1, a2, *(unsigned char **)(v2 + 16));
}

void partial apply for closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(a1, a2, v2[4], v2[5], v2[2]);
}

unint64_t lazy protocol witness table accessor for type BigSubstring and conformance BigSubstring()
{
  unint64_t result = lazy protocol witness table cache variable for type BigSubstring and conformance BigSubstring;
  if (!lazy protocol witness table cache variable for type BigSubstring and conformance BigSubstring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigSubstring and conformance BigSubstring);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString._InternalRunsSlice> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString._InternalRunsSlice>);
}

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, 0xD00000000000001DLL, 0x80000001823A86F0);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, 0xD000000000000012, 0x80000001823A8610);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, 0xD000000000000021, 0x80000001823AE490);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, 0xD00000000000001FLL, 0x80000001823AC880);
}

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)(void *a1, uint64_t a2, void *a3)
{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name, (unint64_t *)&qword_1E8ED5EE0);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name, (unint64_t *)&qword_1E8ED5F08);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name, (unint64_t *)&qword_1E8ED5E58);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name, (unint64_t *)&qword_1E8ED5E98);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name, (unint64_t *)&qword_1E8ED5EB0);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name, (unint64_t *)&qword_1E8ED5E80);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name, (unint64_t *)&qword_1E8ED5B58);
}

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)(void *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v6 = result + 8;
  uint64_t v5 = result[8];
  if (v5) {
    uint64_t v7 = result[10];
  }
  else {
    uint64_t v7 = 0;
  }
  if (a2 < 0) {
    goto LABEL_391;
  }
  uint64_t v8 = a2;
  if (v7 < a2) {
    goto LABEL_391;
  }
  uint64_t v9 = a3;
  long long v10 = result;
  uint64_t v11 = result[9];
  uint64_t v12 = result[11];
  v181 = result;
  v170 = result + 8;
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && result[10] > a2)
    {
      uint64_t v22 = *(unsigned __int8 *)(v5 + 18);
      if (!*(unsigned char *)(v5 + 18))
      {
        unint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v19 = v8;
        uint64_t v18 = (void *)v5;
LABEL_35:
        uint64_t v31 = *((unsigned __int16 *)v18 + 8);
        if (*((_WORD *)v18 + 8))
        {
          uint64_t v32 = v18[3];
          BOOL v20 = __OFSUB__(v19, v32);
          uint64_t v33 = v19 - v32;
          uint64_t v9 = a3;
          uint64_t v6 = v170;
          if (v20) {
            goto LABEL_409;
          }
          if (__OFADD__(v33, 1)) {
            goto LABEL_410;
          }
          if (v33 + 1 <= 0)
          {
            uint64_t v15 = v11;
            uint64_t v31 = 0;
            goto LABEL_50;
          }
          if (v31 != 1)
          {
            uint64_t v34 = v18 + 6;
            uint64_t v35 = 1;
            while (1)
            {
              uint64_t v36 = *v34;
              v34 += 3;
              uint64_t v19 = v33 - v36;
              if (__OFSUB__(v33, v36)) {
                goto LABEL_397;
              }
              if (__OFADD__(v19, 1)) {
                goto LABEL_399;
              }
              if (v19 + 1 < 1) {
                goto LABEL_334;
              }
              ++v35;
              uint64_t v33 = v19;
              if (v31 == v35) {
                goto LABEL_48;
              }
            }
          }
          uint64_t v19 = v33;
        }
        else
        {
          uint64_t v9 = a3;
          uint64_t v6 = v170;
        }
LABEL_48:
        if (!v19)
        {
          uint64_t v15 = v11;
          goto LABEL_50;
        }
        goto LABEL_408;
      }
      unint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t v19 = v8;
      uint64_t v23 = (void *)v5;
      while (1)
      {
        uint64_t v25 = *((unsigned __int16 *)v23 + 8);
        if (!*((_WORD *)v23 + 8)) {
          goto LABEL_19;
        }
        uint64_t v26 = v23[5];
        BOOL v20 = __OFSUB__(v19, v26);
        uint64_t v27 = v19 - v26;
        if (v20) {
          goto LABEL_376;
        }
        if (__OFADD__(v27, 1)) {
          goto LABEL_377;
        }
        if (v27 + 1 > 0) {
          break;
        }
        uint64_t v25 = 0;
LABEL_20:
        char v24 = (4 * *((unsigned char *)v23 + 18) + 8) & 0x3C;
        uint64_t v22 = ((-15 << v24) - 1) & v22 | (v25 << v24);
        uint64_t v18 = (void *)v23[3 * v25 + 3];
        swift_unknownObjectRetain();
        unint64_t result = (void *)swift_unknownObjectRelease();
        uint64_t v23 = v18;
        if (!*((unsigned char *)v18 + 18)) {
          goto LABEL_35;
        }
      }
      if (v25 != 1)
      {
        uint64_t v28 = v23 + 8;
        uint64_t v29 = 1;
        while (1)
        {
          uint64_t v30 = *v28;
          v28 += 3;
          uint64_t v19 = v27 - v30;
          if (__OFSUB__(v27, v30)) {
            goto LABEL_344;
          }
          if (__OFADD__(v19, 1)) {
            break;
          }
          if (v19 + 1 < 1)
          {
            uint64_t v25 = v29;
            uint64_t v19 = v27;
            goto LABEL_20;
          }
          ++v29;
          uint64_t v27 = v19;
          if (v25 == v29) {
            goto LABEL_19;
          }
        }
LABEL_345:
        __break(1u);
LABEL_346:
        __break(1u);
LABEL_347:
        __break(1u);
        goto LABEL_348;
      }
      uint64_t v19 = v27;
LABEL_19:
      if (v19) {
        goto LABEL_370;
      }
      goto LABEL_20;
    }
  }
  unint64_t v14 = swift_unknownObjectRetain_n();
  uint64_t v15 = v11;
  unint64_t v16 = specialized Rope._endPath.getter(v14);
  unint64_t result = (void *)swift_unknownObjectRelease();
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (!v5) {
    goto LABEL_51;
  }
LABEL_13:
  swift_unknownObjectRetain();
  uint64_t v175 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, v15);
  unint64_t result = (void *)swift_unknownObjectRelease_n();
  BOOL v20 = __OFSUB__(v8, v19);
  uint64_t v21 = v8 - v19;
  if (v20)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  while (1)
  {
    while (1)
    {
      unint64_t v177 = v16;
      uint64_t v11 = *v6;
      if (v8 != v9)
      {
        if (v11) {
          uint64_t v44 = v10[10];
        }
        else {
          uint64_t v44 = 0;
        }
        unint64_t v45 = v177;
        goto LABEL_108;
      }
      if (!v11)
      {
        if (v8 > 0) {
          goto LABEL_378;
        }
        uint64_t v9 = 0;
        goto LABEL_106;
      }
      uint64_t v38 = v10[10];
      if (v38 < v8) {
        goto LABEL_367;
      }
      uint64_t v39 = v10[9];
      uint64_t v40 = v10[11];
      uint64_t v22 = *(unsigned __int8 *)(v11 + 18);
      BOOL v41 = !*(_WORD *)(v11 + 16) || v38 <= v8;
      uint64_t v179 = v39;
      uint64_t v172 = v40;
      if (v41) {
        break;
      }
      if (!*(unsigned char *)(v11 + 18))
      {
        unint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v22 = 0;
        uint64_t v9 = v8;
        uint64_t v43 = v11;
LABEL_91:
        uint64_t v51 = *(unsigned __int16 *)(v43 + 16);
        if (*(_WORD *)(v43 + 16))
        {
          uint64_t v52 = *(void *)(v43 + 24);
          BOOL v20 = __OFSUB__(v9, v52);
          uint64_t v53 = v9 - v52;
          if (v20) {
            goto LABEL_382;
          }
          if (__OFADD__(v53, 1)) {
            goto LABEL_383;
          }
          if (v53 + 1 <= 0)
          {
            uint64_t v51 = 0;
          }
          else
          {
            if (v51 == 1)
            {
              uint64_t v9 = v53;
              goto LABEL_103;
            }
            uint64_t v54 = (uint64_t *)(v43 + 48);
            uint64_t v55 = 1;
            while (1)
            {
              uint64_t v56 = *v54;
              v54 += 3;
              uint64_t v9 = v53 - v56;
              if (__OFSUB__(v53, v56)) {
                goto LABEL_362;
              }
              if (__OFADD__(v9, 1)) {
                goto LABEL_363;
              }
              if (v9 + 1 < 1) {
                break;
              }
              ++v55;
              uint64_t v53 = v9;
              if (v51 == v55) {
                goto LABEL_103;
              }
            }
            uint64_t v51 = v55;
            uint64_t v9 = v53;
          }
LABEL_104:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v42 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v51 << 8);
          goto LABEL_105;
        }
LABEL_103:
        if (v9) {
          goto LABEL_380;
        }
        goto LABEL_104;
      }
      unint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t v9 = v8;
      uint64_t v5 = v11;
LABEL_77:
      uint64_t v33 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16)) {
        goto LABEL_75;
      }
      uint64_t v47 = *(void *)(v5 + 40);
      BOOL v20 = __OFSUB__(v9, v47);
      uint64_t v35 = v9 - v47;
      if (v20) {
        goto LABEL_337;
      }
      if (__OFADD__(v35, 1)) {
        goto LABEL_338;
      }
      if (v35 + 1 <= 0)
      {
        uint64_t v33 = 0;
        goto LABEL_76;
      }
      if (v33 == 1)
      {
        uint64_t v9 = v35;
LABEL_75:
        if (!v9) {
          goto LABEL_76;
        }
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        __break(1u);
LABEL_339:
        __break(1u);
LABEL_340:
        __break(1u);
        goto LABEL_341;
      }
      uint64_t v48 = (uint64_t *)(v5 + 64);
      uint64_t v49 = 1;
      while (1)
      {
        uint64_t v50 = *v48;
        v48 += 3;
        uint64_t v9 = v35 - v50;
        if (__OFSUB__(v35, v50)) {
          break;
        }
        if (__OFADD__(v9, 1)) {
          goto LABEL_331;
        }
        if (v9 + 1 < 1)
        {
          uint64_t v33 = v49;
          uint64_t v9 = v35;
LABEL_76:
          char v46 = (4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C;
          uint64_t v22 = ((-15 << v46) - 1) & v22 | (v33 << v46);
          uint64_t v43 = *(void *)(v5 + 24 + 24 * v33);
          swift_unknownObjectRetain();
          unint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v5 = v43;
          if (!*(unsigned char *)(v43 + 18)) {
            goto LABEL_91;
          }
          goto LABEL_77;
        }
        ++v49;
        uint64_t v35 = v9;
        if (v33 == v49) {
          goto LABEL_75;
        }
      }
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      uint64_t v15 = v11;
      uint64_t v31 = v35;
      uint64_t v19 = v33;
LABEL_50:
      swift_unknownObjectRelease();
      unint64_t result = (void *)swift_unknownObjectRelease();
      unint64_t v17 = v22 & 0xFFFFFFFFFFFFF0FFLL;
      unint64_t v16 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v31 << 8);
      uint64_t v8 = a2;
      long long v10 = v181;
      if (v5) {
        goto LABEL_13;
      }
LABEL_51:
      uint64_t v175 = 0;
      BOOL v20 = __OFSUB__(v8, v19);
      uint64_t v21 = v8 - v19;
      if (v20) {
        goto LABEL_53;
      }
    }
    unint64_t v42 = ((-15 << ((4 * v22 + 8) & 0x3C)) - 1) & v22 | ((unint64_t)*(unsigned __int16 *)(v11 + 16) << ((4 * v22 + 8) & 0x3C));
    swift_unknownObjectRetain();
    uint64_t v9 = 0;
    uint64_t v43 = 0;
LABEL_105:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v172, v42, v43, v11, v179);
    unint64_t result = (void *)swift_unknownObjectRelease_n();
    uint64_t v8 = a2;
    long long v10 = v181;
LABEL_106:
    uint64_t v44 = v8 - v9;
    unint64_t v45 = v177;
    if (__OFSUB__(v8, v9)) {
      goto LABEL_356;
    }
    uint64_t v9 = a3;
LABEL_108:
    if (v21 >= v44) {
      return result;
    }
    if (v12 != v10[11]) {
      goto LABEL_346;
    }
    if (v18)
    {
      uint64_t v57 = &v18[3 * ((v45 >> ((4 * *((unsigned char *)v18 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v59 = v57[4];
      uint64_t v58 = v57[5];
      unint64_t v60 = v57[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
    else
    {
      uint64_t v61 = v10[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v45, v61);
      uint64_t v59 = v62;
      uint64_t v58 = v63;
      unint64_t result = (void *)swift_unknownObjectRelease();
      if (v12 != v10[11]) {
        goto LABEL_366;
      }
      uint64_t v64 = v10[8];
      swift_unknownObjectRetain();
      unint64_t v60 = specialized Rope._Node.subscript.getter(v177, v64);
      unint64_t v45 = v177;
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    unint64_t result = (void *)swift_bridgeObjectRelease();
    uint64_t v65 = v21 + v60;
    if (__OFADD__(v21, v60)) {
      goto LABEL_347;
    }
    *(void *)&long long v191 = v59;
    *((void *)&v191 + 1) = v58;
    uint64_t v66 = v21 >= v9 ? v9 : v21;
    uint64_t v67 = v21 >= a2 ? v66 : a2;
    unint64_t v68 = v65 <= a2 ? a2 : v21 + v60;
    uint64_t v69 = v65 <= v9 ? v68 : v9;
    if (v67 == v69) {
      break;
    }
    if (v67 != v21 || v69 != v65)
    {
      uint64_t v190 = 0;
      long long v188 = 0u;
      long long v189 = 0u;
      long long v186 = 0u;
      long long v187 = 0u;
      unint64_t result = (void *)specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v186, a4, a5);
      if (__OFSUB__(v69, v67)) {
        goto LABEL_358;
      }
      uint64_t v85 = *((void *)&v191 + 1);
      uint64_t v5 = v191;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v67, v69, v69 - v67, v5, v85);
      swift_bridgeObjectRelease();
      unint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v86 = v181;
      uint64_t v11 = v181[8];
      uint64_t v12 = v181[10];
      if (v11) {
        uint64_t v87 = v181[10];
      }
      else {
        uint64_t v87 = 0;
      }
      if (v21 < 0 || v87 < v21) {
        goto LABEL_360;
      }
      uint64_t v18 = (void *)v181[9];
      uint64_t v178 = (uint64_t)v18;
      uint64_t v180 = v181[11];
      if (!v11 || !*(_WORD *)(v11 + 16) || v21 >= v12)
      {
        uint64_t v93 = v6;
        unint64_t v94 = swift_unknownObjectRetain_n();
        unint64_t v95 = specialized Rope._endPath.getter(v94);
        swift_unknownObjectRelease();
        uint64_t v18 = 0;
        uint64_t v9 = 0;
        if (!v11)
        {
          swift_bridgeObjectRelease();
          unint64_t result = (void *)swift_bridgeObjectRelease();
          uint64_t v81 = 0;
LABEL_231:
          uint64_t v9 = a3;
          unint64_t v96 = v95;
          uint64_t v6 = v93;
          goto LABEL_232;
        }
LABEL_168:
        swift_unknownObjectRetain();
        uint64_t v81 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v180, v95, (uint64_t)v18, v11, v178);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_unknownObjectRelease_n();
        BOOL v20 = __OFSUB__(v21, v9);
        v21 -= v9;
        if (v20) {
          goto LABEL_361;
        }
        goto LABEL_231;
      }
      uint64_t v22 = *(unsigned __int8 *)(v11 + 18);
      if (*(unsigned char *)(v11 + 18))
      {
        unint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v9 = v21;
        uint64_t v6 = (uint64_t *)v11;
        while (1)
        {
          uint64_t v33 = *((unsigned __int16 *)v6 + 8);
          if (!*((_WORD *)v6 + 8)) {
            goto LABEL_152;
          }
          uint64_t v89 = v6[5];
          BOOL v20 = __OFSUB__(v9, v89);
          uint64_t v35 = v9 - v89;
          if (v20) {
            goto LABEL_339;
          }
          if (__OFADD__(v35, 1)) {
            goto LABEL_340;
          }
          if (v35 + 1 <= 0)
          {
            uint64_t v33 = 0;
          }
          else
          {
            if (v33 == 1)
            {
              uint64_t v9 = v35;
LABEL_152:
              if (v9) {
                goto LABEL_336;
              }
              goto LABEL_153;
            }
            long long v90 = v6 + 8;
            uint64_t v91 = 1;
            while (1)
            {
              uint64_t v92 = *v90;
              v90 += 3;
              uint64_t v9 = v35 - v92;
              if (__OFSUB__(v35, v92)) {
                goto LABEL_332;
              }
              if (__OFADD__(v9, 1)) {
                goto LABEL_333;
              }
              if (v9 + 1 < 1) {
                break;
              }
              ++v91;
              uint64_t v35 = v9;
              if (v33 == v91) {
                goto LABEL_152;
              }
            }
            uint64_t v33 = v91;
            uint64_t v9 = v35;
          }
LABEL_153:
          char v88 = (4 * *((unsigned char *)v6 + 18) + 8) & 0x3C;
          uint64_t v22 = ((-15 << v88) - 1) & v22 | (v33 << v88);
          uint64_t v18 = (void *)v6[3 * v33 + 3];
          swift_unknownObjectRetain();
          unint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v6 = v18;
          if (!*((unsigned char *)v18 + 18)) {
            goto LABEL_211;
          }
        }
      }
      unint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t v9 = v21;
      uint64_t v18 = (void *)v11;
LABEL_211:
      uint64_t v128 = *((unsigned __int16 *)v18 + 8);
      if (!*((_WORD *)v18 + 8)) {
        goto LABEL_228;
      }
      uint64_t v129 = v18[3];
      BOOL v20 = __OFSUB__(v9, v129);
      uint64_t v130 = v9 - v129;
      if (v20) {
        goto LABEL_386;
      }
      if (__OFADD__(v130, 1)) {
        goto LABEL_387;
      }
      if (v130 + 1 <= 0)
      {
        uint64_t v128 = 0;
      }
      else
      {
        if (v128 == 1)
        {
          uint64_t v9 = v130;
LABEL_228:
          if (v9) {
            goto LABEL_381;
          }
          goto LABEL_229;
        }
        v134 = v18 + 6;
        uint64_t v135 = 1;
        while (1)
        {
          uint64_t v136 = *v134;
          v134 += 3;
          uint64_t v9 = v130 - v136;
          if (__OFSUB__(v130, v136)) {
            goto LABEL_364;
          }
          if (__OFADD__(v9, 1)) {
            goto LABEL_365;
          }
          if (v9 + 1 < 1) {
            break;
          }
          ++v135;
          uint64_t v130 = v9;
          if (v128 == v135) {
            goto LABEL_228;
          }
        }
        uint64_t v128 = v135;
        uint64_t v9 = v130;
      }
LABEL_229:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v95 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v128 << 8);
      uint64_t v86 = v181;
      uint64_t v93 = v170;
      goto LABEL_168;
    }
    if (v12 != v181[11]) {
      goto LABEL_357;
    }
    if (!*v6) {
      goto LABEL_411;
    }
    specialized Rope._Node._prepareModify(at:)(v45, (uint64_t)&v192);
    v203[0] = v193;
    long long v186 = v192;
    long long v187 = v193;
    long long v188 = v194;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)v203);
    unint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v203 + 8);
    long long v187 = MEMORY[0x1E4FBC868];
    v181[11] = v12 + 1;
    if (!v181[8]) {
      goto LABEL_412;
    }
    specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v190 = 0;
    long long v188 = 0u;
    long long v189 = 0u;
    long long v186 = 0u;
    long long v187 = 0u;
    unint64_t result = (void *)specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v186, a4, a5);
    if (v12 + 1 != v181[11]) {
      goto LABEL_359;
    }
    if (!*v6) {
      goto LABEL_413;
    }
    specialized Rope._Node._prepareModify(at:)(v45, (uint64_t)&v195);
    uint64_t v201 = v196;
    uint64_t v202 = v197;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v201);
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v202);
    long long v186 = v195;
    long long v188 = v198;
    uint64_t v70 = *((void *)&v191 + 1);
    unint64_t result = (void *)v191;
    long long v187 = v191;
    uint64_t v71 = v12 + 2;
    v181[11] = v12 + 2;
    if (!v181[8]) {
      goto LABEL_414;
    }
    unint64_t v72 = v45;
    uint64_t v173 = (uint64_t)result;
    swift_bridgeObjectRetain_n();
    uint64_t v171 = v70;
    swift_bridgeObjectRetain_n();
    uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v73 = v181[8];
    uint64_t v74 = v181[9];
    uint64_t v75 = v181[10];
    uint64_t v76 = v181[11];
    uint64_t v180 = v71;
    *(void *)&long long v186 = v71;
    *((void *)&v186 + 1) = v72;
    *(void *)&long long v187 = v18;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v186, v73, v74, v75, v76);
    swift_unknownObjectRelease();
    long long v77 = v186;
    uint64_t v78 = v187;
    unint64_t v79 = swift_unknownObjectRetain();
    unint64_t v80 = specialized Rope._endPath.getter(v79);
    unint64_t result = (void *)swift_unknownObjectRelease();
    if (*((void *)&v77 + 1) >= v80)
    {
      uint64_t v9 = a3;
      uint64_t v81 = v175;
      uint64_t v6 = v170;
      unint64_t v96 = v177;
    }
    else
    {
      uint64_t v81 = v175;
      if ((void)v77 != v181[11]) {
        goto LABEL_371;
      }
      if (v78)
      {
        uint64_t v82 = v78 + 24 * ((*((void *)&v77 + 1) >> ((4 * *(unsigned char *)(v78 + 18) + 8) & 0x3C)) & 0xFLL);
        uint64_t v83 = *(void *)(v82 + 32);
        uint64_t v84 = *(void *)(v82 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v97 = v181[8];
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(*((unint64_t *)&v77 + 1), v97);
        uint64_t v83 = v98;
        uint64_t v84 = v99;
        swift_unknownObjectRelease();
      }
      uint64_t v9 = a3;
      uint64_t v6 = v170;
      unint64_t v96 = v177;
      if ((specialized static Dictionary<>.== infix(_:_:)(v83, v173) & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_184:
        unint64_t result = (void *)swift_bridgeObjectRelease();
        goto LABEL_185;
      }
      char v100 = specialized static Set.== infix(_:_:)(v84, v171);
      swift_bridgeObjectRelease();
      unint64_t result = (void *)swift_bridgeObjectRelease();
      if (v100)
      {
        unint64_t v96 = specialized Rope._remove(at:)((uint64_t)&v186, v180, v177);
        uint64_t v101 = v181;
        unint64_t v102 = v181[8];
        uint64_t v103 = v181[11];
        if (v96 < specialized Rope._endPath.getter(v102) && *(unsigned char *)(v102 + 18))
        {
          uint64_t v104 = (v96 >> ((4 * *(unsigned char *)(v102 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          uint64_t v101 = v181;
          specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v102 + 24, v104, v96);
          swift_unknownObjectRelease();
        }
        uint64_t v105 = v186;
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_bridgeObjectRelease();
        if (v103 != v101[11]) {
          goto LABEL_392;
        }
        if (!*v170) {
          goto LABEL_415;
        }
        unint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v96, (uint64_t)v199);
        long long v186 = v199[0];
        long long v187 = v199[1];
        long long v188 = v199[2];
        if (__OFADD__(*((void *)&v199[0] + 1), v105)) {
          goto LABEL_393;
        }
        *((void *)&v186 + 1) = *((void *)&v199[0] + 1) + v105;
        uint64_t v180 = v103 + 1;
        v101[11] = v103 + 1;
        if (!v101[8]) {
          goto LABEL_416;
        }
        uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        goto LABEL_184;
      }
    }
LABEL_185:
    unint64_t v106 = *v6;
    if (*v6) {
      unint64_t v106 = *(unsigned __int8 *)(v106 + 18);
    }
    uint64_t v86 = v181;
    if (v96 <= v106)
    {
      swift_bridgeObjectRelease_n();
      unint64_t result = (void *)swift_bridgeObjectRelease_n();
      goto LABEL_232;
    }
    uint64_t v107 = v181[8];
    uint64_t v108 = v181[11];
    *(void *)&long long v186 = v180;
    *((void *)&v186 + 1) = v96;
    *(void *)&long long v187 = v18;
    if (v180 != v108) {
      goto LABEL_372;
    }
    if (v107)
    {
      unint64_t v109 = *(unsigned __int8 *)(v107 + 18);
      unint64_t result = (void *)swift_unknownObjectRetain();
      if (v96 <= v109) {
        goto LABEL_373;
      }
    }
    else if (!v96)
    {
      goto LABEL_373;
    }
    char v110 = (4 * *((unsigned char *)v18 + 18) + 8) & 0x3C;
    if (((v96 >> v110) & 0xF) != 0)
    {
      unint64_t v111 = ((((v96 >> v110) & 0xF) - 1) << v110) | ((-15 << v110) - 1) & v96;
      unint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v112 = v18;
      uint64_t v113 = v180;
    }
    else
    {
      swift_unknownObjectRetain();
      char v114 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v186, v107);
      unint64_t result = (void *)swift_unknownObjectRelease_n();
      if ((v114 & 1) == 0) {
        goto LABEL_384;
      }
      unint64_t v111 = *((void *)&v186 + 1);
      uint64_t v113 = v186;
      uint64_t v112 = (void *)v187;
    }
    if (v113 != v181[11]) {
      goto LABEL_374;
    }
    if (v112)
    {
      uint64_t v115 = &v112[3 * ((v111 >> ((4 * *((unsigned char *)v112 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v116 = v115[4];
      uint64_t v117 = v115[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v118 = v181[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v111, v118);
      uint64_t v116 = v119;
      uint64_t v117 = v120;
      swift_unknownObjectRelease();
    }
    uint64_t v6 = v170;
    if ((specialized static Dictionary<>.== infix(_:_:)(v116, v173) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v86 = v181;
LABEL_209:
      swift_bridgeObjectRelease();
      unint64_t result = (void *)swift_bridgeObjectRelease();
      goto LABEL_232;
    }
    char v121 = specialized static Set.== infix(_:_:)(v117, v171);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v121 & 1) == 0)
    {
      uint64_t v86 = v181;
      uint64_t v6 = v170;
      goto LABEL_209;
    }
    unint64_t v122 = specialized Rope._remove(at:)((uint64_t)&v186, v180, v96);
    uint64_t v123 = v181;
    unint64_t v124 = v181[8];
    uint64_t v125 = v181[11];
    if (v122 >= specialized Rope._endPath.getter(v124))
    {
      unint64_t v124 = 0;
    }
    else if (*(unsigned char *)(v124 + 18))
    {
      uint64_t v126 = (v122 >> ((4 * *(unsigned char *)(v124 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      uint64_t v123 = v181;
      uint64_t v127 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v124 + 24, v126, v122);
      swift_unknownObjectRelease();
      unint64_t v124 = v127;
    }
    uint64_t v183 = v125;
    unint64_t v184 = v122;
    unint64_t v185 = v124;
    uint64_t v131 = v186;
    swift_bridgeObjectRelease();
    unint64_t result = (void *)swift_bridgeObjectRelease();
    if (v125 != v123[11]) {
      goto LABEL_394;
    }
    uint64_t v132 = v123[8];
    if (v132)
    {
      unint64_t v133 = *(unsigned __int8 *)(v132 + 18);
      unint64_t result = (void *)swift_unknownObjectRetain();
      if (v122 <= v133) {
        goto LABEL_395;
      }
    }
    else if (!v122)
    {
      goto LABEL_395;
    }
    if (v124 && (char v164 = (4 * *(unsigned char *)(v124 + 18) + 8) & 0x3C, ((v122 >> v164) & 0xF) != 0))
    {
      unint64_t v184 = ((((v122 >> v164) & 0xF) - 1) << v164) | ((-15 << v164) - 1) & v122;
      unint64_t result = (void *)swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
      char v165 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v183, v132);
      unint64_t result = (void *)swift_unknownObjectRelease_n();
      if ((v165 & 1) == 0) {
        goto LABEL_405;
      }
      uint64_t v125 = v183;
    }
    uint64_t v86 = v181;
    uint64_t v6 = v170;
    if (v125 != v181[11]) {
      goto LABEL_396;
    }
    if (!*v170) {
      goto LABEL_417;
    }
    unint64_t v96 = v184;
    unint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v184, (uint64_t)v200);
    long long v186 = v200[0];
    long long v187 = v200[1];
    long long v188 = v200[2];
    BOOL v20 = __OFSUB__(v21, *((void *)&v200[0] + 1));
    v21 -= *((void *)&v200[0] + 1);
    if (v20) {
      goto LABEL_398;
    }
    if (__OFADD__(*((void *)&v200[0] + 1), v131)) {
      goto LABEL_400;
    }
    *((void *)&v186 + 1) = *((void *)&v200[0] + 1) + v131;
    uint64_t v180 = v125 + 1;
    v181[11] = v125 + 1;
    if (!v181[8]) {
      goto LABEL_418;
    }
    uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t result = (void *)swift_bridgeObjectRelease();
    uint64_t v81 = v175 - 1;
    if (__OFSUB__(v175, 1)) {
      goto LABEL_401;
    }
LABEL_232:
    uint64_t v137 = v86[8];
    uint64_t v138 = v86[11];
    *(void *)&long long v186 = v180;
    *((void *)&v186 + 1) = v96;
    *(void *)&long long v187 = v18;
    BOOL v20 = __OFADD__(v81, 1);
    uint64_t v139 = v81 + 1;
    if (v20) {
      goto LABEL_349;
    }
    if (v180 != v138) {
      goto LABEL_350;
    }
    if (v18)
    {
      unint64_t v140 = v18[3 * ((v96 >> ((4 * *((unsigned char *)v18 + 18) + 8) & 0x3C)) & 0xF) + 3];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v140 = specialized Rope._Node.subscript.getter(v96, v137);
    }
    swift_bridgeObjectRelease();
    unint64_t result = (void *)swift_bridgeObjectRelease();
    BOOL v20 = __OFADD__(v21, v140);
    v21 += v140;
    if (v20) {
      goto LABEL_351;
    }
    if (v137)
    {
      unint64_t v141 = ((-15 << ((4 * *(unsigned char *)(v137 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v137 + 18) | ((unint64_t)*(unsigned __int16 *)(v137 + 16) << ((4 * *(unsigned char *)(v137 + 18) + 8) & 0x3C));
      unint64_t result = (void *)swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v141 = 0;
    }
    uint64_t v8 = a2;
    long long v10 = v181;
    if (v96 >= v141) {
      goto LABEL_352;
    }
    uint64_t v175 = v139;
    if (v18
      && (char v142 = (4 * *((unsigned char *)v18 + 18) + 8) & 0x3C,
          unint64_t v143 = ((v96 >> v142) & 0xF) + 1,
          v143 < *((unsigned __int16 *)v18 + 8)))
    {
      unint64_t v16 = (v143 << v142) | ((-15 << v142) - 1) & v96;
      unint64_t result = (void *)swift_unknownObjectRelease_n();
    }
    else
    {
      int v144 = *(unsigned __int8 *)(v137 + 18);
      char v145 = (4 * v144 + 8) & 0x3C;
      uint64_t v183 = (v96 >> v145) & 0xF;
      if (v144)
      {
        swift_unknownObjectRetain();
        char v146 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v137 + 24, &v183, (uint64_t)&v186, v137, v144);
        unint64_t result = (void *)swift_unknownObjectRelease();
        if ((v146 & 1) == 0) {
          goto LABEL_250;
        }
        unint64_t result = (void *)swift_unknownObjectRelease_n();
        unint64_t v16 = *((void *)&v186 + 1);
      }
      else
      {
        unint64_t v147 = ((v96 >> v145) & 0xF) + 1;
        if (v147 >= *(unsigned __int16 *)(v137 + 16))
        {
LABEL_250:
          if (v137)
          {
            int v148 = *(unsigned __int8 *)(v137 + 18);
            uint64_t v149 = *(unsigned __int16 *)(v137 + 16);
            unint64_t result = (void *)swift_unknownObjectRelease_n();
            unint64_t v16 = ((-15 << ((4 * v148 + 8) & 0x3C)) - 1) & v148 | (unint64_t)(v149 << ((4 * v148 + 8) & 0x3C));
          }
          else
          {
            unint64_t v16 = 0;
          }
          *(void *)&long long v186 = v180;
          *((void *)&v186 + 1) = v16;
          *(void *)&long long v187 = 0;
          goto LABEL_254;
        }
        unint64_t v16 = (v147 << v145) | ((-15 << v145) - 1) & v96;
        *((void *)&v186 + 1) = v16;
        unint64_t result = (void *)swift_unknownObjectRelease_n();
        *(void *)&long long v187 = v137;
      }
    }
LABEL_254:
    uint64_t v12 = v186;
    uint64_t v18 = (void *)v187;
    if (v21 >= v9)
    {
      uint64_t v5 = *v6;
      if (a2 == v9)
      {
        uint64_t v12 = v181[11];
        if (v5)
        {
          uint64_t v150 = v181[10];
          if (v150 < a2) {
            goto LABEL_379;
          }
          long long v10 = (void *)v181[9];
          unint64_t v17 = *(unsigned __int16 *)(v5 + 16);
          unint64_t v16 = *(unsigned __int8 *)(v5 + 18);
          if (*(_WORD *)(v5 + 16) && v150 > a2)
          {
            if (*(unsigned char *)(v5 + 18))
            {
              unint64_t result = (void *)swift_unknownObjectRetain_n();
              uint64_t v37 = a2;
              v151 = (void *)v5;
              while (1)
              {
                uint64_t v153 = *((unsigned __int16 *)v151 + 8);
                if (!*((_WORD *)v151 + 8)) {
                  goto LABEL_263;
                }
                uint64_t v154 = v151[5];
                uint64_t v155 = v37 - v154;
                if (__OFSUB__(v37, v154)) {
                  goto LABEL_354;
                }
                if (__OFADD__(v155, 1)) {
                  goto LABEL_355;
                }
                if (v155 + 1 <= 0)
                {
                  uint64_t v153 = 0;
                }
                else
                {
                  if (v153 == 1)
                  {
                    v37 -= v154;
LABEL_263:
                    if (v37) {
                      goto LABEL_353;
                    }
                    goto LABEL_264;
                  }
                  uint64_t v156 = v151[8];
                  BOOL v20 = __OFSUB__(v155, v156);
                  uint64_t v157 = v155 - v156;
                  if (v20) {
                    goto LABEL_368;
                  }
                  if (__OFADD__(v157, 1)) {
                    goto LABEL_369;
                  }
                  if (v157 + 1 >= 1)
                  {
                    if (v153 != 2)
                    {
                      v158 = v151 + 11;
                      uint64_t v159 = 2;
                      while (v153 != v159)
                      {
                        uint64_t v37 = v157 - *v158;
                        if (__OFSUB__(v157, *v158)) {
                          goto LABEL_342;
                        }
                        if (__OFADD__(v37, 1)) {
                          goto LABEL_343;
                        }
                        if (v37 + 1 < 1)
                        {
                          uint64_t v153 = v159;
                          uint64_t v37 = v157;
                          goto LABEL_264;
                        }
                        ++v159;
                        v158 += 3;
                        uint64_t v157 = v37;
                        if (v153 == v159) {
                          goto LABEL_263;
                        }
                      }
LABEL_341:
                      __break(1u);
LABEL_342:
                      __break(1u);
LABEL_343:
                      __break(1u);
LABEL_344:
                      __break(1u);
                      goto LABEL_345;
                    }
                    uint64_t v37 = v157;
                    goto LABEL_263;
                  }
                  uint64_t v153 = 1;
                  uint64_t v37 = v155;
                }
LABEL_264:
                char v152 = (4 * *((unsigned char *)v151 + 18) + 8) & 0x3C;
                unint64_t v16 = ((-15 << v152) - 1) & v16 | (v153 << v152);
                uint64_t v18 = (void *)v151[3 * v153 + 3];
                swift_unknownObjectRetain();
                unint64_t result = (void *)swift_unknownObjectRelease();
                v151 = v18;
                if (!*((unsigned char *)v18 + 18)) {
                  goto LABEL_290;
                }
              }
            }
            unint64_t result = (void *)swift_unknownObjectRetain_n();
            unint64_t v16 = 0;
            uint64_t v37 = a2;
            uint64_t v18 = (void *)v5;
LABEL_290:
            uint64_t v160 = *((unsigned __int16 *)v18 + 8);
            if (!*((_WORD *)v18 + 8)) {
              goto LABEL_299;
            }
            uint64_t v161 = v18[3];
            BOOL v20 = __OFSUB__(v37, v161);
            uint64_t v162 = v37 - v161;
            if (v20) {
              goto LABEL_403;
            }
            if (__OFADD__(v162, 1)) {
              goto LABEL_404;
            }
            if (v162 + 1 <= 0)
            {
              uint64_t v160 = 0;
            }
            else
            {
              if (v160 == 1)
              {
LABEL_300:
                if (v162) {
                  goto LABEL_402;
                }
                uint64_t v37 = 0;
                goto LABEL_328;
              }
              uint64_t v163 = v18[6];
              uint64_t v37 = v162 - v163;
              if (__OFSUB__(v162, v163)) {
                goto LABEL_406;
              }
              if (__OFADD__(v37, 1)) {
                goto LABEL_407;
              }
              if (v37 + 1 >= 1)
              {
                if (v160 != 2)
                {
                  v166 = v18 + 9;
                  uint64_t v167 = 2;
                  while (v160 != v167)
                  {
                    uint64_t v162 = v37 - *v166;
                    if (__OFSUB__(v37, *v166)) {
                      goto LABEL_389;
                    }
                    if (__OFADD__(v162, 1)) {
                      goto LABEL_390;
                    }
                    if (v162 + 1 < 1)
                    {
                      uint64_t v160 = v167;
                      goto LABEL_328;
                    }
                    ++v167;
                    v166 += 3;
                    uint64_t v37 = v162;
                    if (v160 == v167) {
                      goto LABEL_300;
                    }
                  }
                  goto LABEL_388;
                }
LABEL_299:
                uint64_t v162 = v37;
                goto LABEL_300;
              }
              uint64_t v160 = 1;
              uint64_t v37 = v162;
            }
LABEL_328:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v16 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v160 << 8);
            uint64_t v8 = a2;
            goto LABEL_55;
          }
LABEL_54:
          unint64_t v16 = ((-15 << ((4 * v16 + 8) & 0x3C)) - 1) & v16 | (v17 << ((4 * v16 + 8) & 0x3C));
          swift_unknownObjectRetain();
          uint64_t v37 = 0;
          uint64_t v18 = 0;
LABEL_55:
          swift_unknownObjectRetain();
          uint64_t v175 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, (uint64_t)v10);
          unint64_t result = (void *)swift_unknownObjectRelease_n();
          long long v10 = v181;
          goto LABEL_56;
        }
        if (a2 > 0) {
          goto LABEL_385;
        }
        uint64_t v37 = 0;
        uint64_t v18 = 0;
        unint64_t v16 = 0;
        uint64_t v175 = 0;
LABEL_56:
        BOOL v20 = __OFSUB__(v8, v37);
        uint64_t v21 = v8 - v37;
        uint64_t v9 = a3;
        if (v20) {
          goto LABEL_375;
        }
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v175 = 0;
        uint64_t v18 = 0;
        unint64_t v16 = 0;
        uint64_t v12 = v181[11];
        if (v5)
        {
          uint64_t v18 = 0;
          uint64_t v21 = v181[10];
          uint64_t v175 = v181[9];
          unint64_t v16 = ((-15 << ((4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v5 + 18) | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C));
        }
      }
    }
  }
LABEL_348:
  __break(1u);
LABEL_349:
  __break(1u);
LABEL_350:
  __break(1u);
LABEL_351:
  __break(1u);
LABEL_352:
  __break(1u);
LABEL_353:
  __break(1u);
LABEL_354:
  __break(1u);
LABEL_355:
  __break(1u);
LABEL_356:
  __break(1u);
LABEL_357:
  __break(1u);
LABEL_358:
  __break(1u);
LABEL_359:
  __break(1u);
LABEL_360:
  __break(1u);
LABEL_361:
  __break(1u);
LABEL_362:
  __break(1u);
LABEL_363:
  __break(1u);
LABEL_364:
  __break(1u);
LABEL_365:
  __break(1u);
LABEL_366:
  __break(1u);
LABEL_367:
  __break(1u);
LABEL_368:
  __break(1u);
LABEL_369:
  __break(1u);
LABEL_370:
  __break(1u);
LABEL_371:
  __break(1u);
LABEL_372:
  __break(1u);
LABEL_373:
  __break(1u);
LABEL_374:
  __break(1u);
LABEL_375:
  __break(1u);
LABEL_376:
  __break(1u);
LABEL_377:
  __break(1u);
LABEL_378:
  __break(1u);
LABEL_379:
  __break(1u);
LABEL_380:
  __break(1u);
LABEL_381:
  __break(1u);
LABEL_382:
  __break(1u);
LABEL_383:
  __break(1u);
LABEL_384:
  __break(1u);
LABEL_385:
  __break(1u);
LABEL_386:
  __break(1u);
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  __break(1u);
LABEL_393:
  __break(1u);
LABEL_394:
  __break(1u);
LABEL_395:
  __break(1u);
LABEL_396:
  __break(1u);
LABEL_397:
  __break(1u);
LABEL_398:
  __break(1u);
LABEL_399:
  __break(1u);
LABEL_400:
  __break(1u);
LABEL_401:
  __break(1u);
LABEL_402:
  __break(1u);
LABEL_403:
  __break(1u);
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  long long v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  void *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  char v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unint64_t v121;
  void *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  int v143;
  char v144;
  char v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  char v164;
  void *v165;
  uint64_t v166;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v174;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  void v181[2];
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  long long v185;
  long long v186;
  long long v187;
  long long v188;
  uint64_t v189;
  long long v190;
  long long v191;
  long long v192;
  long long v193;
  long long v194;
  uint64_t v195;
  uint64_t v196;
  long long v197;
  _OWORD v198[3];
  _OWORD v199[3];
  uint64_t v200;
  uint64_t v201;
  _OWORD v202[2];

  uint64_t v6 = result + 8;
  uint64_t v5 = result[8];
  if (v5) {
    uint64_t v7 = result[10];
  }
  else {
    uint64_t v7 = 0;
  }
  if (a2 < 0) {
    goto LABEL_391;
  }
  uint64_t v8 = a2;
  if (v7 < a2) {
    goto LABEL_391;
  }
  uint64_t v9 = a3;
  long long v10 = result;
  uint64_t v11 = result[9];
  uint64_t v12 = result[11];
  uint64_t v180 = result;
  v169 = result + 8;
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && result[10] > a2)
    {
      uint64_t v22 = *(unsigned __int8 *)(v5 + 18);
      if (!*(unsigned char *)(v5 + 18))
      {
        unint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v19 = v8;
        uint64_t v18 = (void *)v5;
LABEL_35:
        uint64_t v31 = *((unsigned __int16 *)v18 + 8);
        if (*((_WORD *)v18 + 8))
        {
          uint64_t v32 = v18[3];
          BOOL v20 = __OFSUB__(v19, v32);
          uint64_t v33 = v19 - v32;
          uint64_t v9 = a3;
          uint64_t v6 = v169;
          if (v20) {
            goto LABEL_409;
          }
          if (__OFADD__(v33, 1)) {
            goto LABEL_410;
          }
          if (v33 + 1 <= 0)
          {
            uint64_t v15 = v11;
            uint64_t v31 = 0;
            goto LABEL_50;
          }
          if (v31 != 1)
          {
            uint64_t v34 = v18 + 6;
            uint64_t v35 = 1;
            while (1)
            {
              uint64_t v36 = *v34;
              v34 += 3;
              uint64_t v19 = v33 - v36;
              if (__OFSUB__(v33, v36)) {
                goto LABEL_397;
              }
              if (__OFADD__(v19, 1)) {
                goto LABEL_399;
              }
              if (v19 + 1 < 1) {
                goto LABEL_334;
              }
              ++v35;
              uint64_t v33 = v19;
              if (v31 == v35) {
                goto LABEL_48;
              }
            }
          }
          uint64_t v19 = v33;
        }
        else
        {
          uint64_t v9 = a3;
          uint64_t v6 = v169;
        }
LABEL_48:
        if (!v19)
        {
          uint64_t v15 = v11;
          goto LABEL_50;
        }
        goto LABEL_408;
      }
      unint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t v19 = v8;
      uint64_t v23 = (void *)v5;
      while (1)
      {
        uint64_t v25 = *((unsigned __int16 *)v23 + 8);
        if (!*((_WORD *)v23 + 8)) {
          goto LABEL_19;
        }
        uint64_t v26 = v23[5];
        BOOL v20 = __OFSUB__(v19, v26);
        uint64_t v27 = v19 - v26;
        if (v20) {
          goto LABEL_376;
        }
        if (__OFADD__(v27, 1)) {
          goto LABEL_377;
        }
        if (v27 + 1 > 0) {
          break;
        }
        uint64_t v25 = 0;
LABEL_20:
        char v24 = (4 * *((unsigned char *)v23 + 18) + 8) & 0x3C;
        uint64_t v22 = ((-15 << v24) - 1) & v22 | (v25 << v24);
        uint64_t v18 = (void *)v23[3 * v25 + 3];
        swift_unknownObjectRetain();
        unint64_t result = (void *)swift_unknownObjectRelease();
        uint64_t v23 = v18;
        if (!*((unsigned char *)v18 + 18)) {
          goto LABEL_35;
        }
      }
      if (v25 != 1)
      {
        uint64_t v28 = v23 + 8;
        uint64_t v29 = 1;
        while (1)
        {
          uint64_t v30 = *v28;
          v28 += 3;
          uint64_t v19 = v27 - v30;
          if (__OFSUB__(v27, v30)) {
            goto LABEL_344;
          }
          if (__OFADD__(v19, 1)) {
            break;
          }
          if (v19 + 1 < 1)
          {
            uint64_t v25 = v29;
            uint64_t v19 = v27;
            goto LABEL_20;
          }
          ++v29;
          uint64_t v27 = v19;
          if (v25 == v29) {
            goto LABEL_19;
          }
        }
LABEL_345:
        __break(1u);
LABEL_346:
        __break(1u);
LABEL_347:
        __break(1u);
        goto LABEL_348;
      }
      uint64_t v19 = v27;
LABEL_19:
      if (v19) {
        goto LABEL_370;
      }
      goto LABEL_20;
    }
  }
  unint64_t v14 = swift_unknownObjectRetain_n();
  uint64_t v15 = v11;
  unint64_t v16 = specialized Rope._endPath.getter(v14);
  unint64_t result = (void *)swift_unknownObjectRelease();
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (!v5) {
    goto LABEL_51;
  }
LABEL_13:
  swift_unknownObjectRetain();
  v174 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, v15);
  unint64_t result = (void *)swift_unknownObjectRelease_n();
  BOOL v20 = __OFSUB__(v8, v19);
  uint64_t v21 = v8 - v19;
  if (v20)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  while (1)
  {
    while (1)
    {
      v176 = v16;
      uint64_t v11 = *v6;
      if (v8 != v9)
      {
        if (v11) {
          uint64_t v44 = v10[10];
        }
        else {
          uint64_t v44 = 0;
        }
        unint64_t v45 = v176;
        goto LABEL_108;
      }
      if (!v11)
      {
        if (v8 > 0) {
          goto LABEL_378;
        }
        uint64_t v9 = 0;
        goto LABEL_106;
      }
      uint64_t v38 = v10[10];
      if (v38 < v8) {
        goto LABEL_367;
      }
      uint64_t v39 = v10[9];
      uint64_t v40 = v10[11];
      uint64_t v22 = *(unsigned __int8 *)(v11 + 18);
      BOOL v41 = !*(_WORD *)(v11 + 16) || v38 <= v8;
      uint64_t v178 = v39;
      uint64_t v171 = v40;
      if (v41) {
        break;
      }
      if (!*(unsigned char *)(v11 + 18))
      {
        unint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v22 = 0;
        uint64_t v9 = v8;
        uint64_t v43 = v11;
LABEL_91:
        uint64_t v51 = *(unsigned __int16 *)(v43 + 16);
        if (*(_WORD *)(v43 + 16))
        {
          uint64_t v52 = *(void *)(v43 + 24);
          BOOL v20 = __OFSUB__(v9, v52);
          uint64_t v53 = v9 - v52;
          if (v20) {
            goto LABEL_382;
          }
          if (__OFADD__(v53, 1)) {
            goto LABEL_383;
          }
          if (v53 + 1 <= 0)
          {
            uint64_t v51 = 0;
          }
          else
          {
            if (v51 == 1)
            {
              uint64_t v9 = v53;
              goto LABEL_103;
            }
            uint64_t v54 = (uint64_t *)(v43 + 48);
            uint64_t v55 = 1;
            while (1)
            {
              uint64_t v56 = *v54;
              v54 += 3;
              uint64_t v9 = v53 - v56;
              if (__OFSUB__(v53, v56)) {
                goto LABEL_362;
              }
              if (__OFADD__(v9, 1)) {
                goto LABEL_363;
              }
              if (v9 + 1 < 1) {
                break;
              }
              ++v55;
              uint64_t v53 = v9;
              if (v51 == v55) {
                goto LABEL_103;
              }
            }
            uint64_t v51 = v55;
            uint64_t v9 = v53;
          }
LABEL_104:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v42 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v51 << 8);
          goto LABEL_105;
        }
LABEL_103:
        if (v9) {
          goto LABEL_380;
        }
        goto LABEL_104;
      }
      unint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t v9 = v8;
      uint64_t v5 = v11;
LABEL_77:
      uint64_t v33 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16)) {
        goto LABEL_75;
      }
      uint64_t v47 = *(void *)(v5 + 40);
      BOOL v20 = __OFSUB__(v9, v47);
      uint64_t v35 = v9 - v47;
      if (v20) {
        goto LABEL_337;
      }
      if (__OFADD__(v35, 1)) {
        goto LABEL_338;
      }
      if (v35 + 1 <= 0)
      {
        uint64_t v33 = 0;
        goto LABEL_76;
      }
      if (v33 == 1)
      {
        uint64_t v9 = v35;
LABEL_75:
        if (!v9) {
          goto LABEL_76;
        }
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        __break(1u);
LABEL_339:
        __break(1u);
LABEL_340:
        __break(1u);
        goto LABEL_341;
      }
      uint64_t v48 = (uint64_t *)(v5 + 64);
      uint64_t v49 = 1;
      while (1)
      {
        uint64_t v50 = *v48;
        v48 += 3;
        uint64_t v9 = v35 - v50;
        if (__OFSUB__(v35, v50)) {
          break;
        }
        if (__OFADD__(v9, 1)) {
          goto LABEL_331;
        }
        if (v9 + 1 < 1)
        {
          uint64_t v33 = v49;
          uint64_t v9 = v35;
LABEL_76:
          char v46 = (4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C;
          uint64_t v22 = ((-15 << v46) - 1) & v22 | (v33 << v46);
          uint64_t v43 = *(void *)(v5 + 24 + 24 * v33);
          swift_unknownObjectRetain();
          unint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v5 = v43;
          if (!*(unsigned char *)(v43 + 18)) {
            goto LABEL_91;
          }
          goto LABEL_77;
        }
        ++v49;
        uint64_t v35 = v9;
        if (v33 == v49) {
          goto LABEL_75;
        }
      }
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      uint64_t v15 = v11;
      uint64_t v31 = v35;
      uint64_t v19 = v33;
LABEL_50:
      swift_unknownObjectRelease();
      unint64_t result = (void *)swift_unknownObjectRelease();
      unint64_t v17 = v22 & 0xFFFFFFFFFFFFF0FFLL;
      unint64_t v16 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v31 << 8);
      uint64_t v8 = a2;
      long long v10 = v180;
      if (v5) {
        goto LABEL_13;
      }
LABEL_51:
      v174 = 0;
      BOOL v20 = __OFSUB__(v8, v19);
      uint64_t v21 = v8 - v19;
      if (v20) {
        goto LABEL_53;
      }
    }
    unint64_t v42 = ((-15 << ((4 * v22 + 8) & 0x3C)) - 1) & v22 | ((unint64_t)*(unsigned __int16 *)(v11 + 16) << ((4 * v22 + 8) & 0x3C));
    swift_unknownObjectRetain();
    uint64_t v9 = 0;
    uint64_t v43 = 0;
LABEL_105:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v171, v42, v43, v11, v178);
    unint64_t result = (void *)swift_unknownObjectRelease_n();
    uint64_t v8 = a2;
    long long v10 = v180;
LABEL_106:
    BOOL v20 = __OFSUB__(v8, v9);
    uint64_t v44 = v8 - v9;
    unint64_t v45 = v176;
    if (v20) {
      goto LABEL_356;
    }
    uint64_t v9 = a3;
LABEL_108:
    if (v21 >= v44) {
      return result;
    }
    if (v12 != v10[11]) {
      goto LABEL_346;
    }
    if (v18)
    {
      uint64_t v57 = &v18[3 * ((v45 >> ((4 * *((unsigned char *)v18 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v59 = v57[4];
      uint64_t v58 = v57[5];
      unint64_t v60 = v57[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
    else
    {
      uint64_t v61 = v10[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v45, v61);
      uint64_t v59 = v62;
      uint64_t v58 = v63;
      unint64_t result = (void *)swift_unknownObjectRelease();
      if (v12 != v10[11]) {
        goto LABEL_366;
      }
      uint64_t v64 = v10[8];
      swift_unknownObjectRetain();
      unint64_t v60 = specialized Rope._Node.subscript.getter(v176, v64);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    unint64_t result = (void *)swift_bridgeObjectRelease();
    uint64_t v65 = v21 + v60;
    if (__OFADD__(v21, v60)) {
      goto LABEL_347;
    }
    *(void *)&uint64_t v190 = v59;
    *((void *)&v190 + 1) = v58;
    uint64_t v66 = v21 >= v9 ? v9 : v21;
    uint64_t v67 = v21 >= a2 ? v66 : a2;
    unint64_t v68 = v65 <= a2 ? a2 : v21 + v60;
    uint64_t v69 = v65 <= v9 ? v68 : v9;
    if (v67 == v69) {
      break;
    }
    if (v67 != v21 || v69 != v65)
    {
      long long v189 = 0;
      long long v187 = 0u;
      long long v188 = 0u;
      unint64_t v185 = 0u;
      long long v186 = 0u;
      swift_bridgeObjectRetain();
      specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v185, a4, a5);
      unint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v84 = v180;
      if (__OFSUB__(v69, v67)) {
        goto LABEL_358;
      }
      uint64_t v85 = *((void *)&v190 + 1);
      uint64_t v5 = v190;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v67, v69, v69 - v67, v5, v85);
      swift_bridgeObjectRelease();
      unint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v11 = v180[8];
      uint64_t v12 = v180[10];
      if (v11) {
        uint64_t v86 = v180[10];
      }
      else {
        uint64_t v86 = 0;
      }
      if (v21 < 0 || v86 < v21) {
        goto LABEL_360;
      }
      uint64_t v18 = (void *)v180[9];
      unint64_t v177 = (uint64_t)v18;
      uint64_t v179 = v180[11];
      if (!v11 || !*(_WORD *)(v11 + 16) || v21 >= v12)
      {
        uint64_t v92 = v6;
        uint64_t v93 = swift_unknownObjectRetain_n();
        unint64_t v94 = specialized Rope._endPath.getter(v93);
        swift_unknownObjectRelease();
        uint64_t v18 = 0;
        uint64_t v9 = 0;
        if (!v11)
        {
          swift_bridgeObjectRelease();
          unint64_t result = (void *)swift_bridgeObjectRelease();
          unint64_t v80 = 0;
LABEL_231:
          uint64_t v9 = a3;
          unint64_t v95 = v94;
          uint64_t v6 = v92;
          goto LABEL_232;
        }
LABEL_168:
        swift_unknownObjectRetain();
        unint64_t v80 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v179, v94, (uint64_t)v18, v11, v177);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_unknownObjectRelease_n();
        BOOL v20 = __OFSUB__(v21, v9);
        v21 -= v9;
        if (v20) {
          goto LABEL_361;
        }
        goto LABEL_231;
      }
      uint64_t v22 = *(unsigned __int8 *)(v11 + 18);
      if (*(unsigned char *)(v11 + 18))
      {
        unint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v9 = v21;
        uint64_t v6 = (uint64_t *)v11;
        while (1)
        {
          uint64_t v33 = *((unsigned __int16 *)v6 + 8);
          if (!*((_WORD *)v6 + 8)) {
            goto LABEL_152;
          }
          char v88 = v6[5];
          BOOL v20 = __OFSUB__(v9, v88);
          uint64_t v35 = v9 - v88;
          if (v20) {
            goto LABEL_339;
          }
          if (__OFADD__(v35, 1)) {
            goto LABEL_340;
          }
          if (v35 + 1 <= 0)
          {
            uint64_t v33 = 0;
          }
          else
          {
            if (v33 == 1)
            {
              uint64_t v9 = v35;
LABEL_152:
              if (v9) {
                goto LABEL_336;
              }
              goto LABEL_153;
            }
            uint64_t v89 = v6 + 8;
            long long v90 = 1;
            while (1)
            {
              uint64_t v91 = *v89;
              v89 += 3;
              uint64_t v9 = v35 - v91;
              if (__OFSUB__(v35, v91)) {
                goto LABEL_332;
              }
              if (__OFADD__(v9, 1)) {
                goto LABEL_333;
              }
              if (v9 + 1 < 1) {
                break;
              }
              ++v90;
              uint64_t v35 = v9;
              if (v33 == v90) {
                goto LABEL_152;
              }
            }
            uint64_t v33 = v90;
            uint64_t v9 = v35;
          }
LABEL_153:
          uint64_t v87 = (4 * *((unsigned char *)v6 + 18) + 8) & 0x3C;
          uint64_t v22 = ((-15 << v87) - 1) & v22 | (v33 << v87);
          uint64_t v18 = (void *)v6[3 * v33 + 3];
          swift_unknownObjectRetain();
          unint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v6 = v18;
          if (!*((unsigned char *)v18 + 18)) {
            goto LABEL_211;
          }
        }
      }
      unint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t v9 = v21;
      uint64_t v18 = (void *)v11;
LABEL_211:
      uint64_t v127 = *((unsigned __int16 *)v18 + 8);
      if (!*((_WORD *)v18 + 8)) {
        goto LABEL_228;
      }
      uint64_t v128 = v18[3];
      BOOL v20 = __OFSUB__(v9, v128);
      uint64_t v129 = v9 - v128;
      if (v20) {
        goto LABEL_386;
      }
      if (__OFADD__(v129, 1)) {
        goto LABEL_387;
      }
      if (v129 + 1 <= 0)
      {
        uint64_t v127 = 0;
      }
      else
      {
        if (v127 == 1)
        {
          uint64_t v9 = v129;
LABEL_228:
          if (v9) {
            goto LABEL_381;
          }
          goto LABEL_229;
        }
        unint64_t v133 = v18 + 6;
        v134 = 1;
        while (1)
        {
          uint64_t v135 = *v133;
          v133 += 3;
          uint64_t v9 = v129 - v135;
          if (__OFSUB__(v129, v135)) {
            goto LABEL_364;
          }
          if (__OFADD__(v9, 1)) {
            goto LABEL_365;
          }
          if (v9 + 1 < 1) {
            break;
          }
          ++v134;
          uint64_t v129 = v9;
          if (v127 == v134) {
            goto LABEL_228;
          }
        }
        uint64_t v127 = v134;
        uint64_t v9 = v129;
      }
LABEL_229:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v94 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
      uint64_t v84 = v180;
      uint64_t v92 = v169;
      goto LABEL_168;
    }
    if (v12 != v180[11]) {
      goto LABEL_357;
    }
    if (!*v6) {
      goto LABEL_411;
    }
    specialized Rope._Node._prepareModify(at:)(v176, (uint64_t)&v191);
    v202[0] = v192;
    unint64_t v185 = v191;
    long long v186 = v192;
    long long v187 = v193;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)v202);
    unint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v202 + 8);
    long long v186 = MEMORY[0x1E4FBC868];
    v180[11] = v12 + 1;
    if (!v180[8]) {
      goto LABEL_412;
    }
    specialized Rope._Node._finalizeModify(_:)(&v182, &v185);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v189 = 0;
    long long v187 = 0u;
    long long v188 = 0u;
    unint64_t v185 = 0u;
    long long v186 = 0u;
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v185, a4, a5);
    unint64_t result = (void *)swift_bridgeObjectRelease();
    if (v12 + 1 != v180[11]) {
      goto LABEL_359;
    }
    if (!*v6) {
      goto LABEL_413;
    }
    specialized Rope._Node._prepareModify(at:)(v176, (uint64_t)&v194);
    v200 = v195;
    uint64_t v201 = v196;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v200);
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v201);
    unint64_t v185 = v194;
    long long v187 = v197;
    uint64_t v70 = *((void *)&v190 + 1);
    unint64_t result = (void *)v190;
    long long v186 = v190;
    uint64_t v71 = v12 + 2;
    v180[11] = v12 + 2;
    if (!v180[8]) {
      goto LABEL_414;
    }
    uint64_t v172 = (uint64_t)result;
    swift_bridgeObjectRetain_n();
    v170 = v70;
    swift_bridgeObjectRetain_n();
    uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v181, &v185);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v73 = v180[8];
    unint64_t v72 = v180[9];
    uint64_t v74 = v180[10];
    uint64_t v75 = v180[11];
    uint64_t v179 = v71;
    *(void *)&unint64_t v185 = v71;
    *((void *)&v185 + 1) = v176;
    *(void *)&long long v186 = v18;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v185, v73, v72, v74, v75);
    swift_unknownObjectRelease();
    uint64_t v76 = v185;
    long long v77 = v186;
    uint64_t v78 = swift_unknownObjectRetain();
    unint64_t v79 = specialized Rope._endPath.getter(v78);
    unint64_t result = (void *)swift_unknownObjectRelease();
    if (*((void *)&v76 + 1) >= v79)
    {
      uint64_t v9 = a3;
      unint64_t v80 = v174;
      uint64_t v6 = v169;
      unint64_t v95 = v176;
    }
    else
    {
      unint64_t v80 = v174;
      if ((void)v76 != v180[11]) {
        goto LABEL_371;
      }
      if (v77)
      {
        uint64_t v81 = v77 + 24 * ((*((void *)&v76 + 1) >> ((4 * *(unsigned char *)(v77 + 18) + 8) & 0x3C)) & 0xFLL);
        uint64_t v82 = *(void *)(v81 + 32);
        uint64_t v83 = *(void *)(v81 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v96 = v180[8];
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(*((unint64_t *)&v76 + 1), v96);
        uint64_t v82 = v97;
        uint64_t v83 = v98;
        swift_unknownObjectRelease();
      }
      uint64_t v9 = a3;
      uint64_t v6 = v169;
      unint64_t v95 = v176;
      if ((specialized static Dictionary<>.== infix(_:_:)(v82, v172) & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_184:
        unint64_t result = (void *)swift_bridgeObjectRelease();
        goto LABEL_185;
      }
      uint64_t v99 = specialized static Set.== infix(_:_:)(v83, v170);
      swift_bridgeObjectRelease();
      unint64_t result = (void *)swift_bridgeObjectRelease();
      if (v99)
      {
        unint64_t v95 = specialized Rope._remove(at:)((uint64_t)&v185, v179, v176);
        char v100 = v180;
        uint64_t v101 = v180[8];
        unint64_t v102 = v180[11];
        if (v95 < specialized Rope._endPath.getter(v101) && *(unsigned char *)(v101 + 18))
        {
          uint64_t v103 = (v95 >> ((4 * *(unsigned char *)(v101 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          char v100 = v180;
          specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v101 + 24, v103, v95);
          swift_unknownObjectRelease();
        }
        uint64_t v104 = v185;
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_bridgeObjectRelease();
        if (v102 != v100[11]) {
          goto LABEL_392;
        }
        if (!*v169) {
          goto LABEL_415;
        }
        unint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v95, (uint64_t)v198);
        unint64_t v185 = v198[0];
        long long v186 = v198[1];
        long long v187 = v198[2];
        if (__OFADD__(*((void *)&v198[0] + 1), v104)) {
          goto LABEL_393;
        }
        *((void *)&v185 + 1) = *((void *)&v198[0] + 1) + v104;
        uint64_t v179 = v102 + 1;
        v100[11] = v102 + 1;
        if (!v100[8]) {
          goto LABEL_416;
        }
        uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v181, &v185);
        swift_bridgeObjectRelease();
        goto LABEL_184;
      }
    }
LABEL_185:
    uint64_t v105 = *v6;
    if (*v6) {
      uint64_t v105 = *(unsigned __int8 *)(v105 + 18);
    }
    uint64_t v84 = v180;
    if (v95 <= v105)
    {
      swift_bridgeObjectRelease_n();
      unint64_t result = (void *)swift_bridgeObjectRelease_n();
      goto LABEL_232;
    }
    unint64_t v106 = v180[8];
    uint64_t v107 = v180[11];
    *(void *)&unint64_t v185 = v179;
    *((void *)&v185 + 1) = v95;
    *(void *)&long long v186 = v18;
    if (v179 != v107) {
      goto LABEL_372;
    }
    if (v106)
    {
      uint64_t v108 = *(unsigned __int8 *)(v106 + 18);
      unint64_t result = (void *)swift_unknownObjectRetain();
      if (v95 <= v108) {
        goto LABEL_373;
      }
    }
    else if (!v95)
    {
      goto LABEL_373;
    }
    unint64_t v109 = (4 * *((unsigned char *)v18 + 18) + 8) & 0x3C;
    if (((v95 >> v109) & 0xF) != 0)
    {
      char v110 = ((((v95 >> v109) & 0xF) - 1) << v109) | ((-15 << v109) - 1) & v95;
      unint64_t result = (void *)swift_unknownObjectRelease();
      unint64_t v111 = v18;
      uint64_t v112 = v179;
    }
    else
    {
      swift_unknownObjectRetain();
      uint64_t v113 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v185, v106);
      unint64_t result = (void *)swift_unknownObjectRelease_n();
      if ((v113 & 1) == 0) {
        goto LABEL_384;
      }
      char v110 = *((void *)&v185 + 1);
      uint64_t v112 = v185;
      unint64_t v111 = (void *)v186;
    }
    uint64_t v6 = v169;
    if (v112 != v180[11]) {
      goto LABEL_374;
    }
    if (v111)
    {
      char v114 = &v111[3 * ((v110 >> ((4 * *((unsigned char *)v111 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v115 = v114[4];
      uint64_t v116 = v114[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v117 = v180[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v110, v117);
      uint64_t v115 = v118;
      uint64_t v116 = v119;
      swift_unknownObjectRelease();
    }
    if ((specialized static Dictionary<>.== infix(_:_:)(v115, v172) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v84 = v180;
LABEL_209:
      swift_bridgeObjectRelease();
      unint64_t result = (void *)swift_bridgeObjectRelease();
      goto LABEL_232;
    }
    uint64_t v120 = specialized static Set.== infix(_:_:)(v116, v170);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v120 & 1) == 0)
    {
      uint64_t v84 = v180;
      uint64_t v6 = v169;
      goto LABEL_209;
    }
    char v121 = specialized Rope._remove(at:)((uint64_t)&v185, v179, v95);
    unint64_t v122 = v180;
    uint64_t v123 = v180[8];
    unint64_t v124 = v180[11];
    if (v121 >= specialized Rope._endPath.getter(v123))
    {
      uint64_t v123 = 0;
    }
    else if (*(unsigned char *)(v123 + 18))
    {
      uint64_t v125 = (v121 >> ((4 * *(unsigned char *)(v123 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      unint64_t v122 = v180;
      uint64_t v126 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v123 + 24, v125, v121);
      swift_unknownObjectRelease();
      uint64_t v123 = v126;
    }
    v182 = v124;
    uint64_t v183 = v121;
    unint64_t v184 = v123;
    uint64_t v130 = v185;
    swift_bridgeObjectRelease();
    unint64_t result = (void *)swift_bridgeObjectRelease();
    if (v124 != v122[11]) {
      goto LABEL_394;
    }
    uint64_t v131 = v122[8];
    if (v131)
    {
      uint64_t v132 = *(unsigned __int8 *)(v131 + 18);
      unint64_t result = (void *)swift_unknownObjectRetain();
      if (v121 <= v132) {
        goto LABEL_395;
      }
    }
    else if (!v121)
    {
      goto LABEL_395;
    }
    if (v123 && (uint64_t v163 = (4 * *(unsigned char *)(v123 + 18) + 8) & 0x3C, ((v121 >> v163) & 0xF) != 0))
    {
      uint64_t v183 = ((((v121 >> v163) & 0xF) - 1) << v163) | ((-15 << v163) - 1) & v121;
      unint64_t result = (void *)swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
      char v164 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v182, v131);
      unint64_t result = (void *)swift_unknownObjectRelease_n();
      if ((v164 & 1) == 0) {
        goto LABEL_405;
      }
      unint64_t v124 = v182;
    }
    uint64_t v84 = v180;
    uint64_t v6 = v169;
    if (v124 != v180[11]) {
      goto LABEL_396;
    }
    if (!*v169) {
      goto LABEL_417;
    }
    unint64_t v95 = v183;
    unint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v183, (uint64_t)v199);
    unint64_t v185 = v199[0];
    long long v186 = v199[1];
    long long v187 = v199[2];
    BOOL v20 = __OFSUB__(v21, *((void *)&v199[0] + 1));
    v21 -= *((void *)&v199[0] + 1);
    if (v20) {
      goto LABEL_398;
    }
    if (__OFADD__(*((void *)&v199[0] + 1), v130)) {
      goto LABEL_400;
    }
    *((void *)&v185 + 1) = *((void *)&v199[0] + 1) + v130;
    uint64_t v179 = v124 + 1;
    v180[11] = v124 + 1;
    if (!v180[8]) {
      goto LABEL_418;
    }
    uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v181, &v185);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v80 = v174 - 1;
    if (__OFSUB__(v174, 1)) {
      goto LABEL_401;
    }
LABEL_232:
    uint64_t v136 = v84[8];
    uint64_t v137 = v84[11];
    *(void *)&unint64_t v185 = v179;
    *((void *)&v185 + 1) = v95;
    *(void *)&long long v186 = v18;
    BOOL v20 = __OFADD__(v80, 1);
    uint64_t v138 = v80 + 1;
    if (v20) {
      goto LABEL_349;
    }
    if (v179 != v137) {
      goto LABEL_350;
    }
    if (v18)
    {
      uint64_t v139 = v18[3 * ((v95 >> ((4 * *((unsigned char *)v18 + 18) + 8) & 0x3C)) & 0xF) + 3];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      uint64_t v139 = specialized Rope._Node.subscript.getter(v95, v136);
    }
    swift_bridgeObjectRelease();
    unint64_t result = (void *)swift_bridgeObjectRelease();
    BOOL v20 = __OFADD__(v21, v139);
    v21 += v139;
    if (v20) {
      goto LABEL_351;
    }
    if (v136)
    {
      unint64_t v140 = ((-15 << ((4 * *(unsigned char *)(v136 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v136 + 18) | ((unint64_t)*(unsigned __int16 *)(v136 + 16) << ((4 * *(unsigned char *)(v136 + 18) + 8) & 0x3C));
      unint64_t result = (void *)swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v140 = 0;
    }
    uint64_t v8 = a2;
    long long v10 = v180;
    if (v95 >= v140) {
      goto LABEL_352;
    }
    v174 = v138;
    if (v18
      && (unint64_t v141 = (4 * *((unsigned char *)v18 + 18) + 8) & 0x3C,
          char v142 = ((v95 >> v141) & 0xF) + 1,
          v142 < *((unsigned __int16 *)v18 + 8)))
    {
      unint64_t v16 = (v142 << v141) | ((-15 << v141) - 1) & v95;
      unint64_t result = (void *)swift_unknownObjectRelease_n();
    }
    else
    {
      unint64_t v143 = *(unsigned __int8 *)(v136 + 18);
      int v144 = (4 * v143 + 8) & 0x3C;
      v182 = (v95 >> v144) & 0xF;
      if (v143)
      {
        swift_unknownObjectRetain();
        char v145 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v136 + 24, &v182, (uint64_t)&v185, v136, v143);
        unint64_t result = (void *)swift_unknownObjectRelease();
        if ((v145 & 1) == 0) {
          goto LABEL_250;
        }
        unint64_t result = (void *)swift_unknownObjectRelease_n();
        unint64_t v16 = *((void *)&v185 + 1);
      }
      else
      {
        char v146 = ((v95 >> v144) & 0xF) + 1;
        if (v146 >= *(unsigned __int16 *)(v136 + 16))
        {
LABEL_250:
          if (v136)
          {
            unint64_t v147 = *(unsigned __int8 *)(v136 + 18);
            int v148 = *(unsigned __int16 *)(v136 + 16);
            unint64_t result = (void *)swift_unknownObjectRelease_n();
            unint64_t v16 = ((-15 << ((4 * v147 + 8) & 0x3C)) - 1) & v147 | (unint64_t)(v148 << ((4 * v147 + 8) & 0x3C));
          }
          else
          {
            unint64_t v16 = 0;
          }
          *(void *)&unint64_t v185 = v179;
          *((void *)&v185 + 1) = v16;
          *(void *)&long long v186 = 0;
          goto LABEL_254;
        }
        unint64_t v16 = (v146 << v144) | ((-15 << v144) - 1) & v95;
        *((void *)&v185 + 1) = v16;
        unint64_t result = (void *)swift_unknownObjectRelease_n();
        *(void *)&long long v186 = v136;
      }
    }
LABEL_254:
    uint64_t v12 = v185;
    uint64_t v18 = (void *)v186;
    if (v21 >= v9)
    {
      uint64_t v5 = *v6;
      if (a2 == v9)
      {
        uint64_t v12 = v180[11];
        if (v5)
        {
          uint64_t v149 = v180[10];
          if (v149 < a2) {
            goto LABEL_379;
          }
          long long v10 = (void *)v180[9];
          unint64_t v17 = *(unsigned __int16 *)(v5 + 16);
          unint64_t v16 = *(unsigned __int8 *)(v5 + 18);
          if (*(_WORD *)(v5 + 16) && v149 > a2)
          {
            if (*(unsigned char *)(v5 + 18))
            {
              unint64_t result = (void *)swift_unknownObjectRetain_n();
              uint64_t v37 = a2;
              uint64_t v150 = (void *)v5;
              while (1)
              {
                char v152 = *((unsigned __int16 *)v150 + 8);
                if (!*((_WORD *)v150 + 8)) {
                  goto LABEL_263;
                }
                uint64_t v153 = v150[5];
                uint64_t v154 = v37 - v153;
                if (__OFSUB__(v37, v153)) {
                  goto LABEL_354;
                }
                if (__OFADD__(v154, 1)) {
                  goto LABEL_355;
                }
                if (v154 + 1 <= 0)
                {
                  char v152 = 0;
                }
                else
                {
                  if (v152 == 1)
                  {
                    v37 -= v153;
LABEL_263:
                    if (v37) {
                      goto LABEL_353;
                    }
                    goto LABEL_264;
                  }
                  uint64_t v155 = v150[8];
                  BOOL v20 = __OFSUB__(v154, v155);
                  uint64_t v156 = v154 - v155;
                  if (v20) {
                    goto LABEL_368;
                  }
                  if (__OFADD__(v156, 1)) {
                    goto LABEL_369;
                  }
                  if (v156 + 1 >= 1)
                  {
                    if (v152 != 2)
                    {
                      uint64_t v157 = v150 + 11;
                      v158 = 2;
                      while (v152 != v158)
                      {
                        uint64_t v37 = v156 - *v157;
                        if (__OFSUB__(v156, *v157)) {
                          goto LABEL_342;
                        }
                        if (__OFADD__(v37, 1)) {
                          goto LABEL_343;
                        }
                        if (v37 + 1 < 1)
                        {
                          char v152 = v158;
                          uint64_t v37 = v156;
                          goto LABEL_264;
                        }
                        ++v158;
                        v157 += 3;
                        uint64_t v156 = v37;
                        if (v152 == v158) {
                          goto LABEL_263;
                        }
                      }
LABEL_341:
                      __break(1u);
LABEL_342:
                      __break(1u);
LABEL_343:
                      __break(1u);
LABEL_344:
                      __break(1u);
                      goto LABEL_345;
                    }
                    uint64_t v37 = v156;
                    goto LABEL_263;
                  }
                  char v152 = 1;
                  uint64_t v37 = v154;
                }
LABEL_264:
                v151 = (4 * *((unsigned char *)v150 + 18) + 8) & 0x3C;
                unint64_t v16 = ((-15 << v151) - 1) & v16 | (v152 << v151);
                uint64_t v18 = (void *)v150[3 * v152 + 3];
                swift_unknownObjectRetain();
                unint64_t result = (void *)swift_unknownObjectRelease();
                uint64_t v150 = v18;
                if (!*((unsigned char *)v18 + 18)) {
                  goto LABEL_290;
                }
              }
            }
            unint64_t result = (void *)swift_unknownObjectRetain_n();
            unint64_t v16 = 0;
            uint64_t v37 = a2;
            uint64_t v18 = (void *)v5;
LABEL_290:
            uint64_t v159 = *((unsigned __int16 *)v18 + 8);
            if (!*((_WORD *)v18 + 8)) {
              goto LABEL_299;
            }
            uint64_t v160 = v18[3];
            BOOL v20 = __OFSUB__(v37, v160);
            uint64_t v161 = v37 - v160;
            if (v20) {
              goto LABEL_403;
            }
            if (__OFADD__(v161, 1)) {
              goto LABEL_404;
            }
            if (v161 + 1 <= 0)
            {
              uint64_t v159 = 0;
            }
            else
            {
              if (v159 == 1)
              {
LABEL_300:
                if (v161) {
                  goto LABEL_402;
                }
                uint64_t v37 = 0;
                goto LABEL_328;
              }
              uint64_t v162 = v18[6];
              uint64_t v37 = v161 - v162;
              if (__OFSUB__(v161, v162)) {
                goto LABEL_406;
              }
              if (__OFADD__(v37, 1)) {
                goto LABEL_407;
              }
              if (v37 + 1 >= 1)
              {
                if (v159 != 2)
                {
                  char v165 = v18 + 9;
                  v166 = 2;
                  while (v159 != v166)
                  {
                    uint64_t v161 = v37 - *v165;
                    if (__OFSUB__(v37, *v165)) {
                      goto LABEL_389;
                    }
                    if (__OFADD__(v161, 1)) {
                      goto LABEL_390;
                    }
                    if (v161 + 1 < 1)
                    {
                      uint64_t v159 = v166;
                      goto LABEL_328;
                    }
                    ++v166;
                    v165 += 3;
                    uint64_t v37 = v161;
                    if (v159 == v166) {
                      goto LABEL_300;
                    }
                  }
                  goto LABEL_388;
                }
LABEL_299:
                uint64_t v161 = v37;
                goto LABEL_300;
              }
              uint64_t v159 = 1;
              uint64_t v37 = v161;
            }
LABEL_328:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v16 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v159 << 8);
            uint64_t v8 = a2;
            goto LABEL_55;
          }
LABEL_54:
          unint64_t v16 = ((-15 << ((4 * v16 + 8) & 0x3C)) - 1) & v16 | (v17 << ((4 * v16 + 8) & 0x3C));
          swift_unknownObjectRetain();
          uint64_t v37 = 0;
          uint64_t v18 = 0;
LABEL_55:
          swift_unknownObjectRetain();
          v174 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, (uint64_t)v10);
          unint64_t result = (void *)swift_unknownObjectRelease_n();
          long long v10 = v180;
          goto LABEL_56;
        }
        if (a2 > 0) {
          goto LABEL_385;
        }
        uint64_t v37 = 0;
        uint64_t v18 = 0;
        unint64_t v16 = 0;
        v174 = 0;
LABEL_56:
        BOOL v20 = __OFSUB__(v8, v37);
        uint64_t v21 = v8 - v37;
        uint64_t v9 = a3;
        if (v20) {
          goto LABEL_375;
        }
      }
      else
      {
        uint64_t v21 = 0;
        v174 = 0;
        uint64_t v18 = 0;
        unint64_t v16 = 0;
        uint64_t v12 = v180[11];
        if (v5)
        {
          uint64_t v18 = 0;
          uint64_t v21 = v180[10];
          v174 = v180[9];
          unint64_t v16 = ((-15 << ((4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v5 + 18) | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C));
        }
      }
    }
  }
LABEL_348:
  __break(1u);
LABEL_349:
  __break(1u);
LABEL_350:
  __break(1u);
LABEL_351:
  __break(1u);
LABEL_352:
  __break(1u);
LABEL_353:
  __break(1u);
LABEL_354:
  __break(1u);
LABEL_355:
  __break(1u);
LABEL_356:
  __break(1u);
LABEL_357:
  __break(1u);
LABEL_358:
  __break(1u);
LABEL_359:
  __break(1u);
LABEL_360:
  __break(1u);
LABEL_361:
  __break(1u);
LABEL_362:
  __break(1u);
LABEL_363:
  __break(1u);
LABEL_364:
  __break(1u);
LABEL_365:
  __break(1u);
LABEL_366:
  __break(1u);
LABEL_367:
  __break(1u);
LABEL_368:
  __break(1u);
LABEL_369:
  __break(1u);
LABEL_370:
  __break(1u);
LABEL_371:
  __break(1u);
LABEL_372:
  __break(1u);
LABEL_373:
  __break(1u);
LABEL_374:
  __break(1u);
LABEL_375:
  __break(1u);
LABEL_376:
  __break(1u);
LABEL_377:
  __break(1u);
LABEL_378:
  __break(1u);
LABEL_379:
  __break(1u);
LABEL_380:
  __break(1u);
LABEL_381:
  __break(1u);
LABEL_382:
  __break(1u);
LABEL_383:
  __break(1u);
LABEL_384:
  __break(1u);
LABEL_385:
  __break(1u);
LABEL_386:
  __break(1u);
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  __break(1u);
LABEL_393:
  __break(1u);
LABEL_394:
  __break(1u);
LABEL_395:
  __break(1u);
LABEL_396:
  __break(1u);
LABEL_397:
  __break(1u);
LABEL_398:
  __break(1u);
LABEL_399:
  __break(1u);
LABEL_400:
  __break(1u);
LABEL_401:
  __break(1u);
LABEL_402:
  __break(1u);
LABEL_403:
  __break(1u);
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
  return result;
}

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)(void *result, uint64_t a2, void *a3, void *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v6 = result[8];
  if (v6) {
    uint64_t v7 = result[10];
  }
  else {
    uint64_t v7 = 0;
  }
  if (a2 < 0 || (uint64_t v8 = a2, v7 < a2))
  {
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
    goto LABEL_408;
  }
  uint64_t v9 = a3;
  long long v10 = (void *)result[9];
  v176 = result + 8;
  uint64_t v11 = result[11];
  uint64_t v180 = result;
  if (!v6 || (*(_WORD *)(v6 + 16) ? (BOOL v12 = result[10] <= a2) : (BOOL v12 = 1), v12))
  {
    unint64_t v13 = swift_unknownObjectRetain_n();
    unint64_t v14 = specialized Rope._endPath.getter(v13);
    unint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    if (!v6) {
      goto LABEL_48;
    }
    goto LABEL_13;
  }
  uint64_t v17 = result[11];
  uint64_t v11 = *(unsigned __int8 *)(v6 + 18);
  if (*(unsigned char *)(v6 + 18))
  {
    unint64_t result = (void *)swift_unknownObjectRetain_n();
    uint64_t v16 = v8;
    uint64_t v18 = v6;
    while (1)
    {
      uint64_t v20 = *(unsigned __int16 *)(v18 + 16);
      if (!*(_WORD *)(v18 + 16)) {
        break;
      }
      uint64_t v21 = *(void *)(v18 + 40);
      BOOL v22 = __OFSUB__(v16, v21);
      uint64_t v23 = v16 - v21;
      if (v22) {
        goto LABEL_375;
      }
      if (__OFADD__(v23, 1)) {
        goto LABEL_376;
      }
      if (v23 + 1 <= 0)
      {
        uint64_t v20 = 0;
        goto LABEL_18;
      }
      if (v20 == 1)
      {
        uint64_t v16 = v23;
        break;
      }
      char v24 = (uint64_t *)(v18 + 64);
      uint64_t v25 = 1;
      while (1)
      {
        uint64_t v26 = *v24;
        v24 += 3;
        uint64_t v16 = v23 - v26;
        if (__OFSUB__(v23, v26)) {
          goto LABEL_343;
        }
        if (__OFADD__(v16, 1))
        {
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
          goto LABEL_369;
        }
        if (v16 + 1 < 1) {
          break;
        }
        ++v25;
        uint64_t v23 = v16;
        if (v20 == v25) {
          goto LABEL_17;
        }
      }
      uint64_t v20 = v25;
      uint64_t v16 = v23;
LABEL_18:
      char v19 = (4 * *(unsigned char *)(v18 + 18) + 8) & 0x3C;
      uint64_t v11 = ((-15 << v19) - 1) & v11 | (v20 << v19);
      uint64_t v15 = *(void *)(v18 + 24 + 24 * v20);
      swift_unknownObjectRetain();
      unint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v18 = v15;
      if (!*(unsigned char *)(v15 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_17:
    if (!v16) {
      goto LABEL_18;
    }
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }
  unint64_t result = (void *)swift_unknownObjectRetain_n();
  uint64_t v16 = v8;
  uint64_t v15 = v6;
LABEL_33:
  uint64_t v27 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16))
  {
    uint64_t v9 = a3;
    uint64_t v8 = a2;
    goto LABEL_46;
  }
  uint64_t v28 = *(void *)(v15 + 24);
  BOOL v22 = __OFSUB__(v16, v28);
  uint64_t v29 = v16 - v28;
  uint64_t v9 = a3;
  uint64_t v8 = a2;
  if (v22)
  {
LABEL_409:
    __break(1u);
    goto LABEL_410;
  }
  if (!__OFADD__(v29, 1))
  {
    if (v29 + 1 <= 0)
    {
      uint64_t v27 = 0;
      goto LABEL_47;
    }
    if (v27 != 1)
    {
      uint64_t v30 = (uint64_t *)(v15 + 48);
      uint64_t v31 = 1;
      while (1)
      {
        uint64_t v32 = *v30;
        v30 += 3;
        uint64_t v16 = v29 - v32;
        if (__OFSUB__(v29, v32)) {
          goto LABEL_397;
        }
        if (__OFADD__(v16, 1)) {
          goto LABEL_399;
        }
        if (v16 + 1 < 1) {
          goto LABEL_333;
        }
        ++v31;
        uint64_t v29 = v16;
        if (v27 == v31) {
          goto LABEL_46;
        }
      }
    }
    uint64_t v16 = v29;
LABEL_46:
    if (v16)
    {
LABEL_408:
      __break(1u);
      goto LABEL_409;
    }
LABEL_47:
    while (2)
    {
      swift_unknownObjectRelease();
      unint64_t result = (void *)swift_unknownObjectRelease();
      unint64_t v14 = v11 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
      uint64_t v11 = v17;
      if (v6)
      {
LABEL_13:
        swift_unknownObjectRetain();
        uint64_t v177 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v15, v6, (uint64_t)v10);
        unint64_t result = (void *)swift_unknownObjectRelease_n();
      }
      else
      {
LABEL_48:
        uint64_t v177 = 0;
      }
      uint64_t v33 = v176;
      uint64_t v181 = v8 - v16;
      if (__OFSUB__(v8, v16)) {
        goto LABEL_391;
      }
      uint64_t v34 = v180;
      while (1)
      {
        long long v10 = (void *)*v33;
        uint64_t v178 = v11;
        if ((void *)v8 != v9)
        {
          if (v10) {
            uint64_t v41 = v34[10];
          }
          else {
            uint64_t v41 = 0;
          }
          goto LABEL_104;
        }
        if (!v10)
        {
          if (v8 > 0) {
            goto LABEL_377;
          }
          uint64_t v8 = 0;
          goto LABEL_102;
        }
        uint64_t v36 = v34[10];
        if (v36 < v8) {
          goto LABEL_366;
        }
        uint64_t v37 = v34[9];
        uint64_t v17 = v34[11];
        uint64_t v38 = *((unsigned __int8 *)v10 + 18);
        BOOL v39 = !*((_WORD *)v10 + 8) || v36 <= v8;
        uint64_t v173 = v37;
        if (!v39) {
          break;
        }
        unint64_t v40 = ((-15 << ((4 * v38 + 8) & 0x3C)) - 1) & v38 | ((unint64_t)*((unsigned __int16 *)v10 + 8) << ((4 * v38 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v8 = 0;
        uint64_t v11 = 0;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v17, v40, v11, (uint64_t)v10, v173);
        unint64_t result = (void *)swift_unknownObjectRelease_n();
        uint64_t v11 = v178;
        uint64_t v34 = v180;
LABEL_102:
        uint64_t v41 = a2 - v8;
        if (__OFSUB__(a2, v8)) {
          goto LABEL_355;
        }
        uint64_t v8 = a2;
LABEL_104:
        if (v181 >= v41) {
          return result;
        }
        if (v11 != v34[11]) {
          goto LABEL_345;
        }
        if (v15)
        {
          uint64_t v53 = (void *)(v15 + 24 * ((v14 >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xF));
          uint64_t v55 = v53[4];
          uint64_t v54 = v53[5];
          unint64_t v56 = v53[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }
        else
        {
          uint64_t v57 = v34[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v14, v57);
          uint64_t v55 = v58;
          uint64_t v54 = v59;
          unint64_t result = (void *)swift_unknownObjectRelease();
          if (v11 != v34[11]) {
            goto LABEL_365;
          }
          uint64_t v60 = v34[8];
          swift_unknownObjectRetain();
          unint64_t v56 = specialized Rope._Node.subscript.getter(v14, v60);
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t v61 = (void *)(v181 + v56);
        if (__OFADD__(v181, v56)) {
          goto LABEL_346;
        }
        *(void *)&long long v192 = v55;
        *((void *)&v192 + 1) = v54;
        if (v181 >= (uint64_t)v9) {
          uint64_t v62 = (uint64_t)v9;
        }
        else {
          uint64_t v62 = v181;
        }
        if (v181 >= v8) {
          uint64_t v63 = v62;
        }
        else {
          uint64_t v63 = v8;
        }
        if ((uint64_t)v61 <= v8) {
          uint64_t v64 = (void *)v8;
        }
        else {
          uint64_t v64 = (void *)(v181 + v56);
        }
        if ((uint64_t)v61 <= (uint64_t)v9) {
          long long v10 = v64;
        }
        else {
          long long v10 = v9;
        }
        if ((void *)v63 == v10) {
          goto LABEL_347;
        }
        if (v63 != v181 || v10 != v61)
        {
          uint64_t v81 = v180;
          if (*a4 != -1) {
            swift_once();
          }
          unint64_t v82 = *a5;
          unint64_t v83 = *a6;
          uint64_t v191 = 0;
          long long v189 = 0u;
          long long v190 = 0u;
          long long v187 = 0u;
          long long v188 = 0u;
          swift_bridgeObjectRetain();
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v187, v82, v83);
          unint64_t result = (void *)swift_bridgeObjectRelease();
          if (__OFSUB__(v10, v63)) {
            goto LABEL_357;
          }
          uint64_t v84 = *((void *)&v192 + 1);
          uint64_t v6 = v192;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v63, (uint64_t)v10, (uint64_t)v10 - v63, v6, v84);
          swift_bridgeObjectRelease();
          unint64_t result = (void *)swift_bridgeObjectRelease();
          uint64_t v17 = v180[8];
          uint64_t v9 = (void *)v180[10];
          if (v17) {
            uint64_t v85 = v180[10];
          }
          else {
            uint64_t v85 = 0;
          }
          uint64_t v15 = v181;
          if (v181 < 0 || v85 < v181) {
            goto LABEL_359;
          }
          uint64_t v11 = v180[9];
          uint64_t v179 = v180[11];
          if (v17 && *(_WORD *)(v17 + 16) && v181 < (uint64_t)v9)
          {
            uint64_t v86 = *(unsigned __int8 *)(v17 + 18);
            if (*(unsigned char *)(v17 + 18))
            {
              unint64_t result = (void *)swift_unknownObjectRetain_n();
              uint64_t v8 = v181;
              uint64_t v87 = (void *)v17;
              while (1)
              {
                uint64_t v29 = *((unsigned __int16 *)v87 + 8);
                if (!*((_WORD *)v87 + 8)) {
                  goto LABEL_152;
                }
                uint64_t v89 = v87[5];
                BOOL v22 = __OFSUB__(v8, v89);
                uint64_t v31 = v8 - v89;
                if (v22) {
                  goto LABEL_338;
                }
                if (__OFADD__(v31, 1)) {
                  goto LABEL_339;
                }
                if (v31 + 1 <= 0)
                {
                  uint64_t v29 = 0;
                }
                else
                {
                  if (v29 == 1)
                  {
                    uint64_t v8 = v31;
LABEL_152:
                    if (v8) {
                      goto LABEL_335;
                    }
                    goto LABEL_153;
                  }
                  long long v90 = v87 + 8;
                  uint64_t v91 = 1;
                  while (1)
                  {
                    uint64_t v92 = *v90;
                    v90 += 3;
                    uint64_t v8 = v31 - v92;
                    if (__OFSUB__(v31, v92)) {
                      goto LABEL_331;
                    }
                    if (__OFADD__(v8, 1)) {
                      goto LABEL_332;
                    }
                    if (v8 + 1 < 1) {
                      break;
                    }
                    ++v91;
                    uint64_t v31 = v8;
                    if (v29 == v91) {
                      goto LABEL_152;
                    }
                  }
                  uint64_t v29 = v91;
                  uint64_t v8 = v31;
                }
LABEL_153:
                char v88 = (4 * *((unsigned char *)v87 + 18) + 8) & 0x3C;
                uint64_t v86 = ((-15 << v88) - 1) & v86 | (v29 << v88);
                long long v10 = (void *)v87[3 * v29 + 3];
                swift_unknownObjectRetain();
                unint64_t result = (void *)swift_unknownObjectRelease();
                uint64_t v87 = v10;
                if (!*((unsigned char *)v10 + 18)) {
                  goto LABEL_209;
                }
              }
            }
            unint64_t result = (void *)swift_unknownObjectRetain_n();
            uint64_t v8 = v181;
            long long v10 = (void *)v17;
LABEL_209:
            uint64_t v124 = *((unsigned __int16 *)v10 + 8);
            if (*((_WORD *)v10 + 8))
            {
              uint64_t v125 = v10[3];
              BOOL v22 = __OFSUB__(v8, v125);
              uint64_t v126 = v8 - v125;
              if (v22) {
                goto LABEL_385;
              }
              if (__OFADD__(v126, 1)) {
                goto LABEL_386;
              }
              if (v126 + 1 <= 0)
              {
                uint64_t v124 = 0;
              }
              else
              {
                if (v124 == 1)
                {
                  uint64_t v8 = v126;
                  goto LABEL_226;
                }
                uint64_t v130 = v10 + 6;
                uint64_t v131 = 1;
                while (1)
                {
                  uint64_t v132 = *v130;
                  v130 += 3;
                  uint64_t v8 = v126 - v132;
                  if (__OFSUB__(v126, v132)) {
                    goto LABEL_363;
                  }
                  if (__OFADD__(v8, 1)) {
                    goto LABEL_364;
                  }
                  if (v8 + 1 < 1) {
                    break;
                  }
                  ++v131;
                  uint64_t v126 = v8;
                  if (v124 == v131) {
                    goto LABEL_226;
                  }
                }
                uint64_t v124 = v131;
                uint64_t v8 = v126;
              }
            }
            else
            {
LABEL_226:
              if (v8) {
                goto LABEL_380;
              }
            }
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v14 = v86 & 0xFFFFFFFFFFFFF0FFLL | (v124 << 8);
            uint64_t v81 = v180;
LABEL_168:
            swift_unknownObjectRetain();
            uint64_t v177 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v179, v14, (uint64_t)v10, v17, v11);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t result = (void *)swift_unknownObjectRelease_n();
          }
          else
          {
            unint64_t v93 = swift_unknownObjectRetain_n();
            unint64_t v14 = specialized Rope._endPath.getter(v93);
            swift_unknownObjectRelease();
            long long v10 = 0;
            uint64_t v8 = 0;
            if (v17) {
              goto LABEL_168;
            }
            swift_bridgeObjectRelease();
            unint64_t result = (void *)swift_bridgeObjectRelease();
            uint64_t v177 = 0;
          }
          uint64_t v9 = a3;
          uint64_t v33 = v176;
          uint64_t v77 = v181 - v8;
          if (__OFSUB__(v181, v8)) {
            goto LABEL_360;
          }
          uint64_t v8 = a2;
          goto LABEL_231;
        }
        if (v178 != v180[11]) {
          goto LABEL_356;
        }
        if (!*v176) {
          goto LABEL_411;
        }
        specialized Rope._Node._prepareModify(at:)(v14, (uint64_t)&v193);
        v204[0] = v194;
        long long v187 = v193;
        long long v188 = v194;
        long long v189 = v195;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v204);
        unint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v204 + 8);
        long long v188 = MEMORY[0x1E4FBC868];
        v180[11] = v178 + 1;
        if (!v180[8]) {
          goto LABEL_412;
        }
        specialized Rope._Node._finalizeModify(_:)(&v184, &v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*a4 != -1) {
          swift_once();
        }
        unint64_t v65 = *a5;
        unint64_t v66 = *a6;
        uint64_t v191 = 0;
        long long v189 = 0u;
        long long v190 = 0u;
        long long v187 = 0u;
        long long v188 = 0u;
        swift_bridgeObjectRetain();
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v187, v65, v66);
        unint64_t result = (void *)swift_bridgeObjectRelease();
        if (v178 + 1 != v180[11]) {
          goto LABEL_358;
        }
        if (!*v176) {
          goto LABEL_413;
        }
        specialized Rope._Node._prepareModify(at:)(v14, (uint64_t)&v196);
        uint64_t v202 = v197;
        uint64_t v203 = v198;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v202);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v203);
        long long v187 = v196;
        long long v189 = v199;
        uint64_t v67 = *((void *)&v192 + 1);
        unint64_t result = (void *)v192;
        long long v188 = v192;
        uint64_t v68 = v178 + 2;
        v180[11] = v178 + 2;
        if (!v180[8]) {
          goto LABEL_414;
        }
        uint64_t v174 = (uint64_t)result;
        swift_bridgeObjectRetain_n();
        uint64_t v171 = v67;
        swift_bridgeObjectRetain_n();
        long long v10 = specialized Rope._Node._finalizeModify(_:)(v183, &v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v70 = v180[8];
        uint64_t v69 = v180[9];
        uint64_t v71 = v180[10];
        uint64_t v72 = v180[11];
        uint64_t v179 = v178 + 2;
        *(void *)&long long v187 = v68;
        *((void *)&v187 + 1) = v14;
        *(void *)&long long v188 = v10;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v187, v70, v69, v71, v72);
        swift_unknownObjectRelease();
        long long v73 = v187;
        uint64_t v74 = v188;
        unint64_t v75 = swift_unknownObjectRetain();
        unint64_t v76 = specialized Rope._endPath.getter(v75);
        unint64_t result = (void *)swift_unknownObjectRelease();
        if (*((void *)&v73 + 1) >= v76)
        {
          uint64_t v9 = a3;
          uint64_t v8 = a2;
          uint64_t v33 = v176;
LABEL_170:
          uint64_t v77 = v181;
          goto LABEL_183;
        }
        uint64_t v77 = v181;
        if ((void)v73 != v180[11]) {
          goto LABEL_370;
        }
        if (v74)
        {
          uint64_t v78 = v74 + 24 * ((*((void *)&v73 + 1) >> ((4 * *(unsigned char *)(v74 + 18) + 8) & 0x3C)) & 0xFLL);
          uint64_t v79 = *(void *)(v78 + 32);
          uint64_t v80 = *(void *)(v78 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v94 = v180[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(*((unint64_t *)&v73 + 1), v94);
          uint64_t v79 = v95;
          uint64_t v80 = v96;
          swift_unknownObjectRelease();
        }
        uint64_t v9 = a3;
        uint64_t v8 = a2;
        uint64_t v33 = v176;
        if ((specialized static Dictionary<>.== infix(_:_:)(v79, v174) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          unint64_t result = (void *)swift_bridgeObjectRelease();
          goto LABEL_183;
        }
        char v97 = specialized static Set.== infix(_:_:)(v80, v171);
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_bridgeObjectRelease();
        if (v97)
        {
          unint64_t v14 = specialized Rope._remove(at:)((uint64_t)&v187, v179, v14);
          unint64_t v98 = v180[8];
          uint64_t v99 = v180[11];
          if (v14 < specialized Rope._endPath.getter(v98) && *(unsigned char *)(v98 + 18))
          {
            uint64_t v100 = (v14 >> ((4 * *(unsigned char *)(v98 + 18) + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v98 + 24, v100, v14);
            swift_unknownObjectRelease();
          }
          uint64_t v101 = v187;
          swift_bridgeObjectRelease();
          unint64_t result = (void *)swift_bridgeObjectRelease();
          if (v99 != v180[11]) {
            goto LABEL_392;
          }
          if (!*v176) {
            goto LABEL_415;
          }
          unint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v14, (uint64_t)v200);
          long long v187 = v200[0];
          long long v188 = v200[1];
          long long v189 = v200[2];
          if (__OFADD__(*((void *)&v200[0] + 1), v101)) {
            goto LABEL_393;
          }
          *((void *)&v187 + 1) = *((void *)&v200[0] + 1) + v101;
          uint64_t v179 = v99 + 1;
          v180[11] = v99 + 1;
          if (!v180[8]) {
            goto LABEL_416;
          }
          long long v10 = specialized Rope._Node._finalizeModify(_:)(v183, &v187);
          swift_bridgeObjectRelease();
          unint64_t result = (void *)swift_bridgeObjectRelease();
          goto LABEL_170;
        }
LABEL_183:
        unint64_t v102 = *v33;
        if (*v33) {
          unint64_t v102 = *(unsigned __int8 *)(v102 + 18);
        }
        uint64_t v81 = v180;
        if (v14 <= v102)
        {
          swift_bridgeObjectRelease_n();
          unint64_t result = (void *)swift_bridgeObjectRelease_n();
          goto LABEL_231;
        }
        uint64_t v103 = v180[8];
        uint64_t v104 = v180[11];
        *(void *)&long long v187 = v179;
        *((void *)&v187 + 1) = v14;
        *(void *)&long long v188 = v10;
        if (v179 != v104) {
          goto LABEL_371;
        }
        if (v103)
        {
          unint64_t v105 = *(unsigned __int8 *)(v103 + 18);
          unint64_t result = (void *)swift_unknownObjectRetain();
          if (v14 <= v105) {
            goto LABEL_372;
          }
        }
        else if (!v14)
        {
          goto LABEL_372;
        }
        char v106 = (4 * *((unsigned char *)v10 + 18) + 8) & 0x3C;
        if (((v14 >> v106) & 0xF) != 0)
        {
          unint64_t v107 = ((((v14 >> v106) & 0xF) - 1) << v106) | ((-15 << v106) - 1) & v14;
          unint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v108 = v10;
          uint64_t v109 = v179;
          uint64_t v110 = v174;
        }
        else
        {
          swift_unknownObjectRetain();
          char v111 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v187, v103);
          unint64_t result = (void *)swift_unknownObjectRelease_n();
          uint64_t v110 = v174;
          if ((v111 & 1) == 0) {
            goto LABEL_383;
          }
          unint64_t v107 = *((void *)&v187 + 1);
          uint64_t v109 = v187;
          uint64_t v108 = (void *)v188;
        }
        uint64_t v33 = v176;
        if (v109 != v180[11]) {
          goto LABEL_373;
        }
        if (v108)
        {
          uint64_t v112 = &v108[3 * ((v107 >> ((4 * *((unsigned char *)v108 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v113 = v112[4];
          uint64_t v114 = v112[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v115 = v180[8];
          swift_unknownObjectRetain();
          uint64_t v33 = v176;
          specialized Rope._Node.subscript.getter(v107, v115);
          uint64_t v113 = v116;
          uint64_t v114 = v117;
          swift_unknownObjectRelease();
        }
        if ((specialized static Dictionary<>.== infix(_:_:)(v113, v110) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v81 = v180;
LABEL_207:
          swift_bridgeObjectRelease();
          unint64_t result = (void *)swift_bridgeObjectRelease();
          goto LABEL_231;
        }
        char v118 = specialized static Set.== infix(_:_:)(v114, v171);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v118 & 1) == 0)
        {
          uint64_t v81 = v180;
          uint64_t v9 = a3;
          goto LABEL_207;
        }
        unint64_t v119 = specialized Rope._remove(at:)((uint64_t)&v187, v179, v14);
        unint64_t v120 = v180[8];
        uint64_t v121 = v180[11];
        uint64_t v9 = a3;
        if (v119 >= specialized Rope._endPath.getter(v120))
        {
          unint64_t v120 = 0;
        }
        else if (*(unsigned char *)(v120 + 18))
        {
          uint64_t v122 = (v119 >> ((4 * *(unsigned char *)(v120 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          uint64_t v123 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v120 + 24, v122, v119);
          swift_unknownObjectRelease();
          unint64_t v120 = v123;
        }
        uint64_t v184 = v121;
        unint64_t v185 = v119;
        unint64_t v186 = v120;
        uint64_t v127 = v187;
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_bridgeObjectRelease();
        if (v121 != v180[11]) {
          goto LABEL_394;
        }
        uint64_t v128 = v180[8];
        if (v128)
        {
          unint64_t v129 = *(unsigned __int8 *)(v128 + 18);
          unint64_t result = (void *)swift_unknownObjectRetain();
          if (v119 <= v129) {
            goto LABEL_395;
          }
        }
        else if (!v119)
        {
          goto LABEL_395;
        }
        if (v120 && (char v164 = (4 * *(unsigned char *)(v120 + 18) + 8) & 0x3C, ((v119 >> v164) & 0xF) != 0))
        {
          unint64_t v185 = ((((v119 >> v164) & 0xF) - 1) << v164) | ((-15 << v164) - 1) & v119;
          unint64_t result = (void *)swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRetain();
          char v165 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v184, v128);
          unint64_t result = (void *)swift_unknownObjectRelease_n();
          if ((v165 & 1) == 0) {
            goto LABEL_405;
          }
          uint64_t v121 = v184;
        }
        uint64_t v81 = v180;
        uint64_t v33 = v176;
        if (v121 != v180[11]) {
          goto LABEL_396;
        }
        if (!*v176) {
          goto LABEL_417;
        }
        unint64_t v14 = v185;
        unint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v185, (uint64_t)v201);
        long long v187 = v201[0];
        long long v188 = v201[1];
        long long v189 = v201[2];
        BOOL v22 = __OFSUB__(v181, *((void *)&v201[0] + 1));
        uint64_t v182 = v181 - *((void *)&v201[0] + 1);
        if (v22) {
          goto LABEL_398;
        }
        if (__OFADD__(*((void *)&v201[0] + 1), v127)) {
          goto LABEL_400;
        }
        *((void *)&v187 + 1) = *((void *)&v201[0] + 1) + v127;
        uint64_t v179 = v121 + 1;
        v180[11] = v121 + 1;
        if (!v180[8]) {
          goto LABEL_418;
        }
        long long v10 = specialized Rope._Node._finalizeModify(_:)(v183, &v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_bridgeObjectRelease();
        BOOL v22 = __OFSUB__(v177--, 1);
        uint64_t v77 = v182;
        if (v22) {
          goto LABEL_401;
        }
LABEL_231:
        uint64_t v133 = v81[8];
        uint64_t v134 = v81[11];
        *(void *)&long long v187 = v179;
        *((void *)&v187 + 1) = v14;
        *(void *)&long long v188 = v10;
        if (__OFADD__(v177, 1)) {
          goto LABEL_348;
        }
        if (v179 != v134) {
          goto LABEL_349;
        }
        ++v177;
        if (v10)
        {
          unint64_t v135 = v10[3 * ((v14 >> ((4 * *((unsigned char *)v10 + 18) + 8) & 0x3C)) & 0xF) + 3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          unint64_t v135 = specialized Rope._Node.subscript.getter(v14, v133);
        }
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_bridgeObjectRelease();
        BOOL v22 = __OFADD__(v77, v135);
        uint64_t v136 = v77 + v135;
        if (v22) {
          goto LABEL_350;
        }
        if (v133)
        {
          unint64_t v137 = ((-15 << ((4 * *(unsigned char *)(v133 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v133 + 18) | ((unint64_t)*(unsigned __int16 *)(v133 + 16) << ((4 * *(unsigned char *)(v133 + 18) + 8) & 0x3C));
          unint64_t result = (void *)swift_unknownObjectRetain();
        }
        else
        {
          unint64_t v137 = 0;
        }
        uint64_t v34 = v180;
        if (v14 >= v137) {
          goto LABEL_351;
        }
        uint64_t v181 = v136;
        if (v10
          && (char v138 = (4 * *((unsigned char *)v10 + 18) + 8) & 0x3C,
              unint64_t v139 = ((v14 >> v138) & 0xF) + 1,
              v139 < *((unsigned __int16 *)v10 + 8)))
        {
          unint64_t v14 = (v139 << v138) | ((-15 << v138) - 1) & v14;
          unint64_t result = (void *)swift_unknownObjectRelease_n();
        }
        else
        {
          int v140 = *(unsigned __int8 *)(v133 + 18);
          char v141 = (4 * v140 + 8) & 0x3C;
          uint64_t v184 = (v14 >> v141) & 0xF;
          if (v140)
          {
            swift_unknownObjectRetain();
            char v142 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v133 + 24, &v184, (uint64_t)&v187, v133, v140);
            unint64_t result = (void *)swift_unknownObjectRelease();
            if ((v142 & 1) == 0) {
              goto LABEL_249;
            }
            unint64_t result = (void *)swift_unknownObjectRelease_n();
            unint64_t v14 = *((void *)&v187 + 1);
          }
          else
          {
            unint64_t v143 = ((v14 >> v141) & 0xF) + 1;
            if (v143 >= *(unsigned __int16 *)(v133 + 16))
            {
LABEL_249:
              if (v133)
              {
                int v144 = *(unsigned __int8 *)(v133 + 18);
                uint64_t v145 = *(unsigned __int16 *)(v133 + 16);
                unint64_t result = (void *)swift_unknownObjectRelease_n();
                unint64_t v14 = ((-15 << ((4 * v144 + 8) & 0x3C)) - 1) & v144 | (unint64_t)(v145 << ((4 * v144 + 8) & 0x3C));
              }
              else
              {
                unint64_t v14 = 0;
              }
              *(void *)&long long v187 = v179;
              *((void *)&v187 + 1) = v14;
              *(void *)&long long v188 = 0;
              goto LABEL_253;
            }
            unint64_t v14 = (v143 << v141) | ((-15 << v141) - 1) & v14;
            *((void *)&v187 + 1) = v14;
            unint64_t result = (void *)swift_unknownObjectRelease_n();
            *(void *)&long long v188 = v133;
          }
        }
LABEL_253:
        uint64_t v11 = v187;
        uint64_t v15 = v188;
        if (v181 >= (uint64_t)v9)
        {
          uint64_t v146 = *v33;
          if ((void *)v8 == v9)
          {
            uint64_t v11 = v180[11];
            if (v146)
            {
              uint64_t v147 = v180[10];
              if (v147 < v8) {
                goto LABEL_378;
              }
              uint64_t v148 = v180[11];
              uint64_t v149 = v180[9];
              uint64_t v150 = *(unsigned __int8 *)(v146 + 18);
              if (*(_WORD *)(v146 + 16) && v147 > v8)
              {
                if (*(unsigned char *)(v146 + 18))
                {
                  unint64_t result = (void *)swift_unknownObjectRetain_n();
                  uint64_t v35 = v8;
                  uint64_t v151 = v146;
                  while (1)
                  {
                    uint64_t v153 = *(unsigned __int16 *)(v151 + 16);
                    if (!*(_WORD *)(v151 + 16)) {
                      goto LABEL_262;
                    }
                    uint64_t v154 = *(void *)(v151 + 40);
                    uint64_t v155 = v35 - v154;
                    if (__OFSUB__(v35, v154)) {
                      goto LABEL_353;
                    }
                    if (__OFADD__(v155, 1)) {
                      goto LABEL_354;
                    }
                    if (v155 + 1 <= 0)
                    {
                      uint64_t v153 = 0;
                    }
                    else
                    {
                      if (v153 == 1)
                      {
                        v35 -= v154;
LABEL_262:
                        if (v35) {
                          goto LABEL_352;
                        }
                        goto LABEL_263;
                      }
                      uint64_t v156 = *(void *)(v151 + 64);
                      BOOL v22 = __OFSUB__(v155, v156);
                      uint64_t v157 = v155 - v156;
                      if (v22) {
                        goto LABEL_367;
                      }
                      if (__OFADD__(v157, 1)) {
                        goto LABEL_368;
                      }
                      if (v157 + 1 >= 1)
                      {
                        if (v153 != 2)
                        {
                          v158 = (void *)(v151 + 88);
                          uint64_t v159 = 2;
                          while (v153 != v159)
                          {
                            uint64_t v35 = v157 - *v158;
                            if (__OFSUB__(v157, *v158)) {
                              goto LABEL_341;
                            }
                            if (__OFADD__(v35, 1)) {
                              goto LABEL_342;
                            }
                            if (v35 + 1 < 1)
                            {
                              uint64_t v153 = v159;
                              uint64_t v35 = v157;
                              goto LABEL_263;
                            }
                            ++v159;
                            v158 += 3;
                            uint64_t v157 = v35;
                            if (v153 == v159) {
                              goto LABEL_262;
                            }
                          }
LABEL_340:
                          __break(1u);
LABEL_341:
                          __break(1u);
LABEL_342:
                          __break(1u);
LABEL_343:
                          __break(1u);
                          goto LABEL_344;
                        }
                        uint64_t v35 = v157;
                        goto LABEL_262;
                      }
                      uint64_t v153 = 1;
                      uint64_t v35 = v155;
                    }
LABEL_263:
                    char v152 = (4 * *(unsigned char *)(v151 + 18) + 8) & 0x3C;
                    uint64_t v150 = ((-15 << v152) - 1) & v150 | (v153 << v152);
                    uint64_t v15 = *(void *)(v151 + 24 + 24 * v153);
                    swift_unknownObjectRetain();
                    unint64_t result = (void *)swift_unknownObjectRelease();
                    uint64_t v151 = v15;
                    if (!*(unsigned char *)(v15 + 18)) {
                      goto LABEL_289;
                    }
                  }
                }
                unint64_t result = (void *)swift_unknownObjectRetain_n();
                uint64_t v150 = 0;
                uint64_t v35 = v8;
                uint64_t v15 = v146;
LABEL_289:
                uint64_t v160 = *(unsigned __int16 *)(v15 + 16);
                if (*(_WORD *)(v15 + 16))
                {
                  uint64_t v161 = *(void *)(v15 + 24);
                  BOOL v22 = __OFSUB__(v35, v161);
                  uint64_t v162 = v35 - v161;
                  if (v22) {
                    goto LABEL_403;
                  }
                  if (__OFADD__(v162, 1)) {
                    goto LABEL_404;
                  }
                  if (v162 + 1 <= 0)
                  {
                    uint64_t v160 = 0;
                    goto LABEL_327;
                  }
                  if (v160 != 1)
                  {
                    uint64_t v163 = *(void *)(v15 + 48);
                    uint64_t v35 = v162 - v163;
                    if (__OFSUB__(v162, v163)) {
                      goto LABEL_406;
                    }
                    if (__OFADD__(v35, 1)) {
                      goto LABEL_407;
                    }
                    if (v35 + 1 >= 1)
                    {
                      if (v160 != 2)
                      {
                        v166 = (void *)(v15 + 72);
                        uint64_t v167 = 2;
                        while (v160 != v167)
                        {
                          uint64_t v162 = v35 - *v166;
                          if (__OFSUB__(v35, *v166)) {
                            goto LABEL_388;
                          }
                          if (__OFADD__(v162, 1)) {
                            goto LABEL_389;
                          }
                          if (v162 + 1 < 1)
                          {
                            uint64_t v160 = v167;
                            goto LABEL_327;
                          }
                          ++v167;
                          v166 += 3;
                          uint64_t v35 = v162;
                          if (v160 == v167) {
                            goto LABEL_299;
                          }
                        }
                        goto LABEL_387;
                      }
                      goto LABEL_298;
                    }
                    uint64_t v160 = 1;
                    uint64_t v35 = v162;
LABEL_327:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    unint64_t v14 = v150 & 0xFFFFFFFFFFFFF0FFLL | (v160 << 8);
LABEL_52:
                    swift_unknownObjectRetain();
                    uint64_t v11 = v148;
                    uint64_t v177 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v148, v14, v15, v146, v149);
                    unint64_t result = (void *)swift_unknownObjectRelease_n();
                    uint64_t v9 = a3;
                    goto LABEL_53;
                  }
                }
                else
                {
LABEL_298:
                  uint64_t v162 = v35;
                }
LABEL_299:
                if (v162) {
                  goto LABEL_402;
                }
                uint64_t v35 = 0;
                goto LABEL_327;
              }
              unint64_t v14 = ((-15 << ((4 * v150 + 8) & 0x3C)) - 1) & v150 | ((unint64_t)*(unsigned __int16 *)(v146 + 16) << ((4 * v150 + 8) & 0x3C));
              swift_unknownObjectRetain();
              uint64_t v35 = 0;
              uint64_t v15 = 0;
              goto LABEL_52;
            }
            if (v8 > 0) {
              goto LABEL_384;
            }
            uint64_t v35 = 0;
            uint64_t v15 = 0;
            unint64_t v14 = 0;
            uint64_t v177 = 0;
LABEL_53:
            BOOL v22 = __OFSUB__(v8, v35);
            uint64_t v181 = v8 - v35;
            uint64_t v34 = v180;
            if (v22) {
              goto LABEL_374;
            }
          }
          else
          {
            uint64_t v181 = 0;
            uint64_t v177 = 0;
            uint64_t v15 = 0;
            unint64_t v14 = 0;
            uint64_t v11 = v180[11];
            if (v146)
            {
              uint64_t v15 = 0;
              uint64_t v181 = v180[10];
              uint64_t v177 = v180[9];
              unint64_t v14 = ((-15 << ((4 * *(unsigned char *)(v146 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v146 + 18) | ((unint64_t)*(unsigned __int16 *)(v146 + 16) << ((4 * *(unsigned char *)(v146 + 18) + 8) & 0x3C));
            }
          }
        }
      }
      if (*((unsigned char *)v10 + 18))
      {
        unint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v6 = (uint64_t)v10;
LABEL_73:
        uint64_t v29 = *(unsigned __int16 *)(v6 + 16);
        if (!*(_WORD *)(v6 + 16)) {
          goto LABEL_71;
        }
        uint64_t v43 = *(void *)(v6 + 40);
        BOOL v22 = __OFSUB__(v8, v43);
        uint64_t v31 = v8 - v43;
        if (v22) {
          goto LABEL_336;
        }
        if (__OFADD__(v31, 1)) {
          goto LABEL_337;
        }
        if (v31 + 1 <= 0)
        {
          uint64_t v29 = 0;
          goto LABEL_72;
        }
        if (v29 == 1)
        {
          uint64_t v8 = v31;
LABEL_71:
          if (!v8) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_335:
          __break(1u);
LABEL_336:
          __break(1u);
LABEL_337:
          __break(1u);
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
          goto LABEL_340;
        }
        uint64_t v44 = (uint64_t *)(v6 + 64);
        uint64_t v45 = 1;
        while (1)
        {
          uint64_t v46 = *v44;
          v44 += 3;
          uint64_t v8 = v31 - v46;
          if (__OFSUB__(v31, v46)) {
            break;
          }
          if (__OFADD__(v8, 1)) {
            goto LABEL_330;
          }
          if (v8 + 1 < 1)
          {
            uint64_t v29 = v45;
            uint64_t v8 = v31;
LABEL_72:
            char v42 = (4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C;
            uint64_t v38 = ((-15 << v42) - 1) & v38 | (v29 << v42);
            uint64_t v11 = *(void *)(v6 + 24 + 24 * v29);
            swift_unknownObjectRetain();
            unint64_t result = (void *)swift_unknownObjectRelease();
            uint64_t v6 = v11;
            if (!*(unsigned char *)(v11 + 18)) {
              goto LABEL_87;
            }
            goto LABEL_73;
          }
          ++v45;
          uint64_t v31 = v8;
          if (v29 == v45) {
            goto LABEL_71;
          }
        }
        __break(1u);
LABEL_330:
        __break(1u);
LABEL_331:
        __break(1u);
LABEL_332:
        __break(1u);
LABEL_333:
        uint64_t v27 = v31;
        uint64_t v16 = v29;
        continue;
      }
      break;
    }
    unint64_t result = (void *)swift_unknownObjectRetain_n();
    uint64_t v38 = 0;
    uint64_t v11 = (uint64_t)v10;
LABEL_87:
    uint64_t v47 = *(unsigned __int16 *)(v11 + 16);
    if (!*(_WORD *)(v11 + 16)) {
      goto LABEL_99;
    }
    uint64_t v48 = *(void *)(v11 + 24);
    BOOL v22 = __OFSUB__(v8, v48);
    uint64_t v49 = v8 - v48;
    if (v22) {
      goto LABEL_381;
    }
    if (__OFADD__(v49, 1)) {
      goto LABEL_382;
    }
    if (v49 + 1 <= 0)
    {
      uint64_t v47 = 0;
    }
    else
    {
      if (v47 == 1)
      {
        uint64_t v8 = v49;
LABEL_99:
        if (v8) {
          goto LABEL_379;
        }
        goto LABEL_100;
      }
      uint64_t v50 = (uint64_t *)(v11 + 48);
      uint64_t v51 = 1;
      while (1)
      {
        uint64_t v52 = *v50;
        v50 += 3;
        uint64_t v8 = v49 - v52;
        if (__OFSUB__(v49, v52)) {
          goto LABEL_361;
        }
        if (__OFADD__(v8, 1)) {
          goto LABEL_362;
        }
        if (v8 + 1 < 1) {
          break;
        }
        ++v51;
        uint64_t v49 = v8;
        if (v47 == v51) {
          goto LABEL_99;
        }
      }
      uint64_t v47 = v51;
      uint64_t v8 = v49;
    }
LABEL_100:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v40 = v38 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
    goto LABEL_101;
  }
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
  return result;
}

char *specialized BidirectionalCollection.index(_:offsetBy:)@<X0>(char **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = (char **)a1[3];
    uint64_t v9 = (char **)a1[4];
    unint64_t result = a1[1];
    uint64_t v11 = v6[2];
    BOOL v12 = *v6;
    if (!a2) {
      goto LABEL_39;
    }
    while (1)
    {
      if (__OFADD__(v12++, 1))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        return result;
      }
      if (v12 == v11)
      {
        uint64_t v6 = (char **)((char *)v8 + 1);
        if (__OFADD__(v8, 1)) {
          goto LABEL_41;
        }
        BOOL v12 = v11;
        if (v6 != v9)
        {
          char v14 = *(unsigned char *)(a3 + 24);
          unint64_t result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, v6);
          uint64_t v11 = &result[v15];
          BOOL v16 = __OFADD__(result, v15);
          if (v14)
          {
            if (v16) {
              goto LABEL_49;
            }
            uint64_t v8 = v6;
            BOOL v12 = result;
            if ((uint64_t)v11 < (uint64_t)result) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v16) {
              goto LABEL_51;
            }
            uint64_t v8 = v6;
            BOOL v12 = result;
            if ((uint64_t)v11 < (uint64_t)result)
            {
              __break(1u);
              break;
            }
          }
        }
      }
      if (!--v5) {
        goto LABEL_39;
      }
    }
  }
  uint64_t v17 = 0;
  uint64_t v11 = v6[2];
  uint64_t v8 = (char **)v6[3];
  BOOL v12 = *v6;
  unint64_t result = v6[1];
  uint64_t v18 = v8;
  char v19 = *v6;
  do
  {
    if (v19 != result)
    {
      BOOL v12 = v19 - 1;
      if (__OFSUB__(v19, 1)) {
        goto LABEL_42;
      }
LABEL_21:
      char v19 = v12;
      goto LABEL_22;
    }
    if (v18)
    {
      uint64_t v8 = (char **)((char *)v18 - 1);
      if (__OFSUB__(v18, 1)) {
        goto LABEL_43;
      }
      char v20 = *(unsigned char *)(a3 + 24);
      unint64_t result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, (char *)v18 - 1);
      uint64_t v11 = &result[v21];
      BOOL v22 = __OFADD__(result, v21);
      if (v20)
      {
        if (v22) {
          goto LABEL_45;
        }
        if ((uint64_t)v11 < (uint64_t)result) {
          goto LABEL_46;
        }
      }
      else
      {
        if (v22) {
          goto LABEL_47;
        }
        if ((uint64_t)v11 < (uint64_t)result) {
          goto LABEL_48;
        }
      }
      BOOL v12 = v11 - 1;
      if (__OFSUB__(v11, 1)) {
        goto LABEL_44;
      }
      uint64_t v18 = v8;
      goto LABEL_21;
    }
    char v19 = result;
LABEL_22:
    --v17;
  }
  while (v17 > v5);
  uint64_t v9 = (char **)v6[4];
LABEL_39:
  *a4 = v12;
  a4[1] = result;
  a4[2] = v11;
  a4[3] = (char *)v8;
  a4[4] = (char *)v9;
  return result;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = a5;
  uint64_t v8 = a2;
  if ((a5 & 0x8000000000000000) == 0)
  {
    *(void *)&long long v218 = result;
    *((void *)&v218 + 1) = a2;
    *(void *)&long long v219 = a3;
    *((void *)&v219 + 1) = a4;
    if (a5)
    {
      do
      {
        specialized Collection.formIndex(after:)((uint64_t *)&v218);
        --v7;
      }
      while (v7);
      uint64_t v8 = *((void *)&v218 + 1);
      unint64_t result = v218;
      a4 = *((void *)&v219 + 1);
      a3 = v219;
    }
    *a6 = result;
    a6[1] = v8;
    a6[2] = a3;
    a6[3] = a4;
    return result;
  }
  uint64_t v10 = *((void *)v6 + 25);
  uint64_t v230 = *((void *)v6 + 24);
  long long v11 = v6[3];
  long long v220 = v6[2];
  long long v221 = v11;
  long long v12 = v6[7];
  long long v224 = v6[6];
  long long v225 = v12;
  long long v13 = v6[5];
  long long v222 = v6[4];
  long long v223 = v13;
  long long v14 = v6[11];
  long long v228 = v6[10];
  long long v229 = v14;
  long long v15 = v6[9];
  long long v226 = v6[8];
  long long v227 = v15;
  long long v16 = v6[1];
  long long v218 = *v6;
  long long v219 = v16;
  uint64_t v217 = v10;
  uint64_t v153 = *(void *)(v10 + 16);
  if (!v153) {
    goto LABEL_215;
  }
  uint64_t v149 = a6;
  uint64_t v17 = 0;
  uint64_t v162 = *((void *)&v218 + 1);
  uint64_t v177 = (void *)v218;
  uint64_t v154 = a5;
  uint64_t v155 = (long long *)(v218 + 16);
  uint64_t v169 = v227;
  uint64_t v170 = *((void *)&v226 + 1);
  uint64_t v167 = v228;
  uint64_t v168 = *((void *)&v227 + 1);
  uint64_t v159 = v229;
  uint64_t v160 = *((void *)&v228 + 1);
  unint64_t v185 = &v204;
  uint64_t v182 = (long long *)&v193;
  uint64_t v152 = v10;
  uint64_t v150 = &v201;
  uint64_t v151 = (uint64_t *)(v10 + 40);
  uint64_t v157 = v230;
  uint64_t v158 = *((void *)&v229 + 1);
  uint64_t v18 = result;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  while (1)
  {
    outlined retain of AttributedString.Runs((uint64_t)&v218);
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_191;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_192;
    }
    uint64_t v166 = v17;
    uint64_t v21 = v177[8];
    uint64_t v184 = v177[9];
    uint64_t v23 = v177[10];
    uint64_t v22 = v177[11];
    uint64_t v24 = v19;
    swift_unknownObjectRetain();
    uint64_t v175 = v18;
    uint64_t v172 = v8;
    uint64_t v25 = v19;
    uint64_t v26 = BigString.Index.utf8Offset.getter();
    uint64_t v27 = v26 - 1;
    if (__OFSUB__(v26, 1)) {
      goto LABEL_193;
    }
    if (v21) {
      uint64_t v28 = v23;
    }
    else {
      uint64_t v28 = 0;
    }
    if (v27 < 0 || v28 < v27) {
      goto LABEL_194;
    }
    uint64_t v165 = v20;
    uint64_t v171 = v22;
    if (!v21)
    {
      uint64_t v30 = 0;
      uint64_t v178 = 0;
      unint64_t v181 = 0;
      uint64_t v176 = 0;
      goto LABEL_71;
    }
    uint64_t v29 = *(unsigned __int8 *)(v21 + 18);
    if (*(_WORD *)(v21 + 16) && v27 < v23)
    {
      if (*(unsigned char *)(v21 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t v30 = v27;
        uint64_t v31 = v21;
        while (1)
        {
          uint64_t v34 = *(unsigned __int16 *)(v31 + 16);
          if (!*(_WORD *)(v31 + 16)) {
            break;
          }
          uint64_t v35 = *(void *)(v31 + 40);
          uint64_t v36 = v30 - v35;
          if (__OFSUB__(v30, v35)) {
            goto LABEL_187;
          }
          if (__OFADD__(v36, 1)) {
            goto LABEL_188;
          }
          if (v36 + 1 <= 0)
          {
            uint64_t v34 = 0;
            goto LABEL_23;
          }
          if (v34 == 1)
          {
            v30 -= v35;
            break;
          }
          uint64_t v37 = *(void *)(v31 + 64);
          BOOL v38 = __OFSUB__(v36, v37);
          uint64_t v39 = v36 - v37;
          if (v38) {
            goto LABEL_189;
          }
          if (__OFADD__(v39, 1)) {
            goto LABEL_190;
          }
          if (v39 + 1 < 1)
          {
            uint64_t v34 = 1;
            uint64_t v30 = v36;
            goto LABEL_23;
          }
          if (v34 == 2)
          {
            uint64_t v30 = v39;
            break;
          }
          unint64_t v40 = (void *)(v31 + 88);
          uint64_t v41 = 2;
          while (1)
          {
            if (v34 == v41)
            {
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
              goto LABEL_186;
            }
            uint64_t v30 = v39 - *v40;
            if (__OFSUB__(v39, *v40)) {
              goto LABEL_184;
            }
            if (__OFADD__(v30, 1)) {
              goto LABEL_185;
            }
            if (v30 + 1 < 1) {
              break;
            }
            ++v41;
            v40 += 3;
            uint64_t v39 = v30;
            if (v34 == v41) {
              goto LABEL_22;
            }
          }
          uint64_t v34 = v41;
          uint64_t v30 = v39;
LABEL_23:
          char v32 = (4 * *(unsigned char *)(v31 + 18) + 8) & 0x3C;
          uint64_t v29 = ((-15 << v32) - 1) & v29 | (v34 << v32);
          uint64_t v33 = *(void *)(v31 + 24 + 24 * v34);
          swift_unknownObjectRetain();
          unint64_t result = swift_unknownObjectRelease();
          uint64_t v31 = v33;
          if (!*(unsigned char *)(v33 + 18)) {
            goto LABEL_47;
          }
        }
LABEL_22:
        if (!v30) {
          goto LABEL_23;
        }
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
        goto LABEL_199;
      }
      unint64_t result = swift_unknownObjectRetain_n();
      uint64_t v29 = 0;
      uint64_t v30 = v27;
      uint64_t v33 = v21;
LABEL_47:
      uint64_t v43 = *(unsigned __int16 *)(v33 + 16);
      if (!*(_WORD *)(v33 + 16)) {
        goto LABEL_56;
      }
      uint64_t v44 = *(void *)(v33 + 24);
      BOOL v38 = __OFSUB__(v30, v44);
      uint64_t v45 = v30 - v44;
      if (v38) {
        goto LABEL_210;
      }
      if (__OFADD__(v45, 1)) {
        goto LABEL_211;
      }
      if (v45 + 1 <= 0)
      {
        uint64_t v43 = 0;
      }
      else
      {
        if (v43 == 1)
        {
LABEL_57:
          if (v45) {
            goto LABEL_207;
          }
          uint64_t v30 = 0;
          goto LABEL_69;
        }
        uint64_t v46 = *(void *)(v33 + 48);
        uint64_t v30 = v45 - v46;
        if (__OFSUB__(v45, v46)) {
          goto LABEL_213;
        }
        if (__OFADD__(v30, 1)) {
          goto LABEL_214;
        }
        if (v30 + 1 < 1)
        {
          uint64_t v43 = 1;
          uint64_t v30 = v45;
        }
        else
        {
          if (v43 == 2)
          {
LABEL_56:
            uint64_t v45 = v30;
            goto LABEL_57;
          }
          uint64_t v47 = (void *)(v33 + 72);
          uint64_t v48 = 2;
          while (1)
          {
            if (v43 == v48) {
              goto LABEL_204;
            }
            uint64_t v45 = v30 - *v47;
            if (__OFSUB__(v30, *v47)) {
              goto LABEL_205;
            }
            if (__OFADD__(v45, 1)) {
              goto LABEL_206;
            }
            if (v45 + 1 < 1) {
              break;
            }
            ++v48;
            v47 += 3;
            uint64_t v30 = v45;
            if (v43 == v48) {
              goto LABEL_57;
            }
          }
          uint64_t v43 = v48;
        }
      }
LABEL_69:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v42 = v29 & 0xFFFFFFFFFFFFF0FFLL | (v43 << 8);
      uint64_t v22 = v171;
      goto LABEL_70;
    }
    uint64_t v30 = 0;
    uint64_t v33 = 0;
    unint64_t v42 = ((-15 << ((4 * v29 + 8) & 0x3C)) - 1) & v29 | ((unint64_t)*(unsigned __int16 *)(v21 + 16) << ((4 * v29 + 8) & 0x3C));
LABEL_70:
    swift_unknownObjectRetain();
    unint64_t v181 = v42;
    uint64_t v178 = v33;
    uint64_t v176 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v22, v42, v33, v21, v184);
    swift_unknownObjectRelease_n();
    uint64_t v25 = v24;
LABEL_71:
    uint64_t v49 = v27 - v30;
    if (__OFSUB__(v27, v30)) {
      goto LABEL_195;
    }
    if (v22 != v177[11]) {
      goto LABEL_196;
    }
    if (v178)
    {
      unint64_t v50 = v178 + 24 * ((v181 >> ((4 * *(unsigned char *)(v178 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v52 = *(void *)(v50 + 32);
      uint64_t v51 = *(void *)(v50 + 40);
      swift_bridgeObjectRetain();
      unint64_t result = swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v53 = v177[8];
      swift_unknownObjectRetain();
      uint64_t v25 = v24;
      specialized Rope._Node.subscript.getter(v181, v53);
      uint64_t v52 = v54;
      uint64_t v51 = v55;
      unint64_t result = swift_unknownObjectRelease();
    }
    uint64_t v179 = v25;
    if (v162 < v176) {
      break;
    }
LABEL_172:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_176:
    long long v131 = *v155;
    long long v132 = v155[2];
    v231[1] = v155[1];
    v231[2] = v132;
    v231[0] = v131;
    long long v133 = *v155;
    v232[1] = v155[1];
    v232[2] = v132;
    v232[0] = v133;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v232, (uint64_t)v233);
    outlined retain of Locale((uint64_t)v233);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v231);
    if (__OFSUB__(v49, BigString.Index.utf8Offset.getter())) {
      goto LABEL_197;
    }
    uint64_t v134 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v136 = v135;
    uint64_t v138 = v137;
    uint64_t v140 = v139;
    outlined release of Locale((uint64_t)&v216);
    uint64_t v141 = v169;
    uint64_t v142 = v170;
    uint64_t v143 = v167;
    uint64_t v144 = v168;
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t v144 = v138;
      uint64_t v143 = v140;
    }
    else
    {
      uint64_t v134 = v142;
      uint64_t v136 = v141;
    }
    char v145 = static BigString.Index.< infix(_:_:)();
    unint64_t result = outlined release of AttributedString.Runs((uint64_t)&v218);
    if (v145) {
      goto LABEL_198;
    }
    uint64_t v17 = v166 - 1;
    uint64_t v18 = v134;
    uint64_t v8 = v136;
    uint64_t v19 = v144;
    uint64_t v20 = v143;
    if (v166 - 1 <= v154)
    {
      uint64_t v146 = v149;
      *uint64_t v149 = v134;
      v146[1] = v136;
      v146[2] = v144;
      v146[3] = v143;
      return result;
    }
  }
  uint64_t v184 = v52;
  uint64_t v161 = v51;
LABEL_78:
  uint64_t v56 = v178;
  uint64_t v57 = v177[8];
  uint64_t v58 = v177[9];
  uint64_t v60 = v177[10];
  uint64_t v59 = v177[11];
  uint64_t v200 = v22;
  unint64_t v61 = v181;
  uint64_t v201 = v181;
  uint64_t v202 = v178;
  if (v22 != v59)
  {
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }
  if (v57)
  {
    unint64_t v62 = *(unsigned __int8 *)(v57 + 18);
    unint64_t result = swift_unknownObjectRetain();
    unint64_t v61 = v181;
    uint64_t v56 = v178;
    if (v181 <= v62)
    {
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
      goto LABEL_203;
    }
  }
  else if (!v181)
  {
    goto LABEL_200;
  }
  uint64_t v164 = v49;
  if (v56)
  {
    char v63 = (4 * *(unsigned char *)(v56 + 18) + 8) & 0x3C;
    if (((v61 >> v63) & 0xF) != 0)
    {
      uint64_t v64 = v25;
      unint64_t v65 = ((((v61 >> v63) & 0xF) - 1) << v63) | ((-15 << v63) - 1) & v61;
      uint64_t v201 = v65;
      goto LABEL_132;
    }
  }
  char v66 = (4 * *(unsigned char *)(v57 + 18) + 8) & 0x3C;
  unint64_t v67 = (v61 >> v66) & 0xF;
  if (!*(unsigned char *)(v57 + 18))
  {
    if (!v67) {
      goto LABEL_212;
    }
    unint64_t v65 = ((v67 - 1) << v66) | ((-15 << v66) - 1) & v61;
    uint64_t v201 = v65;
    uint64_t v202 = v57;
    uint64_t v56 = v57;
    uint64_t v49 = v164;
    if (v57) {
      goto LABEL_131;
    }
    goto LABEL_97;
  }
  uint64_t v183 = v60;
  uint64_t v68 = v57 + 24;
  if (v67 >= *(unsigned __int16 *)(v57 + 16))
  {
    unint64_t result = swift_unknownObjectRetain();
    if (v67)
    {
LABEL_111:
      uint64_t v89 = *(void *)(v68 + 24 * ((int)v67 - 1));
      if (!*(_WORD *)(v89 + 16))
      {
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
        goto LABEL_216;
      }
      uint64_t v90 = *(unsigned __int16 *)(v89 + 16) - 1;
      int v91 = *(unsigned __int8 *)(v89 + 18);
      uint64_t v201 = ((-15 << ((4 * v91 + 8) & 0x3C)) - 1) & (v201 & ((-15 << v66) - 1) | ((v67 - 1) << v66)) | (v90 << ((4 * v91 + 8) & 0x3C));
      if (v91)
      {
        uint64_t v92 = v89 + 24;
        swift_unknownObjectRetain();
        uint64_t v93 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v92, v90, v150);
        swift_unknownObjectRelease();
        uint64_t v89 = v93;
      }
      uint64_t v25 = v179;
      uint64_t v49 = v164;
      uint64_t v56 = v89;
      uint64_t v202 = v89;
LABEL_129:
      swift_unknownObjectRelease();
      if (v200 != v22) {
        goto LABEL_201;
      }
      unint64_t v65 = v201;
      if (v56)
      {
LABEL_131:
        uint64_t v64 = v25;
LABEL_132:
        char v101 = (4 * *(unsigned char *)(v56 + 18) + 8) & 0x3C;
        unint64_t v181 = v65;
        uint64_t v178 = v56;
        unint64_t v83 = *(void *)(v56 + 24 * ((v65 >> v101) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v84 = 0;
        goto LABEL_133;
      }
LABEL_97:
      uint64_t v64 = v25;
      swift_unknownObjectRetain();
      unint64_t v181 = v65;
      unint64_t v83 = specialized Rope._Node.subscript.getter(v65, v57);
      swift_unknownObjectRelease();
      uint64_t v178 = 0;
      char v84 = 1;
LABEL_133:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFSUB__(v49, v83)) {
        goto LABEL_202;
      }
      if (v171 == v177[11])
      {
        uint64_t v156 = v49 - v83;
        if (v84)
        {
          uint64_t v102 = v177[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v181, v102);
          uint64_t v104 = v103;
          uint64_t v163 = v105;
          swift_unknownObjectRelease();
        }
        else
        {
          unint64_t v106 = v178 + 24 * ((v181 >> ((4 * *(unsigned char *)(v178 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v104 = *(void *)(v106 + 32);
          uint64_t v107 = *(void *)(v106 + 40);
          swift_bridgeObjectRetain();
          uint64_t v163 = v107;
          swift_bridgeObjectRetain();
        }
        uint64_t v108 = v184;
        --v176;
        swift_bridgeObjectRetain();
        uint64_t v109 = v151;
        uint64_t v110 = v153;
        uint64_t v183 = v104;
        while (1)
        {
          uint64_t v113 = *(v109 - 1);
          uint64_t v112 = *v109;
          if (*(void *)(v108 + 16))
          {
            swift_bridgeObjectRetain_n();
            unint64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v112);
            if (v115)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v108 + 56) + 72 * v114, (uint64_t)&v211);
            }
            else
            {
              uint64_t v215 = 0;
              long long v213 = 0u;
              long long v214 = 0u;
              long long v211 = 0u;
              long long v212 = 0u;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v215 = 0;
            long long v213 = 0u;
            long long v214 = 0u;
            long long v211 = 0u;
            long long v212 = 0u;
            swift_bridgeObjectRetain();
          }
          uint64_t v116 = v183;
          if (*(void *)(v183 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v117 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v112);
            if (v118)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v116 + 56) + 72 * v117, (uint64_t)&v206);
            }
            else
            {
              uint64_t v210 = 0;
              long long v208 = 0u;
              long long v209 = 0u;
              long long v206 = 0u;
              long long v207 = 0u;
            }
            swift_bridgeObjectRelease();
            uint64_t v108 = v184;
          }
          else
          {
            uint64_t v210 = 0;
            long long v208 = 0u;
            long long v209 = 0u;
            long long v206 = 0u;
            long long v207 = 0u;
          }
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v211, (uint64_t)&v200, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v206, (uint64_t)v185, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v203)
          {
            if (v205) {
              goto LABEL_174;
            }
            outlined destroy of Any?((uint64_t)&v200, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v206, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v211, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_142;
          }
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v200, (uint64_t)v199, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v205)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v199);
LABEL_174:
            outlined destroy of Any?((uint64_t)&v200, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v206, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v211, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_175:
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v217);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v49 = v164;
            goto LABEL_176;
          }
          long long v119 = *((_OWORD *)v185 + 3);
          v197[2] = *((_OWORD *)v185 + 2);
          v197[3] = v119;
          uint64_t v198 = v185[8];
          long long v120 = *((_OWORD *)v185 + 1);
          v197[0] = *(_OWORD *)v185;
          v197[1] = v120;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v199, (uint64_t)v196);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v197, (uint64_t)v195);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v196, (uint64_t)&v191, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v195, (uint64_t)v182, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v192)
          {
            if (!v194)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v191);
LABEL_140:
              char v111 = 0;
              goto LABEL_141;
            }
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v191, (uint64_t)v188);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v182, (uint64_t)v187);
            uint64_t v121 = v189;
            uint64_t v174 = v190;
            uint64_t v173 = __swift_project_boxed_opaque_existential_1(v188, v189);
            uint64_t v180 = &v147;
            uint64_t v122 = *(void *)(v121 - 8);
            MEMORY[0x1F4188790](v173);
            uint64_t v124 = (char *)&v147 - ((v123 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v187, (uint64_t)&v186);
            uint64_t v125 = type metadata accessor for Optional();
            uint64_t v126 = *(void *)(v125 - 8);
            MEMORY[0x1F4188790](v125);
            uint64_t v128 = (char *)&v147 - v127;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            int v129 = swift_dynamicCast();
            uint64_t v130 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56);
            if (v129)
            {
              v130(v128, 0, 1, v121);
              (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v124, v128, v121);
              char v111 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v122 + 8))(v124, v121);
            }
            else
            {
              v130(v128, 1, 1, v121);
              (*(void (**)(char *, uint64_t))(v126 + 8))(v128, v125);
              char v111 = 0;
            }
            uint64_t v64 = v179;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v187);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v188);
          }
          else
          {
            if (v194)
            {
              outlined destroy of Any?((uint64_t)v182, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_140;
            }
            char v111 = 1;
          }
LABEL_141:
          outlined destroy of Any?((uint64_t)v195, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)v196, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v197);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v199);
          outlined destroy of Any?((uint64_t)&v200, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v206, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v211, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t v108 = v184;
          if ((v111 & 1) == 0) {
            goto LABEL_175;
          }
LABEL_142:
          v109 += 2;
          if (!--v110)
          {
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v217);
            swift_bridgeObjectRelease();
            unint64_t result = swift_bridgeObjectRelease();
            uint64_t v49 = v156;
            uint64_t v22 = v171;
            uint64_t v25 = v64;
            if (v162 < v176) {
              goto LABEL_78;
            }
            uint64_t v49 = v156;
            goto LABEL_172;
          }
        }
      }
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
    }
LABEL_208:
    unint64_t result = swift_unknownObjectRelease();
    __break(1u);
    goto LABEL_209;
  }
  uint64_t v69 = *(void *)(v68 + 24 * ((v61 >> v66) & 0xF));
  char v70 = (4 * *(unsigned char *)(v69 + 18) + 8) & 0x3C;
  unint64_t v71 = (v61 >> v70) & 0xF;
  if (!*(unsigned char *)(v69 + 18))
  {
    if (v71)
    {
      uint64_t v201 = ((v71 - 1) << v70) | ((-15 << v70) - 1) & v61;
      uint64_t v202 = v69;
      swift_unknownObjectRetain();
      uint64_t v56 = v69;
      uint64_t v25 = v179;
      uint64_t v22 = v171;
      uint64_t v49 = v164;
      goto LABEL_129;
    }
    unint64_t result = swift_unknownObjectRetain();
    goto LABEL_110;
  }
  unint64_t v72 = v69 + 24;
  if (v71 >= *(unsigned __int16 *)(v69 + 16))
  {
    swift_unknownObjectRetain();
    unint64_t result = swift_unknownObjectRetain();
    goto LABEL_103;
  }
  unint64_t v181 = v69 + 24;
  uint64_t v73 = *(void *)(v72 + 24 * ((v61 >> v70) & 0xF));
  uint64_t v74 = (4 * *(unsigned char *)(v73 + 18) + 8) & 0x3C;
  unint64_t v75 = (v61 >> v74) & 0xF;
  if (!*(unsigned char *)(v73 + 18))
  {
    if (v75)
    {
      uint64_t v201 = ((v75 - 1) << v74) | ((-15 << v74) - 1) & v61;
      uint64_t v202 = v73;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v56 = v73;
      goto LABEL_127;
    }
    swift_unknownObjectRetain();
    unint64_t result = swift_unknownObjectRetain();
    unint64_t v72 = v181;
LABEL_103:
    if (v71)
    {
      uint64_t v85 = *(void *)(v72 + 24 * ((int)v71 - 1));
      if (!*(_WORD *)(v85 + 16))
      {
LABEL_216:
        __break(1u);
        goto LABEL_217;
      }
      uint64_t v86 = *(unsigned __int16 *)(v85 + 16) - 1;
      int v87 = *(unsigned __int8 *)(v85 + 18);
      uint64_t v201 = ((-15 << ((4 * v87 + 8) & 0x3C)) - 1) & (v201 & ((-15 << v70) - 1) | ((v71 - 1) << v70)) | (v86 << ((4 * v87 + 8) & 0x3C));
      if (v87)
      {
        swift_unknownObjectRetain();
        uint64_t v88 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v85 + 24, v86, v150);
        swift_unknownObjectRelease();
        uint64_t v85 = v88;
      }
      uint64_t v25 = v179;
      uint64_t v22 = v171;
      uint64_t v49 = v164;
      uint64_t v56 = v85;
      uint64_t v202 = v85;
LABEL_128:
      swift_unknownObjectRelease();
      goto LABEL_129;
    }
    unint64_t result = swift_unknownObjectRelease();
LABEL_110:
    uint64_t v22 = v171;
    if (v67) {
      goto LABEL_111;
    }
    goto LABEL_208;
  }
  unint64_t v76 = *(unsigned __int16 *)(v73 + 16);
  uint64_t v180 = (uint64_t *)v73;
  if (v75 >= v76)
  {
    uint64_t v173 = (void *)(v73 + 24);
    uint64_t v174 = (v61 >> v74) & 0xF;
    uint64_t v163 = v74;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = swift_unknownObjectRetain();
    goto LABEL_118;
  }
  uint64_t v156 = v58;
  uint64_t v77 = *(void *)(v73 + 24 + 24 * ((v61 >> v74) & 0xF));
  int v78 = *(unsigned __int8 *)(v77 + 18);
  char v79 = (4 * v78 + 8) & 0x3C;
  uint64_t v80 = (v61 >> v79) & 0xF;
  *(void *)&long long v191 = v80;
  if (!v78)
  {
    if (!v80)
    {
      uint64_t v173 = (void *)(v73 + 24);
      uint64_t v174 = (v61 >> v74) & 0xF;
      uint64_t v163 = v74;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRetain();
      uint64_t v94 = v174;
      if (v174) {
        goto LABEL_119;
      }
      goto LABEL_171;
    }
    uint64_t v201 = ((v80 - 1) << v79) | ((-15 << v79) - 1) & v61;
    uint64_t v56 = v77;
    uint64_t v202 = v77;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
LABEL_126:
    swift_unknownObjectRelease();
LABEL_127:
    uint64_t v25 = v179;
    uint64_t v22 = v171;
    uint64_t v49 = v164;
    goto LABEL_128;
  }
  uint64_t v173 = (void *)(v73 + 24);
  uint64_t v174 = (v61 >> v74) & 0xF;
  uint64_t v163 = v74;
  uint64_t v147 = v77 + 24;
  uint64_t v148 = v77 + 16;
  uint64_t v178 = v77;
  char v81 = v78;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  char v82 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v148, v147, (uint64_t *)&v191, (uint64_t)&v200, v81);
  unint64_t result = swift_unknownObjectRelease();
  if (v82)
  {
    uint64_t v56 = v202;
    goto LABEL_126;
  }
LABEL_118:
  uint64_t v94 = v174;
  if (!v174)
  {
LABEL_171:
    unint64_t result = swift_unknownObjectRelease();
    unint64_t v72 = v181;
    goto LABEL_103;
  }
LABEL_119:
  uint64_t v95 = v94 - 1;
  uint64_t v96 = v173[3 * (int)v95];
  if (*(_WORD *)(v96 + 16))
  {
    uint64_t v97 = *(unsigned __int16 *)(v96 + 16) - 1;
    uint64_t v49 = v164;
    int v98 = *(unsigned __int8 *)(v96 + 18);
    uint64_t v201 = ((-15 << ((4 * v98 + 8) & 0x3C)) - 1) & (v201 & ((-15 << v163) - 1) | (v95 << v163)) | (v97 << ((4 * v98 + 8) & 0x3C));
    uint64_t v99 = v179;
    uint64_t v22 = v171;
    if (v98)
    {
      swift_unknownObjectRetain();
      uint64_t v100 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v96 + 24, v97, v150);
      swift_unknownObjectRelease();
      uint64_t v96 = v100;
    }
    uint64_t v56 = v96;
    uint64_t v202 = v96;
    swift_unknownObjectRelease();
    uint64_t v25 = v99;
    goto LABEL_128;
  }
LABEL_217:
  __break(1u);
  return result;
}

uint64_t *specialized BidirectionalCollection.index(_:offsetBy:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = *result;
  unint64_t v8 = result[1];
  uint64_t v9 = result[2];
  uint64_t v10 = result[3];
  uint64_t v11 = result[4];
  char v84 = a3;
  if (a2 < 0)
  {
    uint64_t v44 = a5;
    uint64_t v45 = 0;
    while (1)
    {
      uint64_t v47 = a3[8];
      if (v47)
      {
        if (v11 != a3[10]) {
          goto LABEL_124;
        }
      }
      else if (v11)
      {
LABEL_124:
        uint64_t v60 = a3[11];
        uint64_t v86 = v7;
        unint64_t v87 = v8;
        uint64_t v88 = v9;
        BOOL v15 = __OFSUB__(v10--, 1);
        if (v15) {
          goto LABEL_179;
        }
        if (v7 != v60) {
          goto LABEL_180;
        }
        uint64_t v80 = v7;
        if (v47)
        {
          unint64_t v61 = *(unsigned __int8 *)(v47 + 18);
          unint64_t result = (uint64_t *)swift_unknownObjectRetain();
          if (v8 <= v61) {
            goto LABEL_181;
          }
        }
        else if (!v8)
        {
          goto LABEL_181;
        }
        if (v9)
        {
          char v62 = (4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C;
          if (((v8 >> v62) & 0xF) != 0)
          {
            unint64_t v8 = ((((v8 >> v62) & 0xF) - 1) << v62) | ((-15 << v62) - 1) & v8;
            unint64_t v87 = v8;
            uint64_t v44 = a5;
            goto LABEL_137;
          }
        }
        int v63 = *(unsigned __int8 *)(v47 + 18);
        char v64 = (4 * v63 + 8) & 0x3C;
        uint64_t v65 = (v8 >> v64) & 0xF;
        uint64_t v85 = v65;
        if (v63)
        {
          uint64_t v6 = v47 + 16;
          swift_unknownObjectRetain();
          char v66 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v47 + 16, v47 + 24, &v85, (uint64_t)&v86, v63);
          unint64_t result = (uint64_t *)swift_unknownObjectRelease();
          if ((v66 & 1) == 0) {
            goto LABEL_190;
          }
          if (v86 != v7) {
            goto LABEL_182;
          }
          unint64_t v8 = v87;
          uint64_t v9 = v88;
          uint64_t v44 = a5;
          if (v88)
          {
LABEL_137:
            unint64_t v67 = v9 + 24 * ((v8 >> ((4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v68 = *(void *)(v67 + 24);
            uint64_t v6 = *(void *)(v67 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_141:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
            BOOL v15 = __OFSUB__(v11, v68);
            v11 -= v68;
            if (v15) {
              goto LABEL_183;
            }
            uint64_t v46 = a2;
            a3 = v84;
            goto LABEL_95;
          }
        }
        else
        {
          if (!v65) {
            goto LABEL_190;
          }
          unint64_t v8 = ((v65 - 1) << v64) | ((-15 << v64) - 1) & v8;
          unint64_t v87 = v8;
          uint64_t v9 = v47;
          uint64_t v44 = a5;
          if (v47) {
            goto LABEL_137;
          }
        }
        swift_unknownObjectRetain();
        unint64_t v68 = specialized Rope._Node.subscript.getter(v8, v47);
        uint64_t v6 = v69;
        swift_unknownObjectRelease();
        goto LABEL_141;
      }
      if (v47) {
        uint64_t v48 = a3[10];
      }
      else {
        uint64_t v48 = 0;
      }
      if (v44 < 0 || v48 < v44) {
        goto LABEL_188;
      }
      uint64_t v80 = a3[11];
      if (v47)
      {
        uint64_t v49 = a3[9];
        uint64_t v50 = *(unsigned __int8 *)(v47 + 18);
        if (*(_WORD *)(v47 + 16))
        {
          if (*(unsigned char *)(v47 + 18))
          {
            unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
            uint64_t v6 = a5;
            uint64_t v51 = v47;
            while (1)
            {
              uint64_t v54 = *(unsigned __int16 *)(v51 + 16);
              if (!*(_WORD *)(v51 + 16)) {
                goto LABEL_201;
              }
              uint64_t v55 = *(void *)(v51 + 40);
              BOOL v15 = __OFSUB__(v6, v55);
              uint64_t v56 = v6 - v55;
              if (v15) {
                goto LABEL_168;
              }
              if (v56 <= 0)
              {
                uint64_t v52 = 0;
              }
              else
              {
                if (v54 == 1) {
                  goto LABEL_203;
                }
                uint64_t v57 = *(void *)(v51 + 64);
                uint64_t v6 = v56 - v57;
                if (__OFSUB__(v56, v57)) {
                  goto LABEL_178;
                }
                if (v6 < 1)
                {
                  uint64_t v6 = v56;
                  uint64_t v52 = 1;
                }
                else
                {
                  if (v54 == 2) {
                    goto LABEL_203;
                  }
                  uint64_t v58 = (void *)(v51 + 88);
                  uint64_t v52 = 2;
                  while (1)
                  {
                    if (v54 == v52)
                    {
                      __break(1u);
LABEL_164:
                      __break(1u);
                      goto LABEL_165;
                    }
                    uint64_t v59 = v6 - *v58;
                    if (__OFSUB__(v6, *v58)) {
                      goto LABEL_164;
                    }
                    if (v59 < 1) {
                      break;
                    }
                    ++v52;
                    v58 += 3;
                    uint64_t v6 = v59;
                    if (v54 == v52) {
                      goto LABEL_203;
                    }
                  }
                }
              }
              char v53 = (4 * *(unsigned char *)(v51 + 18) + 8) & 0x3C;
              uint64_t v50 = ((-15 << v53) - 1) & v50 | (v52 << v53);
              uint64_t v9 = *(void *)(v51 + 24 + 24 * v52);
              swift_unknownObjectRetain();
              unint64_t result = (uint64_t *)swift_unknownObjectRelease();
              uint64_t v51 = v9;
              if (!*(unsigned char *)(v9 + 18)) {
                goto LABEL_145;
              }
            }
          }
          unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
          uint64_t v50 = 0;
          uint64_t v6 = a5;
          uint64_t v9 = v47;
LABEL_145:
          uint64_t v70 = *(unsigned __int16 *)(v9 + 16);
          if (!*(_WORD *)(v9 + 16)) {
            goto LABEL_204;
          }
          uint64_t v71 = *(void *)(v9 + 24);
          BOOL v15 = __OFSUB__(v6, v71);
          uint64_t v72 = v6 - v71;
          if (v15) {
            goto LABEL_191;
          }
          if (v72 <= 0)
          {
            uint64_t v75 = 0;
          }
          else
          {
            if (v70 == 1) {
              goto LABEL_206;
            }
            uint64_t v73 = *(void *)(v9 + 48);
            uint64_t v6 = v72 - v73;
            if (__OFSUB__(v72, v73)) {
              goto LABEL_196;
            }
            if (v6 >= 1)
            {
              if (v70 == 2) {
                goto LABEL_206;
              }
              uint64_t v74 = (void *)(v9 + 72);
              uint64_t v75 = 2;
              while (v70 != v75)
              {
                uint64_t v76 = v6 - *v74;
                if (__OFSUB__(v6, *v74)) {
                  goto LABEL_175;
                }
                if (v76 < 1) {
                  goto LABEL_160;
                }
                ++v75;
                v74 += 3;
                uint64_t v6 = v76;
                if (v70 == v75) {
                  goto LABEL_206;
                }
              }
              goto LABEL_174;
            }
            uint64_t v6 = v72;
            uint64_t v75 = 1;
          }
LABEL_160:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v8 = v50 & 0xFFFFFFFFFFFFF0FFLL | (v75 << 8);
        }
        else
        {
          unint64_t v8 = ((-15 << ((4 * v50 + 8) & 0x3C)) - 1) & v50 | ((unint64_t)*(unsigned __int16 *)(v47 + 16) << ((4 * v50 + 8) & 0x3C));
          swift_unknownObjectRetain();
          uint64_t v6 = 0;
          uint64_t v9 = 0;
        }
        swift_unknownObjectRetain();
        uint64_t v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v80, v8, v9, v47, v49);
        unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        uint64_t v44 = a5;
        a3 = v84;
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t v9 = 0;
        unint64_t v8 = 0;
        uint64_t v10 = 0;
      }
      uint64_t v11 = v44 - v6;
      uint64_t v46 = a2;
      if (__OFSUB__(v44, v6)) {
        goto LABEL_189;
      }
LABEL_95:
      --v45;
      uint64_t v7 = v80;
      if (v45 <= v46) {
        goto LABEL_162;
      }
    }
  }
  if (!a2)
  {
LABEL_162:
    *a6 = v7;
    a6[1] = v8;
    a6[2] = v9;
    a6[3] = v10;
    a6[4] = v11;
    return result;
  }
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = a3[8];
    uint64_t v6 = a3[10];
    uint64_t v14 = a3[11];
    uint64_t v86 = v7;
    unint64_t v87 = v8;
    uint64_t v88 = v9;
    BOOL v15 = __OFADD__(v10++, 1);
    if (v15) {
      goto LABEL_169;
    }
    if (v7 != v14) {
      break;
    }
    if (v9)
    {
      uint64_t v6 = *(void *)(v9 + 24 * ((v8 >> ((4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      uint64_t v6 = specialized Rope._Node.subscript.getter(v8, v13);
    }
    swift_bridgeObjectRelease();
    unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    BOOL v15 = __OFADD__(v11, v6);
    v11 += v6;
    if (v15) {
      goto LABEL_171;
    }
    if (!v13) {
      goto LABEL_172;
    }
    unint64_t v16 = ((-15 << ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v13 + 18) | ((unint64_t)*(unsigned __int16 *)(v13 + 16) << ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C));
    unint64_t result = (uint64_t *)swift_unknownObjectRetain();
    if (v8 >= v16) {
      goto LABEL_172;
    }
    if (v9
      && (char v17 = (4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C, v18 = ((v8 >> v17) & 0xF) + 1,
                                                      v18 < *(unsigned __int16 *)(v9 + 16)))
    {
      unint64_t v8 = (v18 << v17) | ((-15 << v17) - 1) & v8;
      unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
    }
    else
    {
      int v19 = *(unsigned __int8 *)(v13 + 18);
      uint64_t v6 = (4 * (_BYTE)v19 + 8) & 0x3C;
      uint64_t v20 = (v8 >> v6) & 0xF;
      uint64_t v85 = v20;
      if (v19)
      {
        uint64_t v6 = v13 + 24;
        swift_unknownObjectRetain();
        char v21 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v13 + 24, &v85, (uint64_t)&v86, v13, v19);
        swift_unknownObjectRelease();
        if ((v21 & 1) == 0) {
          goto LABEL_27;
        }
        unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        uint64_t v7 = v86;
        unint64_t v8 = v87;
        uint64_t v9 = v88;
      }
      else
      {
        uint64_t v22 = v20 + 1;
        if (v20 + 1 >= (unint64_t)*(unsigned __int16 *)(v13 + 16))
        {
LABEL_27:
          int v24 = *(unsigned __int8 *)(v13 + 18);
          uint64_t v6 = *(unsigned __int16 *)(v13 + 16);
          unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
          unint64_t v8 = ((-15 << ((4 * v24 + 8) & 0x3C)) - 1) & v24 | (unint64_t)(v6 << ((4 * v24 + 8) & 0x3C));
          uint64_t v23 = a5;
          a3 = v84;
          uint64_t v9 = 0;
          uint64_t v86 = v7;
          if (v11 < a5) {
            goto LABEL_6;
          }
          goto LABEL_28;
        }
        unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        unint64_t v8 = (v22 << v6) | ((-15 << v6) - 1) & v8;
        uint64_t v9 = v13;
      }
    }
    uint64_t v23 = a5;
    a3 = v84;
    if (v11 < a5) {
      goto LABEL_6;
    }
LABEL_28:
    uint64_t v25 = a3[8];
    if (a4 != v23)
    {
      uint64_t v7 = a3[11];
      if (v25)
      {
        uint64_t v9 = 0;
        uint64_t v10 = a3[9];
        uint64_t v11 = a3[10];
        unint64_t v8 = ((-15 << ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v25 + 18) | ((unint64_t)*(unsigned __int16 *)(v25 + 16) << ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C));
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
      goto LABEL_6;
    }
    if (v25) {
      uint64_t v26 = a3[10];
    }
    else {
      uint64_t v26 = 0;
    }
    if (a4 < 0 || v26 < a4) {
      goto LABEL_186;
    }
    uint64_t v27 = a3[11];
    if (v25)
    {
      uint64_t v78 = a3[9];
      uint64_t v28 = *(unsigned __int8 *)(v25 + 18);
      if (*(_WORD *)(v25 + 16) && a3[10] > a4)
      {
        if (*(unsigned char *)(v25 + 18))
        {
          unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
          uint64_t v6 = a4;
          uint64_t v29 = v25;
          while (1)
          {
            uint64_t v31 = *(unsigned __int16 *)(v29 + 16);
            if (!*(_WORD *)(v29 + 16)) {
              goto LABEL_40;
            }
            uint64_t v32 = *(void *)(v29 + 40);
            uint64_t v33 = v6 - v32;
            if (__OFSUB__(v6, v32)) {
              goto LABEL_176;
            }
            if (__OFADD__(v33, 1)) {
              goto LABEL_177;
            }
            if (v33 + 1 <= 0)
            {
              uint64_t v31 = 0;
            }
            else
            {
              if (v31 == 1)
              {
                v6 -= v32;
LABEL_40:
                if (v6) {
                  goto LABEL_173;
                }
                goto LABEL_41;
              }
              uint64_t v34 = *(void *)(v29 + 64);
              BOOL v15 = __OFSUB__(v33, v34);
              uint64_t v35 = v33 - v34;
              if (v15) {
                goto LABEL_184;
              }
              if (__OFADD__(v35, 1)) {
                goto LABEL_185;
              }
              if (v35 + 1 >= 1)
              {
                if (v31 != 2)
                {
                  uint64_t v36 = (void *)(v29 + 88);
                  uint64_t v37 = 2;
                  while (v31 != v37)
                  {
                    uint64_t v6 = v35 - *v36;
                    if (__OFSUB__(v35, *v36)) {
                      goto LABEL_166;
                    }
                    if (__OFADD__(v6, 1)) {
                      goto LABEL_167;
                    }
                    if (v6 + 1 < 1)
                    {
                      uint64_t v31 = v37;
                      uint64_t v6 = v35;
                      goto LABEL_41;
                    }
                    ++v37;
                    v36 += 3;
                    uint64_t v35 = v6;
                    if (v31 == v37) {
                      goto LABEL_40;
                    }
                  }
LABEL_165:
                  __break(1u);
LABEL_166:
                  __break(1u);
LABEL_167:
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
                  goto LABEL_170;
                }
                uint64_t v6 = v35;
                goto LABEL_40;
              }
              uint64_t v31 = 1;
              uint64_t v6 = v33;
            }
LABEL_41:
            char v30 = (4 * *(unsigned char *)(v29 + 18) + 8) & 0x3C;
            uint64_t v28 = ((-15 << v30) - 1) & v28 | (v31 << v30);
            uint64_t v9 = *(void *)(v29 + 24 + 24 * v31);
            swift_unknownObjectRetain();
            unint64_t result = (uint64_t *)swift_unknownObjectRelease();
            uint64_t v29 = v9;
            if (!*(unsigned char *)(v9 + 18)) {
              goto LABEL_66;
            }
          }
        }
        unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
        uint64_t v28 = 0;
        uint64_t v6 = a4;
        uint64_t v9 = v25;
LABEL_66:
        uint64_t v38 = *(unsigned __int16 *)(v9 + 16);
        if (*(_WORD *)(v9 + 16))
        {
          uint64_t v39 = *(void *)(v9 + 24);
          BOOL v15 = __OFSUB__(v6, v39);
          uint64_t v40 = v6 - v39;
          if (v15) {
            goto LABEL_197;
          }
          if (__OFADD__(v40, 1)) {
            goto LABEL_198;
          }
          if (v40 + 1 <= 0)
          {
            uint64_t v38 = 0;
            goto LABEL_88;
          }
          if (v38 != 1)
          {
            uint64_t v41 = *(void *)(v9 + 48);
            uint64_t v6 = v40 - v41;
            if (__OFSUB__(v40, v41)) {
              goto LABEL_199;
            }
            if (__OFADD__(v6, 1)) {
              goto LABEL_200;
            }
            if (v6 + 1 >= 1)
            {
              if (v38 != 2)
              {
                unint64_t v42 = (void *)(v9 + 72);
                uint64_t v43 = 2;
                while (v38 != v43)
                {
                  uint64_t v40 = v6 - *v42;
                  if (__OFSUB__(v6, *v42)) {
                    goto LABEL_193;
                  }
                  if (__OFADD__(v40, 1)) {
                    goto LABEL_194;
                  }
                  if (v40 + 1 < 1)
                  {
                    uint64_t v38 = v43;
                    goto LABEL_88;
                  }
                  ++v43;
                  v42 += 3;
                  uint64_t v6 = v40;
                  if (v38 == v43) {
                    goto LABEL_76;
                  }
                }
                goto LABEL_192;
              }
              goto LABEL_75;
            }
            uint64_t v38 = 1;
            uint64_t v6 = v40;
LABEL_88:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v8 = v28 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
LABEL_89:
            swift_unknownObjectRetain();
            uint64_t v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v27, v8, v9, v25, v78);
            unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
            a3 = v84;
            goto LABEL_90;
          }
        }
        else
        {
LABEL_75:
          uint64_t v40 = v6;
        }
LABEL_76:
        if (v40) {
          goto LABEL_195;
        }
        uint64_t v6 = 0;
        goto LABEL_88;
      }
      unint64_t v8 = ((-15 << ((4 * v28 + 8) & 0x3C)) - 1) & v28 | ((unint64_t)*(unsigned __int16 *)(v25 + 16) << ((4 * v28 + 8) & 0x3C));
      swift_unknownObjectRetain();
      uint64_t v6 = 0;
      uint64_t v9 = 0;
      goto LABEL_89;
    }
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    unint64_t v8 = 0;
    uint64_t v10 = 0;
LABEL_90:
    uint64_t v11 = a4 - v6;
    if (__OFSUB__(a4, v6)) {
      goto LABEL_187;
    }
    uint64_t v7 = v27;
LABEL_6:
    if (++v12 == a2) {
      goto LABEL_162;
    }
  }
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  if (!v6) {
    __break(1u);
  }
LABEL_203:
  __break(1u);
LABEL_204:
  if (!v6) {
    __break(1u);
  }
LABEL_206:
  __break(1u);
  return result;
}

char *specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>(char **a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a2;
  if (a2 < 0)
  {
    uint64_t v20 = 0;
    char v21 = a1[2];
    uint64_t v22 = a1[3];
    uint64_t v23 = *a1;
    unint64_t result = a1[1];
    int v24 = (char *)*a3;
    uint64_t v25 = a1[3];
    uint64_t v26 = *a1;
    while (1)
    {
      if (v26 == v24) {
        goto LABEL_41;
      }
      if (v26 == result)
      {
        if (!v22)
        {
          uint64_t v26 = result;
          goto LABEL_24;
        }
        BOOL v15 = __OFSUB__(v22--, 1);
        if (v15) {
          goto LABEL_47;
        }
        char v27 = *(unsigned char *)(a4 + 24);
        unint64_t result = (char *)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, v22);
        char v21 = &result[v28];
        BOOL v29 = __OFADD__(result, v28);
        if (v27)
        {
          if (v29) {
            goto LABEL_49;
          }
          if ((uint64_t)v21 < (uint64_t)result) {
            goto LABEL_50;
          }
        }
        else
        {
          if (v29) {
            goto LABEL_51;
          }
          if ((uint64_t)v21 < (uint64_t)result) {
            goto LABEL_52;
          }
        }
        uint64_t v23 = v21 - 1;
        if (__OFSUB__(v21, 1)) {
          goto LABEL_48;
        }
        uint64_t v25 = v22;
      }
      else
      {
        uint64_t v23 = v26 - 1;
        if (__OFSUB__(v26, 1))
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
          return result;
        }
      }
      uint64_t v26 = v23;
LABEL_24:
      if (--v20 <= v6)
      {
        char v30 = a1[4];
        *(void *)a5 = v23;
        *(void *)(a5 + 8) = result;
        *(void *)(a5 + 16) = v21;
        *(void *)(a5 + 24) = v25;
        *(void *)(a5 + 32) = v30;
        goto LABEL_43;
      }
    }
  }
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  unint64_t result = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v13 = *a1;
  if (a2)
  {
    uint64_t v14 = (char *)*a3;
    while (v13 != v14)
    {
      BOOL v15 = __OFADD__(v13++, 1);
      if (v15)
      {
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      if (v13 == v12)
      {
        unint64_t v16 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_45;
        }
        uint64_t v13 = v12;
        if (v16 != v10)
        {
          char v17 = *(unsigned char *)(a4 + 24);
          unint64_t result = (char *)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, v9 + 1);
          uint64_t v12 = &result[v18];
          BOOL v19 = __OFADD__(result, v18);
          if (v17)
          {
            if (v19) {
              goto LABEL_53;
            }
            uint64_t v9 = v16;
            uint64_t v13 = result;
            if ((uint64_t)v12 < (uint64_t)result) {
              goto LABEL_54;
            }
          }
          else
          {
            if (v19) {
              goto LABEL_55;
            }
            uint64_t v9 = v16;
            uint64_t v13 = result;
            if ((uint64_t)v12 < (uint64_t)result)
            {
              __break(1u);
              goto LABEL_20;
            }
          }
        }
      }
      if (!--v6) {
        goto LABEL_20;
      }
    }
LABEL_41:
    *(void *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(unsigned char *)(a5 + 40) = 1;
  }
  else
  {
LABEL_20:
    *(void *)a5 = v13;
    *(void *)(a5 + 8) = result;
    *(void *)(a5 + 16) = v12;
    *(void *)(a5 + 24) = v9;
    *(void *)(a5 + 32) = v10;
LABEL_43:
    *(unsigned char *)(a5 + 40) = 0;
  }
  return result;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v185 = a6;
  uint64_t v11 = a5;
  uint64_t v12 = a4;
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v15 = result;
  uint64_t v184 = a10;
  if ((a5 & 0x8000000000000000) == 0)
  {
    *(void *)&long long v235 = result;
    *((void *)&v235 + 1) = a2;
    *(void *)&long long v236 = a3;
    *((void *)&v236 + 1) = a4;
    if (a5)
    {
      while (1)
      {
        unint64_t result = static BigString.Index.== infix(_:_:)();
        if (result) {
          break;
        }
        unint64_t result = specialized Collection.formIndex(after:)((uint64_t *)&v235);
        if (!--v11)
        {
          uint64_t v14 = *((void *)&v235 + 1);
          uint64_t v15 = v235;
          uint64_t v12 = *((void *)&v236 + 1);
          uint64_t v13 = v236;
          goto LABEL_6;
        }
      }
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      a9[3] = 2;
    }
    else
    {
LABEL_6:
      *a9 = v15;
      a9[1] = v14;
      a9[2] = v13;
      a9[3] = v12;
    }
    return result;
  }
  uint64_t v173 = a7;
  uint64_t v174 = a8;
  uint64_t v171 = a5;
  uint64_t v172 = v10;
  uint64_t v17 = 0;
  uint64_t v166 = a9;
  uint64_t v167 = &v218;
  uint64_t v189 = &v221;
  uint64_t v200 = (long long *)&v210;
LABEL_8:
  uint64_t v181 = v17;
  unint64_t result = static BigString.Index.== infix(_:_:)();
  if (result)
  {
    uint64_t v164 = v166;
    uint64_t *v166 = 0;
    v164[1] = 0;
    v164[2] = 0;
    v164[3] = 2;
    return result;
  }
  long long v18 = v172[11];
  long long v245 = v172[10];
  long long v246 = v18;
  uint64_t v19 = *((void *)v172 + 25);
  uint64_t v247 = *((void *)v172 + 24);
  long long v20 = v172[7];
  long long v241 = v172[6];
  long long v242 = v20;
  long long v21 = v172[9];
  long long v243 = v172[8];
  long long v244 = v21;
  long long v22 = v172[3];
  long long v237 = v172[2];
  long long v238 = v22;
  long long v23 = v172[5];
  long long v239 = v172[4];
  long long v240 = v23;
  long long v24 = v172[1];
  long long v235 = *v172;
  long long v236 = v24;
  uint64_t v234 = v19;
  uint64_t v187 = v13;
  uint64_t v25 = *((void *)&v243 + 1);
  long long v26 = v244;
  uint64_t v199 = v15;
  uint64_t v27 = v245;
  uint64_t v202 = v247;
  outlined retain of AttributedString.Runs((uint64_t)&v235);
  uint64_t v178 = v25;
  long long v179 = v26;
  uint64_t v180 = v27;
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
    goto LABEL_193;
  }
  uint64_t v28 = v14;
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
    uint64_t v182 = v234;
    if (!*(void *)(v234 + 16)) {
      goto LABEL_195;
    }
    uint64_t v29 = *(void *)(v234 + 16);
    uint64_t v30 = v235;
    uint64_t v32 = *(void *)(v235 + 64);
    uint64_t v31 = *(void *)(v235 + 72);
    uint64_t v34 = *(void *)(v235 + 80);
    uint64_t v33 = *(void *)(v235 + 88);
    swift_unknownObjectRetain();
    uint64_t v193 = v12;
    uint64_t v35 = BigString.Index.utf8Offset.getter();
    uint64_t v36 = v35 - 1;
    if (__OFSUB__(v35, 1)) {
      goto LABEL_196;
    }
    if (v32) {
      uint64_t v37 = v34;
    }
    else {
      uint64_t v37 = 0;
    }
    if (v36 < 0 || v37 < v36) {
      goto LABEL_197;
    }
    uint64_t v192 = v28;
    uint64_t v186 = v30;
    uint64_t v188 = v33;
    uint64_t v194 = v29;
    if (!v32)
    {
      uint64_t v195 = 0;
      unint64_t v198 = 0;
      uint64_t v52 = 0;
      goto LABEL_73;
    }
    uint64_t v201 = v31;
    uint64_t v202 = v34;
    uint64_t v38 = *(unsigned __int16 *)(v32 + 16);
    uint64_t v39 = *(unsigned __int8 *)(v32 + 18);
    if (!*(_WORD *)(v32 + 16) || v36 >= v202)
    {
      uint64_t v41 = v32;
      uint64_t v32 = 0;
      uint64_t v43 = 0;
      unint64_t v53 = ((-15 << ((4 * v39 + 8) & 0x3C)) - 1) & v39 | (unint64_t)(v38 << ((4 * v39 + 8) & 0x3C));
LABEL_72:
      swift_unknownObjectRetain();
      unint64_t v198 = v53;
      uint64_t v195 = v43;
      uint64_t v52 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v33, v53, v43, v41, v201);
      swift_unknownObjectRelease_n();
      uint64_t v30 = v186;
LABEL_73:
      uint64_t v60 = v36 - v32;
      if (__OFSUB__(v36, v32)) {
        goto LABEL_198;
      }
      if (v33 != *(void *)(v30 + 88)) {
        goto LABEL_199;
      }
      if (v195)
      {
        unint64_t v61 = v195 + 24 * ((v198 >> ((4 * *(unsigned char *)(v195 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v62 = *(void *)(v61 + 32);
        uint64_t v63 = *(void *)(v61 + 40);
        swift_bridgeObjectRetain();
        unint64_t result = swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v64 = *(void *)(v30 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v198, v64);
        uint64_t v63 = v65;
        uint64_t v62 = v66;
        unint64_t result = swift_unknownObjectRelease();
      }
      if (*((uint64_t *)&v235 + 1) >= v52)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_176;
      }
      uint64_t v168 = *((void *)&v235 + 1);
      uint64_t v169 = v63;
      uint64_t v175 = (uint64_t *)(v182 + 40);
      uint64_t v67 = v194;
      uint64_t v68 = v188;
      uint64_t v201 = v62;
LABEL_80:
      uint64_t v69 = *(void *)(v30 + 64);
      uint64_t v70 = *(uint64_t **)(v30 + 72);
      uint64_t v72 = *(void *)(v30 + 80);
      uint64_t v71 = *(void *)(v30 + 88);
      uint64_t v217 = v68;
      unint64_t v73 = v198;
      uint64_t v218 = v198;
      uint64_t v74 = v195;
      unint64_t v219 = v195;
      if (v68 != v71) {
        goto LABEL_202;
      }
      uint64_t v75 = v68;
      uint64_t v202 = v72;
      uint64_t v183 = v52;
      if (v69)
      {
        unint64_t v76 = *(unsigned __int8 *)(v69 + 18);
        unint64_t result = swift_unknownObjectRetain();
        unint64_t v73 = v198;
        uint64_t v74 = v195;
        if (v198 <= v76) {
          goto LABEL_203;
        }
      }
      else if (!v198)
      {
        goto LABEL_203;
      }
      uint64_t v176 = v60;
      if (v74)
      {
        char v77 = (4 * *(unsigned char *)(v74 + 18) + 8) & 0x3C;
        if (((v73 >> v77) & 0xF) != 0)
        {
          uint64_t v78 = v60;
          unint64_t v79 = ((((v73 >> v77) & 0xF) - 1) << v77) | ((-15 << v77) - 1) & v73;
          uint64_t v218 = v79;
LABEL_133:
          char v118 = (4 * *(unsigned char *)(v74 + 18) + 8) & 0x3C;
          unint64_t v198 = v79;
          uint64_t v195 = v74;
          unint64_t v96 = *(void *)(v74 + 24 * ((v79 >> v118) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v97 = 0;
          goto LABEL_134;
        }
      }
      char v80 = (4 * *(unsigned char *)(v69 + 18) + 8) & 0x3C;
      unint64_t v81 = (v73 >> v80) & 0xF;
      if (!*(unsigned char *)(v69 + 18))
      {
        if (!v81) {
          goto LABEL_215;
        }
        unint64_t v79 = ((v81 - 1) << v80) | ((-15 << v80) - 1) & v73;
        uint64_t v218 = v79;
        unint64_t v219 = v69;
        uint64_t v74 = v69;
        uint64_t v30 = v186;
        uint64_t v78 = v60;
        if (v69) {
          goto LABEL_133;
        }
LABEL_99:
        unint64_t v95 = v79;
        swift_unknownObjectRetain();
        unint64_t v198 = v95;
        unint64_t v96 = specialized Rope._Node.subscript.getter(v95, v69);
        swift_unknownObjectRelease();
        uint64_t v195 = 0;
        char v97 = 1;
LABEL_134:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (__OFSUB__(v78, v96)) {
          goto LABEL_205;
        }
        if (v188 != *(void *)(v30 + 88)) {
          goto LABEL_206;
        }
        uint64_t v170 = v78 - v96;
        if (v97)
        {
          uint64_t v119 = *(void *)(v30 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v198, v119);
          uint64_t v202 = v120;
          unint64_t v177 = v121;
          swift_unknownObjectRelease();
        }
        else
        {
          unint64_t v122 = v195 + 24 * ((v198 >> ((4 * *(unsigned char *)(v195 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v123 = *(void *)(v122 + 40);
          uint64_t v202 = *(void *)(v122 + 32);
          swift_bridgeObjectRetain();
          unint64_t v177 = v123;
          swift_bridgeObjectRetain();
        }
        uint64_t v124 = (uint64_t)v189;
        uint64_t v125 = v201;
        --v183;
        swift_bridgeObjectRetain();
        uint64_t v126 = 0;
        uint64_t v127 = v175;
        while (1)
        {
          uint64_t v129 = v126 + 1;
          if (__OFADD__(v126, 1))
          {
            __break(1u);
            goto LABEL_185;
          }
          uint64_t v130 = *(v127 - 1);
          uint64_t v131 = *v127;
          if (*(void *)(v125 + 16))
          {
            swift_bridgeObjectRetain_n();
            unint64_t v132 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v131);
            if (v133)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v125 + 56) + 72 * v132, (uint64_t)&v228);
            }
            else
            {
              uint64_t v232 = 0;
              long long v230 = 0u;
              long long v231 = 0u;
              long long v228 = 0u;
              long long v229 = 0u;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v232 = 0;
            long long v230 = 0u;
            long long v231 = 0u;
            long long v228 = 0u;
            long long v229 = 0u;
            swift_bridgeObjectRetain();
          }
          uint64_t v134 = v202;
          if (*(void *)(v202 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v135 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v131);
            if (v136)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v134 + 56) + 72 * v135, (uint64_t)&v223);
            }
            else
            {
              uint64_t v227 = 0;
              long long v225 = 0u;
              long long v226 = 0u;
              long long v223 = 0u;
              long long v224 = 0u;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v227 = 0;
            long long v225 = 0u;
            long long v226 = 0u;
            long long v223 = 0u;
            long long v224 = 0u;
          }
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v228, (uint64_t)&v217, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v223, v124, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v220)
          {
            if (v222) {
              goto LABEL_174;
            }
            outlined destroy of Any?((uint64_t)&v217, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v223, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v228, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_143;
          }
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v217, (uint64_t)v216, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v222)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v216);
LABEL_174:
            outlined destroy of Any?((uint64_t)&v217, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v223, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v228, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_175:
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v234);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v30 = v186;
            uint64_t v60 = v176;
            goto LABEL_176;
          }
          long long v137 = *(_OWORD *)(v124 + 48);
          v214[2] = *(_OWORD *)(v124 + 32);
          v214[3] = v137;
          uint64_t v215 = *(void *)(v124 + 64);
          long long v138 = *(_OWORD *)(v124 + 16);
          v214[0] = *(_OWORD *)v124;
          v214[1] = v138;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v216, (uint64_t)v213);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v214, (uint64_t)v212);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v213, (uint64_t)&v208, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v212, (uint64_t)v200, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v209)
          {
            if (!v211)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v208);
LABEL_141:
              char v128 = 0;
              goto LABEL_142;
            }
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v208, (uint64_t)v205);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v200, (uint64_t)v204);
            uint64_t v139 = v206;
            uint64_t v191 = v207;
            uint64_t v190 = (uint64_t)__swift_project_boxed_opaque_existential_1(v205, v206);
            uint64_t v197 = &v165;
            uint64_t v140 = *(void *)(v139 - 8);
            MEMORY[0x1F4188790](v190);
            uint64_t v142 = (char *)&v165 - ((v141 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v204, (uint64_t)&v203);
            uint64_t v143 = type metadata accessor for Optional();
            long long v196 = &v165;
            uint64_t v144 = *(void *)(v143 - 8);
            MEMORY[0x1F4188790](v143);
            uint64_t v146 = (char *)&v165 - v145;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            int v147 = swift_dynamicCast();
            uint64_t v148 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56);
            if (v147)
            {
              v148(v146, 0, 1, v139);
              (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v142, v146, v139);
              char v128 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v140 + 8))(v142, v139);
            }
            else
            {
              v148(v146, 1, 1, v139);
              (*(void (**)(char *, uint64_t))(v144 + 8))(v146, v143);
              char v128 = 0;
            }
            uint64_t v67 = v194;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v204);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
            uint64_t v124 = (uint64_t)v189;
          }
          else
          {
            if (v211)
            {
              outlined destroy of Any?((uint64_t)v200, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_141;
            }
            char v128 = 1;
          }
LABEL_142:
          outlined destroy of Any?((uint64_t)v212, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)v213, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v214);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v216);
          outlined destroy of Any?((uint64_t)&v217, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v223, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v228, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v128 & 1) == 0) {
            goto LABEL_175;
          }
LABEL_143:
          v127 += 2;
          ++v126;
          uint64_t v125 = v201;
          if (v129 == v67)
          {
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v234);
            swift_bridgeObjectRelease();
            unint64_t result = swift_bridgeObjectRelease();
            uint64_t v60 = v170;
            uint64_t v52 = v183;
            uint64_t v30 = v186;
            uint64_t v68 = v188;
            if (v168 < v183) {
              goto LABEL_80;
            }
            uint64_t v60 = v170;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_176:
            long long v149 = *(_OWORD *)(v30 + 16);
            long long v150 = *(_OWORD *)(v30 + 48);
            v248[1] = *(_OWORD *)(v30 + 32);
            v248[2] = v150;
            v248[0] = v149;
            long long v151 = *(_OWORD *)(v30 + 16);
            v249[1] = *(_OWORD *)(v30 + 32);
            v249[2] = v150;
            v249[0] = v151;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v249, (uint64_t)v250);
            outlined retain of Locale((uint64_t)v250);
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)v248);
            if (__OFSUB__(v60, BigString.Index.utf8Offset.getter())) {
              goto LABEL_200;
            }
            uint64_t v152 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v154 = v153;
            uint64_t v156 = v155;
            uint64_t v158 = v157;
            outlined release of Locale((uint64_t)&v233);
            uint64_t v159 = v178;
            long long v161 = v179;
            uint64_t v160 = v180;
            if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
            {
              uint64_t v152 = v159;
              uint64_t v156 = *((void *)&v161 + 1);
              uint64_t v154 = v161;
              uint64_t v158 = v160;
            }
            char v162 = static BigString.Index.< infix(_:_:)();
            unint64_t result = outlined release of AttributedString.Runs((uint64_t)&v235);
            if (v162) {
              goto LABEL_201;
            }
            uint64_t v17 = v181 - 1;
            uint64_t v15 = v152;
            uint64_t v14 = v154;
            uint64_t v13 = v156;
            uint64_t v12 = v158;
            if (v181 - 1 <= v171)
            {
              uint64_t v163 = v166;
              uint64_t *v166 = v152;
              v163[1] = v154;
              v163[2] = v156;
              v163[3] = v158;
              return result;
            }
            goto LABEL_8;
          }
        }
      }
      uint64_t v82 = v69 + 24;
      if (v81 >= *(unsigned __int16 *)(v69 + 16))
      {
        unint64_t result = swift_unknownObjectRetain();
        if (!v81) {
          goto LABEL_211;
        }
LABEL_127:
        uint64_t v111 = *(void *)(v82 + 24 * ((int)v81 - 1));
        if (!*(_WORD *)(v111 + 16)) {
          goto LABEL_212;
        }
        uint64_t v112 = *(unsigned __int16 *)(v111 + 16) - 1;
        int v113 = *(unsigned __int8 *)(v111 + 18);
        uint64_t v218 = ((-15 << ((4 * v113 + 8) & 0x3C)) - 1) & (v218 & ((-15 << v80) - 1) | ((v81 - 1) << v80)) | (v112 << ((4 * v113 + 8) & 0x3C));
        if (v113)
        {
          uint64_t v114 = v60;
          uint64_t v115 = v111 + 24;
          swift_unknownObjectRetain();
          uint64_t v116 = v115;
          uint64_t v60 = v114;
          uint64_t v75 = v188;
          uint64_t v117 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v116, v112, v167);
          swift_unknownObjectRelease();
          uint64_t v111 = v117;
        }
        uint64_t v30 = v186;
        uint64_t v67 = v194;
        unint64_t v94 = v111;
        unint64_t v219 = v111;
LABEL_131:
        swift_unknownObjectRelease();
        if (v217 != v75) {
          goto LABEL_204;
        }
        unint64_t v79 = v218;
        uint64_t v74 = v94;
        uint64_t v78 = v60;
        if (v94) {
          goto LABEL_133;
        }
        goto LABEL_99;
      }
      unint64_t v83 = *(void *)(v82 + 24 * ((v73 >> v80) & 0xF));
      char v84 = (4 * *(unsigned char *)(v83 + 18) + 8) & 0x3C;
      unint64_t v85 = (v73 >> v84) & 0xF;
      if (!*(unsigned char *)(v83 + 18))
      {
        if (v85)
        {
          uint64_t v218 = ((v85 - 1) << v84) | ((-15 << v84) - 1) & v73;
          unint64_t v219 = v83;
          swift_unknownObjectRetain();
          unint64_t v94 = v83;
          uint64_t v30 = v186;
          uint64_t v67 = v194;
          uint64_t v75 = v188;
          uint64_t v60 = v176;
          goto LABEL_131;
        }
        unint64_t result = swift_unknownObjectRetain();
        goto LABEL_126;
      }
      unint64_t v86 = v83 + 24;
      if (v85 >= *(unsigned __int16 *)(v83 + 16))
      {
        swift_unknownObjectRetain();
        unint64_t result = swift_unknownObjectRetain();
        if (!v85)
        {
LABEL_125:
          unint64_t result = swift_unknownObjectRelease();
LABEL_126:
          uint64_t v75 = v188;
          uint64_t v60 = v176;
          if (!v81) {
            goto LABEL_211;
          }
          goto LABEL_127;
        }
LABEL_105:
        uint64_t v98 = *(void *)(v86 + 24 * ((int)v85 - 1));
        uint64_t v99 = *(unsigned __int16 *)(v98 + 16);
        if (!*(_WORD *)(v98 + 16)) {
          goto LABEL_218;
        }
        unint64_t v198 = v83;
        uint64_t v100 = v99 - 1;
        int v101 = *(unsigned __int8 *)(v98 + 18);
        uint64_t v218 = ((-15 << ((4 * v101 + 8) & 0x3C)) - 1) & (v218 & ((-15 << v84) - 1) | ((v85 - 1) << v84)) | (v100 << ((4 * v101 + 8) & 0x3C));
        uint64_t v30 = v186;
        uint64_t v67 = v194;
        if (v101)
        {
          uint64_t v102 = v98 + 24;
          swift_unknownObjectRetain();
          uint64_t v103 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v102, v100, v167);
          swift_unknownObjectRelease();
          uint64_t v98 = v103;
        }
        uint64_t v75 = v188;
        unint64_t v94 = v98;
        unint64_t v219 = v98;
        goto LABEL_122;
      }
      uint64_t v197 = v70;
      unint64_t v198 = v83 + 24;
      unint64_t v87 = *(void *)(v86 + 24 * ((v73 >> v84) & 0xF));
      uint64_t v88 = (4 * *(unsigned char *)(v87 + 18) + 8) & 0x3C;
      unint64_t v89 = (v73 >> v88) & 0xF;
      if (!*(unsigned char *)(v87 + 18))
      {
        if (v89)
        {
          uint64_t v218 = ((v89 - 1) << v88) | ((-15 << v88) - 1) & v73;
          unint64_t v219 = v87;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          unint64_t v94 = v87;
          uint64_t v30 = v186;
          uint64_t v67 = v194;
          uint64_t v75 = v188;
LABEL_122:
          swift_unknownObjectRelease();
          uint64_t v60 = v176;
          goto LABEL_131;
        }
        swift_unknownObjectRetain();
        unint64_t result = swift_unknownObjectRetain();
LABEL_124:
        unint64_t v86 = v198;
        if (!v85) {
          goto LABEL_125;
        }
        goto LABEL_105;
      }
      if (v89 < *(unsigned __int16 *)(v87 + 16))
      {
        unint64_t v90 = *(void *)(v87 + 24 + 24 * ((v73 >> v88) & 0xF));
        int v91 = *(unsigned __int8 *)(v90 + 18);
        char v92 = (4 * v91 + 8) & 0x3C;
        uint64_t v93 = (v73 >> v92) & 0xF;
        *(void *)&long long v208 = v93;
        if (v91)
        {
          uint64_t v195 = v90;
          long long v196 = (uint64_t *)(v87 + 24);
          uint64_t v190 = v90 + 16;
          uint64_t v191 = v88;
          unint64_t v177 = v90 + 24;
          LODWORD(v170) = v91;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          LODWORD(v190) = specialized closure #1 in Rope._Node.formPredecessor(of:)(v190, v177, (uint64_t *)&v208, (uint64_t)&v217, v170);
          unint64_t result = swift_unknownObjectRelease();
          if (v190)
          {
            unint64_t v94 = v219;
LABEL_115:
            swift_unknownObjectRelease();
            uint64_t v30 = v186;
            uint64_t v67 = v194;
            uint64_t v75 = v188;
            goto LABEL_122;
          }
          goto LABEL_117;
        }
        if (v93)
        {
          uint64_t v218 = ((v93 - 1) << v92) | ((-15 << v92) - 1) & v73;
          unint64_t v94 = v90;
          unint64_t v219 = v90;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          goto LABEL_115;
        }
      }
      long long v196 = (uint64_t *)(v87 + 24);
      uint64_t v191 = v88;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRetain();
LABEL_117:
      if (v89)
      {
        unint64_t v104 = v89 - 1;
        uint64_t v105 = v196[3 * (int)v89 - 3];
        uint64_t v106 = *(unsigned __int16 *)(v105 + 16);
        if (!*(_WORD *)(v105 + 16)) {
          goto LABEL_219;
        }
        unint64_t v198 = v83;
        long long v196 = (uint64_t *)v87;
        uint64_t v107 = v106 - 1;
        int v108 = *(unsigned __int8 *)(v105 + 18);
        uint64_t v218 = ((-15 << ((4 * v108 + 8) & 0x3C)) - 1) & (v218 & ((-15 << v191) - 1) | (v104 << v191)) | (v107 << ((4 * v108 + 8) & 0x3C));
        uint64_t v30 = v186;
        uint64_t v67 = v194;
        if (v108)
        {
          uint64_t v109 = v105 + 24;
          swift_unknownObjectRetain();
          uint64_t v110 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v109, v107, v167);
          swift_unknownObjectRelease();
          uint64_t v105 = v110;
        }
        uint64_t v75 = v188;
        unint64_t v94 = v105;
        unint64_t v219 = v105;
        swift_unknownObjectRelease();
        goto LABEL_122;
      }
      unint64_t result = swift_unknownObjectRelease();
      goto LABEL_124;
    }
    if (*(unsigned char *)(v32 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t v40 = v32;
      uint64_t v32 = v36;
      uint64_t v41 = v40;
      while (1)
      {
        uint64_t v44 = *(unsigned __int16 *)(v40 + 16);
        if (*(_WORD *)(v40 + 16))
        {
          uint64_t v45 = *(void *)(v40 + 40);
          uint64_t v46 = v32 - v45;
          if (__OFSUB__(v32, v45)) {
            goto LABEL_189;
          }
          if (__OFADD__(v46, 1)) {
            goto LABEL_190;
          }
          if (v46 + 1 <= 0)
          {
            uint64_t v44 = 0;
            goto LABEL_25;
          }
          if (v44 == 1)
          {
            v32 -= v45;
          }
          else
          {
            uint64_t v47 = *(void *)(v40 + 64);
            BOOL v48 = __OFSUB__(v46, v47);
            uint64_t v49 = v46 - v47;
            if (v48) {
              goto LABEL_191;
            }
            if (__OFADD__(v49, 1)) {
              goto LABEL_192;
            }
            if (v49 + 1 < 1)
            {
              uint64_t v44 = 1;
              uint64_t v32 = v46;
              goto LABEL_25;
            }
            if (v44 != 2)
            {
              uint64_t v50 = (void *)(v40 + 88);
              uint64_t v51 = 2;
              while (v44 != v51)
              {
                uint64_t v32 = v49 - *v50;
                if (__OFSUB__(v49, *v50)) {
                  goto LABEL_186;
                }
                if (__OFADD__(v32, 1)) {
                  goto LABEL_187;
                }
                if (v32 + 1 < 1)
                {
                  uint64_t v44 = v51;
                  uint64_t v32 = v49;
                  goto LABEL_25;
                }
                ++v51;
                v50 += 3;
                uint64_t v49 = v32;
                if (v44 == v51) {
                  goto LABEL_24;
                }
              }
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
LABEL_193:
              __break(1u);
              goto LABEL_194;
            }
            uint64_t v32 = v49;
          }
        }
LABEL_24:
        if (v32) {
          goto LABEL_188;
        }
LABEL_25:
        char v42 = (4 * *(unsigned char *)(v40 + 18) + 8) & 0x3C;
        uint64_t v39 = ((-15 << v42) - 1) & v39 | (v44 << v42);
        uint64_t v43 = *(void *)(v40 + 24 + 24 * v44);
        swift_unknownObjectRetain();
        unint64_t result = swift_unknownObjectRelease();
        uint64_t v40 = v43;
        if (!*(unsigned char *)(v43 + 18)) {
          goto LABEL_49;
        }
      }
    }
    unint64_t result = swift_unknownObjectRetain_n();
    uint64_t v39 = 0;
    uint64_t v43 = v32;
    uint64_t v32 = v36;
    uint64_t v41 = v43;
LABEL_49:
    uint64_t v54 = *(unsigned __int16 *)(v43 + 16);
    if (!*(_WORD *)(v43 + 16)) {
      goto LABEL_58;
    }
    uint64_t v55 = *(void *)(v43 + 24);
    BOOL v48 = __OFSUB__(v32, v55);
    uint64_t v56 = v32 - v55;
    if (v48) {
      goto LABEL_213;
    }
    if (__OFADD__(v56, 1)) {
      goto LABEL_214;
    }
    if (v56 + 1 <= 0)
    {
      uint64_t v54 = 0;
    }
    else
    {
      if (v54 == 1)
      {
LABEL_59:
        if (v56) {
          goto LABEL_210;
        }
        uint64_t v32 = 0;
        goto LABEL_71;
      }
      uint64_t v57 = *(void *)(v43 + 48);
      uint64_t v32 = v56 - v57;
      if (__OFSUB__(v56, v57)) {
        goto LABEL_216;
      }
      if (__OFADD__(v32, 1)) {
        goto LABEL_217;
      }
      if (v32 + 1 >= 1)
      {
        if (v54 != 2)
        {
          uint64_t v58 = (void *)(v43 + 72);
          uint64_t v59 = 2;
          while (v54 != v59)
          {
            uint64_t v56 = v32 - *v58;
            if (__OFSUB__(v32, *v58)) {
              goto LABEL_208;
            }
            if (__OFADD__(v56, 1)) {
              goto LABEL_209;
            }
            if (v56 + 1 < 1)
            {
              uint64_t v54 = v59;
              goto LABEL_71;
            }
            ++v59;
            v58 += 3;
            uint64_t v32 = v56;
            if (v54 == v59) {
              goto LABEL_59;
            }
          }
          goto LABEL_207;
        }
LABEL_58:
        uint64_t v56 = v32;
        goto LABEL_59;
      }
      uint64_t v54 = 1;
      uint64_t v32 = v56;
    }
LABEL_71:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v53 = v39 & 0xFFFFFFFFFFFFF0FFLL | (v54 << 8);
    uint64_t v33 = v188;
    goto LABEL_72;
  }
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  __break(1u);
LABEL_211:
  unint64_t result = swift_unknownObjectRelease();
  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
  return result;
}

uint64_t *specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  unint64_t v85 = a4;
  uint64_t v7 = *result;
  unint64_t v8 = result[1];
  uint64_t v9 = result[2];
  uint64_t v10 = result[3];
  uint64_t v11 = result[4];
  uint64_t v84 = a2;
  if (a2 < 0)
  {
LABEL_94:
    uint64_t v49 = a6;
    uint64_t v50 = 0;
    while (1)
    {
      if (v11 == *(void *)(a3 + 32)) {
        goto LABEL_165;
      }
      uint64_t v51 = a4[8];
      if (v51)
      {
        if (v11 != a4[10]) {
          goto LABEL_127;
        }
      }
      else if (v11)
      {
LABEL_127:
        uint64_t v64 = a4[11];
        uint64_t v91 = v7;
        unint64_t v92 = v8;
        uint64_t v93 = v9;
        BOOL v15 = __OFSUB__(v10--, 1);
        if (v15) {
          goto LABEL_183;
        }
        if (v7 != v64) {
          goto LABEL_184;
        }
        if (v51)
        {
          unint64_t v65 = *(unsigned __int8 *)(v51 + 18);
          unint64_t result = (uint64_t *)swift_unknownObjectRetain();
          if (v8 <= v65) {
            goto LABEL_185;
          }
        }
        else if (!v8)
        {
          goto LABEL_185;
        }
        uint64_t v89 = v7;
        if (v9)
        {
          char v66 = (4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C;
          if (((v8 >> v66) & 0xF) != 0)
          {
            unint64_t v8 = ((((v8 >> v66) & 0xF) - 1) << v66) | ((-15 << v66) - 1) & v8;
            unint64_t v92 = v8;
            goto LABEL_140;
          }
        }
        int v67 = *(unsigned __int8 *)(v51 + 18);
        char v68 = (4 * v67 + 8) & 0x3C;
        uint64_t v69 = (v8 >> v68) & 0xF;
        uint64_t v90 = v69;
        if (v67)
        {
          uint64_t v7 = v51 + 16;
          swift_unknownObjectRetain();
          char v70 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v51 + 16, v51 + 24, &v90, (uint64_t)&v91, v67);
          unint64_t result = (uint64_t *)swift_unknownObjectRelease();
          if ((v70 & 1) == 0) {
            goto LABEL_193;
          }
          if (v91 != v89) {
            goto LABEL_186;
          }
          unint64_t v8 = v92;
          uint64_t v9 = v93;
          if (v93)
          {
LABEL_140:
            unint64_t v71 = v9 + 24 * ((v8 >> ((4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v72 = *(void *)(v71 + 24);
            uint64_t v7 = *(void *)(v71 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_144:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
            BOOL v15 = __OFSUB__(v11, v72);
            v11 -= v72;
            if (v15) {
              goto LABEL_187;
            }
            uint64_t v49 = a6;
            a2 = v84;
            a4 = v85;
            goto LABEL_97;
          }
        }
        else
        {
          if (!v69) {
            goto LABEL_193;
          }
          unint64_t v8 = ((v69 - 1) << v68) | ((-15 << v68) - 1) & v8;
          unint64_t v92 = v8;
          uint64_t v9 = v51;
          if (v51) {
            goto LABEL_140;
          }
        }
        swift_unknownObjectRetain();
        unint64_t v72 = specialized Rope._Node.subscript.getter(v8, v51);
        uint64_t v7 = v73;
        swift_unknownObjectRelease();
        goto LABEL_144;
      }
      if (v51) {
        uint64_t v52 = a4[10];
      }
      else {
        uint64_t v52 = 0;
      }
      if (v49 < 0 || v52 < v49) {
        goto LABEL_188;
      }
      uint64_t v89 = a4[11];
      if (v51)
      {
        uint64_t v53 = a4[9];
        uint64_t v54 = *(unsigned __int8 *)(v51 + 18);
        if (*(_WORD *)(v51 + 16))
        {
          if (*(unsigned char *)(v51 + 18))
          {
            unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
            uint64_t v7 = v49;
            uint64_t v55 = v51;
            while (1)
            {
              uint64_t v58 = *(unsigned __int16 *)(v55 + 16);
              if (!*(_WORD *)(v55 + 16)) {
                goto LABEL_204;
              }
              uint64_t v59 = *(void *)(v55 + 40);
              BOOL v15 = __OFSUB__(v7, v59);
              uint64_t v60 = v7 - v59;
              if (v15) {
                goto LABEL_169;
              }
              if (v60 <= 0)
              {
                uint64_t v56 = 0;
              }
              else
              {
                if (v58 == 1) {
                  goto LABEL_206;
                }
                uint64_t v61 = *(void *)(v55 + 64);
                uint64_t v7 = v60 - v61;
                if (__OFSUB__(v60, v61)) {
                  goto LABEL_175;
                }
                if (v7 >= 1)
                {
                  if (v58 == 2) {
                    goto LABEL_206;
                  }
                  uint64_t v62 = (void *)(v55 + 88);
                  uint64_t v56 = 2;
                  while (v58 != v56)
                  {
                    uint64_t v63 = v7 - *v62;
                    if (__OFSUB__(v7, *v62)) {
                      goto LABEL_168;
                    }
                    if (v63 < 1) {
                      goto LABEL_111;
                    }
                    ++v56;
                    v62 += 3;
                    uint64_t v7 = v63;
                    if (v58 == v56) {
                      goto LABEL_206;
                    }
                  }
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
                  goto LABEL_170;
                }
                uint64_t v7 = v60;
                uint64_t v56 = 1;
              }
LABEL_111:
              char v57 = (4 * *(unsigned char *)(v55 + 18) + 8) & 0x3C;
              uint64_t v54 = ((-15 << v57) - 1) & v54 | (v56 << v57);
              uint64_t v9 = *(void *)(v55 + 24 + 24 * v56);
              swift_unknownObjectRetain();
              unint64_t result = (uint64_t *)swift_unknownObjectRelease();
              uint64_t v55 = v9;
              if (!*(unsigned char *)(v9 + 18)) {
                goto LABEL_148;
              }
            }
          }
          unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
          uint64_t v54 = 0;
          uint64_t v7 = v49;
          uint64_t v9 = v51;
LABEL_148:
          uint64_t v74 = *(unsigned __int16 *)(v9 + 16);
          if (!*(_WORD *)(v9 + 16)) {
            goto LABEL_207;
          }
          uint64_t v75 = *(void *)(v9 + 24);
          BOOL v15 = __OFSUB__(v7, v75);
          uint64_t v76 = v7 - v75;
          if (v15) {
            goto LABEL_194;
          }
          if (v76 <= 0)
          {
            uint64_t v79 = 0;
          }
          else
          {
            if (v74 == 1) {
              goto LABEL_209;
            }
            uint64_t v77 = *(void *)(v9 + 48);
            uint64_t v7 = v76 - v77;
            if (__OFSUB__(v76, v77)) {
              goto LABEL_198;
            }
            if (v7 >= 1)
            {
              if (v74 == 2) {
                goto LABEL_209;
              }
              uint64_t v78 = (void *)(v9 + 72);
              uint64_t v79 = 2;
              while (v74 != v79)
              {
                uint64_t v80 = v7 - *v78;
                if (__OFSUB__(v7, *v78)) {
                  goto LABEL_174;
                }
                if (v80 < 1) {
                  goto LABEL_163;
                }
                ++v79;
                v78 += 3;
                uint64_t v7 = v80;
                if (v74 == v79) {
                  goto LABEL_209;
                }
              }
              goto LABEL_173;
            }
            uint64_t v7 = v76;
            uint64_t v79 = 1;
          }
LABEL_163:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v8 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v79 << 8);
        }
        else
        {
          unint64_t v8 = ((-15 << ((4 * v54 + 8) & 0x3C)) - 1) & v54 | ((unint64_t)*(unsigned __int16 *)(v51 + 16) << ((4 * v54 + 8) & 0x3C));
          swift_unknownObjectRetain();
          uint64_t v7 = 0;
          uint64_t v9 = 0;
        }
        swift_unknownObjectRetain();
        uint64_t v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v89, v8, v9, v51, v53);
        unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        a2 = v84;
        a4 = v85;
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v9 = 0;
        unint64_t v8 = 0;
        uint64_t v10 = 0;
      }
      uint64_t v49 = a6;
      uint64_t v11 = a6 - v7;
      if (__OFSUB__(a6, v7)) {
        goto LABEL_189;
      }
LABEL_97:
      --v50;
      uint64_t v7 = v89;
      if (v50 <= a2) {
        goto LABEL_166;
      }
    }
  }
  if (!a2)
  {
LABEL_166:
    *a7 = v7;
    a7[1] = v8;
    a7[2] = v9;
    a7[3] = v10;
    a7[4] = v11;
    return result;
  }
  uint64_t v12 = 0;
  while (1)
  {
    if (v11 == *(void *)(a3 + 32))
    {
LABEL_165:
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v9 = 1;
      goto LABEL_166;
    }
    uint64_t v13 = a4[8];
    uint64_t v14 = a4[11];
    uint64_t v91 = v7;
    unint64_t v92 = v8;
    uint64_t v93 = v9;
    BOOL v15 = __OFADD__(v10++, 1);
    if (v15) {
      break;
    }
    if (v7 != v14) {
      goto LABEL_177;
    }
    uint64_t v87 = v7;
    if (v9)
    {
      unint64_t v16 = v9 + 24 * ((v8 >> ((4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C)) & 0xF);
      unint64_t v17 = *(void *)(v16 + 24);
      uint64_t v7 = *(void *)(v16 + 32);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v17 = specialized Rope._Node.subscript.getter(v8, v13);
      uint64_t v7 = v18;
    }
    swift_bridgeObjectRelease();
    unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    BOOL v15 = __OFADD__(v11, v17);
    v11 += v17;
    if (v15) {
      goto LABEL_178;
    }
    if (!v13)
    {
      uint64_t v7 = a6;
      goto LABEL_179;
    }
    unint64_t v19 = ((-15 << ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v13 + 18) | ((unint64_t)*(unsigned __int16 *)(v13 + 16) << ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C));
    unint64_t result = (uint64_t *)swift_unknownObjectRetain();
    uint64_t v7 = a6;
    if (v8 >= v19) {
      goto LABEL_179;
    }
    if (v9)
    {
      char v20 = (4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C;
      unint64_t v21 = ((v8 >> v20) & 0xF) + 1;
      if (v21 < *(unsigned __int16 *)(v9 + 16))
      {
        unint64_t v8 = (v21 << v20) | ((-15 << v20) - 1) & v8;
        unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        goto LABEL_25;
      }
    }
    int v22 = *(unsigned __int8 *)(v13 + 18);
    char v23 = (4 * v22 + 8) & 0x3C;
    uint64_t v24 = (v8 >> v23) & 0xF;
    uint64_t v90 = v24;
    if (v22)
    {
      swift_unknownObjectRetain();
      char v25 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v13 + 24, &v90, (uint64_t)&v91, v13, v22);
      swift_unknownObjectRelease();
      if (v25)
      {
        unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        unint64_t v8 = v92;
        uint64_t v87 = v91;
        uint64_t v9 = v93;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v26 = v24 + 1;
      if (v24 + 1 < (unint64_t)*(unsigned __int16 *)(v13 + 16))
      {
        unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        unint64_t v8 = (v26 << v23) | ((-15 << v23) - 1) & v8;
        uint64_t v9 = v13;
LABEL_25:
        uint64_t v27 = v84;
        a4 = v85;
        if (v11 < a6) {
          goto LABEL_4;
        }
        goto LABEL_28;
      }
    }
    int v28 = *(unsigned __int8 *)(v13 + 18);
    uint64_t v29 = *(unsigned __int16 *)(v13 + 16);
    unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
    unint64_t v8 = ((-15 << ((4 * v28 + 8) & 0x3C)) - 1) & v28 | (unint64_t)(v29 << ((4 * v28 + 8) & 0x3C));
    uint64_t v27 = v84;
    a4 = v85;
    uint64_t v9 = 0;
    uint64_t v91 = v87;
    if (v11 < a6)
    {
LABEL_4:
      uint64_t v7 = v87;
      goto LABEL_5;
    }
LABEL_28:
    uint64_t v30 = a4[8];
    uint64_t v11 = a5;
    if (a5 != a6)
    {
      uint64_t v7 = a4[11];
      if (v30)
      {
        uint64_t v9 = 0;
        uint64_t v10 = a4[9];
        uint64_t v11 = a4[10];
        unint64_t v8 = ((-15 << ((4 * *(unsigned char *)(v30 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v30 + 18) | ((unint64_t)*(unsigned __int16 *)(v30 + 16) << ((4 * *(unsigned char *)(v30 + 18) + 8) & 0x3C));
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
      goto LABEL_5;
    }
    if (v30) {
      uint64_t v31 = a4[10];
    }
    else {
      uint64_t v31 = 0;
    }
    if (a5 < 0 || v31 < a5) {
      goto LABEL_192;
    }
    uint64_t v7 = a4[11];
    if (!v30)
    {
      uint64_t v9 = 0;
      unint64_t v8 = 0;
      uint64_t v10 = 0;
      goto LABEL_5;
    }
    uint64_t v32 = *(unsigned __int8 *)(v30 + 18);
    uint64_t v88 = a4[9];
    if (!*(_WORD *)(v30 + 16) || a4[10] <= a5)
    {
      unint64_t v8 = ((-15 << ((4 * v32 + 8) & 0x3C)) - 1) & v32 | ((unint64_t)*(unsigned __int16 *)(v30 + 16) << ((4 * v32 + 8) & 0x3C));
      swift_unknownObjectRetain();
      uint64_t v33 = 0;
      uint64_t v9 = 0;
      goto LABEL_91;
    }
    if (*(unsigned char *)(v30 + 18))
    {
      unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
      uint64_t v33 = a5;
      uint64_t v34 = v30;
      while (1)
      {
        uint64_t v36 = *(unsigned __int16 *)(v34 + 16);
        if (!*(_WORD *)(v34 + 16)) {
          break;
        }
        uint64_t v37 = *(void *)(v34 + 40);
        uint64_t v38 = v33 - v37;
        if (__OFSUB__(v33, v37)) {
          goto LABEL_181;
        }
        if (__OFADD__(v38, 1)) {
          goto LABEL_182;
        }
        if (v38 + 1 <= 0)
        {
          uint64_t v36 = 0;
          goto LABEL_41;
        }
        if (v36 == 1)
        {
          v33 -= v37;
          break;
        }
        uint64_t v39 = *(void *)(v34 + 64);
        BOOL v15 = __OFSUB__(v38, v39);
        uint64_t v40 = v38 - v39;
        if (v15) {
          goto LABEL_190;
        }
        if (__OFADD__(v40, 1)) {
          goto LABEL_191;
        }
        if (v40 + 1 < 1)
        {
          uint64_t v36 = 1;
          uint64_t v33 = v38;
          goto LABEL_41;
        }
        if (v36 == 2)
        {
          uint64_t v33 = v40;
          break;
        }
        uint64_t v41 = (void *)(v34 + 88);
        uint64_t v42 = 2;
        while (1)
        {
          if (v36 == v42)
          {
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
            goto LABEL_176;
          }
          uint64_t v33 = v40 - *v41;
          if (__OFSUB__(v40, *v41)) {
            goto LABEL_171;
          }
          if (__OFADD__(v33, 1)) {
            goto LABEL_172;
          }
          if (v33 + 1 < 1) {
            break;
          }
          ++v42;
          v41 += 3;
          uint64_t v40 = v33;
          if (v36 == v42) {
            goto LABEL_40;
          }
        }
        uint64_t v36 = v42;
        uint64_t v33 = v40;
LABEL_41:
        char v35 = (4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C;
        uint64_t v32 = ((-15 << v35) - 1) & v32 | (v36 << v35);
        uint64_t v9 = *(void *)(v34 + 24 + 24 * v36);
        swift_unknownObjectRetain();
        unint64_t result = (uint64_t *)swift_unknownObjectRelease();
        uint64_t v34 = v9;
        if (!*(unsigned char *)(v9 + 18)) {
          goto LABEL_68;
        }
      }
LABEL_40:
      if (!v33) {
        goto LABEL_41;
      }
      goto LABEL_180;
    }
    unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v32 = 0;
    uint64_t v33 = a5;
    uint64_t v9 = v30;
LABEL_68:
    uint64_t v43 = *(unsigned __int16 *)(v9 + 16);
    if (!*(_WORD *)(v9 + 16))
    {
LABEL_77:
      uint64_t v45 = v33;
LABEL_78:
      if (v45) {
        goto LABEL_199;
      }
      uint64_t v33 = 0;
      goto LABEL_90;
    }
    uint64_t v44 = *(void *)(v9 + 24);
    BOOL v15 = __OFSUB__(v33, v44);
    uint64_t v45 = v33 - v44;
    if (v15) {
      goto LABEL_200;
    }
    if (__OFADD__(v45, 1)) {
      goto LABEL_201;
    }
    if (v45 + 1 <= 0)
    {
      uint64_t v43 = 0;
    }
    else
    {
      if (v43 == 1) {
        goto LABEL_78;
      }
      uint64_t v46 = *(void *)(v9 + 48);
      uint64_t v33 = v45 - v46;
      if (__OFSUB__(v45, v46)) {
        goto LABEL_202;
      }
      if (__OFADD__(v33, 1)) {
        goto LABEL_203;
      }
      if (v33 + 1 < 1)
      {
        uint64_t v43 = 1;
        uint64_t v33 = v45;
      }
      else
      {
        if (v43 == 2) {
          goto LABEL_77;
        }
        uint64_t v47 = (void *)(v9 + 72);
        uint64_t v48 = 2;
        while (1)
        {
          if (v43 == v48) {
            goto LABEL_195;
          }
          uint64_t v45 = v33 - *v47;
          if (__OFSUB__(v33, *v47)) {
            goto LABEL_196;
          }
          if (__OFADD__(v45, 1)) {
            goto LABEL_197;
          }
          if (v45 + 1 < 1) {
            break;
          }
          ++v48;
          v47 += 3;
          uint64_t v33 = v45;
          if (v43 == v48) {
            goto LABEL_78;
          }
        }
        uint64_t v43 = v48;
      }
    }
LABEL_90:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v8 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v43 << 8);
LABEL_91:
    swift_unknownObjectRetain();
    uint64_t v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v7, v8, v9, v30, v88);
    unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
    uint64_t v27 = v84;
    a4 = v85;
    uint64_t v11 = a5 - v33;
    if (__OFSUB__(a5, v33))
    {
      __break(1u);
      goto LABEL_94;
    }
LABEL_5:
    if (++v12 == v27) {
      goto LABEL_166;
    }
  }
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  if (!v7) {
    __break(1u);
  }
LABEL_206:
  __break(1u);
LABEL_207:
  if (!v7) {
    __break(1u);
  }
LABEL_209:
  __break(1u);
  return result;
}

uint64_t AttributedString._InternalRunsSlice.updateEach(when:with:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, void (*a3)(uint64_t *, uint64_t, uint64_t), uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  AttributedString._InternalRunsSlice.startIndex.getter(a5, a6, (unint64_t *)&v73);
  uint64_t v10 = v75;
  long long v70 = v73;
  long long v71 = v74;
  uint64_t v72 = v75;
  uint64_t result = (uint64_t)AttributedString._InternalRunsSlice.endIndex.getter(v9, v8, a7, v76);
  if (v10 >= v76[4]) {
    return result;
  }
  unint64_t v12 = *((void *)&v73 + 1);
  uint64_t v13 = v73;
  uint64_t v14 = v74;
  uint64_t v64 = a7;
  uint64_t v65 = v8;
  char v66 = v9;
  while (1)
  {
    if (v13 != v9[11]) {
      goto LABEL_101;
    }
    if (v14)
    {
      unint64_t v18 = v14 + 24 * ((v12 >> ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v20 = *(void *)(v18 + 32);
      uint64_t v19 = *(void *)(v18 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v21 = v9[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v12, v21);
      uint64_t v20 = v22;
      uint64_t v19 = v23;
      swift_unknownObjectRelease();
    }
    char v24 = a1(v20, v19);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v24) {
      uint64_t result = (uint64_t)specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v70, v8, a7, v9, a3);
    }
    unint64_t v25 = *((void *)&v70 + 1);
    uint64_t v13 = v70;
    uint64_t v14 = v71;
    uint64_t v26 = v72;
    uint64_t v27 = v9[8];
    uint64_t v28 = v9[11];
    long long v68 = v70;
    uint64_t v69 = v71;
    uint64_t v15 = *((void *)&v71 + 1) + 1;
    if (__OFADD__(*((void *)&v71 + 1), 1)) {
      break;
    }
    if ((void)v70 != v28) {
      goto LABEL_103;
    }
    if ((void)v71)
    {
      unint64_t v29 = *(void *)(v71 + 24 * ((*((void *)&v70 + 1) >> ((4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v29 = specialized Rope._Node.subscript.getter(v25, v27);
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v30 = __OFADD__(v26, v29);
    uint64_t v16 = v26 + v29;
    if (v30) {
      goto LABEL_104;
    }
    if (!v27) {
      goto LABEL_119;
    }
    unint64_t v31 = ((-15 << ((4 * *(unsigned char *)(v27 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v27 + 18) | ((unint64_t)*(unsigned __int16 *)(v27 + 16) << ((4 * *(unsigned char *)(v27 + 18) + 8) & 0x3C));
    uint64_t result = swift_unknownObjectRetain();
    if (v25 >= v31) {
      goto LABEL_119;
    }
    if (v14)
    {
      char v32 = (4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C;
      unint64_t v33 = ((v25 >> v32) & 0xF) + 1;
      if (v33 < *(unsigned __int16 *)(v14 + 16))
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v12 = (v33 << v32) | ((-15 << v32) - 1) & v25;
        goto LABEL_32;
      }
    }
    int v34 = *(unsigned __int8 *)(v27 + 18);
    char v35 = (4 * v34 + 8) & 0x3C;
    uint64_t v36 = (v25 >> v35) & 0xF;
    uint64_t v67 = v36;
    if (v34)
    {
      swift_unknownObjectRetain();
      char v37 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v27 + 24, &v67, (uint64_t)&v68, v27, v34);
      swift_unknownObjectRelease();
      if (v37)
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v12 = *((void *)&v68 + 1);
        uint64_t v13 = v68;
        uint64_t v14 = v69;
        goto LABEL_32;
      }
      int v39 = *(unsigned __int8 *)(v27 + 18);
    }
    else
    {
      uint64_t v38 = v36 + 1;
      if (v36 + 1 < (unint64_t)*(unsigned __int16 *)(v27 + 16))
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v12 = (v38 << v35) | ((-15 << v35) - 1) & v25;
        uint64_t v14 = v27;
        goto LABEL_32;
      }
      int v39 = 0;
    }
    uint64_t v40 = *(unsigned __int16 *)(v27 + 16);
    char v41 = *(unsigned char *)(v27 + 18);
    uint64_t result = swift_unknownObjectRelease_n();
    uint64_t v14 = 0;
    unint64_t v12 = ((-15 << ((4 * v41 + 8) & 0x3C)) - 1) & v39 | (unint64_t)(v40 << ((4 * v41 + 8) & 0x3C));
    *(void *)&long long v68 = v13;
LABEL_32:
    a7 = v64;
    uint64_t v8 = v65;
    if (v16 < v64) {
      goto LABEL_5;
    }
    uint64_t v42 = v66[8];
    if (v65 != v64)
    {
      uint64_t v13 = v66[11];
      if (v42)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v66[9];
        uint64_t v16 = v66[10];
        unint64_t v12 = ((-15 << ((4 * *(unsigned char *)(v42 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v42 + 18) | ((unint64_t)*(unsigned __int16 *)(v42 + 16) << ((4 * *(unsigned char *)(v42 + 18) + 8) & 0x3C));
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
      }
      goto LABEL_5;
    }
    if (v42) {
      uint64_t v43 = v66[10];
    }
    else {
      uint64_t v43 = 0;
    }
    if (v65 < 0 || v43 < v65) {
      goto LABEL_110;
    }
    uint64_t v13 = v66[11];
    if (!v42)
    {
      uint64_t v14 = 0;
      unint64_t v12 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = v65;
      goto LABEL_5;
    }
    uint64_t v44 = v66[9];
    uint64_t v45 = *(unsigned __int8 *)(v42 + 18);
    if (!*(_WORD *)(v42 + 16) || v66[10] <= v65)
    {
      unint64_t v12 = ((-15 << ((4 * v45 + 8) & 0x3C)) - 1) & v45 | ((unint64_t)*(unsigned __int16 *)(v42 + 16) << ((4 * v45 + 8) & 0x3C));
      swift_unknownObjectRetain();
      uint64_t v46 = 0;
      uint64_t v14 = 0;
      goto LABEL_94;
    }
    if (*(unsigned char *)(v42 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v46 = v65;
      uint64_t v47 = v42;
      while (1)
      {
        uint64_t v49 = *(unsigned __int16 *)(v47 + 16);
        if (!*(_WORD *)(v47 + 16)) {
          goto LABEL_45;
        }
        uint64_t v50 = *(void *)(v47 + 40);
        uint64_t v51 = v46 - v50;
        if (__OFSUB__(v46, v50)) {
          goto LABEL_106;
        }
        if (__OFADD__(v51, 1)) {
          goto LABEL_107;
        }
        if (v51 + 1 <= 0)
        {
          uint64_t v49 = 0;
        }
        else
        {
          if (v49 == 1)
          {
            v46 -= v50;
LABEL_45:
            if (v46) {
              goto LABEL_105;
            }
            goto LABEL_46;
          }
          uint64_t v52 = *(void *)(v47 + 64);
          BOOL v30 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v30) {
            goto LABEL_108;
          }
          if (__OFADD__(v53, 1)) {
            goto LABEL_109;
          }
          if (v53 + 1 >= 1)
          {
            if (v49 != 2)
            {
              uint64_t v54 = (void *)(v47 + 88);
              uint64_t v55 = 2;
              while (v49 != v55)
              {
                uint64_t v46 = v53 - *v54;
                if (__OFSUB__(v53, *v54)) {
                  goto LABEL_99;
                }
                if (__OFADD__(v46, 1)) {
                  goto LABEL_100;
                }
                if (v46 + 1 < 1)
                {
                  uint64_t v49 = v55;
                  uint64_t v46 = v53;
                  goto LABEL_46;
                }
                ++v55;
                v54 += 3;
                uint64_t v53 = v46;
                if (v49 == v55) {
                  goto LABEL_45;
                }
              }
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
              goto LABEL_102;
            }
            uint64_t v46 = v53;
            goto LABEL_45;
          }
          uint64_t v49 = 1;
          uint64_t v46 = v51;
        }
LABEL_46:
        char v48 = (4 * *(unsigned char *)(v47 + 18) + 8) & 0x3C;
        uint64_t v45 = ((-15 << v48) - 1) & v45 | (v49 << v48);
        uint64_t v14 = *(void *)(v47 + 24 + 24 * v49);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v47 = v14;
        if (!*(unsigned char *)(v14 + 18)) {
          goto LABEL_71;
        }
      }
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v45 = 0;
    uint64_t v46 = v65;
    uint64_t v14 = v42;
LABEL_71:
    uint64_t v56 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16)) {
      goto LABEL_80;
    }
    uint64_t v57 = *(void *)(v14 + 24);
    BOOL v30 = __OFSUB__(v46, v57);
    uint64_t v58 = v46 - v57;
    if (v30) {
      goto LABEL_115;
    }
    if (__OFADD__(v58, 1)) {
      goto LABEL_116;
    }
    if (v58 + 1 <= 0)
    {
      uint64_t v56 = 0;
    }
    else
    {
      if (v56 == 1) {
        goto LABEL_81;
      }
      uint64_t v59 = *(void *)(v14 + 48);
      uint64_t v46 = v58 - v59;
      if (__OFSUB__(v58, v59)) {
        goto LABEL_117;
      }
      if (__OFADD__(v46, 1)) {
        goto LABEL_118;
      }
      if (v46 + 1 >= 1)
      {
        if (v56 != 2)
        {
          uint64_t v60 = (void *)(v14 + 72);
          uint64_t v61 = 2;
          while (v56 != v61)
          {
            uint64_t v58 = v46 - *v60;
            if (__OFSUB__(v46, *v60)) {
              goto LABEL_112;
            }
            if (__OFADD__(v58, 1)) {
              goto LABEL_113;
            }
            if (v58 + 1 < 1)
            {
              uint64_t v56 = v61;
              goto LABEL_93;
            }
            ++v61;
            v60 += 3;
            uint64_t v46 = v58;
            if (v56 == v61) {
              goto LABEL_81;
            }
          }
          goto LABEL_111;
        }
LABEL_80:
        uint64_t v58 = v46;
LABEL_81:
        if (v58) {
          goto LABEL_114;
        }
        uint64_t v46 = 0;
        goto LABEL_93;
      }
      uint64_t v56 = 1;
      uint64_t v46 = v58;
    }
LABEL_93:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v12 = v45 & 0xFFFFFFFFFFFFF0FFLL | (v56 << 8);
LABEL_94:
    swift_unknownObjectRetain();
    uint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v13, v12, v14, v42, v44);
    uint64_t result = swift_unknownObjectRelease_n();
    a7 = v64;
    uint64_t v8 = v65;
    BOOL v30 = __OFSUB__(v65, v46);
    uint64_t v16 = v65 - v46;
    if (v30)
    {
      __break(1u);
      return result;
    }
LABEL_5:
    *(void *)&long long v70 = v13;
    *((void *)&v70 + 1) = v12;
    *(void *)&long long v71 = v14;
    *((void *)&v71 + 1) = v15;
    uint64_t v72 = v16;
    uint64_t result = (uint64_t)AttributedString._InternalRunsSlice.endIndex.getter(v66, v8, a7, v77);
    BOOL v17 = v16 < v77[4];
    uint64_t v9 = v66;
    if (!v17) {
      return result;
    }
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
  return result;
}

void *AttributedString._InternalRunsSlice.startIndex.getter@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = result[8];
  if (v4) {
    uint64_t v5 = result[10];
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 < 0 || v5 < a2)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v7 = result[9];
  unint64_t v8 = result[11];
  if (!v4 || (result[10] > a2 ? (BOOL v9 = *(unsigned __int16 *)(v4 + 16) == 0) : (BOOL v9 = 1), v9))
  {
    unint64_t v10 = swift_unknownObjectRetain_n();
    unint64_t v11 = specialized Rope._endPath.getter(v10);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if (!v4) {
      goto LABEL_49;
    }
    goto LABEL_13;
  }
  uint64_t v30 = result[9];
  unint64_t v31 = result[11];
  uint64_t v17 = *(unsigned __int8 *)(v4 + 18);
  if (!*(unsigned char *)(v4 + 18))
  {
    uint64_t result = (void *)swift_unknownObjectRetain_n();
    unint64_t v8 = 0;
    unint64_t v14 = a2;
    uint64_t v13 = v4;
    uint64_t v26 = *(unsigned __int16 *)(v4 + 16);
    if (!*(_WORD *)(v4 + 16)) {
      goto LABEL_47;
    }
LABEL_36:
    uint64_t v27 = *(void *)(v13 + 24);
    BOOL v21 = __OFSUB__(v14, v27);
    unint64_t v16 = v14 - v27;
    if (v21) {
      goto LABEL_61;
    }
    if (__OFADD__(v16, 1))
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    if ((uint64_t)(v16 + 1) < 1)
    {
      uint64_t v26 = 0;
      goto LABEL_48;
    }
    if (v26 == 1)
    {
      unint64_t v14 = v16;
      goto LABEL_47;
    }
    uint64_t v28 = (uint64_t *)(v13 + 48);
    uint64_t v12 = 1;
    while (1)
    {
      uint64_t v29 = *v28;
      v28 += 3;
      unint64_t v14 = v16 - v29;
      if (__OFSUB__(v16, v29)) {
        break;
      }
      if (__OFADD__(v14, 1)) {
        goto LABEL_60;
      }
      if ((uint64_t)(v14 + 1) < 1) {
        goto LABEL_52;
      }
      ++v12;
      unint64_t v16 = v14;
      if (v26 == v12) {
        goto LABEL_47;
      }
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t result = (void *)swift_unknownObjectRetain_n();
  unint64_t v14 = a2;
  uint64_t v13 = v4;
  do
  {
    uint64_t v19 = *(unsigned __int16 *)(v13 + 16);
    if (*(_WORD *)(v13 + 16))
    {
      uint64_t v20 = *(void *)(v13 + 40);
      BOOL v21 = __OFSUB__(v14, v20);
      unint64_t v22 = v14 - v20;
      if (v21) {
        goto LABEL_56;
      }
      if (__OFADD__(v22, 1)) {
        goto LABEL_57;
      }
      if ((uint64_t)(v22 + 1) < 1)
      {
        uint64_t v19 = 0;
        goto LABEL_19;
      }
      if (v19 != 1)
      {
        uint64_t v23 = (uint64_t *)(v13 + 64);
        uint64_t v24 = 1;
        while (1)
        {
          uint64_t v25 = *v23;
          v23 += 3;
          unint64_t v14 = v22 - v25;
          if (__OFSUB__(v22, v25)) {
            break;
          }
          if (__OFADD__(v14, 1)) {
            goto LABEL_54;
          }
          if ((uint64_t)(v14 + 1) < 1)
          {
            uint64_t v19 = v24;
            unint64_t v14 = v22;
            goto LABEL_19;
          }
          ++v24;
          unint64_t v22 = v14;
          if (v19 == v24) {
            goto LABEL_18;
          }
        }
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      unint64_t v14 = v22;
    }
LABEL_18:
    if (v14) {
      goto LABEL_55;
    }
LABEL_19:
    char v18 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
    uint64_t v17 = ((-15 << v18) - 1) & v17 | (v19 << v18);
    uint64_t v13 = *(void *)(v13 + 24 + 24 * v19);
    swift_unknownObjectRetain();
    uint64_t result = (void *)swift_unknownObjectRelease();
  }
  while (*(unsigned char *)(v13 + 18));
  unint64_t v8 = v17 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v26 = *(unsigned __int16 *)(v13 + 16);
  if (*(_WORD *)(v13 + 16)) {
    goto LABEL_36;
  }
LABEL_47:
  if (!v14)
  {
    while (1)
    {
LABEL_48:
      swift_unknownObjectRelease();
      uint64_t result = (void *)swift_unknownObjectRelease();
      unint64_t v11 = v8 | (v26 << 8);
      uint64_t v7 = v30;
      unint64_t v8 = v31;
      if (v4)
      {
LABEL_13:
        swift_unknownObjectRetain();
        uint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v11, v13, v4, v7);
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        unint64_t v16 = a2 - v14;
        if (!__OFSUB__(a2, v14)) {
          goto LABEL_14;
        }
      }
      else
      {
LABEL_49:
        uint64_t v15 = 0;
        unint64_t v16 = a2 - v14;
        if (!__OFSUB__(a2, v14))
        {
LABEL_14:
          *a3 = v8;
          a3[1] = v11;
          a3[2] = v13;
          a3[3] = v15;
          a3[4] = v16;
          return result;
        }
      }
      __break(1u);
LABEL_52:
      uint64_t v26 = v12;
      unint64_t v14 = v16;
    }
  }
LABEL_63:
  __break(1u);
  return result;
}

void *AttributedString._InternalRunsSlice.endIndex.getter@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = result[8];
  uint64_t v5 = result[9];
  uint64_t v8 = result[10];
  uint64_t v7 = result[11];
  if (a2 != a3)
  {
    unint64_t v22 = swift_unknownObjectRetain();
    uint64_t result = (void *)specialized Rope._endPath.getter(v22);
    unint64_t v23 = (unint64_t)result;
    if (v6)
    {
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v5 = 0;
      uint64_t v8 = 0;
    }
    goto LABEL_52;
  }
  if (v6) {
    uint64_t v10 = result[10];
  }
  else {
    uint64_t v10 = 0;
  }
  if (a2 < 0 || v10 < a2)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v6 && v8 > a2 && *(_WORD *)(v6 + 16))
  {
    uint64_t v32 = result[9];
    uint64_t v33 = result[11];
    uint64_t v11 = *(unsigned __int8 *)(v6 + 18);
    if (*(unsigned char *)(v6 + 18))
    {
      uint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t v12 = a2;
      uint64_t v13 = v6;
      while (1)
      {
        uint64_t v15 = *(unsigned __int16 *)(v13 + 16);
        if (!*(_WORD *)(v13 + 16)) {
          goto LABEL_13;
        }
        uint64_t v16 = *(void *)(v13 + 40);
        BOOL v17 = __OFSUB__(v12, v16);
        uint64_t v18 = v12 - v16;
        if (v17) {
          goto LABEL_57;
        }
        if (__OFADD__(v18, 1)) {
          goto LABEL_58;
        }
        if (v18 + 1 >= 1) {
          break;
        }
        uint64_t v15 = 0;
LABEL_14:
        char v14 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
        uint64_t v11 = ((-15 << v14) - 1) & v11 | (v15 << v14);
        uint64_t v13 = *(void *)(v13 + 24 + 24 * v15);
        swift_unknownObjectRetain();
        uint64_t result = (void *)swift_unknownObjectRelease();
        if (!*(unsigned char *)(v13 + 18))
        {
          unint64_t v25 = v11 & 0xFFFFFFFFFFFFF0FFLL;
          uint64_t v26 = *(unsigned __int16 *)(v13 + 16);
          if (*(_WORD *)(v13 + 16)) {
            goto LABEL_38;
          }
LABEL_49:
          if (!v12)
          {
LABEL_50:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v23 = v25 | (v26 << 8);
            uint64_t v5 = v32;
            uint64_t v7 = v33;
LABEL_31:
            swift_unknownObjectRetain();
            uint64_t v5 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v7, v23, v13, v6, v5);
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            uint64_t v8 = a2 - v12;
            if (!__OFSUB__(a2, v12)) {
              goto LABEL_52;
            }
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
          goto LABEL_65;
        }
      }
      if (v15 != 1)
      {
        uint64_t v19 = (uint64_t *)(v13 + 64);
        uint64_t v20 = 1;
        while (1)
        {
          uint64_t v21 = *v19;
          v19 += 3;
          uint64_t v12 = v18 - v21;
          if (__OFSUB__(v18, v21)) {
            break;
          }
          if (__OFADD__(v12, 1)) {
            goto LABEL_55;
          }
          if (v12 + 1 < 1)
          {
            uint64_t v15 = v20;
            uint64_t v12 = v18;
            goto LABEL_14;
          }
          ++v20;
          uint64_t v18 = v12;
          if (v15 == v20) {
            goto LABEL_13;
          }
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      uint64_t v12 = v18;
LABEL_13:
      if (v12) {
        goto LABEL_56;
      }
      goto LABEL_14;
    }
    uint64_t result = (void *)swift_unknownObjectRetain_n();
    unint64_t v25 = 0;
    uint64_t v12 = a2;
    uint64_t v13 = v6;
    uint64_t v26 = *(unsigned __int16 *)(v6 + 16);
    if (!*(_WORD *)(v6 + 16)) {
      goto LABEL_49;
    }
LABEL_38:
    uint64_t v27 = *(void *)(v13 + 24);
    BOOL v17 = __OFSUB__(v12, v27);
    uint64_t v28 = v12 - v27;
    if (v17) {
      goto LABEL_63;
    }
    if (!__OFADD__(v28, 1))
    {
      if (v28 + 1 < 1)
      {
        uint64_t v26 = 0;
        goto LABEL_50;
      }
      if (v26 == 1)
      {
        uint64_t v12 = v28;
        goto LABEL_49;
      }
      uint64_t v29 = (uint64_t *)(v13 + 48);
      uint64_t v30 = 1;
      while (1)
      {
        uint64_t v31 = *v29;
        v29 += 3;
        uint64_t v12 = v28 - v31;
        if (__OFSUB__(v28, v31)) {
          goto LABEL_61;
        }
        if (__OFADD__(v12, 1)) {
          goto LABEL_62;
        }
        if (v12 + 1 < 1)
        {
          uint64_t v26 = v30;
          uint64_t v12 = v28;
          goto LABEL_50;
        }
        ++v30;
        uint64_t v28 = v12;
        if (v26 == v30) {
          goto LABEL_49;
        }
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
  }
  else
  {
    unint64_t v24 = swift_unknownObjectRetain_n();
    unint64_t v23 = specialized Rope._endPath.getter(v24);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    if (v6) {
      goto LABEL_31;
    }
    uint64_t v5 = 0;
    uint64_t v8 = a2;
LABEL_52:
    *a4 = v7;
    a4[1] = v23;
    a4[2] = v13;
    a4[3] = v5;
    a4[4] = v8;
  }
  return result;
}

uint64_t AttributedString._InternalRunsSlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 88);
  long long v18 = *(_OWORD *)result;
  uint64_t v19 = *(void *)(result + 16);
  if ((void)v18 != v5)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = result;
  outlined init with take of LocalePreferences?((uint64_t)&v19, (uint64_t)v20, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v22, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v22)
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(*((unint64_t *)&v18 + 1), v4);
    uint64_t result = swift_unknownObjectRelease();
  }
  if (v5 != *(void *)(a2 + 88)) {
    goto LABEL_26;
  }
  uint64_t v10 = *(void *)(a2 + 64);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v21, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v21)
  {
    unint64_t v11 = *(void *)(v21 + 24 * ((*((void *)&v18 + 1) >> ((4 * *(unsigned char *)(v21 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v11 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v18 + 1), v10);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v9 + 32);
  uint64_t v13 = v12 + v11;
  if (__OFADD__(v12, v11)) {
    goto LABEL_27;
  }
  if (v12 >= a4) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = *(void *)(v9 + 32);
  }
  if (v12 >= a3) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = a3;
  }
  if (v13 <= a3) {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v16 = v13;
  }
  if (v13 <= a4) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = a4;
  }
  if (v15 == v17) {
    goto LABEL_28;
  }
  uint64_t result = v17 - v15;
  if (__OFSUB__(v17, v15)) {
LABEL_29:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v30 = a1[3];
  uint64_t v31 = *a1;
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)*v2;
  uint64_t v8 = v2[2];
  uint64_t v9 = v7[8];
  uint64_t v10 = v7[10];
  unint64_t v11 = swift_unknownObjectRetain();
  specialized Rope._endPath.getter(v11);
  if (v9)
  {
    swift_unknownObjectRelease();
    if (v6 == v10) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v26 = v7[8];
    uint64_t v27 = v7[9];
    uint64_t v28 = v7[10];
    unint64_t v29 = v7[11];
    uint64_t v32 = v31;
    unint64_t v33 = v4;
    uint64_t v34 = v5;
    uint64_t v35 = v30;
    uint64_t v36 = v6;
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.formIndex(before:)(&v32, v26, v27, v28, v29);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v14 = v32;
    unint64_t v18 = v33;
    uint64_t v20 = v34;
    uint64_t v24 = v35;
    uint64_t v25 = v36;
    goto LABEL_11;
  }
  if (v6) {
    goto LABEL_9;
  }
LABEL_3:
  unint64_t v12 = v7[8];
  uint64_t v13 = v7[9];
  uint64_t v15 = v7[10];
  uint64_t v14 = v7[11];
  swift_unknownObjectRetain_n();
  uint64_t v16 = specialized Rope.find<A>(at:in:preferEnd:)(v8, 1, v12, v13, v15, v14);
  unint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t result = swift_unknownObjectRelease();
  if (v16 != v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v12)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v8 - v22;
    if (__OFSUB__(v8, v22)) {
      goto LABEL_13;
    }
LABEL_11:
    *a2 = v14;
    a2[1] = v18;
    a2[2] = v20;
    a2[3] = v24;
    a2[4] = v25;
    return result;
  }
  swift_unknownObjectRetain();
  uint64_t v24 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v14, v18, v20, v12, v13);
  uint64_t result = swift_unknownObjectRelease_n();
  uint64_t v25 = v8 - v22;
  if (!__OFSUB__(v8, v22)) {
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString._InternalRunsSlice(void *a1)
{
  uint64_t v3 = *(void **)v1;
  unint64_t v4 = a1[1];
  int64_t v39 = *(void *)(v1 + 16);
  uint64_t v40 = (void *)*a1;
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v7 = a1[4];
  unint64_t v8 = v3[8];
  uint64_t v9 = v3[10];
  unint64_t v10 = swift_unknownObjectRetain();
  unint64_t result = specialized Rope._endPath.getter(v10);
  if (!v8) {
    goto LABEL_23;
  }
  unint64_t result = swift_unknownObjectRelease();
  if (v7 == v9) {
    goto LABEL_3;
  }
LABEL_24:
  uint64_t v12 = v3[8];
  unint64_t v14 = v3[9];
  unint64_t v8 = v3[10];
  uint64_t v24 = (void *)v3[11];
  uint64_t v3 = v40;
  char v41 = v40;
  unint64_t v42 = v4;
  uint64_t v43 = v6;
  if (__OFSUB__(v5--, 1))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v40 != v24)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (!v12)
  {
    unint64_t v26 = 0;
    if (v4) {
      goto LABEL_28;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v26 = *(unsigned __int8 *)(v12 + 18);
  swift_unknownObjectRetain();
  if (v26 >= v4) {
    goto LABEL_40;
  }
LABEL_28:
  if (v6)
  {
    char v27 = (4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C;
    if (((v4 >> v27) & 0xF) != 0)
    {
      unint64_t v26 = ((((v4 >> v27) & 0xF) - 1) << v27) | ((-15 << v27) - 1) & v4;
LABEL_34:
      uint64_t v28 = (void *)(v6 + 24 * ((v26 >> ((4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v14 = v28[3];
      uint64_t v3 = (void *)v28[4];
      unint64_t v4 = v28[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_42;
    }
  }
  swift_unknownObjectRetain();
  uint64_t v6 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v41, v12);
  unint64_t result = swift_unknownObjectRelease();
  if (v6)
  {
    if (v41 == v40)
    {
      unint64_t v26 = v42;
      uint64_t v6 = v43;
      if (v43) {
        goto LABEL_34;
      }
LABEL_41:
      swift_unknownObjectRetain();
      unint64_t v14 = specialized Rope._Node.subscript.getter(v26, v12);
      uint64_t v3 = v31;
      unint64_t v4 = v32;
      swift_unknownObjectRelease();
LABEL_42:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v30 = v7 - v14;
      if (!__OFSUB__(v7, v14))
      {
        uint64_t v3 = v40;
        goto LABEL_58;
      }
      goto LABEL_65;
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
  }
  __break(1u);
  while (2)
  {
    __break(1u);
    while (1)
    {
      if (!v4)
      {
        __break(1u);
        goto LABEL_72;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      if (v7) {
        goto LABEL_24;
      }
LABEL_3:
      uint64_t v12 = v3[8];
      uint64_t v5 = v3[10];
      if (v12) {
        int64_t v13 = v3[10];
      }
      else {
        int64_t v13 = 0;
      }
      unint64_t v14 = v39;
      if (v39 < 0 || v13 < v39) {
        goto LABEL_66;
      }
      unint64_t v8 = v3[9];
      uint64_t v3 = (void *)v3[11];
      if (!v12 || !*(_WORD *)(v12 + 16))
      {
        unint64_t v29 = swift_unknownObjectRetain_n();
        unint64_t v26 = specialized Rope._endPath.getter(v29);
        unint64_t result = swift_unknownObjectRelease();
        uint64_t v6 = 0;
        unint64_t v4 = 0;
        if (v12) {
          goto LABEL_36;
        }
        goto LABEL_57;
      }
      uint64_t v40 = (void *)v8;
      uint64_t v7 = *(unsigned __int8 *)(v12 + 18);
      if (!*(unsigned char *)(v12 + 18)) {
        break;
      }
      unint64_t result = swift_unknownObjectRetain_n();
      unint64_t v4 = v39;
      unint64_t v14 = -15;
      unint64_t v8 = 24;
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v18 = *(unsigned __int16 *)(v15 + 16);
        if (!*(_WORD *)(v15 + 16)) {
          break;
        }
        uint64_t v19 = *(void *)(v15 + 40);
        uint64_t v20 = v4 - v19;
        if (__OFSUB__(v4, v19)) {
          goto LABEL_61;
        }
        if (v20 > 0)
        {
          if (v18 == 1) {
            goto LABEL_22;
          }
          uint64_t v21 = (uint64_t *)(v15 + 64);
          uint64_t v16 = 1;
          unint64_t v4 = v20;
          while (1)
          {
            uint64_t v22 = *v21;
            v21 += 3;
            uint64_t v23 = v4 - v22;
            if (__OFSUB__(v4, v22)) {
              break;
            }
            if (v23 < 1) {
              goto LABEL_13;
            }
            ++v16;
            unint64_t v4 = v23;
            if (v18 == v16) {
              goto LABEL_22;
            }
          }
          __break(1u);
          goto LABEL_60;
        }
        uint64_t v16 = 0;
LABEL_13:
        char v17 = (4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C;
        uint64_t v7 = ((-15 << v17) - 1) & v7 | (v16 << v17);
        uint64_t v6 = *(void *)(v15 + 24 + 24 * v16);
        swift_unknownObjectRetain();
        unint64_t result = swift_unknownObjectRelease();
        uint64_t v15 = v6;
        if (!*(unsigned char *)(v6 + 18))
        {
          unint64_t v8 = v7 & 0xFFFFFFFFFFFFF0FFLL;
          unint64_t v14 = v39;
          goto LABEL_46;
        }
      }
    }
    unint64_t result = swift_unknownObjectRetain_n();
    unint64_t v8 = 0;
    unint64_t v4 = v39;
    uint64_t v6 = v12;
LABEL_46:
    uint64_t v33 = *(unsigned __int16 *)(v6 + 16);
    if (!*(_WORD *)(v6 + 16))
    {
LABEL_72:
      if (!v4)
      {
        __break(1u);
        return result;
      }
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    uint64_t v34 = *(void *)(v6 + 24);
    uint64_t v35 = v4 - v34;
    if (__OFSUB__(v4, v34)) {
      continue;
    }
    break;
  }
  uint64_t v7 = v5;
  if (v35 > 0)
  {
    if (v33 != 1)
    {
      uint64_t v36 = (uint64_t *)(v6 + 48);
      uint64_t v5 = 1;
      unint64_t v4 = v35;
      while (1)
      {
        uint64_t v37 = *v36;
        v36 += 3;
        uint64_t v38 = v4 - v37;
        if (__OFSUB__(v4, v37)) {
          break;
        }
        if (v38 < 1) {
          goto LABEL_56;
        }
        ++v5;
        unint64_t v4 = v38;
        if (v33 == v5) {
          goto LABEL_54;
        }
      }
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    goto LABEL_54;
  }
LABEL_55:
  uint64_t v5 = 0;
LABEL_56:
  swift_unknownObjectRelease();
  unint64_t result = swift_unknownObjectRelease();
  unint64_t v26 = v8 | (v5 << 8);
  unint64_t v8 = (unint64_t)v40;
  if (v12)
  {
LABEL_36:
    swift_unknownObjectRetain();
    uint64_t v5 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v3, v26, v6, v12, v8);
    unint64_t result = swift_unknownObjectRelease_n();
    unint64_t v30 = v14 - v4;
    if (__OFSUB__(v14, v4)) {
      goto LABEL_67;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v5 = 0;
  unint64_t v30 = v14 - v4;
  if (__OFSUB__(v14, v4)) {
    goto LABEL_67;
  }
LABEL_58:
  *a1 = v3;
  a1[1] = v26;
  a1[2] = v6;
  a1[3] = v5;
  a1[4] = v30;
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[1];
  unint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *(void *)(*v1 + 72);
  uint64_t v7 = *(void *)(*v1 + 80);
  uint64_t v6 = *(void *)(*v1 + 88);
  swift_unknownObjectRetain_n();
  uint64_t v8 = specialized Rope.find<A>(at:in:preferEnd:)(v3, 0, v4, v5, v7, v6);
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t result = swift_unknownObjectRelease();
  if (v8 == v6)
  {
    if (v4)
    {
      swift_unknownObjectRetain();
      uint64_t v16 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v6, v10, v12, v4, v5);
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t v17 = v3 - v14;
      if (!__OFSUB__(v3, v14))
      {
LABEL_4:
        *a1 = v6;
        a1[1] = v10;
        a1[2] = v12;
        a1[3] = v16;
        a1[4] = v17;
        return result;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = v3 - v14;
      if (!__OFSUB__(v3, v14)) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for Collection.endIndex.getter in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v6 = *(void *)(*v1 + 64);
  uint64_t v5 = *(void *)(*v1 + 72);
  uint64_t v8 = *(void *)(*v1 + 80);
  uint64_t v7 = *(void *)(*v1 + 88);
  unint64_t v9 = swift_unknownObjectRetain();
  if (v3 != v4)
  {
    unint64_t result = specialized Rope._endPath.getter(v9);
    unint64_t v12 = result;
    if (v6)
    {
      unint64_t result = swift_unknownObjectRelease();
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v5 = 0;
      uint64_t v8 = 0;
    }
    goto LABEL_11;
  }
  swift_unknownObjectRetain();
  uint64_t v10 = specialized Rope.find<A>(at:in:preferEnd:)(v3, 0, v6, v5, v8, v7);
  unint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  unint64_t result = swift_unknownObjectRelease();
  if (v10 == v7)
  {
    if (v6)
    {
      swift_unknownObjectRetain();
      uint64_t v5 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v7, v12, v14, v6, v5);
      unint64_t result = swift_unknownObjectRelease_n();
      uint64_t v8 = v3 - v16;
      if (!__OFSUB__(v3, v16)) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v8 = v3 - v16;
      if (!__OFSUB__(v3, v16))
      {
LABEL_11:
        *a1 = v7;
        a1[1] = v12;
        a1[2] = v14;
        a1[3] = v5;
        a1[4] = v8;
        return result;
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString._InternalRunsSlice(void *a1, uint64_t a2))(void **a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = AttributedString._InternalRunsSlice.subscript.getter(a2, *v2, v2[1], v2[2]);
  v5[3] = v7;
  v5[4] = v8;
  void *v5 = v6;
  v5[1] = v7;
  v5[2] = v8;
  return protocol witness for Collection.subscript.read in conformance AttributedString._InternalRunsSlice;
}

void protocol witness for Collection.subscript.read in conformance AttributedString._InternalRunsSlice(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._InternalRunsSlice@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = a1[3];
  v6[2] = a1[2];
  v6[3] = v3;
  v6[4] = a1[4];
  long long v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  return specialized Collection<>.subscript.getter((uint64_t)v6, *(void **)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), a2);
}

void *protocol witness for Collection.indices.getter in conformance AttributedString._InternalRunsSlice@<X0>(void *a1@<X8>)
{
  return specialized Collection<>.indices.getter(*(void **)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), a1);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString._InternalRunsSlice()
{
  return *(void *)(v0 + 8) == *(void *)(v0 + 16);
}

double protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString._InternalRunsSlice@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v5;
  uint64_t v11 = *(void *)(a1 + 32);
  specialized BidirectionalCollection.index(_:offsetBy:)((uint64_t *)v10, a2, *(void **)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), (uint64_t *)v8);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(void *)(a3 + 32) = v9;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v6;
  uint64_t v11 = *(void *)(a1 + 32);
  long long v7 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v7;
  uint64_t v13 = *(void *)(a3 + 32);
  specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)((uint64_t *)v10, a2, (uint64_t)v12, *(void **)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), v9);
  return outlined init with take of LocalePreferences?((uint64_t)v9, a4, &demangling cache variable for type metadata for AttributedString._InternalRuns.Index?);
}

uint64_t *protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString._InternalRunsSlice(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  long long v4 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v4;
  uint64_t v9 = *(void *)(a2 + 32);
  return specialized BidirectionalCollection._distance(from:to:)((uint64_t *)v6, (uint64_t)v8, *(void **)v2, *(void *)(v2 + 8), *(void *)(v2 + 16));
}

unint64_t protocol witness for Collection.index(after:) in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v4;
  uint64_t v27 = *(void *)(a1 + 32);
  long long v6 = (void *)*v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v9 = *(void *)(*v2 + 64);
  uint64_t v8 = *(void *)(*v2 + 72);
  uint64_t v10 = v6[10];
  uint64_t v11 = v6[11];
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(after:)((uint64_t)v26, v9, v8, v10, v11, (uint64_t)v25);
  uint64_t v12 = v25[0];
  unint64_t v13 = v25[1];
  uint64_t v15 = v25[2];
  uint64_t v14 = v25[3];
  uint64_t v16 = v25[4];
  unint64_t result = swift_unknownObjectRelease();
  if (v16 < v7) {
    goto LABEL_12;
  }
  unint64_t v18 = v6[8];
  uint64_t v14 = v6[9];
  uint64_t v16 = v6[10];
  uint64_t v12 = v6[11];
  unint64_t v19 = swift_unknownObjectRetain();
  if (v5 != v7)
  {
    unint64_t result = specialized Rope._endPath.getter(v19);
    unint64_t v13 = result;
    if (v18)
    {
      unint64_t result = swift_unknownObjectRelease();
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  uint64_t v20 = specialized Rope.find<A>(at:in:preferEnd:)(v5, 0, v18, v14, v16, v12);
  unint64_t v13 = v21;
  uint64_t v15 = v22;
  uint64_t v24 = v23;
  unint64_t result = swift_unknownObjectRelease();
  if (v20 == v12)
  {
    if (v18)
    {
      swift_unknownObjectRetain();
      uint64_t v14 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v13, v15, v18, v14);
      unint64_t result = swift_unknownObjectRelease_n();
      uint64_t v16 = v5 - v24;
      if (!__OFSUB__(v5, v24)) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = v5 - v24;
      if (!__OFSUB__(v5, v24))
      {
LABEL_12:
        *a2 = v12;
        a2[1] = v13;
        a2[2] = v15;
        a2[3] = v14;
        a2[4] = v16;
        return result;
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString._InternalRunsSlice(uint64_t *result)
{
  uint64_t v2 = (void *)*v1;
  int64_t v43 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v5 = *result;
  unint64_t v4 = result[1];
  uint64_t v6 = result[2];
  uint64_t v7 = result[3];
  uint64_t v8 = result[4];
  uint64_t v9 = v2[8];
  uint64_t v10 = v2[9];
  uint64_t v12 = v2[10];
  uint64_t v11 = v2[11];
  uint64_t v47 = *result;
  unint64_t v48 = v4;
  uint64_t v49 = v6;
  BOOL v13 = __OFADD__(v7, 1);
  uint64_t v14 = v7 + 1;
  if (v13) {
    goto LABEL_64;
  }
  if (v5 != v11)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v15 = result;
  uint64_t v44 = v14;
  int64_t v46 = v3;
  if (v6)
  {
    unint64_t v16 = *(void *)(v6 + 24 * ((v4 >> ((4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v16 = specialized Rope._Node.subscript.getter(v4, v9);
  }
  swift_bridgeObjectRelease();
  unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  BOOL v13 = __OFADD__(v8, v16);
  int64_t v17 = v8 + v16;
  if (v13)
  {
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v47, v9, v10, v12, v5);
  unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
  if (v17 < v46)
  {
    uint64_t v18 = v47;
    unint64_t v19 = v48;
    uint64_t v20 = v49;
    uint64_t v21 = v44;
LABEL_60:
    *uint64_t v15 = v18;
    v15[1] = v19;
    v15[2] = v20;
    _OWORD v15[3] = v21;
    v15[4] = v17;
    return result;
  }
  uint64_t v22 = v2[8];
  uint64_t v21 = v2[9];
  int64_t v17 = v2[10];
  uint64_t v18 = v2[11];
  uint64_t v23 = v43;
  if (v43 != v46)
  {
    unint64_t v34 = swift_unknownObjectRetain();
    unint64_t result = (uint64_t *)specialized Rope._endPath.getter(v34);
    unint64_t v19 = (unint64_t)result;
    if (v22)
    {
      unint64_t result = (uint64_t *)swift_unknownObjectRelease();
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      int64_t v17 = 0;
    }
    goto LABEL_60;
  }
  if (v22) {
    int64_t v24 = v17;
  }
  else {
    int64_t v24 = 0;
  }
  if (v43 < 0 || v24 < v43) {
    goto LABEL_70;
  }
  if (!v22 || !*(_WORD *)(v22 + 16) || v43 >= v17)
  {
    unint64_t v35 = swift_unknownObjectRetain_n();
    unint64_t v19 = specialized Rope._endPath.getter(v35);
    unint64_t result = (uint64_t *)swift_unknownObjectRelease();
    uint64_t v20 = 0;
    uint64_t v26 = 0;
    if (!v22)
    {
      uint64_t v21 = 0;
      int64_t v17 = v43;
      goto LABEL_60;
    }
    goto LABEL_39;
  }
  uint64_t v45 = v21;
  uint64_t v25 = *(unsigned __int8 *)(v22 + 18);
  if (*(unsigned char *)(v22 + 18))
  {
    unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v26 = v43;
    uint64_t v20 = v22;
    while (1)
    {
      uint64_t v28 = *(unsigned __int16 *)(v20 + 16);
      if (!*(_WORD *)(v20 + 16)) {
        goto LABEL_21;
      }
      uint64_t v29 = *(void *)(v20 + 40);
      BOOL v13 = __OFSUB__(v26, v29);
      uint64_t v30 = v26 - v29;
      if (v13) {
        goto LABEL_68;
      }
      if (__OFADD__(v30, 1)) {
        goto LABEL_69;
      }
      if (v30 + 1 > 0) {
        break;
      }
      uint64_t v28 = 0;
LABEL_22:
      char v27 = (4 * *(unsigned char *)(v20 + 18) + 8) & 0x3C;
      uint64_t v25 = ((-15 << v27) - 1) & v25 | (v28 << v27);
      uint64_t v20 = *(void *)(v20 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      unint64_t result = (uint64_t *)swift_unknownObjectRelease();
      if (!*(unsigned char *)(v20 + 18))
      {
        unint64_t v36 = v25 & 0xFFFFFFFFFFFFF0FFLL;
        uint64_t v23 = v43;
        goto LABEL_45;
      }
    }
    if (v28 != 1)
    {
      uint64_t v31 = (uint64_t *)(v20 + 64);
      uint64_t v32 = 1;
      while (1)
      {
        uint64_t v33 = *v31;
        v31 += 3;
        uint64_t v26 = v30 - v33;
        if (__OFSUB__(v30, v33)) {
          break;
        }
        if (__OFADD__(v26, 1)) {
          goto LABEL_63;
        }
        if (v26 + 1 < 1)
        {
          uint64_t v28 = v32;
          uint64_t v26 = v30;
          goto LABEL_22;
        }
        ++v32;
        uint64_t v30 = v26;
        if (v28 == v32) {
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    uint64_t v26 = v30;
LABEL_21:
    if (v26) {
      goto LABEL_67;
    }
    goto LABEL_22;
  }
  unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  unint64_t v36 = 0;
  uint64_t v26 = v43;
  uint64_t v20 = v22;
LABEL_45:
  uint64_t v37 = *(unsigned __int16 *)(v20 + 16);
  uint64_t v21 = v45;
  if (*(_WORD *)(v20 + 16))
  {
    uint64_t v38 = *(void *)(v20 + 24);
    BOOL v13 = __OFSUB__(v26, v38);
    uint64_t v39 = v26 - v38;
    if (v13)
    {
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    if (__OFADD__(v39, 1))
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if (v39 + 1 <= 0)
    {
      uint64_t v37 = 0;
LABEL_58:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v19 = v36 | (v37 << 8);
LABEL_39:
      swift_unknownObjectRetain();
      uint64_t v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v18, v19, v20, v22, v21);
      unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
      int64_t v17 = v23 - v26;
      if (!__OFSUB__(v23, v26)) {
        goto LABEL_60;
      }
      goto LABEL_71;
    }
    if (v37 != 1)
    {
      uint64_t v40 = (uint64_t *)(v20 + 48);
      uint64_t v41 = 1;
      while (1)
      {
        uint64_t v42 = *v40;
        v40 += 3;
        uint64_t v26 = v39 - v42;
        if (__OFSUB__(v39, v42)) {
          goto LABEL_72;
        }
        if (__OFADD__(v26, 1)) {
          goto LABEL_73;
        }
        if (v26 + 1 < 1)
        {
          uint64_t v37 = v41;
          uint64_t v26 = v39;
          goto LABEL_58;
        }
        ++v41;
        uint64_t v39 = v26;
        if (v37 == v41) {
          goto LABEL_57;
        }
      }
    }
    uint64_t v26 = v39;
  }
LABEL_57:
  if (!v26) {
    goto LABEL_58;
  }
LABEL_76:
  __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance AttributedString._InternalRunsSlice(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  long long v4 = *(_OWORD *)(v1 + 1);
  unint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v6 = *(void *)(*v1 + 80);
  if (v5) {
    uint64_t v7 = *(void *)(*v1 + 80);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v1[1];
  if ((v4 & 0x8000000000000000) != 0 || v7 < (uint64_t)v4) {
    goto LABEL_57;
  }
  uint64_t v9 = *(void *)(v3 + 72);
  uint64_t v10 = *(void *)(v3 + 88);
  long long v34 = v4;
  if (v5)
  {
    if ((uint64_t)v4 < v6 && *(_WORD *)(v5 + 16) != 0)
    {
      uint64_t v32 = *(void *)(v3 + 88);
      uint64_t v33 = *(void *)(v3 + 72);
      uint64_t v16 = *(unsigned __int8 *)(v5 + 18);
      if (*(unsigned char *)(v5 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t v14 = v8;
        uint64_t v13 = v5;
        while (1)
        {
          uint64_t v18 = *(unsigned __int16 *)(v13 + 16);
          if (*(_WORD *)(v13 + 16))
          {
            uint64_t v19 = *(void *)(v13 + 40);
            BOOL v20 = __OFSUB__(v14, v19);
            uint64_t v21 = v14 - v19;
            if (v20) {
              goto LABEL_55;
            }
            if (__OFADD__(v21, 1)) {
              goto LABEL_56;
            }
            if (v21 + 1 <= 0)
            {
              uint64_t v18 = 0;
              goto LABEL_18;
            }
            if (v18 != 1)
            {
              uint64_t v22 = (uint64_t *)(v13 + 64);
              uint64_t v23 = 1;
              while (1)
              {
                uint64_t v24 = *v22;
                v22 += 3;
                uint64_t v14 = v21 - v24;
                if (__OFSUB__(v21, v24)) {
                  break;
                }
                if (__OFADD__(v14, 1)) {
                  goto LABEL_53;
                }
                if (v14 + 1 < 1)
                {
                  uint64_t v18 = v23;
                  uint64_t v14 = v21;
                  goto LABEL_18;
                }
                ++v23;
                uint64_t v21 = v14;
                if (v18 == v23) {
                  goto LABEL_17;
                }
              }
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }
            uint64_t v14 = v21;
          }
LABEL_17:
          if (v14) {
            goto LABEL_54;
          }
LABEL_18:
          char v17 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
          uint64_t v16 = ((-15 << v17) - 1) & v16 | (v18 << v17);
          uint64_t v13 = *(void *)(v13 + 24 + 24 * v18);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          if (!*(unsigned char *)(v13 + 18))
          {
            unint64_t v25 = v16 & 0xFFFFFFFFFFFFF0FFLL;
            goto LABEL_34;
          }
        }
      }
      swift_unknownObjectRetain_n();
      swift_retain();
      unint64_t v25 = 0;
      uint64_t v14 = v8;
      uint64_t v13 = v5;
LABEL_34:
      uint64_t v26 = *(unsigned __int16 *)(v13 + 16);
      uint64_t v9 = v33;
      if (*(_WORD *)(v13 + 16))
      {
        uint64_t v27 = *(void *)(v13 + 24);
        BOOL v20 = __OFSUB__(v14, v27);
        uint64_t v28 = v14 - v27;
        if (v20) {
          goto LABEL_61;
        }
        if (__OFADD__(v28, 1))
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v28 + 1 <= 0)
        {
          uint64_t v26 = 0;
LABEL_47:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v12 = v25 | (v26 << 8);
          uint64_t v10 = v32;
          goto LABEL_13;
        }
        if (v26 != 1)
        {
          uint64_t v29 = (uint64_t *)(v13 + 48);
          uint64_t v30 = 1;
          while (1)
          {
            uint64_t v31 = *v29;
            v29 += 3;
            uint64_t v14 = v28 - v31;
            if (__OFSUB__(v28, v31)) {
              goto LABEL_59;
            }
            if (__OFADD__(v14, 1)) {
              goto LABEL_60;
            }
            if (v14 + 1 < 1)
            {
              uint64_t v26 = v30;
              uint64_t v14 = v28;
              goto LABEL_47;
            }
            ++v30;
            uint64_t v28 = v14;
            if (v26 == v30) {
              goto LABEL_46;
            }
          }
        }
        uint64_t v14 = v28;
      }
LABEL_46:
      if (!v14) {
        goto LABEL_47;
      }
LABEL_63:
      __break(1u);
      return;
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  unint64_t v12 = specialized Rope._endPath.getter(v5);
  swift_unknownObjectRelease();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (!v5)
  {
    swift_release();
    uint64_t v15 = 0;
    goto LABEL_49;
  }
LABEL_13:
  swift_unknownObjectRetain();
  uint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v12, v13, v5, v9);
  swift_release();
  swift_unknownObjectRelease_n();
LABEL_49:
  if (__OFSUB__(v8, v14)) {
    goto LABEL_58;
  }
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v34;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v8 - v14;
}

uint64_t *protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString._InternalRunsSlice()
{
  return specialized Collection.count.getter(*(uint64_t **)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._InternalRunsSlice()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(uint64_t **)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._InternalRunsSlice(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void **)v3, *(void *)(v3 + 8), *(void *)(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRunsSlice>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString._InternalRunsSlice> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._InternalRunsSlice>);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRunsSlice>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString._InternalRunsSlice> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._InternalRunsSlice>);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    lazy protocol witness table accessor for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized closure #1 in Rope._Node.descendToLastItem(under:)(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(result + 24 * a2);
  uint64_t v4 = *(unsigned __int16 *)(v3 + 16);
  if (*(_WORD *)(v3 + 16))
  {
    uint64_t v6 = v4 - 1;
    int v7 = *(unsigned __int8 *)(v3 + 18);
    *a3 = ((-15 << ((4 * v7 + 8) & 0x3C)) - 1) & *a3 | ((v4 - 1) << ((4 * v7 + 8) & 0x3C));
    if (v7)
    {
      swift_unknownObjectRetain();
      uint64_t v8 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v3 + 24, v6, a3);
      swift_unknownObjectRelease();
      return v8;
    }
    else
    {
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(uint64_t result, int a2, _WORD *a3, uint64_t *a4)
{
  uint64_t v4 = result;
  uint64_t v5 = (unsigned __int16)*a3;
  if (*a3)
  {
    uint64_t result = 0;
    uint64_t v6 = ~a2 & 1;
    while (1)
    {
      uint64_t v7 = *a4;
      a4 += 3;
      uint64_t v8 = v4 - v7;
      if (__OFSUB__(v4, v7)) {
        break;
      }
      if (__OFADD__(v8, v6)) {
        goto LABEL_12;
      }
      if (v8 + v6 < 1) {
        return result;
      }
      ++result;
      uint64_t v4 = v8;
      if (v5 == result)
      {
        uint64_t v4 = v8;
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_8:
    if (!v4) {
      return v5 - (a2 & 1);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope.find<A>(at:in:preferEnd:)(uint64_t result, char a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3) {
    uint64_t v6 = a5;
  }
  else {
    uint64_t v6 = 0;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v7 = result;
    if (v6 >= result)
    {
      unint64_t v9 = a3;
      if (a3 && *(_WORD *)(a3 + 16) && (a5 > result) | a2 & 1)
      {
        uint64_t v11 = *(unsigned __int8 *)(a3 + 18);
        if (*(unsigned char *)(a3 + 18))
        {
          BOOL v12 = (a2 & 1) == 0;
          uint64_t result = swift_unknownObjectRetain();
          while (1)
          {
            uint64_t v14 = *(unsigned __int16 *)(v9 + 16);
            if (*(_WORD *)(v9 + 16)) {
              break;
            }
            uint64_t v17 = 0;
LABEL_21:
            if (v7) {
              goto LABEL_35;
            }
            if (a2)
            {
              if (!*(_WORD *)(v9 + 16)) {
                goto LABEL_34;
              }
              --v14;
              uint64_t v7 = v17;
            }
            else
            {
              uint64_t v7 = 0;
            }
LABEL_12:
            char v13 = (4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C;
            uint64_t v11 = ((-15 << v13) - 1) & v11 | (v14 << v13);
            unint64_t v9 = *(void *)(v9 + 24 + 24 * v14);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            if (!*(unsigned char *)(v9 + 18)) {
              goto LABEL_29;
            }
          }
          uint64_t v15 = 0;
          uint64_t v16 = (uint64_t *)(v9 + 40);
          while (1)
          {
            uint64_t v18 = *v16;
            v16 += 3;
            uint64_t v17 = v18;
            uint64_t v19 = v7 - v18;
            if (__OFSUB__(v7, v18)) {
              break;
            }
            if (__OFADD__(v19, v12)) {
              goto LABEL_33;
            }
            if (v19 + v12 < 1)
            {
              uint64_t v14 = v15;
              goto LABEL_12;
            }
            ++v15;
            uint64_t v7 = v19;
            if (v14 == v15)
            {
              uint64_t v7 = v19;
              goto LABEL_21;
            }
          }
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        swift_unknownObjectRetain();
LABEL_29:
        uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v7, a2 & 1, (_WORD *)(v9 + 16), (uint64_t *)(v9 + 24));
        if (result < 0) {
          goto LABEL_37;
        }
        swift_unknownObjectRelease();
      }
      else
      {
        specialized Rope._endPath.getter(a3);
      }
      return a6;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

BOOL specialized closure #1 in Rope.formIndex(before:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  char v3 = (4 * *(unsigned char *)(a1 + 2) + 8) & 0x3C;
  uint64_t v4 = (v2 >> v3) & 0xF;
  if (v4) {
    *(void *)(a2 + 8) = ((v4 - 1) << v3) | ((-15 << v3) - 1) & v2;
  }
  return v4 != 0;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v4 = 0;
    while ((result ^ 0x8000000000000000) > ~a2)
    {
      if (--v4 <= a2)
      {
        result += v4;
        return result;
      }
    }
    goto LABEL_12;
  }
  if (a2)
  {
    unint64_t v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2) {
        return result;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v7 = 0;
    while (result - a3 + v7)
    {
      uint64_t v8 = result + v7 - 1;
      if (__OFSUB__(result + v7, 1))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }
      if (--v7 <= a2) {
        return v8;
      }
    }
    return 0;
  }
  if (a2)
  {
    unint64_t v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1)) {
      unint64_t v3 = a2 - 1;
    }
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL)) {
      unint64_t v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v4 = v3 + 1;
    if (v4 >= 5)
    {
      uint64_t v9 = v4 & 3;
      if ((v4 & 3) == 0) {
        uint64_t v9 = 4;
      }
      unint64_t v5 = v4 - v9;
      int64x2_t v10 = 0uLL;
      int64x2_t v11 = (int64x2_t)(unint64_t)result;
      int64x2_t v12 = vdupq_n_s64(1uLL);
      unint64_t v13 = v5;
      do
      {
        int64x2_t v10 = vaddq_s64(v10, v12);
        int64x2_t v11 = vaddq_s64(v11, v12);
        v13 -= 4;
      }
      while (v13);
      uint64_t v6 = vaddvq_s64(vaddq_s64(vzip2q_s64(v11, v10), vzip1q_s64(v11, v10)));
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = result;
    }
    uint64_t v14 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v15 = v5 + result - a3;
    unint64_t v16 = a2 - v5;
    uint64_t result = v6;
    while (v15)
    {
      if (!v14) {
        goto LABEL_27;
      }
      ++result;
      ++v14;
      ++v15;
      if (!--v16) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t specialized AttributedString._InternalRunsSlice.updateEach(with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v179 = a5;
  *((void *)&v179 + 1) = a6;
  uint64_t v6 = (uint64_t *)(result + 64);
  uint64_t v7 = *(void *)(result + 64);
  if (v7) {
    uint64_t v8 = *(void *)(result + 80);
  }
  else {
    uint64_t v8 = 0;
  }
  if (a2 < 0 || v8 < a2)
  {
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
    goto LABEL_410;
  }
  uint64_t v9 = a3;
  uint64_t v184 = (void *)result;
  uint64_t v10 = *(void *)(result + 72);
  uint64_t v180 = (uint64_t *)(result + 64);
  uint64_t v186 = *(void *)(result + 88);
  if (!v7 || (*(_WORD *)(v7 + 16) ? (BOOL v11 = *(void *)(result + 80) <= a2) : (BOOL v11 = 1), v11))
  {
    unint64_t v12 = swift_unknownObjectRetain_n();
    unint64_t v13 = specialized Rope._endPath.getter(v12);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    if (!v7) {
      goto LABEL_48;
    }
    goto LABEL_13;
  }
  uint64_t v16 = *(unsigned __int8 *)(v7 + 18);
  if (*(unsigned char *)(v7 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v15 = a2;
    uint64_t v17 = (void *)v7;
    while (1)
    {
      uint64_t v19 = *((unsigned __int16 *)v17 + 8);
      if (!*((_WORD *)v17 + 8)) {
        break;
      }
      uint64_t v20 = v17[5];
      BOOL v21 = __OFSUB__(v15, v20);
      uint64_t v22 = v15 - v20;
      if (v21) {
        goto LABEL_373;
      }
      if (__OFADD__(v22, 1)) {
        goto LABEL_374;
      }
      if (v22 + 1 <= 0)
      {
        uint64_t v19 = 0;
        goto LABEL_18;
      }
      if (v19 == 1)
      {
        uint64_t v15 = v22;
        break;
      }
      uint64_t v23 = v17 + 8;
      uint64_t v24 = 1;
      while (1)
      {
        uint64_t v25 = *v23;
        v23 += 3;
        uint64_t v15 = v22 - v25;
        if (__OFSUB__(v22, v25)) {
          goto LABEL_341;
        }
        if (__OFADD__(v15, 1))
        {
LABEL_342:
          __break(1u);
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
          goto LABEL_370;
        }
        if (v15 + 1 < 1) {
          break;
        }
        ++v24;
        uint64_t v22 = v15;
        if (v19 == v24) {
          goto LABEL_17;
        }
      }
      uint64_t v19 = v24;
      uint64_t v15 = v22;
LABEL_18:
      char v18 = (4 * *((unsigned char *)v17 + 18) + 8) & 0x3C;
      uint64_t v16 = ((-15 << v18) - 1) & v16 | (v19 << v18);
      uint64_t v14 = (void *)v17[3 * v19 + 3];
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v17 = v14;
      if (!*((unsigned char *)v14 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_17:
    if (!v15) {
      goto LABEL_18;
    }
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
    goto LABEL_388;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v15 = a2;
  uint64_t v14 = (void *)v7;
LABEL_33:
  uint64_t v26 = *((unsigned __int16 *)v14 + 8);
  if (!*((_WORD *)v14 + 8))
  {
    uint64_t v9 = a3;
    goto LABEL_46;
  }
  uint64_t v27 = v14[3];
  BOOL v21 = __OFSUB__(v15, v27);
  uint64_t v28 = v15 - v27;
  uint64_t v9 = a3;
  if (!v21)
  {
    if (__OFADD__(v28, 1)) {
      goto LABEL_412;
    }
    if (v28 + 1 <= 0)
    {
      uint64_t v26 = 0;
      goto LABEL_47;
    }
    if (v26 != 1)
    {
      uint64_t v29 = v14 + 6;
      uint64_t v30 = 1;
      while (1)
      {
        uint64_t v31 = *v29;
        v29 += 3;
        uint64_t v15 = v28 - v31;
        if (__OFSUB__(v28, v31)) {
          goto LABEL_390;
        }
        if (__OFADD__(v15, 1)) {
          goto LABEL_391;
        }
        if (v15 + 1 < 1) {
          goto LABEL_334;
        }
        ++v30;
        uint64_t v28 = v15;
        if (v26 == v30) {
          goto LABEL_46;
        }
      }
    }
    uint64_t v15 = v28;
LABEL_46:
    if (v15)
    {
LABEL_410:
      __break(1u);
      goto LABEL_411;
    }
LABEL_47:
    while (2)
    {
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v13 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v26 << 8);
      uint64_t v6 = v180;
      if (v7)
      {
LABEL_13:
        swift_unknownObjectRetain();
        uint64_t v182 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v186, v13, (uint64_t)v14, v7, v10);
        uint64_t result = swift_unknownObjectRelease_n();
      }
      else
      {
LABEL_48:
        uint64_t v182 = 0;
      }
      uint64_t v10 = a2;
      uint64_t v32 = a2 - v15;
      if (__OFSUB__(a2, v15)) {
        goto LABEL_389;
      }
      uint64_t v33 = v184;
      uint64_t v34 = v186;
      while (1)
      {
        uint64_t v16 = *v6;
        unint64_t v185 = v13;
        uint64_t v186 = v34;
        if (v10 != v9)
        {
          if (v16) {
            uint64_t v43 = v33[10];
          }
          else {
            uint64_t v43 = 0;
          }
          goto LABEL_104;
        }
        if (!v16)
        {
          if (v10 > 0) {
            goto LABEL_375;
          }
          uint64_t v9 = 0;
          goto LABEL_102;
        }
        uint64_t v37 = v33[10];
        if (v37 < v10) {
          goto LABEL_361;
        }
        uint64_t v38 = v33[9];
        uint64_t v39 = v33[11];
        uint64_t v40 = *(unsigned __int8 *)(v16 + 18);
        BOOL v41 = !*(_WORD *)(v16 + 16) || v37 <= v10;
        uint64_t v176 = v38;
        if (!v41) {
          break;
        }
        unint64_t v42 = ((-15 << ((4 * v40 + 8) & 0x3C)) - 1) & v40 | ((unint64_t)*(unsigned __int16 *)(v16 + 16) << ((4 * v40 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v9 = 0;
        uint64_t v10 = 0;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v39, v42, v10, v16, v176);
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t v10 = a2;
        uint64_t v33 = v184;
        unint64_t v13 = v185;
        uint64_t v34 = v186;
LABEL_102:
        uint64_t v43 = v10 - v9;
        if (__OFSUB__(v10, v9)) {
          goto LABEL_356;
        }
        uint64_t v9 = a3;
LABEL_104:
        if (v32 >= v43) {
          return result;
        }
        if (v34 != v33[11]) {
          goto LABEL_343;
        }
        if (v14)
        {
          uint64_t v55 = &v14[3 * ((v13 >> ((4 * *((unsigned char *)v14 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v57 = v55[4];
          uint64_t v56 = v55[5];
          unint64_t v58 = v55[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }
        else
        {
          uint64_t v59 = v33[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v13, v59);
          uint64_t v57 = v60;
          uint64_t v56 = v61;
          uint64_t result = swift_unknownObjectRelease();
          if (v186 != v33[11]) {
            goto LABEL_360;
          }
          uint64_t v62 = v33[8];
          swift_unknownObjectRetain();
          unint64_t v58 = specialized Rope._Node.subscript.getter(v13, v62);
          uint64_t v9 = a3;
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v63 = v32 + v58;
        if (__OFADD__(v32, v58)) {
          goto LABEL_344;
        }
        *(void *)&long long v194 = v57;
        *((void *)&v194 + 1) = v56;
        if (v32 >= v9) {
          uint64_t v64 = v9;
        }
        else {
          uint64_t v64 = v32;
        }
        uint64_t v10 = a2;
        if (v32 >= a2) {
          uint64_t v65 = v64;
        }
        else {
          uint64_t v65 = a2;
        }
        if (v63 <= a2) {
          uint64_t v66 = a2;
        }
        else {
          uint64_t v66 = v63;
        }
        if (v63 <= v9) {
          uint64_t v67 = v66;
        }
        else {
          uint64_t v67 = v9;
        }
        if (v65 == v67) {
          goto LABEL_345;
        }
        if (v65 != v32 || v67 != v63)
        {
          long long v191 = v179;
          uint64_t result = specialized AttributedString._AttributeStorage.matchStyle(of:for:)(a4, (uint64_t *)&v191);
          if ((result & 1) == 0) {
            goto LABEL_208;
          }
          if (__OFSUB__(v67, v65)) {
            goto LABEL_364;
          }
          uint64_t v10 = *((void *)&v194 + 1);
          uint64_t v83 = v194;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v6 = v180;
          specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v65, v67, v67 - v65, v83, v10);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v7 = v184[8];
          uint64_t v9 = v184[10];
          if (v7) {
            uint64_t v84 = v184[10];
          }
          else {
            uint64_t v84 = 0;
          }
          if (v32 < 0 || v84 < v32) {
            goto LABEL_366;
          }
          uint64_t v85 = v184[9];
          uint64_t v14 = (void *)v184[11];
          uint64_t v186 = (uint64_t)v14;
          if (v7 && *(_WORD *)(v7 + 16) && v32 < v9)
          {
            uint64_t v16 = *(unsigned __int8 *)(v7 + 18);
            if (*(unsigned char *)(v7 + 18))
            {
              uint64_t result = swift_unknownObjectRetain_n();
              uint64_t v86 = v32;
              uint64_t v87 = (void *)v7;
              while (1)
              {
                uint64_t v28 = *((unsigned __int16 *)v87 + 8);
                if (!*((_WORD *)v87 + 8)) {
                  goto LABEL_150;
                }
                uint64_t v89 = v87[5];
                BOOL v21 = __OFSUB__(v86, v89);
                uint64_t v30 = v86 - v89;
                if (v21) {
                  goto LABEL_354;
                }
                if (__OFADD__(v30, 1)) {
                  goto LABEL_355;
                }
                if (v30 + 1 <= 0)
                {
                  uint64_t v28 = 0;
                }
                else
                {
                  if (v28 == 1)
                  {
                    uint64_t v86 = v30;
LABEL_150:
                    if (v86) {
                      goto LABEL_351;
                    }
                    goto LABEL_151;
                  }
                  uint64_t v90 = v87 + 8;
                  uint64_t v91 = 1;
                  while (1)
                  {
                    uint64_t v92 = *v90;
                    v90 += 3;
                    uint64_t v86 = v30 - v92;
                    if (__OFSUB__(v30, v92)) {
                      goto LABEL_332;
                    }
                    if (__OFADD__(v86, 1)) {
                      goto LABEL_333;
                    }
                    if (v86 + 1 < 1) {
                      break;
                    }
                    ++v91;
                    uint64_t v30 = v86;
                    if (v28 == v91) {
                      goto LABEL_150;
                    }
                  }
                  uint64_t v28 = v91;
                  uint64_t v86 = v30;
                }
LABEL_151:
                char v88 = (4 * *((unsigned char *)v87 + 18) + 8) & 0x3C;
                uint64_t v16 = ((-15 << v88) - 1) & v16 | (v28 << v88);
                uint64_t v14 = (void *)v87[3 * v28 + 3];
                swift_unknownObjectRetain();
                uint64_t result = swift_unknownObjectRelease();
                uint64_t v87 = v14;
                if (!*((unsigned char *)v14 + 18)) {
                  goto LABEL_210;
                }
              }
            }
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v86 = v32;
            uint64_t v14 = (void *)v7;
LABEL_210:
            uint64_t v130 = *((unsigned __int16 *)v14 + 8);
            if (*((_WORD *)v14 + 8))
            {
              uint64_t v131 = v14[3];
              BOOL v21 = __OFSUB__(v86, v131);
              uint64_t v132 = v86 - v131;
              if (v21) {
                goto LABEL_397;
              }
              if (__OFADD__(v132, 1)) {
                goto LABEL_398;
              }
              if (v132 + 1 <= 0)
              {
                uint64_t v130 = 0;
              }
              else
              {
                if (v130 == 1)
                {
                  uint64_t v86 = v132;
                  goto LABEL_228;
                }
                char v136 = v14 + 6;
                uint64_t v137 = 1;
                while (1)
                {
                  uint64_t v138 = *v136;
                  v136 += 3;
                  uint64_t v86 = v132 - v138;
                  if (__OFSUB__(v132, v138)) {
                    goto LABEL_371;
                  }
                  if (__OFADD__(v86, 1)) {
                    goto LABEL_372;
                  }
                  if (v86 + 1 < 1) {
                    break;
                  }
                  ++v137;
                  uint64_t v132 = v86;
                  if (v130 == v137) {
                    goto LABEL_228;
                  }
                }
                uint64_t v130 = v137;
                uint64_t v86 = v132;
              }
            }
            else
            {
LABEL_228:
              if (v86) {
                goto LABEL_393;
              }
            }
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v185 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v130 << 8);
            uint64_t v6 = v180;
LABEL_171:
            swift_unknownObjectRetain();
            uint64_t v96 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v186, v185, (uint64_t)v14, v7, v85);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_unknownObjectRelease_n();
          }
          else
          {
            unint64_t v95 = swift_unknownObjectRetain_n();
            unint64_t v185 = specialized Rope._endPath.getter(v95);
            swift_unknownObjectRelease();
            uint64_t v14 = 0;
            uint64_t v86 = 0;
            if (v7) {
              goto LABEL_171;
            }
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v96 = 0;
          }
          uint64_t v9 = a3;
          BOOL v21 = __OFSUB__(v32, v86);
          v32 -= v86;
          uint64_t v10 = a2;
          if (v21) {
            goto LABEL_368;
          }
          long long v68 = v184;
          uint64_t v94 = v96;
          goto LABEL_233;
        }
        long long v68 = v184;
        if (v186 != v184[11]) {
          goto LABEL_357;
        }
        if (!*v6) {
          goto LABEL_413;
        }
        specialized Rope._Node._prepareModify(at:)(v185, (uint64_t)&v195);
        v210[0] = v196;
        long long v191 = v195;
        long long v192 = v196;
        long long v193 = v197;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v210);
        uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)v210 + 8);
        long long v192 = MEMORY[0x1E4FBC868];
        uint64_t v69 = v186 + 1;
        v184[11] = v186 + 1;
        if (!v184[8]) {
          goto LABEL_414;
        }
        specialized Rope._Node._finalizeModify(_:)(&v188, &v191);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v191 = v179;
        uint64_t result = specialized AttributedString._AttributeStorage.matchStyle(of:for:)(a4, (uint64_t *)&v191);
        if (result)
        {
          if (v69 != v184[11]) {
            goto LABEL_365;
          }
          if (!*v6) {
            goto LABEL_415;
          }
          specialized Rope._Node._prepareModify(at:)(v185, (uint64_t)&v198);
          uint64_t v207 = v199;
          uint64_t v208 = v200;
          outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v207);
          outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v208);
          long long v191 = v198;
          long long v193 = v201;
          uint64_t v70 = *((void *)&v194 + 1);
          uint64_t result = v194;
          long long v192 = v194;
          uint64_t v71 = v186 + 2;
          v184[11] = v186 + 2;
          if (!v184[8]) {
            goto LABEL_416;
          }
          uint64_t v177 = result;
          swift_bridgeObjectRetain_n();
          uint64_t v175 = v70;
          swift_bridgeObjectRetain_n();
          uint64_t v14 = specialized Rope._Node._finalizeModify(_:)(v187, &v191);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v72 = v184[8];
          uint64_t v73 = v184[9];
          uint64_t v74 = v184[10];
          uint64_t v75 = v184[11];
          v186 += 2;
          *(void *)&long long v191 = v71;
          *((void *)&v191 + 1) = v185;
          *(void *)&long long v192 = v14;
          swift_unknownObjectRetain();
          specialized Rope.formIndex(after:)(&v191, v72, v73, v74, v75);
          swift_unknownObjectRelease();
          long long v76 = v191;
          uint64_t v77 = v192;
          unint64_t v78 = swift_unknownObjectRetain();
          unint64_t v79 = specialized Rope._endPath.getter(v78);
          uint64_t result = swift_unknownObjectRelease();
          if (*((void *)&v76 + 1) >= v79)
          {
            uint64_t v6 = v180;
            uint64_t v9 = a3;
            uint64_t v10 = a2;
            unint64_t v97 = v185;
          }
          else
          {
            uint64_t v9 = a3;
            uint64_t v10 = a2;
            if ((void)v76 != v184[11]) {
              goto LABEL_377;
            }
            if (v77)
            {
              uint64_t v80 = v77 + 24 * ((*((void *)&v76 + 1) >> ((4 * *(unsigned char *)(v77 + 18) + 8) & 0x3C)) & 0xFLL);
              uint64_t v81 = *(void *)(v80 + 32);
              uint64_t v82 = *(void *)(v80 + 40);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v98 = v184[8];
              swift_unknownObjectRetain();
              uint64_t v10 = a2;
              specialized Rope._Node.subscript.getter(*((unint64_t *)&v76 + 1), v98);
              uint64_t v81 = v99;
              uint64_t v82 = v100;
              swift_unknownObjectRelease();
            }
            uint64_t v6 = v180;
            unint64_t v97 = v185;
            if (specialized static Dictionary<>.== infix(_:_:)(v81, v177))
            {
              char v101 = specialized static Set.== infix(_:_:)(v82, v175);
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if (v101)
              {
                unint64_t v102 = specialized Rope._remove(at:)((uint64_t)&v191, v186, v185);
                uint64_t v103 = v184;
                unint64_t v104 = v184[8];
                uint64_t v105 = v184[11];
                if (v102 < specialized Rope._endPath.getter(v104) && *(unsigned char *)(v104 + 18))
                {
                  uint64_t v106 = (v102 >> ((4 * *(unsigned char *)(v104 + 18) + 8) & 0x3C)) & 0xF;
                  swift_unknownObjectRetain();
                  uint64_t v103 = v184;
                  specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v104 + 24, v106, v102);
                  swift_unknownObjectRelease();
                }
                unint64_t v107 = v102;
                uint64_t v108 = v191;
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                if (v105 != v103[11]) {
                  goto LABEL_399;
                }
                if (!*v180) {
                  goto LABEL_419;
                }
                uint64_t result = specialized Rope._Node._prepareModify(at:)(v107, (uint64_t)v202);
                long long v191 = v202[0];
                long long v192 = v202[1];
                long long v193 = v202[2];
                if (__OFADD__(*((void *)&v202[0] + 1), v108)) {
                  goto LABEL_400;
                }
                *((void *)&v191 + 1) = *((void *)&v202[0] + 1) + v108;
                uint64_t v186 = v105 + 1;
                v103[11] = v105 + 1;
                if (!v103[8]) {
                  goto LABEL_420;
                }
                uint64_t v14 = specialized Rope._Node._finalizeModify(_:)(v187, &v191);
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                unint64_t v97 = v107;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
            }
          }
          unint64_t v109 = *v6;
          if (*v6) {
            unint64_t v109 = *(unsigned __int8 *)(v109 + 18);
          }
          long long v68 = v184;
          unint64_t v185 = v97;
          if (v97 <= v109)
          {
            swift_bridgeObjectRelease_n();
            uint64_t result = swift_bridgeObjectRelease_n();
            uint64_t v94 = v182;
            goto LABEL_233;
          }
          uint64_t v110 = v184[8];
          uint64_t v111 = v184[11];
          *(void *)&long long v191 = v186;
          *((void *)&v191 + 1) = v97;
          *(void *)&long long v192 = v14;
          if (v186 != v111) {
            goto LABEL_378;
          }
          if (v110)
          {
            unint64_t v112 = *(unsigned __int8 *)(v110 + 18);
            uint64_t result = swift_unknownObjectRetain();
          }
          else
          {
            unint64_t v112 = 0;
          }
          if (v185 <= v112) {
            goto LABEL_379;
          }
          char v113 = (4 * *((unsigned char *)v14 + 18) + 8) & 0x3C;
          if (((v185 >> v113) & 0xF) != 0)
          {
            unint64_t v114 = ((((v185 >> v113) & 0xF) - 1) << v113) | ((-15 << v113) - 1) & v185;
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v115 = v14;
            uint64_t v116 = v186;
          }
          else
          {
            swift_unknownObjectRetain();
            char v117 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v191, v110);
            uint64_t result = swift_unknownObjectRelease_n();
            if ((v117 & 1) == 0) {
              goto LABEL_394;
            }
            unint64_t v114 = *((void *)&v191 + 1);
            uint64_t v116 = v191;
            uint64_t v115 = (void *)v192;
          }
          uint64_t v10 = a2;
          if (v116 != v184[11]) {
            goto LABEL_380;
          }
          if (v115)
          {
            char v118 = &v115[3 * ((v114 >> ((4 * *((unsigned char *)v115 + 18) + 8) & 0x3C)) & 0xF)];
            uint64_t v119 = v118[4];
            uint64_t v120 = v118[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v121 = v184[8];
            swift_unknownObjectRetain();
            uint64_t v10 = a2;
            specialized Rope._Node.subscript.getter(v114, v121);
            uint64_t v119 = v122;
            uint64_t v120 = v123;
            swift_unknownObjectRelease();
          }
          if ((specialized static Dictionary<>.== infix(_:_:)(v119, v177) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
LABEL_208:
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            long long v68 = v184;
            uint64_t v94 = v182;
            goto LABEL_233;
          }
          char v174 = specialized static Set.== infix(_:_:)(v120, v175);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v174 & 1) == 0) {
            goto LABEL_208;
          }
          unint64_t v124 = specialized Rope._remove(at:)((uint64_t)&v191, v186, v185);
          uint64_t v125 = v184;
          unint64_t v126 = v184[8];
          uint64_t v127 = v184[11];
          if (v124 >= specialized Rope._endPath.getter(v126))
          {
            unint64_t v126 = 0;
          }
          else if (*(unsigned char *)(v126 + 18))
          {
            uint64_t v128 = (v124 >> ((4 * *(unsigned char *)(v126 + 18) + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            uint64_t v125 = v184;
            uint64_t v129 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v126 + 24, v128, v124);
            swift_unknownObjectRelease();
            unint64_t v126 = v129;
          }
          uint64_t v188 = v127;
          unint64_t v189 = v124;
          unint64_t v190 = v126;
          uint64_t v133 = v191;
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v127 != v125[11]) {
            goto LABEL_401;
          }
          uint64_t v134 = v125[8];
          if (v134)
          {
            unint64_t v135 = *(unsigned __int8 *)(v134 + 18);
            uint64_t result = swift_unknownObjectRetain();
            if (v124 <= v135) {
              goto LABEL_402;
            }
          }
          else if (!v124)
          {
            goto LABEL_402;
          }
          if (v126 && (char v169 = (4 * *(unsigned char *)(v126 + 18) + 8) & 0x3C, ((v124 >> v169) & 0xF) != 0))
          {
            unint64_t v189 = ((((v124 >> v169) & 0xF) - 1) << v169) | ((-15 << v169) - 1) & v124;
            uint64_t result = swift_unknownObjectRelease();
          }
          else
          {
            swift_unknownObjectRetain();
            char v170 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v188, v134);
            uint64_t result = swift_unknownObjectRelease_n();
            if ((v170 & 1) == 0) {
              goto LABEL_407;
            }
            uint64_t v127 = v188;
          }
          uint64_t v10 = a2;
          long long v68 = v184;
          uint64_t v6 = v180;
          if (v127 != v184[11]) {
            goto LABEL_403;
          }
          if (!*v180) {
            goto LABEL_421;
          }
          unint64_t v171 = v189;
          uint64_t result = specialized Rope._Node._prepareModify(at:)(v189, (uint64_t)v203);
          long long v191 = v203[0];
          long long v192 = v203[1];
          long long v193 = v203[2];
          BOOL v21 = __OFSUB__(v32, *((void *)&v203[0] + 1));
          v32 -= *((void *)&v203[0] + 1);
          if (v21) {
            goto LABEL_404;
          }
          if (__OFADD__(*((void *)&v203[0] + 1), v133)) {
            goto LABEL_405;
          }
          *((void *)&v191 + 1) = *((void *)&v203[0] + 1) + v133;
          uint64_t v186 = v127 + 1;
          v184[11] = v127 + 1;
          if (!v184[8]) {
            goto LABEL_422;
          }
          uint64_t v14 = specialized Rope._Node._finalizeModify(_:)(v187, &v191);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v9 = a3;
          uint64_t v94 = v182 - 1;
          if (__OFSUB__(v182, 1)) {
            goto LABEL_406;
          }
          unint64_t v185 = v171;
        }
        else
        {
          if (v69 != v184[11]) {
            goto LABEL_367;
          }
          if (!*v6) {
            goto LABEL_417;
          }
          specialized Rope._Node._prepareModify(at:)(v185, (uint64_t)&v204);
          long long v209 = v205;
          long long v191 = v204;
          long long v192 = v205;
          long long v193 = v206;
          long long v93 = v194;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v209);
          uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v209 + 8);
          long long v192 = v93;
          v186 += 2;
          v184[11] = v186;
          if (!v184[8]) {
            goto LABEL_418;
          }
          uint64_t v14 = specialized Rope._Node._finalizeModify(_:)(&v188, &v191);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v94 = v182;
        }
LABEL_233:
        uint64_t v139 = v68[8];
        uint64_t v140 = v68[11];
        *(void *)&long long v191 = v186;
        *((void *)&v191 + 1) = v185;
        *(void *)&long long v192 = v14;
        BOOL v21 = __OFADD__(v94, 1);
        uint64_t v141 = v94 + 1;
        if (v21) {
          goto LABEL_346;
        }
        if (v186 != v140) {
          goto LABEL_347;
        }
        uint64_t v182 = v141;
        if (v14)
        {
          unint64_t v142 = v14[3 * ((v185 >> ((4 * *((unsigned char *)v14 + 18) + 8) & 0x3C)) & 0xF) + 3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          unint64_t v142 = specialized Rope._Node.subscript.getter(v185, v139);
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v21 = __OFADD__(v32, v142);
        v32 += v142;
        if (v21) {
          goto LABEL_348;
        }
        if (v139)
        {
          unint64_t v143 = ((-15 << ((4 * *(unsigned char *)(v139 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v139 + 18) | ((unint64_t)*(unsigned __int16 *)(v139 + 16) << ((4 * *(unsigned char *)(v139 + 18) + 8) & 0x3C));
          uint64_t result = swift_unknownObjectRetain();
        }
        else
        {
          unint64_t v143 = 0;
        }
        uint64_t v33 = v184;
        if (v185 >= v143) {
          goto LABEL_349;
        }
        if (v14
          && (char v144 = (4 * *((unsigned char *)v14 + 18) + 8) & 0x3C,
              unint64_t v145 = ((v185 >> v144) & 0xF) + 1,
              v145 < *((unsigned __int16 *)v14 + 8)))
        {
          unint64_t v13 = (v145 << v144) | ((-15 << v144) - 1) & v185;
          uint64_t result = swift_unknownObjectRelease_n();
        }
        else
        {
          int v146 = *(unsigned __int8 *)(v139 + 18);
          char v147 = (4 * v146 + 8) & 0x3C;
          uint64_t v188 = (v185 >> v147) & 0xF;
          if (v146)
          {
            swift_unknownObjectRetain();
            char v148 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v139 + 24, &v188, (uint64_t)&v191, v139, v146);
            uint64_t result = swift_unknownObjectRelease();
            if (v148)
            {
              uint64_t result = swift_unknownObjectRelease_n();
              unint64_t v13 = *((void *)&v191 + 1);
            }
            else
            {
LABEL_251:
              if (v139)
              {
                int v150 = *(unsigned __int8 *)(v139 + 18);
                uint64_t v151 = *(unsigned __int16 *)(v139 + 16);
                uint64_t result = swift_unknownObjectRelease_n();
                unint64_t v13 = ((-15 << ((4 * v150 + 8) & 0x3C)) - 1) & v150 | (unint64_t)(v151 << ((4 * v150 + 8) & 0x3C));
              }
              else
              {
                unint64_t v13 = 0;
              }
              *(void *)&long long v191 = v186;
              *((void *)&v191 + 1) = v13;
              *(void *)&long long v192 = 0;
            }
            uint64_t v6 = v180;
            goto LABEL_256;
          }
          unint64_t v149 = ((v185 >> v147) & 0xF) + 1;
          if (v149 >= *(unsigned __int16 *)(v139 + 16)) {
            goto LABEL_251;
          }
          unint64_t v13 = (v149 << v147) | ((-15 << v147) - 1) & v185;
          *((void *)&v191 + 1) = v13;
          uint64_t result = swift_unknownObjectRelease_n();
          *(void *)&long long v192 = v139;
        }
LABEL_256:
        uint64_t v34 = v191;
        uint64_t v14 = (void *)v192;
        if (v32 >= v9)
        {
          uint64_t v152 = *v6;
          if (v10 == v9)
          {
            uint64_t v34 = v184[11];
            if (v152)
            {
              uint64_t v153 = v184[10];
              if (v153 < v10) {
                goto LABEL_376;
              }
              uint64_t v154 = v184[9];
              uint64_t v155 = *(unsigned __int8 *)(v152 + 18);
              if (*(_WORD *)(v152 + 16) && v153 > a2)
              {
                uint64_t v35 = v184[11];
                if (*(unsigned char *)(v152 + 18))
                {
                  uint64_t result = swift_unknownObjectRetain_n();
                  uint64_t v36 = a2;
                  uint64_t v156 = (void *)v152;
                  while (1)
                  {
                    uint64_t v158 = *((unsigned __int16 *)v156 + 8);
                    if (!*((_WORD *)v156 + 8)) {
                      goto LABEL_265;
                    }
                    uint64_t v159 = v156[5];
                    uint64_t v160 = v36 - v159;
                    if (__OFSUB__(v36, v159)) {
                      goto LABEL_352;
                    }
                    if (__OFADD__(v160, 1)) {
                      goto LABEL_353;
                    }
                    if (v160 + 1 <= 0)
                    {
                      uint64_t v158 = 0;
                    }
                    else
                    {
                      if (v158 == 1)
                      {
                        v36 -= v159;
LABEL_265:
                        if (v36) {
                          goto LABEL_350;
                        }
                        goto LABEL_266;
                      }
                      uint64_t v161 = v156[8];
                      BOOL v21 = __OFSUB__(v160, v161);
                      uint64_t v162 = v160 - v161;
                      if (v21) {
                        goto LABEL_362;
                      }
                      if (__OFADD__(v162, 1)) {
                        goto LABEL_363;
                      }
                      if (v162 + 1 >= 1)
                      {
                        if (v158 != 2)
                        {
                          uint64_t v163 = v156 + 11;
                          uint64_t v164 = 2;
                          while (v158 != v164)
                          {
                            uint64_t v36 = v162 - *v163;
                            if (__OFSUB__(v162, *v163)) {
                              goto LABEL_339;
                            }
                            if (__OFADD__(v36, 1)) {
                              goto LABEL_340;
                            }
                            if (v36 + 1 < 1)
                            {
                              uint64_t v158 = v164;
                              uint64_t v36 = v162;
                              goto LABEL_266;
                            }
                            ++v164;
                            v163 += 3;
                            uint64_t v162 = v36;
                            if (v158 == v164) {
                              goto LABEL_265;
                            }
                          }
LABEL_338:
                          __break(1u);
LABEL_339:
                          __break(1u);
LABEL_340:
                          __break(1u);
LABEL_341:
                          __break(1u);
                          goto LABEL_342;
                        }
                        uint64_t v36 = v162;
                        goto LABEL_265;
                      }
                      uint64_t v158 = 1;
                      uint64_t v36 = v160;
                    }
LABEL_266:
                    char v157 = (4 * *((unsigned char *)v156 + 18) + 8) & 0x3C;
                    uint64_t v155 = ((-15 << v157) - 1) & v155 | (v158 << v157);
                    uint64_t v14 = (void *)v156[3 * v158 + 3];
                    swift_unknownObjectRetain();
                    uint64_t result = swift_unknownObjectRelease();
                    uint64_t v156 = v14;
                    if (!*((unsigned char *)v14 + 18)) {
                      goto LABEL_292;
                    }
                  }
                }
                uint64_t result = swift_unknownObjectRetain_n();
                uint64_t v155 = 0;
                uint64_t v36 = a2;
                uint64_t v14 = (void *)v152;
LABEL_292:
                uint64_t v165 = *((unsigned __int16 *)v14 + 8);
                if (*((_WORD *)v14 + 8))
                {
                  uint64_t v166 = v14[3];
                  BOOL v21 = __OFSUB__(v36, v166);
                  uint64_t v167 = v36 - v166;
                  if (v21) {
                    goto LABEL_395;
                  }
                  if (__OFADD__(v167, 1)) {
                    goto LABEL_396;
                  }
                  if (v167 + 1 <= 0)
                  {
                    uint64_t v165 = 0;
                    goto LABEL_328;
                  }
                  if (v165 != 1)
                  {
                    uint64_t v168 = v14[6];
                    uint64_t v36 = v167 - v168;
                    if (__OFSUB__(v167, v168)) {
                      goto LABEL_408;
                    }
                    if (__OFADD__(v36, 1)) {
                      goto LABEL_409;
                    }
                    if (v36 + 1 >= 1)
                    {
                      if (v165 != 2)
                      {
                        uint64_t v172 = v14 + 9;
                        uint64_t v173 = 2;
                        while (v165 != v173)
                        {
                          uint64_t v167 = v36 - *v172;
                          if (__OFSUB__(v36, *v172)) {
                            goto LABEL_386;
                          }
                          if (__OFADD__(v167, 1)) {
                            goto LABEL_387;
                          }
                          if (v167 + 1 < 1)
                          {
                            uint64_t v165 = v173;
                            goto LABEL_328;
                          }
                          ++v173;
                          v172 += 3;
                          uint64_t v36 = v167;
                          if (v165 == v173) {
                            goto LABEL_302;
                          }
                        }
                        goto LABEL_385;
                      }
                      goto LABEL_301;
                    }
                    uint64_t v165 = 1;
                    uint64_t v36 = v167;
LABEL_328:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    unint64_t v13 = v155 & 0xFFFFFFFFFFFFF0FFLL | (v165 << 8);
                    uint64_t v6 = v180;
LABEL_52:
                    swift_unknownObjectRetain();
                    uint64_t v182 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v13, (uint64_t)v14, v152, v154);
                    uint64_t result = swift_unknownObjectRelease_n();
                    uint64_t v34 = v35;
                    uint64_t v10 = a2;
                    goto LABEL_53;
                  }
                }
                else
                {
LABEL_301:
                  uint64_t v167 = v36;
                }
LABEL_302:
                if (v167) {
                  goto LABEL_392;
                }
                uint64_t v36 = 0;
                goto LABEL_328;
              }
              uint64_t v35 = v184[11];
              unint64_t v13 = ((-15 << ((4 * v155 + 8) & 0x3C)) - 1) & v155 | ((unint64_t)*(unsigned __int16 *)(v152 + 16) << ((4 * v155 + 8) & 0x3C));
              swift_unknownObjectRetain();
              uint64_t v36 = 0;
              uint64_t v14 = 0;
              goto LABEL_52;
            }
            if (v10 > 0) {
              goto LABEL_384;
            }
            uint64_t v36 = 0;
            uint64_t v14 = 0;
            unint64_t v13 = 0;
            uint64_t v182 = 0;
LABEL_53:
            BOOL v21 = __OFSUB__(v10, v36);
            uint64_t v32 = v10 - v36;
            uint64_t v33 = v184;
            if (v21) {
              goto LABEL_369;
            }
          }
          else
          {
            uint64_t v32 = 0;
            uint64_t v182 = 0;
            uint64_t v14 = 0;
            unint64_t v13 = 0;
            uint64_t v34 = v184[11];
            if (v152)
            {
              uint64_t v14 = 0;
              uint64_t v32 = v184[10];
              uint64_t v182 = v184[9];
              unint64_t v13 = ((-15 << ((4 * *(unsigned char *)(v152 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v152 + 18) | ((unint64_t)*(unsigned __int16 *)(v152 + 16) << ((4 * *(unsigned char *)(v152 + 18) + 8) & 0x3C));
            }
          }
        }
      }
      if (*(unsigned char *)(v16 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v9 = v10;
        uint64_t v7 = v16;
LABEL_73:
        uint64_t v28 = *(unsigned __int16 *)(v7 + 16);
        if (!*(_WORD *)(v7 + 16)) {
          goto LABEL_71;
        }
        uint64_t v45 = *(void *)(v7 + 40);
        BOOL v21 = __OFSUB__(v9, v45);
        uint64_t v30 = v9 - v45;
        if (v21) {
          goto LABEL_336;
        }
        if (__OFADD__(v30, 1)) {
          goto LABEL_337;
        }
        if (v30 + 1 <= 0)
        {
          uint64_t v28 = 0;
          goto LABEL_72;
        }
        if (v28 == 1)
        {
          uint64_t v9 = v30;
LABEL_71:
          if (!v9) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_336:
          __break(1u);
LABEL_337:
          __break(1u);
          goto LABEL_338;
        }
        int64_t v46 = (uint64_t *)(v7 + 64);
        uint64_t v47 = 1;
        while (1)
        {
          uint64_t v48 = *v46;
          v46 += 3;
          uint64_t v9 = v30 - v48;
          if (__OFSUB__(v30, v48)) {
            break;
          }
          if (__OFADD__(v9, 1)) {
            goto LABEL_331;
          }
          if (v9 + 1 < 1)
          {
            uint64_t v28 = v47;
            uint64_t v9 = v30;
LABEL_72:
            char v44 = (4 * *(unsigned char *)(v7 + 18) + 8) & 0x3C;
            uint64_t v40 = ((-15 << v44) - 1) & v40 | (v28 << v44);
            uint64_t v10 = *(void *)(v7 + 24 + 24 * v28);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v7 = v10;
            if (!*(unsigned char *)(v10 + 18)) {
              goto LABEL_87;
            }
            goto LABEL_73;
          }
          ++v47;
          uint64_t v30 = v9;
          if (v28 == v47) {
            goto LABEL_71;
          }
        }
        __break(1u);
LABEL_331:
        __break(1u);
LABEL_332:
        __break(1u);
LABEL_333:
        __break(1u);
LABEL_334:
        uint64_t v26 = v30;
        uint64_t v15 = v28;
        continue;
      }
      break;
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v40 = 0;
    uint64_t v9 = v10;
    uint64_t v10 = v16;
LABEL_87:
    uint64_t v49 = *(unsigned __int16 *)(v10 + 16);
    if (!*(_WORD *)(v10 + 16)) {
      goto LABEL_99;
    }
    uint64_t v50 = *(void *)(v10 + 24);
    BOOL v21 = __OFSUB__(v9, v50);
    uint64_t v51 = v9 - v50;
    if (v21) {
      goto LABEL_382;
    }
    if (__OFADD__(v51, 1)) {
      goto LABEL_383;
    }
    if (v51 + 1 <= 0)
    {
      uint64_t v49 = 0;
    }
    else
    {
      if (v49 == 1)
      {
        uint64_t v9 = v51;
LABEL_99:
        if (v9) {
          goto LABEL_381;
        }
        goto LABEL_100;
      }
      uint64_t v52 = (uint64_t *)(v10 + 48);
      uint64_t v53 = 1;
      while (1)
      {
        uint64_t v54 = *v52;
        v52 += 3;
        uint64_t v9 = v51 - v54;
        if (__OFSUB__(v51, v54)) {
          goto LABEL_358;
        }
        if (__OFADD__(v9, 1)) {
          goto LABEL_359;
        }
        if (v9 + 1 < 1) {
          break;
        }
        ++v53;
        uint64_t v51 = v9;
        if (v49 == v53) {
          goto LABEL_99;
        }
      }
      uint64_t v49 = v53;
      uint64_t v9 = v51;
    }
LABEL_100:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v42 = v40 & 0xFFFFFFFFFFFFF0FFLL | (v49 << 8);
    goto LABEL_101;
  }
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
  return result;
}

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)(void *result, uint64_t a2, int64_t a3, uint64_t a4)
{
  uint64_t v5 = result[8];
  long long v201 = result + 8;
  if (v5) {
    uint64_t v6 = result[10];
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 < 0) {
    goto LABEL_445;
  }
  uint64_t i = a2;
  if (v6 < a2) {
    goto LABEL_445;
  }
  uint64_t v9 = result[9];
  unint64_t v10 = result[11];
  long long v196 = result;
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && result[10] > a2)
    {
      uint64_t v207 = result[9];
      unint64_t v13 = *(unsigned __int8 *)(v5 + 18);
      if (!*(unsigned char *)(v5 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        int64_t v17 = i;
        uint64_t v4 = v5;
LABEL_368:
        int64_t v18 = *(unsigned __int16 *)(v4 + 16);
        if (!*(_WORD *)(v4 + 16))
        {
          uint64_t i = a2;
          goto LABEL_385;
        }
        uint64_t v189 = *(void *)(v4 + 24);
        BOOL v23 = __OFSUB__(v17, v189);
        int64_t v14 = v17 - v189;
        uint64_t i = a2;
        if (v23) {
          goto LABEL_470;
        }
        if (!__OFADD__(v14, 1))
        {
          if (v14 + 1 <= 0)
          {
            int64_t v18 = 0;
            goto LABEL_386;
          }
          if (v18 == 1)
          {
            int64_t v17 = v14;
            goto LABEL_385;
          }
          goto LABEL_380;
        }
        goto LABEL_471;
      }
      uint64_t result = (void *)swift_unknownObjectRetain_n();
      int64_t v17 = i;
      uint64_t v181 = v5;
      while (1)
      {
        uint64_t v183 = *(unsigned __int16 *)(v181 + 16);
        if (!*(_WORD *)(v181 + 16)) {
          goto LABEL_352;
        }
        uint64_t v184 = *(void *)(v181 + 40);
        BOOL v23 = __OFSUB__(v17, v184);
        int64_t v185 = v17 - v184;
        if (v23) {
          goto LABEL_425;
        }
        if (__OFADD__(v185, 1)) {
          goto LABEL_426;
        }
        if (v185 + 1 > 0) {
          break;
        }
        uint64_t v183 = 0;
LABEL_353:
        char v182 = (4 * *(unsigned char *)(v181 + 18) + 8) & 0x3C;
        unint64_t v13 = ((-15 << v182) - 1) & v13 | (v183 << v182);
        uint64_t v4 = *(void *)(v181 + 24 + 24 * v183);
        swift_unknownObjectRetain();
        uint64_t result = (void *)swift_unknownObjectRelease();
        uint64_t v181 = v4;
        if (!*(unsigned char *)(v4 + 18)) {
          goto LABEL_368;
        }
      }
      if (v183 != 1)
      {
        uint64_t v186 = (uint64_t *)(v181 + 64);
        uint64_t v187 = 1;
        while (1)
        {
          uint64_t v188 = *v186;
          v186 += 3;
          int64_t v17 = v185 - v188;
          if (__OFSUB__(v185, v188)) {
            break;
          }
          if (__OFADD__(v17, 1)) {
            goto LABEL_400;
          }
          if (v17 + 1 < 1)
          {
            uint64_t v183 = v187;
            int64_t v17 = v185;
            goto LABEL_353;
          }
          ++v187;
          int64_t v185 = v17;
          if (v183 == v187) {
            goto LABEL_352;
          }
        }
LABEL_399:
        __break(1u);
LABEL_400:
        __break(1u);
LABEL_401:
        __break(1u);
LABEL_402:
        __break(1u);
        goto LABEL_403;
      }
      int64_t v17 = v185;
LABEL_352:
      if (v17) {
        goto LABEL_424;
      }
      goto LABEL_353;
    }
  }
  unint64_t v12 = swift_unknownObjectRetain_n();
  unint64_t v13 = specialized Rope._endPath.getter(v12);
  uint64_t result = (void *)swift_unknownObjectRelease();
  uint64_t v16 = 0;
  int64_t v17 = 0;
  if (!v5) {
    goto LABEL_387;
  }
  while (1)
  {
    swift_unknownObjectRetain();
    uint64_t v200 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v13, v16, v5, v9);
    uint64_t result = (void *)swift_unknownObjectRelease_n();
    int64_t v18 = i - v17;
    if (!__OFSUB__(i, v17)) {
      break;
    }
    while (1)
    {
      __break(1u);
LABEL_390:
      __break(1u);
LABEL_391:
      __break(1u);
LABEL_392:
      int64_t v18 = v15;
      int64_t v17 = v14;
LABEL_386:
      swift_unknownObjectRelease();
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v16 = v4;
      int64_t v14 = v13 & 0xFFFFFFFFFFFFF0FFLL;
      unint64_t v13 = v13 & 0xFFFFFFFFFFFFF0FFLL | (v18 << 8);
      uint64_t v9 = v207;
      if (v5) {
        break;
      }
LABEL_387:
      uint64_t v200 = 0;
      int64_t v18 = i - v17;
      if (!__OFSUB__(i, v17)) {
        goto LABEL_14;
      }
    }
  }
LABEL_14:
  uint64_t v4 = v16;
  int64_t v20 = a3;
  uint64_t v19 = v196;
  while (1)
  {
    uint64_t v5 = *v201;
    unint64_t v206 = v13;
    uint64_t v207 = v10;
    uint64_t v205 = v18;
    if (i != v20)
    {
      if (v5) {
        int64_t v28 = v19[10];
      }
      else {
        int64_t v28 = 0;
      }
      goto LABEL_68;
    }
    if (!v5)
    {
      if (i > 0) {
        goto LABEL_435;
      }
      uint64_t v27 = 0;
      goto LABEL_66;
    }
    uint64_t v24 = v19[10];
    if (v24 < i) {
      goto LABEL_421;
    }
    unint64_t v10 = v19[9];
    unint64_t v13 = *(unsigned __int8 *)(v5 + 18);
    if (*(_WORD *)(v5 + 16)) {
      BOOL v25 = v24 <= i;
    }
    else {
      BOOL v25 = 1;
    }
    uint64_t v197 = v19[11];
    if (!v25)
    {
      if (*(unsigned char *)(v5 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v27 = i;
        uint64_t v29 = v5;
        while (1)
        {
          int64_t v14 = *(unsigned __int16 *)(v29 + 16);
          if (!*(_WORD *)(v29 + 16)) {
            goto LABEL_35;
          }
          uint64_t v31 = *(void *)(v29 + 40);
          BOOL v23 = __OFSUB__(v27, v31);
          uint64_t v32 = v27 - v31;
          if (v23) {
            goto LABEL_394;
          }
          if (__OFADD__(v32, 1)) {
            goto LABEL_395;
          }
          if (v32 + 1 > 0) {
            break;
          }
          int64_t v14 = 0;
LABEL_36:
          char v30 = (4 * *(unsigned char *)(v29 + 18) + 8) & 0x3C;
          unint64_t v13 = ((-15 << v30) - 1) & v13 | (v14 << v30);
          int64_t v18 = *(void *)(v29 + 24 + 24 * v14);
          swift_unknownObjectRetain();
          uint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v29 = v18;
          if (!*(unsigned char *)(v18 + 18)) {
            goto LABEL_51;
          }
        }
        if (v14 != 1)
        {
          uint64_t v33 = (uint64_t *)(v29 + 64);
          uint64_t v34 = 1;
          while (1)
          {
            uint64_t v35 = *v33;
            v33 += 3;
            uint64_t v27 = v32 - v35;
            if (__OFSUB__(v32, v35)) {
              goto LABEL_378;
            }
            if (__OFADD__(v27, 1)) {
              goto LABEL_379;
            }
            if (v27 + 1 < 1) {
              break;
            }
            ++v34;
            uint64_t v32 = v27;
            if (v14 == v34) {
              goto LABEL_35;
            }
          }
          int64_t v14 = v34;
          uint64_t v27 = v32;
          goto LABEL_36;
        }
        uint64_t v27 = v32;
LABEL_35:
        if (v27)
        {
          __break(1u);
LABEL_394:
          __break(1u);
LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
LABEL_397:
          __break(1u);
LABEL_398:
          __break(1u);
          goto LABEL_399;
        }
        goto LABEL_36;
      }
      uint64_t result = (void *)swift_unknownObjectRetain_n();
      unint64_t v13 = 0;
      uint64_t v27 = i;
      int64_t v18 = v5;
LABEL_51:
      uint64_t v36 = *(unsigned __int16 *)(v18 + 16);
      if (*(_WORD *)(v18 + 16))
      {
        uint64_t v37 = *(void *)(v18 + 24);
        BOOL v23 = __OFSUB__(v27, v37);
        uint64_t v38 = v27 - v37;
        if (v23) {
          goto LABEL_442;
        }
        if (__OFADD__(v38, 1)) {
          goto LABEL_443;
        }
        if (v38 + 1 <= 0)
        {
          uint64_t v36 = 0;
LABEL_64:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v26 = v13 & 0xFFFFFFFFFFFFF0FFLL | (v36 << 8);
          int64_t v20 = a3;
          goto LABEL_65;
        }
        if (v36 != 1)
        {
          uint64_t v39 = (uint64_t *)(v18 + 48);
          uint64_t v40 = 1;
          while (1)
          {
            uint64_t v41 = *v39;
            v39 += 3;
            uint64_t v27 = v38 - v41;
            if (__OFSUB__(v38, v41)) {
              goto LABEL_418;
            }
            if (__OFADD__(v27, 1)) {
              goto LABEL_419;
            }
            if (v27 + 1 < 1) {
              break;
            }
            ++v40;
            uint64_t v38 = v27;
            if (v36 == v40) {
              goto LABEL_63;
            }
          }
          uint64_t v36 = v40;
          uint64_t v27 = v38;
          goto LABEL_64;
        }
        uint64_t v27 = v38;
      }
LABEL_63:
      if (v27) {
        goto LABEL_441;
      }
      goto LABEL_64;
    }
    unint64_t v26 = ((-15 << ((4 * v13 + 8) & 0x3C)) - 1) & v13 | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * v13 + 8) & 0x3C));
    swift_unknownObjectRetain();
    uint64_t v27 = 0;
    int64_t v18 = 0;
LABEL_65:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v197, v26, v18, v5, v10);
    uint64_t result = (void *)swift_unknownObjectRelease_n();
    unint64_t v13 = v206;
    unint64_t v10 = v207;
    int64_t v18 = v205;
LABEL_66:
    int64_t v28 = i - v27;
    if (__OFSUB__(i, v27)) {
      goto LABEL_416;
    }
    uint64_t v19 = v196;
LABEL_68:
    if (v18 >= v28) {
      return result;
    }
    if (v10 != v19[11]) {
      goto LABEL_401;
    }
    uint64_t v202 = (void *)v4;
    if (v4)
    {
      unint64_t v42 = (void *)(v4 + 24 * ((v13 >> ((4 * *(unsigned char *)(v4 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v43 = v42[4];
      uint64_t v5 = v42[5];
      unint64_t v44 = v42[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v10 = v43;
      unint64_t v13 = v5;
    }
    else
    {
      uint64_t v45 = v19[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v13, v45);
      unint64_t v43 = v46;
      uint64_t v5 = v47;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (v207 != v19[11]) {
        goto LABEL_420;
      }
      int64_t v48 = v20;
      uint64_t v49 = v19[8];
      swift_unknownObjectRetain();
      unint64_t v44 = specialized Rope._Node.subscript.getter(v13, v49);
      unint64_t v10 = v50;
      unint64_t v13 = v51;
      int64_t v20 = v48;
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    uint64_t v52 = v205 + v44;
    if (__OFADD__(v205, v44)) {
      goto LABEL_402;
    }
    *(void *)&long long v218 = v43;
    *((void *)&v218 + 1) = v5;
    if (v205 >= v20) {
      int64_t v53 = v20;
    }
    else {
      int64_t v53 = v205;
    }
    if (v205 >= i) {
      int64_t v18 = v53;
    }
    else {
      int64_t v18 = i;
    }
    if (v52 <= i) {
      uint64_t v54 = i;
    }
    else {
      uint64_t v54 = v52;
    }
    if (v52 > v20) {
      uint64_t v54 = v20;
    }
    if (v18 == v54) {
      break;
    }
    if (v18 != v205 || v54 != v52)
    {
      uint64_t v192 = v54;
      uint64_t i = v43 + 64;
      uint64_t v66 = 1 << *(unsigned char *)(v43 + 32);
      if (v66 < 64) {
        uint64_t v67 = ~(-1 << v66);
      }
      else {
        uint64_t v67 = -1;
      }
      unint64_t v68 = v67 & *(void *)(v43 + 64);
      int64_t v69 = (unint64_t)(v66 + 63) >> 6;
      uint64_t result = (void *)swift_bridgeObjectRetain();
      uint64_t v4 = 0;
      char v198 = 0;
      if (v68)
      {
LABEL_123:
        unint64_t v70 = __clz(__rbit64(v68));
        v68 &= v68 - 1;
        unint64_t v71 = v70 | (v4 << 6);
        goto LABEL_141;
      }
      while (1)
      {
        int64_t v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
LABEL_377:
          __break(1u);
LABEL_378:
          __break(1u);
LABEL_379:
          __break(1u);
LABEL_380:
          unint64_t v190 = (uint64_t *)(v4 + 48);
          uint64_t v15 = 1;
          while (1)
          {
            uint64_t v191 = *v190;
            v190 += 3;
            int64_t v17 = v14 - v191;
            if (__OFSUB__(v14, v191)) {
              goto LABEL_449;
            }
            if (__OFADD__(v17, 1)) {
              goto LABEL_450;
            }
            if (v17 + 1 < 1) {
              goto LABEL_392;
            }
            ++v15;
            int64_t v14 = v17;
            if (v18 == v15)
            {
LABEL_385:
              if (!v17) {
                goto LABEL_386;
              }
              goto LABEL_469;
            }
          }
        }
        if (v14 >= v69) {
          break;
        }
        unint64_t v72 = *(void *)(i + 8 * v14);
        ++v4;
        if (!v72)
        {
          uint64_t v4 = v14 + 1;
          if (v14 + 1 >= v69) {
            break;
          }
          unint64_t v72 = *(void *)(i + 8 * v4);
          if (!v72)
          {
            uint64_t v4 = v14 + 2;
            if (v14 + 2 >= v69) {
              break;
            }
            unint64_t v72 = *(void *)(i + 8 * v4);
            if (!v72)
            {
              uint64_t v4 = v14 + 3;
              if (v14 + 3 >= v69) {
                break;
              }
              unint64_t v72 = *(void *)(i + 8 * v4);
              if (!v72)
              {
                int64_t v73 = v14 + 4;
                if (v73 >= v69) {
                  break;
                }
                unint64_t v72 = *(void *)(i + 8 * v73);
                if (!v72)
                {
                  while (1)
                  {
                    uint64_t v4 = v73 + 1;
                    if (__OFADD__(v73, 1)) {
                      goto LABEL_408;
                    }
                    if (v4 >= v69) {
                      goto LABEL_147;
                    }
                    unint64_t v72 = *(void *)(i + 8 * v4);
                    ++v73;
                    if (v72) {
                      goto LABEL_140;
                    }
                  }
                }
                uint64_t v4 = v73;
              }
            }
          }
        }
LABEL_140:
        unint64_t v68 = (v72 - 1) & v72;
        unint64_t v71 = __clz(__rbit64(v72)) + (v4 << 6);
LABEL_141:
        uint64_t v74 = (unint64_t *)(*(void *)(v43 + 48) + 16 * v71);
        unint64_t v13 = *v74;
        unint64_t v10 = v74[1];
        if (*(void *)(a4 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v13, v10);
          uint64_t v5 = v75;
          swift_bridgeObjectRelease();
          if ((v5 & 1) == 0) {
            goto LABEL_145;
          }
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (v68) {
            goto LABEL_123;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
LABEL_145:
          uint64_t v217 = 0;
          long long v215 = 0u;
          long long v216 = 0u;
          long long v213 = 0u;
          long long v214 = 0u;
          uint64_t v5 = (uint64_t)&v218;
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v213, v13, v10);
          uint64_t result = (void *)swift_bridgeObjectRelease();
          char v198 = 1;
          if (v68) {
            goto LABEL_123;
          }
        }
      }
LABEL_147:
      uint64_t result = (void *)swift_release();
      if ((v198 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t i = a2;
        int64_t v20 = a3;
        uint64_t v19 = v196;
        goto LABEL_253;
      }
      uint64_t v19 = v196;
      if (__OFSUB__(v192, v18)) {
        goto LABEL_427;
      }
      unint64_t v10 = *((void *)&v218 + 1);
      uint64_t v76 = v218;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v18, v192, v192 - v18, v76, v10);
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v5 = v196[8];
      if (v5) {
        uint64_t v77 = v196[10];
      }
      else {
        uint64_t v77 = 0;
      }
      if (v205 < 0 || v77 < v205) {
        goto LABEL_428;
      }
      uint64_t v78 = v196[9];
      uint64_t v207 = v196[11];
      if (!v5 || !*(_WORD *)(v5 + 16) || v205 >= v196[10])
      {
        unint64_t v101 = swift_unknownObjectRetain_n();
        unint64_t v206 = specialized Rope._endPath.getter(v101);
        swift_unknownObjectRelease();
        uint64_t v4 = 0;
        uint64_t i = 0;
LABEL_248:
        uint64_t v202 = (void *)v4;
        if (v5)
        {
          swift_unknownObjectRetain();
          uint64_t v200 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v207, v206, v4, v5, v78);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_unknownObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          uint64_t v200 = 0;
        }
        int64_t v20 = a3;
        if (__OFSUB__(v205, i)) {
          goto LABEL_431;
        }
        v205 -= i;
        uint64_t i = a2;
        goto LABEL_253;
      }
      uint64_t v204 = v196[9];
      unint64_t v13 = *(unsigned __int8 *)(v5 + 18);
      if (*(unsigned char *)(v5 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t i = v205;
        uint64_t v79 = v5;
        while (1)
        {
          int64_t v14 = *(unsigned __int16 *)(v79 + 16);
          if (!*(_WORD *)(v79 + 16)) {
            goto LABEL_168;
          }
          uint64_t v96 = *(void *)(v79 + 40);
          BOOL v23 = __OFSUB__(i, v96);
          uint64_t v15 = i - v96;
          if (v23) {
            goto LABEL_414;
          }
          if (__OFADD__(v15, 1)) {
            goto LABEL_415;
          }
          if (v15 + 1 > 0) {
            break;
          }
          int64_t v14 = 0;
LABEL_169:
          char v95 = (4 * *(unsigned char *)(v79 + 18) + 8) & 0x3C;
          unint64_t v13 = ((-15 << v95) - 1) & v13 | (v14 << v95);
          uint64_t v4 = *(void *)(v79 + 24 + 24 * v14);
          swift_unknownObjectRetain();
          uint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v79 = v4;
          if (!*(unsigned char *)(v4 + 18)) {
            goto LABEL_228;
          }
        }
        if (v14 != 1)
        {
          unint64_t v97 = (uint64_t *)(v79 + 64);
          uint64_t v98 = 1;
          while (1)
          {
            uint64_t v99 = *v97;
            v97 += 3;
            uint64_t i = v15 - v99;
            if (__OFSUB__(v15, v99)) {
              goto LABEL_390;
            }
            if (__OFADD__(i, 1)) {
              goto LABEL_391;
            }
            if (i + 1 < 1) {
              break;
            }
            ++v98;
            uint64_t v15 = i;
            if (v14 == v98) {
              goto LABEL_168;
            }
          }
          int64_t v14 = v98;
          uint64_t i = v15;
          goto LABEL_169;
        }
        uint64_t i = v15;
LABEL_168:
        if (i) {
          goto LABEL_411;
        }
        goto LABEL_169;
      }
      uint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t i = v205;
      uint64_t v4 = v5;
LABEL_228:
      uint64_t v136 = *(unsigned __int16 *)(v4 + 16);
      if (!*(_WORD *)(v4 + 16)) {
        goto LABEL_246;
      }
      uint64_t v137 = *(void *)(v4 + 24);
      BOOL v23 = __OFSUB__(i, v137);
      uint64_t v138 = i - v137;
      if (v23) {
        goto LABEL_456;
      }
      if (__OFADD__(v138, 1)) {
        goto LABEL_457;
      }
      if (v138 + 1 <= 0)
      {
        uint64_t v136 = 0;
      }
      else
      {
        if (v136 == 1)
        {
          uint64_t i = v138;
LABEL_246:
          if (i) {
            goto LABEL_452;
          }
          goto LABEL_247;
        }
        unint64_t v142 = (uint64_t *)(v4 + 48);
        uint64_t v143 = 1;
        while (1)
        {
          uint64_t v144 = *v142;
          v142 += 3;
          uint64_t i = v138 - v144;
          if (__OFSUB__(v138, v144)) {
            goto LABEL_433;
          }
          if (__OFADD__(i, 1)) {
            goto LABEL_434;
          }
          if (i + 1 < 1) {
            break;
          }
          ++v143;
          uint64_t v138 = i;
          if (v136 == v143) {
            goto LABEL_246;
          }
        }
        uint64_t v136 = v143;
        uint64_t i = v138;
      }
LABEL_247:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v206 = v13 & 0xFFFFFFFFFFFFF0FFLL | (v136 << 8);
      uint64_t v78 = v204;
      goto LABEL_248;
    }
    if (v207 != v19[11]) {
      goto LABEL_417;
    }
    uint64_t v5 = (uint64_t)v201;
    if (!*v201) {
      goto LABEL_472;
    }
    specialized Rope._Node._prepareModify(at:)(v206, (uint64_t)&v219);
    v234[0] = v220;
    long long v213 = v219;
    long long v214 = v220;
    long long v215 = v221;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)v234);
    uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v234 + 8);
    long long v214 = MEMORY[0x1E4FBC868];
    uint64_t v203 = v207 + 1;
    v19[11] = v207 + 1;
    if (!v19[8]) {
      goto LABEL_473;
    }
    specialized Rope._Node._finalizeModify(_:)(&v210, &v213);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v55 = v43 + 64;
    uint64_t v56 = 1 << *(unsigned char *)(v43 + 32);
    if (v56 < 64) {
      uint64_t v57 = ~(-1 << v56);
    }
    else {
      uint64_t v57 = -1;
    }
    unint64_t v13 = v57 & *(void *)(v43 + 64);
    int64_t v58 = (unint64_t)(v56 + 63) >> 6;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    for (i = 0; v13; uint64_t result = (void *)swift_bridgeObjectRelease())
    {
      while (1)
      {
        unint64_t v59 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v60 = v59 | (v4 << 6);
LABEL_115:
        uint64_t v63 = (unint64_t *)(*(void *)(v43 + 48) + 16 * v60);
        unint64_t v10 = *v63;
        int64_t v18 = v63[1];
        uint64_t v64 = *(void *)(a4 + 16);
        swift_bridgeObjectRetain();
        if (v64)
        {
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v10, v18);
          uint64_t v5 = v65;
          swift_bridgeObjectRelease();
          if (v5) {
            break;
          }
        }
        uint64_t v217 = 0;
        long long v215 = 0u;
        long long v216 = 0u;
        long long v213 = 0u;
        long long v214 = 0u;
        uint64_t v5 = (uint64_t)&v218;
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v213, v10, v18);
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t i = 1;
        if (!v13) {
          goto LABEL_99;
        }
      }
    }
LABEL_99:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_377;
    }
    if (v14 < v58)
    {
      unint64_t v61 = *(void *)(v55 + 8 * v14);
      ++v4;
      if (v61) {
        goto LABEL_114;
      }
      uint64_t v4 = v14 + 1;
      if (v14 + 1 < v58)
      {
        unint64_t v61 = *(void *)(v55 + 8 * v4);
        if (v61) {
          goto LABEL_114;
        }
        uint64_t v4 = v14 + 2;
        if (v14 + 2 < v58)
        {
          unint64_t v61 = *(void *)(v55 + 8 * v4);
          if (v61) {
            goto LABEL_114;
          }
          uint64_t v4 = v14 + 3;
          if (v14 + 3 < v58)
          {
            unint64_t v61 = *(void *)(v55 + 8 * v4);
            if (v61) {
              goto LABEL_114;
            }
            int64_t v62 = v14 + 4;
            if (v62 < v58)
            {
              unint64_t v61 = *(void *)(v55 + 8 * v62);
              if (v61)
              {
                uint64_t v4 = v62;
LABEL_114:
                unint64_t v13 = (v61 - 1) & v61;
                unint64_t v60 = __clz(__rbit64(v61)) + (v4 << 6);
                goto LABEL_115;
              }
              while (1)
              {
                uint64_t v4 = v62 + 1;
                if (__OFADD__(v62, 1)) {
                  goto LABEL_409;
                }
                if (v4 >= v58) {
                  break;
                }
                unint64_t v61 = *(void *)(v55 + 8 * v4);
                ++v62;
                if (v61) {
                  goto LABEL_114;
                }
              }
            }
          }
        }
      }
    }
    swift_release();
    if ((i & 1) == 0)
    {
      int64_t v20 = a3;
      uint64_t v19 = v196;
      uint64_t result = (void *)v206;
      if (v203 != v196[11]) {
        goto LABEL_430;
      }
      if (!*v201) {
        goto LABEL_476;
      }
      specialized Rope._Node._prepareModify(at:)(v206, (uint64_t)&v228);
      long long v233 = v229;
      long long v213 = v228;
      long long v214 = v229;
      long long v215 = v230;
      long long v100 = v218;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v233);
      uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v233 + 8);
      long long v214 = v100;
      v207 += 2;
      v196[11] = v207;
      uint64_t i = a2;
      if (!v196[8]) {
        goto LABEL_477;
      }
      uint64_t v202 = specialized Rope._Node._finalizeModify(_:)(&v210, &v213);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      goto LABEL_253;
    }
    uint64_t result = (void *)v206;
    if (v203 != v196[11]) {
      goto LABEL_429;
    }
    if (!*v201) {
      goto LABEL_474;
    }
    specialized Rope._Node._prepareModify(at:)(v206, (uint64_t)&v222);
    uint64_t v231 = v223;
    uint64_t v232 = v224;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v231);
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v232);
    long long v213 = v222;
    long long v215 = v225;
    uint64_t v80 = *((void *)&v218 + 1);
    uint64_t result = (void *)v218;
    long long v214 = v218;
    uint64_t v81 = v207 + 2;
    v196[11] = v207 + 2;
    if (!v196[8]) {
      goto LABEL_475;
    }
    uint64_t v199 = (uint64_t)result;
    swift_bridgeObjectRetain_n();
    uint64_t v193 = v80;
    swift_bridgeObjectRetain_n();
    uint64_t v82 = specialized Rope._Node._finalizeModify(_:)(v209, &v213);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v83 = v196[8];
    uint64_t v84 = v196[9];
    uint64_t v85 = v196[10];
    uint64_t v86 = v196[11];
    v207 += 2;
    *(void *)&long long v213 = v81;
    *((void *)&v213 + 1) = v206;
    uint64_t v202 = v82;
    *(void *)&long long v214 = v82;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v213, v83, v84, v85, v86);
    swift_unknownObjectRelease();
    long long v87 = v213;
    uint64_t v88 = v214;
    unint64_t v89 = swift_unknownObjectRetain();
    unint64_t v90 = specialized Rope._endPath.getter(v89);
    uint64_t result = (void *)swift_unknownObjectRelease();
    if (*((void *)&v87 + 1) >= v90)
    {
      uint64_t i = a2;
    }
    else
    {
      if ((void)v87 != v196[11]) {
        goto LABEL_437;
      }
      if (v88)
      {
        uint64_t v91 = v88 + 24 * ((*((void *)&v87 + 1) >> ((4 * *(unsigned char *)(v88 + 18) + 8) & 0x3C)) & 0xFLL);
        uint64_t v92 = *(void *)(v91 + 32);
        uint64_t v93 = *(void *)(v91 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t i = a2;
        uint64_t v94 = v196;
      }
      else
      {
        uint64_t v94 = v196;
        uint64_t v102 = v196[8];
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(*((unint64_t *)&v87 + 1), v102);
        uint64_t v92 = v103;
        uint64_t v93 = v104;
        swift_unknownObjectRelease();
        uint64_t i = a2;
      }
      if (specialized static Dictionary<>.== infix(_:_:)(v92, v199))
      {
        char v105 = specialized static Set.== infix(_:_:)(v93, v193);
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v105)
        {
          unint64_t v106 = specialized Rope._remove(at:)((uint64_t)&v213, v207, v206);
          unint64_t v107 = v94[8];
          uint64_t v108 = v94[11];
          unint64_t v109 = v106;
          if (v106 < specialized Rope._endPath.getter(v107) && *(unsigned char *)(v107 + 18))
          {
            uint64_t v110 = (v106 >> ((4 * *(unsigned char *)(v107 + 18) + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v107 + 24, v110, v109);
            swift_unknownObjectRelease();
          }
          uint64_t v111 = v213;
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (v108 != v94[11]) {
            goto LABEL_458;
          }
          if (!*v201) {
            goto LABEL_478;
          }
          uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v109, (uint64_t)v226);
          long long v213 = v226[0];
          long long v214 = v226[1];
          long long v215 = v226[2];
          if (__OFADD__(*((void *)&v226[0] + 1), v111)) {
            goto LABEL_459;
          }
          *((void *)&v213 + 1) = *((void *)&v226[0] + 1) + v111;
          uint64_t v207 = v108 + 1;
          v94[11] = v108 + 1;
          if (!v94[8]) {
            goto LABEL_479;
          }
          uint64_t v202 = specialized Rope._Node._finalizeModify(_:)(v209, &v213);
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          goto LABEL_203;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
      }
    }
    unint64_t v109 = v206;
LABEL_203:
    unint64_t v112 = *v201;
    if (*v201) {
      unint64_t v112 = *(unsigned __int8 *)(v112 + 18);
    }
    uint64_t v19 = v196;
    uint64_t v113 = v199;
    unint64_t v114 = v202;
    unint64_t v206 = v109;
    if (v109 <= v112)
    {
      swift_bridgeObjectRelease_n();
      uint64_t result = (void *)swift_bridgeObjectRelease_n();
      int64_t v20 = a3;
      goto LABEL_253;
    }
    uint64_t v115 = v196[8];
    uint64_t v116 = v196[11];
    *(void *)&long long v213 = v207;
    *((void *)&v213 + 1) = v109;
    *(void *)&long long v214 = v202;
    if (v207 != v116) {
      goto LABEL_438;
    }
    if (v115)
    {
      unint64_t v117 = *(unsigned __int8 *)(v115 + 18);
      uint64_t result = (void *)swift_unknownObjectRetain();
      unint64_t v114 = v202;
      if (v109 <= v117) {
        goto LABEL_439;
      }
    }
    else if (!v109)
    {
      goto LABEL_439;
    }
    char v118 = (4 * *((unsigned char *)v114 + 18) + 8) & 0x3C;
    if (((v109 >> v118) & 0xF) != 0)
    {
      uint64_t v119 = v114;
      unint64_t v120 = ((((v109 >> v118) & 0xF) - 1) << v118) | ((-15 << v118) - 1) & v109;
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v121 = v119;
      uint64_t v122 = v207;
    }
    else
    {
      swift_unknownObjectRetain();
      char v123 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v213, v115);
      uint64_t result = (void *)swift_unknownObjectRelease_n();
      if ((v123 & 1) == 0) {
        goto LABEL_453;
      }
      unint64_t v120 = *((void *)&v213 + 1);
      uint64_t v122 = v213;
      uint64_t v121 = (void *)v214;
    }
    if (v122 != v196[11]) {
      goto LABEL_440;
    }
    int64_t v20 = a3;
    if (v121)
    {
      unint64_t v124 = &v121[3 * ((v120 >> ((4 * *((unsigned char *)v121 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v125 = v124[4];
      uint64_t v126 = v124[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v127 = v196[8];
      swift_unknownObjectRetain();
      uint64_t v113 = v199;
      specialized Rope._Node.subscript.getter(v120, v127);
      uint64_t v125 = v128;
      uint64_t v126 = v129;
      swift_unknownObjectRelease();
    }
    if ((specialized static Dictionary<>.== infix(_:_:)(v125, v113) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_226:
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      goto LABEL_253;
    }
    char v130 = specialized static Set.== infix(_:_:)(v126, v193);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v130 & 1) == 0) {
      goto LABEL_226;
    }
    unint64_t v131 = specialized Rope._remove(at:)((uint64_t)&v213, v207, v109);
    unint64_t v132 = v196[8];
    uint64_t v133 = v196[11];
    if (v131 >= specialized Rope._endPath.getter(v132))
    {
      unint64_t v132 = 0;
    }
    else if (*(unsigned char *)(v132 + 18))
    {
      uint64_t v134 = (v131 >> ((4 * *(unsigned char *)(v132 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      uint64_t v135 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v132 + 24, v134, v131);
      swift_unknownObjectRelease();
      unint64_t v132 = v135;
    }
    uint64_t v210 = v133;
    unint64_t v211 = v131;
    unint64_t v212 = v132;
    uint64_t v139 = v213;
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v133 != v196[11]) {
      goto LABEL_460;
    }
    uint64_t v140 = v196[8];
    if (v140)
    {
      unint64_t v141 = *(unsigned __int8 *)(v140 + 18);
      uint64_t result = (void *)swift_unknownObjectRetain();
      if (v131 <= v141) {
        goto LABEL_461;
      }
    }
    else if (!v131)
    {
      goto LABEL_461;
    }
    if (v132 && (char v177 = (4 * *(unsigned char *)(v132 + 18) + 8) & 0x3C, ((v131 >> v177) & 0xF) != 0))
    {
      unint64_t v211 = ((((v131 >> v177) & 0xF) - 1) << v177) | ((-15 << v177) - 1) & v131;
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t i = a2;
    }
    else
    {
      swift_unknownObjectRetain();
      char v178 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v210, v140);
      uint64_t result = (void *)swift_unknownObjectRelease_n();
      uint64_t i = a2;
      if ((v178 & 1) == 0) {
        goto LABEL_466;
      }
      uint64_t v133 = v210;
    }
    int64_t v20 = a3;
    if (v133 != v196[11]) {
      goto LABEL_462;
    }
    if (!*v201) {
      goto LABEL_480;
    }
    unint64_t v206 = v211;
    uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v211, (uint64_t)v227);
    long long v213 = v227[0];
    long long v214 = v227[1];
    long long v215 = v227[2];
    BOOL v23 = __OFSUB__(v205, *((void *)&v227[0] + 1));
    v205 -= *((void *)&v227[0] + 1);
    if (v23) {
      goto LABEL_463;
    }
    if (__OFADD__(*((void *)&v227[0] + 1), v139)) {
      goto LABEL_464;
    }
    *((void *)&v213 + 1) = *((void *)&v227[0] + 1) + v139;
    uint64_t v19 = v196;
    uint64_t v207 = v133 + 1;
    v196[11] = v133 + 1;
    if (!v196[8]) {
      goto LABEL_481;
    }
    uint64_t v202 = specialized Rope._Node._finalizeModify(_:)(v209, &v213);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (__OFSUB__(v200, 1)) {
      goto LABEL_465;
    }
    --v200;
LABEL_253:
    uint64_t v145 = v19[8];
    uint64_t v146 = v19[11];
    *(void *)&long long v213 = v207;
    *((void *)&v213 + 1) = v206;
    *(void *)&long long v214 = v202;
    BOOL v23 = __OFADD__(v200++, 1);
    if (v23) {
      goto LABEL_404;
    }
    if (v207 != v146) {
      goto LABEL_405;
    }
    if (v202)
    {
      unint64_t v147 = v202[3 * ((v206 >> ((4 * *((unsigned char *)v202 + 18) + 8) & 0x3C)) & 0xF) + 3];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v147 = specialized Rope._Node.subscript.getter(v206, v145);
    }
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    int64_t v18 = v205 + v147;
    if (__OFADD__(v205, v147)) {
      goto LABEL_406;
    }
    if (v145)
    {
      unint64_t v148 = ((-15 << ((4 * *(unsigned char *)(v145 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v145 + 18) | ((unint64_t)*(unsigned __int16 *)(v145 + 16) << ((4 * *(unsigned char *)(v145 + 18) + 8) & 0x3C));
      uint64_t result = (void *)swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v148 = 0;
    }
    if (v206 >= v148) {
      goto LABEL_407;
    }
    if (v202
      && (char v149 = (4 * *((unsigned char *)v202 + 18) + 8) & 0x3C,
          unint64_t v150 = ((v206 >> v149) & 0xF) + 1,
          v150 < *((unsigned __int16 *)v202 + 8)))
    {
      unint64_t v13 = (v150 << v149) | ((-15 << v149) - 1) & v206;
      uint64_t result = (void *)swift_unknownObjectRelease_n();
    }
    else
    {
      int v151 = *(unsigned __int8 *)(v145 + 18);
      char v152 = (4 * v151 + 8) & 0x3C;
      uint64_t v210 = (v206 >> v152) & 0xF;
      if (v151)
      {
        swift_unknownObjectRetain();
        char v153 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v145 + 24, &v210, (uint64_t)&v213, v145, v151);
        uint64_t result = (void *)swift_unknownObjectRelease();
        if ((v153 & 1) == 0) {
          goto LABEL_271;
        }
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        unint64_t v13 = *((void *)&v213 + 1);
      }
      else
      {
        unint64_t v154 = ((v206 >> v152) & 0xF) + 1;
        if (v154 >= *(unsigned __int16 *)(v145 + 16))
        {
LABEL_271:
          if (v145)
          {
            int v155 = *(unsigned __int8 *)(v145 + 18);
            int64_t v156 = v18;
            uint64_t v157 = *(unsigned __int16 *)(v145 + 16);
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            char v158 = (4 * v155 + 8) & 0x3C;
            uint64_t v159 = ((-15 << v158) - 1) & v155;
            uint64_t v160 = v157 << v158;
            int64_t v18 = v156;
            unint64_t v13 = v159 | v160;
          }
          else
          {
            unint64_t v13 = 0;
          }
          *(void *)&long long v213 = v207;
          *((void *)&v213 + 1) = v13;
          *(void *)&long long v214 = 0;
          goto LABEL_275;
        }
        unint64_t v13 = (v154 << v152) | ((-15 << v152) - 1) & v206;
        *((void *)&v213 + 1) = v13;
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        *(void *)&long long v214 = v145;
      }
    }
LABEL_275:
    unint64_t v10 = v213;
    uint64_t v4 = v214;
    if (v18 >= v20)
    {
      uint64_t v161 = *v201;
      if (i == v20)
      {
        unint64_t v10 = v19[11];
        if (v161)
        {
          uint64_t v162 = v19[10];
          if (v162 < i) {
            goto LABEL_436;
          }
          uint64_t v208 = v19[9];
          uint64_t v163 = *(unsigned __int8 *)(v161 + 18);
          if (!*(_WORD *)(v161 + 16) || v162 <= i)
          {
            unint64_t v13 = ((-15 << ((4 * v163 + 8) & 0x3C)) - 1) & v163 | ((unint64_t)*(unsigned __int16 *)(v161 + 16) << ((4 * v163 + 8) & 0x3C));
            swift_unknownObjectRetain();
            uint64_t v21 = 0;
            uint64_t v22 = 0;
LABEL_16:
            swift_unknownObjectRetain();
            uint64_t v200 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v13, v22, v161, v208);
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            uint64_t v4 = v22;
            goto LABEL_17;
          }
          if (*(unsigned char *)(v161 + 18))
          {
            uint64_t result = (void *)swift_unknownObjectRetain_n();
            uint64_t v21 = i;
            uint64_t v164 = v161;
            while (1)
            {
              uint64_t v166 = *(unsigned __int16 *)(v164 + 16);
              if (!*(_WORD *)(v164 + 16)) {
                goto LABEL_284;
              }
              uint64_t v167 = *(void *)(v164 + 40);
              uint64_t v168 = v21 - v167;
              if (__OFSUB__(v21, v167)) {
                goto LABEL_412;
              }
              if (__OFADD__(v168, 1)) {
                goto LABEL_413;
              }
              if (v168 + 1 <= 0)
              {
                uint64_t v166 = 0;
              }
              else
              {
                if (v166 == 1)
                {
                  v21 -= v167;
                  goto LABEL_284;
                }
                uint64_t v169 = *(void *)(v164 + 64);
                BOOL v23 = __OFSUB__(v168, v169);
                uint64_t v170 = v168 - v169;
                if (v23) {
                  goto LABEL_422;
                }
                if (__OFADD__(v170, 1)) {
                  goto LABEL_423;
                }
                if (v170 + 1 < 1)
                {
                  uint64_t v166 = 1;
                  uint64_t v21 = v168;
                }
                else
                {
                  if (v166 == 2)
                  {
                    uint64_t v21 = v170;
LABEL_284:
                    if (v21) {
                      goto LABEL_410;
                    }
                    goto LABEL_285;
                  }
                  unint64_t v171 = (void *)(v164 + 88);
                  uint64_t v172 = 2;
                  while (1)
                  {
                    if (v166 == v172) {
                      goto LABEL_396;
                    }
                    uint64_t v21 = v170 - *v171;
                    if (__OFSUB__(v170, *v171)) {
                      goto LABEL_397;
                    }
                    if (__OFADD__(v21, 1)) {
                      goto LABEL_398;
                    }
                    if (v21 + 1 < 1) {
                      break;
                    }
                    ++v172;
                    v171 += 3;
                    uint64_t v170 = v21;
                    if (v166 == v172) {
                      goto LABEL_284;
                    }
                  }
                  uint64_t v166 = v172;
                  uint64_t v21 = v170;
                }
              }
LABEL_285:
              char v165 = (4 * *(unsigned char *)(v164 + 18) + 8) & 0x3C;
              uint64_t v163 = ((-15 << v165) - 1) & v163 | (v166 << v165);
              uint64_t v22 = *(void *)(v164 + 24 + 24 * v166);
              swift_unknownObjectRetain();
              uint64_t result = (void *)swift_unknownObjectRelease();
              uint64_t v164 = v22;
              if (!*(unsigned char *)(v22 + 18)) {
                goto LABEL_311;
              }
            }
          }
          uint64_t result = (void *)swift_unknownObjectRetain_n();
          uint64_t v163 = 0;
          uint64_t v21 = i;
          uint64_t v22 = v161;
LABEL_311:
          uint64_t v173 = *(unsigned __int16 *)(v22 + 16);
          if (!*(_WORD *)(v22 + 16)) {
            goto LABEL_320;
          }
          uint64_t v174 = *(void *)(v22 + 24);
          BOOL v23 = __OFSUB__(v21, v174);
          uint64_t v175 = v21 - v174;
          if (v23) {
            goto LABEL_454;
          }
          if (__OFADD__(v175, 1)) {
            goto LABEL_455;
          }
          if (v175 + 1 <= 0)
          {
            uint64_t v173 = 0;
          }
          else
          {
            if (v173 == 1)
            {
LABEL_321:
              if (v175) {
                goto LABEL_451;
              }
              uint64_t v21 = 0;
              goto LABEL_347;
            }
            uint64_t v176 = *(void *)(v22 + 48);
            uint64_t v21 = v175 - v176;
            if (__OFSUB__(v175, v176)) {
              goto LABEL_467;
            }
            if (__OFADD__(v21, 1)) {
              goto LABEL_468;
            }
            if (v21 + 1 < 1)
            {
              uint64_t v173 = 1;
              uint64_t v21 = v175;
            }
            else
            {
              if (v173 == 2)
              {
LABEL_320:
                uint64_t v175 = v21;
                goto LABEL_321;
              }
              long long v179 = (void *)(v22 + 72);
              uint64_t v180 = 2;
              while (1)
              {
                if (v173 == v180) {
                  goto LABEL_446;
                }
                uint64_t v175 = v21 - *v179;
                if (__OFSUB__(v21, *v179)) {
                  goto LABEL_447;
                }
                if (__OFADD__(v175, 1)) {
                  goto LABEL_448;
                }
                if (v175 + 1 < 1) {
                  break;
                }
                ++v180;
                v179 += 3;
                uint64_t v21 = v175;
                if (v173 == v180) {
                  goto LABEL_321;
                }
              }
              uint64_t v173 = v180;
            }
          }
LABEL_347:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v13 = v163 & 0xFFFFFFFFFFFFF0FFLL | (v173 << 8);
          goto LABEL_16;
        }
        if (i > 0) {
          goto LABEL_444;
        }
        uint64_t v21 = 0;
        uint64_t v4 = 0;
        unint64_t v13 = 0;
        uint64_t v200 = 0;
LABEL_17:
        BOOL v23 = __OFSUB__(i, v21);
        int64_t v18 = i - v21;
        int64_t v20 = a3;
        if (v23) {
          goto LABEL_432;
        }
      }
      else
      {
        int64_t v18 = 0;
        uint64_t v200 = 0;
        uint64_t v4 = 0;
        unint64_t v13 = 0;
        unint64_t v10 = v19[11];
        if (v161)
        {
          uint64_t v4 = 0;
          int64_t v18 = v19[10];
          uint64_t v200 = v19[9];
          unint64_t v13 = ((-15 << ((4 * *(unsigned char *)(v161 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v161 + 18) | ((unint64_t)*(unsigned __int16 *)(v161 + 16) << ((4 * *(unsigned char *)(v161 + 18) + 8) & 0x3C));
        }
      }
    }
  }
LABEL_403:
  __break(1u);
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  __break(1u);
LABEL_427:
  __break(1u);
LABEL_428:
  __break(1u);
LABEL_429:
  __break(1u);
LABEL_430:
  __break(1u);
LABEL_431:
  __break(1u);
LABEL_432:
  __break(1u);
LABEL_433:
  __break(1u);
LABEL_434:
  __break(1u);
LABEL_435:
  __break(1u);
LABEL_436:
  __break(1u);
LABEL_437:
  __break(1u);
LABEL_438:
  __break(1u);
LABEL_439:
  __break(1u);
LABEL_440:
  __break(1u);
LABEL_441:
  __break(1u);
LABEL_442:
  __break(1u);
LABEL_443:
  __break(1u);
LABEL_444:
  __break(1u);
LABEL_445:
  __break(1u);
LABEL_446:
  __break(1u);
LABEL_447:
  __break(1u);
LABEL_448:
  __break(1u);
LABEL_449:
  __break(1u);
LABEL_450:
  __break(1u);
LABEL_451:
  __break(1u);
LABEL_452:
  __break(1u);
LABEL_453:
  __break(1u);
LABEL_454:
  __break(1u);
LABEL_455:
  __break(1u);
LABEL_456:
  __break(1u);
LABEL_457:
  __break(1u);
LABEL_458:
  __break(1u);
LABEL_459:
  __break(1u);
LABEL_460:
  __break(1u);
LABEL_461:
  __break(1u);
LABEL_462:
  __break(1u);
LABEL_463:
  __break(1u);
LABEL_464:
  __break(1u);
LABEL_465:
  __break(1u);
LABEL_466:
  __break(1u);
LABEL_467:
  __break(1u);
LABEL_468:
  __break(1u);
LABEL_469:
  __break(1u);
LABEL_470:
  __break(1u);
LABEL_471:
  __break(1u);
LABEL_472:
  __break(1u);
LABEL_473:
  __break(1u);
LABEL_474:
  __break(1u);
LABEL_475:
  __break(1u);
LABEL_476:
  __break(1u);
LABEL_477:
  __break(1u);
LABEL_478:
  __break(1u);
LABEL_479:
  __break(1u);
LABEL_480:
  __break(1u);
LABEL_481:
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AttributedString._InternalRunsSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

void *assignWithCopy for AttributedString._InternalRunsSlice(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for AttributedString._InternalRunsSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRunsSlice()
{
  return &type metadata for AttributedString._InternalRunsSlice;
}

uint64_t dispatch thunk of ParseStrategy.parse(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

void one-time initialization function for compatibility1()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_mainBundle);
  id v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (!v2) {
    goto LABEL_34;
  }
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  if (v3 == (id)0xD000000000000016 && v5 == 0x80000001823B29F0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    Swift::Bool v7 = 0;
    if ((v6 & 1) == 0)
    {
LABEL_35:
      static Calendar.compatibility1 = v7;
      return;
    }
  }
  id v8 = objc_msgSend(v0, sel_mainBundle);
  id v9 = objc_msgSend(v8, sel_infoDictionary);

  if (!v9)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    goto LABEL_33;
  }
  swift_unknownObjectRetain();
  uint64_t v10 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v10)
  {
    BOOL v11 = (void *)v10;
    goto LABEL_25;
  }
  id v12 = objc_msgSend(v9, sel_count);
  if (!v12)
  {

    BOOL v11 = (void *)MEMORY[0x1E4FBC868];
    if (!*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_29;
    }
LABEL_26:
    unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000001823B2A10);
    if (v42)
    {
      outlined init with copy of Any(v11[7] + 32 * v41, (uint64_t)&v45);
      goto LABEL_30;
    }
LABEL_29:
    long long v45 = 0u;
    long long v46 = 0u;
LABEL_30:
    swift_bridgeObjectRelease();
    if (*((void *)&v46 + 1))
    {
      if (swift_dynamicCast())
      {
        v43._countAndFlagsBits = 0x2E32312E38;
        v43._object = (void *)0xE500000000000000;
        Swift::Bool v7 = String.hasPrefix(_:)(v43);
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
LABEL_34:
      Swift::Bool v7 = 0;
      goto LABEL_35;
    }
LABEL_33:
    outlined destroy of Any?((uint64_t)&v45);
    goto LABEL_34;
  }
  uint64_t v13 = (uint64_t)v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  BOOL v11 = (void *)static _DictionaryStorage.allocate(capacity:)();
  int64_t v14 = (void *)v11[6];
  uint64_t v15 = v11[7];
  swift_retain();
  uint64_t v16 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v14, v15, v9, v13);
  if ((v16 & 0x8000000000000000) == 0 && v13 >= v16)
  {
    v11[2] = v16;
    if (!v16)
    {
LABEL_24:
      swift_release();
LABEL_25:

      if (!v11[2]) {
        goto LABEL_29;
      }
      goto LABEL_26;
    }
    int64_t v17 = v16 - 1;
    int64_t v18 = v11 + 8;
    while (1)
    {
      while (1)
      {
        if ((*(void *)((char *)v18 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17)) {
          goto LABEL_16;
        }
        BOOL v23 = (uint64_t *)(v11[6] + 16 * v17);
        uint64_t v24 = *v23;
        uint64_t v25 = v23[1];
        swift_bridgeObjectRetain();
        unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        char v28 = v27;
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v29 = v11[2];
        BOOL v30 = __OFSUB__(v29, 1);
        uint64_t v31 = v29 - 1;
        if (v30)
        {
          __break(1u);
          goto LABEL_37;
        }
        v11[2] = v31;
LABEL_16:
        if (--v17 < 0) {
          goto LABEL_24;
        }
      }
      *(void *)((char *)v18 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      if (v17 < (uint64_t)v26)
      {
        *(_OWORD *)(v11[6] + 16 * v26) = *(_OWORD *)(v11[6] + 16 * v17);
        uint64_t v19 = v11[7];
        int64_t v20 = (_OWORD *)(v19 + 32 * v17);
        long long v21 = v20[1];
        uint64_t v22 = (_OWORD *)(v19 + 32 * v26);
        *uint64_t v22 = *v20;
        v22[1] = v21;
        goto LABEL_16;
      }
      if (v26 == v17) {
        goto LABEL_16;
      }
      uint64_t v32 = v11[6];
      uint64_t v33 = (uint64_t *)(v32 + 16 * v26);
      uint64_t v34 = (uint64_t *)(v32 + 16 * v17);
      uint64_t v35 = *v33;
      uint64_t v36 = v33[1];
      uint64_t v37 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v37;
      *uint64_t v34 = v35;
      v34[1] = v36;
      uint64_t v38 = v11[7];
      uint64_t v39 = (_OWORD *)(v38 + 32 * v26);
      uint64_t v40 = (_OWORD *)(v38 + 32 * v17);
      outlined init with take of Any(v39, v44);
      outlined init with take of Any(v40, v39);
      outlined init with take of Any(v44, v40);
      if (v17 < 0) {
        goto LABEL_24;
      }
    }
  }
LABEL_37:
  __break(1u);
}

uint64_t _NSLinkedOnOrAfterCrystalglow()
{
  return dyld_program_sdk_at_least();
}

char *specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (a2 >> 60 == 15)
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = *v4;
      *uint64_t v4 = 0x8000000000000000;
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v13 = v12;
LABEL_5:
        swift_bridgeObjectRelease();
        int64_t v14 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v8);
        uint64_t v15 = *v14;
        unint64_t v16 = v14[1];
        specialized _NativeDictionary._delete(at:)(v8, v13);
        uint64_t *v5 = v13;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (char *)outlined consume of Data._Representation(v15, v16);
      }
LABEL_18:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
      uint64_t v30 = static _DictionaryStorage.copy(original:)();
      uint64_t v13 = v30;
      if (*(void *)(v12 + 16))
      {
        uint64_t result = (char *)(v30 + 64);
        uint64_t v31 = v12 + 64;
        unint64_t v32 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
        if (v13 != v12 || (unint64_t)result >= v31 + 8 * v32) {
          uint64_t result = (char *)memmove(result, (const void *)(v12 + 64), 8 * v32);
        }
        int64_t v33 = 0;
        *(void *)(v13 + 16) = *(void *)(v12 + 16);
        uint64_t v34 = 1 << *(unsigned char *)(v12 + 32);
        uint64_t v35 = -1;
        if (v34 < 64) {
          uint64_t v35 = ~(-1 << v34);
        }
        unint64_t v36 = v35 & *(void *)(v12 + 64);
        int64_t v37 = (unint64_t)(v34 + 63) >> 6;
        while (1)
        {
          if (v36)
          {
            unint64_t v38 = __clz(__rbit64(v36));
            v36 &= v36 - 1;
            unint64_t v39 = v38 | (v33 << 6);
          }
          else
          {
            int64_t v45 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_84;
            }
            if (v45 >= v37) {
              break;
            }
            unint64_t v46 = *(void *)(v31 + 8 * v45);
            ++v33;
            if (!v46)
            {
              int64_t v33 = v45 + 1;
              if (v45 + 1 >= v37) {
                break;
              }
              unint64_t v46 = *(void *)(v31 + 8 * v33);
              if (!v46)
              {
                int64_t v33 = v45 + 2;
                if (v45 + 2 >= v37) {
                  break;
                }
                unint64_t v46 = *(void *)(v31 + 8 * v33);
                if (!v46)
                {
                  int64_t v33 = v45 + 3;
                  if (v45 + 3 >= v37) {
                    break;
                  }
                  unint64_t v46 = *(void *)(v31 + 8 * v33);
                  if (!v46)
                  {
                    int64_t v33 = v45 + 4;
                    if (v45 + 4 >= v37) {
                      break;
                    }
                    unint64_t v46 = *(void *)(v31 + 8 * v33);
                    if (!v46)
                    {
                      int64_t v47 = v45 + 5;
                      if (v47 >= v37) {
                        break;
                      }
                      unint64_t v46 = *(void *)(v31 + 8 * v47);
                      if (!v46)
                      {
                        while (1)
                        {
                          int64_t v33 = v47 + 1;
                          if (__OFADD__(v47, 1)) {
                            goto LABEL_85;
                          }
                          if (v33 >= v37) {
                            goto LABEL_76;
                          }
                          unint64_t v46 = *(void *)(v31 + 8 * v33);
                          ++v47;
                          if (v46) {
                            goto LABEL_45;
                          }
                        }
                      }
                      int64_t v33 = v47;
                    }
                  }
                }
              }
            }
LABEL_45:
            unint64_t v36 = (v46 - 1) & v46;
            unint64_t v39 = __clz(__rbit64(v46)) + (v33 << 6);
          }
          uint64_t v40 = 16 * v39;
          unint64_t v41 = (uint64_t *)(*(void *)(v12 + 48) + v40);
          uint64_t v43 = *v41;
          uint64_t v42 = v41[1];
          long long v67 = *(_OWORD *)(*(void *)(v12 + 56) + v40);
          unint64_t v44 = (void *)(*(void *)(v13 + 48) + v40);
          *unint64_t v44 = v43;
          v44[1] = v42;
          *(_OWORD *)(*(void *)(v13 + 56) + v40) = v67;
          swift_bridgeObjectRetain();
          uint64_t result = (char *)outlined copy of Data._Representation(v67, *((unint64_t *)&v67 + 1));
        }
      }
LABEL_76:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
LABEL_80:
    return (char *)swift_bridgeObjectRelease();
  }
  unint64_t v8 = a2;
  uint64_t v12 = a1;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v69 = *v4;
  uint64_t v19 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v22 = *(void *)(v19 + 16);
  BOOL v23 = (v21 & 1) == 0;
  BOOL v24 = __OFADD__(v22, v23);
  uint64_t v25 = v22 + v23;
  if (v24)
  {
    __break(1u);
    goto LABEL_18;
  }
  char v26 = v21;
  if (*(void *)(v19 + 24) < v25)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v18);
    uint64_t v27 = v69;
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v26 & 1) != (v28 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_80;
    }
LABEL_15:
    if (v26)
    {
LABEL_16:
      uint64_t v29 = *(void *)(v27 + 56) + 16 * v20;
      outlined consume of Data._Representation(*(void *)v29, *(void *)(v29 + 8));
      *(void *)uint64_t v29 = v12;
      *(void *)(v29 + 8) = v8;
LABEL_79:
      uint64_t *v5 = v27;
      swift_bridgeObjectRelease();
      goto LABEL_80;
    }
LABEL_78:
    specialized _NativeDictionary._insert(at:key:value:)(v20, a3, a4, v12, v8, (void *)v27);
    swift_bridgeObjectRetain();
    goto LABEL_79;
  }
  if (v18)
  {
    uint64_t v27 = v19;
    goto LABEL_15;
  }
  unint64_t v64 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v48 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v48;
  if (!*(void *)(v19 + 16))
  {
LABEL_77:
    swift_bridgeObjectRelease();
    unint64_t v20 = v64;
    if (v26) {
      goto LABEL_16;
    }
    goto LABEL_78;
  }
  uint64_t result = (char *)(v48 + 64);
  __src = (char *)(v19 + 64);
  unint64_t v49 = (unint64_t)((1 << *(unsigned char *)(v27 + 32)) + 63) >> 6;
  if (v27 != v19 || result >= &__src[8 * v49]) {
    uint64_t result = (char *)memmove(result, __src, 8 * v49);
  }
  int64_t v50 = 0;
  *(void *)(v27 + 16) = *(void *)(v19 + 16);
  uint64_t v51 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v52 = -1;
  if (v51 < 64) {
    uint64_t v52 = ~(-1 << v51);
  }
  unint64_t v53 = v52 & *(void *)(v19 + 64);
  int64_t v65 = (unint64_t)(v51 + 63) >> 6;
  while (1)
  {
    if (v53)
    {
      unint64_t v54 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      unint64_t v55 = v54 | (v50 << 6);
      goto LABEL_54;
    }
    int64_t v61 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    if (v61 >= v65) {
      goto LABEL_77;
    }
    unint64_t v62 = *(void *)&__src[8 * v61];
    ++v50;
    if (!v62)
    {
      int64_t v50 = v61 + 1;
      if (v61 + 1 >= v65) {
        goto LABEL_77;
      }
      unint64_t v62 = *(void *)&__src[8 * v50];
      if (!v62)
      {
        int64_t v50 = v61 + 2;
        if (v61 + 2 >= v65) {
          goto LABEL_77;
        }
        unint64_t v62 = *(void *)&__src[8 * v50];
        if (!v62)
        {
          int64_t v50 = v61 + 3;
          if (v61 + 3 >= v65) {
            goto LABEL_77;
          }
          unint64_t v62 = *(void *)&__src[8 * v50];
          if (!v62)
          {
            int64_t v50 = v61 + 4;
            if (v61 + 4 >= v65) {
              goto LABEL_77;
            }
            unint64_t v62 = *(void *)&__src[8 * v50];
            if (!v62)
            {
              int64_t v50 = v61 + 5;
              if (v61 + 5 >= v65) {
                goto LABEL_77;
              }
              unint64_t v62 = *(void *)&__src[8 * v50];
              if (!v62) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_75:
    unint64_t v53 = (v62 - 1) & v62;
    unint64_t v55 = __clz(__rbit64(v62)) + (v50 << 6);
LABEL_54:
    uint64_t v56 = 16 * v55;
    uint64_t v57 = (uint64_t *)(*(void *)(v19 + 48) + v56);
    uint64_t v59 = *v57;
    uint64_t v58 = v57[1];
    long long v68 = *(_OWORD *)(*(void *)(v19 + 56) + v56);
    unint64_t v60 = (void *)(*(void *)(v27 + 48) + v56);
    *unint64_t v60 = v59;
    v60[1] = v58;
    *(_OWORD *)(*(void *)(v27 + 56) + v56) = v68;
    swift_bridgeObjectRetain();
    uint64_t result = (char *)outlined copy of Data._Representation(v68, *((unint64_t *)&v68 + 1));
  }
  int64_t v63 = v61 + 6;
  if (v63 >= v65) {
    goto LABEL_77;
  }
  unint64_t v62 = *(void *)&__src[8 * v63];
  if (v62)
  {
    int64_t v50 = v63;
    goto LABEL_75;
  }
  while (1)
  {
    int64_t v50 = v63 + 1;
    if (__OFADD__(v63, 1)) {
      break;
    }
    if (v50 >= v65) {
      goto LABEL_77;
    }
    unint64_t v62 = *(void *)&__src[8 * v50];
    ++v63;
    if (v62) {
      goto LABEL_75;
    }
  }
LABEL_86:
  __break(1u);
  return result;
}

char *specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  outlined init with take of Morphology._CustomPronoun?(a1, (uint64_t)v100);
  uint64_t v8 = v100[1];
  uint64_t v10 = v100[2];
  uint64_t v9 = v100[3];
  uint64_t v11 = v100[4];
  uint64_t v12 = v100[5];
  uint64_t v13 = v100[6];
  uint64_t v95 = v100[7];
  uint64_t v97 = v100[0];
  uint64_t v91 = v100[9];
  __src = (void *)v100[8];
  outlined init with take of Morphology._CustomPronoun?(a1, (uint64_t)v101);
  if (v102 == 1)
  {
    swift_bridgeObjectRetain();
    a2 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      return (char *)swift_bridgeObjectRelease();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v17 = v9;
LABEL_5:
      swift_bridgeObjectRelease();
      specialized _NativeDictionary._delete(at:)(a2, v17);
      *uint64_t v4 = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (char *)swift_bridgeObjectRelease();
    }
LABEL_20:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Morphology._CustomPronoun>);
    uint64_t v33 = static _DictionaryStorage.copy(original:)();
    uint64_t v17 = v33;
    if (*(void *)(v9 + 16))
    {
      uint64_t result = (char *)(v33 + 64);
      __srca = (char *)(v9 + 64);
      unint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v17 + 32)) + 63) >> 6;
      if (v17 != v9 || result >= &__srca[8 * v34]) {
        uint64_t result = (char *)memmove(result, __srca, 8 * v34);
      }
      int64_t v35 = 0;
      *(void *)(v17 + 16) = *(void *)(v9 + 16);
      uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
      uint64_t v37 = -1;
      if (v36 < 64) {
        uint64_t v37 = ~(-1 << v36);
      }
      unint64_t v38 = v37 & *(void *)(v9 + 64);
      int64_t v92 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          uint64_t v96 = (v38 - 1) & v38;
          int64_t v98 = v35;
          unint64_t v39 = __clz(__rbit64(v38)) | (v35 << 6);
        }
        else
        {
          int64_t v54 = v35 + 1;
          if (__OFADD__(v35, 1)) {
            goto LABEL_81;
          }
          if (v54 >= v92) {
            break;
          }
          unint64_t v55 = *(void *)&__srca[8 * v54];
          int64_t v56 = v35 + 1;
          if (!v55)
          {
            int64_t v56 = v35 + 2;
            if (v35 + 2 >= v92) {
              break;
            }
            unint64_t v55 = *(void *)&__srca[8 * v56];
            if (!v55)
            {
              int64_t v56 = v35 + 3;
              if (v35 + 3 >= v92) {
                break;
              }
              unint64_t v55 = *(void *)&__srca[8 * v56];
              if (!v55)
              {
                int64_t v56 = v35 + 4;
                if (v35 + 4 >= v92) {
                  break;
                }
                unint64_t v55 = *(void *)&__srca[8 * v56];
                if (!v55)
                {
                  int64_t v56 = v35 + 5;
                  if (v35 + 5 >= v92) {
                    break;
                  }
                  unint64_t v55 = *(void *)&__srca[8 * v56];
                  if (!v55)
                  {
                    uint64_t v57 = v35 + 6;
                    if (v35 + 6 >= v92) {
                      break;
                    }
                    unint64_t v55 = *(void *)&__srca[8 * v57];
                    if (!v55)
                    {
                      while (1)
                      {
                        int64_t v56 = v57 + 1;
                        if (__OFADD__(v57, 1)) {
                          goto LABEL_82;
                        }
                        if (v56 >= v92) {
                          goto LABEL_78;
                        }
                        unint64_t v55 = *(void *)&__srca[8 * v56];
                        ++v57;
                        if (v55) {
                          goto LABEL_47;
                        }
                      }
                    }
                    int64_t v56 = v35 + 6;
                  }
                }
              }
            }
          }
LABEL_47:
          uint64_t v96 = (v55 - 1) & v55;
          int64_t v98 = v56;
          unint64_t v39 = __clz(__rbit64(v55)) + (v56 << 6);
        }
        uint64_t v40 = 16 * v39;
        unint64_t v41 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v39);
        uint64_t v42 = *v41;
        uint64_t v43 = v41[1];
        uint64_t v44 = 80 * v39;
        uint64_t v45 = *(void *)(v9 + 56) + v44;
        uint64_t v46 = *(void *)v45;
        uint64_t v47 = *(void *)(v45 + 72);
        uint64_t v48 = (void *)(*(void *)(v17 + 48) + v40);
        long long v49 = *(_OWORD *)(v45 + 8);
        long long v50 = *(_OWORD *)(v45 + 24);
        long long v51 = *(_OWORD *)(v45 + 40);
        long long v52 = *(_OWORD *)(v45 + 56);
        *uint64_t v48 = v42;
        v48[1] = v43;
        uint64_t v53 = *(void *)(v17 + 56) + v44;
        *(void *)uint64_t v53 = v46;
        *(_OWORD *)(v53 + 8) = v49;
        *(_OWORD *)(v53 + 24) = v50;
        *(_OWORD *)(v53 + 40) = v51;
        *(_OWORD *)(v53 + 56) = v52;
        *(void *)(v53 + 72) = v47;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = (char *)swift_bridgeObjectRetain();
        unint64_t v38 = v96;
        int64_t v35 = v98;
      }
    }
LABEL_78:
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  uint64_t v89 = v9;
  uint64_t v90 = v12;
  uint64_t v88 = v11;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v99 = *v4;
  uint64_t v19 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v22 = *(void *)(v19 + 16);
  BOOL v23 = (v21 & 1) == 0;
  BOOL v24 = __OFADD__(v22, v23);
  uint64_t v25 = v22 + v23;
  if (v24)
  {
    __break(1u);
    goto LABEL_20;
  }
  char v26 = v21;
  if (*(void *)(v19 + 24) < v25)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v18);
    uint64_t v27 = v99;
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v26 & 1) != (v28 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return (char *)swift_bridgeObjectRelease();
    }
    goto LABEL_13;
  }
  if (v18)
  {
    uint64_t v27 = v19;
LABEL_13:
    uint64_t v30 = v88;
    uint64_t v29 = v89;
    uint64_t v31 = v90;
LABEL_14:
    *(void *)&long long v103 = v97;
    *((void *)&v103 + 1) = v8;
    uint64_t v104 = v10;
    uint64_t v105 = v29;
    uint64_t v106 = v30;
    uint64_t v107 = v31;
    uint64_t v108 = v13;
    uint64_t v109 = v95;
    uint64_t v110 = __src;
    uint64_t v111 = v91;
    if (v26)
    {
      outlined assign with take of Morphology._CustomPronoun((uint64_t)&v103, *(void *)(v27 + 56) + 80 * v20);
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v20, a2, a3, &v103, (void *)v27);
      swift_bridgeObjectRetain();
    }
    *uint64_t v4 = v27;
    swift_bridgeObjectRelease();
    return (char *)swift_bridgeObjectRelease();
  }
  unint64_t v83 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Morphology._CustomPronoun>);
  uint64_t v58 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v58;
  uint64_t v31 = v90;
  if (!*(void *)(v19 + 16))
  {
LABEL_79:
    swift_bridgeObjectRelease();
    unint64_t v20 = v83;
    uint64_t v30 = v88;
    uint64_t v29 = v89;
    goto LABEL_14;
  }
  uint64_t result = (char *)(v58 + 64);
  uint64_t v85 = (char *)(v19 + 64);
  unint64_t v59 = (unint64_t)((1 << *(unsigned char *)(v27 + 32)) + 63) >> 6;
  if (v27 != v19 || result >= &v85[8 * v59]) {
    uint64_t result = (char *)memmove(result, v85, 8 * v59);
  }
  int64_t v60 = 0;
  *(void *)(v27 + 16) = *(void *)(v19 + 16);
  uint64_t v61 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v62 = -1;
  if (v61 < 64) {
    uint64_t v62 = ~(-1 << v61);
  }
  unint64_t v63 = v62 & *(void *)(v19 + 64);
  int64_t v84 = (unint64_t)(v61 + 63) >> 6;
  while (1)
  {
    uint64_t v31 = v90;
    if (v63)
    {
      uint64_t v86 = (v63 - 1) & v63;
      int64_t v87 = v60;
      unint64_t v64 = __clz(__rbit64(v63)) | (v60 << 6);
      goto LABEL_56;
    }
    int64_t v79 = v60 + 1;
    if (__OFADD__(v60, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if (v79 >= v84) {
      goto LABEL_79;
    }
    unint64_t v80 = *(void *)&v85[8 * v79];
    int64_t v81 = v60 + 1;
    if (!v80)
    {
      int64_t v81 = v60 + 2;
      if (v60 + 2 >= v84) {
        goto LABEL_79;
      }
      unint64_t v80 = *(void *)&v85[8 * v81];
      if (!v80)
      {
        int64_t v81 = v60 + 3;
        if (v60 + 3 >= v84) {
          goto LABEL_79;
        }
        unint64_t v80 = *(void *)&v85[8 * v81];
        if (!v80)
        {
          int64_t v81 = v60 + 4;
          if (v60 + 4 >= v84) {
            goto LABEL_79;
          }
          unint64_t v80 = *(void *)&v85[8 * v81];
          if (!v80)
          {
            int64_t v81 = v60 + 5;
            if (v60 + 5 >= v84) {
              goto LABEL_79;
            }
            unint64_t v80 = *(void *)&v85[8 * v81];
            if (!v80)
            {
              int64_t v81 = v60 + 6;
              if (v60 + 6 >= v84) {
                goto LABEL_79;
              }
              unint64_t v80 = *(void *)&v85[8 * v81];
              if (!v80) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_77:
    uint64_t v86 = (v80 - 1) & v80;
    int64_t v87 = v81;
    unint64_t v64 = __clz(__rbit64(v80)) + (v81 << 6);
LABEL_56:
    uint64_t v65 = 16 * v64;
    uint64_t v66 = (uint64_t *)(*(void *)(v19 + 48) + 16 * v64);
    uint64_t v67 = *v66;
    uint64_t v68 = v66[1];
    uint64_t v69 = 80 * v64;
    uint64_t v70 = *(void *)(v19 + 56) + v69;
    uint64_t v71 = *(void *)v70;
    uint64_t v72 = *(void *)(v70 + 72);
    int64_t v73 = (void *)(*(void *)(v27 + 48) + v65);
    long long v74 = *(_OWORD *)(v70 + 8);
    long long v75 = *(_OWORD *)(v70 + 24);
    long long v76 = *(_OWORD *)(v70 + 40);
    long long v77 = *(_OWORD *)(v70 + 56);
    *int64_t v73 = v67;
    v73[1] = v68;
    uint64_t v78 = *(void *)(v27 + 56) + v69;
    *(void *)uint64_t v78 = v71;
    *(_OWORD *)(v78 + 8) = v74;
    *(_OWORD *)(v78 + 24) = v75;
    *(_OWORD *)(v78 + 40) = v76;
    *(_OWORD *)(v78 + 56) = v77;
    *(void *)(v78 + 72) = v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (char *)swift_bridgeObjectRetain();
    unint64_t v63 = v86;
    int64_t v60 = v87;
  }
  uint64_t v82 = v60 + 7;
  if (v60 + 7 >= v84) {
    goto LABEL_79;
  }
  unint64_t v80 = *(void *)&v85[8 * v82];
  if (v80)
  {
    int64_t v81 = v60 + 7;
    goto LABEL_77;
  }
  while (1)
  {
    int64_t v81 = v82 + 1;
    if (__OFADD__(v82, 1)) {
      break;
    }
    uint64_t v31 = v90;
    if (v81 >= v84) {
      goto LABEL_79;
    }
    unint64_t v80 = *(void *)&v85[8 * v81];
    ++v82;
    if (v80) {
      goto LABEL_77;
    }
  }
LABEL_83:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  if (!a1)
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == 0) {
      return result;
    }
    unint64_t v19 = result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v22 = v21;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
      uint64_t v41 = static _DictionaryStorage.copy(original:)();
      uint64_t v22 = v41;
      if (*(void *)(v21 + 16))
      {
        uint64_t v42 = (void *)(v41 + 64);
        uint64_t v43 = v21 + 64;
        unint64_t v44 = (unint64_t)((1 << *(unsigned char *)(v22 + 32)) + 63) >> 6;
        if (v22 != v21 || (unint64_t)v42 >= v43 + 8 * v44) {
          memmove(v42, (const void *)(v21 + 64), 8 * v44);
        }
        int64_t v45 = 0;
        *(void *)(v22 + 16) = *(void *)(v21 + 16);
        uint64_t v46 = 1 << *(unsigned char *)(v21 + 32);
        uint64_t v47 = -1;
        if (v46 < 64) {
          uint64_t v47 = ~(-1 << v46);
        }
        unint64_t v48 = v47 & *(void *)(v21 + 64);
        int64_t v49 = (unint64_t)(v46 + 63) >> 6;
        while (1)
        {
          if (v48)
          {
            unint64_t v50 = __clz(__rbit64(v48));
            v48 &= v48 - 1;
            unint64_t v51 = v50 | (v45 << 6);
          }
          else
          {
            int64_t v55 = v45 + 1;
            if (__OFADD__(v45, 1))
            {
LABEL_81:
              __break(1u);
              goto LABEL_82;
            }
            if (v55 >= v49) {
              break;
            }
            unint64_t v56 = *(void *)(v43 + 8 * v55);
            ++v45;
            if (!v56)
            {
              int64_t v45 = v55 + 1;
              if (v55 + 1 >= v49) {
                break;
              }
              unint64_t v56 = *(void *)(v43 + 8 * v45);
              if (!v56)
              {
                int64_t v45 = v55 + 2;
                if (v55 + 2 >= v49) {
                  break;
                }
                unint64_t v56 = *(void *)(v43 + 8 * v45);
                if (!v56)
                {
                  int64_t v45 = v55 + 3;
                  if (v55 + 3 >= v49) {
                    break;
                  }
                  unint64_t v56 = *(void *)(v43 + 8 * v45);
                  if (!v56)
                  {
                    int64_t v45 = v55 + 4;
                    if (v55 + 4 >= v49) {
                      break;
                    }
                    unint64_t v56 = *(void *)(v43 + 8 * v45);
                    if (!v56)
                    {
                      int64_t v57 = v55 + 5;
                      if (v57 >= v49) {
                        break;
                      }
                      unint64_t v56 = *(void *)(v43 + 8 * v57);
                      if (!v56)
                      {
                        while (1)
                        {
                          int64_t v45 = v57 + 1;
                          if (__OFADD__(v57, 1)) {
                            break;
                          }
                          if (v45 >= v49) {
                            goto LABEL_79;
                          }
                          unint64_t v56 = *(void *)(v43 + 8 * v45);
                          ++v57;
                          if (v56) {
                            goto LABEL_78;
                          }
                        }
LABEL_82:
                        __break(1u);
                        goto LABEL_83;
                      }
                      int64_t v45 = v57;
                    }
                  }
                }
              }
            }
LABEL_78:
            unint64_t v48 = (v56 - 1) & v56;
            unint64_t v51 = __clz(__rbit64(v56)) + (v45 << 6);
          }
          uint64_t v52 = 8 * v51;
          uint64_t v53 = *(void **)(*(void *)(v21 + 56) + v52);
          *(void *)(*(void *)(v22 + 48) + v52) = *(void *)(*(void *)(v21 + 48) + v52);
          *(void *)(*(void *)(v22 + 56) + v52) = v53;
          id v54 = v53;
        }
      }
LABEL_79:
      swift_bridgeObjectRelease();
    }
    BOOL v23 = *(void **)(*(void *)(v22 + 56) + 8 * v19);
    specialized _NativeDictionary._delete(at:)(v19, v22);
    *uint64_t v4 = v22;

    return swift_bridgeObjectRelease();
  }
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v59 = *v2;
  uint64_t v8 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v3 = v9;
    if (*(void *)(v8 + 24) < v13)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, v7);
      uint64_t v14 = v59;
      uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v16 & 1)) {
        goto LABEL_84;
      }
      unint64_t v10 = v15;
      if ((v3 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_15:
      uint64_t v24 = *(void *)(v14 + 56);

      *(void *)(v24 + 8 * v10) = a1;
LABEL_49:
      *uint64_t v4 = v14;
      return swift_bridgeObjectRelease();
    }
    if (v7)
    {
      uint64_t v14 = v8;
      if (v9) {
        goto LABEL_15;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, (void *)v14);
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  uint64_t v25 = static _DictionaryStorage.copy(original:)();
  uint64_t v14 = v25;
  if (!*(void *)(v8 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
  char v26 = (void *)(v25 + 64);
  unint64_t v27 = (unint64_t)((1 << *(unsigned char *)(v14 + 32)) + 63) >> 6;
  if (v14 != v8 || (unint64_t)v26 >= v8 + 64 + 8 * v27) {
    memmove(v26, (const void *)(v8 + 64), 8 * v27);
  }
  uint64_t v58 = v8 + 64;
  int64_t v28 = 0;
  *(void *)(v14 + 16) = *(void *)(v8 + 16);
  uint64_t v29 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v30 = -1;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  unint64_t v31 = v30 & *(void *)(v8 + 64);
  int64_t v32 = (unint64_t)(v29 + 63) >> 6;
  while (1)
  {
    if (v31)
    {
      unint64_t v33 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      unint64_t v34 = v33 | (v28 << 6);
      goto LABEL_25;
    }
    int64_t v38 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v38 >= v32) {
      goto LABEL_47;
    }
    unint64_t v39 = *(void *)(v58 + 8 * v38);
    ++v28;
    if (!v39)
    {
      int64_t v28 = v38 + 1;
      if (v38 + 1 >= v32) {
        goto LABEL_47;
      }
      unint64_t v39 = *(void *)(v58 + 8 * v28);
      if (!v39)
      {
        int64_t v28 = v38 + 2;
        if (v38 + 2 >= v32) {
          goto LABEL_47;
        }
        unint64_t v39 = *(void *)(v58 + 8 * v28);
        if (!v39)
        {
          int64_t v28 = v38 + 3;
          if (v38 + 3 >= v32) {
            goto LABEL_47;
          }
          unint64_t v39 = *(void *)(v58 + 8 * v28);
          if (!v39)
          {
            int64_t v28 = v38 + 4;
            if (v38 + 4 >= v32) {
              goto LABEL_47;
            }
            unint64_t v39 = *(void *)(v58 + 8 * v28);
            if (!v39)
            {
              int64_t v28 = v38 + 5;
              if (v38 + 5 >= v32) {
                goto LABEL_47;
              }
              unint64_t v39 = *(void *)(v58 + 8 * v28);
              if (!v39) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_46:
    unint64_t v31 = (v39 - 1) & v39;
    unint64_t v34 = __clz(__rbit64(v39)) + (v28 << 6);
LABEL_25:
    uint64_t v35 = 8 * v34;
    uint64_t v36 = *(void **)(*(void *)(v8 + 56) + v35);
    *(void *)(*(void *)(v14 + 48) + v35) = *(void *)(*(void *)(v8 + 48) + v35);
    *(void *)(*(void *)(v14 + 56) + v35) = v36;
    id v37 = v36;
  }
  int64_t v40 = v38 + 6;
  if (v40 >= v32) {
    goto LABEL_47;
  }
  unint64_t v39 = *(void *)(v58 + 8 * v40);
  if (v39)
  {
    int64_t v28 = v40;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v28 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v28 >= v32) {
      goto LABEL_47;
    }
    unint64_t v39 = *(void *)(v58 + 8 * v28);
    ++v40;
    if (v39) {
      goto LABEL_46;
    }
  }
LABEL_83:
  __break(1u);
LABEL_84:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(unint64_t, uint64_t);
  _OWORD *v28;
  uint64_t result;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  _OWORD v68[2];

  uint64_t v4 = v2;
  char v7 = type metadata accessor for CodingUserInfoKey();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 24))
  {
    outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    BOOL v23 = v22;
    swift_bridgeObjectRelease();
    if (v23)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v25 = *v4;
      *uint64_t v4 = 0x8000000000000000;
      if (isUniquelyReferenced_nonNull_native)
      {
        char v26 = v25;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
        unint64_t v44 = static _DictionaryStorage.copy(original:)();
        char v26 = v44;
        if (*(void *)(v25 + 16))
        {
          int64_t v45 = (char *)(v44 + 64);
          uint64_t v46 = 1 << *(unsigned char *)(v26 + 32);
          uint64_t v61 = (char *)(v25 + 64);
          uint64_t v47 = (unint64_t)(v46 + 63) >> 6;
          if (v26 != v25 || v45 >= &v61[8 * v47]) {
            memmove(v45, v61, 8 * v47);
          }
          *(void *)(v26 + 16) = *(void *)(v25 + 16);
          unint64_t v48 = 1 << *(unsigned char *)(v25 + 32);
          int64_t v49 = *(void *)(v25 + 64);
          unint64_t v50 = -1;
          if (v48 < 64) {
            unint64_t v50 = ~(-1 << v48);
          }
          unint64_t v64 = 0;
          uint64_t v65 = v50 & v49;
          int64_t v60 = (unint64_t)(v48 + 63) >> 6;
          uint64_t v62 = v8 + 32;
          unint64_t v63 = v8 + 16;
          while (1)
          {
            if (v65)
            {
              unint64_t v51 = __clz(__rbit64(v65));
              v65 &= v65 - 1;
              uint64_t v52 = v51 | (v64 << 6);
            }
            else
            {
              int64_t v55 = v64 + 1;
              if (__OFADD__(v64, 1))
              {
LABEL_80:
                __break(1u);
                goto LABEL_81;
              }
              if (v55 >= v60) {
                break;
              }
              unint64_t v56 = *(void *)&v61[8 * v55];
              int64_t v57 = v64 + 1;
              if (!v56)
              {
                int64_t v57 = v64 + 2;
                if (v64 + 2 >= v60) {
                  break;
                }
                unint64_t v56 = *(void *)&v61[8 * v57];
                if (!v56)
                {
                  int64_t v57 = v64 + 3;
                  if (v64 + 3 >= v60) {
                    break;
                  }
                  unint64_t v56 = *(void *)&v61[8 * v57];
                  if (!v56)
                  {
                    if (v64 + 4 >= v60) {
                      break;
                    }
                    int64_t v57 = v64 + 4;
                    unint64_t v56 = *(void *)&v61[8 * v64 + 32];
                    if (!v56)
                    {
                      if (v64 + 5 >= v60) {
                        break;
                      }
                      int64_t v57 = v64 + 5;
                      unint64_t v56 = *(void *)&v61[8 * v64 + 40];
                      if (!v56)
                      {
                        uint64_t v58 = v64 + 6;
                        if (v64 + 6 >= v60) {
                          break;
                        }
                        unint64_t v56 = *(void *)&v61[8 * v58];
                        if (!v56)
                        {
                          while (1)
                          {
                            int64_t v57 = v58 + 1;
                            if (__OFADD__(v58, 1)) {
                              break;
                            }
                            if (v57 >= v60) {
                              goto LABEL_78;
                            }
                            unint64_t v56 = *(void *)&v61[8 * v57];
                            ++v58;
                            if (v56) {
                              goto LABEL_77;
                            }
                          }
LABEL_81:
                          __break(1u);
                          goto LABEL_82;
                        }
                        int64_t v57 = v64 + 6;
                      }
                    }
                  }
                }
              }
LABEL_77:
              unint64_t v64 = v57;
              uint64_t v65 = (v56 - 1) & v56;
              uint64_t v52 = __clz(__rbit64(v56)) + (v57 << 6);
            }
            uint64_t v53 = *(void *)(v8 + 72) * v52;
            (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, *(void *)(v25 + 48) + v53, v7);
            id v54 = 32 * v52;
            outlined init with copy of Any(*(void *)(v25 + 56) + v54, (uint64_t)v68);
            (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(void *)(v26 + 48) + v53, v10, v7);
            outlined init with take of Any(v68, (_OWORD *)(*(void *)(v26 + 56) + v54));
          }
        }
LABEL_78:
        swift_bridgeObjectRelease();
      }
      unint64_t v27 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
      v27(*(void *)(v26 + 48) + *(void *)(v8 + 72) * v21, v7);
      outlined init with take of Any((_OWORD *)(*(void *)(v26 + 56) + 32 * v21), v68);
      specialized _NativeDictionary._delete(at:)(v21, v26);
      *uint64_t v4 = v26;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v68, 0, sizeof(v68));
      unint64_t v27 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
    }
    v27(a2, v7);
    return outlined destroy of Any?((uint64_t)v68, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any((_OWORD *)a1, v68);
  uint64_t v11 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v67 = *v4;
  BOOL v12 = v67;
  *uint64_t v4 = 0x8000000000000000;
  uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = *(void *)(v12 + 16);
  char v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    char v3 = v13;
    if (*(void *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v11);
      char v18 = v67;
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v20 & 1)) {
        goto LABEL_83;
      }
      uint64_t v14 = v19;
      if ((v3 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_13:
      int64_t v28 = (_OWORD *)(*(void *)(v18 + 56) + 32 * v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      outlined init with take of Any(v68, v28);
LABEL_49:
      *uint64_t v4 = v18;
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
    }
    if (v11)
    {
      char v18 = v12;
      if (v13) {
        goto LABEL_13;
      }
LABEL_48:
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
      specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v10, v68, (void *)v18);
      char v18 = v67;
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  uint64_t v30 = static _DictionaryStorage.copy(original:)();
  char v18 = v30;
  if (!*(void *)(v12 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    uint64_t v67 = v18;
    if (v3) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
  unint64_t v31 = (void *)(v30 + 64);
  int64_t v32 = (unint64_t)((1 << *(unsigned char *)(v18 + 32)) + 63) >> 6;
  if (v18 != v12 || (unint64_t)v31 >= v12 + 64 + 8 * v32) {
    memmove(v31, (const void *)(v12 + 64), 8 * v32);
  }
  unint64_t v33 = 0;
  *(void *)(v18 + 16) = *(void *)(v12 + 16);
  unint64_t v34 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v35 = -1;
  if (v34 < 64) {
    uint64_t v35 = ~(-1 << v34);
  }
  uint64_t v36 = v35 & *(void *)(v12 + 64);
  uint64_t v59 = v12 + 64;
  int64_t v60 = (unint64_t)(v34 + 63) >> 6;
  uint64_t v61 = (char *)(v8 + 32);
  uint64_t v62 = v8 + 16;
  while (1)
  {
    if (v36)
    {
      unint64_t v64 = (v36 - 1) & v36;
      uint64_t v65 = v33;
      id v37 = __clz(__rbit64(v36)) | (v33 << 6);
      goto LABEL_25;
    }
    int64_t v40 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_80;
    }
    if (v40 >= v60) {
      goto LABEL_47;
    }
    uint64_t v41 = *(void *)(v59 + 8 * v40);
    uint64_t v42 = v33 + 1;
    if (!v41)
    {
      uint64_t v42 = v33 + 2;
      if ((uint64_t)(v33 + 2) >= v60) {
        goto LABEL_47;
      }
      uint64_t v41 = *(void *)(v59 + 8 * v42);
      if (!v41)
      {
        uint64_t v42 = v33 + 3;
        if ((uint64_t)(v33 + 3) >= v60) {
          goto LABEL_47;
        }
        uint64_t v41 = *(void *)(v59 + 8 * v42);
        if (!v41)
        {
          uint64_t v42 = v33 + 4;
          if ((uint64_t)(v33 + 4) >= v60) {
            goto LABEL_47;
          }
          uint64_t v41 = *(void *)(v59 + 8 * v42);
          if (!v41)
          {
            uint64_t v42 = v33 + 5;
            if ((uint64_t)(v33 + 5) >= v60) {
              goto LABEL_47;
            }
            uint64_t v41 = *(void *)(v59 + 8 * v42);
            if (!v41)
            {
              uint64_t v42 = v33 + 6;
              if ((uint64_t)(v33 + 6) >= v60) {
                goto LABEL_47;
              }
              uint64_t v41 = *(void *)(v59 + 8 * v42);
              if (!v41) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_46:
    unint64_t v64 = (v41 - 1) & v41;
    uint64_t v65 = v42;
    id v37 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_25:
    int64_t v38 = *(void *)(v12 + 48);
    unint64_t v63 = *(void *)(v8 + 72) * v37;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v38 + v63, v7);
    unint64_t v39 = 32 * v37;
    outlined init with copy of Any(*(void *)(v12 + 56) + v39, (uint64_t)v66);
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(void *)(v18 + 48) + v63, v10, v7);
    outlined init with take of Any(v66, (_OWORD *)(*(void *)(v18 + 56) + v39));
    uint64_t v36 = v64;
    unint64_t v33 = v65;
  }
  uint64_t v43 = v33 + 7;
  if ((uint64_t)(v33 + 7) >= v60) {
    goto LABEL_47;
  }
  uint64_t v41 = *(void *)(v59 + 8 * v43);
  if (v41)
  {
    uint64_t v42 = v33 + 7;
    goto LABEL_46;
  }
  while (1)
  {
    uint64_t v42 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v42 >= v60) {
      goto LABEL_47;
    }
    uint64_t v41 = *(void *)(v59 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }
LABEL_82:
  __break(1u);
LABEL_83:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1F4188790](v10 - 8);
  BOOL v12 = &v75[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v89 = &v75[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v17 = MEMORY[0x1F4188790](v16);
  unint64_t v19 = &v75[-v18];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v14 + 48))(a1, 1, v13, v17) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
    swift_bridgeObjectRetain();
    a2 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
    char v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
      goto LABEL_12;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a4 = *v5;
    uint64_t *v5 = 0x8000000000000000;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v23 = a4;
LABEL_5:
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v14 + 32))(v12, *(void *)(v23 + 56) + *(void *)(v14 + 72) * a2, v13);
      specialized _NativeDictionary._delete(at:)(a2, v23);
      uint64_t *v5 = v23;
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
LABEL_12:
      swift_bridgeObjectRelease();
      return outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
    }
LABEL_17:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RegexPatternCache.Key, Regex<AnyRegexOutput>>);
    uint64_t v37 = static _DictionaryStorage.copy(original:)();
    uint64_t v23 = v37;
    if (*(void *)(a4 + 16))
    {
      uint64_t v88 = a3;
      int64_t v38 = (char *)(v37 + 64);
      uint64_t v39 = 1 << *(unsigned char *)(v23 + 32);
      unint64_t v80 = (char *)(a4 + 64);
      unint64_t v40 = (unint64_t)(v39 + 63) >> 6;
      if (v23 != a4 || v38 >= &v80[8 * v40]) {
        memmove(v38, v80, 8 * v40);
      }
      uint64_t v41 = 0;
      *(void *)(v23 + 16) = *(void *)(a4 + 16);
      uint64_t v42 = 1 << *(unsigned char *)(a4 + 32);
      uint64_t v43 = -1;
      if (v42 < 64) {
        uint64_t v43 = ~(-1 << v42);
      }
      unint64_t v44 = v43 & *(void *)(a4 + 64);
      int64_t v79 = (char *)((unint64_t)(v42 + 63) >> 6);
      uint64_t v81 = v14 + 32;
      uint64_t v82 = v14 + 16;
      while (1)
      {
        if (v44)
        {
          uint64_t v86 = (v44 - 1) & v44;
          int64_t v87 = v41;
          unint64_t v45 = __clz(__rbit64(v44)) | ((void)v41 << 6);
        }
        else
        {
          uint64_t v52 = (uint64_t)(v41 + 1);
          if (__OFADD__(v41, 1)) {
            goto LABEL_81;
          }
          if (v52 >= (uint64_t)v79) {
            break;
          }
          unint64_t v53 = *(void *)&v80[8 * v52];
          uint64_t v54 = (uint64_t)(v41 + 1);
          if (!v53)
          {
            uint64_t v54 = (uint64_t)(v41 + 2);
            if ((uint64_t)(v41 + 2) >= (uint64_t)v79) {
              break;
            }
            unint64_t v53 = *(void *)&v80[8 * v54];
            if (!v53)
            {
              uint64_t v54 = (uint64_t)(v41 + 3);
              if ((uint64_t)(v41 + 3) >= (uint64_t)v79) {
                break;
              }
              unint64_t v53 = *(void *)&v80[8 * v54];
              if (!v53)
              {
                uint64_t v54 = (uint64_t)(v41 + 4);
                if ((uint64_t)(v41 + 4) >= (uint64_t)v79) {
                  break;
                }
                unint64_t v53 = *(void *)&v80[8 * v54];
                if (!v53)
                {
                  uint64_t v55 = v23;
                  if ((uint64_t)(v41 + 5) >= (uint64_t)v79) {
                    goto LABEL_79;
                  }
                  uint64_t v54 = (uint64_t)(v41 + 5);
                  unint64_t v53 = *(void *)&v80[8 * (void)(v41 + 5)];
                  if (!v53)
                  {
                    unint64_t v56 = v41 + 6;
                    if ((uint64_t)(v41 + 6) >= (uint64_t)v79)
                    {
LABEL_79:
                      swift_bridgeObjectRelease();
                      uint64_t v23 = v55;
                      goto LABEL_5;
                    }
                    unint64_t v53 = *(void *)&v80[8 * (void)v56];
                    if (!v53)
                    {
                      while (1)
                      {
                        uint64_t v54 = (uint64_t)(v56 + 1);
                        if (__OFADD__(v56, 1)) {
                          goto LABEL_82;
                        }
                        if (v54 >= (uint64_t)v79) {
                          goto LABEL_79;
                        }
                        unint64_t v53 = *(void *)&v80[8 * v54];
                        ++v56;
                        uint64_t v23 = v55;
                        if (v53) {
                          goto LABEL_44;
                        }
                      }
                    }
                    uint64_t v54 = (uint64_t)(v41 + 6);
                  }
                }
              }
            }
          }
LABEL_44:
          uint64_t v86 = (v53 - 1) & v53;
          int64_t v87 = (char *)v54;
          unint64_t v45 = __clz(__rbit64(v53)) + (v54 << 6);
        }
        uint64_t v83 = 24 * v45;
        uint64_t v46 = *(void *)(a4 + 56);
        uint64_t v47 = *(void *)(a4 + 48) + 24 * v45;
        uint64_t v48 = *(void *)(v47 + 8);
        uint64_t v84 = *(void *)v47;
        LODWORD(v85) = *(unsigned __int8 *)(v47 + 16);
        unint64_t v49 = *(void *)(v14 + 72) * v45;
        unint64_t v50 = v89;
        (*(void (**)(unsigned char *, unint64_t, uint64_t))(v14 + 16))(v89, v46 + v49, v13);
        uint64_t v51 = *(void *)(v23 + 48) + v83;
        *(void *)uint64_t v51 = v84;
        *(void *)(v51 + 8) = v48;
        *(unsigned char *)(v51 + 16) = v85;
        (*(void (**)(unint64_t, unsigned char *, uint64_t))(v14 + 32))(*(void *)(v23 + 56) + v49, v50, v13);
        swift_bridgeObjectRetain();
        unint64_t v44 = v86;
        uint64_t v41 = v87;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  BOOL v12 = (unsigned char *)(v14 + 32);
  int64_t v87 = *(char **)(v14 + 32);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v87)(v19, a1, v13);
  int v24 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = a3;
  uint64_t v90 = *v5;
  a3 = v90;
  uint64_t *v5 = 0x8000000000000000;
  uint64_t v88 = v25;
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v25, a4 & 1);
  uint64_t v28 = *(void *)(a3 + 16);
  BOOL v29 = (v27 & 1) == 0;
  BOOL v30 = __OFADD__(v28, v29);
  uint64_t v31 = v28 + v29;
  if (v30)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (*(void *)(a3 + 24) < v31)
  {
    char v32 = v27;
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, v24);
    uint64_t v33 = v90;
    uint64_t v34 = v88;
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v88, a4 & 1);
    if ((v32 & 1) != (v35 & 1)) {
      goto LABEL_84;
    }
    if ((v32 & 1) == 0) {
      goto LABEL_76;
    }
LABEL_15:
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v14 + 40))(*(void *)(v33 + 56) + *(void *)(v14 + 72) * v26, v19, v13);
LABEL_77:
    uint64_t *v5 = v33;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (v24)
  {
    uint64_t v33 = a3;
    uint64_t v34 = v88;
    if (v27) {
      goto LABEL_15;
    }
LABEL_76:
    specialized _NativeDictionary._insert(at:key:value:)(v26, a2, v34, a4 & 1, (uint64_t)v19, (void *)v33);
    swift_bridgeObjectRetain();
    goto LABEL_77;
  }
  int v76 = v27;
  unint64_t v77 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RegexPatternCache.Key, Regex<AnyRegexOutput>>);
  uint64_t v57 = static _DictionaryStorage.copy(original:)();
  uint64_t v33 = v57;
  if (!*(void *)(a3 + 16))
  {
LABEL_75:
    swift_bridgeObjectRelease();
    unint64_t v26 = v77;
    uint64_t v34 = v88;
    if (v76) {
      goto LABEL_15;
    }
    goto LABEL_76;
  }
  uint64_t v58 = (char *)(v57 + 64);
  uint64_t v59 = 1 << *(unsigned char *)(v33 + 32);
  int64_t v79 = (char *)(a3 + 64);
  unint64_t v60 = (unint64_t)(v59 + 63) >> 6;
  if (v33 != a3 || v58 >= &v79[8 * v60]) {
    memmove(v58, v79, 8 * v60);
  }
  uint64_t v61 = 0;
  *(void *)(v33 + 16) = *(void *)(a3 + 16);
  uint64_t v62 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v63 = -1;
  if (v62 < 64) {
    uint64_t v63 = ~(-1 << v62);
  }
  unint64_t v64 = v63 & *(void *)(a3 + 64);
  int64_t v78 = (unint64_t)(v62 + 63) >> 6;
  unint64_t v80 = (char *)(v14 + 16);
  while (1)
  {
    if (v64)
    {
      uint64_t v85 = (v64 - 1) & v64;
      uint64_t v86 = v61;
      unint64_t v65 = __clz(__rbit64(v64)) | (v61 << 6);
      goto LABEL_53;
    }
    int64_t v71 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if (v71 >= v78) {
      goto LABEL_75;
    }
    unint64_t v72 = *(void *)&v79[8 * v71];
    int64_t v73 = v61 + 1;
    if (!v72)
    {
      int64_t v73 = v71 + 1;
      if (v71 + 1 >= v78) {
        goto LABEL_75;
      }
      unint64_t v72 = *(void *)&v79[8 * v73];
      if (!v72)
      {
        int64_t v73 = v71 + 2;
        if (v71 + 2 >= v78) {
          goto LABEL_75;
        }
        unint64_t v72 = *(void *)&v79[8 * v73];
        if (!v72)
        {
          int64_t v73 = v71 + 3;
          if (v71 + 3 >= v78) {
            goto LABEL_75;
          }
          unint64_t v72 = *(void *)&v79[8 * v73];
          if (!v72)
          {
            int64_t v73 = v71 + 4;
            if (v71 + 4 >= v78) {
              goto LABEL_75;
            }
            unint64_t v72 = *(void *)&v79[8 * v73];
            if (!v72)
            {
              int64_t v73 = v71 + 5;
              if (v71 + 5 >= v78) {
                goto LABEL_75;
              }
              unint64_t v72 = *(void *)&v79[8 * v73];
              if (!v72) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_74:
    uint64_t v85 = (v72 - 1) & v72;
    uint64_t v86 = v73;
    unint64_t v65 = __clz(__rbit64(v72)) + (v73 << 6);
LABEL_53:
    uint64_t v66 = 24 * v65;
    uint64_t v67 = *(void *)(a3 + 56);
    uint64_t v68 = *(void *)(a3 + 48) + 24 * v65;
    uint64_t v82 = *(void *)v68;
    uint64_t v81 = *(void *)(v68 + 8);
    LODWORD(v84) = *(unsigned __int8 *)(v68 + 16);
    uint64_t v83 = *(void *)(v14 + 72) * v65;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 16))(v89, v67 + v83, v13);
    uint64_t v69 = *(void *)(v33 + 48) + v66;
    uint64_t v70 = v81;
    *(void *)uint64_t v69 = v82;
    *(void *)(v69 + 8) = v70;
    *(unsigned char *)(v69 + 16) = v84;
    ((void (*)(uint64_t, unsigned char *, uint64_t))v87)(*(void *)(v33 + 56) + v83, v89, v13);
    swift_bridgeObjectRetain();
    unint64_t v64 = v85;
    uint64_t v61 = v86;
  }
  int64_t v74 = v71 + 6;
  if (v74 >= v78) {
    goto LABEL_75;
  }
  unint64_t v72 = *(void *)&v79[8 * v74];
  if (v72)
  {
    int64_t v73 = v74;
    goto LABEL_74;
  }
  while (1)
  {
    int64_t v73 = v74 + 1;
    if (__OFADD__(v74, 1)) {
      break;
    }
    if (v73 >= v78) {
      goto LABEL_75;
    }
    unint64_t v72 = *(void *)&v79[8 * v73];
    ++v74;
    if (v72) {
      goto LABEL_74;
    }
  }
LABEL_83:
  __break(1u);
LABEL_84:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t static CocoaError.error(_:userInfo:url:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v5 = *(void **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  if (!a2)
  {
    *(void *)&v46[0] = MEMORY[0x1E4FBC868];
    if (v5) {
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  uint64_t v36 = *(void *)(a3 + 8);
  uint64_t v37 = *a1;
  uint64_t v35 = *(void *)(a3 + 16);
  if (*(void *)(a2 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v8 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v39 = a2 + 64;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(a2 + 64);
  int64_t v38 = (unint64_t)(63 - v10) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (1)
  {
    if (v11)
    {
      uint64_t v16 = (v11 - 1) & v11;
      unint64_t v17 = __clz(__rbit64(v11)) | (v13 << 6);
      int64_t v18 = v13;
      goto LABEL_32;
    }
    int64_t v19 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_44;
    }
    if (v19 >= v38) {
      break;
    }
    unint64_t v20 = *(void *)(v39 + 8 * v19);
    int64_t v18 = v13 + 1;
    if (!v20)
    {
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v38) {
        break;
      }
      unint64_t v20 = *(void *)(v39 + 8 * v18);
      if (!v20)
      {
        int64_t v18 = v13 + 3;
        if (v13 + 3 >= v38) {
          break;
        }
        unint64_t v20 = *(void *)(v39 + 8 * v18);
        if (!v20)
        {
          int64_t v18 = v13 + 4;
          if (v13 + 4 >= v38) {
            break;
          }
          unint64_t v20 = *(void *)(v39 + 8 * v18);
          if (!v20)
          {
            int64_t v18 = v13 + 5;
            if (v13 + 5 >= v38) {
              break;
            }
            unint64_t v20 = *(void *)(v39 + 8 * v18);
            if (!v20)
            {
              int64_t v21 = v13 + 6;
              if (v13 + 6 >= v38) {
                break;
              }
              unint64_t v20 = *(void *)(v39 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  int64_t v18 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_45;
                  }
                  if (v18 >= v38) {
                    goto LABEL_38;
                  }
                  unint64_t v20 = *(void *)(v39 + 8 * v18);
                  ++v21;
                  if (v20) {
                    goto LABEL_31;
                  }
                }
              }
              int64_t v18 = v13 + 6;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v16 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v18 << 6);
LABEL_32:
    outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v17, (uint64_t)&v49);
    outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v17, (uint64_t)v51 + 8);
    v47[0] = v51[0];
    v47[1] = v51[1];
    uint64_t v48 = v52;
    v46[0] = v49;
    v46[1] = v50;
    outlined init with copy of AnyHashable((uint64_t)v46, (uint64_t)v41);
    if (!swift_dynamicCast())
    {
      outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
      goto LABEL_39;
    }
    outlined init with copy of Any((uint64_t)v47 + 8, (uint64_t)v41);
    outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v41, v42);
    long long v43 = v40;
    outlined init with take of Any(v42, v44);
    long long v22 = v43;
    outlined init with take of Any(v44, v45);
    outlined init with take of Any(v45, &v43);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v22, *((uint64_t *)&v22 + 1));
    unint64_t v23 = result;
    if (v24)
    {
      uint64_t v14 = (_OWORD *)(v8[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v14 = v22;
      uint64_t v15 = (_OWORD *)(v8[7] + 32 * v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      unint64_t result = (unint64_t)outlined init with take of Any(&v43, v15);
    }
    else
    {
      if (v8[2] >= v8[3])
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        return result;
      }
      *(void *)((char *)v8 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_OWORD *)(v8[6] + 16 * result) = v22;
      unint64_t result = (unint64_t)outlined init with take of Any(&v43, (_OWORD *)(v8[7] + 32 * result));
      uint64_t v25 = v8[2];
      BOOL v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_43;
      }
      _OWORD v8[2] = v27;
    }
    int64_t v13 = v18;
    unint64_t v11 = v16;
  }
LABEL_38:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_39:
  uint64_t v4 = v36;
  uint64_t v3 = v37;
  uint64_t v6 = v35;
  *(void *)&v46[0] = v8;
  if (!v5) {
    goto LABEL_41;
  }
LABEL_40:
  id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURL");
  uint64_t v30 = v29;
  *(void *)&long long v49 = v5;
  *((void *)&v49 + 1) = v4;
  *(void *)&long long v50 = v6;
  *((void *)&v50 + 1) = &type metadata for URL;
  swift_retain();
  id v31 = v5;
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v49, (uint64_t)v28, v30);
LABEL_41:
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v32 = objc_allocWithZone((Class)NSError);
  uint64_t v33 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v34 = objc_msgSend(v32, sel_initWithDomain_code_userInfo_, v33, v3, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (unint64_t)v34;
}

Foundation::CocoaError::Code __swiftcall CocoaError.Code.init(rawValue:)(Foundation::CocoaError::Code rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t LocalizedError.errorDescription.getter()
{
  return 0;
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return 0;
}

id CocoaError._nsError.getter()
{
  return *v0;
}

void __swiftcall CocoaError.init(_nsError:)(Foundation::CocoaError *__return_ptr retstr, NSError *_nsError)
{
  uint64_t v4 = [(NSError *)_nsError domain];
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v7 == v8) {
    goto LABEL_7;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }
  retstr->_nsError.super.isa = (Class)_nsError;
}

id static CocoaError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
}

uint64_t CocoaError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance CocoaError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  v23[1] = a1;
  uint64_t v24 = v5;
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  BOOL v12 = (char *)v23 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v23 - v15;
  uint64_t v25 = a2;
  id v17 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  int v18 = swift_dynamicCast();
  int64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v18)
  {
    v19(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    _BridgedStoredNSError.code.getter(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v7);
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, a3);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
  }
  else
  {
    v19(v12, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t CocoaError.Code.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t CocoaError.filePath.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  id v62 = v1;
  id v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v3)
  {
LABEL_22:
    uint64_t v5 = MEMORY[0x1E4FBC868];
    if (*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v35 = MEMORY[0x1E4FBC868];
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_19;
  }
  id v6 = objc_msgSend(v3, sel_count);
  if (!v6)
  {

    goto LABEL_22;
  }
  uint64_t v7 = (uint64_t)v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = *(void **)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, v7);
  if (result < 0 || v7 < result) {
    goto LABEL_70;
  }
  *(void *)(v5 + 16) = result;
  if (result)
  {
    uint64_t v11 = result - 1;
    uint64_t v12 = v5 + 64;
    do
    {
      while (1)
      {
        if ((*(void *)(v12 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11)) {
          goto LABEL_10;
        }
        id v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        char v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v23 = *(void *)(v5 + 16);
        BOOL v24 = __OFSUB__(v23, 1);
        uint64_t v25 = v23 - 1;
        if (v24)
        {
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          return result;
        }
        *(void *)(v5 + 16) = v25;
LABEL_10:
        if (--v11 < 0) {
          goto LABEL_18;
        }
      }
      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v13 = *(void *)(v5 + 56);
        uint64_t v14 = (_OWORD *)(v13 + 32 * v11);
        long long v15 = v14[1];
        uint64_t v16 = (_OWORD *)(v13 + 32 * v20);
        *uint64_t v16 = *v14;
        v16[1] = v15;
        goto LABEL_10;
      }
      if (v20 == v11) {
        goto LABEL_10;
      }
      uint64_t v26 = *(void *)(v5 + 48);
      uint64_t v27 = (uint64_t *)(v26 + 16 * v20);
      id v28 = (uint64_t *)(v26 + 16 * v11);
      uint64_t v29 = *v27;
      uint64_t v30 = v27[1];
      uint64_t v31 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v31;
      *id v28 = v29;
      v28[1] = v30;
      uint64_t v32 = *(void *)(v5 + 56);
      uint64_t v33 = (_OWORD *)(v32 + 32 * v20);
      id v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v69);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v69, v34);
    }
    while ((v11 & 0x8000000000000000) == 0);
  }
LABEL_18:
  swift_release();
LABEL_19:

  if (!*(void *)(v5 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v35 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v63 = v5 + 64;
  uint64_t v36 = -1 << *(unsigned char *)(v5 + 32);
  if (-v36 < 64) {
    uint64_t v37 = ~(-1 << -(char)v36);
  }
  else {
    uint64_t v37 = -1;
  }
  unint64_t v38 = v37 & *(void *)(v5 + 64);
  int64_t v64 = (unint64_t)(63 - v36) >> 6;
  uint64_t v39 = v35 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v40 = 0;
  while (1)
  {
    if (v38)
    {
      unint64_t v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v44 = v43 | (v40 << 6);
      goto LABEL_48;
    }
    int64_t v45 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v45 >= v64) {
      goto LABEL_57;
    }
    unint64_t v46 = *(void *)(v63 + 8 * v45);
    int64_t v47 = v40 + 1;
    if (!v46)
    {
      int64_t v47 = v40 + 2;
      if (v40 + 2 >= v64) {
        goto LABEL_57;
      }
      unint64_t v46 = *(void *)(v63 + 8 * v47);
      if (!v46)
      {
        int64_t v47 = v40 + 3;
        if (v40 + 3 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        if (!v46)
        {
          int64_t v47 = v40 + 4;
          if (v40 + 4 >= v64) {
            goto LABEL_57;
          }
          unint64_t v46 = *(void *)(v63 + 8 * v47);
          if (!v46) {
            break;
          }
        }
      }
    }
LABEL_47:
    unint64_t v38 = (v46 - 1) & v46;
    unint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
    int64_t v40 = v47;
LABEL_48:
    long long v49 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v44);
    uint64_t v51 = *v49;
    uint64_t v50 = v49[1];
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v44, (uint64_t)v76);
    *(void *)&long long v75 = v51;
    *((void *)&v75 + 1) = v50;
    v73[2] = v75;
    v74[0] = v76[0];
    v74[1] = v76[1];
    *(void *)&v73[0] = v51;
    *((void *)&v73[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v74, v68);
    long long v69 = v65;
    long long v70 = v66;
    uint64_t v71 = v67;
    outlined init with take of Any(v68, v72);
    long long v65 = v69;
    long long v66 = v70;
    uint64_t v67 = v71;
    outlined init with take of Any(v72, v73);
    outlined init with take of Any(v73, &v69);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v35 + 40));
    uint64_t v52 = -1 << *(unsigned char *)(v35 + 32);
    unint64_t v53 = result & ~v52;
    unint64_t v54 = v53 >> 6;
    if (((-1 << v53) & ~*(void *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      unint64_t v41 = __clz(__rbit64((-1 << v53) & ~*(void *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v55 = 0;
      unint64_t v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_67;
        }
        BOOL v57 = v54 == v56;
        if (v54 == v56) {
          unint64_t v54 = 0;
        }
        v55 |= v57;
        uint64_t v58 = *(void *)(v39 + 8 * v54);
      }
      while (v58 == -1);
      unint64_t v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }
    *(void *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    uint64_t v42 = *(void *)(v35 + 48) + 40 * v41;
    *(_OWORD *)uint64_t v42 = v65;
    *(_OWORD *)(v42 + 16) = v66;
    *(void *)(v42 + 32) = v67;
    uint64_t result = (uint64_t)outlined init with take of Any(&v69, (_OWORD *)(*(void *)(v35 + 56) + 32 * v41));
    ++*(void *)(v35 + 16);
  }
  int64_t v48 = v40 + 5;
  if (v40 + 5 < v64)
  {
    unint64_t v46 = *(void *)(v63 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        int64_t v47 = v48 + 1;
        if (__OFADD__(v48, 1)) {
          goto LABEL_68;
        }
        if (v47 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        ++v48;
        if (v46) {
          goto LABEL_47;
        }
      }
    }
    int64_t v47 = v40 + 5;
    goto LABEL_47;
  }
LABEL_57:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(void *)&long long v65 = @"NSFilePath";
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  uint64_t v59 = @"NSFilePath";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v35 + 16))
  {
    unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v69);
    if (v61)
    {
      outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v60, (uint64_t)&v65);
    }
    else
    {
      long long v65 = 0u;
      long long v66 = 0u;
    }
  }
  else
  {
    long long v65 = 0u;
    long long v66 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v69);
  if (*((void *)&v66 + 1))
  {
    if (swift_dynamicCast()) {
      return v75;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v65, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

void CocoaError.stringEncoding.getter(uint64_t a1@<X8>)
{
  id v2 = *v1;
  id v3 = *v1;
  id v65 = v2;
  id v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v4)
  {
LABEL_22:
    uint64_t v6 = MEMORY[0x1E4FBC868];
    if (*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v36 = MEMORY[0x1E4FBC868];
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v5)
  {
    uint64_t v6 = v5;
    goto LABEL_19;
  }
  id v7 = objc_msgSend(v4, sel_count);
  if (!v7)
  {

    goto LABEL_22;
  }
  uint64_t v8 = (uint64_t)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = *(void **)(v6 + 48);
  uint64_t v10 = *(void *)(v6 + 56);
  swift_retain();
  uint64_t v11 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, v8);
  if (v11 < 0 || v8 < v11) {
    goto LABEL_69;
  }
  *(void *)(v6 + 16) = v11;
  if (v11)
  {
    int64_t v12 = v11 - 1;
    uint64_t v13 = v6 + 64;
    do
    {
      while (1)
      {
        if ((*(void *)(v13 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12)) {
          goto LABEL_10;
        }
        uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v19 = *v18;
        uint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v24 = *(void *)(v6 + 16);
        BOOL v25 = __OFSUB__(v24, 1);
        uint64_t v26 = v24 - 1;
        if (v25)
        {
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          return;
        }
        *(void *)(v6 + 16) = v26;
LABEL_10:
        if (--v12 < 0) {
          goto LABEL_18;
        }
      }
      *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(void *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v14 = *(void *)(v6 + 56);
        long long v15 = (_OWORD *)(v14 + 32 * v12);
        long long v16 = v15[1];
        id v17 = (_OWORD *)(v14 + 32 * v21);
        *id v17 = *v15;
        v17[1] = v16;
        goto LABEL_10;
      }
      if (v21 == v12) {
        goto LABEL_10;
      }
      uint64_t v27 = *(void *)(v6 + 48);
      id v28 = (uint64_t *)(v27 + 16 * v21);
      uint64_t v29 = (uint64_t *)(v27 + 16 * v12);
      uint64_t v30 = *v28;
      uint64_t v31 = v28[1];
      uint64_t v32 = v29[1];
      *id v28 = *v29;
      v28[1] = v32;
      *uint64_t v29 = v30;
      v29[1] = v31;
      uint64_t v33 = *(void *)(v6 + 56);
      id v34 = (_OWORD *)(v33 + 32 * v21);
      uint64_t v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v72);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v72, v35);
    }
    while ((v12 & 0x8000000000000000) == 0);
  }
LABEL_18:
  swift_release();
LABEL_19:

  if (!*(void *)(v6 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v36 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v66 = v6 + 64;
  uint64_t v37 = -1 << *(unsigned char *)(v6 + 32);
  if (-v37 < 64) {
    uint64_t v38 = ~(-1 << -(char)v37);
  }
  else {
    uint64_t v38 = -1;
  }
  unint64_t v39 = v38 & *(void *)(v6 + 64);
  int64_t v67 = (unint64_t)(63 - v37) >> 6;
  uint64_t v40 = v36 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  int64_t v41 = 0;
  while (1)
  {
    if (v39)
    {
      unint64_t v44 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v45 = v44 | (v41 << 6);
      goto LABEL_48;
    }
    int64_t v46 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v46 >= v67) {
      goto LABEL_57;
    }
    unint64_t v47 = *(void *)(v66 + 8 * v46);
    int64_t v48 = v41 + 1;
    if (!v47)
    {
      int64_t v48 = v41 + 2;
      if (v41 + 2 >= v67) {
        goto LABEL_57;
      }
      unint64_t v47 = *(void *)(v66 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v41 + 3;
        if (v41 + 3 >= v67) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v66 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v41 + 4;
          if (v41 + 4 >= v67) {
            goto LABEL_57;
          }
          unint64_t v47 = *(void *)(v66 + 8 * v48);
          if (!v47) {
            break;
          }
        }
      }
    }
LABEL_47:
    unint64_t v39 = (v47 - 1) & v47;
    unint64_t v45 = __clz(__rbit64(v47)) + (v48 << 6);
    int64_t v41 = v48;
LABEL_48:
    uint64_t v50 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v45);
    uint64_t v52 = *v50;
    uint64_t v51 = v50[1];
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v45, (uint64_t)v79);
    *(void *)&long long v78 = v52;
    *((void *)&v78 + 1) = v51;
    _OWORD v76[2] = v78;
    v77[0] = v79[0];
    v77[1] = v79[1];
    *(void *)&v76[0] = v52;
    *((void *)&v76[0] + 1) = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v77, v71);
    long long v72 = *(_OWORD *)v68;
    long long v73 = v69;
    uint64_t v74 = v70;
    outlined init with take of Any(v71, v75);
    *(_OWORD *)uint64_t v68 = v72;
    long long v69 = v73;
    uint64_t v70 = v74;
    outlined init with take of Any(v75, v76);
    outlined init with take of Any(v76, &v72);
    Swift::Int v53 = AnyHashable._rawHashValue(seed:)(*(void *)(v36 + 40));
    uint64_t v54 = -1 << *(unsigned char *)(v36 + 32);
    unint64_t v55 = v53 & ~v54;
    unint64_t v56 = v55 >> 6;
    if (((-1 << v55) & ~*(void *)(v40 + 8 * (v55 >> 6))) != 0)
    {
      unint64_t v42 = __clz(__rbit64((-1 << v55) & ~*(void *)(v40 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v57 = 0;
      unint64_t v58 = (unint64_t)(63 - v54) >> 6;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
          goto LABEL_66;
        }
        BOOL v59 = v56 == v58;
        if (v56 == v58) {
          unint64_t v56 = 0;
        }
        v57 |= v59;
        uint64_t v60 = *(void *)(v40 + 8 * v56);
      }
      while (v60 == -1);
      unint64_t v42 = __clz(__rbit64(~v60)) + (v56 << 6);
    }
    *(void *)(v40 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    uint64_t v43 = *(void *)(v36 + 48) + 40 * v42;
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v68;
    *(_OWORD *)(v43 + 16) = v69;
    *(void *)(v43 + 32) = v70;
    outlined init with take of Any(&v72, (_OWORD *)(*(void *)(v36 + 56) + 32 * v42));
    ++*(void *)(v36 + 16);
  }
  int64_t v49 = v41 + 5;
  if (v41 + 5 < v67)
  {
    unint64_t v47 = *(void *)(v66 + 8 * v49);
    if (!v47)
    {
      while (1)
      {
        int64_t v48 = v49 + 1;
        if (__OFADD__(v49, 1)) {
          goto LABEL_67;
        }
        if (v48 >= v67) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v66 + 8 * v48);
        ++v49;
        if (v47) {
          goto LABEL_47;
        }
      }
    }
    int64_t v48 = v41 + 5;
    goto LABEL_47;
  }
LABEL_57:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  char v61 = @"NSStringEncoding";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v36 + 16) && (unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v72), (v63 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v62, (uint64_t)&v80);
  }
  else
  {
    long long v80 = 0u;
    long long v81 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v72);
  if (*((void *)&v81 + 1))
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if (swift_dynamicCast())
    {
      *(void *)a1 = objc_msgSend(@"NSStringEncoding", sel_unsignedIntegerValue);
      *(unsigned char *)(a1 + 8) = 0;

      return;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v80, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t CocoaError.underlying.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  id v62 = v1;
  id v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v3)
  {
LABEL_22:
    uint64_t v5 = MEMORY[0x1E4FBC868];
    if (*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v35 = MEMORY[0x1E4FBC868];
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_19;
  }
  id v6 = objc_msgSend(v3, sel_count);
  if (!v6)
  {

    goto LABEL_22;
  }
  uint64_t v7 = (uint64_t)v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = *(void **)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, v7);
  if (result < 0 || v7 < result) {
    goto LABEL_70;
  }
  *(void *)(v5 + 16) = result;
  if (result)
  {
    uint64_t v11 = result - 1;
    uint64_t v12 = v5 + 64;
    do
    {
      while (1)
      {
        if ((*(void *)(v12 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11)) {
          goto LABEL_10;
        }
        id v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        char v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v23 = *(void *)(v5 + 16);
        BOOL v24 = __OFSUB__(v23, 1);
        uint64_t v25 = v23 - 1;
        if (v24)
        {
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          return result;
        }
        *(void *)(v5 + 16) = v25;
LABEL_10:
        if (--v11 < 0) {
          goto LABEL_18;
        }
      }
      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v13 = *(void *)(v5 + 56);
        uint64_t v14 = (_OWORD *)(v13 + 32 * v11);
        long long v15 = v14[1];
        long long v16 = (_OWORD *)(v13 + 32 * v20);
        *long long v16 = *v14;
        v16[1] = v15;
        goto LABEL_10;
      }
      if (v20 == v11) {
        goto LABEL_10;
      }
      uint64_t v26 = *(void *)(v5 + 48);
      uint64_t v27 = (uint64_t *)(v26 + 16 * v20);
      id v28 = (uint64_t *)(v26 + 16 * v11);
      uint64_t v29 = *v27;
      uint64_t v30 = v27[1];
      uint64_t v31 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v31;
      *id v28 = v29;
      v28[1] = v30;
      uint64_t v32 = *(void *)(v5 + 56);
      uint64_t v33 = (_OWORD *)(v32 + 32 * v20);
      id v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v69);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v69, v34);
    }
    while ((v11 & 0x8000000000000000) == 0);
  }
LABEL_18:
  swift_release();
LABEL_19:

  if (!*(void *)(v5 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v35 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v63 = v5 + 64;
  uint64_t v36 = -1 << *(unsigned char *)(v5 + 32);
  if (-v36 < 64) {
    uint64_t v37 = ~(-1 << -(char)v36);
  }
  else {
    uint64_t v37 = -1;
  }
  unint64_t v38 = v37 & *(void *)(v5 + 64);
  int64_t v64 = (unint64_t)(63 - v36) >> 6;
  uint64_t v39 = v35 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v40 = 0;
  while (1)
  {
    if (v38)
    {
      unint64_t v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v44 = v43 | (v40 << 6);
      goto LABEL_48;
    }
    int64_t v45 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v45 >= v64) {
      goto LABEL_57;
    }
    unint64_t v46 = *(void *)(v63 + 8 * v45);
    int64_t v47 = v40 + 1;
    if (!v46)
    {
      int64_t v47 = v40 + 2;
      if (v40 + 2 >= v64) {
        goto LABEL_57;
      }
      unint64_t v46 = *(void *)(v63 + 8 * v47);
      if (!v46)
      {
        int64_t v47 = v40 + 3;
        if (v40 + 3 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        if (!v46)
        {
          int64_t v47 = v40 + 4;
          if (v40 + 4 >= v64) {
            goto LABEL_57;
          }
          unint64_t v46 = *(void *)(v63 + 8 * v47);
          if (!v46) {
            break;
          }
        }
      }
    }
LABEL_47:
    unint64_t v38 = (v46 - 1) & v46;
    unint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
    int64_t v40 = v47;
LABEL_48:
    int64_t v49 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v44);
    uint64_t v51 = *v49;
    uint64_t v50 = v49[1];
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v44, (uint64_t)v76);
    *(void *)&long long v75 = v51;
    *((void *)&v75 + 1) = v50;
    v73[2] = v75;
    v74[0] = v76[0];
    v74[1] = v76[1];
    *(void *)&v73[0] = v51;
    *((void *)&v73[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v74, v68);
    long long v69 = v65;
    long long v70 = v66;
    uint64_t v71 = v67;
    outlined init with take of Any(v68, v72);
    long long v65 = v69;
    long long v66 = v70;
    uint64_t v67 = v71;
    outlined init with take of Any(v72, v73);
    outlined init with take of Any(v73, &v69);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v35 + 40));
    uint64_t v52 = -1 << *(unsigned char *)(v35 + 32);
    unint64_t v53 = result & ~v52;
    unint64_t v54 = v53 >> 6;
    if (((-1 << v53) & ~*(void *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      unint64_t v41 = __clz(__rbit64((-1 << v53) & ~*(void *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v55 = 0;
      unint64_t v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_67;
        }
        BOOL v57 = v54 == v56;
        if (v54 == v56) {
          unint64_t v54 = 0;
        }
        v55 |= v57;
        uint64_t v58 = *(void *)(v39 + 8 * v54);
      }
      while (v58 == -1);
      unint64_t v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }
    *(void *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    uint64_t v42 = *(void *)(v35 + 48) + 40 * v41;
    *(_OWORD *)uint64_t v42 = v65;
    *(_OWORD *)(v42 + 16) = v66;
    *(void *)(v42 + 32) = v67;
    uint64_t result = (uint64_t)outlined init with take of Any(&v69, (_OWORD *)(*(void *)(v35 + 56) + 32 * v41));
    ++*(void *)(v35 + 16);
  }
  int64_t v48 = v40 + 5;
  if (v40 + 5 < v64)
  {
    unint64_t v46 = *(void *)(v63 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        int64_t v47 = v48 + 1;
        if (__OFADD__(v48, 1)) {
          goto LABEL_68;
        }
        if (v47 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        ++v48;
        if (v46) {
          goto LABEL_47;
        }
      }
    }
    int64_t v47 = v40 + 5;
    goto LABEL_47;
  }
LABEL_57:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(void *)&long long v65 = @"NSUnderlyingError";
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  BOOL v59 = @"NSUnderlyingError";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v35 + 16))
  {
    unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v69);
    if (v61)
    {
      outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v60, (uint64_t)&v65);
    }
    else
    {
      long long v65 = 0u;
      long long v66 = 0u;
    }
  }
  else
  {
    long long v65 = 0u;
    long long v66 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v69);
  if (*((void *)&v66 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast()) {
      return v75;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v65, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t CocoaError.underlyingErrors.getter()
{
  id v1 = *v0;
  unint64_t v199 = MEMORY[0x1E4FBC860];
  id v2 = v1;
  id v3 = v1;
  id v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  id v175 = v3;
  if (!v4)
  {
LABEL_22:
    id v6 = (_OWORD *)MEMORY[0x1E4FBC868];
    unint64_t v21 = *(void *)(MEMORY[0x1E4FBC868] + 16);
    if (v21) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v36 = MEMORY[0x1E4FBC868];
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v5)
  {
    id v6 = (_OWORD *)v5;
    goto LABEL_19;
  }
  id v7 = objc_msgSend(v4, sel_count);
  if (!v7)
  {

    goto LABEL_22;
  }
  uint64_t v8 = (uint64_t)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  id v6 = (_OWORD *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = (void *)*((void *)v6 + 6);
  uint64_t v10 = *((void *)v6 + 7);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, v8);
  if (result < 0 || v8 < result)
  {
    __break(1u);
    goto LABEL_210;
  }
  *((void *)v6 + 2) = result;
  if (result)
  {
    int64_t v12 = result - 1;
    uint64_t v13 = v6 + 4;
    while (1)
    {
      if ((*(void *)((char *)v13 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12)) {
        goto LABEL_10;
      }
      uint64_t v18 = (uint64_t *)(*((void *)v6 + 6) + 16 * v12);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      swift_bridgeObjectRetain();
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
      char v23 = v22;
      swift_bridgeObjectRelease();
      if (v23)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v24 = *((void *)v6 + 2);
        BOOL v25 = __OFSUB__(v24, 1);
        uint64_t v26 = v24 - 1;
        if (v25) {
          goto LABEL_205;
        }
        *((void *)v6 + 2) = v26;
        goto LABEL_10;
      }
      *(void *)((char *)v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*((void *)v6 + 6) + 16 * v21) = *(_OWORD *)(*((void *)v6 + 6) + 16 * v12);
        uint64_t v14 = *((void *)v6 + 7);
        long long v15 = (_OWORD *)(v14 + 32 * v12);
        long long v16 = v15[1];
        id v17 = (_OWORD *)(v14 + 32 * v21);
        *id v17 = *v15;
        v17[1] = v16;
LABEL_10:
        if (--v12 < 0) {
          break;
        }
      }
      else
      {
        if (v21 == v12) {
          goto LABEL_10;
        }
        uint64_t v27 = *((void *)v6 + 6);
        id v28 = (uint64_t *)(v27 + 16 * v21);
        uint64_t v29 = (uint64_t *)(v27 + 16 * v12);
        uint64_t v30 = *v28;
        uint64_t v31 = v28[1];
        uint64_t v32 = v29[1];
        *id v28 = *v29;
        v28[1] = v32;
        *uint64_t v29 = v30;
        v29[1] = v31;
        uint64_t v33 = *((void *)v6 + 7);
        id v34 = (_OWORD *)(v33 + 32 * v21);
        uint64_t v35 = (_OWORD *)(v33 + 32 * v12);
        outlined init with take of Any(v34, &v186);
        outlined init with take of Any(v35, v34);
        outlined init with take of Any(&v186, v35);
        if (v12 < 0) {
          break;
        }
      }
    }
  }
  swift_release();
LABEL_19:

  unint64_t v21 = *((void *)v6 + 2);
  if (!v21) {
    goto LABEL_23;
  }
LABEL_20:
  unint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v36 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  long long v179 = v6 + 4;
  uint64_t v37 = -1 << *((unsigned char *)v6 + 32);
  if (-v37 < 64) {
    uint64_t v38 = ~(-1 << -(char)v37);
  }
  else {
    uint64_t v38 = -1;
  }
  unint64_t v39 = v38 & v6[4];
  int64_t v176 = (unint64_t)(63 - v37) >> 6;
  uint64_t v40 = v36 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v20 = 0;
  while (v39)
  {
    unint64_t v43 = __clz(__rbit64(v39));
    v39 &= v39 - 1;
    unint64_t v44 = v43 | (v20 << 6);
LABEL_48:
    int64_t v49 = (uint64_t *)(*((void *)v6 + 6) + 16 * v44);
    uint64_t v51 = *v49;
    uint64_t v50 = v49[1];
    outlined init with copy of Any(*((void *)v6 + 7) + 32 * v44, (uint64_t)&v195);
    *(void *)&long long v194 = v51;
    *((void *)&v194 + 1) = v50;
    long long v191 = v194;
    long long v192 = v195;
    long long v193 = v196;
    *(void *)&v190[0] = v51;
    *((void *)&v190[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(&v192, v185);
    long long v186 = *(_OWORD *)v182;
    long long v187 = v183;
    uint64_t v188 = v184;
    outlined init with take of Any(v185, v189);
    *(_OWORD *)char v182 = v186;
    long long v183 = v187;
    uint64_t v184 = v188;
    outlined init with take of Any(v189, v190);
    outlined init with take of Any(v190, &v186);
    unint64_t v21 = (unint64_t)v182;
    Swift::Int v52 = AnyHashable._rawHashValue(seed:)(*(void *)(v36 + 40));
    uint64_t v53 = -1 << *(unsigned char *)(v36 + 32);
    unint64_t v54 = v52 & ~v53;
    unint64_t v55 = v54 >> 6;
    if (((-1 << v54) & ~*(void *)(v40 + 8 * (v54 >> 6))) != 0)
    {
      unint64_t v41 = __clz(__rbit64((-1 << v54) & ~*(void *)(v40 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_29;
    }
    char v56 = 0;
    unint64_t v57 = (unint64_t)(63 - v53) >> 6;
    do
    {
      if (++v55 == v57 && (v56 & 1) != 0)
      {
        __break(1u);
        goto LABEL_88;
      }
      BOOL v58 = v55 == v57;
      if (v55 == v57) {
        unint64_t v55 = 0;
      }
      v56 |= v58;
      uint64_t v59 = *(void *)(v40 + 8 * v55);
    }
    while (v59 == -1);
    unint64_t v41 = __clz(__rbit64(~v59)) + (v55 << 6);
LABEL_29:
    *(void *)(v40 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    uint64_t v42 = *(void *)(v36 + 48) + 40 * v41;
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v182;
    *(_OWORD *)(v42 + 16) = v183;
    *(void *)(v42 + 32) = v184;
    outlined init with take of Any(&v186, (_OWORD *)(*(void *)(v36 + 56) + 32 * v41));
    ++*(void *)(v36 + 16);
  }
  int64_t v45 = v20 + 1;
  if (__OFADD__(v20, 1)) {
    goto LABEL_199;
  }
  if (v45 < v176)
  {
    unint64_t v46 = *((void *)v179 + v45);
    int64_t v47 = v20 + 1;
    if (!v46)
    {
      int64_t v47 = v20 + 2;
      if (v20 + 2 >= v176) {
        goto LABEL_57;
      }
      unint64_t v46 = *((void *)v179 + v47);
      if (!v46)
      {
        int64_t v47 = v20 + 3;
        if (v20 + 3 >= v176) {
          goto LABEL_57;
        }
        unint64_t v46 = *((void *)v179 + v47);
        if (!v46)
        {
          int64_t v47 = v20 + 4;
          if (v20 + 4 >= v176) {
            goto LABEL_57;
          }
          unint64_t v46 = *((void *)v179 + v47);
          if (!v46)
          {
            uint64_t v48 = v20 + 5;
            if (v20 + 5 >= v176) {
              goto LABEL_57;
            }
            unint64_t v46 = *((void *)v179 + v48);
            if (!v46)
            {
              while (1)
              {
                int64_t v47 = v48 + 1;
                if (__OFADD__(v48, 1)) {
                  goto LABEL_202;
                }
                if (v47 >= v176) {
                  goto LABEL_57;
                }
                unint64_t v46 = *((void *)v179 + v47);
                ++v48;
                if (v46) {
                  goto LABEL_47;
                }
              }
            }
            int64_t v47 = v20 + 5;
          }
        }
      }
    }
LABEL_47:
    unint64_t v39 = (v46 - 1) & v46;
    unint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
    uint64_t v20 = v47;
    goto LABEL_48;
  }
LABEL_57:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  uint64_t v20 = (uint64_t)v175;

  swift_bridgeObjectRelease();
  v182[0] = @"NSUnderlyingError";
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  unint64_t v60 = @"NSUnderlyingError";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v36 + 16) && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v186), (v62 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v61, (uint64_t)&v197);
  }
  else
  {
    long long v197 = 0u;
    long long v198 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v186);
  if (*((void *)&v198 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      id v6 = v182[0];
      unint64_t v21 = v199;
      id v63 = v182[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_208;
      }
      goto LABEL_64;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v197, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  while (2)
  {
    id v66 = (id)v20;
    id v67 = (id)v20;
    unint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
    id v6 = objc_msgSend((id)v21, sel_userInfo);
    swift_unknownObjectRelease();
    id v175 = v67;
    if (v6)
    {
      swift_unknownObjectRetain();
      uint64_t v68 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (v68)
      {
        uint64_t v69 = v68;
        goto LABEL_86;
      }
      id v70 = objc_msgSend(v6, sel_count);
      if (v70)
      {
        uint64_t v71 = (uint64_t)v70;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v69 = static _DictionaryStorage.allocate(capacity:)();
        unint64_t v21 = *(void *)(v69 + 48);
        uint64_t v72 = *(void *)(v69 + 56);
        swift_retain();
        uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)((void *)v21, v72, v6, v71);
        if ((result & 0x8000000000000000) == 0 && v71 >= result)
        {
          *(void *)(v69 + 16) = result;
          if (!result)
          {
LABEL_85:
            swift_release();
LABEL_86:

            if (!*(void *)(v69 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_87;
          }
          int64_t v73 = result - 1;
          uint64_t v74 = v69 + 64;
          while (1)
          {
            if ((*(void *)(v74 + (((unint64_t)v73 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v73)) {
              goto LABEL_77;
            }
            int64_t v79 = (uint64_t *)(*(void *)(v69 + 48) + 16 * v73);
            uint64_t v80 = *v79;
            uint64_t v20 = v79[1];
            swift_bridgeObjectRetain();
            unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v20);
            char v82 = v81;
            swift_bridgeObjectRelease();
            if (v82) {
              break;
            }
            *(void *)(v74 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
            if (v73 < (uint64_t)v21)
            {
              *(_OWORD *)(*(void *)(v69 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v69 + 48) + 16 * v73);
              uint64_t v75 = *(void *)(v69 + 56);
              int v76 = (_OWORD *)(v75 + 32 * v21);
              unint64_t v77 = (_OWORD *)(v75 + 32 * v73);
              long long v78 = v77[1];
              *int v76 = *v77;
              v76[1] = v78;
LABEL_77:
              if (--v73 < 0) {
                goto LABEL_85;
              }
              continue;
            }
            if (v21 == v73) {
              goto LABEL_77;
            }
            uint64_t v85 = *(void *)(v69 + 48);
            uint64_t v86 = (uint64_t *)(v85 + 16 * v21);
            int64_t v87 = (uint64_t *)(v85 + 16 * v73);
            uint64_t v88 = *v86;
            uint64_t v89 = v86[1];
            uint64_t v90 = v87[1];
            *uint64_t v86 = *v87;
            v86[1] = v90;
            *int64_t v87 = v88;
            v87[1] = v89;
            uint64_t v91 = *(void *)(v69 + 56);
            unint64_t v21 = v91 + 32 * v21;
            int64_t v92 = (_OWORD *)(v91 + 32 * v73);
            outlined init with take of Any((_OWORD *)v21, &v186);
            outlined init with take of Any(v92, (_OWORD *)v21);
            outlined init with take of Any(&v186, v92);
            if (v73 < 0) {
              goto LABEL_85;
            }
          }
          swift_arrayDestroy();
          swift_arrayDestroy();
          uint64_t v83 = *(void *)(v69 + 16);
          BOOL v25 = __OFSUB__(v83, 1);
          uint64_t v84 = v83 - 1;
          if (v25) {
            goto LABEL_206;
          }
          *(void *)(v69 + 16) = v84;
          goto LABEL_77;
        }
LABEL_210:
        __break(1u);
        goto LABEL_211;
      }
LABEL_88:
    }
    uint64_t v69 = MEMORY[0x1E4FBC868];
    if (!*(void *)(MEMORY[0x1E4FBC868] + 16))
    {
LABEL_90:
      uint64_t v20 = MEMORY[0x1E4FBC868];
      goto LABEL_91;
    }
LABEL_87:
    unint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v20 = static _DictionaryStorage.allocate(capacity:)();
LABEL_91:
    uint64_t v177 = v69 + 64;
    uint64_t v93 = -1 << *(unsigned char *)(v69 + 32);
    if (-v93 < 64) {
      uint64_t v94 = ~(-1 << -(char)v93);
    }
    else {
      uint64_t v94 = -1;
    }
    unint64_t v95 = v94 & *(void *)(v69 + 64);
    int64_t v180 = (unint64_t)(63 - v93) >> 6;
    id v6 = v185;
    uint64_t v96 = v20 + 64;
    swift_bridgeObjectRetain();
    swift_retain();
    int64_t v97 = 0;
    while (v95)
    {
      unint64_t v100 = __clz(__rbit64(v95));
      v95 &= v95 - 1;
      unint64_t v101 = v100 | (v97 << 6);
LABEL_115:
      uint64_t v106 = (uint64_t *)(*(void *)(v69 + 48) + 16 * v101);
      uint64_t v108 = *v106;
      uint64_t v107 = v106[1];
      outlined init with copy of Any(*(void *)(v69 + 56) + 32 * v101, (uint64_t)&v195);
      *(void *)&long long v194 = v108;
      *((void *)&v194 + 1) = v107;
      long long v191 = v194;
      long long v192 = v195;
      long long v193 = v196;
      *(void *)&v190[0] = v108;
      *((void *)&v190[0] + 1) = v107;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      outlined init with take of Any(&v192, v185);
      long long v186 = *(_OWORD *)v182;
      long long v187 = v183;
      uint64_t v188 = v184;
      outlined init with take of Any(v185, v189);
      *(_OWORD *)char v182 = v186;
      long long v183 = v187;
      uint64_t v184 = v188;
      outlined init with take of Any(v189, v190);
      outlined init with take of Any(v190, &v186);
      unint64_t v21 = (unint64_t)v182;
      Swift::Int v109 = AnyHashable._rawHashValue(seed:)(*(void *)(v20 + 40));
      uint64_t v110 = -1 << *(unsigned char *)(v20 + 32);
      unint64_t v111 = v109 & ~v110;
      unint64_t v112 = v111 >> 6;
      if (((-1 << v111) & ~*(void *)(v96 + 8 * (v111 >> 6))) != 0)
      {
        unint64_t v98 = __clz(__rbit64((-1 << v111) & ~*(void *)(v96 + 8 * (v111 >> 6)))) | v111 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_96;
      }
      char v113 = 0;
      unint64_t v114 = (unint64_t)(63 - v110) >> 6;
      do
      {
        if (++v112 == v114 && (v113 & 1) != 0)
        {
          __break(1u);
          goto LABEL_153;
        }
        BOOL v115 = v112 == v114;
        if (v112 == v114) {
          unint64_t v112 = 0;
        }
        v113 |= v115;
        uint64_t v116 = *(void *)(v96 + 8 * v112);
      }
      while (v116 == -1);
      unint64_t v98 = __clz(__rbit64(~v116)) + (v112 << 6);
LABEL_96:
      *(void *)(v96 + ((v98 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v98;
      uint64_t v99 = *(void *)(v20 + 48) + 40 * v98;
      *(_OWORD *)uint64_t v99 = *(_OWORD *)v182;
      *(_OWORD *)(v99 + 16) = v183;
      *(void *)(v99 + 32) = v184;
      outlined init with take of Any(&v186, (_OWORD *)(*(void *)(v20 + 56) + 32 * v98));
      ++*(void *)(v20 + 16);
    }
    int64_t v102 = v97 + 1;
    if (__OFADD__(v97, 1)) {
      goto LABEL_200;
    }
    if (v102 < v180)
    {
      unint64_t v103 = *(void *)(v177 + 8 * v102);
      int64_t v104 = v97 + 1;
      if (!v103)
      {
        int64_t v104 = v97 + 2;
        if (v97 + 2 >= v180) {
          goto LABEL_124;
        }
        unint64_t v103 = *(void *)(v177 + 8 * v104);
        if (!v103)
        {
          int64_t v104 = v97 + 3;
          if (v97 + 3 >= v180) {
            goto LABEL_124;
          }
          unint64_t v103 = *(void *)(v177 + 8 * v104);
          if (!v103)
          {
            int64_t v104 = v97 + 4;
            if (v97 + 4 >= v180) {
              goto LABEL_124;
            }
            unint64_t v103 = *(void *)(v177 + 8 * v104);
            if (!v103)
            {
              int64_t v105 = v97 + 5;
              if (v97 + 5 >= v180) {
                goto LABEL_124;
              }
              unint64_t v103 = *(void *)(v177 + 8 * v105);
              if (!v103)
              {
                while (1)
                {
                  int64_t v104 = v105 + 1;
                  if (__OFADD__(v105, 1)) {
                    break;
                  }
                  if (v104 >= v180) {
                    goto LABEL_124;
                  }
                  unint64_t v103 = *(void *)(v177 + 8 * v104);
                  ++v105;
                  if (v103) {
                    goto LABEL_114;
                  }
                }
LABEL_203:
                __break(1u);
                goto LABEL_204;
              }
              int64_t v104 = v97 + 5;
            }
          }
        }
      }
LABEL_114:
      unint64_t v95 = (v103 - 1) & v103;
      unint64_t v101 = __clz(__rbit64(v103)) + (v104 << 6);
      int64_t v97 = v104;
      goto LABEL_115;
    }
LABEL_124:
    swift_release();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();

    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t)objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytesNoCopy_length_encoding_freeWhenDone_, "NSMultipleUnderlyingErrorsKey", 29, 1, 0);
    if (!result) {
      goto LABEL_212;
    }
    unint64_t v117 = (void *)result;
    id v118 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, result);

    v182[0] = v118;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v20 + 16)
      && (unint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v186), (v120 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v119, (uint64_t)&v197);
    }
    else
    {
      long long v197 = 0u;
      long long v198 = 0u;
    }
    swift_release();
    outlined destroy of AnyHashable((uint64_t)&v186);
    if (*((void *)&v198 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Error]);
      if (swift_dynamicCast()) {
        specialized Array.append<A>(contentsOf:)((uint64_t)v182[0]);
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v197, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    id v121 = v175;
    id v175 = v175;
    unint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
    id v6 = objc_msgSend((id)v21, sel_userInfo);
    swift_unknownObjectRelease();
    if (v6)
    {
      swift_unknownObjectRetain();
      uint64_t v122 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (v122)
      {
        uint64_t v123 = v122;
        goto LABEL_151;
      }
      id v124 = objc_msgSend(v6, sel_count);
      if (v124)
      {
        uint64_t v125 = (uint64_t)v124;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v123 = static _DictionaryStorage.allocate(capacity:)();
        unint64_t v21 = *(void *)(v123 + 48);
        uint64_t v126 = *(void *)(v123 + 56);
        swift_retain();
        uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)((void *)v21, v126, v6, v125);
        if ((result & 0x8000000000000000) == 0 && v125 >= result)
        {
          *(void *)(v123 + 16) = result;
          if (!result)
          {
LABEL_150:
            swift_release();
LABEL_151:

            if (!*(void *)(v123 + 16)) {
              goto LABEL_155;
            }
            goto LABEL_152;
          }
          int64_t v127 = result - 1;
          uint64_t v128 = v123 + 64;
          while (1)
          {
LABEL_143:
            if ((*(void *)(v128 + (((unint64_t)v127 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v127)) {
              goto LABEL_142;
            }
            uint64_t v133 = (uint64_t *)(*(void *)(v123 + 48) + 16 * v127);
            uint64_t v134 = *v133;
            uint64_t v20 = v133[1];
            swift_bridgeObjectRetain();
            unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v20);
            char v136 = v135;
            swift_bridgeObjectRelease();
            if (v136) {
              break;
            }
            *(void *)(v128 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
            if (v127 < (uint64_t)v21)
            {
              *(_OWORD *)(*(void *)(v123 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v123 + 48) + 16 * v127);
              uint64_t v129 = *(void *)(v123 + 56);
              char v130 = (_OWORD *)(v129 + 32 * v21);
              unint64_t v131 = (_OWORD *)(v129 + 32 * v127);
              long long v132 = v131[1];
              *char v130 = *v131;
              v130[1] = v132;
              goto LABEL_142;
            }
            if (v21 == v127) {
              goto LABEL_142;
            }
            uint64_t v139 = *(void *)(v123 + 48);
            uint64_t v140 = (uint64_t *)(v139 + 16 * v21);
            unint64_t v141 = (uint64_t *)(v139 + 16 * v127);
            uint64_t v142 = *v140;
            uint64_t v143 = v140[1];
            uint64_t v144 = v141[1];
            *uint64_t v140 = *v141;
            v140[1] = v144;
            *unint64_t v141 = v142;
            v141[1] = v143;
            uint64_t v145 = *(void *)(v123 + 56);
            unint64_t v21 = v145 + 32 * v21;
            uint64_t v146 = (_OWORD *)(v145 + 32 * v127);
            outlined init with take of Any((_OWORD *)v21, &v186);
            outlined init with take of Any(v146, (_OWORD *)v21);
            outlined init with take of Any(&v186, v146);
            if (v127 < 0) {
              goto LABEL_150;
            }
          }
          swift_arrayDestroy();
          swift_arrayDestroy();
          uint64_t v137 = *(void *)(v123 + 16);
          BOOL v25 = __OFSUB__(v137, 1);
          uint64_t v138 = v137 - 1;
          if (v25) {
            goto LABEL_207;
          }
          *(void *)(v123 + 16) = v138;
LABEL_142:
          if (--v127 < 0) {
            goto LABEL_150;
          }
          goto LABEL_143;
        }
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }
LABEL_153:
    }
    uint64_t v123 = MEMORY[0x1E4FBC868];
    if (!*(void *)(MEMORY[0x1E4FBC868] + 16))
    {
LABEL_155:
      uint64_t v20 = MEMORY[0x1E4FBC868];
      goto LABEL_156;
    }
LABEL_152:
    unint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v20 = static _DictionaryStorage.allocate(capacity:)();
LABEL_156:
    uint64_t v181 = v123 + 64;
    uint64_t v147 = -1 << *(unsigned char *)(v123 + 32);
    if (-v147 < 64) {
      uint64_t v148 = ~(-1 << -(char)v147);
    }
    else {
      uint64_t v148 = -1;
    }
    unint64_t v149 = v148 & *(void *)(v123 + 64);
    int64_t v178 = (unint64_t)(63 - v147) >> 6;
    id v6 = v185;
    uint64_t v150 = v20 + 64;
    swift_bridgeObjectRetain();
    swift_retain();
    int64_t v151 = 0;
    while (v149)
    {
      unint64_t v154 = __clz(__rbit64(v149));
      v149 &= v149 - 1;
      unint64_t v155 = v154 | (v151 << 6);
LABEL_180:
      uint64_t v160 = (uint64_t *)(*(void *)(v123 + 48) + 16 * v155);
      uint64_t v162 = *v160;
      uint64_t v161 = v160[1];
      outlined init with copy of Any(*(void *)(v123 + 56) + 32 * v155, (uint64_t)&v195);
      *(void *)&long long v194 = v162;
      *((void *)&v194 + 1) = v161;
      long long v191 = v194;
      long long v192 = v195;
      long long v193 = v196;
      *(void *)&v190[0] = v162;
      *((void *)&v190[0] + 1) = v161;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      outlined init with take of Any(&v192, v185);
      long long v186 = *(_OWORD *)v182;
      long long v187 = v183;
      uint64_t v188 = v184;
      outlined init with take of Any(v185, v189);
      *(_OWORD *)char v182 = v186;
      long long v183 = v187;
      uint64_t v184 = v188;
      outlined init with take of Any(v189, v190);
      outlined init with take of Any(v190, &v186);
      unint64_t v21 = (unint64_t)v182;
      Swift::Int v163 = AnyHashable._rawHashValue(seed:)(*(void *)(v20 + 40));
      uint64_t v164 = -1 << *(unsigned char *)(v20 + 32);
      unint64_t v165 = v163 & ~v164;
      unint64_t v166 = v165 >> 6;
      if (((-1 << v165) & ~*(void *)(v150 + 8 * (v165 >> 6))) != 0)
      {
        unint64_t v152 = __clz(__rbit64((-1 << v165) & ~*(void *)(v150 + 8 * (v165 >> 6)))) | v165 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_161;
      }
      char v167 = 0;
      unint64_t v168 = (unint64_t)(63 - v164) >> 6;
      do
      {
        if (++v166 == v168 && (v167 & 1) != 0)
        {
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
          goto LABEL_203;
        }
        BOOL v169 = v166 == v168;
        if (v166 == v168) {
          unint64_t v166 = 0;
        }
        v167 |= v169;
        uint64_t v170 = *(void *)(v150 + 8 * v166);
      }
      while (v170 == -1);
      unint64_t v152 = __clz(__rbit64(~v170)) + (v166 << 6);
LABEL_161:
      *(void *)(v150 + ((v152 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v152;
      uint64_t v153 = *(void *)(v20 + 48) + 40 * v152;
      *(_OWORD *)uint64_t v153 = *(_OWORD *)v182;
      *(_OWORD *)(v153 + 16) = v183;
      *(void *)(v153 + 32) = v184;
      outlined init with take of Any(&v186, (_OWORD *)(*(void *)(v20 + 56) + 32 * v152));
      ++*(void *)(v20 + 16);
    }
    int64_t v156 = v151 + 1;
    if (__OFADD__(v151, 1)) {
      goto LABEL_201;
    }
    if (v156 < v178)
    {
      unint64_t v157 = *(void *)(v181 + 8 * v156);
      int64_t v158 = v151 + 1;
      if (!v157)
      {
        int64_t v158 = v151 + 2;
        if (v151 + 2 >= v178) {
          break;
        }
        unint64_t v157 = *(void *)(v181 + 8 * v158);
        if (!v157)
        {
          int64_t v158 = v151 + 3;
          if (v151 + 3 >= v178) {
            break;
          }
          unint64_t v157 = *(void *)(v181 + 8 * v158);
          if (!v157)
          {
            int64_t v158 = v151 + 4;
            if (v151 + 4 >= v178) {
              break;
            }
            unint64_t v157 = *(void *)(v181 + 8 * v158);
            if (!v157)
            {
              int64_t v159 = v151 + 5;
              if (v151 + 5 >= v178) {
                break;
              }
              unint64_t v157 = *(void *)(v181 + 8 * v159);
              if (!v157)
              {
                while (1)
                {
                  int64_t v158 = v159 + 1;
                  if (__OFADD__(v159, 1)) {
                    break;
                  }
                  if (v158 >= v178) {
                    goto LABEL_189;
                  }
                  unint64_t v157 = *(void *)(v181 + 8 * v158);
                  ++v159;
                  if (v157) {
                    goto LABEL_179;
                  }
                }
LABEL_204:
                __break(1u);
LABEL_205:
                __break(1u);
LABEL_206:
                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                unint64_t v21 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, (void *)v21);
LABEL_64:
                unint64_t v65 = *(void *)(v21 + 16);
                unint64_t v64 = *(void *)(v21 + 24);
                if (v65 >= v64 >> 1) {
                  unint64_t v21 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v64 > 1), v65 + 1, 1, (void *)v21);
                }
                *(void *)(v21 + 16) = v65 + 1;
                *(void *)(v21 + 8 * v65 + 32) = v6;

                unint64_t v199 = v21;
                continue;
              }
              int64_t v158 = v151 + 5;
            }
          }
        }
      }
LABEL_179:
      unint64_t v149 = (v157 - 1) & v157;
      unint64_t v155 = __clz(__rbit64(v157)) + (v158 << 6);
      int64_t v151 = v158;
      goto LABEL_180;
    }
    break;
  }
LABEL_189:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t)objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytesNoCopy_length_encoding_freeWhenDone_, "NSDetailedErrors", 16, 1, 0);
  if (!result)
  {
LABEL_213:
    __break(1u);
    return result;
  }
  unint64_t v171 = (void *)result;
  id v172 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, result);

  v182[0] = v172;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v20 + 16) && (unint64_t v173 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v186), (v174 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v173, (uint64_t)&v197);
  }
  else
  {
    long long v197 = 0u;
    long long v198 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v186);
  if (*((void *)&v198 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Error]);
    if (swift_dynamicCast()) {
      specialized Array.append<A>(contentsOf:)((uint64_t)v182[0]);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v197, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return v199;
}

uint64_t CocoaError.url.getter@<X0>(void *a1@<X8>)
{
  id v2 = *v1;
  id v3 = *v1;
  id v64 = v2;
  id v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v4)
  {
LABEL_22:
    uint64_t v6 = MEMORY[0x1E4FBC868];
    if (*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v36 = MEMORY[0x1E4FBC868];
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v5)
  {
    uint64_t v6 = v5;
    goto LABEL_19;
  }
  id v7 = objc_msgSend(v4, sel_count);
  if (!v7)
  {

    goto LABEL_22;
  }
  uint64_t v8 = (uint64_t)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = *(void **)(v6 + 48);
  uint64_t v10 = *(void *)(v6 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, v8);
  if (result < 0 || v8 < result) {
    goto LABEL_69;
  }
  *(void *)(v6 + 16) = result;
  if (result)
  {
    uint64_t v12 = result - 1;
    uint64_t v13 = v6 + 64;
    do
    {
      while (1)
      {
        if ((*(void *)(v13 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12)) {
          goto LABEL_10;
        }
        uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v19 = *v18;
        uint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v24 = *(void *)(v6 + 16);
        BOOL v25 = __OFSUB__(v24, 1);
        uint64_t v26 = v24 - 1;
        if (v25)
        {
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          return result;
        }
        *(void *)(v6 + 16) = v26;
LABEL_10:
        if (--v12 < 0) {
          goto LABEL_18;
        }
      }
      *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(void *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v14 = *(void *)(v6 + 56);
        long long v15 = (_OWORD *)(v14 + 32 * v12);
        long long v16 = v15[1];
        id v17 = (_OWORD *)(v14 + 32 * v21);
        *id v17 = *v15;
        v17[1] = v16;
        goto LABEL_10;
      }
      if (v21 == v12) {
        goto LABEL_10;
      }
      uint64_t v27 = *(void *)(v6 + 48);
      id v28 = (uint64_t *)(v27 + 16 * v21);
      uint64_t v29 = (uint64_t *)(v27 + 16 * v12);
      uint64_t v30 = *v28;
      uint64_t v31 = v28[1];
      uint64_t v32 = v29[1];
      *id v28 = *v29;
      v28[1] = v32;
      *uint64_t v29 = v30;
      v29[1] = v31;
      uint64_t v33 = *(void *)(v6 + 56);
      id v34 = (_OWORD *)(v33 + 32 * v21);
      uint64_t v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v71);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v71, v35);
    }
    while ((v12 & 0x8000000000000000) == 0);
  }
LABEL_18:
  swift_release();
LABEL_19:

  if (!*(void *)(v6 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v36 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v65 = v6 + 64;
  uint64_t v37 = -1 << *(unsigned char *)(v6 + 32);
  if (-v37 < 64) {
    uint64_t v38 = ~(-1 << -(char)v37);
  }
  else {
    uint64_t v38 = -1;
  }
  unint64_t v39 = v38 & *(void *)(v6 + 64);
  int64_t v66 = (unint64_t)(63 - v37) >> 6;
  uint64_t v40 = v36 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v41 = 0;
  while (1)
  {
    if (v39)
    {
      unint64_t v44 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v45 = v44 | (v41 << 6);
      goto LABEL_48;
    }
    int64_t v46 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v46 >= v66) {
      goto LABEL_57;
    }
    unint64_t v47 = *(void *)(v65 + 8 * v46);
    int64_t v48 = v41 + 1;
    if (!v47)
    {
      int64_t v48 = v41 + 2;
      if (v41 + 2 >= v66) {
        goto LABEL_57;
      }
      unint64_t v47 = *(void *)(v65 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v41 + 3;
        if (v41 + 3 >= v66) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v65 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v41 + 4;
          if (v41 + 4 >= v66) {
            goto LABEL_57;
          }
          unint64_t v47 = *(void *)(v65 + 8 * v48);
          if (!v47) {
            break;
          }
        }
      }
    }
LABEL_47:
    unint64_t v39 = (v47 - 1) & v47;
    unint64_t v45 = __clz(__rbit64(v47)) + (v48 << 6);
    int64_t v41 = v48;
LABEL_48:
    uint64_t v50 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v45);
    uint64_t v52 = *v50;
    uint64_t v51 = v50[1];
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v45, (uint64_t)v78);
    *(void *)&long long v77 = v52;
    *((void *)&v77 + 1) = v51;
    _OWORD v75[2] = v77;
    v76[0] = v78[0];
    v76[1] = v78[1];
    *(void *)&v75[0] = v52;
    *((void *)&v75[0] + 1) = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v76, v70);
    long long v71 = v67;
    long long v72 = v68;
    uint64_t v73 = v69;
    outlined init with take of Any(v70, v74);
    long long v67 = v71;
    long long v68 = v72;
    uint64_t v69 = v73;
    outlined init with take of Any(v74, v75);
    outlined init with take of Any(v75, &v71);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v36 + 40));
    uint64_t v53 = -1 << *(unsigned char *)(v36 + 32);
    unint64_t v54 = result & ~v53;
    unint64_t v55 = v54 >> 6;
    if (((-1 << v54) & ~*(void *)(v40 + 8 * (v54 >> 6))) != 0)
    {
      unint64_t v42 = __clz(__rbit64((-1 << v54) & ~*(void *)(v40 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v56 = 0;
      unint64_t v57 = (unint64_t)(63 - v53) >> 6;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_66;
        }
        BOOL v58 = v55 == v57;
        if (v55 == v57) {
          unint64_t v55 = 0;
        }
        v56 |= v58;
        uint64_t v59 = *(void *)(v40 + 8 * v55);
      }
      while (v59 == -1);
      unint64_t v42 = __clz(__rbit64(~v59)) + (v55 << 6);
    }
    *(void *)(v40 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    uint64_t v43 = *(void *)(v36 + 48) + 40 * v42;
    *(_OWORD *)uint64_t v43 = v67;
    *(_OWORD *)(v43 + 16) = v68;
    *(void *)(v43 + 32) = v69;
    uint64_t result = (uint64_t)outlined init with take of Any(&v71, (_OWORD *)(*(void *)(v36 + 56) + 32 * v42));
    ++*(void *)(v36 + 16);
  }
  int64_t v49 = v41 + 5;
  if (v41 + 5 < v66)
  {
    unint64_t v47 = *(void *)(v65 + 8 * v49);
    if (!v47)
    {
      while (1)
      {
        int64_t v48 = v49 + 1;
        if (__OFADD__(v49, 1)) {
          goto LABEL_67;
        }
        if (v48 >= v66) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v65 + 8 * v48);
        ++v49;
        if (v47) {
          goto LABEL_47;
        }
      }
    }
    int64_t v48 = v41 + 5;
    goto LABEL_47;
  }
LABEL_57:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  unint64_t v60 = @"NSURL";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v36 + 16) && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v71), (v62 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v61, (uint64_t)&v79);
  }
  else
  {
    long long v79 = 0u;
    long long v80 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v71);
  if (*((void *)&v80 + 1))
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t result = outlined destroy of Any?((uint64_t)&v79, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t CustomNSError.errorCode.getter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186378](v2, a1, *(void *)(a2 + 8));
}

unint64_t lazy protocol witness table accessor for type CocoaError.Code and conformance CocoaError.Code()
{
  unint64_t result = lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code;
  if (!lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code;
  if (!lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code;
  if (!lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CocoaError(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  a1[2] = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  unint64_t result = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for CocoaError(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for CocoaError.Code(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CocoaError.Code and conformance CocoaError.Code();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of LocalizedError.helpAnchor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static CustomNSError.errorDomain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CustomNSError.errorCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CustomNSError.errorUserInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t outlined init with take of Morphology._CustomPronoun?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Morphology._CustomPronoun?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Morphology._CustomPronoun(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL StringProtocol.localizedStandardContains<A>(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  v14[0] = LocaleCache.current.getter();
  v14[1] = v10;
  StringProtocol.range<A>(of:options:range:locale:)(a1, 0x81uLL, 0, 0, 1, v14, a2, a3, a4, a5);
  BOOL v12 = (v11 & 1) == 0;
  swift_unknownObjectRelease();
  return v12;
}

id StringProtocol.localizedCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_localizedCompare_);
}

uint64_t StringProtocol._toRelativeNSRange(_:)()
{
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v1, result)) {
    __break(1u);
  }
  return result;
}

id String.init(utf16CodeUnits:count:)(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCharacters_length_, a1, a2);
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t String.init(cString:encoding:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2 != 4 && v3 != 1) {
    goto LABEL_10;
  }
  uint64_t v5 = MEMORY[0x185301F80](a1);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = v5;
  if (v3 != 4 && (_StringGuts._isContiguousASCII.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    id v8 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCString_encoding_, a1, v3);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v7 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

void *static String.availableStringEncodings.getter()
{
  uint64_t v0 = objc_msgSend(self, sel_availableStringEncodings);
  uint64_t v1 = *v0;
  if (!*v0) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  id v2 = v0;
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v4 = v3[2];
  uint64_t v5 = v2 + 1;
  do
  {
    unint64_t v6 = v3[3];
    if (v4 >= v6 >> 1) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v4 + 1, 1, v3);
    }
    v3[2] = v4 + 1;
    v3[v4 + 4] = v1;
    uint64_t v7 = *v5++;
    uint64_t v1 = v7;
    ++v4;
  }
  while (v7);
  return v3;
}

id static String.defaultCStringEncoding.getter@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(self, sel_defaultCStringEncoding);
  *a1 = result;
  return result;
}

id static String.localizedName(of:)(void *a1)
{
  id v1 = objc_msgSend(self, sel_localizedNameOfStringEncoding_, *a1);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id String.init(bytesNoCopy:length:encoding:freeWhenDone:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytesNoCopy_length_encoding_freeWhenDone_, a1, a2, *a3, a4 & 1);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

id String.init(utf16CodeUnitsNoCopy:count:freeWhenDone:)(uint64_t a1, uint64_t a2, char a3)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCharactersNoCopy_length_freeWhenDone_, a1, a2, a3 & 1);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

id String.init(contentsOfFile:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain();
  id result = @nonobjc NSString.init(contentsOfFile:usedEncoding:)(a1, a2, 0);
  if (!v2)
  {
    uint64_t v7 = result;
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return v8;
  }
  return result;
}

id String.init(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  id v3 = *(void **)(a1 + 16);
  v8[0] = *(void **)a1;
  v8[1] = v2;
  _OWORD v8[2] = v3;
  objc_allocWithZone((Class)NSString);
  swift_retain();
  id v4 = v8[0];
  swift_retain();
  id result = @nonobjc NSString.init(contentsOf:usedEncoding:)(v8, 0);
  if (!v1)
  {
    id v6 = result;
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return v7;
  }
  return result;
}

id StringProtocol.canBeConverted(to:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  StringProtocol._ephemeralString.getter();
  uint64_t v2 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v2, sel_canBeConvertedToEncoding_, v1);
  swift_unknownObjectRelease();
  return v3;
}

id StringProtocol.commonPrefix<A>(with:options:)(uint64_t a1, uint64_t a2)
{
  StringProtocol._ephemeralString.getter();
  id v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_commonPrefixWithString_options_, v4, a2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v6;
}

id StringProtocol.completePath(into:caseSensitive:matchesInto:filterTypes:)(id *a1, char a2, uint64_t *a3, void *a4)
{
  v28[1] = *(id *)MEMORY[0x1E4F143B8];
  if (a1)
  {
    v28[0] = 0;
    if (!a3)
    {
      StringProtocol._ephemeralString.getter();
      uint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      if (a4)
      {
        swift_bridgeObjectRetain();
        a4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
      }
      id v9 = objc_msgSend(v20, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, v28, a2 & 1, 0, a4);
      swift_unknownObjectRelease();

      id v19 = v28[0];
      id v21 = v28[0];
      id v11 = 0;
      if (!v19) {
        goto LABEL_24;
      }
      BOOL v12 = v21;
LABEL_23:
      *a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      a1[1] = v22;

      swift_bridgeObjectRelease();
      return v9;
    }
    id v27 = 0;
    StringProtocol._ephemeralString.getter();
    id v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (a4)
    {
      swift_bridgeObjectRetain();
      a4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }
    id v9 = objc_msgSend(v8, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, v28, a2 & 1, &v27, a4);
    swift_unknownObjectRelease();

    id v10 = v28[0];
    id v11 = v27;
    BOOL v12 = v10;
    id v13 = v10;
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
  if (a3)
  {
    v28[0] = 0;
    StringProtocol._ephemeralString.getter();
    uint64_t v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (a4)
    {
      swift_bridgeObjectRetain();
      a4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }
    id v9 = objc_msgSend(v14, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, 0, a2 & 1, v28, a4);
    swift_unknownObjectRelease();

    BOOL v12 = 0;
    id v11 = v28[0];
    id v15 = v28[0];
    if (!v11)
    {
LABEL_6:
      if (!v12)
      {
LABEL_24:

        return v9;
      }
      goto LABEL_17;
    }
LABEL_12:
    type metadata accessor for __SwiftDeferredNSArray();
    id v16 = v11;
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      objc_msgSend(v16, sel_copy);
      unint64_t v18 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v17 = specialized _arrayForceCast<A, B>(_:)(v18);
      swift_bridgeObjectRelease();
    }
    *a3 = v17;

    swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_24;
    }
LABEL_17:
    if (!a1)
    {

      return v9;
    }
    id v19 = v12;
    goto LABEL_23;
  }
  StringProtocol._ephemeralString.getter();
  uint64_t v24 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    swift_bridgeObjectRetain();
    BOOL v25 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  else
  {
    BOOL v25 = 0;
  }
  id v26 = objc_msgSend(v24, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, 0, a2 & 1, 0, v25);
  swift_unknownObjectRelease();

  return v26;
}

id StringProtocol.decomposedStringWithCanonicalMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter(a1, a2, (SEL *)&selRef_decomposedStringWithCanonicalMapping);
}

id StringProtocol.decomposedStringWithCompatibilityMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter(a1, a2, (SEL *)&selRef_decomposedStringWithCompatibilityMapping);
}

uint64_t StringProtocol.enumerateLines(invoking:)(uint64_t a1, uint64_t a2)
{
  StringProtocol._ephemeralString.getter();
  uint64_t v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v8[4] = partial apply for closure #1 in StringProtocol.enumerateLines(invoking:);
  v8[5] = v5;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  _OWORD v8[2] = thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v8[3] = &block_descriptor_19;
  id v6 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_enumerateLinesUsingBlock_, v6);
  _Block_release(v6);
  return swift_unknownObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(id, uint64_t, uint64_t))(a1 + 32);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v7 = v6;
  swift_retain();
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t StringProtocol.fastestEncoding.getter@<X0>(void *a1@<X8>)
{
  return StringProtocol.fastestEncoding.getter((SEL *)&selRef_fastestEncoding, a1);
}

id StringProtocol.getCString(_:maxLength:encoding:)(char **a1, int64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  StringProtocol._ephemeralString.getter();
  uint64_t v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v7 = *a1;
  int64_t v8 = *((void *)*a1 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0, v7);
  }
  if (v8 < a2) {
    a2 = v8;
  }
  *a1 = v7;
  swift_bridgeObjectRetain();
  id v9 = objc_msgSend(v6, sel_getCString_maxLength_encoding_, v7 + 32, a2, v5);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

id StringProtocol.lengthOfBytes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lengthOfBytes(using:)(a1, a2, a3, (SEL *)&selRef_lengthOfBytesUsingEncoding_);
}

id StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_localizedCaseInsensitiveCompare_);
}

id StringProtocol.maximumLengthOfBytes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lengthOfBytes(using:)(a1, a2, a3, (SEL *)&selRef_maximumLengthOfBytesUsingEncoding_);
}

id StringProtocol.lengthOfBytes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = *a1;
  StringProtocol._ephemeralString.getter();
  uint64_t v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v6, *a4, v5);
  swift_unknownObjectRelease();
  return v7;
}

id StringProtocol.precomposedStringWithCanonicalMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter(a1, a2, (SEL *)&selRef_precomposedStringWithCanonicalMapping);
}

id StringProtocol.precomposedStringWithCompatibilityMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter(a1, a2, (SEL *)&selRef_precomposedStringWithCompatibilityMapping);
}

id StringProtocol.decomposedStringWithCanonicalMapping.getter(uint64_t a1, uint64_t a2, SEL *a3)
{
  StringProtocol._ephemeralString.getter();
  uint64_t v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v5 = [v4 *a3];
  swift_unknownObjectRelease();
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v6;
}

uint64_t StringProtocol.propertyList()()
{
  StringProtocol._ephemeralString.getter();
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_propertyList);
  swift_unknownObjectRelease();
  _bridgeAnyObjectToAny(_:)();

  return swift_unknownObjectRelease();
}

unint64_t StringProtocol.propertyListFromStringsFileFormat()()
{
  StringProtocol._ephemeralString.getter();
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_propertyListFromStringsFileFormat);
  swift_unknownObjectRelease();
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v2 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1);

  if (*(void *)(v2 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    id v3 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v32 = v2 + 64;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v2 + 64);
  id v7 = (char *)v47 + 8;
  int64_t v8 = (_OWORD *)((char *)v43 + 8);
  int64_t v31 = (unint64_t)(63 - v5) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v33 = 0;
  if (v6) {
    goto LABEL_11;
  }
LABEL_12:
  int64_t v17 = v33 + 1;
  if (__OFADD__(v33, 1)) {
    goto LABEL_39;
  }
  if (v17 >= v31) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v17);
  int64_t v19 = v33 + 1;
  if (v18) {
    goto LABEL_29;
  }
  int64_t v19 = v33 + 2;
  if (v33 + 2 >= v31) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v19);
  if (v18) {
    goto LABEL_29;
  }
  int64_t v19 = v33 + 3;
  if (v33 + 3 >= v31) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v19);
  if (v18) {
    goto LABEL_29;
  }
  int64_t v19 = v33 + 4;
  if (v33 + 4 >= v31) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v19);
  if (v18) {
    goto LABEL_29;
  }
  int64_t v19 = v33 + 5;
  if (v33 + 5 >= v31)
  {
LABEL_35:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v19);
  if (!v18)
  {
    int64_t v20 = v33 + 6;
    if (v33 + 6 < v31)
    {
      unint64_t v18 = *(void *)(v32 + 8 * v20);
      if (v18)
      {
        int64_t v19 = v33 + 6;
        goto LABEL_29;
      }
      while (1)
      {
        int64_t v19 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_40;
        }
        if (v19 >= v31) {
          break;
        }
        unint64_t v18 = *(void *)(v32 + 8 * v19);
        ++v20;
        if (v18) {
          goto LABEL_29;
        }
      }
    }
    goto LABEL_35;
  }
LABEL_29:
  int64_t v33 = v19;
  uint64_t v34 = (v18 - 1) & v18;
  for (unint64_t i = __clz(__rbit64(v18)) + (v19 << 6); ; unint64_t i = __clz(__rbit64(v6)) | (v33 << 6))
  {
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * i, (uint64_t)&v45);
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * i, (uint64_t)v7);
    v43[0] = v47[0];
    v43[1] = v47[1];
    uint64_t v44 = v48;
    long long v41 = v45;
    long long v42 = v46;
    v35[2] = v45;
    long long v35[3] = v46;
    uint64_t v36 = *(void *)&v47[0];
    swift_dynamicCast();
    outlined init with take of Any(v8, v35);
    swift_dynamicCast();
    uint64_t v21 = v39;
    uint64_t v22 = v40;
    uint64_t v24 = v37;
    uint64_t v23 = v38;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
    if (v25)
    {
      id v10 = v8;
      uint64_t v11 = 16 * result;
      uint64_t v12 = v2;
      id v13 = v7;
      uint64_t v14 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v14 = v21;
      v14[1] = v22;
      id v7 = v13;
      uint64_t v2 = v12;
      id v15 = (void *)(v3[7] + v11);
      int64_t v8 = v10;
      unint64_t result = swift_bridgeObjectRelease();
      *id v15 = v24;
      v15[1] = v23;
      unint64_t v6 = v34;
      if (!v34) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v26 = (uint64_t *)(v3[6] + 16 * result);
    *id v26 = v21;
    v26[1] = v22;
    id v27 = (void *)(v3[7] + 16 * result);
    *id v27 = v24;
    v27[1] = v23;
    uint64_t v28 = v3[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_38;
    }
    v3[2] = v30;
    unint64_t v6 = v34;
    if (!v34) {
      goto LABEL_12;
    }
LABEL_11:
    uint64_t v34 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t StringProtocol.smallestEncoding.getter@<X0>(void *a1@<X8>)
{
  return StringProtocol.fastestEncoding.getter((SEL *)&selRef_smallestEncoding, a1);
}

uint64_t StringProtocol.fastestEncoding.getter@<X0>(SEL *a1@<X2>, void *a2@<X8>)
{
  StringProtocol._ephemeralString.getter();
  uint64_t v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v5 = [v4 *a1];
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v5;
  return result;
}

id StringProtocol.appendingFormat<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  StringProtocol._ephemeralString.getter();
  id v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v4 = StringProtocol._ephemeralString.getter();
  specialized withVaList<A>(_:_:)(a2, v4, v5, 0, 0);
  swift_bridgeObjectRelease();
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v3, sel_stringByAppendingString_, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

uint64_t StringProtocol.appending<A>(_:)(uint64_t a1, uint64_t a2)
{
  double v4 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v4);
  v9[0] = String.init<A>(_:)();
  v9[1] = v7;
  String.append<A>(contentsOf:)();
  return v9[0];
}

id StringProtocol.folding(options:locale:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  StringProtocol._ephemeralString.getter();
  uint64_t v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 488))(ObjectType, v3);
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v8 = objc_msgSend(v5, sel_stringByFoldingWithOptions_locale_, a1, v7);
  swift_unknownObjectRelease();

  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v9;
}

id StringProtocol.padding<A>(toLength:withPad:startingAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  StringProtocol._ephemeralString.getter();
  uint64_t v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v5, sel_stringByPaddingToLength_withString_startingAtIndex_, a1, v6, a3);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

uint64_t StringProtocol.replacingCharacters<A, B>(in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v63 = a2;
  uint64_t v61 = a8;
  uint64_t v62 = a7;
  unint64_t v60 = a5;
  uint64_t v11 = *(void *)(*(void *)(a6 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v52 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v50 = (char *)&v48 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v58 = v14;
  MEMORY[0x1F4188790](v14);
  unint64_t v55 = (char *)&v48 - v15;
  uint64_t v56 = a6;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v53 = v16;
  uint64_t v54 = v17;
  MEMORY[0x1F4188790](v16);
  int64_t v19 = (char *)&v48 - v18;
  uint64_t v20 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v25);
  id v27 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  uint64_t v28 = v64;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  unint64_t v59 = v68;
  unint64_t v60 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v28, a3);
  uint64_t v61 = v11;
  uint64_t v29 = v63;
  Substring.init<A>(_:)();
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  if ((v31 & 0x1000000000000000) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v29, a4);
    Substring.init<A>(_:)();
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    if ((v33 & 0x1000000000000000) == 0)
    {
      dispatch thunk of StringProtocol.utf8.getter();
      uint64_t v34 = v53;
      uint64_t v48 = a4;
      dispatch thunk of Collection.startIndex.getter();
      unint64_t v65 = v60;
      unint64_t v66 = v67;
      swift_getAssociatedConformanceWitness();
      uint64_t v49 = dispatch thunk of Collection.distance(from:to:)();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v54 + 8);
      v35(v19, v34);
      dispatch thunk of StringProtocol.utf8.getter();
      unint64_t v67 = v59;
      dispatch thunk of Collection.endIndex.getter();
      unint64_t v65 = v66;
      uint64_t v36 = dispatch thunk of Collection.distance(from:to:)();
      v35(v19, v34);
      uint64_t v37 = v55;
      dispatch thunk of StringProtocol.utf8.getter();
      uint64_t v38 = v58;
      swift_getAssociatedConformanceWitness();
      uint64_t v39 = dispatch thunk of Collection.count.getter();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v37, v38);
      uint64_t v41 = v49 + v39;
      if (__OFADD__(v49, v39))
      {
        __break(1u);
      }
      else
      {
        uint64_t result = v41 + v36;
        if (!__OFADD__(v41, v36))
        {
          MEMORY[0x185301FA0](result);
          goto LABEL_6;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
LABEL_6:
  unint64_t v42 = v60;
  unint64_t v43 = v60 >> 14;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v43 < v67 >> 14)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v68 = v42;
  uint64_t v44 = v50;
  dispatch thunk of Collection.subscript.getter();
  uint64_t v45 = v52;
  swift_getAssociatedConformanceWitness();
  String.append<A>(contentsOf:)();
  long long v46 = *(void (**)(char *, uint64_t))(v51 + 8);
  v46(v44, v45);
  String.append<A>(contentsOf:)();
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  unint64_t v47 = v67;
  if (v67 >> 14 >= v59 >> 14)
  {
    unint64_t v67 = v59;
    unint64_t v68 = v47;
    dispatch thunk of Collection.subscript.getter();
    String.append<A>(contentsOf:)();
    v46(v44, v45);
    return v69;
  }
LABEL_12:
  __break(1u);
  return result;
}

id StringProtocol.replacingPercentEscapes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.replacingPercentEscapes(using:)(a1, a2, a3, (SEL *)&selRef_stringByReplacingPercentEscapesUsingEncoding_);
}

Swift::String_optional __swiftcall StringProtocol.applyingTransform(_:reverse:)(NSStringTransform _, Swift::Bool reverse)
{
  StringProtocol._ephemeralString.getter();
  uint64_t v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v4, sel_stringByApplyingTransform_reverse_, _, reverse);
  swift_unknownObjectRelease();
  if (v5)
  {
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    id v8 = v7;
  }
  else
  {
    id v6 = 0;
    id v8 = 0;
  }
  uint64_t v9 = (uint64_t)v6;
  id v10 = v8;
  result.value._object = v10;
  result.value._countAndFlagsBits = v9;
  return result;
}

uint64_t StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v32 = a8;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v30 = a2;
  uint64_t v15 = *(void *)(a7 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v31 = v17;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  StringProtocol._ephemeralString.getter();
  id v35 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v19, result))
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v28 = a12;
  uint64_t v29 = result;
  uint64_t v20 = v32;
  uint64_t v30 = v19 - result;
  StringProtocol._ephemeralString.getter();
  uint64_t v21 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v13, a7);
  unint64_t v22 = (*(unsigned __int8 *)(v15 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = a7;
  *((void *)v23 + 3) = v20;
  *((void *)v23 + 4) = v31;
  *((void *)v23 + 5) = a10;
  uint64_t v24 = v28;
  *((void *)v23 + 6) = a11;
  *((void *)v23 + 7) = v24;
  uint64_t v25 = v34;
  *((void *)v23 + 8) = v33;
  *((void *)v23 + 9) = v25;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v23[v22], (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a7);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:);
  *(void *)(v26 + 24) = v23;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed NSLinguisticTag?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSLinguisticTag?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_9;
  id v27 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v35, sel_enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_, v29, v30, v21, v36, v37, v27);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  _Block_release(v27);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v21) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void *closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6, void (*a7)(void *, uint64_t, void *, uint64_t, uint64_t, uint64_t, char *))
{
  char v22 = 0;
  if (!result) {
    goto LABEL_13;
  }
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v14 = v13;
  if (__OFADD__(a2, a3))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v15 = result;
  uint64_t v21 = a7;
  uint64_t result = (void *)StringProtocol._toUTF16Indices(_:)();
  if (a4 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v17 = v16;
  if (__OFADD__(a4, a5))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v18 = result;
  uint64_t v19 = StringProtocol._toUTF16Indices(_:)();
  v21(v15, v14, v18, v17, v19, v20, &v22);
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (v22 == 1) {
    *a6 = v22;
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSLinguisticTag?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  id v14 = a2;
  v13(a2, a3, a4, a5, a6, a7);
}

id StringProtocol.getBytes<A>(_:maxLength:usedLength:encoding:options:range:remaining:)(char **a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = *a4;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  StringProtocol._ephemeralString.getter();
  uint64_t v18 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v9 = *a1;
  if (*((void *)*a1 + 2) < a2) {
    a2 = *((void *)*a1 + 2);
  }
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v10 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v12 = v11 - v10;
  if (__OFSUB__(v11, v10))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  uint64_t v13 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2), 0, v9);
  }
  *a1 = v9;
  swift_bridgeObjectRetain();
  id v14 = objc_msgSend(v18, sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_, v9 + 32, a2, a3, v19, a5, v13, v12, &v22);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (v22 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_10;
  }
  if (__OFADD__(v22, v23)) {
    goto LABEL_11;
  }
  *a7 = StringProtocol._toUTF16Indices(_:)();
  a7[1] = v15;
  return v14;
}

uint64_t StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))StringProtocol._lineBounds<A>(around:));
}

uint64_t StringProtocol.getParagraphStart<A>(_:end:contentsEnd:for:)(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))StringProtocol._paragraphBounds<A>(around:));
}

uint64_t StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a9(a4, a5, a6, a7, a8);
  *a1 = result;
  *a2 = v13;
  *a3 = v14;
  return result;
}

uint64_t StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  v43[3] = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    uint64_t v37 = a5;
    uint64_t v39 = a10;
    id v40 = a7;
    v43[0] = 0;
    StringProtocol._ephemeralString.getter();
    uint64_t v15 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v38 = a8;
    dispatch thunk of RangeExpression.relative<A>(to:)();
    uint64_t v16 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v18 = v17 - v16;
    if (!__OFSUB__(v17, v16))
    {
      uint64_t v19 = v16;
      StringProtocol._ephemeralString.getter();
      uint64_t v20 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v21 = objc_msgSend(v15, sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_, v19, v18, v20, v41, v42, v43);
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      if (v21)
      {
        uint64_t v23 = (void *)v43[0];
        if (v43[0])
        {
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v24 = swift_dynamicCastClass();
          unint64_t v25 = v24;
          if (!v24)
          {
            swift_unknownObjectRelease();
            objc_msgSend(v23, sel_copy);
            unint64_t v25 = _bridgeCocoaArray<A>(_:)();
            uint64_t v24 = swift_unknownObjectRelease();
          }
          MEMORY[0x1F4188790](v24);
          v36[2] = a6;
          uint64_t v36[3] = v40;
          v36[4] = v38;
          v36[5] = a9;
          v36[6] = v39;
          v36[7] = a11;
          v36[8] = v12;
          id v26 = v23;
          uint64_t v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyXlG_SnySS5IndexVGs5NeverOTg5((void (*)(long long *__return_ptr, uint64_t *))partial apply for closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:), (uint64_t)v36, v25);
          swift_bridgeObjectRelease();
          uint64_t *v37 = v27;

          swift_bridgeObjectRelease();
        }
        goto LABEL_12;
      }
      __break(1u);
LABEL_21:
      __break(1u);
      return result;
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  StringProtocol._ephemeralString.getter();
  id v40 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v28 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v30 = v29 - v28;
  if (__OFSUB__(v29, v28)) {
    goto LABEL_19;
  }
  uint64_t v31 = v28;
  StringProtocol._ephemeralString.getter();
  uint64_t v32 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(v40, sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_, v31, v30, v32, v41, v42, 0);
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  if (!v21) {
    goto LABEL_21;
  }
LABEL_12:
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v33 = swift_dynamicCastClass();
  if (v33)
  {
    uint64_t v34 = v33;
  }
  else
  {
    swift_unknownObjectRelease();
    objc_msgSend(v21, sel_copy);
    unint64_t v35 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v34 = specialized _arrayForceCast<A, B>(_:)(v35);

    swift_bridgeObjectRelease();
  }
  return v34;
}

uint64_t closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  uint64_t result = (uint64_t)objc_msgSend(*a1, sel_respondsToSelector_, sel_rangeValue);
  if (result)
  {
    uint64_t result = (uint64_t)objc_msgSend(v3, sel_rangeValue);
    if (result == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(1u);
    }
    else if (!__OFADD__(result, v5))
    {
      uint64_t result = StringProtocol._toUTF16Indices(_:)();
      *a2 = result;
      a2[1] = v6;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t StringProtocol.rangeOfComposedCharacterSequence(at:)()
{
  StringProtocol._ephemeralString.getter();
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_rangeOfComposedCharacterSequenceAtIndex_, StringProtocol._toUTF16Offset(_:)());
  uint64_t v3 = v2;
  uint64_t result = swift_unknownObjectRelease();
  if (v1 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (__OFADD__(v1, v3))
  {
LABEL_7:
    __break(1u);
    return result;
  }

  return StringProtocol._toUTF16Indices(_:)();
}

uint64_t StringProtocol.rangeOfComposedCharacterSequences<A>(for:)()
{
  StringProtocol._ephemeralString.getter();
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v2, result))
  {
    __break(1u);
    goto LABEL_6;
  }
  id v3 = objc_msgSend(v0, sel_rangeOfComposedCharacterSequencesForRange_, result, v2 - result);
  uint64_t v5 = v4;
  uint64_t result = swift_unknownObjectRelease();
  if (v3 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (!__OFADD__(v3, v5)) {
    return StringProtocol._toUTF16Indices(_:)();
  }
LABEL_7:
  __break(1u);
  return result;
}

id StringProtocol.addingPercentEscapes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.replacingPercentEscapes(using:)(a1, a2, a3, (SEL *)&selRef_stringByAddingPercentEscapesUsingEncoding_);
}

id StringProtocol.replacingPercentEscapes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = *a1;
  StringProtocol._ephemeralString.getter();
  uint64_t v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v6, *a4, v5);
  swift_unknownObjectRelease();
  if (!v7) {
    return 0;
  }
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

id StringProtocol.substring(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.substring(from:)(a1, a2, a3, (SEL *)&selRef_substringFromIndex_);
}

id StringProtocol.substring(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.substring(from:)(a1, a2, a3, (SEL *)&selRef_substringToIndex_);
}

id StringProtocol.substring(from:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  StringProtocol._ephemeralString.getter();
  uint64_t v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v5, *a4, StringProtocol._toUTF16Offset(_:)());
  swift_unknownObjectRelease();
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

uint64_t StringProtocol.substring(with:)()
{
  StringProtocol._ephemeralString.getter();
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v2, result))
  {
    __break(1u);
  }
  else
  {
    id v3 = objc_msgSend(v0, sel_substringWithRange_, result, v2 - result);
    swift_unknownObjectRelease();
    id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

    return (uint64_t)v4;
  }
  return result;
}

id @nonobjc NSString.init(contentsOfFile:usedEncoding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithContentsOfFile_usedEncoding_error_, v5, a3, v10);
  swift_unknownObjectRelease();
  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    if (v10[0])
    {
      v10[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v8 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v6;
}

id @nonobjc NSString.init(contentsOf:usedEncoding:)(void **a1, uint64_t a2)
{
  id v3 = v2;
  v9[1] = *(id *)MEMORY[0x1E4F143B8];
  id v4 = *a1;
  v9[0] = 0;
  id v5 = objc_msgSend(v3, sel_initWithContentsOfURL_usedEncoding_error_, v4, a2, v9);
  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    if (v9[0])
    {
      v9[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v7 = (id)_nilObjCError;
    }
    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v5;
}

uint64_t sub_181E83F7C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in StringProtocol.enumerateLines(invoking:)(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v3 + 16);
  char v7 = 0;
  uint64_t result = v5(a1, a2, &v7);
  if (v7 == 1) {
    *a3 = v7;
  }
  return result;
}

uint64_t sub_181E84000()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 80) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x1F4186498](v0, v4, v5);
}

void *partial apply for closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  return closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *, uint64_t, void *, uint64_t, uint64_t, uint64_t, char *))(v6 + 64));
}

uint64_t sub_181E84100()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSLinguisticTag?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181E84138()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)(a1, a2);
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24)
      {
        int64_t v9 = v23 + 2;
        if (v23 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v24 = *(void *)(v6 + 8 * v9);
        if (!v24) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v13) {
    goto LABEL_28;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, XMLPlistMap.Value>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    outlined copy of XMLPlistMap.Value(v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_181E845E4()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_181E84628()
{
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 40);
  if ((~v1 & 0xF000000000000007) != 0) {
    outlined consume of BPlistMap.Value(v1);
  }
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t _TimeZoneProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

NSTimeZone __swiftcall _TimeZoneProtocol.bridgeToNSTimeZone()()
{
  uint64_t v2 = v0;
  uint64_t v3 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  uint64_t v4 = (char *)objc_allocWithZone(v3);
  uint64_t v5 = &v4[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(void *)uint64_t v5 = v1;
  *((void *)v5 + 1) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + 16) = xmmword_18218FDB0;
  *(void *)&v4[OBJC_IVAR____NSSwiftTimeZone_lock] = v6;
  v8.receiver = v4;
  v8.super_class = v3;
  swift_unknownObjectRetain();
  return (NSTimeZone)objc_msgSendSuper2(&v8, sel_init);
}

uint64_t _TimeZoneProtocol.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.init(secondsFromGMT:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.init(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.secondsFromGMT(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.abbreviation(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.isDaylightSavingTime(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.daylightSavingTimeOffset(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.localizedName(for:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.isAutoupdating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.bridgeToNSTimeZone()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

Swift::Int_optional __swiftcall NSIndexSetIterator.next()()
{
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    id v1 = objc_msgSend(*(id *)v0, sel_firstIndex);
    *(void *)(v0 + 16) = v1;
    *(unsigned char *)(v0 + 24) = 0;
    *(unsigned char *)(v0 + 8) = 0;
  }
  else
  {
    id v1 = *(id *)(v0 + 16);
    if (*(unsigned char *)(v0 + 24))
    {
      Swift::Bool v2 = 1;
      goto LABEL_9;
    }
    id v1 = objc_msgSend(*(id *)v0, sel_indexGreaterThanIndex_, v1);
    *(void *)(v0 + 16) = v1;
    *(unsigned char *)(v0 + 24) = 0;
  }
  if (v1 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v1 = 0;
    *(void *)(v0 + 16) = 0;
    Swift::Bool v2 = 1;
    *(unsigned char *)(v0 + 24) = 1;
  }
  else
  {
    Swift::Bool v2 = 0;
  }
LABEL_9:
  Swift::Int v3 = (Swift::Int)v1;
  result.value = v3;
  result.is_nil = v2;
  return result;
}

Swift::Int protocol witness for IteratorProtocol.next() in conformance NSIndexSetIterator@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3 = NSIndexSetIterator.next()();
  *(void *)a1 = v3.value;
  *(unsigned char *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

id NSIndexSet.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return v1;
}

unint64_t lazy protocol witness table accessor for type NSIndexSetIterator and conformance NSIndexSetIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSIndexSetIterator and conformance NSIndexSetIterator;
  if (!lazy protocol witness table cache variable for type NSIndexSetIterator and conformance NSIndexSetIterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSIndexSetIterator and conformance NSIndexSetIterator);
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance NSIndexSet(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSIndexSet()
{
  id v1 = *v0;
  specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  uint64_t v3 = v2;

  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NSIndexSet(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t initializeWithCopy for NSIndexSetIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for NSIndexSetIterator(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  return a1;
}

uint64_t assignWithTake for NSIndexSetIterator(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSIndexSetIterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSIndexSetIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NSIndexSetIterator()
{
  return &type metadata for NSIndexSetIterator;
}

void *_PlistDecoder.init(referencing:options:codingPathNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v5 = *(void *)(*v3 + 88);
  uint64_t v6 = *(void *)(*v3 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v19 = v6;
  uint64_t v20 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v17 - v9;
  _swift_isClassOrObjCExistentialType();
  v3[2] = MEMORY[0x1E4FBC860];
  v3[3] = a1;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  swift_unknownObjectRetain();
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v13 = v21;
  v11(v12, AssociatedConformanceWitness);
  if (v13)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    type metadata accessor for _PlistDecoder();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v14 = type metadata accessor for _PlistDecodingStorage();
    specialized _PlistDecodingStorage.push(container:)((uint64_t)v10, v14);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    uint64_t v15 = v23;
    v3[4] = v22;
    v3[5] = v15;
  }
  return v3;
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:configuration:) in conformance _PlistDecoder<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return _PlistDecoder.decode<A>(_:configuration:)(a1, a2, a3, a4, a5);
}

uint64_t _PlistDecoder.decode<A>(_:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v27 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v24 = (char *)&v22 - v16;
  uint64_t v17 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = MEMORY[0x185302620](v17, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v18)
  {
    uint64_t v30 = v17;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v18 = v23;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, AssociatedTypeWitness) != 1)
    {
      uint64_t v19 = (uint64_t)v24;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v24, v10, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v18);
      swift_bridgeObjectRelease();
      unint64_t v20 = *(void *)(v6 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:configuration:for:_:)(v19, v28, v29, v20, 0, 0, 0, 255, v27, v26, v25);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v19, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v18);
  __break(1u);
  return result;
}

uint64_t specialized _PlistDecoder.unwrapDate<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = v6;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v6;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  unsigned __int8 v29 = a6;
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12))
  {
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    *uint64_t v14 = &type metadata for Date;
    char v16 = v29;
    if (v29 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v18 = v27;
      uint64_t v17 = v28;
      uint64_t v19 = v26;
      outlined copy of _CodingKey(v26, v27, v28, v29);
      outlined copy of _CodingKey(v26, v27, v28, v29);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v21 = swift_allocObject();
      *(void *)(inited + 32) = v21;
      *(void *)(v21 + 16) = v19;
      *(void *)(v21 + 24) = v18;
      *(void *)(v21 + 32) = v17;
      *(unsigned char *)(v21 + 40) = v16;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBA80], v13);
    return swift_willThrow();
  }
  else
  {
    uint64_t v22 = v7[3];
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 56);
    unint64_t v24 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v23(a1, v22, a2, &v26, &type metadata for _CodingKey, v24, v11, v12);
    return swift_unknownObjectRelease();
  }
}

void *specialized _PlistDecoder.unwrapData<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = v6;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v6;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  unsigned __int8 v32 = a6;
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12))
  {
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    *uint64_t v14 = &type metadata for Data;
    char v16 = v32;
    if (v32 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v18 = v30;
      uint64_t v17 = v31;
      uint64_t v19 = v29;
      outlined copy of _CodingKey(v29, v30, v31, v32);
      outlined copy of _CodingKey(v29, v30, v31, v32);
      uint64_t v20 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v22 = swift_allocObject();
      *(void *)(inited + 32) = v22;
      *(void *)(v22 + 16) = v19;
      *(void *)(v22 + 24) = v18;
      *(void *)(v22 + 32) = v17;
      *(unsigned char *)(v22 + 40) = v16;
      v28[0] = v20;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v28[0] = 0;
    v28[1] = 0xE000000000000000;
    uint64_t v26 = v28;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBA80], v13);
    swift_willThrow();
  }
  else
  {
    uint64_t v23 = v7[3];
    unint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 64);
    unint64_t v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    uint64_t v26 = (void *)v24(a1, v23, a2, &v29, &type metadata for _CodingKey, v25, v11, v12);
    swift_unknownObjectRelease();
  }
  return v26;
}

uint64_t specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:configuration:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v58 = a2;
  uint64_t v12 = v11;
  uint64_t v64 = a7;
  uint64_t v61 = a5;
  uint64_t v62 = a6;
  uint64_t v53 = a1;
  uint64_t v54 = a3;
  uint64_t v57 = a9;
  LODWORD(v60) = ~a8;
  uint64_t v15 = *(void *)(*(void *)v11 + 88);
  uint64_t v16 = *(void *)(*(void *)v11 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v51 = v16;
  uint64_t v52 = v15;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v49 = (char *)&v47 - v18;
  uint64_t v55 = a10;
  uint64_t v56 = a11;
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v47 - v21;
  if (v60)
  {
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 40) = &type metadata for _CodingKey;
    *(void *)(v23 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v24 = swift_allocObject();
    *(void *)(v23 + 16) = v24;
    uint64_t v26 = v61;
    uint64_t v25 = v62;
    *(void *)(v24 + 16) = v61;
    *(void *)(v24 + 24) = v25;
    uint64_t v27 = v64;
    *(void *)(v24 + 32) = v64;
    *(unsigned char *)(v24 + 40) = a8;
    *(void *)(v23 + 56) = a4;
    char v28 = a8;
    uint64_t result = v26;
    if (a4 >> 62)
    {
      if (a4 >> 62 != 1)
      {
        uint64_t v37 = 1;
LABEL_8:
        *(void *)(v23 + 64) = v37;
        uint64_t v35 = v23 & 0x3FFFFFFFFFFFFFFFLL;
        a4 = v23;
        goto LABEL_9;
      }
      uint64_t v48 = v19;
      uint64_t v60 = AssociatedTypeWitness;
      uint64_t v30 = v26;
      uint64_t v31 = v25;
      uint64_t v32 = v27;
      char v33 = v28;
      uint64_t v34 = (uint64_t *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v48 = v19;
      uint64_t v60 = AssociatedTypeWitness;
      uint64_t v30 = v26;
      uint64_t v31 = v25;
      uint64_t v32 = v27;
      char v33 = v28;
      uint64_t v34 = (uint64_t *)(a4 + 64);
    }
    uint64_t v36 = *v34;
    swift_retain();
    char v28 = v33;
    uint64_t v27 = v32;
    uint64_t v25 = v31;
    uint64_t result = v30;
    uint64_t AssociatedTypeWitness = v60;
    uint64_t v19 = v48;
    uint64_t v37 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    goto LABEL_8;
  }
  uint64_t v35 = a4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  char v28 = a8;
  uint64_t v27 = v64;
  uint64_t result = v61;
  uint64_t v25 = v62;
LABEL_9:
  uint64_t v38 = *(void *)(v12 + 40);
  *(void *)(v12 + 40) = a4;
  outlined copy of _CodingKey?(result, v25, v27, v28);
  uint64_t v39 = type metadata accessor for _PlistDecodingStorage();
  uint64_t v64 = v35;
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v53, v39);
  v63[3] = type metadata accessor for _PlistDecoder();
  v63[4] = swift_getWitnessTable();
  v63[0] = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v54, v19);
  uint64_t v40 = v56;
  uint64_t v41 = *(void (**)(void *, char *, uint64_t, uint64_t))(v56 + 16);
  swift_retain();
  uint64_t v42 = v59;
  v41(v63, v22, v55, v40);
  if (v42)
  {
    *(void *)(v12 + 40) = v38;
    swift_retain();
    swift_release();
    uint64_t v43 = swift_bridgeObjectRetain();
    uint64_t v12 = MEMORY[0x185302620](v43, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_13:
      type metadata accessor for Array();
      swift_getWitnessTable();
      swift_getWitnessTable();
      long long v46 = v49;
      RangeReplaceableCollection<>.removeLast()();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v46, AssociatedTypeWitness);
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  *(void *)(v12 + 40) = v38;
  swift_retain();
  swift_release();
  uint64_t v44 = swift_bridgeObjectRetain();
  uint64_t v45 = MEMORY[0x185302620](v44, AssociatedTypeWitness);
  uint64_t result = swift_bridgeObjectRelease();
  if (v45) {
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  void (*v23)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;

  uint64_t v7 = v6;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v6;
  char v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12))
  {
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    *uint64_t v14 = MEMORY[0x1E4FBB3D0];
    char v16 = v31;
    if (v31 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v18 = v29;
      uint64_t v17 = v30;
      uint64_t v19 = v28;
      outlined copy of _CodingKey(v28, v29, v30, v31);
      outlined copy of _CodingKey(v28, v29, v30, v31);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v21 = swift_allocObject();
      *(void *)(inited + 32) = v21;
      *(void *)(v21 + 16) = v19;
      *(void *)(v21 + 24) = v18;
      *(void *)(v21 + 32) = v17;
      *(unsigned char *)(v21 + 40) = v16;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBA80], v13);
    return swift_willThrow();
  }
  else
  {
    uint64_t v22 = v7[3];
    uint64_t v23 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v12 + 80);
    uint64_t v24 = lazy protocol witness table accessor for type Double and conformance Double();
    uint64_t v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v23(&v27, a1, v22, a2, &v28, MEMORY[0x1E4FBB3D0], &type metadata for _CodingKey, v24, v25, v11, v12);
    return swift_unknownObjectRelease();
  }
}

{
  void *v6;
  void *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;

  uint64_t v7 = v6;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v6;
  char v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12))
  {
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    *uint64_t v14 = MEMORY[0x1E4FBB470];
    char v16 = v31;
    if (v31 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v18 = v29;
      uint64_t v17 = v30;
      uint64_t v19 = v28;
      outlined copy of _CodingKey(v28, v29, v30, v31);
      outlined copy of _CodingKey(v28, v29, v30, v31);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v21 = swift_allocObject();
      *(void *)(inited + 32) = v21;
      *(void *)(v21 + 16) = v19;
      *(void *)(v21 + 24) = v18;
      *(void *)(v21 + 32) = v17;
      *(unsigned char *)(v21 + 40) = v16;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBA80], v13);
    return swift_willThrow();
  }
  else
  {
    uint64_t v22 = v7[3];
    uint64_t v23 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v12 + 80);
    uint64_t v24 = lazy protocol witness table accessor for type Float and conformance Float();
    uint64_t v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v23(&v27, a1, v22, a2, &v28, MEMORY[0x1E4FBB470], &type metadata for _CodingKey, v24, v25, v11, v12);
    return swift_unknownObjectRelease();
  }
}

float specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  void (*v26)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD v46[21];

  uint64_t v6 = v5;
  uint64_t v40 = a5;
  uint64_t v42 = a3;
  *(void *)&v46[19] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  uint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    uint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v21;
    *(void *)uint64_t v21 = MEMORY[0x1E4FBB470];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      uint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      uint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      uint64_t v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 80);
    uint64_t v27 = lazy protocol witness table accessor for type Float and conformance Float();
    swift_unknownObjectRetain();
    char v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBB470], a4, v28, v40, v19, v20);
    swift_unknownObjectRelease();
    if (!v29) {
      return *(float *)v46;
    }
  }
  return result;
}

float _PlistKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v54 = a4;
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v14 - 8);
  uint64_t v45 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v43 = (char *)&v41 - v15;
  swift_getAssociatedTypeWitness();
  uint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v18 - 8);
  uint64_t v47 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v41 - v19;
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v48 = (char *)&v41 - v23;
  uint64_t v24 = v58;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v25 - 8);
  uint64_t v42 = v25;
  MEMORY[0x1F4188790](v25);
  uint64_t v49 = (char *)&v41 - v26;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v27 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v24 + 16) && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v30 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v20, *(void *)(v24 + 56) + *(void *)(v21 + 72) * v29, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v20, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v31, v51, &demangling cache variable for type metadata for Float.Type, &demangling cache variable for type metadata for Float.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v32 = v48;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v48, v20, AssociatedTypeWitness);
    char v33 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v49;
    uint64_t v35 = v50;
    v33(v32, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v32, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v55;
      uint64_t v38 = *(void *)(v55 - 8);
      uint64_t v39 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      float v8 = specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v36, v54, v39, v37, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v36, v42);
    }
  }
  return v8;
}

uint64_t _PlistKeyedDecodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v78 = a2;
  uint64_t v83 = a3;
  uint64_t v84 = a6;
  long long v79 = (uint64_t *)a4;
  uint64_t v85 = a1;
  uint64_t v67 = a7;
  uint64_t v73 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v65 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v71 = *(void *)(v9 - 8);
  uint64_t v72 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v69 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v70 = (char *)&v64 - v12;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v75 = *(void *)(v15 - 8);
  uint64_t v76 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v64 - v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v19);
  char v82 = (char *)&v64 - v20;
  uint64_t v68 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  unint64_t v66 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  long long v80 = (char *)&v64 - v24;
  uint64_t v74 = type metadata accessor for _PlistUnkeyedDecodingContainer();
  uint64_t v81 = a5;
  uint64_t v25 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v27 = v83;
  if (*(void *)(v83 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v17, *(void *)(v27 + 56) + *(void *)(v18 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 1, 1, AssociatedTypeWitness);
  }
  char v30 = v82;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v17, v76);
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v31;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v85, (unint64_t)v79, v81, MetatypeMetadata, v32, v84);
    return swift_willThrow();
  }
  uint64_t v83 = v21;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v30, v17, AssociatedTypeWitness);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
  swift_unknownObjectRetain();
  uint64_t v36 = swift_checkMetadataState();
  uint64_t v37 = v77;
  v35(v30, v36, AssociatedConformanceWitness);
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v30, AssociatedTypeWitness);
    return swift_unknownObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v30, AssociatedTypeWitness);
  swift_unknownObjectRelease();
  uint64_t v38 = v73;
  uint64_t v39 = v70;
  uint64_t v40 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v70, v85, v81);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v40);
  uint64_t v42 = v71;
  uint64_t v41 = v72;
  uint64_t v43 = v69;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v69, v39, v72);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v43, 1, v40) == 1)
  {
    uint64_t v44 = *(void (**)(char *, uint64_t))(v42 + 8);
    v44(v39, v41);
    v44(v43, v41);
    uint64_t v45 = v79;
    swift_retain();
    uint64_t v46 = v68;
    uint64_t v47 = (uint64_t)v80;
    uint64_t v48 = v78;
    goto LABEL_17;
  }
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
  uint64_t v50 = v65;
  v49(v65, v43, v40);
  uint64_t v51 = v39;
  uint64_t v45 = (uint64_t *)swift_allocObject();
  uint64_t v52 = v84;
  v45[5] = v40;
  v45[6] = v52;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v45 + 2);
  v49((char *)boxed_opaque_existential_1, v50, v40);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v51, v41);
  unint64_t v54 = (unint64_t)v79;
  uint64_t v47 = (uint64_t)v80;
  v45[7] = (uint64_t)v79;
  uint64_t v46 = v68;
  if (!(v54 >> 62))
  {
    uint64_t v55 = (uint64_t *)(v54 + 64);
LABEL_15:
    uint64_t v48 = v78;
    uint64_t v56 = *v55;
    uint64_t result = swift_retain();
    uint64_t v57 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  if (v54 >> 62 == 1)
  {
    uint64_t v55 = (uint64_t *)((v54 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_15;
  }
  uint64_t v48 = v78;
  uint64_t v57 = 1;
LABEL_16:
  v45[8] = v57;
LABEL_17:
  uint64_t v58 = *(void *)(v48 + 40);
  *(void *)(v48 + 40) = v45;
  uint64_t v59 = type metadata accessor for _PlistDecodingStorage();
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v47, v59);
  _PlistDecoder.unkeyedContainer()(v67);
  *(void *)(v48 + 40) = v58;
  swift_retain();
  swift_release();
  uint64_t v60 = swift_bridgeObjectRetain();
  uint64_t v61 = MEMORY[0x185302620](v60, v46);
  uint64_t result = swift_bridgeObjectRelease();
  if (v61)
  {
    type metadata accessor for Array();
    swift_getWitnessTable();
    swift_getWitnessTable();
    uint64_t v62 = v66;
    RangeReplaceableCollection<>.removeLast()();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v83 + 8);
    v63(v62, v46);
    swift_release();
    v63((char *)v47, v46);
    return swift_release();
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t _PlistKeyedDecodingContainer._superDecoder(forKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t *a7@<X8>)
{
  uint64_t v78 = a4;
  uint64_t v82 = a2;
  uint64_t v71 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v75 = a5;
  uint64_t v76 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v72 = *(void (***)(char *, uint64_t))(v13 - 8);
  uint64_t v73 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v70 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v74 = (char *)&v70 - v18;
  uint64_t v81 = AssociatedConformanceWitness;
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v79 = *(void *)(v19 - 8);
  uint64_t v80 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v77 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v83 = (uint64_t)&v70 - v22;
  uint64_t v23 = a1[3];
  uint64_t v85 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  uint64_t v24 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a3 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25), (v27 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v15, *(void *)(a3 + 56) + *(void *)(v16 + 72) * v26, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v15, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    v72[1](v15, v73);
    swift_checkMetadataState();
    (*(void (**)(void))(v81 + 56))();
    uint64_t v28 = v82;
  }
  else
  {
    char v29 = v74;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v74, v15, AssociatedTypeWitness);
    uint64_t v30 = v81;
    uint64_t v28 = v82;
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 80);
    swift_unknownObjectRetain();
    uint64_t v32 = swift_checkMetadataState();
    uint64_t v33 = v84;
    v31(v29, v32, v30);
    if (v33)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v29, AssociatedTypeWitness);
      swift_unknownObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
    }
    uint64_t v84 = 0;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v29, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v83, v77, v80);
  }
  uint64_t v34 = *(void *)(v28 + 24);
  uint64_t v81 = *(void *)(v28 + 32);
  uint64_t v82 = v34;
  long long v70 = *(_OWORD *)(v85 + 3);
  uint64_t v35 = v70;
  uint64_t v36 = __swift_project_boxed_opaque_existential_1(v85, v70);
  uint64_t v37 = type metadata accessor for Optional();
  uint64_t v72 = (void (**)(char *, uint64_t))&v70;
  uint64_t v73 = *(void *)(v37 - 8);
  uint64_t v38 = *(void *)(v73 + 64);
  v39.n128_f64[0] = MEMORY[0x1F4188790](v37);
  uint64_t v40 = (char *)&v70 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void *)(v35 - 8);
  (*(void (**)(char *, void *, uint64_t, __n128))(v41 + 16))(v40, v36, v35, v39);
  uint64_t v42 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v40, 0, 1, v35);
  uint64_t v77 = (char *)&v70;
  MEMORY[0x1F4188790](v42);
  uint64_t v44 = (char *)&v70 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = (char *)&v70;
  double v46 = MEMORY[0x1F4188790](v45);
  uint64_t v47 = v37;
  uint64_t v48 = v73;
  (*(void (**)(char *, char *, uint64_t, double))(v73 + 16))(v40, v40, v47, v46);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v40, 1, v35) == 1)
  {
    uint64_t v49 = *(void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v50 = v82;
    swift_unknownObjectRetain();
    uint64_t v51 = v81;
    swift_bridgeObjectRetain();
    v49(v40, v47);
    v49(v40, v47);
    uint64_t v52 = v78;
    swift_retain();
    uint64_t v53 = v84;
    uint64_t v54 = v51;
    goto LABEL_18;
  }
  uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  v55(v44, v40, v35);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 40) = v70;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v52 + 16));
  v55((char *)boxed_opaque_existential_1, v44, v35);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v48 + 8);
  uint64_t v50 = v82;
  swift_unknownObjectRetain();
  uint64_t v58 = v81;
  swift_bridgeObjectRetain();
  v57(v40, v47);
  unint64_t v59 = v78;
  *(void *)(v52 + 56) = v78;
  uint64_t v54 = v58;
  if (v59 >> 62)
  {
    if (v59 >> 62 != 1)
    {
      uint64_t v53 = v84;
      uint64_t v63 = 1;
      goto LABEL_17;
    }
    uint64_t v60 = (uint64_t *)((v59 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v60 = (uint64_t *)(v59 + 64);
  }
  uint64_t v53 = v84;
  uint64_t v61 = *v60;
  uint64_t result = swift_retain();
  uint64_t v63 = v61 + 1;
  if (!__OFADD__(v61, 1))
  {
LABEL_17:
    *(void *)(v52 + 64) = v63;
LABEL_18:
    uint64_t v64 = type metadata accessor for _PlistDecoder();
    uint64_t v65 = swift_allocObject();
    _PlistDecoder.init(referencing:options:codingPathNode:)(v50, v54, v52);
    if (v53)
    {
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v83, v80);
    }
    else
    {
      uint64_t v66 = v80;
      uint64_t v67 = type metadata accessor for _PlistDecodingStorage();
      uint64_t v68 = v83;
      specialized _PlistDecodingStorage.push(container:)(v83, v67);
      uint64_t v69 = v71;
      v71[3] = v64;
      v69[4] = swift_getWitnessTable();
      *uint64_t v69 = v65;
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v68, v66);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
  }
  __break(1u);
  return result;
}

uint64_t _PlistKeyedDecodingContainer.superDecoder()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t *a6@<X8>)
{
  v14[3] = &type metadata for _CodingKey;
  v14[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v12 = swift_allocObject();
  v14[0] = v12;
  *(_OWORD *)(v12 + 16) = xmmword_1821115C0;
  *(void *)(v12 + 32) = 0;
  *(unsigned char *)(v12 + 40) = 0;
  return _PlistKeyedDecodingContainer._superDecoder(forKey:)(v14, a1, a2, a3, a4, a5, a6);
}

uint64_t _PlistKeyedDecodingContainer.superDecoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  v19[3] = a5;
  v19[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
  return _PlistKeyedDecodingContainer._superDecoder(forKey:)(v19, a2, a3, a4, a6, a8, a9);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2)
{
  return _JSONKeyedEncodingContainer.codingPath.getter(a1, a2, *(void *)(v2 + 16));
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t *a2)
{
  return _PlistKeyedDecodingContainer.decode(_:forKey:)(a1, *(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), a2[2], a2[3], a2[4], a2[5]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))_PlistKeyedDecodingContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance _PlistKeyedDecodingContainer<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _PlistKeyedDecodingContainer.superDecoder()(*v2, v2[1], v2[2], *(void *)(a1 + 24), *(void *)(a1 + 40), a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))_PlistKeyedDecodingContainer.superDecoder(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]);
}

uint64_t specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  uint64_t v17 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer.Protocol);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (v5 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder)) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

uint64_t specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = MEMORY[0x1E4FBB1A0];
  uint64_t v17 = MEMORY[0x1E4FBB1A0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBB550];
  uint64_t v17 = MEMORY[0x1E4FBB550];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBC358];
  uint64_t v17 = MEMORY[0x1E4FBC358];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt8.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBC450];
  uint64_t v17 = MEMORY[0x1E4FBC450];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt16.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBC248];
  uint64_t v17 = MEMORY[0x1E4FBC248];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Never.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBB390];
  uint64_t v17 = MEMORY[0x1E4FBB390];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBB3D0];
  uint64_t v17 = MEMORY[0x1E4FBB3D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBB470];
  uint64_t v17 = MEMORY[0x1E4FBB470];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBC098];
  uint64_t v17 = MEMORY[0x1E4FBC098];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBC0F8];
  uint64_t v17 = MEMORY[0x1E4FBC0F8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int16.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBC150];
  uint64_t v17 = MEMORY[0x1E4FBC150];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBC1C8];
  uint64_t v17 = MEMORY[0x1E4FBC1C8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBB808];
  uint64_t v17 = MEMORY[0x1E4FBB808];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBC4C0];
  uint64_t v17 = MEMORY[0x1E4FBC4C0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBC538];
  uint64_t v17 = MEMORY[0x1E4FBC538];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt64.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v7;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBA80];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);
}

uint64_t _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v20 = a3;
  swift_getMetatypeMetadata();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast()) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == a3) {
    swift_bridgeObjectRelease();
  }
  unint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v4 + *(int *)(a2 + 52)));
  uint64_t v10 = *(void *)(v4 + *(int *)(a2 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
  }
  uint64_t v18 = &type metadata for _CodingKey;
  unint64_t v19 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v13 = swift_allocObject();
  *(void *)&long long v17 = v13;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 16) = v10;
  *(unsigned char *)(v13 + 40) = 2;
  id v9[2] = v12 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v17, (uint64_t)&v9[5 * v12 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a4 = a1;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v14 = *MEMORY[0x1E4FBBA80];
  uint64_t v15 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(a4, v14, v15);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _PlistUnkeyedDecodingContainer.decodeNil()()
{
  uint64_t v2 = v1;
  uint64_t v74 = v0;
  uint64_t v3 = v0 - 8;
  uint64_t v62 = *(void *)(v0 - 8);
  ((void (*)())MEMORY[0x1F4188790])();
  uint64_t v61 = (char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v70 = v6;
  uint64_t v71 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v60 = type metadata accessor for Optional();
  uint64_t v65 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v72 = (char *)v55 - v9;
  uint64_t v67 = AssociatedTypeWitness;
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v12 = (char *)v55 - v11;
  uint64_t v66 = AssociatedConformanceWitness;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)v55 - v15;
  uint64_t v17 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v69 = (char *)v55 - v23;
  uint64_t v24 = *(int *)(v3 + 48);
  uint64_t v26 = v25;
  char v27 = *(void (**)(char *, double))(v25 + 16);
  uint64_t v63 = v2 + v24;
  v27(v16, v22);
  uint64_t v68 = v17;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v13);
  uint64_t v64 = v14;
  if (v28 == 1)
  {
    uint64_t v29 = v65;
    uint64_t v57 = v20;
    uint64_t v58 = v12;
    uint64_t v56 = v26;
    v55[0] = *(void *)(v26 + 8);
    v55[1] = v26 + 8;
    ((void (*)(char *, uint64_t))v55[0])(v16, v14);
    uint64_t v30 = v66;
    swift_getAssociatedTypeWitness();
    uint64_t v59 = v2;
    uint64_t v31 = swift_getAssociatedConformanceWitness();
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v31 + 16);
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v34 = v72;
    v32(v33, v31);
    uint64_t v35 = v34;
    uint64_t v36 = v67;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v35, 1, v67) == 1)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v72, v60);
      uint64_t v37 = v61;
      uint64_t v38 = v62;
      uint64_t v39 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v59, v74);
      type metadata accessor for DecodingError();
      uint64_t v40 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v39, v41);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
      uint64_t v75 = v40;
      swift_willThrow();
      return v40 & 1;
    }
    uint64_t v47 = v58;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v58, v72, v36);
    uint64_t v48 = v59;
    LOBYTE(v40) = v30 + 80;
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 80);
    swift_unknownObjectRetain();
    uint64_t v50 = v47;
    uint64_t v51 = swift_checkMetadataState();
    uint64_t v42 = v57;
    uint64_t v52 = v75;
    v49(v50, v51, v30);
    uint64_t v75 = v52;
    if (v52)
    {
      (*(void (**)(char *, uint64_t))(v73 + 8))(v50, v36);
      swift_unknownObjectRelease();
      return v40 & 1;
    }
    uint64_t v2 = v48;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v50, v36);
    swift_unknownObjectRelease();
    uint64_t v54 = v63;
    ((void (*)(uint64_t, uint64_t))v55[0])(v63, v64);
    uint64_t v44 = v68;
    (*(void (**)(uint64_t, char *, uint64_t))(v68 + 16))(v54, v42, v13);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v54, 0, 1, v13);
    uint64_t v43 = v74;
    uint64_t v26 = v56;
  }
  else
  {
    uint64_t v42 = v16;
    uint64_t v43 = v74;
    uint64_t v44 = v68;
  }
  uint64_t v45 = v69;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v69, v42, v13);
  LOBYTE(v40) = (*(uint64_t (**)(char *))(v71 + 40))(v45);
  if (v40)
  {
    ++*(void *)(v2 + *(int *)(v43 + 48));
    uint64_t v46 = v63;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v63, v64);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v46, 1, 1, v13);
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v13);
  return v40 & 1;
}

uint64_t _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v85 = a1;
  uint64_t v1 = a1 - 8;
  uint64_t v72 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v71 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v82 = v4;
  uint64_t v83 = v3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = type metadata accessor for Optional();
  uint64_t v74 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v75 = (char *)&v64 - v7;
  uint64_t v77 = AssociatedTypeWitness;
  uint64_t v84 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v64 - v9;
  uint64_t v76 = AssociatedConformanceWitness;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v64 - v14;
  uint64_t v16 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v80 = (char *)&v64 - v22;
  uint64_t v23 = *(int *)(v1 + 48);
  uint64_t v25 = v24;
  uint64_t v26 = v86;
  char v27 = *(void (**)(char *, double))(v13 + 16);
  uint64_t v73 = v86 + v23;
  v27(v15, v21);
  uint64_t v78 = v11;
  uint64_t v79 = v16;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v11);
  uint64_t v81 = v13;
  if (v28 == 1)
  {
    uint64_t v29 = v74;
    uint64_t v68 = v19;
    uint64_t v69 = v10;
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    uint64_t v66 = v13 + 8;
    uint64_t v67 = v25;
    uint64_t v65 = v30;
    v30((uint64_t)v15, v25);
    uint64_t v26 = v76;
    swift_getAssociatedTypeWitness();
    uint64_t v31 = swift_getAssociatedConformanceWitness();
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v31 + 16);
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v34 = v75;
    v32(v33, v31);
    uint64_t v35 = v77;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v34, 1, v77) == 1)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v70);
      uint64_t v36 = v71;
      uint64_t v26 = v72;
      uint64_t v37 = v85;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v86, v85);
      type metadata accessor for DecodingError();
      uint64_t v38 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v37, v39);
      uint64_t v40 = *(void (**)(char *, uint64_t))(v26 + 8);
      LOBYTE(v26) = v26 + 8;
      v40(v36, v37);
      uint64_t v87 = v38;
      swift_willThrow();
      return v26 & 1;
    }
    uint64_t v53 = v69;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v69, v34, v35);
    uint64_t v54 = v86;
    uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 80);
    swift_unknownObjectRetain();
    uint64_t v56 = v53;
    uint64_t v57 = swift_checkMetadataState();
    uint64_t v58 = v68;
    uint64_t v59 = v87;
    v55(v53, v57, v26);
    uint64_t v87 = v59;
    if (v59)
    {
      (*(void (**)(char *, uint64_t))(v84 + 8))(v53, v35);
      swift_unknownObjectRelease();
      return v26 & 1;
    }
    uint64_t v44 = v54;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v56, v35);
    swift_unknownObjectRelease();
    uint64_t v62 = v73;
    uint64_t v26 = v67;
    v65(v73, v67);
    uint64_t v43 = v78;
    uint64_t v42 = v79;
    uint64_t v63 = v58;
    (*(void (**)(uint64_t, char *, uint64_t))(v79 + 16))(v62, v58, v78);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v62, 0, 1, v43);
    uint64_t v45 = v85;
    uint64_t v25 = v26;
    uint64_t v41 = v63;
  }
  else
  {
    uint64_t v41 = v15;
    uint64_t v43 = v78;
    uint64_t v42 = v79;
    uint64_t v44 = v26;
    uint64_t v45 = v85;
  }
  uint64_t v46 = (uint64_t)v80;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v80, v41, v43);
  uint64_t v47 = *(int *)(v45 + 48);
  unint64_t v48 = *(void *)(v44 + *(int *)(v45 + 52));
  uint64_t v49 = *(void *)(v44 + v47);
  uint64_t v50 = v87;
  char v51 = specialized _PlistDecoder.unwrapBool<A>(from:for:_:)(v46, v48, v49, 0, 0, 2u, v82, v83);
  uint64_t v87 = v50;
  uint64_t v52 = v81;
  if (!v50)
  {
    LOBYTE(v26) = v51;
    *(void *)(v44 + v47) = v49 + 1;
    uint64_t v60 = v73;
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v73, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v60, 1, 1, v43);
  }
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v46, v43);
  return v26 & 1;
}

char *_PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v75 = a1;
  uint64_t v1 = a1 - 8;
  uint64_t v63 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v62 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v61 = type metadata accessor for Optional();
  uint64_t v66 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v73 = (char *)&v56 - v5;
  uint64_t v68 = AssociatedTypeWitness;
  uint64_t v74 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v56 - v7;
  uint64_t v67 = (char *)AssociatedConformanceWitness;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v56 - v12;
  uint64_t v14 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v71 = (char *)&v56 - v20;
  uint64_t v21 = *(int *)(v1 + 48);
  uint64_t v22 = v76;
  uint64_t v23 = *(void (**)(char *, double))(v11 + 16);
  uint64_t v64 = (char *)(v76 + v21);
  v23(v13, v19);
  uint64_t v69 = v9;
  uint64_t v70 = v14;
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9);
  uint64_t v65 = v10;
  uint64_t v72 = v11;
  if (v24 == 1)
  {
    uint64_t v25 = v66;
    uint64_t v59 = v8;
    uint64_t v60 = v17;
    uint64_t v57 = *(void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v58 = v11 + 8;
    v57(v13, v10);
    uint64_t v26 = v75;
    uint64_t v17 = v67;
    swift_getAssociatedTypeWitness();
    uint64_t v27 = swift_getAssociatedConformanceWitness();
    int v28 = *(void (**)(uint64_t, uint64_t))(v27 + 16);
    uint64_t v29 = swift_checkMetadataState();
    uint64_t v30 = v73;
    v28(v29, v27);
    uint64_t v31 = v30;
    uint64_t v32 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v31, 1, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v73, v61);
      uint64_t v34 = v62;
      uint64_t v33 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v76, v26);
      type metadata accessor for DecodingError();
      uint64_t v35 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v26, v36);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v33 + 8);
      uint64_t v17 = (char *)(v33 + 8);
      v37(v34, v26);
      uint64_t v77 = v35;
      swift_willThrow();
      return v17;
    }
    uint64_t v47 = v59;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v59, v73, v32);
    uint64_t v48 = v76;
    uint64_t v49 = (void (*)(char *, uint64_t, char *))*((void *)v17 + 10);
    swift_unknownObjectRetain();
    uint64_t v50 = v47;
    uint64_t v51 = swift_checkMetadataState();
    uint64_t v52 = v60;
    uint64_t v53 = v77;
    v49(v47, v51, v17);
    uint64_t v77 = v53;
    if (v53)
    {
      (*(void (**)(char *, uint64_t))(v74 + 8))(v47, v32);
      swift_unknownObjectRelease();
      return v17;
    }
    uint64_t v22 = v48;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v50, v32);
    swift_unknownObjectRelease();
    uint64_t v17 = v64;
    v57(v64, v65);
    uint64_t v38 = v69;
    uint64_t v39 = v70;
    uint64_t v13 = v52;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v17, v52, v69);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v17, 0, 1, v38);
  }
  else
  {
    uint64_t v38 = v69;
    uint64_t v39 = v70;
  }
  uint64_t v40 = v75;
  uint64_t v41 = (uint64_t)v71;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v71, v13, v38);
  uint64_t v42 = *(int *)(v40 + 48);
  uint64_t v43 = *(void *)(v22 + v42);
  uint64_t v44 = v77;
  uint64_t v45 = (char *)specialized _PlistDecoder.unwrapString<A>(from:for:_:)(v41, *(void *)(v22 + *(int *)(v40 + 52)), v43, 0, 0, 2u);
  uint64_t v77 = v44;
  uint64_t v46 = v72;
  if (!v44)
  {
    uint64_t v17 = v45;
    *(void *)(v22 + v42) = v43 + 1;
    uint64_t v54 = v64;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v64, v65);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v54, 1, 1, v38);
  }
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v38);
  return v17;
}

double _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v76 = a1;
  uint64_t v2 = a1 - 8;
  uint64_t v65 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v64 = (char *)v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = type metadata accessor for Optional();
  uint64_t v67 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v68 = (char *)v59 - v6;
  uint64_t v69 = AssociatedTypeWitness;
  uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v59 - v8;
  uint64_t v74 = AssociatedConformanceWitness;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v59 - v13;
  uint64_t v15 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v72 = (char *)v59 - v21;
  uint64_t v22 = *(int *)(v2 + 48);
  uint64_t v23 = v77;
  int v24 = *(void (**)(char *, double))(v12 + 16);
  uint64_t v66 = v77 + v22;
  v24(v14, v20);
  uint64_t v70 = v10;
  uint64_t v71 = v15;
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v10);
  uint64_t v73 = v12;
  if (v25 == 1)
  {
    uint64_t v26 = v67;
    uint64_t v61 = v9;
    uint64_t v62 = v18;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v12 + 8);
    v59[1] = v12 + 8;
    uint64_t v60 = v11;
    v59[0] = v27;
    v27(v14, v11);
    uint64_t v28 = v76;
    swift_getAssociatedTypeWitness();
    uint64_t v29 = swift_getAssociatedConformanceWitness();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    uint64_t v31 = swift_checkMetadataState();
    uint64_t v32 = v68;
    v30(v31, v29);
    uint64_t v33 = v69;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v32, 1, v69) == 1)
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v32, v63);
      uint64_t v35 = v64;
      uint64_t v34 = v65;
      uint64_t v36 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v77, v28);
      type metadata accessor for DecodingError();
      uint64_t v37 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v36, v38);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
      uint64_t v78 = v37;
      swift_willThrow();
      return v1;
    }
    uint64_t v48 = v61;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v61, v32, v33);
    uint64_t v49 = v77;
    uint64_t v50 = v74;
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 80);
    swift_unknownObjectRetain();
    uint64_t v52 = v48;
    uint64_t v53 = swift_checkMetadataState();
    uint64_t v54 = v62;
    uint64_t v55 = v78;
    v51(v48, v53, v50);
    uint64_t v78 = v55;
    if (v55)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v48, v33);
      swift_unknownObjectRelease();
      return v1;
    }
    uint64_t v23 = v49;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v52, v33);
    swift_unknownObjectRelease();
    uint64_t v58 = v66;
    uint64_t v11 = v60;
    ((void (*)(uint64_t, uint64_t))v59[0])(v66, v60);
    uint64_t v40 = v70;
    uint64_t v39 = v71;
    uint64_t v14 = v54;
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 16))(v58, v54, v70);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v58, 0, 1, v40);
  }
  else
  {
    uint64_t v40 = v70;
    uint64_t v39 = v71;
  }
  uint64_t v41 = v76;
  uint64_t v42 = (uint64_t)v72;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v72, v14, v40);
  uint64_t v43 = *(int *)(v41 + 48);
  uint64_t v44 = *(void *)(v23 + v43);
  uint64_t v45 = v78;
  specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v42, *(void *)(v23 + *(int *)(v41 + 52)), v44, 0, 0, 2u);
  uint64_t v78 = v45;
  uint64_t v47 = v73;
  if (!v45)
  {
    double v1 = v46;
    *(void *)(v23 + v43) = v44 + 1;
    uint64_t v56 = v66;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v66, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v56, 1, 1, v40);
  }
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v40);
  return v1;
}

float _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v76 = a1;
  uint64_t v2 = a1 - 8;
  uint64_t v65 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v64 = (char *)v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = type metadata accessor for Optional();
  uint64_t v67 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v68 = (char *)v59 - v6;
  uint64_t v69 = AssociatedTypeWitness;
  uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v59 - v8;
  uint64_t v74 = AssociatedConformanceWitness;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v59 - v13;
  uint64_t v15 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v72 = (char *)v59 - v21;
  uint64_t v22 = *(int *)(v2 + 48);
  uint64_t v23 = v77;
  int v24 = *(void (**)(char *, double))(v12 + 16);
  uint64_t v66 = v77 + v22;
  v24(v14, v20);
  uint64_t v70 = v10;
  uint64_t v71 = v15;
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v10);
  uint64_t v73 = v12;
  if (v25 == 1)
  {
    uint64_t v26 = v67;
    uint64_t v61 = v9;
    uint64_t v62 = v18;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v12 + 8);
    v59[1] = v12 + 8;
    uint64_t v60 = v11;
    v59[0] = v27;
    v27(v14, v11);
    uint64_t v28 = v76;
    swift_getAssociatedTypeWitness();
    uint64_t v29 = swift_getAssociatedConformanceWitness();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    uint64_t v31 = swift_checkMetadataState();
    uint64_t v32 = v68;
    v30(v31, v29);
    uint64_t v33 = v69;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v32, 1, v69) == 1)
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v32, v63);
      uint64_t v35 = v64;
      uint64_t v34 = v65;
      uint64_t v36 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v77, v28);
      type metadata accessor for DecodingError();
      uint64_t v37 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v36, v38);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
      uint64_t v78 = v37;
      swift_willThrow();
      return v1;
    }
    uint64_t v48 = v61;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v61, v32, v33);
    uint64_t v49 = v77;
    uint64_t v50 = v74;
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 80);
    swift_unknownObjectRetain();
    uint64_t v52 = v48;
    uint64_t v53 = swift_checkMetadataState();
    uint64_t v54 = v62;
    uint64_t v55 = v78;
    v51(v48, v53, v50);
    uint64_t v78 = v55;
    if (v55)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v48, v33);
      swift_unknownObjectRelease();
      return v1;
    }
    uint64_t v23 = v49;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v52, v33);
    swift_unknownObjectRelease();
    uint64_t v58 = v66;
    uint64_t v11 = v60;
    ((void (*)(uint64_t, uint64_t))v59[0])(v66, v60);
    uint64_t v40 = v70;
    uint64_t v39 = v71;
    uint64_t v14 = v54;
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 16))(v58, v54, v70);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v58, 0, 1, v40);
  }
  else
  {
    uint64_t v40 = v70;
    uint64_t v39 = v71;
  }
  uint64_t v41 = v76;
  uint64_t v42 = (uint64_t)v72;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v72, v14, v40);
  uint64_t v43 = *(int *)(v41 + 48);
  uint64_t v44 = *(void *)(v23 + v43);
  uint64_t v45 = v78;
  specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v42, *(void *)(v23 + *(int *)(v41 + 52)), v44, 0, 0, 2u);
  uint64_t v78 = v45;
  uint64_t v47 = v73;
  if (!v45)
  {
    float v1 = v46;
    *(void *)(v23 + v43) = v44 + 1;
    uint64_t v56 = v66;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v66, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v56, 1, 1, v40);
  }
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v40);
  return v1;
}

uint64_t _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1, uint64_t (*a2)(char *, void, uint64_t, void, void, uint64_t), void (*a3)(uint64_t))
{
  uint64_t v73 = a2;
  uint64_t v77 = a1;
  uint64_t v3 = a1 - 8;
  uint64_t v63 = *(void *)(a1 - 8);
  uint64_t v64 = a3;
  MEMORY[0x1F4188790](a1);
  uint64_t v62 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v67 = (char *)&v57 - v8;
  uint64_t v68 = AssociatedTypeWitness;
  uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v57 - v10;
  uint64_t v74 = AssociatedConformanceWitness;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v57 - v15;
  uint64_t v17 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v18);
  double v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v71 = (char *)&v57 - v23;
  uint64_t v24 = *(int *)(v3 + 48);
  uint64_t v25 = v76;
  uint64_t v26 = *(void (**)(char *, double))(v14 + 16);
  uint64_t v65 = v76 + v24;
  v26(v16, v22);
  uint64_t v69 = v12;
  uint64_t v70 = v17;
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v12);
  uint64_t v66 = v13;
  uint64_t v72 = v14;
  if (v27 == 1)
  {
    uint64_t v58 = v11;
    uint64_t v59 = v20;
    uint64_t v57 = *(void (**)(char *, uint64_t))(v14 + 8);
    v57(v16, v13);
    swift_getAssociatedTypeWitness();
    uint64_t v28 = v25;
    uint64_t v29 = swift_getAssociatedConformanceWitness();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    uint64_t v31 = swift_checkMetadataState();
    uint64_t v32 = v67;
    v30(v31, v29);
    uint64_t v33 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v32, 1, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v61);
      uint64_t v35 = v62;
      uint64_t v34 = v63;
      uint64_t v36 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v25, v77);
      type metadata accessor for DecodingError();
      uint64_t v37 = swift_allocError();
      v64(v36);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v34 + 8);
      uint64_t v17 = v34 + 8;
      v38(v35, v36);
      uint64_t v78 = v37;
      swift_willThrow();
      return v17;
    }
    uint64_t v48 = v58;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v58, v32, v33);
    uint64_t v49 = v28;
    uint64_t v50 = v74;
    uint64_t v17 = v74 + 80;
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 80);
    swift_unknownObjectRetain();
    uint64_t v52 = v48;
    uint64_t v53 = swift_checkMetadataState();
    uint64_t v54 = v78;
    v51(v48, v53, v50);
    uint64_t v78 = v54;
    if (v54)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v48, v33);
      swift_unknownObjectRelease();
      return v17;
    }
    uint64_t v25 = v49;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v52, v33);
    swift_unknownObjectRelease();
    uint64_t v17 = v65;
    v57((char *)v65, v66);
    uint64_t v39 = v69;
    uint64_t v40 = v70;
    uint64_t v16 = v59;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v17, v59, v69);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v17, 0, 1, v39);
  }
  else
  {
    uint64_t v39 = v69;
    uint64_t v40 = v70;
  }
  uint64_t v41 = v77;
  uint64_t v42 = v71;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v71, v16, v39);
  uint64_t v43 = *(int *)(v41 + 48);
  uint64_t v44 = *(void *)(v25 + v43);
  uint64_t v45 = v78;
  uint64_t v46 = v73(v42, *(void *)(v25 + *(int *)(v41 + 52)), v44, 0, 0, 2);
  uint64_t v78 = v45;
  uint64_t v47 = v72;
  if (!v45)
  {
    uint64_t v17 = v46;
    *(void *)(v25 + v43) = v44 + 1;
    uint64_t v55 = v65;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v65, v66);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v55, 1, 1, v39);
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
  return v17;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, double);
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v57)(char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t (*v73)(char *, void, uint64_t, void, void, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  uint64_t v73 = a2;
  uint64_t v77 = a1;
  uint64_t v3 = a1 - 8;
  uint64_t v63 = *(void *)(a1 - 8);
  uint64_t v64 = a3;
  MEMORY[0x1F4188790](a1);
  uint64_t v62 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v67 = (char *)&v57 - v8;
  uint64_t v68 = AssociatedTypeWitness;
  uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v57 - v10;
  uint64_t v74 = AssociatedConformanceWitness;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v57 - v15;
  uint64_t v17 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v18);
  double v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v71 = (char *)&v57 - v23;
  uint64_t v24 = *(int *)(v3 + 48);
  uint64_t v25 = v76;
  uint64_t v26 = *(void (**)(char *, double))(v14 + 16);
  uint64_t v65 = v76 + v24;
  v26(v16, v22);
  uint64_t v69 = v12;
  uint64_t v70 = v17;
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v12);
  uint64_t v66 = v13;
  uint64_t v72 = v14;
  if (v27 == 1)
  {
    uint64_t v58 = v11;
    uint64_t v59 = v20;
    uint64_t v57 = *(void (**)(char *, uint64_t))(v14 + 8);
    v57(v16, v13);
    swift_getAssociatedTypeWitness();
    uint64_t v28 = v25;
    uint64_t v29 = swift_getAssociatedConformanceWitness();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    uint64_t v31 = swift_checkMetadataState();
    uint64_t v32 = v67;
    v30(v31, v29);
    uint64_t v33 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v32, 1, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v61);
      uint64_t v35 = v62;
      uint64_t v34 = v63;
      uint64_t v36 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v25, v77);
      type metadata accessor for DecodingError();
      uint64_t v37 = swift_allocError();
      v64(v36);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v34 + 8);
      uint64_t v17 = v34 + 8;
      v38(v35, v36);
      uint64_t v78 = v37;
      swift_willThrow();
      return v17;
    }
    uint64_t v48 = v58;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v58, v32, v33);
    uint64_t v49 = v28;
    uint64_t v50 = v74;
    uint64_t v17 = v74 + 80;
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 80);
    swift_unknownObjectRetain();
    uint64_t v52 = v48;
    uint64_t v53 = swift_checkMetadataState();
    uint64_t v54 = v78;
    v51(v48, v53, v50);
    uint64_t v78 = v54;
    if (v54)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v48, v33);
      swift_unknownObjectRelease();
      return v17;
    }
    uint64_t v25 = v49;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v52, v33);
    swift_unknownObjectRelease();
    uint64_t v17 = v65;
    v57((char *)v65, v66);
    uint64_t v39 = v69;
    uint64_t v40 = v70;
    uint64_t v16 = v59;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v17, v59, v69);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v17, 0, 1, v39);
  }
  else
  {
    uint64_t v39 = v69;
    uint64_t v40 = v70;
  }
  uint64_t v41 = v77;
  uint64_t v42 = v71;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v71, v16, v39);
  uint64_t v43 = *(int *)(v41 + 48);
  uint64_t v44 = *(void *)(v25 + v43);
  uint64_t v45 = v78;
  uint64_t v46 = v73(v42, *(void *)(v25 + *(int *)(v41 + 52)), v44, 0, 0, 2);
  uint64_t v78 = v45;
  uint64_t v47 = v72;
  if (!v45)
  {
    uint64_t v17 = v46;
    *(void *)(v25 + v43) = v44 + 1;
    uint64_t v55 = v65;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v65, v66);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v55, 1, 1, v39);
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
  return v17;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, double);
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v57)(char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t (*v73)(char *, void, uint64_t, void, void, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  uint64_t v73 = a2;
  uint64_t v77 = a1;
  uint64_t v3 = a1 - 8;
  uint64_t v63 = *(void *)(a1 - 8);
  uint64_t v64 = a3;
  MEMORY[0x1F4188790](a1);
  uint64_t v62 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v67 = (char *)&v57 - v8;
  uint64_t v68 = AssociatedTypeWitness;
  uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v57 - v10;
  uint64_t v74 = AssociatedConformanceWitness;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v57 - v15;
  uint64_t v17 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v18);
  double v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v71 = (char *)&v57 - v23;
  uint64_t v24 = *(int *)(v3 + 48);
  uint64_t v25 = v76;
  uint64_t v26 = *(void (**)(char *, double))(v14 + 16);
  uint64_t v65 = v76 + v24;
  v26(v16, v22);
  uint64_t v69 = v12;
  uint64_t v70 = v17;
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v12);
  uint64_t v66 = v13;
  uint64_t v72 = v14;
  if (v27 == 1)
  {
    uint64_t v58 = v11;
    uint64_t v59 = v20;
    uint64_t v57 = *(void (**)(char *, uint64_t))(v14 + 8);
    v57(v16, v13);
    swift_getAssociatedTypeWitness();
    uint64_t v28 = v25;
    uint64_t v29 = swift_getAssociatedConformanceWitness();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    uint64_t v31 = swift_checkMetadataState();
    uint64_t v32 = v67;
    v30(v31, v29);
    uint64_t v33 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v32, 1, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v61);
      uint64_t v35 = v62;
      uint64_t v34 = v63;
      uint64_t v36 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v25, v77);
      type metadata accessor for DecodingError();
      uint64_t v37 = swift_allocError();
      v64(v36);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v34 + 8);
      uint64_t v17 = v34 + 8;
      v38(v35, v36);
      uint64_t v78 = v37;
      swift_willThrow();
      return v17;
    }
    uint64_t v48 = v58;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v58, v32, v33);
    uint64_t v49 = v28;
    uint64_t v50 = v74;
    uint64_t v17 = v74 + 80;
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 80);
    swift_unknownObjectRetain();
    uint64_t v52 = v48;
    uint64_t v53 = swift_checkMetadataState();
    uint64_t v54 = v78;
    v51(v48, v53, v50);
    uint64_t v78 = v54;
    if (v54)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v48, v33);
      swift_unknownObjectRelease();
      return v17;
    }
    uint64_t v25 = v49;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v52, v33);
    swift_unknownObjectRelease();
    uint64_t v17 = v65;
    v57((char *)v65, v66);
    uint64_t v39 = v69;
    uint64_t v40 = v70;
    uint64_t v16 = v59;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v17, v59, v69);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v17, 0, 1, v39);
  }
  else
  {
    uint64_t v39 = v69;
    uint64_t v40 = v70;
  }
  uint64_t v41 = v77;
  uint64_t v42 = v71;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v71, v16, v39);
  uint64_t v43 = *(int *)(v41 + 48);
  uint64_t v44 = *(void *)(v25 + v43);
  uint64_t v45 = v78;
  uint64_t v46 = v73(v42, *(void *)(v25 + *(int *)(v41 + 52)), v44, 0, 0, 2);
  uint64_t v78 = v45;
  uint64_t v47 = v72;
  if (!v45)
  {
    uint64_t v17 = v46;
    *(void *)(v25 + v43) = v44 + 1;
    uint64_t v55 = v65;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v65, v66);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v55, 1, 1, v39);
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
  return v17;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, double);
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v57)(char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t (*v73)(char *, void, uint64_t, void, void, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  uint64_t v73 = a2;
  uint64_t v77 = a1;
  uint64_t v3 = a1 - 8;
  uint64_t v63 = *(void *)(a1 - 8);
  uint64_t v64 = a3;
  MEMORY[0x1F4188790](a1);
  uint64_t v62 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v67 = (char *)&v57 - v8;
  uint64_t v68 = AssociatedTypeWitness;
  uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v57 - v10;
  uint64_t v74 = AssociatedConformanceWitness;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v57 - v15;
  uint64_t v17 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v18);
  double v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v71 = (char *)&v57 - v23;
  uint64_t v24 = *(int *)(v3 + 48);
  uint64_t v25 = v76;
  uint64_t v26 = *(void (**)(char *, double))(v14 + 16);
  uint64_t v65 = v76 + v24;
  v26(v16, v22);
  uint64_t v69 = v12;
  uint64_t v70 = v17;
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v12);
  uint64_t v66 = v13;
  uint64_t v72 = v14;
  if (v27 == 1)
  {
    uint64_t v58 = v11;
    uint64_t v59 = v20;
    uint64_t v57 = *(void (**)(char *, uint64_t))(v14 + 8);
    v57(v16, v13);
    swift_getAssociatedTypeWitness();
    uint64_t v28 = v25;
    uint64_t v29 = swift_getAssociatedConformanceWitness();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    uint64_t v31 = swift_checkMetadataState();
    uint64_t v32 = v67;
    v30(v31, v29);
    uint64_t v33 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v32, 1, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v61);
      uint64_t v35 = v62;
      uint64_t v34 = v63;
      uint64_t v36 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v25, v77);
      type metadata accessor for DecodingError();
      uint64_t v37 = swift_allocError();
      v64(v36);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v34 + 8);
      uint64_t v17 = v34 + 8;
      v38(v35, v36);
      uint64_t v78 = v37;
      swift_willThrow();
      return v17;
    }
    uint64_t v48 = v58;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v58, v32, v33);
    uint64_t v49 = v28;
    uint64_t v50 = v74;
    uint64_t v17 = v74 + 80;
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 80);
    swift_unknownObjectRetain();
    uint64_t v52 = v48;
    uint64_t v53 = swift_checkMetadataState();
    uint64_t v54 = v78;
    v51(v48, v53, v50);
    uint64_t v78 = v54;
    if (v54)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v48, v33);
      swift_unknownObjectRelease();
      return v17;
    }
    uint64_t v25 = v49;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v52, v33);
    swift_unknownObjectRelease();
    uint64_t v17 = v65;
    v57((char *)v65, v66);
    uint64_t v39 = v69;
    uint64_t v40 = v70;
    uint64_t v16 = v59;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v17, v59, v69);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v17, 0, 1, v39);
  }
  else
  {
    uint64_t v39 = v69;
    uint64_t v40 = v70;
  }
  uint64_t v41 = v77;
  uint64_t v42 = v71;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v71, v16, v39);
  uint64_t v43 = *(int *)(v41 + 48);
  uint64_t v44 = *(void *)(v25 + v43);
  uint64_t v45 = v78;
  uint64_t v46 = v73(v42, *(void *)(v25 + *(int *)(v41 + 52)), v44, 0, 0, 2);
  uint64_t v78 = v45;
  uint64_t v47 = v72;
  if (!v45)
  {
    uint64_t v17 = v46;
    *(void *)(v25 + v43) = v44 + 1;
    uint64_t v55 = v65;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v65, v66);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v55, 1, 1, v39);
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
  return v17;
}

uint64_t _PlistUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v129 = a4;
  uint64_t v6 = v5;
  uint64_t v117 = a5;
  uint64_t v118 = a1;
  uint64_t v128 = a2;
  uint64_t v8 = a2 - 8;
  uint64_t v102 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v101 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v10 = *(void *)(v8 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v115 = v11;
  uint64_t v116 = v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v99 = type metadata accessor for Optional();
  uint64_t v98 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  uint64_t v126 = (char *)&v96 - v14;
  uint64_t v107 = (void *)AssociatedTypeWitness;
  uint64_t v105 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v100 = (char *)&v96 - v16;
  uint64_t v106 = AssociatedConformanceWitness;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  unint64_t v114 = (char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  char v113 = (char *)&v96 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v96 - v24;
  uint64_t v26 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v108 = (char *)&v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  char v120 = (char *)&v96 - v30;
  MEMORY[0x1F4188790](v31);
  int64_t v104 = (char *)&v96 - v32;
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v96 - v34;
  uint64_t v119 = a3;
  uint64_t v37 = v36;
  uint64_t v97 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v38 = *(int *)(v8 + 48);
  uint64_t v39 = v17;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  unint64_t v103 = (char *)v6 + v38;
  unint64_t v111 = v40;
  uint64_t v112 = v19 + 16;
  ((void (*)(char *))v40)(v25);
  uint64_t v41 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v26 + 48);
  uint64_t v110 = v26 + 48;
  Swift::Int v109 = v41;
  unsigned int v42 = v41((unint64_t)v25, 1, v17);
  uint64_t v122 = v17;
  uint64_t v123 = v6;
  uint64_t v124 = v37;
  uint64_t v125 = v26;
  id v121 = v35;
  uint64_t v127 = v19;
  if (v42 == 1)
  {
    uint64_t v96 = *(void (**)(char *, uint64_t))(v19 + 8);
    v96(v25, v37);
    uint64_t v43 = v106;
    swift_getAssociatedTypeWitness();
    uint64_t v44 = swift_getAssociatedConformanceWitness();
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v44 + 16);
    uint64_t v46 = swift_checkMetadataState();
    uint64_t v47 = v126;
    v45(v46, v44);
    uint64_t v48 = v105;
    uint64_t v49 = v47;
    uint64_t v50 = v107;
    if ((*(unsigned int (**)(char *, uint64_t, void *))(v105 + 48))(v49, 1, v107) == 1)
    {
      (*(void (**)(char *, uint64_t))(v98 + 8))(v126, v99);
      uint64_t v51 = v102;
      uint64_t v52 = v101;
      uint64_t v53 = v128;
      (*(void (**)(char *, void *, uint64_t))(v102 + 16))(v101, v123, v128);
      type metadata accessor for DecodingError();
      uint64_t v54 = swift_allocError();
      _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v97, v53, v97, v55);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
      uint64_t v130 = v54;
      return swift_willThrow();
    }
    uint64_t v66 = v100;
    (*(void (**)(char *, char *, void *))(v48 + 32))(v100, v126, v50);
    uint64_t v67 = v123;
    uint64_t v126 = *(char **)(v43 + 80);
    swift_unknownObjectRetain();
    uint64_t v68 = v66;
    uint64_t v69 = swift_checkMetadataState();
    uint64_t v70 = v130;
    ((void (*)(char *, uint64_t, uint64_t))v126)(v66, v69, v43);
    uint64_t v130 = v70;
    if (v70)
    {
      (*(void (**)(char *, void *))(v48 + 8))(v66, v50);
      return swift_unknownObjectRelease();
    }
    uint64_t v6 = v67;
    (*(void (**)(char *, void *))(v48 + 8))(v68, v50);
    swift_unknownObjectRelease();
    uint64_t v93 = v103;
    v96(v103, v124);
    uint64_t v94 = v125;
    unint64_t v95 = v104;
    uint64_t v39 = v122;
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v93, v104, v122);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v93, 0, 1, v39);
    uint64_t v57 = (uint64_t)v121;
    uint64_t v126 = *(char **)(v94 + 32);
    ((void (*)(char *, char *, uint64_t))v126)(v121, v95, v39);
  }
  else
  {
    uint64_t v126 = *(char **)(v26 + 32);
    ((void (*)(char *, char *, uint64_t))v126)(v35, v25, v17);
    uint64_t v57 = (uint64_t)v35;
  }
  uint64_t v58 = *v6;
  unint64_t v59 = *(void *)((char *)v6 + *(int *)(v128 + 52));
  int64_t v104 = (char *)*(int *)(v128 + 48);
  uint64_t v60 = *(void *)&v104[(void)v6];
  uint64_t v61 = (void *)swift_allocObject();
  v61[5] = &type metadata for _CodingKey;
  v61[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v62 = swift_allocObject();
  v61[2] = v62;
  *(void *)(v62 + 24) = 0;
  *(void *)(v62 + 32) = 0;
  *(void *)(v62 + 16) = v60;
  *(unsigned char *)(v62 + 40) = 2;
  v61[7] = v59;
  if (v59 >> 62)
  {
    uint64_t v63 = 0;
    uint64_t v64 = v120;
    if (v59 >> 62 != 1) {
      goto LABEL_12;
    }
    uint64_t v65 = (uint64_t *)((v59 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v65 = (uint64_t *)(v59 + 64);
    uint64_t v64 = v120;
  }
  uint64_t v63 = *v65;
  swift_retain_n();
LABEL_12:
  if (__OFADD__(v63, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  void v61[8] = v63 + 1;
  swift_retain();
  swift_release();
  uint64_t v128 = *(void *)(v58 + 40);
  *(void *)(v58 + 40) = v61;
  uint64_t v60 = v58 + 16;
  uint64_t v71 = type metadata accessor for _PlistDecodingStorage();
  swift_retain();
  char v120 = (char *)(v58 + 16);
  specialized _PlistDecodingStorage.push(container:)(v57, v71);
  uint64_t v72 = *(void *)(v58 + 16);
  swift_bridgeObjectRetain_n();
  swift_retain();
  unint64_t v59 = MEMORY[0x185302620](v72, v39);
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v107 = v61;
  uint64_t v131 = v72;
  uint64_t v73 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v75 = v113;
  uint64_t v106 = v73;
  uint64_t v105 = WitnessTable;
  BidirectionalCollection.last.getter();
  unint64_t v59 = (unint64_t)v114;
  uint64_t v60 = v124;
  v111(v114, v75, v124);
  if (v109(v59, 1, v39) == 1)
  {
LABEL_26:
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v127 + 8))(v59, v60);
    __break(1u);
    return result;
  }
  ((void (*)(char *, unint64_t, uint64_t))v126)(v64, v59, v39);
  unint64_t v59 = (unint64_t)v64;
  uint64_t v76 = v127 + 8;
  uint64_t v126 = *(char **)(v127 + 8);
  ((void (*)(char *, uint64_t))v126)(v75, v60);
  swift_bridgeObjectRelease();
  uint64_t v77 = *(void *)(v58 + 40);
  uint64_t v78 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 24);
  swift_retain();
  uint64_t v79 = v77;
  uint64_t v80 = v130;
  v78(v118, v59, v58, v79, v119, v129);
  uint64_t v130 = v80;
  if (v80)
  {
    uint64_t v81 = *(void (**)(unint64_t, uint64_t))(v125 + 8);
    uint64_t v82 = v122;
    v81(v59, v122);
    swift_release();
    swift_release();
    *(void *)(v58 + 40) = v128;
    swift_retain();
    swift_release();
    uint64_t v60 = *(void *)(v58 + 16);
    uint64_t v83 = swift_bridgeObjectRetain();
    uint64_t v84 = MEMORY[0x185302620](v83, v82);
    swift_bridgeObjectRelease();
    if (v84)
    {
      swift_getWitnessTable();
      uint64_t v85 = v108;
      RangeReplaceableCollection<>.removeLast()();
      v81((unint64_t)v85, v82);
      swift_release();
      v81((unint64_t)v121, v82);
      swift_release();
      return swift_release();
    }
    goto LABEL_24;
  }
  uint64_t v127 = v76;
  uint64_t v86 = v122;
  uint64_t v87 = *(void (**)(unint64_t, uint64_t))(v125 + 8);
  v87(v59, v122);
  swift_release();
  swift_release();
  *(void *)(v58 + 40) = v128;
  swift_retain();
  swift_release();
  uint64_t v60 = *(void *)(v58 + 16);
  uint64_t v88 = swift_bridgeObjectRetain();
  uint64_t v89 = MEMORY[0x185302620](v88, v86);
  swift_bridgeObjectRelease();
  if (!v89)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  swift_getWitnessTable();
  uint64_t v90 = v108;
  RangeReplaceableCollection<>.removeLast()();
  v87((unint64_t)v90, v86);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v91 = v124;
  ++*(void *)&v104[(void)v123];
  int64_t v92 = v103;
  ((void (*)(char *, uint64_t))v126)(v103, v91);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v125 + 56))(v92, 1, 1, v86);
  return ((uint64_t (*)(char *, uint64_t))v87)(v121, v86);
}

uint64_t _PlistUnkeyedDecodingContainer.nestedUnkeyedContainer()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v92 = a2;
  uint64_t v96 = a1;
  uint64_t v4 = a1 - 8;
  uint64_t v86 = *(void **)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v85 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v82 = *(void *)(v8 - 8);
  uint64_t v83 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v77 - v9;
  uint64_t v90 = AssociatedTypeWitness;
  uint64_t v89 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v84 = (char *)&v77 - v12;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v77 - v16;
  uint64_t v18 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v91 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v81 = (char *)&v77 - v22;
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v94 = (char *)&v77 - v25;
  uint64_t v26 = *(int *)(v4 + 48);
  uint64_t v28 = v27;
  uint64_t v29 = *(void (**)(char *, double))(v15 + 16);
  uint64_t v87 = (char *)v3 + v26;
  v29(v17, v24);
  uint64_t v95 = v18;
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v93 = v13;
  int v31 = v30(v17, 1, v13);
  uint64_t v88 = v28;
  uint64_t v80 = v15;
  if (v31 == 1)
  {
    uint64_t v78 = *(void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v79 = v15 + 8;
    v78(v17, v28);
    swift_getAssociatedTypeWitness();
    uint64_t v32 = swift_getAssociatedConformanceWitness();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v32 + 16);
    uint64_t v34 = swift_checkMetadataState();
    v33(v34, v32);
    uint64_t v36 = v89;
    uint64_t v35 = v90;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v10, 1, v90) == 1)
    {
      (*(void (**)(char *, uint64_t))(v82 + 8))(v10, v83);
      uint64_t v37 = v85;
      uint64_t v38 = v86;
      uint64_t v39 = v96;
      ((void (*)(char *, void *, uint64_t))v86[2])(v85, v3, v96);
      type metadata accessor for DecodingError();
      uint64_t v40 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v39, v41);
      ((void (*)(char *, uint64_t))v38[1])(v37, v39);
      uint64_t v97 = v40;
      return swift_willThrow();
    }
    uint64_t v44 = v96;
    uint64_t v55 = v3;
    uint64_t v56 = v84;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v84, v10, v35);
    uint64_t v86 = v55;
    uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v58 = swift_checkMetadataState();
    unint64_t v59 = v81;
    uint64_t v60 = v97;
    v57(v56, v58, AssociatedConformanceWitness);
    uint64_t v97 = v60;
    if (v60)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v56, v35);
      return swift_unknownObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v56, v35);
    swift_unknownObjectRelease();
    uint64_t v76 = v87;
    v78(v87, v88);
    uint64_t v43 = v95;
    uint64_t v45 = v93;
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v76, v59, v93);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v76, 0, 1, v45);
    uint64_t v46 = v86;
  }
  else
  {
    uint64_t v43 = v95;
    uint64_t v44 = v96;
    uint64_t v45 = v93;
    uint64_t v46 = v3;
  }
  uint64_t v47 = v94;
  (*(void (**)(void))(v43 + 32))();
  uint64_t v48 = *v46;
  unint64_t v49 = *(uint64_t *)((char *)v46 + *(int *)(v44 + 52));
  uint64_t v96 = *(int *)(v44 + 48);
  uint64_t v50 = *(uint64_t *)((char *)v46 + v96);
  uint64_t v51 = (void *)swift_allocObject();
  v51[5] = &type metadata for _CodingKey;
  v51[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  _OWORD v51[2] = result;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = v50;
  *(unsigned char *)(result + 40) = 2;
  v51[7] = v49;
  if (v49 >> 62)
  {
    uint64_t v52 = 0;
    uint64_t v53 = (uint64_t)v47;
    if (v49 >> 62 != 1) {
      goto LABEL_12;
    }
    uint64_t v54 = (uint64_t *)((v49 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v54 = (uint64_t *)(v49 + 64);
    uint64_t v53 = (uint64_t)v47;
  }
  uint64_t v52 = *v54;
  uint64_t result = swift_retain_n();
LABEL_12:
  if (__OFADD__(v52, 1))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v51[8] = v52 + 1;
  swift_retain();
  swift_release();
  uint64_t v61 = *(void *)(v48 + 40);
  *(void *)(v48 + 40) = v51;
  uint64_t v62 = type metadata accessor for _PlistDecodingStorage();
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v53, v62);
  swift_retain();
  uint64_t v63 = v97;
  _PlistDecoder.unkeyedContainer()(v92);
  uint64_t v97 = v63;
  if (v63)
  {
    swift_release();
    *(void *)(v48 + 40) = v61;
    swift_retain();
    swift_release();
    uint64_t v64 = swift_bridgeObjectRetain();
    uint64_t v65 = v45;
    uint64_t v66 = MEMORY[0x185302620](v64, v45);
    uint64_t result = swift_bridgeObjectRelease();
    if (v66)
    {
      type metadata accessor for Array();
      swift_getWitnessTable();
      swift_getWitnessTable();
      uint64_t v67 = v91;
      RangeReplaceableCollection<>.removeLast()();
      uint64_t v68 = *(void (**)(char *, uint64_t))(v95 + 8);
      v68(v67, v65);
      swift_release();
      v68((char *)v53, v65);
      swift_release();
      return swift_release();
    }
    goto LABEL_21;
  }
  swift_release();
  *(void *)(v48 + 40) = v61;
  uint64_t v93 = v61 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_release();
  uint64_t v69 = swift_bridgeObjectRetain();
  uint64_t v70 = v45;
  uint64_t v71 = MEMORY[0x185302620](v69, v45);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v71)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  type metadata accessor for Array();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v72 = v91;
  RangeReplaceableCollection<>.removeLast()();
  uint64_t v73 = v95;
  uint64_t v74 = *(void (**)(char *, uint64_t))(v95 + 8);
  v74(v72, v70);
  swift_release();
  swift_release();
  swift_release();
  ++*(uint64_t *)((char *)v46 + v96);
  uint64_t v75 = v87;
  (*(void (**)(char *, uint64_t))(v80 + 8))(v87, v88);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56))(v75, 1, 1, v70);
  return ((uint64_t (*)(char *, uint64_t))v74)(v47, v70);
}

uint64_t _PlistUnkeyedDecodingContainer.superDecoder()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v69 = a2;
  uint64_t v83 = a1;
  uint64_t v4 = a1 - 8;
  uint64_t v75 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v74 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v4 + 24);
  uint64_t v6 = *(void *)(v4 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v79 = v7;
  uint64_t v80 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v70 = *(void *)(v10 - 8);
  uint64_t v71 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v66 - v11;
  uint64_t v78 = AssociatedTypeWitness;
  uint64_t v82 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v73 = (char *)v66 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v66 - v18;
  uint64_t v20 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v72 = (char *)v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v84 = (uint64_t)v66 - v25;
  uint64_t v26 = *(int *)(v4 + 48);
  uint64_t v28 = v27;
  uint64_t v29 = *(void (**)(char *, double))(v17 + 16);
  uint64_t v76 = v3 + v26;
  v29(v19, v24);
  uint64_t v85 = v20;
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v15);
  uint64_t v81 = v3;
  uint64_t v77 = v28;
  if (v30 != 1)
  {
    uint64_t v41 = v19;
    uint64_t v42 = v83;
    uint64_t v43 = v17;
    goto LABEL_5;
  }
  uint64_t v67 = v17;
  uint64_t v68 = v15;
  v66[0] = *(void *)(v17 + 8);
  v66[1] = v17 + 8;
  ((void (*)(char *, uint64_t))v66[0])(v19, v28);
  uint64_t v31 = v83;
  swift_getAssociatedTypeWitness();
  uint64_t v32 = swift_getAssociatedConformanceWitness();
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v32 + 16);
  uint64_t v34 = swift_checkMetadataState();
  v33(v34, v32);
  uint64_t v35 = v78;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v12, 1, v78) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v12, v71);
    uint64_t v36 = v74;
    uint64_t v37 = v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, v81, v31);
    type metadata accessor for DecodingError();
    uint64_t v38 = swift_allocError();
    specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v31, v39);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v31);
    uint64_t v86 = v38;
    return swift_willThrow();
  }
  uint64_t v42 = v31;
  uint64_t v44 = v73;
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v73, v12, v35);
  uint64_t v3 = v81;
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
  swift_unknownObjectRetain();
  uint64_t v51 = swift_checkMetadataState();
  uint64_t v45 = (uint64_t)v72;
  uint64_t v52 = v86;
  v50(v44, v51, AssociatedConformanceWitness);
  uint64_t v86 = v52;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v44, v35);
    return swift_unknownObjectRelease();
  }
  while (1)
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v44, v35);
    swift_unknownObjectRelease();
    uint64_t v64 = v76;
    ((void (*)(uint64_t, uint64_t))v66[0])(v76, v77);
    uint64_t v65 = v85;
    uint64_t v15 = v68;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v64, v45, v68);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v64, 0, 1, v15);
    uint64_t v43 = v67;
    uint64_t v41 = (char *)v45;
LABEL_5:
    uint64_t v44 = (char *)v15;
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v84, v41, v15);
    uint64_t v45 = *(void *)(*(void *)v3 + 24);
    uint64_t v46 = *(void *)(*(void *)v3 + 32);
    uint64_t v35 = *(int *)(v42 + 48);
    unint64_t v47 = *(void *)(v3 + *(int *)(v42 + 52));
    uint64_t v3 = *(void *)(v3 + v35);
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v3;
    *(void *)(v48 + 24) = v47;
    if (v47 >> 62) {
      break;
    }
    unint64_t v49 = (uint64_t *)(v47 + 64);
LABEL_11:
    uint64_t v53 = *v49;
    swift_retain();
    uint64_t v54 = v53 + 1;
    if (!__OFADD__(v53, 1)) {
      goto LABEL_12;
    }
    __break(1u);
  }
  if (v47 >> 62 == 1)
  {
    unint64_t v49 = (uint64_t *)((v47 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }
  uint64_t v54 = 1;
LABEL_12:
  *(void *)(v48 + 32) = v54;
  uint64_t v55 = type metadata accessor for _PlistDecoder();
  uint64_t v56 = swift_allocObject();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v57 = v48 | 0x4000000000000000;
  uint64_t v58 = v86;
  _PlistDecoder.init(referencing:options:codingPathNode:)(v45, v46, v57);
  uint64_t v86 = v58;
  if (v58) {
    return (*(uint64_t (**)(uint64_t, char *))(v85 + 8))(v84, v44);
  }
  uint64_t v59 = type metadata accessor for _PlistDecodingStorage();
  uint64_t v60 = v84;
  specialized _PlistDecodingStorage.push(container:)(v84, v59);
  *(void *)(v81 + v35) = v3 + 1;
  uint64_t v61 = v76;
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v76, v77);
  uint64_t v62 = v85;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v85 + 56))(v61, 1, 1, v44);
  uint64_t v63 = v69;
  v69[3] = v55;
  v63[4] = swift_getWitnessTable();
  *uint64_t v63 = v56;
  return (*(uint64_t (**)(uint64_t, char *))(v62 + 8))(v60, v44);
}

uint64_t protocol witness for UnkeyedDecodingContainer.codingPath.getter in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return _CodingPathNode.path.getter(*(void *)(v1 + *(int *)(a1 + 52)));
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 48));
}

BOOL protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance _PlistUnkeyedDecodingContainer<A>()
{
  return _PlistUnkeyedDecodingContainer.decodeNil()();
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1) & 1;
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (void (*)(uint64_t))specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (void (*)(uint64_t))specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (void (*)(uint64_t))specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (void (*)(uint64_t))specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (void (*)(uint64_t))specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (void (*)(uint64_t))specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (void (*)(uint64_t))specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (void (*)(uint64_t))specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (void (*)(uint64_t))specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (void (*)(uint64_t))specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

char *protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1);
}

double protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1);
}

float protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance _PlistUnkeyedDecodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return _PlistUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance _PlistUnkeyedDecodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _PlistUnkeyedDecodingContainer.nestedUnkeyedContainer()(a1, a2);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance _PlistUnkeyedDecodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _PlistUnkeyedDecodingContainer.superDecoder()(a1, a2);
}

uint64_t sub_181E95940()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_181E95984()
{
  outlined consume of _CodingKey(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 41, 7);
}

uint64_t outlined consume of _CodingKey?(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1) {
    return outlined consume of _CodingKey(a1, a2, a3, a4);
  }
  return a1;
}

void *assignWithCopy for _PlistKeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _PlistKeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PlistUnkeyedDecodingContainer(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = a2;
  uint64_t v10 = v8;
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v7 + v12;
  if (*(_DWORD *)(v11 + 84)) {
    size_t v14 = *(void *)(v11 + 64);
  }
  else {
    size_t v14 = *(void *)(v11 + 64) + 1;
  }
  int v15 = (*(_DWORD *)(v11 + 80) | v5) & 0x100000;
  uint64_t v16 = *v9;
  *a1 = *v9;
  if ((v12 | (unint64_t)v5) > 7
    || v15 != 0
    || ((((((v13 + ((v5 + 8) & ~(unint64_t)v5)) & ~v12) + v14 + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v19 = (uint64_t *)(v16
                    + (((v12 | v5) & 0xF8 ^ 0x1F8) & ((v12 | v5) + 16)));
  }
  else
  {
    uint64_t v20 = ~v12;
    uint64_t v21 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v22 = ((unint64_t)v9 + v6 + 8) & ~v6;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    v23(v21, v22, AssociatedTypeWitness);
    double v24 = (void *)((v21 + v13) & v20);
    uint64_t v25 = (v22 + v13) & v20;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))((v22 + v13) & v20, 1, v10))
    {
      memcpy(v24, (const void *)((v22 + v13) & v20), v14);
    }
    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v11 + 16))(v24, (v22 + v13) & v20, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
    }
    unint64_t v26 = ((unint64_t)v24 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = (v25 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v28 = *(void *)v27;
    *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
    *(void *)unint64_t v26 = v28;
    uint64_t v29 = (void *)(((unint64_t)v24 + v14 + 23) & 0xFFFFFFFFFFFFFFF8);
    int v30 = (void *)((v25 + v14 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v29 = *v30;
    *(void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = a1;
  }
  swift_retain();
  return v19;
}

uint64_t destroy for _PlistUnkeyedDecodingContainer(uint64_t a1)
{
  swift_release();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = v3 + 8;
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v4 + 56);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (v5 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7)) {
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  }

  return swift_release();
}

void *initializeWithCopy for _PlistUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v31 = a1;
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  swift_retain();
  v6(v9, v10, AssociatedTypeWitness);
  uint64_t v11 = *(void *)(v7 + 48);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  int v15 = (char *)((v11 + v14 + v9) & ~v14);
  uint64_t v16 = (char *)((v11 + v14 + v10) & ~v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12))
  {
    int v17 = *(_DWORD *)(v13 + 84);
    size_t v18 = *(void *)(v13 + 64);
    if (v17) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v18 + 1;
    }
    memcpy(v15, v16, v19);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v16, v12);
    uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
    uint64_t v20 = v13 + 56;
    v21(v15, 0, 1, v12);
    int v17 = *(_DWORD *)(v20 + 28);
    size_t v18 = *(void *)(v20 + 8);
  }
  if (v17) {
    size_t v22 = v18;
  }
  else {
    size_t v22 = v18 + 1;
  }
  uint64_t v23 = &v15[v22];
  double v24 = &v16[v22];
  unint64_t v25 = (unint64_t)(v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  *(void *)unint64_t v25 = v27;
  uint64_t v28 = (void *)((unint64_t)(v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)((unint64_t)(v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v29;
  *(void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return v31;
}

void *assignWithCopy for _PlistUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v6 + 40);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (char *)((v10 + v13 + v8) & ~v13);
  int v15 = (char *)((v10 + v13 + v9) & ~v13);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v17 = v16(v14, 1, v11);
  int v18 = v16(v15, 1, v11);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v15, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      goto LABEL_12;
    }
    int v19 = *(_DWORD *)(v12 + 84);
    size_t v20 = *(void *)(v12 + 64);
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v14, v15, v11);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    int v19 = *(_DWORD *)(v12 + 84);
    size_t v20 = *(void *)(v12 + 64);
  }
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  memcpy(v14, v15, v21);
LABEL_12:
  if (*(_DWORD *)(v12 + 84)) {
    uint64_t v22 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v22 = *(void *)(v12 + 64) + 1;
  }
  uint64_t v23 = &v14[v22];
  double v24 = &v15[v22];
  unint64_t v25 = (unint64_t)(v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v27 = *(unsigned char *)(v26 + 8);
  *(void *)unint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = v27;
  uint64_t v28 = (void *)((unint64_t)(v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)((unint64_t)(v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v29;
  *(void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for _PlistUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v10 + v13;
  int v15 = (char *)((v10 + v13 + v8) & ~v13);
  uint64_t v16 = (char *)((v14 + v9) & ~v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
  {
    int v17 = *(_DWORD *)(v12 + 84);
    uint64_t v18 = *(void *)(v12 + 64);
    if (v17) {
      size_t v19 = *(void *)(v12 + 64);
    }
    else {
      size_t v19 = v18 + 1;
    }
    memcpy(v15, v16, v19);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v16, v11);
    size_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
    uint64_t v20 = v12 + 56;
    v21(v15, 0, 1, v11);
    int v17 = *(_DWORD *)(v20 + 28);
    uint64_t v18 = *(void *)(v20 + 8);
  }
  if (v17) {
    uint64_t v22 = v18;
  }
  else {
    uint64_t v22 = v18 + 1;
  }
  uint64_t v23 = &v15[v22];
  double v24 = &v16[v22];
  unint64_t v25 = (unint64_t)(v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  *(void *)unint64_t v25 = v27;
  uint64_t v28 = (void *)((unint64_t)(v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)((unint64_t)(v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v29;
  *(void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for _PlistUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v10 + v13;
  int v15 = (char *)((v10 + v13 + v8) & ~v13);
  uint64_t v16 = (char *)((v14 + v9) & ~v13);
  int v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v18 = v17(v15, 1, v11);
  int v19 = v17(v16, 1, v11);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)(v12 + 84);
    size_t v21 = *(void *)(v12 + 64);
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v15, v16, v11);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    int v20 = *(_DWORD *)(v12 + 84);
    size_t v21 = *(void *)(v12 + 64);
  }
  if (v20) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = v21 + 1;
  }
  memcpy(v15, v16, v22);
LABEL_12:
  if (*(_DWORD *)(v12 + 84)) {
    uint64_t v23 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v23 = *(void *)(v12 + 64) + 1;
  }
  double v24 = &v15[v23];
  unint64_t v25 = &v16[v23];
  unint64_t v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (unint64_t)(v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v28 = *(unsigned char *)(v27 + 8);
  *(void *)unint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = v28;
  uint64_t v29 = (void *)((unint64_t)(v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v30 = (void *)((unint64_t)(v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v29 = *v30;
  *(void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _PlistUnkeyedDecodingContainer(_DWORD *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  unsigned int v10 = v9 - 1;
  if (!v9) {
    unsigned int v10 = 0;
  }
  if (v6 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v6;
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = *(void *)(v5 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = *(void *)(v7 + 64);
  uint64_t v17 = 23;
  if (!v9) {
    uint64_t v17 = 24;
  }
  if (!a2) {
    return 0;
  }
  if (v12 < a2)
  {
    unint64_t v18 = ((((v17 + v16 + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    uint64_t v19 = v18 & 0xFFFFFFF8;
    if ((v18 & 0xFFFFFFF8) != 0) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = a2 - v12 + 1;
    }
    if (v20 >= 0x10000) {
      unsigned int v21 = 4;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v20 < 0x100) {
      unsigned int v21 = 1;
    }
    if (v20 >= 2) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    switch(v22)
    {
      case 1:
        int v23 = *((unsigned __int8 *)a1 + v18);
        if (!v23) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v23 = *(unsigned __int16 *)((char *)a1 + v18);
        if (v23) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181E96D48);
      case 4:
        int v23 = *(_DWORD *)((char *)a1 + v18);
        if (!v23) {
          break;
        }
LABEL_28:
        int v24 = v23 - 1;
        if (v19)
        {
          int v24 = 0;
          LODWORD(v19) = *a1;
        }
        return v12 + (v19 | v24) + 1;
      default:
        break;
    }
  }
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v26 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v26) = -1;
    }
    return (v26 + 1);
  }
  uint64_t v27 = ((unint64_t)a1 + v13 + 8) & ~v13;
  if (v6 != v12)
  {
    if (v9 >= 2)
    {
      unsigned int v29 = (*(uint64_t (**)(uint64_t))(v8 + 48))((v27 + v14 + v15) & ~v15);
      if (v29 >= 2) {
        return v29 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  char v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);

  return v28(v27, v6, AssociatedTypeWitness);
}

void storeEnumTagSinglePayload for _PlistUnkeyedDecodingContainer(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  int v9 = 0;
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12) {
    unsigned int v13 = v12 - 1;
  }
  else {
    unsigned int v13 = 0;
  }
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = *(void *)(v7 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = *(void *)(v10 + 64);
  if (v8 <= v13) {
    unsigned int v18 = v13;
  }
  else {
    unsigned int v18 = v8;
  }
  if (v18 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = v18;
  }
  uint64_t v20 = 23;
  if (!v12) {
    uint64_t v20 = 24;
  }
  size_t v21 = ((((v20 + v17 + ((v15 + v16 + ((v14 + 8) & ~v14)) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v19 < a3)
  {
    if (((((v20
           + v17
           + ((v15 + v16 + ((v14 + 8) & ~v14)) & ~v16)) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v22 = a3 - v19 + 1;
    else {
      unsigned int v22 = 2;
    }
    if (v22 >= 0x10000) {
      int v23 = 4;
    }
    else {
      int v23 = 2;
    }
    if (v22 < 0x100) {
      int v23 = 1;
    }
    if (v22 >= 2) {
      int v9 = v23;
    }
    else {
      int v9 = 0;
    }
  }
  if (a2 > v19)
  {
    if (v21) {
      int v24 = 1;
    }
    else {
      int v24 = a2 - v19;
    }
    if (v21)
    {
      int v25 = ~v19 + a2;
      bzero(a1, v21);
      *a1 = v25;
    }
    switch(v9)
    {
      case 1:
        *((unsigned char *)a1 + v21) = v24;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v21) = v24;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)((char *)a1 + v21) = v24;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      *((unsigned char *)a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)((char *)a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x181E970E8);
    case 4:
      *(_DWORD *)((char *)a1 + v21) = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (a2)
      {
LABEL_39:
        if ((v18 & 0x80000000) != 0)
        {
          uint64_t v27 = ((unint64_t)a1 + v14 + 8) & ~v14;
          if (v8 == v19)
          {
            char v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
            v28(v27, a2, v8, AssociatedTypeWitness);
          }
          else if (v12 >= 2)
          {
            uint64_t v29 = (v27 + v15 + v16) & ~v16;
            int v30 = *(void (**)(uint64_t, void))(v11 + 56);
            v30(v29, (a2 + 1));
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v26 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v26 = (a2 - 1);
          }
          *(void *)a1 = v26;
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for KeyedDecodingContainerProtocol.Key : CodingKey in _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t sub_181E97118()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t Date.FormatString.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static Date.FormatString.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int Date.FormatString.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatString()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatString()
{
  return Hasher._finalize()();
}

void *Date.FormatString.init(stringInterpolation:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t Date.FormatString.init(stringLiteral:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v4 = result;
  uint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    Swift::String_optional v8 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v8.value._countAndFlagsBits;
    if (v8.value._object)
    {
      object = v8.value._object;
      do
      {
        if (countAndFlagsBits == 39 && object == (void *)0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v10 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type String and conformance String();
            lazy protocol witness table accessor for type String and conformance String();
            RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
            String.append(_:)(v15);
            swift_bridgeObjectRelease();
            v14._uint64_t countAndFlagsBits = 39;
            v14._object = (void *)0xE100000000000000;
            String.append(_:)(v14);
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v4 = 39;
            unint64_t v3 = 0xE100000000000000;
            goto LABEL_14;
          }
        }
        Swift::String_optional v11 = String.Iterator.next()();
        uint64_t countAndFlagsBits = v11.value._countAndFlagsBits;
        object = v11.value._object;
      }
      while (v11.value._object);
    }
    swift_bridgeObjectRelease();
    uint64_t result = String.count.getter();
    if (result + 0x4000000000000000 >= 0)
    {
      uint64_t v4 = MEMORY[0x185302340](39, 0xE100000000000000, 2 * result);
      unint64_t v13 = v12;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v3 = v13;
      goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    *a3 = v4;
    a3[1] = v3;
  }
  return result;
}

void Date.FormatString.StringInterpolation.init(literalCapacity:interpolationCount:)(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

Swift::Void __swiftcall Date.FormatString.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v3 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0) {
    uint64_t v3 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  Swift::String_optional v5 = String.Iterator.next()();
  uint64_t v4 = v5.value._countAndFlagsBits;
  if (!v5.value._object)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v9 = String.count.getter();
    if (v9 + 0x4000000000000000 >= 0)
    {
      uint64_t countAndFlagsBits = MEMORY[0x185302340](39, 0xE100000000000000, 2 * v9);
      object = v10;
      goto LABEL_15;
    }
    __break(1u);
    return;
  }
  uint64_t v6 = v5.value._object;
  while (1)
  {
    if (v4 == 39 && v6 == (void *)0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      break;
    }
LABEL_7:
    Swift::String_optional v8 = String.Iterator.next()();
    uint64_t v4 = v8.value._countAndFlagsBits;
    uint64_t v6 = v8.value._object;
    if (!v8.value._object) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 39;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  uint64_t countAndFlagsBits = 39;
  object = (void *)0xE100000000000000;
LABEL_15:
  v12._uint64_t countAndFlagsBits = countAndFlagsBits;
  v12._object = object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(era:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t result = 71;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1195853639;
      goto LABEL_4;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      uint64_t result = 0x4747474747;
      goto LABEL_4;
    case 3:
      return result;
    default:
LABEL_4:
      unint64_t v4 = v2;
      String.append(_:)(*(Swift::String *)&result);
      return swift_bridgeObjectRelease();
  }
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(year:)(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  switch(*(unsigned char *)(result + 8))
  {
    case 0:
      if (v1 >= 10) {
        uint64_t v1 = 10;
      }
      if (v1 <= 1) {
        uint64_t v2 = 1;
      }
      else {
        uint64_t v2 = v1;
      }
      uint64_t v3 = 121;
      goto LABEL_20;
    case 1:
      if (v1 >= 10) {
        uint64_t v1 = 10;
      }
      if (v1 <= 1) {
        uint64_t v2 = 1;
      }
      else {
        uint64_t v2 = v1;
      }
      uint64_t v3 = 114;
      goto LABEL_20;
    case 2:
      if (v1 >= 10) {
        uint64_t v1 = 10;
      }
      if (v1 <= 1) {
        uint64_t v2 = 1;
      }
      else {
        uint64_t v2 = v1;
      }
      uint64_t v3 = 117;
LABEL_20:
      uint64_t v4 = MEMORY[0x185302340](v3, 0xE100000000000000, v2);
      unint64_t v6 = v5;
      goto LABEL_27;
    case 3:
      if (v1) {
        uint64_t v4 = 31097;
      }
      else {
        uint64_t v4 = 121;
      }
      if (v1) {
        unint64_t v6 = 0xE200000000000000;
      }
      else {
        unint64_t v6 = 0xE100000000000000;
      }
LABEL_27:
      unint64_t v7 = v6;
      String.append(_:)(*(Swift::String *)&v4);
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(yearForWeekOfYear:)(uint64_t result)
{
  if ((*(unsigned char *)(result + 9) & 1) == 0)
  {
    uint64_t v1 = *(void *)result;
    if (*(unsigned char *)(result + 8))
    {
      if (v1) {
        uint64_t v3 = 22873;
      }
      else {
        uint64_t v3 = 89;
      }
      if (v1) {
        unint64_t v5 = 0xE200000000000000;
      }
      else {
        unint64_t v5 = 0xE100000000000000;
      }
    }
    else
    {
      if (v1 >= 10) {
        uint64_t v1 = 10;
      }
      if (v1 <= 1) {
        uint64_t v2 = 1;
      }
      else {
        uint64_t v2 = v1;
      }
      uint64_t v3 = MEMORY[0x185302340](89, 0xE100000000000000, v2);
      unint64_t v5 = v4;
    }
    unint64_t v6 = v5;
    String.append(_:)(*(Swift::String *)&v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(cyclicYear:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t result = 85;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1431655765;
      goto LABEL_4;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      uint64_t result = 0x5555555555;
      goto LABEL_4;
    case 3:
      return result;
    default:
LABEL_4:
      unint64_t v4 = v2;
      String.append(_:)(*(Swift::String *)&result);
      return swift_bridgeObjectRelease();
  }
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(quarter:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t result = 81;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t result = 20817;
      goto LABEL_6;
    case 2:
      unint64_t v2 = 0xE300000000000000;
      uint64_t result = 5329233;
      goto LABEL_6;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1364283729;
      goto LABEL_6;
    case 4:
      unint64_t v2 = 0xE500000000000000;
      uint64_t result = 0x5151515151;
      goto LABEL_6;
    case 5:
      return result;
    default:
LABEL_6:
      unint64_t v4 = v2;
      String.append(_:)(*(Swift::String *)&result);
      return swift_bridgeObjectRelease();
  }
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(standaloneQuarter:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 113;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 29041;
      break;
    case 2:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 7434609;
      break;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1903260017;
      break;
    case 4:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x7171717171;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);

  return swift_bridgeObjectRelease();
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(month:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t result = 77;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t result = 19789;
      goto LABEL_6;
    case 2:
      unint64_t v2 = 0xE300000000000000;
      uint64_t result = 5066061;
      goto LABEL_6;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1296911693;
      goto LABEL_6;
    case 4:
      unint64_t v2 = 0xE500000000000000;
      uint64_t result = 0x4D4D4D4D4DLL;
      goto LABEL_6;
    case 5:
      return result;
    default:
LABEL_6:
      unint64_t v4 = v2;
      String.append(_:)(*(Swift::String *)&result);
      return swift_bridgeObjectRelease();
  }
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(standaloneMonth:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 76;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 19532;
      break;
    case 2:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 5000268;
      break;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1280068684;
      break;
    case 4:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x4C4C4C4C4CLL;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);

  return swift_bridgeObjectRelease();
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(week:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t result = 119;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t result = 30583;
      goto LABEL_4;
    case 2:
      uint64_t result = 87;
      goto LABEL_4;
    case 3:
      return result;
    default:
LABEL_4:
      unint64_t v4 = v2;
      String.append(_:)(*(Swift::String *)&result);
      return swift_bridgeObjectRelease();
  }
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(day:)(uint64_t result)
{
  if ((*(unsigned char *)(result + 9) & 1) == 0)
  {
    uint64_t v1 = *(void *)result;
    if (*(unsigned char *)(result + 8))
    {
      unint64_t v6 = 0xE200000000000000;
      uint64_t v7 = 25700;
      if (v1 != 1)
      {
        uint64_t v7 = 70;
        unint64_t v6 = 0xE100000000000000;
      }
      if (v1) {
        uint64_t v3 = v7;
      }
      else {
        uint64_t v3 = 100;
      }
      if (v1) {
        unint64_t v5 = v6;
      }
      else {
        unint64_t v5 = 0xE100000000000000;
      }
    }
    else
    {
      if (v1 >= 10) {
        uint64_t v1 = 10;
      }
      if (v1 <= 1) {
        uint64_t v2 = 1;
      }
      else {
        uint64_t v2 = v1;
      }
      uint64_t v3 = MEMORY[0x185302340](103, 0xE100000000000000, v2);
      unint64_t v5 = v4;
    }
    unint64_t v8 = v5;
    String.append(_:)(*(Swift::String *)&v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(dayOfYear:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t result = 68;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t result = 17476;
      goto LABEL_4;
    case 2:
      unint64_t v2 = 0xE300000000000000;
      uint64_t result = 4473924;
      goto LABEL_4;
    case 3:
      return result;
    default:
LABEL_4:
      unint64_t v4 = v2;
      String.append(_:)(*(Swift::String *)&result);
      return swift_bridgeObjectRelease();
  }
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(weekday:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE300000000000000;
  uint64_t result = 4539717;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1162167621;
      goto LABEL_7;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      uint64_t result = 0x4545454545;
      goto LABEL_7;
    case 3:
      unint64_t v2 = 0xE600000000000000;
      uint64_t result = 0x454545454545;
      goto LABEL_7;
    case 4:
      unint64_t v2 = 0xE100000000000000;
      uint64_t result = 101;
      goto LABEL_7;
    case 5:
      unint64_t v2 = 0xE200000000000000;
      uint64_t result = 25957;
      goto LABEL_7;
    case 6:
      return result;
    default:
LABEL_7:
      unint64_t v4 = v2;
      String.append(_:)(*(Swift::String *)&result);
      return swift_bridgeObjectRelease();
  }
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(standaloneWeekday:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 99;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 6513507;
      break;
    case 2:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1667457891;
      break;
    case 3:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6363636363;
      break;
    case 4:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x636363636363;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);

  return swift_bridgeObjectRelease();
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(dayPeriod:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t result = 97;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1633771873;
      goto LABEL_10;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      uint64_t result = 0x6161616161;
      goto LABEL_10;
    case 3:
      uint64_t result = 98;
      goto LABEL_10;
    case 4:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1650614882;
      goto LABEL_10;
    case 5:
      unint64_t v2 = 0xE500000000000000;
      uint64_t result = 0x6262626262;
      goto LABEL_10;
    case 6:
      uint64_t result = 66;
      goto LABEL_10;
    case 7:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1111638594;
      goto LABEL_10;
    case 8:
      unint64_t v2 = 0xE500000000000000;
      uint64_t result = 0x4242424242;
      goto LABEL_10;
    case 9:
      return result;
    default:
LABEL_10:
      unint64_t v4 = v2;
      String.append(_:)(*(Swift::String *)&result);
      return swift_bridgeObjectRelease();
  }
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(hour:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 104;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 26728;
      break;
    case 2:
      uint64_t v3 = 72;
      break;
    case 3:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 18504;
      break;
    case 4:
      uint64_t v3 = 75;
      break;
    case 5:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 19275;
      break;
    case 6:
      uint64_t v3 = 107;
      break;
    case 7:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 27499;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);

  return swift_bridgeObjectRelease();
}

unsigned __int8 *Date.FormatString.StringInterpolation.appendInterpolation(minute:)(unsigned __int8 *result)
{
  int v1 = *result;
  if (v1 != 2)
  {
    if (v1) {
      uint64_t v2 = 28013;
    }
    else {
      uint64_t v2 = 109;
    }
    if (v1) {
      unint64_t v3 = 0xE200000000000000;
    }
    else {
      unint64_t v3 = 0xE100000000000000;
    }
    unint64_t v4 = v3;
    String.append(_:)(*(Swift::String *)&v2);
    return (unsigned __int8 *)swift_bridgeObjectRelease();
  }
  return result;
}

unsigned __int8 *Date.FormatString.StringInterpolation.appendInterpolation(second:)(unsigned __int8 *result)
{
  int v1 = *result;
  if (v1 != 2)
  {
    if (v1) {
      uint64_t v2 = 29555;
    }
    else {
      uint64_t v2 = 115;
    }
    if (v1) {
      unint64_t v3 = 0xE200000000000000;
    }
    else {
      unint64_t v3 = 0xE100000000000000;
    }
    unint64_t v4 = v3;
    String.append(_:)(*(Swift::String *)&v2);
    return (unsigned __int8 *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(secondFraction:)(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 8);
  if (v1 != 255)
  {
    v2._uint64_t countAndFlagsBits = Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(*(void *)result, v1 & 1);
    String.append(_:)(v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(timeZone:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xE100000000000000;
  uint64_t result = 122;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 2054847098;
      goto LABEL_13;
    case 2:
      uint64_t result = 90;
      goto LABEL_13;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1515870810;
      goto LABEL_13;
    case 4:
      unint64_t v2 = 0xE500000000000000;
      uint64_t result = 0x5A5A5A5A5ALL;
      goto LABEL_13;
    case 5:
      uint64_t result = 79;
      goto LABEL_13;
    case 6:
      uint64_t result = 118;
      goto LABEL_13;
    case 7:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1987475062;
      goto LABEL_13;
    case 8:
      uint64_t result = 86;
      goto LABEL_13;
    case 9:
      unint64_t v2 = 0xE200000000000000;
      uint64_t result = 22102;
      goto LABEL_13;
    case 10:
      unint64_t v2 = 0xE300000000000000;
      uint64_t result = 5658198;
      goto LABEL_13;
    case 11:
      unint64_t v2 = 0xE400000000000000;
      uint64_t result = 1448498774;
      goto LABEL_13;
    case 12:
      return result;
    default:
LABEL_13:
      unint64_t v4 = v2;
      String.append(_:)(*(Swift::String *)&result);
      return swift_bridgeObjectRelease();
  }
}

unint64_t lazy protocol witness table accessor for type Date.FormatString and conformance Date.FormatString()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }
  return result;
}

void protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance Date.FormatString.StringInterpolation(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance Date.FormatString.StringInterpolation(Swift::String *a1)
{
}

unint64_t lazy protocol witness table accessor for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation;
  if (!lazy protocol witness table cache variable for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation);
  }
  return result;
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Date.FormatString@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatString.init(stringLiteral:)(*(void *)a1, *(void *)(a1 + 8), a2);
}

ValueMetadata *type metadata accessor for Date.FormatString()
{
  return &type metadata for Date.FormatString;
}

ValueMetadata *type metadata accessor for Date.FormatString.StringInterpolation()
{
  return &type metadata for Date.FormatString.StringInterpolation;
}

uint64_t base witness table accessor for Equatable in BufferViewIndex<A>()
{
  return swift_getWitnessTable();
}

void BufferViewIndex.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int BufferViewIndex.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BufferViewIndex<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184840](a1, a2, a3, WitnessTable);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BufferViewIndex<A>()
{
  return BufferViewIndex.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance BufferViewIndex<A>(int a1)
{
  BufferViewIndex.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BufferViewIndex<A>()
{
  Hasher.init(_seed:)();
  BufferViewIndex.hash(into:)((int)&v2, *v0);
  return Hasher._finalize()();
}

void *protocol witness for Strideable.distance(to:) in conformance BufferViewIndex<A>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 72);
  if (v4)
  {
    uint64_t v5 = *result - *v3;
    if (v5 != 0x8000000000000000 || v4 != -1)
    {
      *a3 = v5 / v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *protocol witness for Strideable.advanced(by:) in conformance BufferViewIndex<A>@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *v3 + *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 72) * *result;
  return result;
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance BufferViewIndex<A>()
{
  return static Strideable._step(after:from:by:)();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance BufferViewIndex<A>(void *a1, void *a2)
{
  return *a1 < *a2;
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance BufferViewIndex<A>()
{
  return MEMORY[0x1F4183768]();
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance BufferViewIndex<A>()
{
  return MEMORY[0x1F4183760]();
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance BufferViewIndex<A>()
{
  return MEMORY[0x1F4183758]();
}

uint64_t base witness table accessor for Comparable in BufferViewIndex<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for BufferViewIndex()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t NSGrammaticalPartOfSpeech.morphunValue()(unint64_t a1)
{
  if (a1 < 0xF) {
    return qword_182209408[a1];
  }
  if (a1 == 15) {
    return 0x6F4E7265706F7270;
  }
  return 0;
}

uint64_t NSGrammaticalCase.morphunValue()(unint64_t a1)
{
  if (a1 < 0xF) {
    return qword_1822094F8[a1];
  }
  if (a1 == 15) {
    return 0x656D757274736E69;
  }
  if (a1 == 16) {
    return 0x69746174696D6F63;
  }
  return 0;
}

uint64_t NSMorphology.morphunConstraints()()
{
  char v1 = (char)v0;
  uint64_t v68 = MEMORY[0x1E4FBC868];
  id v2 = objc_msgSend(v0, sel_grammaticalGender);
  uint64_t v3 = 0xE800000000000000;
  uint64_t v4 = 0x656E696E696D6566;
  switch((unint64_t)v2)
  {
    case 0uLL:
      goto LABEL_7;
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      uint64_t v4 = 0x6E696C756373616DLL;
      uint64_t v3 = 0xE900000000000065;
      goto LABEL_6;
    case 3uLL:
      uint64_t v3 = 0xE600000000000000;
      uint64_t v4 = 0x72657475656ELL;
      goto LABEL_6;
    default:
      if (v2 != (id)4) {
        goto LABEL_7;
      }
      uint64_t v3 = 0xE600000000000000;
      uint64_t v4 = 0x6E6F6D6D6F63;
LABEL_6:
      objc_msgSend(v0, sel_grammaticalGender);
      specialized Dictionary.subscript.setter(v4, v3, 0x7265646E6567, 0xE600000000000000);
LABEL_7:
      unint64_t v5 = (unint64_t)objc_msgSend(v0, sel_number) - 1;
      if (v5 <= 5 && ((0x3Du >> v5) & 1) != 0)
      {
        uint64_t v6 = 8 * v5;
        uint64_t v7 = *(void *)&aSingularplural[v6];
        uint64_t v8 = *(void *)((char *)&unk_182209618 + v6);
        objc_msgSend(v0, sel_number);
        specialized Dictionary.subscript.setter(v7, v8, 0x746E756F63, 0xE500000000000000);
      }
      uint64_t v9 = NSGrammaticalPartOfSpeech.morphunValue()((unint64_t)objc_msgSend(v0, sel_partOfSpeech));
      if (v10)
      {
        uint64_t v11 = v9;
        uint64_t v12 = v10;
        objc_msgSend(v0, sel_partOfSpeech);
        specialized Dictionary.subscript.setter(v11, v12, 7565168, 0xE300000000000000);
      }
      uint64_t v13 = NSGrammaticalCase.morphunValue()((unint64_t)objc_msgSend(v0, sel_grammaticalCase));
      if (v14)
      {
        uint64_t v15 = v13;
        uint64_t v16 = v14;
        objc_msgSend(v0, sel_grammaticalCase);
        specialized Dictionary.subscript.setter(v15, v16, 1702060387, 0xE400000000000000);
      }
      id v17 = objc_msgSend(v0, sel_determination);
      if (v17 == (id)1)
      {
        uint64_t v18 = 0xEB00000000746E65;
        uint64_t v19 = 0x646E657065646E69;
      }
      else
      {
        if (v17 != (id)2) {
          goto LABEL_19;
        }
        uint64_t v18 = 0xE900000000000074;
        uint64_t v19 = 0x6E65646E65706564;
      }
      objc_msgSend(v0, sel_determination);
      specialized Dictionary.subscript.setter(v19, v18, 0x6E696D7265746564, 0xED00006E6F697461);
LABEL_19:
      id v20 = objc_msgSend(v0, sel_definiteness);
      if (!v20) {
        goto LABEL_25;
      }
      uint64_t v21 = 0x6574696E69666564;
      if (v20 == (id)2)
      {
        uint64_t v22 = 0xE800000000000000;
      }
      else
      {
        if (v20 != (id)1) {
          goto LABEL_82;
        }
        uint64_t v22 = 0xEA00000000006574;
        uint64_t v21 = 0x696E696665646E69;
      }
      objc_msgSend(v0, sel_definiteness);
      specialized Dictionary.subscript.setter(v21, v22, 0x6574696E69666564, 0xEC0000007373656ELL);
LABEL_25:
      unint64_t v23 = (unint64_t)objc_msgSend(v0, sel_grammaticalPerson) - 1;
      if (v23 <= 2)
      {
        uint64_t v24 = 8 * v23;
        uint64_t v25 = *(void *)&aFirst_5[v24];
        uint64_t v26 = *(void *)((char *)&unk_182209660 + v24);
        objc_msgSend(v0, sel_grammaticalPerson);
        specialized Dictionary.subscript.setter(v25, v26, 0x6E6F73726570, 0xE600000000000000);
      }
      unint64_t v27 = (unint64_t)objc_msgSend(v0, sel_pronounType) - 1;
      if (v27 <= 2)
      {
        uint64_t v28 = 8 * v27;
        uint64_t v29 = *(void *)&aPersonalreflex[v28];
        uint64_t v30 = *(void *)&aPersonalreflex[v28 + 24];
        objc_msgSend(v0, sel_pronounType);
        specialized Dictionary.subscript.setter(v29, v30, 0x546E756F6E6F7270, 0xEB00000000657079);
      }
      uint64_t v31 = 0x766973756C636E69;
      id v32 = objc_msgSend(v0, sel__clusivity);
      if (v32 == (id)1) {
        goto LABEL_32;
      }
      if (v32 == (id)2)
      {
        uint64_t v31 = 0x766973756C637865;
LABEL_32:
        objc_msgSend(v0, sel__clusivity);
        specialized Dictionary.subscript.setter(v31, 0xE900000000000065, 0x7469766973756C63, 0xE900000000000079);
      }
      if (objc_msgSend(v0, sel__adjectival) != (id)1) {
        return v68;
      }
      objc_msgSend(v0, sel__adjectival);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(0x76697463656A6461, 0xEA00000000006C61);
      uint64_t v36 = *(void *)(v68 + 16);
      BOOL v37 = (v35 & 1) == 0;
      BOOL v38 = __OFADD__(v36, v37);
      uint64_t v39 = v36 + v37;
      if (v38)
      {
        __break(1u);
        goto LABEL_44;
      }
      char v1 = v35;
      if (*(void *)(v68 + 24) >= v39)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v40 = v68;
LABEL_41:
          if (v1)
          {
LABEL_42:
            uint64_t v42 = (void *)(*(void *)(v40 + 56) + 16 * v34);
            swift_bridgeObjectRelease();
            *uint64_t v42 = 0x7461636964657270;
            v42[1] = 0xEB00000000657669;
LABEL_78:
            swift_bridgeObjectRelease();
            return v40;
          }
LABEL_77:
          specialized _NativeDictionary._insert(at:key:value:)(v34, 0x76697463656A6461, 0xEA00000000006C61, 0x7461636964657270, 0xEB00000000657669, (void *)v40);
          goto LABEL_78;
        }
LABEL_44:
        unint64_t v67 = v34;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        uint64_t v43 = static _DictionaryStorage.copy(original:)();
        uint64_t v40 = v43;
        if (*(void *)(v68 + 16))
        {
          uint64_t v44 = (void *)(v43 + 64);
          uint64_t v45 = v68 + 64;
          unint64_t v46 = (unint64_t)((1 << *(unsigned char *)(v40 + 32)) + 63) >> 6;
          if (v40 != v68 || (unint64_t)v44 >= v45 + 8 * v46) {
            memmove(v44, (const void *)(v68 + 64), 8 * v46);
          }
          int64_t v47 = 0;
          *(void *)(v40 + 16) = *(void *)(v68 + 16);
          uint64_t v48 = 1 << *(unsigned char *)(v68 + 32);
          uint64_t v49 = -1;
          if (v48 < 64) {
            uint64_t v49 = ~(-1 << v48);
          }
          unint64_t v50 = v49 & *(void *)(v68 + 64);
          int64_t v51 = (unint64_t)(v48 + 63) >> 6;
          while (1)
          {
            if (v50)
            {
              unint64_t v52 = __clz(__rbit64(v50));
              v50 &= v50 - 1;
              unint64_t v53 = v52 | (v47 << 6);
            }
            else
            {
              int64_t v63 = v47 + 1;
              if (__OFADD__(v47, 1))
              {
                __break(1u);
                goto LABEL_81;
              }
              if (v63 >= v51) {
                break;
              }
              unint64_t v64 = *(void *)(v45 + 8 * v63);
              ++v47;
              if (!v64)
              {
                int64_t v47 = v63 + 1;
                if (v63 + 1 >= v51) {
                  break;
                }
                unint64_t v64 = *(void *)(v45 + 8 * v47);
                if (!v64)
                {
                  int64_t v47 = v63 + 2;
                  if (v63 + 2 >= v51) {
                    break;
                  }
                  unint64_t v64 = *(void *)(v45 + 8 * v47);
                  if (!v64)
                  {
                    int64_t v47 = v63 + 3;
                    if (v63 + 3 >= v51) {
                      break;
                    }
                    unint64_t v64 = *(void *)(v45 + 8 * v47);
                    if (!v64)
                    {
                      int64_t v47 = v63 + 4;
                      if (v63 + 4 >= v51) {
                        break;
                      }
                      unint64_t v64 = *(void *)(v45 + 8 * v47);
                      if (!v64)
                      {
                        int64_t v47 = v63 + 5;
                        if (v63 + 5 >= v51) {
                          break;
                        }
                        unint64_t v64 = *(void *)(v45 + 8 * v47);
                        if (!v64)
                        {
                          int64_t v47 = v63 + 6;
                          if (v63 + 6 >= v51) {
                            break;
                          }
                          unint64_t v64 = *(void *)(v45 + 8 * v47);
                          if (!v64)
                          {
                            int64_t v65 = v63 + 7;
                            if (v65 >= v51) {
                              break;
                            }
                            unint64_t v64 = *(void *)(v45 + 8 * v65);
                            if (!v64)
                            {
                              while (1)
                              {
                                int64_t v47 = v65 + 1;
                                if (__OFADD__(v65, 1)) {
                                  break;
                                }
                                if (v47 >= v51) {
                                  goto LABEL_76;
                                }
                                unint64_t v64 = *(void *)(v45 + 8 * v47);
                                ++v65;
                                if (v64) {
                                  goto LABEL_75;
                                }
                              }
LABEL_81:
                              __break(1u);
LABEL_82:
                              type metadata accessor for NSGrammaticalDefiniteness(0);
                              _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
                              __break(1u);
                              JUMPOUT(0x181E99110);
                            }
                            int64_t v47 = v65;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_75:
              unint64_t v50 = (v64 - 1) & v64;
              unint64_t v53 = __clz(__rbit64(v64)) + (v47 << 6);
            }
            uint64_t v54 = 16 * v53;
            uint64_t v55 = (uint64_t *)(*(void *)(v68 + 48) + v54);
            uint64_t v57 = *v55;
            uint64_t v56 = v55[1];
            uint64_t v58 = (uint64_t *)(*(void *)(v68 + 56) + v54);
            uint64_t v59 = *v58;
            uint64_t v60 = v58[1];
            uint64_t v61 = (void *)(*(void *)(v40 + 48) + v54);
            *uint64_t v61 = v57;
            v61[1] = v56;
            uint64_t v62 = (void *)(*(void *)(v40 + 56) + v54);
            *uint64_t v62 = v59;
            v62[1] = v60;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
        }
LABEL_76:
        swift_bridgeObjectRelease();
        unint64_t v34 = v67;
        if (v1) {
          goto LABEL_42;
        }
        goto LABEL_77;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
      uint64_t v40 = v68;
      unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(0x76697463656A6461, 0xEA00000000006C61);
      if ((v1 & 1) == (v41 & 1)) {
        goto LABEL_41;
      }
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return v68;
  }
}

uint64_t NSMorphologyPronoun.morphunConstraints()()
{
  char v1 = v0;
  id v2 = objc_msgSend(v0, sel_morphology);
  uint64_t v3 = &selRef__containsPort_forMode_;
  id v4 = objc_msgSend(v2, sel__morphunConstraints);

  uint64_t v5 = MEMORY[0x1E4FBC840];
  uint64_t v6 = MEMORY[0x1E4FBB1A0];
  if (MEMORY[0x1E4FBC840] + 8 != MEMORY[0x1E4FBB1A0])
  {
    swift_unknownObjectRetain();
    uint64_t v7 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v7) {
      goto LABEL_39;
    }
    id v17 = objc_msgSend(v4, sel_count);
    if (!v17) {
      goto LABEL_38;
    }
    uint64_t v18 = (uint64_t)v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v19 = static _DictionaryStorage.allocate(capacity:)();
    id v20 = *(char **)(v19 + 48);
    uint64_t v21 = *(void *)(v19 + 56);
    uint64_t v22 = (void *)v19;
    swift_retain();
    uint64_t v23 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v20, v21, v4, v18);
    if (v23 < 0 || v18 < v23)
    {
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
    uint64_t v7 = (uint64_t)v22;
    v22[2] = v23;
    if (!v23)
    {
LABEL_37:
      swift_release();
      uint64_t v5 = MEMORY[0x1E4FBC840];
      uint64_t v3 = &selRef__containsPort_forMode_;
      uint64_t v6 = MEMORY[0x1E4FBB1A0];
      goto LABEL_39;
    }
    uint64_t v24 = v23 - 1;
    uint64_t v25 = v22 + 8;
    while (1)
    {
      while (1)
      {
        if ((*(void *)((char *)v25 + (((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24)) {
          goto LABEL_27;
        }
        uint64_t v49 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v24);
        uint64_t v50 = v7;
        uint64_t v51 = *v49;
        uint64_t v52 = v49[1];
        swift_bridgeObjectRetain();
        unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v52);
        char v55 = v54;
        swift_bridgeObjectRelease();
        if ((v55 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v56 = *(void *)(v50 + 16);
        BOOL v36 = __OFSUB__(v56, 1);
        uint64_t v57 = v56 - 1;
        if (v36) {
          goto LABEL_151;
        }
        uint64_t v7 = v50;
        *(void *)(v50 + 16) = v57;
LABEL_27:
        if (--v24 < 0) {
          goto LABEL_37;
        }
      }
      *(void *)((char *)v25 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
      if (v24 < (uint64_t)v53)
      {
        uint64_t v48 = 16 * v53;
        uint64_t v7 = (uint64_t)v22;
        *(_OWORD *)(v22[6] + v48) = *(_OWORD *)(v22[6] + 16 * v24);
        *(_OWORD *)(v22[7] + v48) = *(_OWORD *)(v22[7] + 16 * v24);
        goto LABEL_27;
      }
      if (v53 == v24)
      {
        --v24;
        uint64_t v7 = (uint64_t)v22;
        if (v24 < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v58 = v22[6];
        uint64_t v59 = 16 * v53;
        uint64_t v7 = (uint64_t)v22;
        uint64_t v60 = (uint64_t *)(v58 + v59);
        uint64_t v61 = (uint64_t *)(v58 + 16 * v24);
        uint64_t v62 = *v60;
        uint64_t v63 = v60[1];
        uint64_t v64 = v61[1];
        *uint64_t v60 = *v61;
        v60[1] = v64;
        *uint64_t v61 = v62;
        v61[1] = v63;
        uint64_t v65 = v22[7];
        uint64_t v66 = (uint64_t *)(v65 + v59);
        unint64_t v67 = (uint64_t *)(v65 + 16 * v24);
        uint64_t v68 = *v66;
        uint64_t v69 = v66[1];
        uint64_t v70 = v67[1];
        *uint64_t v66 = *v67;
        v66[1] = v70;
        *unint64_t v67 = v68;
        v67[1] = v69;
        if (v24 < 0) {
          goto LABEL_37;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v7 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v7) {
    goto LABEL_39;
  }
  id v8 = objc_msgSend(v4, sel_count);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v11 = *(void **)(v10 + 48);
    uint64_t v12 = *(void *)(v10 + 56);
    uint64_t v13 = (void *)v10;
    swift_retain();
    uint64_t v14 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v11, v12, v4, v9);
    if (v14 < 0 || v9 < v14)
    {
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    uint64_t v7 = (uint64_t)v13;
    v13[2] = v14;
    if (v14)
    {
      int64_t v15 = v14 - 1;
      uint64_t v16 = v13 + 8;
      while (1)
      {
        while (1)
        {
          if ((*(void *)((char *)v16 + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15)) {
            goto LABEL_15;
          }
          uint64_t v30 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v15);
          uint64_t v32 = *v30;
          uint64_t v31 = v30[1];
          swift_bridgeObjectRetain();
          unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
          LOBYTE(v32) = v34;
          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0) {
            break;
          }
          swift_arrayDestroy();
          swift_arrayDestroy();
          uint64_t v35 = *(void *)(v7 + 16);
          BOOL v36 = __OFSUB__(v35, 1);
          uint64_t v37 = v35 - 1;
          if (v36) {
            goto LABEL_150;
          }
          *(void *)(v7 + 16) = v37;
LABEL_15:
          if (--v15 < 0) {
            goto LABEL_37;
          }
        }
        *(void *)((char *)v16 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
        if (v15 < (uint64_t)v33)
        {
          uint64_t v7 = (uint64_t)v13;
          *(_OWORD *)(v13[6] + 16 * v33) = *(_OWORD *)(v13[6] + 16 * v15);
          uint64_t v26 = v13[7];
          unint64_t v27 = (_OWORD *)(v26 + 32 * v15);
          long long v28 = v27[1];
          uint64_t v29 = (_OWORD *)(v26 + 32 * v33);
          *uint64_t v29 = *v27;
          v29[1] = v28;
          goto LABEL_15;
        }
        if (v33 == v15)
        {
          --v15;
          uint64_t v7 = (uint64_t)v13;
          if (v15 < 0) {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v38 = v13[6];
          uint64_t v39 = (uint64_t *)(v38 + 16 * v33);
          uint64_t v40 = (uint64_t *)(v38 + 16 * v15);
          uint64_t v41 = *v39;
          uint64_t v42 = v39[1];
          uint64_t v43 = v40[1];
          *uint64_t v39 = *v40;
          v39[1] = v43;
          *uint64_t v40 = v41;
          v40[1] = v42;
          uint64_t v44 = v13[7];
          uint64_t v45 = (_OWORD *)(v44 + 32 * v33);
          unint64_t v46 = (_OWORD *)(v44 + 32 * v15);
          outlined init with take of Any(v45, v195);
          int64_t v47 = v45;
          uint64_t v7 = (uint64_t)v13;
          outlined init with take of Any(v46, v47);
          outlined init with take of Any(v195, v46);
          if (v15 < 0) {
            goto LABEL_37;
          }
        }
      }
    }
    goto LABEL_37;
  }
LABEL_38:
  uint64_t v7 = MEMORY[0x1E4FBC868];
LABEL_39:

  id v71 = objc_msgSend(v1, sel_dependentMorphology);
  if (!v71) {
    return v7;
  }
  uint64_t v72 = v7;
  long long v191 = v71;
  id v73 = [v71 v3[339]];
  if (v5 + 8 != v6)
  {
    swift_unknownObjectRetain();
    uint64_t v74 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v74) {
      goto LABEL_78;
    }
    id v103 = objc_msgSend(v73, sel_count);
    if (!v103) {
      goto LABEL_77;
    }
    uint64_t v104 = (uint64_t)v103;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v74 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v105 = *(char **)(v74 + 48);
    uint64_t v106 = *(void *)(v74 + 56);
    swift_retain();
    uint64_t v107 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v105, v106, v73, v104);
    if (v107 < 0 || v104 < v107) {
      goto LABEL_158;
    }
    *(void *)(v74 + 16) = v107;
    uint64_t v7 = v72;
    if (!v107)
    {
LABEL_76:
      swift_release();
      goto LABEL_78;
    }
    uint64_t v108 = v107 - 1;
    uint64_t v109 = v74 + 64;
    while (1)
    {
      while (((*(void *)(v109 + (((unint64_t)v108 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v108) & 1) != 0)
      {
        if (--v108 < 0) {
          goto LABEL_76;
        }
      }
      uint64_t v110 = (uint64_t *)(*(void *)(v74 + 48) + 16 * v108);
      uint64_t v111 = *v110;
      uint64_t v112 = v110[1];
      swift_bridgeObjectRetain();
      unint64_t v113 = specialized __RawDictionaryStorage.find<A>(_:)(v111, v112);
      char v115 = v114;
      swift_bridgeObjectRelease();
      if (v115)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v116 = *(void *)(v74 + 16);
        BOOL v36 = __OFSUB__(v116, 1);
        uint64_t v117 = v116 - 1;
        if (v36) {
          goto LABEL_153;
        }
        *(void *)(v74 + 16) = v117;
        goto LABEL_73;
      }
      *(void *)(v109 + ((v113 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v113;
      if (v108 >= (uint64_t)v113)
      {
        if (v113 == v108) {
          goto LABEL_73;
        }
        uint64_t v119 = *(void *)(v74 + 48);
        char v120 = (uint64_t *)(v119 + 16 * v113);
        id v121 = (uint64_t *)(v119 + 16 * v108);
        uint64_t v122 = *v120;
        uint64_t v123 = v120[1];
        uint64_t v124 = v121[1];
        *char v120 = *v121;
        v120[1] = v124;
        *id v121 = v122;
        v121[1] = v123;
        uint64_t v125 = *(void *)(v74 + 56);
        uint64_t v126 = (uint64_t *)(v125 + 16 * v113);
        uint64_t v127 = (uint64_t *)(v125 + 16 * v108);
        uint64_t v128 = *v126;
        uint64_t v129 = v126[1];
        uint64_t v130 = v127[1];
        *uint64_t v126 = *v127;
        v126[1] = v130;
        *uint64_t v127 = v128;
        v127[1] = v129;
        uint64_t v7 = v72;
        if (v108 < 0) {
          goto LABEL_76;
        }
      }
      else
      {
        uint64_t v118 = 16 * v113;
        *(_OWORD *)(*(void *)(v74 + 48) + v118) = *(_OWORD *)(*(void *)(v74 + 48) + 16 * v108);
        *(_OWORD *)(*(void *)(v74 + 56) + v118) = *(_OWORD *)(*(void *)(v74 + 56) + 16 * v108);
LABEL_73:
        --v108;
        uint64_t v7 = v72;
        if (v108 < 0) {
          goto LABEL_76;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v74 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v74)
  {
    id v75 = objc_msgSend(v73, sel_count);
    if (v75)
    {
      uint64_t v76 = (uint64_t)v75;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      uint64_t v74 = static _DictionaryStorage.allocate(capacity:)();
      uint64_t v77 = *(void **)(v74 + 48);
      uint64_t v78 = *(void *)(v74 + 56);
      swift_retain();
      uint64_t v79 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v77, v78, v73, v76);
      if (v79 < 0 || v76 < v79)
      {
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
        goto LABEL_159;
      }
      *(void *)(v74 + 16) = v79;
      uint64_t v7 = v72;
      if (v79)
      {
        int64_t v80 = v79 - 1;
        uint64_t v81 = v74 + 64;
        while (1)
        {
          while (1)
          {
            if ((*(void *)(v81 + (((unint64_t)v80 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v80)) {
              goto LABEL_47;
            }
            uint64_t v82 = (uint64_t *)(*(void *)(v74 + 48) + 16 * v80);
            uint64_t v83 = *v82;
            uint64_t v84 = v82[1];
            swift_bridgeObjectRetain();
            unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v84);
            char v87 = v86;
            swift_bridgeObjectRelease();
            if ((v87 & 1) == 0) {
              break;
            }
            swift_arrayDestroy();
            swift_arrayDestroy();
            uint64_t v88 = *(void *)(v74 + 16);
            BOOL v36 = __OFSUB__(v88, 1);
            uint64_t v89 = v88 - 1;
            if (v36) {
              goto LABEL_152;
            }
            uint64_t v7 = v72;
            *(void *)(v74 + 16) = v89;
LABEL_47:
            if (--v80 < 0) {
              goto LABEL_76;
            }
          }
          *(void *)(v81 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v85;
          if (v80 >= (uint64_t)v85)
          {
            if (v85 != v80)
            {
              uint64_t v94 = *(void *)(v74 + 48);
              uint64_t v95 = (uint64_t *)(v94 + 16 * v85);
              uint64_t v96 = (uint64_t *)(v94 + 16 * v80);
              uint64_t v97 = *v95;
              uint64_t v98 = v95[1];
              uint64_t v99 = v96[1];
              *uint64_t v95 = *v96;
              v95[1] = v99;
              *uint64_t v96 = v97;
              v96[1] = v98;
              uint64_t v100 = *(void *)(v74 + 56);
              unint64_t v101 = (_OWORD *)(v100 + 32 * v85);
              uint64_t v102 = (_OWORD *)(v100 + 32 * v80);
              outlined init with take of Any(v101, v195);
              outlined init with take of Any(v102, v101);
              outlined init with take of Any(v195, v102);
              goto LABEL_57;
            }
          }
          else
          {
            *(_OWORD *)(*(void *)(v74 + 48) + 16 * v85) = *(_OWORD *)(*(void *)(v74 + 48) + 16 * v80);
            uint64_t v90 = *(void *)(v74 + 56);
            uint64_t v91 = (_OWORD *)(v90 + 32 * v85);
            uint64_t v92 = (_OWORD *)(v90 + 32 * v80);
            long long v93 = v92[1];
            *uint64_t v91 = *v92;
            v91[1] = v93;
          }
          --v80;
LABEL_57:
          uint64_t v7 = v72;
          if (v80 < 0) {
            goto LABEL_76;
          }
        }
      }
      goto LABEL_76;
    }
LABEL_77:
    uint64_t v74 = MEMORY[0x1E4FBC868];
  }
LABEL_78:

  int64_t v131 = 0;
  uint64_t v192 = v74 + 64;
  uint64_t v132 = 1 << *(unsigned char *)(v74 + 32);
  if (v132 < 64) {
    uint64_t v133 = ~(-1 << v132);
  }
  else {
    uint64_t v133 = -1;
  }
  unint64_t v134 = v133 & *(void *)(v74 + 64);
  int64_t v193 = (unint64_t)(v132 + 63) >> 6;
  while (1)
  {
    if (v134)
    {
      uint64_t v136 = v7;
      unint64_t v137 = __clz(__rbit64(v134));
      v134 &= v134 - 1;
      int64_t v194 = v131;
      unint64_t v138 = v137 | (v131 << 6);
    }
    else
    {
      int64_t v139 = v131 + 1;
      if (__OFADD__(v131, 1)) {
        goto LABEL_148;
      }
      if (v139 >= v193)
      {
LABEL_144:

        swift_release();
        return v7;
      }
      unint64_t v140 = *(void *)(v192 + 8 * v139);
      int64_t v141 = v131 + 1;
      if (!v140)
      {
        int64_t v141 = v131 + 2;
        if (v131 + 2 >= v193) {
          goto LABEL_144;
        }
        unint64_t v140 = *(void *)(v192 + 8 * v141);
        if (!v140)
        {
          int64_t v141 = v131 + 3;
          if (v131 + 3 >= v193) {
            goto LABEL_144;
          }
          unint64_t v140 = *(void *)(v192 + 8 * v141);
          if (!v140)
          {
            uint64_t v142 = v131 + 4;
            if (v131 + 4 >= v193) {
              goto LABEL_144;
            }
            unint64_t v140 = *(void *)(v192 + 8 * v142);
            if (!v140)
            {
              while (1)
              {
                int64_t v141 = v142 + 1;
                if (__OFADD__(v142, 1)) {
                  goto LABEL_149;
                }
                if (v141 >= v193) {
                  goto LABEL_144;
                }
                unint64_t v140 = *(void *)(v192 + 8 * v141);
                ++v142;
                if (v140) {
                  goto LABEL_99;
                }
              }
            }
            int64_t v141 = v131 + 4;
          }
        }
      }
LABEL_99:
      uint64_t v136 = v7;
      unint64_t v134 = (v140 - 1) & v140;
      int64_t v194 = v141;
      unint64_t v138 = __clz(__rbit64(v140)) + (v141 << 6);
    }
    uint64_t v143 = 16 * v138;
    uint64_t v144 = v74;
    Swift::String v145 = *(Swift::String *)(*(void *)(v74 + 48) + v143);
    uint64_t v146 = (uint64_t *)(*(void *)(v74 + 56) + v143);
    uint64_t v147 = *v146;
    uint64_t v148 = v146[1];
    *(void *)&v195[0] = 0x6E65646E65706564;
    *((void *)&v195[0] + 1) = 0xEB000000003D7963;
    String.append(_:)(v145);
    long long v149 = v195[0];
    swift_bridgeObjectRetain();
    uint64_t v7 = v136;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v195[0] = v7;
    unint64_t v152 = specialized __RawDictionaryStorage.find<A>(_:)(v149, *((uint64_t *)&v149 + 1));
    uint64_t v153 = *(void *)(v7 + 16);
    BOOL v154 = (v151 & 1) == 0;
    uint64_t v155 = v153 + v154;
    if (__OFADD__(v153, v154))
    {
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    char v156 = v151;
    if (*(void *)(v7 + 24) >= v155) {
      break;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v155, isUniquelyReferenced_nonNull_native);
    uint64_t v7 = *(void *)&v195[0];
    unint64_t v157 = specialized __RawDictionaryStorage.find<A>(_:)(v149, *((uint64_t *)&v149 + 1));
    if ((v156 & 1) != (v158 & 1)) {
      goto LABEL_160;
    }
    unint64_t v152 = v157;
    if (v156)
    {
LABEL_82:
      char v135 = (void *)(*(void *)(v7 + 56) + 16 * v152);
      swift_bridgeObjectRelease();
      *char v135 = v147;
      v135[1] = v148;
      goto LABEL_83;
    }
LABEL_107:
    *(void *)(v7 + 8 * (v152 >> 6) + 64) |= 1 << v152;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v152) = v149;
    int64_t v159 = (void *)(*(void *)(v7 + 56) + 16 * v152);
    *int64_t v159 = v147;
    v159[1] = v148;
    uint64_t v160 = *(void *)(v7 + 16);
    BOOL v36 = __OFADD__(v160, 1);
    uint64_t v161 = v160 + 1;
    if (v36) {
      goto LABEL_147;
    }
    *(void *)(v7 + 16) = v161;
    swift_bridgeObjectRetain();
LABEL_83:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v74 = v144;
    int64_t v131 = v194;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    if (v151) {
      goto LABEL_82;
    }
    goto LABEL_107;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v162 = v7;
  uint64_t v163 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v163;
  uint64_t v188 = v162;
  if (!*(void *)(v162 + 16))
  {
LABEL_142:
    swift_bridgeObjectRelease();
    if (v156) {
      goto LABEL_82;
    }
    goto LABEL_107;
  }
  uint64_t v164 = (char *)(v163 + 64);
  unint64_t v165 = (char *)(v162 + 64);
  unint64_t v166 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  uint64_t v186 = v162 + 64;
  if (v7 != v162 || v164 >= &v165[8 * v166]) {
    memmove(v164, v165, 8 * v166);
  }
  int64_t v167 = 0;
  *(void *)(v7 + 16) = *(void *)(v162 + 16);
  uint64_t v168 = 1 << *(unsigned char *)(v162 + 32);
  if (v168 < 64) {
    uint64_t v169 = ~(-1 << v168);
  }
  else {
    uint64_t v169 = -1;
  }
  unint64_t v170 = v169 & *(void *)(v162 + 64);
  int64_t v187 = (unint64_t)(v168 + 63) >> 6;
  while (2)
  {
    if (v170)
    {
      uint64_t v189 = (v170 - 1) & v170;
      int64_t v190 = v167;
      unint64_t v171 = __clz(__rbit64(v170)) | (v167 << 6);
LABEL_118:
      uint64_t v172 = 16 * v171;
      unint64_t v173 = (uint64_t *)(*(void *)(v188 + 48) + v172);
      uint64_t v175 = *v173;
      uint64_t v174 = v173[1];
      int64_t v176 = (uint64_t *)(*(void *)(v188 + 56) + v172);
      uint64_t v177 = *v176;
      uint64_t v178 = v176[1];
      long long v179 = (void *)(*(void *)(v7 + 48) + v172);
      *long long v179 = v175;
      v179[1] = v174;
      int64_t v180 = (void *)(*(void *)(v7 + 56) + v172);
      *int64_t v180 = v177;
      v180[1] = v178;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v170 = v189;
      int64_t v167 = v190;
      continue;
    }
    break;
  }
  int64_t v181 = v167 + 1;
  if (__OFADD__(v167, 1)) {
    goto LABEL_156;
  }
  if (v181 >= v187) {
    goto LABEL_142;
  }
  unint64_t v182 = *(void *)(v186 + 8 * v181);
  int64_t v183 = v167 + 1;
  if (v182) {
    goto LABEL_141;
  }
  int64_t v183 = v167 + 2;
  if (v167 + 2 >= v187) {
    goto LABEL_142;
  }
  unint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182) {
    goto LABEL_141;
  }
  int64_t v183 = v167 + 3;
  if (v167 + 3 >= v187) {
    goto LABEL_142;
  }
  unint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182) {
    goto LABEL_141;
  }
  int64_t v183 = v167 + 4;
  if (v167 + 4 >= v187) {
    goto LABEL_142;
  }
  unint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182) {
    goto LABEL_141;
  }
  int64_t v183 = v167 + 5;
  if (v167 + 5 >= v187) {
    goto LABEL_142;
  }
  unint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182) {
    goto LABEL_141;
  }
  int64_t v183 = v167 + 6;
  if (v167 + 6 >= v187) {
    goto LABEL_142;
  }
  unint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182) {
    goto LABEL_141;
  }
  int64_t v183 = v167 + 7;
  if (v167 + 7 >= v187) {
    goto LABEL_142;
  }
  unint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182)
  {
LABEL_141:
    uint64_t v189 = (v182 - 1) & v182;
    int64_t v190 = v183;
    unint64_t v171 = __clz(__rbit64(v182)) + (v183 << 6);
    goto LABEL_118;
  }
  uint64_t v184 = v167 + 8;
  if (v167 + 8 >= v187) {
    goto LABEL_142;
  }
  unint64_t v182 = *(void *)(v186 + 8 * v184);
  if (v182)
  {
    int64_t v183 = v167 + 8;
    goto LABEL_141;
  }
  while (1)
  {
    int64_t v183 = v184 + 1;
    if (__OFADD__(v184, 1)) {
      break;
    }
    if (v183 >= v187) {
      goto LABEL_142;
    }
    unint64_t v182 = *(void *)(v186 + 8 * v183);
    ++v184;
    if (v182) {
      goto LABEL_141;
    }
  }
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id @objc NSMorphology.morphunConstraints()(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  uint64_t v5 = (void *)_NativeDictionary.bridged()();

  return v5;
}

uint64_t PredicateExpressions.Conjunction.init(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.Conjunction();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t PredicateExpressions.Conjunction.evaluate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = (uint64_t *)MEMORY[0x1F4188790]();
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v6;
  uint64_t v15 = *v6;
  (*(void (**)(char *__return_ptr, uint64_t *, void))(*(void *)(v10 + 40) + 16))((char *)&v16 + 1, &v15, *(void *)(v10 + 24));
  if (!v3)
  {
    int v12 = BYTE1(v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a2);
    if (v12 == 1)
    {
      uint64_t v15 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, void))(*(void *)(a2 + 40) + 16))(&v16, &v15, *(void *)(a2 + 24));
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      char v11 = v16;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      char v11 = 0;
    }
  }
  return v11 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Conjunction<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Conjunction.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.Conjunction.description.getter()
{
  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x80000001823B3060;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.Conjunction<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.Conjunction<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v33 = a3;
  uint64_t v29 = a5;
  uint64_t v28 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v32 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v13;
  v34[0] = v13;
  v34[1] = v14;
  v34[2] = v15;
  uint64_t v35 = v16;
  uint64_t v17 = type metadata accessor for PredicateExpressions.Conjunction();
  uint64_t v27 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v25 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v25 = v17;
  uint64_t v26 = v19;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v35);
  id v20 = v32;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v21 = v26;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v26, v20, v36);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v35);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v22 = v25;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v21[*(int *)(v25 + 52)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  uint64_t v23 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v29, v21, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v21, v22);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Conjunction<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Conjunction<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Conjunction<A, B>(void *a1)
{
  return PredicateExpressions.Conjunction<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Conjunction(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Conjunction(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181E9AC78);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t BufferViewIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*v2 >= (unint64_t)v2[1])
  {
    unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    return v7(a2, 1, 1, v5);
  }
  else
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 16) - 8);
    if (*(unsigned char *)(v6 + 82)) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v4, v5);
    }
    else {
      UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v4, v5, a2);
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v5);
    uint64_t result = v9 + 56;
    uint64_t *v2 = v4 + *(void *)(v9 + 72);
  }
  return result;
}

uint64_t type metadata accessor for BufferViewIterator()
{
  return __swift_instantiateGenericMetadata();
}

double specialized XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v54 = a6;
  uint64_t v55 = a1;
  v56[10] = *MEMORY[0x1E4F143B8];
  uint64_t v52 = *(void **)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  BOOL v15 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v16);
  unsigned int v20 = (char *)v51 - v18;
  if (a4 >> 60 == 6)
  {
    MEMORY[0x1F4188790](v17);
    uint64_t v34 = v54;
    v51[-4] = a5;
    v51[-3] = v34;
    v51[-2] = v35;
    v51[-1] = v36;
    uint64_t v37 = *(void *)(v55 + 24);
    *(double *)&long long v39 = MEMORY[0x1F4188790](v38);
    v51[-4] = partial apply for specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:);
    v51[-3] = v40;
    *(_OWORD *)&v51[-2] = v39;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v37 + 40));
    uint64_t v41 = v53;
    partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v37 + 16), v56);
    os_unfair_lock_unlock((os_unfair_lock_t)(v37 + 40));
    swift_release();
    if (!v41) {
      return *(double *)v56;
    }
  }
  else if (a4 >> 60 == 7)
  {
    uint64_t v52 = v51;
    v51[1] = a4 & 0xFFFFFFFFFFFFFFFLL;
    MEMORY[0x1F4188790](v17);
    _OWORD v51[2] = v51;
    uint64_t v21 = v54;
    v51[-6] = a5;
    v51[-5] = v21;
    v51[-4] = a4;
    v51[-3] = a2;
    uint64_t v23 = v22;
    v51[-2] = v22;
    uint64_t v24 = *(void *)(v55 + 24);
    *(double *)&long long v26 = MEMORY[0x1F4188790](v25);
    v51[-4] = _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0;
    v51[-3] = v27;
    *(_OWORD *)&v51[-2] = v26;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v24 + 40));
    uint64_t v28 = v53;
    _s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_s6UInt64V_TG5TA_0((void *)(v24 + 16), v56);
    os_unfair_lock_unlock((os_unfair_lock_t)(v24 + 40));
    swift_release();
    if (v28)
    {

      MEMORY[0x1F4188790](v29);
      v51[-6] = a5;
      v51[-5] = v21;
      v51[-4] = a4;
      v51[-3] = a2;
      v51[-2] = v23;
      uint64_t v30 = *(void *)(v55 + 24);
      *(double *)&long long v32 = MEMORY[0x1F4188790](v31);
      v51[-4] = _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs5Int64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0;
      v51[-3] = v33;
      *(_OWORD *)&v51[-2] = v32;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
      partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v30 + 16), v56);
      os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
      swift_release();
      return (double)v56[0];
    }
    else
    {
      return (double)v56[0];
    }
  }
  else
  {
    uint64_t v55 = a4;
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
    v42((char *)v51 - v18, a3, v12, v19);
    ((void (*)(char *, char *, uint64_t))v42)(v15, v20, v12);
    uint64_t v43 = v52;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v52[6])(v15, 1, a5) == 1)
    {
      uint64_t v44 = *(void (**)(char *, uint64_t))(v13 + 8);
      v44(v15, v12);
      _CodingPathNode.path.getter(a2);
      v44(v20, v12);
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v43[4])(v11, v15, a5);
      uint64_t v45 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v47 = v54;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v47;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      ((void (*)(uint64_t *, char *, uint64_t))v43[2])(boxed_opaque_existential_1, v11, a5);
      v56[0] = v45;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      ((void (*)(char *, uint64_t))v43[1])(v11, a5);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E4FBB3D0], v55, v49);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return result;
}

uint64_t static _XMLPlistDecodingFormat.unwrapBool<A>(from:for:_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a5;
  unint64_t v31 = a2;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v32 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v28 - v15;
  if (a1 >> 60 == 5)
  {
    char v18 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  }
  else
  {
    unint64_t v29 = a1;
    double v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
    v19((char *)&v28 - v15, a3, v10, v16);
    ((void (*)(char *, char *, uint64_t))v19)(v13, v17, v10);
    uint64_t v20 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v13, 1, a4) == 1)
    {
      uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
      v21(v13, v10);
      _CodingPathNode.path.getter(v31);
      v21(v17, v10);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v9, v13, a4);
      uint64_t v22 = _CodingPathNode.path.getter(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v24 = v30;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v24;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 16))(boxed_opaque_existential_1, v9, a4);
      uint64_t v33 = v22;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v9, a4);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E4FBB390], v29, v26);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v18 & 1;
}

uint64_t static _XMLPlistDecodingFormat.unwrapDate<A>(from:in:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return XMLPlistMap.Value.dateValue<A>(in:for:_:)(a2, a3, a4, a1, a5, a6, a7);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapBool<A>(from:for:_:) in conformance _XMLPlistDecodingFormat(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static _XMLPlistDecodingFormat.unwrapBool<A>(from:for:_:)(*a1, a2, a3, a4, a5) & 1;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapDate<A>(from:in:for:_:) in conformance _XMLPlistDecodingFormat@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _XMLPlistDecodingFormat.unwrapDate<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6, a7);
}

void partial apply for specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(const char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(a1, a2, *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 16), *(void *)(v3 + 24));
  if (!v4) {
    *a3 = v6;
  }
}

uint64_t _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs5Int64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TATm_0(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), specialized _parseIntegerDigits<A>(_:isNegative:), a5);
}

uint64_t specialized closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026, 0x80000001823AA730, a3, a4, a5, a6, v14);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  int v6 = *(unsigned __int8 *)a1;
  unsigned int v7 = v6 & 0xFFFFFFDF;
  if (a2 == 3 && v7 == 78)
  {
    if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x61 && (*((unsigned __int8 *)a1 + 2) | 0x20) == 0x6E) {
      return 0x7FF8000000000000;
    }
    return 0;
  }
  if (a2 != 9 || v6 != 43)
  {
    if (a2 == 4 && v6 == 43)
    {
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x69
        && (*((unsigned __int8 *)a1 + 2) | 0x20) == 0x6E
        && (*((unsigned __int8 *)a1 + 3) | 0x20) == 0x66)
      {
        return 0x7FF0000000000000;
      }
      return 0;
    }
    if (a2 == 9 && v6 == 45)
    {
      if (_stringshims_strncasecmp_l(a1, "-infinity", 9uLL, 0)) {
        return 0;
      }
    }
    else
    {
      if (a2 != 4 || v6 != 45)
      {
        if (a2 != 8 || v7 != 73) {
          return 0;
        }
        uint64_t v15 = "infinity";
        size_t v16 = 8;
        goto LABEL_11;
      }
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) != 0x69
        || (*((unsigned __int8 *)a1 + 2) | 0x20) != 0x6E
        || (*((unsigned __int8 *)a1 + 3) | 0x20) != 0x66)
      {
        return 0;
      }
    }
    return 0xFFF0000000000000;
  }
  uint64_t v15 = "+infinity";
  size_t v16 = 9;
LABEL_11:
  if (!_stringshims_strncasecmp_l(a1, v15, v16, 0)) {
    return 0x7FF0000000000000;
  }
  return 0;
}

double specialized closure #1 in closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v17[1] = *(char **)MEMORY[0x1E4F143B8];
  v17[0] = 0;
  double v12 = _stringshims_strtod_l(a1, v17, 0);
  if (!v17[0]) {
    __break(1u);
  }
  double v13 = v12;
  if (&a1[a2] != v17[0])
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026, 0x80000001823AA730, a3, a4, a5, a6, v15);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v13;
}

void specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  specialized closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)(a1, a2, a3, a4, a5, a6);
  if (!v6 && (v13 & 1) != 0)
  {
    if (a2 < 1)
    {
LABEL_7:
      specialized closure #1 in closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, a5, a6);
    }
    else
    {
      Swift::String v14 = a1;
      while (2)
      {
        switch(*v14)
        {
          case 9:
          case 0xA:
          case 0xD:
          case 0x20:
          case 0x2B:
          case 0x2D:
          case 0x30:
            if (++v14 >= &a1[a2]) {
              goto LABEL_7;
            }
            continue;
          case 0xB:
          case 0xC:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2C:
          case 0x2E:
          case 0x2F:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
            goto LABEL_7;
          case 0x58:
            goto LABEL_10;
          default:
            if (*v14 != 120) {
              goto LABEL_7;
            }
            break;
        }
        break;
      }
LABEL_10:
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026, 0x80000001823AA730, a3, a4, a5, a6, v16);
      swift_bridgeObjectRelease();
      swift_willThrow();
    }
  }
}

uint64_t sub_181E9BFF0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_181E9C034()
{
  swift_release();
  swift_release();
  unint64_t v1 = *(void *)(v0 + 40);
  if ((~v1 & 0xF000000000000007) != 0) {
    outlined consume of XMLPlistMap.Value(v1);
  }
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_181E9C094()
{
  outlined consume of _CodingKey(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 41, 7);
}

uint64_t specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(void *a1, uint64_t a2, unint64_t a3, int a4, NSError *a5, NSError *a6, int a7, void *a8)
{
  uint64_t v9 = v8;
  swift_bridgeObjectRetain();
  int v29 = a7;
  if ((a3 & 0x1000000000000000) != 0)
  {
    a2 = static String._copying(_:)();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    a3 = v25;
  }
  if ((a3 & 0x2000000000000000) != 0)
  {
    v26[0] = a2;
    v26[1] = a3 & 0xFFFFFFFFFFFFFFLL;
    char v22 = specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(&v27, (uint64_t)v26, (uint64_t)v26 + (HIBYTE(a3) & 0xF), a4 & 0x1FF01, a5, a6, v29 & 1, a8);
    if (!v9)
    {
      char v28 = v22 & 1;
      swift_bridgeObjectRelease();
      LOBYTE(v9) = v28;
      goto LABEL_14;
    }
  }
  else
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      uint64_t v18 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v19 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v18 = _StringObject.sharedUTF8.getter();
    }
    if (v18) {
      uint64_t v20 = v18 + v19;
    }
    else {
      uint64_t v20 = 0;
    }
    char v21 = specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(&v27, v18, v20, a4 & 0x1FF01, a5, a6, v29 & 1, a8);
    if (!v9)
    {
      LOBYTE(v9) = v21;
      swift_bridgeObjectRelease();
LABEL_14:
      *a1 = v27;
      return v9 & 1;
    }
  }
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t AttributedString.init(markdown:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  unsigned int v7 = *a4;
  if (a3[2]) {
    int v8 = 0x10000;
  }
  else {
    int v8 = 0;
  }
  specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v10, a1, a2, *a3 | (a3[1] << 8) | v8, *((NSError **)a3 + 1), *((NSError **)a3 + 2), a3[24], v7);
  swift_bridgeObjectRelease();
  outlined consume of URL?(v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v5) {
    *a5 = v10;
  }
  return result;
}

uint64_t specialized _AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(char a1)
{
  v1[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes] = 0;
  uint64_t v3 = v1;
  BigString.init()();
  uint64_t v10 = 0;
  MEMORY[0x185309530](&v10, 8);
  uint64_t v4 = v10;
  type metadata accessor for AttributedString.Guts();
  uint64_t v5 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v7 = v12;
    *(_OWORD *)(v5 + 16) = v11;
    *(_OWORD *)(v5 + 32) = v7;
    *(_OWORD *)(v5 + 48) = v13;
    *(void *)(v5 + 64) = 0;
    *(void *)(v5 + 72) = 0;
    *(void *)(v5 + 80) = 0;
    *(void *)(v5 + 88) = v4;
    *(void *)&v3[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str] = v5;
    swift_bridgeObjectRelease();
    if (a1)
    {
      int v8 = specialized static AttributeScope.scopeDescription.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      int v8 = (void *)MEMORY[0x1E4FBC868];
    }
    *(void *)&v3[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.attributeTable] = v8;

    v9.receiver = v3;
    v9.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AttributedStringFromMarkdownCreatorConcrete<AttributeScopes.FoundationAttributes>);
    return (uint64_t)objc_msgSendSuper2(&v9, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.append(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    long long v4 = *(_OWORD *)(v3 + 16);
    long long v5 = *(_OWORD *)(v3 + 48);
    v69[1] = *(_OWORD *)(v3 + 32);
    v69[2] = v5;
    v69[0] = v4;
    uint64_t v6 = *(void *)(v3 + 64);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v3 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v69);
    swift_unknownObjectRetain();
    *(void *)(v1 + v2) = AttributedString.Guts.init(string:runs:)(v69, v6, v7, v8, v9);
    swift_release();
  }
  uint64_t v51 = v2;
  uint64_t v52 = v1;
  uint64_t v10 = *(_OWORD **)(v1 + v2);
  long long v11 = v10[1];
  long long v12 = v10[3];
  v68[1] = v10[2];
  _OWORD v68[2] = v12;
  v68[0] = v11;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v68);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v68);
  long long v13 = v10[1];
  long long v14 = v10[3];
  v67[1] = v10[2];
  v67[2] = v14;
  v67[0] = v13;
  long long v15 = v10[1];
  v70[1] = v10[2];
  _OWORD v70[2] = v14;
  v70[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v70, (uint64_t)v71);
  outlined retain of Locale((uint64_t)v71);
  uint64_t v16 = BigString.endIndex.getter();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  outlined release of Locale((uint64_t)v67);
  swift_release();
  uint64_t v55 = v10;
  uint64_t v56 = v16;
  uint64_t v57 = v18;
  uint64_t v58 = v20;
  uint64_t v59 = v22;
  if (one-time initialization token for currentIdentity != -1) {
LABEL_18:
  }
    swift_once();
  uint64_t v23 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  unint64_t v24 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v24);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v23, v64);
  os_unfair_lock_unlock(v24);
  swift_release();
  uint64_t v25 = v64[0];
  uint64_t v60 = v64[0];
  BigString.init()();
  v64[0] = 0;
  MEMORY[0x185309530](v64, 8);
  uint64_t v26 = v64[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v27 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    *(_OWORD *)(v27 + 16) = v61;
    *(_OWORD *)(v27 + 32) = v62;
    *(_OWORD *)(v27 + 48) = v63;
    *(void *)(v27 + 64) = 0;
    *(void *)(v27 + 72) = 0;
    *(void *)(v27 + 80) = 0;
    *(void *)(v27 + 88) = v26;
    uint64_t v30 = v51;
    uint64_t v29 = v52;
    *(void *)(v52 + v51) = v27;
    swift_release();
    if ((unint64_t)String.Iterator.next()().value._object)
    {
      uint64_t v50 = v25;
      do
      {
        if (static BigString.Index.< infix(_:_:)())
        {
          __break(1u);
LABEL_16:
          __break(1u);
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_16;
        }
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_17;
        }
        long long v31 = v55[1];
        long long v32 = v55[3];
        v66[1] = v55[2];
        void v66[2] = v32;
        v66[0] = v31;
        long long v33 = v55[1];
        v72[1] = v55[2];
        _OWORD v72[2] = v32;
        v72[0] = v33;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v72, (uint64_t)v73);
        outlined retain of Locale((uint64_t)v73);
        uint64_t v34 = MEMORY[0x185301530](v56, v57, v58, v59);
        uint64_t v53 = v35;
        uint64_t v54 = v34;
        uint64_t v37 = v36;
        uint64_t v39 = v38;
        outlined release of Locale((uint64_t)v66);
        long long v40 = v55[1];
        long long v41 = v55[3];
        v65[1] = v55[2];
        v65[2] = v41;
        v65[0] = v40;
        long long v42 = v55[1];
        v74[1] = v55[2];
        _OWORD v74[2] = v41;
        v74[0] = v42;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v74, (uint64_t)v75);
        outlined retain of Locale((uint64_t)v75);
        uint64_t v43 = MEMORY[0x185301530](v56, v57, v58, v59);
        uint64_t v45 = v44;
        uint64_t v47 = v46;
        uint64_t v49 = v48;
        outlined release of Locale((uint64_t)v65);
        v64[0] = v54;
        v64[1] = v37;
        v64[2] = v39;
        v64[3] = v53;
        v64[4] = v43;
        v64[5] = v45;
        v64[6] = v47;
        v64[7] = v49;
        specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v64);
        swift_bridgeObjectRelease();
      }
      while ((unint64_t)String.Iterator.next()().value._object);
      swift_bridgeObjectRelease();
      uint64_t v30 = v51;
      uint64_t v29 = v52;
      if (v60 == v50) {
        goto LABEL_14;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    swift_bridgeObjectRelease();
LABEL_14:
    *(void *)(v29 + v30) = v55;
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.append(_:)(void *a1, uint64_t a2, void *a3)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v4 = a1;
  _AttributedStringFromMarkdownCreatorConcrete.append(_:)();

  return swift_bridgeObjectRelease();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.lastCharacter()()
{
  uint64_t v1 = *(_OWORD **)(v0 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str);
  long long v2 = v1[1];
  long long v3 = v1[3];
  v8[1] = v1[2];
  _OWORD v8[2] = v3;
  v8[0] = v2;
  long long v4 = v1[1];
  v9[1] = v1[2];
  id v9[2] = v3;
  v9[0] = v4;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v9, (uint64_t)v10);
  outlined retain of Locale((uint64_t)v10);
  BigString.utf16.getter();
  outlined release of Locale((uint64_t)v8);
  BigString.UTF16View.startIndex.getter();
  BigString.UTF16View.endIndex.getter();
  if (static BigString.Index.== infix(_:_:)())
  {
    uint64_t v5 = 0;
  }
  else
  {
    BigString.UTF16View.endIndex.getter();
    BigString.UTF16View.index(before:)();
    uint64_t v5 = BigString.UTF16View.subscript.getter();
  }
  outlined release of Locale((uint64_t)&v7);
  return v5;
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.lastCharacter()(void *a1)
{
  id v1 = a1;
  unsigned __int16 v2 = _AttributedStringFromMarkdownCreatorConcrete.lastCharacter()();

  return v2;
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey.init(intValue:)()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void protocol witness for CodingKey.init(stringValue:) in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey(uint64_t a1@<X8>)
{
  _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey.init(stringValue:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey.init(intValue:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.init(from:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey();
  swift_getWitnessTable();
  uint64_t v51 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v40 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v8 = (char *)v37 - v7;
  uint64_t v60 = (char *)MEMORY[0x1E4FBC868];
  static AttributeScope.scopeDescription.getter(a2);
  uint64_t v52 = v9;
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v10 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v53 = v10;
  if (v10)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (uint64_t)v6;
  }
  uint64_t v11 = v40;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v12 = v51;
  uint64_t v13 = KeyedDecodingContainer.allKeys.getter();
  uint64_t result = MEMORY[0x185302620](v13, v6);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_14:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v12);
    uint64_t v6 = v60;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (uint64_t)v6;
  }
  uint64_t v15 = result;
  uint64_t v43 = v8;
  uint64_t v38 = a1;
  uint64_t v16 = 0;
  v37[1] = v13;
  uint64_t v17 = (unsigned __int8 *)(v13 + 56);
  uint64_t v18 = v52;
  uint64_t v39 = result;
  while (1)
  {
    uint64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (*(void *)(v18 + 16))
    {
      uint64_t v20 = *((void *)v17 - 3);
      uint64_t v21 = *((void *)v17 - 2);
      uint64_t v22 = *((void *)v17 - 1);
      int v23 = *v17;
      swift_bridgeObjectRetain_n();
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      if (v25)
      {
        uint64_t v26 = (uint64_t *)(*(void *)(v18 + 56) + 16 * v24);
        uint64_t v49 = v20;
        uint64_t v50 = v22;
        uint64_t v27 = *v26;
        uint64_t v28 = v26[1];
        swift_bridgeObjectRelease();
        int v48 = v23;
        uint64_t v29 = *(void *)(v28 + 8);
        uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 24))(v27, v29);
        uint64_t v47 = v30;
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t v46 = v37;
        uint64_t v44 = AssociatedTypeWitness;
        uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
        MEMORY[0x1F4188790](AssociatedTypeWitness);
        uint64_t v6 = (char *)v37 - v33;
        uint64_t v54 = v49;
        uint64_t v55 = v34;
        uint64_t v49 = v34;
        uint64_t v56 = v50;
        char v57 = v48;
        uint64_t v35 = v53;
        KeyedDecodingContainer.superDecoder(forKey:)();
        if (v35)
        {
          uint64_t v53 = v35;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v51);
          a1 = v38;
          goto LABEL_2;
        }
        (*(void (**)(void *, uint64_t, uint64_t))(v28 + 16))(v58, v27, v28);
        uint64_t v53 = 0;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
        v58[0] = v41;
        v58[1] = v27;
        v58[2] = v42;
        v58[3] = v29;
        v59[3] = type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox();
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v59);
        (*(void (**)(uint64_t *, char *, uint64_t))(v32 + 32))(boxed_opaque_existential_1, v6, v44);
        specialized Dictionary.subscript.setter((uint64_t)v59, v45, v47);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v18 = v52;
        uint64_t v15 = v39;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease_n();
      }
    }
    v17 += 32;
    ++v16;
    if (v19 == v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v38;
      uint64_t v12 = v51;
      uint64_t v11 = v40;
      uint64_t v8 = v43;
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

id @objc _AttributedStringFromMarkdownCreatorConcrete.parseExtendedAttributes(from:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  id v6 = specialized Data.init(referencing:)(v4);
  unint64_t v8 = v7;

  specialized _AttributedStringFromMarkdownCreatorConcrete.parseExtendedAttributes(from:)((uint64_t)v6, v8);
  outlined consume of Data._Representation((uint64_t)v6, v8);
  uint64_t v9 = (void *)_NativeDictionary.bridged()();

  return v9;
}

void @objc _AttributedStringFromMarkdownCreatorConcrete.init()()
{
}

id _AttributedStringFromMarkdownCreatorConcrete.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t AttributedString.MarkdownParsingOptions.FailurePolicy.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t AttributedString.MarkdownParsingOptions.FailurePolicy.rawValue.getter()
{
  return *v0;
}

unint64_t AttributedString.MarkdownParsingOptions.InterpretedSyntax.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t AttributedString.MarkdownParsingOptions.InterpretedSyntax.rawValue.getter()
{
  return *v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return AttributedString.MarkdownParsingOptions.InterpretedSyntax.init(rawValue:)(*a1, a2);
}

uint64_t AttributedString.MarkdownParsingOptions.allowsExtendedAttributes.getter()
{
  return *v0;
}

uint64_t AttributedString.MarkdownParsingOptions.allowsExtendedAttributes.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.allowsExtendedAttributes.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void AttributedString.MarkdownParsingOptions.interpretedSyntax.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *AttributedString.MarkdownParsingOptions.interpretedSyntax.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.interpretedSyntax.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void AttributedString.MarkdownParsingOptions.failurePolicy.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

unsigned char *AttributedString.MarkdownParsingOptions.failurePolicy.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 2) = *result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.failurePolicy.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.MarkdownParsingOptions.languageCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttributedString.MarkdownParsingOptions.languageCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.languageCode.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.MarkdownParsingOptions.appliesSourcePositionAttributes.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t AttributedString.MarkdownParsingOptions.appliesSourcePositionAttributes.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.appliesSourcePositionAttributes.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:appliesSourcePositionAttributes:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  char v7 = *a2;
  char v8 = *a3;
  *(unsigned char *)a7 = result;
  *(unsigned char *)(a7 + 1) = v7;
  *(unsigned char *)(a7 + 2) = v8;
  *(void *)(a7 + 8) = a4;
  *(void *)(a7 + 16) = a5;
  *(unsigned char *)(a7 + 24) = a6;
  return result;
}

double one-time initialization function for localizedAttributedString()
{
  id v0 = objc_msgSend(self, sel__localizedAttributedStringParsingOptions);
  AttributedString.MarkdownParsingOptions.init(_:)(v0, (uint64_t)v2);

  static AttributedString.MarkdownParsingOptions.localizedAttributedString = v2[0];
  byte_1E8EDF429 = v2[1];
  byte_1E8EDF42A = v2[2];
  double result = *(double *)&v3;
  *(_OWORD *)&qword_1E8EDF430 = v3;
  byte_1E8EDF440 = v4;
  return result;
}

void static AttributedString.MarkdownParsingOptions._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    AttributedString.MarkdownParsingOptions.init(_:)(v3, a2);
  }
  else
  {
    *(_WORD *)a2 = 0;
    *(unsigned char *)(a2 + 2) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
}

uint64_t AttributedString.MarkdownSourcePosition.startLine.getter()
{
  return *(void *)v0;
}

uint64_t AttributedString.MarkdownSourcePosition.startColumn.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AttributedString.MarkdownSourcePosition.endLine.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t AttributedString.MarkdownSourcePosition.endColumn.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AttributedString.MarkdownSourcePosition.Offsets.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a5;
  v12[1] = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.MarkdownSourcePosition.Offsets.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  unint64_t result = 946238581;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x3631667475;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AttributedString.MarkdownSourcePosition.Offsets.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString.MarkdownSourcePosition.Offsets@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized AttributedString.MarkdownSourcePosition.Offsets.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString.MarkdownSourcePosition.Offsets(void *a1)
{
  return AttributedString.MarkdownSourcePosition.Offsets.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.MarkdownSourcePosition.Offsets(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

double AttributedString.MarkdownSourcePosition.init(startLine:startColumn:endLine:endColumn:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  double result = 0.0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(unsigned char *)(a5 + 64) = 1;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(unsigned char *)(a5 + 104) = 1;
  return result;
}

void AttributedString.MarkdownSourcePosition.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(void *)(v0 + 16);
  Swift::UInt v3 = *(void *)(v0 + 24);
  Swift::UInt v5 = *(void *)(v0 + 32);
  Swift::UInt v4 = *(void *)(v0 + 40);
  Swift::UInt v7 = *(void *)(v0 + 48);
  Swift::UInt v6 = *(void *)(v0 + 56);
  int v8 = *(unsigned __int8 *)(v0 + 64);
  Swift::UInt v10 = *(void *)(v0 + 72);
  Swift::UInt v11 = *(void *)(v0 + 80);
  Swift::UInt v12 = *(void *)(v0 + 88);
  Swift::UInt v13 = *(void *)(v0 + 96);
  int v9 = *(unsigned __int8 *)(v0 + 104);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
    if (!v9)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      Hasher._combine(_:)(v13);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v4);
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v6);
    if (!v9) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.MarkdownSourcePosition.CodingKeys()
{
  uint64_t result = 0x6E694C7472617473;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C6F437472617473;
      break;
    case 2:
      uint64_t result = 0x656E694C646E65;
      break;
    case 3:
      uint64_t result = 0x6D756C6F43646E65;
      break;
    case 4:
      uint64_t result = 0x66664F7472617473;
      break;
    case 5:
      uint64_t result = 0x657366664F646E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.MarkdownSourcePosition.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AttributedString.MarkdownSourcePosition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.MarkdownSourcePosition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.MarkdownSourcePosition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AttributedString.MarkdownSourcePosition.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  Swift::UInt v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v29 = *(void *)(v1 + 16);
  uint64_t v30 = v8;
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v27 = *(void *)(v1 + 32);
  uint64_t v28 = v9;
  uint64_t v10 = *(void *)(v1 + 48);
  uint64_t v23 = *(void *)(v1 + 40);
  uint64_t v24 = v10;
  uint64_t v11 = *(void *)(v1 + 56);
  int v36 = *(unsigned __int8 *)(v1 + 64);
  uint64_t v12 = *(void *)(v1 + 72);
  uint64_t v25 = v11;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(v1 + 88);
  uint64_t v19 = *(void *)(v1 + 80);
  uint64_t v20 = v13;
  uint64_t v22 = *(void *)(v1 + 96);
  int v21 = *(unsigned __int8 *)(v1 + 104);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v31) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v15 = v5;
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  LOBYTE(v31) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v31) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v31) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v31 = v17;
  uint64_t v32 = v23;
  uint64_t v33 = v24;
  uint64_t v34 = v25;
  char v35 = v36;
  char v37 = 4;
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v31 = v16;
  uint64_t v32 = v19;
  uint64_t v33 = v20;
  uint64_t v34 = v22;
  char v35 = v21;
  char v37 = 5;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v7, v4);
}

Swift::Int AttributedString.MarkdownSourcePosition.hashValue.getter()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt v6 = *(void *)(v0 + 32);
  Swift::UInt v5 = *(void *)(v0 + 40);
  Swift::UInt v7 = *(void *)(v0 + 48);
  int v8 = *(unsigned __int8 *)(v0 + 64);
  Swift::UInt v11 = *(void *)(v0 + 56);
  Swift::UInt v12 = *(void *)(v0 + 72);
  Swift::UInt v13 = *(void *)(v0 + 80);
  Swift::UInt v14 = *(void *)(v0 + 88);
  Swift::UInt v15 = *(void *)(v0 + 96);
  int v9 = *(unsigned __int8 *)(v0 + 104);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  if (v8 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v11);
    if (!v9) {
      goto LABEL_3;
    }
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v9) {
    goto LABEL_5;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  return Hasher._finalize()();
}

uint64_t AttributedString.MarkdownSourcePosition.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v26) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 1;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 2;
    uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 3;
    uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
    char v30 = 4;
    unint64_t v24 = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v21 = *((void *)&v26 + 1);
    uint64_t v22 = v26;
    uint64_t v19 = *((void *)&v27 + 1);
    uint64_t v20 = v27;
    int v29 = v28;
    char v30 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    unsigned __int8 v12 = v28;
    long long v13 = v26;
    long long v14 = v27;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    uint64_t v15 = v23;
    *(void *)(a2 + 16) = v25;
    *(void *)(a2 + 24) = v15;
    uint64_t v16 = v21;
    *(void *)(a2 + 32) = v22;
    *(void *)(a2 + 40) = v16;
    uint64_t v17 = v19;
    *(void *)(a2 + 48) = v20;
    *(void *)(a2 + 56) = v17;
    *(unsigned char *)(a2 + 64) = v29;
    *(_OWORD *)(a2 + 72) = v13;
    *(_OWORD *)(a2 + 88) = v14;
    *(unsigned char *)(a2 + 104) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.MarkdownSourcePosition()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt v6 = *(void *)(v0 + 32);
  Swift::UInt v5 = *(void *)(v0 + 40);
  Swift::UInt v7 = *(void *)(v0 + 48);
  int v8 = *(unsigned __int8 *)(v0 + 64);
  Swift::UInt v11 = *(void *)(v0 + 56);
  Swift::UInt v12 = *(void *)(v0 + 72);
  Swift::UInt v13 = *(void *)(v0 + 80);
  Swift::UInt v14 = *(void *)(v0 + 88);
  Swift::UInt v15 = *(void *)(v0 + 96);
  int v9 = *(unsigned __int8 *)(v0 + 104);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  if (v8 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v11);
    if (!v9) {
      goto LABEL_3;
    }
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v9) {
    goto LABEL_5;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString.MarkdownSourcePosition@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AttributedString.MarkdownSourcePosition.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString.MarkdownSourcePosition(void *a1)
{
  return AttributedString.MarkdownSourcePosition.encode(to:)(a1);
}

uint64_t AttributedString.init<A>(markdown:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  char v10 = *(unsigned char *)(a4 + 1);
  char v11 = *(unsigned char *)(a4 + 2);
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v13 = *(void *)(a4 + 16);
  char v14 = *(unsigned char *)(a4 + 24);
  Swift::UInt v15 = *(void **)a5;
  uint64_t v16 = *(void *)(a5 + 8);
  uint64_t v17 = *(void *)(a5 + 16);
  v20[0] = 1;
  v20[1] = v10;
  v20[2] = v11;
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  char v23 = v14;
  v19[0] = v15;
  v19[1] = v16;
  v19[2] = v17;
  static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v24, a1, a2, a3, v20, (uint64_t)v19, a6, a7);
  swift_bridgeObjectRelease();
  outlined consume of URL?(v15);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    *a8 = v24;
  }
  return result;
}

uint64_t AttributedString.init<A>(markdown:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, long long *a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  char v8 = *(unsigned char *)(a3 + 1);
  char v9 = *(unsigned char *)(a3 + 2);
  char v10 = *(unsigned char *)(a3 + 24);
  uint64_t v11 = *((void *)a4 + 2);
  v15[0] = 1;
  v15[1] = v8;
  v15[2] = v9;
  long long v16 = *(_OWORD *)(a3 + 8);
  char v17 = v10;
  long long v13 = *a4;
  uint64_t v14 = v11;
  AttributedString.init<A>(_markdownData:including:options:baseURL:)(a1, a2, a5, v15, (uint64_t)&v13, &v18);
  uint64_t result = swift_release();
  if (!v6) {
    *a6 = v18;
  }
  return result;
}

void *specialized AttributedString.init<A>(_markdownData:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, NSError *a4@<X3>, NSError *a5@<X4>, char a6@<W5>, void *a7@<X6>, void *a8@<X8>)
{
  char v9 = a8;
  _OWORD v41[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v20 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v21 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v21)
      {
        uint64_t v22 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (!__OFSUB__((int)a1, v22))
        {
          uint64_t v19 = (void *)(v21 + (int)a1 - v22);
          if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) < v20) {
            uint64_t v20 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          char v23 = (char *)v19 + v20;
          goto LABEL_23;
        }
LABEL_30:
        __break(1u);
      }
      uint64_t v19 = 0;
      char v23 = 0;
LABEL_23:
      unsigned int v16 = a3 & 0x1FF01;
      char v18 = a6 & 1;
      char v17 = v23;
LABEL_24:
      specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(v41, (uint64_t)v19, (uint64_t)v17, v16, a4, a5, v18, a7);
      outlined consume of Data._Representation(a1, a2);
      swift_bridgeObjectRelease();
      uint64_t result = outlined consume of URL?(a7);
      if (!v8) {
LABEL_25:
      }
        void *v9 = v41[0];
      return result;
    case 2uLL:
      uint64_t v24 = *(void *)(a1 + 16);
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v37 = v8;
      if (v26)
      {
        uint64_t v27 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v28 = __OFSUB__(v24, v27);
        uint64_t v29 = v24 - v27;
        if (v28)
        {
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        BOOL v28 = __OFSUB__(v25, v24);
        uint64_t v30 = v25 - v24;
        if (!v28)
        {
          uint64_t v31 = v26 + v29;
          uint64_t v32 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          if (v32 >= v30) {
            uint64_t v32 = v30;
          }
          uint64_t v33 = v31 + v32;
LABEL_19:
          unsigned int v35 = a3 & 0x1FF01;
          swift_retain();
          swift_retain();
          specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(v41, v31, v33, v35, a4, a5, a6 & 1, a7);
          swift_release();
          swift_release();
          outlined consume of Data._Representation(a1, a2);
          swift_bridgeObjectRelease();
          uint64_t result = outlined consume of URL?(a7);
          char v9 = a8;
          if (v37) {
            return result;
          }
          goto LABEL_25;
        }
      }
      else if (!__OFSUB__(v25, v24))
      {
        uint64_t v31 = 0;
        uint64_t v33 = 0;
        goto LABEL_19;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    case 3uLL:
      memset(v40, 0, 14);
      specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(v41, (uint64_t)v40, (uint64_t)v40, a3 & 0x1FF01, a4, a5, a6 & 1, a7);
      if (v8)
      {
        outlined consume of Data._Representation(a1, a2);
        swift_bridgeObjectRelease();
        return outlined consume of URL?(a7);
      }
      outlined consume of Data._Representation(a1, a2);
      swift_bridgeObjectRelease();
      uint64_t result = outlined consume of URL?(a7);
      goto LABEL_25;
    default:
      v40[0] = a1;
      LOWORD(v40[1]) = a2;
      BYTE2(v40[1]) = BYTE2(a2);
      BYTE3(v40[1]) = BYTE3(a2);
      BYTE4(v40[1]) = BYTE4(a2);
      unsigned int v16 = a3 & 0x1FF01;
      BYTE5(v40[1]) = BYTE5(a2);
      char v17 = (char *)v40 + BYTE6(a2);
      char v18 = a6 & 1;
      uint64_t v19 = v40;
      goto LABEL_24;
  }
}

void *AttributedString.init<A>(_markdownData:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  char v8 = *a4;
  char v9 = a4[1];
  char v10 = a4[2];
  uint64_t v11 = *((void *)a4 + 1);
  uint64_t v12 = *((void *)a4 + 2);
  char v13 = a4[24];
  Swift::UInt v15 = *(void **)a5;
  uint64_t v14 = *(void *)(a5 + 8);
  uint64_t v16 = *(void *)(a5 + 16);
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v22 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v23 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v23)
      {
        uint64_t v24 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (!__OFSUB__((int)a1, v24))
        {
          uint64_t v21 = (void *)(v23 + (int)a1 - v24);
          if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) < v22) {
            uint64_t v22 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          uint64_t v20 = (char *)v21 + v22;
          goto LABEL_23;
        }
LABEL_30:
        __break(1u);
      }
      uint64_t v21 = 0;
      uint64_t v20 = 0;
LABEL_23:
      char v41 = *a4;
      char v42 = v9;
      char v43 = v10;
      uint64_t v44 = v11;
      uint64_t v45 = v12;
      char v46 = v13;
      uint64_t v38 = v15;
      uint64_t v39 = v14;
      uint64_t v40 = v16;
LABEL_24:
      static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(v37, (uint64_t)v21, (uint64_t)v20, a3, (uint64_t)&v41, &v38);
      outlined consume of Data._Representation(a1, a2);
      swift_bridgeObjectRelease();
      uint64_t result = outlined consume of URL?(v15);
      if (!v6) {
LABEL_25:
      }
        *a6 = v37[0];
      return result;
    case 2uLL:
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v26 = *(void *)(a1 + 24);
      uint64_t v27 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v27)
      {
        uint64_t v28 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v29 = __OFSUB__(v25, v28);
        uint64_t v30 = v25 - v28;
        if (v29)
        {
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        BOOL v29 = __OFSUB__(v26, v25);
        uint64_t v31 = v26 - v25;
        if (!v29)
        {
          uint64_t v32 = (void *)(v27 + v30);
          uint64_t v33 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          if (v33 >= v31) {
            uint64_t v33 = v31;
          }
          uint64_t v34 = (void *)((char *)v32 + v33);
LABEL_18:
          char v41 = *a4;
          char v42 = v9;
          char v43 = v10;
          uint64_t v44 = v11;
          uint64_t v45 = v12;
          char v46 = v13;
          uint64_t v38 = v15;
          uint64_t v39 = v14;
          uint64_t v40 = v16;
LABEL_19:
          static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(v37, (uint64_t)v32, (uint64_t)v34, a3, (uint64_t)&v41, &v38);
          if (v6)
          {
            outlined consume of Data._Representation(a1, a2);
            swift_bridgeObjectRelease();
            return outlined consume of URL?(v15);
          }
          outlined consume of Data._Representation(a1, a2);
          swift_bridgeObjectRelease();
          uint64_t result = outlined consume of URL?(v15);
          goto LABEL_25;
        }
      }
      else if (!__OFSUB__(v26, v25))
      {
        uint64_t v32 = 0;
        uint64_t v34 = 0;
        goto LABEL_18;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    case 3uLL:
      memset(v36, 0, 14);
      char v41 = v8;
      char v42 = v9;
      char v43 = v10;
      uint64_t v44 = v11;
      uint64_t v45 = v12;
      char v46 = v13;
      uint64_t v38 = v15;
      uint64_t v39 = v14;
      uint64_t v40 = v16;
      uint64_t v32 = v36;
      uint64_t v34 = v36;
      goto LABEL_19;
    default:
      v36[0] = a1;
      LOWORD(v36[1]) = a2;
      BYTE2(v36[1]) = BYTE2(a2);
      BYTE3(v36[1]) = BYTE3(a2);
      BYTE4(v36[1]) = BYTE4(a2);
      BYTE5(v36[1]) = BYTE5(a2);
      char v41 = v8;
      uint64_t v20 = (char *)v36 + BYTE6(a2);
      char v42 = v9;
      char v43 = v10;
      uint64_t v44 = v11;
      uint64_t v45 = v12;
      char v46 = v13;
      uint64_t v38 = v15;
      uint64_t v39 = v14;
      uint64_t v40 = v16;
      uint64_t v21 = v36;
      goto LABEL_24;
  }
}

void *AttributedString.init(markdown:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  if (a3[2]) {
    int v7 = 0x10000;
  }
  else {
    int v7 = 0;
  }
  uint64_t result = specialized AttributedString.init<A>(_markdownData:including:options:baseURL:)(a1, a2, *a3 | (a3[1] << 8) | v7, *((NSError **)a3 + 1), *((NSError **)a3 + 2), a3[24], *a4, &v9);
  if (!v5) {
    *a5 = v9;
  }
  return result;
}

void *AttributedString.init<A>(markdown:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, void *a6@<X8>)
{
  char v8 = *(unsigned char *)(a4 + 1);
  char v9 = *(unsigned char *)(a4 + 2);
  char v10 = *(unsigned char *)(a4 + 24);
  uint64_t v11 = *((void *)a5 + 2);
  v15[0] = 1;
  v15[1] = v8;
  v15[2] = v9;
  long long v16 = *(_OWORD *)(a4 + 8);
  char v17 = v10;
  long long v13 = *a5;
  uint64_t v14 = v11;
  uint64_t result = AttributedString.init<A>(_markdownData:including:options:baseURL:)(a1, a2, a3, v15, (uint64_t)&v13, &v18);
  if (!v6) {
    *a6 = v18;
  }
  return result;
}

uint64_t specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, NSError *a5, NSError *a6, char a7, void *a8)
{
  uint64_t v8 = a2;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v14 = a4 >> 8;
    objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AttributedStringFromMarkdownCreatorConcrete<AttributeScopes.FoundationAttributes>));
    swift_bridgeObjectRetain();
    char v15 = a7 & 1;
    long long v16 = (void *)specialized _AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(a4 & 1);
    type metadata accessor for NSAttributedStringMarkdownParsingOptions();
    LOBYTE(v28[0]) = a4 & 1;
    BYTE1(v28[0]) = v14;
    BYTE2(v28[0]) = BYTE2(a4) & 1;
    v28[1] = a5;
    void v28[2] = a6;
    char v29 = v15;
    swift_bridgeObjectRetain();
    char v17 = v16;
    uint64_t v18 = (NSAttributedStringMarkdownParsingOptions *)NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)v28);
    if (a8) {
      id v19 = a8;
    }
    else {
      id v19 = 0;
    }
    v28[0] = 0;
    char v20 = _NSAttributedStringFromMarkdownWithCreator(v17, v8, a3 - v8, v18, (uint64_t)v19, v28);

    uint64_t v21 = v28[0];
    if ((v20 & 1) != 0 || !v28[0])
    {
      *a1 = *(void *)&v17[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str];
      LOBYTE(v8) = v17[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes];
      uint64_t v23 = v21;
      swift_retain();
    }
    else
    {
      uint64_t v22 = v28[0];
      swift_willThrow();
    }
  }
  else
  {
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v30, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v28);
    *a1 = v28[0];
  }
  return v8 & 1;
}

uint64_t AttributedString.init<A>(contentsOf:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  int v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v22 = *(unsigned char *)(a2 + 2);
  char v23 = *(unsigned char *)(a2 + 1);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v21 = *(void *)(a2 + 8);
  char v20 = *(unsigned char *)(a2 + 24);
  uint64_t v11 = *(void **)a3;
  uint64_t v12 = *(void *)(a3 + 8);
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v26 = *(void **)a1;
  uint64_t v27 = v8;
  uint64_t v28 = v9;
  id v14 = specialized Data.init(contentsOf:options:)((uint64_t)&v26, (void *)1);
  if (v5)
  {
    swift_bridgeObjectRelease();
    outlined consume of URL?(v11);
    swift_release();

    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v18 = a5;
    unint64_t v19 = v15;
    uint64_t v17 = (uint64_t)v14;

    swift_release();
    swift_release();
    LOBYTE(v26) = 1;
    BYTE1(v26) = v23;
    BYTE2(v26) = v22;
    uint64_t v27 = v21;
    uint64_t v28 = v10;
    char v29 = v20;
    v25[0] = v11;
    v25[1] = v12;
    v25[2] = v13;
    AttributedString.init<A>(_markdownData:including:options:baseURL:)(v17, v19, a4, (char *)&v26, (uint64_t)v25, &v30);
    uint64_t result = swift_release();
    *uint64_t v18 = v30;
  }
  return result;
}

void *AttributedString.init<A>(contentsOf:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  int v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v22 = *(unsigned char *)(a3 + 2);
  char v23 = *(unsigned char *)(a3 + 1);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v21 = *(void *)(a3 + 8);
  char v20 = *(unsigned char *)(a3 + 24);
  uint64_t v11 = *(void **)a4;
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t v26 = *(void **)a1;
  uint64_t v27 = v8;
  uint64_t v28 = v9;
  id v14 = specialized Data.init(contentsOf:options:)((uint64_t)&v26, (void *)1);
  if (v5)
  {
    swift_bridgeObjectRelease();
    outlined consume of URL?(v11);

    swift_release();
    return (void *)swift_release();
  }
  else
  {
    uint64_t v18 = a5;
    unint64_t v19 = v15;
    uint64_t v17 = (uint64_t)v14;

    swift_release();
    swift_release();
    LOBYTE(v26) = 1;
    BYTE1(v26) = v23;
    BYTE2(v26) = v22;
    uint64_t v27 = v21;
    uint64_t v28 = v10;
    char v29 = v20;
    v25[0] = v11;
    v25[1] = v12;
    v25[2] = v13;
    uint64_t result = AttributedString.init<A>(_markdownData:including:options:baseURL:)(v17, v19, a2, (char *)&v26, (uint64_t)v25, &v30);
    *uint64_t v18 = v30;
  }
  return result;
}

void *AttributedString.init(contentsOf:options:baseURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  int v17 = *(unsigned __int8 *)(a2 + 2);
  int v18 = *(unsigned __int8 *)(a2 + 1);
  uint64_t v9 = *(NSError **)(a2 + 8);
  uint64_t v10 = *(NSError **)(a2 + 16);
  char v19 = *(unsigned char *)(a2 + 24);
  char v22 = *a3;
  char v20 = v9;
  v21[0] = v6;
  v21[1] = v7;
  v21[2] = v8;
  id v11 = specialized Data.init(contentsOf:options:)((uint64_t)v21, (void *)1);
  if (v4)
  {
    swift_bridgeObjectRelease();
    outlined consume of URL?(v22);

    swift_release();
    return (void *)swift_release();
  }
  else
  {
    uint64_t v14 = (uint64_t)v11;
    unint64_t v15 = v12;

    swift_release();
    swift_release();
    if (v17) {
      int v16 = 0x10000;
    }
    else {
      int v16 = 0;
    }
    uint64_t result = specialized AttributedString.init<A>(_markdownData:including:options:baseURL:)(v14, v15, v16 | (v18 << 8) | 1u, v20, v10, v19, v22, v21);
    *a4 = v21[0];
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSInlinePresentationIntent()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSInlinePresentationIntent()
{
  return RawRepresentable<>.encode(to:)();
}

void AttributedString.MarkdownParsingOptions.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4 = objc_msgSend(a1, sel_allowsExtendedAttributes);
  id v5 = objc_msgSend(a1, sel_interpretedSyntax);
  if ((unint64_t)v5 > 2) {
    goto LABEL_8;
  }
  char v6 = (char)v5;
  id v7 = objc_msgSend(a1, sel_failurePolicy);
  if ((unint64_t)v7 > 1)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }
  id v8 = v7;
  id v9 = objc_msgSend(a1, sel_languageCode);
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v13 = v12;
  }
  else
  {
    id v11 = 0;
    uint64_t v13 = 0;
  }
  BOOL v14 = v8 != 0;
  swift_bridgeObjectRetain();
  unsigned __int8 v15 = objc_msgSend(a1, sel_appliesSourcePositionAttributes);
  swift_bridgeObjectRelease();

  *(unsigned char *)a2 = v4;
  *(unsigned char *)(a2 + 1) = v6;
  *(unsigned char *)(a2 + 2) = v14;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v13;
  *(unsigned char *)(a2 + 24) = v15;
}

void __swiftcall AttributedString.MarkdownParsingOptions._bridgeToObjectiveC()(NSAttributedStringMarkdownParsingOptions *__return_ptr retstr)
{
  unsigned __int8 v2 = *(unsigned char *)v1;
  unsigned __int8 v3 = *(unsigned char *)(v1 + 1);
  unsigned __int8 v4 = *(unsigned char *)(v1 + 2);
  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  char v7 = *(unsigned char *)(v1 + 24);
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  v8[0] = v2;
  v8[1] = v3;
  _OWORD v8[2] = v4;
  uint64_t v9 = v6;
  uint64_t v10 = v5;
  char v11 = v7;
  swift_bridgeObjectRetain();
  NSAttributedStringMarkdownParsingOptions.init(_:)(v8);
}

double static AttributedString.MarkdownParsingOptions._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of AttributedString.MarkdownParsingOptions?(*(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
  AttributedString.MarkdownParsingOptions.init(_:)(a1, (uint64_t)v7);
  char v4 = v9;
  uint64_t v5 = 0x10000;
  if (!v7[2]) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  double result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 24) = v4;
  return result;
}

uint64_t static AttributedString.MarkdownParsingOptions._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of AttributedString.MarkdownParsingOptions?(*(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
  AttributedString.MarkdownParsingOptions.init(_:)(a1, (uint64_t)v7);
  char v4 = v9;
  uint64_t v5 = 0x10000;
  if (!v7[2]) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  *(_OWORD *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 24) = v4;
  return 1;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AttributedString.MarkdownParsingOptions()
{
  unsigned __int8 v1 = *(unsigned char *)v0;
  unsigned __int8 v2 = *(unsigned char *)(v0 + 1);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 2);
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  char v6 = *(unsigned char *)(v0 + 24);
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  v8[0] = v1;
  v8[1] = v2;
  _OWORD v8[2] = v3;
  uint64_t v9 = v5;
  uint64_t v10 = v4;
  char v11 = v6;
  swift_bridgeObjectRetain();
  return NSAttributedStringMarkdownParsingOptions.init(_:)(v8);
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AttributedString.MarkdownParsingOptions(void *a1, uint64_t a2)
{
  outlined consume of AttributedString.MarkdownParsingOptions?(*(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
  AttributedString.MarkdownParsingOptions.init(_:)(a1, (uint64_t)v7);
  char v4 = v9;
  uint64_t v5 = 0x10000;
  if (!v7[2]) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  double result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 24) = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AttributedString.MarkdownParsingOptions(void *a1, uint64_t a2)
{
  outlined consume of AttributedString.MarkdownParsingOptions?(*(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
  AttributedString.MarkdownParsingOptions.init(_:)(a1, (uint64_t)v7);
  char v4 = v9;
  uint64_t v5 = 0x10000;
  if (!v7[2]) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  *(_OWORD *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 24) = v4;
  return 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AttributedString.MarkdownParsingOptions(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    AttributedString.MarkdownParsingOptions.init(_:)(v3, a2);
  }
  else
  {
    *(_WORD *)a2 = 0;
    *(unsigned char *)(a2 + 2) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
}

__n128 AttributedString.MarkdownSourcePosition.init(_:)@<Q0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  objc_msgSend(a1, sel_startOffsets);
  objc_msgSend(a1, sel_endOffsets);

  unint64_t v4 = 0;
  BOOL v5 = 1;
  if (v21 == 0x7FFFFFFFFFFFFFFFLL || v22 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    if (v23 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v5 = v24 == 0x7FFFFFFFFFFFFFFFLL;
      if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = v21;
      }
      if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v6 = 0;
      }
      else {
        unint64_t v6 = v22;
      }
      if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v7 = 0;
      }
      else {
        unint64_t v7 = v23;
      }
      if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v8 = 0;
      }
      else {
        unint64_t v8 = v24;
      }
    }
  }
  BOOL v9 = v24 == 0x7FFFFFFFFFFFFFFFLL;
  if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v21;
  }
  if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v22;
  }
  if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = v23;
  }
  if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v24;
  }
  if (v23 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    BOOL v9 = 1;
  }
  if (v22 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    char v14 = 1;
  }
  else
  {
    char v14 = v9;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v10;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = v11;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = v12;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v18 = 0;
  }
  else {
    unint64_t v18 = v13;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    char v19 = 1;
  }
  else {
    char v19 = v14;
  }
  *a2 = v25;
  __n128 result = v25;
  a2[1] = v25;
  a2[2].n128_u64[0] = v4;
  a2[2].n128_u64[1] = v6;
  a2[3].n128_u64[0] = v7;
  a2[3].n128_u64[1] = v8;
  a2[4].n128_u8[0] = v5;
  a2[4].n128_u64[1] = v15;
  a2[5].n128_u64[0] = v16;
  a2[5].n128_u64[1] = v17;
  a2[6].n128_u64[0] = v18;
  a2[6].n128_u8[8] = v19;
  return result;
}

void __swiftcall AttributedString.MarkdownSourcePosition._bridgeToObjectiveC()(NSAttributedStringMarkdownSourcePosition *__return_ptr retstr)
{
  if (*((unsigned char *)v1 + 64) == 1)
  {
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v2 = v1[6];
    uint64_t v12 = v1[5];
    uint64_t v13 = v1[4];
    uint64_t v3 = v1[7];
  }
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  if (*((unsigned char *)v1 + 104))
  {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v8 = v1[9];
    uint64_t v9 = v1[10];
    uint64_t v10 = v1[11];
    uint64_t v11 = v1[12];
  }
  v15[0] = v13;
  v15[1] = v12;
  v15[2] = v2;
  _OWORD v15[3] = v3;
  v15[4] = v4;
  v15[5] = v5;
  v14[0] = v8;
  v14[1] = v9;
  void v14[2] = v10;
  v14[3] = v11;
  v14[4] = v6;
  void v14[5] = v7;
  objc_msgSend(objc_allocWithZone((Class)NSAttributedStringMarkdownSourcePosition), sel_initWithStart_end_, v15, v14);
}

double static AttributedString.MarkdownSourcePosition._unconditionallyBridgeFromObjectiveC(_:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    *(void *)&double result = AttributedString.MarkdownSourcePosition.init(_:)(v3, (__n128 *)a2).n128_u64[0];
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 64) = 1;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AttributedString.MarkdownSourcePosition()
{
  if (*((unsigned char *)v0 + 64) == 1)
  {
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v1 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v1 = v0[6];
    uint64_t v12 = v0[5];
    uint64_t v13 = v0[4];
    uint64_t v2 = v0[7];
  }
  uint64_t v3 = *v0;
  uint64_t v4 = v0[1];
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  if (*((unsigned char *)v0 + 104))
  {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = v0[9];
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[11];
    uint64_t v10 = v0[12];
  }
  v15[0] = v13;
  v15[1] = v12;
  v15[2] = v1;
  _OWORD v15[3] = v2;
  v15[4] = v3;
  v15[5] = v4;
  v14[0] = v7;
  v14[1] = v8;
  void v14[2] = v9;
  v14[3] = v10;
  v14[4] = v5;
  void v14[5] = v6;
  return objc_msgSend(objc_allocWithZone((Class)NSAttributedStringMarkdownSourcePosition), sel_initWithStart_end_, v15, v14);
}

double protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AttributedString.MarkdownSourcePosition@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    *(void *)&double result = AttributedString.MarkdownSourcePosition.init(_:)(v3, (__n128 *)a2).n128_u64[0];
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 64) = 1;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

uint64_t AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v67 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v62 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v59 - v7;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v61 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v59 - v13;
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = *v3;
  uint64_t v68 = v3[1];
  uint64_t v65 = v3[2];
  uint64_t v66 = v18;
  uint64_t v64 = v3[3];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v16);
  if (!swift_dynamicCast())
  {
    uint64_t v75 = MEMORY[0x1E4FBC860];
    dispatch thunk of StringProtocol.utf8.getter();
    uint64_t v37 = dispatch thunk of Collection.count.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    uint64_t v38 = v75;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v37 > *(void *)(v38 + 24) >> 1)
    {
      if (*(void *)(v38 + 16) <= v37) {
        int64_t v40 = v37;
      }
      else {
        int64_t v40 = *(void *)(v38 + 16);
      }
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v40, 0);
      uint64_t v38 = v75;
    }
    dispatch thunk of StringProtocol.utf8.getter();
    dispatch thunk of Sequence.makeIterator()();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((BYTE1(v73) & 1) == 0)
    {
      char v52 = v73;
      do
      {
        uint64_t v75 = v38;
        unint64_t v54 = *(void *)(v38 + 16);
        unint64_t v53 = *(void *)(v38 + 24);
        if (v54 >= v53 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
          uint64_t v38 = v75;
        }
        *(void *)(v38 + 16) = v54 + 1;
        *(unsigned char *)(v38 + v54 + 32) = v52;
        dispatch thunk of IteratorProtocol.next()();
        char v52 = v73;
      }
      while (BYTE1(v73) != 1);
    }
    (*(void (**)(char *, uint64_t))(v63 + 8))(v8, AssociatedTypeWitness);
    uint64_t v41 = v75;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1);
      uint64_t v41 = v75;
    }
    uint64_t v42 = v66;
    uint64_t v43 = v68;
    unint64_t v45 = *(void *)(v41 + 16);
    unint64_t v44 = *(void *)(v41 + 24);
    unint64_t v46 = v45 + 1;
    if (v45 >= v44 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      uint64_t v41 = v75;
    }
    *(void *)(v41 + 16) = v46;
    *(unsigned char *)(v41 + 32 + v45) = 0;
    uint64_t v47 = self;
    swift_retain();
    long long v73 = 0u;
    *(_OWORD *)uint64_t v74 = 0u;
    *(int64x2_t *)&v74[16] = vdupq_n_s64(1uLL);
    objc_msgSend(v47, sel_calculateOffsetsForLine_column_inString_size_withExistingOffsets_, v42, v43, v41 + 32, v45 + 1, &v73);
    uint64_t v23 = 0;
    if ((void)v69 == 0x7FFFFFFFFFFFFFFFLL
      || (uint64_t v48 = *((void *)&v69 + 1), *((void *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL))
    {
      uint64_t v68 = 1;
    }
    else
    {
      uint64_t v68 = 1;
      if (v70 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v49 = v47;
        unint64_t v50 = v46;
        uint64_t v51 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        if ((void)v71 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v32 = v71;
          uint64_t v23 = v69;
          long long v73 = v69;
          uint64_t v31 = v70;
          *(void *)uint64_t v74 = v70;
          *(_OWORD *)&v74[8] = v71;
          *(void *)&v74[24] = v72;
          objc_msgSend(v49, (SEL)&selRef__downloadTaskWithURL_delegate_completionHandler_ + 6, v65, v64, v41 + 32, v50, &v73);
          uint64_t v33 = v69;
          if ((void)v69 == 0x7FFFFFFFFFFFFFFFLL
            || (uint64_t v34 = *((void *)&v69 + 1), *((void *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL)
            || (uint64_t v35 = v70, v70 == 0x7FFFFFFFFFFFFFFFLL)
            || (uint64_t v36 = v71, (void)v71 == 0x7FFFFFFFFFFFFFFFLL))
          {
            uint64_t v23 = 0;
            uint64_t v51 = 0;
            uint64_t v31 = 0;
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            uint64_t v36 = 0;
            uint64_t v68 = 1;
          }
          else
          {
            uint64_t v68 = 0;
            uint64_t v51 = v48;
          }
        }
        goto LABEL_42;
      }
    }
    uint64_t v51 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
LABEL_42:
    uint64_t v55 = v51;
    uint64_t result = swift_release_n();
    goto LABEL_43;
  }
  uint64_t v20 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v20 + 16);
  unint64_t v22 = self;
  long long v73 = 0u;
  *(_OWORD *)uint64_t v74 = 0u;
  *(int64x2_t *)&v74[16] = vdupq_n_s64(1uLL);
  objc_msgSend(v22, sel_calculateOffsetsForLine_column_inString_size_withExistingOffsets_, v66, v68, v20 + 32, v21, &v73);
  uint64_t v23 = 0;
  uint64_t v24 = v69;
  uint64_t v68 = 1;
  uint64_t v63 = v20;
  if ((void)v69 == 0x7FFFFFFFFFFFFFFFLL
    || (uint64_t v25 = *((void *)&v69 + 1), *((void *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL)
    || (uint64_t v26 = v70, v70 == 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v27 = v22;
    uint64_t v28 = v21;
    uint64_t v29 = v20 + 32;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    if ((void)v71 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v32 = v71;
      long long v73 = v69;
      *(void *)uint64_t v74 = v70;
      *(_OWORD *)&v74[8] = v71;
      *(void *)&v74[24] = v72;
      objc_msgSend(v27, (SEL)&selRef__downloadTaskWithURL_delegate_completionHandler_ + 6, v65, v64, v29, v28, &v73);
      uint64_t v33 = v69;
      if ((void)v69 == 0x7FFFFFFFFFFFFFFFLL
        || (uint64_t v34 = *((void *)&v69 + 1), *((void *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t v35 = v70, v70 == 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t v36 = v71, (void)v71 == 0x7FFFFFFFFFFFFFFFLL))
      {
        uint64_t v23 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v68 = 1;
      }
      else
      {
        uint64_t v68 = 0;
        uint64_t v23 = v24;
        uint64_t v30 = v25;
        uint64_t v31 = v26;
      }
    }
  }
  uint64_t v55 = v30;
  uint64_t result = swift_release();
LABEL_43:
  char v57 = v67;
  char v58 = v68;
  *unint64_t v67 = v23;
  v57[1] = v55;
  v57[2] = v31;
  v57[3] = v32;
  v57[4] = v33;
  v57[5] = v34;
  v57[6] = v35;
  v57[7] = v36;
  *((unsigned char *)v57 + 64) = v58;
  return result;
}

uint64_t specialized static AttributedString.MarkdownSourcePosition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a2 + 16)))), 0xFuLL))) & 1) == 0)return 0; {
  char v4 = *(unsigned char *)(a1 + 104);
  }
  int64x2_t v5 = *(int64x2_t *)(a1 + 88);
  int64x2_t v6 = *(int64x2_t *)(a1 + 72);
  if (*(unsigned char *)(a1 + 64))
  {
    if (!*(unsigned char *)(a2 + 64)) {
      return 0;
    }
    goto LABEL_9;
  }
  uint64_t result = 0;
  if ((*(unsigned char *)(a2 + 64) & 1) == 0
    && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 32), *(int64x2_t *)(a2 + 32)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 48), *(int64x2_t *)(a2 + 48)))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0)
  {
LABEL_9:
    if (v4)
    {
      if (*(unsigned char *)(a2 + 104)) {
        return 1;
      }
    }
    else if ((*(unsigned char *)(a2 + 104) & 1) == 0 {
           && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v6, *(int64x2_t *)(a2 + 72)), (int32x4_t)vceqq_s64(v5, *(int64x2_t *)(a2 + 88)))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0)
    }
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets);
  }
  return result;
}

uint64_t specialized AttributedString.MarkdownSourcePosition.Offsets.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.MarkdownSourcePosition.Offsets.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  int64x2_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v12 = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  char v11 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v10 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v9 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

uint64_t outlined consume of AttributedString.MarkdownParsingOptions?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AttributedString.MarkdownSourcePosition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E694C7472617473 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F437472617473 && a2 == 0xEB000000006E6D75 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E694C646E65 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D756C6F43646E65 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x66664F7472617473 && a2 == 0xEC00000073746573 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x657366664F646E65 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized AttributedString.MarkdownSourcePosition.Offsets.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 946238581 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x3631667475 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823B3160 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001823B3180)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized _AttributedStringFromMarkdownCreatorConcrete.parseExtendedAttributes(from:)(uint64_t a1, uint64_t a2)
{
  void (*v7)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t v10;

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v5 = JSONDecoder.init()();
  (*(void (**)(uint64_t))(*(void *)v5 + 232))(1);
  (*(void (**)(uint64_t))(*(void *)v5 + 256))(1);
  uint64_t v6 = type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox();
  uint64_t v7 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 320);
  uint64_t WitnessTable = swift_getWitnessTable();
  v7(&v10, v6, a1, a2, v6, WitnessTable);
  uint64_t result = swift_release();
  if (!v2) {
    return v10;
  }
  return result;
}

void specialized _AttributedStringFromMarkdownCreatorConcrete.init()()
{
}

__n128 specialized static AttributedString.MarkdownSourcePosition._forceBridgeFromObjectiveC(_:result:)(void *a1, __n128 *a2)
{
  id v3 = a1;
  objc_msgSend(v3, sel_startOffsets);
  objc_msgSend(v3, sel_endOffsets);

  unint64_t v4 = 0;
  BOOL v5 = 1;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v5 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = v15;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v6 = 0;
      }
      else {
        unint64_t v6 = v16;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v7 = 0;
      }
      else {
        unint64_t v7 = v17;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v8 = 0;
      }
      else {
        unint64_t v8 = v18;
      }
    }
  }
  unint64_t v9 = 0;
  BOOL v10 = 1;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v10 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v9 = 0;
      }
      else {
        unint64_t v9 = v15;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v11 = 0;
      }
      else {
        unint64_t v11 = v16;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v12 = 0;
      }
      else {
        unint64_t v12 = v17;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v13 = 0;
      }
      else {
        unint64_t v13 = v18;
      }
    }
  }
  *a2 = v19;
  __n128 result = v19;
  a2[1] = v19;
  a2[2].n128_u64[0] = v4;
  a2[2].n128_u64[1] = v6;
  a2[3].n128_u64[0] = v7;
  a2[3].n128_u64[1] = v8;
  a2[4].n128_u64[0] = v5;
  a2[4].n128_u64[1] = v9;
  a2[5].n128_u64[0] = v11;
  a2[5].n128_u64[1] = v12;
  a2[6].n128_u64[0] = v13;
  a2[6].n128_u8[8] = v10;
  a2[6].n128_u8[9] = 0;
  return result;
}

uint64_t specialized static AttributedString.MarkdownSourcePosition._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  objc_msgSend(v3, sel_startOffsets);
  objc_msgSend(v3, sel_endOffsets);

  uint64_t v4 = 0;
  BOOL v5 = 1;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v5 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = v15;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v16;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = v17;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = v18;
      }
    }
  }
  uint64_t v9 = 0;
  BOOL v10 = 1;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v10 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v15;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v16;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v17;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v18;
      }
    }
  }
  *(_OWORD *)a2 = v19;
  *(_OWORD *)(a2 + 16) = v19;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v9;
  *(void *)(a2 + 80) = v11;
  *(void *)(a2 + 88) = v12;
  *(void *)(a2 + 96) = v13;
  *(unsigned char *)(a2 + 104) = v10;
  *(unsigned char *)(a2 + 105) = 0;
  return 1;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition);
  }
  return result;
}

uint64_t initializeWithCopy for AttributedString.MarkdownParsingOptions(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.MarkdownParsingOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for AttributedString.MarkdownParsingOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.MarkdownParsingOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownParsingOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AttributedString.MarkdownParsingOptions.FailurePolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EA1758);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AttributedString.MarkdownParsingOptions.InterpretedSyntax(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EA184CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AttributedString.MarkdownSourcePosition(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownSourcePosition(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 105) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownSourcePosition()
{
  return &type metadata for AttributedString.MarkdownSourcePosition;
}

unsigned char *storeEnumTagSinglePayload for AttributedString.MarkdownSourcePosition.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EA19B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownSourcePosition.CodingKeys()
{
  return &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownSourcePosition.Offsets()
{
  return &type metadata for AttributedString.MarkdownSourcePosition.Offsets;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSInlinePresentationIntent(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EA2064);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  return &unk_1ECA37E60;
}

uint64_t type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t assignWithCopy for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey()
{
  return swift_getWitnessTable();
}

void Date.ParseStrategy.consuming(_:startingAt:in:)(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  if (a1 >> 14 >= a2 >> 14) {
    goto LABEL_13;
  }
  uint64_t v4 = Date.ParseStrategy.formatter.getter();
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = v4;
  uint64_t v6 = String.subscript.getter();
  if (!((v6 ^ v7) >> 14)
    || (*(unsigned char *)(v5 + 24) & 1) == 0
    && (Substring.subscript.getter(), char v8 = Character.isWhitespace.getter(), swift_bridgeObjectRelease(), (v8 & 1) != 0))
  {
    swift_release();
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 1;
    return;
  }
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t v9 = String.init<A>(_:)();
  unint64_t v11 = v10;
  udat_getCalendar();
  ucal_clone();
  swift_bridgeObjectRetain();
  uint64_t v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v9, v11);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v12 = String.Index.utf16Offset<A>(in:)();
  if (v12 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v13 = v12;
  if (v12 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  int v18 = v12;
  if (v17[2] >> 31) {
    goto LABEL_17;
  }
  udat_parseCalendar();
  swift_release();
  if (v13 == v18)
  {
    ucal_close();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  ucal_getMillis();
  double v15 = v14 / 1000.0 + -978307200.0;
  ucal_close();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v16 = String.Index.init<A>(utf16Offset:in:)();
  swift_release();
  *(void *)a3 = v16;
  *(double *)(a3 + 8) = v15;
  *(unsigned char *)(a3 + 16) = 0;
}

uint64_t Date.ParseStrategy.isLenient.getter()
{
  return *v0;
}

uint64_t Date.ParseStrategy.isLenient.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*Date.ParseStrategy.isLenient.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double Date.ParseStrategy.twoDigitStartDate.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double Date.ParseStrategy.twoDigitStartDate.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Date.ParseStrategy.twoDigitStartDate.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t Date.ParseStrategy.locale.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  return result;
}

uint64_t (*Date.ParseStrategy.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

__n128 Date.ParseStrategy.timeZone.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*Date.ParseStrategy.timeZone.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 48);
  return swift_unknownObjectRetain();
}

__n128 Date.ParseStrategy.calendar.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*Date.ParseStrategy.calendar.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.format.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 Date.ParseStrategy.init(format:locale:timeZone:calendar:isLenient:twoDigitStartDate:)@<Q0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = *a6;
  *(unsigned char *)a7 = a5;
  *(void *)(a7 + 8) = v9;
  long long v10 = *a3;
  *(_OWORD *)(a7 + 16) = *a2;
  *(_OWORD *)(a7 + 32) = v10;
  __n128 result = *a4;
  *(__n128 *)(a7 + 48) = *a4;
  *(void *)(a7 + 64) = v7;
  *(void *)(a7 + 72) = v8;
  return result;
}

uint64_t Date.ParseStrategy.formatter.getter()
{
  void (*v16)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void v27[4];
  void v28[3];
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  uint64_t v26 = *v0;
  uint64_t v1 = *((void *)v0 + 1);
  uint64_t v2 = *((void *)v0 + 5);
  uint64_t v3 = *((void *)v0 + 7);
  uint64_t v24 = *((void *)v0 + 8);
  uint64_t v25 = *((void *)v0 + 9);
  if (*((void *)v0 + 2))
  {
    uint64_t v4 = *((void *)v0 + 3);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 64);
    swift_unknownObjectRetain();
    uint64_t v7 = v6(ObjectType, v4);
    unint64_t v9 = v8;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0;
  }
  uint64_t v10 = swift_getObjectType();
  unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32);
  swift_unknownObjectRetain();
  uint64_t v12 = v11(v10, v2);
  uint64_t v14 = v13;
  swift_unknownObjectRelease();
  uint64_t v15 = swift_getObjectType();
  uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v16(v28, v15, v3);
  swift_unknownObjectRelease();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  int v18 = v17(v15, v3);
  long long v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v15, v3);
  swift_unknownObjectRelease();
  if (v9) {
    uint64_t v20 = v7;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v9) {
    uint64_t v21 = v9;
  }
  else {
    uint64_t v21 = 0xE000000000000000;
  }
  v27[0] = v20;
  v27[1] = v21;
  v27[2] = v12;
  v27[3] = v14;
  v28[1] = v18;
  void v28[2] = v19;
  uint64_t v29 = 0;
  uint64_t v30 = v24;
  uint64_t v31 = v25;
  uint64_t v32 = v26;
  uint64_t v33 = v1;
  swift_bridgeObjectRetain();
  unint64_t v22 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

__n128 Date.ParseStrategy.init(formatStyle:lenient:twoDigitStartDate:)@<Q0>(long long *a1@<X0>, char a2@<W1>, unint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  long long v7 = a1[2];
  long long v6 = a1[3];
  long long v8 = a1[4];
  long long v9 = a1[6];
  *(_OWORD *)uint64_t v64 = a1[5];
  *(_OWORD *)&v64[16] = v9;
  *(_OWORD *)&v64[26] = *(long long *)((char *)a1 + 106);
  long long v10 = a1[1];
  long long v59 = *a1;
  long long v60 = v10;
  long long v61 = v7;
  long long v62 = v6;
  long long v63 = v8;
  unint64_t v11 = *a3;
  char v12 = v7;
  if ((v7 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v13 = 0;
    LOBYTE(v14) = 0;
    uint64_t v15 = 0;
    LOBYTE(v16) = 0;
    LOBYTE(v17) = 0;
    uint64_t v18 = 0;
    LOBYTE(v19) = 12;
    char v20 = -1;
    LOBYTE(v21) = 2;
    LOBYTE(v22) = 9;
    LOBYTE(v23) = 6;
    char v12 = 1;
    LOBYTE(v24) = 5;
    char v25 = 3;
    char v26 = 3;
    LOBYTE(v27) = 3;
    LOBYTE(v28) = 3;
    LOBYTE(v29) = 1;
  }
  else
  {
    uint64_t v13 = *((void *)&v59 + 1);
    char v26 = v60;
    unint64_t v24 = (unint64_t)v60 >> 8;
    uint64_t v18 = *((void *)&v61 + 1);
    uint64_t v15 = *((void *)&v60 + 1);
    char v25 = v59;
    unint64_t v14 = (unint64_t)v60 >> 16;
    unint64_t v27 = (unint64_t)v60 >> 24;
    unint64_t v16 = ((unint64_t)v7 >> 8) & 1;
    unint64_t v28 = (unint64_t)v7 >> 16;
    unint64_t v23 = (unint64_t)v7 >> 24;
    unint64_t v22 = DWORD1(v7);
    unint64_t v17 = (unint64_t)v7 >> 40;
    unint64_t v29 = WORD3(v7);
    unint64_t v21 = BYTE7(v7);
    char v20 = v62;
    int v19 = BYTE1(v62);
  }
  v41[0] = v25;
  uint64_t v42 = v13;
  char v43 = v26;
  char v44 = v24;
  char v45 = v14;
  char v46 = v27;
  uint64_t v47 = v15;
  char v48 = v12;
  char v49 = v16;
  char v50 = v28;
  char v51 = v23;
  char v52 = v22;
  char v53 = v17;
  char v54 = v29;
  char v55 = v21;
  uint64_t v56 = v18;
  char v57 = v20;
  char v58 = v19;
  unint64_t v30 = *((void *)&v63 + 1);
  unint64_t v31 = *(void *)v64;
  v40[0] = *((void *)&v63 + 1);
  v40[1] = *(void *)v64;
  unint64_t v32 = *(void *)&v64[24];
  unint64_t v33 = *(void *)&v64[32];
  v39[0] = *(void *)&v64[24];
  v39[1] = *(void *)&v64[32];
  uint64_t v34 = specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)((uint64_t)v41, v40, (uint64_t)v39);
  unint64_t v36 = v35;
  swift_unknownObjectRetain();
  __n128 v38 = *(__n128 *)&v64[8];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  outlined release of Date.FormatStyle((uint64_t)&v59);
  a4->n128_u8[0] = a2 & 1;
  a4->n128_u64[1] = v11;
  a4[1].n128_u64[0] = v30;
  a4[1].n128_u64[1] = v31;
  __n128 result = v38;
  a4[2] = v38;
  a4[3].n128_u64[0] = v32;
  a4[3].n128_u64[1] = v33;
  a4[4].n128_u64[0] = v34;
  a4[4].n128_u64[1] = v36;
  return result;
}

uint64_t Date.ParseStrategy.hash(into:)(uint64_t a1)
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned char v61[144];
  unsigned char v62[8];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  char v79;
  void v80[18];
  unsigned char v81[144];
  unsigned char v82[152];

  Swift::UInt64 v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 56);
  long long v59 = *(void *)(v1 + 40);
  Hasher._combine(_:)(*(unsigned char *)v1);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v3;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  long long v60 = v6;
  if (!v4)
  {
    Hasher._combine(_:)(0);
    goto LABEL_11;
  }
  Hasher._combine(_:)(1u);
  uint64_t ObjectType = swift_getObjectType();
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  if (v9(ObjectType, v5))
  {
    Swift::UInt8 v10 = 1;
LABEL_10:
    Hasher._combine(_:)(v10);
    swift_unknownObjectRelease_n();
    goto LABEL_11;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v80, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v81);
  outlined init with take of LocalePreferences?((uint64_t)v81, (uint64_t)v82);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v82) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_10;
  }
  outlined init with take of LocalePreferences?((uint64_t)v81, (uint64_t)v62);
  Hasher._combine(_:)(1u);
  if (v62[0] == 2)
  {
    unint64_t v17 = 0;
  }
  else
  {
    unint64_t v17 = v62[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  uint64_t v18 = v63;
  if (!v63)
  {
    Hasher._combine(_:)(0);
    unint64_t v23 = v62;
    goto LABEL_26;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v18 + 16));
  int v19 = *(void *)(v18 + 16);
  if (!v19)
  {
    outlined init with take of LocalePreferences?((uint64_t)v81, (uint64_t)v61);
    unint64_t v23 = v61;
LABEL_26:
    outlined retain of LocalePreferences(v23);
    if (!v64) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  outlined retain of LocalePreferences?((uint64_t)v81, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    if (!v65) {
      goto LABEL_21;
    }
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v65)
  {
LABEL_21:
    Hasher._combine(_:)(0);
    unint64_t v21 = v66;
    if (!v66) {
      goto LABEL_22;
    }
LABEL_29:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v21);
    swift_bridgeObjectRelease();
    unint64_t v22 = v67;
    if (!v67) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v21 = v66;
  if (v66) {
    goto LABEL_29;
  }
LABEL_22:
  Hasher._combine(_:)(0);
  unint64_t v22 = v67;
  if (!v67)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v22);
  swift_bridgeObjectRelease();
LABEL_31:
  unint64_t v24 = v69;
  char v26 = v70;
  char v25 = v71;
  unint64_t v27 = v72;
  char v55 = v71;
  uint64_t v56 = v68;
  char v54 = v70;
  if (v68)
  {
    unint64_t v28 = v72;
    unint64_t v29 = v71;
    unint64_t v30 = v68;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v31 = v24;
    unint64_t v32 = v26;
    unint64_t v33 = v29;
    uint64_t v34 = v28;
    unint64_t v35 = v30;
    _CFObject.hash(into:)();
    char v57 = v24;
    char v58 = v28;
    if (v24) {
      goto LABEL_33;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    char v43 = v27;
    char v44 = v24;
    char v45 = v26;
    char v46 = v25;
    char v57 = v24;
    char v58 = v27;
    if (v24)
    {
LABEL_33:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      unint64_t v36 = v24;
      _CFObject.hash(into:)();

      __n128 v38 = v54;
      uint64_t v37 = v55;
      if (v54) {
        goto LABEL_34;
      }
      goto LABEL_39;
    }
  }
  Hasher._combine(_:)(0);
  __n128 v38 = v54;
  uint64_t v37 = v55;
  if (v54)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v39 = v38;
    _CFObject.hash(into:)();

    if (v37) {
      goto LABEL_35;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    uint64_t v41 = v58;
    if (v58) {
      goto LABEL_36;
    }
    goto LABEL_41;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  if (!v37) {
    goto LABEL_40;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  int64_t v40 = v37;
  _CFObject.hash(into:)();

  uint64_t v41 = v58;
  if (v58)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v42 = v41;
    _CFObject.hash(into:)();

    goto LABEL_42;
  }
LABEL_41:
  Hasher._combine(_:)(0);
  uint64_t v42 = 0;
LABEL_42:

  uint64_t v47 = v73;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v47);
    swift_bridgeObjectRelease();
    char v48 = v74;
    if (v74) {
      goto LABEL_44;
    }
LABEL_47:
    Hasher._combine(_:)(0);
    if (v75) {
      goto LABEL_45;
    }
LABEL_48:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }
  Hasher._combine(_:)(0);
  char v48 = v74;
  if (!v74) {
    goto LABEL_47;
  }
LABEL_44:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v48);
  swift_bridgeObjectRelease();
  if (!v75) {
    goto LABEL_48;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_49:
  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v49 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v77 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v50 = v77 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
  }
  if (v78 == 2)
  {
    char v51 = 0;
  }
  else
  {
    char v51 = v78 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v51);
  if (v79 == 2)
  {
    char v52 = 0;
  }
  else
  {
    char v53 = v79 & 1;
    Hasher._combine(_:)(1u);
    char v52 = v53;
  }
  Hasher._combine(_:)(v52);
  outlined retain of LocalePreferences?((uint64_t)v81, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v81, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_11:
  char v12 = swift_getObjectType();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 112);
  swift_unknownObjectRetain();
  v13(a1, v12, v59);
  swift_unknownObjectRelease();
  unint64_t v14 = swift_getObjectType();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 120);
  swift_unknownObjectRetain();
  v15(a1, v14, v60);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.ParseStrategy.CodingKeys()
{
  unint64_t result = 0x6E65696E654C7369;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 3:
      unint64_t result = 0x656E6F5A656D6974;
      break;
    case 4:
      unint64_t result = 0x7261646E656C6163;
      break;
    case 5:
      unint64_t result = 0x74616D726F66;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.ParseStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Date.ParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ParseStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ParseStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int Date.ParseStrategy.hashValue.getter()
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(unsigned char *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(unsigned char *, uint64_t, uint64_t);
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt v46;
  Swift::UInt v47;
  Swift::UInt8 v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  unsigned char v57[144];
  unsigned char v58[8];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  char v75;
  void v76[18];
  unsigned char v77[144];
  unsigned char v78[144];
  unsigned char v79[80];

  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 56);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v2;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  uint64_t v56 = v6;
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_11;
  }
  Hasher._combine(_:)(1u);
  uint64_t ObjectType = swift_getObjectType();
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if (v9(ObjectType, v4))
  {
    Swift::UInt8 v10 = 1;
LABEL_10:
    Hasher._combine(_:)(v10);
    swift_unknownObjectRelease_n();
    goto LABEL_11;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v11(v76, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77);
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_10;
  }
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v58);
  Hasher._combine(_:)(1u);
  if (v58[0] == 2)
  {
    unint64_t v17 = 0;
  }
  else
  {
    unint64_t v17 = v58[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  uint64_t v18 = v59;
  if (!v59)
  {
    Hasher._combine(_:)(0);
    unint64_t v23 = v58;
    goto LABEL_26;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v18 + 16));
  int v19 = *(void *)(v18 + 16);
  if (!v19)
  {
    outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v57);
    unint64_t v23 = v57;
LABEL_26:
    outlined retain of LocalePreferences(v23);
    if (!v60) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  if (!v60)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    if (!v61) {
      goto LABEL_21;
    }
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_21:
    Hasher._combine(_:)(0);
    unint64_t v21 = v62;
    if (!v62) {
      goto LABEL_22;
    }
LABEL_29:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v21);
    swift_bridgeObjectRelease();
    unint64_t v22 = v63;
    if (!v63) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v21 = v62;
  if (v62) {
    goto LABEL_29;
  }
LABEL_22:
  Hasher._combine(_:)(0);
  unint64_t v22 = v63;
  if (!v63)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v22);
  swift_bridgeObjectRelease();
LABEL_31:
  unint64_t v24 = v65;
  char v25 = v66;
  char v55 = v67;
  char v26 = v68;
  char v52 = v64;
  char v53 = v5;
  char v51 = v68;
  if (v64)
  {
    unint64_t v27 = v64;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v28 = v24;
    unint64_t v29 = v25;
    unint64_t v30 = v55;
    unint64_t v31 = v26;
    unint64_t v32 = v27;
    _CFObject.hash(into:)();
    if (v24)
    {
LABEL_33:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      unint64_t v33 = v24;
      uint64_t v34 = v25;
      unint64_t v35 = v24;
      _CFObject.hash(into:)();

      char v25 = v34;
      goto LABEL_36;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    unint64_t v36 = v26;
    uint64_t v37 = v24;
    __n128 v38 = v25;
    uint64_t v39 = v55;
    if (v24) {
      goto LABEL_33;
    }
  }
  unint64_t v33 = v24;
  Hasher._combine(_:)(0);
LABEL_36:
  char v54 = v25;
  if (v25)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    int64_t v40 = v25;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v41 = v33;
  uint64_t v5 = v53;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v42 = v55;
    _CFObject.hash(into:)();

    if (v51)
    {
LABEL_41:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      char v43 = v51;
      _CFObject.hash(into:)();

      goto LABEL_44;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v51) {
      goto LABEL_41;
    }
  }
  Hasher._combine(_:)(0);
  char v43 = 0;
LABEL_44:

  char v44 = v69;
  if (v44)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v44);
    swift_bridgeObjectRelease();
    char v45 = v70;
    if (v70) {
      goto LABEL_46;
    }
LABEL_49:
    Hasher._combine(_:)(0);
    if (v71) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
  Hasher._combine(_:)(0);
  char v45 = v70;
  if (!v70) {
    goto LABEL_49;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v45);
  swift_bridgeObjectRelease();
  if (!v71) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  if (v72 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v46 = v72 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46);
  }
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v47 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47);
  }
  if (v74 == 2)
  {
    char v48 = 0;
  }
  else
  {
    char v48 = v74 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v48);
  if (v75 == 2)
  {
    char v49 = 0;
  }
  else
  {
    char v50 = v75 & 1;
    Hasher._combine(_:)(1u);
    char v49 = v50;
  }
  Hasher._combine(_:)(v49);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_11:
  char v12 = swift_getObjectType();
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 112);
  swift_unknownObjectRetain();
  v13(v79, v12, v5);
  swift_unknownObjectRelease();
  unint64_t v14 = swift_getObjectType();
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v56 + 120);
  swift_unknownObjectRetain();
  v15(v79, v14, v56);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ParseStrategy()
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(unsigned char *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(unsigned char *, uint64_t, uint64_t);
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt v45;
  Swift::UInt v46;
  Swift::UInt8 v47;
  Swift::UInt8 v48;
  Swift::UInt8 v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  void v74[18];
  unsigned char v75[144];
  unsigned char v76[144];
  unsigned char v77[80];

  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 56);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v2;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  char v55 = v6;
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_11;
  }
  Hasher._combine(_:)(1u);
  uint64_t ObjectType = swift_getObjectType();
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if (v9(ObjectType, v4))
  {
    Swift::UInt8 v10 = 1;
LABEL_10:
    Hasher._combine(_:)(v10);
    swift_unknownObjectRelease_n();
    goto LABEL_11;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v11(v74, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_10;
  }
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)&v56);
  Hasher._combine(_:)(1u);
  if (v56 == 2)
  {
    unint64_t v17 = 0;
  }
  else
  {
    unint64_t v17 = v56 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  uint64_t v18 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
LABEL_25:
    outlined retain of LocalePreferences(&v56);
    if (!v58) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v18 + 16));
  int v19 = *(void *)(v18 + 16);
  if (!v19) {
    goto LABEL_25;
  }
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    if (!v59) {
      goto LABEL_21;
    }
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_21:
    Hasher._combine(_:)(0);
    unint64_t v21 = v60;
    if (!v60) {
      goto LABEL_22;
    }
LABEL_28:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v21);
    swift_bridgeObjectRelease();
    unint64_t v22 = v61;
    if (!v61) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v21 = v60;
  if (v60) {
    goto LABEL_28;
  }
LABEL_22:
  Hasher._combine(_:)(0);
  unint64_t v22 = v61;
  if (!v61)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v22);
  swift_bridgeObjectRelease();
LABEL_30:
  unint64_t v23 = v63;
  unint64_t v24 = v64;
  char v54 = v65;
  char v25 = v66;
  char v51 = v62;
  char v52 = v5;
  char v50 = v66;
  if (v62)
  {
    char v26 = v62;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v27 = v23;
    unint64_t v28 = v24;
    unint64_t v29 = v54;
    unint64_t v30 = v25;
    unint64_t v31 = v26;
    _CFObject.hash(into:)();
    if (v23)
    {
LABEL_32:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      unint64_t v32 = v23;
      unint64_t v33 = v24;
      uint64_t v34 = v23;
      _CFObject.hash(into:)();

      unint64_t v24 = v33;
      goto LABEL_35;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    unint64_t v35 = v25;
    unint64_t v36 = v23;
    uint64_t v37 = v24;
    __n128 v38 = v54;
    if (v23) {
      goto LABEL_32;
    }
  }
  unint64_t v32 = v23;
  Hasher._combine(_:)(0);
LABEL_35:
  char v53 = v24;
  if (v24)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v39 = v24;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  int64_t v40 = v32;
  uint64_t v5 = v52;
  if (v54)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v41 = v54;
    _CFObject.hash(into:)();

    if (v50)
    {
LABEL_40:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v42 = v50;
      _CFObject.hash(into:)();

      goto LABEL_43;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v50) {
      goto LABEL_40;
    }
  }
  Hasher._combine(_:)(0);
  uint64_t v42 = 0;
LABEL_43:

  char v43 = v67;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v43);
    swift_bridgeObjectRelease();
    char v44 = v68;
    if (v68) {
      goto LABEL_45;
    }
LABEL_48:
    Hasher._combine(_:)(0);
    if (v69) {
      goto LABEL_46;
    }
LABEL_49:
    Hasher._combine(_:)(0);
    goto LABEL_50;
  }
  Hasher._combine(_:)(0);
  char v44 = v68;
  if (!v68) {
    goto LABEL_48;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v44);
  swift_bridgeObjectRelease();
  if (!v69) {
    goto LABEL_49;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_50:
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v45 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v45);
  }
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v46 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46);
  }
  if (v72 == 2)
  {
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v47 = v72 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v47);
  if (v73 == 2)
  {
    char v48 = 0;
  }
  else
  {
    char v49 = v73 & 1;
    Hasher._combine(_:)(1u);
    char v48 = v49;
  }
  Hasher._combine(_:)(v48);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_11:
  char v12 = swift_getObjectType();
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 112);
  swift_unknownObjectRetain();
  v13(v77, v12, v5);
  swift_unknownObjectRelease();
  unint64_t v14 = swift_getObjectType();
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v55 + 120);
  swift_unknownObjectRetain();
  v15(v77, v14, v55);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Date.ParseStrategy.parse(_:)(Swift::String a1)
{
  object = a1._object;
  __darwin_time_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v6 = v1;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v9 = *(void *)(v2 + 72);
  LOBYTE(v70.tv_sec) = *(unsigned char *)v2;
  v70.uint64_t tv_nsec = v7;
  long long v10 = *(_OWORD *)(v2 + 32);
  v71[0] = *(_OWORD *)(v2 + 16);
  v71[1] = v10;
  _OWORD v71[2] = *(_OWORD *)(v2 + 48);
  uint64_t v72 = v8;
  uint64_t v73 = v9;
  if (Date.ParseStrategy.formatter.getter())
  {
    v70.__darwin_time_t tv_sec = countAndFlagsBits;
    v70.uint64_t tv_nsec = (uint64_t)object;
    udat_getCalendar();
    int v69 = 0;
    ucal_clone();
    swift_bridgeObjectRetain();
    unint64_t v11 = specialized _copyCollectionToContiguousArray<A>(_:)(countAndFlagsBits, (unint64_t)object);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v12 = String.Index.utf16Offset<A>(in:)();
    if (v12 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    uint64_t v13 = v12;
    if (v12 > 0x7FFFFFFF)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    int v68 = v12;
    if (v11[2] >> 31)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
    }
    udat_parseCalendar();
    swift_release();
    if (v13 != v68)
    {
      ucal_getMillis();
      double v65 = v64 / 1000.0 + -978307200.0;
      ucal_close();
      swift_release();
      *uint64_t v6 = v65;
      return result;
    }
    ucal_close();
    v70.__darwin_time_t tv_sec = 0;
    v70.uint64_t tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &v70);
    uint64_t v14 = swift_retain_n();
    MEMORY[0x1F4188790](v14);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v67, &v70.tv_sec);
    if (!v3)
    {
      __darwin_time_t tv_sec = v70.tv_sec;
      uint64_t tv_nsec = v70.tv_nsec;
      swift_release_n();
      v70.__darwin_time_t tv_sec = 0;
      v70.uint64_t tv_nsec = 0xE000000000000000;
      if (tv_nsec)
      {
        _StringGuts.grow(_:)(88);
        v17.___darwin_time_t countAndFlagsBits = 0x7020746F6E6E6143;
        v17._object = (void *)0xED00002065737261;
        String.append(_:)(v17);
        v18.___darwin_time_t countAndFlagsBits = countAndFlagsBits;
        v18._object = object;
        String.append(_:)(v18);
        v19.___darwin_time_t countAndFlagsBits = 0xD000000000000046;
        v19._object = (void *)0x80000001823AB110;
        String.append(_:)(v19);
        __darwin_time_t v20 = tv_sec;
        uint64_t v21 = tv_nsec;
      }
      else
      {
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease();
        strcpy((char *)&v70, "Cannot parse ");
        HIWORD(v70.tv_nsec) = -4864;
        __darwin_time_t v20 = countAndFlagsBits;
        uint64_t v21 = (uint64_t)object;
      }
      String.append(_:)(*(Swift::String *)&v20);
      v41.___darwin_time_t countAndFlagsBits = 46;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      __darwin_time_t v42 = v70.tv_sec;
      uint64_t v43 = v70.tv_nsec;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
      *(void *)(inited + 40) = v45;
      *(void *)(inited + 48) = v42;
      *(void *)(inited + 56) = v43;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      char v46 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v70);
      __darwin_time_t v47 = v70.tv_sec;
      uint64_t v48 = v70.tv_nsec;
      swift_retain();
      unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v48);
      if (v50)
      {
        __break(1u);
      }
      else
      {
        v46[(v49 >> 6) + 8] |= 1 << v49;
        char v51 = (__darwin_time_t *)(v46[6] + 16 * v49);
        *char v51 = v47;
        v51[1] = v48;
        outlined init with take of Any(v71, (_OWORD *)(v46[7] + 32 * v49));
        uint64_t v52 = v46[2];
        BOOL v31 = __OFADD__(v52, 1);
        uint64_t v53 = v52 + 1;
        if (!v31)
        {
          _OWORD v46[2] = v53;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v54 = objc_allocWithZone((Class)NSError);
          uint64_t v55 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v56 = objc_msgSend(v54, sel_initWithDomain_code_userInfo_, v55, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v57 = objc_msgSend(v56, sel_domain);
          id v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
          uint64_t v60 = v59;

          if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v60 == v61)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
LABEL_22:
            swift_willThrow();
            swift_release();
            return result;
          }
          char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v62) {
            goto LABEL_22;
          }
          goto LABEL_29;
        }
      }
      __break(1u);
      goto LABEL_27;
    }
    swift_release_n();
    swift_willThrow();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v22 = swift_initStackObject();
    *(_OWORD *)(v22 + 16) = xmmword_1821037E0;
    *(void *)(v22 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v22 + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(v22 + 40) = v23;
    *(void *)(v22 + 48) = 0xD000000000000021;
    *(void *)(v22 + 56) = 0x80000001823AE7F0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    unint64_t v24 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v22 + 32, (uint64_t)&v70);
    __darwin_time_t v25 = v70.tv_sec;
    uint64_t v26 = v70.tv_nsec;
    swift_retain();
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
    if (v28)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v24[(v27 >> 6) + 8] |= 1 << v27;
    unint64_t v29 = (__darwin_time_t *)(v24[6] + 16 * v27);
    *unint64_t v29 = v25;
    v29[1] = v26;
    outlined init with take of Any(v71, (_OWORD *)(v24[7] + 32 * v27));
    uint64_t v30 = v24[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v32;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v33 = objc_allocWithZone((Class)NSError);
    uint64_t v34 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v35 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v36 = objc_msgSend(v35, sel_domain);
    id v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v39 = v38;

    if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v39 == v40)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v63 & 1) == 0) {
        goto LABEL_33;
      }
    }
    swift_willThrow();
  }
  return result;
}

uint64_t Date.ParseStrategy.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ParseStrategy.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v18 = *(void *)(v1 + 24);
  uint64_t v19 = v9;
  long long v10 = *(_OWORD *)(v1 + 32);
  long long v15 = *(_OWORD *)(v1 + 48);
  long long v16 = v10;
  uint64_t v17 = *(void *)(v1 + 64);
  v14[1] = *(void *)(v1 + 72);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = v18;
    uint64_t v12 = v19;
    *(void *)&long long v20 = v8;
    char v21 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v20 = v12;
    *((void *)&v20 + 1) = v11;
    char v21 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v20 = v16;
    char v21 = 3;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v20 = v15;
    char v21 = 4;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v20) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Date.ParseStrategy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ParseStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    LOBYTE(v27) = 0;
    int v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v28 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v27;
    char v28 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v26 = *((void *)&v27 + 1);
    uint64_t v12 = v27;
    char v28 = 3;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v25 = v27;
    char v28 = 4;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    uint64_t v24 = v25;
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v23 = v9;
    long long v13 = v27;
    LOBYTE(v27) = 5;
    long long v22 = v13;
    swift_unknownObjectRetain();
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v16 = v15;
    v23 &= 1u;
    uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v21 = v14;
    v17(v8, v5);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(unsigned char *)a2 = v23;
    *(void *)(a2 + 8) = v10;
    uint64_t v18 = v26;
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v18;
    long long v19 = v22;
    *(_OWORD *)(a2 + 32) = v25;
    *(_OWORD *)(a2 + 48) = v19;
    *(void *)(a2 + 64) = v21;
    *(void *)(a2 + 72) = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return swift_unknownObjectRelease();
}

Foundation::Date protocol witness for ParseStrategy.parse(_:) in conformance Date.ParseStrategy(Swift::String *a1)
{
  return Date.ParseStrategy.parse(_:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ParseStrategy@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.ParseStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ParseStrategy(void *a1)
{
  return Date.ParseStrategy.encode(to:)(a1);
}

__n128 static ParseStrategy.fixed<>(format:timeZone:locale:)@<Q0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  long long v13 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  uint64_t v9 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v10 = swift_unknownObjectRetain();
  if (v9 != -1) {
    uint64_t v10 = swift_once();
  }
  uint64_t v11 = (os_unfair_lock_s *)static CalendarCache.cache;
  MEMORY[0x1F4188790](v10);
  swift_retain_n();
  os_unfair_lock_lock(v11 + 15);
  partial apply for closure #1 in CalendarCache.fixed(_:)((uint64_t)&v11[4], &v14);
  os_unfair_lock_unlock(v11 + 15);
  swift_release_n();
  __n128 result = v14;
  *(unsigned char *)a4 = 1;
  *(void *)(a4 + 8) = 0xC1CD27E440000000;
  *(void *)(a4 + 16) = v7;
  *(void *)(a4 + 24) = v8;
  *(_OWORD *)(a4 + 32) = v13;
  *(__n128 *)(a4 + 48) = result;
  *(void *)(a4 + 64) = v6;
  *(void *)(a4 + 72) = v5;
  return result;
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.ParseStrategy(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.ParseStrategy(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();

  return MEMORY[0x1F4188350](a1, v2);
}

uint64_t static RegexComponent<>.date(format:locale:timeZone:calendar:twoDigitStartDate:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  void (*v16)(void *__return_ptr, uint64_t, uint64_t);
  long long v18;
  uint64_t v19[2];
  void v20[2];
  uint64_t vars8;

  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v18 = *a3;
  uint64_t v11 = *a4;
  uint64_t v12 = *a5;
  if (*a4)
  {
    uint64_t v13 = a4[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v14 = v11;
  }
  else
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 192);
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v16(v20, ObjectType, v9);
    v19[0] = v10;
    v19[1] = v9;
    Calendar.locale.setter(v19);
    uint64_t v14 = v20[0];
    uint64_t v13 = v20[1];
  }
  *(unsigned char *)a6 = 0;
  *(void *)(a6 + 8) = v12;
  *(void *)(a6 + 16) = v10;
  *(void *)(a6 + 24) = v9;
  *(_OWORD *)(a6 + 32) = v18;
  *(void *)(a6 + 48) = v14;
  *(void *)(a6 + 56) = v13;
  *(void *)(a6 + 64) = v8;
  *(void *)(a6 + 72) = v7;

  return swift_unknownObjectRetain();
}

double static RegexComponent<>.dateTime(date:time:locale:timeZone:calendar:)@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, long long *a4@<X3>, uint64_t *a5@<X4>, __n128 *a6@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  double result;
  long long v16;
  long long v17[7];
  char v18;
  long long v19;
  long long v20;
  void v21[2];
  long long v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  uint64_t v7 = *a2;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v16 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  long long v25 = *a1;
  uint64_t v26 = 0;
  *((void *)&v22 + 1) = v9;
  int v23 = v7;
  uint64_t v24 = 0;
  *(void *)&long long v22 = v8;
  if (v10)
  {
    swift_unknownObjectRetain();
    uint64_t v12 = v10;
  }
  else
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 192);
    swift_unknownObjectRetain_n();
    v14(v21, ObjectType, v9);
    *(void *)&v17[0] = v8;
    *((void *)&v17[0] + 1) = v9;
    Calendar.locale.setter((uint64_t *)v17);
    uint64_t v12 = v21[0];
    uint64_t v11 = v21[1];
  }
  *(void *)&uint64_t v20 = v12;
  *((void *)&v20 + 1) = v11;
  long long v19 = v16;
  uint64_t v18 = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)((uint64_t)&v25, &v23, &v22, &v20, &v19, &v18, (uint64_t)v17);
  *(void *)&uint64_t v20 = 0xC1CD27E440000000;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  *(void *)&__n128 result = Date.ParseStrategy.init(formatStyle:lenient:twoDigitStartDate:)(v17, 0, (unint64_t *)&v20, a6).n128_u64[0];
  return result;
}

double static RegexComponent<>.date(_:locale:timeZone:calendar:)@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, uint64_t *a4@<X3>, __n128 *a5@<X8>)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  double result;
  long long v14;
  long long v15[7];
  char v16;
  long long v17;
  long long v18;
  void v19[2];
  long long v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v14 = *a3;
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  int v23 = *a1;
  uint64_t v24 = 0;
  *((void *)&v20 + 1) = v7;
  uint64_t v21 = 0;
  long long v22 = 1;
  *(void *)&uint64_t v20 = v6;
  if (v8)
  {
    swift_unknownObjectRetain();
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 192);
    swift_unknownObjectRetain_n();
    v12(v19, ObjectType, v7);
    *(void *)&v15[0] = v6;
    *((void *)&v15[0] + 1) = v7;
    Calendar.locale.setter((uint64_t *)v15);
    uint64_t v10 = v19[0];
    uint64_t v9 = v19[1];
  }
  *(void *)&uint64_t v18 = v10;
  *((void *)&v18 + 1) = v9;
  uint64_t v17 = v14;
  uint64_t v16 = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)((uint64_t)&v23, &v21, &v20, &v18, &v17, &v16, (uint64_t)v15);
  *(void *)&uint64_t v18 = 0xC1CD27E440000000;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  *(void *)&__n128 result = Date.ParseStrategy.init(formatStyle:lenient:twoDigitStartDate:)(v15, 0, (unint64_t *)&v18, a5).n128_u64[0];
  return result;
}

uint64_t specialized static Date.ParseStrategy.== infix(_:_:)(double *a1, double *a2)
{
  uint64_t result = 0;
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1]) {
    return result;
  }
  long long v4 = *((_OWORD *)a1 + 2);
  long long v5 = *((_OWORD *)a1 + 3);
  uint64_t v6 = *((void *)a1 + 8);
  uint64_t v7 = *((void *)a1 + 9);
  long long v8 = *((_OWORD *)a2 + 1);
  long long v9 = *((_OWORD *)a2 + 2);
  long long v10 = *((_OWORD *)a2 + 3);
  uint64_t v11 = *((void *)a2 + 8);
  uint64_t v12 = *((void *)a2 + 9);
  if (*((void *)a1 + 2))
  {
    long long v19 = *((_OWORD *)a1 + 1);
    if ((void)v8)
    {
      long long v16 = v10;
      long long v17 = v5;
      long long v18 = v8;
      long long v14 = v9;
      long long v15 = v4;
      swift_unknownObjectRetain_n();
      char v13 = specialized static Locale.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v18);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      long long v9 = v14;
      long long v4 = v15;
      if (v13) {
        goto LABEL_8;
      }
      return 0;
    }
    swift_unknownObjectRetain();
LABEL_14:
    swift_unknownObjectRelease();
    return 0;
  }
  long long v16 = *((_OWORD *)a2 + 3);
  long long v17 = *((_OWORD *)a1 + 3);
  if ((void)v8) {
    goto LABEL_14;
  }
LABEL_8:
  long long v18 = v9;
  long long v19 = v4;
  if ((specialized static TimeZone.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v18) & 1) == 0) {
    return 0;
  }
  long long v18 = v16;
  long long v19 = v17;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v18) & 1) == 0) {
    return 0;
  }
  if (v6 == v11 && v7 == v12) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.ParseStrategy(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();
  a1[2] = lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();
  unint64_t result = lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();
  a1[3] = result;
  return result;
}

uint64_t destroy for Date.ParseStrategy()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Date.ParseStrategy(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.ParseStrategy(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Date.ParseStrategy(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.ParseStrategy(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.ParseStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.ParseStrategy()
{
  return &type metadata for Date.ParseStrategy;
}

unsigned char *storeEnumTagSinglePayload for Date.ParseStrategy.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EA6124);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Date.ParseStrategy.CodingKeys()
{
  return &unk_1ECA473F8;
}

uint64_t specialized Date.ParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65696E654C7369 && a2 == 0xE900000000000074;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823B31A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74616D726F66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t Array<A>._extend(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void **)v2;
  uint64_t v6 = *(void *)(*(void *)v2 + 16);
  if (v6)
  {
    uint64_t v7 = v6 - 1;
    if (v5[2 * v6 + 3] == a1)
    {
      uint64_t v4 = v5[2 * v7 + 4];
      if (v4 > a2)
      {
        __break(1u);
      }
      else
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
LABEL_5:
          long long v9 = &v5[2 * v7];
          goto LABEL_11;
        }
      }
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      uint64_t v5 = (void *)result;
      goto LABEL_5;
    }
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 1, v5);
    uint64_t v5 = (void *)result;
  }
  unint64_t v11 = v5[2];
  unint64_t v10 = v5[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v11 + 1;
  long long v9 = &v5[2 * v11];
LABEL_11:
  v9[4] = v4;
  uint64_t v9[5] = a2;
  *(void *)uint64_t v2 = v5;
  return result;
}

void *specialized Rope.update<A>(at:by:)(void *result, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a2[3];
  if (*result != v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!*a2)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  long long v8 = result;
  uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)v14);
  uint64_t v9 = *((void *)&v14[0] + 1);
  v13[0] = v14[0];
  v13[1] = v14[1];
  v13[2] = v14[2];
  if (__OFSUB__(*a3, *((void *)&v14[0] + 1))) {
    goto LABEL_10;
  }
  *a3 -= *((void *)&v14[0] + 1);
  BOOL v10 = __OFADD__(v9, a4);
  uint64_t v11 = v9 + a4;
  if (v10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *((void *)&v13[0] + 1) = v11;
  a2[3] = v4 + 1;
  *long long v8 = v4 + 1;
  if (!*a2)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  _OWORD v8[2] = specialized Rope._Node._finalizeModify(_:)(&v12, v13);
  swift_bridgeObjectRelease();

  return (void *)swift_bridgeObjectRelease();
}

uint64_t AttributedString.Guts._paragraphExtending(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  long long v11 = v5[2];
  v31[0] = v5[1];
  v31[1] = v11;
  long long v32 = v5[3];
  v33[0] = v31[0];
  v33[1] = v11;
  v33[2] = v32;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v33, (uint64_t)v34);
  outlined retain of Locale((uint64_t)v34);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v31);
  long long v12 = v5[2];
  v29[0] = v5[1];
  v29[1] = v12;
  long long v30 = v5[3];
  v35[0] = v29[0];
  v35[1] = v12;
  v35[2] = v30;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v35, (uint64_t)v36);
  outlined retain of Locale((uint64_t)v36);
  uint64_t v13 = BigString.index(after:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  outlined release of Locale((uint64_t)v29);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v28[0] = a1;
  v28[1] = a2;
  void v28[2] = a3;
  _OWORD v28[3] = a4;
  v28[4] = v13;
  v28[5] = v15;
  v28[6] = v17;
  v28[7] = v19;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v28, v25);
  uint64_t result = outlined release of Locale((uint64_t)v27);
  uint64_t v21 = v26;
  if (v26 != 2)
  {
    uint64_t v22 = v25[4];
    uint64_t v23 = v25[5];
    uint64_t v24 = v25[6];
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      *a5 = a1;
      a5[1] = a2;
      a5[2] = a3;
      a5[3] = a4;
      a5[4] = v22;
      a5[5] = v23;
      a5[6] = v24;
      a5[7] = v21;
      return result;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t AttributedString.Guts._characterInvalidatedAttributes(at:)(uint64_t result)
{
  uint64_t v2 = v1[8];
  if (v2) {
    uint64_t v3 = v1[10];
  }
  else {
    uint64_t v3 = 0;
  }
  if (result < 0 || (uint64_t v4 = result, v3 < result))
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v5 = v1[9];
  uint64_t v6 = v1[11];
  if (!v2 || (v1[10] > result ? (BOOL v7 = *(unsigned __int16 *)(v2 + 16) == 0) : (BOOL v7 = 1), v7))
  {
    unint64_t v8 = swift_unknownObjectRetain_n();
    unint64_t v9 = specialized Rope._endPath.getter(v8);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v10 = 0;
    if (v2) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  uint64_t v29 = v1[9];
  uint64_t v14 = *(unsigned __int8 *)(v2 + 18);
  if (!*(unsigned char *)(v2 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v23 = 0;
    uint64_t v10 = v2;
    uint64_t v24 = *(unsigned __int16 *)(v2 + 16);
    if (!*(_WORD *)(v2 + 16)) {
      goto LABEL_49;
    }
LABEL_40:
    uint64_t v25 = *(void *)(v10 + 24);
    BOOL v18 = __OFSUB__(v4, v25);
    v4 -= v25;
    if (v18) {
      goto LABEL_63;
    }
    if (__OFADD__(v4, 1))
    {
LABEL_64:
      __break(1u);
      return result;
    }
    if (v4 + 1 < 1) {
      goto LABEL_51;
    }
    if (v24 == 1) {
      goto LABEL_49;
    }
    uint64_t v26 = (uint64_t *)(v10 + 48);
    uint64_t v27 = 1;
    while (1)
    {
      uint64_t v28 = *v26;
      v26 += 3;
      BOOL v18 = __OFSUB__(v4, v28);
      v4 -= v28;
      if (v18) {
        break;
      }
      if (__OFADD__(v4, 1)) {
        goto LABEL_62;
      }
      if (v4 + 1 < 1)
      {
        uint64_t v24 = v27;
        goto LABEL_53;
      }
      if (v24 == ++v27) {
        goto LABEL_49;
      }
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v10 = v2;
  do
  {
    uint64_t v16 = *(unsigned __int16 *)(v10 + 16);
    if (*(_WORD *)(v10 + 16))
    {
      uint64_t v17 = *(void *)(v10 + 40);
      BOOL v18 = __OFSUB__(v4, v17);
      uint64_t v19 = v4 - v17;
      if (v18) {
        goto LABEL_57;
      }
      if (__OFADD__(v19, 1)) {
        goto LABEL_58;
      }
      if (v19 + 1 < 1)
      {
        uint64_t v16 = 0;
        goto LABEL_23;
      }
      if (v16 != 1)
      {
        uint64_t v20 = (uint64_t *)(v10 + 64);
        uint64_t v21 = 1;
        while (1)
        {
          uint64_t v22 = *v20;
          v20 += 3;
          uint64_t v4 = v19 - v22;
          if (__OFSUB__(v19, v22)) {
            break;
          }
          if (__OFADD__(v4, 1)) {
            goto LABEL_55;
          }
          if (v4 + 1 < 1)
          {
            uint64_t v16 = v21;
            uint64_t v4 = v19;
            goto LABEL_23;
          }
          ++v21;
          uint64_t v19 = v4;
          if (v16 == v21) {
            goto LABEL_22;
          }
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      uint64_t v4 = v19;
    }
LABEL_22:
    if (v4) {
      goto LABEL_56;
    }
LABEL_23:
    char v15 = (4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C;
    uint64_t v14 = ((-15 << v15) - 1) & v14 | (v16 << v15);
    uint64_t v10 = *(void *)(v10 + 24 + 24 * v16);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }
  while (*(unsigned char *)(v10 + 18));
  unint64_t v23 = v14 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v24 = *(unsigned __int16 *)(v10 + 16);
  if (*(_WORD *)(v10 + 16)) {
    goto LABEL_40;
  }
LABEL_49:
  if (v4)
  {
    __break(1u);
LABEL_51:
    uint64_t v24 = 0;
  }
LABEL_53:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v9 = v23 | (v24 << 8);
  uint64_t v5 = v29;
LABEL_13:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v6, v9, v10, v2, v5);
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_14:
  if (v6 != v1[11]) {
    goto LABEL_60;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = v1[8];
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v9, v11);
    swift_unknownObjectRelease();
  }
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized _NativeDictionary.filter(_:)(v12);
  swift_bridgeObjectRelease_n();
  return v13;
}

uint64_t closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  outlined init with copy of AttributedString._AttributeValue(a3, (uint64_t)v7);
  outlined init with copy of AttributedString._AttributeValue((uint64_t)v7, (uint64_t)v5);
  swift_bridgeObjectRetain();
  char v3 = AttributedString._AttributeValue.isInvalidatedOnTextChange.getter();
  outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  outlined destroy of AttributedString._AttributeValue((uint64_t)v5);
  return v3 & 1;
}

uint64_t AttributedString.Guts._applyStyle(type:from:to:)(uint64_t result, int64_t a2, uint64_t a3, int64_t a4)
{
  int64_t v5 = *(void *)(v4 + 64);
  int64_t v6 = *(void *)(v4 + 80);
  if (v5) {
    int64_t v7 = *(void *)(v4 + 80);
  }
  else {
    int64_t v7 = 0;
  }
  if (a2 < 0) {
    goto LABEL_481;
  }
  int64_t v8 = a2;
  if (v7 < a2) {
    goto LABEL_481;
  }
  uint64_t v9 = *(void *)(result + 8);
  uint64_t v268 = *(void *)result;
  uint64_t v10 = *(void *)(v4 + 72);
  unint64_t v11 = *(void *)(v4 + 88);
  v249 = (uint64_t *)v4;
  v248 = (void *)(v4 + 64);
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && v6 > a2)
    {
      unint64_t v266 = *(void *)(v4 + 88);
      uint64_t v267 = *(void *)(v4 + 72);
      int64_t v25 = *(unsigned __int8 *)(v5 + 18);
      if (!*(unsigned char *)(v5 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v15 = v5;
LABEL_61:
        uint64_t v44 = *(unsigned __int16 *)(v15 + 16);
        if (!*(_WORD *)(v15 + 16)) {
          goto LABEL_79;
        }
        uint64_t v45 = *(void *)(v15 + 24);
        BOOL v30 = __OFSUB__(v8, v45);
        v8 -= v45;
        if (v30) {
          goto LABEL_497;
        }
        if (__OFADD__(v8, 1)) {
          goto LABEL_498;
        }
        if (v8 + 1 < 1)
        {
          uint64_t v44 = 0;
          goto LABEL_427;
        }
        if (v44 == 1)
        {
LABEL_79:
          if (!v8) {
            goto LABEL_427;
          }
          __break(1u);
          goto LABEL_81;
        }
        char v46 = (uint64_t *)(v15 + 48);
        uint64_t v47 = 1;
        while (1)
        {
          uint64_t v48 = *v46;
          v46 += 3;
          BOOL v30 = __OFSUB__(v8, v48);
          v8 -= v48;
          if (v30) {
            goto LABEL_484;
          }
          if (__OFADD__(v8, 1)) {
            goto LABEL_485;
          }
          if (v8 + 1 < 1) {
            goto LABEL_426;
          }
          if (v44 == ++v47) {
            goto LABEL_79;
          }
        }
      }
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v4 = 24;
      int64_t v36 = v5;
      while (1)
      {
        uint64_t v38 = *(unsigned __int16 *)(v36 + 16);
        if (!*(_WORD *)(v36 + 16)) {
          goto LABEL_45;
        }
        uint64_t v39 = *(void *)(v36 + 40);
        BOOL v30 = __OFSUB__(v8, v39);
        int64_t v40 = v8 - v39;
        if (v30) {
          goto LABEL_464;
        }
        if (__OFADD__(v40, 1)) {
          goto LABEL_465;
        }
        if (v40 + 1 < 1)
        {
          uint64_t v38 = 0;
        }
        else
        {
          if (v38 == 1)
          {
            int64_t v8 = v40;
LABEL_45:
            if (v8) {
              goto LABEL_462;
            }
            goto LABEL_46;
          }
          Swift::String v41 = (uint64_t *)(v36 + 64);
          uint64_t v42 = 1;
          while (1)
          {
            uint64_t v43 = *v41;
            v41 += 3;
            int64_t v8 = v40 - v43;
            if (__OFSUB__(v40, v43)) {
              goto LABEL_435;
            }
            if (__OFADD__(v8, 1)) {
              goto LABEL_436;
            }
            if (v8 + 1 < 1) {
              break;
            }
            ++v42;
            int64_t v40 = v8;
            if (v38 == v42) {
              goto LABEL_45;
            }
          }
          uint64_t v38 = v42;
          int64_t v8 = v40;
        }
LABEL_46:
        char v37 = (4 * *(unsigned char *)(v36 + 18) + 8) & 0x3C;
        int64_t v25 = ((-15 << v37) - 1) & v25 | (v38 << v37);
        uint64_t v15 = *(void *)(v36 + 24 + 24 * v38);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        int64_t v36 = v15;
        if (!*(unsigned char *)(v15 + 18)) {
          goto LABEL_61;
        }
      }
    }
  }
  unint64_t v13 = swift_unknownObjectRetain_n();
  unint64_t v14 = specialized Rope._endPath.getter(v13);
  swift_unknownObjectRelease();
  uint64_t v15 = 0;
  if (!v5) {
    goto LABEL_14;
  }
LABEL_13:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v15, v5, v10);
  swift_unknownObjectRelease_n();
LABEL_14:
  uint64_t v16 = *(void *)(v4 + 64);
  uint64_t v17 = *(void *)(v4 + 72);
  uint64_t v18 = *(void *)(v4 + 80);
  uint64_t v19 = *(void *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v11, v14, v15, v16, v17, v18, v19);
  unint64_t v266 = v20;
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v267 = specialized _NativeDictionary.filter(_:)(v21, v268, v9);
  uint64_t result = swift_bridgeObjectRelease_n();
  int64_t v6 = *(void *)(v4 + 64);
  if (v6) {
    uint64_t v22 = *(void *)(v4 + 80);
  }
  else {
    uint64_t v22 = 0;
  }
  if (a3 < 0 || v22 < a3) {
    goto LABEL_482;
  }
  uint64_t v23 = *(void *)(v4 + 72);
  unint64_t v24 = *(void *)(v4 + 88);
  if (!v6 || !*(_WORD *)(v6 + 16) || *(void *)(v4 + 80) <= a3)
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v35 = specialized Rope._endPath.getter(v6);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v4 = 0;
    int64_t v25 = 0;
    if (!v6)
    {
LABEL_91:
      uint64_t v251 = 0;
      goto LABEL_92;
    }
LABEL_41:
    swift_unknownObjectRetain();
    uint64_t v251 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v24, v35, v4, v6, v23);
    uint64_t result = swift_unknownObjectRelease_n();
LABEL_92:
    int64_t v54 = a4;
    if (__OFSUB__(a3, v25)) {
      goto LABEL_483;
    }
    int64_t v254 = a3 - v25;
    *(void *)&long long v283 = v24;
    *((void *)&v283 + 1) = v35;
    unint64_t v55 = v35;
    uint64_t v265 = v267 + 64;
    v284 = (void *)v4;
    id v56 = v249;
    while (1)
    {
      uint64_t v10 = v56[8];
      int64_t v5 = v56[10];
      unint64_t v259 = v24;
      if (a3 != v54)
      {
        unint64_t v68 = swift_unknownObjectRetain();
        specialized Rope._endPath.getter(v68);
        if (v10) {
          swift_unknownObjectRelease();
        }
        else {
          int64_t v5 = 0;
        }
        if (v254 >= v5) {
          goto LABEL_419;
        }
        goto LABEL_149;
      }
      uint64_t v245 = v56[9];
      uint64_t v255 = v56[11];
      if (v10)
      {
        if (v5 < a3) {
          goto LABEL_461;
        }
        if (*(_WORD *)(v10 + 16)) {
          BOOL v57 = v5 <= a3;
        }
        else {
          BOOL v57 = 1;
        }
        if (!v57)
        {
          uint64_t v15 = v4;
          unint64_t v58 = v55;
          uint64_t v59 = *(unsigned __int8 *)(v10 + 18);
          if (*(unsigned char *)(v10 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            int64_t v25 = a3;
            uint64_t v60 = v10;
            while (1)
            {
              uint64_t v47 = *(unsigned __int16 *)(v60 + 16);
              if (*(_WORD *)(v60 + 16))
              {
                uint64_t v63 = *(void *)(v60 + 40);
                BOOL v30 = __OFSUB__(v25, v63);
                int64_t v64 = v25 - v63;
                if (v30) {
                  goto LABEL_433;
                }
                if (__OFADD__(v64, 1))
                {
LABEL_434:
                  __break(1u);
LABEL_435:
                  __break(1u);
LABEL_436:
                  __break(1u);
LABEL_437:
                  __break(1u);
LABEL_438:
                  __break(1u);
                  goto LABEL_439;
                }
                if (v64 + 1 < 1)
                {
                  uint64_t v47 = 0;
                  goto LABEL_107;
                }
                if (v47 != 1)
                {
                  double v65 = (uint64_t *)(v60 + 64);
                  uint64_t v66 = 1;
                  while (1)
                  {
                    uint64_t v67 = *v65;
                    v65 += 3;
                    int64_t v25 = v64 - v67;
                    if (__OFSUB__(v64, v67)) {
                      goto LABEL_424;
                    }
                    if (__OFADD__(v25, 1)) {
                      break;
                    }
                    if (v25 + 1 < 1)
                    {
                      uint64_t v47 = v66;
                      int64_t v25 = v64;
                      goto LABEL_107;
                    }
                    ++v66;
                    int64_t v64 = v25;
                    if (v47 == v66) {
                      goto LABEL_106;
                    }
                  }
LABEL_425:
                  __break(1u);
LABEL_426:
                  uint64_t v44 = v47;
LABEL_427:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  unint64_t v14 = v25 & 0xFFFFFFFFFFFFF0FFLL | (v44 << 8);
                  uint64_t v4 = (uint64_t)v249;
                  unint64_t v11 = v266;
                  if (v5) {
                    goto LABEL_13;
                  }
                  goto LABEL_14;
                }
                int64_t v25 = v64;
              }
LABEL_106:
              if (v25) {
                goto LABEL_432;
              }
LABEL_107:
              char v61 = (4 * *(unsigned char *)(v60 + 18) + 8) & 0x3C;
              uint64_t v59 = ((-15 << v61) - 1) & v59 | (v47 << v61);
              uint64_t v62 = *(void *)(v60 + 24 + 24 * v47);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v60 = v62;
              if (!*(unsigned char *)(v62 + 18)) {
                goto LABEL_131;
              }
            }
          }
          uint64_t result = swift_unknownObjectRetain_n();
          int64_t v25 = a3;
          uint64_t v62 = v10;
LABEL_131:
          uint64_t v71 = *(unsigned __int16 *)(v62 + 16);
          if (*(_WORD *)(v62 + 16))
          {
            uint64_t v72 = *(void *)(v62 + 24);
            BOOL v30 = __OFSUB__(v25, v72);
            int64_t v73 = v25 - v72;
            int64_t v70 = v254;
            if (v30) {
              goto LABEL_478;
            }
            if (__OFADD__(v73, 1))
            {
LABEL_479:
              __break(1u);
LABEL_480:
              __break(1u);
LABEL_481:
              __break(1u);
LABEL_482:
              __break(1u);
LABEL_483:
              __break(1u);
LABEL_484:
              __break(1u);
LABEL_485:
              __break(1u);
LABEL_486:
              __break(1u);
LABEL_487:
              __break(1u);
              goto LABEL_488;
            }
            if (v73 + 1 < 1)
            {
              uint64_t v71 = 0;
              goto LABEL_145;
            }
            if (v71 != 1)
            {
              uint64_t v74 = (uint64_t *)(v62 + 48);
              uint64_t v75 = 1;
              while (1)
              {
                uint64_t v76 = *v74;
                v74 += 3;
                int64_t v25 = v73 - v76;
                if (__OFSUB__(v73, v76)) {
                  goto LABEL_459;
                }
                if (__OFADD__(v25, 1)) {
                  break;
                }
                if (v25 + 1 < 1)
                {
                  uint64_t v71 = v75;
                  int64_t v25 = v73;
                  goto LABEL_145;
                }
                ++v75;
                int64_t v73 = v25;
                if (v71 == v75) {
                  goto LABEL_144;
                }
              }
LABEL_460:
              __break(1u);
LABEL_461:
              __break(1u);
LABEL_462:
              __break(1u);
LABEL_463:
              __break(1u);
LABEL_464:
              __break(1u);
LABEL_465:
              __break(1u);
LABEL_466:
              __break(1u);
LABEL_467:
              __break(1u);
LABEL_468:
              __break(1u);
LABEL_469:
              __break(1u);
              goto LABEL_470;
            }
            int64_t v25 = v73;
          }
          else
          {
            int64_t v70 = v254;
          }
LABEL_144:
          if (v25) {
            goto LABEL_477;
          }
LABEL_145:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v69 = v59 & 0xFFFFFFFFFFFFF0FFLL | (v71 << 8);
          goto LABEL_146;
        }
      }
      else if (a3 > 0)
      {
        goto LABEL_475;
      }
      swift_unknownObjectRetain_n();
      unint64_t v69 = specialized Rope._endPath.getter(v10);
      uint64_t result = swift_unknownObjectRelease();
      int64_t v25 = 0;
      if (!v10)
      {
        int64_t v70 = v254;
        goto LABEL_147;
      }
      uint64_t v15 = v4;
      unint64_t v58 = v55;
      uint64_t v62 = 0;
      int64_t v70 = v254;
LABEL_146:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)(v255, v69, v62, v10, v245);
      uint64_t result = swift_unknownObjectRelease_n();
      unint64_t v55 = v58;
      uint64_t v4 = v15;
      unint64_t v24 = v259;
LABEL_147:
      uint64_t v77 = a3 - v25;
      if (__OFSUB__(a3, v25)) {
        goto LABEL_457;
      }
      id v56 = v249;
      if (v70 >= v77)
      {
LABEL_419:
        swift_bridgeObjectRelease();
        swift_release();
        return swift_release();
      }
LABEL_149:
      uint64_t v79 = v56[8];
      uint64_t v78 = v56[9];
      uint64_t v80 = v56[10];
      uint64_t v81 = v56[11];
      swift_unknownObjectRetain();
      specialized Rope.subscript.getter(v24, v55, v4, v79, v78, v80, v81);
      uint64_t v10 = v82;
      uint64_t v84 = v83;
      swift_unknownObjectRelease();
      uint64_t v85 = v56[8];
      uint64_t v86 = v56[9];
      char v87 = v56;
      uint64_t v88 = v56[10];
      uint64_t v89 = v87[11];
      swift_unknownObjectRetain();
      unint64_t v90 = specialized Rope.subscript.getter(v24, v55, v4, v85, v86, v88, v89);
      int64_t v5 = v91;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v92 = v254 + v90;
      if (__OFADD__(v254, v90)) {
        goto LABEL_442;
      }
      uint64_t v281 = v10;
      uint64_t v282 = v84;
      if (v254 >= a4) {
        int64_t v93 = a4;
      }
      else {
        int64_t v93 = v254;
      }
      if (v254 >= a3) {
        uint64_t v94 = v93;
      }
      else {
        uint64_t v94 = a3;
      }
      if (v92 <= a3) {
        uint64_t v95 = a3;
      }
      else {
        uint64_t v95 = v254 + v90;
      }
      if (v92 > a4) {
        uint64_t v95 = a4;
      }
      if (v94 == v95)
      {
LABEL_443:
        __break(1u);
LABEL_444:
        __break(1u);
LABEL_445:
        __break(1u);
        goto LABEL_446;
      }
      if (v94 != v254 || v95 != v92)
      {
        uint64_t v243 = v95;
        uint64_t v244 = v94;
        uint64_t v257 = v10 + 64;
        uint64_t v109 = 1 << *(unsigned char *)(v10 + 32);
        if (v109 < 64) {
          uint64_t v110 = ~(-1 << v109);
        }
        else {
          uint64_t v110 = -1;
        }
        int64_t v25 = v110 & *(void *)(v10 + 64);
        int64_t v261 = (unint64_t)(v109 + 63) >> 6;
        uint64_t result = swift_bridgeObjectRetain();
        char v247 = 0;
        uint64_t v15 = 0;
        while (1)
        {
LABEL_204:
          if (v25)
          {
            unint64_t v111 = __clz(__rbit64(v25));
            v25 &= v25 - 1;
            unint64_t v112 = v111 | (v15 << 6);
          }
          else
          {
            BOOL v30 = __OFADD__(v15++, 1);
            if (v30)
            {
              __break(1u);
LABEL_421:
              __break(1u);
LABEL_422:
              __break(1u);
LABEL_423:
              __break(1u);
LABEL_424:
              __break(1u);
              goto LABEL_425;
            }
            if (v15 >= v261) {
              goto LABEL_231;
            }
            unint64_t v113 = *(void *)(v257 + 8 * v15);
            if (!v113)
            {
              uint64_t v114 = v15 + 1;
              if (v15 + 1 >= v261) {
                goto LABEL_231;
              }
              unint64_t v113 = *(void *)(v257 + 8 * v114);
              if (!v113)
              {
                uint64_t v114 = v15 + 2;
                if (v15 + 2 >= v261) {
                  goto LABEL_231;
                }
                unint64_t v113 = *(void *)(v257 + 8 * v114);
                if (!v113)
                {
                  uint64_t v114 = v15 + 3;
                  if (v15 + 3 >= v261) {
                    goto LABEL_231;
                  }
                  unint64_t v113 = *(void *)(v257 + 8 * v114);
                  if (!v113)
                  {
                    uint64_t v114 = v15 + 4;
                    if (v15 + 4 >= v261)
                    {
LABEL_231:
                      swift_release();
                      uint64_t v122 = 1 << *(unsigned char *)(v267 + 32);
                      if (v122 < 64) {
                        uint64_t v123 = ~(-1 << v122);
                      }
                      else {
                        uint64_t v123 = -1;
                      }
                      uint64_t v15 = v123 & *(void *)(v267 + 64);
                      int64_t v25 = (unint64_t)(v122 + 63) >> 6;
                      uint64_t result = swift_retain();
                      int64_t v124 = 0;
                      if (v15)
                      {
LABEL_235:
                        unint64_t v125 = __clz(__rbit64(v15));
                        v15 &= v15 - 1;
                        unint64_t v126 = v125 | (v124 << 6);
                        goto LABEL_252;
                      }
                      while (1)
                      {
LABEL_239:
                        BOOL v30 = __OFADD__(v124++, 1);
                        if (v30) {
                          goto LABEL_422;
                        }
                        if (v124 >= v25) {
                          goto LABEL_291;
                        }
                        unint64_t v128 = *(void *)(v265 + 8 * v124);
                        if (!v128)
                        {
                          int64_t v129 = v124 + 1;
                          if (v124 + 1 >= v25) {
                            goto LABEL_291;
                          }
                          unint64_t v128 = *(void *)(v265 + 8 * v129);
                          if (!v128)
                          {
                            int64_t v129 = v124 + 2;
                            if (v124 + 2 >= v25) {
                              goto LABEL_291;
                            }
                            unint64_t v128 = *(void *)(v265 + 8 * v129);
                            if (!v128)
                            {
                              int64_t v129 = v124 + 3;
                              if (v124 + 3 >= v25) {
                                goto LABEL_291;
                              }
                              unint64_t v128 = *(void *)(v265 + 8 * v129);
                              if (!v128)
                              {
                                int64_t v129 = v124 + 4;
                                if (v124 + 4 >= v25) {
                                  goto LABEL_291;
                                }
                                unint64_t v128 = *(void *)(v265 + 8 * v129);
                                if (!v128)
                                {
                                  while (1)
                                  {
                                    int64_t v124 = v129 + 1;
                                    if (__OFADD__(v129, 1)) {
                                      goto LABEL_449;
                                    }
                                    if (v124 >= v25) {
                                      break;
                                    }
                                    unint64_t v128 = *(void *)(v265 + 8 * v124);
                                    ++v129;
                                    if (v128) {
                                      goto LABEL_251;
                                    }
                                  }
LABEL_291:
                                  uint64_t result = swift_release();
                                  id v56 = v249;
                                  if ((v247 & 1) == 0)
                                  {
                                    int64_t v154 = v254;
                                    goto LABEL_347;
                                  }
                                  if (!__OFSUB__(v243, v244))
                                  {
                                    uint64_t v145 = v281;
                                    uint64_t v146 = v282;
                                    swift_bridgeObjectRetain();
                                    swift_bridgeObjectRetain();
                                    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v244, v243, v243 - v244, v145, v146);
                                    swift_bridgeObjectRelease();
                                    uint64_t result = swift_bridgeObjectRelease();
                                    uint64_t v147 = v249[8];
                                    if (v147) {
                                      uint64_t v148 = v249[10];
                                    }
                                    else {
                                      uint64_t v148 = 0;
                                    }
                                    if ((v254 & 0x8000000000000000) == 0 && v148 >= v254)
                                    {
                                      uint64_t v149 = v249[9];
                                      uint64_t v150 = v249[11];
                                      if (!v147 || !*(_WORD *)(v147 + 16) || v254 >= v249[10])
                                      {
                                        unint64_t v183 = swift_unknownObjectRetain_n();
                                        unint64_t v184 = specialized Rope._endPath.getter(v183);
                                        swift_unknownObjectRelease();
                                        uint64_t v176 = 0;
                                        uint64_t v185 = 0;
                                        int64_t v154 = v254;
                                        if (v147) {
                                          goto LABEL_330;
                                        }
                                        uint64_t v251 = 0;
LABEL_346:
                                        *(void *)&long long v283 = v150;
                                        *((void *)&v283 + 1) = v184;
                                        v284 = (void *)v176;
                                        goto LABEL_347;
                                      }
                                      uint64_t v262 = v249[9];
                                      uint64_t v151 = *(unsigned __int8 *)(v147 + 18);
                                      if (*(unsigned char *)(v147 + 18))
                                      {
                                        uint64_t result = swift_unknownObjectRetain_n();
                                        uint64_t v152 = v254;
                                        uint64_t v153 = v147;
                                        while (1)
                                        {
                                          uint64_t v177 = *(unsigned __int16 *)(v153 + 16);
                                          if (*(_WORD *)(v153 + 16))
                                          {
                                            uint64_t v178 = *(void *)(v153 + 40);
                                            BOOL v30 = __OFSUB__(v152, v178);
                                            uint64_t v179 = v152 - v178;
                                            if (v30) {
                                              goto LABEL_455;
                                            }
                                            if (__OFADD__(v179, 1))
                                            {
LABEL_456:
                                              __break(1u);
LABEL_457:
                                              __break(1u);
LABEL_458:
                                              __break(1u);
LABEL_459:
                                              __break(1u);
                                              goto LABEL_460;
                                            }
                                            if (v179 + 1 < 1)
                                            {
                                              uint64_t v177 = 0;
                                              goto LABEL_313;
                                            }
                                            if (v177 != 1)
                                            {
                                              int64_t v180 = (uint64_t *)(v153 + 64);
                                              uint64_t v181 = 1;
                                              while (1)
                                              {
                                                uint64_t v182 = *v180;
                                                v180 += 3;
                                                uint64_t v152 = v179 - v182;
                                                if (__OFSUB__(v179, v182)) {
                                                  break;
                                                }
                                                if (__OFADD__(v152, 1)) {
                                                  goto LABEL_431;
                                                }
                                                if (v152 + 1 < 1)
                                                {
                                                  uint64_t v177 = v181;
                                                  uint64_t v152 = v179;
                                                  goto LABEL_313;
                                                }
                                                ++v181;
                                                uint64_t v179 = v152;
                                                if (v177 == v181) {
                                                  goto LABEL_312;
                                                }
                                              }
                                              __break(1u);
LABEL_431:
                                              __break(1u);
LABEL_432:
                                              __break(1u);
LABEL_433:
                                              __break(1u);
                                              goto LABEL_434;
                                            }
                                            uint64_t v152 = v179;
                                          }
LABEL_312:
                                          if (v152) {
                                            goto LABEL_452;
                                          }
LABEL_313:
                                          char v175 = (4 * *(unsigned char *)(v153 + 18) + 8) & 0x3C;
                                          uint64_t v151 = ((-15 << v175) - 1) & v151 | (v177 << v175);
                                          uint64_t v176 = *(void *)(v153 + 24 + 24 * v177);
                                          swift_unknownObjectRetain();
                                          uint64_t result = swift_unknownObjectRelease();
                                          uint64_t v153 = v176;
                                          if (!*(unsigned char *)(v176 + 18)) {
                                            goto LABEL_343;
                                          }
                                        }
                                      }
                                      swift_unknownObjectRetain_n();
                                      uint64_t v152 = v254;
                                      uint64_t v176 = v147;
LABEL_343:
                                      uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v152, 0, (_WORD *)(v176 + 16), (uint64_t *)(v176 + 24));
                                      if ((result & 0x8000000000000000) == 0)
                                      {
                                        uint64_t v213 = result;
                                        uint64_t v185 = v212;
                                        swift_unknownObjectRelease();
                                        swift_unknownObjectRelease();
                                        unint64_t v184 = v151 & 0xFFFFFFFFFFFFF0FFLL | (v213 << 8);
                                        uint64_t v149 = v262;
                                        int64_t v154 = v254;
LABEL_330:
                                        swift_unknownObjectRetain();
                                        uint64_t v251 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v150, v184, v176, v147, v149);
                                        uint64_t result = swift_unknownObjectRelease_n();
                                        BOOL v30 = __OFSUB__(v154, v185);
                                        v154 -= v185;
                                        if (!v30) {
                                          goto LABEL_346;
                                        }
LABEL_473:
                                        __break(1u);
LABEL_474:
                                        __break(1u);
LABEL_475:
                                        __break(1u);
LABEL_476:
                                        __break(1u);
LABEL_477:
                                        __break(1u);
LABEL_478:
                                        __break(1u);
                                        goto LABEL_479;
                                      }
LABEL_488:
                                      __break(1u);
LABEL_489:
                                      __break(1u);
LABEL_490:
                                      __break(1u);
LABEL_491:
                                      __break(1u);
LABEL_492:
                                      __break(1u);
LABEL_493:
                                      __break(1u);
LABEL_494:
                                      __break(1u);
                                      goto LABEL_495;
                                    }
LABEL_471:
                                    __break(1u);
LABEL_472:
                                    __break(1u);
                                    goto LABEL_473;
                                  }
LABEL_470:
                                  __break(1u);
                                  goto LABEL_471;
                                }
                              }
                            }
                          }
                          int64_t v124 = v129;
                        }
LABEL_251:
                        uint64_t v15 = (v128 - 1) & v128;
                        unint64_t v126 = __clz(__rbit64(v128)) + (v124 << 6);
LABEL_252:
                        uint64_t v130 = (int64_t *)(*(void *)(v267 + 48) + 16 * v126);
                        int64_t v5 = *v130;
                        unint64_t v131 = v130[1];
                        swift_bridgeObjectRetain();
                        AttributedString._AttributeStorage.subscript.getter(v5, v131, v267, (uint64_t)&v276);
                        if (!*((void *)&v277 + 1)) {
                          break;
                        }
                        uint64_t v127 = *((void *)&v278 + 1);
                        uint64_t v10 = v279;
                        outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v278 + 1), v279);
                        outlined destroy of AttributedString._AttributeValue((uint64_t)&v276);
                        if (v10 == 1) {
                          goto LABEL_237;
                        }
                        *(void *)&long long v276 = v127;
                        *((void *)&v276 + 1) = v10;
                        *(void *)&long long v272 = v268;
                        *((void *)&v272 + 1) = v9;
                        swift_bridgeObjectRetain();
                        outlined copy of AttributedString.AttributeRunBoundaries?(v127, v10);
                        char v132 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of AttributedString.AttributeRunBoundaries?(v127, v10);
                        if ((v132 & 1) == 0) {
                          goto LABEL_238;
                        }
                        AttributedString._AttributeStorage.subscript.getter(v5, v131, v267, (uint64_t)&v276);
                        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v5, v131);
                        uint64_t result = swift_bridgeObjectRelease();
                        uint64_t v47 = 1;
                        char v247 = 1;
                        if (v15) {
                          goto LABEL_235;
                        }
                      }
                      outlined destroy of Any?((uint64_t)&v276, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      uint64_t v127 = 0;
LABEL_237:
                      swift_bridgeObjectRetain();
                      outlined consume of AttributedString.AttributeRunBoundaries?(v127, 1);
                      outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
LABEL_238:
                      uint64_t result = swift_bridgeObjectRelease();
                      if (v15) {
                        goto LABEL_235;
                      }
                      goto LABEL_239;
                    }
                    unint64_t v113 = *(void *)(v257 + 8 * v114);
                    if (!v113)
                    {
                      while (1)
                      {
                        uint64_t v15 = v114 + 1;
                        if (__OFADD__(v114, 1)) {
                          break;
                        }
                        if (v15 >= v261) {
                          goto LABEL_231;
                        }
                        unint64_t v113 = *(void *)(v257 + 8 * v15);
                        ++v114;
                        if (v113) {
                          goto LABEL_218;
                        }
                      }
LABEL_446:
                      __break(1u);
LABEL_447:
                      __break(1u);
                      goto LABEL_448;
                    }
                  }
                }
              }
              uint64_t v15 = v114;
            }
LABEL_218:
            int64_t v25 = (v113 - 1) & v113;
            unint64_t v112 = __clz(__rbit64(v113)) + (v15 << 6);
          }
          char v115 = (int64_t *)(*(void *)(v10 + 48) + 16 * v112);
          int64_t v5 = *v115;
          unint64_t v116 = v115[1];
          uint64_t v117 = v281;
          swift_bridgeObjectRetain();
          AttributedString._AttributeStorage.subscript.getter(v5, v116, v117, (uint64_t)&v276);
          if (!*((void *)&v277 + 1)) {
            break;
          }
          outlined init with copy of AttributedString._AttributeValue((uint64_t)&v276, (uint64_t)&v272);
          outlined destroy of Any?((uint64_t)&v276, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t v118 = v274;
          uint64_t v119 = v275;
          outlined copy of AttributedString.AttributeRunBoundaries?(v274, v275);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v272);
          if (v119 == 1) {
            goto LABEL_225;
          }
          *(void *)&long long v276 = v118;
          *((void *)&v276 + 1) = v119;
          *(void *)&long long v272 = v268;
          *((void *)&v272 + 1) = v9;
          swift_bridgeObjectRetain();
          outlined copy of AttributedString.AttributeRunBoundaries?(v118, v119);
          char v120 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of AttributedString.AttributeRunBoundaries?(v118, v119);
          if ((v120 & 1) == 0) {
            goto LABEL_203;
          }
          AttributedString._AttributeStorage.subscript.getter(v5, v116, v267, (uint64_t)&v276);
          uint64_t v121 = *((void *)&v277 + 1);
          outlined destroy of Any?((uint64_t)&v276, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (v121) {
            goto LABEL_203;
          }
          uint64_t v280 = 0;
          long long v278 = 0u;
          long long v279 = 0u;
          long long v277 = 0u;
          long long v276 = 0u;
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v5, v116);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v47 = 1;
          char v247 = 1;
        }
        outlined destroy of Any?((uint64_t)&v276, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t v118 = 0;
LABEL_225:
        swift_bridgeObjectRetain();
        outlined consume of AttributedString.AttributeRunBoundaries?(v118, 1);
        outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
LABEL_203:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_204;
      }
      if (v259 != v249[11]) {
        goto LABEL_458;
      }
      if (!*v248) {
        goto LABEL_503;
      }
      specialized Rope._Node._prepareModify(at:)(v55, (uint64_t)&v285);
      v288[0] = v286;
      long long v276 = v285;
      long long v277 = v286;
      long long v278 = v287;
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)v288);
      uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)v288 + 8);
      long long v277 = MEMORY[0x1E4FBC868];
      v249[11] = v259 + 1;
      *(void *)&long long v283 = v259 + 1;
      if (!v249[8]) {
        goto LABEL_504;
      }
      v284 = specialized Rope._Node._finalizeModify(_:)(&v272, &v276);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v256 = v10 + 64;
      uint64_t v96 = 1 << *(unsigned char *)(v10 + 32);
      if (v96 < 64) {
        uint64_t v97 = ~(-1 << v96);
      }
      else {
        uint64_t v97 = -1;
      }
      int64_t v25 = v97 & *(void *)(v10 + 64);
      int64_t v260 = (unint64_t)(v96 + 63) >> 6;
      uint64_t result = swift_bridgeObjectRetain();
      char v246 = 0;
      uint64_t v15 = 0;
      while (1)
      {
        if (v25)
        {
          unint64_t v98 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          unint64_t v99 = v98 | (v15 << 6);
          goto LABEL_187;
        }
        BOOL v30 = __OFADD__(v15++, 1);
        if (v30) {
          goto LABEL_421;
        }
        if (v15 >= v260) {
          break;
        }
        unint64_t v100 = *(void *)(v256 + 8 * v15);
        if (!v100)
        {
          uint64_t v101 = v15 + 1;
          if (v15 + 1 >= v260) {
            break;
          }
          unint64_t v100 = *(void *)(v256 + 8 * v101);
          if (!v100)
          {
            uint64_t v101 = v15 + 2;
            if (v15 + 2 >= v260) {
              break;
            }
            unint64_t v100 = *(void *)(v256 + 8 * v101);
            if (!v100)
            {
              uint64_t v101 = v15 + 3;
              if (v15 + 3 >= v260) {
                break;
              }
              unint64_t v100 = *(void *)(v256 + 8 * v101);
              if (!v100)
              {
                uint64_t v101 = v15 + 4;
                if (v15 + 4 >= v260) {
                  break;
                }
                unint64_t v100 = *(void *)(v256 + 8 * v101);
                if (!v100)
                {
                  while (1)
                  {
                    uint64_t v15 = v101 + 1;
                    if (__OFADD__(v101, 1)) {
                      break;
                    }
                    if (v15 >= v260) {
                      goto LABEL_261;
                    }
                    unint64_t v100 = *(void *)(v256 + 8 * v15);
                    ++v101;
                    if (v100) {
                      goto LABEL_186;
                    }
                  }
LABEL_448:
                  __break(1u);
LABEL_449:
                  __break(1u);
                  goto LABEL_450;
                }
              }
            }
          }
          uint64_t v15 = v101;
        }
LABEL_186:
        int64_t v25 = (v100 - 1) & v100;
        unint64_t v99 = __clz(__rbit64(v100)) + (v15 << 6);
LABEL_187:
        uint64_t v102 = (unint64_t *)(*(void *)(v10 + 48) + 16 * v99);
        unint64_t v103 = *v102;
        int64_t v5 = v102[1];
        uint64_t v104 = v281;
        swift_bridgeObjectRetain();
        AttributedString._AttributeStorage.subscript.getter(v103, v5, v104, (uint64_t)&v276);
        if (!*((void *)&v277 + 1))
        {
          outlined destroy of Any?((uint64_t)&v276, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t v105 = 0;
LABEL_193:
          swift_bridgeObjectRetain();
          outlined consume of AttributedString.AttributeRunBoundaries?(v105, 1);
          outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
          goto LABEL_171;
        }
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v276, (uint64_t)&v272);
        outlined destroy of Any?((uint64_t)&v276, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t v105 = v274;
        uint64_t v106 = v275;
        outlined copy of AttributedString.AttributeRunBoundaries?(v274, v275);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v272);
        if (v106 == 1) {
          goto LABEL_193;
        }
        *(void *)&long long v276 = v105;
        *((void *)&v276 + 1) = v106;
        *(void *)&long long v272 = v268;
        *((void *)&v272 + 1) = v9;
        swift_bridgeObjectRetain();
        outlined copy of AttributedString.AttributeRunBoundaries?(v105, v106);
        char v107 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v105, v106);
        if ((v107 & 1) == 0
          || (AttributedString._AttributeStorage.subscript.getter(v103, v5, v267, (uint64_t)&v276),
              uint64_t v108 = *((void *)&v277 + 1),
              outlined destroy of Any?((uint64_t)&v276, &demangling cache variable for type metadata for AttributedString._AttributeValue?), v108))
        {
LABEL_171:
          uint64_t result = swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v280 = 0;
          long long v278 = 0u;
          long long v279 = 0u;
          long long v277 = 0u;
          long long v276 = 0u;
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v103, v5);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v47 = 1;
          char v246 = 1;
        }
      }
LABEL_261:
      swift_release();
      uint64_t v133 = 1 << *(unsigned char *)(v267 + 32);
      if (v133 < 64) {
        uint64_t v134 = ~(-1 << v133);
      }
      else {
        uint64_t v134 = -1;
      }
      uint64_t v15 = v134 & *(void *)(v267 + 64);
      int64_t v25 = (unint64_t)(v133 + 63) >> 6;
      uint64_t result = swift_retain();
      int64_t v135 = 0;
      if (v15)
      {
LABEL_265:
        unint64_t v136 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v137 = v136 | (v135 << 6);
        goto LABEL_282;
      }
      while (1)
      {
        BOOL v30 = __OFADD__(v135++, 1);
        if (v30) {
          goto LABEL_423;
        }
        if (v135 >= v25) {
          goto LABEL_303;
        }
        unint64_t v139 = *(void *)(v265 + 8 * v135);
        if (!v139) {
          break;
        }
LABEL_281:
        uint64_t v15 = (v139 - 1) & v139;
        unint64_t v137 = __clz(__rbit64(v139)) + (v135 << 6);
LABEL_282:
        int64_t v141 = (int64_t *)(*(void *)(v267 + 48) + 16 * v137);
        int64_t v5 = *v141;
        unint64_t v142 = v141[1];
        swift_bridgeObjectRetain();
        AttributedString._AttributeStorage.subscript.getter(v5, v142, v267, (uint64_t)&v276);
        if (!*((void *)&v277 + 1))
        {
          outlined destroy of Any?((uint64_t)&v276, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t v138 = 0;
LABEL_267:
          swift_bridgeObjectRetain();
          outlined consume of AttributedString.AttributeRunBoundaries?(v138, 1);
          outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
LABEL_268:
          uint64_t result = swift_bridgeObjectRelease();
          if (v15) {
            goto LABEL_265;
          }
          continue;
        }
        uint64_t v138 = *((void *)&v278 + 1);
        uint64_t v143 = v279;
        outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v278 + 1), v279);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v276);
        if (v143 == 1) {
          goto LABEL_267;
        }
        *(void *)&long long v276 = v138;
        *((void *)&v276 + 1) = v143;
        *(void *)&long long v272 = v268;
        *((void *)&v272 + 1) = v9;
        swift_bridgeObjectRetain();
        outlined copy of AttributedString.AttributeRunBoundaries?(v138, v143);
        char v144 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
        uint64_t v10 = *((void *)&v276 + 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v138, v143);
        if ((v144 & 1) == 0) {
          goto LABEL_268;
        }
        AttributedString._AttributeStorage.subscript.getter(v5, v142, v267, (uint64_t)&v276);
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v5, v142);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v47 = 1;
        char v246 = 1;
        if (v15) {
          goto LABEL_265;
        }
      }
      int64_t v140 = v135 + 1;
      if (v135 + 1 >= v25) {
        goto LABEL_303;
      }
      unint64_t v139 = *(void *)(v265 + 8 * v140);
      if (v139) {
        goto LABEL_280;
      }
      int64_t v140 = v135 + 2;
      if (v135 + 2 >= v25) {
        goto LABEL_303;
      }
      unint64_t v139 = *(void *)(v265 + 8 * v140);
      if (v139) {
        goto LABEL_280;
      }
      int64_t v140 = v135 + 3;
      if (v135 + 3 >= v25) {
        goto LABEL_303;
      }
      unint64_t v139 = *(void *)(v265 + 8 * v140);
      if (v139) {
        goto LABEL_280;
      }
      int64_t v140 = v135 + 4;
      if (v135 + 4 < v25)
      {
        unint64_t v139 = *(void *)(v265 + 8 * v140);
        if (!v139)
        {
          while (1)
          {
            int64_t v135 = v140 + 1;
            if (__OFADD__(v140, 1)) {
              break;
            }
            if (v135 >= v25) {
              goto LABEL_303;
            }
            unint64_t v139 = *(void *)(v265 + 8 * v135);
            ++v140;
            if (v139) {
              goto LABEL_281;
            }
          }
LABEL_450:
          __break(1u);
LABEL_451:
          __break(1u);
LABEL_452:
          __break(1u);
LABEL_453:
          __break(1u);
LABEL_454:
          __break(1u);
LABEL_455:
          __break(1u);
          goto LABEL_456;
        }
LABEL_280:
        int64_t v135 = v140;
        goto LABEL_281;
      }
LABEL_303:
      int64_t v154 = v254;
      uint64_t result = swift_release();
      id v56 = v249;
      if ((v246 & 1) == 0)
      {
        specialized Rope.update<A>(at:by:)(&v283, v248, &v281);
        goto LABEL_347;
      }
      int64_t v271 = v254;
      long long v155 = v283;
      *((void *)&v272 + 1) = *((void *)&v283 + 1);
      if ((void)v283 != v249[11]) {
        goto LABEL_472;
      }
      if (!*v248) {
        goto LABEL_505;
      }
      specialized Rope._Node._prepareModify(at:)(*((unint64_t *)&v283 + 1), (uint64_t)&v276);
      uint64_t result = specialized closure #1 in AttributedString._InternalRuns.updateAndCoalesce(at:with:)((uint64_t)&v276 + 8, &v281, v270);
      v249[11] = v155 + 1;
      *(void *)&long long v272 = v155 + 1;
      if (!v249[8]) {
        goto LABEL_506;
      }
      char v156 = specialized Rope._Node._finalizeModify(_:)(&v269, &v276);
      v273 = v156;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v157 = v270[0];
      uint64_t v263 = v270[1];
      uint64_t v158 = v249[8];
      uint64_t v159 = v249[9];
      uint64_t v161 = v249[10];
      uint64_t v160 = v249[11];
      *(void *)&long long v276 = v155 + 1;
      *((void *)&v276 + 1) = *((void *)&v155 + 1);
      *(void *)&long long v277 = v156;
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v276, v158, v159, v161, v160);
      swift_unknownObjectRelease();
      long long v162 = v276;
      uint64_t v163 = v277;
      uint64_t v164 = v249[9];
      uint64_t v166 = v249[10];
      uint64_t v165 = v249[11];
      uint64_t v167 = swift_unknownObjectRetain();
      specialized Rope.endIndex.getter(v167, v164, v166, v165);
      unint64_t v169 = v168;
      swift_unknownObjectRelease();
      if (*((void *)&v162 + 1) < v169)
      {
        specialized Rope.subscript.getter(v162, *((unint64_t *)&v162 + 1), v163, v249[8], v249[9], v249[10], v249[11]);
        uint64_t v171 = v170;
        if (specialized static Dictionary<>.== infix(_:_:)(v172, v157))
        {
          char v173 = specialized static Set.== infix(_:_:)(v171, v263);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v173)
          {
            uint64_t v174 = specialized Rope.remove(at:)((uint64_t *)&v272);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            specialized Rope.update<A>(at:by:)(&v272, v248, v174);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      long long v186 = v272;
      uint64_t v187 = (uint64_t)v273;
      uint64_t v188 = v249[9];
      uint64_t v189 = v249[10];
      uint64_t v190 = v249[11];
      uint64_t v191 = swift_unknownObjectRetain();
      specialized Rope.startIndex.getter(v191, v188, v189, v190);
      unint64_t v193 = v192;
      swift_unknownObjectRelease();
      if (v193 < *((void *)&v186 + 1))
      {
        uint64_t v194 = v249[8];
        uint64_t v195 = v249[9];
        uint64_t v196 = v249[10];
        uint64_t v197 = v249[11];
        swift_unknownObjectRetain();
        unint64_t v198 = specialized Rope.index(before:)(v186, *((unint64_t *)&v186 + 1), v187, v194, v195, v196, v197);
        unint64_t v200 = v199;
        uint64_t v202 = v201;
        swift_unknownObjectRelease();
        specialized Rope.subscript.getter(v198, v200, v202, v249[8], v249[9], v249[10], v249[11]);
        uint64_t v204 = v203;
        if (specialized static Dictionary<>.== infix(_:_:)(v205, v157))
        {
          char v206 = specialized static Set.== infix(_:_:)(v204, v263);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v206 & 1) == 0) {
            goto LABEL_341;
          }
          uint64_t v207 = specialized Rope.remove(at:)((uint64_t *)&v272);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v208 = v249[8];
          uint64_t v209 = v249[9];
          uint64_t v210 = v249[10];
          uint64_t v211 = v249[11];
          swift_unknownObjectRetain();
          specialized Rope.formIndex(before:)((uint64_t)&v272, v208, v209, v210, v211);
          swift_unknownObjectRelease();
          uint64_t result = (uint64_t)specialized Rope.update<A>(at:by:)(&v272, v248, &v271, v207);
          if (!__OFSUB__(v251, 1))
          {
            --v251;
            goto LABEL_341;
          }
LABEL_495:
          __break(1u);
LABEL_496:
          __break(1u);
LABEL_497:
          __break(1u);
LABEL_498:
          __break(1u);
LABEL_499:
          __break(1u);
          goto LABEL_500;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_341:
      int64_t v154 = v271;
      long long v283 = v272;
      v284 = v273;
LABEL_347:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      long long v214 = v283;
      uint64_t v215 = v56[8];
      uint64_t v216 = v56[9];
      uint64_t v218 = v56[10];
      uint64_t v217 = v56[11];
      long long v276 = v283;
      *(void *)&long long v277 = v284;
      BOOL v30 = __OFADD__(v251++, 1);
      if (v30) {
        goto LABEL_444;
      }
      if ((void)v283 != v217) {
        goto LABEL_445;
      }
      if (v284)
      {
        unint64_t v219 = v284[3 * ((*((void *)&v283 + 1) >> ((4 * *((unsigned char *)v284 + 18) + 8) & 0x3C)) & 0xFLL) + 3];
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v219 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v214 + 1), v215);
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v154, v219)) {
        goto LABEL_447;
      }
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v276, v215, v216, v218, v214);
      uint64_t result = swift_unknownObjectRelease_n();
      int64_t v54 = a4;
      if ((uint64_t)(v154 + v219) < a4)
      {
        int64_t v254 = v154 + v219;
        unint64_t v55 = *((void *)&v276 + 1);
        unint64_t v24 = v276;
        uint64_t v4 = v277;
        goto LABEL_95;
      }
      unint64_t v221 = v56[8];
      uint64_t v220 = v56[9];
      uint64_t v223 = v56[10];
      uint64_t v222 = v56[11];
      if (a3 != a4)
      {
        unint64_t v235 = swift_unknownObjectRetain();
        int64_t v254 = v223;
        uint64_t result = specialized Rope._endPath.getter(v235);
        unint64_t v55 = result;
        unint64_t v24 = v222;
        if (v221)
        {
          uint64_t v251 = v220;
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v4 = 0;
        }
        else
        {
          uint64_t v4 = 0;
          uint64_t v251 = 0;
          int64_t v254 = 0;
        }
        int64_t v54 = a4;
        goto LABEL_95;
      }
      uint64_t v252 = v56[9];
      if (v221)
      {
        if (v223 < a3) {
          goto LABEL_476;
        }
        if (*(_WORD *)(v221 + 16) && v223 > a3)
        {
          uint64_t v224 = *(unsigned __int8 *)(v221 + 18);
          if (*(unsigned char *)(v221 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v225 = a3;
            unint64_t v226 = v221;
            while (1)
            {
              uint64_t v228 = *(unsigned __int16 *)(v226 + 16);
              if (!*(_WORD *)(v226 + 16)) {
                goto LABEL_362;
              }
              uint64_t v229 = *(void *)(v226 + 40);
              uint64_t v230 = v225 - v229;
              if (__OFSUB__(v225, v229)) {
                goto LABEL_453;
              }
              if (__OFADD__(v230, 1)) {
                goto LABEL_454;
              }
              if (v230 + 1 <= 0)
              {
                uint64_t v228 = 0;
              }
              else
              {
                if (v228 == 1)
                {
                  v225 -= v229;
LABEL_362:
                  if (v225) {
                    goto LABEL_451;
                  }
                  goto LABEL_363;
                }
                uint64_t v231 = *(void *)(v226 + 64);
                BOOL v30 = __OFSUB__(v230, v231);
                uint64_t v232 = v230 - v231;
                if (v30) {
                  goto LABEL_468;
                }
                if (__OFADD__(v232, 1)) {
                  goto LABEL_469;
                }
                if (v232 + 1 >= 1)
                {
                  if (v228 != 2)
                  {
                    long long v233 = (void *)(v226 + 88);
                    uint64_t v234 = 2;
                    while (v228 != v234)
                    {
                      uint64_t v225 = v232 - *v233;
                      if (__OFSUB__(v232, *v233)) {
                        goto LABEL_440;
                      }
                      if (__OFADD__(v225, 1)) {
                        goto LABEL_441;
                      }
                      if (v225 + 1 < 1)
                      {
                        uint64_t v228 = v234;
                        uint64_t v225 = v232;
                        goto LABEL_363;
                      }
                      ++v234;
                      v233 += 3;
                      uint64_t v232 = v225;
                      if (v228 == v234) {
                        goto LABEL_362;
                      }
                    }
LABEL_439:
                    __break(1u);
LABEL_440:
                    __break(1u);
LABEL_441:
                    __break(1u);
LABEL_442:
                    __break(1u);
                    goto LABEL_443;
                  }
                  uint64_t v225 = v232;
                  goto LABEL_362;
                }
                uint64_t v228 = 1;
                uint64_t v225 = v230;
              }
LABEL_363:
              char v227 = (4 * *(unsigned char *)(v226 + 18) + 8) & 0x3C;
              uint64_t v224 = ((-15 << v227) - 1) & v224 | (v228 << v227);
              uint64_t v4 = *(void *)(v226 + 24 + 24 * v228);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              unint64_t v226 = v4;
              if (!*(unsigned char *)(v4 + 18)) {
                goto LABEL_393;
              }
            }
          }
          uint64_t result = swift_unknownObjectRetain_n();
          uint64_t v225 = a3;
          uint64_t v4 = v221;
LABEL_393:
          uint64_t v236 = *(unsigned __int16 *)(v4 + 16);
          if (*(_WORD *)(v4 + 16))
          {
            uint64_t v237 = *(void *)(v4 + 24);
            uint64_t v238 = v225 - v237;
            if (__OFSUB__(v225, v237)) {
              goto LABEL_493;
            }
            if (__OFADD__(v238, 1)) {
              goto LABEL_494;
            }
            if (v238 + 1 <= 0)
            {
              uint64_t v236 = 0;
            }
            else
            {
              if (v236 == 1)
              {
                v225 -= v237;
                goto LABEL_413;
              }
              uint64_t v239 = *(void *)(v4 + 48);
              BOOL v30 = __OFSUB__(v238, v239);
              uint64_t v240 = v238 - v239;
              if (v30) {
                goto LABEL_501;
              }
              if (__OFADD__(v240, 1)) {
                goto LABEL_502;
              }
              if (v240 + 1 >= 1)
              {
                if (v236 != 2)
                {
                  long long v241 = (void *)(v4 + 72);
                  uint64_t v242 = 2;
                  while (v236 != v242)
                  {
                    uint64_t v225 = v240 - *v241;
                    if (__OFSUB__(v240, *v241)) {
                      goto LABEL_490;
                    }
                    if (__OFADD__(v225, 1)) {
                      goto LABEL_491;
                    }
                    if (v225 + 1 < 1)
                    {
                      uint64_t v236 = v242;
                      uint64_t v225 = v240;
                      goto LABEL_414;
                    }
                    ++v242;
                    v241 += 3;
                    uint64_t v240 = v225;
                    if (v236 == v242) {
                      goto LABEL_413;
                    }
                  }
                  goto LABEL_489;
                }
                uint64_t v225 = v240;
                goto LABEL_413;
              }
              uint64_t v236 = 1;
              uint64_t v225 = v238;
            }
          }
          else
          {
LABEL_413:
            if (v225) {
              goto LABEL_492;
            }
          }
LABEL_414:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v55 = v224 & 0xFFFFFFFFFFFFF0FFLL | (v236 << 8);
          goto LABEL_391;
        }
      }
      else if (a3 > 0)
      {
        goto LABEL_480;
      }
      swift_unknownObjectRetain_n();
      unint64_t v55 = specialized Rope._endPath.getter(v221);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v4 = 0;
      uint64_t v225 = 0;
      if (!v221)
      {
        uint64_t v251 = 0;
        goto LABEL_416;
      }
LABEL_391:
      swift_unknownObjectRetain();
      uint64_t v251 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v222, v55, v4, v221, v252);
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_416:
      int64_t v54 = a4;
      int64_t v254 = a3 - v225;
      if (__OFSUB__(a3, v225)) {
        goto LABEL_474;
      }
      unint64_t v24 = v222;
LABEL_95:
      *(void *)&long long v283 = v24;
      *((void *)&v283 + 1) = v55;
      v284 = (void *)v4;
    }
  }
  unint64_t v258 = *(void *)(v4 + 88);
  uint64_t v264 = *(void *)(v4 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 18);
  if (*(unsigned char *)(v6 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain();
    int64_t v25 = a3;
    int64_t v26 = v6;
    while (1)
    {
      uint64_t v28 = *(unsigned __int16 *)(v26 + 16);
      if (!*(_WORD *)(v26 + 16)) {
        goto LABEL_25;
      }
      uint64_t v29 = *(void *)(v26 + 40);
      BOOL v30 = __OFSUB__(v25, v29);
      int64_t v31 = v25 - v29;
      if (v30) {
        goto LABEL_466;
      }
      if (__OFADD__(v31, 1)) {
        goto LABEL_467;
      }
      if (v31 + 1 < 1)
      {
        uint64_t v28 = 0;
      }
      else
      {
        if (v28 == 1)
        {
          int64_t v25 = v31;
LABEL_25:
          if (v25) {
            goto LABEL_463;
          }
          goto LABEL_26;
        }
        long long v32 = (uint64_t *)(v26 + 64);
        uint64_t v33 = 1;
        while (1)
        {
          uint64_t v34 = *v32;
          v32 += 3;
          int64_t v25 = v31 - v34;
          if (__OFSUB__(v31, v34)) {
            goto LABEL_437;
          }
          if (__OFADD__(v25, 1)) {
            goto LABEL_438;
          }
          if (v25 + 1 < 1) {
            break;
          }
          ++v33;
          int64_t v31 = v25;
          if (v28 == v33) {
            goto LABEL_25;
          }
        }
        uint64_t v28 = v33;
        int64_t v25 = v31;
      }
LABEL_26:
      char v27 = (4 * *(unsigned char *)(v26 + 18) + 8) & 0x3C;
      uint64_t v10 = ((-15 << v27) - 1) & v10 | (v28 << v27);
      uint64_t v4 = *(void *)(v26 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      int64_t v26 = v4;
      if (!*(unsigned char *)(v4 + 18)) {
        goto LABEL_73;
      }
    }
  }
  swift_unknownObjectRetain_n();
  uint64_t result = swift_retain();
  int64_t v25 = a3;
  uint64_t v4 = v6;
LABEL_73:
  uint64_t v44 = *(unsigned __int16 *)(v4 + 16);
  if (!*(_WORD *)(v4 + 16))
  {
LABEL_81:
    unint64_t v24 = v258;
    goto LABEL_89;
  }
  uint64_t v49 = *(void *)(v4 + 24);
  BOOL v30 = __OFSUB__(v25, v49);
  int64_t v50 = v25 - v49;
  if (v30) {
    goto LABEL_499;
  }
  if (!__OFADD__(v50, 1))
  {
    if (v50 + 1 < 1)
    {
      uint64_t v44 = 0;
      goto LABEL_90;
    }
    if (v44 != 1)
    {
      char v51 = (uint64_t *)(v4 + 48);
      uint64_t v52 = 1;
      while (1)
      {
        uint64_t v53 = *v51;
        v51 += 3;
        int64_t v25 = v50 - v53;
        if (__OFSUB__(v50, v53)) {
          goto LABEL_486;
        }
        if (__OFADD__(v25, 1)) {
          goto LABEL_487;
        }
        if (v25 + 1 < 1) {
          break;
        }
        ++v52;
        int64_t v50 = v25;
        if (v44 == v52) {
          goto LABEL_89;
        }
      }
      uint64_t v44 = v52;
      int64_t v25 = v50;
      goto LABEL_90;
    }
    int64_t v25 = v50;
LABEL_89:
    if (v25) {
      goto LABEL_496;
    }
LABEL_90:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v35 = v10 & 0xFFFFFFFFFFFFF0FFLL | (v44 << 8);
    uint64_t v23 = v264;
    if (!v6) {
      goto LABEL_91;
    }
    goto LABEL_41;
  }
LABEL_500:
  __break(1u);
LABEL_501:
  __break(1u);
LABEL_502:
  __break(1u);
LABEL_503:
  __break(1u);
LABEL_504:
  __break(1u);
LABEL_505:
  __break(1u);
LABEL_506:
  __break(1u);
  return result;
}

void *$defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  unint64_t v4 = a4[1];
  uint64_t v6 = a4[2];
  uint64_t v7 = a4[3];
  uint64_t v8 = a4[4];
  uint64_t v9 = result[8];
  uint64_t v10 = result[9];
  uint64_t v12 = result[10];
  uint64_t v11 = result[11];
  uint64_t v47 = *a4;
  unint64_t v48 = v4;
  uint64_t v49 = v6;
  uint64_t v45 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (v5 != v11)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  unint64_t v14 = result;
  if (v6)
  {
    unint64_t v15 = *(void *)(v6 + 24 * ((v4 >> ((4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v15 = specialized Rope._Node.subscript.getter(v4, v9);
  }
  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  BOOL v16 = __OFADD__(v8, v15);
  uint64_t v17 = v8 + v15;
  if (v16) {
    goto LABEL_81;
  }
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v47, v9, v10, v12, v5);
  uint64_t result = (void *)swift_unknownObjectRelease_n();
  uint64_t v18 = a3;
  if (v17 < a3)
  {
    uint64_t v19 = v47;
    unint64_t v20 = v48;
    uint64_t v21 = v49;
    uint64_t v22 = v45;
    goto LABEL_74;
  }
  uint64_t v23 = v14[8];
  uint64_t v22 = v14[9];
  uint64_t v17 = v14[10];
  uint64_t v19 = v14[11];
  if (a2 != a3)
  {
    unint64_t v35 = swift_unknownObjectRetain();
    uint64_t result = (void *)specialized Rope._endPath.getter(v35);
    unint64_t v20 = (unint64_t)result;
    if (v23)
    {
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v17 = 0;
    }
    goto LABEL_74;
  }
  if (v23) {
    uint64_t v24 = v17;
  }
  else {
    uint64_t v24 = 0;
  }
  if (a3 < 0 || v24 < a3) {
    goto LABEL_87;
  }
  if (v23 && *(_WORD *)(v23 + 16) && v17 > a3)
  {
    uint64_t v25 = *(unsigned __int8 *)(v23 + 18);
    if (*(unsigned char *)(v23 + 18))
    {
      uint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t v26 = a3;
      uint64_t v21 = v23;
      while (1)
      {
        uint64_t v28 = *(unsigned __int16 *)(v21 + 16);
        if (!*(_WORD *)(v21 + 16)) {
          goto LABEL_21;
        }
        uint64_t v29 = *(void *)(v21 + 40);
        uint64_t v30 = v26 - v29;
        if (__OFSUB__(v26, v29)) {
          goto LABEL_83;
        }
        if (__OFADD__(v30, 1)) {
          goto LABEL_84;
        }
        if (v30 + 1 <= 0)
        {
          uint64_t v28 = 0;
        }
        else
        {
          if (v28 == 1)
          {
            v26 -= v29;
LABEL_21:
            if (v26) {
              goto LABEL_82;
            }
            goto LABEL_22;
          }
          uint64_t v31 = *(void *)(v21 + 64);
          BOOL v16 = __OFSUB__(v30, v31);
          uint64_t v32 = v30 - v31;
          if (v16) {
            goto LABEL_85;
          }
          if (__OFADD__(v32, 1)) {
            goto LABEL_86;
          }
          if (v32 + 1 >= 1)
          {
            if (v28 != 2)
            {
              uint64_t v33 = (void *)(v21 + 88);
              uint64_t v34 = 2;
              while (v28 != v34)
              {
                uint64_t v26 = v32 - *v33;
                if (__OFSUB__(v32, *v33)) {
                  goto LABEL_77;
                }
                if (__OFADD__(v26, 1)) {
                  goto LABEL_78;
                }
                if (v26 + 1 < 1)
                {
                  uint64_t v28 = v34;
                  uint64_t v26 = v32;
                  goto LABEL_22;
                }
                ++v34;
                v33 += 3;
                uint64_t v32 = v26;
                if (v28 == v34) {
                  goto LABEL_21;
                }
              }
              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
            uint64_t v26 = v32;
            goto LABEL_21;
          }
          uint64_t v28 = 1;
          uint64_t v26 = v30;
        }
LABEL_22:
        char v27 = (4 * *(unsigned char *)(v21 + 18) + 8) & 0x3C;
        uint64_t v25 = ((-15 << v27) - 1) & v25 | (v28 << v27);
        uint64_t v21 = *(void *)(v21 + 24 + 24 * v28);
        swift_unknownObjectRetain();
        uint64_t result = (void *)swift_unknownObjectRelease();
        if (!*(unsigned char *)(v21 + 18))
        {
          v25 &= 0xFFFFFFFFFFFFF0FFLL;
          uint64_t v18 = a3;
          uint64_t v37 = *(unsigned __int16 *)(v21 + 16);
          if (*(_WORD *)(v21 + 16)) {
            goto LABEL_53;
          }
LABEL_71:
          if (!v26)
          {
LABEL_72:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v20 = v25 | (v37 << 8);
LABEL_46:
            swift_unknownObjectRetain();
            uint64_t v22 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v19, v20, v21, v23, v22);
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            uint64_t v17 = v18 - v26;
            if (!__OFSUB__(v18, v26)) {
              goto LABEL_74;
            }
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
          }
          __break(1u);
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }
      }
    }
    uint64_t result = (void *)swift_unknownObjectRetain_n();
    uint64_t v26 = a3;
    uint64_t v21 = v23;
    uint64_t v37 = *(unsigned __int16 *)(v23 + 16);
    if (!*(_WORD *)(v23 + 16)) {
      goto LABEL_71;
    }
LABEL_53:
    uint64_t v38 = *(void *)(v21 + 24);
    uint64_t v39 = v26 - v38;
    if (__OFSUB__(v26, v38)) {
      goto LABEL_93;
    }
    if (__OFADD__(v39, 1))
    {
LABEL_94:
      __break(1u);
    }
    else
    {
      if (v39 + 1 <= 0)
      {
        uint64_t v37 = 0;
        goto LABEL_72;
      }
      if (v37 == 1)
      {
        v26 -= v38;
        goto LABEL_71;
      }
      uint64_t v40 = *(void *)(v21 + 48);
      BOOL v16 = __OFSUB__(v39, v40);
      uint64_t v41 = v39 - v40;
      if (!v16)
      {
        if (!__OFADD__(v41, 1))
        {
          if (v41 + 1 < 1)
          {
            uint64_t v37 = 1;
            uint64_t v26 = v39;
            goto LABEL_72;
          }
          if (v37 == 2)
          {
            uint64_t v26 = v41;
            goto LABEL_71;
          }
          uint64_t v42 = (void *)(v21 + 72);
          uint64_t v43 = 2;
          while (v37 != v43)
          {
            uint64_t v26 = v41 - *v42;
            if (__OFSUB__(v41, *v42)) {
              goto LABEL_90;
            }
            if (__OFADD__(v26, 1)) {
              goto LABEL_91;
            }
            if (v26 + 1 < 1)
            {
              uint64_t v37 = v43;
              uint64_t v26 = v41;
              goto LABEL_72;
            }
            ++v43;
            v42 += 3;
            uint64_t v41 = v26;
            if (v37 == v43) {
              goto LABEL_71;
            }
          }
          goto LABEL_89;
        }
        goto LABEL_96;
      }
    }
    __break(1u);
LABEL_96:
    __break(1u);
    return result;
  }
  unint64_t v36 = swift_unknownObjectRetain_n();
  unint64_t v20 = specialized Rope._endPath.getter(v36);
  uint64_t result = (void *)swift_unknownObjectRelease();
  uint64_t v21 = 0;
  uint64_t v26 = 0;
  if (v23) {
    goto LABEL_46;
  }
  uint64_t v22 = 0;
  uint64_t v17 = a3;
LABEL_74:
  *a4 = v19;
  a4[1] = v20;
  a4[2] = v21;
  a4[3] = v22;
  a4[4] = v17;
  return result;
}

uint64_t specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t *a11)
{
  uint64_t v17 = BigString.Index.utf8Offset.getter();
  uint64_t v18 = BigString.Index.utf8Offset.getter();
  if (v18 < v17)
  {
    __break(1u);
  }
  else
  {
    a7 = v18;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v51 = *a11;
    uint64_t v11 = *a11;
    *a11 = 0x8000000000000000;
    a9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    uint64_t v21 = *(void *)(v11 + 16);
    BOOL v22 = (v20 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (!__OFADD__(v21, v22))
    {
      a10 = v20;
      if (*(void *)(v11 + 24) < v23)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
        uint64_t v24 = v51;
        unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
        if ((a10 & 1) != (v26 & 1)) {
          goto LABEL_46;
        }
        a9 = v25;
        goto LABEL_8;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v24 = v11;
LABEL_8:
        *a11 = v24;
        swift_bridgeObjectRelease();
        if ((a10 & 1) == 0)
        {
          specialized _NativeDictionary._insert(at:key:value:)(a9, a1, a2, MEMORY[0x1E4FBC860], (void *)*a11);
          swift_bridgeObjectRetain();
        }
        Array<A>._extend(with:)(v17, a7);
        return swift_bridgeObjectRelease();
      }
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_15:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v28;
  if (!*(void *)(v11 + 16))
  {
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v29 = (char *)(v28 + 64);
  uint64_t v30 = (char *)(v11 + 64);
  unint64_t v31 = (unint64_t)((1 << *(unsigned char *)(v24 + 32)) + 63) >> 6;
  uint64_t v47 = v11 + 64;
  if (v24 != v11 || v29 >= &v30[8 * v31]) {
    memmove(v29, v30, 8 * v31);
  }
  int64_t v32 = 0;
  *(void *)(v24 + 16) = *(void *)(v11 + 16);
  uint64_t v33 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & *(void *)(v11 + 64);
  int64_t v48 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      uint64_t v49 = (v35 - 1) & v35;
      int64_t v50 = v32;
      unint64_t v36 = __clz(__rbit64(v35)) | (v32 << 6);
      goto LABEL_23;
    }
    int64_t v43 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v43 >= v48) {
      goto LABEL_43;
    }
    unint64_t v44 = *(void *)(v47 + 8 * v43);
    int64_t v45 = v32 + 1;
    if (!v44)
    {
      int64_t v45 = v32 + 2;
      if (v32 + 2 >= v48) {
        goto LABEL_43;
      }
      unint64_t v44 = *(void *)(v47 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v32 + 3;
        if (v32 + 3 >= v48) {
          goto LABEL_43;
        }
        unint64_t v44 = *(void *)(v47 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v32 + 4;
          if (v32 + 4 >= v48) {
            goto LABEL_43;
          }
          unint64_t v44 = *(void *)(v47 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v32 + 5;
            if (v32 + 5 >= v48) {
              goto LABEL_43;
            }
            unint64_t v44 = *(void *)(v47 + 8 * v45);
            if (!v44) {
              break;
            }
          }
        }
      }
    }
LABEL_42:
    uint64_t v49 = (v44 - 1) & v44;
    int64_t v50 = v45;
    unint64_t v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_23:
    uint64_t v37 = 16 * v36;
    uint64_t v38 = (void *)(*(void *)(v11 + 48) + 16 * v36);
    uint64_t v39 = v38[1];
    uint64_t v40 = 8 * v36;
    uint64_t v41 = *(void *)(*(void *)(v11 + 56) + v40);
    uint64_t v42 = (void *)(*(void *)(v24 + 48) + v37);
    *uint64_t v42 = *v38;
    v42[1] = v39;
    *(void *)(*(void *)(v24 + 56) + v40) = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v35 = v49;
    int64_t v32 = v50;
  }
  uint64_t v46 = v32 + 6;
  if (v32 + 6 >= v48) {
    goto LABEL_43;
  }
  unint64_t v44 = *(void *)(v47 + 8 * v46);
  if (v44)
  {
    int64_t v45 = v32 + 6;
    goto LABEL_42;
  }
  while (1)
  {
    int64_t v45 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      break;
    }
    if (v45 >= v48) {
      goto LABEL_43;
    }
    unint64_t v44 = *(void *)(v47 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_42;
    }
  }
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *$defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(unint64_t *a1, uint64_t *a2, uint64_t a3, unsigned char *a4, void *a5, uint64_t a6)
{
  return specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(a1, a2, a3, a4, a5, a6) & 1;
}

{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  _OWORD v20[4];
  uint64_t v21;
  unsigned char v22[72];
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  uint64_t v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  uint64_t v42;

  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v12 = *a2;
  if (*(void *)(*a2 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    if (v14)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v12 + 56) + 72 * v13, (uint64_t)&v38);
    }
    else
    {
      uint64_t v42 = 0;
      uint64_t v40 = 0u;
      uint64_t v41 = 0u;
      uint64_t v38 = 0u;
      uint64_t v39 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*(void *)(a3 + 16)) {
      goto LABEL_8;
    }
LABEL_5:
    uint64_t v37 = 0;
    unint64_t v35 = 0u;
    unint64_t v36 = 0u;
    uint64_t v33 = 0u;
    uint64_t v34 = 0u;
    goto LABEL_12;
  }
  uint64_t v42 = 0;
  uint64_t v40 = 0u;
  uint64_t v41 = 0u;
  uint64_t v38 = 0u;
  uint64_t v39 = 0u;
  if (!*(void *)(a3 + 16)) {
    goto LABEL_5;
  }
LABEL_8:
  swift_bridgeObjectRetain();
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
  if (v16)
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a3 + 56) + 72 * v15, (uint64_t)&v33);
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v35 = 0u;
    unint64_t v36 = 0u;
    uint64_t v33 = 0u;
    uint64_t v34 = 0u;
  }
  swift_bridgeObjectRelease();
LABEL_12:
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v38, (uint64_t)&v23, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v33, (uint64_t)&v28, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!*((void *)&v24 + 1))
  {
    outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v38, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((void *)&v29 + 1))
    {
      outlined destroy of Any?((uint64_t)&v23, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_18;
    }
LABEL_20:
    outlined destroy of Any?((uint64_t)&v23, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
    return 0;
  }
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v23, (uint64_t)v22, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!*((void *)&v29 + 1))
  {
    outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v38, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v22);
    goto LABEL_20;
  }
  v20[2] = v30;
  v20[3] = v31;
  uint64_t v21 = v32;
  v20[0] = v28;
  v20[1] = v29;
  uint64_t v17 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v22, (uint64_t)v20);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v20);
  outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v38, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v22);
  outlined destroy of Any?((uint64_t)&v23, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if ((v17 & 1) == 0) {
    return 0;
  }
LABEL_18:
  uint64_t v18 = 1;
  *a4 = 1;
  char v27 = 0;
  unint64_t v25 = 0u;
  char v26 = 0u;
  uint64_t v23 = 0u;
  uint64_t v24 = 0u;
  swift_bridgeObjectRetain();
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v23, v11, v10);
  swift_bridgeObjectRelease();
  *a5 = a6;
  return v18;
}

ValueMetadata *type metadata accessor for AttributedString._AttributeStorage()
{
  return &type metadata for AttributedString._AttributeStorage;
}

uint64_t assignWithCopy for AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) != 1)
  {
    if (v4 != 1)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 40);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_8;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
LABEL_8:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = (void *)(a2 + 40);
  if (*(void *)(a1 + 48) != 1)
  {
    uint64_t v6 = *(void *)(a2 + 48);
    if (v6 != 1)
    {
      *(void *)(a1 + 40) = *v5;
      *(void *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
LABEL_6:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t AttributedString._AttributeStorage.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16))
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, a2);
    if (v9)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(a3 + 56) + 72 * v8, a4);
    }
    else
    {
      *(void *)(a4 + 64) = 0;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)(uint64_t (*a1)(uint64_t, uint64_t, long long *), uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized _NativeDictionary.filter(_:)(a3, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t AttributedString._AttributeValue.isInvalidatedOnTextChange.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (!v1) {
    return 0;
  }
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Swift::Int v2 = Hasher._finalize()();
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v4 = v2 & ~v3;
  if (((*(void *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
    return 0;
  }
  uint64_t v5 = ~v3;
  while (*(void *)(*(void *)(v1 + 48) + 16 * v4 + 8))
  {
    unint64_t v4 = (v4 + 1) & v5;
    if (((*(void *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString._AttributeValue()
{
  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttributedString._AttributeValue()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString._AttributeValue()
{
  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString._AttributeValue()
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v0, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  return String.init<A>(describing:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v5);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v4);
  LOBYTE(a2) = specialized static AttributedString._AttributeValue.__equalAttributes(_:_:)((uint64_t)v5, (uint64_t)v4);
  outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  return a2 & 1;
}

unint64_t lazy protocol witness table accessor for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue;
  if (!lazy protocol witness table cache variable for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue);
  }
  return result;
}

uint64_t Dictionary<>._attrStrDescription.getter(uint64_t a1)
{
  v30.___darwin_time_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v6) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v6) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v2 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v6) {
          goto LABEL_23;
        }
        unint64_t v19 = *(void *)(v2 + 8 * v8);
        if (!v19)
        {
          int64_t v8 = v18 + 3;
          if (v18 + 3 >= v6) {
            goto LABEL_23;
          }
          unint64_t v19 = *(void *)(v2 + 8 * v8);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v19 - 1) & v19;
    unint64_t v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = (void *)v11[1];
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v10, (uint64_t)v28);
    v27.___darwin_time_t countAndFlagsBits = v13;
    v27._object = v12;
    v25[1] = v28[1];
    v25[2] = v28[2];
    void v25[3] = v28[3];
    uint64_t v26 = v29;
    Swift::String v24 = v27;
    v25[0] = v28[0];
    v23.___darwin_time_t countAndFlagsBits = 9;
    v23._object = (void *)0xE100000000000000;
    Swift::String v14 = v27;
    swift_bridgeObjectRetain();
    String.append(_:)(v14);
    v15.___darwin_time_t countAndFlagsBits = 2112800;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v25, (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v16.___darwin_time_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17.___darwin_time_t countAndFlagsBits = 10;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    uint64_t result = outlined destroy of Any?((uint64_t)&v24, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v6)
  {
LABEL_23:
    swift_release();
    v27.___darwin_time_t countAndFlagsBits = 2683;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v21.___darwin_time_t countAndFlagsBits = 125;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    return v27._countAndFlagsBits;
  }
  unint64_t v19 = *(void *)(v2 + 8 * v20);
  if (v19)
  {
    int64_t v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString._AttributeStorage()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString._AttributeStorage(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  specialized Dictionary<>.hash(into:)(a1, v3);

  specialized Set.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString._AttributeStorage()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._AttributeStorage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }

  return specialized static Set.== infix(_:_:)(v2, v3);
}

unint64_t lazy protocol witness table accessor for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage;
  if (!lazy protocol witness table cache variable for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString._AttributeStorage()
{
  return Dictionary<>._attrStrDescription.getter(*v0);
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, long long *))
{
  int64_t v91 = a2;
  uint64_t v3 = isStackAllocationSafe;
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  int64_t v89 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v5 = 8 * v89;
  uint64_t v92 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v88 = (unint64_t *)swift_slowAlloc();
      bzero(v88, v5);
      uint64_t v90 = 0;
      int64_t v21 = 0;
      uint64_t v22 = v3 + 64;
      uint64_t v23 = 1 << *(unsigned char *)(v3 + 32);
      if (v23 < 64) {
        uint64_t v24 = ~(-1 << v23);
      }
      else {
        uint64_t v24 = -1;
      }
      unint64_t v25 = v24 & *(void *)(v3 + 64);
      int64_t v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          unint64_t v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          unint64_t v28 = v27 | (v21 << 6);
        }
        else
        {
          BOOL v14 = __OFADD__(v21++, 1);
          if (v14) {
            goto LABEL_132;
          }
          if (v21 >= v26) {
            goto LABEL_60;
          }
          unint64_t v29 = *(void *)(v22 + 8 * v21);
          if (!v29)
          {
            int64_t v30 = v21 + 1;
            if (v21 + 1 >= v26) {
              goto LABEL_60;
            }
            unint64_t v29 = *(void *)(v22 + 8 * v30);
            if (!v29)
            {
              int64_t v30 = v21 + 2;
              if (v21 + 2 >= v26) {
                goto LABEL_60;
              }
              unint64_t v29 = *(void *)(v22 + 8 * v30);
              if (!v29)
              {
                int64_t v30 = v21 + 3;
                if (v21 + 3 >= v26) {
                  goto LABEL_60;
                }
                unint64_t v29 = *(void *)(v22 + 8 * v30);
                if (!v29)
                {
                  while (1)
                  {
                    int64_t v21 = v30 + 1;
                    if (__OFADD__(v30, 1)) {
                      goto LABEL_135;
                    }
                    if (v21 >= v26) {
                      break;
                    }
                    unint64_t v29 = *(void *)(v22 + 8 * v21);
                    ++v30;
                    if (v29) {
                      goto LABEL_48;
                    }
                  }
LABEL_60:
                  if (!v90)
                  {
                    uint64_t v3 = MEMORY[0x1E4FBC868];
                    goto LABEL_128;
                  }
                  if (v90 == *(void *)(v3 + 16))
                  {
                    swift_retain();
                    goto LABEL_128;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  uint64_t v61 = static _DictionaryStorage.allocate(capacity:)();
                  int64_t v62 = 0;
                  unint64_t v63 = *v88;
                  uint64_t v64 = v61 + 64;
                  while (1)
                  {
                    if (v63)
                    {
                      unint64_t v70 = __clz(__rbit64(v63));
                      v63 &= v63 - 1;
                      unint64_t v71 = v70 | (v62 << 6);
                    }
                    else
                    {
                      BOOL v14 = __OFADD__(v62++, 1);
                      if (v14) {
                        goto LABEL_137;
                      }
                      if (v62 >= v89) {
                        goto LABEL_127;
                      }
                      unint64_t v72 = v88[v62];
                      if (!v72)
                      {
                        int64_t v73 = v62 + 1;
                        if (v62 + 1 >= v89) {
                          goto LABEL_127;
                        }
                        unint64_t v72 = v88[v73];
                        if (!v72)
                        {
                          int64_t v73 = v62 + 2;
                          if (v62 + 2 >= v89) {
                            goto LABEL_127;
                          }
                          unint64_t v72 = v88[v73];
                          if (!v72)
                          {
                            int64_t v73 = v62 + 3;
                            if (v62 + 3 >= v89) {
                              goto LABEL_127;
                            }
                            unint64_t v72 = v88[v73];
                            if (!v72)
                            {
                              int64_t v73 = v62 + 4;
                              if (v62 + 4 >= v89) {
                                goto LABEL_127;
                              }
                              unint64_t v72 = v88[v73];
                              if (!v72)
                              {
                                while (1)
                                {
                                  int64_t v62 = v73 + 1;
                                  if (__OFADD__(v73, 1)) {
                                    goto LABEL_140;
                                  }
                                  if (v62 >= v89) {
                                    break;
                                  }
                                  unint64_t v72 = v88[v62];
                                  ++v73;
                                  if (v72) {
                                    goto LABEL_113;
                                  }
                                }
LABEL_127:
                                uint64_t v3 = v61;
LABEL_128:
                                MEMORY[0x185309510](v88, -1, -1);
                                return v3;
                              }
                            }
                          }
                        }
                        int64_t v62 = v73;
                      }
LABEL_113:
                      unint64_t v63 = (v72 - 1) & v72;
                      unint64_t v71 = __clz(__rbit64(v72)) + (v62 << 6);
                    }
                    uint64_t v74 = *(void *)(v3 + 56);
                    uint64_t v75 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v71);
                    uint64_t v77 = *v75;
                    uint64_t v76 = v75[1];
                    outlined init with copy of AttributedString._AttributeValue(v74 + 72 * v71, (uint64_t)&v98);
                    long long v95 = v100;
                    long long v96 = v101;
                    uint64_t v97 = v102;
                    long long v93 = v98;
                    long long v94 = v99;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    Swift::Int v78 = Hasher._finalize()();
                    uint64_t v79 = -1 << *(unsigned char *)(v61 + 32);
                    unint64_t v80 = v78 & ~v79;
                    unint64_t v81 = v80 >> 6;
                    if (((-1 << v80) & ~*(void *)(v64 + 8 * (v80 >> 6))) != 0)
                    {
                      unint64_t v65 = __clz(__rbit64((-1 << v80) & ~*(void *)(v64 + 8 * (v80 >> 6)))) | v80 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      char v82 = 0;
                      unint64_t v83 = (unint64_t)(63 - v79) >> 6;
                      do
                      {
                        if (++v81 == v83 && (v82 & 1) != 0) {
                          goto LABEL_131;
                        }
                        BOOL v84 = v81 == v83;
                        if (v81 == v83) {
                          unint64_t v81 = 0;
                        }
                        v82 |= v84;
                        uint64_t v85 = *(void *)(v64 + 8 * v81);
                      }
                      while (v85 == -1);
                      unint64_t v65 = __clz(__rbit64(~v85)) + (v81 << 6);
                    }
                    *(void *)(v64 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v65;
                    uint64_t v66 = (void *)(*(void *)(v61 + 48) + 16 * v65);
                    *uint64_t v66 = v77;
                    v66[1] = v76;
                    uint64_t v67 = *(void *)(v61 + 56) + 72 * v65;
                    long long v68 = v96;
                    *(_OWORD *)(v67 + 32) = v95;
                    *(_OWORD *)(v67 + 48) = v68;
                    *(void *)(v67 + 64) = v97;
                    long long v69 = v94;
                    *(_OWORD *)uint64_t v67 = v93;
                    *(_OWORD *)(v67 + 16) = v69;
                    ++*(void *)(v61 + 16);
                    BOOL v44 = v90-- == 1;
                    uint64_t v3 = v92;
                    if (v44) {
                      goto LABEL_127;
                    }
                  }
                }
              }
            }
            int64_t v21 = v30;
          }
LABEL_48:
          unint64_t v25 = (v29 - 1) & v29;
          unint64_t v28 = __clz(__rbit64(v29)) + (v21 << 6);
        }
        uint64_t v31 = *(void *)(v3 + 56);
        int64_t v32 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v28);
        uint64_t v33 = *v32;
        uint64_t v3 = v32[1];
        outlined init with copy of AttributedString._AttributeValue(v31 + 72 * v28, (uint64_t)&v98);
        swift_bridgeObjectRetain();
        char v34 = v91(v33, v3, &v98);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v98);
        swift_bridgeObjectRelease();
        if (v2) {
          goto LABEL_128;
        }
        uint64_t v3 = v92;
        if (v34)
        {
          *(unint64_t *)((char *)v88 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
          BOOL v14 = __OFADD__(v90++, 1);
          if (v14) {
            goto LABEL_138;
          }
        }
      }
    }
  }
  v87[1] = v87;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v88 = (void *)((char *)v87 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v88, v5);
  uint64_t v90 = 0;
  int64_t v6 = 0;
  uint64_t v7 = v3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_19;
    }
    BOOL v14 = __OFADD__(v6++, 1);
    if (v14) {
      goto LABEL_130;
    }
    if (v6 >= v11) {
      goto LABEL_29;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    if (!v15) {
      break;
    }
LABEL_18:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_19:
    uint64_t v17 = *(void *)(v3 + 56);
    int64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v13);
    uint64_t v19 = *v18;
    uint64_t v3 = v18[1];
    outlined init with copy of AttributedString._AttributeValue(v17 + 72 * v13, (uint64_t)&v98);
    swift_bridgeObjectRetain();
    char v20 = v91(v19, v3, &v98);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v98);
    swift_bridgeObjectRelease();
    if (v2)
    {
      swift_willThrow();
      return v3;
    }
    uint64_t v3 = v92;
    if (v20)
    {
      *(unint64_t *)((char *)v88 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      BOOL v14 = __OFADD__(v90++, 1);
      if (v14) {
        goto LABEL_136;
      }
    }
  }
  int64_t v16 = v6 + 1;
  if (v6 + 1 >= v11) {
    goto LABEL_29;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v6 + 2;
  if (v6 + 2 >= v11) {
    goto LABEL_29;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v6 + 3;
  if (v6 + 3 >= v11) {
    goto LABEL_29;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_17:
    int64_t v6 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_133;
    }
    if (v6 >= v11) {
      break;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_29:
  if (!v90) {
    return MEMORY[0x1E4FBC868];
  }
  if (v90 != *(void *)(v3 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    uint64_t v35 = static _DictionaryStorage.allocate(capacity:)();
    int64_t v36 = 0;
    unint64_t v37 = *v88;
    uint64_t v38 = v35 + 64;
    while (1)
    {
      if (v37)
      {
        unint64_t v45 = __clz(__rbit64(v37));
        v37 &= v37 - 1;
        unint64_t v46 = v45 | (v36 << 6);
      }
      else
      {
        BOOL v14 = __OFADD__(v36++, 1);
        if (v14) {
          goto LABEL_134;
        }
        if (v36 >= v89) {
          return v35;
        }
        unint64_t v47 = v88[v36];
        if (!v47)
        {
          int64_t v48 = v36 + 1;
          if (v36 + 1 >= v89) {
            return v35;
          }
          unint64_t v47 = v88[v48];
          if (!v47)
          {
            int64_t v48 = v36 + 2;
            if (v36 + 2 >= v89) {
              return v35;
            }
            unint64_t v47 = v88[v48];
            if (!v47)
            {
              int64_t v48 = v36 + 3;
              if (v36 + 3 >= v89) {
                return v35;
              }
              unint64_t v47 = v88[v48];
              if (!v47)
              {
                int64_t v48 = v36 + 4;
                if (v36 + 4 >= v89) {
                  return v35;
                }
                unint64_t v47 = v88[v48];
                if (!v47)
                {
                  while (1)
                  {
                    int64_t v36 = v48 + 1;
                    if (__OFADD__(v48, 1)) {
                      break;
                    }
                    if (v36 >= v89) {
                      return v35;
                    }
                    unint64_t v47 = v88[v36];
                    ++v48;
                    if (v47) {
                      goto LABEL_80;
                    }
                  }
LABEL_139:
                  __break(1u);
LABEL_140:
                  __break(1u);
                }
              }
            }
          }
          int64_t v36 = v48;
        }
LABEL_80:
        unint64_t v37 = (v47 - 1) & v47;
        unint64_t v46 = __clz(__rbit64(v47)) + (v36 << 6);
      }
      uint64_t v49 = *(void *)(v3 + 56);
      int64_t v50 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v46);
      uint64_t v52 = *v50;
      uint64_t v51 = v50[1];
      outlined init with copy of AttributedString._AttributeValue(v49 + 72 * v46, (uint64_t)&v98);
      long long v95 = v100;
      long long v96 = v101;
      uint64_t v97 = v102;
      long long v93 = v98;
      long long v94 = v99;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v53 = Hasher._finalize()();
      uint64_t v54 = -1 << *(unsigned char *)(v35 + 32);
      unint64_t v55 = v53 & ~v54;
      unint64_t v56 = v55 >> 6;
      if (((-1 << v55) & ~*(void *)(v38 + 8 * (v55 >> 6))) != 0)
      {
        unint64_t v39 = __clz(__rbit64((-1 << v55) & ~*(void *)(v38 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_65;
      }
      char v57 = 0;
      unint64_t v58 = (unint64_t)(63 - v54) >> 6;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        BOOL v59 = v56 == v58;
        if (v56 == v58) {
          unint64_t v56 = 0;
        }
        v57 |= v59;
        uint64_t v60 = *(void *)(v38 + 8 * v56);
      }
      while (v60 == -1);
      unint64_t v39 = __clz(__rbit64(~v60)) + (v56 << 6);
LABEL_65:
      *(void *)(v38 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
      uint64_t v40 = (void *)(*(void *)(v35 + 48) + 16 * v39);
      *uint64_t v40 = v52;
      v40[1] = v51;
      uint64_t v41 = *(void *)(v35 + 56) + 72 * v39;
      long long v42 = v96;
      *(_OWORD *)(v41 + 32) = v95;
      *(_OWORD *)(v41 + 48) = v42;
      *(void *)(v41 + 64) = v97;
      long long v43 = v94;
      *(_OWORD *)uint64_t v41 = v93;
      *(_OWORD *)(v41 + 16) = v43;
      ++*(void *)(v35 + 16);
      BOOL v44 = v90-- == 1;
      uint64_t v3 = v92;
      if (v44) {
        return v35;
      }
    }
  }
  swift_retain();
  return v3;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          unint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          BOOL v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *unint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    unint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized static AttributedString._AttributeValue.__equalAttributes(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v10, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined init with copy of (Hashable & Sendable)?(a2, (uint64_t)&v12, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  if (v11)
  {
    if (v13)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v10, (uint64_t)v8);
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v12, (uint64_t)v7);
      uint64_t v3 = v9;
      uint64_t v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
      char v5 = openEquatable #1 <A>(_:) in static AttributedString._AttributeValue.__equalAttributes(_:_:)((uint64_t)v4, (uint64_t)v7, v3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
      char v5 = 0;
    }
  }
  else if (v13)
  {
    outlined destroy of Any?((uint64_t)&v12, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    char v5 = 0;
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

uint64_t specialized AttributedString._AttributeStorage.isEqual(to:comparing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    return 1;
  }
  uint64_t v35 = (long long *)&v43;
  swift_bridgeObjectRetain();
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v7 = (uint64_t *)(a2 + 40);
  uint64_t v29 = a3;
  while (1)
  {
    uint64_t v9 = *(v7 - 1);
    uint64_t v10 = *v7;
    if (*(void *)(a3 + 16))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
      if (v12)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(a3 + 56) + 72 * v11, (uint64_t)&v61);
      }
      else
      {
        uint64_t v65 = 0;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*(void *)(a1 + 16))
      {
LABEL_11:
        uint64_t v60 = 0;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v65 = 0;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      swift_bridgeObjectRetain();
      if (!*(void *)(a1 + 16)) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    if (v14)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v13, (uint64_t)&v56);
    }
    else
    {
      uint64_t v60 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
    }
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v61, (uint64_t)v50, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v56, (uint64_t)&v51, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (v50[3]) {
      break;
    }
    outlined destroy of Any?((uint64_t)&v56, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v61, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (*((void *)&v52 + 1)) {
      goto LABEL_34;
    }
    outlined destroy of Any?((uint64_t)v50, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_6:
    v7 += 2;
    if (!--v3)
    {
      uint64_t v25 = 1;
      goto LABEL_36;
    }
  }
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v50, (uint64_t)v49, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (*((void *)&v52 + 1))
  {
    _OWORD v47[2] = v53;
    v47[3] = v54;
    uint64_t v48 = v55;
    v47[0] = v51;
    v47[1] = v52;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v49, (uint64_t)v46);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v47, (uint64_t)v45);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v46, (uint64_t)&v41, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v45, (uint64_t)v35, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (v42)
    {
      if (v44)
      {
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v41, (uint64_t)v38);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v35, (uint64_t)v37);
        uint64_t v15 = v39;
        uint64_t v32 = v40;
        uint64_t v31 = __swift_project_boxed_opaque_existential_1(v38, v39);
        char v34 = &v27;
        uint64_t v16 = *(void *)(v15 - 8);
        MEMORY[0x1F4188790](v31);
        int64_t v30 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v37, (uint64_t)&v36);
        uint64_t v18 = type metadata accessor for Optional();
        uint64_t v33 = &v27;
        uint64_t v19 = *(void *)(v18 - 8);
        MEMORY[0x1F4188790](v18);
        int64_t v21 = (char *)&v27 - v20;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        int v22 = swift_dynamicCast();
        uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
        if (v22)
        {
          v23(v21, 0, 1, v15);
          uint64_t v24 = v30;
          (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v30, v21, v15);
          char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
        }
        else
        {
          v23(v21, 1, 1, v15);
          (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
          char v8 = 0;
        }
        a1 = v28;
        a3 = v29;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
LABEL_5:
        outlined destroy of Any?((uint64_t)v45, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v47);
        outlined destroy of Any?((uint64_t)&v56, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v61, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v49);
        outlined destroy of Any?((uint64_t)v50, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if ((v8 & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_6;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    }
    else
    {
      if (!v44)
      {
        char v8 = 1;
        goto LABEL_5;
      }
      outlined destroy of Any?((uint64_t)v35, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    }
    char v8 = 0;
    goto LABEL_5;
  }
  outlined destroy of Any?((uint64_t)&v56, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v61, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v49);
LABEL_34:
  outlined destroy of Any?((uint64_t)v50, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_35:
  uint64_t v25 = 0;
LABEL_36:
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t specialized AttributedString._AttributeStorage.matches(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v41 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  char v8 = v66;
  uint64_t v50 = (uint64_t)&v67 + 8;
  int64_t v47 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v48 = (long long *)&v58;
  int64_t v37 = v47 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v39 = a2;
  uint64_t v40 = result;
  uint64_t v38 = v66;
  if (!v7) {
    goto LABEL_11;
  }
LABEL_9:
  while (2)
  {
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v13 = v12 | (v10 << 6);
LABEL_10:
    uint64_t v14 = *(void *)(v3 + 56);
    uint64_t v15 = (void *)(*(void *)(v3 + 48) + 16 * v13);
    uint64_t v16 = v15[1];
    *(void *)&long long v65 = *v15;
    *((void *)&v65 + 1) = v16;
    outlined init with copy of AttributedString._AttributeValue(v14 + 72 * v13, (uint64_t)v8);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with take of LocalePreferences?((uint64_t)&v65, (uint64_t)&v78, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
      uint64_t v20 = v79;
      if (!v79) {
        goto LABEL_52;
      }
      uint64_t v21 = v78;
      _OWORD v76[2] = v82;
      _OWORD v76[3] = v83;
      uint64_t v77 = v84;
      v76[0] = v80;
      v76[1] = v81;
      if (*(void *)(a2 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
        if (v23)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(a2 + 56) + 72 * v22, (uint64_t)&v71);
        }
        else
        {
          uint64_t v75 = 0;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v75 = 0;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
      }
      swift_bridgeObjectRelease();
      outlined init with copy of AttributedString._AttributeValue((uint64_t)v76, (uint64_t)v70);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v71, (uint64_t)&v65, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v70, v50, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (v66[1]) {
        break;
      }
      outlined destroy of Any?((uint64_t)v70, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v71, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v76);
      if (v69) {
        goto LABEL_51;
      }
      uint64_t result = outlined destroy of Any?((uint64_t)&v65, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (v7) {
        goto LABEL_9;
      }
LABEL_11:
      int64_t v17 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_54;
      }
      if (v17 < v47)
      {
        unint64_t v18 = *(void *)(v41 + 8 * v17);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v10 + 2;
        ++v10;
        if (v17 + 1 < v47)
        {
          unint64_t v18 = *(void *)(v41 + 8 * v19);
          if (v18) {
            goto LABEL_17;
          }
          int64_t v10 = v17 + 1;
          if (v17 + 2 < v47)
          {
            unint64_t v18 = *(void *)(v41 + 8 * (v17 + 2));
            if (v18)
            {
              v17 += 2;
              goto LABEL_14;
            }
            int64_t v19 = v17 + 3;
            int64_t v10 = v17 + 2;
            if (v17 + 3 < v47)
            {
              unint64_t v18 = *(void *)(v41 + 8 * v19);
              if (v18)
              {
LABEL_17:
                int64_t v17 = v19;
LABEL_14:
                unint64_t v7 = (v18 - 1) & v18;
                unint64_t v13 = __clz(__rbit64(v18)) + (v17 << 6);
                int64_t v10 = v17;
                goto LABEL_10;
              }
              while (1)
              {
                int64_t v17 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  break;
                }
                if (v17 >= v47)
                {
                  int64_t v10 = v37;
                  goto LABEL_28;
                }
                unint64_t v18 = *(void *)(v41 + 8 * v17);
                ++v19;
                if (v18) {
                  goto LABEL_14;
                }
              }
LABEL_54:
              __break(1u);
              return result;
            }
          }
        }
      }
LABEL_28:
      unint64_t v7 = 0;
      uint64_t v68 = 0;
      long long v67 = 0u;
      memset(v66, 0, sizeof(v66));
      long long v65 = 0u;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v65, (uint64_t)v64, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (v69)
    {
      long long v24 = *(_OWORD *)(v50 + 48);
      v62[2] = *(_OWORD *)(v50 + 32);
      v62[3] = v24;
      uint64_t v63 = *(void *)(v50 + 64);
      long long v25 = *(_OWORD *)(v50 + 16);
      v62[0] = *(_OWORD *)v50;
      v62[1] = v25;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v64, (uint64_t)v61);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v62, (uint64_t)v60);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v61, (uint64_t)&v56, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v60, (uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      int64_t v49 = v10;
      if (v57)
      {
        if (v59)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v56, (uint64_t)v53);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v48, (uint64_t)v52);
          uint64_t v26 = v54;
          uint64_t v44 = v55;
          uint64_t v43 = __swift_project_boxed_opaque_existential_1(v53, v54);
          unint64_t v46 = &v36;
          uint64_t v27 = *(void *)(v26 - 8);
          MEMORY[0x1F4188790](v43);
          uint64_t v42 = (char *)&v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v52, (uint64_t)&v51);
          uint64_t v29 = type metadata accessor for Optional();
          unint64_t v45 = &v36;
          uint64_t v30 = *(void *)(v29 - 8);
          MEMORY[0x1F4188790](v29);
          uint64_t v32 = (char *)&v36 - v31;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          int v33 = swift_dynamicCast();
          char v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
          if (v33)
          {
            v34(v32, 0, 1, v26);
            uint64_t v35 = v42;
            (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v42, v32, v26);
            char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v27 + 8))(v35, v26);
          }
          else
          {
            v34(v32, 1, 1, v26);
            (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
            char v11 = 0;
          }
          a2 = v39;
          uint64_t v3 = v40;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
          char v8 = v38;
          goto LABEL_7;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
      }
      else
      {
        if (!v59)
        {
          char v11 = 1;
          goto LABEL_7;
        }
        outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      }
      char v11 = 0;
LABEL_7:
      outlined destroy of Any?((uint64_t)v60, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v61, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v62);
      outlined destroy of Any?((uint64_t)v70, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v71, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v76);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v64);
      uint64_t result = outlined destroy of Any?((uint64_t)&v65, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      int64_t v10 = v49;
      if ((v11 & 1) == 0) {
        goto LABEL_52;
      }
      if (v7) {
        continue;
      }
      goto LABEL_11;
    }
    break;
  }
  outlined destroy of Any?((uint64_t)v70, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v71, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v76);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v64);
LABEL_51:
  outlined destroy of Any?((uint64_t)&v65, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_52:
  swift_release();
  return v20 == 0;
}

uint64_t specialized closure #1 in numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (!a1 || !a2) {
    goto LABEL_84;
  }
  if (a2 < 0)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  uint64_t v5 = v4;
  uint64_t v6 = a1;
  *a1 = a3;
  if ((a4 & 1) != 0 && (*a1 & 0x8000000000000000) != 0) {
    goto LABEL_40;
  }
  for (unsigned int i = 0; ; unsigned int i = 1)
  {
    double v8 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(64));
    if (v9) {
      goto LABEL_86;
    }
    double v10 = v8 * 0.301029996;
    if ((~COERCE__INT64(v8 * 0.301029996) & 0x7FF0000000000000) == 0) {
      goto LABEL_72;
    }
    if (v10 <= -9.22337204e18) {
      goto LABEL_73;
    }
    if (v10 >= 9.22337204e18) {
      goto LABEL_74;
    }
    uint64_t v11 = (uint64_t)v10;
    uint64_t v12 = (uint64_t)v10 + 1;
    if (__OFADD__((uint64_t)v10, 1)) {
      goto LABEL_75;
    }
    int64_t v13 = v12 + i;
    if (__OFADD__(v12, i)) {
      goto LABEL_76;
    }
    if (v13 < 0) {
      goto LABEL_79;
    }
    uint64_t v67 = v5;
    uint64_t v68 = v6;
    unsigned int v65 = i;
    uint64_t v66 = v12 + i;
    if (v13 < 1025)
    {
      MEMORY[0x1F4188790](*(void *)&v8);
      uint64_t v16 = (char *)&v62 - v17;
      if (!v13)
      {
        uint64_t v63 = v15;
        goto LABEL_42;
      }
      if (v13 >= 1)
      {
LABEL_19:
        uint64_t v63 = v15;
        memset(v16, 48, v13);
LABEL_42:
        int64_t v37 = v6 - 1;
        long long v64 = v6 - 2;
        uint64_t v38 = v11 + i + 20;
        uint64_t v39 = 1;
        int64_t v40 = v13;
        do
        {
          int64_t v69 = v40;
          uint64_t v70 = v38;
          uint64_t v41 = v39;
          do
          {
            if (v39 < v41)
            {
              __break(1u);
LABEL_62:
              __break(1u);
              goto LABEL_63;
            }
            uint64_t v42 = v41 - 1;
            uint64_t v43 = v41;
            uint64_t v44 = v37[v41];
            uint64_t v45 = __udivti3();
            unint64_t v46 = v44 - 0x8AC7230489E80000 * v45;
            v37[v43] = v45;
            uint64_t v41 = v42;
          }
          while (v42);
          if (v68[v39 - 1])
          {
            uint64_t v47 = v39;
            uint64_t v49 = v69;
            uint64_t v48 = v70;
          }
          else
          {
            uint64_t v49 = v69;
            uint64_t v48 = v70;
            if (v39 == 1)
            {
LABEL_52:
              uint64_t v47 = 0;
            }
            else
            {
              uint64_t v50 = v39;
              while (!v64[v50])
              {
                if (--v50 == 1) {
                  goto LABEL_52;
                }
              }
              uint64_t v47 = v50 - 1;
            }
          }
          uint64_t v51 = v48;
          uint64_t v41 = v49;
          if (v39 < v47) {
            goto LABEL_77;
          }
          do
          {
            if (v51 - 19 < 1) {
              goto LABEL_62;
            }
            --v41;
            v16[v51-- - 20] = (v46 % 0xA) | 0x30;
            BOOL v34 = v46 > 9;
            v46 /= 0xAuLL;
          }
          while (v34);
          int64_t v40 = v49 - 19;
          uint64_t v38 = v48 - 19;
          uint64_t v39 = v47;
        }
        while (v47);
        if (v65)
        {
          uint64_t v52 = v66;
          if (v41)
          {
            long long v53 = &v16[v41--];
            *(v53 - 1) = 45;
            goto LABEL_64;
          }
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
        }
LABEL_63:
        uint64_t v52 = v66;
LABEL_64:
        if (v52 >= v41)
        {
          MEMORY[0x1F4188790](v52 - v41);
          uint64_t v60 = v55;
          uint64_t v61 = v54;
          return String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
        }
        goto LABEL_81;
      }
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (isStackAllocationSafe)
    {
      MEMORY[0x1F4188790](isStackAllocationSafe);
      uint64_t v16 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_19;
    }
    unint64_t v18 = (char *)swift_slowAlloc();
    memset(v18, 48, v13);
    int64_t v19 = v13;
    uint64_t v20 = v6 - 1;
    long long v64 = v6 - 2;
    uint64_t v21 = v11 + i + 20;
    uint64_t v22 = 1;
    int64_t v23 = v19;
LABEL_21:
    int64_t v69 = v23;
    uint64_t v70 = v21;
    uint64_t v24 = v22;
LABEL_22:
    if (v22 >= v24) {
      break;
    }
    __break(1u);
LABEL_40:
    *uint64_t v6 = -*v6;
  }
  uint64_t v5 = v24 - 1;
  uint64_t v25 = v24;
  uint64_t v6 = (void *)v20[v24];
  uint64_t v26 = __udivti3();
  unint64_t v27 = (unint64_t)&v6[0xEA71B9F6EC30000 * v26];
  v20[v25] = v26;
  uint64_t v24 = v5;
  if (v5) {
    goto LABEL_22;
  }
  if (v68[v22 - 1])
  {
    uint64_t v28 = v22;
    int64_t v30 = v69;
    uint64_t v29 = v70;
  }
  else
  {
    int64_t v30 = v69;
    uint64_t v29 = v70;
    if (v22 == 1)
    {
LABEL_30:
      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v31 = v22;
      while (!v64[v31])
      {
        if (--v31 == 1) {
          goto LABEL_30;
        }
      }
      uint64_t v28 = v31 - 1;
    }
  }
  uint64_t v32 = v29;
  uint64_t v33 = v30;
  if (v22 < v28) {
    goto LABEL_80;
  }
  while (2)
  {
    if (v32 - 19 < 1)
    {
      __break(1u);
      goto LABEL_67;
    }
    --v33;
    v18[v32-- - 20] = (v27 % 0xA) | 0x30;
    BOOL v34 = v27 > 9;
    v27 /= 0xAuLL;
    if (v34) {
      continue;
    }
    break;
  }
  int64_t v23 = v30 - 19;
  uint64_t v21 = v29 - 19;
  uint64_t v22 = v28;
  if (v28) {
    goto LABEL_21;
  }
  if (!v65)
  {
LABEL_67:
    uint64_t v35 = v66;
    goto LABEL_68;
  }
  uint64_t v35 = v66;
  if (!v33) {
    goto LABEL_85;
  }
  uint64_t v36 = &v18[v33--];
  *(v36 - 1) = 45;
LABEL_68:
  if (v35 < v33) {
    goto LABEL_83;
  }
  MEMORY[0x1F4188790](v35 - v33);
  uint64_t v60 = v58;
  uint64_t v61 = v57;
  uint64_t v56 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
  MEMORY[0x185309510](v18, -1, -1);
  return v56;
}

void Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)(char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  char v16 = *a1;
  char v15 = *a2;
  char v8 = *a3;
  char v9 = *a4;
  uint64_t v10 = *a6;
  uint64_t v11 = a6[1];
  if (one-time initialization token for cache != -1) {
    a1 = (char *)swift_once();
  }
  uint64_t v12 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v12 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v12[4], &v22);
  os_unfair_lock_unlock(v12 + 36);
  swift_release_n();
  if ((void)v22)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)&long long v22 = v10;
    *((void *)&v22 + 1) = v11;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    uint64_t inited = swift_initStaticObject();
    swift_release();
    *(void *)&long long v20 = inited;
    *((void *)&v20 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    uint64_t v18 = 0;
    char v19 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v21, (uint64_t *)&v22, &v20, 2, 0, 4, 0, (uint64_t)&v18);
    *(unsigned char *)a7 = v8;
    *(unsigned char *)(a7 + 1) = a5 & 1;
    *(unsigned char *)(a7 + 2) = v9;
    *(unsigned char *)(a7 + 3) = v16;
    *(unsigned char *)(a7 + 4) = v15;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = v14;
    *(void *)(a7 + 24) = v10;
    *(void *)(a7 + 32) = v11;
  }
  else
  {
    __break(1u);
  }
}

uint64_t Date.ISO8601Format(_:)()
{
  return Date.ISO8601FormatStyle.format(_:)(*(Foundation::Date *)&v0->_time)._countAndFlagsBits;
}

uint64_t Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.DateSeparator.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.DateSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t Date.ISO8601FormatStyle.DateSeparator.rawValue.getter()
{
  if (*v0) {
    return 0;
  }
  else {
    return 45;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.DateSeparator(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.DateSeparator@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.DateSeparator.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.DateSeparator(uint64_t *a1@<X8>)
{
  uint64_t v2 = 45;
  if (*v1) {
    uint64_t v2 = 0;
  }
  unint64_t v3 = 0xE100000000000000;
  if (*v1) {
    unint64_t v3 = 0xE000000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.TimeSeparator.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.TimeSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t Date.ISO8601FormatStyle.TimeSeparator.rawValue.getter()
{
  if (*v0) {
    return 0;
  }
  else {
    return 58;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.TimeSeparator@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.TimeSeparator.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.TimeSeparator(uint64_t *a1@<X8>)
{
  uint64_t v2 = 58;
  if (*v1) {
    uint64_t v2 = 0;
  }
  unint64_t v3 = 0xE100000000000000;
  if (*v1) {
    unint64_t v3 = 0xE000000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.TimeSeparator()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.TimeSeparator()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.DateTimeSeparator.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.DateTimeSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  object = string._object;
  v4.___darwin_time_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v7 == 1) {
    char v9 = 1;
  }
  else {
    char v9 = 2;
  }
  if (!v7) {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t Date.ISO8601FormatStyle.DateTimeSeparator.rawValue.getter()
{
  if (*v0) {
    return 2577447;
  }
  else {
    return 32;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.DateTimeSeparator.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.DateTimeSeparator(uint64_t *a1@<X8>)
{
  uint64_t v2 = 32;
  if (*v1) {
    uint64_t v2 = 2577447;
  }
  unint64_t v3 = 0xE100000000000000;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.Fields.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t Date.ISO8601FormatStyle.Fields.rawValue.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*Date.ISO8601FormatStyle.Fields.rawValue.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ISO8601FormatStyle.Fields.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Date.ISO8601FormatStyle.Fields.year.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static Date.ISO8601FormatStyle.Fields.month.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static Date.ISO8601FormatStyle.Fields.weekOfYear.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static Date.ISO8601FormatStyle.Fields.day.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static Date.ISO8601FormatStyle.Fields.time.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static Date.ISO8601FormatStyle.Fields.timeZone.getter(void *a1@<X8>)
{
  *a1 = 32;
}

uint64_t Date.ISO8601FormatStyle.Fields.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Date.ISO8601FormatStyle.Fields.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.Fields@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void Date.ISO8601FormatStyle.timeSeparator.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t Date.ISO8601FormatStyle.includingFractionalSeconds.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

void Date.ISO8601FormatStyle.timeZoneSeparator.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

void Date.ISO8601FormatStyle.dateSeparator.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 3);
}

void Date.ISO8601FormatStyle.dateTimeSeparator.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 4);
}

void Date.ISO8601FormatStyle.formatFields.getter(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    uint64_t v3 = unk_1ECA47B98;
    if ((unk_1ECA47B98 & ~qword_1ECA47B90) == 0) {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 | qword_1ECA47B90;
    uint64_t v5 = qword_1ECA47BA0;
    if ((qword_1ECA47BA0 & ~v4) == 0) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = v5 | v4;
    if ((unk_1ECA47BA8 & ~v6) != 0) {
      uint64_t v7 = unk_1ECA47BA8;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v7 | v6;
    uint64_t v9 = qword_1ECA47BB0;
    if ((qword_1ECA47BB0 & ~v8) == 0) {
      uint64_t v9 = 0;
    }
    *a1 = v9 | v8;
  }
}

uint64_t Date.ISO8601FormatStyle.CodingKeys.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    case 2:
      uint64_t result = 0x73646C656966;
      break;
    case 4:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 5:
      unsigned int v3 = 1702125924;
      goto LABEL_7;
    case 6:
      unsigned int v3 = 1701669236;
LABEL_7:
      uint64_t result = v3 | 0x6170655300000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Date.ISO8601FormatStyle.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    case 2:
      uint64_t result = 0x73646C656966;
      break;
    case 4:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 5:
      unsigned int v3 = 1702125924;
      goto LABEL_7;
    case 6:
      unsigned int v3 = 1701669236;
LABEL_7:
      uint64_t result = v3 | 0x6170655300000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Date.ISO8601FormatStyle.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Date.ISO8601FormatStyle.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  return Date.ISO8601FormatStyle.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.ISO8601FormatStyle.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Date.ISO8601FormatStyle.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ISO8601FormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ISO8601FormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void Date.ISO8601FormatStyle.init(from:)(void *a1@<X0>, unsigned char *a2@<X8>)
{
  long long v22 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ISO8601FormatStyle.CodingKeys>);
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for cache != -1) {
    uint64_t v5 = swift_once();
  }
  uint64_t v8 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v5);
  *(&v22 - 2) = 0;
  uint64_t v9 = v8 + 36;
  swift_retain_n();
  os_unfair_lock_lock(v8 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v8[4], &v27);
  if (!v2)
  {
    uint64_t v10 = 0;
    os_unfair_lock_unlock(v8 + 36);
    swift_release_n();
    unint64_t v11 = v27;
    if ((void)v27)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys();
      dispatch thunk of Decoder.container<A>(keyedBy:)();
      LOBYTE(v26) = 0;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v32 = v27;
      LOBYTE(v26) = 1;
      lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      swift_unknownObjectRelease();
      uint64_t v9 = (os_unfair_lock_s *)*((void *)&v27 + 1);
      unint64_t v11 = v27;
      LOBYTE(v26) = 2;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v10 = v27;
      LOBYTE(v26) = 3;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v30 = v27;
      LOBYTE(v27) = 4;
      char v33 = KeyedDecodingContainer.decode(_:forKey:)() & 1;
      LOBYTE(v26) = 5;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v31 = v27;
      LOBYTE(v26) = 6;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v28 = v27;
      char v29 = 0;
      unsigned long long v27 = __PAIR128__((unint64_t)v9, v11);
      uint64_t v12 = one-time initialization token for cache;
      swift_unknownObjectRetain();
      if (v12 == -1)
      {
LABEL_6:
        type metadata accessor for _LocaleUnlocalized();
        swift_retain();
        uint64_t inited = swift_initStaticObject();
        swift_release();
        unint64_t v14 = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
        *(void *)&long long v26 = inited;
        *((void *)&v26 + 1) = v14;
        uint64_t v24 = 0;
        char v25 = 1;
        type metadata accessor for _CalendarGregorian();
        swift_allocObject();
        _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)&v29, (uint64_t *)&v27, &v26, 2, 0, 4, 0, (uint64_t)&v24);
        uint64_t v16 = v15;
        (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v4);
        char v17 = v33;
        char v18 = v32;
        char v19 = v31;
        char v20 = v30;
        uint64_t v21 = v22;
        *long long v22 = v28;
        v21[1] = v17;
        v21[2] = v18;
        void v21[3] = v19;
        v21[4] = v20;
        *((void *)v21 + 1) = v10;
        *((void *)v21 + 2) = v16;
        *((void *)v21 + 3) = v11;
        *((void *)v21 + 4) = v9;
        swift_retain();
        swift_unknownObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
        swift_unknownObjectRelease();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_6;
  }
  os_unfair_lock_unlock(v8 + 36);
  __break(1u);
}

uint64_t Date.ISO8601FormatStyle.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ISO8601FormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v14) = *v1;
  int v20 = v1[1];
  unsigned __int8 v8 = v1[2];
  int v9 = v1[3];
  int v17 = v1[4];
  int v18 = v9;
  uint64_t v15 = *((void *)v1 + 1);
  long long v16 = *(_OWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = v8;
  char v21 = 0;
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = v15;
    char v11 = v17;
    char v12 = v18;
    long long v19 = v16;
    char v21 = 1;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v19 = v10;
    char v21 = 2;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = v11;
    char v21 = 3;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v19) = v12;
    char v21 = 5;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = BYTE4(v14);
    char v21 = 6;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Date.ISO8601FormatStyle.hash(into:)(uint64_t a1)
{
  Swift::UInt8 v8 = *(unsigned char *)(v1 + 1);
  Swift::UInt v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 32);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 112);
  swift_unknownObjectRetain();
  v6(a1, ObjectType, v4);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v8);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t Date.ISO8601FormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

uint64_t key path setter for Date.ISO8601FormatStyle.timeZone : Date.ISO8601FormatStyle(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)(a2 + 24) = v4;
  return Date.ISO8601FormatStyle.timeZone.didset();
}

uint64_t Date.ISO8601FormatStyle.timeZone.setter(_OWORD *a1)
{
  swift_unknownObjectRelease();
  *(_OWORD *)(v1 + 24) = *a1;

  return Date.ISO8601FormatStyle.timeZone.didset();
}

uint64_t Date.ISO8601FormatStyle.timeZone.didset()
{
  uint64_t v1 = v0;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  *(void *)&long long v9 = inited;
  *((void *)&v9 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  uint64_t v7 = 0;
  char v8 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)&v11, v10, &v9, 2, 0, 4, 0, (uint64_t)&v7);
  uint64_t v5 = v4;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v5;
  return result;
}

uint64_t (*Date.ISO8601FormatStyle.timeZone.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return Date.ISO8601FormatStyle.timeZone.modify;
}

uint64_t Date.ISO8601FormatStyle.timeZone.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return Date.ISO8601FormatStyle.timeZone.didset();
  }
  return result;
}

void Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeZone:)(char *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v5 = *a1;
  char v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (one-time initialization token for cache != -1) {
    a1 = (char *)swift_once();
  }
  long long v9 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v9 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v9[4], &v16);
  os_unfair_lock_unlock(v9 + 36);
  swift_release_n();
  if ((void)v16)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)&long long v16 = v7;
    *((void *)&v16 + 1) = v8;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    uint64_t inited = swift_initStaticObject();
    swift_release();
    *(void *)&long long v14 = inited;
    *((void *)&v14 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    uint64_t v12 = 0;
    char v13 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v15, (uint64_t *)&v16, &v14, 2, 0, 4, 0, (uint64_t)&v12);
    *(_WORD *)a4 = 0;
    *(unsigned char *)(a4 + 2) = 1;
    *(unsigned char *)(a4 + 3) = v5;
    *(unsigned char *)(a4 + 4) = v6;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = v11;
    *(void *)(a4 + 24) = v7;
    *(void *)(a4 + 32) = v8;
  }
  else
  {
    __break(1u);
  }
}

uint64_t Date.ISO8601FormatStyle.year()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 1);
  char v3 = *(unsigned char *)(v1 + 2);
  char v4 = *(unsigned char *)(v1 + 3);
  char v5 = *(unsigned char *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(unsigned char *)(a1 + 1) = v2;
  *(unsigned char *)(a1 + 2) = v3;
  *(unsigned char *)(a1 + 3) = v4;
  *(unsigned char *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 1) == 0) {
    *(void *)(a1 + 8) = v7 | 1;
  }
  swift_retain();

  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.weekOfYear()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 1);
  char v3 = *(unsigned char *)(v1 + 2);
  char v4 = *(unsigned char *)(v1 + 3);
  char v5 = *(unsigned char *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(unsigned char *)(a1 + 1) = v2;
  *(unsigned char *)(a1 + 2) = v3;
  *(unsigned char *)(a1 + 3) = v4;
  *(unsigned char *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 4) == 0) {
    *(void *)(a1 + 8) = v7 | 4;
  }
  swift_retain();

  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.month()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 1);
  char v3 = *(unsigned char *)(v1 + 2);
  char v4 = *(unsigned char *)(v1 + 3);
  char v5 = *(unsigned char *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(unsigned char *)(a1 + 1) = v2;
  *(unsigned char *)(a1 + 2) = v3;
  *(unsigned char *)(a1 + 3) = v4;
  *(unsigned char *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 2) == 0) {
    *(void *)(a1 + 8) = v7 | 2;
  }
  swift_retain();

  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.day()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 1);
  char v3 = *(unsigned char *)(v1 + 2);
  char v4 = *(unsigned char *)(v1 + 3);
  char v5 = *(unsigned char *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(unsigned char *)(a1 + 1) = v2;
  *(unsigned char *)(a1 + 2) = v3;
  *(unsigned char *)(a1 + 3) = v4;
  *(unsigned char *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 8) == 0) {
    *(void *)(a1 + 8) = v7 | 8;
  }
  swift_retain();

  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.time(includingFractionalSeconds:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(v2 + 2);
  char v4 = *(unsigned char *)(v2 + 3);
  char v5 = *(unsigned char *)(v2 + 4);
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 16);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(unsigned char *)(a2 + 2) = v3;
  *(unsigned char *)(a2 + 3) = v4;
  *(unsigned char *)(a2 + 4) = v5;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  if ((v7 & 0x10) == 0) {
    *(void *)(a2 + 8) = v7 | 0x10;
  }
  *(unsigned char *)(a2 + 1) = a1 & 1;
  swift_retain();

  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.timeZone(separator:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(unsigned char *)(v2 + 1);
  char v5 = *(unsigned char *)(v2 + 3);
  char v6 = *(unsigned char *)(v2 + 4);
  uint64_t v8 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(unsigned char *)(a2 + 1) = v4;
  *(unsigned char *)(a2 + 3) = v5;
  *(unsigned char *)(a2 + 4) = v6;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  if ((v8 & 0x20) == 0) {
    *(void *)(a2 + 8) = v8 | 0x20;
  }
  *(unsigned char *)(a2 + 2) = v3;
  swift_retain();

  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.dateSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(unsigned char *)(v2 + 1);
  char v5 = *(unsigned char *)(v2 + 2);
  char v6 = *(unsigned char *)(v2 + 4);
  uint64_t v8 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(unsigned char *)(a2 + 1) = v4;
  *(unsigned char *)(a2 + 2) = v5;
  *(unsigned char *)(a2 + 3) = v3;
  *(unsigned char *)(a2 + 4) = v6;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();

  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.dateTimeSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(unsigned char *)(v2 + 1);
  char v5 = *(unsigned char *)(v2 + 2);
  char v6 = *(unsigned char *)(v2 + 3);
  uint64_t v8 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(unsigned char *)(a2 + 1) = v4;
  *(unsigned char *)(a2 + 2) = v5;
  *(unsigned char *)(a2 + 3) = v6;
  *(unsigned char *)(a2 + 4) = v3;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();

  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.timeSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(unsigned char *)(v2 + 1);
  char v5 = *(unsigned char *)(v2 + 2);
  char v6 = *(unsigned char *)(v2 + 3);
  char v7 = *(unsigned char *)(v2 + 4);
  uint64_t v9 = *(void *)(v2 + 8);
  uint64_t v8 = *(void *)(v2 + 16);
  *(unsigned char *)a2 = v3;
  *(unsigned char *)(a2 + 1) = v4;
  *(unsigned char *)(a2 + 2) = v5;
  *(unsigned char *)(a2 + 3) = v6;
  *(unsigned char *)(a2 + 4) = v7;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();

  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.timeZoneSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(unsigned char *)(v2 + 1);
  char v5 = *(unsigned char *)(v2 + 3);
  char v6 = *(unsigned char *)(v2 + 4);
  uint64_t v8 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(unsigned char *)(a2 + 1) = v4;
  *(unsigned char *)(a2 + 2) = v3;
  *(unsigned char *)(a2 + 3) = v5;
  *(unsigned char *)(a2 + 4) = v6;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();

  return swift_unknownObjectRetain();
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }
  return result;
}

char *closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(char *__src, int64_t __n, void *a3)
{
  if (__src)
  {
    if (__n)
    {
      uint64_t v5 = a3[2];
      if (a3[1] - v5 < __n)
      {
        __break(1u);
LABEL_13:
        __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return __src;
      }
      char v6 = __src;
      uint64_t v7 = (char *)(*a3 + v5);
      if (&v7[__n] > v6 && v7 < &v6[__n]) {
        goto LABEL_13;
      }
      __src = (char *)memcpy(v7, v6, __n);
    }
    a3[2] += __n;
  }
  return __src;
}

Swift::Int Date.ISO8601FormatStyle.hashValue.getter()
{
  char v1 = *(unsigned char *)(v0 + 1);
  char v2 = *(unsigned char *)(v0 + 2);
  char v3 = *(unsigned char *)(v0 + 3);
  char v4 = *(unsigned char *)(v0 + 4);
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 32);
  v8[72] = *(unsigned char *)v0;
  v8[73] = v1;
  v8[74] = v2;
  v8[75] = v3;
  v8[76] = v4;
  uint64_t v9 = v5;
  long long v10 = *(_OWORD *)(v0 + 16);
  uint64_t v11 = v6;
  Hasher.init(_seed:)();
  Date.ISO8601FormatStyle.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle(void *a1)
{
  return Date.ISO8601FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle()
{
  char v1 = *(unsigned char *)(v0 + 1);
  char v2 = *(unsigned char *)(v0 + 2);
  char v3 = *(unsigned char *)(v0 + 3);
  char v4 = *(unsigned char *)(v0 + 4);
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 32);
  v8[72] = *(unsigned char *)v0;
  v8[73] = v1;
  v8[74] = v2;
  v8[75] = v3;
  v8[76] = v4;
  uint64_t v9 = v5;
  long long v10 = *(_OWORD *)(v0 + 16);
  uint64_t v11 = v6;
  Hasher.init(_seed:)();
  Date.ISO8601FormatStyle.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle()
{
  char v1 = *(unsigned char *)(v0 + 1);
  char v2 = *(unsigned char *)(v0 + 2);
  char v3 = *(unsigned char *)(v0 + 3);
  char v4 = *(unsigned char *)(v0 + 4);
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 32);
  v8[72] = *(unsigned char *)v0;
  v8[73] = v1;
  v8[74] = v2;
  v8[75] = v3;
  v8[76] = v4;
  uint64_t v9 = v5;
  long long v10 = *(_OWORD *)(v0 + 16);
  uint64_t v11 = v6;
  Hasher.init(_seed:)();
  Date.ISO8601FormatStyle.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

void static ParseableFormatStyle<>.iso8601.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  char v3 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v3 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v3[4], &v14);
  os_unfair_lock_unlock(v3 + 36);
  uint64_t v4 = swift_release_n();
  uint64_t v5 = v14;
  if (!(void)v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = *((void *)&v14 + 1);
  uint64_t v7 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v4);
  swift_retain_n();
  os_unfair_lock_lock(v7 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v7[4], &v14);
  os_unfair_lock_unlock(v7 + 36);
  swift_release_n();
  if (!(void)v14)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)&long long v14 = v5;
  *((void *)&v14 + 1) = v6;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  *(void *)&long long v12 = inited;
  *((void *)&v12 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  uint64_t v10 = 0;
  char v11 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v13, (uint64_t *)&v14, &v12, 2, 0, 4, 0, (uint64_t)&v10);
  *(_DWORD *)a2 = 0x10000;
  *(unsigned char *)(a2 + 4) = 1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
}

void static ParseStrategy<>.iso8601.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  char v3 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v3 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v3[4], &v14);
  os_unfair_lock_unlock(v3 + 36);
  uint64_t v4 = swift_release_n();
  uint64_t v5 = v14;
  if (!(void)v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = *((void *)&v14 + 1);
  uint64_t v7 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v4);
  swift_retain_n();
  os_unfair_lock_lock(v7 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v7[4], &v14);
  os_unfair_lock_unlock(v7 + 36);
  swift_release_n();
  if (!(void)v14)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)&long long v14 = v5;
  *((void *)&v14 + 1) = v6;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  *(void *)&long long v12 = inited;
  *((void *)&v12 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  uint64_t v10 = 0;
  char v11 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v13, (uint64_t *)&v14, &v12, 2, 0, 4, 0, (uint64_t)&v10);
  *(_DWORD *)a2 = 0x10000;
  *(unsigned char *)(a2 + 4) = 1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
}

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Date.ISO8601FormatStyle.parse(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t v38 = v1;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(v2 + 1);
  char v5 = *(unsigned char *)(v2 + 2);
  char v6 = *(unsigned char *)(v2 + 3);
  char v7 = *(unsigned char *)(v2 + 4);
  unint64_t v8 = *(void *)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 16);
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t v11 = *(void *)(v2 + 32);
  LOBYTE(v42) = *(unsigned char *)v2;
  BYTE1(v42) = v4;
  BYTE2(v42) = v5;
  BYTE3(v42) = v6;
  BYTE4(v42) = v7;
  unint64_t v43 = v8;
  *(void *)&long long v44 = v9;
  uint64_t v39 = v11;
  uint64_t v40 = v10;
  *((void *)&v44 + 1) = v10;
  uint64_t v45 = v11;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  Date.ISO8601FormatStyle.parse(_:in:)(a1._countAndFlagsBits, (unint64_t)a1._object, (uint64_t)&__tp);
  if ((v47 & 1) == 0)
  {
    *(Foundation::Date *)&result._time = (Foundation::Date)__tp.tv_nsec;
    *uint64_t v38 = __tp.tv_nsec;
    return result;
  }
  *(void *)&long long v44 = v9;
  *((void *)&v44 + 1) = v40;
  uint64_t v45 = v39;
  __tp.__darwin_time_t tv_sec = 0;
  __tp.uint64_t tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  Swift::String v12 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(88);
  v13._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
  v13._object = (void *)0xED00002065737261;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = countAndFlagsBits;
  v14._object = object;
  String.append(_:)(v14);
  v15._object = (void *)0x80000001823AB110;
  v15._uint64_t countAndFlagsBits = 0xD000000000000046;
  String.append(_:)(v15);
  String.append(_:)(v12);
  v16._uint64_t countAndFlagsBits = 46;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 40) = v18;
  *(void *)(inited + 48) = 0;
  *(void *)(inited + 56) = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  long long v19 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v42);
  uint64_t v20 = v42;
  uint64_t v21 = v43;
  swift_retain();
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  if (v23)
  {
    __break(1u);
    goto LABEL_12;
  }
  v19[(v22 >> 6) + 8] |= 1 << v22;
  uint64_t v24 = (uint64_t *)(v19[6] + 16 * v22);
  *uint64_t v24 = v20;
  v24[1] = v21;
  outlined init with take of Any(&v44, (_OWORD *)(v19[7] + 32 * v22));
  uint64_t v25 = v19[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v19[2] = v27;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v28 = objc_allocWithZone((Class)NSError);
  uint64_t v29 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v30 = objc_msgSend(v28, sel_initWithDomain_code_userInfo_, v29, 2048, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v31 = objc_msgSend(v30, sel_domain);
  id v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  if (v32 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v34 != v35)
  {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v37) {
      goto LABEL_9;
    }
LABEL_13:
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_9:
  swift_willThrow();
  return result;
}

Foundation::Date protocol witness for ParseStrategy.parse(_:) in conformance Date.ISO8601FormatStyle(Swift::String *a1)
{
  return Date.ISO8601FormatStyle.parse(_:)(*a1);
}

uint64_t Date.ISO8601FormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 1);
  char v3 = *(unsigned char *)(v1 + 2);
  char v4 = *(unsigned char *)(v1 + 3);
  char v5 = *(unsigned char *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(unsigned char *)(a1 + 1) = v2;
  *(unsigned char *)(a1 + 2) = v3;
  *(unsigned char *)(a1 + 3) = v4;
  *(unsigned char *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  swift_retain();

  return swift_unknownObjectRetain();
}

double Date.ISO8601FormatStyle.consuming(_:startingAt:in:)@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if (a3 >> 14 >= a4 >> 14 || (Date.ISO8601FormatStyle.parse(_:in:)(a1, a2, (uint64_t)&v7), (v8 & 1) != 0))
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(unsigned char *)(a5 + 16) = 1;
  }
  else
  {
    double result = *(double *)&v7;
    *(_OWORD *)a5 = v7;
    *(unsigned char *)(a5 + 16) = 0;
  }
  return result;
}

double protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.ISO8601FormatStyle@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Date.ISO8601FormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.ISO8601FormatStyle(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();

  return MEMORY[0x1F4188350](a1, v2);
}

void static RegexComponent<>.iso8601.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  char v3 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v3 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v3[4], &v14);
  os_unfair_lock_unlock(v3 + 36);
  uint64_t v4 = swift_release_n();
  uint64_t v5 = v14;
  if (!(void)v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = *((void *)&v14 + 1);
  long long v7 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v4);
  swift_retain_n();
  os_unfair_lock_lock(v7 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v7[4], &v14);
  os_unfair_lock_unlock(v7 + 36);
  swift_release_n();
  if (!(void)v14)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)&long long v14 = v5;
  *((void *)&v14 + 1) = v6;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  *(void *)&long long v12 = inited;
  *((void *)&v12 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  uint64_t v10 = 0;
  char v11 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v13, (uint64_t *)&v14, &v12, 2, 0, 4, 0, (uint64_t)&v10);
  *(_DWORD *)a2 = 0x10000;
  *(unsigned char *)(a2 + 4) = 1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
}

void static RegexComponent<>.iso8601WithTimeZone(includingFractionalSeconds:dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:)(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v17 = *a2;
  char v18 = a1;
  char v7 = *a4;
  char v15 = *a5;
  char v16 = *a3;
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  char v8 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v8 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v8[4], &v23);
  os_unfair_lock_unlock(v8 + 36);
  uint64_t v9 = swift_release_n();
  uint64_t v10 = v23;
  if (!(void)v23)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v11 = *((void *)&v23 + 1);
  long long v12 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v9);
  swift_retain_n();
  os_unfair_lock_lock(v12 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v12[4], &v23);
  os_unfair_lock_unlock(v12 + 36);
  swift_release_n();
  if (!(void)v23)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)&long long v23 = v10;
  *((void *)&v23 + 1) = v11;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  *(void *)&long long v21 = inited;
  *((void *)&v21 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  uint64_t v19 = 0;
  char v20 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v22, (uint64_t *)&v23, &v21, 2, 0, 4, 0, (uint64_t)&v19);
  *(unsigned char *)a6 = v7;
  *(unsigned char *)(a6 + 1) = v18 & 1;
  *(unsigned char *)(a6 + 2) = v15;
  *(unsigned char *)(a6 + 3) = v17;
  *(unsigned char *)(a6 + 4) = v16;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = v14;
  *(void *)(a6 + 24) = v10;
  *(void *)(a6 + 32) = v11;
}

void static RegexComponent<>.iso8601(timeZone:includingFractionalSeconds:dateSeparator:dateTimeSeparator:timeSeparator:)(uint64_t *a1@<X0>, char a2@<W1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  char v16 = *a3;
  char v9 = *a4;
  char v10 = *a5;
  uint64_t v11 = one-time initialization token for cache;
  uint64_t v12 = swift_unknownObjectRetain();
  if (v11 != -1) {
    uint64_t v12 = swift_once();
  }
  Swift::String v13 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v12);
  swift_retain_n();
  os_unfair_lock_lock(v13 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v13[4], &v22);
  os_unfair_lock_unlock(v13 + 36);
  swift_release_n();
  if ((void)v22)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)&long long v22 = v7;
    *((void *)&v22 + 1) = v8;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    uint64_t inited = swift_initStaticObject();
    swift_release();
    *(void *)&long long v20 = inited;
    *((void *)&v20 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    uint64_t v18 = 0;
    char v19 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v21, (uint64_t *)&v22, &v20, 2, 0, 4, 0, (uint64_t)&v18);
    *(unsigned char *)a6 = v10;
    *(unsigned char *)(a6 + 1) = a2 & 1;
    *(unsigned char *)(a6 + 2) = 1;
    *(unsigned char *)(a6 + 3) = v16;
    *(unsigned char *)(a6 + 4) = v9;
    *(void *)(a6 + 8) = 27;
    *(void *)(a6 + 16) = v15;
    *(void *)(a6 + 24) = v7;
    *(void *)(a6 + 32) = v8;
  }
  else
  {
    __break(1u);
  }
}

void static RegexComponent<>.iso8601Date(timeZone:dateSeparator:)(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  char v6 = *a2;
  uint64_t v7 = one-time initialization token for cache;
  uint64_t v8 = swift_unknownObjectRetain();
  if (v7 != -1) {
    uint64_t v8 = swift_once();
  }
  char v9 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v8);
  swift_retain_n();
  os_unfair_lock_lock(v9 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v9[4], &v16);
  os_unfair_lock_unlock(v9 + 36);
  swift_release_n();
  if ((void)v16)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)&long long v16 = v4;
    *((void *)&v16 + 1) = v5;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    uint64_t inited = swift_initStaticObject();
    swift_release();
    *(void *)&long long v14 = inited;
    *((void *)&v14 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    uint64_t v12 = 0;
    char v13 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v15, (uint64_t *)&v16, &v14, 2, 0, 4, 0, (uint64_t)&v12);
    *(_WORD *)a3 = 0;
    *(unsigned char *)(a3 + 2) = 1;
    *(unsigned char *)(a3 + 3) = v6;
    *(unsigned char *)(a3 + 4) = 1;
    *(void *)(a3 + 24) = v4;
    *(void *)(a3 + 32) = v5;
    *(void *)(a3 + 8) = 11;
    *(void *)(a3 + 16) = v11;
  }
  else
  {
    __break(1u);
  }
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    double result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall Substring._slowMakeContiguousUTF8()()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  unint64_t v4 = _StringGuts.validateInclusiveScalarIndex(_:)(0xFuLL, v2, v3);
  unint64_t v5 = _StringGuts.validateInclusiveScalarIndex(_:)(v1, v2, v3) >> 14;
  if (v4 >> 14 < v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      if ((v3 & 0x1000000000000000) != 0)
      {
        unint64_t v4 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        unint64_t v8 = v4 >> 16;
        if ((v3 & 0x2000000000000000) != 0)
        {
          unint64_t v72 = v2;
          uint64_t v73 = v3 & 0xFFFFFFFFFFFFFFLL;
          int v10 = *((unsigned __int8 *)&v72 + v8);
        }
        else
        {
          uint64_t v9 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v2 & 0x1000000000000000) == 0) {
            uint64_t v9 = _StringObject.sharedUTF8.getter();
          }
          int v10 = *(unsigned __int8 *)(v9 + v8);
        }
        int v11 = (char)v10;
        unsigned int v12 = __clz(v10 ^ 0xFF) - 24;
        if (v11 >= 0) {
          LOBYTE(v12) = 1;
        }
        unint64_t v4 = ((v8 + v12) << 16) | 5;
      }
      ++v6;
      if (v5 <= v4 >> 14) {
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_148;
  }
  if (v5 < v4 >> 14)
  {
    uint64_t v7 = 0;
    while (1)
    {
      BOOL v13 = __OFSUB__(v7--, 1);
      if (v13) {
        goto LABEL_153;
      }
      if ((v3 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t v4 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_18:
      if (v5 >= v4 >> 14) {
        goto LABEL_35;
      }
    }
    unint64_t v14 = v4 >> 16;
    if ((v3 & 0x2000000000000000) != 0)
    {
      unint64_t v72 = v2;
      uint64_t v73 = v3 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v72 + v14 - 1) & 0xC0) == 0x80)
      {
        uint64_t v16 = 0;
        do
          int v18 = *((unsigned char *)&v71 + v14 + v16-- + 6) & 0xC0;
        while (v18 == 128);
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v15 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v2 & 0x1000000000000000) == 0) {
        uint64_t v15 = _StringObject.sharedUTF8.getter();
      }
      if ((*(unsigned char *)(v14 + v15 - 1) & 0xC0) == 0x80)
      {
        uint64_t v16 = 0;
        do
          int v17 = *(unsigned char *)(v15 + v14 - 2 + v16--) & 0xC0;
        while (v17 == 128);
LABEL_31:
        uint64_t v19 = 1 - v16;
LABEL_33:
        unint64_t v4 = (v4 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_18;
      }
    }
    uint64_t v19 = 1;
    goto LABEL_33;
  }
  uint64_t v7 = 0;
LABEL_35:
  unint64_t v20 = v71[1];
  unint64_t v21 = v71[2];
  unint64_t v22 = v71[3];
  unint64_t v23 = _StringGuts.validateInclusiveScalarIndex(_:)(*v71, v21, v22);
  unint64_t v24 = _StringGuts.validateInclusiveScalarIndex(_:)(v20, v21, v22) >> 14;
  if (v23 >> 14 < v24)
  {
    uint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = v25 + 1;
      if (__OFADD__(v25, 1)) {
        break;
      }
      if ((v22 & 0x1000000000000000) != 0)
      {
        unint64_t v23 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        unint64_t v27 = v23 >> 16;
        if ((v22 & 0x2000000000000000) != 0)
        {
          unint64_t v72 = v21;
          uint64_t v73 = v22 & 0xFFFFFFFFFFFFFFLL;
          int v29 = *((unsigned __int8 *)&v72 + v27);
        }
        else
        {
          uint64_t v28 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v21 & 0x1000000000000000) == 0) {
            uint64_t v28 = _StringObject.sharedUTF8.getter();
          }
          int v29 = *(unsigned __int8 *)(v28 + v27);
        }
        int v30 = (char)v29;
        unsigned int v31 = __clz(v29 ^ 0xFF) - 24;
        if (v30 >= 0) {
          LOBYTE(v31) = 1;
        }
        unint64_t v23 = ((v27 + v31) << 16) | 5;
      }
      ++v25;
      if (v24 <= v23 >> 14) {
        goto LABEL_69;
      }
    }
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  if (v24 < v23 >> 14)
  {
    uint64_t v26 = 0;
    while (1)
    {
      BOOL v13 = __OFSUB__(v26--, 1);
      if (v13) {
        goto LABEL_154;
      }
      if ((v22 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t v23 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_52:
      if (v24 >= v23 >> 14) {
        goto LABEL_69;
      }
    }
    if ((v22 & 0x2000000000000000) != 0)
    {
      unint64_t v72 = v21;
      uint64_t v73 = v22 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v72 + (v23 >> 16) - 1) & 0xC0) == 0x80)
      {
        uint64_t v33 = 0;
        do
          int v35 = *((unsigned char *)&v71 + (v23 >> 16) + v33-- + 6) & 0xC0;
        while (v35 == 128);
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v32 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v21 & 0x1000000000000000) == 0) {
        uint64_t v32 = _StringObject.sharedUTF8.getter();
      }
      if ((*(unsigned char *)((v23 >> 16) + v32 - 1) & 0xC0) == 0x80)
      {
        uint64_t v33 = 0;
        do
          int v34 = *(unsigned char *)(v32 + (v23 >> 16) - 2 + v33--) & 0xC0;
        while (v34 == 128);
LABEL_65:
        uint64_t v36 = 1 - v33;
LABEL_67:
        unint64_t v23 = (v23 - (v36 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_52;
      }
    }
    uint64_t v36 = 1;
    goto LABEL_67;
  }
  uint64_t v26 = 0;
LABEL_69:
  swift_bridgeObjectRetain();
  unint64_t v37 = static String._copying(_:)();
  unint64_t v39 = v38;
  swift_bridgeObjectRelease();
  unint64_t v40 = _StringGuts.validateInclusiveScalarIndex(_:)(0xFuLL, v37, v39);
  if (v7 < 0)
  {
    uint64_t v47 = 0;
    while (1)
    {
      if (v40 < 0x10000) {
        goto LABEL_151;
      }
      if ((v39 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t v40 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_88:
      if (v7 >= --v47) {
        goto LABEL_104;
      }
    }
    unint64_t v48 = v40 >> 16;
    if ((v39 & 0x2000000000000000) != 0)
    {
      unint64_t v72 = v37;
      uint64_t v73 = v39 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v72 + v48 - 1) & 0xC0) == 0x80)
      {
        uint64_t v50 = 0;
        do
          int v52 = *((unsigned char *)&v71 + v48 + v50-- + 6) & 0xC0;
        while (v52 == 128);
        goto LABEL_101;
      }
    }
    else
    {
      uint64_t v49 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v37 & 0x1000000000000000) == 0) {
        uint64_t v49 = _StringObject.sharedUTF8.getter();
      }
      if ((*(unsigned char *)(v48 + v49 - 1) & 0xC0) == 0x80)
      {
        uint64_t v50 = 0;
        do
          int v51 = *(unsigned char *)(v49 + v48 - 2 + v50--) & 0xC0;
        while (v51 == 128);
LABEL_101:
        uint64_t v53 = 1 - v50;
LABEL_103:
        unint64_t v40 = ((v48 - v53) << 16) | 5;
        goto LABEL_88;
      }
    }
    uint64_t v53 = 1;
    goto LABEL_103;
  }
  if (v7)
  {
    if ((v39 & 0x2000000000000000) != 0) {
      unint64_t v41 = HIBYTE(v39) & 0xF;
    }
    else {
      unint64_t v41 = v37 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      unint64_t v42 = v40 >> 16;
      if (v40 >> 16 >= v41) {
        goto LABEL_149;
      }
      if ((v39 & 0x1000000000000000) != 0)
      {
        unint64_t v40 = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--v7) {
          break;
        }
      }
      else
      {
        if ((v39 & 0x2000000000000000) != 0)
        {
          unint64_t v72 = v37;
          uint64_t v73 = v39 & 0xFFFFFFFFFFFFFFLL;
          int v44 = *((unsigned __int8 *)&v72 + v42);
        }
        else
        {
          uint64_t v43 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v37 & 0x1000000000000000) == 0) {
            uint64_t v43 = _StringObject.sharedUTF8.getter();
          }
          int v44 = *(unsigned __int8 *)(v43 + v42);
        }
        int v45 = (char)v44;
        unsigned int v46 = __clz(v44 ^ 0xFF) - 24;
        if (v45 >= 0) {
          LOBYTE(v46) = 1;
        }
        unint64_t v40 = ((v42 + v46) << 16) | 5;
        if (!--v7) {
          break;
        }
      }
    }
  }
LABEL_104:
  unint64_t v54 = _StringGuts.validateInclusiveScalarIndex(_:)(v40, v37, v39);
  if (v26 < 0)
  {
    uint64_t v61 = 0;
    while (1)
    {
      if (v54 < 0x10000) {
        goto LABEL_152;
      }
      if ((v39 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t v54 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_123:
      if (v26 >= --v61) {
        goto LABEL_139;
      }
    }
    unint64_t v62 = v54 >> 16;
    if ((v39 & 0x2000000000000000) != 0)
    {
      unint64_t v72 = v37;
      uint64_t v73 = v39 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v72 + v62 - 1) & 0xC0) == 0x80)
      {
        uint64_t v64 = 0;
        do
          int v66 = *((unsigned char *)&v71 + v62 + v64-- + 6) & 0xC0;
        while (v66 == 128);
        goto LABEL_136;
      }
    }
    else
    {
      uint64_t v63 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v37 & 0x1000000000000000) == 0) {
        uint64_t v63 = _StringObject.sharedUTF8.getter();
      }
      if ((*(unsigned char *)(v62 + v63 - 1) & 0xC0) == 0x80)
      {
        uint64_t v64 = 0;
        do
          int v65 = *(unsigned char *)(v63 + v62 - 2 + v64--) & 0xC0;
        while (v65 == 128);
LABEL_136:
        uint64_t v67 = 1 - v64;
LABEL_138:
        unint64_t v54 = ((v62 - v67) << 16) | 5;
        goto LABEL_123;
      }
    }
    uint64_t v67 = 1;
    goto LABEL_138;
  }
  if (v26)
  {
    if ((v39 & 0x2000000000000000) != 0) {
      unint64_t v55 = HIBYTE(v39) & 0xF;
    }
    else {
      unint64_t v55 = v37 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      unint64_t v56 = v54 >> 16;
      if (v54 >> 16 >= v55) {
        goto LABEL_150;
      }
      if ((v39 & 0x1000000000000000) != 0)
      {
        unint64_t v54 = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--v26) {
          break;
        }
      }
      else
      {
        if ((v39 & 0x2000000000000000) != 0)
        {
          unint64_t v72 = v37;
          uint64_t v73 = v39 & 0xFFFFFFFFFFFFFFLL;
          int v58 = *((unsigned __int8 *)&v72 + v56);
        }
        else
        {
          uint64_t v57 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v37 & 0x1000000000000000) == 0) {
            uint64_t v57 = _StringObject.sharedUTF8.getter();
          }
          int v58 = *(unsigned __int8 *)(v57 + v56);
        }
        int v59 = (char)v58;
        unsigned int v60 = __clz(v58 ^ 0xFF) - 24;
        if (v59 >= 0) {
          LOBYTE(v60) = 1;
        }
        unint64_t v54 = ((v56 + v60) << 16) | 5;
        if (!--v26) {
          break;
        }
      }
    }
  }
LABEL_139:
  uint64_t v68 = v71;
  if ((*(unsigned char *)v71 & 2) != 0) {
    unint64_t v69 = v40 | 3;
  }
  else {
    unint64_t v69 = v40;
  }
  if ((v71[1] & 2) != 0) {
    unint64_t v70 = v54 | 3;
  }
  else {
    unint64_t v70 = v54;
  }
  if (v70 >> 14 >= v69 >> 14)
  {
    swift_bridgeObjectRelease();
    *uint64_t v68 = v69;
    v68[1] = v70;
    _OWORD v68[2] = v37;
    _OWORD v68[3] = v39;
    return;
  }
LABEL_155:
  __break(1u);
}

uint64_t specialized static Date.ISO8601FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = a1[1];
  int v3 = a1[3];
  int v4 = a1[4];
  uint64_t v5 = *((void *)a1 + 1);
  int v32 = *a1;
  int v33 = *a2;
  int v6 = a2[1];
  int v34 = a2[3];
  int v7 = a2[4];
  uint64_t v8 = *((void *)a2 + 1);
  long long v35 = *(_OWORD *)(a2 + 24);
  long long v36 = *(_OWORD *)(a1 + 24);
  BOOL v9 = a1[2] == 0;
  if (a1[2]) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 58;
  }
  if (v9) {
    unint64_t v11 = 0xE100000000000000;
  }
  else {
    unint64_t v11 = 0xE000000000000000;
  }
  if (a2[2]) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = 58;
  }
  if (a2[2]) {
    unint64_t v13 = 0xE000000000000000;
  }
  else {
    unint64_t v13 = 0xE100000000000000;
  }
  if (v10 == v12 && v11 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v16 = 0;
    if ((v15 & 1) == 0) {
      return v16 & 1;
    }
  }
  long long v37 = v35;
  long long v38 = v36;
  char v16 = 0;
  if ((specialized static TimeZone.== infix(_:_:)((uint64_t)&v38, (uint64_t)&v37) & 1) != 0 && v5 == v8)
  {
    if (v4) {
      uint64_t v17 = 2577447;
    }
    else {
      uint64_t v17 = 32;
    }
    if (v4) {
      unint64_t v18 = 0xE300000000000000;
    }
    else {
      unint64_t v18 = 0xE100000000000000;
    }
    if (v7) {
      uint64_t v19 = 2577447;
    }
    else {
      uint64_t v19 = 32;
    }
    if (v7) {
      unint64_t v20 = 0xE300000000000000;
    }
    else {
      unint64_t v20 = 0xE100000000000000;
    }
    if (v17 == v19 && v18 == v20)
    {
      swift_bridgeObjectRelease_n();
      if (v2 != v6)
      {
        char v16 = 0;
        return v16 & 1;
      }
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v16 = 0;
      if (v21 & 1) == 0 || ((v2 ^ v6)) {
        return v16 & 1;
      }
    }
    if (v3) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = 45;
    }
    if (v3) {
      unint64_t v23 = 0xE000000000000000;
    }
    else {
      unint64_t v23 = 0xE100000000000000;
    }
    if (v34) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = 45;
    }
    if (v34) {
      unint64_t v25 = 0xE000000000000000;
    }
    else {
      unint64_t v25 = 0xE100000000000000;
    }
    if (v22 == v24 && v23 == v25)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v16 = 0;
      if ((v26 & 1) == 0) {
        return v16 & 1;
      }
    }
    if (v32) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = 58;
    }
    if (v32) {
      unint64_t v28 = 0xE000000000000000;
    }
    else {
      unint64_t v28 = 0xE100000000000000;
    }
    if (v33) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = 58;
    }
    if (v33) {
      unint64_t v30 = 0xE000000000000000;
    }
    else {
      unint64_t v30 = 0xE100000000000000;
    }
    if (v27 == v29 && v28 == v30) {
      char v16 = 1;
    }
    else {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v16 & 1;
}

unint64_t instantiation function for generic protocol witness table for Date.ISO8601FormatStyle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_181EB0EB8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

uint64_t initializeWithCopy for Date.ISO8601FormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.ISO8601FormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithTake for Date.ISO8601FormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.ISO8601FormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.ISO8601FormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Date.ISO8601FormatStyle.TimeZoneSeparator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EB11B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Date.ISO8601FormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EB12ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.CodingKeys()
{
  return &type metadata for Date.ISO8601FormatStyle.CodingKeys;
}

unint64_t specialized Date.ISO8601FormatStyle.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.ISO8601FormatStyle.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

char *partial apply for closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(char *a1, int64_t a2)
{
  return closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)partial apply(char *a1, int64_t a2)
{
  return partial apply for closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(a1, a2);
}

uint64_t specialized _parseIntegerDigits<A>(_:isNegative:)(unsigned char *a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (a2 < 1) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v5 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      uint64_t v6 = (*a1 - 48);
      uint64_t v7 = 10 * result;
      BOOL v8 = (unsigned __int128)(result * (__int128)10) >> 64 != (10 * result) >> 63;
      uint64_t v9 = 10 * result + v6;
      BOOL v10 = __OFADD__(10 * result, v6);
      BOOL v11 = __OFSUB__(v7, v6);
      uint64_t v12 = v7 - v6;
      char v13 = v11;
      if ((a3 & 1) == 0) {
        char v13 = v10;
      }
      uint64_t result = 0;
      if (!v8 && (v13 & 1) == 0)
      {
        uint64_t result = (a3 & 1) != 0 ? v12 : v9;
        if (++a1 < v5) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

{
  unsigned int v3;
  unsigned char *v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;

  if (a2)
  {
    if (a2 < 1)
    {
      LOWORD(v3) = 0;
      BOOL v8 = 0;
    }
    else
    {
      LOWORD(v3) = 0;
      unsigned int v4 = &a1[a2];
      while (*a1 - 48 <= 9)
      {
        uint64_t v5 = (*a1 - 48);
        uint64_t v6 = 10 * (unsigned __int16)v3;
        uint64_t v7 = (v6 & 0xF0000) != 0;
        if (a3)
        {
          unint64_t v3 = (unsigned __int16)v6 - v5;
          if (v7 || (v3 & 0xFFFF0000) != 0) {
            break;
          }
        }
        else
        {
          unint64_t v3 = v5 + (unsigned __int16)v6;
          if ((v7 | HIWORD(v3))) {
            break;
          }
        }
        BOOL v8 = 0;
        if (++a1 >= v4) {
          return (unsigned __int16)v3 | (v8 << 16);
        }
      }
      LOWORD(v3) = 0;
      BOOL v8 = 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
    BOOL v8 = 1;
  }
  return (unsigned __int16)v3 | (v8 << 16);
}

{
  int v3;
  unsigned char *v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;

  if (a2)
  {
    if (a2 < 1)
    {
      LOWORD(v3) = 0;
      BOOL v8 = 0;
    }
    else
    {
      LOWORD(v3) = 0;
      unsigned int v4 = &a1[a2];
      while (*a1 - 48 <= 9)
      {
        uint64_t v5 = (*a1 - 48);
        uint64_t v6 = 10 * (__int16)v3;
        uint64_t v7 = v6 != (__int16)v6;
        unint64_t v3 = (a3 & 1) != 0 ? (__int16)v6 - v5 : v5 + (__int16)v6;
        if (v7 || v3 != (__int16)v3) {
          break;
        }
        BOOL v8 = 0;
        if (++a1 >= v4) {
          return (unsigned __int16)v3 | (v8 << 16);
        }
      }
      LOWORD(v3) = 0;
      BOOL v8 = 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
    BOOL v8 = 1;
  }
  return (unsigned __int16)v3 | (v8 << 16);
}

uint64_t specialized _parseIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (a2 < 1)
    {
      LOBYTE(v3) = 0;
      int v8 = 0;
    }
    else
    {
      LOBYTE(v3) = 0;
      unsigned int v4 = &a1[a2];
      while (1)
      {
        unsigned int v5 = *a1 - 48;
        if (v5 > 9) {
          break;
        }
        __int16 v6 = 10 * v3;
        BOOL v7 = (v6 & 0xF00) != 0;
        if (a3)
        {
          unsigned int v3 = v6 - v5;
          if (v7 || (v3 & 0xFFFFFF00) != 0) {
            break;
          }
        }
        else
        {
          unsigned int v3 = v6 + v5;
          if ((v7 | (v3 >> 8))) {
            break;
          }
        }
        int v8 = 0;
        if (++a1 >= v4) {
          return v3 | (v8 << 8);
        }
      }
      LOBYTE(v3) = 0;
      int v8 = 1;
    }
  }
  else
  {
    LOBYTE(v3) = 0;
    int v8 = 1;
  }
  return v3 | (v8 << 8);
}

{
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  int v8;

  if (a2)
  {
    if (a2 < 1)
    {
      LOBYTE(v3) = 0;
      int v8 = 0;
    }
    else
    {
      LOBYTE(v3) = 0;
      unsigned int v4 = &a1[a2];
      while (1)
      {
        unsigned int v5 = *a1 - 48;
        if (v5 > 9) {
          break;
        }
        __int16 v6 = 10 * (char)v3;
        BOOL v7 = v6 != (char)v6;
        unsigned int v3 = (a3 & 1) != 0 ? (char)v6 - (char)v5 : (char)v6 + (char)v5;
        if (v7 || v3 != (char)v3) {
          break;
        }
        int v8 = 0;
        if (++a1 >= v4) {
          return v3 | (v8 << 8);
        }
      }
      LOBYTE(v3) = 0;
      int v8 = 1;
    }
  }
  else
  {
    LOBYTE(v3) = 0;
    int v8 = 1;
  }
  return v3 | (v8 << 8);
}

{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  if (!a2) {
    return 0;
  }
  if (a2 < 1) {
    return 0;
  }
  unsigned int v3 = 0;
  unsigned int v4 = 0;
  unsigned int v5 = &a1[a2];
  while (1)
  {
    __int16 v6 = *a1 - 48;
    if (v6 >= 0xA) {
      return 0;
    }
    if ((v4 & 0x8000000000000000) == 0)
    {
      BOOL v7 = !is_mul_ok(v4, 0xAuLL);
      int v8 = __CFADD__(((unint64_t)v3 * (unsigned __int128)0xAuLL) >> 64, 10 * v4);
      uint64_t v9 = (__PAIR128__(v4, v3) * 0xA) >> 64;
      if (v8) {
        BOOL v7 = 1;
      }
      BOOL v10 = 10 * v3;
      if (!v7)
      {
        BOOL v11 = v9 >> 63;
        if (a3) {
          goto LABEL_17;
        }
        goto LABEL_11;
      }
LABEL_16:
      LOBYTE(v11) = 1;
      if (a3) {
        goto LABEL_17;
      }
      goto LABEL_11;
    }
    int v8 = v3 == 0;
    char v13 = -v3;
    unint64_t v14 = -(uint64_t)(v4 + !v8);
    char v15 = !is_mul_ok(v14, 0xAuLL);
    int v8 = __CFADD__(((unint64_t)v13 * (unsigned __int128)0xAuLL) >> 64, 10 * v14);
    char v16 = (__PAIR128__(v14, v13) * 0xA) >> 64;
    if (v8) {
      char v15 = 1;
    }
    int v8 = 10 * v13 == 0;
    BOOL v10 = -10 * v13;
    uint64_t v9 = -(v16 + !v8);
    if (v15) {
      goto LABEL_16;
    }
    LOBYTE(v11) = v10 != 0;
    if (a3)
    {
LABEL_17:
      uint64_t v12 = __OFSUB__(__PAIR128__(v9, v10), v6);
      unsigned int v4 = (__PAIR128__(v9, v10) - v6) >> 64;
      unsigned int v3 = v10 - v6;
      goto LABEL_18;
    }
LABEL_11:
    uint64_t v12 = __OFADD__(__CFADD__(v10, v6), v9);
    unsigned int v4 = (__PAIR128__(v9, v10) + v6) >> 64;
    unsigned int v3 = v10 + v6;
LABEL_18:
    uint64_t v17 = v12;
    unint64_t v18 = 0;
    if (v11 & 1) != 0 || (v17) {
      return v18;
    }
    if (++a1 >= v5) {
      return v3;
    }
  }
}

unint64_t specialized Double.init<A>(exactly:)(unint64_t result)
{
  double v1 = (double)result;
  if ((double)result >= 1.84467441e19)
  {
    *(double *)&uint64_t result = 0.0;
  }
  else if ((~*(void *)&v1 & 0x7FF0000000000000) != 0)
  {
    if ((unint64_t)v1 == result) {
      *(double *)&uint64_t result = (double)result;
    }
    else {
      *(double *)&uint64_t result = 0.0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *specialized String.withUTF8<A>(_:)(uint64_t *result, size_t __n, void *__s1)
{
  uint64_t v5 = *result;
  unint64_t v6 = result[1];
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    v14[0] = v5;
    v14[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(v6) & 0xF) == __n)
    {
      uint64_t v9 = v14;
      int v8 = __s1;
      return (uint64_t *)(memcmp(v8, v9, __n) == 0);
    }
    return 0;
  }
  BOOL v10 = result;
  uint64_t v5 = static String._copying(_:)();
  uint64_t v12 = v11;
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  *BOOL v10 = v5;
  v10[1] = v12;
  unint64_t v6 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) == 0)
  {
    uint64_t result = (uint64_t *)_StringObject.sharedUTF8.getter();
    BOOL v7 = result;
    if (v13 == __n) {
      goto LABEL_5;
    }
    return 0;
  }
  BOOL v7 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  if ((v5 & 0xFFFFFFFFFFFFLL) != __n) {
    return 0;
  }
LABEL_5:
  if (v7)
  {
    int v8 = __s1;
    uint64_t v9 = v7;
    return (uint64_t *)(memcmp(v8, v9, __n) == 0);
  }
  __break(1u);
  return result;
}

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)(unsigned char *a1, uint64_t a2, char a3, uint64_t (*a4)(unsigned char *, uint64_t, uint64_t))
{
  if (!a2) {
    return 0;
  }
  int v5 = *a1;
  if (v5 == 43)
  {
    uint64_t v6 = 0;
  }
  else
  {
    if (v5 != 45)
    {
      uint64_t v6 = 0;
      if (a3)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
        goto LABEL_14;
      }
      return specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v6);
    }
    uint64_t v6 = 1;
  }
  if (a2 >= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = a2;
  }
  a1 += v7;
  a2 -= v7;
  if (a3)
  {
    if (a2 > 2)
    {
LABEL_11:
      uint64_t v8 = 2;
      return a4(&a1[v8], a2 - v8, v6);
    }
LABEL_14:
    uint64_t v8 = a2;
    return a4(&a1[v8], a2 - v8, v6);
  }
  return specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v6);
}

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)(unsigned __int8 *a1, uint64_t a2, char a3, uint64_t (*a4)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t))
{
  if (!a2) {
    return 0;
  }
  int v6 = *a1;
  if (v6 == 43)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v6 != 45)
    {
      uint64_t v7 = 0;
      if (a3)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
        goto LABEL_14;
      }
      return a5(a1, a2, v7);
    }
    uint64_t v7 = 1;
  }
  if (a2 >= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a2;
  }
  a1 += v8;
  a2 -= v8;
  if (a3)
  {
    if (a2 > 2)
    {
LABEL_11:
      uint64_t v9 = 2;
      return a4(&a1[v9], a2 - v9, v7);
    }
LABEL_14:
    uint64_t v9 = a2;
    return a4(&a1[v9], a2 - v9, v7);
  }
  return a5(a1, a2, v7);
}

{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2) {
    return 0;
  }
  int v6 = *a1;
  if (v6 == 43)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v6 != 45)
    {
      uint64_t v7 = 0;
      if (a3)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
        goto LABEL_14;
      }
      return a5(a1, a2, v7);
    }
    uint64_t v7 = 1;
  }
  if (a2 >= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a2;
  }
  a1 += v8;
  a2 -= v8;
  if (a3)
  {
    if (a2 >= 3)
    {
LABEL_11:
      uint64_t v9 = 2;
      return a4(&a1[v9], a2 - v9, v7);
    }
LABEL_14:
    uint64_t v9 = a2;
    return a4(&a1[v9], a2 - v9, v7);
  }
  return a5(a1, a2, v7);
}

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  if (!a2)
  {
    LOBYTE(v8) = 0;
    int v9 = 1;
    return v8 | (v9 << 8);
  }
  int v4 = *a1;
  if (v4 == 43)
  {
    char v5 = 0;
  }
  else
  {
    if (v4 != 45)
    {
      char v5 = 0;
      if (a3)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v7 = a2;
        goto LABEL_15;
      }
LABEL_16:
      unsigned int v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }
    char v5 = 1;
  }
  if (a2 >= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0) {
    goto LABEL_16;
  }
  if (a2 <= 2) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v7 = 2;
LABEL_15:
  unsigned int v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  int v9 = (v8 >> 8) & 1;
  return v8 | (v9 << 8);
}

{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  if (!a2)
  {
    LOBYTE(v8) = 0;
    int v9 = 1;
    return v8 | (v9 << 8);
  }
  int v4 = *a1;
  if (v4 == 43)
  {
    char v5 = 0;
  }
  else
  {
    if (v4 != 45)
    {
      char v5 = 0;
      if (a3)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v7 = a2;
        goto LABEL_15;
      }
LABEL_16:
      unsigned int v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }
    char v5 = 1;
  }
  if (a2 >= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0) {
    goto LABEL_16;
  }
  if (a2 < 3) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v7 = 2;
LABEL_15:
  unsigned int v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  int v9 = (v8 >> 8) & 1;
  return v8 | (v9 << 8);
}

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)(unsigned char *a1, uint64_t a2, char a3)
{
  if (!a2)
  {
    LOWORD(v8) = 0;
    int v9 = 1;
    return (unsigned __int16)v8 | (v9 << 16);
  }
  int v4 = *a1;
  if (v4 == 43)
  {
    char v5 = 0;
  }
  else
  {
    if (v4 != 45)
    {
      char v5 = 0;
      if (a3)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v7 = a2;
        goto LABEL_15;
      }
LABEL_16:
      unsigned int v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }
    char v5 = 1;
  }
  if (a2 >= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0) {
    goto LABEL_16;
  }
  if (a2 <= 2) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v7 = 2;
LABEL_15:
  unsigned int v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  int v9 = HIWORD(v8) & 1;
  return (unsigned __int16)v8 | (v9 << 16);
}

{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  if (!a2)
  {
    LOWORD(v8) = 0;
    int v9 = 1;
    return (unsigned __int16)v8 | (v9 << 16);
  }
  int v4 = *a1;
  if (v4 == 43)
  {
    char v5 = 0;
  }
  else
  {
    if (v4 != 45)
    {
      char v5 = 0;
      if (a3)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v7 = a2;
        goto LABEL_15;
      }
LABEL_16:
      unsigned int v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }
    char v5 = 1;
  }
  if (a2 >= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0) {
    goto LABEL_16;
  }
  if (a2 < 3) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v7 = 2;
LABEL_15:
  unsigned int v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  int v9 = HIWORD(v8) & 1;
  return (unsigned __int16)v8 | (v9 << 16);
}

unint64_t specialized _parseJSON5Integer<A>(_:isHex:)(unsigned __int8 *a1, uint64_t a2, char a3, uint64_t (*a4)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t))
{
  if (!a2)
  {
    LODWORD(v10) = 0;
    LOBYTE(v11) = 1;
    return v10 | ((unint64_t)v11 << 32);
  }
  int v6 = *a1;
  if (v6 == 43)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v6 != 45)
    {
      uint64_t v7 = 0;
      if (a3)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v9 = a2;
        goto LABEL_15;
      }
LABEL_16:
      unint64_t v10 = a5(a1, a2, v7);
      uint64_t v11 = HIDWORD(v10) & 1;
      return v10 | ((unint64_t)v11 << 32);
    }
    uint64_t v7 = 1;
  }
  if (a2 >= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a2;
  }
  a1 += v8;
  a2 -= v8;
  if ((a3 & 1) == 0) {
    goto LABEL_16;
  }
  if (a2 < 3) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v9 = 2;
LABEL_15:
  unint64_t v10 = a4(&a1[v9], a2 - v9, v7);
  uint64_t v11 = HIDWORD(v10) & 1;
  return v10 | ((unint64_t)v11 << 32);
}

unint64_t specialized NSDecimal.init<A>(exactly:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      uint64_t v1 = 1;
      if (__ROR8__(0x3333333333333333 * result, 1) <= 0x1999999999999999uLL)
      {
        uint64_t result = -(uint64_t)result;
        goto LABEL_9;
      }
      uint64_t v2 = 0;
      uint64_t result = -(uint64_t)result;
    }
    else
    {
      uint64_t v1 = 0;
      uint64_t v2 = 0;
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) < 0x199999999999999AuLL)
      {
LABEL_9:
        unsigned int v3 = 0;
        do
        {
          uint64_t v2 = v3 + 1;
          result /= 0xAuLL;
          if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) > 0x1999999999999999uLL) {
            break;
          }
        }
        while (v3++ < 0x7E);
      }
    }
    HIDWORD(v6) = result;
    unint64_t v5 = (79 - __clz(result)) >> 4;
    LOWORD(v7[0]) = WORD2(result);
    HIWORD(v7[0]) = HIWORD(result);
    *(void *)&v7[1] = 0;
    _So9NSDecimala__exponent_setter(v2, &v6);
    _So9NSDecimala__length_setter(v5, &v6);
    _So9NSDecimala__isNegative_setter(v1, &v6);
    _So9NSDecimala__isCompact_setter_0(1, &v6);
    _So9NSDecimala__reserved_setter(&v6);
    return v6;
  }
  return result;
}

{
  uint64_t v1;
  unsigned int v2;
  unint64_t v4;
  uint64_t v5;
  _DWORD v6[3];

  if (result)
  {
    if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) <= 0x1999999999999999uLL)
    {
      uint64_t v2 = 0;
      do
      {
        uint64_t v1 = v2 + 1;
        result /= 0xAuLL;
        if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) > 0x1999999999999999uLL) {
          break;
        }
      }
      while (v2++ < 0x7E);
    }
    else
    {
      uint64_t v1 = 0;
    }
    HIDWORD(v5) = result;
    int v4 = (79 - __clz(result)) >> 4;
    LOWORD(v6[0]) = WORD2(result);
    HIWORD(v6[0]) = HIWORD(result);
    *(void *)&v6[1] = 0;
    _So9NSDecimala__exponent_setter(v1, &v5);
    _So9NSDecimala__length_setter(v4, &v5);
    _So9NSDecimala__isNegative_setter(0, &v5);
    _So9NSDecimala__isCompact_setter_0(1, &v5);
    _So9NSDecimala__reserved_setter(&v5);
    return v5;
  }
  return result;
}

uint64_t JSONDecoder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  JSONDecoder.init()();
  return v0;
}

uint64_t key path setter for JSONDecoder.dateDecodingStrategy : JSONDecoder(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *a2;
  char v4 = *(unsigned char *)(a1 + 16);
  v7[0] = *(id *)a1;
  v7[1] = v2;
  char v8 = v4;
  unint64_t v5 = *(uint64_t (**)(id *))(*(void *)v3 + 112);
  outlined copy of JSONEncoder.DateEncodingStrategy(v7[0], (uint64_t)v2, v4);
  return v5(v7);
}

uint64_t JSONDecoder.dateDecodingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  unint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  uint64_t v6 = *(void *)(v4 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  char v7 = *(unsigned char *)(v4 + 16);
  *(unsigned char *)(a1 + 16) = v7;
  swift_retain();
  outlined copy of JSONEncoder.DateEncodingStrategy(v5, v6, v7);
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

void (*JSONDecoder.dateDecodingStrategy.modify(void *a1))(void ***a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[3] = v1;
  v3[4] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[5] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  uint64_t v6 = v1 + v5;
  char v7 = *(void **)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  *uint64_t v3 = *(void *)v6;
  v3[1] = v8;
  char v9 = *(unsigned char *)(v6 + 16);
  *((unsigned char *)v3 + 16) = v9;
  outlined copy of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  return JSONDecoder.dateDecodingStrategy.modify;
}

void JSONDecoder.dateDecodingStrategy.modify(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (os_unfair_lock_s *)(*a1)[4];
  uint64_t v3 = (char *)(*a1)[5] + (void)(*a1)[3];
  uint64_t v4 = **a1;
  uint64_t v5 = (uint64_t)v1[1];
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *((void *)v3 + 1);
  char v8 = *((unsigned char *)v1 + 16);
  *(void *)uint64_t v3 = v4;
  *((void *)v3 + 1) = v5;
  char v9 = v3[16];
  v3[16] = v8;
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v8);
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v9);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.DateEncodingStrategy(*v1, (uint64_t)v1[1], *((unsigned char *)v1 + 16));

  free(v1);
}

uint64_t JSONDecoder.dataDecodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  unint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  unint64_t v6 = *(void *)(v4 + 32);
  *a1 = v5;
  a1[1] = v6;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

void (*JSONDecoder.dataDecodingStrategy.modify(void *a1))(unint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[2] = v1;
  v3[3] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[4] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  uint64_t v6 = v1 + v5;
  unint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v6 + 32);
  *uint64_t v3 = v7;
  v3[1] = v8;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v7);
  return JSONDecoder.dataDecodingStrategy.modify;
}

void JSONDecoder.dataDecodingStrategy.modify(unint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (os_unfair_lock_s *)(*a1)[3];
  unint64_t v3 = (*a1)[1];
  unint64_t v4 = (*a1)[2] + (*a1)[4];
  unint64_t v5 = **a1;
  unint64_t v6 = *(void *)(v4 + 24);
  *(void *)(v4 + 24) = v5;
  *(void *)(v4 + 32) = v3;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.KeyEncodingStrategy(*v1);

  free(v1);
}

uint64_t key path setter for JSONDecoder.nonConformingFloatDecodingStrategy : JSONDecoder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = *a2;
  v10[0] = *a1;
  v10[1] = v2;
  id v10[2] = v3;
  uint64_t v10[3] = v4;
  _OWORD v10[4] = v5;
  v10[5] = v6;
  uint64_t v8 = *(uint64_t (**)(uint64_t *))(*(void *)v7 + 160);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v10[0], v2);
  return v8(v10);
}

uint64_t JSONDecoder.nonConformingFloatDecodingStrategy.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  uint64_t v6 = v4[6];
  uint64_t v7 = v4[7];
  uint64_t v8 = v4[8];
  uint64_t v9 = v4[9];
  uint64_t v10 = v4[10];
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  swift_retain();
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

void (*JSONDecoder.nonConformingFloatDecodingStrategy.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[6] = v1;
  v3[7] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[8] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  uint64_t v6 = (void *)(v1 + v5);
  uint64_t v7 = v6[5];
  uint64_t v8 = v6[6];
  uint64_t v9 = v6[7];
  uint64_t v10 = v6[8];
  uint64_t v11 = v6[9];
  uint64_t v12 = v6[10];
  *uint64_t v3 = v7;
  v3[1] = v8;
  v3[2] = v9;
  v3[3] = v10;
  v3[4] = v11;
  v3[5] = v12;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v7, v8);
  return JSONDecoder.nonConformingFloatDecodingStrategy.modify;
}

void JSONDecoder.nonConformingFloatDecodingStrategy.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (os_unfair_lock_s *)(*a1)[7];
  uint64_t v3 = (*a1)[5];
  uint64_t v4 = (void *)((*a1)[6] + (*a1)[8]);
  uint64_t v5 = **a1;
  uint64_t v6 = v1[1];
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v4[5];
  uint64_t v11 = v4[6];
  v4[5] = v5;
  v4[6] = v6;
  v4[7] = v7;
  v4[8] = v8;
  v4[9] = v9;
  v4[10] = v3;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v10, v11);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(*v1, v1[1]);

  free(v1);
}

uint64_t JSONDecoder.keyDecodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  unint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  unint64_t v6 = *(void *)(v4 + 96);
  *a1 = v5;
  a1[1] = v6;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

void (*JSONDecoder.keyDecodingStrategy.modify(void *a1))(unint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[2] = v1;
  v3[3] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[4] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  uint64_t v6 = v1 + v5;
  unint64_t v7 = *(void *)(v6 + 88);
  uint64_t v8 = *(void *)(v6 + 96);
  *uint64_t v3 = v7;
  v3[1] = v8;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v7);
  return JSONDecoder.keyDecodingStrategy.modify;
}

void JSONDecoder.keyDecodingStrategy.modify(unint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (os_unfair_lock_s *)(*a1)[3];
  unint64_t v3 = (*a1)[1];
  unint64_t v4 = (*a1)[2] + (*a1)[4];
  unint64_t v5 = **a1;
  unint64_t v6 = *(void *)(v4 + 88);
  *(void *)(v4 + 88) = v5;
  *(void *)(v4 + 96) = v3;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.KeyEncodingStrategy(*v1);

  free(v1);
}

uint64_t JSONDecoder.keyDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  unint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  *(void *)(v5 + 88) = v2;
  *(void *)(v5 + 96) = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);

  return swift_release();
}

uint64_t JSONDecoder.allowsJSON5.setter(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 112) = result;
  return result;
}

uint64_t (*JSONDecoder.allowsJSON5.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(v1 + v2 + 112);
  return JSONDecoder.allowsJSON5.modify;
}

uint64_t JSONDecoder.allowsJSON5.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result + *(void *)(result + 8) + 112) = *(unsigned char *)(result + 16);
  return result;
}

uint64_t JSONDecoder.assumesTopLevelDictionary.setter(char a1)
{
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  double v4 = MEMORY[0x1F4188790](v3);
  unint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, double))(v7 + 16))(v6, v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey, v4);
  uint64_t v12 = MEMORY[0x1E4FBB390];
  v11[0] = a1;
  uint64_t v8 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 216))(v10);
  specialized Dictionary.subscript.setter((uint64_t)v11, (uint64_t)v6);
  return v8(v10, 0);
}

void (*JSONDecoder.assumesTopLevelDictionary.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = malloc(*(void *)(v5 + 64));
  *((unsigned char *)v3 + 96) = JSONDecoder.assumesTopLevelDictionary.getter() & 1;
  return JSONDecoder.assumesTopLevelDictionary.modify;
}

void JSONDecoder.assumesTopLevelDictionary.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  char v4 = *(unsigned char *)(*(void *)a1 + 96);
  (*(void (**)(void, uint64_t, void))(*(void *)(*(void *)a1 + 80) + 16))(*(void *)(*(void *)a1 + 88), v3[8] + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey, v3[9]);
  uint64_t v5 = (void *)v3[11];
  if (a2)
  {
    uint64_t v6 = v3[8];
    uint64_t v11 = MEMORY[0x1E4FBB390];
    v10[0] = v4;
    uint64_t v7 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v6 + 216))(v3);
    specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)v5);
    v7(v3, 0);
  }
  else
  {
    uint64_t v8 = v3[8];
    uint64_t v11 = MEMORY[0x1E4FBB390];
    v10[0] = v4;
    uint64_t v9 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v8 + 216))(v3 + 4);
    specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)v5);
    v9(v3 + 4, 0);
  }
  free(v5);

  free(v3);
}

void JSONDecoder.decode<A>(_:from:configuration:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a1;
  uint64_t v35 = a4;
  v30[2] = a5;
  v30[4] = partial apply for closure #1 in JSONDecoder.decode<A>(_:from:configuration:);
  v30[5] = &v31;
  static JSONDecoder.withUTF8Representation<A>(of:_:)(a2, a3, (uint64_t (*)(unsigned __int8 *, uint64_t))closure #1 in JSONDecoder._decode<A>(_:from:)partial apply, (uint64_t)v30, a5);
  if (!v6) {
    return;
  }
  id v41 = v6;
  id v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {

    swift_willThrow();
    return;
  }

  outlined init with take of JSONError((uint64_t)v39, (uint64_t)v40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 40) = v9;
  unint64_t v10 = JSONError.debugDescription.getter();
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v12 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v36, &demangling cache variable for type metadata for (String, Any));
  uint64_t v13 = v36[0];
  uint64_t v14 = v36[1];
  swift_retain();
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
  if (v16)
  {
    __break(1u);
    goto LABEL_11;
  }
  v12[(v15 >> 6) + 8] |= 1 << v15;
  uint64_t v17 = (uint64_t *)(v12[6] + 16 * v15);
  *uint64_t v17 = v13;
  v17[1] = v14;
  outlined init with take of Any(&v37, (_OWORD *)(v12[7] + 32 * v15));
  uint64_t v18 = v12[2];
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
LABEL_11:
    __break(1u);
    return;
  }
  void v12[2] = v20;
  swift_release();
  swift_bridgeObjectRelease();
  long long v38 = v12;
  JSONError.sourceLocation.getter();
  if ((v22 & 1) == 0)
  {
    *((void *)&v37 + 1) = MEMORY[0x1E4FBB550];
    v36[0] = v21;
    specialized Dictionary.subscript.setter((uint64_t)v36, 0xD00000000000001DLL, 0x80000001823AB610);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v23 = objc_allocWithZone((Class)NSError);
  uint64_t v24 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(v23, sel_initWithDomain_code_userInfo_, v24, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined release of JSONError((uint64_t)v40);
  uint64_t v26 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v28 = v27;
  id v29 = v25;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA78], v26);
  swift_willThrow();
}

uint64_t specialized JSONDecoderImpl.unwrap<A, B>(_:as:configuration:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v43 = a5;
  uint64_t v44 = a9;
  uint64_t v47 = a4;
  int v41 = a3;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v45 = a12;
  uint64_t v46 = a13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  BOOL v19 = (char *)&v37 - v18;
  uint64_t v42 = v20;
  if (a11 == 255)
  {
    swift_retain();
    goto LABEL_9;
  }
  uint64_t v21 = (void *)swift_allocObject();
  v21[5] = &type metadata for _CodingKey;
  v21[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v22 = swift_allocObject();
  v21[2] = v22;
  *(void *)(v22 + 16) = a7;
  *(void *)(v22 + 24) = a8;
  *(void *)(v22 + 32) = a10;
  *(unsigned char *)(v22 + 40) = a11;
  v21[7] = a6;
  if (a6 >> 62)
  {
    if (a6 >> 62 != 1)
    {
      uint64_t v25 = 1;
      goto LABEL_8;
    }
    id v23 = (uint64_t *)((a6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    id v23 = (uint64_t *)(a6 + 64);
  }
  uint64_t v24 = *v23;
  swift_retain();
  uint64_t v25 = v24 + 1;
  if (!__OFADD__(v24, 1))
  {
LABEL_8:
    v21[8] = v25;
    a6 = (unint64_t)v21;
LABEL_9:
    uint64_t v21 = *(void **)(v13 + 160);
    *(void *)(v13 + 160) = a6;
    a6 = *(void *)(v13 + 16);
    outlined copy of _CodingKey?(a7, a8, a10, a11);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v13 + 16) = a6;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
  __break(1u);
LABEL_23:
  a6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a6 + 16) + 1, 1, (void *)a6);
  *(void *)(v13 + 16) = a6;
LABEL_10:
  unint64_t v28 = *(void *)(a6 + 16);
  unint64_t v27 = *(void *)(a6 + 24);
  if (v28 >= v27 >> 1) {
    a6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, (void *)a6);
  }
  *(void *)(a6 + 16) = v28 + 1;
  id v29 = (void *)(a6 + 24 * v28);
  uint64_t v30 = v40;
  v29[4] = v39;
  v29[5] = v30;
  *((unsigned char *)v29 + 48) = v41;
  *(void *)(v13 + 16) = a6;
  v48[3] = type metadata accessor for JSONDecoderImpl();
  v48[4] = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
  v48[0] = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v19, v43, v42);
  uint64_t v31 = v46;
  uint64_t v32 = *(void (**)(void *, char *, uint64_t, uint64_t))(v46 + 16);
  swift_retain();
  uint64_t v33 = v48[6];
  v32(v48, v19, v45, v31);
  if (v33)
  {
    *(void *)(v13 + 160) = v21;
    swift_retain();
    swift_release();
    uint64_t v34 = *(void **)(v13 + 16);
    if (v34[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v35 = v34[2];
        if (v35)
        {
LABEL_20:
          v34[2] = v35 - 1;
          *(void *)(v13 + 16) = v34;
          swift_release();
          return swift_release();
        }
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
    uint64_t v35 = v34[2];
    if (v35) {
      goto LABEL_20;
    }
LABEL_16:
    __break(1u);
  }
  *(void *)(v13 + 160) = v21;
  swift_retain();
  swift_release();
  uint64_t v34 = *(void **)(v13 + 16);
  if (!v34[2])
  {
    __break(1u);
LABEL_28:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
    uint64_t v34 = (void *)result;
    uint64_t v35 = *(void *)(result + 16);
    if (v35) {
      goto LABEL_20;
    }
    goto LABEL_29;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v35 = v34[2];
  if (v35) {
    goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t JSONDecoder.decode<A, B>(_:from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v21 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  double v16 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, double))(a8 + 16))(a6, a8, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)v9 + 328))(v21, v22, v23, v18, a5, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

uint64_t JSONDecoder.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  unint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
  unint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options), *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 16));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t specialized JSONDecoderImpl.unwrapURL<A>(from:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  BOOL v16 = (a3 & 0xE0) == 0xA0 && (a2 | a1) == 0;
  if (v16 && a3 == 160)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v21;
    *uint64_t v21 = &type metadata for URL;
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      outlined copy of _CodingKey(a5, a6, a7, a8);
      uint64_t v23 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v25 = swift_allocObject();
      *(void *)(inited + 32) = v25;
      *(void *)(v25 + 16) = a5;
      *(void *)(v25 + 24) = a6;
      *(void *)(v25 + 32) = a7;
      *(unsigned char *)(v25 + 40) = a8;
      uint64_t v34 = v23;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v34 = 0;
    *(void *)&long long v35 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v30._uint64_t countAndFlagsBits = 0xD000000000000019;
    v30._object = (void *)0x80000001823B3360;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 5001813;
    v31._object = (void *)0xE300000000000000;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v32._object = (void *)0x80000001823B3380;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v33 = (unsigned int *)MEMORY[0x1E4FBBA80];
  }
  else
  {
    uint64_t result = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v9) {
      return result;
    }
    URL.init(string:)(result, v18, &v34);
    uint64_t result = swift_bridgeObjectRelease();
    if (v34)
    {
      long long v19 = v35;
      *(void *)a9 = v34;
      *(_OWORD *)(a9 + 8) = v19;
      return result;
    }
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v26;
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      outlined copy of _CodingKey(a5, a6, a7, a8);
      uint64_t v27 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v28 = swift_initStackObject();
      *(_OWORD *)(v28 + 16) = xmmword_1821037E0;
      *(void *)(v28 + 56) = &type metadata for _CodingKey;
      *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v29 = swift_allocObject();
      *(void *)(v28 + 32) = v29;
      *(void *)(v29 + 16) = a5;
      *(void *)(v29 + 24) = a6;
      *(void *)(v29 + 32) = a7;
      *(unsigned char *)(v29 + 40) = a8;
      uint64_t v34 = v27;
      specialized Array.append<A>(contentsOf:)(v28);
    }
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v33 = (unsigned int *)MEMORY[0x1E4FBBA78];
  }
  (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *v33, v20);
  return swift_willThrow();
}

uint64_t specialized JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  type metadata accessor for NSDecimal(0);
  int v17 = a3 >> 5;
  if (v17 == 1)
  {
    MEMORY[0x1F4188790](v16);
    uint64_t v27 = *(void *)(*(void *)(v8 + 32) + 24);
    MEMORY[0x1F4188790](v28);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v27 + 40));
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v27 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    uint64_t v18 = v16;
    if (v17 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v21 = v20;
      *uint64_t v20 = v18;
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v23 = swift_allocObject();
        *(void *)(inited + 32) = v23;
        *(void *)(v23 + 16) = a5;
        *(void *)(v23 + 24) = a6;
        *(void *)(v23 + 32) = a7;
        *(unsigned char *)(v23 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(inited);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v31._object = (void *)0x80000001823B3360;
      v31._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v31);
      v32._uint64_t countAndFlagsBits = 0x616D69636544534ELL;
      v32._object = (void *)0xE90000000000006CLL;
      String.append(_:)(v32);
      v33._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v33._object = (void *)0x80000001823B3380;
      String.append(_:)(v33);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      Swift::String v30 = (unsigned int *)MEMORY[0x1E4FBBA80];
    }
    else
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v21 = v24;
      *uint64_t v24 = v18;
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v25 = swift_initStackObject();
        *(_OWORD *)(v25 + 16) = xmmword_1821037E0;
        *(void *)(v25 + 56) = &type metadata for _CodingKey;
        *(void *)(v25 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(v25 + 32) = v26;
        *(void *)(v26 + 16) = a5;
        *(void *)(v26 + 24) = a6;
        *(void *)(v26 + 32) = a7;
        *(unsigned char *)(v26 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v25);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      Swift::String v30 = (unsigned int *)MEMORY[0x1E4FBBA70];
    }
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *v30, v19);
    return swift_willThrow();
  }
  return result;
}

uint64_t JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v70 = a7;
  uint64_t v74 = a5;
  unint64_t v72 = a4;
  *((void *)&v73 + 1) = a2;
  *(void *)&long long v73 = a1;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v76 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v69 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v68 = (char *)&v67 - v12;
  uint64_t v75 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v67 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v67 - v20;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v67 - v23;
  type metadata accessor for NSDecimal(0);
  int v26 = a3 >> 5;
  if (v26 == 1)
  {
    MEMORY[0x1F4188790](v25);
    *((unsigned char *)&v67 - 16) = v42;
    *((unsigned char *)&v67 - 15) = v43;
    uint64_t v44 = *(void *)(*(void *)(v7 + 32) + 24);
    MEMORY[0x1F4188790](v45);
    *(&v67 - 4) = (uint64_t)closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)partial apply;
    *(&v67 - 3) = v46;
    uint64_t v47 = *((void *)&v73 + 1);
    *(&v67 - 2) = v73;
    *(&v67 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v71;
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v44 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v77;
    }
  }
  else
  {
    uint64_t v27 = v25;
    if (v26 == 5 && v73 == 0 && a3 == 160)
    {
      *((void *)&v73 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      *(void *)&long long v73 = v28;
      *uint64_t v28 = v27;
      uint64_t v29 = v13;
      Swift::String v30 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      uint64_t v31 = v75;
      v30(v24, v74, v75);
      v30(v21, (uint64_t)v24, v31);
      uint64_t v32 = v76;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v21, 1, a6) == 1)
      {
        Swift::String v33 = *(void (**)(char *, uint64_t))(v29 + 8);
        v33(v21, v31);
        _CodingPathNode.path.getter(v72);
        v33(v24, v31);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v68, v21, a6);
        uint64_t v58 = _CodingPathNode.path.getter(v72);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v60 = v70;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v60;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        unint64_t v62 = v68;
        (*(void (**)(uint64_t *, char *, uint64_t))(v32 + 16))(boxed_opaque_existential_1, v68, a6);
        uint64_t v77 = v58;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v31);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v62, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v63 = v73;
      uint64_t v77 = 0;
      unint64_t v78 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v64._object = (void *)0x80000001823B3360;
      v64._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v64);
      v65._uint64_t countAndFlagsBits = 0x616D69636544534ELL;
      v65._object = (void *)0xE90000000000006CLL;
      String.append(_:)(v65);
      v66._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v66._object = (void *)0x80000001823B3380;
      String.append(_:)(v66);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void))(*(void *)(*((void *)&v73 + 1) - 8) + 104))(v63, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      uint64_t v34 = type metadata accessor for DecodingError();
      *((void *)&v73 + 1) = swift_allocError();
      uint64_t v36 = v35;
      *long long v35 = v27;
      uint64_t v37 = v13;
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      uint64_t v39 = v75;
      v38(v18, v74, v75);
      v38(v15, (uint64_t)v18, v39);
      uint64_t v40 = v76;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v15, 1, a6) == 1)
      {
        int v41 = *(void (**)(char *, uint64_t))(v37 + 8);
        v41(v15, v39);
        _CodingPathNode.path.getter(v72);
        v41(v18, v39);
      }
      else
      {
        uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
        uint64_t v74 = v34;
        int v51 = v69;
        v50(v69, v15, a6);
        uint64_t v52 = v40;
        uint64_t v53 = _CodingPathNode.path.getter(v72);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v54 = swift_initStackObject();
        *(_OWORD *)(v54 + 16) = xmmword_1821037E0;
        uint64_t v55 = v70;
        *(void *)(v54 + 56) = a6;
        *(void *)(v54 + 64) = v55;
        unint64_t v56 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v54 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v52 + 16))(v56, v51, a6);
        uint64_t v77 = v53;
        specialized Array.append<A>(contentsOf:)(v54);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v39);
        uint64_t v57 = v51;
        uint64_t v34 = v74;
        (*(void (**)(char *, uint64_t))(v52 + 8))(v57, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, *MEMORY[0x1E4FBBA70], v34);
    }
    return swift_willThrow();
  }
  return result;
}

unint64_t closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)@<X0>(char *__s1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if ((a5 & 1) == 0)
  {
    unint64_t result = (unint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (v7) {
      return result;
    }
    uint64_t v19 = (unsigned char *)result;
    specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)__s1, a2, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v42);
    outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v42, (uint64_t)&v49);
    unint64_t result = v49;
    if (v53 != 1)
    {
      unint64_t v26 = HIWORD(v49);
      unint64_t v25 = HIDWORD(v49);
      LOWORD(v23) = v50;
      LOWORD(v27) = WORD1(v50);
      LOWORD(v28) = WORD2(v50);
      LOWORD(v29) = HIWORD(v50);
      LOWORD(v24) = v51;
      LOWORD(v30) = WORD1(v51);
      goto LABEL_26;
    }
    if (v51 | v52 | v49 | v50) {
      goto LABEL_24;
    }
    uint64_t v20 = &__s1[a2] - v19;
    if ((((v19 - __s1) | v20) & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(v19, v20, a3, a4, (uint64_t)v43);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v18 = v43;
      goto LABEL_14;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  unint64_t result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
  if (v7) {
    return result;
  }
  if ((v14 & 1) == 0)
  {
    if ((v14 & 0x100) != 0)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      _So9NSDecimala__exponent_setter(0, &v37);
      _So9NSDecimala__length_setter(0, &v37);
      _So9NSDecimala__isNegative_setter(1, &v37);
      _So9NSDecimala__isCompact_setter_0(0, &v37);
      _So9NSDecimala__reserved_setter(&v37);
      unint64_t result = v37;
      LOWORD(v25) = v38;
      LOWORD(v26) = WORD1(v38);
      LOWORD(v23) = WORD2(v38);
      LOWORD(v27) = HIWORD(v38);
      LOWORD(v28) = v39;
      LOWORD(v29) = WORD1(v39);
      LOWORD(v24) = WORD2(v39);
      LOWORD(v30) = HIWORD(v39);
    }
    else
    {
      uint64_t v15 = (char *)result;
      specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)__s1, a2, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v40);
      outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v40, (uint64_t)&v44);
      unint64_t result = v44;
      if (v48 == 1)
      {
        if (!(v46 | v47 | v44 | v45))
        {
          uint64_t v16 = &__s1[a2] - v15;
          if ((((v15 - __s1) | v16) & 0x8000000000000000) == 0)
          {
            specialized static JSON5Scanner.validateNumber(from:fullSource:)(v15, v16, a3, a4, (uint64_t)v41);
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            uint64_t v18 = v41;
LABEL_14:
            outlined init with take of JSONError((uint64_t)v18, v17);
            return swift_willThrow();
          }
LABEL_30:
          __break(1u);
          JUMPOUT(0x181EB5F50);
        }
        goto LABEL_24;
      }
      unint64_t v26 = HIWORD(v44);
      unint64_t v25 = HIDWORD(v44);
      LOWORD(v23) = v45;
      LOWORD(v27) = WORD1(v45);
      LOWORD(v28) = WORD2(v45);
      LOWORD(v29) = HIWORD(v45);
      LOWORD(v24) = v46;
      LOWORD(v30) = WORD1(v46);
    }
    goto LABEL_26;
  }
  if (!a2)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (*__s1 != 45)
  {
    unint64_t v31 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
    if ((v32 & 1) == 0)
    {
      unint64_t result = specialized NSDecimal.init<A>(exactly:)(v31);
      if ((v24 & 0x100000000) == 0) {
        goto LABEL_19;
      }
    }
LABEL_24:
    uint64_t v33 = static String._fromUTF8Repairing(_:)();
    uint64_t v35 = v34;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v36 = v33;
    *(void *)(v36 + 8) = v35;
    *(_OWORD *)(v36 + 16) = 0u;
    *(_OWORD *)(v36 + 32) = 0u;
    *(unsigned char *)(v36 + 48) = 11;
    return swift_willThrow();
  }
  unint64_t v21 = specialized _parseJSON5Integer<A>(_:isHex:)(__s1, a2, 1, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
  if (v22) {
    goto LABEL_24;
  }
  unint64_t result = specialized NSDecimal.init<A>(exactly:)(v21);
  if ((v24 & 0x100000000) != 0) {
    goto LABEL_24;
  }
LABEL_19:
  unint64_t v25 = HIDWORD(result);
  unint64_t v26 = HIWORD(result);
  unint64_t v27 = v23 >> 16;
  unint64_t v28 = HIDWORD(v23);
  unint64_t v29 = HIWORD(v23);
  unint64_t v30 = v24 >> 16;
LABEL_26:
  *(_DWORD *)a7 = result;
  *(_WORD *)(a7 + 4) = v25;
  *(_WORD *)(a7 + 6) = v26;
  *(_WORD *)(a7 + 8) = v23;
  *(_WORD *)(a7 + 10) = v27;
  *(_WORD *)(a7 + 12) = v28;
  *(_WORD *)(a7 + 14) = v29;
  *(_WORD *)(a7 + 16) = v24;
  *(_WORD *)(a7 + 18) = v30;
  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v69 = a7;
  uint64_t v72 = a5;
  unint64_t v71 = a4;
  *((void *)&v73 + 1) = a2;
  *(void *)&long long v73 = a1;
  v76[20] = *MEMORY[0x1E4F143B8];
  uint64_t v67 = *v7;
  uint64_t v70 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  Swift::String v66 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  unint64_t v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    uint64_t v39 = v69;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v71;
    *(&v65 - 5) = MEMORY[0x1E4FBC3D0];
    *(&v65 - 4) = v42;
    uint64_t v43 = v67;
    *(&v65 - 3) = v72;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (uint64_t)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    uint64_t v47 = *((void *)&v73 + 1);
    *(&v65 - 2) = v73;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v68;
    closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)specialized partial apply((void *)(v44 + 16), v76);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v76[0];
    }
  }
  else
  {
    if (v30 == 5 && v73 == 0 && v26 == 160)
    {
      *((void *)&v73 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      char v32 = v31;
      *unint64_t v31 = MEMORY[0x1E4FBC3D0];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v72, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v70;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v71);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
        *(void *)&long long v73 = v32;
        unint64_t v56 = v66;
        v55(v66, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v71);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v69;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v74 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        char v32 = (void *)v73;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v74 = 0;
      unint64_t v75 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0x383231746E49;
      v63._object = (void *)0xE600000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v73 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v68) = v26;
      uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v36(v20, v72, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v70;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v17, 1, a6) == 1)
      {
        uint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v71);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v71);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        uint64_t v52 = v69;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 16))(v53, v11, a6);
        uint64_t v74 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC3D0], v68, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, uint64_t, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  void *v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t inited;
  uint64_t v59;
  uint64_t *boxed_opaque_existential_1;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  long long v73;
  uint64_t v74;
  unint64_t v75;
  void v76[21];

  uint64_t v8 = v7;
  uint64_t v69 = a7;
  uint64_t v72 = a5;
  unint64_t v71 = a4;
  *((void *)&v73 + 1) = a2;
  *(void *)&long long v73 = a1;
  v76[20] = *MEMORY[0x1E4F143B8];
  uint64_t v67 = *v7;
  uint64_t v70 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  Swift::String v66 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  unint64_t v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    uint64_t v39 = v69;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v71;
    *(&v65 - 5) = MEMORY[0x1E4FBC5F8];
    *(&v65 - 4) = v42;
    uint64_t v43 = v67;
    *(&v65 - 3) = v72;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (uint64_t)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    uint64_t v47 = *((void *)&v73 + 1);
    *(&v65 - 2) = v73;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v68;
    closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)specialized partial apply((void *)(v44 + 16), v76);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v76[0];
    }
  }
  else
  {
    if (v30 == 5 && v73 == 0 && v26 == 160)
    {
      *((void *)&v73 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      char v32 = v31;
      *unint64_t v31 = MEMORY[0x1E4FBC5F8];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v72, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v70;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v71);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
        *(void *)&long long v73 = v32;
        unint64_t v56 = v66;
        v55(v66, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v71);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v69;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v74 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        char v32 = (void *)v73;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v74 = 0;
      unint64_t v75 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0x383231746E4955;
      v63._object = (void *)0xE700000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v73 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v68) = v26;
      uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v36(v20, v72, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v70;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v17, 1, a6) == 1)
      {
        uint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v71);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v71);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        uint64_t v52 = v69;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 16))(v53, v11, a6);
        uint64_t v74 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC5F8], v68, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized FixedWidthInteger.init(_:)(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned __int16 v3 = a3;
  int v5 = a1;
  v37[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v37[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIWORD(a3);
  unsigned int v38 = a3;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(v37);
  LODWORD(v37[0]) = v5;
  WORD2(v37[0]) = v6;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = a2;
  WORD1(v37[1]) = v8;
  WORD2(v37[1]) = v9;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  if (!_So9NSDecimala__length_getter(v37) && isNegative_getter) {
    goto LABEL_21;
  }
  int v36 = isNegative_getter;
  unint64_t v13 = (unsigned __int16)a2;
  LODWORD(v37[0]) = v5;
  unint64_t v14 = WORD1(a2);
  WORD2(v37[0]) = v6;
  unint64_t v15 = WORD2(a2);
  unint64_t v16 = v3;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = v13;
  WORD1(v37[1]) = v14;
  WORD2(v37[1]) = v15;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  int v17 = _So9NSDecimala__length_getter(v37);
  if (!v17) {
    goto LABEL_50;
  }
  unint64_t v18 = 0;
  int v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      unint64_t v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          unint64_t v20 = v13;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 3:
          unint64_t v20 = v14;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 4:
          unint64_t v20 = v15;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 5:
          unint64_t v20 = v10;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 6:
          unint64_t v20 = v16;
LABEL_15:
          if (!HIWORD(v18)) {
            goto LABEL_16;
          }
          goto LABEL_21;
        case 7:
          unint64_t v20 = v11;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
LABEL_16:
          unint64_t v18 = v20 | (v18 << 16);
          if (!--v19) {
            break;
          }
          continue;
        default:
          goto LABEL_53;
      }
      break;
    }
  }
  if (HIWORD(v18))
  {
LABEL_21:
    unsigned __int8 v21 = 0;
    int v22 = 1;
  }
  else
  {
    for (unint64_t i = (unsigned __int16)v6 | (v18 << 16); ; unint64_t i = 0)
    {
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      if ((_So9NSDecimala__exponent_getter((char *)v37) & 0x80000000) == 0) {
        break;
      }
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      int v29 = _So9NSDecimala__exponent_getter((char *)v37);
      if (v29 > 0) {
        goto LABEL_52;
      }
      int v26 = v36;
      if (!v29) {
        goto LABEL_40;
      }
      unsigned int v30 = -v29 & ~(-v29 >> 31);
      unsigned int v31 = ~v29;
      while (v30 > v31)
      {
        i /= 0xAuLL;
        if (__CFADD__(v29++, 1)) {
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_50:
      ;
    }
    LODWORD(v37[0]) = v5;
    WORD2(v37[0]) = v6;
    HIWORD(v37[0]) = v7;
    LOWORD(v37[1]) = v13;
    WORD1(v37[1]) = v14;
    WORD2(v37[1]) = v15;
    HIWORD(v37[1]) = v10;
    LOWORD(v38) = v16;
    HIWORD(v38) = v11;
    int v25 = _So9NSDecimala__exponent_getter((char *)v37);
    if (v25 < 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      v37[0] = 0;
      v37[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v37, "Invalid index ");
      HIBYTE(v37[1]) = -18;
      v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
      v35._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v35);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181EBBF54);
    }
    int v26 = v36;
    if (v25)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_21;
      }
      i *= 10;
      int v27 = v25 - 1;
      if (v25 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_21;
        }
        i *= 10;
        while (--v27)
        {
          unsigned __int8 v21 = 0;
          uint64_t v28 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          int v22 = 1;
          if (v28) {
            return v21 | (v22 << 8);
          }
        }
      }
    }
LABEL_40:
    int v22 = i > 0x7F;
    if (i < 0x80) {
      int v33 = -(int)i;
    }
    else {
      LOBYTE(v33) = 0;
    }
    if (i <= 0x7F) {
      unsigned __int8 v21 = i;
    }
    else {
      unsigned __int8 v21 = 0;
    }
    if (v26)
    {
      unsigned __int8 v21 = v33;
      int v22 = i >= 0x80;
    }
  }
  return v21 | (v22 << 8);
}

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int isNegative_getter;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned __int16 v21;
  int v22;
  unint64_t i;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v33;
  Swift::String v34;
  Swift::String v35;
  int v36;
  void v37[2];
  unsigned int v38;

  unsigned __int16 v3 = a3;
  int v5 = a1;
  v37[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v37[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIWORD(a3);
  unsigned int v38 = a3;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(v37);
  LODWORD(v37[0]) = v5;
  WORD2(v37[0]) = v6;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = a2;
  WORD1(v37[1]) = v8;
  WORD2(v37[1]) = v9;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  if (!_So9NSDecimala__length_getter(v37) && isNegative_getter) {
    goto LABEL_21;
  }
  int v36 = isNegative_getter;
  unint64_t v13 = (unsigned __int16)a2;
  LODWORD(v37[0]) = v5;
  unint64_t v14 = WORD1(a2);
  WORD2(v37[0]) = v6;
  unint64_t v15 = WORD2(a2);
  unint64_t v16 = v3;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = v13;
  WORD1(v37[1]) = v14;
  WORD2(v37[1]) = v15;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  int v17 = _So9NSDecimala__length_getter(v37);
  if (!v17) {
    goto LABEL_50;
  }
  unint64_t v18 = 0;
  int v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      unint64_t v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          unint64_t v20 = v13;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 3:
          unint64_t v20 = v14;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 4:
          unint64_t v20 = v15;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 5:
          unint64_t v20 = v10;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 6:
          unint64_t v20 = v16;
LABEL_15:
          if (!HIWORD(v18)) {
            goto LABEL_16;
          }
          goto LABEL_21;
        case 7:
          unint64_t v20 = v11;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
LABEL_16:
          unint64_t v18 = v20 | (v18 << 16);
          if (!--v19) {
            break;
          }
          continue;
        default:
          goto LABEL_53;
      }
      break;
    }
  }
  if (HIWORD(v18))
  {
LABEL_21:
    unsigned __int8 v21 = 0;
    int v22 = 1;
  }
  else
  {
    for (unint64_t i = (unsigned __int16)v6 | (v18 << 16); ; unint64_t i = 0)
    {
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      if ((_So9NSDecimala__exponent_getter((char *)v37) & 0x80000000) == 0) {
        break;
      }
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      int v29 = _So9NSDecimala__exponent_getter((char *)v37);
      if (v29 > 0) {
        goto LABEL_52;
      }
      int v26 = v36;
      if (!v29) {
        goto LABEL_40;
      }
      unsigned int v30 = -v29 & ~(-v29 >> 31);
      unsigned int v31 = ~v29;
      while (v30 > v31)
      {
        i /= 0xAuLL;
        if (__CFADD__(v29++, 1)) {
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_50:
      ;
    }
    LODWORD(v37[0]) = v5;
    WORD2(v37[0]) = v6;
    HIWORD(v37[0]) = v7;
    LOWORD(v37[1]) = v13;
    WORD1(v37[1]) = v14;
    WORD2(v37[1]) = v15;
    HIWORD(v37[1]) = v10;
    LOWORD(v38) = v16;
    HIWORD(v38) = v11;
    int v25 = _So9NSDecimala__exponent_getter((char *)v37);
    if (v25 < 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      v37[0] = 0;
      v37[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v37, "Invalid index ");
      HIBYTE(v37[1]) = -18;
      v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
      v35._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v35);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181EBC394);
    }
    int v26 = v36;
    if (v25)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_21;
      }
      i *= 10;
      int v27 = v25 - 1;
      if (v25 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_21;
        }
        i *= 10;
        while (--v27)
        {
          unsigned __int8 v21 = 0;
          uint64_t v28 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          int v22 = 1;
          if (v28) {
            return v21 | (v22 << 16);
          }
        }
      }
    }
LABEL_40:
    int v22 = (i & 0xFFFFFFFFFFFF8000) != 0;
    if (i < 0x8000) {
      int v33 = -(int)i;
    }
    else {
      LOWORD(v33) = 0;
    }
    if (i >> 15) {
      unsigned __int8 v21 = 0;
    }
    else {
      unsigned __int8 v21 = i;
    }
    if (v26)
    {
      unsigned __int8 v21 = v33;
      int v22 = i >= 0x8000;
    }
  }
  return v21 | (v22 << 16);
}

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  int v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  void v28[2];
  unsigned int v29;

  LOWORD(i) = a3;
  uint64_t v4 = a2;
  int v5 = a1;
  v28[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  v28[1] = a2;
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = HIWORD(a3);
  int v29 = a3;
  if (_So9NSDecimala__isNegative_getter(v28)) {
    goto LABEL_2;
  }
  unint64_t v13 = (unsigned __int16)v4;
  LODWORD(v28[0]) = v5;
  unint64_t v14 = WORD1(v4);
  WORD2(v28[0]) = v6;
  HIWORD(v28[0]) = v7;
  LODWORD(v28[1]) = v4;
  WORD2(v28[1]) = WORD2(v4);
  HIWORD(v28[1]) = v8;
  LOWORD(v29) = i;
  HIWORD(v29) = v9;
  unint64_t v15 = _So9NSDecimala__length_getter(v28);
  if (!v15) {
    goto LABEL_37;
  }
  unint64_t v16 = 0;
  int v17 = v15 - 1;
  if (v15 != 1)
  {
    while (2)
    {
      unint64_t v18 = v7;
      switch(v17)
      {
        case 1:
          goto LABEL_13;
        case 2:
          unint64_t v18 = v13;
          goto LABEL_13;
        case 3:
          unint64_t v18 = v14;
          goto LABEL_13;
        case 4:
          unint64_t v18 = WORD2(v4);
          goto LABEL_13;
        case 5:
          unint64_t v18 = v8;
          goto LABEL_13;
        case 6:
          unint64_t v18 = (unsigned __int16)i;
          goto LABEL_13;
        case 7:
          unint64_t v18 = v9;
LABEL_13:
          if (HIWORD(v16)) {
            goto LABEL_2;
          }
          unint64_t v16 = v18 | (v16 << 16);
          if (!--v17) {
            break;
          }
          continue;
        default:
          goto LABEL_40;
      }
      break;
    }
  }
  if (HIWORD(v16))
  {
LABEL_2:
    unint64_t v10 = 0;
    unint64_t v11 = 1;
  }
  else
  {
    LOWORD(v4) = i;
    for (unint64_t i = (unsigned __int16)v6 | (v16 << 16); ; unint64_t i = 0)
    {
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      if ((_So9NSDecimala__exponent_getter((char *)v28) & 0x80000000) == 0) {
        break;
      }
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      int v22 = _So9NSDecimala__exponent_getter((char *)v28);
      if (v22 > 0) {
        goto LABEL_39;
      }
      if (!v22) {
        goto LABEL_33;
      }
      unint64_t v23 = -v22 & ~(-v22 >> 31);
      uint64_t v24 = ~v22;
      while (v23 > v24)
      {
        i /= 0xAuLL;
        if (__CFADD__(v22++, 1)) {
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_37:
      LOWORD(v4) = i;
    }
    LODWORD(v28[0]) = v5;
    WORD2(v28[0]) = v6;
    HIWORD(v28[0]) = v7;
    LOWORD(v28[1]) = v13;
    WORD1(v28[1]) = v14;
    WORD2(v28[1]) = WORD2(v4);
    HIWORD(v28[1]) = v8;
    LOWORD(v29) = v4;
    HIWORD(v29) = v9;
    int v19 = _So9NSDecimala__exponent_getter((char *)v28);
    if (v19 < 0)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      v28[0] = 0;
      v28[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v28, "Invalid index ");
      HIBYTE(v28[1]) = -18;
      v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
      v27._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v27);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181EBD3D0);
    }
    if (v19)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_2;
      }
      i *= 10;
      unint64_t v20 = v19 - 1;
      if (v19 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_2;
        }
        i *= 10;
        while (--v20)
        {
          unint64_t v10 = 0;
          unsigned __int8 v21 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          unint64_t v11 = 1;
          if (v21) {
            return v10 | (v11 << 8);
          }
        }
      }
    }
LABEL_33:
    unint64_t v11 = i > 0xFF;
    if (i <= 0xFF) {
      unint64_t v10 = i;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  return v10 | (v11 << 8);
}

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  void v28[2];
  unsigned int v29;

  LOWORD(i) = a3;
  uint64_t v4 = a2;
  int v5 = a1;
  v28[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  v28[1] = a2;
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = HIWORD(a3);
  int v29 = a3;
  if (_So9NSDecimala__isNegative_getter(v28)) {
    goto LABEL_2;
  }
  unint64_t v13 = (unsigned __int16)v4;
  LODWORD(v28[0]) = v5;
  unint64_t v14 = WORD1(v4);
  WORD2(v28[0]) = v6;
  HIWORD(v28[0]) = v7;
  LODWORD(v28[1]) = v4;
  WORD2(v28[1]) = WORD2(v4);
  HIWORD(v28[1]) = v8;
  LOWORD(v29) = i;
  HIWORD(v29) = v9;
  unint64_t v15 = _So9NSDecimala__length_getter(v28);
  if (!v15) {
    goto LABEL_37;
  }
  unint64_t v16 = 0;
  int v17 = v15 - 1;
  if (v15 != 1)
  {
    while (2)
    {
      unint64_t v18 = v7;
      switch(v17)
      {
        case 1:
          goto LABEL_13;
        case 2:
          unint64_t v18 = v13;
          goto LABEL_13;
        case 3:
          unint64_t v18 = v14;
          goto LABEL_13;
        case 4:
          unint64_t v18 = WORD2(v4);
          goto LABEL_13;
        case 5:
          unint64_t v18 = v8;
          goto LABEL_13;
        case 6:
          unint64_t v18 = (unsigned __int16)i;
          goto LABEL_13;
        case 7:
          unint64_t v18 = v9;
LABEL_13:
          if (HIWORD(v16)) {
            goto LABEL_2;
          }
          unint64_t v16 = v18 | (v16 << 16);
          if (!--v17) {
            break;
          }
          continue;
        default:
          goto LABEL_40;
      }
      break;
    }
  }
  if (HIWORD(v16))
  {
LABEL_2:
    unint64_t v10 = 0;
    unint64_t v11 = 1;
  }
  else
  {
    LOWORD(v4) = i;
    for (unint64_t i = (unsigned __int16)v6 | (v16 << 16); ; unint64_t i = 0)
    {
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      if ((_So9NSDecimala__exponent_getter((char *)v28) & 0x80000000) == 0) {
        break;
      }
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      int v22 = _So9NSDecimala__exponent_getter((char *)v28);
      if (v22 > 0) {
        goto LABEL_39;
      }
      if (!v22) {
        goto LABEL_33;
      }
      unint64_t v23 = -v22 & ~(-v22 >> 31);
      uint64_t v24 = ~v22;
      while (v23 > v24)
      {
        i /= 0xAuLL;
        if (__CFADD__(v22++, 1)) {
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_37:
      LOWORD(v4) = i;
    }
    LODWORD(v28[0]) = v5;
    WORD2(v28[0]) = v6;
    HIWORD(v28[0]) = v7;
    LOWORD(v28[1]) = v13;
    WORD1(v28[1]) = v14;
    WORD2(v28[1]) = WORD2(v4);
    HIWORD(v28[1]) = v8;
    LOWORD(v29) = v4;
    HIWORD(v29) = v9;
    int v19 = _So9NSDecimala__exponent_getter((char *)v28);
    if (v19 < 0)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      v28[0] = 0;
      v28[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v28, "Invalid index ");
      HIBYTE(v28[1]) = -18;
      v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
      v27._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v27);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181EBD78CLL);
    }
    if (v19)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_2;
      }
      i *= 10;
      unint64_t v20 = v19 - 1;
      if (v19 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_2;
        }
        i *= 10;
        while (--v20)
        {
          unint64_t v10 = 0;
          unsigned __int8 v21 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          unint64_t v11 = 1;
          if (v21) {
            return v10 | (v11 << 16);
          }
        }
      }
    }
LABEL_33:
    unint64_t v11 = i >> 16 != 0;
    unint64_t v10 = (unsigned __int16)i;
    if (i >> 16) {
      unint64_t v10 = 0;
    }
  }
  return v10 | (v11 << 16);
}

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  Swift::String v28;
  Swift::String v29;
  void v30[2];
  unsigned int v31;

  unsigned __int16 v3 = a3;
  int v5 = a1;
  v30[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  v30[1] = a2;
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = HIWORD(a3);
  unsigned int v31 = a3;
  if (_So9NSDecimala__isNegative_getter(v30)) {
    return 0;
  }
  uint64_t v12 = (unsigned __int16)a2;
  LODWORD(v30[0]) = v5;
  unint64_t v13 = WORD1(a2);
  WORD2(v30[0]) = v6;
  unint64_t v14 = WORD2(a2);
  unint64_t v15 = v3;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v3;
  HIWORD(v31) = v9;
  unint64_t v16 = _So9NSDecimala__length_getter(v30);
  if (!v16) {
    goto LABEL_37;
  }
  int v17 = 0;
  unint64_t v18 = v16 - 1;
  if (v16 != 1)
  {
    while (2)
    {
      int v19 = v7;
      switch(v18)
      {
        case 1:
          goto LABEL_13;
        case 2:
          int v19 = v12;
          goto LABEL_13;
        case 3:
          int v19 = v13;
          goto LABEL_13;
        case 4:
          int v19 = v14;
          goto LABEL_13;
        case 5:
          int v19 = v8;
          goto LABEL_13;
        case 6:
          int v19 = v15;
          goto LABEL_13;
        case 7:
          int v19 = v9;
LABEL_13:
          if (HIWORD(v17)) {
            return 0;
          }
          int v17 = v19 | (v17 << 16);
          if (!--v18) {
            break;
          }
          continue;
        default:
          goto LABEL_40;
      }
      break;
    }
  }
  if (HIWORD(v17)) {
    return 0;
  }
  for (unint64_t i = (unsigned __int16)v6 | (v17 << 16); ; unint64_t i = 0)
  {
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    if ((_So9NSDecimala__exponent_getter((char *)v30) & 0x80000000) == 0) {
      break;
    }
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    uint64_t v24 = _So9NSDecimala__exponent_getter((char *)v30);
    if (v24 > 0) {
      goto LABEL_39;
    }
    if (!v24) {
      return i;
    }
    int v25 = -v24 & ~(-v24 >> 31);
    int v26 = ~v24;
    while (v25 > v26)
    {
      i /= 0xAuLL;
      if (__CFADD__(v24++, 1)) {
        return i;
      }
    }
    __break(1u);
LABEL_37:
    ;
  }
  LODWORD(v30[0]) = v5;
  WORD2(v30[0]) = v6;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v15;
  HIWORD(v31) = v9;
  unint64_t v20 = _So9NSDecimala__exponent_getter((char *)v30);
  if (v20 < 0)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    v30[0] = 0;
    v30[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    strcpy((char *)v30, "Invalid index ");
    HIBYTE(v30[1]) = -18;
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
    v29._object = (void *)0xEE0061737369746ELL;
    String.append(_:)(v29);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181EBDF04);
  }
  if (v20)
  {
    if (is_mul_ok(i, 0xAuLL))
    {
      i *= 10;
      unsigned __int8 v21 = v20 - 1;
      if (v20 == 1) {
        return i;
      }
      if (is_mul_ok(i, 0xAuLL))
      {
        int v22 = 10 * i;
        while (--v21)
        {
          unint64_t i = 0;
          unint64_t v23 = ((unint64_t)v22 * (unsigned __int128)0xAuLL) >> 64;
          v22 *= 10;
          if (v23) {
            return i;
          }
        }
        return v22;
      }
    }
    return 0;
  }
  return i;
}

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  Swift::String v28;
  Swift::String v29;
  void v30[2];
  unsigned int v31;

  unsigned __int16 v3 = a3;
  int v5 = a1;
  v30[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  v30[1] = a2;
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = HIWORD(a3);
  unsigned int v31 = a3;
  if (_So9NSDecimala__isNegative_getter(v30)) {
    return 0;
  }
  uint64_t v12 = (unsigned __int16)a2;
  LODWORD(v30[0]) = v5;
  unint64_t v13 = WORD1(a2);
  WORD2(v30[0]) = v6;
  unint64_t v14 = WORD2(a2);
  unint64_t v15 = v3;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v3;
  HIWORD(v31) = v9;
  unint64_t v16 = _So9NSDecimala__length_getter(v30);
  if (!v16) {
    goto LABEL_37;
  }
  int v17 = 0;
  unint64_t v18 = v16 - 1;
  if (v16 != 1)
  {
    while (2)
    {
      int v19 = v7;
      switch(v18)
      {
        case 1:
          goto LABEL_13;
        case 2:
          int v19 = v12;
          goto LABEL_13;
        case 3:
          int v19 = v13;
          goto LABEL_13;
        case 4:
          int v19 = v14;
          goto LABEL_13;
        case 5:
          int v19 = v8;
          goto LABEL_13;
        case 6:
          int v19 = v15;
          goto LABEL_13;
        case 7:
          int v19 = v9;
LABEL_13:
          if (HIWORD(v17)) {
            return 0;
          }
          int v17 = v19 | (v17 << 16);
          if (!--v18) {
            break;
          }
          continue;
        default:
          goto LABEL_40;
      }
      break;
    }
  }
  if (HIWORD(v17)) {
    return 0;
  }
  for (unint64_t i = (unsigned __int16)v6 | (v17 << 16); ; unint64_t i = 0)
  {
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    if ((_So9NSDecimala__exponent_getter((char *)v30) & 0x80000000) == 0) {
      break;
    }
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    uint64_t v24 = _So9NSDecimala__exponent_getter((char *)v30);
    if (v24 > 0) {
      goto LABEL_39;
    }
    if (!v24) {
      return i;
    }
    int v25 = -v24 & ~(-v24 >> 31);
    int v26 = ~v24;
    while (v25 > v26)
    {
      i /= 0xAuLL;
      if (__CFADD__(v24++, 1)) {
        return i;
      }
    }
    __break(1u);
LABEL_37:
    ;
  }
  LODWORD(v30[0]) = v5;
  WORD2(v30[0]) = v6;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v15;
  HIWORD(v31) = v9;
  unint64_t v20 = _So9NSDecimala__exponent_getter((char *)v30);
  if (v20 < 0)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    v30[0] = 0;
    v30[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    strcpy((char *)v30, "Invalid index ");
    HIBYTE(v30[1]) = -18;
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
    v29._object = (void *)0xEE0061737369746ELL;
    String.append(_:)(v29);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181EBE2BCLL);
  }
  if (v20)
  {
    if (is_mul_ok(i, 0xAuLL))
    {
      i *= 10;
      unsigned __int8 v21 = v20 - 1;
      if (v20 == 1) {
        return i;
      }
      if (is_mul_ok(i, 0xAuLL))
      {
        int v22 = 10 * i;
        while (--v21)
        {
          unint64_t i = 0;
          unint64_t v23 = ((unint64_t)v22 * (unsigned __int128)0xAuLL) >> 64;
          v22 *= 10;
          if (v23) {
            return i;
          }
        }
        return v22;
      }
    }
    return 0;
  }
  return i;
}

unint64_t specialized FixedWidthInteger.init(_:)(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned __int16 v3 = a3;
  int v5 = a1;
  v37[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v37[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIWORD(a3);
  unsigned int v38 = a3;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(v37);
  LODWORD(v37[0]) = v5;
  WORD2(v37[0]) = v6;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = a2;
  WORD1(v37[1]) = v8;
  WORD2(v37[1]) = v9;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  if (!_So9NSDecimala__length_getter(v37) && isNegative_getter) {
    goto LABEL_21;
  }
  int v36 = isNegative_getter;
  unint64_t v13 = (unsigned __int16)a2;
  LODWORD(v37[0]) = v5;
  unint64_t v14 = WORD1(a2);
  WORD2(v37[0]) = v6;
  unint64_t v15 = WORD2(a2);
  unint64_t v16 = v3;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = v13;
  WORD1(v37[1]) = v14;
  WORD2(v37[1]) = v15;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  int v17 = _So9NSDecimala__length_getter(v37);
  if (!v17) {
    goto LABEL_50;
  }
  unint64_t v18 = 0;
  int v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      unint64_t v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          unint64_t v20 = v13;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 3:
          unint64_t v20 = v14;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 4:
          unint64_t v20 = v15;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 5:
          unint64_t v20 = v10;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 6:
          unint64_t v20 = v16;
LABEL_15:
          if (!HIWORD(v18)) {
            goto LABEL_16;
          }
          goto LABEL_21;
        case 7:
          unint64_t v20 = v11;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
LABEL_16:
          unint64_t v18 = v20 | (v18 << 16);
          if (!--v19) {
            break;
          }
          continue;
        default:
          goto LABEL_53;
      }
      break;
    }
  }
  if (HIWORD(v18))
  {
LABEL_21:
    LODWORD(v21) = 0;
    BOOL v22 = 1;
  }
  else
  {
    for (unint64_t i = (unsigned __int16)v6 | (v18 << 16); ; unint64_t i = 0)
    {
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      if ((_So9NSDecimala__exponent_getter((char *)v37) & 0x80000000) == 0) {
        break;
      }
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      int v29 = _So9NSDecimala__exponent_getter((char *)v37);
      if (v29 > 0) {
        goto LABEL_52;
      }
      int v26 = v36;
      if (!v29) {
        goto LABEL_40;
      }
      unsigned int v30 = -v29 & ~(-v29 >> 31);
      unsigned int v31 = ~v29;
      while (v30 > v31)
      {
        i /= 0xAuLL;
        if (__CFADD__(v29++, 1)) {
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_50:
      ;
    }
    LODWORD(v37[0]) = v5;
    WORD2(v37[0]) = v6;
    HIWORD(v37[0]) = v7;
    LOWORD(v37[1]) = v13;
    WORD1(v37[1]) = v14;
    WORD2(v37[1]) = v15;
    HIWORD(v37[1]) = v10;
    LOWORD(v38) = v16;
    HIWORD(v38) = v11;
    int v25 = _So9NSDecimala__exponent_getter((char *)v37);
    if (v25 < 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      v37[0] = 0;
      v37[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v37, "Invalid index ");
      HIBYTE(v37[1]) = -18;
      v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
      v35._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v35);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181EBC7CCLL);
    }
    int v26 = v36;
    if (v25)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_21;
      }
      i *= 10;
      int v27 = v25 - 1;
      if (v25 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_21;
        }
        i *= 10;
        while (--v27)
        {
          LODWORD(v21) = 0;
          uint64_t v28 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          BOOL v22 = 1;
          if (v28) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_40:
    BOOL v22 = (i & 0xFFFFFFFF80000000) != 0;
    if (i >> 31) {
      LODWORD(v21) = 0;
    }
    else {
      uint64_t v21 = -(uint64_t)i;
    }
    if (i >> 31) {
      int v33 = 0;
    }
    else {
      int v33 = i;
    }
    if (!v26) {
      LODWORD(v21) = v33;
    }
  }
LABEL_22:
  LOBYTE(v37[0]) = v22;
  return v21 | ((unint64_t)v22 << 32);
}

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  int isNegative_getter;
  void v29[2];
  unsigned int v30;

  LOWORD(i) = a3;
  uint64_t v4 = a2;
  int v5 = a1;
  v29[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v29[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIWORD(a3);
  unsigned int v30 = a3;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(v29);
  LODWORD(v29[0]) = v5;
  WORD2(v29[0]) = v6;
  HIWORD(v29[0]) = v7;
  LOWORD(v29[1]) = v4;
  WORD1(v29[1]) = v8;
  WORD2(v29[1]) = v9;
  HIWORD(v29[1]) = v10;
  LOWORD(v30) = i;
  HIWORD(v30) = v11;
  if (_So9NSDecimala__length_getter(v29) || !isNegative_getter)
  {
    uint64_t v12 = (unsigned __int16)v4;
    LODWORD(v29[0]) = v5;
    unint64_t v13 = WORD1(v4);
    WORD2(v29[0]) = v6;
    HIWORD(v29[0]) = v7;
    LODWORD(v29[1]) = v4;
    WORD2(v29[1]) = WORD2(v4);
    HIWORD(v29[1]) = v10;
    LOWORD(v30) = i;
    HIWORD(v30) = v11;
    unint64_t v14 = _So9NSDecimala__length_getter(v29);
    if (!v14) {
      goto LABEL_46;
    }
    unint64_t v15 = 0;
    unint64_t v16 = v14 - 1;
    if (v14 != 1)
    {
      while (2)
      {
        int v17 = v7;
        switch(v16)
        {
          case 1:
            goto LABEL_15;
          case 2:
            int v17 = v12;
            if (HIWORD(v15)) {
              return 0;
            }
            goto LABEL_16;
          case 3:
            int v17 = v13;
            if (HIWORD(v15)) {
              return 0;
            }
            goto LABEL_16;
          case 4:
            int v17 = WORD2(v4);
            if (HIWORD(v15)) {
              return 0;
            }
            goto LABEL_16;
          case 5:
            int v17 = v10;
            if (HIWORD(v15)) {
              return 0;
            }
            goto LABEL_16;
          case 6:
            int v17 = (unsigned __int16)i;
LABEL_15:
            if (!HIWORD(v15)) {
              goto LABEL_16;
            }
            return 0;
          case 7:
            int v17 = v11;
            if (HIWORD(v15)) {
              return 0;
            }
LABEL_16:
            unint64_t v15 = v17 | (v15 << 16);
            if (!--v16) {
              break;
            }
            continue;
          default:
            goto LABEL_49;
        }
        break;
      }
    }
    if (!HIWORD(v15))
    {
      LOWORD(v4) = i;
      for (unint64_t i = (unsigned __int16)v6 | (v15 << 16); ; unint64_t i = 0)
      {
        LODWORD(v29[0]) = v5;
        WORD2(v29[0]) = v6;
        HIWORD(v29[0]) = v7;
        LOWORD(v29[1]) = v12;
        WORD1(v29[1]) = v13;
        WORD2(v29[1]) = WORD2(v4);
        HIWORD(v29[1]) = v10;
        LOWORD(v30) = v4;
        HIWORD(v30) = v11;
        if ((_So9NSDecimala__exponent_getter((char *)v29) & 0x80000000) == 0) {
          break;
        }
        LODWORD(v29[0]) = v5;
        WORD2(v29[0]) = v6;
        HIWORD(v29[0]) = v7;
        LOWORD(v29[1]) = v12;
        WORD1(v29[1]) = v13;
        WORD2(v29[1]) = WORD2(v4);
        HIWORD(v29[1]) = v10;
        LOWORD(v30) = v4;
        HIWORD(v30) = v11;
        BOOL v22 = _So9NSDecimala__exponent_getter((char *)v29);
        if (v22 > 0) {
          goto LABEL_48;
        }
        if (!v22) {
          goto LABEL_40;
        }
        unint64_t v23 = -v22 & ~(-v22 >> 31);
        uint64_t v24 = ~v22;
        while (v23 > v24)
        {
          i /= 0xAuLL;
          if (__CFADD__(v22++, 1)) {
            goto LABEL_40;
          }
        }
        __break(1u);
LABEL_46:
        LOWORD(v4) = i;
      }
      LODWORD(v29[0]) = v5;
      WORD2(v29[0]) = v6;
      HIWORD(v29[0]) = v7;
      LOWORD(v29[1]) = v12;
      WORD1(v29[1]) = v13;
      WORD2(v29[1]) = WORD2(v4);
      HIWORD(v29[1]) = v10;
      LOWORD(v30) = v4;
      HIWORD(v30) = v11;
      int v19 = _So9NSDecimala__exponent_getter((char *)v29);
      if (v19 < 0)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        v29[0] = 0;
        v29[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease();
        strcpy((char *)v29, "Invalid index ");
        HIBYTE(v29[1]) = -18;
        v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
        v27._object = (void *)0xEE0061737369746ELL;
        String.append(_:)(v27);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181EBCBF0);
      }
      if (v19)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          return 0;
        }
        i *= 10;
        unint64_t v20 = v19 - 1;
        if (v19 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL)) {
            return 0;
          }
          i *= 10;
          while (--v20)
          {
            uint64_t v21 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10;
            if (v21) {
              return 0;
            }
          }
        }
      }
LABEL_40:
      if (isNegative_getter)
      {
        if ((i & 0x8000000000000000) == 0) {
          return -(uint64_t)i;
        }
      }
      else if ((i & 0x8000000000000000) == 0)
      {
        return i;
      }
    }
  }
  return 0;
}

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int isNegative_getter;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t result;
  unint64_t i;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  Swift::String v31;
  Swift::String v32;
  int v33;
  void v34[2];
  unsigned int v35;

  unsigned __int16 v3 = a3;
  int v5 = a1;
  v34[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v34[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIWORD(a3);
  Swift::String v35 = a3;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(v34);
  LODWORD(v34[0]) = v5;
  WORD2(v34[0]) = v6;
  HIWORD(v34[0]) = v7;
  LOWORD(v34[1]) = a2;
  WORD1(v34[1]) = v8;
  WORD2(v34[1]) = v9;
  HIWORD(v34[1]) = v10;
  LOWORD(v35) = v3;
  HIWORD(v35) = v11;
  if (!_So9NSDecimala__length_getter(v34) && isNegative_getter) {
    return 0;
  }
  int v33 = isNegative_getter;
  unint64_t v13 = (unsigned __int16)a2;
  LODWORD(v34[0]) = v5;
  unint64_t v14 = WORD1(a2);
  WORD2(v34[0]) = v6;
  unint64_t v15 = WORD2(a2);
  unint64_t v16 = v3;
  HIWORD(v34[0]) = v7;
  LOWORD(v34[1]) = v13;
  WORD1(v34[1]) = v14;
  WORD2(v34[1]) = v15;
  HIWORD(v34[1]) = v10;
  LOWORD(v35) = v3;
  HIWORD(v35) = v11;
  int v17 = _So9NSDecimala__length_getter(v34);
  if (!v17) {
    goto LABEL_43;
  }
  unint64_t v18 = 0;
  int v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      unint64_t v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          unint64_t v20 = v13;
          if (HIWORD(v18)) {
            return 0;
          }
          goto LABEL_16;
        case 3:
          unint64_t v20 = v14;
          if (HIWORD(v18)) {
            return 0;
          }
          goto LABEL_16;
        case 4:
          unint64_t v20 = v15;
          if (HIWORD(v18)) {
            return 0;
          }
          goto LABEL_16;
        case 5:
          unint64_t v20 = v10;
          if (HIWORD(v18)) {
            return 0;
          }
          goto LABEL_16;
        case 6:
          unint64_t v20 = v16;
LABEL_15:
          if (!HIWORD(v18)) {
            goto LABEL_16;
          }
          return 0;
        case 7:
          unint64_t v20 = v11;
          if (HIWORD(v18)) {
            return 0;
          }
LABEL_16:
          unint64_t v18 = v20 | (v18 << 16);
          if (!--v19) {
            break;
          }
          continue;
        default:
          goto LABEL_46;
      }
      break;
    }
  }
  if (HIWORD(v18)) {
    return 0;
  }
  for (unint64_t i = (unsigned __int16)v6 | (v18 << 16); ; unint64_t i = 0)
  {
    LODWORD(v34[0]) = v5;
    WORD2(v34[0]) = v6;
    HIWORD(v34[0]) = v7;
    LOWORD(v34[1]) = v13;
    WORD1(v34[1]) = v14;
    WORD2(v34[1]) = v15;
    HIWORD(v34[1]) = v10;
    LOWORD(v35) = v16;
    HIWORD(v35) = v11;
    if ((_So9NSDecimala__exponent_getter((char *)v34) & 0x80000000) == 0) {
      break;
    }
    LODWORD(v34[0]) = v5;
    WORD2(v34[0]) = v6;
    HIWORD(v34[0]) = v7;
    LOWORD(v34[1]) = v13;
    WORD1(v34[1]) = v14;
    WORD2(v34[1]) = v15;
    HIWORD(v34[1]) = v10;
    LOWORD(v35) = v16;
    HIWORD(v35) = v11;
    int v27 = _So9NSDecimala__exponent_getter((char *)v34);
    if (v27 > 0) {
      goto LABEL_45;
    }
    uint64_t v24 = v33;
    if (!v27) {
      goto LABEL_39;
    }
    uint64_t v28 = -v27 & ~(-v27 >> 31);
    int v29 = ~v27;
    while (v28 > v29)
    {
      i /= 0xAuLL;
      if (__CFADD__(v27++, 1)) {
        goto LABEL_39;
      }
    }
    __break(1u);
LABEL_43:
    ;
  }
  LODWORD(v34[0]) = v5;
  WORD2(v34[0]) = v6;
  HIWORD(v34[0]) = v7;
  LOWORD(v34[1]) = v13;
  WORD1(v34[1]) = v14;
  WORD2(v34[1]) = v15;
  HIWORD(v34[1]) = v10;
  LOWORD(v35) = v16;
  HIWORD(v35) = v11;
  unint64_t v23 = _So9NSDecimala__exponent_getter((char *)v34);
  if (v23 < 0)
  {
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    strcpy((char *)v34, "Invalid index ");
    HIBYTE(v34[1]) = -18;
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
    v32._object = (void *)0xEE0061737369746ELL;
    String.append(_:)(v32);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181EBD018);
  }
  uint64_t v24 = v33;
  if (v23)
  {
    if (!is_mul_ok(i, 0xAuLL)) {
      return 0;
    }
    i *= 10;
    int v25 = v23 - 1;
    if (v23 != 1)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        return 0;
      }
      i *= 10;
      while (--v25)
      {
        uint64_t result = 0;
        int v26 = (i * (unsigned __int128)0xAuLL) >> 64;
        i *= 10;
        if (v26) {
          return result;
        }
      }
    }
  }
LABEL_39:
  if (v24) {
    return -(uint64_t)i;
  }
  else {
    return i;
  }
}

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  void v28[2];
  unsigned int v29;

  LOWORD(i) = a3;
  uint64_t v4 = a2;
  int v5 = a1;
  v28[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  v28[1] = a2;
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = HIWORD(a3);
  int v29 = a3;
  if (_So9NSDecimala__isNegative_getter(v28)) {
    goto LABEL_2;
  }
  unint64_t v13 = (unsigned __int16)v4;
  LODWORD(v28[0]) = v5;
  unint64_t v14 = WORD1(v4);
  WORD2(v28[0]) = v6;
  HIWORD(v28[0]) = v7;
  LODWORD(v28[1]) = v4;
  WORD2(v28[1]) = WORD2(v4);
  HIWORD(v28[1]) = v8;
  LOWORD(v29) = i;
  HIWORD(v29) = v9;
  unint64_t v15 = _So9NSDecimala__length_getter(v28);
  if (!v15) {
    goto LABEL_37;
  }
  unint64_t v16 = 0;
  int v17 = v15 - 1;
  if (v15 != 1)
  {
    while (2)
    {
      unint64_t v18 = v7;
      switch(v17)
      {
        case 1:
          goto LABEL_13;
        case 2:
          unint64_t v18 = v13;
          goto LABEL_13;
        case 3:
          unint64_t v18 = v14;
          goto LABEL_13;
        case 4:
          unint64_t v18 = WORD2(v4);
          goto LABEL_13;
        case 5:
          unint64_t v18 = v8;
          goto LABEL_13;
        case 6:
          unint64_t v18 = (unsigned __int16)i;
          goto LABEL_13;
        case 7:
          unint64_t v18 = v9;
LABEL_13:
          if (HIWORD(v16)) {
            goto LABEL_2;
          }
          unint64_t v16 = v18 | (v16 << 16);
          if (!--v17) {
            break;
          }
          continue;
        default:
          goto LABEL_40;
      }
      break;
    }
  }
  if (HIWORD(v16))
  {
LABEL_2:
    unint64_t v10 = 0;
    unint64_t v11 = 1;
  }
  else
  {
    LOWORD(v4) = i;
    for (unint64_t i = (unsigned __int16)v6 | (v16 << 16); ; unint64_t i = 0)
    {
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      if ((_So9NSDecimala__exponent_getter((char *)v28) & 0x80000000) == 0) {
        break;
      }
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      BOOL v22 = _So9NSDecimala__exponent_getter((char *)v28);
      if (v22 > 0) {
        goto LABEL_39;
      }
      if (!v22) {
        goto LABEL_33;
      }
      unint64_t v23 = -v22 & ~(-v22 >> 31);
      uint64_t v24 = ~v22;
      while (v23 > v24)
      {
        i /= 0xAuLL;
        if (__CFADD__(v22++, 1)) {
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_37:
      LOWORD(v4) = i;
    }
    LODWORD(v28[0]) = v5;
    WORD2(v28[0]) = v6;
    HIWORD(v28[0]) = v7;
    LOWORD(v28[1]) = v13;
    WORD1(v28[1]) = v14;
    WORD2(v28[1]) = WORD2(v4);
    HIWORD(v28[1]) = v8;
    LOWORD(v29) = v4;
    HIWORD(v29) = v9;
    int v19 = _So9NSDecimala__exponent_getter((char *)v28);
    if (v19 < 0)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      v28[0] = 0;
      v28[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v28, "Invalid index ");
      HIBYTE(v28[1]) = -18;
      v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
      v27._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v27);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181EBDB50);
    }
    if (v19)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_2;
      }
      i *= 10;
      unint64_t v20 = v19 - 1;
      if (v19 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_2;
        }
        i *= 10;
        while (--v20)
        {
          unint64_t v10 = 0;
          uint64_t v21 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          unint64_t v11 = 1;
          if (v21) {
            goto LABEL_3;
          }
        }
      }
    }
LABEL_33:
    unint64_t v11 = HIDWORD(i) != 0;
    unint64_t v10 = i;
    if (HIDWORD(i)) {
      unint64_t v10 = 0;
    }
  }
LABEL_3:
  LOBYTE(v28[0]) = v11;
  return v10 | ((unint64_t)v11 << 32);
}

uint64_t JSONDecoderImpl.KeyedContainer.codingPath.getter(uint64_t a1, unint64_t a2)
{
  return _CodingPathNode.path.getter(a2);
}

uint64_t JSONDecoderImpl.KeyedContainer.createTypeMismatchError(type:forKey:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W4>, unint64_t a4@<X6>, void *a5@<X8>, uint64_t a6, uint64_t a7)
{
  unint64_t v42 = a4;
  int v40 = a3;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  unint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  unint64_t v20 = (char *)&v37 - v19;
  char v41 = a5;
  uint64_t v39 = a1;
  *a5 = a1;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v21((char *)&v37 - v19, a2, a6, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, a6);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, a6) == 1)
  {
    BOOL v22 = *(void (**)(char *, uint64_t))(v14 + 8);
    v22(v16, v13);
    _CodingPathNode.path.getter(v42);
    v22(v20, v13);
  }
  else
  {
    uint64_t v38 = a7;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, a6);
    uint64_t v23 = _CodingPathNode.path.getter(v42);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    uint64_t v25 = v38;
    *(void *)(inited + 56) = a6;
    *(void *)(inited + 64) = v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    ((void (*)(uint64_t *, char *, uint64_t))v21)(boxed_opaque_existential_1, v12, a6);
    unint64_t v43 = v23;
    specialized Array.append<A>(contentsOf:)(inited);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a6);
  }
  unint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  unint64_t v43 = 0xD000000000000013;
  unint64_t v44 = 0x80000001823ADD10;
  v27._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 0x756F662074756220;
  v28._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v28);
  int v29 = (void *)0xE800000000000000;
  uint64_t v30 = 0x676E697274732061;
  switch(v40 >> 5)
  {
    case 1:
      int v29 = (void *)0xE600000000000000;
      uint64_t v30 = 0x7265626D756ELL;
      break;
    case 2:
      int v29 = (void *)0xE400000000000000;
      uint64_t v30 = 1819242338;
      break;
    case 3:
      int v29 = (void *)0xEC0000007972616ELL;
      uint64_t v30 = 0x6F69746369642061;
      break;
    case 4:
      uint64_t v30 = 0x7961727261206E61;
      break;
    case 5:
      int v29 = (void *)0xE400000000000000;
      uint64_t v30 = 1819047278;
      break;
    default:
      break;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  unsigned int v31 = v41;
  v32._uint64_t countAndFlagsBits = v30;
  v32._object = v29;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0x64616574736E6920;
  v33._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v33);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v34 = *MEMORY[0x1E4FBBA70];
  uint64_t v35 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104))(v31, v34, v35);
}

float JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v37 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    uint64_t v23 = v36;
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v20, v21, HIDWORD(v34), v37, (uint64_t)v14, a5, a6);
    if (!v23) {
      float v6 = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v27 = v26;
    int v36 = (char *)v26
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v27[3] = a5;
    v27[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v37);
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001823B2190;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496;
    v30._object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186;
    v32._object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA68], v25);
    swift_willThrow();
  }
  return v6;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, (uint64_t (*)(void, void, void, void, void))JSONDecoderImpl.KeyedContainer.codingPath.getter);
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t JSONDecoderImpl.UnkeyedContainer.decodeNil()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  unsigned int v2 = *(unsigned __int8 *)(v0 + 40);
  if (v2 < 0xFE)
  {
    uint64_t v17 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v3 = *(void *)(v0 + 8);
    uint64_t v4 = JSONMap.loadValue(at:)(v3);
    if (v6 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v7 = MEMORY[0x1E4FBC248];
      unint64_t v8 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v9 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      }
      unint64_t v11 = v8[2];
      unint64_t v10 = v8[3];
      if (v11 >= v10 >> 1) {
        unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
      }
      uint64_t v23 = &type metadata for _CodingKey;
      unint64_t v24 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v12 = swift_allocObject();
      *(void *)&long long v22 = v12;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 16) = v9;
      *(unsigned char *)(v12 + 40) = 2;
      _OWORD v8[2] = v11 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v22, (uint64_t)&v8[5 * v11 + 4]);
      uint64_t v13 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v15 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v15 = v7;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBA80], v13);
      swift_willThrow();
      return v16 & 1;
    }
    uint64_t v1 = v4;
    uint64_t v17 = v5;
    LOBYTE(v2) = v6;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v3);
    *(void *)(v0 + 24) = v1;
    *(void *)(v0 + 32) = v17;
    *(unsigned char *)(v0 + 40) = v2;
  }
  if ((v2 & 0xE0) == 0xA0)
  {
    char v16 = 0;
    if (!(v17 | v1) && v2 == 160)
    {
      uint64_t v18 = *(void *)(v0 + 64);
      BOOL v19 = __OFADD__(v18, 1);
      uint64_t v20 = v18 + 1;
      if (v19)
      {
        __break(1u);
        JUMPOUT(0x181EBF82CLL);
      }
      *(void *)(v0 + 64) = v20;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
      char v16 = 1;
    }
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t JSONDecoderImpl.UnkeyedContainer.nestedUnkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  uint64_t v7 = v1 + 3;
  unsigned int v8 = *((unsigned __int8 *)v1 + 40);
  if (v8 < 0xFE)
  {
    uint64_t v45 = v1[3];
    uint64_t v41 = v1[4];
  }
  else
  {
    uint64_t v9 = v6;
    unint64_t v10 = v1[1];
    uint64_t v11 = JSONMap.loadValue(at:)(v10);
    if (v13 > 0xFDu)
    {
      if (v9 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder)) {
        swift_bridgeObjectRelease();
      }
      unint64_t v14 = _CodingPathNode.path.getter(v1[9]);
      uint64_t v15 = v1[8];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_6;
      }
      goto LABEL_35;
    }
    uint64_t v23 = v11;
    LOBYTE(v8) = v13;
    uint64_t v24 = v12;
    v1[1] = JSONMap.offset(after:)(v10);
    uint64_t v45 = v23;
    v1[3] = v23;
    v1[4] = v24;
    uint64_t v41 = v24;
    *((unsigned char *)v1 + 40) = v8;
  }
  uint64_t v25 = *v1;
  uint64_t v27 = v4[8];
  unint64_t v26 = v4[9];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v27;
  *(void *)(v9 + 24) = v26;
  if (v26 >> 62)
  {
    if (v26 >> 62 != 1)
    {
      uint64_t v30 = 1;
LABEL_16:
      unint64_t v39 = a1;
      uint64_t v40 = v3;
      *(void *)(v9 + 32) = v30;
      swift_retain();
      swift_release();
      uint64_t v3 = *(void *)(v25 + 160);
      *(void *)(v25 + 160) = v9 | 0x4000000000000000;
      a1 = *(uint64_t **)(v25 + 16);
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v25 + 16) = a1;
      uint64_t v38 = v27;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_17;
      }
      goto LABEL_31;
    }
    Swift::String v28 = (uint64_t *)((v26 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    Swift::String v28 = (uint64_t *)(v26 + 64);
  }
  uint64_t v29 = *v28;
  swift_retain_n();
  uint64_t v30 = v29 + 1;
  if (!__OFADD__(v29, 1)) {
    goto LABEL_16;
  }
  __break(1u);
LABEL_31:
  a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
  *(void *)(v25 + 16) = a1;
LABEL_17:
  unint64_t v14 = a1[2];
  unint64_t v32 = a1[3];
  if (v14 >= v32 >> 1) {
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v14 + 1, 1, a1);
  }
  a1[2] = v14 + 1;
  Swift::String v33 = &a1[3 * v14];
  v33[4] = v45;
  v33[5] = v41;
  *((unsigned char *)v33 + 48) = v8;
  *(void *)(v25 + 16) = a1;
  swift_retain();
  JSONDecoderImpl.unkeyedContainer()(v39);
  uint64_t v15 = v40;
  if (!v40)
  {
    swift_release();
    *(void *)(v25 + 160) = v3;
    swift_retain();
    swift_release();
    int v36 = *(void **)(v25 + 16);
    if (v36[2])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v37 = v36[2];
        if (v37) {
          goto LABEL_27;
        }
        goto LABEL_38;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v36);
    int v36 = (void *)result;
    uint64_t v37 = *(void *)(result + 16);
    if (v37)
    {
LABEL_27:
      void v36[2] = v37 - 1;
      *(void *)(v25 + 16) = v36;
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      if (!__OFADD__(v38, 1))
      {
        v4[8] = v38 + 1;
        *uint64_t v7 = 0;
        v7[1] = 0;
        *((unsigned char *)v4 + 40) = -2;
        return result;
      }
      goto LABEL_39;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
  *(void *)(v25 + 160) = v3;
  swift_retain();
  swift_release();
  uint64_t v34 = *(void **)(v25 + 16);
  if (!v34[2])
  {
    __break(1u);
LABEL_33:
    uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
    uint64_t v35 = v34[2];
    if (v35) {
      goto LABEL_23;
    }
    goto LABEL_34;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v35 = v34[2];
  if (v35)
  {
LABEL_23:
    v34[2] = v35 - 1;
    *(void *)(v25 + 16) = v34;
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_34:
  __break(1u);
LABEL_35:
  unint64_t v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, (void *)v14);
LABEL_6:
  unint64_t v17 = *(void *)(v14 + 16);
  unint64_t v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1) {
    unint64_t v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, (void *)v14);
  }
  unint64_t v43 = &type metadata for _CodingKey;
  unint64_t v44 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v18 = swift_allocObject();
  *(void *)&long long v42 = v18;
  *(void *)(v18 + 24) = 0;
  *(void *)(v18 + 32) = 0;
  *(void *)(v18 + 16) = v15;
  *(unsigned char *)(v18 + 40) = 2;
  *(void *)(v14 + 16) = v17 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v42, v14 + 40 * v17 + 32);
  uint64_t v19 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v21 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v21 = v9;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x1E4FBBA80], v19);
  return swift_willThrow();
}

uint64_t protocol witness for UnkeyedDecodingContainer.codingPath.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return _CodingPathNode.path.getter(*(void *)(v0 + 72));
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return *(void *)(v0 + 64);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return JSONDecoderImpl.UnkeyedContainer.decodeNil()() & 1;
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance JSONDecoderImpl.UnkeyedContainer@<X0>(uint64_t *a1@<X8>)
{
  return JSONDecoderImpl.UnkeyedContainer.nestedUnkeyedContainer()(a1);
}

unint64_t specialized Float.init<A>(exactly:)(unint64_t result)
{
  float v1 = (float)result;
  if ((float)result >= 1.8447e19)
  {
    uint64_t v2 = 0;
    BOOL v3 = 1;
    return v2 | ((unint64_t)v3 << 32);
  }
  uint64_t v2 = LODWORD(v1);
  if ((~LODWORD(v1) & 0x7F800000) != 0)
  {
    BOOL v3 = (unint64_t)v1 != result;
    if ((unint64_t)v1 != result) {
      uint64_t v2 = 0;
    }
    return v2 | ((unint64_t)v3 << 32);
  }
  __break(1u);
  return result;
}

uint64_t specialized Float.init<A>(exactly:)(uint64_t result)
{
  float v1 = (float)result;
  if ((float)result >= 9.2234e18)
  {
    uint64_t v2 = 0;
    BOOL v3 = 1;
    return v2 | ((unint64_t)v3 << 32);
  }
  uint64_t v2 = LODWORD(v1);
  if ((~LODWORD(v1) & 0x7F800000) != 0)
  {
    if (v1 > -9.2234e18)
    {
      BOOL v3 = (uint64_t)v1 != result;
      if ((uint64_t)v1 != result) {
        uint64_t v2 = 0;
      }
      return v2 | ((unint64_t)v3 << 32);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(uint64_t a1, double a2)
{
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    uint64_t v12 = 0;
    BOOL result = 1;
    goto LABEL_25;
  }
  if (v4 == 2047) {
    goto LABEL_28;
  }
  uint64_t v7 = Double.exponent.getter();
  if (v7 > 63) {
    goto LABEL_28;
  }
  uint64_t v8 = v7;
  uint64_t v9 = Double.significandWidth.getter();
  BOOL result = v8 >= v9;
  uint64_t v11 = v9 + __clz(__rbit64(v5));
  uint64_t v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      uint64_t v12 = 0x8000000000000000;
      goto LABEL_25;
    }
LABEL_28:
    uint64_t v12 = 0;
    BOOL result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 63)
  {
    if (v12 < -64 || v12 > 64) {
      goto LABEL_11;
    }
  }
  else if (v12 < -64 || v12 > 64)
  {
    goto LABEL_11;
  }
  if (v12 < 0) {
    goto LABEL_32;
  }
  if ((unint64_t)v12 < 0x40)
  {
    unint64_t v14 = v5 << v12;
    if (v8 != 63) {
      goto LABEL_17;
    }
LABEL_34:
    if (a2 < 0.0 && !v14) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 63) {
    goto LABEL_27;
  }
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  if (v8 < 0) {
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    uint64_t v12 = v14 | v13;
    if (a2 >= 0.0) {
      break;
    }
    if ((v12 & 0x8000000000000000) == 0)
    {
      LOBYTE(v6) = 0;
      uint64_t v12 = -v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0) {
      goto LABEL_11;
    }
    unint64_t v14 = v5 >> -(char)v12;
    if (v8 == 63) {
      goto LABEL_34;
    }
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0) {
      goto LABEL_19;
    }
    uint64_t v13 = 0;
  }
  if (v12 < 0) {
    goto LABEL_31;
  }
  LOBYTE(v6) = 0;
LABEL_25:
  *(void *)a1 = v12;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  BOOL v3 = (*(void *)&a2 >> 52) & 0x7FFLL;
  uint64_t v4 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  unint64_t v5 = v3 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v5)
  {
    BOOL result = 0;
    unint64_t v5 = 0;
    uint64_t v7 = 1;
    if (v3 != 2047 && a2 > -1.0)
    {
      uint64_t v8 = Double.exponent.getter();
      if (v8 <= 63)
      {
        uint64_t v9 = v8;
        unint64_t v10 = Double.significandWidth.getter();
        uint64_t v11 = v10 + __clz(__rbit64(v4));
        uint64_t v12 = v9 - v11;
        if (__OFSUB__(v9, v11))
        {
          __break(1u);
        }
        else
        {
          if (v11 > 63)
          {
            if (v12 < -64 || v12 > 64) {
              goto LABEL_12;
            }
          }
          else if (v12 < -64 || v12 > 64)
          {
            goto LABEL_12;
          }
          if ((v12 & 0x8000000000000000) == 0)
          {
            if ((unint64_t)v12 < 0x40)
            {
              uint64_t v13 = v4 << v12;
              if (v9 < 0)
              {
LABEL_17:
                unint64_t v14 = 0;
                goto LABEL_24;
              }
LABEL_23:
              unint64_t v14 = 1 << v9;
              goto LABEL_24;
            }
            goto LABEL_12;
          }
        }
        if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFC0)
        {
          uint64_t v13 = v4 >> (v11 - v9);
          if (v9 < 0) {
            goto LABEL_17;
          }
          goto LABEL_23;
        }
LABEL_12:
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        if (v9 < 0)
        {
LABEL_24:
          uint64_t v7 = 0;
          unint64_t v5 = v13 | v14;
          BOOL result = v9 >= v10;
          goto LABEL_25;
        }
        goto LABEL_23;
      }
      unint64_t v5 = 0;
      BOOL result = 0;
      uint64_t v7 = 1;
    }
  }
  else
  {
    uint64_t v7 = 0;
    BOOL result = 1;
  }
LABEL_25:
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v7;
  return result;
}

{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  BOOL result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  BOOL v3 = LODWORD(a2);
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    uint64_t v7 = 0;
    BOOL result = 1;
    goto LABEL_25;
  }
  LOWORD(v6) = 0;
  uint64_t v7 = 1;
  if (v4 == 2047)
  {
    BOOL result = 0;
  }
  else
  {
    BOOL result = 0;
    if (a2 > -1.0)
    {
      uint64_t v9 = Double.exponent.getter();
      if (v9 > 15)
      {
        LOWORD(v6) = 0;
        BOOL result = 0;
        uint64_t v7 = 1;
        goto LABEL_25;
      }
      unint64_t v10 = v9;
      uint64_t v11 = Double.significandWidth.getter();
      uint64_t v12 = v11 + __clz(__rbit64(v5));
      uint64_t v6 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 15)
        {
          if (v6 < -16 || v6 > 16)
          {
LABEL_9:
            LOWORD(v6) = 0;
            LOWORD(v13) = 0;
            if ((v10 & 0x8000000000000000) == 0) {
              goto LABEL_23;
            }
            goto LABEL_24;
          }
          if (v6 < 0)
          {
            if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFF0) {
              goto LABEL_9;
            }
            LODWORD(v6) = (unsigned __int16)v3 >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v6 >= 0x10) {
              goto LABEL_9;
            }
            LODWORD(v6) = v3 << v6;
          }
LABEL_21:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_23:
            uint64_t v13 = 1 << v10;
            goto LABEL_24;
          }
          LOWORD(v13) = 0;
LABEL_24:
          uint64_t v7 = 0;
          LOWORD(v6) = v6 | v13;
          BOOL result = v10 >= v11;
          goto LABEL_25;
        }
        if ((unint64_t)(v6 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        {
          LOWORD(v6) = 0;
          goto LABEL_21;
        }
        if ((v6 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v6 >= 0x40) {
            LOWORD(v6) = 0;
          }
          else {
            uint64_t v6 = v5 << v6;
          }
          goto LABEL_21;
        }
      }
      if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFC0) {
        LOWORD(v6) = 0;
      }
      else {
        uint64_t v6 = v5 >> (v12 - v10);
      }
      goto LABEL_21;
    }
  }
LABEL_25:
  *(_WORD *)a1 = v6;
  *(unsigned char *)(a1 + 2) = v7;
  return result;
}

{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  uint64_t v4 = LODWORD(a2);
  unint64_t v5 = (*(void *)&a2 >> 52) & 0x7FFLL;
  uint64_t v6 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v7 = v5 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOWORD(v15) = 0;
    BOOL result = 1;
    goto LABEL_29;
  }
  if (v5 == 2047 || (uint64_t v8 = Double.exponent.getter(), v8 > 15))
  {
LABEL_38:
    LOWORD(v15) = 0;
    BOOL result = 0;
    LOBYTE(v7) = 1;
    goto LABEL_29;
  }
  uint64_t v9 = v8;
  unint64_t v10 = Double.significandWidth.getter();
  BOOL result = v9 >= v10;
  uint64_t v12 = v10 + __clz(__rbit64(v6));
  uint64_t v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v12 > 15)
  {
    if ((unint64_t)(v13 - 65) >= 0xFFFFFFFFFFFFFF7FLL)
    {
      if (v13 < 0)
      {
        if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFC0) {
          LOWORD(v13) = 0;
        }
        else {
          uint64_t v13 = v6 >> (v12 - v9);
        }
      }
      else if ((unint64_t)v13 >= 0x40)
      {
        LOWORD(v13) = 0;
      }
      else
      {
        uint64_t v13 = v6 << v13;
      }
    }
    else
    {
      LOWORD(v13) = 0;
    }
LABEL_20:
    if (v9 != 15)
    {
      if (v9 < 0)
      {
        LOWORD(v14) = 0;
        goto LABEL_24;
      }
      goto LABEL_23;
    }
LABEL_31:
    if (a2 >= 0.0 || (_WORD)v13) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  if (v13 >= -16 && v13 <= 16)
  {
    if (v13 < 0)
    {
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF0) {
        goto LABEL_8;
      }
      LODWORD(v13) = (unsigned __int16)v4 >> (v12 - v9);
    }
    else
    {
      if ((unint64_t)v13 >= 0x10) {
        goto LABEL_8;
      }
      LODWORD(v13) = v4 << v13;
    }
    goto LABEL_20;
  }
LABEL_8:
  if (v9 == 15) {
    goto LABEL_37;
  }
  LOWORD(v14) = 0;
  LOWORD(v13) = 0;
  if ((v9 & 0x8000000000000000) == 0) {
LABEL_23:
  }
    unint64_t v14 = 1 << v9;
LABEL_24:
  uint64_t v15 = (__int16)(v13 | v14);
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_29;
    }
    goto LABEL_36;
  }
  if (v15 < 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0) {
      goto LABEL_38;
    }
LABEL_33:
    LOBYTE(v7) = 0;
    LOWORD(v15) = 0x8000;
    goto LABEL_29;
  }
  LOBYTE(v7) = 0;
  uint64_t v15 = -v15;
LABEL_29:
  *(_WORD *)a1 = v15;
  *(unsigned char *)(a1 + 2) = v7;
  return result;
}

{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  uint64_t v4 = LODWORD(a2);
  unint64_t v5 = (*(void *)&a2 >> 52) & 0x7FFLL;
  uint64_t v6 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v7 = v5 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v7)
  {
    uint64_t v15 = 0;
    BOOL result = 1;
    goto LABEL_29;
  }
  if (v5 == 2047 || (uint64_t v8 = Double.exponent.getter(), v8 > 31))
  {
LABEL_38:
    uint64_t v15 = 0;
    BOOL result = 0;
    LOBYTE(v7) = 1;
    goto LABEL_29;
  }
  uint64_t v9 = v8;
  unint64_t v10 = Double.significandWidth.getter();
  BOOL result = v9 >= v10;
  uint64_t v12 = v10 + __clz(__rbit64(v6));
  uint64_t v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v12 > 31)
  {
    if ((unint64_t)(v13 - 65) >= 0xFFFFFFFFFFFFFF7FLL)
    {
      if (v13 < 0)
      {
        if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFC0) {
          LODWORD(v13) = 0;
        }
        else {
          uint64_t v13 = v6 >> (v12 - v9);
        }
      }
      else if ((unint64_t)v13 >= 0x40)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        uint64_t v13 = v6 << v13;
      }
    }
    else
    {
      LODWORD(v13) = 0;
    }
LABEL_20:
    if (v9 != 31)
    {
      if (v9 < 0)
      {
        unint64_t v14 = 0;
        goto LABEL_24;
      }
      goto LABEL_23;
    }
LABEL_31:
    if (a2 >= 0.0 || v13) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  if (v13 >= -32 && v13 <= 32)
  {
    if (v13 < 0)
    {
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFE0) {
        goto LABEL_8;
      }
      LODWORD(v13) = v4 >> (v12 - v9);
    }
    else
    {
      if ((unint64_t)v13 >= 0x20) {
        goto LABEL_8;
      }
      LODWORD(v13) = v4 << v13;
    }
    goto LABEL_20;
  }
LABEL_8:
  if (v9 == 31) {
    goto LABEL_37;
  }
  unint64_t v14 = 0;
  LODWORD(v13) = 0;
  if ((v9 & 0x8000000000000000) == 0) {
LABEL_23:
  }
    unint64_t v14 = 1 << v9;
LABEL_24:
  uint64_t v15 = v13 | v14;
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_29;
    }
    goto LABEL_36;
  }
  if (v15 < 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0) {
      goto LABEL_38;
    }
LABEL_33:
    LOBYTE(v7) = 0;
    uint64_t v15 = 0x80000000;
    goto LABEL_29;
  }
  LOBYTE(v7) = 0;
  uint64_t v15 = -v15;
LABEL_29:
  *(_DWORD *)a1 = v15;
  *(unsigned char *)(a1 + 4) = v7;
  return result;
}

{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  BOOL result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  BOOL v3 = LODWORD(a2);
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    uint64_t v7 = 0;
    BOOL result = 1;
    goto LABEL_25;
  }
  LODWORD(v6) = 0;
  uint64_t v7 = 1;
  if (v4 == 2047)
  {
    BOOL result = 0;
  }
  else
  {
    BOOL result = 0;
    if (a2 > -1.0)
    {
      uint64_t v9 = Double.exponent.getter();
      if (v9 > 31)
      {
        LODWORD(v6) = 0;
        BOOL result = 0;
        uint64_t v7 = 1;
        goto LABEL_25;
      }
      unint64_t v10 = v9;
      uint64_t v11 = Double.significandWidth.getter();
      uint64_t v12 = v11 + __clz(__rbit64(v5));
      uint64_t v6 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 31)
        {
          if (v6 < -32 || v6 > 32)
          {
LABEL_9:
            LODWORD(v6) = 0;
            uint64_t v13 = 0;
            if ((v10 & 0x8000000000000000) == 0) {
              goto LABEL_23;
            }
            goto LABEL_24;
          }
          if (v6 < 0)
          {
            if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFE0) {
              goto LABEL_9;
            }
            LODWORD(v6) = v3 >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v6 >= 0x20) {
              goto LABEL_9;
            }
            LODWORD(v6) = v3 << v6;
          }
LABEL_21:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_23:
            uint64_t v13 = 1 << v10;
            goto LABEL_24;
          }
          uint64_t v13 = 0;
LABEL_24:
          uint64_t v7 = 0;
          LODWORD(v6) = v6 | v13;
          BOOL result = v10 >= v11;
          goto LABEL_25;
        }
        if ((unint64_t)(v6 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        {
          LODWORD(v6) = 0;
          goto LABEL_21;
        }
        if ((v6 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v6 >= 0x40) {
            LODWORD(v6) = 0;
          }
          else {
            uint64_t v6 = v5 << v6;
          }
          goto LABEL_21;
        }
      }
      if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFC0) {
        LODWORD(v6) = 0;
      }
      else {
        uint64_t v6 = v5 >> (v12 - v10);
      }
      goto LABEL_21;
    }
  }
LABEL_25:
  *(_DWORD *)a1 = v6;
  *(unsigned char *)(a1 + 4) = v7;
  return result;
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(unsigned char *a1, double a2)
{
  int v3 = LODWORD(a2);
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    char v7 = 0;
    BOOL result = 1;
    goto LABEL_25;
  }
  LOBYTE(v6) = 0;
  char v7 = 1;
  if (v4 == 2047)
  {
    BOOL result = 0;
  }
  else
  {
    BOOL result = 0;
    if (a2 > -1.0)
    {
      uint64_t v9 = Double.exponent.getter();
      if (v9 > 7)
      {
        LOBYTE(v6) = 0;
        BOOL result = 0;
        char v7 = 1;
        goto LABEL_25;
      }
      uint64_t v10 = v9;
      uint64_t v11 = Double.significandWidth.getter();
      uint64_t v12 = v11 + __clz(__rbit64(v5));
      uint64_t v6 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 7)
        {
          if (v6 < -8 || v6 > 8)
          {
LABEL_9:
            LOBYTE(v6) = 0;
            LOBYTE(v13) = 0;
            if ((v10 & 0x8000000000000000) == 0) {
              goto LABEL_23;
            }
            goto LABEL_24;
          }
          if (v6 < 0)
          {
            if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFF8) {
              goto LABEL_9;
            }
            LODWORD(v6) = v3 >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v6 >= 8) {
              goto LABEL_9;
            }
            LODWORD(v6) = v3 << v6;
          }
LABEL_21:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_23:
            int v13 = 1 << v10;
            goto LABEL_24;
          }
          LOBYTE(v13) = 0;
LABEL_24:
          char v7 = 0;
          LOBYTE(v6) = v6 | v13;
          BOOL result = v10 >= v11;
          goto LABEL_25;
        }
        if ((unint64_t)(v6 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        {
          LOBYTE(v6) = 0;
          goto LABEL_21;
        }
        if ((v6 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v6 >= 0x40) {
            LOBYTE(v6) = 0;
          }
          else {
            uint64_t v6 = v5 << v6;
          }
          goto LABEL_21;
        }
      }
      if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFC0) {
        LOBYTE(v6) = 0;
      }
      else {
        uint64_t v6 = v5 >> (v12 - v10);
      }
      goto LABEL_21;
    }
  }
LABEL_25:
  *a1 = v6;
  a1[1] = v7;
  return result;
}

{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  uint64_t v4 = LODWORD(a2);
  unint64_t v5 = (*(void *)&a2 >> 52) & 0x7FFLL;
  uint64_t v6 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  char v7 = v5 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOBYTE(v15) = 0;
    BOOL result = 1;
    goto LABEL_29;
  }
  if (v5 == 2047 || (uint64_t v8 = Double.exponent.getter(), v8 > 7))
  {
LABEL_38:
    LOBYTE(v15) = 0;
    BOOL result = 0;
    LOBYTE(v7) = 1;
    goto LABEL_29;
  }
  uint64_t v9 = v8;
  uint64_t v10 = Double.significandWidth.getter();
  BOOL result = v9 >= v10;
  uint64_t v12 = v10 + __clz(__rbit64(v6));
  int v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v12 > 7)
  {
    if ((unint64_t)(v13 - 65) >= 0xFFFFFFFFFFFFFF7FLL)
    {
      if (v13 < 0)
      {
        if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFC0) {
          LOBYTE(v13) = 0;
        }
        else {
          int v13 = v6 >> (v12 - v9);
        }
      }
      else if ((unint64_t)v13 >= 0x40)
      {
        LOBYTE(v13) = 0;
      }
      else
      {
        int v13 = v6 << v13;
      }
    }
    else
    {
      LOBYTE(v13) = 0;
    }
LABEL_20:
    if (v9 != 7)
    {
      if (v9 < 0)
      {
        LOBYTE(v14) = 0;
        goto LABEL_24;
      }
      goto LABEL_23;
    }
LABEL_31:
    if (a2 >= 0.0 || (_BYTE)v13) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  if (v13 >= -8 && v13 <= 8)
  {
    if (v13 < 0)
    {
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF8) {
        goto LABEL_8;
      }
      LODWORD(v13) = v4 >> (v12 - v9);
    }
    else
    {
      if ((unint64_t)v13 >= 8) {
        goto LABEL_8;
      }
      LODWORD(v13) = v4 << v13;
    }
    goto LABEL_20;
  }
LABEL_8:
  if (v9 == 7) {
    goto LABEL_37;
  }
  LOBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  if ((v9 & 0x8000000000000000) == 0) {
LABEL_23:
  }
    unint64_t v14 = 1 << v9;
LABEL_24:
  uint64_t v15 = (char)(v13 | v14);
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_29;
    }
    goto LABEL_36;
  }
  if (v15 < 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0) {
      goto LABEL_38;
    }
LABEL_33:
    LOBYTE(v7) = 0;
    LOBYTE(v15) = 0x80;
    goto LABEL_29;
  }
  LOBYTE(v7) = 0;
  uint64_t v15 = -v15;
LABEL_29:
  *a1 = v15;
  a1[1] = v7;
  return result;
}

uint64_t partial apply for closure #1 in JSONDecoder.decode<A>(_:from:configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  return specialized JSONDecoderImpl.unwrap<A, B>(_:as:configuration:for:_:)(a1, a2, a3, v4[4], v4[5], 0x8000000000000000, 0, 0, a4, 0, 0xFFu, v4[2], v6);
}

double sub_181EC0C58@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a1 + 104))(&v5);
  char v3 = v6;
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(unsigned char *)(a2 + 16) = v3;
  return result;
}

double sub_181EC0CC0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a1 + 128))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_181EC0D1C(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  long long v4 = *(uint64_t (**)(unint64_t *))(*(void *)v3 + 136);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

double sub_181EC0D88@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 152))(v5);
  long long v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

double sub_181EC0DF0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a1 + 176))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_181EC0E4C(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  long long v4 = *(uint64_t (**)(unint64_t *))(*(void *)v3 + 184);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

uint64_t sub_181EC0EB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_181EC0F04(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 208);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_181EC0F58@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_181EC0FA8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 232))(*a1);
}

uint64_t sub_181EC0FF0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_181EC1040(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 256))(*a1);
}

uint64_t ObjC metadata update function for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t method lookup function for JSONDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for JSONDecoder);
}

uint64_t dispatch thunk of JSONDecoder.dateDecodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of JSONDecoder.dateDecodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of JSONDecoder.dataDecodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of JSONDecoder.dataDecodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of JSONDecoder.nonConformingFloatDecodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of JSONDecoder.nonConformingFloatDecodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of JSONDecoder.allowsJSON5.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of JSONDecoder.allowsJSON5.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of JSONDecoder.allowsJSON5.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of JSONDecoder.assumesTopLevelDictionary.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of JSONDecoder.assumesTopLevelDictionary.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of JSONDecoder.assumesTopLevelDictionary.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of JSONDecoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of JSONDecoder.decode<A, B>(_:from:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t initializeBufferWithCopyOfBuffer for JSONDecoder.DateDecodingStrategy(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JSONDecoder.DateDecodingStrategy(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v4, v5);
  long long v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for JSONDecoder.DateDecodingStrategy(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for JSONDecoder.KeyDecodingStrategy()
{
  return &type metadata for JSONDecoder.KeyDecodingStrategy;
}

uint64_t destroy for JSONDecoder._Options(uint64_t a1)
{
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  if (*(void *)(a1 + 24) >= 2uLL) {
    swift_release();
  }
  if (*(void *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 88) >= 2uLL) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JSONDecoder._Options(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  unint64_t v7 = *(void *)(a2 + 24);
  if (v7 >= 2)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v11;
    swift_retain();
    uint64_t v8 = *(void *)(a2 + 48);
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 48);
    if (v8)
    {
LABEL_3:
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v8;
      uint64_t v9 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v9;
      uint64_t v10 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v12;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_6:
  unint64_t v13 = *(void *)(a2 + 88);
  if (v13 >= 2)
  {
    uint64_t v14 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = v13;
    *(void *)(a1 + 96) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JSONDecoder._Options(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v5, v6);
  unint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  unint64_t v10 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 2uLL)
  {
    if (v10 >= 2)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v11;
      swift_retain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v12;
  swift_retain();
  swift_release();
LABEL_8:
  unint64_t v13 = (_OWORD *)(a1 + 40);
  uint64_t v14 = (_OWORD *)(a2 + 40);
  uint64_t v15 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v15)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Any?(a1 + 40, &demangling cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
      long long v17 = *(_OWORD *)(a2 + 56);
      long long v16 = *(_OWORD *)(a2 + 72);
      *unint64_t v13 = *v14;
      *(_OWORD *)(a1 + 56) = v17;
      *(_OWORD *)(a1 + 72) = v16;
    }
  }
  else if (v15)
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v18 = *v14;
    long long v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
    *unint64_t v13 = v18;
  }
  unint64_t v20 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >= 2uLL)
  {
    if (v20 >= 2)
    {
      uint64_t v22 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = v20;
      *(void *)(a1 + 96) = v22;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
    goto LABEL_20;
  }
  if (v20 < 2)
  {
LABEL_20:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    goto LABEL_22;
  }
  uint64_t v21 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  swift_retain();
LABEL_22:
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for JSONDecoder._Options(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of JSONEncoder.DateEncodingStrategy(v5, v6, v7);
  unint64_t v8 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 2uLL)
  {
    if (v8 >= 2)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v10;
  swift_release();
LABEL_8:
  if (*(void *)(a1 + 48))
  {
    uint64_t v11 = *(void *)(a2 + 48);
    if (v11)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of Any?(a1 + 40, &demangling cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
  }
  long long v14 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_13:
  unint64_t v15 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >= 2uLL)
  {
    if (v15 >= 2)
    {
      uint64_t v17 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = v15;
      *(void *)(a1 + 96) = v17;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
    goto LABEL_18;
  }
  if (v15 < 2)
  {
LABEL_18:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    goto LABEL_20;
  }
  uint64_t v16 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
LABEL_20:
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONDecoder._Options(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONDecoder._Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 104) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for JSONDecoder._Options()
{
  return &unk_1ECA31620;
}

uint64_t sub_181EC1A8C()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 96, 7);
}

uint64_t sub_181EC1AD8()
{
  outlined consume of _CodingKey(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 41, 7);
}

void *specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>(void *result@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = a2(&v11, *result + a3, a4);
    if (!v5)
    {
      char v10 = v12;
      *(void *)a5 = v11;
      *(unsigned char *)(a5 + 8) = v10;
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;

  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = a2(&v11, *result + a3, a4);
    if (!v5)
    {
      char v10 = BYTE4(v11);
      *(_DWORD *)a5 = v11;
      *(unsigned char *)(a5 + 4) = v10;
    }
  }
  return result;
}

uint64_t specialized Int128.init<A>(exactly:)(double a1)
{
  double v2 = fabs(a1);
  if (v2 >= 1.84467441e19)
  {
    double v4 = floor(a1 * 5.42101086e-20);
    if (specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, v4)
      && v6 != 1
      && specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, a1 + v4 * -1.84467441e19)
      && v6 != 1)
    {
      return v5;
    }
    return 0;
  }
  if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, v2) || v6 == 1) {
    return 0;
  }
  if (a1 < 0.0) {
    return -v5;
  }
  else {
    return v5;
  }
}

uint64_t specialized UInt128.init<A>(exactly:)(double a1)
{
  double v2 = trunc(a1 * 5.42101086e-20);
  if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, v2) || v6 == 1) {
    return 0;
  }
  double v3 = v2 * 1.84467441e19;
  if (!v5) {
    double v3 = 0.0;
  }
  if (specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, a1 - v3) && v6 != 1) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_181EC22F0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

unint64_t partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>(void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  return partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3);
}

{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;
  char v7;

  uint64_t result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
  if (!v4)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = v7 & 1;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;
  char v7;

  uint64_t result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, v3[4], v3[5], v3[6], v3[7], v3[8], v3[9]);
  if (!v4)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = v7 & 1;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;

  uint64_t result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
  if (!v4)
  {
    *(_DWORD *)a3 = result;
    *(unsigned char *)(a3 + 4) = BYTE4(result) & 1;
  }
  return result;
}

void *partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

{
  uint64_t v2;

  return specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

BOOL specialized static JSONDecoderImpl.isTrueZero(_:)(unsigned __int8 *a1, uint64_t a2)
{
  if (a2 >= 4)
  {
    do
    {
      int v5 = *a1;
      if ((v5 - 58) > 0xFFFFFFF6) {
        return 0;
      }
      if ((v5 | 0x20) == 0x65) {
        return 1;
      }
      int v6 = a1[1];
      if ((v6 - 58) > 0xFFFFFFF6) {
        return 0;
      }
      if ((v6 | 0x20) == 0x65) {
        return 1;
      }
      int v7 = a1[2];
      if ((v7 - 58) > 0xFFFFFFF6) {
        return 0;
      }
      if ((v7 | 0x20) == 0x65) {
        return 1;
      }
      int v8 = a1[3];
      if ((v8 - 58) > 0xFFFFFFF6) {
        return 0;
      }
      if ((v8 | 0x20) == 0x65) {
        return 1;
      }
      a1 += 4;
      a2 -= 4;
    }
    while (a2 > 3);
  }
  if (a2 != 1)
  {
    if (a2 == 2) {
      goto LABEL_7;
    }
    if (a2 == 3)
    {
      int v2 = a1[2];
      if ((v2 - 58) > 0xFFFFFFF6) {
        return 0;
      }
      if ((v2 | 0x20) != 0x65)
      {
LABEL_7:
        int v3 = a1[1];
        if ((v3 - 58) <= 0xFFFFFFF6)
        {
          if ((v3 | 0x20) == 0x65) {
            return 1;
          }
          return *a1 - 58 < 0xFFFFFFF7;
        }
        return 0;
      }
    }
    return 1;
  }
  return *a1 - 58 < 0xFFFFFFF7;
}

double specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  unint64_t v8 = v6;
  uint64_t v11 = a2;
  unint64_t v12 = a1;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }
    char v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    unint64_t v222 = a3;
    if (v25 == 48)
    {
      if (v11 >= 1) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = v11;
      }
      unint64_t v27 = v12 + v26;
      if (!specialized Collection.isEmpty.getter(v12 + v26, v11 - v26))
      {
        unsigned __int8 v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v27);
        unsigned int v29 = v28;
        BOOL v30 = v28 - 46 > 0x37 || ((1 << (v28 - 46)) & 0x80000000800001) == 0;
        uint64_t v31 = v12;
        if (v30)
        {
          unsigned __int8 v32 = v28;
          __int16 v33 = _asciiNumbers.getter();
          unint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, v222, a4);
          uint64_t v36 = v35;
          uint64_t v38 = v37;
          if (v29 < v33 || HIBYTE(v33) < v32)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v39 = xmmword_182112860;
            *(void *)(v39 + 16) = v32;
            *(void *)(v39 + 24) = v34;
            *(void *)(v39 + 32) = v36;
            *(void *)(v39 + 40) = v38;
            goto LABEL_247;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v39 = v34;
          *(void *)(v39 + 8) = v36;
          *(void *)(v39 + 16) = v38;
LABEL_110:
          *(void *)(v39 + 24) = 0;
          *(void *)(v39 + 32) = 0;
          *(void *)(v39 + 40) = 0;
          char v103 = 10;
          goto LABEL_248;
        }
        goto LABEL_46;
      }
    }
    else if ((v25 - 58) < 0xF7u)
    {
      if (v25 != 45)
      {
LABEL_300:
        __break(1u);
        goto LABEL_301;
      }
      if (v11 < 2)
      {
        unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v94 = v93;
        uint64_t v96 = v95;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v39 = 0xD000000000000010;
        *(void *)(v39 + 8) = 0x80000001823ABAE0;
        *(void *)(v39 + 16) = 45;
        goto LABEL_246;
      }
      uint64_t v31 = v12 + 1;
      unsigned __int8 v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v46 == 48)
      {
        uint64_t v47 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v47, v48, a3, a4);
        if (v6) {
          return v7;
        }
      }
      else
      {
        unsigned __int8 v108 = v46;
        if ((v46 - 49) >= 9u)
        {
          unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
          uint64_t v94 = v109;
          uint64_t v96 = v110;
          uint64_t v11 = v108;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          unint64_t v111 = 0xD000000000000013;
          unint64_t v112 = "after '-' in number";
LABEL_146:
          *(void *)uint64_t v39 = v111;
          *(void *)(v39 + 8) = (unint64_t)(v112 - 32) | 0x8000000000000000;
LABEL_238:
          *(void *)(v39 + 16) = v11;
          goto LABEL_246;
        }
      }
      goto LABEL_46;
    }
    uint64_t v31 = v12;
LABEL_46:
    uint64_t v216 = a4;
    if ((a6 & 1) != 0 && v31 + 1 < v12 + v11)
    {
      uint64_t v49 = v31 - v12 + 1;
      uint64_t v50 = v31;
      while (1)
      {
        uint64_t v51 = v50 + 1;
        if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v50 + 1) | 0x20) == 0x65) {
          break;
        }
        unint64_t v52 = v50 + 2;
        ++v49;
        ++v50;
        if (v52 >= v12 + v11) {
          goto LABEL_54;
        }
      }
      unsigned __int8 v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v50);
      __int16 v54 = _asciiNumbers.getter();
      if (v53 < v54 || HIBYTE(v54) < v53)
      {
        if (v49 < 0 || v11 - v49 < 1) {
          goto LABEL_313;
        }
        unsigned __int8 v104 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v51);
        unint64_t v105 = v51;
        unint64_t v106 = v222;
        uint64_t v107 = a4;
        goto LABEL_236;
      }
    }
LABEL_54:
    uint64_t v55 = v12 + v11 - 1;
    unsigned __int8 v56 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v55);
    if ((v56 - 58) > 0xF5u)
    {
      closure #1 in Double.init(prevalidatedBuffer:)((const char *)v12, v11, (uint64_t)&v226);
      if ((v227 & 1) == 0)
      {
        if ((~*(void *)&v226 & 0x7FF0000000000000) == 0) {
          goto LABEL_179;
        }
        double v7 = v226;
        if (v226 != 0.0) {
          return v7;
        }
        uint64_t v84 = v11;
        uint64_t v85 = v12;
        if (v11 >= 4)
        {
          uint64_t v84 = v11;
          uint64_t v85 = v12;
          do
          {
            unsigned __int8 v86 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85);
            if ((v86 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v86 | 0x20) == 0x65) {
              return v7;
            }
            unsigned __int8 v87 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + 1);
            if ((v87 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v87 | 0x20) == 0x65) {
              return v7;
            }
            unsigned __int8 v88 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + 2);
            if ((v88 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v88 | 0x20) == 0x65) {
              return v7;
            }
            unsigned __int8 v89 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + 3);
            if ((v89 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v89 | 0x20) == 0x65) {
              return v7;
            }
            uint64_t v85 = specialized BufferView.dropFirst(_:)(4, v85, v84);
            uint64_t v84 = v90;
          }
          while (v90 >= 4);
        }
        goto LABEL_215;
      }
      uint64_t v72 = specialized BufferView.suffix(from:)(v31, v12, v11);
      uint64_t v11 = v72;
      uint64_t v74 = v73;
      unint64_t v75 = v72 + v73;
      if (v73 <= 0)
      {
        unint64_t v83 = v72;
      }
      else
      {
        __int16 v76 = _asciiNumbers.getter();
        unsigned __int8 v77 = v76;
        uint64_t v78 = 0;
        unsigned int v79 = HIBYTE(v76);
        uint64_t v80 = v74;
        while (1)
        {
          if (v78 < 0) {
            goto LABEL_289;
          }
          BOOL v81 = v80-- < 1;
          if (v81) {
            goto LABEL_289;
          }
          unsigned __int8 v82 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v78);
          if (v82 < v77 || v79 < v82) {
            break;
          }
          ++v78;
          unint64_t v83 = v11 + v78;
          if (v11 + v78 >= v75) {
            goto LABEL_118;
          }
        }
        unint64_t v83 = v11 + v78;
      }
LABEL_118:
      if (v83 < v75)
      {
        uint64_t v113 = v83 - v11;
        __int16 v114 = _asciiNumbers.getter();
        unsigned __int8 v116 = v114;
        char v117 = 0;
        uint64_t v210 = v74 + v11;
        uint64_t v208 = -v11;
        char v118 = 1;
        unsigned int v119 = HIBYTE(v114);
        char v120 = 1;
        while (1)
        {
          char v213 = v120;
          char v219 = v118;
          uint64_t v121 = v210 - v83;
          unint64_t v122 = v208 + v83;
          while (1)
          {
            if ((v122 & 0x8000000000000000) != 0 || (BOOL v81 = v121 < 1, --v121, v81))
            {
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v75, v115, v216);
              uint64_t v94 = v175;
              uint64_t v96 = v176;
LABEL_244:
              unint64_t v171 = 0xE900000000000072;
              uint64_t v172 = 0x65626D756E206E69;
LABEL_245:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v39 = v172;
              *(void *)(v39 + 8) = v171;
              *(void *)(v39 + 16) = v83;
LABEL_246:
              *(void *)(v39 + 24) = v92;
              *(void *)(v39 + 32) = v94;
              *(void *)(v39 + 40) = v96;
LABEL_247:
              char v103 = 1;
              goto LABEL_248;
            }
            uint64_t v123 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v83);
            uint64_t v11 = v123;
            if (v123 < v116 || v119 < v123) {
              break;
            }
            if (__OFADD__(v113, 1)) {
              goto LABEL_241;
            }
            ++v83;
            ++v113;
            ++v122;
            if (v83 >= v75) {
              goto LABEL_242;
            }
          }
          switch((char)v123)
          {
            case '+':
            case '-':
              if (v113 != 0 || (v117 & 1) == 0) {
                goto LABEL_139;
              }
              uint64_t v113 = 0;
              char v117 = 0;
              char v118 = 0;
              char v120 = 0;
              if (++v83 >= v75) {
                goto LABEL_292;
              }
              continue;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_139;
            case '.':
              if (v113 < 1 || (v213 & 1) == 0) {
                goto LABEL_139;
              }
              uint64_t v113 = 0;
              char v117 = 0;
              char v120 = 0;
              ++v83;
              char v118 = 1;
              if (v83 < v75) {
                continue;
              }
              __break(1u);
              goto LABEL_139;
            case 'E':
              goto LABEL_133;
            default:
              if (v123 != 101) {
                goto LABEL_139;
              }
LABEL_133:
              if (v113 < 1 || (v219 & 1) == 0)
              {
LABEL_139:
                unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v83, v222, v216);
                uint64_t v94 = v124;
                uint64_t v96 = v125;
                uint64_t v11 = v11;
                goto LABEL_237;
              }
              uint64_t v113 = 0;
              char v118 = 0;
              char v120 = 0;
              ++v83;
              char v117 = 1;
              if (v83 >= v75) {
                goto LABEL_293;
              }
              break;
          }
        }
      }
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
      goto LABEL_305;
    }
    unsigned __int8 v57 = v56;
    unint64_t v58 = v222;
    if (!specialized static Comparable.<= infix(_:_:)(v222, v12 + v11 - 1)) {
      goto LABEL_296;
    }
    if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v222 + a4)) {
      goto LABEL_297;
    }
    unint64_t v59 = specialized min<A>(_:_:)(v12 + v11, v222 + a4);
    if (v59 <= v222)
    {
      uint64_t v69 = 0;
      uint64_t v63 = 1;
      goto LABEL_103;
    }
    unint64_t v60 = v59;
    unint64_t v61 = a4 + v222;
    uint64_t v62 = -(uint64_t)v222;
    uint64_t v63 = 1;
    unsigned __int8 v212 = v57;
    unint64_t v217 = a4 + v222;
LABEL_59:
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    unint64_t v66 = v61 - v58;
    unint64_t v67 = v62 + v58;
    while ((uint64_t)(v67 + v65) >= 0 && (uint64_t)(v66 + v64) >= 1)
    {
      int v68 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v58 + v65);
      if (v68 == 10)
      {
        BOOL v70 = __OFADD__(v63++, 1);
        if (!v70)
        {
          v58 += v65 + 1;
          goto LABEL_76;
        }
        goto LABEL_304;
      }
      if (v68 == 13)
      {
        uint64_t v71 = v58 + v65;
        if (!specialized static Comparable.<= infix(_:_:)(v58 + v65 + 1, v55)) {
          goto LABEL_74;
        }
        if (((v58 - v222 + v65 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v65 + v66) >= 1)
        {
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v58 + v65 + 1) == 10) {
            uint64_t v71 = v58 + v65 + 1;
          }
LABEL_74:
          BOOL v70 = __OFADD__(v63++, 1);
          if (!v70)
          {
            unint64_t v58 = v71 + 1;
LABEL_76:
            unint64_t v61 = v217;
            uint64_t v62 = -(uint64_t)v222;
            if (v58 >= v60)
            {
              uint64_t v69 = 0;
LABEL_78:
              unint64_t v58 = v222;
              unsigned __int8 v57 = v212;
LABEL_103:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v91 = 0xD000000000000010;
              *(void *)(v91 + 8) = 0x80000001823ABAE0;
              *(void *)(v91 + 16) = v57;
              *(void *)(v91 + 24) = v63;
              *(void *)(v91 + 32) = v69;
              *(void *)(v91 + 40) = v55 - v58;
              *(unsigned char *)(v91 + 48) = 1;
              goto LABEL_249;
            }
            goto LABEL_59;
          }
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
        }
        __break(1u);
LABEL_312:
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
        JUMPOUT(0x181EC3AD8);
      }
      uint64_t v69 = v65 + 1;
      if (__OFADD__(v65, 1)) {
        goto LABEL_288;
      }
      ++v65;
      --v64;
      if (v58 + v65 >= v60) {
        goto LABEL_78;
      }
    }
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
    goto LABEL_290;
  }
  if (!a2)
  {
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  char v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v13 == 48)
  {
    uint64_t v216 = a4;
    if (v11 >= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v11;
    }
    unint64_t v15 = v12 + v14;
    uint64_t v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      unsigned __int8 v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
      char v18 = 0;
      if (v17 <= 0x57u)
      {
        unint64_t v40 = v12;
        if (v17 == 46 || v17 == 69) {
          goto LABEL_151;
        }
LABEL_107:
        __int16 v97 = _asciiNumbers.getter();
        unint64_t v98 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v216);
        uint64_t v100 = v99;
        uint64_t v102 = v101;
        if (v17 < v97 || HIBYTE(v97) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v39 = xmmword_182112860;
          *(void *)(v39 + 16) = v17;
          *(void *)(v39 + 24) = v98;
          *(void *)(v39 + 32) = v100;
          *(void *)(v39 + 40) = v102;
          goto LABEL_247;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v39 = v98;
        *(void *)(v39 + 8) = v100;
        *(void *)(v39 + 16) = v102;
        goto LABEL_110;
      }
      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          unsigned __int8 v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19)) {
            goto LABEL_14;
          }
          unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v216);
          uint64_t v94 = v179;
          uint64_t v96 = v180;
          uint64_t v11 = v19;
          goto LABEL_237;
        }
        if (v16 < 1) {
          goto LABEL_316;
        }
        unsigned __int8 v104 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        unint64_t v105 = v15;
        unint64_t v106 = a3;
        uint64_t v107 = v216;
LABEL_236:
        unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v105, v106, v107);
        uint64_t v94 = v173;
        uint64_t v96 = v174;
        uint64_t v11 = v104;
LABEL_237:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v39 = xmmword_182112860;
        goto LABEL_238;
      }
      if (v17 != 101)
      {
        if (v17 == 88) {
          goto LABEL_12;
        }
        goto LABEL_107;
      }
LABEL_150:
      unint64_t v40 = v12;
      goto LABEL_151;
    }
LABEL_149:
    char v18 = 0;
    goto LABEL_150;
  }
  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    uint64_t v216 = a4;
    goto LABEL_149;
  }
  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1) {
          goto LABEL_315;
        }
        unsigned __int8 v126 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v94 = v127;
        uint64_t v96 = v128;
        uint64_t v11 = v126;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        unint64_t v111 = 0xD000000000000010;
        unint64_t v112 = "at end of number";
        goto LABEL_146;
      }
      unint64_t v40 = v12 + 1;
      unsigned __int8 v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v41 == 48)
      {
        long long v42 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        unint64_t v44 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)(v42, v43, (unsigned __int8 *)(v12 + 1), a3, a4);
        if (v6) {
          return v7;
        }
        unint64_t v40 = (unint64_t)v44;
        uint64_t v216 = a4;
        if ((v45 & 1) == 0)
        {
          char v18 = 0;
          goto LABEL_151;
        }
LABEL_14:
        if (*(unsigned char *)v12 != 45) {
          goto LABEL_269;
        }
        uint64_t v20 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned char *)v12, v11, 1, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          *(double *)&unint64_t v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v20));
          if ((v23 & 1) == 0) {
            return *(double *)&v22;
          }
        }
        goto LABEL_179;
      }
      unsigned __int8 v178 = v41;
      if ((v41 - 49) < 9u) {
        goto LABEL_252;
      }
      if (v41 == 46) {
        goto LABEL_280;
      }
      if (v41 == 78)
      {
        uint64_t v196 = a4;
        char v18 = 1;
        uint64_t v197 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(v197, v198, a3, v196);
        if (v6) {
          return v7;
        }
        uint64_t v216 = v196;
        goto LABEL_151;
      }
      if (v41 != 73)
      {
        double v226 = 0.0;
        unint64_t v227 = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v199._uint64_t countAndFlagsBits = 0x27207265746661;
        v199._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v199);
        unsigned __int8 v200 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        unsigned int v201 = (v200 + 1);
        if ((v200 & 0x80) != 0) {
          unsigned int v201 = (((v200 & 0x3F) << 8) | (v200 >> 6)) + 33217;
        }
        uint64_t v225 = (v201 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v201) >> 3)) & 7)));
        v202._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v225);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v202);
        swift_bridgeObjectRelease();
        v203._uint64_t countAndFlagsBits = 0x6D756E206E692027;
        v203._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v203);
        double v204 = v226;
        unint64_t v205 = v227;
        unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, a3, a4);
        uint64_t v94 = v206;
        uint64_t v96 = v207;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(double *)uint64_t v39 = v204;
        *(void *)(v39 + 8) = v205;
        *(void *)(v39 + 16) = v178;
        goto LABEL_246;
      }
      uint64_t v189 = a4;
      char v18 = 1;
      uint64_t v190 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v190, v191, a3, v189);
      if (v6) {
        return v7;
      }
      uint64_t v216 = v189;
LABEL_151:
      uint64_t v131 = v12 + v11 - 1;
      unsigned __int8 v132 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v131);
      if ((v132 | 0x20) != 0x65)
      {
        specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
        if ((v142 & 1) == 0)
        {
          double v7 = v141;
          if ((~*(void *)&v141 & 0x7FF0000000000000) == 0)
          {
            if (v18) {
              return v7;
            }
            goto LABEL_179;
          }
          goto LABEL_213;
        }
        uint64_t v147 = specialized BufferView.suffix(from:)(v40, v12, v11);
        if (v148 < 1) {
          goto LABEL_306;
        }
        uint64_t v149 = v147;
        uint64_t v150 = v148;
        unint64_t v12 = v147 + v148;
        int v151 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v147);
        if (v151 == 45 || (uint64_t v11 = v149, v151 == 43)) {
          uint64_t v11 = v149 + 1;
        }
        unint64_t v224 = a3;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12)) {
          goto LABEL_307;
        }
        if (v11 - v149 < 0) {
          goto LABEL_308;
        }
        if ((uint64_t)(v12 - v11) < 0) {
          goto LABEL_309;
        }
        uint64_t v152 = (const char *)specialized BufferView.prefix(_:)(2, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v152, v153))
        {
          if (v11 < v12)
          {
            __int16 v154 = _asciiNumbers.getter();
            unsigned __int8 v155 = v154;
            char v156 = 0;
            char v157 = 0;
            uint64_t v211 = v150 + v149;
            uint64_t v209 = -v149;
            char v158 = 1;
            unsigned int v159 = HIBYTE(v154);
            while (1)
            {
              char v215 = v158;
              char v221 = v156;
              unint64_t v75 = 0;
              uint64_t v160 = v211 - v11;
              while (1)
              {
                if ((uint64_t)(v209 + v11 + v75) < 0 || (BOOL v81 = v160 < 1, --v160, v81))
                {
                  __break(1u);
LABEL_267:
                  __break(1u);
LABEL_268:
                  __break(1u);
LABEL_269:
                  unint64_t v186 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v12, v11, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v187 & 1) == 0)
                  {
                    *(double *)&unint64_t v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v186));
                    if ((v188 & 1) == 0) {
                      return *(double *)&v22;
                    }
                  }
LABEL_179:
                  uint64_t v143 = static String._fromUTF8Repairing(_:)();
                  uint64_t v145 = v144;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v39 = v143;
                  *(void *)(v39 + 8) = v145;
                  *(_OWORD *)(v39 + 16) = 0u;
                  *(_OWORD *)(v39 + 32) = 0u;
                  char v103 = 11;
LABEL_248:
                  *(unsigned char *)(v39 + 48) = v103;
                  goto LABEL_249;
                }
                unsigned __int8 v161 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v75);
                LOBYTE(v83) = v161;
                if (v161 < v155 || v159 < v161) {
                  break;
                }
                if (__OFADD__(v75, 1)) {
                  goto LABEL_267;
                }
                ++v75;
                if (v11 + v75 >= v12) {
                  goto LABEL_268;
                }
              }
              unint64_t v115 = a3;
              switch(v161)
              {
                case '+':
                case '-':
                  if (v75 != 0 || (v221 & 1) == 0) {
                    goto LABEL_243;
                  }
                  char v156 = 0;
                  char v158 = 0;
                  v11 += v75 + 1;
                  char v157 = 3;
                  if (v11 >= v12) {
                    goto LABEL_299;
                  }
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_243;
                case '.':
                  if ((v215 & 1) == 0)
                  {
                    unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v75, a3, v216);
                    uint64_t v94 = v192;
                    uint64_t v96 = v193;
                    LOBYTE(v83) = 46;
                    goto LABEL_244;
                  }
                  char v156 = 0;
                  char v158 = 0;
                  v11 += v75 + 1;
                  char v157 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_213:
                    if (v7 != 0.0) {
                      return v7;
                    }
                    uint64_t v84 = v11;
                    uint64_t v85 = v12;
                    if (v11 >= 4)
                    {
                      uint64_t v84 = v11;
                      uint64_t v85 = v12;
                      do
                      {
                        unsigned __int8 v181 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85);
                        if ((v181 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v181 | 0x20) == 0x65) {
                          return v7;
                        }
                        unsigned __int8 v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + 1);
                        if ((v182 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v182 | 0x20) == 0x65) {
                          return v7;
                        }
                        unsigned __int8 v183 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + 2);
                        if ((v183 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v183 | 0x20) == 0x65) {
                          return v7;
                        }
                        unsigned __int8 v184 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + 3);
                        if ((v184 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v184 | 0x20) == 0x65) {
                          return v7;
                        }
                        uint64_t v85 = specialized BufferView.dropFirst(_:)(4, v85, v84);
                        uint64_t v84 = v185;
                      }
                      while (v185 >= 4);
                    }
LABEL_215:
                    if (v84 != 1)
                    {
                      if (v84 != 2)
                      {
                        if (v84 != 3) {
                          return v7;
                        }
                        unsigned __int8 v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + 2);
                        if ((v162 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v162 | 0x20) == 0x65) {
                          return v7;
                        }
                      }
                      unsigned __int8 v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + 1);
                      if ((v163 - 49) < 9u) {
                        goto LABEL_179;
                      }
                      if ((v163 | 0x20) == 0x65) {
                        return v7;
                      }
                    }
                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85)
                                         - 49) >= 9u)
                      return v7;
                    goto LABEL_179;
                  }
                  break;
                case 'E':
                  goto LABEL_206;
                default:
                  unint64_t v115 = a3;
                  if (v161 != 101) {
                    goto LABEL_243;
                  }
LABEL_206:
                  if (v157 != 1 && (v157 || (uint64_t)v75 < 1)) {
                    goto LABEL_243;
                  }
                  char v158 = 0;
                  v11 += v75 + 1;
                  char v157 = 2;
                  char v156 = 1;
                  if (v11 < v12) {
                    continue;
                  }
                  goto LABEL_298;
              }
            }
          }
          goto LABEL_312;
        }
        unint64_t v164 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v164 >= v12 || ((v164 - v149) & 0x8000000000000000) != 0)
        {
LABEL_232:
          __break(1u);
        }
        else
        {
          uint64_t v165 = v150 + v149 - v11 - 3;
          uint64_t v166 = v11 - v149 + 3;
          while (1)
          {
            uint64_t v167 = v166;
            unsigned __int8 v168 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v164);
            if (!UInt8.isValidHexDigit.getter(v168)) {
              break;
            }
            BOOL v81 = v165-- < 1;
            if (!v81 && ++v164 < v12)
            {
              uint64_t v166 = v167 + 1;
              if ((v167 & 0x8000000000000000) == 0) {
                continue;
              }
            }
            goto LABEL_232;
          }
        }
        LOBYTE(v83) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v164);
        unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v164, v224, v216);
        uint64_t v94 = v169;
        uint64_t v96 = v170;
        unint64_t v171 = 0xED00007265626D75;
        uint64_t v172 = 0x6E20786568206E69;
        goto LABEL_245;
      }
      unsigned __int8 v133 = v132;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1)) {
        goto LABEL_294;
      }
      a4 = v216;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v216)) {
        goto LABEL_295;
      }
      unint64_t v134 = specialized min<A>(_:_:)(v12 + v11, a3 + v216);
      if (v134 <= a3)
      {
        a4 = 0;
        uint64_t v11 = 1;
        goto LABEL_181;
      }
      unint64_t v8 = v134;
      unint64_t v135 = v216 + a3;
      uint64_t v136 = -(uint64_t)a3;
      uint64_t v11 = 1;
      uint64_t v220 = -(uint64_t)a3;
      unint64_t v223 = a3;
      unsigned __int8 v214 = v133;
      unint64_t v218 = v216 + a3;
      do
      {
        uint64_t v137 = 0;
        unint64_t v12 = 0;
        unint64_t v40 = v135 - a3;
        unint64_t v138 = v136 + a3;
        while (1)
        {
          if ((uint64_t)(v138 + v12) < 0 || (uint64_t)(v40 + v137) < 1)
          {
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            uint64_t v194 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v194, v195, a3, a4);
            if (v8) {
              return v7;
            }
LABEL_252:
            uint64_t v216 = a4;
            char v18 = 0;
            goto LABEL_151;
          }
          int v139 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v12);
          if (v139 == 10)
          {
            BOOL v70 = __OFADD__(v11++, 1);
            if (!v70)
            {
              a3 += v12 + 1;
              goto LABEL_173;
            }
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
            goto LABEL_303;
          }
          if (v139 == 13) {
            break;
          }
          a4 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_279;
          }
          ++v12;
          --v137;
          if (a3 + v12 >= v8) {
            goto LABEL_175;
          }
        }
        uint64_t v140 = a3 + v12;
        a4 = a3 + v12 + 1;
        if (!specialized static Comparable.<= infix(_:_:)(a4, v131)) {
          goto LABEL_171;
        }
        if (((v220 + a3 + v12 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v12 + v40) < 1) {
          goto LABEL_310;
        }
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v12 + 1) == 10) {
          uint64_t v140 = a3 + v12 + 1;
        }
LABEL_171:
        BOOL v70 = __OFADD__(v11++, 1);
        if (v70) {
          goto LABEL_302;
        }
        a3 = v140 + 1;
LABEL_173:
        unint64_t v135 = v218;
        uint64_t v136 = v220;
      }
      while (a3 < v8);
      a4 = 0;
LABEL_175:
      a3 = v223;
      unsigned __int8 v133 = v214;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v146 = 0xD000000000000010;
      *(void *)(v146 + 8) = 0x80000001823ABAE0;
      *(void *)(v146 + 16) = v133;
      *(void *)(v146 + 24) = v11;
      *(void *)(v146 + 32) = a4;
      *(void *)(v146 + 40) = v131 - a3;
      *(unsigned char *)(v146 + 48) = 1;
LABEL_249:
      swift_willThrow();
      return v7;
    case '.':
      int64_t v129 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v129, v130, a3, a4);
      if (!v6) {
        goto LABEL_148;
      }
      return v7;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_142;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_142:
      if (v6) {
        return v7;
      }
      uint64_t v216 = a4;
      char v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_314;
  }
}

float specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    unint64_t v12 = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (v6) {
      return v7;
    }
    __int16 v14 = v13;
    if (v13)
    {
      if (a2 && *__s1 == 45)
      {
        uint64_t v22 = specialized _parseJSON5Integer<A>(_:isHex:)(__s1, a2, 1, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if (v23) {
          goto LABEL_26;
        }
        unint64_t v24 = specialized Float.init<A>(exactly:)(v22);
        if ((v24 & 0x100000000) != 0) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v27 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
        if (v28) {
          goto LABEL_26;
        }
        unint64_t v24 = specialized Float.init<A>(exactly:)(v27);
        if ((v24 & 0x100000000) != 0) {
          goto LABEL_26;
        }
      }
      return *(float *)&v24;
    }
    unint64_t v15 = (char *)v12;
    unint64_t v34 = 0;
    float v16 = _stringshims_strtof_l(__s1, &v34, 0);
    unsigned __int8 v17 = &__s1[a2];
    if (v34 && v17 == v34)
    {
      float v7 = v16;
      if ((~LODWORD(v16) & 0x7F800000) == 0)
      {
        if ((v14 & 0x100) != 0) {
          return v7;
        }
        goto LABEL_26;
      }
      goto LABEL_13;
    }
    if ((((v15 - __s1) | (v17 - v15)) & 0x8000000000000000) == 0)
    {
      specialized static JSON5Scanner.validateNumber(from:fullSource:)(v15, v17 - v15, a3, a4, (uint64_t)v35);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v26 = v35;
      goto LABEL_29;
    }
    goto LABEL_33;
  }
  char v18 = specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
  if (v6) {
    return v7;
  }
  unsigned __int8 v19 = v18;
  unint64_t v34 = 0;
  float v20 = _stringshims_strtof_l(__s1, &v34, 0);
  char v21 = &__s1[a2];
  if (!v34 || v21 != v34)
  {
    if ((((v19 - (unsigned __int8 *)__s1) | (v21 - (char *)v19)) & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(v19, v21 - (char *)v19, a3, a4, (uint64_t)v36);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v26 = v36;
LABEL_29:
      outlined init with take of JSONError((uint64_t)v26, v25);
      goto LABEL_30;
    }
    __break(1u);
LABEL_33:
    __break(1u);
  }
  float v7 = v20;
  if ((~LODWORD(v20) & 0x7F800000) == 0)
  {
LABEL_26:
    uint64_t v29 = static String._fromUTF8Repairing(_:)();
    uint64_t v31 = v30;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v32 = v29;
    *(void *)(v32 + 8) = v31;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 32) = 0u;
    *(unsigned char *)(v32 + 48) = 11;
LABEL_30:
    swift_willThrow();
    return v7;
  }
LABEL_13:
  if (v7 == 0.0 && !specialized static JSONDecoderImpl.isTrueZero(_:)((unsigned __int8 *)__s1, a2)) {
    goto LABEL_26;
  }
  return v7;
}

unint64_t specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(void *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a5;
  v13[1] = a6;
  v12[0] = a7;
  v12[1] = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (specialized String.withUTF8<A>(_:)(v14, a2, a1))
  {
    unint64_t v10 = 0x7FF0000000000000;
  }
  else if (specialized String.withUTF8<A>(_:)(v13, a2, a1))
  {
    unint64_t v10 = 0xFFF0000000000000;
  }
  else if (specialized String.withUTF8<A>(_:)(v12, a2, a1))
  {
    unint64_t v10 = 0x7FF8000000000000;
  }
  else
  {
    unint64_t v10 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14[2];
  uint64_t v15[2];
  uint64_t v16[2];

  v16[0] = a3;
  v16[1] = a4;
  v15[0] = a5;
  v15[1] = a6;
  v14[0] = a7;
  v14[1] = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (specialized String.withUTF8<A>(_:)(v16, a2, a1))
  {
    unint64_t v10 = 0;
    uint64_t v11 = 2139095040;
  }
  else if (specialized String.withUTF8<A>(_:)(v15, a2, a1))
  {
    unint64_t v10 = 0;
    uint64_t v11 = 4286578688;
  }
  else
  {
    unint64_t v12 = specialized String.withUTF8<A>(_:)(v14, a2, a1);
    unint64_t v10 = v12 ^ 1;
    if (v12) {
      uint64_t v11 = 2143289344;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 | ((unint64_t)(v10 & 1) << 32);
}

unint64_t partial apply for closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v5 + 16), *(unsigned char *)(v5 + 17), a5);
}

void *partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(void *a1)
{
  return partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1);
}

unint64_t specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(const void *a1, size_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((a4 & 0x1000000000000000) != 0)
  {
    a3 = static String._copying(_:)();
    unint64_t v39 = v19;
    swift_bridgeObjectRelease();
    a4 = v39;
    if ((v39 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v37 = a3;
    uint64_t v38 = a4 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a4) & 0xF) != a2) {
      goto LABEL_11;
    }
    char v18 = &v37;
    unsigned __int8 v17 = a1;
    goto LABEL_10;
  }
  if ((a4 & 0x2000000000000000) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a3 & 0xFFFFFFFFFFFFLL) != a2) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v16 = _StringObject.sharedUTF8.getter();
    if (v33 != a2) {
      goto LABEL_11;
    }
  }
  if (!v16)
  {
    __break(1u);
    goto LABEL_43;
  }
  unsigned __int8 v17 = a1;
  char v18 = (void *)v16;
LABEL_10:
  if (!memcmp(v17, v18, a2))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v23 = 0;
    uint64_t v24 = 2139095040;
    goto LABEL_41;
  }
LABEL_11:
  if ((a6 & 0x1000000000000000) == 0)
  {
    if ((a6 & 0x2000000000000000) == 0) {
      goto LABEL_13;
    }
LABEL_19:
    uint64_t v37 = a5;
    uint64_t v38 = a6 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a6) & 0xF) != a2) {
      goto LABEL_22;
    }
    uint64_t v22 = &v37;
    char v21 = a1;
    goto LABEL_21;
  }
  a5 = static String._copying(_:)();
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  a6 = v26;
  if ((v26 & 0x2000000000000000) != 0) {
    goto LABEL_19;
  }
LABEL_13:
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v20 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a5 & 0xFFFFFFFFFFFFLL) != a2) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v20 = _StringObject.sharedUTF8.getter();
    if (v34 != a2) {
      goto LABEL_22;
    }
  }
  if (!v20)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  char v21 = a1;
  uint64_t v22 = (void *)v20;
LABEL_21:
  if (!memcmp(v21, v22, a2))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v23 = 0;
    uint64_t v24 = 4286578688;
    goto LABEL_41;
  }
LABEL_22:
  if ((a8 & 0x1000000000000000) == 0)
  {
    if ((a8 & 0x2000000000000000) == 0) {
      goto LABEL_24;
    }
LABEL_30:
    uint64_t v37 = a7;
    uint64_t v38 = a8 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a8) & 0xF) == a2)
    {
      uint64_t v29 = &v37;
      char v28 = a1;
      goto LABEL_32;
    }
    goto LABEL_38;
  }
  a7 = static String._copying(_:)();
  unint64_t v31 = v30;
  swift_bridgeObjectRelease();
  a8 = v31;
  if ((v31 & 0x2000000000000000) != 0) {
    goto LABEL_30;
  }
LABEL_24:
  if ((a7 & 0x1000000000000000) != 0)
  {
    uint64_t v27 = (a8 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a7 & 0xFFFFFFFFFFFFLL) == a2) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v27 = _StringObject.sharedUTF8.getter();
    if (v35 == a2)
    {
LABEL_26:
      if (v27)
      {
        char v28 = a1;
        uint64_t v29 = (void *)v27;
LABEL_32:
        BOOL v32 = memcmp(v28, v29, a2) == 0;
        goto LABEL_39;
      }
LABEL_44:
      __break(1u);
      JUMPOUT(0x181EC4934);
    }
  }
LABEL_38:
  BOOL v32 = 0;
LABEL_39:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL v23 = !v32;
  uint64_t v24 = 2143289344;
  if (!v32) {
    uint64_t v24 = 0;
  }
LABEL_41:
  LOBYTE(v37) = v23;
  return v24 | ((unint64_t)v23 << 32);
}

unint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(__int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  v115[0] = 0;
  double v15 = _stringshims_strtod_l(a2, v115, 0);
  if (v115[0]) {
    BOOL v16 = &a2[a3] == v115[0];
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v28 = v15;
    if (!specialized static FixedWidthInteger._convert<A>(from:)(v115, v15) || (BYTE1(v115[0]) & 1) != 0) {
      goto LABEL_44;
    }
    if (fabs(v28) < 9.00719925e15) {
      return LOBYTE(v115[0]);
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v118);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v118, (uint64_t)&v119);
  if (v123 != 1) {
    goto LABEL_43;
  }
  unsigned __int8 v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  unint64_t v19 = (unsigned __int8 *)v17;
  unint64_t v20 = v18;
  unint64_t v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      unint64_t v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21) {
        goto LABEL_259;
      }
      char v56 = 0;
      unint64_t v57 = v45 - (void)v19;
      char v58 = 1;
      char v59 = 1;
      while (2)
      {
        uint64_t v60 = 0;
        uint64_t v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (void)v19 + v60) < 0 || (BOOL v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            unint64_t v80 = v45 + v60;
            if (v45 + v60 < a4) {
              goto LABEL_266;
            }
            unint64_t v81 = a4 + a5;
            if (a4 + a5 < v80) {
              goto LABEL_266;
            }
            if (v81 >= v45 + v60 + 1) {
              unint64_t v81 = v45 + v60 + 1;
            }
            if (v81 <= a4)
            {
              a3 = 0;
              a5 = 1;
            }
            else
            {
              unint64_t v82 = a5 + a4;
              a5 = 1;
              unint64_t v83 = a4;
              do
              {
                uint64_t v84 = 0;
                uint64_t v85 = 0;
                unint64_t v86 = v82 - v83;
                while (1)
                {
                  if ((uint64_t)(v83 - a4 + v85) < 0 || (uint64_t)(v86 + v84) < 1) {
                    goto LABEL_250;
                  }
                  int v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1);
                    if (v74) {
                      goto LABEL_271;
                    }
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }
                  if (v87 == 13) {
                    break;
                  }
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1)) {
                    goto LABEL_251;
                  }
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81) {
                    goto LABEL_212;
                  }
                }
                uint64_t v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (((v83 - a4 + v85 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v85 + v86) < 1) {
                    goto LABEL_277;
                  }
                  if (*(unsigned char *)(v88 + 1) == 10) {
                    uint64_t v88 = v83 + v85 + 1;
                  }
                }
                BOOL v74 = __OFADD__(a5++, 1);
                if (v74) {
                  goto LABEL_272;
                }
                unint64_t v83 = v88 + 1;
LABEL_171:
                ;
              }
              while (v83 < v81);
              a3 = 0;
            }
LABEL_212:
            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v40 = xmmword_182112860;
            *(void *)(v40 + 16) = v8;
            *(void *)(v40 + 24) = a5;
            *(void *)(v40 + 32) = a3;
            *(void *)(v40 + 40) = a4;
            char v41 = 1;
            goto LABEL_45;
          }
          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if ((v8 - 58) < 0xFFFFFFF6) {
            break;
          }
          if (__OFADD__(v57 + v60, 1)) {
            goto LABEL_146;
          }
          ++v60;
          if (v45 + v60 >= v21) {
            goto LABEL_147;
          }
        }
        uint64_t v62 = v57 + v60;
        switch(*(unsigned char *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0) {
              goto LABEL_142;
            }
            unint64_t v57 = 0;
            char v56 = 0;
            char v58 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21) {
              goto LABEL_244;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              unint64_t v93 = v45 + v60;
              if (v45 + v60 < a4) {
                goto LABEL_270;
              }
              unint64_t v94 = a4 + a5;
              if (a4 + a5 < v93) {
                goto LABEL_270;
              }
              if (v94 >= v45 + v60 + 1) {
                unint64_t v94 = v45 + v60 + 1;
              }
              if (v94 <= a4)
              {
                a3 = 0;
                a5 = 1;
              }
              else
              {
                unint64_t v95 = a5 + a4;
                a5 = 1;
                unint64_t v96 = a4;
                do
                {
                  uint64_t v97 = 0;
                  uint64_t v98 = 0;
                  unint64_t v99 = v95 - v96;
                  while (1)
                  {
                    if ((uint64_t)(v96 - a4 + v98) < 0 || (uint64_t)(v99 + v97) < 1) {
                      goto LABEL_253;
                    }
                    int v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      BOOL v74 = __OFADD__(a5++, 1);
                      if (v74) {
                        goto LABEL_275;
                      }
                      v96 += v98 + 1;
                      goto LABEL_209;
                    }
                    if (v100 == 13) {
                      break;
                    }
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1)) {
                      goto LABEL_254;
                    }
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94) {
                      goto LABEL_239;
                    }
                  }
                  uint64_t v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (((v96 - a4 + v98 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v98 + v99) < 1) {
                      goto LABEL_280;
                    }
                    if (*(unsigned char *)(v101 + 1) == 10) {
                      uint64_t v101 = v96 + v98 + 1;
                    }
                  }
                  BOOL v74 = __OFADD__(a5++, 1);
                  if (v74) {
                    goto LABEL_276;
                  }
                  unint64_t v96 = v101 + 1;
LABEL_209:
                  ;
                }
                while (v96 < v94);
                a3 = 0;
              }
LABEL_239:
              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }
            unint64_t v57 = 0;
            char v56 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            char v58 = 1;
            if (v45 < v21) {
              continue;
            }
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if (v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }
LABEL_98:
            if (v62 < 1 || (v58 & 1) == 0) {
              goto LABEL_148;
            }
            unint64_t v57 = 0;
            char v58 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            char v56 = 1;
            if (v45 >= v21) {
              goto LABEL_245;
            }
            continue;
        }
        goto LABEL_104;
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v18;
    while (1)
    {
      if (v43 < 0 || (BOOL v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }
      if (v17[v43] - 58 < 0xFFFFFFF6) {
        break;
      }
      unint64_t v45 = (unint64_t)&v17[++v43];
      if ((unint64_t)&v17[v43] >= v21) {
        goto LABEL_84;
      }
    }
LABEL_83:
    unint64_t v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }
  if (v18 < 1) {
    goto LABEL_255;
  }
  int v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (unint64_t v8 = v17, v22 == 43)) {
    unint64_t v8 = v17 + 1;
  }
  if (v21 < (unint64_t)v8) {
    goto LABEL_256;
  }
  unint64_t v14 = v8 - v17;
  if (v8 - v17 < 0) {
    goto LABEL_257;
  }
  if ((uint64_t)(v21 - (void)v8) < 0) {
    goto LABEL_258;
  }
  if ((uint64_t)(v21 - (void)v8) >= 2) {
    size_t v23 = 2;
  }
  else {
    size_t v23 = v21 - (void)v8;
  }
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0))
  {
    unint64_t v52 = (unsigned __int8 *)(v8 + 2);
    uint64_t v43 = v21 - (void)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      uint64_t v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        uint64_t v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        unint64_t v53 = v14 + 3;
        do
        {
          unint64_t v54 = v53;
          unint64_t v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1 << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            if ((unint64_t)v52 < a4) {
              goto LABEL_264;
            }
            unint64_t v66 = a4 + a5;
            if (a4 + a5 < (unint64_t)v52) {
              goto LABEL_264;
            }
            if (v66 >= (unint64_t)(v52 + 1)) {
              unint64_t v66 = (unint64_t)(v52 + 1);
            }
            if (v66 <= a4)
            {
              uint64_t v73 = 0;
              unint64_t v14 = 0xED00007265626D75;
              unint64_t v21 = 0x6E20786568206E69;
              a5 = 1;
              goto LABEL_174;
            }
            uint64_t v67 = -(uint64_t)a4;
            unint64_t v68 = a5 + a4;
            a5 = 1;
            while (1)
            {
              uint64_t v69 = 0;
              uint64_t v70 = 0;
              unint64_t v71 = v68 - a4;
              while (1)
              {
                if ((uint64_t)(v67 + a4 + v70) < 0 || (uint64_t)(v71 + v69) < 1) {
                  goto LABEL_246;
                }
                int v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10) {
                  break;
                }
                if (v72 == 13)
                {
                  uint64_t v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (((v67 + a4 + v70 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v70 + v71) < 1) {
                      goto LABEL_273;
                    }
                    if (*(unsigned char *)(v75 + 1) == 10) {
                      uint64_t v75 = a4 + v70 + 1;
                    }
                  }
                  BOOL v74 = __OFADD__(a5++, 1);
                  if (v74) {
                    goto LABEL_268;
                  }
                  a4 = v75 + 1;
                  goto LABEL_140;
                }
                uint64_t v73 = v70 + 1;
                if (__OFADD__(v70, 1)) {
                  goto LABEL_247;
                }
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  unint64_t v14 = 0xED00007265626D75;
                  unint64_t v21 = 0x6E20786568206E69;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v40 = v21;
                  *(void *)(v40 + 8) = v14;
                  *(void *)(v40 + 16) = v20;
                  *(void *)(v40 + 24) = a5;
                  *(void *)(v40 + 32) = v73;
                  *(void *)(v40 + 40) = a3;
                  char v41 = 1;
                  goto LABEL_45;
                }
              }
              BOOL v74 = __OFADD__(a5++, 1);
              if (v74) {
                goto LABEL_267;
              }
              a4 += v70 + 1;
LABEL_140:
              unint64_t v14 = 0xED00007265626D75;
              unint64_t v21 = 0x6E20786568206E69;
              if (a4 >= v66)
              {
                uint64_t v73 = 0;
                goto LABEL_174;
              }
            }
          }
          BOOL v31 = v43-- < 1;
          if (v31) {
            break;
          }
          if ((unint64_t)++v52 >= v21) {
            break;
          }
          ++a3;
          ++v53;
        }
        while ((v54 & 0x8000000000000000) == 0);
      }
    }
    __break(1u);
    goto LABEL_83;
  }
  if ((unint64_t)v8 >= v21) {
    goto LABEL_263;
  }
  char v24 = 0;
  char v25 = 0;
  unint64_t v26 = (const char *)&v19[v20];
  char v27 = 1;
LABEL_24:
  uint64_t v29 = 0;
  uint64_t v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    BOOL v31 = v30-- < 1;
    if (v31) {
      break;
    }
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0) {
            goto LABEL_143;
          }
          char v24 = 0;
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 3;
          if ((unint64_t)v8 >= v21) {
            goto LABEL_248;
          }
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            unint64_t v102 = (unint64_t)&v8[v29];
            if ((unint64_t)&v8[v29] < a4) {
              goto LABEL_274;
            }
            unint64_t v103 = a4 + a5;
            if (a4 + a5 < v102) {
              goto LABEL_274;
            }
            if (v103 >= (unint64_t)&v8[v29 + 1]) {
              unint64_t v103 = (unint64_t)&v8[v29 + 1];
            }
            if (v103 > a4)
            {
              unint64_t v104 = a5 + a4;
              a5 = 1;
              unint64_t v105 = a4;
              while (1)
              {
                uint64_t v106 = 0;
                uint64_t v107 = 0;
                unint64_t v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }
                  int v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }
                    goto LABEL_278;
                  }
                  if (v109 == 13) {
                    break;
                  }
                  uint64_t v73 = v107 + 1;
                  if (__OFADD__(v107, 1)) {
                    goto LABEL_262;
                  }
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103) {
                    goto LABEL_242;
                  }
                }
                uint64_t v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v115[0] = 0;
                    v115[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v115, "Invalid index ");
                    HIBYTE(v115[1]) = -18;
                    v111._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
                    v112._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181EC58A4);
                  }
                  if (*(unsigned char *)(v110 + 1) == 10) {
                    uint64_t v110 = v105 + v107 + 1;
                  }
                }
                BOOL v74 = __OFADD__(a5++, 1);
                if (v74) {
                  goto LABEL_279;
                }
                unint64_t v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  uint64_t v73 = 0;
                  goto LABEL_242;
                }
              }
            }
            uint64_t v73 = 0;
            a5 = 1;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            unint64_t v14 = 0xE900000000000072;
            unint64_t v21 = 0x65626D756E206E69;
            goto LABEL_174;
          }
          char v24 = 0;
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 1;
          if ((unint64_t)v8 < v21) {
            goto LABEL_24;
          }
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if (v20 != 101) {
            goto LABEL_143;
          }
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v8[v29], a4, a5);
            uint64_t v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 2;
          char v24 = 1;
          if ((unint64_t)v8 >= v21) {
            goto LABEL_249;
          }
          goto LABEL_24;
      }
LABEL_43:
      LODWORD(v8) = v119;
      unint64_t v32 = (unint64_t)v119 >> 48;
      unint64_t v20 = (unsigned __int16)v120;
      a3 = (unint64_t)v119 >> 32;
      unint64_t v33 = WORD1(v120);
      unint64_t v34 = WORD2(v120);
      unint64_t v35 = HIWORD(v120);
      unint64_t v36 = v121;
      unint64_t v37 = v122;
      v115[0] = v119;
      v115[1] = v120;
      __int16 v116 = v121;
      __int16 v117 = v122;
      if (_So9NSDecimala__isNegative_getter(v115)) {
        goto LABEL_44;
      }
      unint64_t v46 = v36;
      unint64_t v21 = v35;
      unint64_t v7 = v34;
      a5 = v33;
      unint64_t v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v115[0]) = v8;
      WORD2(v115[0]) = a3;
      HIWORD(v115[0]) = v32;
      LOWORD(v115[1]) = v14;
      WORD1(v115[1]) = a5;
      WORD2(v115[1]) = v7;
      HIWORD(v115[1]) = v21;
      unint64_t v113 = v37;
      unint64_t v114 = v46;
      __int16 v116 = v46;
      __int16 v117 = v37;
      int v47 = _So9NSDecimala__length_getter(v115);
      if (!v47) {
        goto LABEL_260;
      }
      unint64_t v45 = 0;
      int v48 = v47 - 1;
      if (v47 != 1)
      {
        __int16 v49 = v113;
        __int16 v50 = v114;
        while (2)
        {
          unint64_t v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              unint64_t v51 = v14;
              goto LABEL_66;
            case 3:
              unint64_t v51 = a5;
              goto LABEL_66;
            case 4:
              unint64_t v51 = v7;
              goto LABEL_66;
            case 5:
              unint64_t v51 = v21;
              goto LABEL_66;
            case 6:
              unint64_t v51 = v114;
              goto LABEL_66;
            case 7:
              unint64_t v51 = v113;
LABEL_66:
              if (HIWORD(v45)) {
                goto LABEL_44;
              }
              unint64_t v45 = v51 | (v45 << 16);
              if (!--v48) {
                goto LABEL_105;
              }
              continue;
            default:
              goto LABEL_282;
          }
        }
      }
LABEL_104:
      __int16 v49 = v113;
      __int16 v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }
      goto LABEL_44;
    }
    if (__OFADD__(v29, 1)) {
      goto LABEL_176;
    }
    if ((unint64_t)&v8[++v29] >= v21) {
      goto LABEL_177;
    }
  }
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v115[0]) = v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    __int16 v116 = v114;
    __int16 v117 = (__int16)v19;
    int v89 = _So9NSDecimala__exponent_getter((char *)v115);
    if (v89 > 0) {
      goto LABEL_269;
    }
    if (!v89) {
      goto LABEL_184;
    }
    unsigned int v90 = -v89 & ~(-v89 >> 31);
    unsigned int v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1)) {
        goto LABEL_184;
      }
    }
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0;
    __int16 v49 = v113;
    __int16 v50 = v114;
LABEL_107:
    LODWORD(v115[0]) = v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    __int16 v116 = v50;
    __int16 v117 = v49;
    LOWORD(v19) = v49;
  }
  while ((_So9NSDecimala__exponent_getter((char *)v115) & 0x80000000) != 0);
  LODWORD(v115[0]) = v8;
  WORD2(v115[0]) = a3;
  HIWORD(v115[0]) = v20;
  LOWORD(v115[1]) = v14;
  WORD1(v115[1]) = a5;
  WORD2(v115[1]) = v7;
  HIWORD(v115[1]) = v21;
  __int16 v116 = v114;
  __int16 v117 = (__int16)v19;
  int v63 = _So9NSDecimala__exponent_getter((char *)v115);
  if (v63 < 0) {
    goto LABEL_265;
  }
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10;
      int v64 = v63 - 1;
      if (v63 == 1) {
        goto LABEL_184;
      }
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10;
        while (--v64)
        {
          uint64_t v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10;
          if (v65) {
            goto LABEL_44;
          }
        }
        goto LABEL_184;
      }
    }
LABEL_44:
    a4 = static String._fromUTF8Repairing(_:)();
    uint64_t v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v40 = a4;
    *(void *)(v40 + 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    char v41 = 11;
LABEL_45:
    *(unsigned char *)(v40 + 48) = v41;
    swift_willThrow();
  }
  else
  {
LABEL_184:
    if (a4 > 0xFF) {
      goto LABEL_44;
    }
  }
  return a4;
}

{
  int v6;
  unint64_t v7;
  const char *v8;
  unint64_t v14;
  double v15;
  BOOL v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  size_t v23;
  char v24;
  char v25;
  const char *v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  char v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  unint64_t v113;
  unint64_t v114;
  char *v115[2];
  __int16 v116;
  __int16 v117;
  unsigned char v118[40];
  char *v119;
  char *v120;
  unsigned __int16 v121;
  unsigned __int16 v122;
  char v123;
  uint64_t v124;

  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  v115[0] = 0;
  double v15 = _stringshims_strtod_l(a2, v115, 0);
  if (v115[0]) {
    BOOL v16 = &a2[a3] == v115[0];
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v28 = v15;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)v115, v15) || (BYTE2(v115[0]) & 1) != 0) {
      goto LABEL_44;
    }
    if (fabs(v28) < 9.00719925e15) {
      return LOWORD(v115[0]);
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v118);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v118, (uint64_t)&v119);
  if (v123 != 1) {
    goto LABEL_43;
  }
  unsigned __int8 v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  unint64_t v19 = (unsigned __int8 *)v17;
  unint64_t v20 = v18;
  unint64_t v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      unint64_t v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21) {
        goto LABEL_259;
      }
      char v56 = 0;
      unint64_t v57 = v45 - (void)v19;
      char v58 = 1;
      char v59 = 1;
      while (2)
      {
        uint64_t v60 = 0;
        uint64_t v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (void)v19 + v60) < 0 || (BOOL v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            unint64_t v80 = v45 + v60;
            if (v45 + v60 < a4) {
              goto LABEL_266;
            }
            unint64_t v81 = a4 + a5;
            if (a4 + a5 < v80) {
              goto LABEL_266;
            }
            if (v81 >= v45 + v60 + 1) {
              unint64_t v81 = v45 + v60 + 1;
            }
            if (v81 <= a4)
            {
              a3 = 0;
              a5 = 1;
            }
            else
            {
              unint64_t v82 = a5 + a4;
              a5 = 1;
              unint64_t v83 = a4;
              do
              {
                uint64_t v84 = 0;
                uint64_t v85 = 0;
                unint64_t v86 = v82 - v83;
                while (1)
                {
                  if ((uint64_t)(v83 - a4 + v85) < 0 || (uint64_t)(v86 + v84) < 1) {
                    goto LABEL_250;
                  }
                  int v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1);
                    if (v74) {
                      goto LABEL_271;
                    }
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }
                  if (v87 == 13) {
                    break;
                  }
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1)) {
                    goto LABEL_251;
                  }
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81) {
                    goto LABEL_212;
                  }
                }
                uint64_t v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (((v83 - a4 + v85 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v85 + v86) < 1) {
                    goto LABEL_277;
                  }
                  if (*(unsigned char *)(v88 + 1) == 10) {
                    uint64_t v88 = v83 + v85 + 1;
                  }
                }
                BOOL v74 = __OFADD__(a5++, 1);
                if (v74) {
                  goto LABEL_272;
                }
                unint64_t v83 = v88 + 1;
LABEL_171:
                ;
              }
              while (v83 < v81);
              a3 = 0;
            }
LABEL_212:
            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v40 = xmmword_182112860;
            *(void *)(v40 + 16) = v8;
            *(void *)(v40 + 24) = a5;
            *(void *)(v40 + 32) = a3;
            *(void *)(v40 + 40) = a4;
            char v41 = 1;
            goto LABEL_45;
          }
          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if ((v8 - 58) < 0xFFFFFFF6) {
            break;
          }
          if (__OFADD__(v57 + v60, 1)) {
            goto LABEL_146;
          }
          ++v60;
          if (v45 + v60 >= v21) {
            goto LABEL_147;
          }
        }
        uint64_t v62 = v57 + v60;
        switch(*(unsigned char *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0) {
              goto LABEL_142;
            }
            unint64_t v57 = 0;
            char v56 = 0;
            char v58 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21) {
              goto LABEL_244;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              unint64_t v93 = v45 + v60;
              if (v45 + v60 < a4) {
                goto LABEL_270;
              }
              unint64_t v94 = a4 + a5;
              if (a4 + a5 < v93) {
                goto LABEL_270;
              }
              if (v94 >= v45 + v60 + 1) {
                unint64_t v94 = v45 + v60 + 1;
              }
              if (v94 <= a4)
              {
                a3 = 0;
                a5 = 1;
              }
              else
              {
                unint64_t v95 = a5 + a4;
                a5 = 1;
                unint64_t v96 = a4;
                do
                {
                  uint64_t v97 = 0;
                  uint64_t v98 = 0;
                  unint64_t v99 = v95 - v96;
                  while (1)
                  {
                    if ((uint64_t)(v96 - a4 + v98) < 0 || (uint64_t)(v99 + v97) < 1) {
                      goto LABEL_253;
                    }
                    int v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      BOOL v74 = __OFADD__(a5++, 1);
                      if (v74) {
                        goto LABEL_275;
                      }
                      v96 += v98 + 1;
                      goto LABEL_209;
                    }
                    if (v100 == 13) {
                      break;
                    }
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1)) {
                      goto LABEL_254;
                    }
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94) {
                      goto LABEL_239;
                    }
                  }
                  uint64_t v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (((v96 - a4 + v98 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v98 + v99) < 1) {
                      goto LABEL_280;
                    }
                    if (*(unsigned char *)(v101 + 1) == 10) {
                      uint64_t v101 = v96 + v98 + 1;
                    }
                  }
                  BOOL v74 = __OFADD__(a5++, 1);
                  if (v74) {
                    goto LABEL_276;
                  }
                  unint64_t v96 = v101 + 1;
LABEL_209:
                  ;
                }
                while (v96 < v94);
                a3 = 0;
              }
LABEL_239:
              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }
            unint64_t v57 = 0;
            char v56 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            char v58 = 1;
            if (v45 < v21) {
              continue;
            }
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if (v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }
LABEL_98:
            if (v62 < 1 || (v58 & 1) == 0) {
              goto LABEL_148;
            }
            unint64_t v57 = 0;
            char v58 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            char v56 = 1;
            if (v45 >= v21) {
              goto LABEL_245;
            }
            continue;
        }
        goto LABEL_104;
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v18;
    while (1)
    {
      if (v43 < 0 || (BOOL v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }
      if (v17[v43] - 58 < 0xFFFFFFF6) {
        break;
      }
      unint64_t v45 = (unint64_t)&v17[++v43];
      if ((unint64_t)&v17[v43] >= v21) {
        goto LABEL_84;
      }
    }
LABEL_83:
    unint64_t v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }
  if (v18 < 1) {
    goto LABEL_255;
  }
  int v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (unint64_t v8 = v17, v22 == 43)) {
    unint64_t v8 = v17 + 1;
  }
  if (v21 < (unint64_t)v8) {
    goto LABEL_256;
  }
  unint64_t v14 = v8 - v17;
  if (v8 - v17 < 0) {
    goto LABEL_257;
  }
  if ((uint64_t)(v21 - (void)v8) < 0) {
    goto LABEL_258;
  }
  if ((uint64_t)(v21 - (void)v8) >= 2) {
    size_t v23 = 2;
  }
  else {
    size_t v23 = v21 - (void)v8;
  }
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0))
  {
    unint64_t v52 = (unsigned __int8 *)(v8 + 2);
    uint64_t v43 = v21 - (void)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      uint64_t v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        uint64_t v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        unint64_t v53 = v14 + 3;
        do
        {
          unint64_t v54 = v53;
          unint64_t v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1 << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            if ((unint64_t)v52 < a4) {
              goto LABEL_264;
            }
            unint64_t v66 = a4 + a5;
            if (a4 + a5 < (unint64_t)v52) {
              goto LABEL_264;
            }
            if (v66 >= (unint64_t)(v52 + 1)) {
              unint64_t v66 = (unint64_t)(v52 + 1);
            }
            if (v66 <= a4)
            {
              uint64_t v73 = 0;
              unint64_t v14 = 0xED00007265626D75;
              unint64_t v21 = 0x6E20786568206E69;
              a5 = 1;
              goto LABEL_174;
            }
            uint64_t v67 = -(uint64_t)a4;
            unint64_t v68 = a5 + a4;
            a5 = 1;
            while (1)
            {
              uint64_t v69 = 0;
              uint64_t v70 = 0;
              unint64_t v71 = v68 - a4;
              while (1)
              {
                if ((uint64_t)(v67 + a4 + v70) < 0 || (uint64_t)(v71 + v69) < 1) {
                  goto LABEL_246;
                }
                int v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10) {
                  break;
                }
                if (v72 == 13)
                {
                  uint64_t v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (((v67 + a4 + v70 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v70 + v71) < 1) {
                      goto LABEL_273;
                    }
                    if (*(unsigned char *)(v75 + 1) == 10) {
                      uint64_t v75 = a4 + v70 + 1;
                    }
                  }
                  BOOL v74 = __OFADD__(a5++, 1);
                  if (v74) {
                    goto LABEL_268;
                  }
                  a4 = v75 + 1;
                  goto LABEL_140;
                }
                uint64_t v73 = v70 + 1;
                if (__OFADD__(v70, 1)) {
                  goto LABEL_247;
                }
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  unint64_t v14 = 0xED00007265626D75;
                  unint64_t v21 = 0x6E20786568206E69;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v40 = v21;
                  *(void *)(v40 + 8) = v14;
                  *(void *)(v40 + 16) = v20;
                  *(void *)(v40 + 24) = a5;
                  *(void *)(v40 + 32) = v73;
                  *(void *)(v40 + 40) = a3;
                  char v41 = 1;
                  goto LABEL_45;
                }
              }
              BOOL v74 = __OFADD__(a5++, 1);
              if (v74) {
                goto LABEL_267;
              }
              a4 += v70 + 1;
LABEL_140:
              unint64_t v14 = 0xED00007265626D75;
              unint64_t v21 = 0x6E20786568206E69;
              if (a4 >= v66)
              {
                uint64_t v73 = 0;
                goto LABEL_174;
              }
            }
          }
          BOOL v31 = v43-- < 1;
          if (v31) {
            break;
          }
          if ((unint64_t)++v52 >= v21) {
            break;
          }
          ++a3;
          ++v53;
        }
        while ((v54 & 0x8000000000000000) == 0);
      }
    }
    __break(1u);
    goto LABEL_83;
  }
  if ((unint64_t)v8 >= v21) {
    goto LABEL_263;
  }
  char v24 = 0;
  char v25 = 0;
  unint64_t v26 = (const char *)&v19[v20];
  char v27 = 1;
LABEL_24:
  uint64_t v29 = 0;
  uint64_t v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    BOOL v31 = v30-- < 1;
    if (v31) {
      break;
    }
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0) {
            goto LABEL_143;
          }
          char v24 = 0;
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 3;
          if ((unint64_t)v8 >= v21) {
            goto LABEL_248;
          }
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            unint64_t v102 = (unint64_t)&v8[v29];
            if ((unint64_t)&v8[v29] < a4) {
              goto LABEL_274;
            }
            unint64_t v103 = a4 + a5;
            if (a4 + a5 < v102) {
              goto LABEL_274;
            }
            if (v103 >= (unint64_t)&v8[v29 + 1]) {
              unint64_t v103 = (unint64_t)&v8[v29 + 1];
            }
            if (v103 > a4)
            {
              unint64_t v104 = a5 + a4;
              a5 = 1;
              unint64_t v105 = a4;
              while (1)
              {
                uint64_t v106 = 0;
                uint64_t v107 = 0;
                unint64_t v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }
                  int v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }
                    goto LABEL_278;
                  }
                  if (v109 == 13) {
                    break;
                  }
                  uint64_t v73 = v107 + 1;
                  if (__OFADD__(v107, 1)) {
                    goto LABEL_262;
                  }
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103) {
                    goto LABEL_242;
                  }
                }
                uint64_t v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v115[0] = 0;
                    v115[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v115, "Invalid index ");
                    HIBYTE(v115[1]) = -18;
                    v111._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
                    v112._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181EC6878);
                  }
                  if (*(unsigned char *)(v110 + 1) == 10) {
                    uint64_t v110 = v105 + v107 + 1;
                  }
                }
                BOOL v74 = __OFADD__(a5++, 1);
                if (v74) {
                  goto LABEL_279;
                }
                unint64_t v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  uint64_t v73 = 0;
                  goto LABEL_242;
                }
              }
            }
            uint64_t v73 = 0;
            a5 = 1;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            unint64_t v14 = 0xE900000000000072;
            unint64_t v21 = 0x65626D756E206E69;
            goto LABEL_174;
          }
          char v24 = 0;
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 1;
          if ((unint64_t)v8 < v21) {
            goto LABEL_24;
          }
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if (v20 != 101) {
            goto LABEL_143;
          }
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v8[v29], a4, a5);
            uint64_t v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 2;
          char v24 = 1;
          if ((unint64_t)v8 >= v21) {
            goto LABEL_249;
          }
          goto LABEL_24;
      }
LABEL_43:
      LODWORD(v8) = v119;
      unint64_t v32 = (unint64_t)v119 >> 48;
      unint64_t v20 = (unsigned __int16)v120;
      a3 = (unint64_t)v119 >> 32;
      unint64_t v33 = WORD1(v120);
      unint64_t v34 = WORD2(v120);
      unint64_t v35 = HIWORD(v120);
      unint64_t v36 = v121;
      unint64_t v37 = v122;
      v115[0] = v119;
      v115[1] = v120;
      __int16 v116 = v121;
      __int16 v117 = v122;
      if (_So9NSDecimala__isNegative_getter(v115)) {
        goto LABEL_44;
      }
      unint64_t v46 = v36;
      unint64_t v21 = v35;
      unint64_t v7 = v34;
      a5 = v33;
      unint64_t v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v115[0]) = v8;
      WORD2(v115[0]) = a3;
      HIWORD(v115[0]) = v32;
      LOWORD(v115[1]) = v14;
      WORD1(v115[1]) = a5;
      WORD2(v115[1]) = v7;
      HIWORD(v115[1]) = v21;
      unint64_t v113 = v37;
      unint64_t v114 = v46;
      __int16 v116 = v46;
      __int16 v117 = v37;
      int v47 = _So9NSDecimala__length_getter(v115);
      if (!v47) {
        goto LABEL_260;
      }
      unint64_t v45 = 0;
      int v48 = v47 - 1;
      if (v47 != 1)
      {
        __int16 v49 = v113;
        __int16 v50 = v114;
        while (2)
        {
          unint64_t v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              unint64_t v51 = v14;
              goto LABEL_66;
            case 3:
              unint64_t v51 = a5;
              goto LABEL_66;
            case 4:
              unint64_t v51 = v7;
              goto LABEL_66;
            case 5:
              unint64_t v51 = v21;
              goto LABEL_66;
            case 6:
              unint64_t v51 = v114;
              goto LABEL_66;
            case 7:
              unint64_t v51 = v113;
LABEL_66:
              if (HIWORD(v45)) {
                goto LABEL_44;
              }
              unint64_t v45 = v51 | (v45 << 16);
              if (!--v48) {
                goto LABEL_105;
              }
              continue;
            default:
              goto LABEL_282;
          }
        }
      }
LABEL_104:
      __int16 v49 = v113;
      __int16 v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }
      goto LABEL_44;
    }
    if (__OFADD__(v29, 1)) {
      goto LABEL_176;
    }
    if ((unint64_t)&v8[++v29] >= v21) {
      goto LABEL_177;
    }
  }
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v115[0]) = v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    __int16 v116 = v114;
    __int16 v117 = (__int16)v19;
    int v89 = _So9NSDecimala__exponent_getter((char *)v115);
    if (v89 > 0) {
      goto LABEL_269;
    }
    if (!v89) {
      goto LABEL_184;
    }
    unsigned int v90 = -v89 & ~(-v89 >> 31);
    unsigned int v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1)) {
        goto LABEL_184;
      }
    }
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0;
    __int16 v49 = v113;
    __int16 v50 = v114;
LABEL_107:
    LODWORD(v115[0]) = v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    __int16 v116 = v50;
    __int16 v117 = v49;
    LOWORD(v19) = v49;
  }
  while ((_So9NSDecimala__exponent_getter((char *)v115) & 0x80000000) != 0);
  LODWORD(v115[0]) = v8;
  WORD2(v115[0]) = a3;
  HIWORD(v115[0]) = v20;
  LOWORD(v115[1]) = v14;
  WORD1(v115[1]) = a5;
  WORD2(v115[1]) = v7;
  HIWORD(v115[1]) = v21;
  __int16 v116 = v114;
  __int16 v117 = (__int16)v19;
  int v63 = _So9NSDecimala__exponent_getter((char *)v115);
  if (v63 < 0) {
    goto LABEL_265;
  }
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10;
      int v64 = v63 - 1;
      if (v63 == 1) {
        goto LABEL_184;
      }
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10;
        while (--v64)
        {
          uint64_t v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10;
          if (v65) {
            goto LABEL_44;
          }
        }
        goto LABEL_184;
      }
    }
LABEL_44:
    a4 = static String._fromUTF8Repairing(_:)();
    uint64_t v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v40 = a4;
    *(void *)(v40 + 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    char v41 = 11;
LABEL_45:
    *(unsigned char *)(v40 + 48) = v41;
    swift_willThrow();
  }
  else
  {
LABEL_184:
    if (a4 >> 16) {
      goto LABEL_44;
    }
  }
  return a4;
}

{
  int v6;
  unint64_t v7;
  const char *v8;
  unint64_t v14;
  double v15;
  BOOL v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  size_t v23;
  char v24;
  char v25;
  const char *v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  char v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  unint64_t v113;
  unint64_t v114;
  char *v115[2];
  __int16 v116;
  __int16 v117;
  unsigned char v118[40];
  char *v119;
  char *v120;
  unsigned __int16 v121;
  unsigned __int16 v122;
  char v123;
  uint64_t v124;

  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  v115[0] = 0;
  double v15 = _stringshims_strtod_l(a2, v115, 0);
  if (v115[0]) {
    BOOL v16 = &a2[a3] == v115[0];
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v28 = v15;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)v115, v15) || (BYTE4(v115[0]) & 1) != 0) {
      goto LABEL_44;
    }
    if (fabs(v28) < 9.00719925e15) {
      return LODWORD(v115[0]);
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v118);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v118, (uint64_t)&v119);
  if (v123 != 1) {
    goto LABEL_43;
  }
  unsigned __int8 v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  unint64_t v19 = (unsigned __int8 *)v17;
  unint64_t v20 = v18;
  unint64_t v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      unint64_t v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21) {
        goto LABEL_259;
      }
      char v56 = 0;
      unint64_t v57 = v45 - (void)v19;
      char v58 = 1;
      char v59 = 1;
      while (2)
      {
        uint64_t v60 = 0;
        uint64_t v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (void)v19 + v60) < 0 || (BOOL v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            unint64_t v80 = v45 + v60;
            if (v45 + v60 < a4) {
              goto LABEL_266;
            }
            unint64_t v81 = a4 + a5;
            if (a4 + a5 < v80) {
              goto LABEL_266;
            }
            if (v81 >= v45 + v60 + 1) {
              unint64_t v81 = v45 + v60 + 1;
            }
            if (v81 <= a4)
            {
              a3 = 0;
              a5 = 1;
            }
            else
            {
              unint64_t v82 = a5 + a4;
              a5 = 1;
              unint64_t v83 = a4;
              do
              {
                uint64_t v84 = 0;
                uint64_t v85 = 0;
                unint64_t v86 = v82 - v83;
                while (1)
                {
                  if ((uint64_t)(v83 - a4 + v85) < 0 || (uint64_t)(v86 + v84) < 1) {
                    goto LABEL_250;
                  }
                  int v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1);
                    if (v74) {
                      goto LABEL_271;
                    }
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }
                  if (v87 == 13) {
                    break;
                  }
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1)) {
                    goto LABEL_251;
                  }
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81) {
                    goto LABEL_212;
                  }
                }
                uint64_t v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (((v83 - a4 + v85 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v85 + v86) < 1) {
                    goto LABEL_277;
                  }
                  if (*(unsigned char *)(v88 + 1) == 10) {
                    uint64_t v88 = v83 + v85 + 1;
                  }
                }
                BOOL v74 = __OFADD__(a5++, 1);
                if (v74) {
                  goto LABEL_272;
                }
                unint64_t v83 = v88 + 1;
LABEL_171:
                ;
              }
              while (v83 < v81);
              a3 = 0;
            }
LABEL_212:
            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v40 = xmmword_182112860;
            *(void *)(v40 + 16) = v8;
            *(void *)(v40 + 24) = a5;
            *(void *)(v40 + 32) = a3;
            *(void *)(v40 + 40) = a4;
            char v41 = 1;
            goto LABEL_45;
          }
          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if ((v8 - 58) < 0xFFFFFFF6) {
            break;
          }
          if (__OFADD__(v57 + v60, 1)) {
            goto LABEL_146;
          }
          ++v60;
          if (v45 + v60 >= v21) {
            goto LABEL_147;
          }
        }
        uint64_t v62 = v57 + v60;
        switch(*(unsigned char *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0) {
              goto LABEL_142;
            }
            unint64_t v57 = 0;
            char v56 = 0;
            char v58 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21) {
              goto LABEL_244;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              unint64_t v93 = v45 + v60;
              if (v45 + v60 < a4) {
                goto LABEL_270;
              }
              unint64_t v94 = a4 + a5;
              if (a4 + a5 < v93) {
                goto LABEL_270;
              }
              if (v94 >= v45 + v60 + 1) {
                unint64_t v94 = v45 + v60 + 1;
              }
              if (v94 <= a4)
              {
                a3 = 0;
                a5 = 1;
              }
              else
              {
                unint64_t v95 = a5 + a4;
                a5 = 1;
                unint64_t v96 = a4;
                do
                {
                  uint64_t v97 = 0;
                  uint64_t v98 = 0;
                  unint64_t v99 = v95 - v96;
                  while (1)
                  {
                    if ((uint64_t)(v96 - a4 + v98) < 0 || (uint64_t)(v99 + v97) < 1) {
                      goto LABEL_253;
                    }
                    int v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      BOOL v74 = __OFADD__(a5++, 1);
                      if (v74) {
                        goto LABEL_275;
                      }
                      v96 += v98 + 1;
                      goto LABEL_209;
                    }
                    if (v100 == 13) {
                      break;
                    }
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1)) {
                      goto LABEL_254;
                    }
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94) {
                      goto LABEL_239;
                    }
                  }
                  uint64_t v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (((v96 - a4 + v98 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v98 + v99) < 1) {
                      goto LABEL_280;
                    }
                    if (*(unsigned char *)(v101 + 1) == 10) {
                      uint64_t v101 = v96 + v98 + 1;
                    }
                  }
                  BOOL v74 = __OFADD__(a5++, 1);
                  if (v74) {
                    goto LABEL_276;
                  }
                  unint64_t v96 = v101 + 1;
LABEL_209:
                  ;
                }
                while (v96 < v94);
                a3 = 0;
              }
LABEL_239:
              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }
            unint64_t v57 = 0;
            char v56 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            char v58 = 1;
            if (v45 < v21) {
              continue;
            }
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if (v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }
LABEL_98:
            if (v62 < 1 || (v58 & 1) == 0) {
              goto LABEL_148;
            }
            unint64_t v57 = 0;
            char v58 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            char v56 = 1;
            if (v45 >= v21) {
              goto LABEL_245;
            }
            continue;
        }
        goto LABEL_104;
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v18;
    while (1)
    {
      if (v43 < 0 || (BOOL v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }
      if (v17[v43] - 58 < 0xFFFFFFF6) {
        break;
      }
      unint64_t v45 = (unint64_t)&v17[++v43];
      if ((unint64_t)&v17[v43] >= v21) {
        goto LABEL_84;
      }
    }
LABEL_83:
    unint64_t v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }
  if (v18 < 1) {
    goto LABEL_255;
  }
  int v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (unint64_t v8 = v17, v22 == 43)) {
    unint64_t v8 = v17 + 1;
  }
  if (v21 < (unint64_t)v8) {
    goto LABEL_256;
  }
  unint64_t v14 = v8 - v17;
  if (v8 - v17 < 0) {
    goto LABEL_257;
  }
  if ((uint64_t)(v21 - (void)v8) < 0) {
    goto LABEL_258;
  }
  if ((uint64_t)(v21 - (void)v8) >= 2) {
    size_t v23 = 2;
  }
  else {
    size_t v23 = v21 - (void)v8;
  }
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0))
  {
    unint64_t v52 = (unsigned __int8 *)(v8 + 2);
    uint64_t v43 = v21 - (void)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      uint64_t v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        uint64_t v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        unint64_t v53 = v14 + 3;
        do
        {
          unint64_t v54 = v53;
          unint64_t v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1 << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            if ((unint64_t)v52 < a4) {
              goto LABEL_264;
            }
            unint64_t v66 = a4 + a5;
            if (a4 + a5 < (unint64_t)v52) {
              goto LABEL_264;
            }
            if (v66 >= (unint64_t)(v52 + 1)) {
              unint64_t v66 = (unint64_t)(v52 + 1);
            }
            if (v66 <= a4)
            {
              uint64_t v73 = 0;
              unint64_t v14 = 0xED00007265626D75;
              unint64_t v21 = 0x6E20786568206E69;
              a5 = 1;
              goto LABEL_174;
            }
            uint64_t v67 = -(uint64_t)a4;
            unint64_t v68 = a5 + a4;
            a5 = 1;
            while (1)
            {
              uint64_t v69 = 0;
              uint64_t v70 = 0;
              unint64_t v71 = v68 - a4;
              while (1)
              {
                if ((uint64_t)(v67 + a4 + v70) < 0 || (uint64_t)(v71 + v69) < 1) {
                  goto LABEL_246;
                }
                int v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10) {
                  break;
                }
                if (v72 == 13)
                {
                  uint64_t v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (((v67 + a4 + v70 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v70 + v71) < 1) {
                      goto LABEL_273;
                    }
                    if (*(unsigned char *)(v75 + 1) == 10) {
                      uint64_t v75 = a4 + v70 + 1;
                    }
                  }
                  BOOL v74 = __OFADD__(a5++, 1);
                  if (v74) {
                    goto LABEL_268;
                  }
                  a4 = v75 + 1;
                  goto LABEL_140;
                }
                uint64_t v73 = v70 + 1;
                if (__OFADD__(v70, 1)) {
                  goto LABEL_247;
                }
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  unint64_t v14 = 0xED00007265626D75;
                  unint64_t v21 = 0x6E20786568206E69;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v40 = v21;
                  *(void *)(v40 + 8) = v14;
                  *(void *)(v40 + 16) = v20;
                  *(void *)(v40 + 24) = a5;
                  *(void *)(v40 + 32) = v73;
                  *(void *)(v40 + 40) = a3;
                  char v41 = 1;
                  goto LABEL_45;
                }
              }
              BOOL v74 = __OFADD__(a5++, 1);
              if (v74) {
                goto LABEL_267;
              }
              a4 += v70 + 1;
LABEL_140:
              unint64_t v14 = 0xED00007265626D75;
              unint64_t v21 = 0x6E20786568206E69;
              if (a4 >= v66)
              {
                uint64_t v73 = 0;
                goto LABEL_174;
              }
            }
          }
          BOOL v31 = v43-- < 1;
          if (v31) {
            break;
          }
          if ((unint64_t)++v52 >= v21) {
            break;
          }
          ++a3;
          ++v53;
        }
        while ((v54 & 0x8000000000000000) == 0);
      }
    }
    __break(1u);
    goto LABEL_83;
  }
  if ((unint64_t)v8 >= v21) {
    goto LABEL_263;
  }
  char v24 = 0;
  char v25 = 0;
  unint64_t v26 = (const char *)&v19[v20];
  char v27 = 1;
LABEL_24:
  uint64_t v29 = 0;
  uint64_t v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    BOOL v31 = v30-- < 1;
    if (v31) {
      break;
    }
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0) {
            goto LABEL_143;
          }
          char v24 = 0;
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 3;
          if ((unint64_t)v8 >= v21) {
            goto LABEL_248;
          }
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            unint64_t v102 = (unint64_t)&v8[v29];
            if ((unint64_t)&v8[v29] < a4) {
              goto LABEL_274;
            }
            unint64_t v103 = a4 + a5;
            if (a4 + a5 < v102) {
              goto LABEL_274;
            }
            if (v103 >= (unint64_t)&v8[v29 + 1]) {
              unint64_t v103 = (unint64_t)&v8[v29 + 1];
            }
            if (v103 > a4)
            {
              unint64_t v104 = a5 + a4;
              a5 = 1;
              unint64_t v105 = a4;
              while (1)
              {
                uint64_t v106 = 0;
                uint64_t v107 = 0;
                unint64_t v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }
                  int v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }
                    goto LABEL_278;
                  }
                  if (v109 == 13) {
                    break;
                  }
                  uint64_t v73 = v107 + 1;
                  if (__OFADD__(v107, 1)) {
                    goto LABEL_262;
                  }
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103) {
                    goto LABEL_242;
                  }
                }
                uint64_t v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v115[0] = 0;
                    v115[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v115, "Invalid index ");
                    HIBYTE(v115[1]) = -18;
                    v111._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
                    v112._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181ECCB14);
                  }
                  if (*(unsigned char *)(v110 + 1) == 10) {
                    uint64_t v110 = v105 + v107 + 1;
                  }
                }
                BOOL v74 = __OFADD__(a5++, 1);
                if (v74) {
                  goto LABEL_279;
                }
                unint64_t v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  uint64_t v73 = 0;
                  goto LABEL_242;
                }
              }
            }
            uint64_t v73 = 0;
            a5 = 1;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            unint64_t v14 = 0xE900000000000072;
            unint64_t v21 = 0x65626D756E206E69;
            goto LABEL_174;
          }
          char v24 = 0;
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 1;
          if ((unint64_t)v8 < v21) {
            goto LABEL_24;
          }
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if (v20 != 101) {
            goto LABEL_143;
          }
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v8[v29], a4, a5);
            uint64_t v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 2;
          char v24 = 1;
          if ((unint64_t)v8 >= v21) {
            goto LABEL_249;
          }
          goto LABEL_24;
      }
LABEL_43:
      LODWORD(v8) = v119;
      unint64_t v32 = (unint64_t)v119 >> 48;
      unint64_t v20 = (unsigned __int16)v120;
      a3 = (unint64_t)v119 >> 32;
      unint64_t v33 = WORD1(v120);
      unint64_t v34 = WORD2(v120);
      unint64_t v35 = HIWORD(v120);
      unint64_t v36 = v121;
      unint64_t v37 = v122;
      v115[0] = v119;
      v115[1] = v120;
      __int16 v116 = v121;
      __int16 v117 = v122;
      if (_So9NSDecimala__isNegative_getter(v115)) {
        goto LABEL_44;
      }
      unint64_t v46 = v36;
      unint64_t v21 = v35;
      unint64_t v7 = v34;
      a5 = v33;
      unint64_t v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v115[0]) = v8;
      WORD2(v115[0]) = a3;
      HIWORD(v115[0]) = v32;
      LOWORD(v115[1]) = v14;
      WORD1(v115[1]) = a5;
      WORD2(v115[1]) = v7;
      HIWORD(v115[1]) = v21;
      unint64_t v113 = v37;
      unint64_t v114 = v46;
      __int16 v116 = v46;
      __int16 v117 = v37;
      int v47 = _So9NSDecimala__length_getter(v115);
      if (!v47) {
        goto LABEL_260;
      }
      unint64_t v45 = 0;
      int v48 = v47 - 1;
      if (v47 != 1)
      {
        __int16 v49 = v113;
        __int16 v50 = v114;
        while (2)
        {
          unint64_t v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              unint64_t v51 = v14;
              goto LABEL_66;
            case 3:
              unint64_t v51 = a5;
              goto LABEL_66;
            case 4:
              unint64_t v51 = v7;
              goto LABEL_66;
            case 5:
              unint64_t v51 = v21;
              goto LABEL_66;
            case 6:
              unint64_t v51 = v114;
              goto LABEL_66;
            case 7:
              unint64_t v51 = v113;
LABEL_66:
              if (HIWORD(v45)) {
                goto LABEL_44;
              }
              unint64_t v45 = v51 | (v45 << 16);
              if (!--v48) {
                goto LABEL_105;
              }
              continue;
            default:
              goto LABEL_282;
          }
        }
      }
LABEL_104:
      __int16 v49 = v113;
      __int16 v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }
      goto LABEL_44;
    }
    if (__OFADD__(v29, 1)) {
      goto LABEL_176;
    }
    if ((unint64_t)&v8[++v29] >= v21) {
      goto LABEL_177;
    }
  }
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v115[0]) = v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    __int16 v116 = v114;
    __int16 v117 = (__int16)v19;
    int v89 = _So9NSDecimala__exponent_getter((char *)v115);
    if (v89 > 0) {
      goto LABEL_269;
    }
    if (!v89) {
      goto LABEL_184;
    }
    unsigned int v90 = -v89 & ~(-v89 >> 31);
    unsigned int v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1)) {
        goto LABEL_184;
      }
    }
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0;
    __int16 v49 = v113;
    __int16 v50 = v114;
LABEL_107:
    LODWORD(v115[0]) = v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    __int16 v116 = v50;
    __int16 v117 = v49;
    LOWORD(v19) = v49;
  }
  while ((_So9NSDecimala__exponent_getter((char *)v115) & 0x80000000) != 0);
  LODWORD(v115[0]) = v8;
  WORD2(v115[0]) = a3;
  HIWORD(v115[0]) = v20;
  LOWORD(v115[1]) = v14;
  WORD1(v115[1]) = a5;
  WORD2(v115[1]) = v7;
  HIWORD(v115[1]) = v21;
  __int16 v116 = v114;
  __int16 v117 = (__int16)v19;
  int v63 = _So9NSDecimala__exponent_getter((char *)v115);
  if (v63 < 0) {
    goto LABEL_265;
  }
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10;
      int v64 = v63 - 1;
      if (v63 == 1) {
        goto LABEL_184;
      }
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10;
        while (--v64)
        {
          uint64_t v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10;
          if (v65) {
            goto LABEL_44;
          }
        }
        goto LABEL_184;
      }
    }
LABEL_44:
    a4 = static String._fromUTF8Repairing(_:)();
    uint64_t v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v40 = a4;
    *(void *)(v40 + 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    char v41 = 11;
LABEL_45:
    *(unsigned char *)(v40 + 48) = v41;
    swift_willThrow();
  }
  else
  {
LABEL_184:
    if (HIDWORD(a4)) {
      goto LABEL_44;
    }
  }
  return a4;
}

unint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(__int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t i, uint64_t a6)
{
  LODWORD(v7) = v6;
  LOWORD(v13) = a1;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  v118[0] = 0;
  double v14 = _stringshims_strtod_l(a2, v118, 0);
  if (v118[0]) {
    BOOL v15 = &a2[a3] == v118[0];
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    double v27 = v14;
    if (!specialized static FixedWidthInteger._convert<A>(from:)(v118, v14) || (BYTE1(v118[0]) & 1) != 0) {
      goto LABEL_186;
    }
    if (fabs(v27) < 9.00719925e15) {
      return LOBYTE(v118[0]);
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1)
  {
LABEL_43:
    LODWORD(v20) = v122;
    unint64_t v19 = (unint64_t)v122 >> 48;
    a3 = (unsigned __int16)v123;
    unint64_t v31 = (unint64_t)v122 >> 32;
    unint64_t v32 = WORD1(v123);
    unint64_t v33 = WORD2(v123);
    unint64_t v34 = HIWORD(v123);
    unint64_t v35 = v124;
    unint64_t i = v125;
    v118[0] = v122;
    v118[1] = v123;
    __int16 v119 = v124;
    __int16 v120 = v125;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(v118);
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = a3;
    WORD1(v118[1]) = v32;
    WORD2(v118[1]) = v33;
    HIWORD(v118[1]) = v34;
    __int16 v119 = v35;
    __int16 v120 = i;
    int v36 = _So9NSDecimala__length_getter(v118);
    unint64_t v37 = v34;
    a4 = v33;
    unint64_t v13 = v32;
    unint64_t v7 = (const char *)a3;
    LOWORD(a3) = v31;
    if (!v36 && isNegative_getter) {
      goto LABEL_186;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    unint64_t v116 = v37;
    HIWORD(v118[1]) = v37;
    unint64_t v115 = v35;
    __int16 v119 = v35;
    __int16 v120 = i;
    int v38 = _So9NSDecimala__length_getter(v118);
    if (!v38) {
      goto LABEL_260;
    }
    unint64_t v39 = 0;
    int v40 = v38 - 1;
    if (v38 != 1)
    {
      __int16 v41 = v115;
      __int16 v42 = v116;
      while (2)
      {
        unint64_t v43 = v19;
        switch(v40)
        {
          case 1:
            goto LABEL_55;
          case 2:
            unint64_t v43 = (unint64_t)v7;
            goto LABEL_55;
          case 3:
            unint64_t v43 = v13;
            goto LABEL_55;
          case 4:
            unint64_t v43 = a4;
            goto LABEL_55;
          case 5:
            unint64_t v43 = v116;
            goto LABEL_55;
          case 6:
            unint64_t v43 = v115;
            goto LABEL_55;
          case 7:
            unint64_t v43 = i;
LABEL_55:
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            unint64_t v39 = v43 | (v39 << 16);
            if (--v40) {
              continue;
            }
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            goto LABEL_70;
          default:
            goto LABEL_286;
        }
      }
    }
    __int16 v41 = v115;
    __int16 v42 = v116;
LABEL_70:
    __int16 v47 = i;
    for (unint64_t i = (unsigned __int16)v31 | (v39 << 16); ; unint64_t i = 0)
    {
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v42;
      __int16 v119 = v41;
      __int16 v120 = v47;
      __int16 v48 = v41;
      if ((_So9NSDecimala__exponent_getter((char *)v118) & 0x80000000) == 0) {
        break;
      }
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v116;
      __int16 v119 = v48;
      __int16 v120 = v47;
      int v86 = _So9NSDecimala__exponent_getter((char *)v118);
      if (v86 > 0) {
        goto LABEL_271;
      }
      if (!v86) {
        goto LABEL_178;
      }
      unsigned int v87 = -v86 & ~(-v86 >> 31);
      unsigned int v88 = ~v86;
      while (v87 > v88)
      {
        i /= 0xAuLL;
        if (__CFADD__(v86++, 1)) {
          goto LABEL_178;
        }
      }
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __int16 v47 = i;
      __int16 v41 = v115;
      __int16 v42 = v116;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    HIWORD(v118[1]) = v116;
    __int16 v119 = v48;
    __int16 v120 = v47;
    int v49 = _So9NSDecimala__exponent_getter((char *)v118);
    if ((v49 & 0x80000000) == 0)
    {
      if (v49)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_186;
        }
        i *= 10;
        int v50 = v49 - 1;
        if (v49 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL)) {
            goto LABEL_186;
          }
          i *= 10;
          while (--v50)
          {
            uint64_t v51 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10;
            if (v51) {
              goto LABEL_186;
            }
          }
        }
      }
LABEL_178:
      if (!isNegative_getter) {
        goto LABEL_185;
      }
      if (i <= 0x7F) {
        return -(int)i;
      }
LABEL_186:
      uint64_t v92 = static String._fromUTF8Repairing(_:)();
      unint64_t i = v93;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v90 = v92;
      *(void *)(v90 + 8) = i;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_OWORD *)(v90 + 32) = 0u;
      char v91 = 11;
      goto LABEL_187;
    }
LABEL_269:
    __break(1u);
    goto LABEL_270;
  }
  BOOL v16 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v18 = (unsigned __int8 *)v16;
  unint64_t v19 = v17;
  unint64_t v20 = (unint64_t)&v16[v17];
  if ((v13 & 1) == 0)
  {
    if (v17 <= 0)
    {
      unint64_t v46 = (unsigned __int8 *)v16;
      goto LABEL_95;
    }
    uint64_t v44 = 0;
    uint64_t v45 = v17;
    while (1)
    {
      if (v44 < 0 || (BOOL v30 = v45 < 1, --v45, v30))
      {
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
        goto LABEL_254;
      }
      if (v16[v44] - 58 < 0xFFFFFFF6) {
        break;
      }
      unint64_t v46 = (unsigned __int8 *)&v16[++v44];
      if ((unint64_t)&v16[v44] >= v20) {
        goto LABEL_95;
      }
    }
LABEL_94:
    unint64_t v46 = &v18[v44];
LABEL_95:
    if ((unint64_t)v46 < v20)
    {
      char v55 = 0;
      char v56 = (unsigned __int8 *)(v46 - v18);
      char v57 = 1;
      char v58 = 1;
      while (1)
      {
        uint64_t v59 = 0;
        uint64_t v60 = &v18[v19] - v46;
        while (1)
        {
          if (v46 - v18 + v59 < 0 || (BOOL v30 = v60 < 1, --v60, v30))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            unint64_t v77 = (unint64_t)&v46[v59];
            if ((unint64_t)&v46[v59] >= a4)
            {
              unint64_t v78 = a4 + i;
              if (a4 + i >= v77)
              {
                if (v78 >= (unint64_t)&v46[v59 + 1]) {
                  unint64_t v78 = (unint64_t)&v46[v59 + 1];
                }
                if (v78 > a4)
                {
                  unint64_t v79 = i + a4;
                  unint64_t i = 1;
                  unint64_t v80 = a4;
                  while (1)
                  {
                    uint64_t v81 = 0;
                    uint64_t v82 = 0;
                    unint64_t v83 = v79 - v80;
                    while (1)
                    {
                      if ((uint64_t)(v80 - a4 + v82) < 0 || (uint64_t)(v83 + v81) < 1) {
                        goto LABEL_255;
                      }
                      int v84 = *(unsigned __int8 *)(v80 + v82);
                      if (v84 == 10)
                      {
                        BOOL v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          v80 += v82 + 1;
                          goto LABEL_169;
                        }
                        goto LABEL_275;
                      }
                      if (v84 == 13) {
                        break;
                      }
                      a3 = v82 + 1;
                      if (__OFADD__(v82, 1)) {
                        goto LABEL_256;
                      }
                      ++v82;
                      --v81;
                      if (v80 + v82 >= v78) {
                        goto LABEL_216;
                      }
                    }
                    uint64_t v85 = v80 + v82;
                    if (v77 < v80 + v82 + 1) {
                      goto LABEL_167;
                    }
                    if (((v80 - a4 + v82 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v82 + v83) < 1) {
                      goto LABEL_281;
                    }
                    if (*(unsigned char *)(v85 + 1) == 10) {
                      uint64_t v85 = v80 + v82 + 1;
                    }
LABEL_167:
                    BOOL v70 = __OFADD__(i++, 1);
                    if (v70) {
                      goto LABEL_276;
                    }
                    unint64_t v80 = v85 + 1;
LABEL_169:
                    if (v80 >= v78)
                    {
                      a3 = 0;
                      goto LABEL_216;
                    }
                  }
                }
                a3 = 0;
                unint64_t i = 1;
LABEL_216:
                BOOL v74 = &v46[v59 - a4];
                goto LABEL_244;
              }
            }
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
            goto LABEL_280;
          }
          LODWORD(v7) = v46[v59];
          if ((v7 - 58) < 0xFFFFFFF6) {
            break;
          }
          if (__OFADD__(&v56[v59], 1)) {
            goto LABEL_144;
          }
          if ((unint64_t)&v46[++v59] >= v20) {
            goto LABEL_145;
          }
        }
        uint64_t v61 = (uint64_t)&v56[v59];
        switch(v46[v59])
        {
          case '+':
          case '-':
            if (v61 != 0 || (v55 & 1) == 0) {
              goto LABEL_140;
            }
            char v56 = 0;
            char v55 = 0;
            char v57 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            if ((unint64_t)v46 >= v20) {
              goto LABEL_248;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v61 < 1 || (v58 & 1) == 0)
            {
              unint64_t v95 = (unint64_t)&v46[v59];
              if ((unint64_t)&v46[v59] < a4) {
                goto LABEL_274;
              }
              unint64_t v96 = a4 + i;
              if (a4 + i < v95) {
                goto LABEL_274;
              }
              if (v96 >= (unint64_t)&v46[v59 + 1]) {
                unint64_t v96 = (unint64_t)&v46[v59 + 1];
              }
              if (v96 <= a4)
              {
                a3 = 0;
                unint64_t i = 1;
              }
              else
              {
                unint64_t v97 = i + a4;
                unint64_t i = 1;
                unint64_t v98 = a4;
                do
                {
                  uint64_t v99 = 0;
                  uint64_t v100 = 0;
                  unint64_t v101 = v97 - v98;
                  while (1)
                  {
                    if ((uint64_t)(v98 - a4 + v100) < 0 || (uint64_t)(v101 + v99) < 1) {
                      goto LABEL_257;
                    }
                    int v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10) {
                      break;
                    }
                    if (v102 == 13)
                    {
                      uint64_t v103 = v98 + v100;
                      if (v95 < v98 + v100 + 1) {
                        goto LABEL_209;
                      }
                      if (((v98 - a4 + v100 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v100 + v101) >= 1)
                      {
                        if (*(unsigned char *)(v103 + 1) == 10) {
                          uint64_t v103 = v98 + v100 + 1;
                        }
LABEL_209:
                        BOOL v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          unint64_t v98 = v103 + 1;
                          goto LABEL_213;
                        }
LABEL_280:
                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
LABEL_283:
                        __break(1u);
                      }
                      __break(1u);
                    }
                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1)) {
                      goto LABEL_258;
                    }
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96) {
                      goto LABEL_243;
                    }
                  }
                  BOOL v70 = __OFADD__(i++, 1);
                  if (v70) {
                    goto LABEL_279;
                  }
                  v98 += v100 + 1;
LABEL_213:
                  ;
                }
                while (v98 < v96);
                a3 = 0;
              }
LABEL_243:
              BOOL v74 = &v46[v59 - a4];
              LODWORD(v7) = 46;
LABEL_244:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v90 = xmmword_182112860;
              *(void *)(v90 + 16) = v7;
              *(void *)(v90 + 24) = i;
              *(void *)(v90 + 32) = a3;
              *(void *)(v90 + 40) = v74;
              char v91 = 1;
LABEL_187:
              *(unsigned char *)(v90 + 48) = v91;
              swift_willThrow();
              return i;
            }
            char v56 = 0;
            char v55 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            char v57 = 1;
            if ((unint64_t)v46 >= v20)
            {
              __break(1u);
              goto LABEL_115;
            }
            break;
          case 'E':
            goto LABEL_109;
          default:
            if (v7 != 101)
            {
LABEL_140:
              unint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v46[v59], a4, i);
              a3 = v72;
              BOOL v74 = v73;
              goto LABEL_244;
            }
LABEL_109:
            if (v61 < 1 || (v57 & 1) == 0) {
              goto LABEL_146;
            }
            char v56 = 0;
            char v57 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            char v55 = 1;
            if ((unint64_t)v46 >= v20) {
              goto LABEL_249;
            }
            continue;
        }
      }
    }
    goto LABEL_264;
  }
  if (v17 < 1) {
    goto LABEL_259;
  }
  int v21 = *(unsigned __int8 *)v16;
  if (v21 == 45 || (unint64_t v7 = v16, v21 == 43)) {
    unint64_t v7 = v16 + 1;
  }
  if (v20 < (unint64_t)v7)
  {
    __break(1u);
    goto LABEL_262;
  }
  unint64_t v13 = v7 - v16;
  if (v7 - v16 < 0)
  {
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }
  if ((uint64_t)(v20 - (void)v7) < 0)
  {
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }
  if ((uint64_t)(v20 - (void)v7) >= 2) {
    size_t v22 = 2;
  }
  else {
    size_t v22 = v20 - (void)v7;
  }
  if (!_stringshims_strncasecmp_l(v7, "0x", v22, 0))
  {
    unint64_t v46 = (unsigned __int8 *)(v7 + 2);
    uint64_t v44 = v20 - (void)(v7 + 2);
    if (v44 >= 1 && (unint64_t)v46 < v20)
    {
      uint64_t v44 = v46 - v18;
      if (((v46 - v18) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v7[-a4 + 2];
        uint64_t v44 = &v18[v19] - (unsigned __int8 *)v7 - 3;
        unint64_t v52 = v13 + 3;
        while (1)
        {
          unint64_t v53 = v52;
          unint64_t v19 = *v46;
          if ((v19 - 58) <= 0xF5u
            && (*v46 - 65 > 0x25 || ((1 << (v19 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }
          BOOL v30 = v44-- < 1;
          if (!v30 && (unint64_t)++v46 < v20)
          {
            ++a3;
            ++v52;
            if ((v53 & 0x8000000000000000) == 0) {
              continue;
            }
          }
          goto LABEL_93;
        }
LABEL_115:
        if ((unint64_t)v46 >= a4)
        {
          unint64_t v62 = a4 + i;
          if (a4 + i >= (unint64_t)v46)
          {
            if (v62 >= (unint64_t)(v46 + 1)) {
              unint64_t v62 = (unint64_t)(v46 + 1);
            }
            if (v62 > a4)
            {
              uint64_t v63 = -(uint64_t)a4;
              unint64_t v64 = i + a4;
              unint64_t i = 1;
              while (1)
              {
                uint64_t v65 = 0;
                uint64_t v66 = 0;
                unint64_t v67 = v64 - a4;
                while (1)
                {
                  if ((uint64_t)(v63 + a4 + v66) < 0 || (uint64_t)(v67 + v65) < 1) {
                    goto LABEL_250;
                  }
                  int v68 = *(unsigned __int8 *)(a4 + v66);
                  if (v68 == 10)
                  {
                    BOOL v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      a4 += v66 + 1;
                      goto LABEL_138;
                    }
                    goto LABEL_272;
                  }
                  if (v68 == 13) {
                    break;
                  }
                  uint64_t v69 = v66 + 1;
                  if (__OFADD__(v66, 1)) {
                    goto LABEL_251;
                  }
                  ++v66;
                  --v65;
                  if (a4 + v66 >= v62)
                  {
                    unint64_t v13 = 0xED00007265626D75;
                    unint64_t v20 = 0x6E20786568206E69;
                    goto LABEL_181;
                  }
                }
                uint64_t v71 = a4 + v66;
                if ((unint64_t)v46 < a4 + v66 + 1) {
                  goto LABEL_136;
                }
                if (((v63 + a4 + v66 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v66 + v67) < 1) {
                  goto LABEL_277;
                }
                if (*(unsigned char *)(v71 + 1) == 10) {
                  uint64_t v71 = a4 + v66 + 1;
                }
LABEL_136:
                BOOL v70 = __OFADD__(i++, 1);
                if (v70) {
                  goto LABEL_273;
                }
                a4 = v71 + 1;
LABEL_138:
                unint64_t v13 = 0xED00007265626D75;
                unint64_t v20 = 0x6E20786568206E69;
                if (a4 >= v62)
                {
                  uint64_t v69 = 0;
                  goto LABEL_181;
                }
              }
            }
            uint64_t v69 = 0;
            unint64_t v13 = 0xED00007265626D75;
            unint64_t v20 = 0x6E20786568206E69;
            unint64_t i = 1;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v90 = v20;
            *(void *)(v90 + 8) = v13;
            *(void *)(v90 + 16) = v19;
            *(void *)(v90 + 24) = i;
            *(void *)(v90 + 32) = v69;
            *(void *)(v90 + 40) = a3;
            char v91 = 1;
            goto LABEL_187;
          }
        }
LABEL_268:
        __break(1u);
        goto LABEL_269;
      }
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if ((unint64_t)v7 >= v20)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  char v23 = 0;
  char v24 = 0;
  char v25 = (const char *)&v18[v19];
  char v26 = 1;
LABEL_24:
  uint64_t v28 = 0;
  uint64_t v29 = v25 - v7;
  while (v7 - (const char *)v18 + v28 >= 0)
  {
    BOOL v30 = v29-- < 1;
    if (v30) {
      break;
    }
    LODWORD(v19) = v7[v28];
    if ((v19 - 58) <= 0xF5u)
    {
      switch(v7[v28])
      {
        case '+':
        case '-':
          if (v28 != 0 || (v23 & 1) == 0) {
            goto LABEL_141;
          }
          char v23 = 0;
          char v26 = 0;
          v7 += v28 + 1;
          char v24 = 3;
          if ((unint64_t)v7 >= v20) {
            goto LABEL_252;
          }
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            unint64_t v104 = (unint64_t)&v7[v28];
            if ((unint64_t)&v7[v28] < a4) {
              goto LABEL_278;
            }
            unint64_t v105 = a4 + i;
            if (a4 + i < v104) {
              goto LABEL_278;
            }
            if (v105 >= (unint64_t)&v7[v28 + 1]) {
              unint64_t v105 = (unint64_t)&v7[v28 + 1];
            }
            if (v105 > a4)
            {
              unint64_t v106 = i + a4;
              unint64_t i = 1;
              unint64_t v107 = a4;
              while (1)
              {
                uint64_t v108 = 0;
                uint64_t v109 = 0;
                unint64_t v110 = v106 - v107;
                while (1)
                {
                  if ((uint64_t)(v107 - a4 + v109) < 0 || (uint64_t)(v110 + v108) < 1) {
                    goto LABEL_265;
                  }
                  int v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    BOOL v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      v107 += v109 + 1;
                      goto LABEL_240;
                    }
                    goto LABEL_282;
                  }
                  if (v111 == 13) {
                    break;
                  }
                  uint64_t v69 = v109 + 1;
                  if (__OFADD__(v109, 1)) {
                    goto LABEL_266;
                  }
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105) {
                    goto LABEL_246;
                  }
                }
                uint64_t v112 = v107 + v109;
                if (v104 >= v107 + v109 + 1)
                {
                  if (((v107 - a4 + v109 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v109 + v110) < 1)
                  {
                    __break(1u);
LABEL_286:
                    v118[0] = 0;
                    v118[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v118, "Invalid index ");
                    HIBYTE(v118[1]) = -18;
                    v113._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v113);
                    swift_bridgeObjectRelease();
                    v114._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
                    v114._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v114);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181EC78B8);
                  }
                  if (*(unsigned char *)(v112 + 1) == 10) {
                    uint64_t v112 = v107 + v109 + 1;
                  }
                }
                BOOL v70 = __OFADD__(i++, 1);
                if (v70) {
                  goto LABEL_283;
                }
                unint64_t v107 = v112 + 1;
LABEL_240:
                if (v107 >= v105)
                {
                  uint64_t v69 = 0;
                  goto LABEL_246;
                }
              }
            }
            uint64_t v69 = 0;
            unint64_t i = 1;
LABEL_246:
            a3 = (uint64_t)&v7[v28 - a4];
            LOBYTE(v19) = 46;
LABEL_142:
            unint64_t v13 = 0xE900000000000072;
            unint64_t v20 = 0x65626D756E206E69;
            goto LABEL_181;
          }
          char v23 = 0;
          char v26 = 0;
          v7 += v28 + 1;
          char v24 = 1;
          if ((unint64_t)v7 >= v20)
          {
            __break(1u);
            goto LABEL_43;
          }
          break;
        case 'E':
          goto LABEL_36;
        default:
          if (v19 != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v24 != 1 && (v24 || v28 < 1))
          {
LABEL_141:
            unint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v7[v28], a4, i);
            uint64_t v69 = v75;
            a3 = v76;
            goto LABEL_142;
          }
          char v26 = 0;
          v7 += v28 + 1;
          char v24 = 2;
          char v23 = 1;
          if ((unint64_t)v7 >= v20) {
            goto LABEL_253;
          }
          goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (__OFADD__(v28, 1)) {
      goto LABEL_183;
    }
    if ((unint64_t)&v7[++v28] >= v20) {
      goto LABEL_184;
    }
  }
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if (i > 0x7F) {
    goto LABEL_186;
  }
  return i;
}

{
  int v6;
  const char *v7;
  unint64_t v13;
  double v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  size_t v22;
  char v23;
  char v24;
  const char *v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int16 v47;
  __int16 v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v55;
  unsigned __int8 *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  Swift::String v113;
  Swift::String v114;
  unint64_t v115;
  unint64_t v116;
  int isNegative_getter;
  char *v118[2];
  __int16 v119;
  __int16 v120;
  unsigned char v121[40];
  char *v122;
  char *v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  char v126;
  uint64_t v127;

  LODWORD(v7) = v6;
  LOWORD(v13) = a1;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  v118[0] = 0;
  double v14 = _stringshims_strtod_l(a2, v118, 0);
  if (v118[0]) {
    BOOL v15 = &a2[a3] == v118[0];
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    double v27 = v14;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)v118, v14) || (BYTE2(v118[0]) & 1) != 0) {
      goto LABEL_186;
    }
    if (fabs(v27) < 9.00719925e15) {
      return LOWORD(v118[0]);
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1)
  {
LABEL_43:
    LODWORD(v20) = v122;
    unint64_t v19 = (unint64_t)v122 >> 48;
    a3 = (unsigned __int16)v123;
    unint64_t v31 = (unint64_t)v122 >> 32;
    unint64_t v32 = WORD1(v123);
    unint64_t v33 = WORD2(v123);
    unint64_t v34 = HIWORD(v123);
    unint64_t v35 = v124;
    unint64_t i = v125;
    v118[0] = v122;
    v118[1] = v123;
    __int16 v119 = v124;
    __int16 v120 = v125;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(v118);
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = a3;
    WORD1(v118[1]) = v32;
    WORD2(v118[1]) = v33;
    HIWORD(v118[1]) = v34;
    __int16 v119 = v35;
    __int16 v120 = i;
    int v36 = _So9NSDecimala__length_getter(v118);
    unint64_t v37 = v34;
    a4 = v33;
    unint64_t v13 = v32;
    unint64_t v7 = (const char *)a3;
    LOWORD(a3) = v31;
    if (!v36 && isNegative_getter) {
      goto LABEL_186;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    unint64_t v116 = v37;
    HIWORD(v118[1]) = v37;
    unint64_t v115 = v35;
    __int16 v119 = v35;
    __int16 v120 = i;
    int v38 = _So9NSDecimala__length_getter(v118);
    if (!v38) {
      goto LABEL_260;
    }
    unint64_t v39 = 0;
    int v40 = v38 - 1;
    if (v38 != 1)
    {
      __int16 v41 = v115;
      __int16 v42 = v116;
      while (2)
      {
        unint64_t v43 = v19;
        switch(v40)
        {
          case 1:
            goto LABEL_55;
          case 2:
            unint64_t v43 = (unint64_t)v7;
            goto LABEL_55;
          case 3:
            unint64_t v43 = v13;
            goto LABEL_55;
          case 4:
            unint64_t v43 = a4;
            goto LABEL_55;
          case 5:
            unint64_t v43 = v116;
            goto LABEL_55;
          case 6:
            unint64_t v43 = v115;
            goto LABEL_55;
          case 7:
            unint64_t v43 = i;
LABEL_55:
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            unint64_t v39 = v43 | (v39 << 16);
            if (--v40) {
              continue;
            }
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            goto LABEL_70;
          default:
            goto LABEL_286;
        }
      }
    }
    __int16 v41 = v115;
    __int16 v42 = v116;
LABEL_70:
    __int16 v47 = i;
    for (unint64_t i = (unsigned __int16)v31 | (v39 << 16); ; unint64_t i = 0)
    {
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v42;
      __int16 v119 = v41;
      __int16 v120 = v47;
      __int16 v48 = v41;
      if ((_So9NSDecimala__exponent_getter((char *)v118) & 0x80000000) == 0) {
        break;
      }
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v116;
      __int16 v119 = v48;
      __int16 v120 = v47;
      int v86 = _So9NSDecimala__exponent_getter((char *)v118);
      if (v86 > 0) {
        goto LABEL_271;
      }
      if (!v86) {
        goto LABEL_178;
      }
      unsigned int v87 = -v86 & ~(-v86 >> 31);
      unsigned int v88 = ~v86;
      while (v87 > v88)
      {
        i /= 0xAuLL;
        if (__CFADD__(v86++, 1)) {
          goto LABEL_178;
        }
      }
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __int16 v47 = i;
      __int16 v41 = v115;
      __int16 v42 = v116;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    HIWORD(v118[1]) = v116;
    __int16 v119 = v48;
    __int16 v120 = v47;
    int v49 = _So9NSDecimala__exponent_getter((char *)v118);
    if ((v49 & 0x80000000) == 0)
    {
      if (v49)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_186;
        }
        i *= 10;
        int v50 = v49 - 1;
        if (v49 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL)) {
            goto LABEL_186;
          }
          i *= 10;
          while (--v50)
          {
            uint64_t v51 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10;
            if (v51) {
              goto LABEL_186;
            }
          }
        }
      }
LABEL_178:
      if (!isNegative_getter) {
        goto LABEL_185;
      }
      if (!(i >> 15)) {
        return -(int)i;
      }
LABEL_186:
      uint64_t v92 = static String._fromUTF8Repairing(_:)();
      unint64_t i = v93;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v90 = v92;
      *(void *)(v90 + 8) = i;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_OWORD *)(v90 + 32) = 0u;
      char v91 = 11;
      goto LABEL_187;
    }
LABEL_269:
    __break(1u);
    goto LABEL_270;
  }
  BOOL v16 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v18 = (unsigned __int8 *)v16;
  unint64_t v19 = v17;
  unint64_t v20 = (unint64_t)&v16[v17];
  if ((v13 & 1) == 0)
  {
    if (v17 <= 0)
    {
      unint64_t v46 = (unsigned __int8 *)v16;
      goto LABEL_95;
    }
    uint64_t v44 = 0;
    uint64_t v45 = v17;
    while (1)
    {
      if (v44 < 0 || (BOOL v30 = v45 < 1, --v45, v30))
      {
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
        goto LABEL_254;
      }
      if (v16[v44] - 58 < 0xFFFFFFF6) {
        break;
      }
      unint64_t v46 = (unsigned __int8 *)&v16[++v44];
      if ((unint64_t)&v16[v44] >= v20) {
        goto LABEL_95;
      }
    }
LABEL_94:
    unint64_t v46 = &v18[v44];
LABEL_95:
    if ((unint64_t)v46 < v20)
    {
      char v55 = 0;
      char v56 = (unsigned __int8 *)(v46 - v18);
      char v57 = 1;
      char v58 = 1;
      while (1)
      {
        uint64_t v59 = 0;
        uint64_t v60 = &v18[v19] - v46;
        while (1)
        {
          if (v46 - v18 + v59 < 0 || (BOOL v30 = v60 < 1, --v60, v30))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            unint64_t v77 = (unint64_t)&v46[v59];
            if ((unint64_t)&v46[v59] >= a4)
            {
              unint64_t v78 = a4 + i;
              if (a4 + i >= v77)
              {
                if (v78 >= (unint64_t)&v46[v59 + 1]) {
                  unint64_t v78 = (unint64_t)&v46[v59 + 1];
                }
                if (v78 > a4)
                {
                  unint64_t v79 = i + a4;
                  unint64_t i = 1;
                  unint64_t v80 = a4;
                  while (1)
                  {
                    uint64_t v81 = 0;
                    uint64_t v82 = 0;
                    unint64_t v83 = v79 - v80;
                    while (1)
                    {
                      if ((uint64_t)(v80 - a4 + v82) < 0 || (uint64_t)(v83 + v81) < 1) {
                        goto LABEL_255;
                      }
                      int v84 = *(unsigned __int8 *)(v80 + v82);
                      if (v84 == 10)
                      {
                        BOOL v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          v80 += v82 + 1;
                          goto LABEL_169;
                        }
                        goto LABEL_275;
                      }
                      if (v84 == 13) {
                        break;
                      }
                      a3 = v82 + 1;
                      if (__OFADD__(v82, 1)) {
                        goto LABEL_256;
                      }
                      ++v82;
                      --v81;
                      if (v80 + v82 >= v78) {
                        goto LABEL_216;
                      }
                    }
                    uint64_t v85 = v80 + v82;
                    if (v77 < v80 + v82 + 1) {
                      goto LABEL_167;
                    }
                    if (((v80 - a4 + v82 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v82 + v83) < 1) {
                      goto LABEL_281;
                    }
                    if (*(unsigned char *)(v85 + 1) == 10) {
                      uint64_t v85 = v80 + v82 + 1;
                    }
LABEL_167:
                    BOOL v70 = __OFADD__(i++, 1);
                    if (v70) {
                      goto LABEL_276;
                    }
                    unint64_t v80 = v85 + 1;
LABEL_169:
                    if (v80 >= v78)
                    {
                      a3 = 0;
                      goto LABEL_216;
                    }
                  }
                }
                a3 = 0;
                unint64_t i = 1;
LABEL_216:
                BOOL v74 = &v46[v59 - a4];
                goto LABEL_244;
              }
            }
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
            goto LABEL_280;
          }
          LODWORD(v7) = v46[v59];
          if ((v7 - 58) < 0xFFFFFFF6) {
            break;
          }
          if (__OFADD__(&v56[v59], 1)) {
            goto LABEL_144;
          }
          if ((unint64_t)&v46[++v59] >= v20) {
            goto LABEL_145;
          }
        }
        uint64_t v61 = (uint64_t)&v56[v59];
        switch(v46[v59])
        {
          case '+':
          case '-':
            if (v61 != 0 || (v55 & 1) == 0) {
              goto LABEL_140;
            }
            char v56 = 0;
            char v55 = 0;
            char v57 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            if ((unint64_t)v46 >= v20) {
              goto LABEL_248;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v61 < 1 || (v58 & 1) == 0)
            {
              unint64_t v95 = (unint64_t)&v46[v59];
              if ((unint64_t)&v46[v59] < a4) {
                goto LABEL_274;
              }
              unint64_t v96 = a4 + i;
              if (a4 + i < v95) {
                goto LABEL_274;
              }
              if (v96 >= (unint64_t)&v46[v59 + 1]) {
                unint64_t v96 = (unint64_t)&v46[v59 + 1];
              }
              if (v96 <= a4)
              {
                a3 = 0;
                unint64_t i = 1;
              }
              else
              {
                unint64_t v97 = i + a4;
                unint64_t i = 1;
                unint64_t v98 = a4;
                do
                {
                  uint64_t v99 = 0;
                  uint64_t v100 = 0;
                  unint64_t v101 = v97 - v98;
                  while (1)
                  {
                    if ((uint64_t)(v98 - a4 + v100) < 0 || (uint64_t)(v101 + v99) < 1) {
                      goto LABEL_257;
                    }
                    int v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10) {
                      break;
                    }
                    if (v102 == 13)
                    {
                      uint64_t v103 = v98 + v100;
                      if (v95 < v98 + v100 + 1) {
                        goto LABEL_209;
                      }
                      if (((v98 - a4 + v100 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v100 + v101) >= 1)
                      {
                        if (*(unsigned char *)(v103 + 1) == 10) {
                          uint64_t v103 = v98 + v100 + 1;
                        }
LABEL_209:
                        BOOL v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          unint64_t v98 = v103 + 1;
                          goto LABEL_213;
                        }
LABEL_280:
                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
LABEL_283:
                        __break(1u);
                      }
                      __break(1u);
                    }
                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1)) {
                      goto LABEL_258;
                    }
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96) {
                      goto LABEL_243;
                    }
                  }
                  BOOL v70 = __OFADD__(i++, 1);
                  if (v70) {
                    goto LABEL_279;
                  }
                  v98 += v100 + 1;
LABEL_213:
                  ;
                }
                while (v98 < v96);
                a3 = 0;
              }
LABEL_243:
              BOOL v74 = &v46[v59 - a4];
              LODWORD(v7) = 46;
LABEL_244:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v90 = xmmword_182112860;
              *(void *)(v90 + 16) = v7;
              *(void *)(v90 + 24) = i;
              *(void *)(v90 + 32) = a3;
              *(void *)(v90 + 40) = v74;
              char v91 = 1;
LABEL_187:
              *(unsigned char *)(v90 + 48) = v91;
              swift_willThrow();
              return i;
            }
            char v56 = 0;
            char v55 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            char v57 = 1;
            if ((unint64_t)v46 >= v20)
            {
              __break(1u);
              goto LABEL_115;
            }
            break;
          case 'E':
            goto LABEL_109;
          default:
            if (v7 != 101)
            {
LABEL_140:
              unint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v46[v59], a4, i);
              a3 = v72;
              BOOL v74 = v73;
              goto LABEL_244;
            }
LABEL_109:
            if (v61 < 1 || (v57 & 1) == 0) {
              goto LABEL_146;
            }
            char v56 = 0;
            char v57 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            char v55 = 1;
            if ((unint64_t)v46 >= v20) {
              goto LABEL_249;
            }
            continue;
        }
      }
    }
    goto LABEL_264;
  }
  if (v17 < 1) {
    goto LABEL_259;
  }
  int v21 = *(unsigned __int8 *)v16;
  if (v21 == 45 || (unint64_t v7 = v16, v21 == 43)) {
    unint64_t v7 = v16 + 1;
  }
  if (v20 < (unint64_t)v7)
  {
    __break(1u);
    goto LABEL_262;
  }
  unint64_t v13 = v7 - v16;
  if (v7 - v16 < 0)
  {
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }
  if ((uint64_t)(v20 - (void)v7) < 0)
  {
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }
  if ((uint64_t)(v20 - (void)v7) >= 2) {
    size_t v22 = 2;
  }
  else {
    size_t v22 = v20 - (void)v7;
  }
  if (!_stringshims_strncasecmp_l(v7, "0x", v22, 0))
  {
    unint64_t v46 = (unsigned __int8 *)(v7 + 2);
    uint64_t v44 = v20 - (void)(v7 + 2);
    if (v44 >= 1 && (unint64_t)v46 < v20)
    {
      uint64_t v44 = v46 - v18;
      if (((v46 - v18) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v7[-a4 + 2];
        uint64_t v44 = &v18[v19] - (unsigned __int8 *)v7 - 3;
        unint64_t v52 = v13 + 3;
        while (1)
        {
          unint64_t v53 = v52;
          unint64_t v19 = *v46;
          if ((v19 - 58) <= 0xF5u
            && (*v46 - 65 > 0x25 || ((1 << (v19 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }
          BOOL v30 = v44-- < 1;
          if (!v30 && (unint64_t)++v46 < v20)
          {
            ++a3;
            ++v52;
            if ((v53 & 0x8000000000000000) == 0) {
              continue;
            }
          }
          goto LABEL_93;
        }
LABEL_115:
        if ((unint64_t)v46 >= a4)
        {
          unint64_t v62 = a4 + i;
          if (a4 + i >= (unint64_t)v46)
          {
            if (v62 >= (unint64_t)(v46 + 1)) {
              unint64_t v62 = (unint64_t)(v46 + 1);
            }
            if (v62 > a4)
            {
              uint64_t v63 = -(uint64_t)a4;
              unint64_t v64 = i + a4;
              unint64_t i = 1;
              while (1)
              {
                uint64_t v65 = 0;
                uint64_t v66 = 0;
                unint64_t v67 = v64 - a4;
                while (1)
                {
                  if ((uint64_t)(v63 + a4 + v66) < 0 || (uint64_t)(v67 + v65) < 1) {
                    goto LABEL_250;
                  }
                  int v68 = *(unsigned __int8 *)(a4 + v66);
                  if (v68 == 10)
                  {
                    BOOL v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      a4 += v66 + 1;
                      goto LABEL_138;
                    }
                    goto LABEL_272;
                  }
                  if (v68 == 13) {
                    break;
                  }
                  uint64_t v69 = v66 + 1;
                  if (__OFADD__(v66, 1)) {
                    goto LABEL_251;
                  }
                  ++v66;
                  --v65;
                  if (a4 + v66 >= v62)
                  {
                    unint64_t v13 = 0xED00007265626D75;
                    unint64_t v20 = 0x6E20786568206E69;
                    goto LABEL_181;
                  }
                }
                uint64_t v71 = a4 + v66;
                if ((unint64_t)v46 < a4 + v66 + 1) {
                  goto LABEL_136;
                }
                if (((v63 + a4 + v66 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v66 + v67) < 1) {
                  goto LABEL_277;
                }
                if (*(unsigned char *)(v71 + 1) == 10) {
                  uint64_t v71 = a4 + v66 + 1;
                }
LABEL_136:
                BOOL v70 = __OFADD__(i++, 1);
                if (v70) {
                  goto LABEL_273;
                }
                a4 = v71 + 1;
LABEL_138:
                unint64_t v13 = 0xED00007265626D75;
                unint64_t v20 = 0x6E20786568206E69;
                if (a4 >= v62)
                {
                  uint64_t v69 = 0;
                  goto LABEL_181;
                }
              }
            }
            uint64_t v69 = 0;
            unint64_t v13 = 0xED00007265626D75;
            unint64_t v20 = 0x6E20786568206E69;
            unint64_t i = 1;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v90 = v20;
            *(void *)(v90 + 8) = v13;
            *(void *)(v90 + 16) = v19;
            *(void *)(v90 + 24) = i;
            *(void *)(v90 + 32) = v69;
            *(void *)(v90 + 40) = a3;
            char v91 = 1;
            goto LABEL_187;
          }
        }
LABEL_268:
        __break(1u);
        goto LABEL_269;
      }
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if ((unint64_t)v7 >= v20)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  char v23 = 0;
  char v24 = 0;
  char v25 = (const char *)&v18[v19];
  char v26 = 1;
LABEL_24:
  uint64_t v28 = 0;
  uint64_t v29 = v25 - v7;
  while (v7 - (const char *)v18 + v28 >= 0)
  {
    BOOL v30 = v29-- < 1;
    if (v30) {
      break;
    }
    LODWORD(v19) = v7[v28];
    if ((v19 - 58) <= 0xF5u)
    {
      switch(v7[v28])
      {
        case '+':
        case '-':
          if (v28 != 0 || (v23 & 1) == 0) {
            goto LABEL_141;
          }
          char v23 = 0;
          char v26 = 0;
          v7 += v28 + 1;
          char v24 = 3;
          if ((unint64_t)v7 >= v20) {
            goto LABEL_252;
          }
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            unint64_t v104 = (unint64_t)&v7[v28];
            if ((unint64_t)&v7[v28] < a4) {
              goto LABEL_278;
            }
            unint64_t v105 = a4 + i;
            if (a4 + i < v104) {
              goto LABEL_278;
            }
            if (v105 >= (unint64_t)&v7[v28 + 1]) {
              unint64_t v105 = (unint64_t)&v7[v28 + 1];
            }
            if (v105 > a4)
            {
              unint64_t v106 = i + a4;
              unint64_t i = 1;
              unint64_t v107 = a4;
              while (1)
              {
                uint64_t v108 = 0;
                uint64_t v109 = 0;
                unint64_t v110 = v106 - v107;
                while (1)
                {
                  if ((uint64_t)(v107 - a4 + v109) < 0 || (uint64_t)(v110 + v108) < 1) {
                    goto LABEL_265;
                  }
                  int v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    BOOL v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      v107 += v109 + 1;
                      goto LABEL_240;
                    }
                    goto LABEL_282;
                  }
                  if (v111 == 13) {
                    break;
                  }
                  uint64_t v69 = v109 + 1;
                  if (__OFADD__(v109, 1)) {
                    goto LABEL_266;
                  }
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105) {
                    goto LABEL_246;
                  }
                }
                uint64_t v112 = v107 + v109;
                if (v104 >= v107 + v109 + 1)
                {
                  if (((v107 - a4 + v109 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v109 + v110) < 1)
                  {
                    __break(1u);
LABEL_286:
                    v118[0] = 0;
                    v118[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v118, "Invalid index ");
                    HIBYTE(v118[1]) = -18;
                    v113._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v113);
                    swift_bridgeObjectRelease();
                    v114._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
                    v114._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v114);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181EC8988);
                  }
                  if (*(unsigned char *)(v112 + 1) == 10) {
                    uint64_t v112 = v107 + v109 + 1;
                  }
                }
                BOOL v70 = __OFADD__(i++, 1);
                if (v70) {
                  goto LABEL_283;
                }
                unint64_t v107 = v112 + 1;
LABEL_240:
                if (v107 >= v105)
                {
                  uint64_t v69 = 0;
                  goto LABEL_246;
                }
              }
            }
            uint64_t v69 = 0;
            unint64_t i = 1;
LABEL_246:
            a3 = (uint64_t)&v7[v28 - a4];
            LOBYTE(v19) = 46;
LABEL_142:
            unint64_t v13 = 0xE900000000000072;
            unint64_t v20 = 0x65626D756E206E69;
            goto LABEL_181;
          }
          char v23 = 0;
          char v26 = 0;
          v7 += v28 + 1;
          char v24 = 1;
          if ((unint64_t)v7 >= v20)
          {
            __break(1u);
            goto LABEL_43;
          }
          break;
        case 'E':
          goto LABEL_36;
        default:
          if (v19 != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v24 != 1 && (v24 || v28 < 1))
          {
LABEL_141:
            unint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v7[v28], a4, i);
            uint64_t v69 = v75;
            a3 = v76;
            goto LABEL_142;
          }
          char v26 = 0;
          v7 += v28 + 1;
          char v24 = 2;
          char v23 = 1;
          if ((unint64_t)v7 >= v20) {
            goto LABEL_253;
          }
          goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (__OFADD__(v28, 1)) {
      goto LABEL_183;
    }
    if ((unint64_t)&v7[++v28] >= v20) {
      goto LABEL_184;
    }
  }
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if (i >> 15) {
    goto LABEL_186;
  }
  return i;
}

{
  int v6;
  const char *v7;
  unint64_t v13;
  double v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  size_t v22;
  char v23;
  char v24;
  const char *v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int16 v47;
  __int16 v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v55;
  unsigned __int8 *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  Swift::String v113;
  Swift::String v114;
  unint64_t v115;
  unint64_t v116;
  int isNegative_getter;
  char *v118[2];
  __int16 v119;
  __int16 v120;
  unsigned char v121[40];
  char *v122;
  char *v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  char v126;
  uint64_t v127;

  LODWORD(v7) = v6;
  LOWORD(v13) = a1;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  v118[0] = 0;
  double v14 = _stringshims_strtod_l(a2, v118, 0);
  if (v118[0]) {
    BOOL v15 = &a2[a3] == v118[0];
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    double v27 = v14;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)v118, v14) || (BYTE4(v118[0]) & 1) != 0) {
      goto LABEL_186;
    }
    if (fabs(v27) < 9.00719925e15) {
      return LODWORD(v118[0]);
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1)
  {
LABEL_43:
    LODWORD(v20) = v122;
    unint64_t v19 = (unint64_t)v122 >> 48;
    a3 = (unsigned __int16)v123;
    unint64_t v31 = (unint64_t)v122 >> 32;
    unint64_t v32 = WORD1(v123);
    unint64_t v33 = WORD2(v123);
    unint64_t v34 = HIWORD(v123);
    unint64_t v35 = v124;
    unint64_t i = v125;
    v118[0] = v122;
    v118[1] = v123;
    __int16 v119 = v124;
    __int16 v120 = v125;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(v118);
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = a3;
    WORD1(v118[1]) = v32;
    WORD2(v118[1]) = v33;
    HIWORD(v118[1]) = v34;
    __int16 v119 = v35;
    __int16 v120 = i;
    int v36 = _So9NSDecimala__length_getter(v118);
    unint64_t v37 = v34;
    a4 = v33;
    unint64_t v13 = v32;
    unint64_t v7 = (const char *)a3;
    LOWORD(a3) = v31;
    if (!v36 && isNegative_getter) {
      goto LABEL_186;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    unint64_t v116 = v37;
    HIWORD(v118[1]) = v37;
    unint64_t v115 = v35;
    __int16 v119 = v35;
    __int16 v120 = i;
    int v38 = _So9NSDecimala__length_getter(v118);
    if (!v38) {
      goto LABEL_260;
    }
    unint64_t v39 = 0;
    int v40 = v38 - 1;
    if (v38 != 1)
    {
      __int16 v41 = v115;
      __int16 v42 = v116;
      while (2)
      {
        unint64_t v43 = v19;
        switch(v40)
        {
          case 1:
            goto LABEL_55;
          case 2:
            unint64_t v43 = (unint64_t)v7;
            goto LABEL_55;
          case 3:
            unint64_t v43 = v13;
            goto LABEL_55;
          case 4:
            unint64_t v43 = a4;
            goto LABEL_55;
          case 5:
            unint64_t v43 = v116;
            goto LABEL_55;
          case 6:
            unint64_t v43 = v115;
            goto LABEL_55;
          case 7:
            unint64_t v43 = i;
LABEL_55:
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            unint64_t v39 = v43 | (v39 << 16);
            if (--v40) {
              continue;
            }
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            goto LABEL_70;
          default:
            goto LABEL_286;
        }
      }
    }
    __int16 v41 = v115;
    __int16 v42 = v116;
LABEL_70:
    __int16 v47 = i;
    for (unint64_t i = (unsigned __int16)v31 | (v39 << 16); ; unint64_t i = 0)
    {
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v42;
      __int16 v119 = v41;
      __int16 v120 = v47;
      __int16 v48 = v41;
      if ((_So9NSDecimala__exponent_getter((char *)v118) & 0x80000000) == 0) {
        break;
      }
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v116;
      __int16 v119 = v48;
      __int16 v120 = v47;
      int v86 = _So9NSDecimala__exponent_getter((char *)v118);
      if (v86 > 0) {
        goto LABEL_271;
      }
      if (!v86) {
        goto LABEL_178;
      }
      unsigned int v87 = -v86 & ~(-v86 >> 31);
      unsigned int v88 = ~v86;
      while (v87 > v88)
      {
        i /= 0xAuLL;
        if (__CFADD__(v86++, 1)) {
          goto LABEL_178;
        }
      }
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __int16 v47 = i;
      __int16 v41 = v115;
      __int16 v42 = v116;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    HIWORD(v118[1]) = v116;
    __int16 v119 = v48;
    __int16 v120 = v47;
    int v49 = _So9NSDecimala__exponent_getter((char *)v118);
    if ((v49 & 0x80000000) == 0)
    {
      if (v49)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_186;
        }
        i *= 10;
        int v50 = v49 - 1;
        if (v49 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL)) {
            goto LABEL_186;
          }
          i *= 10;
          while (--v50)
          {
            uint64_t v51 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10;
            if (v51) {
              goto LABEL_186;
            }
          }
        }
      }
LABEL_178:
      if (!isNegative_getter) {
        goto LABEL_185;
      }
      if (!(i >> 31)) {
        return -(int)i;
      }
LABEL_186:
      uint64_t v92 = static String._fromUTF8Repairing(_:)();
      unint64_t i = v93;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v90 = v92;
      *(void *)(v90 + 8) = i;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_OWORD *)(v90 + 32) = 0u;
      char v91 = 11;
      goto LABEL_187;
    }
LABEL_269:
    __break(1u);
    goto LABEL_270;
  }
  BOOL v16 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v18 = (unsigned __int8 *)v16;
  unint64_t v19 = v17;
  unint64_t v20 = (unint64_t)&v16[v17];
  if ((v13 & 1) == 0)
  {
    if (v17 <= 0)
    {
      unint64_t v46 = (unsigned __int8 *)v16;
      goto LABEL_95;
    }
    uint64_t v44 = 0;
    uint64_t v45 = v17;
    while (1)
    {
      if (v44 < 0 || (BOOL v30 = v45 < 1, --v45, v30))
      {
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
        goto LABEL_254;
      }
      if (v16[v44] - 58 < 0xFFFFFFF6) {
        break;
      }
      unint64_t v46 = (unsigned __int8 *)&v16[++v44];
      if ((unint64_t)&v16[v44] >= v20) {
        goto LABEL_95;
      }
    }
LABEL_94:
    unint64_t v46 = &v18[v44];
LABEL_95:
    if ((unint64_t)v46 < v20)
    {
      char v55 = 0;
      char v56 = (unsigned __int8 *)(v46 - v18);
      char v57 = 1;
      char v58 = 1;
      while (1)
      {
        uint64_t v59 = 0;
        uint64_t v60 = &v18[v19] - v46;
        while (1)
        {
          if (v46 - v18 + v59 < 0 || (BOOL v30 = v60 < 1, --v60, v30))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            unint64_t v77 = (unint64_t)&v46[v59];
            if ((unint64_t)&v46[v59] >= a4)
            {
              unint64_t v78 = a4 + i;
              if (a4 + i >= v77)
              {
                if (v78 >= (unint64_t)&v46[v59 + 1]) {
                  unint64_t v78 = (unint64_t)&v46[v59 + 1];
                }
                if (v78 > a4)
                {
                  unint64_t v79 = i + a4;
                  unint64_t i = 1;
                  unint64_t v80 = a4;
                  while (1)
                  {
                    uint64_t v81 = 0;
                    uint64_t v82 = 0;
                    unint64_t v83 = v79 - v80;
                    while (1)
                    {
                      if ((uint64_t)(v80 - a4 + v82) < 0 || (uint64_t)(v83 + v81) < 1) {
                        goto LABEL_255;
                      }
                      int v84 = *(unsigned __int8 *)(v80 + v82);
                      if (v84 == 10)
                      {
                        BOOL v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          v80 += v82 + 1;
                          goto LABEL_169;
                        }
                        goto LABEL_275;
                      }
                      if (v84 == 13) {
                        break;
                      }
                      a3 = v82 + 1;
                      if (__OFADD__(v82, 1)) {
                        goto LABEL_256;
                      }
                      ++v82;
                      --v81;
                      if (v80 + v82 >= v78) {
                        goto LABEL_216;
                      }
                    }
                    uint64_t v85 = v80 + v82;
                    if (v77 < v80 + v82 + 1) {
                      goto LABEL_167;
                    }
                    if (((v80 - a4 + v82 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v82 + v83) < 1) {
                      goto LABEL_281;
                    }
                    if (*(unsigned char *)(v85 + 1) == 10) {
                      uint64_t v85 = v80 + v82 + 1;
                    }
LABEL_167:
                    BOOL v70 = __OFADD__(i++, 1);
                    if (v70) {
                      goto LABEL_276;
                    }
                    unint64_t v80 = v85 + 1;
LABEL_169:
                    if (v80 >= v78)
                    {
                      a3 = 0;
                      goto LABEL_216;
                    }
                  }
                }
                a3 = 0;
                unint64_t i = 1;
LABEL_216:
                BOOL v74 = &v46[v59 - a4];
                goto LABEL_244;
              }
            }
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
            goto LABEL_280;
          }
          LODWORD(v7) = v46[v59];
          if ((v7 - 58) < 0xFFFFFFF6) {
            break;
          }
          if (__OFADD__(&v56[v59], 1)) {
            goto LABEL_144;
          }
          if ((unint64_t)&v46[++v59] >= v20) {
            goto LABEL_145;
          }
        }
        uint64_t v61 = (uint64_t)&v56[v59];
        switch(v46[v59])
        {
          case '+':
          case '-':
            if (v61 != 0 || (v55 & 1) == 0) {
              goto LABEL_140;
            }
            char v56 = 0;
            char v55 = 0;
            char v57 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            if ((unint64_t)v46 >= v20) {
              goto LABEL_248;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v61 < 1 || (v58 & 1) == 0)
            {
              unint64_t v95 = (unint64_t)&v46[v59];
              if ((unint64_t)&v46[v59] < a4) {
                goto LABEL_274;
              }
              unint64_t v96 = a4 + i;
              if (a4 + i < v95) {
                goto LABEL_274;
              }
              if (v96 >= (unint64_t)&v46[v59 + 1]) {
                unint64_t v96 = (unint64_t)&v46[v59 + 1];
              }
              if (v96 <= a4)
              {
                a3 = 0;
                unint64_t i = 1;
              }
              else
              {
                unint64_t v97 = i + a4;
                unint64_t i = 1;
                unint64_t v98 = a4;
                do
                {
                  uint64_t v99 = 0;
                  uint64_t v100 = 0;
                  unint64_t v101 = v97 - v98;
                  while (1)
                  {
                    if ((uint64_t)(v98 - a4 + v100) < 0 || (uint64_t)(v101 + v99) < 1) {
                      goto LABEL_257;
                    }
                    int v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10) {
                      break;
                    }
                    if (v102 == 13)
                    {
                      uint64_t v103 = v98 + v100;
                      if (v95 < v98 + v100 + 1) {
                        goto LABEL_209;
                      }
                      if (((v98 - a4 + v100 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v100 + v101) >= 1)
                      {
                        if (*(unsigned char *)(v103 + 1) == 10) {
                          uint64_t v103 = v98 + v100 + 1;
                        }
LABEL_209:
                        BOOL v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          unint64_t v98 = v103 + 1;
                          goto LABEL_213;
                        }
LABEL_280:
                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
LABEL_283:
                        __break(1u);
                      }
                      __break(1u);
                    }
                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1)) {
                      goto LABEL_258;
                    }
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96) {
                      goto LABEL_243;
                    }
                  }
                  BOOL v70 = __OFADD__(i++, 1);
                  if (v70) {
                    goto LABEL_279;
                  }
                  v98 += v100 + 1;
LABEL_213:
                  ;
                }
                while (v98 < v96);
                a3 = 0;
              }
LABEL_243:
              BOOL v74 = &v46[v59 - a4];
              LODWORD(v7) = 46;
LABEL_244:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v90 = xmmword_182112860;
              *(void *)(v90 + 16) = v7;
              *(void *)(v90 + 24) = i;
              *(void *)(v90 + 32) = a3;
              *(void *)(v90 + 40) = v74;
              char v91 = 1;
LABEL_187:
              *(unsigned char *)(v90 + 48) = v91;
              swift_willThrow();
              return i;
            }
            char v56 = 0;
            char v55 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            char v57 = 1;
            if ((unint64_t)v46 >= v20)
            {
              __break(1u);
              goto LABEL_115;
            }
            break;
          case 'E':
            goto LABEL_109;
          default:
            if (v7 != 101)
            {
LABEL_140:
              unint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v46[v59], a4, i);
              a3 = v72;
              BOOL v74 = v73;
              goto LABEL_244;
            }
LABEL_109:
            if (v61 < 1 || (v57 & 1) == 0) {
              goto LABEL_146;
            }
            char v56 = 0;
            char v57 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            char v55 = 1;
            if ((unint64_t)v46 >= v20) {
              goto LABEL_249;
            }
            continue;
        }
      }
    }
    goto LABEL_264;
  }
  if (v17 < 1) {
    goto LABEL_259;
  }
  int v21 = *(unsigned __int8 *)v16;
  if (v21 == 45 || (unint64_t v7 = v16, v21 == 43)) {
    unint64_t v7 = v16 + 1;
  }
  if (v20 < (unint64_t)v7)
  {
    __break(1u);
    goto LABEL_262;
  }
  unint64_t v13 = v7 - v16;
  if (v7 - v16 < 0)
  {
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }
  if ((uint64_t)(v20 - (void)v7) < 0)
  {
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }
  if ((uint64_t)(v20 - (void)v7) >= 2) {
    size_t v22 = 2;
  }
  else {
    size_t v22 = v20 - (void)v7;
  }
  if (!_stringshims_strncasecmp_l(v7, "0x", v22, 0))
  {
    unint64_t v46 = (unsigned __int8 *)(v7 + 2);
    uint64_t v44 = v20 - (void)(v7 + 2);
    if (v44 >= 1 && (unint64_t)v46 < v20)
    {
      uint64_t v44 = v46 - v18;
      if (((v46 - v18) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v7[-a4 + 2];
        uint64_t v44 = &v18[v19] - (unsigned __int8 *)v7 - 3;
        unint64_t v52 = v13 + 3;
        while (1)
        {
          unint64_t v53 = v52;
          unint64_t v19 = *v46;
          if ((v19 - 58) <= 0xF5u
            && (*v46 - 65 > 0x25 || ((1 << (v19 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }
          BOOL v30 = v44-- < 1;
          if (!v30 && (unint64_t)++v46 < v20)
          {
            ++a3;
            ++v52;
            if ((v53 & 0x8000000000000000) == 0) {
              continue;
            }
          }
          goto LABEL_93;
        }
LABEL_115:
        if ((unint64_t)v46 >= a4)
        {
          unint64_t v62 = a4 + i;
          if (a4 + i >= (unint64_t)v46)
          {
            if (v62 >= (unint64_t)(v46 + 1)) {
              unint64_t v62 = (unint64_t)(v46 + 1);
            }
            if (v62 > a4)
            {
              uint64_t v63 = -(uint64_t)a4;
              unint64_t v64 = i + a4;
              unint64_t i = 1;
              while (1)
              {
                uint64_t v65 = 0;
                uint64_t v66 = 0;
                unint64_t v67 = v64 - a4;
                while (1)
                {
                  if ((uint64_t)(v63 + a4 + v66) < 0 || (uint64_t)(v67 + v65) < 1) {
                    goto LABEL_250;
                  }
                  int v68 = *(unsigned __int8 *)(a4 + v66);
                  if (v68 == 10)
                  {
                    BOOL v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      a4 += v66 + 1;
                      goto LABEL_138;
                    }
                    goto LABEL_272;
                  }
                  if (v68 == 13) {
                    break;
                  }
                  uint64_t v69 = v66 + 1;
                  if (__OFADD__(v66, 1)) {
                    goto LABEL_251;
                  }
                  ++v66;
                  --v65;
                  if (a4 + v66 >= v62)
                  {
                    unint64_t v13 = 0xED00007265626D75;
                    unint64_t v20 = 0x6E20786568206E69;
                    goto LABEL_181;
                  }
                }
                uint64_t v71 = a4 + v66;
                if ((unint64_t)v46 < a4 + v66 + 1) {
                  goto LABEL_136;
                }
                if (((v63 + a4 + v66 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v66 + v67) < 1) {
                  goto LABEL_277;
                }
                if (*(unsigned char *)(v71 + 1) == 10) {
                  uint64_t v71 = a4 + v66 + 1;
                }
LABEL_136:
                BOOL v70 = __OFADD__(i++, 1);
                if (v70) {
                  goto LABEL_273;
                }
                a4 = v71 + 1;
LABEL_138:
                unint64_t v13 = 0xED00007265626D75;
                unint64_t v20 = 0x6E20786568206E69;
                if (a4 >= v62)
                {
                  uint64_t v69 = 0;
                  goto LABEL_181;
                }
              }
            }
            uint64_t v69 = 0;
            unint64_t v13 = 0xED00007265626D75;
            unint64_t v20 = 0x6E20786568206E69;
            unint64_t i = 1;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v90 = v20;
            *(void *)(v90 + 8) = v13;
            *(void *)(v90 + 16) = v19;
            *(void *)(v90 + 24) = i;
            *(void *)(v90 + 32) = v69;
            *(void *)(v90 + 40) = a3;
            char v91 = 1;
            goto LABEL_187;
          }
        }
LABEL_268:
        __break(1u);
        goto LABEL_269;
      }
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if ((unint64_t)v7 >= v20)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  char v23 = 0;
  char v24 = 0;
  char v25 = (const char *)&v18[v19];
  char v26 = 1;
LABEL_24:
  uint64_t v28 = 0;
  uint64_t v29 = v25 - v7;
  while (v7 - (const char *)v18 + v28 >= 0)
  {
    BOOL v30 = v29-- < 1;
    if (v30) {
      break;
    }
    LODWORD(v19) = v7[v28];
    if ((v19 - 58) <= 0xF5u)
    {
      switch(v7[v28])
      {
        case '+':
        case '-':
          if (v28 != 0 || (v23 & 1) == 0) {
            goto LABEL_141;
          }
          char v23 = 0;
          char v26 = 0;
          v7 += v28 + 1;
          char v24 = 3;
          if ((unint64_t)v7 >= v20) {
            goto LABEL_252;
          }
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            unint64_t v104 = (unint64_t)&v7[v28];
            if ((unint64_t)&v7[v28] < a4) {
              goto LABEL_278;
            }
            unint64_t v105 = a4 + i;
            if (a4 + i < v104) {
              goto LABEL_278;
            }
            if (v105 >= (unint64_t)&v7[v28 + 1]) {
              unint64_t v105 = (unint64_t)&v7[v28 + 1];
            }
            if (v105 > a4)
            {
              unint64_t v106 = i + a4;
              unint64_t i = 1;
              unint64_t v107 = a4;
              while (1)
              {
                uint64_t v108 = 0;
                uint64_t v109 = 0;
                unint64_t v110 = v106 - v107;
                while (1)
                {
                  if ((uint64_t)(v107 - a4 + v109) < 0 || (uint64_t)(v110 + v108) < 1) {
                    goto LABEL_265;
                  }
                  int v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    BOOL v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      v107 += v109 + 1;
                      goto LABEL_240;
                    }
                    goto LABEL_282;
                  }
                  if (v111 == 13) {
                    break;
                  }
                  uint64_t v69 = v109 + 1;
                  if (__OFADD__(v109, 1)) {
                    goto LABEL_266;
                  }
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105) {
                    goto LABEL_246;
                  }
                }
                uint64_t v112 = v107 + v109;
                if (v104 >= v107 + v109 + 1)
                {
                  if (((v107 - a4 + v109 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v109 + v110) < 1)
                  {
                    __break(1u);
LABEL_286:
                    v118[0] = 0;
                    v118[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v118, "Invalid index ");
                    HIBYTE(v118[1]) = -18;
                    v113._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v113);
                    swift_bridgeObjectRelease();
                    v114._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
                    v114._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v114);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181EC9A58);
                  }
                  if (*(unsigned char *)(v112 + 1) == 10) {
                    uint64_t v112 = v107 + v109 + 1;
                  }
                }
                BOOL v70 = __OFADD__(i++, 1);
                if (v70) {
                  goto LABEL_283;
                }
                unint64_t v107 = v112 + 1;
LABEL_240:
                if (v107 >= v105)
                {
                  uint64_t v69 = 0;
                  goto LABEL_246;
                }
              }
            }
            uint64_t v69 = 0;
            unint64_t i = 1;
LABEL_246:
            a3 = (uint64_t)&v7[v28 - a4];
            LOBYTE(v19) = 46;
LABEL_142:
            unint64_t v13 = 0xE900000000000072;
            unint64_t v20 = 0x65626D756E206E69;
            goto LABEL_181;
          }
          char v23 = 0;
          char v26 = 0;
          v7 += v28 + 1;
          char v24 = 1;
          if ((unint64_t)v7 >= v20)
          {
            __break(1u);
            goto LABEL_43;
          }
          break;
        case 'E':
          goto LABEL_36;
        default:
          if (v19 != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v24 != 1 && (v24 || v28 < 1))
          {
LABEL_141:
            unint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v7[v28], a4, i);
            uint64_t v69 = v75;
            a3 = v76;
            goto LABEL_142;
          }
          char v26 = 0;
          v7 += v28 + 1;
          char v24 = 2;
          char v23 = 1;
          if ((unint64_t)v7 >= v20) {
            goto LABEL_253;
          }
          goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (__OFADD__(v28, 1)) {
      goto LABEL_183;
    }
    if ((unint64_t)&v7[++v28] >= v20) {
      goto LABEL_184;
    }
  }
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if (i >> 31) {
    goto LABEL_186;
  }
  return i;
}

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(__int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t i, uint64_t a6, uint64_t (*a7)(char **))
{
  LODWORD(v9) = v7;
  LOWORD(v15) = a1;
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  v120[0] = 0;
  double v16 = _stringshims_strtod_l(a2, v120, 0);
  if (v120[0]) {
    BOOL v17 = &a2[a3] == v120[0];
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    double v29 = v16;
    if (a7(v120) & 1) == 0 || ((uint64_t)v120[1]) {
      goto LABEL_186;
    }
    if (fabs(v29) < 9.00719925e15) {
      return v120[0];
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v123);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v123, (uint64_t)&v124);
  if (v128 != 1)
  {
LABEL_43:
    LODWORD(v22) = v124;
    unint64_t v21 = (unint64_t)v124 >> 48;
    a3 = (unsigned __int16)v125;
    unint64_t v33 = (unint64_t)v124 >> 32;
    unint64_t v34 = WORD1(v125);
    unint64_t v35 = WORD2(v125);
    unint64_t v36 = HIWORD(v125);
    unint64_t v37 = v126;
    unint64_t i = v127;
    v120[0] = v124;
    v120[1] = v125;
    __int16 v121 = v126;
    __int16 v122 = v127;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(v120);
    LODWORD(v120[0]) = v22;
    WORD2(v120[0]) = v33;
    HIWORD(v120[0]) = v21;
    LOWORD(v120[1]) = a3;
    WORD1(v120[1]) = v34;
    WORD2(v120[1]) = v35;
    HIWORD(v120[1]) = v36;
    __int16 v121 = v37;
    __int16 v122 = i;
    int v38 = _So9NSDecimala__length_getter(v120);
    unint64_t v39 = v36;
    a4 = v35;
    unint64_t v15 = v34;
    BOOL v9 = (const char *)a3;
    LOWORD(a3) = v33;
    if (!v38 && isNegative_getter) {
      goto LABEL_186;
    }
    LODWORD(v120[0]) = v22;
    WORD2(v120[0]) = v33;
    HIWORD(v120[0]) = v21;
    LOWORD(v120[1]) = (_WORD)v9;
    WORD1(v120[1]) = v15;
    WORD2(v120[1]) = a4;
    unint64_t v117 = v37;
    unint64_t v118 = v39;
    HIWORD(v120[1]) = v39;
    __int16 v121 = v37;
    __int16 v122 = i;
    int v40 = _So9NSDecimala__length_getter(v120);
    if (!v40) {
      goto LABEL_259;
    }
    unint64_t v41 = 0;
    int v42 = v40 - 1;
    if (v40 != 1)
    {
      __int16 v43 = v117;
      __int16 v44 = v118;
      while (2)
      {
        unint64_t v45 = v21;
        switch(v42)
        {
          case 1:
            goto LABEL_55;
          case 2:
            unint64_t v45 = (unint64_t)v9;
            goto LABEL_55;
          case 3:
            unint64_t v45 = v15;
            goto LABEL_55;
          case 4:
            unint64_t v45 = a4;
            goto LABEL_55;
          case 5:
            unint64_t v45 = v118;
            goto LABEL_55;
          case 6:
            unint64_t v45 = v117;
            goto LABEL_55;
          case 7:
            unint64_t v45 = i;
LABEL_55:
            if (HIWORD(v41)) {
              goto LABEL_186;
            }
            unint64_t v41 = v45 | (v41 << 16);
            if (--v42) {
              continue;
            }
            if (HIWORD(v41)) {
              goto LABEL_186;
            }
            goto LABEL_70;
          default:
            goto LABEL_285;
        }
      }
    }
    __int16 v43 = v117;
    __int16 v44 = v118;
LABEL_70:
    __int16 v49 = i;
    for (unint64_t i = (unsigned __int16)v33 | (v41 << 16); ; unint64_t i = 0)
    {
      LODWORD(v120[0]) = v22;
      WORD2(v120[0]) = a3;
      HIWORD(v120[0]) = v21;
      LOWORD(v120[1]) = (_WORD)v9;
      WORD1(v120[1]) = v15;
      WORD2(v120[1]) = a4;
      HIWORD(v120[1]) = v44;
      __int16 v121 = v43;
      __int16 v122 = v49;
      __int16 v50 = v43;
      if ((_So9NSDecimala__exponent_getter((char *)v120) & 0x80000000) == 0) {
        break;
      }
      LODWORD(v120[0]) = v22;
      WORD2(v120[0]) = a3;
      HIWORD(v120[0]) = v21;
      LOWORD(v120[1]) = (_WORD)v9;
      WORD1(v120[1]) = v15;
      WORD2(v120[1]) = a4;
      HIWORD(v120[1]) = v118;
      __int16 v121 = v50;
      __int16 v122 = v49;
      int v88 = _So9NSDecimala__exponent_getter((char *)v120);
      if (v88 > 0) {
        goto LABEL_270;
      }
      if (!v88) {
        goto LABEL_178;
      }
      unsigned int v89 = -v88 & ~(-v88 >> 31);
      unsigned int v90 = ~v88;
      while (v89 > v90)
      {
        i /= 0xAuLL;
        if (__CFADD__(v88++, 1)) {
          goto LABEL_178;
        }
      }
LABEL_253:
      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __int16 v49 = i;
      __int16 v43 = v117;
      __int16 v44 = v118;
    }
    LODWORD(v120[0]) = v22;
    WORD2(v120[0]) = a3;
    HIWORD(v120[0]) = v21;
    LOWORD(v120[1]) = (_WORD)v9;
    WORD1(v120[1]) = v15;
    WORD2(v120[1]) = a4;
    HIWORD(v120[1]) = v118;
    __int16 v121 = v50;
    __int16 v122 = v49;
    int v51 = _So9NSDecimala__exponent_getter((char *)v120);
    if ((v51 & 0x80000000) == 0)
    {
      if (v51)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_186;
        }
        i *= 10;
        int v52 = v51 - 1;
        if (v51 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL)) {
            goto LABEL_186;
          }
          i *= 10;
          while (--v52)
          {
            uint64_t v53 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10;
            if (v53) {
              goto LABEL_186;
            }
          }
        }
      }
LABEL_178:
      if (!isNegative_getter) {
        goto LABEL_185;
      }
      if ((i & 0x8000000000000000) == 0) {
        return (char *)-(uint64_t)i;
      }
LABEL_186:
      uint64_t v94 = static String._fromUTF8Repairing(_:)();
      unint64_t i = v95;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v92 = v94;
      *(void *)(v92 + 8) = i;
      *(_OWORD *)(v92 + 16) = 0u;
      *(_OWORD *)(v92 + 32) = 0u;
      char v93 = 11;
      goto LABEL_187;
    }
LABEL_268:
    __break(1u);
    goto LABEL_269;
  }
  uint64_t v18 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  unint64_t v20 = (unsigned __int8 *)v18;
  unint64_t v21 = v19;
  unint64_t v22 = (unint64_t)&v18[v19];
  if ((v15 & 1) == 0)
  {
    if (v19 <= 0)
    {
      __int16 v48 = (unsigned __int8 *)v18;
      goto LABEL_95;
    }
    uint64_t v46 = 0;
    uint64_t v47 = v19;
    while (1)
    {
      if (v46 < 0 || (BOOL v32 = v47 < 1, --v47, v32))
      {
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
        goto LABEL_253;
      }
      if (v18[v46] - 58 < 0xFFFFFFF6) {
        break;
      }
      __int16 v48 = (unsigned __int8 *)&v18[++v46];
      if ((unint64_t)&v18[v46] >= v22) {
        goto LABEL_95;
      }
    }
LABEL_94:
    __int16 v48 = &v20[v46];
LABEL_95:
    if ((unint64_t)v48 < v22)
    {
      char v57 = 0;
      char v58 = (unsigned __int8 *)(v48 - v20);
      char v59 = 1;
      char v60 = 1;
      while (1)
      {
        uint64_t v61 = 0;
        uint64_t v62 = &v20[v21] - v48;
        while (1)
        {
          if (v48 - v20 + v61 < 0 || (BOOL v32 = v62 < 1, --v62, v32))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            unint64_t v79 = (unint64_t)&v48[v61];
            if ((unint64_t)&v48[v61] >= a4)
            {
              unint64_t v80 = a4 + i;
              if (a4 + i >= v79)
              {
                if (v80 >= (unint64_t)&v48[v61 + 1]) {
                  unint64_t v80 = (unint64_t)&v48[v61 + 1];
                }
                if (v80 > a4)
                {
                  unint64_t v81 = i + a4;
                  unint64_t i = 1;
                  unint64_t v82 = a4;
                  while (1)
                  {
                    uint64_t v83 = 0;
                    uint64_t v84 = 0;
                    unint64_t v85 = v81 - v82;
                    while (1)
                    {
                      if ((uint64_t)(v82 - a4 + v84) < 0 || (uint64_t)(v85 + v83) < 1) {
                        goto LABEL_254;
                      }
                      int v86 = *(unsigned __int8 *)(v82 + v84);
                      if (v86 == 10)
                      {
                        BOOL v72 = __OFADD__(i++, 1);
                        if (!v72)
                        {
                          v82 += v84 + 1;
                          goto LABEL_169;
                        }
                        goto LABEL_274;
                      }
                      if (v86 == 13) {
                        break;
                      }
                      a3 = v84 + 1;
                      if (__OFADD__(v84, 1)) {
                        goto LABEL_255;
                      }
                      ++v84;
                      --v83;
                      if (v82 + v84 >= v80) {
                        goto LABEL_215;
                      }
                    }
                    uint64_t v87 = v82 + v84;
                    if (v79 < v82 + v84 + 1) {
                      goto LABEL_167;
                    }
                    if (((v82 - a4 + v84 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v84 + v85) < 1) {
                      goto LABEL_280;
                    }
                    if (*(unsigned char *)(v87 + 1) == 10) {
                      uint64_t v87 = v82 + v84 + 1;
                    }
LABEL_167:
                    BOOL v72 = __OFADD__(i++, 1);
                    if (v72) {
                      goto LABEL_275;
                    }
                    unint64_t v82 = v87 + 1;
LABEL_169:
                    if (v82 >= v80)
                    {
                      a3 = 0;
                      goto LABEL_215;
                    }
                  }
                }
                a3 = 0;
                unint64_t i = 1;
LABEL_215:
                uint64_t v76 = &v48[v61 - a4];
                goto LABEL_243;
              }
            }
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }
          LODWORD(v9) = v48[v61];
          if ((v9 - 58) < 0xFFFFFFF6) {
            break;
          }
          if (__OFADD__(&v58[v61], 1)) {
            goto LABEL_144;
          }
          if ((unint64_t)&v48[++v61] >= v22) {
            goto LABEL_145;
          }
        }
        uint64_t v63 = (uint64_t)&v58[v61];
        switch(v48[v61])
        {
          case '+':
          case '-':
            if (v63 != 0 || (v57 & 1) == 0) {
              goto LABEL_140;
            }
            char v58 = 0;
            char v57 = 0;
            char v59 = 0;
            char v60 = 0;
            v48 += v61 + 1;
            if ((unint64_t)v48 >= v22) {
              goto LABEL_247;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v63 < 1 || (v60 & 1) == 0)
            {
              unint64_t v97 = (unint64_t)&v48[v61];
              if ((unint64_t)&v48[v61] < a4) {
                goto LABEL_273;
              }
              unint64_t v98 = a4 + i;
              if (a4 + i < v97) {
                goto LABEL_273;
              }
              if (v98 >= (unint64_t)&v48[v61 + 1]) {
                unint64_t v98 = (unint64_t)&v48[v61 + 1];
              }
              if (v98 <= a4)
              {
                a3 = 0;
                unint64_t i = 1;
              }
              else
              {
                unint64_t v99 = i + a4;
                unint64_t i = 1;
                unint64_t v100 = a4;
                do
                {
                  uint64_t v101 = 0;
                  uint64_t v102 = 0;
                  unint64_t v103 = v99 - v100;
                  while (1)
                  {
                    if ((uint64_t)(v100 - a4 + v102) < 0 || (uint64_t)(v103 + v101) < 1) {
                      goto LABEL_256;
                    }
                    int v104 = *(unsigned __int8 *)(v100 + v102);
                    if (v104 == 10) {
                      break;
                    }
                    if (v104 == 13)
                    {
                      uint64_t v105 = v100 + v102;
                      if (v97 < v100 + v102 + 1) {
                        goto LABEL_208;
                      }
                      if (((v100 - a4 + v102 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v102 + v103) >= 1)
                      {
                        if (*(unsigned char *)(v105 + 1) == 10) {
                          uint64_t v105 = v100 + v102 + 1;
                        }
LABEL_208:
                        BOOL v72 = __OFADD__(i++, 1);
                        if (!v72)
                        {
                          unint64_t v100 = v105 + 1;
                          goto LABEL_212;
                        }
LABEL_279:
                        __break(1u);
LABEL_280:
                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
                      }
                      __break(1u);
                    }
                    a3 = v102 + 1;
                    if (__OFADD__(v102, 1)) {
                      goto LABEL_257;
                    }
                    ++v102;
                    --v101;
                    if (v100 + v102 >= v98) {
                      goto LABEL_242;
                    }
                  }
                  BOOL v72 = __OFADD__(i++, 1);
                  if (v72) {
                    goto LABEL_278;
                  }
                  v100 += v102 + 1;
LABEL_212:
                  ;
                }
                while (v100 < v98);
                a3 = 0;
              }
LABEL_242:
              uint64_t v76 = &v48[v61 - a4];
              LODWORD(v9) = 46;
LABEL_243:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v92 = xmmword_182112860;
              *(void *)(v92 + 16) = v9;
              *(void *)(v92 + 24) = i;
              *(void *)(v92 + 32) = a3;
              *(void *)(v92 + 40) = v76;
              char v93 = 1;
LABEL_187:
              *(unsigned char *)(v92 + 48) = v93;
              swift_willThrow();
              return (char *)i;
            }
            char v58 = 0;
            char v57 = 0;
            char v60 = 0;
            v48 += v61 + 1;
            char v59 = 1;
            if ((unint64_t)v48 >= v22)
            {
              __break(1u);
              goto LABEL_115;
            }
            break;
          case 'E':
            goto LABEL_109;
          default:
            if (v9 != 101)
            {
LABEL_140:
              unint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v48[v61], a4, i);
              a3 = v74;
              uint64_t v76 = v75;
              goto LABEL_243;
            }
LABEL_109:
            if (v63 < 1 || (v59 & 1) == 0) {
              goto LABEL_146;
            }
            char v58 = 0;
            char v59 = 0;
            char v60 = 0;
            v48 += v61 + 1;
            char v57 = 1;
            if ((unint64_t)v48 >= v22) {
              goto LABEL_248;
            }
            continue;
        }
      }
    }
    goto LABEL_263;
  }
  if (v19 < 1) {
    goto LABEL_258;
  }
  int v23 = *(unsigned __int8 *)v18;
  if (v23 == 45 || (BOOL v9 = v18, v23 == 43)) {
    BOOL v9 = v18 + 1;
  }
  if (v22 < (unint64_t)v9)
  {
    __break(1u);
    goto LABEL_261;
  }
  unint64_t v15 = v9 - v18;
  if (v9 - v18 < 0)
  {
LABEL_261:
    __break(1u);
    goto LABEL_262;
  }
  if ((uint64_t)(v22 - (void)v9) < 0)
  {
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
    goto LABEL_266;
  }
  if ((uint64_t)(v22 - (void)v9) >= 2) {
    size_t v24 = 2;
  }
  else {
    size_t v24 = v22 - (void)v9;
  }
  if (!_stringshims_strncasecmp_l(v9, "0x", v24, 0))
  {
    __int16 v48 = (unsigned __int8 *)(v9 + 2);
    uint64_t v46 = v22 - (void)(v9 + 2);
    if (v46 >= 1 && (unint64_t)v48 < v22)
    {
      uint64_t v46 = v48 - v20;
      if (((v48 - v20) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v9[-a4 + 2];
        uint64_t v46 = &v20[v21] - (unsigned __int8 *)v9 - 3;
        unint64_t v54 = v15 + 3;
        while (1)
        {
          unint64_t v55 = v54;
          unint64_t v21 = *v48;
          if ((v21 - 58) <= 0xF5u
            && (*v48 - 65 > 0x25 || ((1 << (v21 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }
          BOOL v32 = v46-- < 1;
          if (!v32 && (unint64_t)++v48 < v22)
          {
            ++a3;
            ++v54;
            if ((v55 & 0x8000000000000000) == 0) {
              continue;
            }
          }
          goto LABEL_93;
        }
LABEL_115:
        if ((unint64_t)v48 >= a4)
        {
          unint64_t v64 = a4 + i;
          if (a4 + i >= (unint64_t)v48)
          {
            if (v64 >= (unint64_t)(v48 + 1)) {
              unint64_t v64 = (unint64_t)(v48 + 1);
            }
            if (v64 > a4)
            {
              uint64_t v65 = -(uint64_t)a4;
              unint64_t v66 = i + a4;
              unint64_t i = 1;
              while (1)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                unint64_t v69 = v66 - a4;
                while (1)
                {
                  if ((uint64_t)(v65 + a4 + v68) < 0 || (uint64_t)(v69 + v67) < 1) {
                    goto LABEL_249;
                  }
                  int v70 = *(unsigned __int8 *)(a4 + v68);
                  if (v70 == 10)
                  {
                    BOOL v72 = __OFADD__(i++, 1);
                    if (!v72)
                    {
                      a4 += v68 + 1;
                      goto LABEL_138;
                    }
                    goto LABEL_271;
                  }
                  if (v70 == 13) {
                    break;
                  }
                  uint64_t v71 = v68 + 1;
                  if (__OFADD__(v68, 1)) {
                    goto LABEL_250;
                  }
                  ++v68;
                  --v67;
                  if (a4 + v68 >= v64)
                  {
                    unint64_t v15 = 0xED00007265626D75;
                    unint64_t v22 = 0x6E20786568206E69;
                    goto LABEL_181;
                  }
                }
                uint64_t v73 = a4 + v68;
                if ((unint64_t)v48 < a4 + v68 + 1) {
                  goto LABEL_136;
                }
                if (((v65 + a4 + v68 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v68 + v69) < 1) {
                  goto LABEL_276;
                }
                if (*(unsigned char *)(v73 + 1) == 10) {
                  uint64_t v73 = a4 + v68 + 1;
                }
LABEL_136:
                BOOL v72 = __OFADD__(i++, 1);
                if (v72) {
                  goto LABEL_272;
                }
                a4 = v73 + 1;
LABEL_138:
                unint64_t v15 = 0xED00007265626D75;
                unint64_t v22 = 0x6E20786568206E69;
                if (a4 >= v64)
                {
                  uint64_t v71 = 0;
                  goto LABEL_181;
                }
              }
            }
            uint64_t v71 = 0;
            unint64_t v15 = 0xED00007265626D75;
            unint64_t v22 = 0x6E20786568206E69;
            unint64_t i = 1;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v92 = v22;
            *(void *)(v92 + 8) = v15;
            *(void *)(v92 + 16) = v21;
            *(void *)(v92 + 24) = i;
            *(void *)(v92 + 32) = v71;
            *(void *)(v92 + 40) = a3;
            char v93 = 1;
            goto LABEL_187;
          }
        }
LABEL_267:
        __break(1u);
        goto LABEL_268;
      }
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if ((unint64_t)v9 >= v22)
  {
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }
  char v25 = 0;
  char v26 = 0;
  double v27 = (const char *)&v20[v21];
  char v28 = 1;
LABEL_24:
  uint64_t v30 = 0;
  uint64_t v31 = v27 - v9;
  while (v9 - (const char *)v20 + v30 >= 0)
  {
    BOOL v32 = v31-- < 1;
    if (v32) {
      break;
    }
    LODWORD(v21) = v9[v30];
    if ((v21 - 58) <= 0xF5u)
    {
      switch(v9[v30])
      {
        case '+':
        case '-':
          if (v30 != 0 || (v25 & 1) == 0) {
            goto LABEL_141;
          }
          char v25 = 0;
          char v28 = 0;
          v9 += v30 + 1;
          char v26 = 3;
          if ((unint64_t)v9 >= v22) {
            goto LABEL_251;
          }
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v28 & 1) == 0)
          {
            unint64_t v106 = (unint64_t)&v9[v30];
            if ((unint64_t)&v9[v30] < a4) {
              goto LABEL_277;
            }
            unint64_t v107 = a4 + i;
            if (a4 + i < v106) {
              goto LABEL_277;
            }
            if (v107 >= (unint64_t)&v9[v30 + 1]) {
              unint64_t v107 = (unint64_t)&v9[v30 + 1];
            }
            if (v107 > a4)
            {
              unint64_t v108 = i + a4;
              unint64_t i = 1;
              unint64_t v109 = a4;
              while (1)
              {
                uint64_t v110 = 0;
                uint64_t v111 = 0;
                unint64_t v112 = v108 - v109;
                while (1)
                {
                  if ((uint64_t)(v109 - a4 + v111) < 0 || (uint64_t)(v112 + v110) < 1) {
                    goto LABEL_264;
                  }
                  int v113 = *(unsigned __int8 *)(v109 + v111);
                  if (v113 == 10)
                  {
                    BOOL v72 = __OFADD__(i++, 1);
                    if (!v72)
                    {
                      v109 += v111 + 1;
                      goto LABEL_239;
                    }
                    goto LABEL_281;
                  }
                  if (v113 == 13) {
                    break;
                  }
                  uint64_t v71 = v111 + 1;
                  if (__OFADD__(v111, 1)) {
                    goto LABEL_265;
                  }
                  ++v111;
                  --v110;
                  if (v109 + v111 >= v107) {
                    goto LABEL_245;
                  }
                }
                uint64_t v114 = v109 + v111;
                if (v106 >= v109 + v111 + 1)
                {
                  if (((v109 - a4 + v111 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v111 + v112) < 1)
                  {
                    __break(1u);
LABEL_285:
                    v120[0] = 0;
                    v120[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v120, "Invalid index ");
                    HIBYTE(v120[1]) = -18;
                    v115._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v115);
                    swift_bridgeObjectRelease();
                    v116._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
                    v116._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v116);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181ECAA8CLL);
                  }
                  if (*(unsigned char *)(v114 + 1) == 10) {
                    uint64_t v114 = v109 + v111 + 1;
                  }
                }
                BOOL v72 = __OFADD__(i++, 1);
                if (v72) {
                  goto LABEL_282;
                }
                unint64_t v109 = v114 + 1;
LABEL_239:
                if (v109 >= v107)
                {
                  uint64_t v71 = 0;
                  goto LABEL_245;
                }
              }
            }
            uint64_t v71 = 0;
            unint64_t i = 1;
LABEL_245:
            a3 = (uint64_t)&v9[v30 - a4];
            LOBYTE(v21) = 46;
LABEL_142:
            unint64_t v15 = 0xE900000000000072;
            unint64_t v22 = 0x65626D756E206E69;
            goto LABEL_181;
          }
          char v25 = 0;
          char v28 = 0;
          v9 += v30 + 1;
          char v26 = 1;
          if ((unint64_t)v9 >= v22)
          {
            __break(1u);
            goto LABEL_43;
          }
          break;
        case 'E':
          goto LABEL_36;
        default:
          if (v21 != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v26 != 1 && (v26 || v30 < 1))
          {
LABEL_141:
            unint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v9[v30], a4, i);
            uint64_t v71 = v77;
            a3 = v78;
            goto LABEL_142;
          }
          char v28 = 0;
          v9 += v30 + 1;
          char v26 = 2;
          char v25 = 1;
          if ((unint64_t)v9 >= v22) {
            goto LABEL_252;
          }
          goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (__OFADD__(v30, 1)) {
      goto LABEL_183;
    }
    if ((unint64_t)&v9[++v30] >= v22) {
      goto LABEL_184;
    }
  }
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if ((i & 0x8000000000000000) != 0) {
    goto LABEL_186;
  }
  return (char *)i;
}

unint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(__int16 a1, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  LOWORD(v8) = v6;
  unint64_t v13 = a2;
  LOWORD(v14) = a1;
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  v120[0] = 0;
  double v15 = _stringshims_strtod_l(a2, v120, 0);
  if (v120[0]) {
    BOOL v16 = &v13[a3] == v120[0];
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v27 = v15;
    unint64_t result = specialized Int128.init<A>(exactly:)(v15);
    if (v29) {
      goto LABEL_79;
    }
    if (fabs(v27) < 9.00719925e15) {
      return result;
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)v13, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v123);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v123, (uint64_t)&v124);
  if (v128 != 1)
  {
LABEL_43:
    __int16 v117 = (__int16)v8;
    LODWORD(a5) = v124;
    a4 = (unint64_t)v124 >> 48;
    unint64_t v33 = (unsigned __int16)v125;
    unint64_t v13 = (char *)((unint64_t)v124 >> 32);
    a3 = WORD1(v125);
    unint64_t v34 = (unsigned __int8 *)WORD2(v125);
    uint64_t v35 = HIWORD(v125);
    unint64_t v36 = v126;
    unint64_t v37 = v127;
    v120[0] = v124;
    v120[1] = v125;
    __int16 v121 = v126;
    __int16 v122 = v127;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(v120);
    LODWORD(v120[0]) = a5;
    WORD2(v120[0]) = (_WORD)v13;
    HIWORD(v120[0]) = a4;
    LOWORD(v120[1]) = v33;
    WORD1(v120[1]) = a3;
    WORD2(v120[1]) = (_WORD)v34;
    HIWORD(v120[1]) = v35;
    __int16 v121 = v36;
    __int16 v122 = v37;
    int v38 = _So9NSDecimala__length_getter(v120);
    unint64_t v39 = v36;
    uint64_t v14 = v35;
    unint64_t v8 = v34;
    unint64_t v7 = a3;
    LOWORD(a3) = v33;
    if (v38 || !isNegative_getter)
    {
      LODWORD(v120[0]) = a5;
      WORD2(v120[0]) = (_WORD)v13;
      HIWORD(v120[0]) = a4;
      LOWORD(v120[1]) = v33;
      WORD1(v120[1]) = v7;
      WORD2(v120[1]) = (_WORD)v8;
      HIWORD(v120[1]) = v14;
      unint64_t v118 = v39;
      __int16 v121 = v39;
      unint64_t v116 = v37;
      __int16 v122 = v37;
      int v40 = _So9NSDecimala__length_getter(v120);
      if (!v40) {
        goto LABEL_256;
      }
      unint64_t v41 = 0;
      int v42 = v40 - 1;
      if (v40 == 1)
      {
        __int16 v43 = v116;
        __int16 v44 = v118;
      }
      else
      {
        __int16 v43 = v116;
        __int16 v44 = v118;
        do
        {
          unint64_t v45 = a4;
          switch(v42)
          {
            case 1:
              break;
            case 2:
              unint64_t v45 = v33;
              break;
            case 3:
              unint64_t v45 = v7;
              break;
            case 4:
              unint64_t v45 = (unint64_t)v8;
              break;
            case 5:
              unint64_t v45 = v14;
              break;
            case 6:
              unint64_t v45 = v118;
              break;
            case 7:
              unint64_t v45 = v116;
              break;
            default:
              v120[0] = 0;
              v120[1] = (char *)0xE000000000000000;
              _StringGuts.grow(_:)(30);
              swift_bridgeObjectRelease();
              strcpy((char *)v120, "Invalid index ");
              HIBYTE(v120[1]) = -18;
              v114._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v114);
              swift_bridgeObjectRelease();
              v115._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
              v115._object = (void *)0xEE0061737369746ELL;
              String.append(_:)(v115);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x181ECBB40);
          }
          if (HIWORD(v41)) {
            goto LABEL_79;
          }
          unint64_t v41 = v45 | (v41 << 16);
          --v42;
        }
        while (v42);
        if (HIWORD(v41)) {
          goto LABEL_79;
        }
      }
      for (unint64_t i = (unsigned __int16)v13 | (v41 << 16); ; unint64_t i = 0)
      {
        LODWORD(v120[0]) = a5;
        WORD2(v120[0]) = (_WORD)v13;
        HIWORD(v120[0]) = a4;
        LOWORD(v120[1]) = a3;
        WORD1(v120[1]) = v7;
        WORD2(v120[1]) = (_WORD)v8;
        HIWORD(v120[1]) = v14;
        __int16 v121 = v44;
        __int16 v122 = v43;
        __int16 v49 = v43;
        if ((_So9NSDecimala__exponent_getter((char *)v120) & 0x80000000) == 0) {
          break;
        }
        LODWORD(v120[0]) = a5;
        WORD2(v120[0]) = (_WORD)v13;
        HIWORD(v120[0]) = a4;
        LOWORD(v120[1]) = a3;
        WORD1(v120[1]) = v7;
        WORD2(v120[1]) = (_WORD)v8;
        HIWORD(v120[1]) = v14;
        __int16 v121 = v118;
        __int16 v122 = v49;
        int v92 = _So9NSDecimala__exponent_getter((char *)v120);
        if (v92 > 0) {
          goto LABEL_267;
        }
        LOWORD(v8) = v117;
        if (!v92) {
          goto LABEL_183;
        }
        unsigned int v93 = -v92 & ~(-v92 >> 31);
        unsigned int v94 = ~v92;
        while (v93 > v94)
        {
          i /= 0xAuLL;
          if (__CFADD__(v92++, 1)) {
            goto LABEL_183;
          }
        }
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        __int16 v43 = v116;
        __int16 v44 = v118;
      }
      LODWORD(v120[0]) = a5;
      WORD2(v120[0]) = (_WORD)v13;
      HIWORD(v120[0]) = a4;
      LOWORD(v120[1]) = a3;
      WORD1(v120[1]) = v7;
      WORD2(v120[1]) = (_WORD)v8;
      HIWORD(v120[1]) = v14;
      __int16 v121 = v118;
      __int16 v122 = v49;
      int v50 = _So9NSDecimala__exponent_getter((char *)v120);
      if ((v50 & 0x80000000) == 0)
      {
        if (!v50) {
          goto LABEL_183;
        }
        if (is_mul_ok(i, 0xAuLL))
        {
          i *= 10;
          int v51 = v50 - 1;
          if (v50 == 1) {
            goto LABEL_183;
          }
          if (is_mul_ok(i, 0xAuLL))
          {
            i *= 10;
            while (--v51)
            {
              uint64_t v52 = (i * (unsigned __int128)0xAuLL) >> 64;
              i *= 10;
              if (v52) {
                goto LABEL_79;
              }
            }
            goto LABEL_183;
          }
        }
        goto LABEL_79;
      }
LABEL_265:
      __break(1u);
      goto LABEL_266;
    }
LABEL_79:
    uint64_t v53 = static String._fromUTF8Repairing(_:)();
    uint64_t v55 = v54;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v56 = v53;
    *(void *)(v56 + 8) = v55;
    *(_OWORD *)(v56 + 16) = 0u;
    *(_OWORD *)(v56 + 32) = 0u;
    char v57 = 11;
    goto LABEL_80;
  }
  BOOL v17 = (unsigned __int8 *)specialized BufferView.suffix(from:)(a6, (uint64_t)v13, a3);
  uint64_t v19 = v17;
  unint64_t i = v18;
  unint64_t v8 = &v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      __int16 v48 = v17;
      goto LABEL_95;
    }
    uint64_t v46 = 0;
    uint64_t v47 = v18;
    while (1)
    {
      if (v46 < 0 || (BOOL v32 = v47 < 1, --v47, v32))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
        goto LABEL_250;
      }
      if (v17[v46] - 58 < 0xFFFFFFF6) {
        break;
      }
      __int16 v48 = &v17[++v46];
      if (&v17[v46] >= v8) {
        goto LABEL_95;
      }
    }
LABEL_94:
    __int16 v48 = &v19[v46];
LABEL_95:
    if (v48 < v8)
    {
      char v61 = 0;
      uint64_t v62 = (unsigned __int8 *)(v48 - v19);
      char v63 = 1;
      char v64 = 1;
      while (1)
      {
        uint64_t v65 = 0;
        uint64_t v66 = &v19[i] - v48;
        while (1)
        {
          if (v48 - v19 + v65 < 0 || (BOOL v32 = v66 < 1, --v66, v32))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            unint64_t v83 = (unint64_t)&v48[v65];
            if ((unint64_t)&v48[v65] >= a4)
            {
              unint64_t v84 = a4 + a5;
              if (a4 + a5 >= v83)
              {
                if (v84 >= (unint64_t)&v48[v65 + 1]) {
                  unint64_t v84 = (unint64_t)&v48[v65 + 1];
                }
                if (v84 > a4)
                {
                  unint64_t v85 = a5 + a4;
                  a5 = 1;
                  unint64_t v86 = a4;
                  while (1)
                  {
                    uint64_t v87 = 0;
                    uint64_t v88 = 0;
                    unint64_t v89 = v85 - v86;
                    while (1)
                    {
                      if ((uint64_t)(v86 - a4 + v88) < 0 || (uint64_t)(v89 + v87) < 1) {
                        goto LABEL_251;
                      }
                      int v90 = *(unsigned __int8 *)(v86 + v88);
                      if (v90 == 10)
                      {
                        BOOL v76 = __OFADD__(a5++, 1);
                        if (!v76)
                        {
                          v86 += v88 + 1;
                          goto LABEL_169;
                        }
                        goto LABEL_271;
                      }
                      if (v90 == 13) {
                        break;
                      }
                      unint64_t v13 = (char *)(v88 + 1);
                      if (__OFADD__(v88, 1)) {
                        goto LABEL_252;
                      }
                      ++v88;
                      --v87;
                      if (v86 + v88 >= v84) {
                        goto LABEL_212;
                      }
                    }
                    uint64_t v91 = v86 + v88;
                    if (v83 < v86 + v88 + 1) {
                      goto LABEL_167;
                    }
                    if (((v86 - a4 + v88 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v88 + v89) < 1) {
                      goto LABEL_277;
                    }
                    if (*(unsigned char *)(v91 + 1) == 10) {
                      uint64_t v91 = v86 + v88 + 1;
                    }
LABEL_167:
                    BOOL v76 = __OFADD__(a5++, 1);
                    if (v76) {
                      goto LABEL_272;
                    }
                    unint64_t v86 = v91 + 1;
LABEL_169:
                    if (v86 >= v84)
                    {
                      unint64_t v13 = 0;
                      goto LABEL_212;
                    }
                  }
                }
                unint64_t v13 = 0;
                a5 = 1;
LABEL_212:
                unint64_t v80 = &v48[v65 - a4];
                goto LABEL_240;
              }
            }
LABEL_266:
            __break(1u);
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
            goto LABEL_276;
          }
          LODWORD(a3) = v48[v65];
          if ((a3 - 58) < 0xFFFFFFF6) {
            break;
          }
          if (__OFADD__(&v62[v65], 1)) {
            goto LABEL_144;
          }
          if (&v48[++v65] >= v8) {
            goto LABEL_145;
          }
        }
        uint64_t v67 = (uint64_t)&v62[v65];
        switch(v48[v65])
        {
          case '+':
          case '-':
            if (v67 != 0 || (v61 & 1) == 0) {
              goto LABEL_140;
            }
            uint64_t v62 = 0;
            char v61 = 0;
            char v63 = 0;
            char v64 = 0;
            v48 += v65 + 1;
            if (v48 >= v8) {
              goto LABEL_244;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v67 < 1 || (v64 & 1) == 0)
            {
              unint64_t v96 = (unint64_t)&v48[v65];
              if ((unint64_t)&v48[v65] < a4) {
                goto LABEL_270;
              }
              unint64_t v97 = a4 + a5;
              if (a4 + a5 < v96) {
                goto LABEL_270;
              }
              if (v97 >= (unint64_t)&v48[v65 + 1]) {
                unint64_t v97 = (unint64_t)&v48[v65 + 1];
              }
              if (v97 <= a4)
              {
                unint64_t v13 = 0;
                a5 = 1;
              }
              else
              {
                unint64_t v98 = a5 + a4;
                a5 = 1;
                unint64_t v99 = a4;
                do
                {
                  uint64_t v100 = 0;
                  uint64_t v101 = 0;
                  unint64_t v102 = v98 - v99;
                  while (1)
                  {
                    if ((uint64_t)(v99 - a4 + v101) < 0 || (uint64_t)(v102 + v100) < 1) {
                      goto LABEL_253;
                    }
                    int v103 = *(unsigned __int8 *)(v99 + v101);
                    if (v103 == 10) {
                      break;
                    }
                    if (v103 == 13)
                    {
                      uint64_t v104 = v99 + v101;
                      if (v96 < v99 + v101 + 1) {
                        goto LABEL_205;
                      }
                      if (((v99 - a4 + v101 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v101 + v102) >= 1)
                      {
                        if (*(unsigned char *)(v104 + 1) == 10) {
                          uint64_t v104 = v99 + v101 + 1;
                        }
LABEL_205:
                        BOOL v76 = __OFADD__(a5++, 1);
                        if (!v76)
                        {
                          unint64_t v99 = v104 + 1;
                          goto LABEL_209;
                        }
LABEL_276:
                        __break(1u);
LABEL_277:
                        __break(1u);
LABEL_278:
                        __break(1u);
LABEL_279:
                        __break(1u);
                      }
                      __break(1u);
LABEL_281:
                      __break(1u);
                    }
                    unint64_t v13 = (char *)(v101 + 1);
                    if (__OFADD__(v101, 1)) {
                      goto LABEL_254;
                    }
                    ++v101;
                    --v100;
                    if (v99 + v101 >= v97) {
                      goto LABEL_239;
                    }
                  }
                  BOOL v76 = __OFADD__(a5++, 1);
                  if (v76) {
                    goto LABEL_275;
                  }
                  v99 += v101 + 1;
LABEL_209:
                  ;
                }
                while (v99 < v97);
                unint64_t v13 = 0;
              }
LABEL_239:
              unint64_t v80 = &v48[v65 - a4];
              LODWORD(a3) = 46;
LABEL_240:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v56 = xmmword_182112860;
              *(void *)(v56 + 16) = a3;
              *(void *)(v56 + 24) = a5;
              *(void *)(v56 + 32) = v13;
              *(void *)(v56 + 40) = v80;
              char v57 = 1;
LABEL_80:
              *(unsigned char *)(v56 + 48) = v57;
              return swift_willThrow();
            }
            uint64_t v62 = 0;
            char v61 = 0;
            char v64 = 0;
            v48 += v65 + 1;
            char v63 = 1;
            if (v48 >= v8)
            {
              __break(1u);
              goto LABEL_115;
            }
            break;
          case 'E':
            goto LABEL_109;
          default:
            if (a3 != 101)
            {
LABEL_140:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v48[v65], a4, a5);
              unint64_t v13 = v78;
              unint64_t v80 = v79;
              goto LABEL_240;
            }
LABEL_109:
            if (v67 < 1 || (v63 & 1) == 0) {
              goto LABEL_146;
            }
            uint64_t v62 = 0;
            char v63 = 0;
            char v64 = 0;
            v48 += v65 + 1;
            char v61 = 1;
            if (v48 >= v8) {
              goto LABEL_245;
            }
            continue;
        }
      }
    }
    goto LABEL_260;
  }
  if (v18 < 1) {
    goto LABEL_255;
  }
  int v21 = *v17;
  if (v21 == 45 || (a3 = (unint64_t)v17, v21 == 43)) {
    a3 = (unint64_t)(v17 + 1);
  }
  if ((unint64_t)v8 < a3)
  {
    __break(1u);
    goto LABEL_258;
  }
  uint64_t v14 = a3 - (void)v17;
  if ((uint64_t)(a3 - (void)v17) < 0)
  {
LABEL_258:
    __break(1u);
    goto LABEL_259;
  }
  if ((uint64_t)&v8[-a3] < 0)
  {
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }
  if ((uint64_t)&v8[-a3] >= 2) {
    size_t v22 = 2;
  }
  else {
    size_t v22 = (size_t)&v8[-a3];
  }
  if (!_stringshims_strncasecmp_l((const char *)a3, "0x", v22, 0))
  {
    __int16 v48 = (unsigned __int8 *)(a3 + 2);
    uint64_t v46 = (uint64_t)&v8[-a3 - 2];
    if (v46 >= 1 && v48 < v8)
    {
      uint64_t v46 = v48 - v19;
      if (((v48 - v19) & 0x8000000000000000) == 0)
      {
        unint64_t v13 = (char *)(a3 - a4 + 2);
        uint64_t v46 = (uint64_t)&v19[i - a3 - 3];
        uint64_t v58 = v14 + 3;
        while (1)
        {
          uint64_t v59 = v58;
          unint64_t i = *v48;
          if ((i - 58) <= 0xF5u
            && (*v48 - 65 > 0x25 || ((1 << (i - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }
          BOOL v32 = v46-- < 1;
          if (!v32 && ++v48 < v8)
          {
            ++v13;
            ++v58;
            if ((v59 & 0x8000000000000000) == 0) {
              continue;
            }
          }
          goto LABEL_93;
        }
LABEL_115:
        if ((unint64_t)v48 >= a4)
        {
          unint64_t v68 = a4 + a5;
          if (a4 + a5 >= (unint64_t)v48)
          {
            if (v68 >= (unint64_t)(v48 + 1)) {
              unint64_t v68 = (unint64_t)(v48 + 1);
            }
            if (v68 > a4)
            {
              uint64_t v69 = -(uint64_t)a4;
              unint64_t v70 = a5 + a4;
              a5 = 1;
              while (1)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                unint64_t v73 = v70 - a4;
                while (1)
                {
                  if ((uint64_t)(v69 + a4 + v72) < 0 || (uint64_t)(v73 + v71) < 1) {
                    goto LABEL_246;
                  }
                  int v74 = *(unsigned __int8 *)(a4 + v72);
                  if (v74 == 10)
                  {
                    BOOL v76 = __OFADD__(a5++, 1);
                    if (!v76)
                    {
                      a4 += v72 + 1;
                      goto LABEL_138;
                    }
                    goto LABEL_268;
                  }
                  if (v74 == 13) {
                    break;
                  }
                  uint64_t v75 = v72 + 1;
                  if (__OFADD__(v72, 1)) {
                    goto LABEL_247;
                  }
                  ++v72;
                  --v71;
                  if (a4 + v72 >= v68)
                  {
                    a3 = 0xED00007265626D75;
                    uint64_t v14 = 0x6E20786568206E69;
                    goto LABEL_179;
                  }
                }
                uint64_t v77 = a4 + v72;
                if ((unint64_t)v48 < a4 + v72 + 1) {
                  goto LABEL_136;
                }
                if (((v69 + a4 + v72 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v72 + v73) < 1) {
                  goto LABEL_273;
                }
                if (*(unsigned char *)(v77 + 1) == 10) {
                  uint64_t v77 = a4 + v72 + 1;
                }
LABEL_136:
                BOOL v76 = __OFADD__(a5++, 1);
                if (v76) {
                  goto LABEL_269;
                }
                a4 = v77 + 1;
LABEL_138:
                a3 = 0xED00007265626D75;
                uint64_t v14 = 0x6E20786568206E69;
                if (a4 >= v68)
                {
                  uint64_t v75 = 0;
                  goto LABEL_179;
                }
              }
            }
            uint64_t v75 = 0;
            a3 = 0xED00007265626D75;
            uint64_t v14 = 0x6E20786568206E69;
            a5 = 1;
LABEL_179:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v56 = v14;
            *(void *)(v56 + 8) = a3;
            *(void *)(v56 + 16) = i;
            *(void *)(v56 + 24) = a5;
            *(void *)(v56 + 32) = v75;
            *(void *)(v56 + 40) = v13;
            char v57 = 1;
            goto LABEL_80;
          }
        }
LABEL_264:
        __break(1u);
        goto LABEL_265;
      }
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (a3 >= (unint64_t)v8)
  {
LABEL_263:
    __break(1u);
    goto LABEL_264;
  }
  char v23 = 0;
  char v24 = 0;
  char v25 = &v19[i];
  char v26 = 1;
LABEL_24:
  uint64_t v30 = 0;
  uint64_t v31 = (uint64_t)&v25[-a3];
  while ((uint64_t)(a3 - (void)v19 + v30) >= 0)
  {
    BOOL v32 = v31-- < 1;
    if (v32) {
      break;
    }
    unint64_t i = *(unsigned __int8 *)(a3 + v30);
    if ((i - 58) <= 0xF5u)
    {
      switch(*(unsigned char *)(a3 + v30))
      {
        case '+':
        case '-':
          if (v30 != 0 || (v23 & 1) == 0) {
            goto LABEL_141;
          }
          char v23 = 0;
          char v26 = 0;
          a3 += v30 + 1;
          char v24 = 3;
          if (a3 >= (unint64_t)v8) {
            goto LABEL_248;
          }
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            unint64_t v105 = a3 + v30;
            if (a3 + v30 < a4) {
              goto LABEL_274;
            }
            unint64_t v106 = a4 + a5;
            if (a4 + a5 < v105) {
              goto LABEL_274;
            }
            if (v106 >= a3 + v30 + 1) {
              unint64_t v106 = a3 + v30 + 1;
            }
            if (v106 > a4)
            {
              unint64_t v107 = a5 + a4;
              a5 = 1;
              unint64_t v108 = a4;
              while (1)
              {
                uint64_t v109 = 0;
                uint64_t v110 = 0;
                unint64_t v111 = v107 - v108;
                while (1)
                {
                  if ((uint64_t)(v108 - a4 + v110) < 0 || (uint64_t)(v111 + v109) < 1) {
                    goto LABEL_261;
                  }
                  int v112 = *(unsigned __int8 *)(v108 + v110);
                  if (v112 == 10)
                  {
                    BOOL v76 = __OFADD__(a5++, 1);
                    if (!v76)
                    {
                      v108 += v110 + 1;
                      goto LABEL_236;
                    }
                    goto LABEL_278;
                  }
                  if (v112 == 13) {
                    break;
                  }
                  uint64_t v75 = v110 + 1;
                  if (__OFADD__(v110, 1)) {
                    goto LABEL_262;
                  }
                  ++v110;
                  --v109;
                  if (v108 + v110 >= v106) {
                    goto LABEL_242;
                  }
                }
                uint64_t v113 = v108 + v110;
                if (v105 < v108 + v110 + 1) {
                  goto LABEL_234;
                }
                if (((v108 - a4 + v110 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v110 + v111) < 1) {
                  goto LABEL_281;
                }
                if (*(unsigned char *)(v113 + 1) == 10) {
                  uint64_t v113 = v108 + v110 + 1;
                }
LABEL_234:
                BOOL v76 = __OFADD__(a5++, 1);
                if (v76) {
                  goto LABEL_279;
                }
                unint64_t v108 = v113 + 1;
LABEL_236:
                if (v108 >= v106)
                {
                  uint64_t v75 = 0;
                  goto LABEL_242;
                }
              }
            }
            uint64_t v75 = 0;
            a5 = 1;
LABEL_242:
            unint64_t v13 = (char *)(a3 - a4 + v30);
            LOBYTE(i) = 46;
LABEL_142:
            a3 = 0xE900000000000072;
            uint64_t v14 = 0x65626D756E206E69;
            goto LABEL_179;
          }
          char v23 = 0;
          char v26 = 0;
          a3 += v30 + 1;
          char v24 = 1;
          if (a3 >= (unint64_t)v8)
          {
            __break(1u);
            goto LABEL_43;
          }
          break;
        case 'E':
          goto LABEL_36;
        default:
          if (i != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v24 != 1 && (v24 || v30 < 1))
          {
LABEL_141:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a3 + v30, a4, a5);
            uint64_t v75 = v81;
            unint64_t v13 = v82;
            goto LABEL_142;
          }
          char v26 = 0;
          a3 += v30 + 1;
          char v24 = 2;
          char v23 = 1;
          if (a3 >= (unint64_t)v8) {
            goto LABEL_249;
          }
          goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (__OFADD__(v30, 1)) {
      goto LABEL_181;
    }
    ++v30;
    if (a3 + v30 >= (unint64_t)v8) {
      goto LABEL_182;
    }
  }
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  if (isNegative_getter) {
    return -(uint64_t)i;
  }
  else {
    return i;
  }
}

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(__int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  v116[0] = 0;
  double v15 = _stringshims_strtod_l(a2, v116, 0);
  if (v116[0]) {
    BOOL v16 = &a2[a3] == v116[0];
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v28 = v15;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)v116, v15) || ((uint64_t)v116[1] & 1) != 0) {
      goto LABEL_44;
    }
    if (fabs(v28) < 9.00719925e15) {
      return v116[0];
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v119);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v119, (uint64_t)&v120);
  if (v124 != 1) {
    goto LABEL_43;
  }
  BOOL v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v19 = (unsigned __int8 *)v17;
  unint64_t v20 = v18;
  unint64_t v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      unint64_t v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21) {
        goto LABEL_259;
      }
      char v56 = 0;
      unint64_t v57 = v45 - (void)v19;
      char v58 = 1;
      char v59 = 1;
      while (2)
      {
        uint64_t v60 = 0;
        uint64_t v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (void)v19 + v60) < 0 || (BOOL v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            unint64_t v80 = v45 + v60;
            if (v45 + v60 < a4) {
              goto LABEL_266;
            }
            unint64_t v81 = a4 + a5;
            if (a4 + a5 < v80) {
              goto LABEL_266;
            }
            if (v81 >= v45 + v60 + 1) {
              unint64_t v81 = v45 + v60 + 1;
            }
            if (v81 <= a4)
            {
              a3 = 0;
              a5 = 1;
            }
            else
            {
              unint64_t v82 = a5 + a4;
              a5 = 1;
              unint64_t v83 = a4;
              do
              {
                uint64_t v84 = 0;
                uint64_t v85 = 0;
                unint64_t v86 = v82 - v83;
                while (1)
                {
                  if ((uint64_t)(v83 - a4 + v85) < 0 || (uint64_t)(v86 + v84) < 1) {
                    goto LABEL_250;
                  }
                  int v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1);
                    if (v74) {
                      goto LABEL_271;
                    }
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }
                  if (v87 == 13) {
                    break;
                  }
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1)) {
                    goto LABEL_251;
                  }
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81) {
                    goto LABEL_211;
                  }
                }
                uint64_t v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (((v83 - a4 + v85 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v85 + v86) < 1) {
                    goto LABEL_277;
                  }
                  if (*(unsigned char *)(v88 + 1) == 10) {
                    uint64_t v88 = v83 + v85 + 1;
                  }
                }
                BOOL v74 = __OFADD__(a5++, 1);
                if (v74) {
                  goto LABEL_272;
                }
                unint64_t v83 = v88 + 1;
LABEL_171:
                ;
              }
              while (v83 < v81);
              a3 = 0;
            }
LABEL_211:
            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v40 = xmmword_182112860;
            *(void *)(v40 + 16) = v8;
            *(void *)(v40 + 24) = a5;
            *(void *)(v40 + 32) = a3;
            *(void *)(v40 + 40) = a4;
            char v41 = 1;
            goto LABEL_45;
          }
          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if ((v8 - 58) < 0xFFFFFFF6) {
            break;
          }
          if (__OFADD__(v57 + v60, 1)) {
            goto LABEL_146;
          }
          ++v60;
          if (v45 + v60 >= v21) {
            goto LABEL_147;
          }
        }
        uint64_t v62 = v57 + v60;
        switch(*(unsigned char *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0) {
              goto LABEL_142;
            }
            unint64_t v57 = 0;
            char v56 = 0;
            char v58 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21) {
              goto LABEL_244;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              unint64_t v93 = v45 + v60;
              if (v45 + v60 < a4) {
                goto LABEL_270;
              }
              unint64_t v94 = a4 + a5;
              if (a4 + a5 < v93) {
                goto LABEL_270;
              }
              if (v94 >= v45 + v60 + 1) {
                unint64_t v94 = v45 + v60 + 1;
              }
              if (v94 <= a4)
              {
                a3 = 0;
                a5 = 1;
              }
              else
              {
                unint64_t v95 = a5 + a4;
                a5 = 1;
                unint64_t v96 = a4;
                do
                {
                  uint64_t v97 = 0;
                  uint64_t v98 = 0;
                  unint64_t v99 = v95 - v96;
                  while (1)
                  {
                    if ((uint64_t)(v96 - a4 + v98) < 0 || (uint64_t)(v99 + v97) < 1) {
                      goto LABEL_253;
                    }
                    int v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      BOOL v74 = __OFADD__(a5++, 1);
                      if (v74) {
                        goto LABEL_275;
                      }
                      v96 += v98 + 1;
                      goto LABEL_208;
                    }
                    if (v100 == 13) {
                      break;
                    }
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1)) {
                      goto LABEL_254;
                    }
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94) {
                      goto LABEL_239;
                    }
                  }
                  uint64_t v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (((v96 - a4 + v98 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v98 + v99) < 1) {
                      goto LABEL_280;
                    }
                    if (*(unsigned char *)(v101 + 1) == 10) {
                      uint64_t v101 = v96 + v98 + 1;
                    }
                  }
                  BOOL v74 = __OFADD__(a5++, 1);
                  if (v74) {
                    goto LABEL_276;
                  }
                  unint64_t v96 = v101 + 1;
LABEL_208:
                  ;
                }
                while (v96 < v94);
                a3 = 0;
              }
LABEL_239:
              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }
            unint64_t v57 = 0;
            char v56 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            char v58 = 1;
            if (v45 < v21) {
              continue;
            }
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if (v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }
LABEL_98:
            if (v62 < 1 || (v58 & 1) == 0) {
              goto LABEL_148;
            }
            unint64_t v57 = 0;
            char v58 = 0;
            char v59 = 0;
            v45 += v60 + 1;
            char v56 = 1;
            if (v45 >= v21) {
              goto LABEL_245;
            }
            continue;
        }
        goto LABEL_104;
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v18;
    while (1)
    {
      if (v43 < 0 || (BOOL v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }
      if (v17[v43] - 58 < 0xFFFFFFF6) {
        break;
      }
      unint64_t v45 = (unint64_t)&v17[++v43];
      if ((unint64_t)&v17[v43] >= v21) {
        goto LABEL_84;
      }
    }
LABEL_83:
    unint64_t v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }
  if (v18 < 1) {
    goto LABEL_255;
  }
  int v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (unint64_t v8 = v17, v22 == 43)) {
    unint64_t v8 = v17 + 1;
  }
  if (v21 < (unint64_t)v8) {
    goto LABEL_256;
  }
  unint64_t v14 = v8 - v17;
  if (v8 - v17 < 0) {
    goto LABEL_257;
  }
  if ((uint64_t)(v21 - (void)v8) < 0) {
    goto LABEL_258;
  }
  if ((uint64_t)(v21 - (void)v8) >= 2) {
    size_t v23 = 2;
  }
  else {
    size_t v23 = v21 - (void)v8;
  }
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0))
  {
    uint64_t v52 = (unsigned __int8 *)(v8 + 2);
    uint64_t v43 = v21 - (void)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      uint64_t v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        uint64_t v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        unint64_t v53 = v14 + 3;
        do
        {
          unint64_t v54 = v53;
          unint64_t v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1 << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            if ((unint64_t)v52 < a4) {
              goto LABEL_264;
            }
            unint64_t v66 = a4 + a5;
            if (a4 + a5 < (unint64_t)v52) {
              goto LABEL_264;
            }
            if (v66 >= (unint64_t)(v52 + 1)) {
              unint64_t v66 = (unint64_t)(v52 + 1);
            }
            if (v66 <= a4)
            {
              uint64_t v73 = 0;
              unint64_t v14 = 0xED00007265626D75;
              unint64_t v21 = 0x6E20786568206E69;
              a5 = 1;
              goto LABEL_174;
            }
            uint64_t v67 = -(uint64_t)a4;
            unint64_t v68 = a5 + a4;
            a5 = 1;
            while (1)
            {
              uint64_t v69 = 0;
              uint64_t v70 = 0;
              unint64_t v71 = v68 - a4;
              while (1)
              {
                if ((uint64_t)(v67 + a4 + v70) < 0 || (uint64_t)(v71 + v69) < 1) {
                  goto LABEL_246;
                }
                int v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10) {
                  break;
                }
                if (v72 == 13)
                {
                  uint64_t v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (((v67 + a4 + v70 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v70 + v71) < 1) {
                      goto LABEL_273;
                    }
                    if (*(unsigned char *)(v75 + 1) == 10) {
                      uint64_t v75 = a4 + v70 + 1;
                    }
                  }
                  BOOL v74 = __OFADD__(a5++, 1);
                  if (v74) {
                    goto LABEL_268;
                  }
                  a4 = v75 + 1;
                  goto LABEL_140;
                }
                uint64_t v73 = v70 + 1;
                if (__OFADD__(v70, 1)) {
                  goto LABEL_247;
                }
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  unint64_t v14 = 0xED00007265626D75;
                  unint64_t v21 = 0x6E20786568206E69;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v40 = v21;
                  *(void *)(v40 + 8) = v14;
                  *(void *)(v40 + 16) = v20;
                  *(void *)(v40 + 24) = a5;
                  *(void *)(v40 + 32) = v73;
                  *(void *)(v40 + 40) = a3;
                  char v41 = 1;
                  goto LABEL_45;
                }
              }
              BOOL v74 = __OFADD__(a5++, 1);
              if (v74) {
                goto LABEL_267;
              }
              a4 += v70 + 1;
LABEL_140:
              unint64_t v14 = 0xED00007265626D75;
              unint64_t v21 = 0x6E20786568206E69;
              if (a4 >= v66)
              {
                uint64_t v73 = 0;
                goto LABEL_174;
              }
            }
          }
          BOOL v31 = v43-- < 1;
          if (v31) {
            break;
          }
          if ((unint64_t)++v52 >= v21) {
            break;
          }
          ++a3;
          ++v53;
        }
        while ((v54 & 0x8000000000000000) == 0);
      }
    }
    __break(1u);
    goto LABEL_83;
  }
  if ((unint64_t)v8 >= v21) {
    goto LABEL_263;
  }
  char v24 = 0;
  char v25 = 0;
  char v26 = (const char *)&v19[v20];
  char v27 = 1;
LABEL_24:
  uint64_t v29 = 0;
  uint64_t v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    BOOL v31 = v30-- < 1;
    if (v31) {
      break;
    }
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0) {
            goto LABEL_143;
          }
          char v24 = 0;
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 3;
          if ((unint64_t)v8 >= v21) {
            goto LABEL_248;
          }
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            unint64_t v102 = (unint64_t)&v8[v29];
            if ((unint64_t)&v8[v29] < a4) {
              goto LABEL_274;
            }
            unint64_t v103 = a4 + a5;
            if (a4 + a5 < v102) {
              goto LABEL_274;
            }
            if (v103 >= (unint64_t)&v8[v29 + 1]) {
              unint64_t v103 = (unint64_t)&v8[v29 + 1];
            }
            if (v103 > a4)
            {
              unint64_t v104 = a5 + a4;
              a5 = 1;
              unint64_t v105 = a4;
              while (1)
              {
                uint64_t v106 = 0;
                uint64_t v107 = 0;
                unint64_t v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }
                  int v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }
                    goto LABEL_278;
                  }
                  if (v109 == 13) {
                    break;
                  }
                  uint64_t v73 = v107 + 1;
                  if (__OFADD__(v107, 1)) {
                    goto LABEL_262;
                  }
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103) {
                    goto LABEL_242;
                  }
                }
                uint64_t v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v116[0] = 0;
                    v116[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v116, "Invalid index ");
                    HIBYTE(v116[1]) = -18;
                    v111._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
                    v112._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181ECDB7CLL);
                  }
                  if (*(unsigned char *)(v110 + 1) == 10) {
                    uint64_t v110 = v105 + v107 + 1;
                  }
                }
                BOOL v74 = __OFADD__(a5++, 1);
                if (v74) {
                  goto LABEL_279;
                }
                unint64_t v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  uint64_t v73 = 0;
                  goto LABEL_242;
                }
              }
            }
            uint64_t v73 = 0;
            a5 = 1;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            unint64_t v14 = 0xE900000000000072;
            unint64_t v21 = 0x65626D756E206E69;
            goto LABEL_174;
          }
          char v24 = 0;
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 1;
          if ((unint64_t)v8 < v21) {
            goto LABEL_24;
          }
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if (v20 != 101) {
            goto LABEL_143;
          }
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v8[v29], a4, a5);
            uint64_t v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }
          char v27 = 0;
          v8 += v29 + 1;
          char v25 = 2;
          char v24 = 1;
          if ((unint64_t)v8 >= v21) {
            goto LABEL_249;
          }
          goto LABEL_24;
      }
LABEL_43:
      int v115 = (int)v8;
      LODWORD(v8) = v120;
      unint64_t v32 = (unint64_t)v120 >> 48;
      unint64_t v20 = (unsigned __int16)v121;
      a3 = (unint64_t)v120 >> 32;
      unint64_t v33 = WORD1(v121);
      unint64_t v34 = WORD2(v121);
      unint64_t v35 = HIWORD(v121);
      unint64_t v36 = v122;
      unint64_t v37 = v123;
      v116[0] = v120;
      v116[1] = v121;
      __int16 v117 = v122;
      __int16 v118 = v123;
      if (_So9NSDecimala__isNegative_getter(v116)) {
        goto LABEL_44;
      }
      unint64_t v46 = v36;
      unint64_t v21 = v35;
      unint64_t v7 = v34;
      a5 = v33;
      unint64_t v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v116[0]) = v8;
      WORD2(v116[0]) = a3;
      HIWORD(v116[0]) = v32;
      LOWORD(v116[1]) = v14;
      WORD1(v116[1]) = a5;
      WORD2(v116[1]) = v7;
      HIWORD(v116[1]) = v21;
      unint64_t v113 = v37;
      unint64_t v114 = v46;
      __int16 v117 = v46;
      __int16 v118 = v37;
      int v47 = _So9NSDecimala__length_getter(v116);
      if (!v47) {
        goto LABEL_260;
      }
      unint64_t v45 = 0;
      int v48 = v47 - 1;
      if (v47 != 1)
      {
        __int16 v49 = v113;
        __int16 v50 = v114;
        while (2)
        {
          unint64_t v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              unint64_t v51 = v14;
              goto LABEL_66;
            case 3:
              unint64_t v51 = a5;
              goto LABEL_66;
            case 4:
              unint64_t v51 = v7;
              goto LABEL_66;
            case 5:
              unint64_t v51 = v21;
              goto LABEL_66;
            case 6:
              unint64_t v51 = v114;
              goto LABEL_66;
            case 7:
              unint64_t v51 = v113;
LABEL_66:
              if (HIWORD(v45)) {
                goto LABEL_44;
              }
              unint64_t v45 = v51 | (v45 << 16);
              if (!--v48) {
                goto LABEL_105;
              }
              continue;
            default:
              goto LABEL_282;
          }
        }
      }
LABEL_104:
      __int16 v49 = v113;
      __int16 v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }
      goto LABEL_44;
    }
    if (__OFADD__(v29, 1)) {
      goto LABEL_176;
    }
    if ((unint64_t)&v8[++v29] >= v21) {
      goto LABEL_177;
    }
  }
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v116[0]) = v8;
    WORD2(v116[0]) = a3;
    HIWORD(v116[0]) = v20;
    LOWORD(v116[1]) = v14;
    WORD1(v116[1]) = a5;
    WORD2(v116[1]) = v7;
    HIWORD(v116[1]) = v21;
    __int16 v117 = v114;
    __int16 v118 = (__int16)v19;
    int v89 = _So9NSDecimala__exponent_getter((char *)v116);
    if (v89 > 0) {
      goto LABEL_269;
    }
    LODWORD(v8) = v115;
    if (!v89) {
      return (char *)a4;
    }
    unsigned int v90 = -v89 & ~(-v89 >> 31);
    unsigned int v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1)) {
        return (char *)a4;
      }
    }
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0;
    __int16 v49 = v113;
    __int16 v50 = v114;
LABEL_107:
    LODWORD(v116[0]) = v8;
    WORD2(v116[0]) = a3;
    HIWORD(v116[0]) = v20;
    LOWORD(v116[1]) = v14;
    WORD1(v116[1]) = a5;
    WORD2(v116[1]) = v7;
    HIWORD(v116[1]) = v21;
    __int16 v117 = v50;
    __int16 v118 = v49;
    LOWORD(v19) = v49;
  }
  while ((_So9NSDecimala__exponent_getter((char *)v116) & 0x80000000) != 0);
  LODWORD(v116[0]) = v8;
  WORD2(v116[0]) = a3;
  HIWORD(v116[0]) = v20;
  LOWORD(v116[1]) = v14;
  WORD1(v116[1]) = a5;
  WORD2(v116[1]) = v7;
  HIWORD(v116[1]) = v21;
  __int16 v117 = v114;
  __int16 v118 = (__int16)v19;
  int v63 = _So9NSDecimala__exponent_getter((char *)v116);
  if (v63 < 0) {
    goto LABEL_265;
  }
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10;
      int v64 = v63 - 1;
      if (v63 == 1) {
        return (char *)a4;
      }
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10;
        while (--v64)
        {
          uint64_t v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10;
          if (v65) {
            goto LABEL_44;
          }
        }
        return (char *)a4;
      }
    }
LABEL_44:
    a4 = static String._fromUTF8Repairing(_:)();
    uint64_t v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v40 = a4;
    *(void *)(v40 + 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    char v41 = 11;
LABEL_45:
    *(unsigned char *)(v40 + 48) = v41;
    swift_willThrow();
  }
  return (char *)a4;
}

uint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(int a1, char *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  LODWORD(v9) = v6;
  LODWORD(v15) = a1;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  v118[0] = 0;
  double v16 = _stringshims_strtod_l(a2, v118, 0);
  if (v118[0]) {
    BOOL v17 = &a2[a3] == v118[0];
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    double v28 = v16;
    uint64_t v29 = specialized UInt128.init<A>(exactly:)(v16);
    if (v30) {
      goto LABEL_44;
    }
    if (fabs(v28) < 9.00719925e15) {
      return v29;
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1) {
    goto LABEL_43;
  }
  uint64_t v18 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  unint64_t v20 = (unsigned __int8 *)v18;
  unint64_t v7 = v19;
  unint64_t v21 = (unint64_t)&v18[v19];
  if ((v15 & 1) == 0)
  {
    if (v19 <= 0)
    {
      unint64_t v47 = (unint64_t)v18;
LABEL_82:
      if (v47 >= v21) {
        goto LABEL_257;
      }
      char v57 = 0;
      unint64_t v58 = v47 - (void)v20;
      char v59 = 1;
      char v60 = 1;
      while (2)
      {
        uint64_t v61 = 0;
        uint64_t v62 = (uint64_t)&v20[v7 - v47];
        while (1)
        {
          if ((uint64_t)(v47 - (void)v20 + v61) < 0 || (BOOL v33 = v62 < 1, --v62, v33))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            unint64_t v82 = v47 + v61;
            if (v47 + v61 < a4) {
              goto LABEL_264;
            }
            unint64_t v83 = a4 + a5;
            if (a4 + a5 < v82) {
              goto LABEL_264;
            }
            if (v83 >= v47 + v61 + 1) {
              unint64_t v83 = v47 + v61 + 1;
            }
            if (v83 <= a4)
            {
              a3 = 0;
              a5 = 1;
            }
            else
            {
              unint64_t v84 = a5 + a4;
              a5 = 1;
              unint64_t v85 = a4;
              do
              {
                uint64_t v86 = 0;
                uint64_t v87 = 0;
                unint64_t v88 = v84 - v85;
                while (1)
                {
                  if ((uint64_t)(v85 - a4 + v87) < 0 || (uint64_t)(v88 + v86) < 1) {
                    goto LABEL_248;
                  }
                  int v89 = *(unsigned __int8 *)(v85 + v87);
                  if (v89 == 10)
                  {
                    BOOL v75 = __OFADD__(a5++, 1);
                    if (v75) {
                      goto LABEL_269;
                    }
                    v85 += v87 + 1;
                    goto LABEL_169;
                  }
                  if (v89 == 13) {
                    break;
                  }
                  a3 = v87 + 1;
                  if (__OFADD__(v87, 1)) {
                    goto LABEL_249;
                  }
                  ++v87;
                  --v86;
                  if (v85 + v87 >= v83) {
                    goto LABEL_209;
                  }
                }
                uint64_t v90 = v85 + v87;
                if (v82 >= v85 + v87 + 1)
                {
                  if (((v85 - a4 + v87 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v87 + v88) < 1) {
                    goto LABEL_275;
                  }
                  if (*(unsigned char *)(v90 + 1) == 10) {
                    uint64_t v90 = v85 + v87 + 1;
                  }
                }
                BOOL v75 = __OFADD__(a5++, 1);
                if (v75) {
                  goto LABEL_270;
                }
                unint64_t v85 = v90 + 1;
LABEL_169:
                ;
              }
              while (v85 < v83);
              a3 = 0;
            }
LABEL_209:
            uint64_t v79 = v47 - a4 + v61;
LABEL_238:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v42 = xmmword_182112860;
            *(void *)(v42 + 16) = v9;
            *(void *)(v42 + 24) = a5;
            *(void *)(v42 + 32) = a3;
            *(void *)(v42 + 40) = v79;
            char v43 = 1;
            goto LABEL_45;
          }
          LODWORD(v9) = *(unsigned __int8 *)(v47 + v61);
          if ((v9 - 58) < 0xFFFFFFF6) {
            break;
          }
          if (__OFADD__(v58 + v61, 1)) {
            goto LABEL_144;
          }
          ++v61;
          if (v47 + v61 >= v21) {
            goto LABEL_145;
          }
        }
        uint64_t v63 = v58 + v61;
        switch(*(unsigned char *)(v47 + v61))
        {
          case '+':
          case '-':
            if (v63 != 0 || (v57 & 1) == 0) {
              goto LABEL_140;
            }
            unint64_t v58 = 0;
            char v57 = 0;
            char v59 = 0;
            char v60 = 0;
            v47 += v61 + 1;
            if (v47 >= v21) {
              goto LABEL_242;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v63 < 1 || (v60 & 1) == 0)
            {
              unint64_t v95 = v47 + v61;
              if (v47 + v61 < a4) {
                goto LABEL_268;
              }
              unint64_t v96 = a4 + a5;
              if (a4 + a5 < v95) {
                goto LABEL_268;
              }
              if (v96 >= v47 + v61 + 1) {
                unint64_t v96 = v47 + v61 + 1;
              }
              if (v96 <= a4)
              {
                a3 = 0;
                a5 = 1;
              }
              else
              {
                unint64_t v97 = a5 + a4;
                a5 = 1;
                unint64_t v98 = a4;
                do
                {
                  uint64_t v99 = 0;
                  uint64_t v100 = 0;
                  unint64_t v101 = v97 - v98;
                  while (1)
                  {
                    if ((uint64_t)(v98 - a4 + v100) < 0 || (uint64_t)(v101 + v99) < 1) {
                      goto LABEL_251;
                    }
                    int v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10)
                    {
                      BOOL v75 = __OFADD__(a5++, 1);
                      if (v75) {
                        goto LABEL_273;
                      }
                      v98 += v100 + 1;
                      goto LABEL_206;
                    }
                    if (v102 == 13) {
                      break;
                    }
                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1)) {
                      goto LABEL_252;
                    }
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96) {
                      goto LABEL_237;
                    }
                  }
                  uint64_t v103 = v98 + v100;
                  if (v95 >= v98 + v100 + 1)
                  {
                    if (((v98 - a4 + v100 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v100 + v101) < 1) {
                      goto LABEL_278;
                    }
                    if (*(unsigned char *)(v103 + 1) == 10) {
                      uint64_t v103 = v98 + v100 + 1;
                    }
                  }
                  BOOL v75 = __OFADD__(a5++, 1);
                  if (v75) {
                    goto LABEL_274;
                  }
                  unint64_t v98 = v103 + 1;
LABEL_206:
                  ;
                }
                while (v98 < v96);
                a3 = 0;
              }
LABEL_237:
              uint64_t v79 = v47 - a4 + v61;
              LODWORD(v9) = 46;
              goto LABEL_238;
            }
            unint64_t v58 = 0;
            char v57 = 0;
            char v60 = 0;
            v47 += v61 + 1;
            char v59 = 1;
            if (v47 < v21) {
              continue;
            }
            __break(1u);
            break;
          case 'E':
            goto LABEL_96;
          default:
            if (v9 != 101)
            {
LABEL_140:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v47 + v61, a4, a5);
              a3 = v77;
              uint64_t v79 = v78;
              goto LABEL_238;
            }
LABEL_96:
            if (v63 < 1 || (v59 & 1) == 0) {
              goto LABEL_146;
            }
            unint64_t v58 = 0;
            char v59 = 0;
            char v60 = 0;
            v47 += v61 + 1;
            char v57 = 1;
            if (v47 >= v21) {
              goto LABEL_243;
            }
            continue;
        }
        goto LABEL_102;
      }
    }
    uint64_t v45 = 0;
    uint64_t v46 = v19;
    while (1)
    {
      if (v45 < 0 || (BOOL v33 = v46 < 1, --v46, v33))
      {
        __break(1u);
LABEL_242:
        __break(1u);
LABEL_243:
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
        goto LABEL_250;
      }
      if (v18[v45] - 58 < 0xFFFFFFF6) {
        break;
      }
      unint64_t v47 = (unint64_t)&v18[++v45];
      if ((unint64_t)&v18[v45] >= v21) {
        goto LABEL_82;
      }
    }
LABEL_81:
    unint64_t v47 = (unint64_t)&v20[v45];
    goto LABEL_82;
  }
  if (v19 < 1) {
    goto LABEL_253;
  }
  int v22 = *(unsigned __int8 *)v18;
  if (v22 == 45 || (BOOL v9 = v18, v22 == 43)) {
    BOOL v9 = v18 + 1;
  }
  if (v21 < (unint64_t)v9) {
    goto LABEL_254;
  }
  unint64_t v15 = v9 - v18;
  if (v9 - v18 < 0) {
    goto LABEL_255;
  }
  if ((uint64_t)(v21 - (void)v9) < 0) {
    goto LABEL_256;
  }
  if ((uint64_t)(v21 - (void)v9) >= 2) {
    size_t v23 = 2;
  }
  else {
    size_t v23 = v21 - (void)v9;
  }
  if (!_stringshims_strncasecmp_l(v9, "0x", v23, 0))
  {
    unint64_t v53 = (unsigned __int8 *)(v9 + 2);
    uint64_t v45 = v21 - (void)(v9 + 2);
    if (v45 >= 1 && (unint64_t)v53 < v21)
    {
      uint64_t v45 = v53 - v20;
      if (((v53 - v20) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v9[-a4 + 2];
        uint64_t v45 = &v20[v7] - (unsigned __int8 *)v9 - 3;
        unint64_t v54 = v15 + 3;
        do
        {
          unint64_t v55 = v54;
          unint64_t v7 = *v53;
          if ((v7 - 58) <= 0xF5u
            && (*v53 - 65 > 0x25 || ((1 << (v7 - 65)) & 0x3F0000003FLL) == 0))
          {
            if ((unint64_t)v53 < a4) {
              goto LABEL_262;
            }
            unint64_t v67 = a4 + a5;
            if (a4 + a5 < (unint64_t)v53) {
              goto LABEL_262;
            }
            if (v67 >= (unint64_t)(v53 + 1)) {
              unint64_t v67 = (unint64_t)(v53 + 1);
            }
            if (v67 <= a4)
            {
              uint64_t v74 = 0;
              unint64_t v15 = 0xED00007265626D75;
              unint64_t v21 = 0x6E20786568206E69;
              a5 = 1;
              goto LABEL_172;
            }
            uint64_t v68 = -(uint64_t)a4;
            unint64_t v69 = a5 + a4;
            a5 = 1;
            while (1)
            {
              uint64_t v70 = 0;
              uint64_t v71 = 0;
              unint64_t v72 = v69 - a4;
              while (1)
              {
                if ((uint64_t)(v68 + a4 + v71) < 0 || (uint64_t)(v72 + v70) < 1) {
                  goto LABEL_244;
                }
                int v73 = *(unsigned __int8 *)(a4 + v71);
                if (v73 == 10) {
                  break;
                }
                if (v73 == 13)
                {
                  uint64_t v76 = a4 + v71;
                  if ((unint64_t)v53 >= a4 + v71 + 1)
                  {
                    if (((v68 + a4 + v71 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v71 + v72) < 1) {
                      goto LABEL_271;
                    }
                    if (*(unsigned char *)(v76 + 1) == 10) {
                      uint64_t v76 = a4 + v71 + 1;
                    }
                  }
                  BOOL v75 = __OFADD__(a5++, 1);
                  if (v75) {
                    goto LABEL_266;
                  }
                  a4 = v76 + 1;
                  goto LABEL_138;
                }
                uint64_t v74 = v71 + 1;
                if (__OFADD__(v71, 1)) {
                  goto LABEL_245;
                }
                ++v71;
                --v70;
                if (a4 + v71 >= v67)
                {
                  unint64_t v15 = 0xED00007265626D75;
                  unint64_t v21 = 0x6E20786568206E69;
LABEL_172:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v42 = v21;
                  *(void *)(v42 + 8) = v15;
                  *(void *)(v42 + 16) = v7;
                  *(void *)(v42 + 24) = a5;
                  *(void *)(v42 + 32) = v74;
                  *(void *)(v42 + 40) = a3;
                  char v43 = 1;
                  goto LABEL_45;
                }
              }
              BOOL v75 = __OFADD__(a5++, 1);
              if (v75) {
                goto LABEL_265;
              }
              a4 += v71 + 1;
LABEL_138:
              unint64_t v15 = 0xED00007265626D75;
              unint64_t v21 = 0x6E20786568206E69;
              if (a4 >= v67)
              {
                uint64_t v74 = 0;
                goto LABEL_172;
              }
            }
          }
          BOOL v33 = v45-- < 1;
          if (v33) {
            break;
          }
          if ((unint64_t)++v53 >= v21) {
            break;
          }
          ++a3;
          ++v54;
        }
        while ((v55 & 0x8000000000000000) == 0);
      }
    }
    __break(1u);
    goto LABEL_81;
  }
  if ((unint64_t)v9 >= v21) {
    goto LABEL_261;
  }
  char v24 = 0;
  char v25 = 0;
  char v26 = (const char *)&v20[v7];
  char v27 = 1;
LABEL_24:
  uint64_t v31 = 0;
  uint64_t v32 = v26 - v9;
  while (v9 - (const char *)v20 + v31 >= 0)
  {
    BOOL v33 = v32-- < 1;
    if (v33) {
      break;
    }
    unint64_t v7 = v9[v31];
    if ((v7 - 58) <= 0xF5u)
    {
      switch(v9[v31])
      {
        case '+':
        case '-':
          if (v31 != 0 || (v24 & 1) == 0) {
            goto LABEL_141;
          }
          char v24 = 0;
          char v27 = 0;
          v9 += v31 + 1;
          char v25 = 3;
          if ((unint64_t)v9 >= v21) {
            goto LABEL_246;
          }
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v27 & 1) == 0)
          {
            unint64_t v104 = (unint64_t)&v9[v31];
            if ((unint64_t)&v9[v31] < a4) {
              goto LABEL_272;
            }
            unint64_t v105 = a4 + a5;
            if (a4 + a5 < v104) {
              goto LABEL_272;
            }
            if (v105 >= (unint64_t)&v9[v31 + 1]) {
              unint64_t v105 = (unint64_t)&v9[v31 + 1];
            }
            if (v105 > a4)
            {
              unint64_t v106 = a5 + a4;
              a5 = 1;
              unint64_t v107 = a4;
              while (1)
              {
                uint64_t v108 = 0;
                uint64_t v109 = 0;
                unint64_t v110 = v106 - v107;
                while (1)
                {
                  if ((uint64_t)(v107 - a4 + v109) < 0 || (uint64_t)(v110 + v108) < 1)
                  {
                    __break(1u);
LABEL_260:
                    __break(1u);
LABEL_261:
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
                  }
                  int v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    BOOL v75 = __OFADD__(a5++, 1);
                    if (!v75)
                    {
                      v107 += v109 + 1;
                      goto LABEL_234;
                    }
                    goto LABEL_276;
                  }
                  if (v111 == 13) {
                    break;
                  }
                  uint64_t v74 = v109 + 1;
                  if (__OFADD__(v109, 1)) {
                    goto LABEL_260;
                  }
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105) {
                    goto LABEL_240;
                  }
                }
                uint64_t v112 = v107 + v109;
                if (v104 < v107 + v109 + 1) {
                  goto LABEL_232;
                }
                if (((v107 - a4 + v109 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v109 + v110) < 1) {
                  goto LABEL_279;
                }
                if (*(unsigned char *)(v112 + 1) == 10) {
                  uint64_t v112 = v107 + v109 + 1;
                }
LABEL_232:
                BOOL v75 = __OFADD__(a5++, 1);
                if (v75) {
                  goto LABEL_277;
                }
                unint64_t v107 = v112 + 1;
LABEL_234:
                if (v107 >= v105)
                {
                  uint64_t v74 = 0;
                  goto LABEL_240;
                }
              }
            }
            uint64_t v74 = 0;
            a5 = 1;
LABEL_240:
            a3 = (uint64_t)&v9[v31 - a4];
            unint64_t v7 = 46;
LABEL_142:
            unint64_t v15 = 0xE900000000000072;
            unint64_t v21 = 0x65626D756E206E69;
            goto LABEL_172;
          }
          char v24 = 0;
          char v27 = 0;
          v9 += v31 + 1;
          char v25 = 1;
          if ((unint64_t)v9 < v21) {
            goto LABEL_24;
          }
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if (v7 != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v25 != 1 && (v25 || v31 < 1))
          {
LABEL_141:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v9[v31], a4, a5);
            uint64_t v74 = v80;
            a3 = v81;
            goto LABEL_142;
          }
          char v27 = 0;
          v9 += v31 + 1;
          char v25 = 2;
          char v24 = 1;
          if ((unint64_t)v9 >= v21) {
            goto LABEL_247;
          }
          goto LABEL_24;
      }
LABEL_43:
      __int16 v117 = (__int16)v9;
      LODWORD(v15) = v122;
      unint64_t v34 = (unint64_t)v122 >> 48;
      a5 = (unsigned __int16)v123;
      a3 = (unint64_t)v122 >> 32;
      unint64_t v35 = WORD1(v123);
      unint64_t v36 = WORD2(v123);
      unint64_t v37 = HIWORD(v123);
      unint64_t v38 = v124;
      unint64_t v7 = v125;
      v118[0] = v122;
      v118[1] = v123;
      __int16 v119 = v124;
      __int16 v120 = v125;
      if (_So9NSDecimala__isNegative_getter(v118)) {
        goto LABEL_44;
      }
      unint64_t v48 = v38;
      unint64_t v21 = v37;
      unint64_t v8 = v36;
      a4 = v35;
      BOOL v9 = (const char *)a5;
      LOWORD(a5) = v34;
      LODWORD(v118[0]) = v15;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v34;
      LOWORD(v118[1]) = (_WORD)v9;
      WORD1(v118[1]) = a4;
      WORD2(v118[1]) = v8;
      HIWORD(v118[1]) = v21;
      unint64_t v115 = v7;
      unint64_t v116 = v48;
      __int16 v119 = v48;
      __int16 v120 = v7;
      int v49 = _So9NSDecimala__length_getter(v118);
      if (!v49) {
        goto LABEL_258;
      }
      unint64_t v47 = 0;
      unint64_t v7 = (v49 - 1);
      if (v49 != 1)
      {
        __int16 v50 = v115;
        __int16 v51 = v116;
        while (1)
        {
          unint64_t v52 = v34;
          switch((int)v7)
          {
            case 1:
              break;
            case 2:
              unint64_t v52 = (unint64_t)v9;
              break;
            case 3:
              unint64_t v52 = a4;
              break;
            case 4:
              unint64_t v52 = v8;
              break;
            case 5:
              unint64_t v52 = v21;
              break;
            case 6:
              unint64_t v52 = v116;
              break;
            case 7:
              unint64_t v52 = v115;
              break;
            default:
              v118[0] = 0;
              v118[1] = (char *)0xE000000000000000;
              _StringGuts.grow(_:)(30);
              swift_bridgeObjectRelease();
              strcpy((char *)v118, "Invalid index ");
              HIBYTE(v118[1]) = -18;
              v113._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v113);
              swift_bridgeObjectRelease();
              v114._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
              v114._object = (void *)0xEE0061737369746ELL;
              String.append(_:)(v114);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x181ECEB4CLL);
          }
          if (HIWORD(v47)) {
            goto LABEL_44;
          }
          unint64_t v47 = v52 | (v47 << 16);
          unint64_t v7 = (v7 - 1);
          if (!v7) {
            goto LABEL_103;
          }
        }
      }
LABEL_102:
      __int16 v50 = v115;
      __int16 v51 = v116;
LABEL_103:
      if (!HIWORD(v47))
      {
        unint64_t v7 = (unsigned __int16)a3 | (v47 << 16);
        goto LABEL_105;
      }
      goto LABEL_44;
    }
    if (__OFADD__(v31, 1)) {
      goto LABEL_174;
    }
    if ((unint64_t)&v9[++v31] >= v21) {
      goto LABEL_175;
    }
  }
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
  do
  {
    LODWORD(v118[0]) = v15;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = a5;
    LOWORD(v118[1]) = (_WORD)v9;
    WORD1(v118[1]) = a4;
    WORD2(v118[1]) = v8;
    HIWORD(v118[1]) = v21;
    __int16 v119 = v116;
    __int16 v120 = (__int16)v20;
    int v91 = _So9NSDecimala__exponent_getter((char *)v118);
    if (v91 > 0) {
      goto LABEL_267;
    }
    LOWORD(v9) = v117;
    if (!v91) {
      return v7;
    }
    unsigned int v92 = -v91 & ~(-v91 >> 31);
    unsigned int v93 = ~v91;
    while (v92 > v93)
    {
      v7 /= 0xAuLL;
      if (__CFADD__(v91++, 1)) {
        return v7;
      }
    }
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    unint64_t v7 = 0;
    __int16 v50 = v115;
    __int16 v51 = v116;
LABEL_105:
    LODWORD(v118[0]) = v15;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = a5;
    LOWORD(v118[1]) = (_WORD)v9;
    WORD1(v118[1]) = a4;
    WORD2(v118[1]) = v8;
    HIWORD(v118[1]) = v21;
    __int16 v119 = v51;
    __int16 v120 = v50;
    LOWORD(v20) = v50;
  }
  while ((_So9NSDecimala__exponent_getter((char *)v118) & 0x80000000) != 0);
  LODWORD(v118[0]) = v15;
  WORD2(v118[0]) = a3;
  HIWORD(v118[0]) = a5;
  LOWORD(v118[1]) = (_WORD)v9;
  WORD1(v118[1]) = a4;
  WORD2(v118[1]) = v8;
  HIWORD(v118[1]) = v21;
  __int16 v119 = v116;
  __int16 v120 = (__int16)v20;
  int v64 = _So9NSDecimala__exponent_getter((char *)v118);
  if (v64 < 0) {
    goto LABEL_263;
  }
  if (v64)
  {
    if (is_mul_ok(v7, 0xAuLL))
    {
      v7 *= 10;
      int v65 = v64 - 1;
      if (v64 == 1) {
        return v7;
      }
      if (is_mul_ok(v7, 0xAuLL))
      {
        v7 *= 10;
        while (--v65)
        {
          uint64_t v66 = (v7 * (unsigned __int128)0xAuLL) >> 64;
          v7 *= 10;
          if (v66) {
            goto LABEL_44;
          }
        }
        return v7;
      }
    }
LABEL_44:
    uint64_t v39 = static String._fromUTF8Repairing(_:)();
    uint64_t v41 = v40;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v42 = v39;
    *(void *)(v42 + 8) = v41;
    *(_OWORD *)(v42 + 16) = 0u;
    *(_OWORD *)(v42 + 32) = 0u;
    char v43 = 11;
LABEL_45:
    *(unsigned char *)(v42 + 48) = v43;
    swift_willThrow();
  }
  return v7;
}

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned __int8 *, uint64_t, uint64_t), unint64_t a8, uint64_t (*a9)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t), uint64_t (*a10)(unint64_t, uint64_t))
{
  uint64_t v11 = v10;
  LOBYTE(v12) = a5;
  uint64_t v14 = a2;
  unint64_t v15 = a1;
  uint64_t v185 = a4;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }
    char v29 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    if (v29 == 48)
    {
      if (v14 >= 1) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = v14;
      }
      unint64_t v31 = v15;
      if (v14 < 2) {
        goto LABEL_175;
      }
      unint64_t v32 = v15 + v30;
      unsigned __int8 v33 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + v30);
      unsigned int v34 = v33;
      if (v33 - 46 <= 0x37 && ((1 << (v33 - 46)) & 0x80000000800001) != 0) {
        goto LABEL_175;
      }
    }
    else
    {
      unint64_t v31 = v15;
      if ((v29 - 58) >= 0xF7u) {
        goto LABEL_175;
      }
      if (v29 != 45)
      {
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }
      if (v14 < 2)
      {
        unint64_t v64 = v15 - a3;
        if (v15 < a3 || a3 + v185 < v15) {
          goto LABEL_280;
        }
        if (a3 + v185 >= v15 + 1) {
          unint64_t v65 = v15 + 1;
        }
        else {
          unint64_t v65 = a3 + v185;
        }
        if (v65 <= a3)
        {
          uint64_t v74 = 0;
          uint64_t v68 = 1;
        }
        else
        {
          unint64_t v66 = v185 + a3;
          uint64_t v67 = -(uint64_t)a3;
          uint64_t v68 = 1;
          unint64_t v177 = v15 - a3;
          unint64_t v182 = v185 + a3;
          uint64_t v186 = -(uint64_t)a3;
          do
          {
            uint64_t v69 = 0;
            uint64_t v70 = 0;
            unint64_t v71 = v66 - a3;
            unint64_t v72 = v67 + a3;
            while (1)
            {
              if ((uint64_t)(v72 + v70) < 0 || (uint64_t)(v71 + v69) < 1) {
                goto LABEL_265;
              }
              int v73 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v70);
              if (v73 == 10)
              {
                BOOL v54 = __OFADD__(v68++, 1);
                uint64_t v67 = v186;
                if (v54) {
                  goto LABEL_284;
                }
                a3 += v70 + 1;
                goto LABEL_104;
              }
              if (v73 == 13) {
                break;
              }
              uint64_t v74 = v70 + 1;
              if (__OFADD__(v70, 1)) {
                goto LABEL_266;
              }
              ++v70;
              --v69;
              if (a3 + v70 >= v65) {
                goto LABEL_106;
              }
            }
            uint64_t v75 = a3 + v70;
            uint64_t v67 = v186;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v70 + 1, v15)) {
              goto LABEL_102;
            }
            if (((v186 + a3 + v70 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v70 + v71) < 1) {
              goto LABEL_293;
            }
            if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v70 + 1) == 10) {
              uint64_t v75 = a3 + v70 + 1;
            }
LABEL_102:
            BOOL v54 = __OFADD__(v68++, 1);
            if (v54) {
              goto LABEL_285;
            }
            a3 = v75 + 1;
LABEL_104:
            unint64_t v66 = v182;
          }
          while (a3 < v65);
          uint64_t v74 = 0;
LABEL_106:
          unint64_t v64 = v177;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v93 = 0xD000000000000010;
        *(void *)(v93 + 8) = 0x80000001823ABAE0;
        *(void *)(v93 + 16) = 45;
        *(void *)(v93 + 24) = v68;
        *(void *)(v93 + 32) = v74;
        *(void *)(v93 + 40) = v64;
        *(unsigned char *)(v93 + 48) = 1;
        return swift_willThrow();
      }
      unint64_t v46 = v15 + 1;
      unsigned __int8 v47 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
      if (v47 != 48)
      {
        unsigned __int8 v79 = v47;
        if ((v47 - 58) < 0xF7u)
        {
          if (!specialized static Comparable.<= infix(_:_:)(a3, v15 + 1)) {
            goto LABEL_291;
          }
          if (!specialized static Comparable.<= infix(_:_:)(v15 + 1, a3 + v185))
          {
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }
          unint64_t v80 = specialized min<A>(_:_:)(v15 + 2, a3 + v185);
          if (v80 <= a3)
          {
            uint64_t v91 = 0;
            uint64_t v84 = 1;
            goto LABEL_234;
          }
          unint64_t v81 = v80;
          unint64_t v82 = v185 + a3;
          uint64_t v83 = -(uint64_t)a3;
          uint64_t v84 = 1;
          unint64_t v85 = a3;
          unsigned __int8 v172 = v79;
          unint64_t v178 = v185 + a3;
          while (1)
          {
LABEL_117:
            uint64_t v187 = v84;
            uint64_t v86 = 0;
            uint64_t v87 = 0;
            unint64_t v88 = v82 - v85;
            unint64_t v89 = v83 + v85;
            while (1)
            {
              if ((uint64_t)(v89 + v87) < 0 || (uint64_t)(v88 + v86) < 1) {
                goto LABEL_271;
              }
              int v90 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + v87);
              if (v90 == 10) {
                break;
              }
              if (v90 == 13)
              {
                uint64_t v92 = v85 + v87;
                if (specialized static Comparable.<= infix(_:_:)(v85 + v87 + 1, v46))
                {
                  if (((v85 - a3 + v87 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v87 + v88) < 1) {
                    goto LABEL_299;
                  }
                  if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + v87 + 1) == 10)uint64_t v92 = v85 + v87 + 1; {
                }
                  }
                uint64_t v84 = v187 + 1;
                if (__OFADD__(v187, 1)) {
                  goto LABEL_297;
                }
                unint64_t v85 = v92 + 1;
                unint64_t v82 = v178;
                uint64_t v83 = -(uint64_t)a3;
                if (v92 + 1 >= v81) {
                  goto LABEL_135;
                }
                goto LABEL_117;
              }
              uint64_t v91 = v87 + 1;
              if (__OFADD__(v87, 1)) {
                goto LABEL_273;
              }
              ++v87;
              --v86;
              if (v85 + v87 >= v81)
              {
                unsigned __int8 v79 = v172;
                uint64_t v84 = v187;
LABEL_234:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v151 = 0xD000000000000013;
                *(void *)(v151 + 8) = 0x80000001823ABBD0;
                *(void *)(v151 + 16) = v79;
                *(void *)(v151 + 24) = v84;
                *(void *)(v151 + 32) = v91;
                *(void *)(v151 + 40) = v46 - a3;
                *(unsigned char *)(v151 + 48) = 1;
                return swift_willThrow();
              }
            }
            uint64_t v83 = -(uint64_t)a3;
            uint64_t v84 = v187 + 1;
            if (__OFADD__(v187, 1)) {
              goto LABEL_296;
            }
            v85 += v87 + 1;
            unint64_t v82 = v178;
            if (v85 >= v81)
            {
LABEL_135:
              uint64_t v91 = 0;
              unsigned __int8 v79 = v172;
              goto LABEL_234;
            }
          }
        }
        ++v15;
        goto LABEL_175;
      }
      ++v15;
      unint64_t v32 = v31 + 2;
      if (specialized Collection.isEmpty.getter(v31 + 2, v14 - 2)
        || (unsigned __int8 v33 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v32),
            unsigned int v34 = v33,
            v33 - 46 <= 0x37)
        && ((1 << (v33 - 46)) & 0x80000000800001) != 0)
      {
LABEL_175:
        unint64_t v24 = v15;
        unint64_t v15 = v31;
        if ((a6 & 1) != 0 && v24 + 1 < v31 + v14)
        {
          uint64_t v118 = 0;
          while (1)
          {
            uint64_t v119 = v24 + v118;
            if ((*(unsigned __int8 *)(v24 + v118 + 1) | 0x20) == 0x65) {
              break;
            }
            if (~v24 + v14 + v15 == ++v118) {
              goto LABEL_186;
            }
          }
          if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v24 + v118) - 58) <= 0xF5u)
          {
            if (((v24 - v15 + v118 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v24 + v14 + v15 - v118) < 1) {
              goto LABEL_283;
            }
            unsigned __int8 v120 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v119 + 1);
            unint64_t v121 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v119 + 1, a3, v185);
            uint64_t v123 = v122;
            uint64_t v125 = v124;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v61 = xmmword_182112860;
            *(void *)(v61 + 16) = v120;
            *(void *)(v61 + 24) = v121;
            *(void *)(v61 + 32) = v123;
            goto LABEL_185;
          }
        }
LABEL_186:
        unint64_t v126 = v15 + v14;
        unint64_t v127 = v15 + v14 - 1;
        unsigned __int8 v128 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v127);
        if ((v128 - 58) > 0xF5u)
        {
          uint64_t result = a10(v15, v14);
          if ((v138 & 1) == 0) {
            return result;
          }
          return a9(v12 & 1, v15, v14, a3, v185, v24);
        }
        int v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(v127 - a3);
        if (v127 < a3 || a3 + v185 < v127) {
          goto LABEL_274;
        }
        if (a3 + v185 >= v126) {
          unint64_t v129 = v126;
        }
        else {
          unint64_t v129 = a3 + v185;
        }
        if (v129 <= a3)
        {
          unint64_t v24 = 0;
          uint64_t v14 = 1;
          goto LABEL_217;
        }
        unsigned __int8 v174 = v128;
        unint64_t v180 = v127 - a3;
        unint64_t v130 = v185 + a3;
        uint64_t v131 = -(uint64_t)a3;
        uint64_t v14 = 1;
        unint64_t v184 = v185 + a3;
        uint64_t v189 = -(uint64_t)a3;
LABEL_194:
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        unint64_t v134 = v130 - a3;
        unint64_t v135 = v131 + a3;
        while ((uint64_t)(v135 + v133) >= 0 && (uint64_t)(v134 + v132) >= 1)
        {
          int v136 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v133);
          if (v136 == 10)
          {
            BOOL v54 = __OFADD__(v14++, 1);
            uint64_t v131 = v189;
            if (!v54)
            {
              a3 += v133 + 1;
              goto LABEL_211;
            }
            goto LABEL_278;
          }
          if (v136 == 13)
          {
            uint64_t v137 = a3 + v133;
            uint64_t v131 = v189;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v133 + 1, v127)) {
              goto LABEL_209;
            }
            if (((v189 + a3 + v133 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v133 + v134) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v133 + 1) == 10)uint64_t v137 = a3 + v133 + 1; {
LABEL_209:
              }
              BOOL v54 = __OFADD__(v14++, 1);
              if (!v54)
              {
                a3 = v137 + 1;
LABEL_211:
                unint64_t v130 = v184;
                if (a3 >= v129)
                {
                  unint64_t v24 = 0;
LABEL_213:
                  unsigned __int8 v128 = v174;
                  int v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))v180;
LABEL_217:
                  uint64_t v63 = v128;
                  goto LABEL_218;
                }
                goto LABEL_194;
              }
LABEL_279:
              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
            }
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
            goto LABEL_292;
          }
          unint64_t v24 = v133 + 1;
          if (__OFADD__(v133, 1)) {
            goto LABEL_264;
          }
          ++v133;
          --v132;
          if (a3 + v133 >= v129) {
            goto LABEL_213;
          }
        }
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
    }
    unsigned __int8 v36 = v33;
    __int16 v37 = _asciiNumbers.getter();
    unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v32, a3, v185);
    unsigned __int8 v39 = v36;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    if (v34 >= v37 && HIBYTE(v37) >= v39) {
      goto LABEL_111;
    }
    uint64_t v44 = v39;
LABEL_232:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)uint64_t v61 = xmmword_182112860;
    *(void *)(v61 + 16) = v44;
    *(void *)(v61 + 24) = v38;
    *(void *)(v61 + 32) = v41;
    *(void *)(v61 + 40) = v43;
    goto LABEL_245;
  }
  if (!a2)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  char v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v19 == 48)
  {
    unint64_t v171 = a7;
    uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    if (v14 >= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v14;
    }
    if (v14 >= 2)
    {
      unint64_t v21 = v15 + v20;
      unsigned __int8 v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + v20);
      char v23 = 0;
      if (v22 <= 0x57u)
      {
        unint64_t v24 = v15;
        if (v22 == 46 || v22 == 69) {
          goto LABEL_46;
        }
LABEL_109:
        __int16 v76 = _asciiNumbers.getter();
        unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + v20, a3, v185);
        uint64_t v41 = v77;
        uint64_t v43 = v78;
        if (v22 >= v76 && HIBYTE(v76) >= v22) {
          goto LABEL_111;
        }
        uint64_t v44 = v22;
        goto LABEL_232;
      }
      if (v22 == 120)
      {
LABEL_12:
        unint64_t v24 = v21 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v21 + 1, v15 + v14))
        {
LABEL_13:
          unsigned __int8 v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v24);
          char v26 = 1;
          if (!UInt8.isValidHexDigit.getter(v25))
          {
            unint64_t v145 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v24, a3, v185);
            uint64_t v147 = v146;
            uint64_t v149 = v148;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v150 = xmmword_182112860;
            *(void *)(v150 + 16) = v25;
            *(void *)(v150 + 24) = v145;
            *(void *)(v150 + 32) = v147;
            *(void *)(v150 + 40) = v149;
            *(unsigned char *)(v150 + 48) = 1;
            return swift_willThrow();
          }
          char v27 = 0;
LABEL_75:
          uint64_t result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v15, v14, v26, v171, v175);
          if ((v57 & 1) == 0) {
            return result;
          }
          if (v27)
          {
            uint64_t v58 = static String._fromUTF8Repairing(_:)();
            uint64_t v60 = v59;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v61 = v58;
            *(void *)(v61 + 8) = v60;
            *(_OWORD *)(v61 + 16) = 0u;
            *(_OWORD *)(v61 + 32) = 0u;
            char v62 = 11;
LABEL_246:
            *(unsigned char *)(v61 + 48) = v62;
            return swift_willThrow();
          }
          return a9(v12 & 1, v15, v14, a3, v185, v24);
        }
        if (v14 - v20 < 1) {
          goto LABEL_290;
        }
        goto LABEL_173;
      }
      if (v22 != 101)
      {
        if (v22 == 88) {
          goto LABEL_12;
        }
        goto LABEL_109;
      }
LABEL_45:
      unint64_t v24 = v15;
      goto LABEL_46;
    }
LABEL_44:
    char v23 = 0;
    goto LABEL_45;
  }
  if ((v19 - 58) >= 0xF7u)
  {
    unint64_t v171 = a7;
    uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    goto LABEL_44;
  }
  switch(v19)
  {
    case '+':
    case '-':
      if (v14 < 2)
      {
        if (v14 != 1) {
          goto LABEL_287;
        }
        unsigned __int8 v94 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        unint64_t v95 = v15 - a3;
        if (v15 < a3) {
          goto LABEL_288;
        }
        unsigned __int8 v96 = v94;
        if (!specialized static Comparable.<= infix(_:_:)(v15, a3 + a4)) {
          goto LABEL_289;
        }
        unint64_t v97 = specialized min<A>(_:_:)(v15 + 1, a3 + a4);
        if (v97 <= a3)
        {
          uint64_t v107 = 0;
          uint64_t v101 = 1;
          goto LABEL_229;
        }
        unint64_t v98 = v97;
        unsigned __int8 v173 = v96;
        unint64_t v179 = v15 - a3;
        unint64_t v99 = a4 + a3;
        uint64_t v100 = -(uint64_t)a3;
        uint64_t v101 = 1;
        unint64_t v183 = a4 + a3;
        uint64_t v188 = -(uint64_t)a3;
LABEL_147:
        uint64_t v102 = 0;
        uint64_t v103 = 0;
        unint64_t v104 = v99 - a3;
        unint64_t v105 = v100 + a3;
        while (1)
        {
          if ((uint64_t)(v105 + v103) < 0 || (uint64_t)(v104 + v102) < 1) {
            goto LABEL_269;
          }
          int v106 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v103);
          if (v106 == 10) {
            break;
          }
          if (v106 == 13)
          {
            uint64_t v108 = a3 + v103;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v103 + 1, v15)) {
              goto LABEL_162;
            }
            if (((v188 + a3 + v103 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v103 + v104) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v103 + 1) == 10)uint64_t v108 = a3 + v103 + 1; {
LABEL_162:
              }
              BOOL v54 = __OFADD__(v101++, 1);
              if (!v54)
              {
                a3 = v108 + 1;
LABEL_164:
                unint64_t v99 = v183;
                uint64_t v100 = v188;
                if (a3 >= v98)
                {
                  uint64_t v107 = 0;
LABEL_166:
                  unsigned __int8 v96 = v173;
                  unint64_t v95 = v179;
LABEL_229:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v144 = 0xD000000000000010;
                  *(void *)(v144 + 8) = 0x80000001823ABAE0;
                  *(void *)(v144 + 16) = v96;
                  *(void *)(v144 + 24) = v101;
                  *(void *)(v144 + 32) = v107;
                  *(void *)(v144 + 40) = v95;
                  *(unsigned char *)(v144 + 48) = 1;
                  return swift_willThrow();
                }
                goto LABEL_147;
              }
LABEL_295:
              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }
            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x181ECFFD4);
          }
          uint64_t v107 = v103 + 1;
          if (__OFADD__(v103, 1)) {
            goto LABEL_270;
          }
          ++v103;
          --v102;
          if (a3 + v103 >= v98) {
            goto LABEL_166;
          }
        }
        BOOL v54 = __OFADD__(v101++, 1);
        if (!v54)
        {
          a3 += v103 + 1;
          goto LABEL_164;
        }
        goto LABEL_294;
      }
      unint64_t v171 = a7;
      unint64_t v24 = v15 + 1;
      unsigned __int8 v45 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
      if (v45 == 48)
      {
        uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
        unint64_t v21 = v15 + 2;
        if (specialized Collection.isEmpty.getter(v15 + 2, v14 - 2))
        {
          char v23 = 0;
          goto LABEL_46;
        }
        unsigned __int8 v152 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
        char v23 = 0;
        if (v152 <= 0x57u)
        {
          if (v152 == 46 || v152 == 69) {
            goto LABEL_46;
          }
        }
        else
        {
          switch(v152)
          {
            case 'x':
              goto LABEL_239;
            case 'e':
              goto LABEL_46;
            case 'X':
LABEL_239:
              unint64_t v24 = v15 + 3;
              if (specialized static Comparable.<= infix(_:_:)(v15 + 3, v15 + v14)) {
                goto LABEL_13;
              }
              if (v14 - 2 < 1)
              {
                __break(1u);
LABEL_242:
                unint64_t v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v185);
                uint64_t v112 = v153;
                uint64_t v114 = v154;
                unint64_t v24 = v24;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v61 = 0xD000000000000013;
                *(void *)(v61 + 8) = 0x80000001823ABAC0;
LABEL_243:
                *(void *)(v61 + 16) = v24;
                goto LABEL_244;
              }
LABEL_173:
              unsigned __int8 v115 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
              unint64_t v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v185);
              uint64_t v112 = v116;
              uint64_t v114 = v117;
              unint64_t v24 = v115;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v61 = xmmword_182112860;
              goto LABEL_243;
          }
        }
        __int16 v155 = _asciiNumbers.getter();
        unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v185);
        uint64_t v41 = v156;
        uint64_t v43 = v157;
        if (v152 >= v155 && HIBYTE(v155) >= v152)
        {
LABEL_111:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v61 = v38;
          *(void *)(v61 + 8) = v41;
          *(void *)(v61 + 16) = v43;
          *(void *)(v61 + 24) = 0;
          *(void *)(v61 + 32) = 0;
          *(void *)(v61 + 40) = 0;
          char v62 = 10;
          goto LABEL_246;
        }
        uint64_t v44 = v152;
        goto LABEL_232;
      }
      unsigned __int8 v140 = v45;
      if ((v45 - 58) >= 0xF7u) {
        goto LABEL_257;
      }
      if (v45 == 46) {
        goto LABEL_256;
      }
      if (v45 != 78)
      {
        if (v45 == 73)
        {
          double v141 = (char *)specialized BufferView.dropFirst(_:)(1, v15, v14);
          uint64_t result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v141, v142, a3, v185);
          if (v10) {
            return result;
          }
          uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          char v23 = 1;
          goto LABEL_46;
        }
        _StringGuts.grow(_:)(20);
        v162._uint64_t countAndFlagsBits = 0x27207265746661;
        v162._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v162);
        unsigned __int8 v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        unsigned int v164 = (v163 + 1);
        if ((v163 & 0x80) != 0) {
          unsigned int v164 = (((v163 & 0x3F) << 8) | (v163 >> 6)) + 33217;
        }
        uint64_t v190 = (v164 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v164) >> 3)) & 7)));
        v165._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v190);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v165);
        swift_bridgeObjectRelease();
        v166._uint64_t countAndFlagsBits = 0x6D756E206E692027;
        v166._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v166);
        unint64_t v167 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v24, a3, v185);
        uint64_t v169 = v168;
        uint64_t v125 = v170;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v61 = 0;
        *(void *)(v61 + 8) = 0xE000000000000000;
        *(void *)(v61 + 16) = v140;
        *(void *)(v61 + 24) = v167;
        *(void *)(v61 + 32) = v169;
LABEL_185:
        *(void *)(v61 + 40) = v125;
LABEL_245:
        char v62 = 1;
        goto LABEL_246;
      }
      uint64_t v160 = (char *)specialized BufferView.dropFirst(_:)(1, v15, v14);
      uint64_t result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v160, v161, a3, v185);
      if (v10) {
        return result;
      }
      uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      char v23 = 1;
LABEL_46:
      char v27 = v23;
      unint64_t v48 = v15 + v14;
      a8 = v15 + v14 - 1;
      unsigned __int8 v181 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a8);
      if ((v181 | 0x20) != 0x65)
      {
        char v26 = 0;
        goto LABEL_75;
      }
      int v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      if (a8 < a3 || a3 + v185 < a8) {
        goto LABEL_272;
      }
      if (a3 + v185 >= v48) {
        unint64_t v12 = v48;
      }
      else {
        unint64_t v12 = a3 + v185;
      }
      if (v12 <= a3)
      {
        unint64_t v24 = 0;
        uint64_t v14 = 1;
        goto LABEL_79;
      }
      unint64_t v50 = v185 + a3;
      unint64_t v24 = -(uint64_t)a3;
      uint64_t v14 = 1;
      unint64_t v171 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      unint64_t v176 = v185 + a3;
      uint64_t v185 = -(uint64_t)a3;
      do
      {
        uint64_t v11 = 0;
        unint64_t v15 = 0;
        unint64_t v51 = v50 - a3;
        unint64_t v52 = v24 + a3;
        while (1)
        {
          if ((uint64_t)(v52 + v15) < 0 || (uint64_t)(v51 + v11) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            char v158 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v15, v14);
            uint64_t result = (uint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v158, v159, a3, v185);
            if (v11) {
              return result;
            }
LABEL_257:
            uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
            char v23 = 0;
            goto LABEL_46;
          }
          int v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v15);
          if (v53 == 10)
          {
            BOOL v54 = __OFADD__(v14++, 1);
            unint64_t v24 = v185;
            if (!v54)
            {
              a3 += v15 + 1;
              goto LABEL_71;
            }
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }
          if (v53 == 13) {
            break;
          }
          unint64_t v24 = v15 + 1;
          if (__OFADD__(v15, 1)) {
            goto LABEL_255;
          }
          ++v15;
          --v11;
          if (a3 + v15 >= v12) {
            goto LABEL_73;
          }
        }
        uint64_t v55 = a3 + v15;
        unint64_t v24 = v185;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v15 + 1, a8)) {
          goto LABEL_69;
        }
        if (((v185 + a3 + v15 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v15 + v51) < 1) {
          goto LABEL_281;
        }
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v15 + 1) == 10) {
          uint64_t v55 = a3 + v15 + 1;
        }
LABEL_69:
        BOOL v54 = __OFADD__(v14++, 1);
        if (v54) {
          goto LABEL_277;
        }
        a3 = v55 + 1;
LABEL_71:
        unint64_t v50 = v176;
      }
      while (a3 < v12);
      unint64_t v24 = 0;
LABEL_73:
      int v49 = v171;
LABEL_79:
      uint64_t v63 = v181;
LABEL_218:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v139 = 0xD000000000000010;
      *(void *)(v139 + 8) = 0x80000001823ABAE0;
      *(void *)(v139 + 16) = v63;
      *(void *)(v139 + 24) = v14;
      *(void *)(v139 + 32) = v24;
      *(void *)(v139 + 40) = v49;
      *(unsigned char *)(v139 + 48) = 1;
      return swift_willThrow();
    case '.':
      if (v14 >= 1) {
        uint64_t v109 = 1;
      }
      else {
        uint64_t v109 = v14;
      }
      unint64_t v21 = v15 + v109;
      if (specialized Collection.isEmpty.getter(v15 + v109, v14 - v109))
      {
        unint64_t v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, a4);
        uint64_t v112 = v111;
        uint64_t v114 = v113;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v61 = 0;
        *(void *)(v61 + 8) = 0;
        *(void *)(v61 + 16) = 46;
LABEL_244:
        *(void *)(v61 + 24) = v110;
        *(void *)(v61 + 32) = v112;
        *(void *)(v61 + 40) = v114;
        goto LABEL_245;
      }
      uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      LOBYTE(v24) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
      __int16 v143 = _asciiNumbers.getter();
      if (v24 >= v143
        && HIBYTE(v143) >= v24)
      {
        unint64_t v171 = a7;
        char v23 = 0;
        unint64_t v24 = v15;
        goto LABEL_46;
      }
      goto LABEL_242;
    case 'I':
      uint64_t result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v15, v14, v15, v14, a3, a4);
      goto LABEL_140;
    case 'N':
      uint64_t result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v15, v14, v15, v14, a3, a4);
LABEL_140:
      if (v10) {
        return result;
      }
      unint64_t v171 = a7;
      uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      char v23 = 1;
      goto LABEL_45;
    default:
      goto LABEL_286;
  }
}

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, uint64_t (*a7)(char **))
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  double v28 = 0;
  double v14 = _stringshims_strtod_l(a2, &v28, 0);
  unint64_t v15 = &a2[a3];
  if (v28) {
    BOOL v16 = v15 == v28;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v21 = v14;
    if (a7(&v28) & 1) == 0 || (v29) {
      goto LABEL_14;
    }
    if (fabs(v21) < 9.00719925e15) {
      return v28;
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    uint64_t v17 = v15 - a6;
    int64_t v18 = (a6 - a2) | (v15 - a6);
    if (a1)
    {
      if ((v18 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v17, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        uint64_t v20 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v20, v19);
        return (char *)swift_willThrow();
      }
      __break(1u);
    }
    else if ((v18 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v17, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v20 = v32;
      goto LABEL_17;
    }
    __break(1u);
  }
  uint64_t result = (char *)specialized FixedWidthInteger.init(_:)(v33[0], v33[1], v34);
  if ((v23 & 1) == 0) {
    return result;
  }
LABEL_14:
  uint64_t v24 = static String._fromUTF8Repairing(_:)();
  uint64_t v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v27 = v24;
  *(void *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(unsigned char *)(v27 + 48) = 11;
  return (char *)swift_willThrow();
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  if (a5)
  {
    uint64_t result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      double v14 = result;
      __int16 v15 = v13;
      uint64_t result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v13 & 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if (v16)
      {
        if ((v15 & 0x100) != 0)
        {
          uint64_t v17 = static String._fromUTF8Repairing(_:)();
          uint64_t v19 = v18;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v20 = v17;
          *(void *)(v20 + 8) = v19;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(unsigned char *)(v20 + 48) = 11;
          return (char *)swift_willThrow();
        }
        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(uint64_t))specialized Int128.init<A>(exactly:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  else
  {
    uint64_t result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v6)
    {
      double v14 = result;
      uint64_t result = (char *)specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if (v21) {
        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(uint64_t))specialized Int128.init<A>(exactly:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  return result;
}

{
  uint64_t v6;
  char *result;
  __int16 v13;
  char *v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  if (a5)
  {
    uint64_t result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      double v14 = result;
      __int16 v15 = v13;
      uint64_t result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v13 & 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if (v16)
      {
        if ((v15 & 0x100) != 0)
        {
          uint64_t v17 = static String._fromUTF8Repairing(_:)();
          uint64_t v19 = v18;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v20 = v17;
          *(void *)(v20 + 8) = v19;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(unsigned char *)(v20 + 48) = 11;
          return (char *)swift_willThrow();
        }
        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(uint64_t))specialized UInt128.init<A>(exactly:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  else
  {
    uint64_t result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v6)
    {
      double v14 = result;
      uint64_t result = (char *)specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if (v21) {
        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(uint64_t))specialized UInt128.init<A>(exactly:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  return result;
}

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  double v12 = _stringshims_strtod_l(a2, &v26, 0);
  __int16 v13 = &a2[a3];
  if (v26) {
    BOOL v14 = v13 == v26;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    double v19 = v12;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v26, v12) || (v27 & 1) != 0) {
      goto LABEL_14;
    }
    if (fabs(v19) < 9.00719925e15) {
      return v26;
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v28);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v28, (uint64_t)v31);
  if (v33 == 1)
  {
    uint64_t v15 = v13 - a6;
    int64_t v16 = (a6 - a2) | (v13 - a6);
    if (a1)
    {
      if ((v16 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v15, a4, a5, (uint64_t)v29);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        uint64_t v18 = v29;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v18, v17);
        return (char *)swift_willThrow();
      }
      __break(1u);
    }
    else if ((v16 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v15, a4, a5, (uint64_t)v30);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v18 = v30;
      goto LABEL_17;
    }
    __break(1u);
  }
  uint64_t result = (char *)specialized FixedWidthInteger.init(_:)(v31[0], v31[1], v32);
  if ((v21 & 1) == 0) {
    return result;
  }
LABEL_14:
  uint64_t v22 = static String._fromUTF8Repairing(_:)();
  uint64_t v24 = v23;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v25 = v22;
  *(void *)(v25 + 8) = v24;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(unsigned char *)(v25 + 48) = 11;
  return (char *)swift_willThrow();
}

uint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, uint64_t (*a7)(char **), uint64_t (*a8)(void, void, void))
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  char v29 = 0;
  double v15 = _stringshims_strtod_l(a2, &v29, 0);
  int64_t v16 = &a2[a3];
  if (v29) {
    BOOL v17 = v16 == v29;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    double v22 = v15;
    if (a7(&v29) & 1) == 0 || (BYTE1(v29)) {
      goto LABEL_14;
    }
    if (fabs(v22) < 9.00719925e15) {
      return v29;
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    uint64_t v18 = v16 - a6;
    int64_t v19 = (a6 - a2) | (v16 - a6);
    if (a1)
    {
      if ((v19 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        char v21 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v21, v20);
        return swift_willThrow();
      }
      __break(1u);
    }
    else if ((v19 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      char v21 = v32;
      goto LABEL_17;
    }
    __break(1u);
  }
  uint64_t result = a8(v33[0], v33[1], v34);
  if ((result & 0x100) == 0) {
    return result;
  }
LABEL_14:
  uint64_t v24 = static String._fromUTF8Repairing(_:)();
  uint64_t v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v27 = v24;
  *(void *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(unsigned char *)(v27 + 48) = 11;
  return swift_willThrow();
}

{
  double v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unsigned char *v21;
  double v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  unsigned char v30[40];
  unsigned char v31[56];
  unsigned char v32[56];
  void v33[2];
  unsigned int v34;
  char v35;
  uint64_t v36;

  uint64_t v36 = *MEMORY[0x1E4F143B8];
  char v29 = 0;
  double v15 = _stringshims_strtod_l(a2, &v29, 0);
  int64_t v16 = &a2[a3];
  if (v29) {
    BOOL v17 = v16 == v29;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    double v22 = v15;
    if (a7(&v29) & 1) == 0 || (BYTE2(v29)) {
      goto LABEL_14;
    }
    if (fabs(v22) < 9.00719925e15) {
      return (unsigned __int16)v29;
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    uint64_t v18 = v16 - a6;
    int64_t v19 = (a6 - a2) | (v16 - a6);
    if (a1)
    {
      if ((v19 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        char v21 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v21, v20);
        return swift_willThrow();
      }
      __break(1u);
    }
    else if ((v19 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      char v21 = v32;
      goto LABEL_17;
    }
    __break(1u);
  }
  uint64_t result = a8(v33[0], v33[1], v34);
  if ((result & 0x10000) == 0) {
    return result;
  }
LABEL_14:
  uint64_t v24 = static String._fromUTF8Repairing(_:)();
  uint64_t v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v27 = v24;
  *(void *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(unsigned char *)(v27 + 48) = 11;
  return swift_willThrow();
}

{
  double v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unsigned char *v21;
  double v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  unsigned char v30[40];
  unsigned char v31[56];
  unsigned char v32[56];
  void v33[2];
  unsigned int v34;
  char v35;
  uint64_t v36;

  uint64_t v36 = *MEMORY[0x1E4F143B8];
  char v29 = 0;
  double v15 = _stringshims_strtod_l(a2, &v29, 0);
  int64_t v16 = &a2[a3];
  if (v29) {
    BOOL v17 = v16 == v29;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    double v22 = v15;
    if (a7(&v29) & 1) == 0 || (BYTE4(v29)) {
      goto LABEL_14;
    }
    if (fabs(v22) < 9.00719925e15) {
      return v29;
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    uint64_t v18 = v16 - a6;
    int64_t v19 = (a6 - a2) | (v16 - a6);
    if (a1)
    {
      if ((v19 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        char v21 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v21, v20);
        return swift_willThrow();
      }
      __break(1u);
    }
    else if ((v19 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      char v21 = v32;
      goto LABEL_17;
    }
    __break(1u);
  }
  uint64_t result = a8(v33[0], v33[1], v34);
  if ((result & 0x100000000) == 0) {
    return result;
  }
LABEL_14:
  uint64_t v24 = static String._fromUTF8Repairing(_:)();
  uint64_t v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v27 = v24;
  *(void *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(unsigned char *)(v27 + 48) = 11;
  return swift_willThrow();
}

uint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, uint64_t (*a7)(uint64_t), uint64_t (*a8)(void, void, void))
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unsigned int v32 = 0;
  double v16 = _stringshims_strtod_l(a2, &v32, 0);
  BOOL v17 = &a2[a3];
  if (v32) {
    BOOL v18 = v17 == v32;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    double v19 = v16;
    uint64_t result = a7(v15);
    if (v21) {
      goto LABEL_13;
    }
    if (fabs(v19) < 9.00719925e15) {
      return result;
    }
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v33);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v33, (uint64_t)v36);
  if (v38 == 1)
  {
    uint64_t v22 = v17 - a6;
    int64_t v23 = (a6 - a2) | (v17 - a6);
    if (a1)
    {
      if ((v23 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v22, a4, a5, (uint64_t)v34);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        uint64_t v25 = v34;
LABEL_16:
        outlined init with take of JSONError((uint64_t)v25, v24);
        return swift_willThrow();
      }
      __break(1u);
    }
    else if ((v23 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v22, a4, a5, (uint64_t)v35);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v25 = v35;
      goto LABEL_16;
    }
    __break(1u);
  }
  uint64_t result = a8(v36[0], v36[1], v37);
  if ((v26 & 1) == 0) {
    return result;
  }
LABEL_13:
  uint64_t v27 = static String._fromUTF8Repairing(_:)();
  uint64_t v29 = v28;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v30 = v27;
  *(void *)(v30 + 8) = v29;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(unsigned char *)(v30 + 48) = 11;
  return swift_willThrow();
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t)@<X4>, unint64_t a6@<X5>, uint64_t (*a7)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t)@<X6>, uint64_t (*a8)(unint64_t, uint64_t)@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v9 + 16), *(unsigned char *)(v9 + 17), a5, a6, a7, a8);
  if (!v10)
  {
    *a9 = result;
    a9[1] = v13;
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      return (*(uint64_t (**)(void))(v2 + 24))();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void *assignWithCopy for JSONDecoderImpl.KeyedContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for JSONDecoderImpl.KeyedContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for JSONDecoderImpl.UnkeyedContainer()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for JSONDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for JSONDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for JSONDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

void *type metadata accessor for JSONDecoderImpl.UnkeyedContainer()
{
  return &unk_1ECA369A0;
}

uint64_t sub_181ED19C4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, void))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:), (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, void))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:), (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = a5(a1, a2, a3, a4, *(unsigned __int8 *)(v6 + 32), *(unsigned __int8 *)(v6 + 33));
  if (!v7)
  {
    *a6 = result;
    a6[1] = v10;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(char *, uint64_t, void)@<X4>, uint64_t (*a6)(char *, uint64_t)@<X5>, uint64_t (*a7)(char **)@<X6>, uint64_t (*a8)(void, void, void)@<X7>, unsigned char *a9@<X8>)
{
  uint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v9 + 32), *(unsigned char *)(v9 + 33), a5, a6, a7, a8);
  if (!v10) {
    *a9 = result;
  }
  return result;
}

unint64_t partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72));
  if (!v4)
  {
    *(_DWORD *)a3 = result;
    *(unsigned char *)(a3 + 4) = BYTE4(result) & 1;
  }
  return result;
}

void partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  float v8 = specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v5 + 32), *(unsigned char *)(v5 + 33));
  if (!v6) {
    *a5 = v8;
  }
}

void *closure #1 in JSONMap.withBuffer<A>(for:perform:)specialized partial apply@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(a1, a2);
}

void *partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, a2);
}

void *closure #1 in JSONMap.withBuffer<A>(for:perform:)specialized partial apply@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(a1, a2);
}

uint64_t closure #1 in JSONDecoder._decode<A>(_:from:)partial apply(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in JSONDecoder._decode<A>(_:from:)(a1, a2);
}

unint64_t closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)partial apply@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return partial apply for closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(a1, a2, a3, a4, a5);
}

id Date.description(with:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *v1);
  if (v3)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 488))(ObjectType, v2);
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(v4, sel_descriptionWithLocale_, v6);

  swift_unknownObjectRelease();
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(unsigned char *), uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a4 >> 62;
  uint64_t v8 = 0;
  uint64_t v31 = (int)a3;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v8 = (int)a3;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a3 + 16);
      break;
    default:
      break;
  }
  uint64_t v32 = (uint64_t)a3 >> 32;
  unint64_t v29 = a3 >> 16;
  unint64_t v30 = a3 >> 8;
  unint64_t v27 = HIDWORD(a3);
  unint64_t v28 = a3 >> 24;
  unint64_t v25 = HIWORD(a3);
  unint64_t v26 = a3 >> 40;
  unint64_t v23 = a4 >> 8;
  unint64_t v24 = HIBYTE(a3);
  unint64_t v21 = a4 >> 24;
  unint64_t v22 = a4 >> 16;
  unint64_t v19 = a4 >> 40;
  unint64_t v20 = HIDWORD(a4);
  uint64_t v18 = v8;
  while (2)
  {
    uint64_t v9 = BYTE6(a4);
    switch((int)v5)
    {
      case 0:
        goto LABEL_8;
      case 1:
        uint64_t v9 = v32;
        goto LABEL_8;
      case 2:
        uint64_t v9 = *(void *)(a3 + 24);
LABEL_8:
        if (v8 != v9)
        {
          if (v5)
          {
            if (v5 == 1)
            {
              if (v8 < v31 || v8 >= v32)
              {
                __break(1u);
LABEL_33:
                __break(1u);
LABEL_34:
                __break(1u);
LABEL_35:
                __break(1u);
LABEL_36:
                __break(1u);
LABEL_37:
                __break(1u);
LABEL_38:
                __break(1u);
LABEL_39:
                __break(1u);
LABEL_40:
                __break(1u);
              }
              uint64_t v10 = *(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
              if (!v10) {
                goto LABEL_39;
              }
              uint64_t v11 = *(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
              BOOL v12 = __OFSUB__(v8, v11);
              uint64_t v13 = v8 - v11;
              if (v12) {
                goto LABEL_35;
              }
            }
            else
            {
              if (v8 < *(void *)(a3 + 16)) {
                goto LABEL_34;
              }
              if (v8 >= *(void *)(a3 + 24)) {
                goto LABEL_36;
              }
              uint64_t v10 = *(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
              if (!v10) {
                goto LABEL_40;
              }
              uint64_t v15 = *(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
              BOOL v12 = __OFSUB__(v8, v15);
              uint64_t v13 = v8 - v15;
              if (v12) {
                goto LABEL_37;
              }
            }
            char v14 = *(unsigned char *)(v10 + v13);
          }
          else
          {
            if (v8 >= BYTE6(a4)) {
              goto LABEL_33;
            }
            v34[0] = a3;
            v34[1] = v30;
            v34[2] = v29;
            void v34[3] = v28;
            v34[4] = v27;
            v34[5] = v26;
            v34[6] = v25;
            v34[7] = v24;
            v34[8] = a4;
            v34[9] = v23;
            v34[10] = v22;
            v34[11] = v21;
            v34[12] = v20;
            v34[13] = v19;
            char v14 = v34[v8];
          }
          v34[0] = v14;
          char v16 = a1(v34);
          if (v4 || (v16 & 1) != 0) {
            return v8;
          }
          ++v8;
          continue;
        }
        return 0;
      case 3:
        if (v18) {
          goto LABEL_38;
        }
        return 0;
      default:
        JUMPOUT(0);
    }
  }
}

void specialized MutableCollection.swapAt(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1 == a2) {
    return;
  }
  uint64_t v5 = *v2;
  unint64_t v4 = v2[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (int)v5;
      uint64_t v10 = v5 >> 32;
      if (v10 <= a1 || v9 > a1) {
        goto LABEL_33;
      }
      uint64_t v12 = v4 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v4 = *(void *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v4)
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      uint64_t v13 = *(void *)(v12 + 40);
      uint64_t v14 = a1 - v13;
      if (__OFSUB__(a1, v13)) {
        goto LABEL_36;
      }
      if (v10 <= a2 || v9 > a2) {
        goto LABEL_38;
      }
      uint64_t v5 = a2 - v13;
      if (!__OFSUB__(a2, v13)) {
        goto LABEL_28;
      }
      __break(1u);
LABEL_21:
      uint64_t v16 = *(void *)(v5 + 16);
      if (v16 > a1) {
        goto LABEL_34;
      }
      uint64_t v17 = *(void *)(v5 + 24);
      if (v17 > a1)
      {
        uint64_t v18 = v4 & 0x3FFFFFFFFFFFFFFFLL;
        unint64_t v4 = *(void *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v4)
        {
          uint64_t v19 = *(void *)(v18 + 40);
          uint64_t v14 = a1 - v19;
          if (__OFSUB__(a1, v19))
          {
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          if (v16 > a2)
          {
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          if (v17 <= a2)
          {
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
          }
          uint64_t v5 = a2 - v19;
          if (__OFSUB__(a2, v19)) {
            goto LABEL_42;
          }
LABEL_28:
          char v7 = *(unsigned char *)(v4 + v14);
          char v8 = *(unsigned char *)(v4 + v5);
          goto LABEL_29;
        }
LABEL_45:
        __break(1u);
        JUMPOUT(0x181ED4338);
      }
      goto LABEL_37;
    case 2uLL:
      goto LABEL_21;
    case 3uLL:
      __break(1u);
      goto LABEL_44;
    default:
      if (BYTE6(v4) <= a1)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      LOWORD(v20) = *v2;
      BYTE2(v20) = BYTE2(v5);
      BYTE3(v20) = BYTE3(v5);
      BYTE4(v20) = BYTE4(v5);
      BYTE5(v20) = BYTE5(v5);
      BYTE6(v20) = BYTE6(v5);
      HIBYTE(v20) = HIBYTE(v5);
      __int16 v21 = v4;
      char v22 = BYTE2(v4);
      char v23 = BYTE3(v4);
      char v24 = BYTE4(v4);
      char v25 = BYTE5(v4);
      if (BYTE6(v4) <= a2)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      char v7 = *((unsigned char *)&v20 + a1);
      uint64_t v20 = v5;
      __int16 v21 = v4;
      char v22 = BYTE2(v4);
      char v23 = BYTE3(v4);
      char v24 = BYTE4(v4);
      char v25 = BYTE5(v4);
      char v8 = *((unsigned char *)&v20 + a2);
LABEL_29:
      Data._Representation.subscript.setter(v8, a1);
      Data._Representation.subscript.setter(v7, a2);
      return;
  }
}

uint64_t Data.init()()
{
  return 0;
}

void Data.append(_:count:)(unsigned char *a1, uint64_t a2)
{
  if (a2) {
    Data._Representation.append(contentsOf:)(a1, &a1[a2]);
  }
}

uint64_t specialized RangeReplaceableCollection.append(_:)(char a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  uint64_t v10 = &protocol witness table for <A> CollectionOfOne<A>;
  LOBYTE(v8[0]) = a1;
  char __src = *(unsigned char *)__swift_project_boxed_opaque_existential_1(v8, v9);
  Data._Representation.replaceSubrange(_:with:count:)(v5, v5, &__src, 1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t Data.encode(to:)(void *a1, uint64_t a2, unint64_t a3)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  specialized Data._Representation.withUnsafeBytes<A>(_:)(a2, a3, (uint64_t)v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18[0] = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)v18 - v14;
  v18[4] = a4;
  v18[5] = a5;
  v18[1] = a2;
  v18[6] = a2;
  v18[7] = a3;
  dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  if (v19 != 1) {
    return v18[10];
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  uint64_t v16 = dispatch thunk of Sequence._copyContents(initializing:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  (*(void (**)(char *, uint64_t))(v18[0] + 8))(v15, AssociatedTypeWitness);
  if (v19 != 1)
  {
    __break(1u);
    return v18[10];
  }
  return v16;
}

uint64_t specialized RangeReplaceableCollection.remove(at:)(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v1;
  unint64_t v2 = v1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)v3;
      uint64_t v6 = v3 >> 32;
      if (v5 == v6) {
        goto LABEL_22;
      }
      if (v5 > a1) {
        goto LABEL_25;
      }
      if (v6 <= a1) {
        goto LABEL_27;
      }
      uint64_t v7 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v2 = *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v2)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      uint64_t v8 = *(void *)(v7 + 40);
      BOOL v9 = __OFSUB__(a1, v8);
      uint64_t v3 = a1 - v8;
      if (!v9) {
        goto LABEL_19;
      }
      __break(1u);
LABEL_12:
      uint64_t v11 = *(void *)(v3 + 16);
      uint64_t v10 = *(void *)(v3 + 24);
      if (v11 == v10) {
        goto LABEL_23;
      }
      if (v11 <= a1 && v10 > a1)
      {
        uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
        unint64_t v2 = *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v2)
        {
          uint64_t v14 = *(void *)(v13 + 40);
          BOOL v9 = __OFSUB__(a1, v14);
          uint64_t v3 = a1 - v14;
          if (!v9)
          {
LABEL_19:
            uint64_t v4 = *(unsigned __int8 *)(v2 + v3);
            goto LABEL_20;
          }
LABEL_28:
          __break(1u);
        }
LABEL_31:
        __break(1u);
        JUMPOUT(0x181ED4908);
      }
      goto LABEL_26;
    case 2uLL:
      goto LABEL_12;
    case 3uLL:
      __break(1u);
      goto LABEL_30;
    default:
      if (!BYTE6(v2))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      if (BYTE6(v2) <= a1)
      {
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      __int16 v16 = *v1;
      char v17 = BYTE2(v3);
      char v18 = BYTE3(v3);
      char v19 = BYTE4(v3);
      char v20 = BYTE5(v3);
      char v21 = BYTE6(v3);
      char v22 = HIBYTE(v3);
      __int16 v23 = v2;
      char v24 = BYTE2(v2);
      char v25 = BYTE3(v2);
      char v26 = BYTE4(v2);
      char v27 = BYTE5(v2);
      uint64_t v4 = *((unsigned __int8 *)&v16 + a1);
LABEL_20:
      Data._Representation.replaceSubrange(_:with:count:)(a1, a1 + 1, 0, 0);
      return v4;
  }
}

uint64_t specialized RangeReplaceableCollection.remove(at:)()
{
  uint64_t result = static BigString.Index.== infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v2 = (_OWORD *)*v0;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  long long v3 = v2[2];
  long long v39 = v2[1];
  long long v40 = v3;
  long long v41 = v2[3];
  BigString.unicodeScalars.getter();
  unsigned int v4 = BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v25);
  swift_retain();
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unsigned int v24 = v4;
  uint64_t v5 = v2 + 1;
  long long v6 = v2[2];
  long long v36 = v2[1];
  long long v37 = v6;
  long long v38 = v2[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(after:)();
  outlined release of Locale((uint64_t)v26);
  char v7 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if (v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v8 = v2[2];
    long long v33 = *v5;
    long long v34 = v8;
    long long v35 = v2[3];
    BigString.unicodeScalars.getter();
    uint64_t v9 = BigString.UnicodeScalarView.index(roundingDown:)();
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    outlined release of Locale((uint64_t)v27);
    long long v16 = v5[1];
    long long v30 = *v5;
    long long v31 = v16;
    long long v32 = v5[2];
    BigString.unicodeScalars.getter();
    uint64_t v17 = BigString.UnicodeScalarView.index(roundingDown:)();
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    outlined release of Locale((uint64_t)v28);
    v29[0] = v9;
    v29[1] = v11;
    _OWORD v29[2] = v13;
    _OWORD v29[3] = v15;
    v29[4] = v17;
    v29[5] = v19;
    v29[6] = v21;
    v29[7] = v23;
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v29);
    return v24;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = static BigString.Index.== infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_12;
  }
  long long v8 = (_OWORD *)*v4;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  uint64_t v50 = a4;
  if ((result & 1) == 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  long long v9 = v8[1];
  long long v10 = v8[3];
  v57[1] = v8[2];
  v57[2] = v10;
  v57[0] = v9;
  long long v11 = v8[1];
  v58[1] = v8[2];
  v58[2] = v10;
  v58[0] = v11;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v58, (uint64_t)v59);
  outlined retain of Locale((uint64_t)v59);
  uint64_t v47 = BigString.subscript.getter();
  outlined release of Locale((uint64_t)v57);
  swift_retain();
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v12 = v8 + 1;
  long long v13 = v8[1];
  long long v14 = v8[3];
  v56[1] = v8[2];
  v56[2] = v14;
  v56[0] = v13;
  long long v15 = v8[1];
  v60[1] = v8[2];
  v60[2] = v14;
  v60[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v60, (uint64_t)v61);
  outlined retain of Locale((uint64_t)v61);
  uint64_t v16 = BigString.index(after:)();
  uint64_t v17 = a1;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  outlined release of Locale((uint64_t)v56);
  char v24 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v48 = v23;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v25 = v19;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v26 = v16;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v27 = *v12;
    long long v28 = v12[2];
    v55[1] = v12[1];
    void v55[2] = v28;
    v55[0] = v27;
    long long v29 = *v12;
    v62[1] = v12[1];
    v62[2] = v28;
    v62[0] = v29;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v62, (uint64_t)v63);
    outlined retain of Locale((uint64_t)v63);
    uint64_t v52 = MEMORY[0x185301530](v17, a2, a3, v50);
    uint64_t v31 = v30;
    uint64_t v32 = v21;
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    outlined release of Locale((uint64_t)v55);
    long long v37 = *v12;
    long long v38 = v12[2];
    v54[1] = v12[1];
    v54[2] = v38;
    v54[0] = v37;
    long long v39 = *v12;
    v64[1] = v12[1];
    v64[2] = v38;
    v64[0] = v39;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v64, (uint64_t)v65);
    outlined retain of Locale((uint64_t)v65);
    uint64_t v40 = MEMORY[0x185301530](v26, v25, v32, v48);
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    outlined release of Locale((uint64_t)v54);
    v53[0] = v52;
    v53[1] = v31;
    v53[2] = v34;
    void v53[3] = v36;
    v53[4] = v40;
    v53[5] = v42;
    v53[6] = v44;
    v53[7] = v46;
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v53);
    return v47;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeAll(keepingCapacity:)(char a1)
{
  unint64_t v2 = v1;
  if (a1)
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0)
        {
          unsigned int v4 = (_OWORD *)*v1;
          long long v5 = *(_OWORD *)(*v1 + 32);
          long long v62 = *(_OWORD *)(*v1 + 16);
          long long v63 = v5;
          long long v64 = v4[3];
          BigString.unicodeScalars.getter();
          uint64_t v6 = BigString.UnicodeScalarView.index(roundingDown:)();
          uint64_t v8 = v7;
          uint64_t v10 = v9;
          uint64_t v12 = v11;
          outlined release of Locale((uint64_t)v67);
          long long v13 = v4[2];
          long long v70 = v4[1];
          long long v71 = v13;
          long long v72 = v4[3];
          BigString.unicodeScalars.getter();
          uint64_t v14 = BigString.UnicodeScalarView.index(roundingDown:)();
          uint64_t v16 = v15;
          uint64_t v18 = v17;
          uint64_t v20 = v19;
          outlined release of Locale((uint64_t)v68);
          v59[0] = v6;
          v59[1] = v8;
          void v59[2] = v10;
          v59[3] = v12;
          v59[4] = v14;
          uint64_t v59[5] = v16;
          v59[6] = v18;
          v59[7] = v20;
          return specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v59);
        }
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_release();
  BigString.init()();
  v59[0] = 0;
  MEMORY[0x185309530](v59, 8);
  uint64_t v21 = v59[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v22 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  long long v23 = v56[0];
  long long v24 = v56[1];
  *(_OWORD *)(v22 + 16) = v56[0];
  *(_OWORD *)(v22 + 32) = v24;
  long long v25 = v57;
  *(_OWORD *)(v22 + 48) = v57;
  *(void *)(v22 + 64) = 0;
  *(void *)(v22 + 72) = 0;
  *(void *)(v22 + 80) = 0;
  *(void *)(v22 + 88) = v21;
  v60[0] = v23;
  v60[1] = v24;
  v60[2] = v25;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v60, (uint64_t)v61);
  outlined retain of Locale((uint64_t)v61);
  uint64_t v26 = BigString.startIndex.getter();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  outlined release of Locale((uint64_t)v56);
  long long v33 = *(_OWORD *)(v22 + 32);
  v68[0] = *(_OWORD *)(v22 + 16);
  v68[1] = v33;
  long long v69 = *(_OWORD *)(v22 + 48);
  long long v70 = v68[0];
  long long v71 = v33;
  long long v72 = v69;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v70, (uint64_t)v73);
  outlined retain of Locale((uint64_t)v73);
  uint64_t v34 = BigString.endIndex.getter();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  outlined release of Locale((uint64_t)v68);
  *(void *)&long long v62 = v26;
  *((void *)&v62 + 1) = v28;
  *(void *)&long long v63 = v30;
  *((void *)&v63 + 1) = v32;
  *(void *)&long long v64 = v34;
  *((void *)&v64 + 1) = v36;
  uint64_t v65 = v38;
  uint64_t v66 = v40;
  long long v41 = *(_OWORD *)(v22 + 32);
  v67[0] = *(_OWORD *)(v22 + 16);
  v67[1] = v41;
  v67[2] = *(_OWORD *)(v22 + 48);
  swift_retain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v58);
  uint64_t v42 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v49 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  outlined release of Locale((uint64_t)v59);
  uint64_t result = swift_release();
  uint64_t *v2 = v22;
  v2[1] = v42;
  v2[2] = v44;
  v2[3] = v46;
  v2[4] = v48;
  v2[5] = v49;
  v2[6] = v51;
  v2[7] = v53;
  unsigned char v2[8] = v55;
  v2[9] = 0;
  return result;
}

void specialized RangeReplaceableCollection.removeAll(keepingCapacity:)(char a1)
{
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  if (a1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    switch(v3 >> 62)
    {
      case 1uLL:
        uint64_t v4 = (int)v2;
        uint64_t v5 = v2 >> 32;
        goto LABEL_7;
      case 2uLL:
        uint64_t v4 = *(void *)(v2 + 16);
        uint64_t v5 = *(void *)(v2 + 24);
LABEL_7:
        if (v5 < v4)
        {
          __break(1u);
          JUMPOUT(0x181ED5488);
        }
        return;
      case 3uLL:
        break;
      default:
        uint64_t v4 = 0;
        uint64_t v5 = BYTE6(v3);
        break;
    }
    Data._Representation.replaceSubrange(_:with:count:)(v4, v5, 0, 0);
  }
  else
  {
    outlined consume of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
    *(_OWORD *)uint64_t v1 = xmmword_1821115B0;
  }
}

void specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
}

{
  uint64_t __src;
  __int16 v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x1E4F143B8];
  char __src = a1;
  unint64_t v3 = a2;
  uint64_t v4 = BYTE2(a2);
  uint64_t v5 = BYTE3(a2);
  uint64_t v6 = BYTE4(a2);
  uint64_t v7 = BYTE5(a2);
  _BPlistEncodingFormat.Writer.write(_:)((char *)&__src, BYTE6(a2));
}

uint64_t _s10Foundation4DataV06InlineB0V15withUnsafeBytesyxxSWKXEKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0J4ViewVys0O0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, void))
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1;
  __int16 v5 = a2;
  char v6 = BYTE2(a2);
  char v7 = BYTE3(a2);
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  return a3(&v4, BYTE6(a2));
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t value = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  size_t v4 = BYTE6(a2);
  char v11 = BYTE4(a2);
  char v12 = BYTE5(a2);
  uint64_t v5 = String.utf8CString.getter();
  fsetxattr(a3, (const char *)(v5 + 32), &value, v4, 0, 0);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t *, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  __int16 v6 = a4;
  char v7 = BYTE2(a4);
  char v8 = BYTE3(a4);
  char v9 = BYTE4(a4);
  char v10 = BYTE5(a4);
  return a1(&v5, (char *)&v5 + BYTE6(a4));
}

uint64_t Data.InlineSlice.range.getter(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t result = (int)result;
  if (v1 >> 32 < (int)result) {
    __break(1u);
  }
  return result;
}

uint64_t Data.LargeSlice.range.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void Data.append<A>(_:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (!a1)
    {
      size_t v4 = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(*(void *)(a3 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v3) >> 64 == (a2 * v3) >> 63)
    {
      size_t v4 = &a1[a2 * v3];
LABEL_5:
      Data._Representation.append(contentsOf:)(a1, v4);
      return;
    }
    __break(1u);
  }
}

uint64_t Data.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  double v12 = MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v14 + 16))(&v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)], v15, v16, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v25, (uint64_t)v27);
    uint64_t v17 = v27[4];
    uint64_t v18 = __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    double v19 = MEMORY[0x1F4188790](v18);
    *(void *)&v24[-32] = v6;
    *(void *)&v24[-24] = a1;
    *(void *)&v24[-16] = a2;
    (*(void (**)(void (*)(char *, uint64_t), double))(v17 + 8))(_s10Foundation4DataV15replaceSubrange_4withySnySiG_xtSlRzs5UInt8V7ElementRtzlFySWXEfU_TA_0, v19);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    uint64_t v21 = outlined destroy of ContiguousBytes?((uint64_t)v25);
    MEMORY[0x1F4188790](v21);
    *(void *)&v24[-32] = v6;
    *(void *)&v24[-24] = a1;
    *(void *)&v24[-16] = a2;
    uint64_t result = dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
    if (LOBYTE(v27[0]) == 1)
    {
      uint64_t v22 = dispatch thunk of Collection.count.getter();
      MEMORY[0x1F4188790](v22);
      *(void *)&v24[-64] = a4;
      *(void *)&v24[-56] = a5;
      *(void *)&v24[-48] = a3;
      *(void *)&v24[-40] = v6;
      *(void *)&v24[-32] = a1;
      *(void *)&v24[-24] = a2;
      *(void *)&v24[-16] = v23;
      return _withStackOrHeapBuffer(capacity:_:)(v23, (void (*)(uint64_t, uint64_t))partial apply for closure #3 in Data.replaceSubrange<A>(_:with:));
    }
  }
  return result;
}

uint64_t Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v48[5] = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v10 = (char *)&v43 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v43 - v13;
  double v16 = MEMORY[0x1F4188790](v15);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(__src, (uint64_t)v48);
    uint64_t v19 = v48[4];
    uint64_t v20 = __swift_project_boxed_opaque_existential_1(v48, v48[3]);
    double v21 = MEMORY[0x1F4188790](v20);
    *(&v43 - 2) = v3;
    (*(void (**)(void (*)(unsigned char *, unsigned char *), double))(v19 + 8))(partial apply for closure #1 in Data.append<A>(contentsOf:), v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  }
  uint64_t v43 = TupleTypeMetadata2;
  uint64_t v45 = v11;
  uint64_t v47 = 0;
  memset(__src, 0, sizeof(__src));
  uint64_t v23 = outlined destroy of ContiguousBytes?((uint64_t)__src);
  MEMORY[0x1F4188790](v23);
  *(&v43 - 2) = v3;
  uint64_t result = dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  if (LOBYTE(v48[0]) == 1)
  {
    uint64_t v24 = dispatch thunk of Sequence.underestimatedCount.getter();
    uint64_t v25 = *(void *)v3;
    unint64_t v26 = *(void *)(v3 + 8);
    uint64_t v27 = v24;
    uint64_t v28 = 0;
    uint64_t v44 = 0;
    switch(v26 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v25), v25)) {
          goto LABEL_41;
        }
        uint64_t v44 = HIDWORD(v25) - (int)v25;
        uint64_t v28 = v25 >> 32;
LABEL_9:
        uint64_t v31 = v28 + v27;
        if (__OFADD__(v28, v27))
        {
          __break(1u);
        }
        else if (v31 >= v28)
        {
          if ((v28 & 0x8000000000000000) == 0)
          {
            uint64_t v32 = v27;
            Data._Representation.resetBytes(in:)(v28, v31);
            MEMORY[0x1F4188790](v33);
            *(&v43 - 6) = a2;
            *(&v43 - 5) = a3;
            *(&v43 - 4) = v44;
            *(&v43 - 3) = v32;
            *(&v43 - 2) = a1;
            Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #3 in Data.append<A>(contentsOf:));
            uint64_t v34 = *(void *)&v10[*(int *)(v43 + 48)];
            (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v14, v10, AssociatedTypeWitness);
            if (v34 == v32)
            {
              swift_getAssociatedConformanceWitness();
              memset(v48, 0, 15);
              dispatch thunk of IteratorProtocol.next()();
              if (BYTE1(__src[0]) != 1)
              {
                uint64_t v35 = 0;
                do
                {
                  *((unsigned char *)v48 + v35++) = __src[0];
                  BYTE6(v48[1]) = v35;
                  if (v35 == 14)
                  {
                    *(void *)&__src[0] = v48[0];
                    DWORD2(__src[0]) = v48[1];
                    WORD6(__src[0]) = WORD2(v48[1]);
                    Data._Representation.append(contentsOf:)(__src, (unsigned char *)__src + 14);
                    uint64_t v35 = 0;
                    BYTE6(v48[1]) = 0;
                  }
                  dispatch thunk of IteratorProtocol.next()();
                }
                while (BYTE1(__src[0]) != 1);
                if (v35)
                {
                  *(void *)&__src[0] = v48[0];
                  DWORD2(__src[0]) = v48[1];
                  WORD6(__src[0]) = WORD2(v48[1]);
                  Data._Representation.append(contentsOf:)(__src, (unsigned char *)__src + v35);
                  BYTE6(v48[1]) = 0;
                }
              }
              return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v14, AssociatedTypeWitness);
            }
            uint64_t v37 = *(void *)v3;
            unint64_t v36 = *(void *)(v3 + 8);
            switch(v36 >> 62)
            {
              case 1uLL:
                uint64_t v38 = (int)v37;
                break;
              case 2uLL:
                uint64_t v38 = *(void *)(v37 + 16);
                break;
              default:
                outlined consume of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
                uint64_t v38 = 0;
                break;
            }
            BOOL v39 = __OFADD__(v38, v44);
            uint64_t v40 = v38 + v44;
            if (!v39)
            {
              uint64_t v41 = v40 + v34;
              if (!__OFADD__(v40, v34))
              {
                switch(v36 >> 62)
                {
                  case 1uLL:
                    uint64_t v42 = v37 >> 32;
                    break;
                  case 2uLL:
                    uint64_t v42 = *(void *)(v37 + 24);
                    break;
                  case 3uLL:
                    outlined consume of Data._Representation(v37, v36);
                    uint64_t v42 = 0;
                    break;
                  default:
                    outlined consume of Data._Representation(v37, v36);
                    uint64_t v42 = BYTE6(v36);
                    break;
                }
                if (v42 >= v41)
                {
                  Data._Representation.replaceSubrange(_:with:count:)(v41, v42, 0, 0);
                  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v14, AssociatedTypeWitness);
                }
LABEL_40:
                __break(1u);
LABEL_41:
                __break(1u);
LABEL_42:
                __break(1u);
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        __break(1u);
        goto LABEL_37;
      case 2uLL:
        uint64_t v30 = v25 + 16;
        uint64_t v29 = *(void *)(v25 + 16);
        uint64_t v28 = *(void *)(v30 + 8);
        uint64_t v44 = v28 - v29;
        if (!__OFSUB__(v28, v29)) {
          goto LABEL_9;
        }
        goto LABEL_42;
      case 3uLL:
        goto LABEL_9;
      default:
        uint64_t v28 = BYTE6(v26);
        uint64_t v44 = BYTE6(v26);
        goto LABEL_9;
    }
  }
  return result;
}

void *Data.init(from:)(void *a1)
{
  return specialized Data.init(from:)(a1);
}

uint64_t __DataInvokeDeallocatorVirtualMemory(_:_:)(mach_vm_address_t a1, mach_vm_size_t a2)
{
  vm_map_t v4 = _platform_mach_task_self();
  if ((a2 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_5;
  }
  uint64_t result = mach_vm_deallocate(v4, a1, a2);
  if (result)
  {
LABEL_5:
    _StringGuts.grow(_:)(55);
    v6._object = (void *)0x80000001823B3590;
    v6._uint64_t countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
    v7._uint64_t countAndFlagsBits = 8236;
    v7._object = (void *)0xE200000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0x64656C6961662029;
    v9._object = (void *)0xE800000000000000;
    String.append(_:)(v9);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _withStackOrHeapBuffer(capacity:_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1 < 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    if ((unint64_t)a1 > 0x20)
    {
      uint64_t v4 = swift_slowAlloc();
      a2(v4, a1);
      JUMPOUT(0x185309510);
    }
    memset(v8, 0, sizeof(v8));
    uint64_t v5 = v8;
    uint64_t v6 = a1;
  }
  return ((uint64_t (*)(_OWORD *, uint64_t))a2)(v5, v6);
}

uint64_t static __DataStorage.maxSize.getter()
{
  return 0x3FFFFFFFFFFFFFFFLL;
}

uint64_t static __DataStorage.vmOpsThreshold.getter()
{
  if (one-time initialization token for vmOpsThreshold != -1) {
    swift_once();
  }
  return static __DataStorage.vmOpsThreshold;
}

BOOL static __DataStorage.shouldAllocateCleared(_:)(uint64_t a1)
{
  return a1 > 0x20000;
}

uint64_t __DataStorage._bytes.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*__DataStorage._bytes.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._length.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*__DataStorage._length.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._capacity.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t __DataStorage._capacity.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*__DataStorage._capacity.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._offset.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*__DataStorage._offset.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t key path getter for __DataStorage._deallocator : __DataStorage@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 48);
  uint64_t v4 = *(void *)(*(void *)a1 + 56);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
}

uint64_t key path setter for __DataStorage._deallocator : __DataStorage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UnsafeMutableRawPointer, @in_guaranteed Int) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(*a2 + 48);
  *(void *)(v7 + 48) = v6;
  *(void *)(v7 + 56) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);

  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);
}

uint64_t __DataStorage._deallocator.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v1);
  return v1;
}

uint64_t __DataStorage._deallocator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
}

uint64_t (*__DataStorage._deallocator.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._needToZero.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t __DataStorage._needToZero.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 64) = result;
  return result;
}

uint64_t (*__DataStorage._needToZero.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a3[2];
  if (!v6)
  {
    if (!__OFSUB__(a2, a1))
    {
      char v10 = 0;
      int64_t v11 = 0;
LABEL_9:
      Data._Representation.replaceSubrange(_:with:count:)(a5, a6, v10, v11);
      return;
    }
    goto LABEL_10;
  }
  uint64_t v7 = a3[5];
  BOOL v8 = __OFSUB__(a1, v7);
  uint64_t v9 = a1 - v7;
  if (!v8)
  {
    if (!__OFSUB__(a2, a1))
    {
      char v10 = (char *)(v6 + v9);
      if (a3[3] >= a2 - a1) {
        int64_t v11 = a2 - a1;
      }
      else {
        int64_t v11 = a3[3];
      }
      goto LABEL_9;
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a3 + 16))
  {
    if (!__OFSUB__(a2, result))
    {
LABEL_6:
      __swift_mutable_project_boxed_opaque_existential_1(a4, *(void *)(a4 + 24));
      return dispatch thunk of UnkeyedEncodingContainer.encode<A>(contentsOf:)();
    }
    goto LABEL_7;
  }
  if (!__OFSUB__(result, *(void *)(a3 + 40)))
  {
    if (!__OFSUB__(a2, result)) {
      goto LABEL_6;
    }
LABEL_7:
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = a3[2];
  if (!v5)
  {
    if (!__OFSUB__(a2, a1))
    {
      char v10 = 0;
      uint64_t v12 = 0;
LABEL_9:
      closure #1 in NSFileHandle.write<A>(contentsOf:)(v10, v12, a4);

      return;
    }
    goto LABEL_10;
  }
  uint64_t v6 = a3[5];
  BOOL v7 = __OFSUB__(a1, v6);
  uint64_t v8 = a1 - v6;
  if (!v7)
  {
    uint64_t v9 = a2 - a1;
    if (!__OFSUB__(a2, a1))
    {
      char v10 = (unsigned char *)(v5 + v8);
      uint64_t v11 = a3[3];
      if (v11 >= v9) {
        uint64_t v11 = v9;
      }
      uint64_t v12 = &v10[v11];
      goto LABEL_9;
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, void *a3, int a4)
{
  uint64_t v4 = a3[2];
  if (!v4)
  {
LABEL_9:
    if (!__OFSUB__(a2, result)) {
      __break(1u);
    }
    goto LABEL_11;
  }
  uint64_t v5 = a3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (__OFSUB__(a2, result))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v9 = (const void *)(v4 + v7);
  if (a3[3] >= a2 - result) {
    size_t v10 = a2 - result;
  }
  else {
    size_t v10 = a3[3];
  }
  uint64_t v11 = String.utf8CString.getter();
  fsetxattr(a4, (const char *)(v11 + 32), v9, v10, 0, 0);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v4 = a3[2];
  if (!v4)
  {
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      return closure #1 in Data.customMirror.getter(v9, v11, a4);
    }
    goto LABEL_10;
  }
  uint64_t v5 = a3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (!v6)
  {
    uint64_t v8 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = v4 + v7;
      uint64_t v10 = a3[3];
      if (v10 >= v8) {
        uint64_t v10 = v8;
      }
      uint64_t v11 = v9 + v10;
      return closure #1 in Data.customMirror.getter(v9, v11, a4);
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = v3[2];
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = v3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (v3[3] < v8) {
    uint64_t v8 = v3[3];
  }
  return a3(v4 + v7, v4 + v7 + v8);
}

uint64_t __DataStorage.bytes.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v0 + 40);
  BOOL v3 = __OFSUB__(0, v2);
  uint64_t v4 = -v2;
  if (!v3) {
    return v1 + v4;
  }
  __break(1u);
  return result;
}

uint64_t __DataStorage.capacity.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t __DataStorage.length.getter()
{
  return *(void *)(v0 + 24);
}

void __DataStorage.length.setter(Swift::Int growingTo)
{
  if (*(void *)(v1 + 32) < growingTo || (uint64_t v3 = *(void *)(v1 + 16)) == 0)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(growingTo, 1);
    goto LABEL_8;
  }
  Swift::Int v4 = *(void *)(v1 + 24);
  if (v4 >= growingTo || *(unsigned char *)(v1 + 64) != 1)
  {
    if (v4 > growingTo) {
      *(unsigned char *)(v1 + 64) = 1;
    }
    goto LABEL_8;
  }
  if (!__OFSUB__(growingTo, v4))
  {
    bzero((void *)(v3 + v4), growingTo - v4);
LABEL_8:
    *(void *)(v1 + 24) = growingTo;
    return;
  }
  __break(1u);
}

void (*__DataStorage.length.modify(void *a1))(Swift::Int *a1, char a2)
{
  *a1 = *(void *)(v1 + 24);
  a1[1] = v1;
  return __DataStorage.length.modify;
}

void __DataStorage.length.modify(Swift::Int *a1, char a2)
{
  Swift::Int v2 = *a1;
  Swift::Int v3 = a1[1];
  if (a2)
  {
    __DataStorage.setLength(_:)(*a1);
    return;
  }
  if (*(void *)(v3 + 32) < v2 || (uint64_t v4 = *(void *)(v3 + 16)) == 0)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(*a1, 1);
    goto LABEL_10;
  }
  Swift::Int v5 = *(void *)(v3 + 24);
  if (v5 >= v2 || *(unsigned char *)(v3 + 64) != 1)
  {
    if (v2 < v5) {
      *(unsigned char *)(v3 + 64) = 1;
    }
    goto LABEL_10;
  }
  if (!__OFSUB__(v2, v5))
  {
    bzero((void *)(v4 + v5), v2 - v5);
LABEL_10:
    *(void *)(v3 + 24) = v2;
    return;
  }
  __break(1u);
}

BOOL __DataStorage.isExternallyOwned.getter()
{
  return *(void *)(v0 + 32) == 0;
}

Swift::Void __swiftcall __DataStorage._freeBytes()()
{
  uint64_t v1 = v0;
  Swift::Int v2 = (void *)v0[2];
  if (v2)
  {
    Swift::Int v3 = (void (*)(void *, uint64_t))v1[6];
    if (v3)
    {
      uint64_t v4 = v1[3];
      swift_retain();
      v3(v2, v4);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v3);
    }
    else
    {
      free(v2);
    }
  }
  uint64_t v5 = v1[6];
  v1[6] = 0;
  v1[7] = 0;

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
}

uint64_t __DataStorage.enumerateBytes(in:_:)(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  if (!__OFSUB__(a2, result)) {
    return a3();
  }
  __break(1u);
  return result;
}

void __DataStorage.append(_:length:)(unint64_t __src, int64_t __len)
{
  if (__len < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = v2[3];
  uint64_t v5 = v4 + __len;
  if (__OFADD__(v4, __len))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2[4] < v5 || (uint64_t v7 = v2[2]) == 0)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v4 + __len, 0);
    uint64_t v7 = v2[2];
    v2[3] = v5;
    if (v7) {
      goto LABEL_7;
    }
LABEL_12:
    __break(1u);
    return;
  }
  v2[3] = v5;
LABEL_7:

  specialized static __DataStorage.move(_:_:_:)(v7 + v4, __src, __len);
}

Swift::UInt8 __swiftcall __DataStorage.get(_:)(Swift::Int a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(v1 + 40);
  BOOL v4 = __OFSUB__(a1, v3);
  Swift::Int v5 = a1 - v3;
  if (v4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
    return a1;
  }
  LOBYTE(a1) = *(unsigned char *)(v2 + v5);
  return a1;
}

Swift::Void __swiftcall __DataStorage.set(_:to:)(Swift::Int _, Swift::UInt8 to)
{
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v2 + 40);
    BOOL v7 = __OFSUB__(_, v6);
    Swift::Int v8 = _ - v6;
    if (!v7)
    {
      *(unsigned char *)(v5 + v8) = to;
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t __DataStorage.copyBytes(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(v3 + 16))
  {
    if (!__OFSUB__(a3, a2)) {
      return UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    goto LABEL_7;
  }
  if (!__OFSUB__(a2, *(void *)(v3 + 40)))
  {
    if (!__OFSUB__(a3, a2)) {
      return UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
LABEL_7:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t __DataStorage.__allocating_init(length:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  __DataStorage.init(length:)(a1);
  return v2;
}

uint64_t __DataStorage.__allocating_init(capacity:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  __DataStorage.init(capacity:)(a1);
  return v2;
}

uint64_t __DataStorage.__allocating_init(bytes:length:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  __DataStorage.init(bytes:length:)(a1, a2);
  return v4;
}

uint64_t __DataStorage.__allocating_init(bytes:length:copy:deallocator:offset:)(unint64_t a1, uint64_t a2, char a3, void (*a4)(unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t __DataStorage.__allocating_init(offset:bytes:capacity:needToZero:length:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a1;
  *(unsigned char *)(result + 64) = a4;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a5;
  *(void *)(result + 48) = a6;
  *(void *)(result + 56) = a7;
  return result;
}

uint64_t __DataStorage.init(offset:bytes:capacity:needToZero:length:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a1;
  *(unsigned char *)(v7 + 64) = a4;
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a5;
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a7;
  return v7;
}

void *__DataStorage.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)v0[2];
  if (v2)
  {
    uint64_t v3 = (void (*)(void *, uint64_t))v1[6];
    if (v3)
    {
      uint64_t v4 = v1[3];
      swift_retain();
      v3(v2, v4);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v3);
    }
    else
    {
      free(v2);
    }
  }
  uint64_t v5 = v1[6];
  v1[6] = 0;
  v1[7] = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v1[6]);
  return v1;
}

uint64_t __DataStorage.mutableCopy(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(v2 + 16);
  if (!v4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = a2 - result;
    if (!__OFSUB__(a2, result)) {
      goto LABEL_4;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(v2 + 40);
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (!v6)
  {
    unint64_t v8 = v4 + v7;
    uint64_t v9 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
LABEL_4:
      uint64_t v10 = swift_allocObject();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(v8, v9, 1, 0, 0, v3);
      return v10;
    }
    goto LABEL_7;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t Data.InlineData.bytes.setter(uint64_t result, char a2, char a3, char a4, char a5, char a6, char a7, char a8, uint64_t a9)
{
  *(unsigned char *)uint64_t v9 = result;
  *(unsigned char *)(v9 + 1) = a2;
  *(unsigned char *)(v9 + 2) = a3;
  *(unsigned char *)(v9 + 3) = a4;
  *(unsigned char *)(v9 + 4) = a5;
  *(unsigned char *)(v9 + 5) = a6;
  *(unsigned char *)(v9 + 6) = a7;
  *(unsigned char *)(v9 + 7) = a8;
  *(_WORD *)(v9 + 8) = a9;
  *(_DWORD *)(v9 + 10) = *(_DWORD *)((char *)&a9 + 2);
  return result;
}

uint64_t (*Data.InlineData.bytes.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t Data.InlineData.length.getter(uint64_t a1, unint64_t a2)
{
  return HIWORD(a2);
}

uint64_t Data.InlineData.length.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 14) = result;
  return result;
}

uint64_t (*Data.InlineData.length.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

BOOL static Data.InlineData.canStore(count:)(uint64_t a1)
{
  return a1 < 15;
}

uint64_t Data.InlineData.init(count:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0 && a1 < 0x100) {
    return 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Data.InlineData.init(_:count:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = specialized Data.InlineData.init(_:count:)(a1, a2, a3);
  swift_release();
  return v3;
}

{
  uint64_t v3;

  uint64_t v3 = specialized Data.InlineData.init(_:count:)(a1, a2, a3);
  swift_release();
  swift_release();
  return v3;
}

uint64_t Data.InlineSlice.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t result = (int)a3;
  if (a3 >> 32 >= (int)a3) {
    return __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a3, a3 >> 32, a1);
  }
  __break(1u);
  return result;
}

uint64_t _s10Foundation4DataV10LargeSliceV15withUnsafeBytesyxxSWKXEKlFAA23LocalizedStringResourceV_Tg5015_s10Foundation4b56V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_AA23hiJ5V_Tg5AA0N4ViewVys0S0VGxs5Error_pRi_zRi0_zlyAHIsgyrzo_Tf1ncn_n(uint64_t result, void *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = a2[2];
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a2[5];
  BOOL v7 = __OFSUB__(v3, v6);
  uint64_t v8 = v3 - v6;
  if (v7)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    if (!__OFSUB__(v4, v3)) {
      __break(1u);
    }
    goto LABEL_13;
  }
  BOOL v7 = __OFSUB__(v4, v3);
  uint64_t v3 = v4 - v3;
  if (!v7)
  {
    uint64_t v4 = a2[3];
    if (v4 >= v3) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = a2[3];
    }
    if ((v9 & 0x8000000000000000) == 0) {
      return a3(v5 + v8);
    }
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t Data.LargeSlice.withUnsafeBytes<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))result;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = a4[2];
  if (!v7)
  {
    if (!__OFSUB__(v6, v5))
    {
      uint64_t v12 = 0;
      uint64_t v14 = 0;
      return v4(v12, v14);
    }
    goto LABEL_10;
  }
  uint64_t v8 = a4[5];
  BOOL v9 = __OFSUB__(v5, v8);
  uint64_t v10 = v5 - v8;
  if (!v9)
  {
    BOOL v9 = __OFSUB__(v6, v5);
    uint64_t v11 = v6 - v5;
    if (!v9)
    {
      uint64_t v12 = v7 + v10;
      uint64_t v13 = a4[3];
      if (v13 >= v11) {
        uint64_t v13 = v11;
      }
      uint64_t v14 = v12 + v13;
      return v4(v12, v14);
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Data.InlineData.capacity.getter()
{
  return 14;
}

uint64_t Data.InlineData.count.getter(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

void Data.InlineData.count.setter(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + 14);
  if (v3 >= a1)
  {
    if (a1 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      *(unsigned char *)(v1 + 14) = a1;
    }
  }
  else
  {
    Data.InlineData.resetBytes(in:)(v3, a1);
  }
}

void Data.InlineData.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(v2 + 14);
  if (v3 < a1)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v3 < a2)
  {
    if (a2 >= 256)
    {
LABEL_11:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    *(unsigned char *)(v2 + 14) = a2;
  }
  BOOL v4 = __OFSUB__(a2, a1);
  size_t v5 = a2 - a1;
  if (v4)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = (void *)(v2 + a1);

  bzero(v6, v5);
}

void (*Data.InlineData.count.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(unsigned __int8 *)(v1 + 14);
  a1[1] = v1;
  return Data.InlineData.count.modify;
}

void Data.InlineData.count.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    Data.InlineData.count.setter(*a1);
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 *)(v3 + 14);
    if (v2 <= v4)
    {
      if (v2 < 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        *(unsigned char *)(v3 + 14) = v2;
      }
    }
    else
    {
      Data.InlineData.resetBytes(in:)(v4, v2);
    }
  }
}

uint64_t Data.InlineData.startIndex.getter()
{
  return 0;
}

uint64_t Data.InlineData.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

uint64_t Data.InlineData.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  return a1(v1, v1 + *(unsigned __int8 *)(v1 + 14));
}

Swift::Void __swiftcall Data.InlineData.append(byte:)(Swift::UInt8 byte)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 14);
  if (v2 >= 0xE)
  {
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(unsigned char *)(v1 + v2) = byte;
    *(unsigned char *)(v1 + 14) = v2 + 1;
  }
}

unsigned char *Data.InlineData.append(contentsOf:)(unsigned char *__src, unsigned char *a2)
{
  if (__src)
  {
    int64_t v3 = a2 - __src;
    if (a2 != __src)
    {
      uint64_t v4 = *(unsigned __int8 *)(v2 + 14);
      char __src = memmove((void *)(v2 + v4), __src, v3);
      if (v3 < 256)
      {
        unsigned int v5 = v4 + v3;
        if (((v5 >> 8) & 1) == 0)
        {
          *(unsigned char *)(v2 + 14) = v5;
          return __src;
        }
        __break(1u);
      }
      char __src = (unsigned char *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return __src;
}

uint64_t Data.InlineData.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1 >= BYTE6(a3)) {
    __break(1u);
  }
  uint64_t v4 = a2;
  __int16 v5 = a3;
  char v6 = BYTE2(a3);
  char v7 = BYTE3(a3);
  char v8 = BYTE4(a3);
  char v9 = BYTE5(a3);
  return *((unsigned __int8 *)&v4 + a1);
}

double key path getter for Data.InlineData.subscript(_:) : Data.InlineData@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (*a2 >= *(unsigned __int8 *)(a1 + 14)) {
    __break(1u);
  }
  __int16 v4 = *(_WORD *)(a1 + 12);
  double result = *(double *)a1;
  double v6 = *(double *)a1;
  int v7 = *(_DWORD *)(a1 + 8);
  __int16 v8 = v4;
  *a3 = *((unsigned char *)&v6 + v3);
  return result;
}

unsigned char *key path setter for Data.InlineData.subscript(_:) : Data.InlineData(unsigned char *result, uint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  if ((uint64_t)*a3 >= *(unsigned __int8 *)(a2 + 14))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 <= 0xD)
  {
    *(unsigned char *)(a2 + v3) = *result;
    return result;
  }
  double result = (unsigned char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Data.InlineData.subscript.setter(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(v2 + 14) <= a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0 && (unint64_t)a2 < 0xE)
  {
    *(unsigned char *)(v2 + a2) = result;
    return result;
  }
  double result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*Data.InlineData.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  if (*((unsigned __int8 *)v2 + 14) <= a2) {
    __break(1u);
  }
  __int16 v3 = *((_WORD *)v2 + 6);
  uint64_t v5 = *v2;
  int v6 = *((_DWORD *)v2 + 2);
  __int16 v7 = v3;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)&v5 + a2);
  return Data.InlineData.subscript.modify;
}

uint64_t Data.InlineData.subscript.modify(uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  uint64_t result = a1 + 16;
  char v5 = v6;
  int64_t v7 = *(unsigned __int8 *)(v2 + 14);
  if ((a2 & 1) == 0)
  {
    if ((uint64_t)v3 >= v7) {
      goto LABEL_11;
    }
    if ((v3 & 0x8000000000000000) != 0 || v3 >= 0xE) {
      goto LABEL_12;
    }
LABEL_10:
    *(unsigned char *)(v2 + v3) = v5;
    return result;
  }
  if ((uint64_t)v3 < v7)
  {
    if ((v3 & 0x8000000000000000) != 0 || v3 > 0xD) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *Data.InlineData.copyBytes(to:from:)(void *result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (BYTE6(a5) < a2 || BYTE6(a5) < a3) {
    __break(1u);
  }
  uint64_t v7 = a4;
  __int16 v8 = a5;
  char v9 = BYTE2(a5);
  char v10 = BYTE3(a5);
  char v11 = BYTE4(a5);
  int64_t v6 = a3 - a2;
  char v12 = BYTE5(a5);
  if (v6 > 13)
  {
    int64_t v6 = 14;
    return memcpy(result, (char *)&v7 + a2, v6);
  }
  if (v6 >= 1) {
    return memcpy(result, (char *)&v7 + a2, v6);
  }
  return result;
}

uint64_t Data.InlineSlice.slice.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*Data.InlineSlice.slice.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.InlineSlice.storage.getter()
{
  return swift_retain();
}

uint64_t (*Data.InlineSlice.storage.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

BOOL static Data.InlineSlice.canStore(count:)(uint64_t a1)
{
  return a1 < 0x7FFFFFFF;
}

uint64_t Data.InlineSlice.init(_:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((a2 & 0x80000000) == 0) {
    return a2 << 32;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.init(capacity:)(uint64_t a1)
{
  return 0;
}

uint64_t Data.InlineSlice.init(count:)(uint64_t a1)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(length:)(a1);
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((a1 & 0x80000000) == 0) {
    return a1 << 32;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  unint64_t v2 = a2 >> 16;
  __int16 v6 = a2;
  char v7 = BYTE2(a2);
  char v8 = BYTE3(a2);
  uint64_t v3 = BYTE6(a2);
  char v9 = BYTE4(a2);
  char v10 = BYTE5(a2);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)&v5, v3);
  return v2 & 0xFF00000000;
}

unint64_t Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Data.InlineSlice.init(_:range:)(a1, a2 & 0xFFFFFFFFFFFFFFLL, a3, a4);
}

{
  unsigned int v4;
  unsigned int v5;
  unint64_t result;

  if (a3 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  __int16 v4 = a3;
  if (a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_8;
  }
  uint64_t v5 = a4;
  if (a4 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_8;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((int)a4 >= (int)a3)
  {
    swift_release();
    return v4 | ((unint64_t)v5 << 32);
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_8;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((int)a3 >= (int)a2) {
    return a2 | ((unint64_t)a3 << 32);
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t Data.InlineSlice.init(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t result = swift_release();
  if (v1 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_10;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((int)v2 >= (int)v1) {
    return v1 | ((unint64_t)v2 << 32);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.startIndex.getter(uint64_t result)
{
  return (int)result;
}

uint64_t Data.InlineSlice.endIndex.getter(uint64_t a1)
{
  return a1 >> 32;
}

uint64_t Data.InlineSlice.capacity.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

Swift::Void __swiftcall Data.InlineSlice.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *v1;
    uint64_t v4 = v2[1];
    if ((int)v4 < (int)v5)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    uint64_t v6 = *((void *)v2 + 1);
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)(v6 + 40);
      BOOL v9 = __OFSUB__(v5, v8);
      uint64_t v10 = v5 - v8;
      if (v9)
      {
LABEL_15:
        __break(1u);
        return;
      }
      unint64_t v11 = v7 + v10;
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v12 = v4 - v5;
    type metadata accessor for __DataStorage();
    uint64_t v13 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v11, v12, 1, 0, 0, v5);
    *((void *)v2 + 1) = v13;
    swift_release();
  }
  int v14 = v2[1];
  int v15 = v14 - *v2;
  if (__OFSUB__(v14, *v2))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v15 <= a1) {
    Swift::Int v16 = a1;
  }
  else {
    Swift::Int v16 = v15;
  }
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v16, 0);
}

uint64_t Data.InlineSlice.count.getter(uint64_t result)
{
  if (!__OFSUB__(HIDWORD(result), result)) {
    return HIDWORD(result) - (int)result;
  }
  __break(1u);
  return result;
}

void (*Data.InlineSlice.count.modify(void (*result)(uint64_t *a1)))(uint64_t *a1)
{
  *((void *)result + 1) = v1;
  int v2 = v1[1];
  if (__OFSUB__(v2, *v1))
  {
    __break(1u);
  }
  else
  {
    *(void *)unint64_t result = v2 - *v1;
    return Data.InlineSlice.count.modify;
  }
  return result;
}

void Data.InlineSlice.count.modify(uint64_t *a1)
{
}

int64_t *key path setter for Data.InlineSlice.range : Data.InlineSlice(int64_t *result, _DWORD *a2)
{
  int64_t v2 = *result;
  if (*result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = result[1];
  if (v2 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_10;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((int)v3 >= (int)v2)
  {
    *a2 = v2;
    a2[1] = v3;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.range.setter(uint64_t result, uint64_t a2)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_8;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((int)a2 >= (int)result)
  {
    _DWORD *v2 = result;
    v2[1] = a2;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

int64_t *(*Data.InlineSlice.range.modify(int64_t *(*result)(int64_t *result, char a2)))(int64_t *result, char a2)
{
  *((void *)result + 2) = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
  }
  else
  {
    *(void *)unint64_t result = v2;
    *((void *)result + 1) = v3;
    return Data.InlineSlice.range.modify;
  }
  return result;
}

int64_t *Data.InlineSlice.range.modify(int64_t *result, char a2)
{
  int64_t v2 = *result;
  uint64_t v3 = result[1];
  BOOL v4 = *result <= 0x7FFFFFFF;
  if (a2)
  {
    if (*result > 0x7FFFFFFF)
    {
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    if (v2 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_20;
    }
    if (v3 > 0x7FFFFFFF)
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    BOOL v4 = (int)v3 <= (int)v2;
    if ((int)v3 >= (int)v2)
    {
LABEL_19:
      uint64_t v7 = (_DWORD *)result[2];
      *uint64_t v7 = v2;
      v7[1] = v3;
      return result;
    }
    __break(1u);
  }
  if (!v4) {
    goto LABEL_22;
  }
  if (v2 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_23;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((int)v3 >= (int)v2) {
    goto LABEL_19;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, uint64_t a2)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v6 = *a1;
    uint64_t v5 = a1[1];
    if ((int)v5 < (int)v6)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    uint64_t v7 = *((void *)a1 + 1);
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 40);
      BOOL v10 = __OFSUB__(v6, v9);
      uint64_t v11 = v6 - v9;
      if (v10)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      unint64_t v12 = v8 + v11;
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v13 = v5 - v6;
    type metadata accessor for __DataStorage();
    uint64_t v14 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0, 0, v6);
    *((void *)a1 + 1) = v14;
    uint64_t result = swift_release();
  }
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  if ((int)v16 < (int)v15)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v17 = (void *)*((void *)a1 + 1);
  uint64_t v18 = v17[2];
  if (!v18)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v19 = v17[5];
  BOOL v10 = __OFSUB__(v15, v19);
  uint64_t v20 = v15 - v19;
  if (v10) {
    goto LABEL_15;
  }
  uint64_t v21 = v16 - v15;
  if (v17[3] < v21) {
    uint64_t v21 = v17[3];
  }
  *(void *)(a2 + 8) = v18 + v20;
  *(void *)(a2 + 16) = v18 + v20 + v21;
  return result;
}

uint64_t Data.InlineSlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= a2 >> 32 || (int)a2 > result)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a3 + 40);
    BOOL v5 = __OFSUB__(result, v4);
    uint64_t v6 = result - v4;
    if (!v5) {
      return *(unsigned __int8 *)(v3 + v6);
    }
    goto LABEL_7;
  }
LABEL_8:
  __break(1u);
  return result;
}

int *key path getter for Data.InlineSlice.subscript(_:) : Data.InlineSlice@<X0>(int *result@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *a2;
  if (*a2 >= *result)
  {
    BOOL v6 = __OFSUB__(v4, v3);
    BOOL v5 = v4 - v3 < 0;
  }
  else
  {
    BOOL v6 = 0;
    BOOL v5 = 0;
  }
  if (v5 == v6)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v7 = *((void *)result + 1);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(v7 + 40);
    BOOL v6 = __OFSUB__(v4, v9);
    uint64_t v10 = v4 - v9;
    if (!v6)
    {
      *a3 = *(unsigned char *)(v8 + v10);
      return result;
    }
    goto LABEL_9;
  }
LABEL_10:
  __break(1u);
  return result;
}

void Data.InlineSlice.subscript.setter(char a1, uint64_t a2)
{
  if (*v2 > a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v2[1] <= a2)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v5 = *((void *)v2 + 1);
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 40);
    BOOL v8 = __OFSUB__(a2, v7);
    uint64_t v9 = a2 - v7;
    if (!v8)
    {
      *(unsigned char *)(v6 + v9) = a1;
      return;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
}

void (*Data.InlineSlice.subscript.modify(void (*result)(uint64_t a1), uint64_t a2))(uint64_t a1)
{
  *(void *)uint64_t result = a2;
  *((void *)result + 1) = v2;
  if (*v2 > a2 || v2[1] <= a2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = *((void *)v2 + 1);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 40);
    BOOL v7 = __OFSUB__(a2, v6);
    uint64_t v8 = a2 - v6;
    if (!v7)
    {
      *((unsigned char *)result + 16) = *(unsigned char *)(v5 + v8);
      return Data.InlineSlice.subscript.modify;
    }
    goto LABEL_9;
  }
LABEL_10:
  __break(1u);
  return result;
}

void Data.InlineSlice.subscript.modify(uint64_t a1)
{
}

void Data.InlineSlice.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  if (v2[1] < a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v3 = v2;
  if (swift_isUniquelyReferenced_nonNull_native()) {
    goto LABEL_9;
  }
  uint64_t v7 = *v2;
  uint64_t v6 = v3[1];
  if ((int)v6 < (int)v7)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = *((void *)v3 + 1);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 40);
    BOOL v11 = __OFSUB__(v7, v10);
    uint64_t v12 = v7 - v10;
    if (v11)
    {
LABEL_18:
      __break(1u);
      return;
    }
    unint64_t v13 = v9 + v12;
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t v14 = v6 - v7;
  type metadata accessor for __DataStorage();
  uint64_t v15 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0, 0, v7);
  *((void *)v3 + 1) = v15;
  swift_release();
LABEL_9:
  __DataStorage.resetBytes(in:)(a1, a2);
  if (v3[1] >= a2) {
    return;
  }
  if (a2 > 0x7FFFFFFF) {
    goto LABEL_16;
  }
  if (*v3 > (int)a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v3[1] = a2;
}

uint64_t Data.InlineSlice.copyBytes(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >> 32 >= a3 && (int)a4 <= a3 && a4 >> 32 >= a2 && (int)a4 <= a2) {
    return __DataStorage.copyBytes(to:from:)(result, a2, a3);
  }
  __break(1u);
  return result;
}

uint64_t Data.RangeReference.range.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Data.RangeReference.range.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 16) = result;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Data.RangeReference.range.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.RangeReference.count.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t result = v1 - v2;
  if (__OFSUB__(v1, v2)) {
    __break(1u);
  }
  return result;
}

uint64_t Data.RangeReference.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t Data.RangeReference.init(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t Data.RangeReference.deinit()
{
  return v0;
}

uint64_t Data.RangeReference.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Data.LargeSlice.slice.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*Data.LargeSlice.slice.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.LargeSlice.storage.getter()
{
  return swift_retain();
}

uint64_t Data.LargeSlice.storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Data.LargeSlice.storage.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.LargeSlice.init(_:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = a2;
  }
  return result;
}

uint64_t Data.LargeSlice.init(capacity:)(uint64_t a1)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(capacity:)(a1);
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t Data.LargeSlice.init(count:)(uint64_t a1)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(length:)(a1);
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = a1;
  }
  return result;
}

uint64_t Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1;
  __int16 v5 = a2;
  char v6 = BYTE2(a2);
  char v7 = BYTE3(a2);
  uint64_t v2 = BYTE6(a2);
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)&v4, v2);
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v2;
  return result;
}

uint64_t Data.LargeSlice.init(_:)(uint64_t result)
{
  uint64_t v1 = (int)result;
  uint64_t v2 = result >> 32;
  if (result >> 32 < (int)result)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v1;
    *(void *)(result + 24) = v2;
  }
  return result;
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  uint64_t v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v2 = v0[1];
    uint64_t v4 = *(void *)(*v0 + 16);
    uint64_t v3 = *(void *)(*v1 + 24);
    uint64_t v5 = *(void *)(v2 + 16);
    if (v5)
    {
      uint64_t v6 = *(void *)(v2 + 40);
      BOOL v7 = __OFSUB__(v4, v6);
      uint64_t v8 = v4 - v6;
      if (v7)
      {
LABEL_13:
        __break(1u);
        return;
      }
      unint64_t v9 = v5 + v8;
      uint64_t v10 = v3 - v4;
      if (!__OFSUB__(v3, v4))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        uint64_t v11 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v9, v10, 1, 0, 0, v4);
        v1[1] = v11;
        swift_release();
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v10 = v3 - v4;
      if (!__OFSUB__(v3, v4)) {
        goto LABEL_5;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_6:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v12 = *(void *)(*v1 + 16);
    uint64_t v13 = *(void *)(*v1 + 24);
    type metadata accessor for Data.RangeReference();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v12;
    *(void *)(v14 + 24) = v13;
    uint64_t *v1 = v14;
    swift_release();
  }
}

uint64_t Data.LargeSlice.startIndex.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t Data.LargeSlice.endIndex.getter(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t Data.LargeSlice.capacity.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

Swift::Void __swiftcall Data.LargeSlice.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = v1[1];
    uint64_t v6 = *(void *)(*v1 + 16);
    uint64_t v5 = *(void *)(*v2 + 24);
    uint64_t v7 = *(void *)(v4 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)(v4 + 40);
      BOOL v9 = __OFSUB__(v6, v8);
      uint64_t v10 = v6 - v8;
      if (v9)
      {
LABEL_17:
        __break(1u);
        return;
      }
      unint64_t v11 = v7 + v10;
      uint64_t v12 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = v5 - v6;
      if (!__OFSUB__(v5, v6))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        uint64_t v13 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v11, v12, 1, 0, 0, v6);
        v2[1] = v13;
        swift_release();
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_6:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v14 = *(void *)(*v2 + 16);
    uint64_t v15 = *(void *)(*v2 + 24);
    type metadata accessor for Data.RangeReference();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v15;
    uint64_t *v2 = v16;
    swift_release();
  }
  uint64_t v17 = *(void *)(*v2 + 16);
  uint64_t v18 = *(void *)(*v2 + 24);
  BOOL v9 = __OFSUB__(v18, v17);
  Swift::Int v19 = v18 - v17;
  if (v9) {
    goto LABEL_16;
  }
  if (v19 <= a1) {
    Swift::Int v20 = a1;
  }
  else {
    Swift::Int v20 = v19;
  }
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v20, 0);
}

uint64_t Data.LargeSlice.count.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t result = v1 - v2;
  if (__OFSUB__(v1, v2)) {
    __break(1u);
  }
  return result;
}

void Data.LargeSlice.count.setter(uint64_t a1)
{
  Data.LargeSlice.ensureUniqueReference()();
  uint64_t v3 = *v1;
  uint64_t v5 = *(void *)(*v1 + 16);
  uint64_t v4 = *(void *)(*v1 + 24);
  BOOL v6 = __OFSUB__(v4, v5);
  uint64_t v7 = v4 - v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  BOOL v6 = __OFSUB__(a1, v7);
  uint64_t v8 = a1 - v7;
  if (v6)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 >= 1)
  {
    uint64_t v9 = v4 + v8;
    if (__OFADD__(v4, v8))
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    if (v9 < v4)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    __DataStorage.resetBytes(in:)(v4, v9);
LABEL_9:
    uint64_t v11 = *(void *)(v3 + 16);
    uint64_t v12 = v11 + a1;
    if (!__OFADD__(v11, a1))
    {
      if (v12 >= v11)
      {
        *(void *)(v3 + 24) = v12;
        return;
      }
      goto LABEL_15;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(v1[1] + 24);
  if (!__OFADD__(v10, v8))
  {
    __DataStorage.setLength(_:)(v10 + v8);
    goto LABEL_9;
  }
LABEL_18:
  __break(1u);
}

void (*Data.LargeSlice.count.modify(void (*result)(uint64_t *a1)))(uint64_t *a1)
{
  *((void *)result + 1) = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  uint64_t v3 = *(void *)(*(void *)v1 + 24);
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(void *)uint64_t result = v5;
    return Data.LargeSlice.count.modify;
  }
  return result;
}

void Data.LargeSlice.count.modify(uint64_t *a1)
{
}

uint64_t specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v5 = a1[1];
    uint64_t v7 = *(void *)(*a1 + 16);
    uint64_t v6 = *(void *)(*a1 + 24);
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v5 + 40);
      BOOL v10 = __OFSUB__(v7, v9);
      uint64_t v11 = v7 - v9;
      if (v10)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
      unint64_t v12 = v8 + v11;
      uint64_t v13 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6 - v7;
      if (!__OFSUB__(v6, v7))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        uint64_t v14 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0, 0, v7);
        a1[1] = v14;
        swift_release();
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_6:
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v15 = *(void *)(*a1 + 16);
    uint64_t v16 = *(void *)(*a1 + 24);
    type metadata accessor for Data.RangeReference();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v16;
    *a1 = v17;
    uint64_t result = swift_release();
  }
  uint64_t v18 = (void *)a1[1];
  uint64_t v19 = v18[2];
  if (!v19) {
    goto LABEL_20;
  }
  uint64_t v20 = *(void *)(*a1 + 16);
  uint64_t v21 = v18[5];
  BOOL v10 = __OFSUB__(v20, v21);
  uint64_t v22 = v20 - v21;
  if (v10) {
    goto LABEL_17;
  }
  uint64_t v23 = *(void *)(*a1 + 24);
  BOOL v10 = __OFSUB__(v23, v20);
  uint64_t v24 = v23 - v20;
  if (v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v25 = v18[3];
  if (v25 >= v24) {
    uint64_t v25 = v24;
  }
  uint64_t v26 = v19 + v22;
  *(void *)(a2 + 8) = v26;
  *(void *)(a2 + 16) = v26 + v25;
  return result;
}

uint64_t Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v5 = v1[1];
    uint64_t v7 = *(void *)(*v1 + 16);
    uint64_t v6 = *(void *)(*v2 + 24);
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v5 + 40);
      BOOL v10 = __OFSUB__(v7, v9);
      uint64_t v11 = v7 - v9;
      if (v10)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
      unint64_t v12 = v8 + v11;
      uint64_t v13 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6 - v7;
      if (!__OFSUB__(v6, v7))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        uint64_t v14 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0, 0, v7);
        v2[1] = v14;
        swift_release();
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_6:
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v15 = *(void *)(*v2 + 16);
    uint64_t v16 = *(void *)(*v2 + 24);
    type metadata accessor for Data.RangeReference();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v16;
    uint64_t *v2 = v17;
    uint64_t result = swift_release();
  }
  uint64_t v18 = (void *)v2[1];
  uint64_t v19 = v18[2];
  if (!v19) {
    goto LABEL_20;
  }
  uint64_t v20 = *(void *)(*v2 + 16);
  uint64_t v21 = v18[5];
  BOOL v10 = __OFSUB__(v20, v21);
  uint64_t v22 = v20 - v21;
  if (v10) {
    goto LABEL_17;
  }
  uint64_t v23 = *(void *)(*v2 + 24);
  BOOL v10 = __OFSUB__(v23, v20);
  uint64_t v24 = v23 - v20;
  if (v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v25 = v18[3];
  if (v25 >= v24) {
    uint64_t v25 = v24;
  }
  return a1(v19 + v22, v19 + v22 + v25);
}

void Data.LargeSlice.append(contentsOf:)(const void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Data.LargeSlice.ensureUniqueReference()();
  uint64_t v6 = v2[1];
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(v10 + 24);
  if (v9 < v11)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a1) {
    size_t v12 = a2 - (void)a1;
  }
  else {
    size_t v12 = 0;
  }
  __DataStorage.replaceBytes(in:with:length:)(v11, v9, a1, v12);
  uint64_t v13 = *(void *)(v10 + 24);
  BOOL v14 = __OFADD__(v13, v12);
  uint64_t v15 = v13 + v12;
  if (v14) {
    goto LABEL_11;
  }
  if (v15 >= *(void *)(v10 + 16))
  {
    *(void *)(v10 + 24) = v15;
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t Data.LargeSlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16) > result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(a2 + 24) <= result)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a3 + 40);
    BOOL v5 = __OFSUB__(result, v4);
    uint64_t v6 = result - v4;
    if (!v5) {
      return *(unsigned __int8 *)(v3 + v6);
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

void *key path getter for Data.LargeSlice.subscript(_:) : Data.LargeSlice@<X0>(void *result@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (*a2 < *(void *)(*result + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= *(void *)(*result + 24))
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result[1];
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 40);
    BOOL v7 = __OFSUB__(v3, v6);
    uint64_t v8 = v3 - v6;
    if (!v7)
    {
      *a3 = *(unsigned char *)(v5 + v8);
      return result;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

void Data.LargeSlice.subscript.setter(char a1, uint64_t a2)
{
  if (*(void *)(*v2 + 16) > a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*v2 + 24) <= a2)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  Data.LargeSlice.ensureUniqueReference()();
  uint64_t v5 = v2[1];
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 40);
    BOOL v8 = __OFSUB__(a2, v7);
    uint64_t v9 = a2 - v7;
    if (!v8)
    {
      *(unsigned char *)(v6 + v9) = a1;
      return;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
}

void (*Data.LargeSlice.subscript.modify(void (*result)(uint64_t a1), uint64_t a2))(uint64_t a1)
{
  *(void *)uint64_t result = a2;
  *((void *)result + 1) = v2;
  if (*(void *)(*v2 + 16) > a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*v2 + 24) <= a2)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v3 = v2[1];
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 40);
    BOOL v6 = __OFSUB__(a2, v5);
    uint64_t v7 = a2 - v5;
    if (!v6)
    {
      *((unsigned char *)result + 16) = *(unsigned char *)(v4 + v7);
      return Data.LargeSlice.subscript.modify;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

void Data.LargeSlice.subscript.modify(uint64_t a1)
{
}

void Data.LargeSlice.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*v2 + 24) < a1) {
    goto LABEL_16;
  }
  uint64_t v3 = v2;
  if (swift_isUniquelyReferenced_nonNull_native()) {
    goto LABEL_7;
  }
  uint64_t v6 = v2[1];
  uint64_t v8 = *(void *)(*v2 + 16);
  uint64_t v7 = *(void *)(*v3 + 24);
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(v6 + 40);
    BOOL v11 = __OFSUB__(v8, v10);
    uint64_t v12 = v8 - v10;
    if (v11)
    {
LABEL_18:
      __break(1u);
      return;
    }
    unint64_t v13 = v9 + v12;
    uint64_t v14 = v7 - v8;
    if (!__OFSUB__(v7, v8)) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  unint64_t v13 = 0;
  uint64_t v14 = v7 - v8;
  if (__OFSUB__(v7, v8))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_6:
  type metadata accessor for __DataStorage();
  uint64_t v15 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0, 0, v8);
  v3[1] = v15;
  swift_release();
LABEL_7:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v16 = *(void *)(*v3 + 16);
    uint64_t v17 = *(void *)(*v3 + 24);
    type metadata accessor for Data.RangeReference();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v17;
    *uint64_t v3 = v18;
    swift_release();
  }
  __DataStorage.resetBytes(in:)(a1, a2);
  uint64_t v19 = *v3;
  if (*(void *)(*v3 + 24) < a2)
  {
    if (*(void *)(v19 + 16) <= a2)
    {
      *(void *)(v19 + 24) = a2;
      return;
    }
    goto LABEL_17;
  }
}

void Data.LargeSlice.replaceSubrange(_:with:count:)(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v5 = *(void *)(*v4 + 16);
  if (v5 > a1) {
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)(*v4 + 24);
  if (v8 < a2 || v5 > a2 || v8 < a1) {
    goto LABEL_25;
  }
  BOOL v11 = v4;
  if (swift_isUniquelyReferenced_nonNull_native()) {
    goto LABEL_14;
  }
  uint64_t v14 = v4[1];
  uint64_t v16 = *(void *)(*v4 + 16);
  uint64_t v15 = *(void *)(*v11 + 24);
  uint64_t v17 = *(void *)(v14 + 16);
  if (!v17)
  {
    unint64_t v21 = 0;
    uint64_t v22 = v15 - v16;
    if (!__OFSUB__(v15, v16)) {
      goto LABEL_13;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v14 + 40);
  BOOL v19 = __OFSUB__(v16, v18);
  uint64_t v20 = v16 - v18;
  if (!v19)
  {
    unint64_t v21 = v17 + v20;
    uint64_t v22 = v15 - v16;
    if (!__OFSUB__(v15, v16))
    {
LABEL_13:
      type metadata accessor for __DataStorage();
      uint64_t v23 = swift_allocObject();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(v21, v22, 1, 0, 0, v16);
      v11[1] = v23;
      swift_release();
LABEL_14:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v24 = *(void *)(*v11 + 16);
        uint64_t v25 = *(void *)(*v11 + 24);
        type metadata accessor for Data.RangeReference();
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v25;
        *BOOL v11 = v26;
        swift_release();
      }
      uint64_t v27 = *(void *)(*v11 + 24);
      __DataStorage.replaceBytes(in:with:length:)(a1, a2, a3, a4);
      uint64_t v28 = a2 - a1;
      if (!__OFSUB__(a2, a1))
      {
        BOOL v19 = __OFSUB__(v27, v28);
        uint64_t v29 = v27 - v28;
        if (!v19)
        {
          BOOL v19 = __OFADD__(v29, a4);
          uint64_t v30 = v29 + a4;
          if (!v19)
          {
            if (v30 >= *(void *)(*v11 + 16))
            {
              *(void *)(*v11 + 24) = v30;
              return;
            }
            goto LABEL_29;
          }
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

uint64_t Data.LargeSlice.copyBytes(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (v4 > a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(a4 + 24);
    if (v5 >= a3 && v4 <= a3 && v5 >= a2) {
      return __DataStorage.copyBytes(to:from:)(result, a2, a3);
    }
  }
  __break(1u);
  return result;
}

void *Data._Representation.init(_:owner:)(unsigned char *__src, unsigned char *a2, uint64_t a3)
{
  uint64_t v4 = __src;
  if (__src)
  {
    uint64_t v5 = a2 - __src;
    if (a2 == __src)
    {
      swift_unknownObjectRelease();
      return 0;
    }
    else if (v5 <= 14)
    {
      uint64_t v4 = (void *)specialized Data.InlineData.init(_:)(__src, a2);
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = a3;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)((unint64_t)v4, v5, 0, (void (*)(unint64_t, uint64_t))destructiveProjectEnumData for PredicateCodableError, v6, 0);
      if ((unint64_t)v5 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v4 = (void *)swift_allocObject();
        v4[2] = 0;
        v4[3] = v5;
      }
      else
      {
        return (void *)(v5 << 32);
      }
    }
  }
  else
  {
    swift_unknownObjectRelease();
  }
  return v4;
}

uint64_t Data._Representation.init(capacity:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)(v1);
      if (v1 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

Swift::Void __swiftcall Data._Representation.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1 < 1) {
    return;
  }
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v12 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      if (*(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20) >= a1) {
        return;
      }
      if ((unint64_t)a1 > 0x7FFFFFFE)
      {
        if (v4 >> 32 < (int)v4)
        {
          __break(1u);
          goto LABEL_44;
        }
        type metadata accessor for Data.RangeReference();
        uint64_t v20 = swift_allocObject();
        *(void *)(v20 + 16) = (int)v4;
        *(void *)(v20 + 24) = v4 >> 32;
        unint64_t v29 = v20;
        uint64_t v30 = v3 & 0x3FFFFFFFFFFFFFFFLL;
        swift_retain();
        Data.LargeSlice.reserveCapacity(_:)(a1);
        swift_release();
LABEL_26:
        unint64_t v21 = v29;
        unint64_t v22 = v30 | 0x8000000000000000;
        goto LABEL_27;
      }
      *(_OWORD *)unint64_t v1 = xmmword_1821115B0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        if (v4 >> 32 < (int)v4)
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        uint64_t v13 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v13)
        {
          uint64_t v14 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          BOOL v9 = __OFSUB__((int)v4, v14);
          uint64_t v15 = (int)v4 - v14;
          if (v9) {
            goto LABEL_47;
          }
          unint64_t v16 = v13 + v15;
        }
        else
        {
          unint64_t v16 = 0;
        }
        type metadata accessor for __DataStorage();
        uint64_t v26 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v16, (v4 >> 32) - (int)v4, 1, 0, 0, (int)v4);
        swift_release();
        uint64_t v12 = v26;
      }
      int v27 = HIDWORD(v4) - v4;
      if (__OFSUB__(HIDWORD(v4), v4))
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      if (v27 <= a1) {
        Swift::Int v28 = a1;
      }
      else {
        Swift::Int v28 = v27;
      }
      __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v28, 0);
      uint64_t *v1 = v4;
      v1[1] = v12 | 0x4000000000000000;
      return;
    case 2uLL:
      unint64_t v29 = *v1;
      uint64_t v30 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      if (*(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20) >= a1) {
        return;
      }
      goto LABEL_23;
    case 3uLL:
      if ((unint64_t)a1 <= 0xE)
      {
        uint64_t *v1 = 0;
        v1[1] = 0;
      }
      else
      {
        type metadata accessor for __DataStorage();
        uint64_t v17 = swift_allocObject();
        __DataStorage.init(capacity:)(a1);
        if ((unint64_t)a1 > 0x7FFFFFFE)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t v23 = swift_allocObject();
          *(void *)(v23 + 16) = 0;
          *(void *)(v23 + 24) = 0;
          void *v2 = v23;
          v2[1] = v17 | 0x8000000000000000;
        }
        else
        {
          void *v2 = 0;
          v2[1] = v17 | 0x4000000000000000;
        }
      }
      return;
    default:
      if ((unint64_t)a1 <= 0xE) {
        return;
      }
      if ((unint64_t)a1 <= 0x7FFFFFFE)
      {
        unint64_t v29 = *v1;
        LOWORD(v30) = v3;
        BYTE2(v30) = BYTE2(v3);
        BYTE3(v30) = BYTE3(v3);
        BYTE4(v30) = BYTE4(v3);
        BYTE5(v30) = BYTE5(v3);
        type metadata accessor for __DataStorage();
        uint64_t v6 = swift_allocObject();
        __DataStorage.init(bytes:length:)((unint64_t)&v29, BYTE6(v3));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v7 = *(void *)(v6 + 16);
          if (v7)
          {
            uint64_t v8 = *(void *)(v6 + 40);
            BOOL v9 = __OFSUB__(0, v8);
            uint64_t v10 = -v8;
            if (v9)
            {
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
            }
            unint64_t v11 = v7 + v10;
          }
          else
          {
            unint64_t v11 = 0;
          }
          uint64_t v24 = swift_allocObject();
          __DataStorage.init(bytes:length:copy:deallocator:offset:)(v11, BYTE6(v3), 1, 0, 0, 0);
          swift_release();
          uint64_t v6 = v24;
        }
        if (BYTE6(v3) <= a1) {
          Swift::Int v25 = a1;
        }
        else {
          Swift::Int v25 = BYTE6(v3);
        }
        __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v25, 0);
        unint64_t v21 = (unint64_t)BYTE6(v3) << 32;
        unint64_t v22 = v6 | 0x4000000000000000;
LABEL_27:
        void *v2 = v21;
        v2[1] = v22;
        return;
      }
      unint64_t v29 = *v1;
      LOWORD(v30) = v3;
      BYTE2(v30) = BYTE2(v3);
      BYTE3(v30) = BYTE3(v3);
      BYTE4(v30) = BYTE4(v3);
      BYTE5(v30) = BYTE5(v3);
      type metadata accessor for __DataStorage();
      uint64_t v18 = swift_allocObject();
      __DataStorage.init(bytes:length:)((unint64_t)&v29, BYTE6(v3));
      type metadata accessor for Data.RangeReference();
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = 0;
      *(void *)(v19 + 24) = BYTE6(v3);
      unint64_t v29 = v19;
      uint64_t v30 = v18;
LABEL_23:
      Data.LargeSlice.reserveCapacity(_:)(a1);
      goto LABEL_26;
  }
}

uint64_t Data._Representation.count.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      BOOL v4 = __OFSUB__(HIDWORD(a1), a1);
      int v5 = HIDWORD(a1) - a1;
      if (v4)
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x181ED9D2CLL);
      }
      return v5;
    case 2uLL:
      uint64_t v8 = a1 + 16;
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(v8 + 8);
      uint64_t result = v7 - v6;
      if (!__OFSUB__(v7, v6)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(a2);
  }
}

void (*Data._Representation.count.modify(void *a1))(int64_t *a1)
{
  a1[1] = v1;
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x181ED9DD0);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      *a1 = v4;
      return Data._Representation.count.modify;
    case 2uLL:
      uint64_t v7 = v2 + 16;
      uint64_t v6 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v7 + 8);
      BOOL v8 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v4 = BYTE6(v3);
      goto LABEL_6;
  }
}

void Data._Representation.count.modify(int64_t *a1)
{
}

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  long long __src[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL), a3, a4, a5);
      outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v13 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v14, v15, v13, a3, a4, a5);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(__src, 0, 14);
      uint64_t v11 = a4;
      uint64_t v12 = a5;
      int64_t v10 = 0;
      goto LABEL_7;
    default:
      __src[0] = a1;
      LOWORD(__src[1]) = a2;
      BYTE2(__src[1]) = BYTE2(a2);
      BYTE3(__src[1]) = BYTE3(a2);
      BYTE4(__src[1]) = BYTE4(a2);
      int64_t v10 = BYTE6(a2);
      BYTE5(__src[1]) = BYTE5(a2);
      uint64_t v11 = a4;
      uint64_t v12 = a5;
LABEL_7:
      Data._Representation.replaceSubrange(_:with:count:)(v11, v12, (char *)__src, v10);
      break;
  }
}

uint64_t specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3);
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v7 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v8, v9, v7, a3);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v10, 0, 14);
      uint64_t v11 = v10;
      uint64_t v12 = (char *)v10;
      goto LABEL_7;
    default:
      v10[0] = a1;
      LOWORD(v10[1]) = a2;
      BYTE2(v10[1]) = BYTE2(a2);
      BYTE3(v10[1]) = BYTE3(a2);
      BYTE4(v10[1]) = BYTE4(a2);
      BYTE5(v10[1]) = BYTE5(a2);
      uint64_t v11 = v10;
      uint64_t v12 = (char *)v10 + BYTE6(a2);
LABEL_7:
      __swift_mutable_project_boxed_opaque_existential_1(a3, *(void *)(a3 + 24));
      uint64_t result = dispatch thunk of UnkeyedEncodingContainer.encode<A>(contentsOf:)();
      break;
  }
  return result;
}

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2)
{
  long long __src[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL));
      outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v5 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v6, v7, v5);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(__src, 0, 14);
      uint64_t v4 = __src;
      goto LABEL_7;
    default:
      __src[0] = a1;
      LOWORD(__src[1]) = a2;
      BYTE2(__src[1]) = BYTE2(a2);
      BYTE3(__src[1]) = BYTE3(a2);
      BYTE4(__src[1]) = BYTE4(a2);
      BYTE5(__src[1]) = BYTE5(a2);
      uint64_t v4 = (char *)__src + BYTE6(a2);
LABEL_7:
      Data._Representation.append(contentsOf:)(__src, v4);
      break;
  }
}

{
  specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2);
}

{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void __src[3];

  long long __src[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL));
      outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v5 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v6, v7, v5);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(__src, 0, 14);
      uint64_t v4 = 0;
      goto LABEL_7;
    default:
      __src[0] = a1;
      LOWORD(__src[1]) = a2;
      BYTE2(__src[1]) = BYTE2(a2);
      BYTE3(__src[1]) = BYTE3(a2);
      BYTE4(__src[1]) = BYTE4(a2);
      uint64_t v4 = BYTE6(a2);
      BYTE5(__src[1]) = BYTE5(a2);
LABEL_7:
      _BPlistEncodingFormat.Writer.write(_:)((char *)__src, v4);
      break;
  }
}

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2, void *a3)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      id v3 = a3;
      outlined copy of Data._Representation(a1, a2);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL), v3);
      outlined consume of Data._Representation(a1, a2);
      goto LABEL_8;
    case 2uLL:
      uint64_t v7 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      id v10 = a3;
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v8, v9, v7, v10);

      swift_release();
      swift_release();
      return;
    case 3uLL:
      memset(v11, 0, 14);
      uint64_t v6 = v11;
      goto LABEL_7;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
      uint64_t v6 = (char *)v11 + BYTE6(a2);
LABEL_7:
      closure #1 in NSFileHandle.write<A>(contentsOf:)(v11, v6, a3);
LABEL_8:

      return;
  }
}

uint64_t specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2, int a3)
{
  value[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(a1, a2);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL), a3);
      outlined consume of Data._Representation(a1, a2);
      return swift_bridgeObjectRelease();
    case 2uLL:
      uint64_t v9 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v10, v11, v9, a3);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    case 3uLL:
      memset(value, 0, 14);
      uint64_t v12 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain_n();
      fsetxattr(a3, v12, value, 0, 0, 0);
      swift_bridgeObjectRelease_n();
      return swift_release();
    default:
      value[0] = a1;
      LOWORD(value[1]) = a2;
      BYTE2(value[1]) = BYTE2(a2);
      BYTE3(value[1]) = BYTE3(a2);
      BYTE4(value[1]) = BYTE4(a2);
      size_t v6 = BYTE6(a2);
      BYTE5(value[1]) = BYTE5(a2);
      uint64_t v7 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain_n();
      fsetxattr(a3, v7, value, v6, 0, 0);
      swift_bridgeObjectRelease_n();
      return swift_release();
  }
}

uint64_t Data._Representation.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a3, a3 >> 32, a1);
      uint64_t result = outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      uint64_t v10 = (void *)(a4 & 0x3FFFFFFFFFFFFFFFLL);
      swift_retain();
      swift_retain();
      Data.LargeSlice.withUnsafeBytes<A>(_:)((uint64_t)a1, a2, a3, v10);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      uint64_t v8 = (char *)v11;
      goto LABEL_7;
    default:
      v11[0] = a3;
      LOWORD(v11[1]) = a4;
      BYTE2(v11[1]) = BYTE2(a4);
      BYTE3(v11[1]) = BYTE3(a4);
      BYTE4(v11[1]) = BYTE4(a4);
      BYTE5(v11[1]) = BYTE5(a4);
      uint64_t v8 = (char *)v11 + BYTE6(a4);
LABEL_7:
      uint64_t result = a1((uint64_t)v11, (uint64_t)v8);
      break;
  }
  return result;
}

uint64_t *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t *result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *result;
  unint64_t v3 = result[1];
  uint64_t v4 = result;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v7 = *result;
      uint64_t v8 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t result = xmmword_1821115B0;
      uint64_t result = (uint64_t *)specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&v7, a2);
      uint64_t v5 = v7;
      unint64_t v6 = v8 | 0x4000000000000000;
      goto LABEL_6;
    case 2uLL:
      uint64_t v7 = *result;
      uint64_t v8 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t result = xmmword_1821115B0;
      uint64_t result = (uint64_t *)specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(&v7, a2);
      uint64_t v5 = v7;
      unint64_t v6 = v8 | 0x8000000000000000;
LABEL_6:
      *uint64_t v4 = v5;
      v4[1] = v6;
      break;
    case 3uLL:
      *(void *)(a2 + 8) = &v7;
      *(void *)(a2 + 16) = &v7;
      break;
    default:
      *(void *)(a2 + 8) = &v7;
      *(void *)(a2 + 16) = (char *)&v7 + BYTE6(v3);
      *uint64_t result = v2;
      result[1] = v3;
      break;
  }
  return result;
}

uint64_t Data._Representation.enumerateBytes(_:)(uint64_t (*a1)(uint64_t *, uint64_t, void, uint64_t *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_23:
        __break(1u);
      }
      LOBYTE(v24) = 0;
      uint64_t v10 = *(uint64_t **)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v10)
      {
        if (*(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (a3 >> 32) - (int)a3) {
          uint64_t v11 = (a3 >> 32) - (int)a3;
        }
        else {
          uint64_t v11 = *(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        }
        outlined copy of Data._Representation(a3, a4);
        uint64_t v12 = v10;
        uint64_t v13 = v11;
      }
      else
      {
        outlined copy of Data._Representation(a3, a4);
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
      a1(v12, v13, 0, &v24);
      uint64_t result = outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      uint64_t v15 = *(void *)(a3 + 24);
      LOBYTE(v24) = 0;
      BOOL v16 = __OFSUB__(v15, v14);
      uint64_t v17 = v15 - v14;
      if (v16) {
        goto LABEL_23;
      }
      uint64_t v18 = *(uint64_t **)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v18)
      {
        if (*(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v17) {
          uint64_t v19 = v17;
        }
        else {
          uint64_t v19 = *(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        }
        swift_retain();
        swift_retain();
        uint64_t v20 = v18;
        uint64_t v21 = v19;
      }
      else
      {
        swift_retain();
        swift_retain();
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
      a1(v20, v21, 0, &v24);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      LOBYTE(v24) = 0;
      uint64_t v9 = &v24;
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      goto LABEL_16;
    default:
      uint64_t v24 = a3;
      __int16 v25 = a4;
      char v26 = BYTE2(a4);
      char v27 = BYTE3(a4);
      char v28 = BYTE4(a4);
      uint64_t v7 = BYTE6(a4);
      char v29 = BYTE5(a4);
      char v23 = 0;
      uint64_t v8 = &v24;
      uint64_t v9 = (uint64_t *)&v23;
LABEL_16:
      uint64_t result = a1(v8, v7, 0, v9);
      break;
  }
  return result;
}

void Data._Representation.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v14 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v28 = v4;
      uint64_t v29 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      if (a2 < 0x7FFFFFFF) {
        goto LABEL_13;
      }
      uint64_t v16 = (int)v4;
      uint64_t v17 = v4 >> 32;
      if (v4 >> 32 < (int)v4) {
        goto LABEL_30;
      }
      type metadata accessor for Data.RangeReference();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v16;
      *(void *)(v18 + 24) = v17;
      uint64_t v23 = v18;
      Data.LargeSlice.resetBytes(in:)(a1, a2);
      uint64_t v10 = v23;
      uint64_t v11 = v14;
      goto LABEL_19;
    case 2uLL:
      uint64_t v28 = *v2;
      uint64_t v29 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      goto LABEL_6;
    case 3uLL:
      if (!a2)
      {
        *(_OWORD *)uint64_t v2 = xmmword_1821115B0;
        return;
      }
      if (a2 > 14)
      {
        if ((unint64_t)a2 > 0x7FFFFFFE)
        {
          if (a1 <= 0)
          {
            type metadata accessor for __DataStorage();
            uint64_t v21 = swift_allocObject();
            __DataStorage.init(length:)(a2);
            type metadata accessor for Data.RangeReference();
            uint64_t v22 = swift_allocObject();
            *(void *)(v22 + 16) = 0;
            *(void *)(v22 + 24) = a2;
            uint64_t *v5 = v22;
            v5[1] = v21 | 0x8000000000000000;
            return;
          }
LABEL_34:
          __break(1u);
        }
        if (a1 <= 0)
        {
          type metadata accessor for __DataStorage();
          uint64_t v12 = swift_allocObject();
          __DataStorage.init(length:)(a2);
          uint64_t v10 = a2 << 32;
          unint64_t v13 = v12 | 0x4000000000000000;
LABEL_20:
          uint64_t *v5 = v10;
          v5[1] = v13;
          return;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      if (a1 > 0)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      if (a2 < 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181EDB43CLL);
      }
      uint64_t *v2 = 0;
      v2[1] = (unint64_t)a2 << 48;
      return;
    default:
      LOWORD(v23) = *v2;
      BYTE2(v23) = BYTE2(v4);
      BYTE3(v23) = BYTE3(v4);
      BYTE4(v23) = BYTE4(v4);
      BYTE5(v23) = BYTE5(v4);
      BYTE6(v23) = BYTE6(v4);
      HIBYTE(v23) = HIBYTE(v4);
      LOWORD(v24) = v3;
      BYTE2(v24) = BYTE2(v3);
      HIBYTE(v24) = BYTE3(v3);
      unsigned __int8 v25 = BYTE4(v3);
      unsigned __int8 v27 = BYTE6(v3);
      uint64_t v8 = BYTE6(v3);
      unsigned __int8 v26 = BYTE5(v3);
      if (BYTE6(v3) < a2)
      {
        if (a2 > 2147483646)
        {
          uint64_t v28 = v4;
          LOWORD(v29) = v3;
          BYTE2(v29) = BYTE2(v3);
          BYTE3(v29) = BYTE3(v3);
          BYTE4(v29) = BYTE4(v3);
          BYTE5(v29) = BYTE5(v3);
          type metadata accessor for __DataStorage();
          uint64_t v19 = swift_allocObject();
          __DataStorage.init(bytes:length:)((unint64_t)&v28, v8);
          type metadata accessor for Data.RangeReference();
          uint64_t v20 = swift_allocObject();
          *(void *)(v20 + 16) = 0;
          *(void *)(v20 + 24) = v8;
          uint64_t v28 = v20;
          uint64_t v29 = v19;
LABEL_6:
          Data.LargeSlice.resetBytes(in:)(a1, a2);
          uint64_t v10 = v28;
          uint64_t v11 = v29;
LABEL_19:
          unint64_t v13 = v11 | 0x8000000000000000;
        }
        else
        {
          uint64_t v28 = v4;
          LOWORD(v29) = v3;
          BYTE2(v29) = BYTE2(v3);
          BYTE3(v29) = BYTE3(v3);
          BYTE4(v29) = BYTE4(v3);
          BYTE5(v29) = BYTE5(v3);
          type metadata accessor for __DataStorage();
          uint64_t v9 = swift_allocObject();
          __DataStorage.init(bytes:length:)((unint64_t)&v28, v8);
          LODWORD(v28) = 0;
          HIDWORD(v28) = v8;
          uint64_t v29 = v9;
LABEL_13:
          Data.InlineSlice.resetBytes(in:)(a1, a2);
          uint64_t v10 = v28;
          unint64_t v13 = v29 | 0x4000000000000000;
        }
        goto LABEL_20;
      }
      if (BYTE6(v3) < a1)
      {
        __break(1u);
LABEL_30:
        __break(1u);
      }
      else
      {
        size_t v15 = a2 - a1;
        if (!__OFSUB__(a2, a1))
        {
          bzero((char *)&v23 + a1, v15);
          uint64_t v10 = v23;
          unint64_t v13 = v24 | ((unint64_t)v25 << 32) | ((unint64_t)v26 << 40) | ((unint64_t)v27 << 48);
          goto LABEL_20;
        }
      }
      __break(1u);
      goto LABEL_32;
  }
}

uint64_t Data._Representation.endIndex.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t result = a1 >> 32;
      break;
    case 2uLL:
      uint64_t result = *(void *)(a1 + 24);
      break;
    case 3uLL:
      return result;
    default:
      uint64_t result = BYTE6(a2);
      break;
  }
  return result;
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Data._Representation.startIndex.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t result = (int)a1;
      break;
    case 2uLL:
      uint64_t result = *(void *)(a1 + 16);
      break;
    default:
      return result;
  }
  return result;
}

char *closure #1 in closure #1 in Data._Representation.replaceSubrange(_:with:count:)(char *__src, int a2, int64_t a3, uint64_t a4, char *__dst, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = __src;
  if (a3 >= 1 && __dst)
  {
    if (!__src)
    {
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    char __src = (char *)memmove(__dst, __src, a3);
  }
  if (a4 >= a7 || !__dst) {
    return __src;
  }
  if (!v10) {
    goto LABEL_16;
  }
  size_t v11 = a7 - a4;
  if (__OFSUB__(a7, a4))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_17:
    char __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }

  return (char *)memmove(&__dst[a4], &v10[a4], v11);
}

uint64_t Data._Representation.subscript.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a1 >= a2 >> 32 || (int)a2 > a1) {
        goto LABEL_17;
      }
      uint64_t v4 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v4)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      uint64_t v5 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      BOOL v6 = __OFSUB__(a1, v5);
      uint64_t v7 = a1 - v5;
      if (!v6) {
        return *(unsigned __int8 *)(v4 + v7);
      }
      __break(1u);
LABEL_10:
      if (*(void *)(a2 + 16) > a1)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      if (*(void *)(a2 + 24) <= a1)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
      }
      uint64_t v4 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v4)
      {
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EDB7D8);
      }
      uint64_t v8 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      BOOL v6 = __OFSUB__(a1, v8);
      uint64_t v7 = a1 - v8;
      if (v6) {
        goto LABEL_20;
      }
      return *(unsigned __int8 *)(v4 + v7);
    case 2uLL:
      goto LABEL_10;
    case 3uLL:
      __break(1u);
      goto LABEL_22;
    default:
      if (a1 < BYTE6(a3))
      {
        uint64_t v9 = a2;
        __int16 v10 = a3;
        char v11 = BYTE2(a3);
        char v12 = BYTE3(a3);
        char v13 = BYTE4(a3);
        char v14 = BYTE5(a3);
        return *((unsigned __int8 *)&v9 + a1);
      }
      __break(1u);
LABEL_17:
      __break(1u);
      goto LABEL_18;
  }
}

void (*Data._Representation.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = Data._Representation.subscript.getter(a2, *(void *)v2, *(void *)(v2 + 8));
  return Data._Representation.subscript.modify;
}

void Data._Representation.subscript.modify(uint64_t a1)
{
}

void *Data._Representation.copyBytes(to:from:)(void *__dst, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (uint64_t)__dst;
  switch(a5 >> 62)
  {
    case 1uLL:
      if (a4 >> 32 < a3 || (int)a4 > a3 || a4 >> 32 < a2 || (int)a4 > a2) {
        goto LABEL_33;
      }
      swift_retain();
      __DataStorage.copyBytes(to:from:)(v9, a2, a3);
      return (void *)outlined consume of Data._Representation(a4, a5);
    case 2uLL:
      uint64_t v12 = *(void *)(a4 + 16);
      if (v12 > a2) {
        goto LABEL_34;
      }
      uint64_t v13 = *(void *)(a4 + 24);
      if (v13 < a3 || v12 > a3 || v13 < a2) {
        goto LABEL_35;
      }
      swift_retain();
      swift_retain();
      __DataStorage.copyBytes(to:from:)(v9, a2, a3);
      swift_release();
      return (void *)swift_release();
    case 3uLL:
      if (!(a3 | a2)) {
        return __dst;
      }
      __break(1u);
      goto LABEL_30;
    default:
      if (BYTE6(a5) < (unint64_t)a2 || BYTE6(a5) < (unint64_t)a3)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
      }
      uint64_t v16 = a4;
      __int16 v17 = a5;
      char v18 = BYTE2(a5);
      char v19 = BYTE3(a5);
      char v20 = BYTE4(a5);
      int64_t v11 = a3 - a2;
      char v21 = BYTE5(a5);
      if (a3 - a2 > 13)
      {
LABEL_30:
        int64_t v11 = 14;
      }
      else if (v11 < 1)
      {
        return __dst;
      }
      return memcpy(__dst, (char *)&v16 + a2, v11);
  }
}

uint64_t Data._representation.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t Data._representation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*Data._representation.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t Data.init<A>(buffer:)(unint64_t __src, uint64_t a2, uint64_t a3)
{
  if (__src)
  {
    uint64_t v3 = *(void *)(*(void *)(a3 - 8) + 72);
    uint64_t v4 = a2 * v3;
    if ((unsigned __int128)(a2 * (__int128)v3) >> 64 == (a2 * v3) >> 63)
    {
      if (v4)
      {
        unint64_t v5 = __src;
        if (v4 <= 14)
        {
          return specialized Data.InlineData.init(_:)((unsigned char *)__src, (unsigned char *)(__src + v4));
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          __DataStorage.init(bytes:length:)(v5, v4);
          if ((unint64_t)v4 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            char __src = swift_allocObject();
            *(void *)(__src + 16) = 0;
            *(void *)(__src + 24) = v4;
          }
          else
          {
            return v4 << 32;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return __src;
}

uint64_t Data.init(capacity:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)(v1);
      if (v1 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t closure #2 in Data.init<A>(_:)@<X0>(unint64_t __src@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  if (!__src) {
    goto LABEL_7;
  }
  if (!a2)
  {
    char __src = 0;
LABEL_7:
    unint64_t v7 = 0xC000000000000000;
    goto LABEL_10;
  }
  unint64_t v5 = __src;
  if (a2 <= 14)
  {
    char __src = specialized Data.InlineData.init(_:)((unsigned char *)__src, (unsigned char *)(__src + a2));
    unint64_t v7 = v8 & 0xFFFFFFFFFFFFFFLL;
  }
  else
  {
    type metadata accessor for __DataStorage();
    uint64_t v6 = swift_allocObject();
    __DataStorage.init(bytes:length:)(v5, a2);
    if ((unint64_t)a2 >= 0x7FFFFFFF)
    {
      type metadata accessor for Data.RangeReference();
      char __src = swift_allocObject();
      *(void *)(__src + 16) = 0;
      *(void *)(__src + 24) = a2;
      unint64_t v7 = v6 | 0x8000000000000000;
    }
    else
    {
      char __src = a2 << 32;
      unint64_t v7 = v6 | 0x4000000000000000;
    }
  }
LABEL_10:
  *a3 = __src;
  a3[1] = v7;
  return __src;
}

uint64_t closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  __int16 v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11) {
    v14[1] = v4;
  }
  swift_getAssociatedTypeWitness();
  uint64_t v12 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  uint64_t result = dispatch thunk of Sequence._copyContents(initializing:)();
  *(void *)(a4 + v12) = result;
  return result;
}

uint64_t Data.init<A>(bytes:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, unint64_t, double))(v6 + 16))(v9, a1, a2, v7);
  uint64_t v10 = Data.init<A>(_:)((uint64_t)v9, a2, a3);
  (*(void (**)(uint64_t, unint64_t))(v6 + 8))(a1, a2);
  return v10;
}

unsigned char *Data.init(bytes:)(uint64_t a1)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  uint64_t v9 = &protocol witness table for <A> [A];
  v7[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v7, v8);
  uint64_t v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized Data._Representation.init(_:)(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  swift_bridgeObjectRelease();
  return v5;
}

void *Data.init(bytes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = specialized Data.init<A>(_:)(a1, a2, a3, a4);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t *key path getter for Data._Representation.count : Data._Representation@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[1];
  uint64_t v4 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v2), v2))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x181EDC1DCLL);
      }
      *a2 = HIDWORD(v2) - (int)v2;
      break;
    case 2uLL:
      uint64_t v7 = v2 + 16;
      uint64_t v6 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v7 + 8);
      BOOL v8 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_8;
    case 3uLL:
LABEL_6:
      *a2 = v4;
      break;
    default:
      *a2 = BYTE6(v3);
      break;
  }
  return result;
}

void Data.count.setter(int64_t a1)
{
  if (a1 < 0) {
    __break(1u);
  }
  else {
    Data._Representation.count.setter(a1);
  }
}

void (*Data.count.modify(void *a1))(int64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x181EDC27CLL);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      *a1 = v4;
      return Data.count.modify;
    case 2uLL:
      uint64_t v7 = v2 + 16;
      uint64_t v6 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v7 + 8);
      BOOL v8 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v4 = BYTE6(v3);
      goto LABEL_6;
  }
}

void Data.count.modify(int64_t *a1, char a2)
{
  int64_t v2 = *a1;
  if (a2)
  {
    if ((v2 & 0x8000000000000000) == 0)
    {
LABEL_5:
      Data._Representation.count.setter(v2);
      return;
    }
    __break(1u);
  }
  if ((v2 & 0x8000000000000000) == 0) {
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t Data.regions.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t Data.withUnsafeBytes<A, B>(_:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a5;
  uint64_t v12 = a6;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a3, a3 >> 32, (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in Data.withUnsafeBytes<A, B>(_:));
      uint64_t result = outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      swift_retain();
      swift_retain();
      Data.LargeSlice.withUnsafeBytes<A>(_:)((uint64_t)partial apply for closure #1 in Data.withUnsafeBytes<A, B>(_:), (uint64_t)v10, a3, (void *)(a4 & 0x3FFFFFFFFFFFFFFFLL));
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v9, 0, 14);
      goto LABEL_7;
    default:
      v9[0] = a3;
      LOWORD(v9[1]) = a4;
      BYTE2(v9[1]) = BYTE2(a4);
      BYTE3(v9[1]) = BYTE3(a4);
      BYTE4(v9[1]) = BYTE4(a4);
      BYTE5(v9[1]) = BYTE5(a4);
LABEL_7:
      uint64_t result = a1(v9);
      break;
  }
  return result;
}

uint64_t specialized Data.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
      }
      uint64_t v6 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v6)
      {
        uint64_t v7 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (!__OFSUB__((int)a1, v7))
        {
          BOOL v8 = (char *)(v6 + (int)a1 - v7);
          if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (a1 >> 32) - (int)a1) {
            uint64_t v9 = (a1 >> 32) - (int)a1;
          }
          else {
            uint64_t v9 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          outlined copy of Data._Representation(a1, a2);
          uint64_t v10 = specialized String.init<A, B>(_validating:as:)(v8, v9);
          outlined consume of Data._Representation(a1, a2);
          return v10;
        }
        goto LABEL_25;
      }
LABEL_20:
      uint64_t v5 = 0;
LABEL_21:
      uint64_t v4 = 0;
      return specialized String.init<A, B>(_validating:as:)(v5, v4);
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t v13 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v13)
      {
        uint64_t v14 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v15 = __OFSUB__(v11, v14);
        uint64_t v16 = v11 - v14;
        if (v15) {
          goto LABEL_26;
        }
        BOOL v15 = __OFSUB__(v12, v11);
        uint64_t v17 = v12 - v11;
        if (!v15)
        {
          char v18 = (char *)(v13 + v16);
          if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v17) {
            uint64_t v19 = v17;
          }
          else {
            uint64_t v19 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          swift_retain();
          swift_retain();
          uint64_t v10 = specialized String.init<A, B>(_validating:as:)(v18, v19);
          swift_release();
          swift_release();
          return v10;
        }
      }
      else if (!__OFSUB__(v12, v11))
      {
        goto LABEL_20;
      }
      goto LABEL_24;
    case 3uLL:
      memset(v21, 0, 14);
      uint64_t v5 = (char *)v21;
      goto LABEL_21;
    default:
      v21[0] = a1;
      LOWORD(v21[1]) = a2;
      BYTE2(v21[1]) = BYTE2(a2);
      BYTE3(v21[1]) = BYTE3(a2);
      BYTE4(v21[1]) = BYTE4(a2);
      uint64_t v4 = BYTE6(a2);
      BYTE5(v21[1]) = BYTE5(a2);
      uint64_t v5 = (char *)v21;
      return specialized String.init<A, B>(_validating:as:)(v5, v4);
  }
}

void *specialized Data.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a3, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))closure #2 in String.init<A>(bytes:encoding:), (void (*)(uint64_t *__return_ptr))closure #1 in closure #2 in String.init<A>(bytes:encoding:));
}

{
  return specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a3, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))closure #3 in String.init<A>(bytes:encoding:), (void (*)(uint64_t *__return_ptr))closure #1 in closure #3 in String.init<A>(bytes:encoding:));
}

void *specialized Data.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t *__return_ptr))
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = v5;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
        goto LABEL_35;
      }
      uint64_t v23 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v23)
      {
        uint64_t v24 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (!__OFSUB__((int)a1, v24))
        {
          uint64_t v25 = v23 + (int)a1 - v24;
          if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (a1 >> 32) - (int)a1) {
            uint64_t v26 = (a1 >> 32) - (int)a1;
          }
          else {
            uint64_t v26 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          outlined copy of Data._Representation(a1, a2);
          a4(&v30, v25, v26, a3);
          if (v5) {
            return (void *)outlined consume of Data._Representation(a1, a2);
          }
          uint64_t v29 = v30;
          goto LABEL_31;
        }
LABEL_37:
        __break(1u);
      }
      uint64_t v28 = outlined copy of Data._Representation(a1, a2);
      MEMORY[0x1F4188790](v28);
      a5(&v30);
      if (v5)
      {
LABEL_38:
        swift_willThrow();
        __break(1u);
        JUMPOUT(0x181EDCBE8);
      }
      uint64_t v29 = v30;
LABEL_31:
      outlined consume of Data._Representation(a1, a2);
      return (void *)v29;
    case 2uLL:
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      uint64_t v16 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v16)
      {
        uint64_t v17 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v18 = __OFSUB__(v14, v17);
        uint64_t v19 = v14 - v17;
        if (v18)
        {
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        BOOL v18 = __OFSUB__(v15, v14);
        uint64_t v20 = v15 - v14;
        if (!v18)
        {
          uint64_t v21 = v16 + v19;
          if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v20) {
            uint64_t v22 = v20;
          }
          else {
            uint64_t v22 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          swift_retain();
          swift_retain();
          a4(&v30, v21, v22, a3);
          if (v8)
          {
            swift_release();
            return (void *)swift_release();
          }
          uint64_t v29 = v30;
          goto LABEL_29;
        }
      }
      else if (!__OFSUB__(v15, v14))
      {
        swift_retain();
        uint64_t v27 = swift_retain();
        MEMORY[0x1F4188790](v27);
        a5(&v30);
        if (v5) {
          goto LABEL_38;
        }
        uint64_t v29 = v30;
LABEL_29:
        swift_release();
        swift_release();
        return (void *)v29;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    case 3uLL:
      MEMORY[0x1F4188790](a1);
      a5(&v30);
      if (v5) {
        goto LABEL_38;
      }
      return (void *)v30;
    default:
      uint64_t v30 = a1;
      __int16 v31 = a2;
      char v32 = BYTE2(a2);
      char v33 = BYTE3(a2);
      char v34 = BYTE4(a2);
      char v35 = BYTE5(a2);
      uint64_t result = ((void *(*)(long long *__return_ptr, uint64_t *, void, uint64_t))a4)(&v36, &v30, BYTE6(a2), a3);
      if (v5) {
        return result;
      }
      return (void *)v36;
  }
}

id specialized Data.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v31[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 >= (int)a1)
      {
        uint64_t v7 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v7)
        {
          id v28 = objc_allocWithZone((Class)NSString);
          outlined copy of Data._Representation(a1, a2);
          id v12 = objc_msgSend(v28, sel_initWithBytes_length_encoding_, 0, 0, a3);
LABEL_26:
          if (v12)
          {
            uint64_t v29 = v12;
            id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

            outlined consume of Data._Representation(a1, a2);
            return v25;
          }
          outlined consume of Data._Representation(a1, a2);
          return 0;
        }
        uint64_t v8 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (!__OFSUB__((int)a1, v8))
        {
          uint64_t v9 = v7 + (int)a1 - v8;
          if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (a1 >> 32) - (int)a1) {
            uint64_t v10 = (a1 >> 32) - (int)a1;
          }
          else {
            uint64_t v10 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          id v11 = objc_allocWithZone((Class)NSString);
          outlined copy of Data._Representation(a1, a2);
          id v12 = objc_msgSend(v11, sel_initWithBytes_length_encoding_, v9, v10, a3);
          goto LABEL_26;
        }
LABEL_35:
        __break(1u);
      }
      __break(1u);
      goto LABEL_33;
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
      uint64_t v15 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v15)
      {
        if (!__OFSUB__(v14, v13))
        {
          id v26 = objc_allocWithZone((Class)NSString);
          swift_retain();
          swift_retain();
          id v23 = objc_msgSend(v26, sel_initWithBytes_length_encoding_, 0, 0, a3);
          goto LABEL_23;
        }
        goto LABEL_33;
      }
      uint64_t v16 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      BOOL v17 = __OFSUB__(v13, v16);
      uint64_t v18 = v13 - v16;
      if (v17)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      BOOL v17 = __OFSUB__(v14, v13);
      uint64_t v19 = v14 - v13;
      if (v17)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      uint64_t v20 = v15 + v18;
      if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      }
      id v22 = objc_allocWithZone((Class)NSString);
      swift_retain();
      swift_retain();
      id v23 = objc_msgSend(v22, sel_initWithBytes_length_encoding_, v20, v21, a3);
LABEL_23:
      if (!v23)
      {
        swift_release();
        swift_release();
        return 0;
      }
      uint64_t v27 = v23;
      id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      swift_release();
      swift_release();

      return v25;
    case 3uLL:
      memset(v31, 0, 14);
      id v6 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v31, 0, a3);
      goto LABEL_18;
    default:
      v31[0] = a1;
      LOWORD(v31[1]) = a2;
      BYTE2(v31[1]) = BYTE2(a2);
      BYTE3(v31[1]) = BYTE3(a2);
      BYTE4(v31[1]) = BYTE4(a2);
      BYTE5(v31[1]) = BYTE5(a2);
      id v6 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v31, BYTE6(a2), a3);
LABEL_18:
      if (!v6) {
        return 0;
      }
      uint64_t v24 = v6;
      id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

      return v25;
  }
}

uint64_t Data.withUnsafeMutableBytes<A, B>(_:)()
{
  return Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in Data.withUnsafeMutableBytes<A, B>(_:));
}

void *Data.copyBytes(to:count:)(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!a2) {
    return result;
  }
  unint64_t v6 = a4 >> 62;
  uint64_t v8 = 0;
  switch(v6)
  {
    case 1uLL:
      uint64_t v8 = (int)a3;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a3 + 16);
      break;
    default:
      break;
  }
  uint64_t v9 = v8 + a2;
  if (__OFADD__(v8, a2)) {
    goto LABEL_12;
  }
  if (v9 < v8)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x181EDD034);
  }
  if (v8 != v9) {
    return Data._Representation.copyBytes(to:from:)(result, v8, v9, a3, a4);
  }
  return result;
}

uint64_t Data.startIndex.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t result = (int)a1;
      break;
    case 2uLL:
      uint64_t result = *(void *)(a1 + 16);
      break;
    default:
      return result;
  }
  return result;
}

void *Data._copyBytesHelper(to:from:)(void *__dst, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a2 != a3) {
    return Data._Representation.copyBytes(to:from:)(__dst, a2, a3, a4, a5);
  }
  return __dst;
}

void *Data.copyBytes(to:from:)(void *__dst, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a2 != a3) {
    return Data._Representation.copyBytes(to:from:)(__dst, a2, a3, a4, a5);
  }
  return __dst;
}

uint64_t Data.copyBytes<A>(to:from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  int64_t v8 = a7 >> 62;
  uint64_t v9 = a3;
  uint64_t v10 = 0;
  switch(a7 >> 62)
  {
    case 1uLL:
      LODWORD(v11) = HIDWORD(a6) - a6;
      if (__OFSUB__(HIDWORD(a6), a6))
      {
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v11 = (int)v11;
LABEL_6:
      if (v11 < 1) {
        return 0;
      }
      if (a5) {
        goto LABEL_16;
      }
      if (a3 != a4)
      {
        uint64_t v15 = *(void *)(a8 - 8);
        a8 -= 8;
        uint64_t v16 = *(void *)(v15 + 72);
        int64_t v8 = a2 * v16;
        if ((unsigned __int128)(a2 * (__int128)v16) >> 64 != (a2 * v16) >> 63)
        {
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v11 = a4 - a3;
        if (__OFSUB__(a4, a3))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        if (v11 < v8) {
          int64_t v8 = a4 - a3;
        }
        uint64_t v17 = a3 + v8;
        if (__OFADD__(a3, v8)) {
          goto LABEL_39;
        }
        if (v17 >= a3) {
          goto LABEL_26;
        }
        __break(1u);
LABEL_16:
        if (v8)
        {
          if (v8 == 1) {
            uint64_t v9 = (int)a6;
          }
          else {
            uint64_t v9 = *(void *)(a6 + 16);
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v18 = *(void *)(*(void *)(a8 - 8) + 72);
        uint64_t v19 = a2 * v18;
        if ((unsigned __int128)(a2 * (__int128)v18) >> 64 == (a2 * v18) >> 63)
        {
          if (v11 < v19) {
            uint64_t v19 = v11;
          }
          uint64_t v17 = v9 + v19;
          if (!__OFADD__(v9, v19))
          {
            if (v17 >= v9)
            {
LABEL_26:
              if (v9 == v17) {
                return 0;
              }
              if (!a1)
              {
LABEL_40:
                __break(1u);
                JUMPOUT(0x181EDD23CLL);
              }
              Data._Representation.copyBytes(to:from:)(a1, v9, v17, a6, a7);
              uint64_t v10 = v17 - v9;
              if (!__OFSUB__(v17, v9)) {
                return v10;
              }
              goto LABEL_36;
            }
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      return 0;
    case 2uLL:
      uint64_t v13 = *(void *)(a6 + 16);
      uint64_t v12 = *(void *)(a6 + 24);
      BOOL v14 = __OFSUB__(v12, v13);
      uint64_t v11 = v12 - v13;
      if (!v14) {
        goto LABEL_6;
      }
      goto LABEL_32;
    case 3uLL:
      return v10;
    default:
      uint64_t v11 = BYTE6(a7);
      goto LABEL_6;
  }
}