uint64_t specialized closure #1 in Rope._Node.distance<A>(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v5 = a2;
  v7 = a4 - a3;
  v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x1F4188790](a1);
    v11 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, void *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t)&v16, v8, v9, v10);
    v12 = __OFSUB__(0, v11);
    result = -v11;
    v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  result = 0;
  if (!v6)
  {
    v14 = (uint64_t *)(v5 + 24 * v4);
    while (1)
    {
      v15 = *v14;
      v14 += 3;
      v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in Rope._Node.distance<A>(from:to:in:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 <= a4)
  {
    if (a3 == a4) {
      return 0;
    }
    uint64_t v11 = 0;
    while ((unint64_t)(~a3 + a4) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (a3 - a4 == --v11) {
        return -v11;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  v12[10] = v4;
  v12[11] = v5;
  MEMORY[0x1F4188790](result);
  uint64_t v9 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, void *))closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)specialized partial apply, (uint64_t)v12, v6, v7, v8);
  BOOL v10 = __OFSUB__(0, v9);
  result = -v9;
  if (v10) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t specialized Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  if (*a2 <= 0 && (a3 & 1) == 0) {
    return 1;
  }
  if (*(unsigned char *)(a4 + 18))
  {
    swift_unknownObjectRetain();
    char v9 = specialized closure #2 in Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(a4 + 16, a4 + 24, a1, a4, a2, a3 & 1);
    swift_unknownObjectRelease();
    return v9 & 1;
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = (v10 >> 8) & 0xF;
    if (v11)
    {
      uint64_t v12 = 1;
      if ((a3 & 1) == 0) {
        uint64_t v12 = 2;
      }
      unint64_t v13 = v11 + 1;
      uint64_t v14 = (v11 << 8) - 256;
      for (uint64_t i = *a2 - 1; i + 1 >= v12; --i)
      {
        *a2 = i;
        --v13;
        v14 -= 256;
        if (v13 < 2) {
          return 0;
        }
      }
      *(void *)(a1 + 8) = v14 | v10 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = -i;
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(uint64_t result, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v7 = result;
  if (!*(unsigned char *)(a4 + 18))
  {
    unint64_t v23 = *(unsigned __int16 *)(a4 + 16);
    unint64_t v24 = *(void *)(result + 8);
    unint64_t v25 = (v24 >> 8) & 0xF;
    unint64_t v26 = v23 - v25;
    if (v23 > v25)
    {
      uint64_t v27 = *a2;
      unint64_t v28 = v25 << 8;
      do
      {
        if (a3)
        {
          if (v27 <= 1)
          {
LABEL_18:
            *(void *)(result + 8) = v28 | v24 & 0xFFFFFFFFFFFFF0FFLL;
            *(void *)(result + 16) = a4;
            return 1;
          }
        }
        else if (v27 < 1)
        {
          goto LABEL_18;
        }
        *a2 = --v27;
        v28 += 256;
        --v26;
      }
      while (v26);
      unint64_t v25 = v23;
    }
    uint64_t v22 = 0;
    *(void *)(result + 8) = v24 & 0xFFFFFFFFFFFFF0FFLL | (v25 << 8);
    return v22;
  }
  unint64_t v8 = (*(void *)(result + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v9 = *(unsigned __int16 *)(a4 + 16);
  if (v8 >= v9)
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v10 = (uint64_t *)(a4 + 24 + 24 * ((*(void *)(result + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  LOBYTE(v12) = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v7, a2, a3 & 1, v11, v12, v13);
  swift_unknownObjectRelease();
  if (v12) {
    goto LABEL_11;
  }
  unint64_t v14 = v8 + 1;
  if (v8 + 1 >= v9)
  {
LABEL_19:
    uint64_t v22 = 0;
LABEL_20:
    swift_unknownObjectRelease();
    return v22;
  }
  uint64_t v15 = *a2;
  v16 = (uint64_t *)(a4 + 24 * v8 + 64);
  while (1)
  {
    uint64_t v17 = *(v16 - 1);
    if (a3) {
      break;
    }
    if (v15 < v17) {
      goto LABEL_10;
    }
LABEL_7:
    v15 -= v17;
    *a2 = v15;
    ++v14;
    v16 += 3;
    if (v9 == v14) {
      goto LABEL_19;
    }
  }
  if (v15 > v17) {
    goto LABEL_7;
  }
LABEL_10:
  *(void *)(v7 + 8) = (((-15 << ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) - 1) & *(void *)(v7 + 8) | (v14 << ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(a4 + 18)) & 0x3C)) | 0xFF);
  uint64_t v18 = *(v16 - 2);
  uint64_t v19 = *(v16 - 1);
  uint64_t v20 = *v16;
  swift_unknownObjectRetain();
  char v21 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v7, a2, a3 & 1, v18, v19, v20);
  result = swift_unknownObjectRelease();
  if (v21)
  {
LABEL_11:
    uint64_t v22 = 1;
    goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)(unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4)
{
  unint64_t v4 = *a4;
  unint64_t v5 = *a1;
  unint64_t v6 = (*a1 >> 8) & 0xF;
  if (v6 >= v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = *a2;
    do
    {
      if (a3)
      {
        if (v7 < 2)
        {
LABEL_7:
          uint64_t v8 = 1;
          goto LABEL_10;
        }
      }
      else if (v7 < 1)
      {
        goto LABEL_7;
      }
      *a2 = --v7;
      ++v6;
    }
    while (v4 != v6);
    uint64_t v8 = 0;
    unint64_t v6 = v4;
  }
LABEL_10:
  *a1 = v5 & 0xFFFFFFFFFFFFF0FFLL | (v6 << 8);
  return v8;
}

uint64_t specialized closure #2 in Rope._Node.seekForward<A>(from:by:in:preferEnd:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v6 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = result;
  unint64_t v12 = *(unsigned __int16 *)result;
  uint64_t v13 = *(void *)(a2 + 24 * ((*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  swift_unknownObjectRetain();
  char v14 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v13);
  swift_unknownObjectRelease();
  if (v14) {
    return 1;
  }
  unint64_t v15 = v6 + 1;
  if (v6 + 1 >= v12) {
    return 0;
  }
  uint64_t v16 = *a5;
  for (uint64_t i = a2 + 24 * v6 + 40; ; i += 24)
  {
    uint64_t v18 = *(void *)(i - 8);
    if (a6) {
      break;
    }
    if (v16 < v18) {
      goto LABEL_9;
    }
LABEL_6:
    v16 -= v18;
    *a5 = v16;
    if (v12 == ++v15) {
      return 0;
    }
  }
  if (v16 > v18) {
    goto LABEL_6;
  }
LABEL_9:
  *(void *)(a3 + 8) = (((-15 << ((4 * *(unsigned char *)(v11 + 2) + 8) & 0x3C)) - 1) & *(void *)(a3 + 8) | (v15 << ((4 * *(unsigned char *)(v11 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v11 + 2)) & 0x3C)) | 0xFF);
  uint64_t v19 = *(void *)(i - 16);
  swift_unknownObjectRetain();
  char v20 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v19);
  result = swift_unknownObjectRelease();
  if (v20) {
    return 1;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._seekBackwardInLeaf<A>(from:by:in:preferEnd:)(unint64_t *a1, void *a2, char a3)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (*a1 >> 8) & 0xF;
  if (v4)
  {
    uint64_t v5 = *a2 - 1;
    unint64_t v6 = v4 + 1;
    uint64_t v7 = (v4 << 8) - 256;
    do
    {
      uint64_t v8 = v5 + 1;
      if (a3)
      {
        if (v8 <= 0)
        {
LABEL_7:
          *a1 = v7 | v3 & 0xFFFFFFFFFFFFF0FFLL;
          *a2 = -v5;
          return 1;
        }
      }
      else if (v8 < 2)
      {
        goto LABEL_7;
      }
      *a2 = v5--;
      --v6;
      v7 -= 256;
    }
    while (v6 >= 2);
  }
  return 0;
}

uint64_t specialized closure #2 in Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v7 = *(unsigned __int16 *)(a4 + 16);
  if (v6 > v7) {
    goto LABEL_47;
  }
  uint64_t v12 = result;
  if (v6 < v7)
  {
    uint64_t v13 = *(void *)(a2 + 24 * ((*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
    swift_unknownObjectRetain();
    char v14 = specialized Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v13);
    result = swift_unknownObjectRelease();
    if (v14) {
      return 1;
    }
  }
  if (!v6) {
    return 0;
  }
  uint64_t v15 = *a5;
  unint64_t v16 = v6 + 1;
  for (uint64_t i = (void *)(a2 + 24 * v6 - 24); ; i -= 3)
  {
    uint64_t v18 = i[1];
    if ((a6 & 1) == 0) {
      break;
    }
    if (v15 < v18) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v19 = __OFSUB__(v15, v18);
    v15 -= v18;
    if (v19)
    {
      __break(1u);
      goto LABEL_46;
    }
    *a5 = v15;
    if (--v16 < 2) {
      return 0;
    }
  }
  if (v18 < v15) {
    goto LABEL_10;
  }
LABEL_13:
  *(void *)(a3 + 8) = (((-15 << ((4 * *(unsigned char *)(v12 + 2) + 8) & 0x3C)) - 1) & *(void *)(a3 + 8) | ((v16 - 2) << ((4 * *(unsigned char *)(v12 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v12 + 2)) & 0x3C)) | 0xFF);
  uint64_t v20 = *a5;
  uint64_t v21 = v18 - *a5;
  if (__OFSUB__(v18, *a5)) {
    goto LABEL_48;
  }
  *a5 = v21;
  uint64_t v22 = *i;
  uint64_t v23 = *(unsigned __int8 *)(*i + 18);
  if (!v23)
  {
    unint64_t v34 = *(unsigned __int16 *)(v22 + 16);
    unint64_t v35 = (*(void *)(a3 + 8) >> 8) & 0xFLL;
    if (v35 >= v34)
    {
LABEL_42:
      __break(1u);
    }
    else
    {
      uint64_t v36 = 1;
      if (a6) {
        uint64_t v36 = 2;
      }
      uint64_t v37 = v36 - 1;
      if (v21 < v36 - 1) {
        uint64_t v37 = v21;
      }
      unint64_t v38 = v18 - (v20 + v37);
      if (v38 >= ~v35 + v34) {
        unint64_t v38 = ~v35 + v34;
      }
      unint64_t v39 = v38 + 1;
      if (v39 >= 5)
      {
        uint64_t v41 = v39 & 3;
        if ((v39 & 3) == 0) {
          uint64_t v41 = 4;
        }
        unint64_t v42 = v39 - v41;
        v35 += v42;
        uint64_t v40 = v21 - v42;
        do
        {
          v21 -= 4;
          v42 -= 4;
        }
        while (v42);
        *a5 = v21;
      }
      else
      {
        uint64_t v40 = v21;
      }
      uint64_t v21 = v35 << 8;
      uint64_t v43 = v34 - v35;
      while (v40 >= v36)
      {
        *a5 = --v40;
        v21 += 256;
        if (!--v43) {
          goto LABEL_42;
        }
      }
    }
    *(void *)(a3 + 8) = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFF0FFLL | v21;
    *(void *)(a3 + 16) = v22;
    return 1;
  }
  unint64_t v24 = (*(void *)(a3 + 8) >> ((4 * v23 + 8) & 0x3C)) & 0xFLL;
  unint64_t v25 = *(unsigned __int16 *)(v22 + 16);
  if (v24 >= v25)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v26 = *(void *)(v22 + 24 + 24 * ((*(void *)(a3 + 8) >> ((4 * v23 + 8) & 0x3C)) & 0xFLL));
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  char v27 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v26);
  swift_unknownObjectRelease();
  if (v27) {
    goto LABEL_24;
  }
  unint64_t v28 = v24 + 1;
  if (v24 + 1 >= v25)
  {
LABEL_46:
    result = swift_unknownObjectRelease();
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v29 = *a5;
  uint64_t v30 = v22 + 24 * v24 + 64;
  while (1)
  {
    uint64_t v31 = *(void *)(v30 - 8);
    if (a6) {
      break;
    }
    if (v29 < v31) {
      goto LABEL_23;
    }
LABEL_20:
    v29 -= v31;
    *a5 = v29;
    ++v28;
    v30 += 24;
    if (v25 == v28) {
      goto LABEL_46;
    }
  }
  if (v29 > v31) {
    goto LABEL_20;
  }
LABEL_23:
  *(void *)(a3 + 8) = (((-15 << ((4 * *(unsigned char *)(v22 + 18) + 8) & 0x3C)) - 1) & *(void *)(a3 + 8) | (v28 << ((4 * *(unsigned char *)(v22 + 18) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v22 + 18)) & 0x3C)) | 0xFF);
  uint64_t v32 = *(void *)(v30 - 16);
  swift_unknownObjectRetain();
  char v33 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v32);
  result = swift_unknownObjectRelease();
  if (v33)
  {
LABEL_24:
    swift_unknownObjectRelease();
    return 1;
  }
LABEL_50:
  __break(1u);
  return result;
}

uint64_t specialized static AttributedStringProtocol.== infix<A>(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a1[2];
  v64[0] = a1[1];
  v64[1] = v4;
  v64[2] = a1[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v64);
  uint64_t v5 = BigString.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v64);
  long long v12 = a1[2];
  v62[0] = a1[1];
  v62[1] = v12;
  long long v63 = a1[3];
  v65[0] = v62[0];
  v65[1] = v12;
  v65[2] = v63;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v65, (uint64_t)v66);
  outlined retain of Locale((uint64_t)v66);
  uint64_t v13 = BigString.endIndex.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  outlined release of Locale((uint64_t)v62);
  uint64_t v51 = v5;
  uint64_t v52 = v7;
  uint64_t v53 = v9;
  uint64_t v54 = v11;
  uint64_t v55 = v13;
  uint64_t v56 = v15;
  uint64_t v57 = v17;
  uint64_t v58 = v19;
  long long v20 = a2[2];
  v61[0] = a2[1];
  v61[1] = v20;
  v61[2] = a2[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v61);
  uint64_t v21 = BigString.startIndex.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  outlined release of Locale((uint64_t)v61);
  long long v28 = a2[2];
  v59[0] = a2[1];
  v59[1] = v28;
  long long v60 = a2[3];
  v67[0] = v59[0];
  v67[1] = v28;
  v67[2] = v60;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v67, (uint64_t)v68);
  outlined retain of Locale((uint64_t)v68);
  uint64_t v29 = BigString.endIndex.getter();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  outlined release of Locale((uint64_t)v59);
  uint64_t v43 = v21;
  uint64_t v44 = v23;
  uint64_t v45 = v25;
  uint64_t v46 = v27;
  uint64_t v47 = v29;
  uint64_t v48 = v31;
  uint64_t v49 = v33;
  uint64_t v50 = v35;
  uint64_t v36 = swift_retain();
  AttributedString.Runs.init(_:in:)(v36, v69);
  uint64_t v37 = swift_retain();
  AttributedString.Runs.init(_:in:)(v37, v71);
  v41[10] = v69[10];
  v41[11] = v69[11];
  uint64_t v42 = v70;
  v41[6] = v69[6];
  v41[7] = v69[7];
  v41[8] = v69[8];
  v41[9] = v69[9];
  v41[2] = v69[2];
  v41[3] = v69[3];
  v41[4] = v69[4];
  v41[5] = v69[5];
  v41[0] = v69[0];
  v41[1] = v69[1];
  v39[10] = v71[10];
  v39[11] = v71[11];
  uint64_t v40 = v72;
  v39[6] = v71[6];
  v39[7] = v71[7];
  v39[8] = v71[8];
  v39[9] = v71[9];
  v39[2] = v71[2];
  v39[3] = v71[3];
  v39[4] = v71[4];
  v39[5] = v71[5];
  v39[0] = v71[0];
  v39[1] = v71[1];
  LOBYTE(v29) = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)v41, v39);
  outlined release of AttributedString.Runs((uint64_t)v71);
  outlined release of AttributedString.Runs((uint64_t)v69);
  swift_release();
  swift_release();
  return v29 & 1;
}

uint64_t partial apply for closure #1 in RegexPatternCache.regex(for:caseInsensitive:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return closure #1 in RegexPatternCache.regex(for:caseInsensitive:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void *)(v2 + 40), *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 48), *(unsigned __int8 *)(v2 + 56), a2);
}

unint64_t lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Regex<AnyRegexOutput> and conformance Regex<A>;
  if (!lazy protocol witness table cache variable for type Regex<AnyRegexOutput> and conformance Regex<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Regex<AnyRegexOutput> and conformance Regex<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AttributedString.AttributeMergePolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181ADDB14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t dispatch thunk of AttributedStringAttributeMutation.setAttributes(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AttributedStringAttributeMutation.mergeAttributes(_:mergePolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AttributedStringAttributeMutation.replaceAttributes(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of AttributedStringProtocol.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AttributedStringProtocol.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AttributedStringProtocol.runs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AttributedStringProtocol.characters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AttributedStringProtocol.unicodeScalars.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of AttributedStringProtocol.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

{
  return (*(uint64_t (**)(void))(a5 + 96))();
}

{
  return (*(uint64_t (**)(void))(a5 + 120))();
}

{
  return (*(uint64_t (**)(void))(a5 + 144))();
}

uint64_t dispatch thunk of AttributedStringProtocol.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

{
  return (*(uint64_t (**)(void))(a6 + 104))();
}

{
  return (*(uint64_t (**)(void))(a6 + 128))();
}

uint64_t dispatch thunk of AttributedStringProtocol.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 88))();
}

{
  return (*(uint64_t (**)(void))(a6 + 112))();
}

{
  return (*(uint64_t (**)(void))(a6 + 136))();
}

void *partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *unint64_t result = v4;
  }
  return result;
}

{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  uint64_t v2 = *(void *)(a2 + 16);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *unint64_t result = v4;
  }
  return result;
}

void *partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(void *a1, void *a2)
{
  return partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(a1, a2);
}

void *partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(void *result, void *a2)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result += *a2;
  }
  return result;
}

void *closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)specialized partial apply(void *a1)
{
  return partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(a1);
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  BOOL v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 != *(void *)(v2 + 16)) {
    return 0;
  }
  if (!v3 || v1 == v2) {
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v1 + 32;
  uint64_t v6 = v2 + 32;
  uint64_t v7 = &v297;
  uint64_t v198 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v199 = v2 + 32;
  uint64_t v200 = v1 + 32;
  uint64_t v201 = v3;
  v203 = &v297;
  while (2)
  {
    uint64_t v9 = 120 * v4++;
    outlined init with copy of String.LocalizationValue.FormatArgument(v5 + v9, (uint64_t)v308);
    outlined init with copy of String.LocalizationValue.FormatArgument(v6 + v9, (uint64_t)v307);
    outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v308, (uint64_t)v296);
    outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v307, (uint64_t)v7);
    switch(v296[112])
    {
      case 1:
        outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296, (uint64_t)v295);
        long long v28 = (_OWORD *)v295[0];
        if (v306 != 1)
        {
          swift_release();
LABEL_129:
          outlined destroy of Any?((uint64_t)v296, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.Storage, String.LocalizationValue.FormatArgument.Storage));
          goto LABEL_147;
        }
        uint64_t v202 = v4;
        uint64_t v194 = *((void *)&v297 + 1);
        uint64_t v29 = (_OWORD *)v297;
        uint64_t v195 = v295[1];
        long long v30 = *(_OWORD *)(v295[0] + 16);
        long long v31 = *(_OWORD *)(v295[0] + 32);
        long long v350 = *(_OWORD *)(v295[0] + 48);
        v349[1] = v31;
        v349[0] = v30;
        long long v32 = *(_OWORD *)(v295[0] + 16);
        long long v33 = *(_OWORD *)(v295[0] + 32);
        v351[2] = v350;
        v351[1] = v33;
        v351[0] = v32;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v351, (uint64_t)v352);
        outlined retain of Locale((uint64_t)v352);
        uint64_t v34 = BigString.startIndex.getter();
        uint64_t v239 = v35;
        uint64_t v240 = v34;
        uint64_t v37 = v36;
        uint64_t v39 = v38;
        outlined release of Locale((uint64_t)v349);
        long long v40 = v28[1];
        v347[1] = v28[2];
        long long v348 = v28[3];
        v347[0] = v40;
        long long v41 = v28[1];
        long long v42 = v28[2];
        v353[2] = v348;
        v353[1] = v42;
        v353[0] = v41;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v353, (uint64_t)v354);
        outlined retain of Locale((uint64_t)v354);
        uint64_t v43 = BigString.endIndex.getter();
        uint64_t v45 = v44;
        uint64_t v47 = v46;
        uint64_t v49 = v48;
        outlined release of Locale((uint64_t)v347);
        uint64_t v335 = v240;
        uint64_t v336 = v239;
        uint64_t v337 = v37;
        uint64_t v338 = v39;
        uint64_t v339 = v43;
        uint64_t v340 = v45;
        uint64_t v341 = v47;
        uint64_t v342 = v49;
        long long v50 = v29[1];
        long long v51 = v29[2];
        long long v346 = v29[3];
        v345[1] = v51;
        v345[0] = v50;
        long long v52 = v29[1];
        long long v53 = v29[2];
        v355[2] = v346;
        v355[1] = v53;
        v355[0] = v52;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v355, (uint64_t)v356);
        outlined retain of Locale((uint64_t)v356);
        uint64_t v54 = BigString.startIndex.getter();
        uint64_t v239 = v55;
        uint64_t v240 = v54;
        uint64_t v57 = v56;
        uint64_t v59 = v58;
        outlined release of Locale((uint64_t)v345);
        long long v60 = v29[1];
        v343[1] = v29[2];
        long long v344 = v29[3];
        v343[0] = v60;
        long long v61 = v29[1];
        long long v62 = v29[2];
        v357[2] = v344;
        v357[1] = v62;
        v357[0] = v61;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v357, (uint64_t)v358);
        outlined retain of Locale((uint64_t)v358);
        uint64_t v63 = BigString.endIndex.getter();
        uint64_t v65 = v64;
        uint64_t v67 = v66;
        uint64_t v69 = v68;
        outlined release of Locale((uint64_t)v343);
        uint64_t v327 = v240;
        uint64_t v328 = v239;
        uint64_t v329 = v57;
        uint64_t v330 = v59;
        uint64_t v331 = v63;
        uint64_t v332 = v65;
        uint64_t v333 = v67;
        uint64_t v334 = v69;
        uint64_t v70 = swift_retain();
        v196 = v28;
        AttributedString.Runs.init(_:in:)(v70, v276);
        long long v283 = v276[10];
        long long v284 = v276[11];
        uint64_t v285 = *(void *)&v276[12];
        long long v279 = v276[6];
        long long v280 = v276[7];
        long long v281 = v276[8];
        long long v282 = v276[9];
        v277[2] = v276[2];
        v277[3] = v276[3];
        v277[4] = v276[4];
        long long v278 = v276[5];
        v277[0] = v276[0];
        v277[1] = v276[1];
        uint64_t v71 = swift_retain();
        v197 = v29;
        AttributedString.Runs.init(_:in:)(v71, v276);
        long long v292 = v276[10];
        long long v293 = v276[11];
        uint64_t v294 = *(void *)&v276[12];
        long long v288 = v276[6];
        long long v289 = v276[7];
        long long v290 = v276[8];
        long long v291 = v276[9];
        v286[2] = v276[2];
        v286[3] = v276[3];
        v286[4] = v276[4];
        long long v287 = v276[5];
        v286[0] = v276[0];
        v286[1] = v276[1];
        uint64_t v72 = *(void *)&v277[0];
        uint64_t v73 = *(void *)&v276[0];
        if (*(void *)&v277[0] == *(void *)&v276[0]
          && (uint64_t v240 = *((void *)&v283 + 1), (static BigString.Index.== infix(_:_:)() & 1) != 0)
          && (static BigString.Index.== infix(_:_:)() & 1) != 0)
        {
          outlined release of AttributedString.Runs((uint64_t)v286);
          outlined release of AttributedString.Runs((uint64_t)v277);
          swift_release();
          swift_release();
        }
        else
        {
          if (__OFSUB__(*((void *)&v277[4] + 1), *((void *)&v277[0] + 1))) {
            goto LABEL_155;
          }
          if (__OFSUB__(*((void *)&v286[4] + 1), *((void *)&v286[0] + 1)))
          {
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            JUMPOUT(0x181AE00E0);
          }
          if (*((void *)&v277[4] + 1) - *((void *)&v277[0] + 1) != *((void *)&v286[4] + 1)
                                                                      - *((void *)&v286[0] + 1))
            goto LABEL_120;
          uint64_t v227 = *((void *)&v281 + 1);
          *(void *)&long long v221 = *((void *)&v282 + 1);
          uint64_t v222 = v282;
          uint64_t v219 = *((void *)&v290 + 1);
          *(void *)&long long v220 = v283;
          uint64_t v217 = *((void *)&v291 + 1);
          uint64_t v218 = v291;
          uint64_t v216 = v292;
          v276[10] = v283;
          v276[11] = v284;
          *(void *)&v276[12] = v285;
          v276[6] = v279;
          v276[7] = v280;
          v276[8] = v281;
          v276[9] = v282;
          v276[2] = v277[2];
          v276[3] = v277[3];
          v276[4] = v277[4];
          v276[5] = v278;
          v276[0] = v277[0];
          v276[1] = v277[1];
          *(_OWORD *)((char *)&v276[12] + 8) = *(_OWORD *)((char *)v277 + 8);
          *(_OWORD *)((char *)&v276[13] + 8) = *(_OWORD *)((char *)&v277[1] + 8);
          *(_OWORD *)((char *)&v276[14] + 8) = *(_OWORD *)((char *)&v277[2] + 8);
          *(_OWORD *)((char *)&v276[15] + 8) = *(_OWORD *)((char *)&v277[3] + 8);
          v275[10] = v292;
          v275[11] = v293;
          *(void *)&v275[12] = v294;
          v275[6] = v288;
          v275[7] = v289;
          v275[8] = v290;
          v275[9] = v291;
          v275[2] = v286[2];
          v275[3] = v286[3];
          v275[4] = v286[4];
          v275[5] = v287;
          v275[0] = v286[0];
          v275[1] = v286[1];
          *(_OWORD *)((char *)&v275[12] + 8) = *(_OWORD *)((char *)v286 + 8);
          *(_OWORD *)((char *)&v275[13] + 8) = *(_OWORD *)((char *)&v286[1] + 8);
          *(_OWORD *)((char *)&v275[14] + 8) = *(_OWORD *)((char *)&v286[2] + 8);
          v208 = (long long *)(v72 + 16);
          v207 = (long long *)(v73 + 16);
          *(_OWORD *)((char *)&v275[15] + 8) = *(_OWORD *)((char *)&v286[3] + 8);
          outlined retain of AttributedString.Runs((uint64_t)v277);
          outlined retain of AttributedString.Runs((uint64_t)v286);
          while (1)
          {
            specialized IndexingIterator.next()((uint64_t)v254);
            v99 = (void *)v254[1];
            uint64_t v100 = v254[2];
            uint64_t v101 = v254[3];
            uint64_t v102 = v254[4];
            uint64_t v103 = v254[5];
            uint64_t v104 = v254[6];
            uint64_t v105 = v254[7];
            *(void *)&long long v238 = v254[8];
            uint64_t v106 = v254[9];
            uint64_t v223 = v254[10];
            uint64_t v224 = v254[0];
            specialized IndexingIterator.next()((uint64_t)&v243);
            uint64_t v107 = v248;
            v255[0] = v224;
            id v228 = v99;
            v255[1] = (uint64_t)v99;
            uint64_t v108 = v224;
            uint64_t v240 = v100;
            v255[2] = v100;
            uint64_t v256 = v101;
            *((void *)&v233 + 1) = v106;
            *(void *)&long long v234 = v102;
            uint64_t v257 = v102;
            *(void *)&long long v235 = v103;
            uint64_t v258 = v103;
            uint64_t v236 = v104;
            *(void *)&long long v237 = v105;
            uint64_t v259 = v104;
            uint64_t v109 = v243;
            uint64_t v260 = v105;
            uint64_t v261 = v238;
            uint64_t v262 = v106;
            uint64_t v263 = v223;
            uint64_t v264 = v243;
            uint64_t v265 = v244;
            uint64_t v231 = v245;
            uint64_t v232 = v246;
            uint64_t v266 = v245;
            uint64_t v267 = v246;
            uint64_t v239 = v247;
            uint64_t v268 = v247;
            uint64_t v269 = v248;
            uint64_t v270 = v249;
            *(void *)&long long v233 = v250;
            uint64_t v271 = v250;
            *(void *)&long long v230 = v252;
            *((void *)&v230 + 1) = v251;
            uint64_t v272 = v251;
            uint64_t v273 = v252;
            uint64_t v229 = v253;
            uint64_t v274 = v253;
            if (!v224) {
              break;
            }
            if (!v243) {
              goto LABEL_118;
            }
            uint64_t v110 = v244;
            uint64_t v111 = v249;
            uint64_t v112 = (uint64_t)v228;
            outlined copy of AttributedString.Runs.Run?(v224);
            uint64_t v226 = v107;
            outlined copy of AttributedString.Runs.Run?(v109);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((specialized static Dictionary<>.== infix(_:_:)(v108, v109) & 1) == 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_117:
              outlined consume of AttributedString.Runs.Run?(v108);
              outlined consume of AttributedString.Runs.Run?(v109);
              goto LABEL_118;
            }
            char v113 = specialized static Set.== infix(_:_:)(v112, v110);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v113 & 1) == 0) {
              goto LABEL_117;
            }
            uint64_t v213 = v110;
            uint64_t v214 = v109;
            uint64_t v215 = v111;
            long long v114 = *v208;
            v325[1] = v208[1];
            long long v326 = v208[2];
            v325[0] = v114;
            long long v115 = *v208;
            long long v116 = v208[1];
            v359[2] = v326;
            v359[1] = v116;
            v359[0] = v115;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v359, (uint64_t)v360);
            outlined retain of Locale((uint64_t)v360);
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)v325);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v225 = BigString.Index.utf8Offset.getter();
            uint64_t v117 = BigString.Index.utf8Offset.getter();
            uint64_t v205 = v101;
            outlined consume of AttributedString.Runs.Run?(v108);
            if (__OFSUB__(v117, v225))
            {
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
              goto LABEL_156;
            }
            uint64_t v209 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v210 = v118;
            uint64_t v211 = v120;
            uint64_t v212 = v119;
            outlined release of Locale((uint64_t)&v309);
            long long v121 = *v207;
            v323[1] = v207[1];
            long long v324 = v207[2];
            v323[0] = v121;
            long long v122 = *v207;
            long long v123 = v207[1];
            v361[2] = v324;
            v361[1] = v123;
            v361[0] = v122;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v361, (uint64_t)v362);
            outlined retain of Locale((uint64_t)v362);
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)v323);
            uint64_t v124 = v214;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v225 = BigString.Index.utf8Offset.getter();
            uint64_t v206 = BigString.Index.utf8Offset.getter();
            outlined consume of AttributedString.Runs.Run?(v124);
            if (__OFSUB__(v206, v225)) {
              goto LABEL_151;
            }
            uint64_t v225 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v204 = v125;
            uint64_t v206 = v126;
            uint64_t v128 = v127;
            outlined release of Locale((uint64_t)&v310);
            long long v129 = *v208;
            long long v130 = v208[2];
            v322[1] = v208[1];
            v322[2] = v130;
            v322[0] = v129;
            long long v131 = *v208;
            long long v132 = v208[1];
            v363[2] = v130;
            v363[1] = v132;
            v363[0] = v131;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v363, (uint64_t)v364);
            outlined retain of Locale((uint64_t)v364);
            uint64_t v133 = v209;
            uint64_t v134 = v210;
            uint64_t v135 = v211;
            uint64_t v136 = v212;
            uint64_t v137 = v222;
            uint64_t v138 = v221;
            uint64_t v139 = v220;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_152;
            }
            uint64_t v314 = v227;
            uint64_t v315 = v137;
            uint64_t v316 = v138;
            uint64_t v317 = v139;
            uint64_t v318 = v133;
            uint64_t v319 = v134;
            uint64_t v320 = v136;
            uint64_t v321 = v135;
            BigString.subscript.getter();
            outlined release of Locale((uint64_t)v322);
            long long v140 = *v207;
            long long v141 = v207[2];
            v313[1] = v207[1];
            v313[2] = v141;
            v313[0] = v140;
            long long v142 = *v207;
            long long v143 = v207[1];
            v365[2] = v141;
            v365[1] = v143;
            v365[0] = v142;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v365, (uint64_t)v366);
            outlined retain of Locale((uint64_t)v366);
            uint64_t v144 = v204;
            uint64_t v145 = v206;
            uint64_t v146 = v128;
            uint64_t v147 = v218;
            uint64_t v148 = v219;
            uint64_t v150 = v216;
            uint64_t v149 = v217;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_153;
            }
            v312[14] = v148;
            v312[15] = v147;
            v312[16] = v149;
            v312[17] = v150;
            v312[18] = v225;
            v312[19] = v144;
            v312[20] = v145;
            uint64_t v151 = v146;
            v312[21] = v146;
            BigString.subscript.getter();
            outlined release of Locale((uint64_t)v313);
            char v152 = MEMORY[0x185301310](v311, v312);
            outlined consume of AttributedString.Runs.Run?(v224);
            outlined consume of AttributedString.Runs.Run?(v214);
            outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(v255);
            outlined release of Locale((uint64_t)v312);
            outlined release of Locale((uint64_t)v311);
            if ((v152 & 1) == 0) {
              goto LABEL_119;
            }
            uint64_t v218 = v144;
            uint64_t v219 = v225;
            uint64_t v216 = v151;
            uint64_t v217 = v145;
            uint64_t v227 = v209;
            uint64_t v222 = v210;
            *(void *)&long long v221 = v212;
            *(void *)&long long v220 = v211;
          }
          if (v243)
          {
LABEL_118:
            outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(v255);
LABEL_119:
            memcpy(v241, v275, sizeof(v241));
            outlined release of AttributedString.Runs((uint64_t)v241);
            memcpy(v242, v276, 0x108uLL);
            outlined release of AttributedString.Runs((uint64_t)v242);
LABEL_120:
            outlined release of AttributedString.Runs((uint64_t)v286);
            outlined release of AttributedString.Runs((uint64_t)v277);
            swift_release();
            swift_release();
            goto LABEL_146;
          }
          outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(v255);
          memcpy(v241, v275, sizeof(v241));
          outlined release of AttributedString.Runs((uint64_t)v241);
          memcpy(v242, v276, 0x108uLL);
          outlined release of AttributedString.Runs((uint64_t)v242);
          outlined release of AttributedString.Runs((uint64_t)v286);
          outlined release of AttributedString.Runs((uint64_t)v277);
          swift_release();
          swift_release();
        }
        outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296);
        uint64_t v3 = v201;
        uint64_t v4 = v202;
        uint64_t v6 = v199;
        uint64_t v5 = v200;
        uint64_t v7 = v203;
        if (v195 != v194) {
          goto LABEL_147;
        }
LABEL_7:
        outlined destroy of String.LocalizationValue.FormatArgument((uint64_t)v307);
        outlined destroy of String.LocalizationValue.FormatArgument((uint64_t)v308);
        uint64_t result = 1;
        if (v4 == v3) {
          return result;
        }
        continue;
      case 2:
        outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296, (uint64_t)v276);
        if (v306 != 2)
        {
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v276);
          goto LABEL_129;
        }
        v275[2] = v276[2];
        v275[3] = v276[3];
        v275[4] = v276[4];
        v275[5] = v276[5];
        v275[0] = v276[0];
        v275[1] = v276[1];
        long long v74 = v7[3];
        v242[2] = v7[2];
        v242[3] = v74;
        long long v75 = v7[5];
        v242[4] = v7[4];
        v242[5] = v75;
        long long v76 = v7[1];
        v242[0] = *v7;
        v242[1] = v76;
        char v77 = (*(uint64_t (**)(long long *))&v276[1])(v242);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v242);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v275);
        goto LABEL_6;
      case 3:
        outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296, (uint64_t)v276);
        if (v306 != 3)
        {
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)v276);
          goto LABEL_129;
        }
        v275[2] = v276[2];
        v275[3] = v276[3];
        v275[4] = v276[4];
        v275[5] = v276[5];
        v275[0] = v276[0];
        v275[1] = v276[1];
        long long v78 = v7[3];
        v242[2] = v7[2];
        v242[3] = v78;
        long long v79 = v7[5];
        v242[4] = v7[4];
        v242[5] = v79;
        long long v80 = v7[1];
        v242[0] = *v7;
        v242[1] = v80;
        char v77 = (*(uint64_t (**)(long long *))&v276[1])(v242);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)v242);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)v275);
        goto LABEL_6;
      case 4:
        outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296, (uint64_t)v276);
        uint64_t v81 = *(void *)&v276[1];
        uint64_t v82 = *(void *)&v276[2];
        uint64_t v240 = *(void *)&v276[3];
        long long v238 = *(_OWORD *)((char *)&v276[3] + 8);
        v83 = (void *)*((void *)&v276[4] + 1);
        if (v306 != 4)
        {

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_129;
        }
        long long v233 = v276[5];
        *(void *)&long long v234 = *((void *)&v276[6] + 1);
        uint64_t v202 = v4;
        uint64_t v84 = *((void *)&v276[1] + 1);
        id v228 = (id)*((void *)&v276[2] + 1);
        uint64_t v85 = *((void *)&v297 + 1);
        long long v86 = v298;
        uint64_t v236 = v299;
        id v87 = v300;
        long long v237 = v302;
        uint64_t v239 = v301;
        long long v230 = v303;
        uint64_t v231 = v304;
        uint64_t v232 = v305;
        if (v276[0] != v297 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_135;
        }
        uint64_t v229 = v85;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v88 = v236;
        swift_bridgeObjectRetain();
        *(void *)&long long v235 = v86;
        if ((specialized static Array<A>.== infix(_:_:)(v81, v86) & 1) == 0)
        {

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
LABEL_135:
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_140;
        }
        if (v84 == *((void *)&v86 + 1) && v82 == v88)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v89 = *((void *)&v233 + 1);
        }
        else
        {
          char v188 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v89 = *((void *)&v233 + 1);
          if ((v188 & 1) == 0)
          {

            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_140;
          }
        }
        if (v240)
        {
          long long v189 = v237;
          long long v190 = v238;
          if (!v239) {
            goto LABEL_132;
          }
          if (v228 != v87 || v240 != v239)
          {
            char v191 = _stringCompareWithSmolCheck(_:_:expecting:)();
            long long v189 = v237;
            long long v190 = v238;
            if ((v191 & 1) == 0)
            {
LABEL_138:

              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
LABEL_139:
              swift_bridgeObjectRelease();
LABEL_140:
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_146;
            }
          }
        }
        else
        {
          long long v189 = v237;
          long long v190 = v238;
          if (v239) {
            goto LABEL_138;
          }
        }
        v275[0] = v190;
        v242[0] = v189;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)v275, (uint64_t)v242) & 1) == 0)
        {
LABEL_132:

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_139;
        }
        *(void *)&v275[0] = v83;
        *((void *)&v275[0] + 1) = v233;
        *(void *)&v275[1] = v89;
        v192 = (void *)v230;
        v242[0] = v230;
        *(void *)&v242[1] = v231;
        unsigned __int8 v193 = specialized static URL.== infix(_:_:)((uint64_t)v275, (uint64_t *)v242);

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296);
        uint64_t v3 = v201;
        uint64_t v4 = v202;
        uint64_t v6 = v199;
        uint64_t v5 = v200;
        uint64_t v7 = v203;
        if ((v193 & 1) == 0) {
          goto LABEL_147;
        }
        goto LABEL_7;
      case 5:
        outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296, (uint64_t)v276);
        uint64_t v90 = *(void *)&v276[0];
        long long v221 = v276[1];
        if (v306 != 5)
        {
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          goto LABEL_129;
        }
        uint64_t v91 = v297;
        long long v220 = v298;
        uint64_t v92 = *(void *)(*(void *)&v276[0] + 16);
        if (v92 != *(void *)(v297 + 16)) {
          goto LABEL_143;
        }
        LODWORD(v216) = BYTE8(v276[0]);
        int v93 = BYTE9(v276[0]);
        LODWORD(v215) = BYTE8(v297);
        int v94 = BYTE9(v297);
        if (!v92 || *(void *)&v276[0] == (void)v297) {
          goto LABEL_100;
        }
        LODWORD(v213) = BYTE9(v297);
        LODWORD(v214) = BYTE9(v276[0]);
        uint64_t v202 = v4;
        uint64_t v95 = 0;
        unint64_t v96 = 0;
        uint64_t v218 = v297;
        uint64_t v219 = *(void *)&v276[0];
        uint64_t v217 = v92;
        break;
      case 6:
        outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296, (uint64_t)v276);
        if (v306 != 6) {
          goto LABEL_129;
        }
        int v97 = LOBYTE(v276[0]);
        int v98 = v297;
        outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296);
        if (v97 != v98) {
          goto LABEL_147;
        }
        goto LABEL_7;
      default:
        outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296, (uint64_t)v276);
        if (!v306)
        {
          outlined init with take of Any(v276, v241);
          outlined init with take of Any(v7, v286);
          uint64_t v10 = *(void *)&v241[24];
          uint64_t v11 = __swift_project_boxed_opaque_existential_1(v241, *(uint64_t *)&v241[24]);
          *((void *)&v277[1] + 1) = v10;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v277);
          (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v11, v10);
          uint64_t v13 = *((void *)&v286[1] + 1);
          uint64_t v14 = __swift_project_boxed_opaque_existential_1(v286, *((uint64_t *)&v286[1] + 1));
          uint64_t v256 = v13;
          uint64_t v15 = __swift_allocate_boxed_opaque_existential_1(v255);
          (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v15, v14, v13);
          outlined init with copy of Any((uint64_t)v277, (uint64_t)v295);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Equatable);
          if (swift_dynamicCast())
          {
            uint64_t v202 = v4;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v242, (uint64_t)v275);
            uint64_t v16 = *((void *)&v275[1] + 1);
            uint64_t v240 = *(void *)&v275[2];
            uint64_t v17 = __swift_project_boxed_opaque_existential_1(v275, *((uint64_t *)&v275[1] + 1));
            uint64_t v18 = *(void *)(v16 - 8);
            MEMORY[0x1F4188790](v17);
            long long v20 = (char *)&v194 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of Any((uint64_t)v255, (uint64_t)v242);
            uint64_t v21 = type metadata accessor for Optional();
            uint64_t v22 = *(void *)(v21 - 8);
            MEMORY[0x1F4188790](v21);
            uint64_t v24 = (char *)&v194 - v23;
            int v25 = swift_dynamicCast();
            uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
            if (v25)
            {
              v26(v24, 0, 1, v16);
              (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v24, v16);
              char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v16);
            }
            else
            {
              v26(v24, 1, 1, v16);
              (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
              char v27 = 0;
            }
            uint64_t v3 = v201;
            uint64_t v4 = v202;
            uint64_t v6 = v199;
            uint64_t v5 = v200;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v275);
            uint64_t v7 = v203;
          }
          else
          {
            memset(v242, 0, 40);
            outlined destroy of Any?((uint64_t)v242, &demangling cache variable for type metadata for Equatable?);
            char v27 = 0;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v255);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v277);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v286);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v241);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296);
          if ((v27 & 1) == 0) {
            goto LABEL_147;
          }
          goto LABEL_7;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v276);
        goto LABEL_129;
    }
    break;
  }
  while (1)
  {
    unint64_t v155 = *(void *)(v91 + 16);
    uint64_t v225 = v96;
    if (v96 >= v155) {
      goto LABEL_154;
    }
    uint64_t v156 = v90 + v95;
    uint64_t v157 = *(void *)(v90 + v95 + 32);
    uint64_t v158 = *(void *)(v90 + v95 + 40);
    uint64_t v159 = *(void *)(v90 + v95 + 48);
    uint64_t v227 = *(void *)(v90 + v95 + 56);
    uint64_t v160 = *(void *)(v90 + v95 + 64);
    uint64_t v223 = *(void *)(v90 + v95 + 72);
    uint64_t v224 = v95;
    *(void *)&long long v233 = *(void *)(v90 + v95 + 80);
    long long v161 = *(_OWORD *)(v90 + v95 + 88);
    v163 = *(void **)(v90 + v95 + 104);
    uint64_t v162 = *(void *)(v90 + v95 + 112);
    *(void *)&long long v238 = *(void *)(v156 + 120);
    uint64_t v164 = *(void *)(v156 + 136);
    uint64_t v165 = v91 + v95;
    uint64_t v166 = *(void *)(v91 + v95 + 32);
    uint64_t v167 = *(void *)(v91 + v95 + 40);
    uint64_t v168 = *(void *)(v91 + v95 + 48);
    uint64_t v226 = *(void *)(v91 + v95 + 56);
    uint64_t v169 = *(void *)(v91 + v95 + 64);
    uint64_t v222 = *(void *)(v165 + 72);
    *((void *)&v233 + 1) = *(void *)(v165 + 80);
    long long v234 = *(_OWORD *)(v165 + 88);
    long long v235 = v161;
    v170 = *(void **)(v165 + 104);
    uint64_t v236 = *(void *)(v165 + 112);
    *(void *)&long long v237 = v164;
    uint64_t v239 = *(void *)(v165 + 120);
    uint64_t v240 = v169;
    uint64_t v171 = *(void *)(v165 + 136);
    if ((v157 != v166 || v158 != v167) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_143;
    }
    *(void *)&long long v230 = v171;
    swift_bridgeObjectRetain();
    uint64_t v172 = v159;
    swift_bridgeObjectRetain_n();
    uint64_t v173 = v160;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v229 = v158;
    swift_bridgeObjectRetain();
    uint64_t v174 = v233;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    id v228 = v163;
    uint64_t v175 = v162;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v232 = v167;
    uint64_t v176 = v168;
    swift_bridgeObjectRetain();
    uint64_t v177 = *((void *)&v233 + 1);
    swift_bridgeObjectRetain();
    uint64_t v231 = v234;
    swift_unknownObjectRetain();
    *((void *)&v230 + 1) = v170;
    uint64_t v178 = v236;
    swift_retain();
    swift_retain();
    if ((specialized static Array<A>.== infix(_:_:)(v172, v176) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_145;
    }
    if (v227 == v226 && v173 == v240)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v179 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v178 = v236;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v179 & 1) == 0) {
        goto LABEL_121;
      }
    }
    if (v174)
    {
      if (!v177 || (v223 != v222 || v174 != v177) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_121:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_144;
      }
    }
    else if (v177)
    {
      goto LABEL_121;
    }
    v275[0] = v235;
    v242[0] = v234;
    if ((specialized static Locale.== infix(_:_:)((uint64_t)v275, (uint64_t)v242) & 1) == 0) {
      goto LABEL_121;
    }
    if (_foundation_swift_url_feature_enabled()) {
      break;
    }
    id v153 = v228;
    *(void *)&long long v235 = v176;
    v154 = (void *)*((void *)&v230 + 1);
    LODWORD(v236) = objc_msgSend(v228, sel_isEqual_, *((void *)&v230 + 1));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v236 & 1) == 0) {
      goto LABEL_143;
    }
LABEL_52:
    unint64_t v96 = v225 + 1;
    uint64_t v95 = v224 + 112;
    uint64_t v91 = v218;
    uint64_t v7 = v203;
    uint64_t v90 = v219;
    if (v217 == v225 + 1)
    {
      uint64_t v3 = v201;
      uint64_t v4 = v202;
      uint64_t v6 = v199;
      uint64_t v5 = v200;
      int v93 = v214;
      int v94 = v213;
LABEL_100:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v216 != v215 || v93 != v94) {
        goto LABEL_145;
      }
      v275[0] = v221;
      v242[0] = v220;
      char v77 = specialized static Locale.== infix(_:_:)((uint64_t)v275, (uint64_t)v242);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
LABEL_6:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296);
      if ((v77 & 1) == 0) {
        goto LABEL_147;
      }
      goto LABEL_7;
    }
  }
  if (!v175) {
    goto LABEL_157;
  }
  if (!v178) {
    goto LABEL_158;
  }
  if (*(void *)(v175 + 16) == *(void *)(v178 + 16) && *(void *)(v175 + 24) == *(void *)(v178 + 24)
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if ((void)v238)
    {
      uint64_t v181 = *(void *)(v238 + 16);
      uint64_t v180 = *(void *)(v238 + 24);
      swift_bridgeObjectRetain();
      if (!v239)
      {
        if (v180) {
          goto LABEL_88;
        }
LABEL_90:
        id v185 = v228;
        v186 = (void *)*((void *)&v230 + 1);
        unsigned __int8 v187 = objc_msgSend(v228, sel_isEqual_, *((void *)&v230 + 1));
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v187 & 1) == 0) {
          goto LABEL_143;
        }
        goto LABEL_52;
      }
    }
    else
    {
      if (!v239) {
        goto LABEL_90;
      }
      uint64_t v180 = 0;
      uint64_t v181 = 0;
    }
    uint64_t v183 = *(void *)(v239 + 16);
    uint64_t v182 = *(void *)(v239 + 24);
    swift_bridgeObjectRetain();
    if (v180)
    {
      if (!v182) {
        goto LABEL_88;
      }
      if (v181 == v183 && v180 == v182)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v184 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v184 & 1) == 0) {
          goto LABEL_141;
        }
      }
    }
    else if (v182)
    {
LABEL_88:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_142;
    }
    goto LABEL_90;
  }
LABEL_141:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_142:
  swift_bridgeObjectRelease();
LABEL_143:
  swift_bridgeObjectRelease();
LABEL_144:
  swift_bridgeObjectRelease();
LABEL_145:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
LABEL_146:
  outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v296);
LABEL_147:
  outlined destroy of String.LocalizationValue.FormatArgument((uint64_t)v307);
  outlined destroy of String.LocalizationValue.FormatArgument((uint64_t)v308);
  return 0;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v13 = a1;
    uint64_t v14 = a2;
    while (1)
    {
      uint64_t v27 = *(void *)(a1 + v3 + 48);
      uint64_t v18 = *(void *)(a1 + v3 + 56);
      uint64_t v25 = *(void *)(a1 + v3 + 64);
      uint64_t v16 = *(void *)(a1 + v3 + 72);
      uint64_t v28 = *(void *)(a1 + v3 + 80);
      long long v21 = *(_OWORD *)(a1 + v3 + 88);
      uint64_t v4 = *(void **)(a1 + v3 + 104);
      uint64_t v5 = *(void *)(a1 + v3 + 112);
      uint64_t v23 = *(void *)(a1 + v3 + 120);
      uint64_t v17 = *(void *)(a2 + v3 + 56);
      uint64_t v26 = *(void *)(a2 + v3 + 64);
      uint64_t v6 = *(void *)(a2 + v3 + 80);
      uint64_t v15 = *(void *)(a2 + v3 + 72);
      long long v20 = *(_OWORD *)(a2 + v3 + 88);
      uint64_t v7 = *(void **)(a2 + v3 + 104);
      uint64_t v19 = *(void *)(a2 + v3 + 112);
      uint64_t v24 = *(void *)(a2 + v3 + 120);
      if ((*(void *)(a1 + v3 + 32) != *(void *)(a2 + v3 + 32)
         || *(void *)(a1 + v3 + 40) != *(void *)(a2 + v3 + 40))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        return 0;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      id v8 = v4;
      uint64_t v9 = v5;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      id v10 = v7;
      swift_retain();
      swift_retain();
      if ((specialized static Array<A>.== infix(_:_:)(v27) & 1) == 0) {
        break;
      }
      if (v18 == v17 && v25 == v26)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v11 & 1) == 0) {
          goto LABEL_24;
        }
      }
      if (v28)
      {
        if (!v6 || (v16 != v15 || v28 != v6) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
LABEL_26:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else if (v6)
      {
        goto LABEL_24;
      }
      long long v31 = v21;
      long long v29 = v20;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v31, (uint64_t)&v29) & 1) == 0) {
        goto LABEL_24;
      }
      *(void *)&long long v31 = v8;
      *((void *)&v31 + 1) = v9;
      uint64_t v32 = v23;
      *(void *)&long long v29 = v10;
      *((void *)&v29 + 1) = v19;
      uint64_t v30 = v24;
      unsigned __int8 v22 = specialized static URL.== infix(_:_:)((uint64_t)&v31, (uint64_t *)&v29);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0) {
        return 0;
      }
      v3 += 112;
      --v2;
      a1 = v13;
      a2 = v14;
      if (!v2) {
        return 1;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  return 1;
}

{
  uint64_t v2;
  unsigned char *v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  char v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned char *)(a1 + 40);
    uint64_t v4 = (unsigned char *)(a2 + 40);
    do
    {
      uint64_t v5 = *((void *)v3 - 1);
      uint64_t v6 = *((void *)v4 - 1);
      uint64_t v7 = (char)*v4;
      if ((char)*v3 < 0)
      {
        uint64_t result = 0;
        if ((v7 & 0x80000000) == 0 || v5 != v6) {
          return result;
        }
        if (qword_18210BAA0[*v3 & 0x7F] == qword_18210BAA0[*v4 & 0x7F])
        {
LABEL_5:
          swift_bridgeObjectRelease_n();
          goto LABEL_6;
        }
      }
      else
      {
        if (v7 < 0) {
          return 0;
        }
        if (qword_18210BAA0[(char)v5] == qword_18210BAA0[(char)v6]) {
          goto LABEL_5;
        }
      }
      uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v9 & 1) == 0) {
        return 0;
      }
LABEL_6:
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = (unsigned __int8 *)(a1 + 40);
  uint64_t v5 = (unsigned __int8 *)(a2 + 40);
  do
  {
    uint64_t v6 = v3;
    uint64_t v7 = (*((void *)v4 - 1) != *((void *)v5 - 1)) | *v4 ^ *v5;
    if ((*((void *)v4 - 1) != *((void *)v5 - 1)) | (*v4 ^ *v5) & 1) {
      break;
    }
    --v3;
    v4 += 16;
    v5 += 16;
  }
  while (v6);
  return (v7 ^ 1) & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v21;
  uint64_t result;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  long long v40 = a2 + 32;
  long long v41 = a1 + 32;
  while (1)
  {
    uint64_t v7 = 32 * v3++;
    id v8 = *(void *)(v41 + v7);
    uint64_t v9 = *(void *)(v41 + v7 + 8);
    id v10 = *(unsigned __int8 *)(v41 + v7 + 16);
    char v11 = *(void *)(v41 + v7 + 24);
    long long v12 = v40 + v7;
    uint64_t v13 = *(void *)v12;
    uint64_t v14 = *(void *)(v12 + 8);
    uint64_t v15 = *(unsigned __int8 *)(v12 + 16);
    uint64_t v16 = *(void *)(v12 + 24);
    switch(v10)
    {
      case 1:
        if (v15 != 1) {
          goto LABEL_93;
        }
        outlined copy of PresentationIntent.Kind(*(void *)v12, *(void *)(v12 + 8), 1);
        outlined consume of PresentationIntent.Kind(v8, v9, 1);
        uint64_t v17 = v13;
        uint64_t v18 = v14;
        uint64_t v19 = 1;
        goto LABEL_36;
      case 2:
        if (v15 != 2)
        {
          outlined copy of PresentationIntent.Kind(v8, v9, 2);
          outlined copy of PresentationIntent.Kind(v8, v9, 2);
LABEL_91:
          swift_bridgeObjectRetain();
LABEL_93:
          outlined copy of PresentationIntent.Kind(v13, v14, v15);
          outlined copy of PresentationIntent.Kind(v13, v14, v15);
          outlined consume of PresentationIntent.Kind(v8, v9, v10);
          outlined consume of PresentationIntent.Kind(v13, v14, v15);
          outlined consume of PresentationIntent.Kind(v8, v9, v10);
          outlined consume of PresentationIntent.Kind(v13, v14, v15);
          uint64_t v36 = v8;
          uint64_t v37 = v9;
          uint64_t v38 = v10;
          goto LABEL_94;
        }
        if (!v9)
        {
          outlined copy of PresentationIntent.Kind(*(void *)v12, *(void *)(v12 + 8), 2);
          outlined copy of PresentationIntent.Kind(v13, v14, 2);
          outlined copy of PresentationIntent.Kind(v13, v14, 2);
          outlined copy of PresentationIntent.Kind(v8, 0, 2);
          outlined copy of PresentationIntent.Kind(v13, v14, 2);
          outlined copy of PresentationIntent.Kind(v8, 0, 2);
          outlined copy of PresentationIntent.Kind(v13, v14, 2);
          outlined copy of PresentationIntent.Kind(v8, 0, 2);
          outlined consume of PresentationIntent.Kind(v8, 0, 2);
          outlined consume of PresentationIntent.Kind(v13, v14, 2);
          if (!v14)
          {
            outlined consume of PresentationIntent.Kind(v13, 0, 2);
            outlined consume of PresentationIntent.Kind(v8, 0, 2);
            outlined consume of PresentationIntent.Kind(v13, 0, 2);
            uint64_t v4 = v8;
            uint64_t v5 = 0;
            uint64_t v6 = 2;
            goto LABEL_6;
          }
          outlined consume of PresentationIntent.Kind(v8, 0, 2);
          outlined consume of PresentationIntent.Kind(v13, v14, 2);
          outlined consume of PresentationIntent.Kind(v13, v14, 2);
          outlined consume of PresentationIntent.Kind(v8, 0, 2);
          outlined consume of PresentationIntent.Kind(v13, v14, 2);
          uint64_t v39 = v8;
LABEL_99:
          outlined consume of PresentationIntent.Kind(v39, 0, 2);
          outlined consume of PresentationIntent.Kind(v13, v14, 2);
          uint64_t v36 = v8;
          uint64_t v37 = v9;
          uint64_t v38 = 2;
          goto LABEL_94;
        }
        if (!v14)
        {
          outlined copy of PresentationIntent.Kind(v8, v9, 2);
          outlined copy of PresentationIntent.Kind(v13, 0, 2);
          outlined copy of PresentationIntent.Kind(v8, v9, 2);
          outlined copy of PresentationIntent.Kind(v13, 0, 2);
          outlined consume of PresentationIntent.Kind(v8, v9, 2);
          uint64_t v39 = v13;
          goto LABEL_99;
        }
        if (v8 == v13 && v9 == v14)
        {
          outlined copy of PresentationIntent.Kind(v8, v9, 2);
          outlined copy of PresentationIntent.Kind(v8, v9, 2);
          outlined consume of PresentationIntent.Kind(v8, v9, 2);
          uint64_t v4 = v8;
          uint64_t v5 = v9;
          uint64_t v6 = 2;
          goto LABEL_6;
        }
        long long v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of PresentationIntent.Kind(v8, v9, 2);
        outlined copy of PresentationIntent.Kind(v13, v14, 2);
        outlined consume of PresentationIntent.Kind(v8, v9, 2);
        outlined consume of PresentationIntent.Kind(v13, v14, 2);
        uint64_t result = 0;
        if ((v21 & 1) == 0 || v11 != v16) {
          return result;
        }
LABEL_7:
        if (v3 == v2) {
          return 1;
        }
        break;
      case 3:
        if (v15 != 3)
        {
          outlined copy of PresentationIntent.Kind(v8, v9, 3);
          outlined copy of PresentationIntent.Kind(v8, v9, 3);
          goto LABEL_91;
        }
        uint64_t v23 = *(void *)(v8 + 16);
        if (v23 != *(void *)(v13 + 16)) {
          goto LABEL_88;
        }
        if (!v23 || v8 == v13)
        {
LABEL_5:
          outlined copy of PresentationIntent.Kind(v13, v14, 3);
          outlined copy of PresentationIntent.Kind(v8, v9, 3);
          outlined consume of PresentationIntent.Kind(v8, v9, 3);
          uint64_t v4 = v13;
          uint64_t v5 = v14;
          uint64_t v6 = 3;
          goto LABEL_6;
        }
        uint64_t v24 = (unsigned __int8 *)(v8 + 32);
        uint64_t v25 = (unsigned __int8 *)(v13 + 32);
        while (1)
        {
          uint64_t v27 = *v24++;
          uint64_t v26 = v27;
          uint64_t v28 = *v25++;
          if (v26 != v28) {
            break;
          }
          if (!--v23) {
            goto LABEL_5;
          }
        }
LABEL_88:
        outlined copy of PresentationIntent.Kind(v13, v14, 3);
        outlined copy of PresentationIntent.Kind(v8, v9, 3);
        outlined consume of PresentationIntent.Kind(v8, v9, 3);
        uint64_t v36 = v13;
        uint64_t v37 = v14;
        uint64_t v38 = 3;
LABEL_94:
        outlined consume of PresentationIntent.Kind(v36, v37, v38);
        return 0;
      case 4:
        if (v15 != 4) {
          goto LABEL_93;
        }
        outlined copy of PresentationIntent.Kind(*(void *)v12, *(void *)(v12 + 8), 4);
        outlined consume of PresentationIntent.Kind(v8, v9, 4);
        uint64_t v17 = v13;
        uint64_t v18 = v14;
        uint64_t v19 = 4;
        goto LABEL_36;
      case 5:
        if (v15 != 5) {
          goto LABEL_93;
        }
        outlined copy of PresentationIntent.Kind(*(void *)v12, *(void *)(v12 + 8), 5);
        outlined consume of PresentationIntent.Kind(v8, v9, 5);
        uint64_t v17 = v13;
        uint64_t v18 = v14;
        uint64_t v19 = 5;
LABEL_36:
        outlined consume of PresentationIntent.Kind(v17, v18, v19);
        if (v8 != v13 || v11 != v16) {
          return 0;
        }
        goto LABEL_7;
      case 6:
        switch(v8)
        {
          case 1:
            if (v15 != 6) {
              goto LABEL_93;
            }
            if (v13 != 1 || v14 != 0) {
              goto LABEL_92;
            }
            outlined copy of PresentationIntent.Kind(1, 0, 6);
            outlined consume of PresentationIntent.Kind(v8, v9, 6);
            uint64_t v4 = 1;
            goto LABEL_86;
          case 2:
            if (v15 != 6) {
              goto LABEL_93;
            }
            if (v13 != 2 || v14 != 0) {
              goto LABEL_92;
            }
            outlined copy of PresentationIntent.Kind(2, 0, 6);
            outlined consume of PresentationIntent.Kind(v8, v9, 6);
            uint64_t v4 = 2;
            goto LABEL_86;
          case 3:
            if (v15 != 6) {
              goto LABEL_93;
            }
            if (v13 != 3 || v14 != 0) {
              goto LABEL_92;
            }
            outlined copy of PresentationIntent.Kind(3, 0, 6);
            outlined consume of PresentationIntent.Kind(v8, v9, 6);
            uint64_t v4 = 3;
            goto LABEL_86;
          case 4:
            if (v15 != 6) {
              goto LABEL_93;
            }
            if (v13 != 4 || v14 != 0) {
              goto LABEL_92;
            }
            outlined copy of PresentationIntent.Kind(4, 0, 6);
            outlined consume of PresentationIntent.Kind(v8, v9, 6);
            uint64_t v4 = 4;
            goto LABEL_86;
          case 5:
            if (v15 != 6) {
              goto LABEL_93;
            }
            if (v13 == 5 && v14 == 0)
            {
              outlined copy of PresentationIntent.Kind(5, 0, 6);
              outlined consume of PresentationIntent.Kind(v8, v9, 6);
              uint64_t v4 = 5;
LABEL_86:
              uint64_t v5 = 0;
              uint64_t v6 = 6;
LABEL_6:
              outlined consume of PresentationIntent.Kind(v4, v5, v6);
              if (v11 != v16) {
                return 0;
              }
              goto LABEL_7;
            }
LABEL_92:
            LOBYTE(v15) = 6;
            break;
          default:
            if (v15 != 6 || (v14 | v13) != 0) {
              goto LABEL_93;
            }
            outlined consume of PresentationIntent.Kind(v8, v9, 6);
            outlined consume of PresentationIntent.Kind(0, 0, 6);
            uint64_t v4 = v8;
            uint64_t v5 = v9;
            uint64_t v6 = 6;
            goto LABEL_6;
        }
        goto LABEL_93;
      default:
        if (*(unsigned char *)(v12 + 16)) {
          goto LABEL_93;
        }
        outlined copy of PresentationIntent.Kind(*(void *)v12, *(void *)(v12 + 8), 0);
        outlined consume of PresentationIntent.Kind(v8, v9, 0);
        outlined consume of PresentationIntent.Kind(v13, v14, 0);
        if (v8 != v13) {
          return 0;
        }
        outlined consume of PresentationIntent.Kind(v8, v14, 0);
        uint64_t v4 = v8;
        uint64_t v5 = v9;
        uint64_t v6 = 0;
        goto LABEL_6;
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  unsigned char v85[224];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void v116[28];

  v116[26] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    uint64_t v3 = v2 - 1;
    uint64_t v4 = (uint64_t *)(a1 + 64);
    uint64_t v5 = (uint64_t *)(a2 + 64);
    while (1)
    {
      uint64_t v6 = *(v4 - 4);
      uint64_t v7 = *(v4 - 3);
      uint64_t v9 = *(v4 - 2);
      id v8 = *(v4 - 1);
      id v10 = *v4;
      char v11 = v4[1];
      uint64_t v13 = v4[2];
      long long v12 = (void *)v4[3];
      uint64_t v14 = v4[4];
      uint64_t v15 = v4[5];
      uint64_t v16 = v4[6];
      uint64_t v17 = (void *)v4[7];
      uint64_t v18 = v4[8];
      uint64_t v19 = *(v5 - 4);
      long long v20 = *(v5 - 3);
      long long v21 = *(v5 - 2);
      unsigned __int8 v22 = *(v5 - 1);
      uint64_t v23 = *v5;
      uint64_t v24 = v5[1];
      uint64_t v25 = v5[2];
      uint64_t v26 = (void *)v5[3];
      uint64_t v27 = v5[4];
      uint64_t v28 = v5[5];
      uint64_t v30 = v5[6];
      long long v29 = (void *)v5[7];
      long long v31 = v5[8];
      v116[27] = v3;
      v116[0] = v6;
      v116[1] = v7;
      v116[2] = v9;
      uint64_t v109 = (void *)v8;
      v116[3] = v8;
      v116[4] = v10;
      v116[5] = v11;
      v116[6] = v13;
      v116[7] = v12;
      uint64_t v110 = v14;
      v116[8] = v14;
      v116[9] = v15;
      char v113 = v15;
      uint64_t v112 = v16;
      v116[10] = v16;
      v116[11] = v17;
      uint64_t v111 = v17;
      v116[12] = v18;
      v116[13] = v19;
      v116[14] = v20;
      v116[15] = v21;
      v116[16] = v22;
      v116[17] = v23;
      v116[18] = v24;
      v116[19] = v25;
      v116[20] = v26;
      v116[21] = v27;
      v116[22] = v28;
      v116[23] = v30;
      uint64_t v108 = v29;
      v116[24] = v29;
      v116[25] = v31;
      uint64_t v107 = v3;
      switch(v18)
      {
        case 0uLL:
          if (v31) {
            goto LABEL_59;
          }
          uint64_t v18 = 0;
          goto LABEL_27;
        case 1uLL:
          if (v31 != 1) {
            goto LABEL_59;
          }
          uint64_t v18 = 1;
          goto LABEL_27;
        case 2uLL:
          if (v31 != 2) {
            goto LABEL_59;
          }
          goto LABEL_26;
        case 3uLL:
          if (v31 != 3) {
            goto LABEL_59;
          }
LABEL_26:
          outlined copy of TermOfAddress._TermOfAddress(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v26, v27, v28, v30, (uint64_t)v108, v18);
LABEL_27:
          outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
          outlined consume of TermOfAddress._TermOfAddress(v6, v7, v9, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v18);
          goto LABEL_28;
        default:
          if (v31 < 4)
          {
LABEL_59:
            outlined copy of TermOfAddress._TermOfAddress(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v26, v27, v28, v30, (uint64_t)v108, v31);
            outlined copy of TermOfAddress._TermOfAddress(v6, v7, v9, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v18);
            outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
            return 0;
          }
          uint64_t v95 = v18;
          long long v114 = 0;
          long long v115 = 0xE000000000000000;
          uint64_t v103 = v24;
          v99 = v20;
          int v93 = v10;
          uint64_t v92 = v7;
          uint64_t v91 = v6;
          unint64_t v96 = v26;
          uint64_t v104 = v25;
          uint64_t v102 = v23;
          uint64_t v101 = (void *)v22;
          uint64_t v100 = v21;
          int v98 = v19;
          int v97 = v27;
          uint64_t v106 = v28;
          uint64_t v105 = v30;
          uint64_t v90 = v31;
          int v94 = v9;
          if (v7)
          {
            uint64_t v32 = (uint64_t)v26;
            outlined copy of TermOfAddress._TermOfAddress(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v26, v27, v28, v30, (uint64_t)v108, v31);
            outlined copy of TermOfAddress._TermOfAddress(v6, v7, v9, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v95);
            outlined copy of TermOfAddress._TermOfAddress(v98, v99, v100, (uint64_t)v101, v102, v103, v104, v32, v97, v106, v105, (uint64_t)v108, v90);
            long long v33 = v6;
            uint64_t v34 = v6;
            uint64_t v35 = v94;
            uint64_t v36 = v109;
            outlined copy of TermOfAddress._TermOfAddress(v34, v7, v94, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v95);
            outlined copy of Locale.LanguageCode?(v33, v7);
            outlined copy of Locale.LanguageCode?(v10, v11);
            outlined copy of Locale.LanguageCode?(v110, v113);
            v37._countAndFlagsBits = v35;
            v37._object = v36;
            String.append(_:)(v37);
            if (!v11) {
              goto LABEL_12;
            }
LABEL_11:
            v38._countAndFlagsBits = 45;
            v38._object = (void *)0xE100000000000000;
            String.append(_:)(v38);
            v39._countAndFlagsBits = v13;
            v39._object = v12;
            String.append(_:)(v39);
            goto LABEL_12;
          }
          long long v52 = v25;
          long long v53 = (uint64_t)v26;
          outlined copy of TermOfAddress._TermOfAddress(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v26, v27, v28, v30, (uint64_t)v108, v31);
          outlined copy of TermOfAddress._TermOfAddress(v6, 0, v9, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v95);
          outlined copy of TermOfAddress._TermOfAddress(v98, v99, v100, (uint64_t)v101, v102, v103, v52, v53, v97, v106, v105, (uint64_t)v108, v90);
          outlined copy of TermOfAddress._TermOfAddress(v6, 0, v9, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v95);
          outlined copy of Locale.LanguageCode?(v6, 0);
          outlined copy of Locale.LanguageCode?(v10, v11);
          outlined copy of Locale.LanguageCode?(v110, v113);
          if (v11) {
            goto LABEL_11;
          }
LABEL_12:
          id v87 = v11;
          uint64_t v88 = v13;
          uint64_t v89 = (uint64_t)v12;
          if (v113)
          {
            v40._countAndFlagsBits = 95;
            v40._object = (void *)0xE100000000000000;
            String.append(_:)(v40);
            v41._countAndFlagsBits = v112;
            v41._object = v111;
            String.append(_:)(v41);
          }
          MEMORY[0x1F4188790](v114);
          LODWORD(v114) = 0;
          long long v86 = v42;
          uint64_t v44 = v43;
          String.utf8CString.getter();
          uint64_t v45 = uloc_addLikelySubtags();
          swift_release();
          if ((int)v114 <= 0 && v45 >= 1)
          {
            v85[v45] = 0;
            uint64_t v46 = MEMORY[0x185301F80](v85);
            if (v47)
            {
              MEMORY[0x1F4188790](v46);
              LODWORD(v114) = 0;
              String.utf8CString.getter();
              uint64_t v48 = uloc_toLanguageTag();
              swift_release();
              if ((int)v114 > 0 || v48 <= 0)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                v85[v48] = 0;
                uint64_t v49 = MEMORY[0x185301F80](v85);
                long long v51 = v50;
                swift_bridgeObjectRelease();
                if (v51)
                {
                  swift_bridgeObjectRelease();
                  long long v86 = v49;
                  uint64_t v44 = v51;
                }
              }
            }
          }
          uint64_t v54 = v87;
          outlined consume of Locale.LanguageCode?(v91, v92);
          outlined consume of Locale.LanguageCode?(v93, v54);
          outlined consume of Locale.LanguageCode?(v110, v113);
          long long v114 = 0;
          long long v115 = 0xE000000000000000;
          if (v99)
          {
            uint64_t v55 = v100;
            uint64_t v56 = v101;
            outlined copy of Locale.LanguageCode?(v98, v99);
            uint64_t v57 = v103;
            outlined copy of Locale.LanguageCode?(v102, v103);
            outlined copy of Locale.LanguageCode?(v97, v106);
            v58._countAndFlagsBits = v55;
            v58._object = v56;
            String.append(_:)(v58);
            if (!v57) {
              goto LABEL_37;
            }
LABEL_36:
            v59._countAndFlagsBits = 45;
            v59._object = (void *)0xE100000000000000;
            String.append(_:)(v59);
            v60._countAndFlagsBits = v104;
            v60._object = v96;
            String.append(_:)(v60);
            goto LABEL_37;
          }
          outlined copy of Locale.LanguageCode?(v98, 0);
          long long v78 = v103;
          outlined copy of Locale.LanguageCode?(v102, v103);
          outlined copy of Locale.LanguageCode?(v97, v106);
          if (v78) {
            goto LABEL_36;
          }
LABEL_37:
          if (v106)
          {
            v61._countAndFlagsBits = 95;
            v61._object = (void *)0xE100000000000000;
            String.append(_:)(v61);
            v62._countAndFlagsBits = v105;
            v62._object = v108;
            String.append(_:)(v62);
          }
          MEMORY[0x1F4188790](v114);
          LODWORD(v114) = 0;
          uint64_t v64 = v63;
          uint64_t v66 = v65;
          String.utf8CString.getter();
          uint64_t v67 = uloc_addLikelySubtags();
          swift_release();
          if ((int)v114 > 0) {
            goto LABEL_51;
          }
          if (v67 < 1) {
            goto LABEL_51;
          }
          v85[v67] = 0;
          uint64_t v68 = MEMORY[0x185301F80](v85);
          if (!v69) {
            goto LABEL_51;
          }
          MEMORY[0x1F4188790](v68);
          LODWORD(v114) = 0;
          String.utf8CString.getter();
          uint64_t v70 = uloc_toLanguageTag();
          swift_release();
          if ((int)v114 > 0 || v70 <= 0)
          {
            swift_bridgeObjectRelease();
LABEL_51:
            long long v74 = v89;
            long long v76 = v88;
            char v77 = v87;
            long long v75 = v86;
            goto LABEL_52;
          }
          v85[v70] = 0;
          uint64_t v71 = MEMORY[0x185301F80](v85);
          uint64_t v73 = v72;
          swift_bridgeObjectRelease();
          long long v74 = v89;
          long long v75 = v86;
          if (v73)
          {
            swift_bridgeObjectRelease();
            uint64_t v64 = v71;
            uint64_t v66 = v73;
          }
          long long v76 = v88;
          char v77 = v87;
LABEL_52:
          outlined consume of Locale.LanguageCode?(v98, v99);
          outlined consume of Locale.LanguageCode?(v102, v103);
          outlined consume of Locale.LanguageCode?(v97, v106);
          if (v75 == v64 && v44 == v66)
          {
            swift_bridgeObjectRelease_n();
            long long v79 = v74;
          }
          else
          {
            long long v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v79 = v74;
            if ((v80 & 1) == 0)
            {
              outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
              outlined consume of TermOfAddress._TermOfAddress(v98, v99, v100, (uint64_t)v101, v102, v103, v104, (uint64_t)v96, v97, v106, v105, (uint64_t)v108, v90);
              outlined consume of TermOfAddress._TermOfAddress(v91, v92, v94, (uint64_t)v109, v93, v77, v76, v74, v110, v113, v112, (uint64_t)v111, v95);
              return 0;
            }
          }
          uint64_t v81 = v95;
          uint64_t v82 = v90;
          v83 = specialized static Array<A>.== infix(_:_:)(v95, v90);
          outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
          outlined consume of TermOfAddress._TermOfAddress(v98, v99, v100, (uint64_t)v101, v102, v103, v104, (uint64_t)v96, v97, v106, v105, (uint64_t)v108, v82);
          outlined consume of TermOfAddress._TermOfAddress(v91, v92, v94, (uint64_t)v109, v93, v77, v76, v79, v110, v113, v112, (uint64_t)v111, v81);
          if ((v83 & 1) == 0) {
            return 0;
          }
LABEL_28:
          if (!v107) {
            return 1;
          }
          v4 += 13;
          v5 += 13;
          uint64_t v3 = v107 - 1;
          break;
      }
    }
  }
  return 0;
}

{
  uint8x8_t v2;
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  int8x16_t v17;
  uint64x2_t v18;
  int16x8_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  char v36;
  uint64_t v37;
  unsigned char v38[5];
  uint64_t v39;
  uint64_t v40;
  unsigned __int32 v41;
  char v42;

  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a2 + 16))
  {
    if (!v4 || a1 == a2) {
      return 1;
    }
    uint64_t v5 = 0;
    unsigned __int8 v22 = a1;
    uint64_t v23 = a2;
    while (1)
    {
      uint64_t v30 = v4;
      uint64_t v6 = *(unsigned char *)(a1 + v5 + 48);
      uint64_t v7 = *(unsigned char *)(a1 + v5 + 49);
      id v8 = *(unsigned char *)(a1 + v5 + 50);
      long long v31 = *(void *)(a1 + v5 + 56);
      v2.i32[0] = *(_DWORD *)(a1 + v5 + 64);
      uint64_t v9 = *(unsigned char *)(a1 + v5 + 68);
      uint64_t v34 = *(void *)(a1 + v5 + 80);
      uint64_t v28 = *(unsigned __int8 *)(a1 + v5 + 92);
      long long v29 = *(void *)(a1 + v5 + 72);
      uint64_t v27 = *(unsigned int *)(a1 + v5 + 88);
      id v10 = *(unsigned char *)(a2 + v5 + 48);
      char v11 = *(unsigned char *)(a2 + v5 + 49);
      long long v12 = *(unsigned char *)(a2 + v5 + 50);
      uint64_t v32 = *(void *)(a2 + v5 + 56);
      v3.i32[0] = *(_DWORD *)(a2 + v5 + 64);
      uint64_t v13 = *(unsigned char *)(a2 + v5 + 68);
      long long v33 = *(void *)(a2 + v5 + 80);
      uint64_t v25 = *(unsigned __int8 *)(a2 + v5 + 92);
      uint64_t v26 = *(void *)(a2 + v5 + 72);
      uint64_t v24 = *(unsigned int *)(a2 + v5 + 88);
      if (*(void *)(a1 + v5 + 32) != *(void *)(a2 + v5 + 32)
        || *(void *)(a1 + v5 + 40) != *(void *)(a2 + v5 + 40))
      {
        uint64_t v14 = v5;
        uint64_t v15 = *(unsigned char *)(a2 + v5 + 49);
        uint64_t v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v11 = v15;
        uint64_t v5 = v14;
        if ((v16 & 1) == 0) {
          break;
        }
      }
      LOBYTE(v39) = v6;
      BYTE1(v39) = v7;
      BYTE2(v39) = v8;
      long long v40 = v31;
      long long v41 = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      long long v42 = v9;
      LOBYTE(v35) = v10;
      HIBYTE(v35) = v11;
      uint64_t v36 = v12;
      uint64_t v37 = v32;
      *(_DWORD *)uint64_t v38 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      v38[4] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v39, (unsigned __int8 *)&v35) & 1) == 0) {
        goto LABEL_20;
      }
      if (v34)
      {
        uint64_t v39 = v29;
        long long v40 = v34;
        long long v41 = v27;
        long long v42 = (v27 | (unint64_t)(v28 << 32)) >> 32;
        if (!v33)
        {
          swift_bridgeObjectRetain();
LABEL_19:
          swift_bridgeObjectRelease();
LABEL_20:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
        v17.i64[0] = 0xFFFFFFFFFFLL;
        v17.i64[1] = 0xFFFFFFFFFFLL;
        uint64_t v18 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v24 | (unint64_t)(v25 << 32)), v17);
        uint64_t v19 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_182108550), (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_182108540));
        *(int16x4_t *)v19.i8 = vmovn_s32((int32x4_t)v19);
        uint64_t v35 = v26;
        uint64_t v36 = BYTE2(v26);
        uint64_t v37 = v33;
        v38[0] = v24;
        *(_DWORD *)&v38[1] = vmovn_s16(v19).u32[0];
        swift_bridgeObjectRetain_n();
        long long v20 = specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v39, (unsigned __int8 *)&v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        if (v33) {
          goto LABEL_19;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v5 += 64;
      uint64_t v4 = v30 - 1;
      a1 = v22;
      a2 = v23;
      if (v30 == 1) {
        return 1;
      }
    }
  }
  return 0;
}

{
  uint64_t v2;
  void *v3;
  void *i;
  BOOL v5;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (void *)(a2 + 56);
    for (uint64_t i = (void *)(a1 + 56); ; i += 4)
    {
      uint64_t v5 = *(i - 1) == *(v3 - 1) && *i == *v3;
      if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v3 += 4;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

_OWORD *String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  return String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, a2, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t))&unk_1ECA591E8, (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:), a7, (uint64_t)&unk_1ECA59210, (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
}

uint64_t closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  long long v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v15 = *a1;
  (*(void (**)(long long *, uint64_t, uint64_t))(a6 + 56))(&v15, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 48))(a3, a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
  return String.init<A>(_:)();
}

_OWORD *String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  return String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, a2, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t))&unk_1ECA59198, (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:), a7, (uint64_t)&unk_1ECA591C0, (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
}

_OWORD *String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(char *, char *, uint64_t)@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v54 = a8;
  long long v51 = a7;
  uint64_t v59 = a5;
  uint64_t v60 = a6;
  uint64_t v57 = a2;
  uint64_t v58 = a1;
  uint64_t v56 = a9;
  uint64_t v13 = *(void *)(a3 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v55 = a11;
  uint64_t v53 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v45 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = v19;
  uint64_t v43 = v19;
  long long v50 = *(void (**)(char *, double))(v19 + 16);
  v50((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v49 = v13 + 16;
  v48((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v58, a3);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v52 = v13;
  uint64_t v23 = (v21 + 48) & ~v21;
  uint64_t v24 = (v16 + v22 + v23) & ~v22;
  uint64_t v46 = v24 + v14;
  uint64_t v47 = v23;
  uint64_t v44 = v24;
  uint64_t v25 = (char *)swift_allocObject();
  *((void *)v25 + 2) = a3;
  *((void *)v25 + 3) = a4;
  uint64_t v26 = v60;
  *((void *)v25 + 4) = v59;
  *((void *)v25 + 5) = v26;
  long long v51 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v51(&v25[v23], (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
  uint64_t v43 = *(void *)(v13 + 32);
  uint64_t v27 = v45;
  ((void (*)(char *, char *, uint64_t))v43)(&v25[v24], v45, a3);
  long long v29 = v56;
  uint64_t v28 = v57;
  *uint64_t v56 = v54;
  v29[1] = v25;
  ((void (*)(char *, uint64_t, uint64_t))v50)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v28, a4);
  uint64_t v30 = v27;
  long long v31 = v27;
  uint64_t v32 = v58;
  long long v33 = (void (*)(uint64_t *, uint64_t, uint64_t))v48;
  v48(v30, v58, a3);
  uint64_t v34 = (char *)swift_allocObject();
  *((void *)v34 + 2) = a3;
  *((void *)v34 + 3) = a4;
  uint64_t v35 = v60;
  *((void *)v34 + 4) = v59;
  *((void *)v34 + 5) = v35;
  uint64_t v36 = (void (*)(uint64_t *, uint64_t, uint64_t))v51;
  v51(&v34[v47], (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
  ((void (*)(char *, char *, uint64_t))v43)(&v34[v44], v31, a3);
  uint64_t v37 = v56;
  v56[2] = v55;
  v37[3] = v34;
  v37[7] = a3;
  uint64_t v38 = v37;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37 + 4);
  v33(boxed_opaque_existential_1, v32, a3);
  uint64_t v62 = a4;
  long long v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v61);
  v36(v40, v57, a4);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v32, a3);
  return outlined init with take of Any(&v61, (_OWORD *)v38 + 4);
}

uint64_t closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)@<X0>(long long *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t *a6@<X8>)
{
  uint64_t v19 = a5;
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = (ValueMetadata *)swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (uint64_t *)((char *)&v18 - v15);
  long long v20 = *a1;
  (*(void (**)(long long *, uint64_t, uint64_t))(a4 + 56))(&v20, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 48))(a2, a3, a4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a3);
  return AttributedString.init<A>(_:)(v16, AssociatedTypeWitness, v19, a6);
}

uint64_t closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a3;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1 + 64, (uint64_t)v29);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  char v16 = swift_dynamicCast();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (v16)
  {
    v17(v11, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, a5);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a5);
    char v19 = 0;
    if ((v18 & 1) == 0) {
      return v19 & 1;
    }
  }
  else
  {
    v17(v11, 1, 1, a5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v29[3] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, v27, a4);
  uint64_t v21 = (void *)(a1 + 32);
  uint64_t v22 = *(void *)(a1 + 56);
  uint64_t v23 = __swift_project_boxed_opaque_existential_1(v21, v22);
  v28[3] = v22;
  uint64_t v24 = __swift_allocate_boxed_opaque_existential_1(v28);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v24, v23, v22);
  char v19 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v29, (uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return v19 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(a2) & 1;
}

uint64_t openEquatable #1 <A>(_:) in static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v17[-v7];
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(a2, (uint64_t)v17);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13)
  {
    v14(v8, 0, 1, a3);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v12, v8, a3);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, a3);
  }
  else
  {
    v14(v8, 1, 1, a3);
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t String.LocalizationValue.FormatArgument.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v9 = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v8);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_1, v5, v4);
  char v10 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v8, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void *String.LocalizationValue.FormatArgument.init(_:_:)@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a2;
  *(void *)a3 = *result;
  *(void *)(a3 + 8) = v3;
  *(unsigned char *)(a3 + 112) = 1;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.init<A, B>(_:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a7;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  char v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v17 + 16))(v21, a1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a4);
  String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)((uint64_t)v21, (uint64_t)v15, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t))&unk_1ECA591E8, (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:), v24, (uint64_t)&unk_1ECA59210, (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
  char v25 = 2;
  return outlined init with take of String.LocalizationValue.FormatArgument.Storage(v24, v23);
}

{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  long long v24[7];
  char v25;

  uint64_t v23 = a7;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  char v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v17 + 16))(v21, a1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a4);
  String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)((uint64_t)v21, (uint64_t)v15, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t))&unk_1ECA59198, (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:), v24, (uint64_t)&unk_1ECA591C0, (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
  char v25 = 3;
  return outlined init with take of String.LocalizationValue.FormatArgument.Storage(v24, v23);
}

__n128 String.LocalizationValue.FormatArgument.init(resource:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 72);
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = v4;
  __n128 result = *(__n128 *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 96);
  *(__n128 *)(a2 + 80) = result;
  *(_OWORD *)(a2 + 96) = v6;
  *(unsigned char *)(a2 + 112) = 4;
  return result;
}

__n128 String.LocalizationValue.FormatArgument.init(resourceList:format:)@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unsigned __int8 v3 = *(unsigned char *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 1);
  a3->n128_u64[0] = a1;
  a3->n128_u8[8] = v3;
  a3->n128_u8[9] = v4;
  __n128 result = *(__n128 *)(a2 + 8);
  a3[1] = result;
  a3[7].n128_u8[0] = 5;
  return result;
}

unsigned char *String.LocalizationValue.FormatArgument.init(placeholder:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  a2[112] = 6;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()@<X0>(void *a1@<X8>)
{
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v1, (uint64_t)&v22);
  if (v28 == 3)
  {
    long long v18 = v24;
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    long long v16 = v22;
    long long v17 = v23;
    uint64_t v7 = *((void *)&v25 + 1);
    long long v8 = __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v25 + 1));
    uint64_t v15 = v7;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(boxed_opaque_existential_1, v8, v7);
    closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()((uint64_t)v14, a1);
    outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)&v16);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  if (v28 == 2)
  {
    long long v18 = v24;
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    long long v16 = v22;
    long long v17 = v23;
    uint64_t v10 = *((void *)&v25 + 1);
    uint64_t v11 = __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v25 + 1));
    uint64_t v15 = v10;
    uint64_t v12 = __swift_allocate_boxed_opaque_existential_1(v14);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v12, v11, v10);
    closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()((uint64_t)v14, a1);
    outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)&v16);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  if (v28)
  {
    uint64_t v13 = MEMORY[0x1E4FBC870];
    *a1 = MEMORY[0x1E4FBC868];
    a1[1] = v13;
    return outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)&v22);
  }
  else
  {
    outlined init with take of Any(&v22, &v16);
    uint64_t v3 = *((void *)&v17 + 1);
    unsigned __int8 v4 = __swift_project_boxed_opaque_existential_1(&v16, *((uint64_t *)&v17 + 1));
    uint64_t v15 = v3;
    uint64_t v5 = __swift_allocate_boxed_opaque_existential_1(v14);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16))(v5, v4, v3);
    closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()((uint64_t)v14, a1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  }
}

uint64_t closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if (swift_dynamicCast())
  {
    uint64_t v4 = MEMORY[0x1E4FBC868];
    uint64_t v5 = MEMORY[0x1E4FBC870];
    unint64_t v6 = (int)v39;
LABEL_5:
    *a2 = v4;
    a2[1] = v5;
    uint64_t v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    unint64_t v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    long long v32 = v6;
    LODWORD(v33) = 0;
    BYTE4(v33) = 1;
    long long v36 = xmmword_182106C90;
LABEL_19:
    char v37 = 1;
    uint64_t v38 = 0;
    unint64_t v15 = 0x80000001823AA0D0;
    unint64_t v16 = 0xD00000000000002CLL;
    return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v32, v16, v15);
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if (swift_dynamicCast())
  {
LABEL_4:
    uint64_t v4 = MEMORY[0x1E4FBC868];
    uint64_t v5 = MEMORY[0x1E4FBC870];
    unint64_t v6 = v39;
    goto LABEL_5;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if (swift_dynamicCast())
  {
    uint64_t v7 = MEMORY[0x1E4FBC868];
    uint64_t v8 = MEMORY[0x1E4FBC870];
    unint64_t v9 = v39;
LABEL_10:
    *a2 = v7;
    a2[1] = v8;
    uint64_t v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    unint64_t v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    long long v32 = v9;
    LODWORD(v33) = 0;
    BYTE4(v33) = 0;
LABEL_18:
    long long v36 = xmmword_182106C90;
    goto LABEL_19;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if (swift_dynamicCast())
  {
LABEL_9:
    uint64_t v7 = MEMORY[0x1E4FBC868];
    uint64_t v8 = MEMORY[0x1E4FBC870];
    unint64_t v9 = v39;
    goto LABEL_10;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if (swift_dynamicCast())
  {
    uint64_t v10 = MEMORY[0x1E4FBC870];
    double v11 = *(float *)&v39;
    *a2 = MEMORY[0x1E4FBC868];
    a2[1] = v10;
    uint64_t v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    unint64_t v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    *(double *)&long long v32 = v11;
LABEL_16:
    *((void *)&v32 + 1) = 0;
    LODWORD(v33) = 0;
    char v14 = 2;
LABEL_17:
    BYTE4(v33) = v14;
    goto LABEL_18;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0
    || (outlined init with copy of Any(a1, (uint64_t)&v32), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v12 = MEMORY[0x1E4FBC870];
    uint64_t v13 = v39;
    *a2 = MEMORY[0x1E4FBC868];
    a2[1] = v12;
    uint64_t v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    unint64_t v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    *(void *)&long long v32 = v13;
    goto LABEL_16;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  type metadata accessor for NSDecimal(0);
  if (swift_dynamicCast())
  {
    int v18 = v40;
    uint64_t v19 = MEMORY[0x1E4FBC870];
    long long v20 = v39;
    *a2 = MEMORY[0x1E4FBC868];
    a2[1] = v19;
    uint64_t v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    unint64_t v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    long long v32 = v20;
    LODWORD(v33) = v18;
    char v14 = 3;
    goto LABEL_17;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if (swift_dynamicCast()) {
    goto LABEL_4;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if (swift_dynamicCast()) {
    goto LABEL_9;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if (swift_dynamicCast())
  {
    uint64_t v21 = v39;
    uint64_t v22 = MEMORY[0x1E4FBC870];
    *a2 = MEMORY[0x1E4FBC868];
    a2[1] = v22;
    uint64_t v34 = &type metadata for Date;
    unint64_t v35 = lazy protocol witness table accessor for type Date and conformance Date();
    *(void *)&long long v32 = v21;
    long long v36 = xmmword_182106C90;
    char v37 = 1;
    uint64_t v38 = 0;
    unint64_t v16 = 0xD000000000000029;
    long long v23 = "Foundation.LocalizedDateArgumentAttribute";
LABEL_31:
    unint64_t v15 = (unint64_t)(v23 - 32) | 0x8000000000000000;
    return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v32, v16, v15);
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
  if (swift_dynamicCast())
  {
    long long v25 = v39;
    uint64_t v26 = MEMORY[0x1E4FBC870];
    *a2 = MEMORY[0x1E4FBC868];
    a2[1] = v26;
    uint64_t v34 = (ValueMetadata *)v24;
    unint64_t v35 = lazy protocol witness table accessor for type [LocalizedStringResource] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>, &demangling cache variable for type metadata for Range<Date>, (void (*)(void))lazy protocol witness table accessor for type Date and conformance Date);
    long long v32 = v25;
    long long v36 = xmmword_182106C90;
    char v37 = 1;
    uint64_t v38 = 0;
    unint64_t v16 = 0xD000000000000031;
    long long v23 = "Foundation.LocalizedDateIntervalArgumentAttribute";
    goto LABEL_31;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    long long v31 = v39;
    uint64_t v27 = v40;
    uint64_t v28 = MEMORY[0x1E4FBC870];
    *a2 = MEMORY[0x1E4FBC868];
    a2[1] = v28;
    uint64_t v34 = &type metadata for URL;
    unint64_t v29 = lazy protocol witness table accessor for type URL and conformance URL();
    long long v32 = v31;
    unint64_t v35 = v29;
    uint64_t v33 = v27;
    long long v36 = xmmword_182106C90;
    char v37 = 1;
    uint64_t v38 = 0;
    unint64_t v16 = 0xD000000000000028;
    long long v23 = "Foundation.LocalizedURLArgumentAttribute";
    goto LABEL_31;
  }
  uint64_t v30 = MEMORY[0x1E4FBC870];
  *a2 = MEMORY[0x1E4FBC868];
  a2[1] = v30;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(uint64_t *a1, uint64_t a2, char a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v14 = a4[1];
  uint64_t v85 = *a4;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  *(unsigned char *)(v15 + 32) = -2;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v8, (uint64_t)&v100);
  switch(v108)
  {
    case 1:
      uint64_t v32 = v100;
      if (a3)
      {
        uint64_t v33 = *((void *)&v100 + 1);
        uint64_t v34 = swift_retain();
        uint64_t v35 = specialized NSAttributedString.init<A>(_:including:)(v34);
        a1[3] = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSAttributedString);
        a1[4] = lazy protocol witness table accessor for type NSAttributedString and conformance NSObject();
        *a1 = v35;
        uint64_t result = swift_release();
        uint64_t v36 = a2;
        *(void *)a2 = v32;
        *(void *)(a2 + 8) = v33;
        goto LABEL_41;
      }
      long long v58 = *(_OWORD *)(v100 + 32);
      long long v87 = *(_OWORD *)(v100 + 16);
      long long v88 = v58;
      long long v89 = *(_OWORD *)(v100 + 48);
      long long v93 = v58;
      long long v94 = v89;
      long long v92 = v87;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v92, (uint64_t)v109);
      outlined retain of Locale((uint64_t)v109);
      uint64_t v59 = MEMORY[0x185302050](&v87);
      uint64_t v61 = v60;
      a1[3] = MEMORY[0x1E4FBB1A0];
      a1[4] = lazy protocol witness table accessor for type String and conformance String();
      *a1 = v59;
      a1[1] = v61;
      swift_release();
      goto LABEL_28;
    case 2:
      long long v94 = v102;
      long long v95 = v103;
      long long v96 = v104;
      long long v97 = v105;
      long long v92 = v100;
      long long v93 = v101;
      *(void *)&long long v87 = v85;
      *((void *)&v87 + 1) = v14;
      uint64_t v25 = ((uint64_t (*)(long long *))v100)(&v87);
      uint64_t v27 = v26;
      a1[3] = MEMORY[0x1E4FBB1A0];
      a1[4] = lazy protocol witness table accessor for type String and conformance String();
      *a1 = v25;
      a1[1] = v27;
      getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(v15, a3 & 1, a2);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)&v92);
      return swift_release();
    case 3:
      long long v94 = v102;
      long long v95 = v103;
      long long v96 = v104;
      long long v97 = v105;
      long long v92 = v100;
      long long v93 = v101;
      *(void *)&long long v87 = v85;
      *((void *)&v87 + 1) = v14;
      ((void (*)(_OWORD **__return_ptr, long long *))v100)(&v86, &v87);
      if (a3)
      {
        getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(v15, 1, (uint64_t)&v87);
        unsigned __int8 v28 = v88;
        if (v88 != 255)
        {
          long long v29 = v87;
          if (v88)
          {
            LOBYTE(v109[0]) = 0;
            AttributedString.mergeAttributes(_:mergePolicy:)((uint64_t *)&v87, (char *)v109);
          }
          outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v29, *((uint64_t *)&v29 + 1), v28);
        }
        uint64_t v21 = v86;
        uint64_t v30 = swift_retain();
        uint64_t v31 = specialized NSAttributedString.init<A>(_:including:)(v30);
        a1[3] = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSAttributedString);
        a1[4] = lazy protocol witness table accessor for type NSAttributedString and conformance NSObject();
        *a1 = v31;
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)&v92);
        uint64_t result = swift_release();
        goto LABEL_40;
      }
      long long v54 = v86[2];
      v109[0] = v86[1];
      v109[1] = v54;
      long long v110 = v86[3];
      long long v88 = v54;
      long long v89 = v110;
      long long v87 = v109[0];
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v87, (uint64_t)v111);
      outlined retain of Locale((uint64_t)v111);
      uint64_t v55 = MEMORY[0x185302050](v109);
      uint64_t v57 = v56;
      a1[3] = MEMORY[0x1E4FBB1A0];
      a1[4] = lazy protocol witness table accessor for type String and conformance String();
      *a1 = v55;
      a1[1] = v57;
      swift_release();
      outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)&v92);
LABEL_28:
      uint64_t result = swift_release();
      goto LABEL_44;
    case 4:
      uint64_t v74 = a7;
      long long v80 = a1;
      uint64_t v16 = *((void *)&v100 + 1);
      uint64_t v17 = v101;
      uint64_t v76 = v100;
      uint64_t v77 = *((void *)&v101 + 1);
      uint64_t v18 = v102;
      uint64_t v19 = v103;
      uint64_t v20 = v105;
      v83 = (void *)*((void *)&v104 + 1);
      uint64_t v75 = *((void *)&v105 + 1);
      uint64_t v78 = *((void *)&v102 + 1);
      uint64_t v79 = v106;
      uint64_t v82 = v107;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v81 = v83;
      swift_retain();
      swift_retain();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a3)
      {
        *(void *)&long long v92 = v76;
        *((void *)&v92 + 1) = v16;
        *(void *)&long long v93 = v17;
        *((void *)&v93 + 1) = v77;
        *(void *)&long long v94 = v18;
        *((void *)&v94 + 1) = v78;
        *(void *)&long long v95 = v19;
        *((void *)&v95 + 1) = v85;
        *(void *)&long long v96 = v14;
        *((void *)&v96 + 1) = v81;
        *(void *)&long long v97 = v20;
        *((void *)&v97 + 1) = v75;
        uint64_t v98 = v79;
        uint64_t v99 = v82;
        long long v87 = 0uLL;
        LOWORD(v88) = 1;
        *((void *)&v88 + 1) = 0;
        LOWORD(v89) = 256;
        *((void *)&v89 + 1) = 0;
        uint64_t v90 = 0;
        char v91 = 0;
        AttributedString.init<A>(localized:options:including:)(v109, &v92, &v87, a5, a6, v74);
        uint64_t v21 = *(_OWORD **)&v109[0];
        uint64_t v22 = swift_retain();
        uint64_t v23 = specialized NSAttributedString.init<A>(_:including:)(v22);
        v80[3] = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSAttributedString);
        v80[4] = lazy protocol witness table accessor for type NSAttributedString and conformance NSObject();
        *long long v80 = v23;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_40;
      }
      *(void *)&long long v92 = v76;
      *((void *)&v92 + 1) = v16;
      *(void *)&long long v93 = v17;
      *((void *)&v93 + 1) = v77;
      *(void *)&long long v94 = v18;
      *((void *)&v94 + 1) = v78;
      *(void *)&long long v95 = v19;
      *((void *)&v95 + 1) = v85;
      *(void *)&long long v96 = v14;
      *((void *)&v96 + 1) = v81;
      *(void *)&long long v97 = v20;
      *((void *)&v97 + 1) = v75;
      uint64_t v98 = v79;
      uint64_t v99 = v82;
      long long v87 = 0uLL;
      LOWORD(v88) = 256;
      *((void *)&v88 + 1) = 0;
      *(void *)&long long v89 = 0;
      BYTE8(v89) = 0;
      long long v51 = specialized String.init(localized:options:)(&v92, &v87);
      uint64_t v53 = v52;
      v80[3] = MEMORY[0x1E4FBB1A0];
      v80[4] = lazy protocol witness table accessor for type String and conformance String();
      *long long v80 = (uint64_t)v51;
      v80[1] = v53;
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_44;
    case 5:
      uint64_t v37 = v100;
      int v38 = BYTE8(v100);
      int v39 = BYTE9(v100);
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      uint64_t v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation23LocalizedStringResourceVG_SSs5NeverOTg506_sSS10d164E17LocalizationValueV14FormatArgumentV7resolve10attributed4with9includings7CVarArg_p6vararg_AE15_AttributeFixupOSg11attrStrInfotSb_AA6LocaleVxmtAA0M5ScopeRzlFSSAA23efG7VXEfU0_AF6LocaleVTf1cn_nTf4ng_n(v37, v85, v14);
      swift_bridgeObjectRelease();
      if (a3)
      {
        if (v39) {
          int v41 = 256;
        }
        else {
          int v41 = 0;
        }
        specialized static ICUListFormatter.formatter<A, B>(for:)(v41 | v38, v85, v14);
        uint64_t v42 = v40;
        int64_t v43 = *(void *)(v40 + 16);
        *(void *)&long long v92 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0);
        v44._rawValue = (void *)v92;
        if (v43)
        {
          swift_bridgeObjectRetain();
          uint64_t v45 = (uint64_t *)(v42 + 40);
          do
          {
            uint64_t v46 = *(v45 - 1);
            uint64_t v47 = *v45;
            *(Swift::OpaquePointer *)&long long v92 = v44;
            unint64_t v49 = *((void *)v44._rawValue + 2);
            unint64_t v48 = *((void *)v44._rawValue + 3);
            swift_bridgeObjectRetain();
            if (v49 >= v48 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
              v44._rawValue = (void *)v92;
            }
            v45 += 2;
            *((void *)v44._rawValue + 2) = v49 + 1;
            long long v50 = (char *)v44._rawValue + 16 * v49;
            *((void *)v50 + 4) = v46;
            *((void *)v50 + 5) = v47;
            --v43;
          }
          while (v43);
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        ICUListFormatter.format(strings:)(v44);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(&v92, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v87);
        uint64_t v21 = (_OWORD *)v87;
        uint64_t v71 = swift_retain();
        uint64_t v72 = specialized NSAttributedString.init<A>(_:including:)(v71);
        a1[3] = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSAttributedString);
        a1[4] = lazy protocol witness table accessor for type NSAttributedString and conformance NSObject();
        *a1 = v72;
        swift_release();
        uint64_t result = swift_unknownObjectRelease();
LABEL_40:
        uint64_t v36 = a2;
        *(void *)a2 = v21;
        *(void *)(a2 + 8) = 0;
LABEL_41:
        *(unsigned char *)(v36 + 16) = 0;
      }
      else
      {
        a1[3] = MEMORY[0x1E4FBB1A0];
        a1[4] = lazy protocol witness table accessor for type String and conformance String();
        if (v39) {
          int v62 = 256;
        }
        else {
          int v62 = 0;
        }
        specialized static ICUListFormatter.formatter<A, B>(for:)(v62 | v38, v85, v14);
        int64_t v63 = *(void *)(v40 + 16);
        *(void *)&long long v92 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63, 0);
        v64._rawValue = (void *)v92;
        if (v63)
        {
          swift_bridgeObjectRetain();
          uint64_t v65 = (uint64_t *)(v40 + 40);
          do
          {
            uint64_t v66 = *(v65 - 1);
            uint64_t v67 = *v65;
            *(Swift::OpaquePointer *)&long long v92 = v64;
            unint64_t v69 = *((void *)v64._rawValue + 2);
            unint64_t v68 = *((void *)v64._rawValue + 3);
            swift_bridgeObjectRetain();
            if (v69 >= v68 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
              v64._rawValue = (void *)v92;
            }
            v65 += 2;
            *((void *)v64._rawValue + 2) = v69 + 1;
            uint64_t v70 = (char *)v64._rawValue + 16 * v69;
            *((void *)v70 + 4) = v66;
            *((void *)v70 + 5) = v67;
            --v63;
          }
          while (v63);
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        Swift::String v73 = ICUListFormatter.format(strings:)(v64);
        swift_release();
        swift_release();
        *(Swift::String *)a1 = v73;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
LABEL_44:
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = -1;
      }
      return result;
    case 6:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x181AE4750);
    default:
      outlined init with take of Any(&v100, &v92);
      outlined init with copy of Any((uint64_t)&v92, (uint64_t)&v87);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
      swift_dynamicCast();
      getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(v15, a3 & 1, a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
      return swift_release();
  }
}

uint64_t getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 == 254)
  {
    if (a2)
    {
      String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()(v14);
      uint64_t v8 = v14[0];
      uint64_t v9 = v14[1];
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v14[0];
      *(void *)(a1 + 24) = v9;
      unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
      *(unsigned char *)(a1 + 32) = 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup??(v10, v11, v12);
      *(void *)a3 = v8;
      *(void *)(a3 + 8) = v9;
      *(unsigned char *)(a3 + 16) = 1;
    }
    else
    {
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 32) = -1;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = -1;
    }
  }
  else
  {
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = v5;
    *(unsigned char *)(a3 + 16) = v6;
  }

  return outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup??(v4, v5, v6);
}

BOOL static String.LocalizationValue.FormatArgument.== infix(_:_:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v3, (uint64_t)v171);
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v2, (uint64_t)&v172);
  switch(v171[112])
  {
    case 1:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171, (uint64_t)v170);
      uint64_t v4 = (_OWORD *)v170[0];
      if (v178 != 1)
      {
        swift_release();
LABEL_42:
        outlined destroy of Any?((uint64_t)v171, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.Storage, String.LocalizationValue.FormatArgument.Storage));
        return 0;
      }
      long long v5 = v172;
      uint64_t v101 = v170[1];
      long long v6 = *(_OWORD *)(v170[0] + 16);
      long long v7 = *(_OWORD *)(v170[0] + 32);
      long long v226 = *(_OWORD *)(v170[0] + 48);
      v225[1] = v7;
      v225[0] = v6;
      long long v8 = *(_OWORD *)(v170[0] + 16);
      long long v9 = *(_OWORD *)(v170[0] + 32);
      v227[2] = v226;
      v227[1] = v9;
      v227[0] = v8;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v227, (uint64_t)v228);
      outlined retain of Locale((uint64_t)v228);
      uint64_t v132 = BigString.startIndex.getter();
      uint64_t v127 = v11;
      uint64_t v129 = v10;
      uint64_t v13 = v12;
      outlined release of Locale((uint64_t)v225);
      long long v14 = v4[1];
      v223[1] = v4[2];
      long long v224 = v4[3];
      v223[0] = v14;
      long long v15 = v4[1];
      long long v16 = v4[2];
      v229[2] = v224;
      v229[1] = v16;
      v229[0] = v15;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v229, (uint64_t)v230);
      outlined retain of Locale((uint64_t)v230);
      uint64_t v17 = BigString.endIndex.getter();
      uint64_t v19 = v18;
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      outlined release of Locale((uint64_t)v223);
      uint64_t v211 = v132;
      uint64_t v212 = v129;
      uint64_t v213 = v127;
      uint64_t v214 = v13;
      uint64_t v215 = v17;
      uint64_t v216 = v19;
      uint64_t v217 = v21;
      uint64_t v218 = v23;
      long long v24 = *(_OWORD *)(v5 + 16);
      long long v25 = *(_OWORD *)(v5 + 32);
      long long v222 = *(_OWORD *)(v5 + 48);
      v221[1] = v25;
      v221[0] = v24;
      long long v26 = *(_OWORD *)(v5 + 16);
      long long v27 = *(_OWORD *)(v5 + 32);
      v231[2] = v222;
      v231[1] = v27;
      v231[0] = v26;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v231, (uint64_t)v232);
      outlined retain of Locale((uint64_t)v232);
      uint64_t v133 = BigString.startIndex.getter();
      uint64_t v128 = v29;
      uint64_t v130 = v28;
      uint64_t v31 = v30;
      outlined release of Locale((uint64_t)v221);
      long long v32 = *(_OWORD *)(v5 + 16);
      long long v33 = *(_OWORD *)(v5 + 32);
      long long v220 = *(_OWORD *)(v5 + 48);
      v219[0] = v32;
      v219[1] = v33;
      long long v34 = *(_OWORD *)(v5 + 16);
      long long v35 = *(_OWORD *)(v5 + 32);
      v233[2] = v220;
      v233[1] = v35;
      v233[0] = v34;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v233, (uint64_t)v234);
      outlined retain of Locale((uint64_t)v234);
      uint64_t v36 = BigString.endIndex.getter();
      uint64_t v38 = v37;
      uint64_t v40 = v39;
      uint64_t v42 = v41;
      outlined release of Locale((uint64_t)v219);
      uint64_t v203 = v133;
      uint64_t v204 = v130;
      uint64_t v205 = v128;
      uint64_t v206 = v31;
      uint64_t v207 = v36;
      uint64_t v208 = v38;
      uint64_t v209 = v40;
      uint64_t v210 = v42;
      uint64_t v43 = swift_retain();
      AttributedString.Runs.init(_:in:)(v43, v152);
      uint64_t v44 = swift_retain();
      AttributedString.Runs.init(_:in:)(v44, v161);
      uint64_t v45 = *(void *)v152;
      uint64_t v46 = *(void *)v161;
      if (*(void *)v152 == *(void *)v161
        && (static BigString.Index.== infix(_:_:)() & 1) != 0
        && (static BigString.Index.== infix(_:_:)() & 1) != 0)
      {
        goto LABEL_51;
      }
      if (__OFSUB__(*(void *)&v152[72], *(void *)&v152[8])) {
        goto LABEL_63;
      }
      if (__OFSUB__(*(void *)&v161[72], *(void *)&v161[8]))
      {
LABEL_64:
        __break(1u);
        JUMPOUT(0x181AE5A0CLL);
      }
      if (*(void *)&v152[72] - *(void *)&v152[8] != *(void *)&v161[72] - *(void *)&v161[8]) {
        goto LABEL_57;
      }
      uint64_t v118 = *((void *)&v157 + 1);
      uint64_t v116 = v157;
      uint64_t v119 = *((void *)&v156 + 1);
      uint64_t v117 = v158;
      uint64_t v108 = *((void *)&v165 + 1);
      uint64_t v114 = *((void *)&v166 + 1);
      uint64_t v115 = v166;
      uint64_t v113 = v167;
      *(_OWORD *)&v151[160] = v158;
      *(_OWORD *)&v151[176] = v159;
      *(void *)&v151[192] = v160;
      *(_OWORD *)&v151[96] = v154;
      *(_OWORD *)&v151[112] = v155;
      *(_OWORD *)&v151[128] = v156;
      *(_OWORD *)&v151[144] = v157;
      *(_OWORD *)&v151[32] = *(_OWORD *)&v152[32];
      *(_OWORD *)&v151[48] = *(_OWORD *)&v152[48];
      *(_OWORD *)&v151[64] = *(_OWORD *)&v152[64];
      *(_OWORD *)&v151[80] = v153;
      *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
      *(_OWORD *)&v151[16] = *(_OWORD *)&v152[16];
      *(_OWORD *)&v151[200] = *(_OWORD *)&v152[8];
      *(_OWORD *)&v151[216] = *(_OWORD *)&v152[24];
      *(_OWORD *)&v151[232] = *(_OWORD *)&v152[40];
      *(_OWORD *)&v151[248] = *(_OWORD *)&v152[56];
      __src[10] = v167;
      __src[11] = v168;
      *(void *)&__src[12] = v169;
      __src[6] = v163;
      __src[7] = v164;
      __src[8] = v165;
      __src[9] = v166;
      __src[2] = *(_OWORD *)&v161[32];
      __src[3] = *(_OWORD *)&v161[48];
      __src[4] = *(_OWORD *)&v161[64];
      __src[5] = v162;
      __src[0] = *(_OWORD *)v161;
      __src[1] = *(_OWORD *)&v161[16];
      *(_OWORD *)((char *)&__src[12] + 8) = *(_OWORD *)&v161[8];
      *(_OWORD *)((char *)&__src[13] + 8) = *(_OWORD *)&v161[24];
      *(_OWORD *)((char *)&__src[14] + 8) = *(_OWORD *)&v161[40];
      long long v110 = (long long *)(v45 + 16);
      uint64_t v109 = (long long *)(v46 + 16);
      *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)&v161[56];
      outlined retain of AttributedString.Runs((uint64_t)v152);
      outlined retain of AttributedString.Runs((uint64_t)v161);
      while (1)
      {
        specialized IndexingIterator.next()((uint64_t)v148);
        uint64_t v47 = v148[0];
        uint64_t v48 = v148[1];
        uint64_t v49 = v148[2];
        uint64_t v50 = v148[3];
        uint64_t v51 = v148[4];
        uint64_t v52 = v148[5];
        uint64_t v53 = v148[6];
        uint64_t v54 = v148[7];
        uint64_t v55 = v148[8];
        uint64_t v120 = v148[10];
        uint64_t v121 = v148[9];
        specialized IndexingIterator.next()((uint64_t)&v137);
        v149[0] = v47;
        uint64_t v125 = v48;
        v149[1] = v48;
        v149[2] = v49;
        v149[3] = v50;
        uint64_t v56 = v47;
        uint64_t v57 = v137;
        v149[4] = v51;
        v149[5] = v52;
        v149[6] = v53;
        v149[7] = v54;
        v149[8] = v55;
        v149[9] = v121;
        v149[10] = v120;
        v149[11] = v137;
        v149[12] = v138;
        v149[13] = v139;
        v149[14] = v140;
        v149[15] = v141;
        v149[16] = v142;
        v149[17] = v143;
        v149[18] = v144;
        v149[19] = v145;
        v149[20] = v146;
        v149[21] = v147;
        if (!v56) {
          break;
        }
        if (!v137) {
          goto LABEL_55;
        }
        uint64_t v58 = v138;
        outlined copy of AttributedString.Runs.Run?(v56);
        outlined copy of AttributedString.Runs.Run?(v57);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((specialized static Dictionary<>.== infix(_:_:)(v56, v57) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_54:
          outlined consume of AttributedString.Runs.Run?(v56);
          outlined consume of AttributedString.Runs.Run?(v57);
          goto LABEL_55;
        }
        char v59 = specialized static Set.== infix(_:_:)(v125, v58);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v59 & 1) == 0) {
          goto LABEL_54;
        }
        long long v60 = *v110;
        long long v61 = v110[2];
        v202[1] = v110[1];
        v202[2] = v61;
        v202[0] = v60;
        long long v62 = *v110;
        long long v63 = v110[1];
        v235[2] = v61;
        v235[1] = v63;
        v235[0] = v62;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v235, (uint64_t)v236);
        outlined retain of Locale((uint64_t)v236);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v202);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v122 = BigString.Index.utf8Offset.getter();
        uint64_t v64 = BigString.Index.utf8Offset.getter();
        outlined consume of AttributedString.Runs.Run?(v56);
        if (__OFSUB__(v64, v122))
        {
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        uint64_t v111 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v112 = v65;
        uint64_t v104 = v67;
        uint64_t v105 = v66;
        outlined release of Locale((uint64_t)v179);
        long long v68 = *v109;
        long long v69 = v109[2];
        v201[1] = v109[1];
        v201[2] = v69;
        v201[0] = v68;
        long long v70 = *v109;
        long long v71 = v109[1];
        v237[2] = v69;
        v237[1] = v71;
        v237[0] = v70;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v237, (uint64_t)v238);
        outlined retain of Locale((uint64_t)v238);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v201);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v123 = BigString.Index.utf8Offset.getter();
        uint64_t v106 = BigString.Index.utf8Offset.getter();
        outlined consume of AttributedString.Runs.Run?(v57);
        if (__OFSUB__(v106, v123)) {
          goto LABEL_60;
        }
        uint64_t v124 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v102 = v73;
        uint64_t v103 = v72;
        uint64_t v107 = v74;
        outlined release of Locale((uint64_t)v180);
        long long v75 = *v110;
        long long v76 = v110[2];
        v200[1] = v110[1];
        v200[2] = v76;
        v200[0] = v75;
        long long v77 = *v110;
        long long v78 = v110[1];
        v239[2] = v76;
        v239[1] = v78;
        v239[0] = v77;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v239, (uint64_t)v240);
        outlined retain of Locale((uint64_t)v240);
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_61;
        }
        uint64_t v192 = v119;
        uint64_t v193 = v116;
        uint64_t v194 = v118;
        uint64_t v195 = v117;
        uint64_t v196 = v111;
        uint64_t v197 = v112;
        uint64_t v198 = v105;
        uint64_t v199 = v104;
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v200);
        long long v79 = *v109;
        long long v80 = v109[2];
        v191[1] = v109[1];
        v191[2] = v80;
        v191[0] = v79;
        long long v81 = *v109;
        long long v82 = v109[1];
        v241[2] = v80;
        v241[1] = v82;
        v241[0] = v81;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v241, (uint64_t)v242);
        outlined retain of Locale((uint64_t)v242);
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_62;
        }
        uint64_t v183 = v108;
        uint64_t v184 = v115;
        uint64_t v185 = v114;
        uint64_t v186 = v113;
        uint64_t v187 = v124;
        uint64_t v188 = v103;
        uint64_t v189 = v102;
        uint64_t v190 = v107;
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v191);
        char v83 = MEMORY[0x185301310](v181, v182);
        outlined consume of AttributedString.Runs.Run?(v56);
        outlined consume of AttributedString.Runs.Run?(v57);
        outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(v149);
        outlined release of Locale((uint64_t)v182);
        outlined release of Locale((uint64_t)v181);
        if ((v83 & 1) == 0) {
          goto LABEL_56;
        }
        uint64_t v108 = v124;
        uint64_t v114 = v102;
        uint64_t v115 = v103;
        uint64_t v113 = v107;
        uint64_t v118 = v105;
        uint64_t v119 = v111;
        uint64_t v116 = v112;
        uint64_t v117 = v104;
      }
      if (v137)
      {
LABEL_55:
        outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(v149);
LABEL_56:
        memcpy(__dst, __src, sizeof(__dst));
        outlined release of AttributedString.Runs((uint64_t)__dst);
        memcpy(v136, v151, 0x108uLL);
        outlined release of AttributedString.Runs((uint64_t)v136);
LABEL_57:
        outlined release of AttributedString.Runs((uint64_t)v161);
        outlined release of AttributedString.Runs((uint64_t)v152);
        swift_release();
        swift_release();
LABEL_58:
        outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171);
        return 0;
      }
      outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(v149);
      memcpy(__dst, __src, sizeof(__dst));
      outlined release of AttributedString.Runs((uint64_t)__dst);
      memcpy(v136, v151, 0x108uLL);
      outlined release of AttributedString.Runs((uint64_t)v136);
LABEL_51:
      outlined release of AttributedString.Runs((uint64_t)v161);
      outlined release of AttributedString.Runs((uint64_t)v152);
      swift_release();
      swift_release();
      outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171);
      return v101 == *((void *)&v5 + 1);
    case 2:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171, (uint64_t)v151);
      if (v178 == 2)
      {
        __src[2] = *(_OWORD *)&v151[32];
        __src[3] = *(_OWORD *)&v151[48];
        __src[4] = *(_OWORD *)&v151[64];
        __src[5] = *(_OWORD *)&v151[80];
        __src[0] = *(_OWORD *)v151;
        __src[1] = *(_OWORD *)&v151[16];
        v136[2] = v174;
        v136[3] = *(_OWORD *)v175;
        v136[4] = *(_OWORD *)&v175[16];
        v136[5] = *(_OWORD *)v176;
        v136[0] = v172;
        v136[1] = v173;
        char v84 = (*(uint64_t (**)(_OWORD *))&v151[16])(v136);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v136);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)__src);
        goto LABEL_46;
      }
      outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v151);
      goto LABEL_42;
    case 3:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171, (uint64_t)v151);
      if (v178 == 3)
      {
        __src[2] = *(_OWORD *)&v151[32];
        __src[3] = *(_OWORD *)&v151[48];
        __src[4] = *(_OWORD *)&v151[64];
        __src[5] = *(_OWORD *)&v151[80];
        __src[0] = *(_OWORD *)v151;
        __src[1] = *(_OWORD *)&v151[16];
        v136[2] = v174;
        v136[3] = *(_OWORD *)v175;
        v136[4] = *(_OWORD *)&v175[16];
        v136[5] = *(_OWORD *)v176;
        v136[0] = v172;
        v136[1] = v173;
        char v84 = (*(uint64_t (**)(_OWORD *))&v151[16])(v136);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)v136);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)__src);
        goto LABEL_46;
      }
      outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)v151);
      goto LABEL_42;
    case 4:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171, (uint64_t)v151);
      uint64_t v85 = *(void **)&v151[72];
      if (v178 != 4)
      {

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
      long long v86 = *(void **)&v175[24];
      __src[0] = *(_OWORD *)v151;
      __src[1] = *(_OWORD *)&v151[16];
      __src[2] = *(_OWORD *)&v151[32];
      __src[3] = *(_OWORD *)&v151[48];
      __src[4] = *(_OWORD *)&v151[64];
      __src[5] = *(_OWORD *)&v151[80];
      __src[6] = *(_OWORD *)&v151[96];
      v136[0] = v172;
      v136[1] = v173;
      v136[2] = v174;
      *(_OWORD *)((char *)&v136[3] + 8) = *(_OWORD *)&v175[8];
      *(void *)&v136[3] = *(void *)v175;
      *((void *)&v136[4] + 1) = *(void *)&v175[24];
      *(_OWORD *)((char *)&v136[5] + 8) = *(_OWORD *)&v176[8];
      *(void *)&v136[5] = *(void *)v176;
      *((void *)&v136[6] + 1) = v177;
      char v126 = specialized static LocalizedStringResource.== infix(_:_:)((uint64_t)__src, (uint64_t)v136);

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171);
      return (v126 & 1) != 0;
    case 5:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171, (uint64_t)v151);
      long long v134 = *(_OWORD *)&v151[16];
      if (v178 != 5)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_42;
      }
      int v87 = v151[9];
      int v88 = v151[8];
      int v89 = BYTE8(v172);
      int v90 = BYTE9(v172);
      long long v131 = v173;
      char v91 = specialized static Array<A>.== infix(_:_:)(*(uint64_t *)v151, v172);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v91 & 1) != 0 && v88 == v89 && ((v87 ^ v90) & 1) == 0)
      {
        __src[0] = v134;
        v136[0] = v131;
        char v84 = specialized static Locale.== infix(_:_:)((uint64_t)__src, (uint64_t)v136);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_46;
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_58;
    case 6:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171, (uint64_t)v151);
      if (v178 != 6) {
        goto LABEL_42;
      }
      int v92 = v151[0];
      int v93 = v172;
      outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171);
      return v92 == v93;
    default:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171, (uint64_t)v151);
      if (v178)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v151);
        goto LABEL_42;
      }
      outlined init with take of Any(v151, __src);
      outlined init with take of Any(&v172, v136);
      uint64_t v95 = *((void *)&__src[1] + 1);
      long long v96 = __swift_project_boxed_opaque_existential_1(__src, *((uint64_t *)&__src[1] + 1));
      __dst[3] = v95;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(__dst);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v95 - 8) + 16))(boxed_opaque_existential_1, v96, v95);
      uint64_t v98 = *((void *)&v136[1] + 1);
      uint64_t v99 = __swift_project_boxed_opaque_existential_1(v136, *((uint64_t *)&v136[1] + 1));
      *(void *)&v161[24] = v98;
      long long v100 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v161);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v98 - 8) + 16))(v100, v99, v98);
      char v84 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)__dst, (uint64_t)v161);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__src);
LABEL_46:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v171);
      return (v84 & 1) != 0;
  }
}

uint64_t String.LocalizationValue.FormatArgument.CodableStorage.init(_:fallbackLocale:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v194 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?);
  MEMORY[0x1F4188790](v5 - 8);
  long long v167 = (char *)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  uint64_t v165 = *(void *)(v7 - 8);
  uint64_t v166 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v162 = (uint64_t)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v176 = (char *)&v162 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  uint64_t v174 = *(void *)(v11 - 8);
  uint64_t v175 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v164 = (uint64_t)&v162 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v186 = (char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for NSDecimal.FormatStyle(0);
  uint64_t v184 = *(void *)(v15 - 8);
  uint64_t v185 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v172 = (uint64_t)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent?);
  MEMORY[0x1F4188790](v17 - 8);
  long long v173 = (char *)&v162 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  uint64_t v170 = *(void *)(v19 - 8);
  uint64_t v171 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v163 = (uint64_t)&v162 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency?);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v183 = (char *)&v162 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  uint64_t v181 = *(void *)(v23 - 8);
  uint64_t v182 = v23;
  MEMORY[0x1F4188790](v23);
  uint64_t v169 = (uint64_t)&v162 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v25 - 8);
  *(void *)&long long v189 = (char *)&v162 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  *(void *)&long long v188 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v177 = (uint64_t)&v162 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent?);
  MEMORY[0x1F4188790](v29 - 8);
  uint64_t v180 = (char *)&v162 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  uint64_t v178 = *(void *)(v31 - 8);
  uint64_t v179 = v31;
  MEMORY[0x1F4188790](v31);
  uint64_t v168 = (uint64_t)&v162 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency?);
  MEMORY[0x1F4188790](v33 - 8);
  long long v35 = (char *)&v162 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  uint64_t v187 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v162 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>?);
  MEMORY[0x1F4188790](v39 - 8);
  uint64_t v41 = (char *)&v162 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  *(void *)&long long v190 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v44 = (char *)&v162 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v192 = *a2;
  *(void *)&long long v191 = a2[1];
  uint64_t v193 = a1;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a1, (uint64_t)v223);
  switch(v227)
  {
    case 0:
      outlined init with take of Any(v223, v207);
      outlined init with copy of Any((uint64_t)v207, (uint64_t)&v212);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
      if (swift_dynamicCast()) {
        goto LABEL_3;
      }
      outlined init with copy of Any((uint64_t)v207, (uint64_t)&v212);
      if (swift_dynamicCast()) {
        goto LABEL_12;
      }
      outlined init with copy of Any((uint64_t)v207, (uint64_t)&v212);
      if (swift_dynamicCast())
      {
LABEL_3:
        swift_unknownObjectRelease();
        int v45 = v202[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
        *uint64_t v194 = v45;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
        return swift_storeEnumTagMultiPayload();
      }
      outlined init with copy of Any((uint64_t)v207, (uint64_t)&v212);
      if (swift_dynamicCast())
      {
LABEL_12:
        swift_unknownObjectRelease();
        uint64_t v62 = *(void *)&v202[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
        *(void *)uint64_t v194 = v62;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
        return swift_storeEnumTagMultiPayload();
      }
      outlined init with copy of Any((uint64_t)v207, (uint64_t)&v212);
      if (swift_dynamicCast())
      {
        swift_unknownObjectRelease();
        int v116 = v202[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
        *uint64_t v194 = v116;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
        return swift_storeEnumTagMultiPayload();
      }
      outlined init with copy of Any((uint64_t)v207, (uint64_t)&v212);
      if (swift_dynamicCast()) {
        goto LABEL_67;
      }
      outlined init with copy of Any((uint64_t)v207, (uint64_t)&v212);
      if (swift_dynamicCast()) {
        goto LABEL_67;
      }
      outlined init with copy of Any((uint64_t)v207, (uint64_t)&v212);
      if (swift_dynamicCast())
      {
        swift_unknownObjectRelease();
        long long v158 = v202[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
        *(_OWORD *)uint64_t v194 = v158;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
        return swift_storeEnumTagMultiPayload();
      }
      else
      {
        outlined init with copy of Any((uint64_t)v207, (uint64_t)&v212);
        if (swift_dynamicCast())
        {
LABEL_67:
          swift_unknownObjectRelease();
          uint64_t v160 = *(void *)&v202[0];
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
          *(void *)uint64_t v194 = v160;
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
          return swift_storeEnumTagMultiPayload();
        }
        else
        {
          uint64_t v161 = v193;
          outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v193, (uint64_t)&v212);
          *(void *)&v202[0] = v192;
          *((void *)&v202[0] + 1) = v191;
          String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)((uint64_t)&v212, (uint64_t *)v202, (uint64_t)v194);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v161);
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
        }
      }
    case 2:
      v221[0] = *(_OWORD *)v224;
      v221[1] = *(_OWORD *)&v224[16];
      v222[0] = *(_OWORD *)&v224[32];
      v222[1] = v225;
      v220[0] = *(_OWORD *)v223;
      v220[1] = *(_OWORD *)&v223[16];
      outlined init with copy of Any((uint64_t)v221, (uint64_t)&v212);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
      if (swift_dynamicCast())
      {
        uint64_t v53 = *(void *)&v207[0];
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v219);
        if (swift_dynamicCast())
        {
          swift_unknownObjectRelease();
          long long v199 = v216;
          long long v200 = v217;
          v201[0] = v218[0];
          *(_OWORD *)((char *)v201 + 10) = *(_OWORD *)((char *)v218 + 10);
          long long v195 = v212;
          long long v196 = v213;
          long long v197 = v214;
          long long v198 = v215;
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          long long v204 = v199;
          long long v205 = v200;
          v206[0] = v201[0];
          *(_OWORD *)((char *)v206 + 10) = *(_OWORD *)((char *)v201 + 10);
          v202[0] = v195;
          v202[1] = v196;
          v202[2] = v197;
          long long v203 = v198;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v202);
          outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v202, v207);
          uint64_t v54 = v194;
          *(void *)uint64_t v194 = v53;
          long long v55 = v210;
          *(_OWORD *)(v54 + 18) = v209;
          *(_OWORD *)(v54 + 22) = v55;
          *(_OWORD *)(v54 + 26) = v211[0];
          *(_OWORD *)((char *)v54 + 114) = *(_OWORD *)((char *)v211 + 10);
          long long v56 = v207[1];
          *(_OWORD *)(v54 + 2) = v207[0];
          *(_OWORD *)(v54 + 6) = v56;
          long long v57 = v207[2];
          long long v58 = v208;
LABEL_38:
          *(_OWORD *)(v54 + 10) = v57;
          *(_OWORD *)(v54 + 14) = v58;
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
          return swift_storeEnumTagMultiPayload();
        }
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v195);
        if (swift_dynamicCast())
        {
          swift_unknownObjectRelease();
          char v79 = v202[0];
          char v80 = BYTE1(v202[0]);
          char v81 = BYTE2(v202[0]);
          char v82 = BYTE3(v202[0]);
          char v83 = BYTE4(v202[0]);
          uint64_t v84 = *((void *)&v202[0] + 1);
          uint64_t v85 = *(void *)&v202[2];
          long long v192 = v202[1];
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          LOBYTE(v207[0]) = v79;
          BYTE1(v207[0]) = v80;
          BYTE2(v207[0]) = v81;
          BYTE3(v207[0]) = v82;
          BYTE4(v207[0]) = v83;
          *((void *)&v207[0] + 1) = v84;
          v207[1] = v192;
          *(void *)&v207[2] = v85;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi0_((uint64_t)v207);
LABEL_37:
          outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v207, &v212);
          uint64_t v54 = v194;
          *(void *)uint64_t v194 = v53;
          long long v114 = v217;
          *(_OWORD *)(v54 + 18) = v216;
          *(_OWORD *)(v54 + 22) = v114;
          *(_OWORD *)(v54 + 26) = v218[0];
          *(_OWORD *)((char *)v54 + 114) = *(_OWORD *)((char *)v218 + 10);
          long long v115 = v213;
          *(_OWORD *)(v54 + 2) = v212;
          *(_OWORD *)(v54 + 6) = v115;
          long long v57 = v214;
          long long v58 = v215;
          goto LABEL_38;
        }
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v195);
        if (swift_dynamicCast())
        {
          swift_unknownObjectRelease();
          long long v93 = v203;
          long long v191 = v202[0];
          long long v192 = v202[2];
          long long v190 = v202[1];
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          v207[0] = v191;
          v207[1] = v190;
          v207[2] = v192;
          long long v208 = v93;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)v207);
          goto LABEL_37;
        }
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v195);
        if (swift_dynamicCast())
        {
          swift_unknownObjectRelease();
          char v111 = v202[0];
          __int16 v112 = *(_WORD *)((char *)v202 + 1);
          uint64_t v113 = *((void *)&v202[2] + 1);
          long long v191 = *(long long *)((char *)&v202[1] + 8);
          long long v192 = *(long long *)((char *)v202 + 8);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          LOBYTE(v207[0]) = v111;
          *(_WORD *)((char *)v207 + 1) = v112;
          *(long long *)((char *)v207 + 8) = v192;
          *(long long *)((char *)&v207[1] + 8) = v191;
          *((void *)&v207[2] + 1) = v113;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi2_((uint64_t)v207);
          goto LABEL_37;
        }
        goto LABEL_64;
      }
      outlined init with copy of Any((uint64_t)v221, (uint64_t)&v212);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
      if (swift_dynamicCast())
      {
        long long v63 = v207[0];
        outlined init with copy of Any((uint64_t)v222, (uint64_t)v207);
        if (swift_dynamicCast())
        {
          swift_unknownObjectRelease();
          char v64 = v215;
          uint64_t v65 = *((void *)&v215 + 1);
          uint64_t v66 = *((void *)&v216 + 1);
          char v67 = v217;
          char v68 = BYTE1(v217);
          LODWORD(v192) = WORD3(v217);
          *(void *)&long long v191 = *((void *)&v217 + 1);
          __int16 v69 = v218[0];
          long long v189 = v213;
          long long v190 = v212;
          long long v188 = v214;
          int v70 = v216;
          int v71 = *(_DWORD *)((char *)&v217 + 2);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          uint64_t v72 = v194;
          *(_OWORD *)uint64_t v194 = v63;
          long long v73 = v189;
          *((_OWORD *)v72 + 1) = v190;
          *((_OWORD *)v72 + 2) = v73;
          *((_OWORD *)v72 + 3) = v188;
          *((unsigned char *)v72 + 64) = v64;
          *((void *)v72 + 9) = v65;
          v72[20] = v70;
          *((void *)v72 + 11) = v66;
          *((unsigned char *)v72 + 96) = v67;
          *((unsigned char *)v72 + 97) = v68;
          *(_DWORD *)((char *)v72 + 98) = v71;
          *((_WORD *)v72 + 51) = v192;
          *((void *)v72 + 13) = v191;
          *((_WORD *)v72 + 56) = v69;
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
          return swift_storeEnumTagMultiPayload();
        }
      }
      outlined init with copy of Any((uint64_t)v221, (uint64_t)&v212);
      if (swift_dynamicCast())
      {
        uint64_t v74 = *(void *)&v207[0];
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v212);
        char v75 = swift_dynamicCast();
        long long v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v190 + 56);
        if (v75)
        {
          v76(v41, 0, 1, v42);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          outlined init with take of LocalePreferences?((uint64_t)v41, (uint64_t)v44, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
          uint64_t v77 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                       + 48);
          long long v78 = v194;
          *(void *)uint64_t v194 = v74;
          outlined init with take of LocalePreferences?((uint64_t)v44, (uint64_t)v78 + v77, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
          type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
          swift_storeEnumTagMultiPayload();
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
          return swift_storeEnumTagMultiPayload();
        }
        v76(v41, 1, 1, v42);
        outlined destroy of Any?((uint64_t)v41, (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>?);
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v212);
        char v94 = swift_dynamicCast();
        uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v187 + 56);
        if (v94)
        {
          v95(v35, 0, 1, v36);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          outlined init with take of LocalePreferences?((uint64_t)v35, (uint64_t)v38, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
          uint64_t v96 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                       + 48);
          long long v97 = v194;
          *(void *)uint64_t v194 = v74;
          outlined init with take of LocalePreferences?((uint64_t)v38, (uint64_t)v97 + v96, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
          type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
LABEL_45:
          swift_storeEnumTagMultiPayload();
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
          return swift_storeEnumTagMultiPayload();
        }
        v95(v35, 1, 1, v36);
        outlined destroy of Any?((uint64_t)v35, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency?);
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v212);
        uint64_t v124 = v179;
        uint64_t v125 = (uint64_t)v180;
        char v126 = swift_dynamicCast();
        uint64_t v127 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v178 + 56);
        if (v126)
        {
          v127(v125, 0, 1, v124);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          uint64_t v128 = v168;
          outlined init with take of LocalePreferences?(v125, v168, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
          uint64_t v129 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                        + 48);
          uint64_t v130 = v194;
          *(void *)uint64_t v194 = v74;
          outlined init with take of LocalePreferences?(v128, (uint64_t)v130 + v129, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
          type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
          goto LABEL_45;
        }
        v127(v125, 1, 1, v124);
        uint64_t v145 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent?;
        goto LABEL_63;
      }
      outlined init with copy of Any((uint64_t)v221, (uint64_t)&v212);
      if (swift_dynamicCast())
      {
        uint64_t v86 = *(void *)&v207[0];
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v212);
        uint64_t v87 = v189;
        char v88 = swift_dynamicCast();
        int v89 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v188 + 56);
        if (v88)
        {
          v89(v87, 0, 1, v27);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          uint64_t v90 = v177;
          outlined init with take of LocalePreferences?(v87, v177, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          uint64_t v91 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                       + 48);
          int v92 = v194;
          *(void *)uint64_t v194 = v86;
          outlined init with take of LocalePreferences?(v90, (uint64_t)v92 + v91, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
LABEL_53:
          swift_storeEnumTagMultiPayload();
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
          return swift_storeEnumTagMultiPayload();
        }
        v89(v87, 1, 1, v27);
        outlined destroy of Any?(v87, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v212);
        uint64_t v118 = v182;
        uint64_t v117 = (uint64_t)v183;
        char v119 = swift_dynamicCast();
        uint64_t v120 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v181 + 56);
        if (v119)
        {
          v120(v117, 0, 1, v118);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          uint64_t v121 = v169;
          outlined init with take of LocalePreferences?(v117, v169, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
          uint64_t v122 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                        + 48);
          uint64_t v123 = v194;
          *(void *)uint64_t v194 = v86;
          outlined init with take of LocalePreferences?(v121, (uint64_t)v123 + v122, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
          type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
          goto LABEL_53;
        }
        v120(v117, 1, 1, v118);
        outlined destroy of Any?(v117, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency?);
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v212);
        uint64_t v125 = (uint64_t)v173;
        uint64_t v139 = v171;
        char v140 = swift_dynamicCast();
        uint64_t v141 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v170 + 56);
        if (v140)
        {
          v141(v125, 0, 1, v139);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          uint64_t v142 = v163;
          outlined init with take of LocalePreferences?(v125, v163, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
          uint64_t v143 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                        + 48);
          uint64_t v144 = v194;
          *(void *)uint64_t v194 = v86;
          outlined init with take of LocalePreferences?(v142, (uint64_t)v144 + v143, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
          type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
          goto LABEL_53;
        }
        v141(v125, 1, 1, v139);
        uint64_t v145 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent?;
        goto LABEL_63;
      }
      outlined init with copy of Any((uint64_t)v221, (uint64_t)&v212);
      type metadata accessor for NSDecimal(0);
      if (swift_dynamicCast())
      {
        LODWORD(v187) = v207[0];
        int v98 = WORD2(v207[0]);
        LODWORD(v188) = WORD3(v207[0]);
        int v99 = WORD4(v207[0]);
        LODWORD(v190) = WORD5(v207[0]);
        int v100 = WORD6(v207[0]);
        int v101 = HIWORD(v207[0]);
        LODWORD(v189) = LOWORD(v207[1]);
        int v102 = WORD1(v207[1]);
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v212);
        uint64_t v104 = v185;
        uint64_t v103 = (uint64_t)v186;
        char v105 = swift_dynamicCast();
        uint64_t v106 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56);
        if (v105)
        {
          v106(v103, 0, 1, v104);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          uint64_t v107 = v172;
          outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v103, v172, type metadata accessor for NSDecimal.FormatStyle);
          uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
          uint64_t v109 = v194;
          uint64_t v110 = (uint64_t)v194 + *(int *)(v108 + 48);
          *uint64_t v194 = v187;
          _OWORD v109[2] = v98;
          v109[3] = v188;
          v109[4] = v99;
          v109[5] = v190;
          v109[6] = v100;
          v109[7] = v101;
          v109[8] = v189;
          v109[9] = v102;
          outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v107, v110, type metadata accessor for NSDecimal.FormatStyle);
          type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
          goto LABEL_53;
        }
        LODWORD(v180) = v98;
        LODWORD(v181) = v99;
        LODWORD(v182) = v100;
        LODWORD(v183) = v101;
        LODWORD(v184) = v102;
        v106(v103, 1, 1, v104);
        outlined destroy of Any?(v103, &demangling cache variable for type metadata for NSDecimal.FormatStyle?);
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v212);
        uint64_t v132 = v175;
        uint64_t v131 = (uint64_t)v176;
        char v133 = swift_dynamicCast();
        long long v134 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v174 + 56);
        if (v133)
        {
          v134(v131, 0, 1, v132);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          uint64_t v135 = v164;
          outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v131, v164, type metadata accessor for NSDecimal.FormatStyle.Currency);
          uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
          uint64_t v137 = v194;
          uint64_t v138 = (uint64_t)v194 + *(int *)(v136 + 48);
          *uint64_t v194 = v187;
          v137[2] = (_WORD)v180;
          v137[3] = v188;
          v137[4] = v181;
          v137[5] = v190;
          v137[6] = v182;
          v137[7] = (_WORD)v183;
          v137[8] = v189;
          v137[9] = v184;
          outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v135, v138, type metadata accessor for NSDecimal.FormatStyle.Currency);
          type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
          goto LABEL_53;
        }
        v134(v131, 1, 1, v132);
        outlined destroy of Any?(v131, &demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
        outlined init with copy of Any((uint64_t)v222, (uint64_t)&v212);
        uint64_t v146 = v166;
        uint64_t v125 = (uint64_t)v167;
        char v147 = swift_dynamicCast();
        uint64_t v148 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v165 + 56);
        __int16 v149 = v184;
        __int16 v150 = (__int16)v183;
        __int16 v151 = v182;
        __int16 v152 = v190;
        __int16 v153 = v181;
        if (v147)
        {
          v148(v125, 0, 1, v146);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
          uint64_t v154 = v162;
          outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v125, v162, type metadata accessor for NSDecimal.FormatStyle.Percent);
          uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
          long long v156 = v194;
          uint64_t v157 = (uint64_t)v194 + *(int *)(v155 + 48);
          *uint64_t v194 = v187;
          v156[2] = (_WORD)v180;
          v156[3] = v188;
          v156[4] = v153;
          v156[5] = v152;
          v156[6] = v151;
          v156[7] = v150;
          v156[8] = v189;
          v156[9] = v149;
          outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v154, v157, type metadata accessor for NSDecimal.FormatStyle.Percent);
          type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
          goto LABEL_53;
        }
        v148(v125, 1, 1, v146);
        uint64_t v145 = &demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?;
LABEL_63:
        outlined destroy of Any?(v125, v145);
      }
LABEL_64:
      uint64_t v159 = v193;
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v193, (uint64_t)&v212);
      *(void *)&v207[0] = v192;
      *((void *)&v207[0] + 1) = v191;
      String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)((uint64_t)&v212, (uint64_t *)v207, (uint64_t)v194);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v159);
      return outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v220);
    case 4:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
      swift_unknownObjectRelease();
      uint64_t v48 = *(void *)&v223[24];
      uint64_t v49 = *(void *)v224;
      uint64_t v50 = *(void *)&v224[40];
      uint64_t v51 = v194;
      *(void *)uint64_t v194 = *(void *)v223;
      *(_OWORD *)(v51 + 2) = *(_OWORD *)&v223[8];
      *((void *)v51 + 3) = v48;
      *((void *)v51 + 4) = v49;
      *(_OWORD *)(v51 + 10) = *(_OWORD *)&v224[8];
      *(_OWORD *)(v51 + 14) = *(_OWORD *)&v224[24];
      *((void *)v51 + 9) = v50;
      long long v52 = v226;
      *((_OWORD *)v51 + 5) = v225;
      *((_OWORD *)v51 + 6) = v52;
      type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
      return swift_storeEnumTagMultiPayload();
    case 5:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
      swift_unknownObjectRelease();
      char v59 = v223[8];
      char v60 = v223[9];
      long long v61 = v194;
      *(void *)uint64_t v194 = *(void *)v223;
      *((unsigned char *)v61 + 8) = v59;
      *((unsigned char *)v61 + 9) = v60;
      *((_OWORD *)v61 + 1) = *(_OWORD *)&v223[16];
      type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
      return swift_storeEnumTagMultiPayload();
    case 6:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v193);
      swift_unknownObjectRelease();
      *(unsigned char *)uint64_t v194 = v223[0];
      type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
      return swift_storeEnumTagMultiPayload();
    default:
      uint64_t v47 = v193;
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v193, (uint64_t)&v212);
      *(void *)&v207[0] = v192;
      *((void *)&v207[0] + 1) = v191;
      String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)((uint64_t)&v212, (uint64_t *)v207, (uint64_t)v194);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v47);
      return outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v223);
  }
}

uint64_t String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a1, (uint64_t)v39);
  switch(v43)
  {
    case 1:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
      swift_unknownObjectRelease();
      uint64_t v25 = *(void *)&v39[8];
      *(void *)a3 = *(void *)v39;
      *(void *)(a3 + 8) = v25;
      goto LABEL_12;
    case 2:
      long long v35 = *(_OWORD *)v40;
      long long v36 = *(_OWORD *)&v40[16];
      long long v37 = *(_OWORD *)&v40[32];
      long long v38 = v41;
      long long v33 = *(_OWORD *)v39;
      long long v34 = *(_OWORD *)&v39[16];
      uint64_t v30 = v9;
      uint64_t v31 = v10;
      uint64_t v17 = (*(uint64_t (**)(uint64_t *))v39)(&v30);
      uint64_t v19 = v18;
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)&v33);
      swift_unknownObjectRelease();
      *uint64_t v8 = v17;
      v8[1] = v19;
      goto LABEL_7;
    case 3:
      long long v35 = *(_OWORD *)v40;
      long long v36 = *(_OWORD *)&v40[16];
      long long v37 = *(_OWORD *)&v40[32];
      long long v38 = v41;
      long long v33 = *(_OWORD *)v39;
      long long v34 = *(_OWORD *)&v39[16];
      uint64_t v30 = v9;
      uint64_t v31 = v10;
      (*(void (**)(id *__return_ptr, uint64_t *))v39)(&v32, &v30);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)&v33);
      swift_unknownObjectRelease();
      *uint64_t v8 = v32;
      v8[1] = 0;
      goto LABEL_7;
    case 4:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
      swift_unknownObjectRelease();
      uint64_t v21 = *(void *)&v39[24];
      uint64_t v22 = *(void *)v40;
      uint64_t v23 = *(void *)&v40[40];
      *(void *)a3 = *(void *)v39;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v39[8];
      *(void *)(a3 + 24) = v21;
      *(void *)(a3 + 32) = v22;
      *(_OWORD *)(a3 + 40) = *(_OWORD *)&v40[8];
      *(_OWORD *)(a3 + 56) = *(_OWORD *)&v40[24];
      *(void *)(a3 + 72) = v23;
      long long v24 = v42;
      *(_OWORD *)(a3 + 80) = v41;
      *(_OWORD *)(a3 + 96) = v24;
      goto LABEL_12;
    case 5:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
      swift_unknownObjectRelease();
      char v26 = v39[8];
      char v27 = v39[9];
      *(void *)a3 = *(void *)v39;
      *(unsigned char *)(a3 + 8) = v26;
      *(unsigned char *)(a3 + 9) = v27;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)&v39[16];
      goto LABEL_12;
    case 6:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
      swift_unknownObjectRelease();
      *(unsigned char *)a3 = v39[0];
LABEL_12:
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    default:
      outlined init with take of Any(v39, &v33);
      outlined init with copy of Any((uint64_t)&v33, (uint64_t)&v30);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      uint64_t v29 = (void *)v11;
      if (!swift_dynamicCast())
      {
        __break(1u);
        JUMPOUT(0x181AE7ADCLL);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v28 = inited + 32;
      outlined init with copy of Any((uint64_t)&v33, (uint64_t)&v30);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
      uint64_t v13 = swift_dynamicCast();
      uint64_t v29 = &v28;
      MEMORY[0x1F4188790](v13);
      *(&v28 - 4) = 16421;
      *(&v28 - 3) = 0xE200000000000000;
      *(&v28 - 2) = v9;
      *(&v28 - 1) = v10;
      uint64_t v14 = specialized withVaList<A>(_:_:)(inited, (void (*)(void *__return_ptr, uint64_t))partial apply for closure #1 in String.init(format:locale:arguments:));
      uint64_t v16 = v15;
      swift_setDeallocating();
      swift_arrayDestroy();
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      *uint64_t v8 = v14;
      v8[1] = v16;
LABEL_7:
      swift_storeEnumTagMultiPayload();
      uint64_t result = outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v8, a3, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      break;
  }
  return result;
}

unint64_t String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x3233746E69;
      break;
    case 2:
      unint64_t result = 0x3436746E69;
      break;
    case 3:
      unint64_t result = 0x3233746E6975;
      break;
    case 4:
      unint64_t result = 0x3436746E6975;
      break;
    case 5:
      unint64_t result = 0x74616F6C66;
      break;
    case 6:
      unint64_t result = 0x656C62756F64;
      break;
    case 7:
      unint64_t result = 0x74616F6C666763;
      break;
    case 8:
      unint64_t result = 0x676E69727473;
      break;
    case 9:
      unint64_t result = 1702125924;
      break;
    case 10:
    case 15:
      unint64_t result = 0xD000000000000010;
      break;
    case 11:
    case 13:
    case 14:
    case 16:
      unint64_t result = 0x657474616D726F66;
      break;
    case 12:
      unint64_t result = 0xD000000000000015;
      break;
    case 17:
      unint64_t result = 0x6C6F686563616C70;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.CodableStorage.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>);
  uint64_t v167 = *(void *)(v4 - 8);
  uint64_t v168 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v166 = (char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys>);
  *(void *)&long long v174 = *(void *)(v175 - 8);
  MEMORY[0x1F4188790](v175);
  long long v173 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys>);
  uint64_t v171 = *(void (***)(void, void))(v7 - 8);
  uint64_t v172 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v170 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v120);
  uint64_t v169 = (uint64_t)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys>);
  uint64_t v164 = *(void *)(v10 - 8);
  uint64_t v165 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v162 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v119);
  uint64_t v163 = (uint64_t)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys>);
  uint64_t v157 = *(void *)(v159 - 8);
  MEMORY[0x1F4188790](v159);
  uint64_t v155 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v118);
  uint64_t v156 = (uint64_t)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys>);
  uint64_t v160 = *(void *)(v15 - 8);
  uint64_t v161 = v15;
  MEMORY[0x1F4188790](v15);
  long long v158 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys>);
  uint64_t v153 = *(void *)(v17 - 8);
  uint64_t v154 = v17;
  MEMORY[0x1F4188790](v17);
  __int16 v152 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys>);
  uint64_t v150 = *(void *)(v19 - 8);
  uint64_t v151 = v19;
  MEMORY[0x1F4188790](v19);
  __int16 v149 = (char *)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys>);
  uint64_t v147 = *(void *)(v21 - 8);
  uint64_t v148 = v21;
  MEMORY[0x1F4188790](v21);
  uint64_t v146 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys>);
  uint64_t v144 = *(void *)(v23 - 8);
  uint64_t v145 = v23;
  MEMORY[0x1F4188790](v23);
  uint64_t v143 = (char *)&v118 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys>);
  uint64_t v141 = *(void *)(v25 - 8);
  uint64_t v142 = v25;
  MEMORY[0x1F4188790](v25);
  char v140 = (char *)&v118 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys>);
  uint64_t v138 = *(void *)(v27 - 8);
  uint64_t v139 = v27;
  MEMORY[0x1F4188790](v27);
  uint64_t v137 = (char *)&v118 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys>);
  uint64_t v135 = *(void *)(v29 - 8);
  uint64_t v136 = v29;
  MEMORY[0x1F4188790](v29);
  long long v134 = (char *)&v118 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys>);
  uint64_t v132 = *(void *)(v31 - 8);
  uint64_t v133 = v31;
  MEMORY[0x1F4188790](v31);
  uint64_t v131 = (char *)&v118 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys>);
  uint64_t v129 = *(void *)(v33 - 8);
  uint64_t v130 = v33;
  MEMORY[0x1F4188790](v33);
  uint64_t v128 = (char *)&v118 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys>);
  uint64_t v126 = *(void *)(v35 - 8);
  uint64_t v127 = v35;
  MEMORY[0x1F4188790](v35);
  uint64_t v125 = (char *)&v118 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys>);
  uint64_t v122 = *(void *)(v124 - 8);
  MEMORY[0x1F4188790](v124);
  long long v38 = (char *)&v118 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys>);
  uint64_t v121 = *(void *)(v123 - 8);
  MEMORY[0x1F4188790](v123);
  uint64_t v40 = (char *)&v118 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  MEMORY[0x1F4188790](v41);
  char v43 = (char *)&v118 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys>);
  uint64_t v177 = *(void *)(v193 - 8);
  MEMORY[0x1F4188790](v193);
  int v45 = (char *)&v118 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys();
  uint64_t v179 = v45;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v178, (uint64_t)v43, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v188[0] = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys();
      uint64_t v56 = v193;
      long long v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v58 = v124;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v122 + 8))(v38, v58);
      return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v57, v56);
    case 2u:
      v188[0] = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys();
      char v59 = v125;
      uint64_t v56 = v193;
      long long v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v60 = v127;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v61 = v126;
      goto LABEL_33;
    case 3u:
      v188[0] = 3;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys();
      char v59 = v128;
      uint64_t v56 = v193;
      long long v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v60 = v130;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v61 = v129;
      goto LABEL_33;
    case 4u:
      v188[0] = 4;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys();
      char v59 = v131;
      uint64_t v56 = v193;
      long long v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v60 = v133;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v61 = v132;
      goto LABEL_33;
    case 5u:
      v188[0] = 5;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys();
      uint64_t v62 = v134;
      uint64_t v63 = v193;
      char v64 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v65 = v136;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v66 = v135;
      goto LABEL_12;
    case 6u:
      v188[0] = 6;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys();
      uint64_t v62 = v137;
      uint64_t v63 = v193;
      char v64 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v65 = v139;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v66 = v138;
      goto LABEL_12;
    case 7u:
      uint64_t v67 = *(void *)v43;
      v188[0] = 7;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys();
      uint64_t v62 = v140;
      uint64_t v63 = v193;
      char v64 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)long long v188 = v67;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      uint64_t v65 = v142;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v66 = v141;
      goto LABEL_12;
    case 8u:
      v188[0] = 8;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys();
      char v68 = v143;
      uint64_t v69 = v193;
      int v70 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v71 = v145;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v144 + 8))(v68, v71);
      return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v70, v69);
    case 9u:
      uint64_t v72 = *(void *)v43;
      v188[0] = 9;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys();
      uint64_t v62 = v146;
      uint64_t v63 = v193;
      char v64 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)long long v188 = v72;
      lazy protocol witness table accessor for type Date and conformance Date();
      uint64_t v65 = v148;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v66 = v147;
LABEL_12:
      (*(void (**)(char *, uint64_t))(v66 + 8))(v62, v65);
      return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v64, v63);
    case 0xAu:
      uint64_t v74 = *(void *)v43;
      v188[0] = 10;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys();
      char v75 = v149;
      uint64_t v69 = v193;
      int v70 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)long long v188 = v74;
      LOBYTE(v180) = 0;
      lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
      uint64_t v76 = v151;
      uint64_t v77 = v176;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v77)
      {
        (*(void (**)(char *, uint64_t))(v150 + 8))(v75, v76);
        (*(void (**)(char *, uint64_t))(v177 + 8))(v70, v69);
        return swift_release();
      }
      else
      {
        v188[0] = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v150 + 8))(v75, v76);
        return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v70, v69);
      }
    case 0xBu:
      uint64_t v78 = *(void *)v43;
      long long v79 = *(_OWORD *)(v43 + 88);
      *(_OWORD *)&v190[16] = *(_OWORD *)(v43 + 72);
      long long v191 = v79;
      v192[0] = *(_OWORD *)(v43 + 104);
      *(_OWORD *)((char *)v192 + 10) = *(_OWORD *)(v43 + 114);
      long long v80 = *(_OWORD *)(v43 + 24);
      *(_OWORD *)long long v188 = *(_OWORD *)(v43 + 8);
      *(_OWORD *)&v188[16] = v80;
      long long v81 = *(_OWORD *)(v43 + 56);
      long long v189 = *(_OWORD *)(v43 + 40);
      *(_OWORD *)long long v190 = v81;
      LOBYTE(v180) = 11;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys();
      char v82 = v152;
      uint64_t v63 = v193;
      char v64 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)&long long v180 = v78;
      char v187 = 0;
      lazy protocol witness table accessor for type Date and conformance Date();
      uint64_t v83 = v154;
      uint64_t v84 = v176;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v84)
      {
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v188, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        (*(void (**)(char *, uint64_t))(v153 + 8))(v82, v83);
        return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v64, v63);
      }
      else
      {
        long long v184 = *(_OWORD *)&v190[16];
        long long v185 = v191;
        *(_OWORD *)uint64_t v186 = v192[0];
        *(_OWORD *)&v186[10] = *(_OWORD *)((char *)v192 + 10);
        long long v180 = *(_OWORD *)v188;
        long long v181 = *(_OWORD *)&v188[16];
        long long v182 = v189;
        long long v183 = *(_OWORD *)v190;
        char v187 = 1;
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v153 + 8))(v82, v83);
        (*(void (**)(char *, uint64_t))(v177 + 8))(v64, v63);
        return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v188, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      }
    case 0xCu:
      uint64_t v85 = *(void *)v43;
      uint64_t v86 = *((void *)v43 + 1);
      long long v178 = *((_OWORD *)v43 + 1);
      long long v87 = *((_OWORD *)v43 + 2);
      long long v174 = *((_OWORD *)v43 + 3);
      long long v175 = v87;
      char v88 = v43[64];
      uint64_t v89 = *((void *)v43 + 9);
      v1.i32[0] = *((_DWORD *)v43 + 20);
      uint64_t v168 = *((void *)v43 + 11);
      LODWORD(v167) = v43[96];
      LODWORD(v166) = v43[97];
      v2.i32[0] = *(_DWORD *)(v43 + 98);
      LODWORD(v173) = v43[102];
      LODWORD(v172) = v43[103];
      uint64_t v171 = (void (**)(void, void))*((void *)v43 + 13);
      LODWORD(v170) = v43[112];
      LODWORD(v169) = v43[113];
      v188[0] = 12;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys();
      uint64_t v90 = v158;
      uint64_t v91 = v193;
      int v92 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)long long v188 = v85;
      *(void *)&v188[8] = v86;
      LOBYTE(v180) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
      lazy protocol witness table accessor for type [LocalizedStringResource] and conformance <A> [A](&lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>, &demangling cache variable for type metadata for Range<Date>, (void (*)(void))lazy protocol witness table accessor for type Date and conformance Date);
      uint64_t v93 = v161;
      uint64_t v94 = v176;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v94)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v160 + 8))(v90, v93);
        return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v92, v91);
      }
      *(_OWORD *)long long v188 = v178;
      *(_OWORD *)&v188[16] = v175;
      long long v189 = v174;
      v190[0] = v88;
      *(void *)&v190[8] = v89;
      *(_DWORD *)&v190[16] = vmovn_s16((int16x8_t)vmovl_u8(v1)).u32[0];
      *(void *)&v190[24] = v168;
      LOBYTE(v191) = v167;
      BYTE1(v191) = (_BYTE)v166;
      *(_DWORD *)((char *)&v191 + 2) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      BYTE6(v191) = (_BYTE)v173;
      BYTE7(v191) = v172;
      *((void *)&v191 + 1) = v171;
      LOBYTE(v192[0]) = (_BYTE)v170;
      BYTE1(v192[0]) = v169;
      LOBYTE(v180) = 1;
      lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v160 + 8))(v90, v93);
      (*(void (**)(char *, uint64_t))(v177 + 8))(v179, v193);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    case 0xDu:
      uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle));
      uint64_t v96 = v156;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)&v43[*(int *)(v95 + 48)], v156, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
      v188[0] = 13;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys();
      long long v97 = v155;
      uint64_t v56 = v193;
      long long v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v188[0] = 0;
      uint64_t v98 = v159;
      uint64_t v99 = v176;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v99)
      {
        v188[0] = 1;
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v157 + 8))(v97, v98);
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v96, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
      return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v57, v56);
    case 0xEu:
      uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle));
      uint64_t v101 = v163;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)&v43[*(int *)(v100 + 48)], v163, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
      v188[0] = 14;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys();
      int v102 = v162;
      uint64_t v63 = v193;
      char v64 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v188[0] = 0;
      uint64_t v103 = v165;
      uint64_t v104 = v176;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v104)
      {
        v188[0] = 1;
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v164 + 8))(v102, v103);
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v101, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
      return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v64, v63);
    case 0xFu:
      int v105 = *(_DWORD *)v43;
      uint64_t v106 = (uint64_t)&v43[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                                  + 48)];
      long long v178 = *(_OWORD *)(v43 + 4);
      uint64_t v107 = v169;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v106, v169, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
      v188[0] = 15;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys();
      uint64_t v108 = v170;
      uint64_t v56 = v193;
      long long v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(_DWORD *)long long v188 = v105;
      *(_OWORD *)&v188[4] = v178;
      LOBYTE(v180) = 0;
      type metadata accessor for NSDecimal(0);
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, type metadata accessor for NSDecimal);
      uint64_t v109 = v172;
      uint64_t v110 = v176;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (!v110)
      {
        v188[0] = 1;
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      ((void (**)(char *, uint64_t))v171)[1](v108, v109);
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v107, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
      return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v57, v56);
    case 0x10u:
      uint64_t v111 = *(void *)v43;
      LODWORD(v172) = v43[8];
      LODWORD(v171) = v43[9];
      long long v178 = *((_OWORD *)v43 + 1);
      v188[0] = 16;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys();
      __int16 v112 = v173;
      uint64_t v113 = v193;
      long long v114 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)long long v188 = v111;
      LOBYTE(v180) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LocalizedStringResource]);
      lazy protocol witness table accessor for type [LocalizedStringResource] and conformance <A> [A](&lazy protocol witness table cache variable for type [LocalizedStringResource] and conformance <A> [A], &demangling cache variable for type metadata for [LocalizedStringResource], (void (*)(void))lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource);
      uint64_t v115 = v175;
      uint64_t v116 = v176;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v116)
      {
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v174 + 8))(v112, v115);
        (*(void (**)(char *, uint64_t))(v177 + 8))(v114, v113);
        return swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v188[0] = v172;
        v188[1] = (_BYTE)v171;
        *(_OWORD *)&v188[8] = v178;
        LOBYTE(v180) = 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ListFormatStyle<StringStyle, [String]>);
        lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ListFormatStyle<StringStyle, [String]> and conformance ListFormatStyle<A, B>, &demangling cache variable for type metadata for ListFormatStyle<StringStyle, [String]>);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v174 + 8))(v112, v115);
        (*(void (**)(char *, uint64_t))(v177 + 8))(v114, v113);
        return swift_unknownObjectRelease();
      }
    case 0x11u:
      char v117 = *v43;
      v188[0] = 17;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys();
      char v59 = v166;
      uint64_t v56 = v193;
      long long v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v188[0] = v117;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder();
      uint64_t v60 = v168;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v61 = v167;
LABEL_33:
      (*(void (**)(char *, uint64_t))(v61 + 8))(v59, v60);
      return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v57, v56);
    default:
      uint64_t v46 = *(void *)v43;
      uint64_t v47 = (char *)*((void *)v43 + 1);
      *(void *)&long long v178 = *((void *)v43 + 2);
      uint64_t v168 = *((void *)v43 + 3);
      uint64_t v169 = v46;
      *(void *)&long long v175 = *((void *)v43 + 4);
      uint64_t v48 = *((void *)v43 + 6);
      uint64_t v167 = *((void *)v43 + 5);
      uint64_t v172 = v48;
      long long v173 = v47;
      uint64_t v49 = (void (**)(void, void))*((void *)v43 + 9);
      uint64_t v50 = *((void *)v43 + 10);
      uint64_t v51 = *((void *)v43 + 11);
      uint64_t v170 = (char *)*((void *)v43 + 12);
      uint64_t v171 = v49;
      uint64_t v52 = *((void *)v43 + 13);
      v188[0] = 0;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys();
      long long v174 = *(_OWORD *)(v43 + 56);
      uint64_t v53 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)long long v188 = v169;
      *(void *)&v188[8] = v47;
      *(void *)&v188[16] = v178;
      *(void *)&v188[24] = v168;
      *(void *)&long long v189 = v175;
      *((void *)&v189 + 1) = v167;
      *(_OWORD *)&v190[8] = v174;
      *(void *)long long v190 = v48;
      uint64_t v54 = v171;
      *(void *)&v190[24] = v171;
      *(void *)&long long v191 = v50;
      *((void *)&v191 + 1) = v51;
      *(void *)&v192[0] = v170;
      *((void *)&v192[0] + 1) = v52;
      lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource();
      uint64_t v55 = v123;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v121 + 8))(v40, v55);
      (*(void (**)(char *, uint64_t))(v177 + 8))(v53, v193);

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

uint64_t String.LocalizationValue.FormatArgument.CodableStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v280 = a2;
  uint64_t v259 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>);
  uint64_t v260 = *(void *)(v259 - 8);
  MEMORY[0x1F4188790](v259);
  v276 = (char *)&v212 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys>);
  uint64_t v264 = *(void *)(v263 - 8);
  MEMORY[0x1F4188790](v263);
  long long v279 = (char *)&v212 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v261 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys>);
  uint64_t v262 = *(void *)(v261 - 8);
  MEMORY[0x1F4188790](v261);
  long long v287 = (char *)&v212 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v258 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys>);
  uint64_t v257 = *(void *)(v258 - 8);
  MEMORY[0x1F4188790](v258);
  long long v278 = (char *)&v212 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v256 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys>);
  uint64_t v255 = *(void *)(v256 - 8);
  MEMORY[0x1F4188790](v256);
  v277 = (char *)&v212 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v254 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys>);
  uint64_t v253 = *(void *)(v254 - 8);
  MEMORY[0x1F4188790](v254);
  v286 = (char *)&v212 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v252 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys>);
  uint64_t v251 = *(void *)(v252 - 8);
  MEMORY[0x1F4188790](v252);
  v275 = (char *)&v212 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys>);
  uint64_t v249 = *(void *)(v250 - 8);
  MEMORY[0x1F4188790](v250);
  uint64_t v274 = (char *)&v212 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v248 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys>);
  uint64_t v247 = *(void *)(v248 - 8);
  MEMORY[0x1F4188790](v248);
  uint64_t v273 = (char *)&v212 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys>);
  uint64_t v245 = *(void *)(v246 - 8);
  MEMORY[0x1F4188790](v246);
  uint64_t v272 = (char *)&v212 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v244 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys>);
  uint64_t v243 = *(void *)(v244 - 8);
  MEMORY[0x1F4188790](v244);
  uint64_t v271 = (char *)&v212 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v242 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys>);
  uint64_t v241 = *(void *)(v242 - 8);
  MEMORY[0x1F4188790](v242);
  uint64_t v270 = (char *)&v212 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v240 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys>);
  uint64_t v239 = *(void *)(v240 - 8);
  MEMORY[0x1F4188790](v240);
  uint64_t v269 = (char *)&v212 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys>);
  uint64_t v237 = *(void *)(v238 - 8);
  MEMORY[0x1F4188790](v238);
  uint64_t v268 = (char *)&v212 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v236 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys>);
  uint64_t v235 = *(void *)(v236 - 8);
  MEMORY[0x1F4188790](v236);
  uint64_t v267 = (char *)&v212 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys>);
  uint64_t v234 = *(void *)(v233 - 8);
  MEMORY[0x1F4188790](v233);
  long long v284 = (char *)&v212 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v232 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys>);
  uint64_t v231 = *(void *)(v232 - 8);
  MEMORY[0x1F4188790](v232);
  uint64_t v266 = (char *)&v212 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v229 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys>);
  uint64_t v228 = *(void *)(v229 - 8);
  MEMORY[0x1F4188790](v229);
  uint64_t v265 = (char *)&v212 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v285 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys>);
  uint64_t v281 = *(void *)(v285 - 8);
  MEMORY[0x1F4188790](v285);
  long long v291 = (char *)&v212 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v288 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  MEMORY[0x1F4188790](v288);
  long long v225 = (uint64_t *)((char *)&v212 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v23);
  long long v221 = (uint64_t *)((char *)&v212 - v24);
  MEMORY[0x1F4188790](v25);
  long long v230 = (char *)&v212 - v26;
  MEMORY[0x1F4188790](v27);
  char v227 = (uint64_t *)((char *)&v212 - v28);
  MEMORY[0x1F4188790](v29);
  long long v226 = (uint64_t *)((char *)&v212 - v30);
  MEMORY[0x1F4188790](v31);
  long long v220 = (uint64_t *)((char *)&v212 - v32);
  MEMORY[0x1F4188790](v33);
  uint64_t v219 = (uint64_t *)((char *)&v212 - v34);
  MEMORY[0x1F4188790](v35);
  uint64_t v218 = (uint64_t *)((char *)&v212 - v36);
  MEMORY[0x1F4188790](v37);
  long long v224 = (uint64_t *)((char *)&v212 - v38);
  MEMORY[0x1F4188790](v39);
  long long v283 = (char *)&v212 - v40;
  MEMORY[0x1F4188790](v41);
  uint64_t v223 = (uint64_t *)((char *)&v212 - v42);
  MEMORY[0x1F4188790](v43);
  long long v282 = (char *)&v212 - v44;
  MEMORY[0x1F4188790](v45);
  long long v222 = (uint64_t *)((char *)&v212 - v46);
  MEMORY[0x1F4188790](v47);
  uint64_t v49 = (char *)&v212 - v48;
  MEMORY[0x1F4188790](v50);
  uint64_t v52 = (char *)&v212 - v51;
  MEMORY[0x1F4188790](v53);
  uint64_t v55 = (char *)&v212 - v54;
  MEMORY[0x1F4188790](v56);
  uint64_t v58 = (char *)&v212 - v57;
  MEMORY[0x1F4188790](v59);
  uint64_t v61 = (char *)&v212 - v60;
  MEMORY[0x1F4188790](v62);
  char v64 = (char *)&v212 - v63;
  uint64_t v65 = a1[3];
  long long v289 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v65);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys();
  uint64_t v66 = v290;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v66)
  {
LABEL_53:
    uint64_t v141 = (uint64_t)v289;
    return __swift_destroy_boxed_opaque_existential_1(v141);
  }
  long long v212 = (uint64_t *)v58;
  long long v213 = (uint64_t *)v55;
  long long v214 = (uint64_t *)v52;
  long long v215 = (uint64_t *)v61;
  long long v216 = (uint64_t *)v49;
  uint64_t v67 = v282;
  char v68 = (uint64_t *)v283;
  uint64_t v69 = v284;
  int v70 = v286;
  uint64_t v71 = v287;
  long long v290 = 0;
  long long v217 = v64;
  uint64_t v72 = v285;
  long long v73 = v291;
  uint64_t v74 = KeyedDecodingContainer.allKeys.getter();
  char v75 = (char *)v74;
  if (*(void *)(v74 + 16) != 1)
  {
    uint64_t v82 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v84 = v83;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v84 = v288;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v82 - 8) + 104))(v84, *MEMORY[0x1E4FBBA70], v82);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v281 + 8))(v73, v72);
    goto LABEL_53;
  }
  switch(*(unsigned char *)(v74 + 32))
  {
    case 1:
      v292[0] = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys();
      uint64_t v85 = v266;
      uint64_t v86 = v72;
      long long v87 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v87) {
        goto LABEL_8;
      }
      uint64_t v144 = v232;
      int v145 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v146 = v281;
      long long v290 = 0;
      int v190 = v145;
      (*(void (**)(char *, uint64_t))(v231 + 8))(v85, v144);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v146 + 8))(v73, v72);
      char v68 = v212;
      *(_DWORD *)long long v212 = v190;
      goto LABEL_56;
    case 2:
      v292[0] = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys();
      uint64_t v90 = v69;
      uint64_t v91 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v91) {
        goto LABEL_10;
      }
      uint64_t v147 = v233;
      uint64_t v148 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v149 = v281;
      long long v290 = 0;
      uint64_t v191 = v148;
      (*(void (**)(char *, uint64_t))(v234 + 8))(v90, v147);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v149 + 8))(v73, v72);
      char v68 = v213;
      *long long v213 = v191;
      goto LABEL_56;
    case 3:
      v292[0] = 3;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys();
      int v92 = v267;
      uint64_t v93 = v73;
      uint64_t v94 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v94) {
        goto LABEL_24;
      }
      uint64_t v95 = v236;
      int v96 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v97 = v281;
      long long v290 = 0;
      int v174 = v96;
      (*(void (**)(char *, uint64_t))(v235 + 8))(v92, v95);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v73, v72);
      long long v175 = v214;
      *(_DWORD *)long long v214 = v174;
      goto LABEL_55;
    case 4:
      v292[0] = 4;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys();
      uint64_t v98 = v268;
      uint64_t v86 = v72;
      uint64_t v99 = v73;
      uint64_t v100 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v100) {
        goto LABEL_36;
      }
      uint64_t v101 = v238;
      uint64_t v102 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v103 = v281;
      uint64_t v176 = v102;
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v237 + 8))(v98, v101);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v103 + 8))(v73, v86);
      long long v175 = v216;
      *long long v216 = v176;
      goto LABEL_55;
    case 5:
      v292[0] = 5;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys();
      uint64_t v104 = v269;
      uint64_t v77 = v72;
      int v105 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v105)
      {
        swift_bridgeObjectRelease();
        char v88 = *(void (**)(char *, uint64_t))(v281 + 8);
        uint64_t v89 = v73;
        goto LABEL_50;
      }
      uint64_t v150 = v240;
      KeyedDecodingContainer.decode(_:forKey:)();
      int v193 = v192;
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v239 + 8))(v104, v150);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v281 + 8))(v73, v72);
      char v68 = v222;
      *(_DWORD *)long long v222 = v193;
      goto LABEL_56;
    case 6:
      v292[0] = 6;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys();
      uint64_t v106 = v270;
      uint64_t v77 = v72;
      uint64_t v78 = v73;
      uint64_t v107 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v107) {
        goto LABEL_40;
      }
      uint64_t v108 = v242;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v109 = v281;
      uint64_t v178 = v177;
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v241 + 8))(v106, v108);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v73, v77);
      *uint64_t v67 = v178;
      swift_storeEnumTagMultiPayload();
      uint64_t v179 = (uint64_t)v67;
      goto LABEL_57;
    case 7:
      v292[0] = 7;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys();
      uint64_t v110 = v271;
      uint64_t v77 = v72;
      uint64_t v78 = v73;
      uint64_t v111 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v111) {
        goto LABEL_40;
      }
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      uint64_t v112 = v244;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v113 = v281;
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v243 + 8))(v110, v112);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v73, v77);
      char v68 = v223;
      *uint64_t v223 = *(void *)v292;
      goto LABEL_56;
    case 8:
      v292[0] = 8;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys();
      long long v114 = v272;
      uint64_t v115 = v72;
      uint64_t v116 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v116)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v281 + 8))(v73, v72);
        goto LABEL_53;
      }
      uint64_t v151 = v246;
      uint64_t v152 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v153 = v281;
      long long v290 = 0;
      uint64_t v195 = v194;
      long long v196 = *(void (**)(char *, uint64_t))(v245 + 8);
      long long v287 = (char *)v152;
      v196(v114, v151);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v153 + 8))(v73, v115);
      *char v68 = (uint64_t)v287;
      v68[1] = v195;
      goto LABEL_56;
    case 9:
      v292[0] = 9;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys();
      char v117 = v273;
      uint64_t v93 = v73;
      uint64_t v118 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v118)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v281 + 8))(v93, v72);
        goto LABEL_53;
      }
      lazy protocol witness table accessor for type Date and conformance Date();
      uint64_t v154 = v248;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v155 = v281;
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v247 + 8))(v117, v154);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v155 + 8))(v73, v72);
      char v68 = v224;
      *long long v224 = *(void *)v292;
      goto LABEL_56;
    case 0xA:
      v292[0] = 10;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys();
      uint64_t v119 = v274;
      uint64_t v86 = v72;
      uint64_t v99 = v73;
      uint64_t v120 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v120) {
        goto LABEL_36;
      }
      LOBYTE(v296) = 0;
      lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
      uint64_t v121 = v250;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v122 = v281;
      uint64_t v180 = *(void *)v292;
      LOBYTE(v296) = 1;
      long long v181 = v119;
      uint64_t v182 = KeyedDecodingContainer.decode(_:forKey:)();
      long long v290 = 0;
      uint64_t v198 = v182;
      (*(void (**)(char *, uint64_t))(v249 + 8))(v181, v121);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v122 + 8))(v73, v86);
      long long v175 = v218;
      *uint64_t v218 = v180;
      v175[1] = v198;
LABEL_55:
      swift_storeEnumTagMultiPayload();
      uint64_t v179 = (uint64_t)v175;
      goto LABEL_57;
    case 0xB:
      v292[0] = 11;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys();
      uint64_t v123 = v275;
      uint64_t v77 = v72;
      uint64_t v78 = v73;
      uint64_t v124 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v124) {
        goto LABEL_40;
      }
      v292[0] = 0;
      lazy protocol witness table accessor for type Date and conformance Date();
      uint64_t v125 = v252;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v126 = v281;
      uint64_t v183 = v296;
      char v298 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v251 + 8))(v123, v125);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v126 + 8))(v73, v77);
      char v68 = v219;
      *uint64_t v219 = v183;
      long long v184 = v294;
      *(_OWORD *)(v68 + 9) = *(_OWORD *)&v293[32];
      *(_OWORD *)(v68 + 11) = v184;
      *(_OWORD *)(v68 + 13) = *(_OWORD *)v295;
      *(_OWORD *)((char *)v68 + 114) = *(_OWORD *)&v295[10];
      long long v185 = *(_OWORD *)&v292[16];
      *(_OWORD *)(v68 + 1) = *(_OWORD *)v292;
      *(_OWORD *)(v68 + 3) = v185;
      long long v186 = *(_OWORD *)&v293[16];
      *(_OWORD *)(v68 + 5) = *(_OWORD *)v293;
      *(_OWORD *)(v68 + 7) = v186;
      goto LABEL_56;
    case 0xC:
      v292[0] = 12;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys();
      uint64_t v86 = v72;
      uint64_t v99 = v73;
      uint64_t v127 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v127) {
        goto LABEL_36;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
      v292[0] = 0;
      lazy protocol witness table accessor for type [LocalizedStringResource] and conformance <A> [A](&lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>, &demangling cache variable for type metadata for Range<Date>, (void (*)(void))lazy protocol witness table accessor for type Date and conformance Date);
      uint64_t v128 = v254;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v129 = v70;
      uint64_t v130 = v281;
      uint64_t v187 = v296;
      uint64_t v188 = v297;
      char v298 = 1;
      lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v253 + 8))(v129, v128);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v130 + 8))(v73, v86);
      char v199 = v293[16];
      uint64_t v200 = *(void *)&v293[24];
      uint64_t v201 = *(void *)&v293[40];
      char v202 = v294;
      char v203 = BYTE1(v294);
      __int16 v204 = WORD3(v294);
      uint64_t v205 = *((void *)&v294 + 1);
      __int16 v206 = *(_WORD *)v295;
      char v68 = v220;
      *long long v220 = v187;
      v68[1] = v188;
      long long v207 = *(_OWORD *)&v292[16];
      *((_OWORD *)v68 + 1) = *(_OWORD *)v292;
      *((_OWORD *)v68 + 2) = v207;
      *((_OWORD *)v68 + 3) = *(_OWORD *)v293;
      *((unsigned char *)v68 + 64) = v199;
      v68[9] = v200;
      *((_DWORD *)v68 + 20) = *(_DWORD *)&v293[32];
      v68[11] = v201;
      *((unsigned char *)v68 + 96) = v202;
      *((unsigned char *)v68 + 97) = v203;
      *(_DWORD *)((char *)v68 + 98) = *(_DWORD *)((char *)&v294 + 2);
      *((_WORD *)v68 + 51) = v204;
      v68[13] = v205;
      *((_WORD *)v68 + 56) = v206;
      goto LABEL_56;
    case 0xD:
      v292[0] = 13;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys();
      uint64_t v131 = v277;
      uint64_t v86 = v72;
      uint64_t v99 = v73;
      uint64_t v132 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v132) {
        goto LABEL_36;
      }
      v292[0] = 0;
      uint64_t v133 = v256;
      uint64_t v134 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v135 = v281;
      uint64_t v136 = v134;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle));
      *long long v226 = v136;
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
      v292[0] = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v255 + 8))(v131, v133);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v135 + 8))(v73, v86);
      char v68 = v226;
      goto LABEL_56;
    case 0xE:
      v292[0] = 14;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys();
      uint64_t v86 = v72;
      uint64_t v137 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v137)
      {
LABEL_8:
        swift_bridgeObjectRelease();
        char v88 = *(void (**)(char *, uint64_t))(v281 + 8);
        uint64_t v89 = v73;
        goto LABEL_51;
      }
      v292[0] = 0;
      uint64_t v156 = v258;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v157 = v281;
      uint64_t v159 = v158;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle));
      *char v227 = v159;
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
      v292[0] = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
      uint64_t v160 = v278;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v257 + 8))(v160, v156);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v157 + 8))(v73, v86);
      char v68 = v227;
      goto LABEL_56;
    case 0xF:
      v292[0] = 15;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys();
      uint64_t v86 = v72;
      uint64_t v99 = v73;
      uint64_t v138 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (!v138)
      {
        type metadata accessor for NSDecimal(0);
        v292[0] = 0;
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, type metadata accessor for NSDecimal);
        uint64_t v161 = v230;
        uint64_t v162 = v261;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v163 = v281;
        long long v290 = &v161[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                            + 48)];
        type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
        v292[0] = 1;
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        long long v290 = 0;
        (*(void (**)(char *, uint64_t))(v262 + 8))(v71, v162);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v163 + 8))(v99, v86);
        swift_storeEnumTagMultiPayload();
        uint64_t v179 = (uint64_t)v161;
        goto LABEL_57;
      }
LABEL_36:
      swift_bridgeObjectRelease();
      char v88 = *(void (**)(char *, uint64_t))(v281 + 8);
      uint64_t v89 = v99;
LABEL_51:
      uint64_t v169 = v86;
      goto LABEL_52;
    case 0x10:
      v292[0] = 16;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys();
      uint64_t v139 = v72;
      char v140 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v140)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v281 + 8))(v73, v72);
        uint64_t v141 = (uint64_t)v289;
        return __swift_destroy_boxed_opaque_existential_1(v141);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LocalizedStringResource]);
      v292[0] = 0;
      uint64_t v164 = v279;
      lazy protocol witness table accessor for type [LocalizedStringResource] and conformance <A> [A](&lazy protocol witness table cache variable for type [LocalizedStringResource] and conformance <A> [A], &demangling cache variable for type metadata for [LocalizedStringResource], (void (*)(void))lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource);
      uint64_t v165 = v263;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v166 = v281;
      long long v287 = v75;
      uint64_t v197 = v296;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ListFormatStyle<StringStyle, [String]>);
      char v298 = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ListFormatStyle<StringStyle, [String]> and conformance ListFormatStyle<A, B>, &demangling cache variable for type metadata for ListFormatStyle<StringStyle, [String]>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v264 + 8))(v164, v165);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v166 + 8))(v73, v139);
      char v208 = v292[0];
      char v209 = v292[1];
      char v68 = v221;
      *long long v221 = v197;
      *((unsigned char *)v68 + 8) = v208;
      *((unsigned char *)v68 + 9) = v209;
      *((_OWORD *)v68 + 1) = *(_OWORD *)&v292[8];
      goto LABEL_56;
    case 0x11:
      v292[0] = 17;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys();
      uint64_t v142 = v276;
      uint64_t v77 = v72;
      uint64_t v78 = v73;
      uint64_t v143 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v143) {
        goto LABEL_40;
      }
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder();
      uint64_t v167 = v259;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v168 = v281;
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v260 + 8))(v142, v167);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v168 + 8))(v73, v77);
      char v68 = v225;
      *(unsigned char *)long long v225 = v292[0];
      goto LABEL_56;
    default:
      v292[0] = 0;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys();
      uint64_t v76 = v265;
      uint64_t v77 = v72;
      uint64_t v78 = v73;
      long long v79 = v290;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v79)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        char v88 = *(void (**)(char *, uint64_t))(v281 + 8);
        uint64_t v89 = v78;
LABEL_50:
        uint64_t v169 = v77;
LABEL_52:
        v88(v89, v169);
        goto LABEL_53;
      }
      lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource();
      uint64_t v80 = v229;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v81 = v281;
      long long v290 = 0;
      (*(void (**)(char *, uint64_t))(v228 + 8))(v76, v80);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v73, v77);
      uint64_t v170 = *(void *)&v292[24];
      uint64_t v171 = *(void *)v293;
      uint64_t v172 = *(void *)&v293[40];
      char v68 = v215;
      *long long v215 = *(void *)v292;
      *(_OWORD *)(v68 + 1) = *(_OWORD *)&v292[8];
      v68[3] = v170;
      v68[4] = v171;
      *(_OWORD *)(v68 + 5) = *(_OWORD *)&v293[8];
      *(_OWORD *)(v68 + 7) = *(_OWORD *)&v293[24];
      v68[9] = v172;
      long long v173 = *(_OWORD *)v295;
      *((_OWORD *)v68 + 5) = v294;
      *((_OWORD *)v68 + 6) = v173;
LABEL_56:
      swift_storeEnumTagMultiPayload();
      uint64_t v179 = (uint64_t)v68;
LABEL_57:
      uint64_t v210 = (uint64_t)v217;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v179, (uint64_t)v217, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v211 = (uint64_t)v289;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v210, v280, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1(v211);
      break;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  if (*v0) {
    return 0x736E6F6974706FLL;
  }
  else {
    return 12383;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  return String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 18;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  if (*v0) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.CodableStorage@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.CodableStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.CodableStorage(void *a1)
{
  return String.LocalizationValue.FormatArgument.CodableStorage.encode(to:)(a1);
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.hash(into:)(uint64_t a1)
{
  void (*v37)(void *__return_ptr, void, void);
  uint64_t v38;
  void (*v39)(void *__return_ptr, void, void);
  void (*v40)(void *__return_ptr, void, void);
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned char *v50;
  unsigned char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  Swift::UInt v79;
  Swift::UInt v80;
  Swift::UInt8 v81;
  Swift::UInt8 v82;
  Swift::UInt8 v83;
  uint64_t v84;
  void (*v85)(void, void, void);
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  Swift::UInt v108;
  Swift::UInt v109;
  Swift::UInt8 v110;
  Swift::UInt8 v111;
  Swift::UInt8 v112;
  uint64_t v113;
  uint64_t v114;
  Swift::UInt v115;
  Swift::UInt8 v116;
  uint64_t v117;
  void (*v118)(void, void, void);
  uint64_t v119;
  void (*v120)(void, void, void);
  unsigned char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  Swift::UInt v145;
  Swift::UInt v146;
  Swift::UInt8 v147;
  Swift::UInt8 v148;
  Swift::UInt8 v149;
  void *v150;
  Swift::UInt8 v151;
  Swift::UInt8 v152[8];
  Swift::UInt8 v153[8];
  void *v154;
  uint64_t v155;
  void *v156;
  unsigned char v157[144];
  unsigned char v158[8];
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  char v174;
  char v175;
  void v176[18];
  unsigned char v177[144];
  _OWORD v178[12];
  __int16 v179;
  long long v180[8];
  _OWORD v181[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v180);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v180, v181);
  switch(_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v181))
  {
    case 1u:
      uint64_t v8 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v181);
      uint64_t v151 = *(unsigned char *)(v8 + 1);
      Swift::UInt v9 = *(void *)(v8 + 8);
      uint64_t v10 = *(void *)(v8 + 32);
      Hasher._combine(_:)(1uLL);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v180, v178);
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v178);
      swift_retain();
      swift_unknownObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(void (**)(void, void, void))(v10 + 112);
      swift_unknownObjectRetain();
      v12(a1, ObjectType, v10);
      swift_unknownObjectRelease();
      Hasher._combine(_:)(v9);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v151);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      goto LABEL_94;
    case 2u:
      uint64_t v13 = (void *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v181);
      uint64_t v14 = v13[1];
      uint64_t v15 = v13[3];
      uint64_t v16 = v13[4];
      *(void *)uint64_t v152 = v13[5];
      Hasher._combine(_:)(2uLL);
      uint64_t v17 = swift_getObjectType();
      uint64_t v18 = *(void (**)(void, void, void))(v14 + 112);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v180, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      swift_unknownObjectRetain();
      v18(a1, v17, v14);
      swift_unknownObjectRelease();
      uint64_t v19 = swift_getObjectType();
      uint64_t v20 = *(void (**)(void, void, void))(v15 + 120);
      swift_unknownObjectRetain();
      v20(a1, v19, v15);
      swift_unknownObjectRelease();
      if (!v16)
      {
        Hasher._combine(_:)(0);
        goto LABEL_23;
      }
      Hasher._combine(_:)(1u);
      uint64_t v21 = swift_getObjectType();
      uint64_t v22 = *(uint64_t (**)(void, void))(*(void *)v152 + 48);
      swift_unknownObjectRetain_n();
      if (v22(v21, *(void *)v152))
      {
        Swift::UInt8 v23 = 1;
LABEL_22:
        Hasher._combine(_:)(v23);
        swift_unknownObjectRelease_n();
        goto LABEL_23;
      }
      Hasher._combine(_:)(0);
      (*(void (**)(uint64_t, Swift::UInt8 *))(*(void *)v152 + 64))(v21, *(Swift::UInt8 **)v152);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void (**)(void *__return_ptr, void, void))(*(void *)v152 + 464);
      swift_unknownObjectRetain();
      v40(v176, v21, *(void *)v152);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v176, (uint64_t)v177, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)v178, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v178) == 1)
      {
        Swift::UInt8 v23 = 0;
        goto LABEL_22;
      }
      outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)v158, &demangling cache variable for type metadata for LocalePreferences?);
      Hasher._combine(_:)(1u);
      if (v158[0] == 2)
      {
        uint64_t v43 = 0;
      }
      else
      {
        uint64_t v43 = v158[0] & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v43);
      uint64_t v52 = v159;
      if (v159)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(*(void *)(v52 + 16));
        uint64_t v53 = *(void *)(v52 + 16);
        if (v53)
        {
          outlined retain of LocalePreferences?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          swift_bridgeObjectRetain();
          uint64_t v54 = v52 + 40;
          do
          {
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
            v54 += 16;
            --v53;
          }
          while (v53);
          swift_bridgeObjectRelease();
LABEL_142:
          if (v160)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
            if (v161) {
              goto LABEL_144;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v161)
            {
LABEL_144:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
              uint64_t v123 = v162;
              if (v162)
              {
LABEL_145:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v123);
                swift_bridgeObjectRelease();
                goto LABEL_149;
              }
LABEL_148:
              Hasher._combine(_:)(0);
LABEL_149:
              uint64_t v124 = v163;
              if (v163)
              {
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v124);
                swift_bridgeObjectRelease();
              }
              else
              {
                Hasher._combine(_:)(0);
              }
              uint64_t v125 = v164;
              uint64_t v126 = v165;
              uint64_t v128 = v166;
              uint64_t v127 = v167;
              uint64_t v129 = v168;
              if (v164)
              {
                Hasher._combine(_:)(1u);
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                uint64_t v130 = v126;
                uint64_t v131 = v128;
                uint64_t v132 = v127;
                uint64_t v133 = v129;
                uint64_t v134 = v125;
                _CFObject.hash(into:)();
                if (v126) {
                  goto LABEL_154;
                }
              }
              else
              {
                Hasher._combine(_:)(0);
                uint64_t v139 = v129;
                char v140 = v126;
                uint64_t v141 = v128;
                uint64_t v142 = v127;
                if (v126)
                {
LABEL_154:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                  uint64_t v135 = v126;
                  _CFObject.hash(into:)();

                  if (v128) {
                    goto LABEL_155;
                  }
                  goto LABEL_160;
                }
              }
              Hasher._combine(_:)(0);
              if (v128)
              {
LABEL_155:
                Hasher._combine(_:)(1u);
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                uint64_t v136 = v128;
                _CFObject.hash(into:)();

                if (v127) {
                  goto LABEL_156;
                }
                goto LABEL_161;
              }
LABEL_160:
              Hasher._combine(_:)(0);
              if (v127)
              {
LABEL_156:
                Hasher._combine(_:)(1u);
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                uint64_t v137 = v127;
                _CFObject.hash(into:)();

                if (v129)
                {
LABEL_157:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                  uint64_t v138 = v129;
                  _CFObject.hash(into:)();

                  goto LABEL_163;
                }
LABEL_162:
                Hasher._combine(_:)(0);
                uint64_t v138 = 0;
LABEL_163:

                uint64_t v143 = v169;
                if (v143)
                {
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)(a1, v143);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  Hasher._combine(_:)(0);
                }
                uint64_t v144 = v170;
                if (v170)
                {
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)(a1, v144);
                  swift_bridgeObjectRelease();
                  if (v171)
                  {
LABEL_168:
                    Hasher._combine(_:)(1u);
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    swift_bridgeObjectRelease();
                    goto LABEL_171;
                  }
                }
                else
                {
                  Hasher._combine(_:)(0);
                  if (v171) {
                    goto LABEL_168;
                  }
                }
                Hasher._combine(_:)(0);
LABEL_171:
                if (v172 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  int v145 = v172 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v145);
                }
                if (v173 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  uint64_t v146 = v173 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v146);
                }
                if (v174 == 2)
                {
                  uint64_t v147 = 0;
                }
                else
                {
                  uint64_t v147 = v174 & 1;
                  Hasher._combine(_:)(1u);
                }
                Hasher._combine(_:)(v147);
                if (v175 == 2)
                {
                  uint64_t v148 = 0;
                }
                else
                {
                  uint64_t v149 = v175 & 1;
                  Hasher._combine(_:)(1u);
                  uint64_t v148 = v149;
                }
                Hasher._combine(_:)(v148);
                outlined retain of LocalePreferences?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease_n();
LABEL_23:
                swift_bridgeObjectRetain();
                String.hash(into:)();
LABEL_94:
                swift_bridgeObjectRelease();
                return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v180, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
              }
LABEL_161:
              Hasher._combine(_:)(0);
              if (v129) {
                goto LABEL_157;
              }
              goto LABEL_162;
            }
          }
          Hasher._combine(_:)(0);
          uint64_t v123 = v162;
          if (v162) {
            goto LABEL_145;
          }
          goto LABEL_148;
        }
        outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)v157, &demangling cache variable for type metadata for LocalePreferences?);
        uint64_t v122 = v157;
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v122 = v158;
      }
      outlined retain of LocalePreferences(v122);
      goto LABEL_142;
    case 3u:
      uint64_t v24 = (unsigned __int8 *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v181);
      Swift::UInt v25 = *v24;
      Swift::UInt v26 = v24[1];
      Swift::UInt v27 = v24[2];
      uint64_t v28 = *((void *)v24 + 2);
      uint64_t v155 = *((void *)v24 + 4);
      uint64_t v29 = *((void *)v24 + 5);
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v27);
      uint64_t v30 = swift_getObjectType();
      uint64_t v31 = *(uint64_t (**)(void, void))(v28 + 48);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v180, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      swift_unknownObjectRetain();
      if (v31(v30, v28))
      {
        Swift::UInt8 v32 = 1;
LABEL_15:
        Hasher._combine(_:)(v32);
        swift_unknownObjectRelease();
        uint64_t v38 = v155;
        goto LABEL_93;
      }
      Hasher._combine(_:)(0);
      (*(void (**)(uint64_t, uint64_t))(v28 + 64))(v30, v28);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(void *__return_ptr, void, void))(v28 + 464);
      swift_unknownObjectRetain();
      v37(v176, v30, v28);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v176, (uint64_t)v177, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)v178, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v178) == 1)
      {
        Swift::UInt8 v32 = 0;
        goto LABEL_15;
      }
      outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)v158, &demangling cache variable for type metadata for LocalePreferences?);
      Hasher._combine(_:)(1u);
      if (v158[0] == 2)
      {
        uint64_t v41 = 0;
      }
      else
      {
        uint64_t v41 = v158[0] & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v41);
      uint64_t v44 = v159;
      if (v159)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(*(void *)(v44 + 16));
        uint64_t v45 = *(void *)(v44 + 16);
        if (v45)
        {
          outlined retain of LocalePreferences?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          swift_bridgeObjectRetain();
          uint64_t v46 = v44 + 40;
          do
          {
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
            v46 += 16;
            --v45;
          }
          while (v45);
          swift_bridgeObjectRelease();
LABEL_52:
          if (v160)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
            if (v161) {
              goto LABEL_54;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v161)
            {
LABEL_54:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
              uint64_t v55 = v162;
              if (v162) {
                goto LABEL_55;
              }
              goto LABEL_59;
            }
          }
          Hasher._combine(_:)(0);
          uint64_t v55 = v162;
          if (v162)
          {
LABEL_55:
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v55);
            swift_bridgeObjectRelease();
            uint64_t v56 = v163;
            if (v163)
            {
LABEL_56:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v56);
              swift_bridgeObjectRelease();
              goto LABEL_61;
            }
LABEL_60:
            Hasher._combine(_:)(0);
LABEL_61:
            uint64_t v57 = v164;
            uint64_t v58 = v165;
            uint64_t v59 = v166;
            uint64_t v60 = v167;
            uint64_t v61 = v168;
            *(void *)uint64_t v153 = v168;
            uint64_t v150 = v166;
            if (v164)
            {
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v62 = v58;
              uint64_t v63 = v59;
              char v64 = v60;
              uint64_t v65 = v60;
              uint64_t v66 = v61;
              uint64_t v67 = v57;
              _CFObject.hash(into:)();
              uint64_t v154 = v57;
              if (v58)
              {
LABEL_63:
                Hasher._combine(_:)(1u);
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                char v68 = v58;
                _CFObject.hash(into:)();

                goto LABEL_66;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              uint64_t v69 = v61;
              int v70 = v58;
              uint64_t v71 = v59;
              char v64 = v60;
              uint64_t v72 = v60;
              uint64_t v154 = 0;
              if (v58) {
                goto LABEL_63;
              }
            }
            Hasher._combine(_:)(0);
LABEL_66:
            if (v150)
            {
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              long long v73 = v150;
              _CFObject.hash(into:)();

              if (v64) {
                goto LABEL_68;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              if (v64)
              {
LABEL_68:
                Hasher._combine(_:)(1u);
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                uint64_t v74 = v64;
                _CFObject.hash(into:)();

                char v75 = *(void **)v153;
                if (*(void *)v153)
                {
LABEL_69:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                  uint64_t v76 = v75;
                  _CFObject.hash(into:)();

                  goto LABEL_73;
                }
LABEL_72:
                Hasher._combine(_:)(0);
                uint64_t v76 = 0;
LABEL_73:

                uint64_t v77 = v169;
                if (v77)
                {
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)(a1, v77);
                  swift_bridgeObjectRelease();
                  uint64_t v78 = v170;
                  if (v170) {
                    goto LABEL_75;
                  }
                }
                else
                {
                  Hasher._combine(_:)(0);
                  uint64_t v78 = v170;
                  if (v170)
                  {
LABEL_75:
                    Hasher._combine(_:)(1u);
                    swift_bridgeObjectRetain();
                    specialized Dictionary<>.hash(into:)(a1, v78);
                    swift_bridgeObjectRelease();
                    if (v171)
                    {
LABEL_76:
                      Hasher._combine(_:)(1u);
                      swift_bridgeObjectRetain();
                      String.hash(into:)();
                      swift_bridgeObjectRelease();
                      goto LABEL_80;
                    }
LABEL_79:
                    Hasher._combine(_:)(0);
LABEL_80:
                    uint64_t v38 = v155;
                    if (v172 == 2)
                    {
                      Hasher._combine(_:)(0);
                    }
                    else
                    {
                      long long v79 = v172 & 1;
                      Hasher._combine(_:)(1u);
                      Hasher._combine(_:)(v79);
                    }
                    if (v173 == 2)
                    {
                      Hasher._combine(_:)(0);
                    }
                    else
                    {
                      uint64_t v80 = v173 & 1;
                      Hasher._combine(_:)(1u);
                      Hasher._combine(_:)(v80);
                    }
                    if (v174 == 2)
                    {
                      uint64_t v81 = 0;
                    }
                    else
                    {
                      uint64_t v81 = v174 & 1;
                      Hasher._combine(_:)(1u);
                    }
                    Hasher._combine(_:)(v81);
                    if (v175 == 2)
                    {
                      uint64_t v82 = 0;
                    }
                    else
                    {
                      uint64_t v83 = v175 & 1;
                      Hasher._combine(_:)(1u);
                      uint64_t v82 = v83;
                    }
                    Hasher._combine(_:)(v82);
                    outlined retain of LocalePreferences?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                    outlined retain of LocalePreferences?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                    swift_unknownObjectRelease();
LABEL_93:
                    uint64_t v84 = swift_getObjectType();
                    uint64_t v85 = *(void (**)(void, void, void))(v38 + 120);
                    swift_unknownObjectRetain();
                    v85(a1, v84, v38);
                    swift_unknownObjectRelease();
                    swift_bridgeObjectRetain();
                    specialized Set.hash(into:)(a1, v29);
                    goto LABEL_94;
                  }
                }
                Hasher._combine(_:)(0);
                if (v171) {
                  goto LABEL_76;
                }
                goto LABEL_79;
              }
            }
            Hasher._combine(_:)(0);
            char v75 = *(void **)v153;
            if (*(void *)v153) {
              goto LABEL_69;
            }
            goto LABEL_72;
          }
LABEL_59:
          Hasher._combine(_:)(0);
          uint64_t v56 = v163;
          if (v163) {
            goto LABEL_56;
          }
          goto LABEL_60;
        }
        outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)v157, &demangling cache variable for type metadata for LocalePreferences?);
        uint64_t v50 = v157;
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v50 = v158;
      }
      outlined retain of LocalePreferences(v50);
      goto LABEL_52;
    default:
      uint64_t v3 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v181);
      Hasher._combine(_:)(0);
      __int16 v4 = *(_WORD *)(v3 + 48);
      long long v5 = *(_OWORD *)(v3 + 16);
      v178[9] = *(_OWORD *)v3;
      v178[10] = v5;
      v178[11] = *(_OWORD *)(v3 + 32);
      uint64_t v179 = v4;
      Swift::UInt v6 = *(void *)(v3 + 56);
      int v7 = *(unsigned __int8 *)(v3 + 64);
      outlined retain of Date.FormatStyle(v3);
      specialized Optional<A>.hash(into:)(a1);
      if (v7 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6);
      }
      uint64_t v33 = *(void *)(v3 + 80);
      uint64_t v34 = swift_getObjectType();
      uint64_t v35 = *(uint64_t (**)(void, void))(v33 + 48);
      swift_unknownObjectRetain();
      if (v35(v34, v33))
      {
        Swift::UInt8 v36 = 1;
LABEL_18:
        Hasher._combine(_:)(v36);
        goto LABEL_137;
      }
      Hasher._combine(_:)(0);
      (*(void (**)(uint64_t, uint64_t))(v33 + 64))(v34, v33);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void (**)(void *__return_ptr, void, void))(v33 + 464);
      swift_unknownObjectRetain();
      v39(v176, v34, v33);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v176, (uint64_t)v177, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)v178, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v178) == 1)
      {
        Swift::UInt8 v36 = 0;
        goto LABEL_18;
      }
      outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)v158, &demangling cache variable for type metadata for LocalePreferences?);
      Hasher._combine(_:)(1u);
      if (v158[0] == 2)
      {
        uint64_t v42 = 0;
      }
      else
      {
        uint64_t v42 = v158[0] & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v42);
      uint64_t v47 = v159;
      if (!v159)
      {
        Hasher._combine(_:)(0);
        uint64_t v51 = v158;
LABEL_96:
        outlined retain of LocalePreferences(v51);
        goto LABEL_97;
      }
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v47 + 16));
      uint64_t v48 = *(void *)(v47 + 16);
      if (!v48)
      {
        outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)v157, &demangling cache variable for type metadata for LocalePreferences?);
        uint64_t v51 = v157;
        goto LABEL_96;
      }
      outlined retain of LocalePreferences?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      swift_bridgeObjectRetain();
      uint64_t v49 = v47 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v49 += 16;
        --v48;
      }
      while (v48);
      swift_bridgeObjectRelease();
LABEL_97:
      if (v160)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v161) {
          goto LABEL_99;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        if (v161)
        {
LABEL_99:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          uint64_t v86 = v162;
          if (v162) {
            goto LABEL_100;
          }
LABEL_104:
          Hasher._combine(_:)(0);
          long long v87 = v163;
          if (v163) {
            goto LABEL_101;
          }
          goto LABEL_105;
        }
      }
      Hasher._combine(_:)(0);
      uint64_t v86 = v162;
      if (!v162) {
        goto LABEL_104;
      }
LABEL_100:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v86);
      swift_bridgeObjectRelease();
      long long v87 = v163;
      if (v163)
      {
LABEL_101:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v87);
        swift_bridgeObjectRelease();
        goto LABEL_106;
      }
LABEL_105:
      Hasher._combine(_:)(0);
LABEL_106:
      char v88 = v164;
      uint64_t v89 = v165;
      uint64_t v91 = v166;
      uint64_t v90 = v167;
      int v92 = v168;
      if (v164)
      {
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        uint64_t v93 = v89;
        uint64_t v94 = v91;
        uint64_t v95 = v90;
        int v96 = v92;
        uint64_t v97 = v88;
        _CFObject.hash(into:)();
        uint64_t v156 = v88;
        if (v89) {
          goto LABEL_108;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v102 = v92;
        uint64_t v103 = v89;
        uint64_t v104 = v91;
        int v105 = v90;
        uint64_t v156 = 0;
        if (v89)
        {
LABEL_108:
          Hasher._combine(_:)(1u);
          type metadata accessor for CFDictionaryRef(0);
          lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
          uint64_t v98 = v89;
          _CFObject.hash(into:)();

          if (v91) {
            goto LABEL_109;
          }
          goto LABEL_114;
        }
      }
      Hasher._combine(_:)(0);
      if (v91)
      {
LABEL_109:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        uint64_t v99 = v91;
        _CFObject.hash(into:)();

        if (v90) {
          goto LABEL_110;
        }
LABEL_115:
        Hasher._combine(_:)(0);
        if (v92) {
          goto LABEL_111;
        }
        goto LABEL_116;
      }
LABEL_114:
      Hasher._combine(_:)(0);
      if (!v90) {
        goto LABEL_115;
      }
LABEL_110:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v100 = v90;
      _CFObject.hash(into:)();

      if (v92)
      {
LABEL_111:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        uint64_t v101 = v92;
        _CFObject.hash(into:)();

        goto LABEL_117;
      }
LABEL_116:
      Hasher._combine(_:)(0);
      uint64_t v101 = 0;
LABEL_117:

      uint64_t v106 = v169;
      if (v106)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v106);
        swift_bridgeObjectRelease();
        uint64_t v107 = v170;
        if (v170) {
          goto LABEL_119;
        }
LABEL_122:
        Hasher._combine(_:)(0);
        if (v171) {
          goto LABEL_120;
        }
        goto LABEL_123;
      }
      Hasher._combine(_:)(0);
      uint64_t v107 = v170;
      if (!v170) {
        goto LABEL_122;
      }
LABEL_119:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v107);
      swift_bridgeObjectRelease();
      if (v171)
      {
LABEL_120:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        goto LABEL_124;
      }
LABEL_123:
      Hasher._combine(_:)(0);
LABEL_124:
      if (v172 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v108 = v172 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v108);
      }
      if (v173 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v109 = v173 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v109);
      }
      if (v174 == 2)
      {
        uint64_t v110 = 0;
      }
      else
      {
        uint64_t v110 = v174 & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v110);
      if (v175 == 2)
      {
        uint64_t v111 = 0;
      }
      else
      {
        uint64_t v112 = v175 & 1;
        Hasher._combine(_:)(1u);
        uint64_t v111 = v112;
      }
      Hasher._combine(_:)(v111);
      outlined retain of LocalePreferences?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_137:
      swift_unknownObjectRelease();
      uint64_t v113 = *(void *)(v3 + 96);
      long long v114 = *(void *)(v3 + 112);
      uint64_t v115 = *(unsigned __int8 *)(v3 + 120);
      uint64_t v116 = *(unsigned char *)(v3 + 121);
      char v117 = swift_getObjectType();
      uint64_t v118 = *(void (**)(void, void, void))(v113 + 112);
      swift_unknownObjectRetain();
      v118(a1, v117, v113);
      swift_unknownObjectRelease();
      uint64_t v119 = swift_getObjectType();
      uint64_t v120 = *(void (**)(void, void, void))(v114 + 120);
      swift_unknownObjectRetain();
      v120(a1, v119, v114);
      swift_unknownObjectRelease();
      Hasher._combine(_:)(v115);
      Hasher._combine(_:)(v116);
      return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v180, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  *(void *)&long long v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys>);
  *(void *)&long long v57 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  *(void *)&long long v56 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys>);
  *(void *)&long long v54 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  Swift::UInt v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys>);
  uint64_t v52 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  MEMORY[0x1F4188790](v7);
  Swift::UInt v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys>);
  uint64_t v51 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  uint64_t v61 = v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v68);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys();
  uint64_t v59 = v16;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v68, v69);
  switch(_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v69))
  {
    case 1u:
      uint64_t v41 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v69);
      char v42 = *(unsigned char *)v41;
      char v43 = *(unsigned char *)(v41 + 1);
      char v44 = *(unsigned char *)(v41 + 2);
      char v45 = *(unsigned char *)(v41 + 3);
      LODWORD(v57) = *(unsigned __int8 *)(v41 + 4);
      *(void *)&long long v56 = *(void *)(v41 + 8);
      *(void *)&long long v58 = *(void *)(v41 + 32);
      LOBYTE(v62[0]) = 1;
      long long v55 = *(_OWORD *)(v41 + 16);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v68, v67);
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v67);
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys();
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v46 = v59;
      uint64_t v47 = v60;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v62[0]) = v42;
      BYTE1(v62[0]) = v43;
      BYTE2(v62[0]) = v44;
      BYTE3(v62[0]) = v45;
      BYTE4(v62[0]) = v57;
      *((void *)&v62[0] + 1) = v56;
      v62[1] = v55;
      *(void *)&_OWORD v62[2] = v58;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
      uint64_t v48 = v53;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v9, v48);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v47);
      break;
    case 2u:
      uint64_t v27 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v69);
      long long v28 = *(_OWORD *)(v27 + 32);
      uint64_t v29 = *(void *)(v27 + 48);
      uint64_t v30 = *(void *)(v27 + 56);
      LOBYTE(v62[0]) = 2;
      long long v57 = *(_OWORD *)v27;
      long long v58 = v28;
      long long v56 = *(_OWORD *)(v27 + 16);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v68, v67);
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v67);
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      Swift::UInt8 v32 = v59;
      uint64_t v31 = v60;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v62[0] = v57;
      v62[1] = v56;
      _OWORD v62[2] = v58;
      *(void *)&long long v63 = v29;
      *((void *)&v63 + 1) = v30;
      lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
      uint64_t v33 = v55;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v6, v33);
      goto LABEL_5;
    case 3u:
      uint64_t v34 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v69);
      char v35 = *(unsigned char *)v34;
      __int16 v36 = *(_WORD *)(v34 + 1);
      uint64_t v37 = *(void *)(v34 + 40);
      LOBYTE(v62[0]) = 3;
      long long v38 = *(_OWORD *)(v34 + 8);
      long long v54 = *(_OWORD *)(v34 + 24);
      long long v55 = v38;
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v68, v67);
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v67);
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v39 = v56;
      Swift::UInt8 v32 = v59;
      uint64_t v31 = v60;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v62[0]) = v35;
      *(_WORD *)((char *)v62 + 1) = v36;
      *(_OWORD *)((char *)v62 + 8) = v55;
      *(_OWORD *)((char *)&v62[1] + 8) = v54;
      *((void *)&v62[2] + 1) = v37;
      lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
      uint64_t v40 = v58;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v39, v40);
LABEL_5:
      (*(void (**)(char *, uint64_t))(v61 + 8))(v32, v31);
      break;
    default:
      uint64_t v17 = (long long *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v69);
      LOBYTE(v62[0]) = 0;
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v68, v67);
      uint64_t v18 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v67);
      outlined retain of Date.FormatStyle(v18);
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys();
      uint64_t v20 = v59;
      uint64_t v19 = v60;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v21 = *v17;
      long long v22 = v17[1];
      long long v23 = v17[3];
      _OWORD v62[2] = v17[2];
      long long v63 = v23;
      v62[0] = v21;
      v62[1] = v22;
      long long v24 = v17[4];
      long long v25 = v17[5];
      long long v26 = v17[6];
      *(_OWORD *)((char *)v66 + 10) = *(long long *)((char *)v17 + 106);
      long long v65 = v25;
      v66[0] = v26;
      long long v64 = v24;
      lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v10);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v20, v19);
      break;
  }
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys>);
  uint64_t v49 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v52 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys>);
  uint64_t v46 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v51 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys>);
  uint64_t v44 = *(void *)(v5 - 8);
  uint64_t v45 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys>);
  uint64_t v50 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v11 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  long long v55 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys();
  uint64_t v15 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    uint64_t v42 = v8;
    char v43 = v10;
    uint64_t v17 = v51;
    uint64_t v16 = v52;
    uint64_t v67 = v11;
    uint64_t v18 = v53;
    uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v19 + 16) == 1)
    {
      uint64_t v41 = v13;
      uint64_t v20 = v67;
      switch(*(unsigned char *)(v19 + 32))
      {
        case 1:
          LOBYTE(v61[0]) = 1;
          lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
          uint64_t v34 = v45;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v34);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v20 + 8))(v41, v54);
          LODWORD(v61[0]) = v56[0];
          BYTE4(v61[0]) = BYTE4(v56[0]);
          *((void *)&v61[0] + 1) = *((void *)&v56[0] + 1);
          v61[1] = v56[1];
          *(void *)&v61[2] = *(void *)&v56[2];
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi0_((uint64_t)v61);
          goto LABEL_9;
        case 2:
          LOBYTE(v61[0]) = 2;
          lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys();
          uint64_t v30 = v54;
          uint64_t v31 = v41;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
          char v35 = v17;
          uint64_t v36 = v48;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v36);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v20 + 8))(v31, v30);
          v61[0] = v56[0];
          v61[1] = v56[1];
          v61[2] = v56[2];
          long long v62 = v57;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)v61);
LABEL_9:
          long long v38 = v61;
          goto LABEL_10;
        case 3:
          uint64_t v51 = (char *)v19;
          LOBYTE(v61[0]) = 3;
          lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys();
          uint64_t v32 = v54;
          uint64_t v33 = v41;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
          uint64_t v37 = v47;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v37);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v20 + 8))(v33, v32);
          LOBYTE(v61[0]) = v56[0];
          *(_WORD *)((char *)v61 + 1) = *(_WORD *)((char *)v56 + 1);
          *(long long *)((char *)v61 + 8) = *(_OWORD *)((char *)v56 + 8);
          *(long long *)((char *)&v61[1] + 8) = *(_OWORD *)((char *)&v56[1] + 8);
          *((void *)&v61[2] + 1) = *((void *)&v56[2] + 1);
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi2_((uint64_t)v61);
          outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v61, v66);
          uint64_t v18 = v53;
          goto LABEL_11;
        default:
          LOBYTE(v61[0]) = 0;
          lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys();
          long long v21 = v43;
          uint64_t v22 = v54;
          long long v23 = v41;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
          long long v24 = v21;
          uint64_t v25 = v42;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v24, v25);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v23, v22);
          long long v58 = v63;
          long long v59 = v64;
          v60[0] = v65[0];
          *(_OWORD *)((char *)v60 + 10) = *(_OWORD *)((char *)v65 + 10);
          v56[0] = v61[0];
          v56[1] = v61[1];
          v56[2] = v61[2];
          long long v57 = v62;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v56);
          long long v38 = v56;
LABEL_10:
          outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v38, v66);
LABEL_11:
          outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v66, v18);
          break;
      }
    }
    else
    {
      uint64_t v26 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v28 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v28 = &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
      uint64_t v29 = v54;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA70], v26);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v13, v29);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  uint64_t result = 0x656D695465746164;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x313036386F7369;
      break;
    case 2:
      uint64_t result = 0x6D69746162726576;
      break;
    case 3:
      uint64_t result = 0x65766974616C6572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v4);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v3);
  Hasher.init(_seed:)();
  String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v4);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v3);
  Hasher.init(_seed:)();
  String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(void *a1)
{
  return String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.format(_:)(Foundation::Date a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v1;
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v53);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v53, v54);
  switch(_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v54))
  {
    case 1u:
      uint64_t v25 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v54);
      char v26 = *(unsigned char *)(v25 + 1);
      char v27 = *(unsigned char *)(v25 + 2);
      char v28 = *(unsigned char *)(v25 + 3);
      char v29 = *(unsigned char *)(v25 + 4);
      uint64_t v30 = *(void *)(v25 + 8);
      uint64_t v31 = *(void *)(v25 + 32);
      LOBYTE(v48) = *(unsigned char *)v25;
      BYTE1(v48) = v26;
      BYTE2(v48) = v27;
      BYTE3(v48) = v28;
      BYTE4(v48) = v29;
      *((void *)&v48 + 1) = v30;
      long long v49 = *(_OWORD *)(v25 + 16);
      *(void *)&long long v50 = v31;
      *(void *)&v44[0] = v3;
      Swift::String v32 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)v49);
      object = v32._object;
      uint64_t countAndFlagsBits = v32._countAndFlagsBits;
      goto LABEL_9;
    case 2u:
      uint64_t v13 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v54);
      uint64_t v14 = *(void *)(v13 + 48);
      uint64_t v15 = *(void *)(v13 + 56);
      long long v16 = *(_OWORD *)(v13 + 16);
      long long v48 = *(_OWORD *)v13;
      long long v49 = v16;
      long long v50 = *(_OWORD *)(v13 + 32);
      uint64_t v51 = v14;
      uint64_t v52 = v15;
      *(void *)&v44[0] = v3;
      Swift::String v19 = Date.VerbatimFormatStyle.format(_:)((Foundation::Date)v50);
      object = v19._object;
      uint64_t countAndFlagsBits = v19._countAndFlagsBits;
LABEL_9:
      uint64_t v11 = countAndFlagsBits;
      uint64_t v12 = object;
      goto LABEL_10;
    case 3u:
      uint64_t v20 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v54);
      __int16 v21 = *(_WORD *)(v20 + 1);
      uint64_t v22 = *(void *)(v20 + 40);
      LOBYTE(v44[0]) = *(unsigned char *)v20;
      *(_WORD *)((char *)v44 + 1) = v21;
      *(_OWORD *)((char *)v44 + 8) = *(_OWORD *)(v20 + 8);
      *(_OWORD *)((char *)&v44[1] + 8) = *(_OWORD *)(v20 + 24);
      *((void *)&v44[2] + 1) = v22;
      v36[9] = v3;
      v37[0].tv_sec = 0;
      v37[0].tv_nsec = 0;
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v53, &v48);
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)&v48);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      clock_gettime(_CLOCK_REALTIME, v37);
      v23._time = (double)v37[0].tv_nsec * 0.000000001;
      *(double *)&v37[0].tv_sec = (double)v37[0].tv_sec + -978307200.0 + v23._time;
      Swift::String v24 = Date.RelativeFormatStyle._format(_:refDate:)((Foundation::Date)v37[0].tv_sec, v23);
      uint64_t v11 = v24._countAndFlagsBits;
      uint64_t v12 = v24._object;
      goto LABEL_7;
    default:
      uint64_t v4 = (_OWORD *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v54);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v53, &v48);
      uint64_t v5 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)&v48);
      long long v6 = v4[5];
      long long v45 = v4[4];
      long long v46 = v6;
      v47[0] = v4[6];
      *(_OWORD *)((char *)v47 + 10) = *(_OWORD *)((char *)v4 + 106);
      long long v7 = v4[1];
      v44[0] = *v4;
      v44[1] = v7;
      long long v8 = v4[3];
      v44[2] = v4[2];
      v44[3] = v8;
      outlined retain of Date.FormatStyle(v5);
      outlined retain of Date.FormatStyle((uint64_t)v4);
      ICUDateFormatter.DateFormatInfo.init(_:)(v44, (uint64_t)v37);
      v44[0] = v37[0];
      v44[1] = v37[1];
      LOBYTE(v44[2]) = v38;
      *(_OWORD *)((char *)&v44[2] + 8) = v39;
      BYTE8(v44[3]) = v40;
      long long v45 = v41;
      LOBYTE(v46) = v42;
      *((void *)&v46 + 1) = v43;
      uint64_t v9 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v9
        && (uint64_t v10 = swift_retain_n(),
            MEMORY[0x1F4188790](v10),
            swift_retain(),
            specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v36, (uint64_t *)v44),
            uint64_t v12 = (void *)*((void *)&v44[0] + 1),
            uint64_t v11 = *(void *)&v44[0],
            swift_release_n(),
            v12))
      {
LABEL_7:
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v53, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      }
      else
      {
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v53, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        uint64_t v11 = 0;
        uint64_t v12 = (void *)0xE000000000000000;
      }
LABEL_10:
      uint64_t v33 = v11;
      uint64_t v34 = v12;
      result._object = v34;
      result._uint64_t countAndFlagsBits = v33;
      return result;
  }
}

_OWORD *String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.locale(_:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v3, v47);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v47, v48);
  switch(_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v48))
  {
    case 1u:
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v48);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v47, v33);
      long long v21 = v33[5];
      a2[4] = v33[4];
      a2[5] = v21;
      a2[6] = v34[0];
      *(_OWORD *)((char *)a2 + 106) = *(_OWORD *)((char *)v34 + 10);
      long long v22 = v33[1];
      *a2 = v33[0];
      a2[1] = v22;
      long long v23 = v33[3];
      a2[2] = v33[2];
      a2[3] = v23;
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v47, &v35);
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)&v35);
      swift_retain();
      return (_OWORD *)swift_unknownObjectRetain();
    case 2u:
      uint64_t v13 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v48);
      uint64_t v14 = *(void *)(v13 + 48);
      uint64_t v15 = *(void *)(v13 + 56);
      long long v29 = *(_OWORD *)(v13 + 16);
      long long v31 = *(_OWORD *)v13;
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      long long v35 = v31;
      *(_OWORD *)uint64_t v36 = v29;
      *(void *)&v36[16] = v5;
      uint64_t v37 = v6;
      uint64_t v38 = v14;
      uint64_t v39 = v15;
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v35);
      return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(&v35, a2);
    case 3u:
      uint64_t v16 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v48);
      char v17 = *(unsigned char *)v16;
      __int16 v18 = *(_WORD *)(v16 + 1);
      uint64_t v19 = *(void *)(v16 + 40);
      long long v32 = *(_OWORD *)(v16 + 24);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      LOBYTE(v35) = v17;
      *(_WORD *)((char *)&v35 + 1) = v18;
      *((void *)&v35 + 1) = v5;
      *(void *)uint64_t v36 = v6;
      *(_OWORD *)&v36[8] = v32;
      uint64_t v37 = v19;
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi2_((uint64_t)&v35);
      return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(&v35, a2);
    default:
      uint64_t v7 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v48);
      char v30 = *(unsigned char *)(v7 + 121);
      char v28 = *(unsigned char *)(v7 + 120);
      uint64_t v8 = *(void *)(v7 + 56);
      char v9 = *(unsigned char *)(v7 + 64);
      long long v24 = *(_OWORD *)(v7 + 16);
      long long v25 = *(_OWORD *)v7;
      uint64_t v11 = *(void *)(v7 + 32);
      uint64_t v10 = *(void *)(v7 + 40);
      __int16 v12 = *(_WORD *)(v7 + 48);
      long long v26 = *(_OWORD *)(v7 + 104);
      long long v27 = *(_OWORD *)(v7 + 88);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      LOBYTE(v33[0]) = v9;
      long long v35 = v25;
      *(_OWORD *)uint64_t v36 = v24;
      *(void *)&v36[16] = v11;
      uint64_t v37 = v10;
      LOWORD(v38) = v12;
      uint64_t v39 = v8;
      char v40 = v9;
      uint64_t v41 = v5;
      uint64_t v42 = v6;
      long long v43 = v27;
      long long v44 = v26;
      char v45 = v28;
      char v46 = v30;
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v35);
      return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(&v35, a2);
  }
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v35)(void *__return_ptr, void, void);
  void (*v36)(void *__return_ptr, void, void);
  void (*v37)(void *__return_ptr, void, void);
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned char *v47;
  unsigned char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  Swift::UInt v81;
  Swift::UInt v82;
  Swift::UInt8 v83;
  Swift::UInt8 v84;
  Swift::UInt8 v85;
  uint64_t v86;
  void (*v87)(void, void, void);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  id v96;
  void *v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  Swift::UInt v114;
  Swift::UInt v115;
  Swift::UInt8 v116;
  Swift::UInt8 v117;
  Swift::UInt8 v118;
  uint64_t v119;
  uint64_t v120;
  Swift::UInt v121;
  Swift::UInt8 v122;
  uint64_t v123;
  void (*v124)(void, void, void);
  uint64_t v125;
  void (*v126)(void, void, void);
  unsigned char *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  Swift::UInt v151;
  Swift::UInt v152;
  Swift::UInt8 v153;
  Swift::UInt8 v154;
  Swift::UInt8 v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  void (*v159)(void, void, void);
  void *v160;
  void *v161;
  Swift::UInt8 v162;
  Swift::UInt8 v163[8];
  void *v164;
  void *v165;
  uint64_t v166;
  void *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  _OWORD v172[8];
  unsigned char v173[144];
  unsigned char v174[8];
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  char v189;
  char v190;
  char v191;
  void v192[18];
  unsigned char v193[144];
  _OWORD v194[12];
  __int16 v195;
  long long v196[8];
  _OWORD v197[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v196);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v196, v197);
  switch(_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v197))
  {
    case 1u:
      uint64_t v9 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v197);
      uint64_t v162 = *(unsigned char *)(v9 + 1);
      Swift::UInt v10 = *(void *)(v9 + 8);
      uint64_t v11 = *(void *)(v9 + 32);
      Hasher._combine(_:)(1uLL);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v196, v194);
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v194);
      swift_retain_n();
      swift_unknownObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v13 = *(void (**)(void, void, void))(v11 + 112);
      swift_unknownObjectRetain();
      v13(a1, ObjectType, v11);
      swift_unknownObjectRelease();
      Hasher._combine(_:)(v10);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v162);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_137;
    case 2u:
      uint64_t v14 = (void *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v197);
      uint64_t v15 = v14[1];
      uint64_t v166 = v14[4];
      uint64_t v169 = v14[3];
      uint64_t v156 = v14[5];
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v196, v172);
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v172);
      Hasher._combine(_:)(2uLL);
      uint64_t v16 = swift_getObjectType();
      uint64_t v159 = *(void (**)(void, void, void))(v15 + 112);
      *(void *)uint64_t v163 = v16;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v196, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      swift_unknownObjectRetain();
      v159(a1, *(void *)v163, v15);
      swift_unknownObjectRelease();
      uint64_t v17 = swift_getObjectType();
      __int16 v18 = *(void (**)(void, void, void))(v169 + 120);
      swift_unknownObjectRetain();
      v18(a1, v17, v169);
      swift_unknownObjectRelease();
      if (!v166)
      {
        Hasher._combine(_:)(0);
LABEL_23:
        swift_bridgeObjectRetain();
        String.hash(into:)();
        goto LABEL_93;
      }
      Hasher._combine(_:)(1u);
      uint64_t v19 = swift_getObjectType();
      uint64_t v20 = *(uint64_t (**)(void, void))(v156 + 48);
      swift_unknownObjectRetain_n();
      if (v20(v19, v156))
      {
        Swift::UInt8 v21 = 1;
LABEL_22:
        Hasher._combine(_:)(v21);
        swift_unknownObjectRelease_n();
        goto LABEL_23;
      }
      Hasher._combine(_:)(0);
      (*(void (**)(uint64_t, uint64_t))(v156 + 64))(v19, v156);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(void *__return_ptr, void, void))(v156 + 464);
      swift_unknownObjectRetain();
      v37(v192, v19, v156);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v192, (uint64_t)v193, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)v194, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v194) == 1)
      {
        Swift::UInt8 v21 = 0;
        goto LABEL_22;
      }
      outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)v174, &demangling cache variable for type metadata for LocalePreferences?);
      Hasher._combine(_:)(1u);
      if (v174[0] == 2)
      {
        char v40 = 0;
      }
      else
      {
        char v40 = v174[0] & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v40);
      long long v49 = v175;
      if (v175)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(*(void *)(v49 + 16));
        long long v50 = *(void *)(v49 + 16);
        if (v50)
        {
          outlined retain of LocalePreferences?((uint64_t)v193, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          swift_bridgeObjectRetain();
          uint64_t v51 = v49 + 40;
          do
          {
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
            v51 += 16;
            --v50;
          }
          while (v50);
          swift_bridgeObjectRelease();
LABEL_141:
          if (v176)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
            if (v177) {
              goto LABEL_143;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v177)
            {
LABEL_143:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
              uint64_t v129 = v178;
              if (v178) {
                goto LABEL_144;
              }
              goto LABEL_148;
            }
          }
          Hasher._combine(_:)(0);
          uint64_t v129 = v178;
          if (v178)
          {
LABEL_144:
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v129);
            swift_bridgeObjectRelease();
            uint64_t v130 = v179;
            if (v179)
            {
LABEL_145:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v130);
              swift_bridgeObjectRelease();
              goto LABEL_150;
            }
LABEL_149:
            Hasher._combine(_:)(0);
LABEL_150:
            uint64_t v132 = v180;
            uint64_t v131 = v181;
            uint64_t v134 = v182;
            uint64_t v133 = v183;
            uint64_t v135 = v184;
            if (v180)
            {
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v136 = v131;
              uint64_t v137 = v134;
              uint64_t v138 = v133;
              uint64_t v139 = v135;
              char v140 = v132;
              _CFObject.hash(into:)();
              if (v131) {
                goto LABEL_152;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              int v145 = v135;
              uint64_t v146 = v131;
              uint64_t v147 = v134;
              uint64_t v148 = v133;
              if (v131)
              {
LABEL_152:
                Hasher._combine(_:)(1u);
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                uint64_t v141 = v131;
                _CFObject.hash(into:)();

                if (v134) {
                  goto LABEL_153;
                }
                goto LABEL_158;
              }
            }
            Hasher._combine(_:)(0);
            if (v134)
            {
LABEL_153:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v142 = v134;
              _CFObject.hash(into:)();

              if (v133) {
                goto LABEL_154;
              }
              goto LABEL_159;
            }
LABEL_158:
            Hasher._combine(_:)(0);
            if (v133)
            {
LABEL_154:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v143 = v133;
              _CFObject.hash(into:)();

              if (v135)
              {
LABEL_155:
                Hasher._combine(_:)(1u);
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                uint64_t v144 = v135;
                _CFObject.hash(into:)();

                goto LABEL_161;
              }
LABEL_160:
              Hasher._combine(_:)(0);
              uint64_t v144 = 0;
LABEL_161:

              uint64_t v149 = v185;
              if (v149)
              {
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v149);
                swift_bridgeObjectRelease();
              }
              else
              {
                Hasher._combine(_:)(0);
              }
              uint64_t v150 = v186;
              if (v186)
              {
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v150);
                swift_bridgeObjectRelease();
                if (v187)
                {
LABEL_166:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_169:
                  if (v188 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v151 = v188 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v151);
                  }
                  if (v189 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v152 = v189 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v152);
                  }
                  if (v190 == 2)
                  {
                    uint64_t v153 = 0;
                  }
                  else
                  {
                    uint64_t v153 = v190 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v153);
                  if (v191 == 2)
                  {
                    uint64_t v154 = 0;
                  }
                  else
                  {
                    uint64_t v155 = v191 & 1;
                    Hasher._combine(_:)(1u);
                    uint64_t v154 = v155;
                  }
                  Hasher._combine(_:)(v154);
                  outlined retain of LocalePreferences?((uint64_t)v193, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v193, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  swift_unknownObjectRelease_n();
                  goto LABEL_23;
                }
              }
              else
              {
                Hasher._combine(_:)(0);
                if (v187) {
                  goto LABEL_166;
                }
              }
              Hasher._combine(_:)(0);
              goto LABEL_169;
            }
LABEL_159:
            Hasher._combine(_:)(0);
            if (v135) {
              goto LABEL_155;
            }
            goto LABEL_160;
          }
LABEL_148:
          Hasher._combine(_:)(0);
          uint64_t v130 = v179;
          if (v179) {
            goto LABEL_145;
          }
          goto LABEL_149;
        }
        outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)v173, &demangling cache variable for type metadata for LocalePreferences?);
        uint64_t v128 = v173;
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v128 = v174;
      }
      outlined retain of LocalePreferences(v128);
      goto LABEL_141;
    case 3u:
      long long v22 = (unsigned __int8 *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v197);
      Swift::UInt v23 = *v22;
      Swift::UInt v24 = v22[1];
      Swift::UInt v25 = v22[2];
      uint64_t v26 = *((void *)v22 + 2);
      uint64_t v170 = *((void *)v22 + 4);
      uint64_t v27 = *((void *)v22 + 5);
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v25);
      uint64_t v28 = swift_getObjectType();
      long long v29 = *(uint64_t (**)(void, void))(v26 + 48);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v196, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v196, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      swift_unknownObjectRetain();
      if (v29(v28, v26))
      {
        Swift::UInt8 v30 = 1;
LABEL_15:
        Hasher._combine(_:)(v30);
        goto LABEL_92;
      }
      Hasher._combine(_:)(0);
      (*(void (**)(uint64_t, uint64_t))(v26 + 64))(v28, v26);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      long long v35 = *(void (**)(void *__return_ptr, void, void))(v26 + 464);
      swift_unknownObjectRetain();
      v35(v192, v28, v26);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v192, (uint64_t)v193, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)v194, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v194) == 1)
      {
        Swift::UInt8 v30 = 0;
        goto LABEL_15;
      }
      outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)v174, &demangling cache variable for type metadata for LocalePreferences?);
      Hasher._combine(_:)(1u);
      if (v174[0] == 2)
      {
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = v174[0] & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v38);
      uint64_t v41 = v175;
      if (v175)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(*(void *)(v41 + 16));
        uint64_t v42 = *(void *)(v41 + 16);
        if (v42)
        {
          outlined retain of LocalePreferences?((uint64_t)v193, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          swift_bridgeObjectRetain();
          long long v43 = v41 + 40;
          do
          {
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
            v43 += 16;
            --v42;
          }
          while (v42);
          swift_bridgeObjectRelease();
LABEL_52:
          if (v176)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
            if (v177) {
              goto LABEL_54;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v177)
            {
LABEL_54:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
              uint64_t v52 = v178;
              if (v178) {
                goto LABEL_55;
              }
              goto LABEL_59;
            }
          }
          Hasher._combine(_:)(0);
          uint64_t v52 = v178;
          if (v178)
          {
LABEL_55:
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
            uint64_t v53 = v179;
            if (v179)
            {
LABEL_56:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              uint64_t v54 = a1;
              specialized Dictionary<>.hash(into:)(a1, v53);
              swift_bridgeObjectRelease();
              goto LABEL_61;
            }
LABEL_60:
            uint64_t v54 = a1;
            Hasher._combine(_:)(0);
LABEL_61:
            uint64_t v55 = v181;
            long long v57 = v182;
            long long v56 = v183;
            long long v58 = v184;
            uint64_t v164 = v180;
            uint64_t v167 = v183;
            uint64_t v158 = v27;
            uint64_t v160 = v184;
            uint64_t v157 = v182;
            if (v180)
            {
              long long v59 = v183;
              uint64_t v60 = v181;
              uint64_t v61 = v182;
              long long v62 = v184;
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              long long v63 = v60;
              long long v64 = v61;
              uint64_t v55 = v60;
              long long v65 = v59;
              uint64_t v66 = v62;
              uint64_t v67 = v164;
              _CFObject.hash(into:)();
              if (v60) {
                goto LABEL_63;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              char v75 = v58;
              uint64_t v76 = v55;
              uint64_t v77 = v57;
              uint64_t v78 = v56;
              if (v55)
              {
LABEL_63:
                Hasher._combine(_:)(1u);
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                char v68 = v55;
                _CFObject.hash(into:)();

                uint64_t v69 = v157;
                uint64_t v27 = v158;
                if (v157) {
                  goto LABEL_64;
                }
                goto LABEL_69;
              }
            }
            Hasher._combine(_:)(0);
            uint64_t v69 = v157;
            uint64_t v27 = v158;
            if (v157)
            {
LABEL_64:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              int v70 = v69;
              _CFObject.hash(into:)();

              uint64_t v71 = v167;
              if (v167) {
                goto LABEL_65;
              }
              goto LABEL_70;
            }
LABEL_69:
            Hasher._combine(_:)(0);
            uint64_t v71 = v167;
            if (v167)
            {
LABEL_65:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v72 = v71;
              _CFObject.hash(into:)();

              long long v73 = v160;
              if (v160)
              {
LABEL_66:
                Hasher._combine(_:)(1u);
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                uint64_t v74 = v73;
                _CFObject.hash(into:)();

                goto LABEL_72;
              }
LABEL_71:
              Hasher._combine(_:)(0);
              uint64_t v74 = 0;
LABEL_72:

              long long v79 = v185;
              if (v79)
              {
                a1 = v54;
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(v54, v79);
                swift_bridgeObjectRelease();
                uint64_t v80 = v186;
                if (v186) {
                  goto LABEL_74;
                }
              }
              else
              {
                a1 = v54;
                Hasher._combine(_:)(0);
                uint64_t v80 = v186;
                if (v186)
                {
LABEL_74:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)(a1, v80);
                  swift_bridgeObjectRelease();
                  if (v187)
                  {
LABEL_75:
                    Hasher._combine(_:)(1u);
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    swift_bridgeObjectRelease();
                    goto LABEL_79;
                  }
LABEL_78:
                  Hasher._combine(_:)(0);
LABEL_79:
                  if (v188 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v81 = v188 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v81);
                  }
                  if (v189 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v82 = v189 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v82);
                  }
                  if (v190 == 2)
                  {
                    uint64_t v83 = 0;
                  }
                  else
                  {
                    uint64_t v83 = v190 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v83);
                  if (v191 == 2)
                  {
                    uint64_t v84 = 0;
                  }
                  else
                  {
                    uint64_t v85 = v191 & 1;
                    Hasher._combine(_:)(1u);
                    uint64_t v84 = v85;
                  }
                  Hasher._combine(_:)(v84);
                  outlined retain of LocalePreferences?((uint64_t)v193, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v193, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_92:
                  swift_unknownObjectRelease();
                  uint64_t v86 = swift_getObjectType();
                  long long v87 = *(void (**)(void, void, void))(v170 + 120);
                  swift_unknownObjectRetain();
                  v87(a1, v86, v170);
                  swift_unknownObjectRelease();
                  swift_bridgeObjectRetain();
                  specialized Set.hash(into:)(a1, v27);
LABEL_93:
                  swift_bridgeObjectRelease();
                  goto LABEL_137;
                }
              }
              Hasher._combine(_:)(0);
              if (v187) {
                goto LABEL_75;
              }
              goto LABEL_78;
            }
LABEL_70:
            Hasher._combine(_:)(0);
            long long v73 = v160;
            if (v160) {
              goto LABEL_66;
            }
            goto LABEL_71;
          }
LABEL_59:
          Hasher._combine(_:)(0);
          uint64_t v53 = v179;
          if (v179) {
            goto LABEL_56;
          }
          goto LABEL_60;
        }
        outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)v173, &demangling cache variable for type metadata for LocalePreferences?);
        uint64_t v47 = v173;
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v47 = v174;
      }
      outlined retain of LocalePreferences(v47);
      goto LABEL_52;
    default:
      uint64_t v3 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v197);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v196, v172);
      uint64_t v4 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v172);
      Hasher._combine(_:)(0);
      __int16 v5 = *(_WORD *)(v3 + 48);
      long long v6 = *(_OWORD *)(v3 + 16);
      v194[9] = *(_OWORD *)v3;
      v194[10] = v6;
      v194[11] = *(_OWORD *)(v3 + 32);
      uint64_t v195 = v5;
      Swift::UInt v7 = *(void *)(v3 + 56);
      char v8 = *(unsigned char *)(v3 + 64);
      outlined retain of Date.FormatStyle(v4);
      outlined retain of Date.FormatStyle(v3);
      specialized Optional<A>.hash(into:)(a1);
      if (v8)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v7);
      }
      uint64_t v31 = *(void *)(v3 + 80);
      uint64_t v32 = swift_getObjectType();
      uint64_t v33 = *(uint64_t (**)(void, void))(v31 + 48);
      swift_unknownObjectRetain();
      if (v33(v32, v31))
      {
        Swift::UInt8 v34 = 1;
LABEL_18:
        Hasher._combine(_:)(v34);
        goto LABEL_136;
      }
      Hasher._combine(_:)(0);
      (*(void (**)(uint64_t, uint64_t))(v31 + 64))(v32, v31);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void (**)(void *__return_ptr, void, void))(v31 + 464);
      swift_unknownObjectRetain();
      v36(v192, v32, v31);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v192, (uint64_t)v193, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)v194, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v194) == 1)
      {
        Swift::UInt8 v34 = 0;
        goto LABEL_18;
      }
      outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)v174, &demangling cache variable for type metadata for LocalePreferences?);
      Hasher._combine(_:)(1u);
      if (v174[0] == 2)
      {
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = v174[0] & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v39);
      long long v44 = v175;
      if (!v175)
      {
        Hasher._combine(_:)(0);
        long long v48 = v174;
LABEL_95:
        outlined retain of LocalePreferences(v48);
        goto LABEL_96;
      }
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v44 + 16));
      char v45 = *(void *)(v44 + 16);
      if (!v45)
      {
        outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)v173, &demangling cache variable for type metadata for LocalePreferences?);
        long long v48 = v173;
        goto LABEL_95;
      }
      outlined retain of LocalePreferences?((uint64_t)v193, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      swift_bridgeObjectRetain();
      char v46 = v44 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v46 += 16;
        --v45;
      }
      while (v45);
      swift_bridgeObjectRelease();
LABEL_96:
      if (v176)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v177) {
          goto LABEL_98;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        if (v177)
        {
LABEL_98:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          char v88 = v178;
          if (v178) {
            goto LABEL_99;
          }
LABEL_103:
          Hasher._combine(_:)(0);
          uint64_t v89 = v179;
          if (v179) {
            goto LABEL_100;
          }
          goto LABEL_104;
        }
      }
      Hasher._combine(_:)(0);
      char v88 = v178;
      if (!v178) {
        goto LABEL_103;
      }
LABEL_99:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v88);
      swift_bridgeObjectRelease();
      uint64_t v89 = v179;
      if (v179)
      {
LABEL_100:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        uint64_t v90 = a1;
        specialized Dictionary<>.hash(into:)(a1, v89);
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }
LABEL_104:
      uint64_t v90 = a1;
      Hasher._combine(_:)(0);
LABEL_105:
      int v92 = v180;
      uint64_t v91 = v181;
      uint64_t v94 = v182;
      uint64_t v93 = v183;
      uint64_t v95 = v184;
      uint64_t v168 = v183;
      uint64_t v171 = v181;
      uint64_t v161 = v184;
      if (v180)
      {
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        int v96 = v171;
        uint64_t v97 = v94;
        uint64_t v98 = v94;
        uint64_t v99 = v93;
        uint64_t v100 = v95;
        uint64_t v101 = v92;
        uint64_t v91 = v171;
        _CFObject.hash(into:)();
        uint64_t v165 = v92;
        if (v171) {
          goto LABEL_107;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v108 = v95;
        uint64_t v109 = v91;
        uint64_t v97 = v94;
        uint64_t v110 = v94;
        uint64_t v111 = v93;
        uint64_t v165 = 0;
        if (v91)
        {
LABEL_107:
          Hasher._combine(_:)(1u);
          type metadata accessor for CFDictionaryRef(0);
          lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
          uint64_t v102 = v91;
          _CFObject.hash(into:)();

          if (v97) {
            goto LABEL_108;
          }
          goto LABEL_113;
        }
      }
      Hasher._combine(_:)(0);
      if (v97)
      {
LABEL_108:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        uint64_t v103 = v97;
        _CFObject.hash(into:)();

        uint64_t v104 = v168;
        if (v168) {
          goto LABEL_109;
        }
LABEL_114:
        Hasher._combine(_:)(0);
        uint64_t v106 = v161;
        if (v161) {
          goto LABEL_110;
        }
        goto LABEL_115;
      }
LABEL_113:
      Hasher._combine(_:)(0);
      uint64_t v104 = v168;
      if (!v168) {
        goto LABEL_114;
      }
LABEL_109:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      int v105 = v104;
      _CFObject.hash(into:)();

      uint64_t v106 = v161;
      if (v161)
      {
LABEL_110:
        a1 = v90;
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        uint64_t v107 = v106;
        _CFObject.hash(into:)();

        goto LABEL_116;
      }
LABEL_115:
      a1 = v90;
      Hasher._combine(_:)(0);
      uint64_t v107 = 0;
LABEL_116:

      uint64_t v112 = v185;
      if (v112)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v112);
        swift_bridgeObjectRelease();
        uint64_t v113 = v186;
        if (v186) {
          goto LABEL_118;
        }
LABEL_121:
        Hasher._combine(_:)(0);
        if (v187) {
          goto LABEL_119;
        }
        goto LABEL_122;
      }
      Hasher._combine(_:)(0);
      uint64_t v113 = v186;
      if (!v186) {
        goto LABEL_121;
      }
LABEL_118:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v113);
      swift_bridgeObjectRelease();
      if (v187)
      {
LABEL_119:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        goto LABEL_123;
      }
LABEL_122:
      Hasher._combine(_:)(0);
LABEL_123:
      if (v188 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        long long v114 = v188 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v114);
      }
      if (v189 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v115 = v189 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v115);
      }
      if (v190 == 2)
      {
        uint64_t v116 = 0;
      }
      else
      {
        uint64_t v116 = v190 & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v116);
      if (v191 == 2)
      {
        char v117 = 0;
      }
      else
      {
        uint64_t v118 = v191 & 1;
        Hasher._combine(_:)(1u);
        char v117 = v118;
      }
      Hasher._combine(_:)(v117);
      outlined retain of LocalePreferences?((uint64_t)v193, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v193, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_136:
      swift_unknownObjectRelease();
      uint64_t v119 = *(void *)(v3 + 96);
      uint64_t v120 = *(void *)(v3 + 112);
      uint64_t v121 = *(unsigned __int8 *)(v3 + 120);
      uint64_t v122 = *(unsigned char *)(v3 + 121);
      uint64_t v123 = swift_getObjectType();
      uint64_t v124 = *(void (**)(void, void, void))(v119 + 112);
      swift_unknownObjectRetain();
      v124(a1, v123, v119);
      swift_unknownObjectRelease();
      uint64_t v125 = swift_getObjectType();
      uint64_t v126 = *(void (**)(void, void, void))(v120 + 120);
      swift_unknownObjectRetain();
      v126(a1, v125, v120);
      swift_unknownObjectRelease();
      Hasher._combine(_:)(v121);
      Hasher._combine(_:)(v122);
LABEL_137:
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v196, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v196, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v10, v9);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  __int16 v18 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  Swift::UInt v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v8 = v18;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v14);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v14, v15);
    long long v9 = v15[5];
    v8[4] = v15[4];
    v8[5] = v9;
    v8[6] = v16[0];
    *(_OWORD *)((char *)v8 + 106) = *(_OWORD *)((char *)v16 + 10);
    long long v10 = v15[1];
    *uint64_t v8 = v15[0];
    v8[1] = v10;
    long long v11 = v15[3];
    v8[2] = v15[2];
    v8[3] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1F4188790](v7 - 8);
  long long v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1F4188790](v10 - 8);
  __int16 v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v2, (uint64_t)v15, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v9, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      Hasher._combine(_:)(1uLL);
      specialized IntegerFormatStyle.Currency.hash(into:)(a1, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      uint64_t v17 = (uint64_t)v9;
      __int16 v18 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
    }
    else
    {
      outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      Hasher._combine(_:)(2uLL);
      specialized IntegerFormatStyle.hash(into:)(a1, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      uint64_t v17 = (uint64_t)v6;
      __int16 v18 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
    }
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v12, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    Hasher._combine(_:)(0);
    specialized IntegerFormatStyle.hash(into:)(a1, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    uint64_t v17 = (uint64_t)v12;
    __int16 v18 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
  }
  return outlined destroy of Any?(v17, v18);
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v39 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1F4188790](v37);
  uint64_t v38 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x1F4188790](v5);
  Swift::UInt8 v34 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1F4188790](v32);
  uint64_t v33 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v43 = *(void *)(v17 - 8);
  uint64_t v44 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v42, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      Swift::UInt8 v21 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      uint64_t v22 = v33;
      outlined init with take of LocalePreferences?((uint64_t)v16, v33, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      char v46 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys();
      Swift::UInt v23 = v34;
      uint64_t v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Currency and conformance IntegerFormatStyle<A>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      uint64_t v25 = v36;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v35;
    }
    else
    {
      Swift::UInt8 v21 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      uint64_t v22 = v38;
      outlined init with take of LocalePreferences?((uint64_t)v16, v38, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      char v47 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys();
      Swift::UInt v23 = v39;
      uint64_t v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Percent and conformance IntegerFormatStyle<A>.Percent, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      uint64_t v25 = v41;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v40;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    outlined destroy of Any?(v22, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v24);
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)v13, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    char v45 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys();
    uint64_t v27 = v44;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    uint64_t v28 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v28);
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v27);
  }
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v54 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v60 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v53 = v5;
  MEMORY[0x1F4188790](v4);
  long long v59 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  uint64_t v50 = v8;
  MEMORY[0x1F4188790](v7);
  long long v57 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v45 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v45 - v19;
  MEMORY[0x1F4188790](v21);
  Swift::UInt v23 = (char *)&v45 - v22;
  uint64_t v24 = a1[3];
  uint64_t v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys();
  uint64_t v25 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25) {
    goto LABEL_9;
  }
  char v45 = v17;
  char v46 = v20;
  char v47 = v14;
  long long v48 = v23;
  uint64_t v26 = v57;
  uint64_t v27 = v58;
  uint64_t v28 = v59;
  long long v29 = v60;
  uint64_t v62 = v12;
  uint64_t v30 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v30 + 16) != 1)
  {
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v36 = v11;
    uint64_t v38 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v38 = v62;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v38, *MEMORY[0x1E4FBBA70], v35);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v27);
LABEL_9:
    uint64_t v33 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v33);
  }
  if (*(unsigned char *)(v30 + 32))
  {
    if (*(unsigned char *)(v30 + 32) == 1)
    {
      char v64 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Currency and conformance IntegerFormatStyle<A>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      uint64_t v31 = (uint64_t)v45;
      uint64_t v32 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v27);
      uint64_t v33 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
      uint64_t v34 = v31;
    }
    else
    {
      long long v59 = (char *)v30;
      char v65 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Percent and conformance IntegerFormatStyle<A>.Percent, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      uint64_t v41 = (uint64_t)v47;
      uint64_t v42 = v51;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v56;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v29, v42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v27);
      swift_storeEnumTagMultiPayload();
      uint64_t v34 = v41;
      uint64_t v33 = (uint64_t)v61;
    }
  }
  else
  {
    char v63 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    uint64_t v34 = (uint64_t)v46;
    uint64_t v40 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v26, v40);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v27);
    uint64_t v33 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v44 = (uint64_t)v48;
  outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v34, (uint64_t)v48, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v44, v55, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  return __swift_destroy_boxed_opaque_existential_1(v33);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  return 0x74616D726F66;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle@<X0>(Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  Swift::String v4 = String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.format(_:)(a2);
  uint64_t result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(void *a1)
{
  return String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  long long v1 = v0[5];
  long long v10 = v0[4];
  long long v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(long long *)((char *)v0 + 106);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  Hasher.init(_seed:)();
  String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  long long v1 = v0[5];
  long long v10 = v0[4];
  long long v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(long long *)((char *)v0 + 106);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  Hasher.init(_seed:)();
  String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(long long *a1, long long *a2)
{
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, v6);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v6, v5);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4);
  return specialized static String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.== infix(_:_:)(v5, v4) & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(unsigned char *))String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(unsigned char *))String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(void *a1)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.format(_:)(Swift::Int a1)
{
  void (*v31)(void *__return_ptr, uint64_t, uint64_t);
  unsigned char *v32;
  int *v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  Swift::Int v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned char *v52;
  uint64_t v53;
  uint64_t ObjectType;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t *v60;
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  void *v64;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t isStackAllocationSafe;
  int v78;
  uint64_t v79;
  unsigned char *v80;
  int v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned char *v88;
  int v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  int v94;
  void *v95;
  uint64_t v96;
  int v97;
  void *v98;
  void *v99;
  uint64_t *v100;
  unsigned char *v101;
  void *v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unsigned char *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned char *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unsigned char *v128;
  int v129;
  void *v130;
  void *v131;
  uint64_t v132;
  int v133;
  void *v134;
  Swift::String result;
  unsigned char v136[4];
  int v137;
  unint64_t v138;
  os_unfair_lock_s *v139;
  int64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned char *v144;
  int *v145;
  Swift::Int v146;
  unsigned char *v147;
  unsigned char *v148;
  uint64_t v149;
  void v150[18];
  uint64_t v151;
  void v152[18];
  void v153[20];

  uint64_t v2 = v1;
  v153[18] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  MEMORY[0x1F4188790](v4);
  long long v6 = &v136[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1F4188790](v7);
  uint64_t v149 = (uint64_t)&v136[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v145 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  uint64_t v143 = *((void *)v145 - 1);
  MEMORY[0x1F4188790](v145);
  uint64_t v144 = &v136[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v147 = &v136[-v11];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1F4188790](v12);
  uint64_t v148 = &v136[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = &v136[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = &v136[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v2, (uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v16, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    if (!specialized static ICUNumberFormatter.create<A>(for:)((uint64_t)v16)) {
      goto LABEL_58;
    }
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    uint64_t v50 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1F4188790](v50);
    LODWORD(v153[0]) = 0;
    isStackAllocationSafe = unumf_resultToString();
    if (LODWORD(v153[0]) == 15)
    {
      uint64_t v78 = isStackAllocationSafe + 1;
      if (__OFADD__(isStackAllocationSafe, 1))
      {
        __break(1u);
        goto LABEL_128;
      }
      if (v78 < 0)
      {
LABEL_130:
        __break(1u);
        goto LABEL_131;
      }
      if (v78 < 513 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1F4188790](isStackAllocationSafe);
        uint64_t v80 = &v136[-v79];
        LODWORD(v152[0]) = 0;
        uint64_t v81 = unumf_resultToString();
        if (SLODWORD(v152[0]) <= 0 && v81 > 0)
        {
          uint64_t v82 = specialized String.init(_utf16:)((uint64_t)v80, v81);
          uint64_t v84 = v83;
          goto LABEL_41;
        }
LABEL_57:
        swift_release();
        swift_release();
        goto LABEL_58;
      }
      uint64_t v93 = swift_slowAlloc();
      LODWORD(v152[0]) = 0;
      uint64_t v94 = unumf_resultToString();
      if (SLODWORD(v152[0]) > 0 || v94 <= 0)
      {
        MEMORY[0x185309510](v93, -1, -1);
        goto LABEL_57;
      }
      uint64_t v82 = specialized String.init(_utf16:)(v93, v94);
      uint64_t v84 = v95;
      MEMORY[0x185309510](v93, -1, -1);
    }
    else
    {
      if (SLODWORD(v153[0]) > 0 || (int)isStackAllocationSafe <= 0) {
        goto LABEL_57;
      }
      uint64_t v82 = specialized String.init(_utf16:)((uint64_t)&v136[-64], isStackAllocationSafe);
      uint64_t v84 = v91;
    }
LABEL_41:
    swift_release();
    swift_release();
    if (v84)
    {
LABEL_59:
      uint64_t v100 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      uint64_t v101 = v16;
LABEL_106:
      outlined destroy of Any?((uint64_t)v101, v100);
      uint64_t v123 = v82;
      uint64_t v124 = v84;
      goto LABEL_136;
    }
LABEL_58:
    v153[0] = a1;
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v82 = String.init<A>(_:radix:uppercase:)();
    uint64_t v84 = v99;
    goto LABEL_59;
  }
  uint64_t v146 = a1;
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v51 = v149;
    outlined init with take of LocalePreferences?((uint64_t)v19, v149, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
    uint64_t v52 = (unsigned char *)type metadata accessor for ICUPercentNumberFormatter();
    uint64_t v147 = (unsigned char *)(v51 + *(int *)(v7 + 36));
    uint64_t v148 = v52;
    uint64_t v53 = *(void *)(v51 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 472);
    swift_unknownObjectRetain();
    uint64_t v56 = v55(ObjectType, v53);
    uint64_t v58 = v57;
    swift_unknownObjectRelease();
    long long v59 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v53 + 464);
    swift_unknownObjectRetain();
    v59(v152, ObjectType, v53);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v152, (uint64_t)v153, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v147, (uint64_t)v6, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    uint64_t v60 = (uint64_t *)&v6[*(int *)(v4 + 20)];
    *uint64_t v60 = v56;
    v60[1] = v58;
    outlined init with take of LocalePreferences?((uint64_t)v153, (uint64_t)&v6[*(int *)(v4 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v61 = static ICUPercentNumberFormatter._create(with:)((uint64_t)v6);
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v6, type metadata accessor for ICUPercentNumberFormatter.Signature);
    uint64_t v62 = v146;
    if (!v61) {
      goto LABEL_62;
    }
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    char v63 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1F4188790](v63);
    LODWORD(v152[0]) = 0;
    uint64_t v85 = unumf_resultToString();
    if (LODWORD(v152[0]) != 15)
    {
      if (SLODWORD(v152[0]) > 0 || (int)v85 <= 0) {
        goto LABEL_61;
      }
      uint64_t v82 = specialized String.init(_utf16:)((uint64_t)&v136[-64], v85);
      uint64_t v84 = v92;
      goto LABEL_46;
    }
    uint64_t v86 = v85 + 1;
    if (!__OFADD__(v85, 1))
    {
      if (v86 < 0)
      {
LABEL_131:
        __break(1u);
        goto LABEL_132;
      }
      if (v86 < 513 || (uint64_t v85 = swift_stdlib_isStackAllocationSafe(), (v85 & 1) != 0))
      {
        MEMORY[0x1F4188790](v85);
        char v88 = &v136[-v87];
        LODWORD(v150[0]) = 0;
        uint64_t v89 = unumf_resultToString();
        if (SLODWORD(v150[0]) <= 0 && v89 > 0)
        {
          uint64_t v82 = specialized String.init(_utf16:)((uint64_t)v88, v89);
          uint64_t v84 = v90;
          goto LABEL_46;
        }
LABEL_61:
        swift_release();
        swift_release();
        goto LABEL_62;
      }
      int v96 = swift_slowAlloc();
      LODWORD(v150[0]) = 0;
      uint64_t v97 = unumf_resultToString();
      if (SLODWORD(v150[0]) > 0 || v97 <= 0)
      {
        MEMORY[0x185309510](v96, -1, -1);
        goto LABEL_61;
      }
      uint64_t v82 = specialized String.init(_utf16:)(v96, v97);
      uint64_t v84 = v98;
      MEMORY[0x185309510](v96, -1, -1);
LABEL_46:
      swift_release();
      swift_release();
      if (v84)
      {
LABEL_63:
        uint64_t v100 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        uint64_t v101 = (unsigned char *)v149;
        goto LABEL_106;
      }
LABEL_62:
      v152[0] = v62;
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v82 = String.init<A>(_:radix:uppercase:)();
      uint64_t v84 = v102;
      goto LABEL_63;
    }
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  uint64_t v21 = (uint64_t)v19;
  uint64_t v22 = v148;
  outlined init with take of LocalePreferences?(v21, (uint64_t)v148, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  uint64_t v23 = (uint64_t)v22 + *(int *)(v12 + 40);
  uint64_t v24 = v22[3];
  uint64_t v149 = v22[2];
  uint64_t v25 = v22[1];
  uint64_t v26 = swift_getObjectType();
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v28 = v27(v26, v25);
  uint64_t v30 = v29;
  swift_unknownObjectRelease();
  uint64_t v31 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 464);
  swift_unknownObjectRetain();
  v31(v152, v26, v25);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v152, (uint64_t)v153, &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v32 = v147;
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v23, (uint64_t)v147, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v33 = v145;
  uint64_t v34 = &v32[v145[5]];
  *uint64_t v34 = v149;
  v34[1] = v24;
  uint64_t v35 = (uint64_t *)&v32[v33[6]];
  *uint64_t v35 = v28;
  v35[1] = v30;
  uint64_t v36 = (uint64_t)&v32[v33[7]];
  uint64_t v37 = outlined init with take of LocalePreferences?((uint64_t)v153, v36, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v37 = swift_once();
  }
  uint64_t v38 = qword_1E8ED9480;
  uint64_t v149 = static ICUCurrencyNumberFormatter.cache;
  MEMORY[0x1F4188790](v37);
  *(void *)&v136[-16] = v32;
  uint64_t v39 = (void *)(v38 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v38 + 24));
  uint64_t v40 = 0;
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v38 + 16, &v151);
  os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 24));
  swift_release();
  uint64_t v41 = v151;
  if (v151 != 1)
  {
    swift_release();
    long long v48 = v146;
    goto LABEL_100;
  }
  uint64_t v141 = 0;
  uint64_t v142 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)((uint64_t)v32);
  uint64_t v43 = v42;
  uint64_t v44 = *v35;
  char v45 = v35[1];
  outlined init with take of LocalePreferences?(v36, (uint64_t)v152, &demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v152, (uint64_t)v150, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  char v46 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v142, v43, v44, v45, (uint64_t)v150);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v38 + 24));
  char v47 = *(void *)(*(void *)(v38 + 16) + 16);
  long long v48 = v146;
  uint64_t v49 = (os_unfair_lock_s *)(v38 + 24);
  uint64_t v142 = *(void *)(v38 + 16);
  if (v149 >= v47) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v39 = MEMORY[0x1E4FBC868];
  }
  char v64 = v46;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v150[0] = *v39;
  uint64_t v66 = v150[0];
  *uint64_t v39 = 0x8000000000000000;
  char v68 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v32);
  uint64_t v69 = *(void *)(v66 + 16);
  int v70 = (v67 & 1) == 0;
  uint64_t v71 = v69 + v70;
  if (__OFADD__(v69, v70))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v66 + 24) < v71)
    {
      uint64_t v72 = v67;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v71, isUniquelyReferenced_nonNull_native);
      long long v73 = v150[0];
      uint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v32);
      if ((v72 & 1) != (v75 & 1)) {
        goto LABEL_135;
      }
      char v68 = v74;
      uint64_t v41 = (uint64_t)v64;
      if ((v72 & 1) == 0) {
        goto LABEL_98;
      }
LABEL_21:
      uint64_t v76 = *(void *)(v73 + 56);
      swift_release();
      *(void *)(v76 + 8 * v68) = v41;
LABEL_99:
      *(void *)(v38 + 16) = v73;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v49);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(v151);
      swift_release();
      uint64_t v40 = v141;
LABEL_100:
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v32, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      if (!v41)
      {
LABEL_104:
        v152[0] = v48;
        lazy protocol witness table accessor for type Int and conformance Int();
        uint64_t v82 = String.init<A>(_:radix:uppercase:)();
        uint64_t v84 = v122;
LABEL_105:
        uint64_t v100 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
        uint64_t v101 = v148;
        goto LABEL_106;
      }
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      uint64_t v121 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      if (v40)
      {

LABEL_103:
        swift_release();
        goto LABEL_104;
      }
      MEMORY[0x1F4188790](v121);
      LODWORD(v152[0]) = 0;
      uint64_t v125 = unumf_resultToString();
      if (LODWORD(v152[0]) != 15)
      {
        if (SLODWORD(v152[0]) > 0 || (int)v125 <= 0) {
          goto LABEL_126;
        }
        uint64_t v82 = specialized String.init(_utf16:)((uint64_t)&v136[-64], v125);
        uint64_t v84 = v131;
        goto LABEL_123;
      }
      uint64_t v126 = v125 + 1;
      if (!__OFADD__(v125, 1))
      {
        if ((v126 & 0x80000000) == 0)
        {
          if (v126 < 513 || (uint64_t v125 = swift_stdlib_isStackAllocationSafe(), (v125 & 1) != 0))
          {
            MEMORY[0x1F4188790](v125);
            uint64_t v128 = &v136[-v127];
            LODWORD(v150[0]) = 0;
            uint64_t v129 = unumf_resultToString();
            if (SLODWORD(v150[0]) <= 0 && v129 > 0)
            {
              uint64_t v82 = specialized String.init(_utf16:)((uint64_t)v128, v129);
              uint64_t v84 = v130;
              goto LABEL_123;
            }
LABEL_126:
            swift_release();
            goto LABEL_103;
          }
          uint64_t v132 = swift_slowAlloc();
          LODWORD(v150[0]) = 0;
          uint64_t v133 = unumf_resultToString();
          if (SLODWORD(v150[0]) > 0 || v133 <= 0)
          {
            MEMORY[0x185309510](v132, -1, -1);
            goto LABEL_126;
          }
          uint64_t v82 = specialized String.init(_utf16:)(v132, v133);
          uint64_t v84 = v134;
          MEMORY[0x185309510](v132, -1, -1);
LABEL_123:
          swift_release();
          swift_release();
          if (v84) {
            goto LABEL_105;
          }
          goto LABEL_104;
        }
LABEL_132:
        __break(1u);
      }
      goto LABEL_129;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      long long v73 = v66;
      uint64_t v41 = (uint64_t)v64;
      if (v67) {
        goto LABEL_21;
      }
LABEL_98:
      uint64_t v120 = v144;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v32, (uint64_t)v144, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v68, (uint64_t)v120, v41, (void *)v73);
      goto LABEL_99;
    }
  }
  uint64_t v137 = v67;
  uint64_t v138 = v68;
  uint64_t v139 = (os_unfair_lock_s *)(v38 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  uint64_t v103 = static _DictionaryStorage.copy(original:)();
  long long v73 = v103;
  if (!*(void *)(v66 + 16))
  {
LABEL_97:
    swift_bridgeObjectRelease();
    long long v48 = v146;
    uint64_t v32 = v147;
    char v68 = v138;
    uint64_t v49 = v139;
    uint64_t v41 = (uint64_t)v64;
    if (v137) {
      goto LABEL_21;
    }
    goto LABEL_98;
  }
  uint64_t v104 = (int *)(v103 + 64);
  int v105 = 1 << *(unsigned char *)(v73 + 32);
  int v145 = (int *)(v66 + 64);
  uint64_t v106 = (unint64_t)(v105 + 63) >> 6;
  if (v73 != v66 || v104 >= &v145[2 * v106]) {
    memmove(v104, v145, 8 * v106);
  }
  uint64_t v149 = 0;
  *(void *)(v73 + 16) = *(void *)(v66 + 16);
  uint64_t v107 = 1 << *(unsigned char *)(v66 + 32);
  uint64_t v108 = -1;
  if (v107 < 64) {
    uint64_t v108 = ~(-1 << v107);
  }
  uint64_t v109 = v108 & *(void *)(v66 + 64);
  char v140 = (unint64_t)(v107 + 63) >> 6;
  uint64_t v110 = v144;
  while (1)
  {
    if (v109)
    {
      uint64_t v111 = __clz(__rbit64(v109));
      v109 &= v109 - 1;
      uint64_t v112 = v111 | (v149 << 6);
      goto LABEL_73;
    }
    uint64_t v116 = v149 + 1;
    if (__OFADD__(v149, 1))
    {
      __break(1u);
      goto LABEL_134;
    }
    if (v116 >= v140) {
      goto LABEL_97;
    }
    char v117 = *(void *)&v145[2 * v116];
    uint64_t v118 = v149 + 1;
    if (!v117)
    {
      uint64_t v118 = v149 + 2;
      if (v149 + 2 >= v140) {
        goto LABEL_97;
      }
      char v117 = *(void *)&v145[2 * v118];
      if (!v117)
      {
        uint64_t v118 = v149 + 3;
        if (v149 + 3 >= v140) {
          goto LABEL_97;
        }
        char v117 = *(void *)&v145[2 * v118];
        if (!v117)
        {
          uint64_t v118 = v149 + 4;
          if (v149 + 4 >= v140) {
            goto LABEL_97;
          }
          char v117 = *(void *)&v145[2 * v118];
          if (!v117)
          {
            uint64_t v118 = v149 + 5;
            if (v149 + 5 >= v140) {
              goto LABEL_97;
            }
            char v117 = *(void *)&v145[2 * v118];
            if (!v117)
            {
              uint64_t v118 = v149 + 6;
              if (v149 + 6 >= v140) {
                goto LABEL_97;
              }
              char v117 = *(void *)&v145[2 * v118];
              if (!v117)
              {
                uint64_t v118 = v149 + 7;
                if (v149 + 7 >= v140) {
                  goto LABEL_97;
                }
                char v117 = *(void *)&v145[2 * v118];
                if (!v117) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_96:
    uint64_t v109 = (v117 - 1) & v117;
    uint64_t v149 = v118;
    uint64_t v112 = __clz(__rbit64(v117)) + (v118 << 6);
LABEL_73:
    uint64_t v113 = *(void *)(v143 + 72) * v112;
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(*(void *)(v66 + 48) + v113, (uint64_t)v110, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    long long v114 = 8 * v112;
    uint64_t v115 = *(void *)(*(void *)(v66 + 56) + 8 * v112);
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v110, *(void *)(v73 + 48) + v113, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v73 + 56) + v114) = v115;
    swift_retain();
  }
  uint64_t v119 = v149 + 8;
  if (v149 + 8 >= v140) {
    goto LABEL_97;
  }
  char v117 = *(void *)&v145[2 * v119];
  if (v117)
  {
    uint64_t v118 = v149 + 8;
    goto LABEL_96;
  }
  while (1)
  {
    uint64_t v118 = v119 + 1;
    if (__OFADD__(v119, 1)) {
      break;
    }
    if (v118 >= v140) {
      goto LABEL_97;
    }
    char v117 = *(void *)&v145[2 * v118];
    ++v119;
    if (v117) {
      goto LABEL_96;
    }
  }
LABEL_134:
  __break(1u);
LABEL_135:
  uint64_t v123 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_136:
  result._object = v124;
  result._uint64_t countAndFlagsBits = v123;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1F4188790](v4 - 8);
  long long v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v33 = (uint64_t)&v33 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v21 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *a1;
  uint64_t v24 = a1[1];
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v2, (uint64_t)v23, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v27 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      outlined init with take of LocalePreferences?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v14, (uint64_t)v11, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v11 = v25;
      v11[1] = v24;
      outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      uint64_t v28 = (uint64_t)v11;
    }
    else
    {
      uint64_t v27 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      uint64_t v31 = v33;
      outlined init with take of LocalePreferences?((uint64_t)v23, v33, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      outlined init with copy of (Hashable & Sendable)?(v31, (uint64_t)v6, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *long long v6 = v25;
      v6[1] = v24;
      outlined destroy of Any?(v31, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      uint64_t v28 = (uint64_t)v6;
    }
    uint64_t v29 = v34;
    uint64_t v30 = v27;
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v23, (uint64_t)v20, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v20, (uint64_t)v17, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v17 = v25;
    v17[1] = v24;
    outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    uint64_t v28 = (uint64_t)v17;
    uint64_t v29 = v34;
    uint64_t v30 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
  }
  outlined init with take of LocalePreferences?(v28, v29, v30);
  return swift_storeEnumTagMultiPayload();
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v15, (uint64_t)v11, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v11, v13, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v2, (uint64_t)v15, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      Hasher._combine(_:)(1uLL);
      specialized IntegerFormatStyle.Currency.hash(into:)(a1, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      uint64_t v17 = (uint64_t)v9;
      uint64_t v18 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
    }
    else
    {
      outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      Hasher._combine(_:)(2uLL);
      specialized IntegerFormatStyle.hash(into:)(a1, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      uint64_t v17 = (uint64_t)v6;
      uint64_t v18 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    }
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v12, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(0);
    specialized FloatingPointFormatStyle.hash(into:)(a1);
    uint64_t v17 = (uint64_t)v12;
    uint64_t v18 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
  }
  return outlined destroy of Any?(v17, v18);
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v39 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1F4188790](v37);
  uint64_t v38 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v34 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1F4188790](v32);
  uint64_t v33 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v43 = *(void *)(v17 - 8);
  uint64_t v44 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v42, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      uint64_t v22 = v33;
      outlined init with take of LocalePreferences?((uint64_t)v16, v33, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      char v46 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys();
      uint64_t v23 = v34;
      uint64_t v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Currency and conformance FloatingPointFormatStyle<A>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      uint64_t v25 = v36;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v35;
    }
    else
    {
      uint64_t v21 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      uint64_t v22 = v38;
      outlined init with take of LocalePreferences?((uint64_t)v16, v38, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      char v47 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys();
      uint64_t v23 = v39;
      uint64_t v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      uint64_t v25 = v41;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v40;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    outlined destroy of Any?(v22, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v24);
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)v13, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    char v45 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys();
    uint64_t v27 = v44;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v28 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v28);
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v27);
  }
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v54 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v60 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v53 = v5;
  MEMORY[0x1F4188790](v4);
  long long v59 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  uint64_t v50 = v8;
  MEMORY[0x1F4188790](v7);
  long long v57 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v45 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v45 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v45 - v22;
  uint64_t v24 = a1[3];
  uint64_t v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys();
  uint64_t v25 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25) {
    goto LABEL_9;
  }
  char v45 = v17;
  char v46 = v20;
  char v47 = v14;
  long long v48 = v23;
  uint64_t v26 = v57;
  uint64_t v27 = v58;
  uint64_t v28 = v59;
  uint64_t v29 = v60;
  uint64_t v62 = v12;
  uint64_t v30 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v30 + 16) != 1)
  {
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v36 = v11;
    uint64_t v38 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v38 = v62;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v38, *MEMORY[0x1E4FBBA70], v35);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v27);
LABEL_9:
    uint64_t v33 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v33);
  }
  if (*(unsigned char *)(v30 + 32))
  {
    if (*(unsigned char *)(v30 + 32) == 1)
    {
      char v64 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Currency and conformance FloatingPointFormatStyle<A>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      uint64_t v31 = (uint64_t)v45;
      uint64_t v32 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v27);
      uint64_t v33 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
      uint64_t v34 = v31;
    }
    else
    {
      long long v59 = (char *)v30;
      char v65 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      uint64_t v41 = (uint64_t)v47;
      uint64_t v42 = v51;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v56;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v29, v42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v27);
      swift_storeEnumTagMultiPayload();
      uint64_t v34 = v41;
      uint64_t v33 = (uint64_t)v61;
    }
  }
  else
  {
    char v63 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v34 = (uint64_t)v46;
    uint64_t v40 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v26, v40);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v27);
    uint64_t v33 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v44 = (uint64_t)v48;
  outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v34, (uint64_t)v48, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v44, v55, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  return __swift_destroy_boxed_opaque_existential_1(v33);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle@<X0>(Swift::Int *a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v4 = String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.format(_:)(*a1);
  uint64_t result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  uint64_t v1 = 0x79636E6572727563;
  if (*v0 != 1) {
    uint64_t v1 = 0x746E6563726570;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7265626D756ELL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void protocol witness for Hashable.hash(into:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(unsigned char *))String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(unsigned char *))String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(void *a1)
{
  return String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.format(_:)(Swift::Double a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v2, (uint64_t)v14, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v21 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    outlined init with take of LocalePreferences?((uint64_t)v14, (uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v16 = specialized FloatingPointFormatStyle.format(_:)(specialized static ICUNumberFormatter.create<A>(for:));
    uint64_t v18 = v22;
    uint64_t v19 = (uint64_t)v11;
LABEL_6:
    uint64_t v20 = v21;
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v21 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    outlined init with take of LocalePreferences?((uint64_t)v14, (uint64_t)v5, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
    uint64_t v16 = specialized FloatingPointFormatStyle.format(_:)(specialized static ICUPercentNumberFormatter.create<A>(for:));
    uint64_t v18 = v23;
    uint64_t v19 = (uint64_t)v5;
    goto LABEL_6;
  }
  outlined init with take of LocalePreferences?((uint64_t)v14, (uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  uint64_t v16 = specialized FloatingPointFormatStyle.format(_:)((uint64_t (*)(uint64_t))specialized static ICUCurrencyNumberFormatter.create<A>(for:));
  uint64_t v18 = v17;
  uint64_t v19 = (uint64_t)v8;
  uint64_t v20 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
LABEL_7:
  outlined destroy of Any?(v19, v20);
  uint64_t v24 = v16;
  uint64_t v25 = v18;
  result._object = v25;
  result._uint64_t countAndFlagsBits = v24;
  return result;
}

uint64_t specialized FloatingPointFormatStyle.format(_:)()
{
  return specialized FloatingPointFormatStyle.format(_:)(specialized static ICUNumberFormatter.create<A>(for:));
}

uint64_t specialized FloatingPointFormatStyle.Currency.format(_:)()
{
  return specialized FloatingPointFormatStyle.format(_:)((uint64_t (*)(uint64_t))specialized static ICUCurrencyNumberFormatter.create<A>(for:));
}

uint64_t specialized FloatingPointFormatStyle.Percent.format(_:)()
{
  return specialized FloatingPointFormatStyle.format(_:)(specialized static ICUPercentNumberFormatter.create<A>(for:));
}

uint64_t specialized FloatingPointFormatStyle.format(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!a1(v1)) {
    return Double.description.getter();
  }
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  uint64_t v2 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  MEMORY[0x1F4188790](v2);
  v8[17] = 0;
  int v3 = unumf_resultToString();
  if (v3 <= 0)
  {
    swift_release();
    swift_release();
    return Double.description.getter();
  }
  uint64_t v4 = specialized String.init(_utf16:)((uint64_t)v8, v3);
  uint64_t v6 = v5;
  swift_release();
  swift_release();
  if (!v6) {
    return Double.description.getter();
  }
  return v4;
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v33 = (uint64_t)&v33 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v21 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *a1;
  uint64_t v24 = a1[1];
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v2, (uint64_t)v23, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v27 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      outlined init with take of LocalePreferences?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v14, (uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v11 = v25;
      v11[1] = v24;
      outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      uint64_t v28 = (uint64_t)v11;
    }
    else
    {
      uint64_t v27 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      uint64_t v31 = v33;
      outlined init with take of LocalePreferences?((uint64_t)v23, v33, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      outlined init with copy of (Hashable & Sendable)?(v31, (uint64_t)v6, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v6 = v25;
      v6[1] = v24;
      outlined destroy of Any?(v31, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      uint64_t v28 = (uint64_t)v6;
    }
    uint64_t v29 = v34;
    uint64_t v30 = v27;
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v23, (uint64_t)v20, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v20, (uint64_t)v17, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v17 = v25;
    v17[1] = v24;
    outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v28 = (uint64_t)v17;
    uint64_t v29 = v34;
    uint64_t v30 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
  }
  outlined init with take of LocalePreferences?(v28, v29, v30);
  return swift_storeEnumTagMultiPayload();
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v15, (uint64_t)v11, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v11, v13, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v2, (uint64_t)v15, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v15, (uint64_t)v9, type metadata accessor for NSDecimal.FormatStyle.Currency);
      Hasher._combine(_:)(1uLL);
      NSDecimal.FormatStyle.Currency.hash(into:)(a1);
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      uint64_t v18 = (uint64_t)v9;
    }
    else
    {
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v15, (uint64_t)v6, type metadata accessor for NSDecimal.FormatStyle.Percent);
      Hasher._combine(_:)(2uLL);
      NSDecimal.FormatStyle.Percent.hash(into:)(a1);
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v18 = (uint64_t)v6;
    }
  }
  else
  {
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v15, (uint64_t)v12, type metadata accessor for NSDecimal.FormatStyle);
    Hasher._combine(_:)(0);
    NSDecimal.FormatStyle.hash(into:)(a1);
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle;
    uint64_t v18 = (uint64_t)v12;
  }
  return outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v18, v17);
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v38 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v36);
  uint64_t v37 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v33 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v31);
  uint64_t v32 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v42 = *(void *)(v17 - 8);
  uint64_t v43 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v41, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = v32;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v16, (uint64_t)v32, type metadata accessor for NSDecimal.FormatStyle.Currency);
      char v45 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys();
      uint64_t v21 = v33;
      uint64_t v22 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v23 = v35;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v23);
      uint64_t v24 = type metadata accessor for NSDecimal.FormatStyle.Currency;
    }
    else
    {
      uint64_t v13 = v37;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v16, (uint64_t)v37, type metadata accessor for NSDecimal.FormatStyle.Percent);
      char v46 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys();
      uint64_t v26 = v38;
      uint64_t v22 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);
      uint64_t v27 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v27);
      uint64_t v24 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    }
  }
  else
  {
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v16, (uint64_t)v13, type metadata accessor for NSDecimal.FormatStyle);
    char v44 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys();
    uint64_t v22 = v43;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);
    uint64_t v25 = v30;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v25);
    uint64_t v24 = type metadata accessor for NSDecimal.FormatStyle;
  }
  outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v13, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v19, v22);
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v58 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  char v64 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  uint64_t v57 = v5;
  MEMORY[0x1F4188790](v4);
  char v63 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  uint64_t v54 = v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v61 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v60 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v49 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v49 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v49 - v22;
  uint64_t v24 = a1[3];
  char v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys();
  uint64_t v25 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25) {
    goto LABEL_9;
  }
  uint64_t v50 = v17;
  uint64_t v51 = v14;
  uint64_t v66 = v20;
  uint64_t v26 = v61;
  uint64_t v27 = v62;
  uint64_t v28 = v63;
  uint64_t v29 = v64;
  uint64_t v52 = v23;
  uint64_t v30 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v31 = v30;
  uint64_t v32 = v27;
  if (*(void *)(v30 + 16) != 1)
  {
    uint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v39 = v11;
    uint64_t v41 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v41 = v12;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v38 - 8) + 104))(v41, *MEMORY[0x1E4FBBA70], v38);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v27);
LABEL_9:
    uint64_t v36 = (uint64_t)v65;
    return __swift_destroy_boxed_opaque_existential_1(v36);
  }
  if (*(unsigned char *)(v30 + 32))
  {
    if (*(unsigned char *)(v30 + 32) == 1)
    {
      char v68 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys();
      uint64_t v33 = v28;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v66 = (char *)v12;
      type metadata accessor for NSDecimal.FormatStyle.Currency(0);
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v34 = (uint64_t)v50;
      uint64_t v35 = v56;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v32);
      uint64_t v36 = (uint64_t)v65;
      swift_storeEnumTagMultiPayload();
      uint64_t v37 = v34;
    }
    else
    {
      char v69 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v66 = (char *)v31;
      type metadata accessor for NSDecimal.FormatStyle.Percent(0);
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);
      uint64_t v45 = (uint64_t)v51;
      uint64_t v46 = v55;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v47 = v60;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v29, v46);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v27);
      swift_storeEnumTagMultiPayload();
      uint64_t v37 = v45;
      uint64_t v36 = (uint64_t)v65;
    }
  }
  else
  {
    char v67 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for NSDecimal.FormatStyle(0);
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);
    uint64_t v42 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v26, v42);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v27);
    uint64_t v36 = (uint64_t)v65;
    uint64_t v43 = (uint64_t)v66;
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = v43;
  }
  uint64_t v48 = (uint64_t)v52;
  outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v37, (uint64_t)v52, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v48, v59, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  return __swift_destroy_boxed_opaque_existential_1(v36);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle@<X0>(Swift::Double *a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v4 = String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.format(_:)(*a1);
  uint64_t result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(unsigned char *))String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(unsigned char *))String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(void *a1)
{
  return String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.format(_:)(NSDecimal *a1)
{
  void (*v52)(unsigned char *__return_ptr, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  Swift::String v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  Swift::String v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  void *v79;
  unint64_t v80;
  Swift::String v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  Swift::String v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  Swift::String v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  void *v106;
  unint64_t v107;
  Swift::String v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  __int16 v118;
  __int16 v119;
  int v120;
  __int16 v121;
  __int16 v122;
  Swift::String v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  __int16 v128;
  __int16 v129;
  int v130;
  __int16 v131;
  __int16 v132;
  Swift::String v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  __int16 v138;
  __int16 v139;
  int v140;
  __int16 v141;
  __int16 v142;
  Swift::String v143;
  int v144;
  Swift::String v145;
  Swift::String v146;
  Swift::String v147;
  unint64_t v148;
  uint64_t (*v149)(uint64_t);
  uint64_t v150;
  Swift::String v151;
  Swift::String v152;
  Swift::String v153;
  unint64_t v154;
  Swift::String v155;
  Swift::String v156;
  Swift::String v157;
  unint64_t v158;
  uint64_t v159;
  void *v160;
  Swift::String result;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  void *v171;
  unint64_t v172;
  unint64_t v173;
  unsigned char v174[20];
  uint64_t v175;
  unint64_t v176;
  unsigned char v177[140];
  unsigned int rawValue;
  long long v179;

  unsigned int v3 = v2;
  uint64_t v4 = v1;
  v5._rawValue = a1;
  long long v173 = (unint64_t)a1 >> 32;
  uint64_t v171 = 0;
  uint64_t v172 = (unint64_t)a1 >> 48;
  uint64_t v170 = v1 >> 16;
  unint64_t v6 = HIDWORD(v1);
  char v7 = (char *)HIWORD(v1);
  uint64_t v8 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v168 = (uint64_t)&v162 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v167 = (uint64_t)&v162 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1F4188790](v165);
  uint64_t v166 = (uint64_t)&v162 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v162 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v169, (uint64_t)v18, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = (void *)v167;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v18, v167, type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v21 = specialized static ICUCurrencyNumberFormatter.create(for:)(v20);
      if (v21)
      {
        uint64_t v22 = *(void *)(v21 + 16);
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        uint64_t v23 = v171;
        ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v22, (uint64_t)v5._rawValue, v4, v3);
        if (!v23) {
          goto LABEL_98;
        }

        swift_release();
        uint64_t v171 = 0;
      }
LABEL_6:
      rawValue = v5._rawValue;
      unsigned int v24 = HIWORD(v3);
      unint64_t v26 = v172;
      unint64_t v25 = v173;
      LOWORD(v179) = v173;
      WORD1(v179) = v172;
      WORD2(v179) = v4;
      unint64_t v27 = v170;
      WORD3(v179) = v170;
      WORD4(v179) = v6;
      WORD5(v179) = (_WORD)v7;
      HIDWORD(v179) = v3;
      if (!_So9NSDecimala__length_getter(&rawValue))
      {
        rawValue = v5._rawValue;
        LOWORD(v179) = v25;
        WORD1(v179) = v26;
        WORD2(v179) = v4;
        WORD3(v179) = v27;
        WORD4(v179) = v6;
        WORD5(v179) = (_WORD)v7;
        HIDWORD(v179) = v3;
        if (_So9NSDecimala__isNegative_getter(&rawValue))
        {
          uint64_t v110 = 5136718;
          uint64_t v111 = 0xE300000000000000;
LABEL_127:
          uint64_t v149 = type metadata accessor for NSDecimal.FormatStyle.Currency;
          uint64_t v150 = v167;
LABEL_140:
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v150, v149);
          uint64_t v159 = v110;
          uint64_t v160 = (void *)v111;
          goto LABEL_143;
        }
      }
      rawValue = v5._rawValue;
      LOWORD(v179) = v25;
      WORD1(v179) = v26;
      WORD2(v179) = v4;
      WORD3(v179) = v27;
      WORD4(v179) = v6;
      WORD5(v179) = (_WORD)v7;
      HIDWORD(v179) = v3;
      if (!_So9NSDecimala__length_getter(&rawValue))
      {
        uint64_t v111 = 0xE100000000000000;
        uint64_t v110 = 48;
        goto LABEL_127;
      }
      *(void *)int v174 = 0;
      *(void *)&v174[8] = 0xE000000000000000;
      rawValue = v5._rawValue;
      LOWORD(v179) = v25;
      WORD1(v179) = v26;
      WORD2(v179) = v4;
      WORD3(v179) = v27;
      WORD4(v179) = v6;
      WORD5(v179) = (_WORD)v7;
      HIDWORD(v179) = v3;
      *(_DWORD *)uint64_t v177 = v5._rawValue;
      *(_WORD *)&v177[4] = v25;
      *(_WORD *)&v177[6] = v26;
      *(_WORD *)&v177[8] = v4;
      *(_WORD *)&v177[10] = v27;
      *(_WORD *)&v177[12] = v6;
      *(_WORD *)&v177[14] = (_WORD)v7;
      *(_DWORD *)&v177[16] = v3;
      if ((int)_So9NSDecimala__exponent_getter(v177) >= 1)
      {
        do
        {
          LODWORD(v173) = v24;
          v28._uint64_t countAndFlagsBits = 48;
          v28._object = (void *)0xE100000000000000;
          String.append(_:)(v28);
          *(_DWORD *)uint64_t v177 = v5._rawValue;
          *(_WORD *)&v177[4] = v25;
          *(_WORD *)&v177[6] = v26;
          *(_WORD *)&v177[8] = v4;
          *(_WORD *)&v177[10] = v27;
          *(_WORD *)&v177[12] = v6;
          *(_WORD *)&v177[14] = (_WORD)v7;
          *(_WORD *)&v177[16] = v3;
          *(_WORD *)&v177[18] = v173;
          int v29 = _So9NSDecimala__exponent_getter(v177);
          _So9NSDecimala__exponent_setter((v29 - 1), &rawValue);
          LODWORD(v5._rawValue) = rawValue;
          unint64_t v25 = (unsigned __int16)v179;
          unint64_t v26 = WORD1(v179);
          LOWORD(v4) = WORD2(v179);
          unint64_t v27 = WORD3(v179);
          LOWORD(v6) = WORD4(v179);
          LOWORD(v7) = WORD5(v179);
          LOWORD(v3) = WORD6(v179);
          unsigned int v24 = HIWORD(v179);
          *(_DWORD *)uint64_t v177 = rawValue;
          *(_OWORD *)&v177[4] = v179;
        }
        while ((int)_So9NSDecimala__exponent_getter(v177) > 0);
      }
      *(_DWORD *)uint64_t v177 = v5._rawValue;
      *(_WORD *)&v177[4] = v25;
      *(_WORD *)&v177[6] = v26;
      *(_WORD *)&v177[8] = v4;
      *(_WORD *)&v177[10] = v27;
      *(_WORD *)&v177[12] = v6;
      *(_WORD *)&v177[14] = (_WORD)v7;
      *(_WORD *)&v177[16] = v3;
      *(_WORD *)&v177[18] = v24;
      if (!_So9NSDecimala__exponent_getter(v177))
      {
        _So9NSDecimala__exponent_setter(1, &rawValue);
        LODWORD(v5._rawValue) = rawValue;
        unint64_t v25 = (unsigned __int16)v179;
        unint64_t v26 = WORD1(v179);
        LOWORD(v4) = WORD2(v179);
        unint64_t v27 = WORD3(v179);
        LOWORD(v6) = WORD4(v179);
        LOWORD(v7) = WORD5(v179);
        LOWORD(v3) = WORD6(v179);
        LOWORD(v24) = HIWORD(v179);
      }
      *(_DWORD *)uint64_t v177 = v5._rawValue;
      uint64_t v172 = v26;
      long long v173 = v25;
      *(_WORD *)&v177[4] = v25;
      *(_WORD *)&v177[6] = v26;
      *(_WORD *)&v177[8] = v4;
      *(_WORD *)&v177[10] = v27;
      *(_WORD *)&v177[12] = v6;
      *(_WORD *)&v177[14] = (_WORD)v7;
      *(_WORD *)&v177[16] = v3;
      *(_WORD *)&v177[18] = v24;
      if (!_So9NSDecimala__length_getter(v177))
      {
        unint64_t v31 = v172;
        unint64_t v30 = v173;
LABEL_105:
        *(_DWORD *)uint64_t v177 = v5._rawValue;
        *(_WORD *)&v177[4] = v30;
        *(_WORD *)&v177[6] = v31;
        *(_WORD *)&v177[8] = v4;
        *(_WORD *)&v177[10] = v27;
        *(_WORD *)&v177[12] = v6;
        *(_WORD *)&v177[14] = (_WORD)v7;
        *(_WORD *)&v177[16] = v3;
        *(_WORD *)&v177[18] = v24;
        uint64_t v115 = v30;
        uint64_t v116 = v31;
        char v117 = _So9NSDecimala__exponent_getter(v177);
        uint64_t v118 = v115;
        uint64_t v119 = v116;
        if (v117 <= 0)
        {
          *(_DWORD *)uint64_t v177 = v5._rawValue;
          *(_WORD *)&v177[4] = v115;
          uint64_t v172 = v116;
          *(_WORD *)&v177[6] = v116;
          *(_WORD *)&v177[8] = v4;
          *(_WORD *)&v177[10] = v27;
          *(_WORD *)&v177[12] = v6;
          *(_WORD *)&v177[14] = (_WORD)v7;
          *(_WORD *)&v177[16] = v3;
          *(_WORD *)&v177[18] = v24;
          uint64_t v120 = _So9NSDecimala__exponent_getter(v177);
          long long v173 = v115;
          uint64_t v121 = v27;
          if (v120)
          {
            uint64_t v122 = v172;
            do
            {
              v123._uint64_t countAndFlagsBits = 48;
              v123._object = (void *)0xE100000000000000;
              String.append(_:)(v123);
              *(_DWORD *)uint64_t v177 = v5._rawValue;
              *(_WORD *)&v177[4] = v173;
              *(_WORD *)&v177[6] = v122;
              *(_WORD *)&v177[8] = v4;
              *(_WORD *)&v177[10] = v121;
              *(_WORD *)&v177[12] = v6;
              *(_WORD *)&v177[14] = (_WORD)v7;
              *(_WORD *)&v177[16] = v3;
              *(_WORD *)&v177[18] = v24;
              uint64_t v124 = _So9NSDecimala__exponent_getter(v177);
              _So9NSDecimala__exponent_setter((v124 + 1), &rawValue);
              LODWORD(v5._rawValue) = rawValue;
              uint64_t v122 = WORD1(v179);
              LOWORD(v4) = WORD2(v179);
              uint64_t v121 = WORD3(v179);
              LOWORD(v6) = WORD4(v179);
              LOWORD(v7) = WORD5(v179);
              LOWORD(v3) = WORD6(v179);
              LOWORD(v24) = HIWORD(v179);
              *(_DWORD *)uint64_t v177 = rawValue;
              long long v173 = (unsigned __int16)v179;
              *(_OWORD *)&v177[4] = v179;
            }
            while (_So9NSDecimala__exponent_getter(v177));
          }
          else
          {
            uint64_t v122 = v172;
          }
          v145._uint64_t countAndFlagsBits = 46;
          v145._object = (void *)0xE100000000000000;
          String.append(_:)(v145);
          v146._uint64_t countAndFlagsBits = 48;
          v146._object = (void *)0xE100000000000000;
          String.append(_:)(v146);
          LOWORD(v27) = v121;
          uint64_t v118 = v173;
          uint64_t v119 = v122;
        }
        *(_DWORD *)uint64_t v177 = v5._rawValue;
        *(_WORD *)&v177[4] = v118;
        *(_WORD *)&v177[6] = v119;
        *(_WORD *)&v177[8] = v4;
        *(_WORD *)&v177[10] = v27;
        *(_WORD *)&v177[12] = v6;
        *(_WORD *)&v177[14] = (_WORD)v7;
        *(_WORD *)&v177[16] = v3;
        *(_WORD *)&v177[18] = v24;
        if (_So9NSDecimala__isNegative_getter(v177))
        {
          v147._uint64_t countAndFlagsBits = 45;
          v147._object = (void *)0xE100000000000000;
          String.append(_:)(v147);
        }
        *(void *)uint64_t v177 = *(void *)v174;
        *(void *)&v177[8] = *(void *)&v174[8];
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
        lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
        uint64_t v110 = String.init<A>(_:)();
        uint64_t v111 = v148;
        goto LABEL_127;
      }
      unint64_t v31 = v172;
      unint64_t v30 = v173;
      while (1)
      {
        uint64_t v172 = v31;
        long long v173 = v30;
        *(_DWORD *)uint64_t v177 = v5._rawValue;
        *(_WORD *)&v177[4] = v30;
        *(_WORD *)&v177[6] = v31;
        *(_WORD *)&v177[8] = v4;
        *(_WORD *)&v177[10] = v27;
        *(_WORD *)&v177[12] = v6;
        *(_WORD *)&v177[14] = (_WORD)v7;
        *(_WORD *)&v177[16] = v3;
        *(_WORD *)&v177[18] = v24;
        if (!_So9NSDecimala__exponent_getter(v177))
        {
          uint64_t v170 = v27;
          v32._uint64_t countAndFlagsBits = 46;
          v32._object = (void *)0xE100000000000000;
          String.append(_:)(v32);
          LOWORD(v27) = v170;
        }
        *(_DWORD *)uint64_t v177 = v5._rawValue;
        *(_WORD *)&v177[4] = v173;
        *(_WORD *)&v177[6] = v172;
        *(_WORD *)&v177[8] = v4;
        *(_WORD *)&v177[10] = v27;
        *(_WORD *)&v177[12] = v6;
        *(_WORD *)&v177[14] = (_WORD)v7;
        *(_WORD *)&v177[16] = v3;
        *(_WORD *)&v177[18] = v24;
        int v33 = _So9NSDecimala__exponent_getter(v177);
        _So9NSDecimala__exponent_setter((v33 + 1), &rawValue);
        uint64_t v34 = rawValue;
        uint64_t v35 = (unsigned __int16)v179;
        LOWORD(v6) = WORD1(v179);
        uint64_t v172 = WORD3(v179);
        long long v173 = WORD2(v179);
        uint64_t v170 = WORD4(v179);
        uint64_t v168 = WORD5(v179);
        LODWORD(v169) = WORD6(v179);
        LODWORD(v166) = HIWORD(v179);
        NSDecimal.asVariableLengthInteger()(rawValue | ((unint64_t)(unsigned __int16)v179 << 32) | ((unint64_t)WORD1(v179) << 48), WORD2(v179) | ((unint64_t)WORD3(v179) << 16) | ((unint64_t)WORD4(v179) << 32) | ((unint64_t)WORD5(v179) << 48), WORD6(v179) | (HIWORD(v179) << 16));
        uint64_t v37 = v36;
        uint64_t v4 = *(void *)(v36 + 16);
        if (!v4) {
          break;
        }
        uint64_t v164 = v35;
        uint64_t v165 = v34;
        v5._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        char v7 = (char *)v5._rawValue + 30;
        *((void *)v5._rawValue + 2) = v4;
        uint64_t v23 = (void *)(2 * v4);
        bzero((char *)v5._rawValue + 32, 2 * v4);
        unsigned int v38 = *(unsigned __int16 *)(2 * v4 + v37 + 30);
        LOWORD(v39) = *(_WORD *)(2 * v4 + v37 + 30) / 0xAu;
        while (1)
        {
          *(_WORD *)&v7[2 * v4] = v39;
          unsigned int v3 = v38 % 0xA;
          if (v4 == 1) {
            break;
          }
          unsigned int v38 = *(unsigned __int16 *)(v37 + 28 + 2 * v4) | (v3 << 16);
          unsigned int v39 = v38 / 0xA;
          unint64_t v40 = v4 - 2;
          --v4;
          if (v40 >= *((void *)v5._rawValue + 2))
          {
            __break(1u);
            goto LABEL_96;
          }
        }
        LOWORD(v35) = v164;
        LODWORD(v34) = v165;
        uint64_t v41 = *((void *)v5._rawValue + 2);
        if (v41) {
          goto LABEL_24;
        }
LABEL_27:
        swift_bridgeObjectRelease();
        *(_DWORD *)uint64_t v177 = v34;
        *(_WORD *)&v177[4] = v35;
        *(_WORD *)&v177[6] = v6;
        *(_WORD *)&v177[8] = v173;
        *(_WORD *)&v177[10] = v172;
        *(_WORD *)&v177[12] = v170;
        *(_WORD *)&v177[14] = v168;
        *(_WORD *)&v177[16] = (_WORD)v169;
        *(_WORD *)&v177[18] = v166;
        NSDecimal.copyVariableLengthInteger(_:)(v5);
        uint64_t v171 = v43;
        if (v43) {
          goto LABEL_141;
        }
        unint64_t v44 = *((void *)v5._rawValue + 2);
        swift_bridgeObjectRelease();
        if (HIDWORD(v44)) {
          goto LABEL_142;
        }
        _So9NSDecimala__length_setter(v44, v177);
        rawValue = *(_DWORD *)v177;
        uint64_t v179 = *(_OWORD *)&v177[4];
        *(void *)uint64_t v177 = v3 | 0x30;
        v45._uint64_t countAndFlagsBits = MEMORY[0x185302020](v177, 1);
        String.append(_:)(v45);
        swift_bridgeObjectRelease();
        LODWORD(v5._rawValue) = rawValue;
        uint64_t v172 = WORD1(v179);
        long long v173 = (unsigned __int16)v179;
        LOWORD(v4) = WORD2(v179);
        unint64_t v27 = WORD3(v179);
        LOWORD(v6) = WORD4(v179);
        LOWORD(v7) = WORD5(v179);
        LOWORD(v3) = WORD6(v179);
        LOWORD(v24) = HIWORD(v179);
        *(_DWORD *)uint64_t v177 = rawValue;
        *(_OWORD *)&v177[4] = v179;
        int v46 = _So9NSDecimala__length_getter(v177);
        unint64_t v31 = v172;
        unint64_t v30 = v173;
        if (!v46) {
          goto LABEL_105;
        }
      }
      unsigned int v3 = 0;
      v5._rawValue = (void *)MEMORY[0x1E4FBC860];
      uint64_t v41 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v41) {
        goto LABEL_27;
      }
LABEL_24:
      if (!*((_WORD *)v5._rawValue + v41 + 15))
      {
        do
        {
          *((void *)v5._rawValue + 2) = v41 - 1;
          if (v41 == 1) {
            break;
          }
        }
        while (!*((unsigned __int16 *)v5._rawValue + v41-- + 14));
      }
      goto LABEL_27;
    }
    uint64_t v83 = v168;
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v18, v168, type metadata accessor for NSDecimal.FormatStyle.Percent);
    type metadata accessor for ICUPercentNumberFormatter();
    uint64_t v84 = static ICUPercentNumberFormatter.create(for:)(v83);
    if (v84)
    {
      uint64_t v85 = *(void *)(v84 + 16);
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      uint64_t v86 = v171;
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v85, (uint64_t)v5._rawValue, v4, v3);
      if (v86)
      {

        swift_release();
        uint64_t v171 = 0;
      }
      else
      {
        uint64_t v171 = 0;
        uint64_t v110 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
        uint64_t v111 = v114;
        swift_release();
        swift_release();
        if (v111) {
          goto LABEL_139;
        }
      }
    }
    rawValue = v5._rawValue;
    long long v87 = HIWORD(v3);
    uint64_t v89 = v172;
    char v88 = v173;
    LOWORD(v179) = v173;
    WORD1(v179) = v172;
    WORD2(v179) = v4;
    uint64_t v90 = v170;
    WORD3(v179) = v170;
    WORD4(v179) = v6;
    WORD5(v179) = (_WORD)v7;
    HIDWORD(v179) = v3;
    if (!_So9NSDecimala__length_getter(&rawValue))
    {
      rawValue = v5._rawValue;
      LOWORD(v179) = v88;
      WORD1(v179) = v89;
      WORD2(v179) = v4;
      WORD3(v179) = v90;
      WORD4(v179) = v6;
      WORD5(v179) = (_WORD)v7;
      HIDWORD(v179) = v3;
      if (_So9NSDecimala__isNegative_getter(&rawValue))
      {
        uint64_t v110 = 5136718;
        uint64_t v111 = 0xE300000000000000;
LABEL_139:
        uint64_t v149 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        uint64_t v150 = v168;
        goto LABEL_140;
      }
    }
    rawValue = v5._rawValue;
    LOWORD(v179) = v88;
    WORD1(v179) = v89;
    WORD2(v179) = v4;
    WORD3(v179) = v90;
    WORD4(v179) = v6;
    WORD5(v179) = (_WORD)v7;
    HIDWORD(v179) = v3;
    if (!_So9NSDecimala__length_getter(&rawValue))
    {
      uint64_t v111 = 0xE100000000000000;
      uint64_t v110 = 48;
      goto LABEL_139;
    }
    *(void *)int v174 = 0;
    *(void *)&v174[8] = 0xE000000000000000;
    rawValue = v5._rawValue;
    LOWORD(v179) = v88;
    WORD1(v179) = v89;
    WORD2(v179) = v4;
    WORD3(v179) = v90;
    WORD4(v179) = v6;
    WORD5(v179) = (_WORD)v7;
    HIDWORD(v179) = v3;
    *(_DWORD *)uint64_t v177 = v5._rawValue;
    *(_WORD *)&v177[4] = v88;
    *(_WORD *)&v177[6] = v89;
    *(_WORD *)&v177[8] = v4;
    *(_WORD *)&v177[10] = v90;
    *(_WORD *)&v177[12] = v6;
    *(_WORD *)&v177[14] = (_WORD)v7;
    *(_DWORD *)&v177[16] = v3;
    if ((int)_So9NSDecimala__exponent_getter(v177) >= 1)
    {
      do
      {
        LODWORD(v173) = v87;
        v91._uint64_t countAndFlagsBits = 48;
        v91._object = (void *)0xE100000000000000;
        String.append(_:)(v91);
        *(_DWORD *)uint64_t v177 = v5._rawValue;
        *(_WORD *)&v177[4] = v88;
        *(_WORD *)&v177[6] = v89;
        *(_WORD *)&v177[8] = v4;
        *(_WORD *)&v177[10] = v90;
        *(_WORD *)&v177[12] = v6;
        *(_WORD *)&v177[14] = (_WORD)v7;
        *(_WORD *)&v177[16] = v3;
        *(_WORD *)&v177[18] = v173;
        int v92 = _So9NSDecimala__exponent_getter(v177);
        _So9NSDecimala__exponent_setter((v92 - 1), &rawValue);
        LODWORD(v5._rawValue) = rawValue;
        char v88 = (unsigned __int16)v179;
        uint64_t v89 = WORD1(v179);
        LOWORD(v4) = WORD2(v179);
        uint64_t v90 = WORD3(v179);
        LOWORD(v6) = WORD4(v179);
        LOWORD(v7) = WORD5(v179);
        LOWORD(v3) = WORD6(v179);
        long long v87 = HIWORD(v179);
        *(_DWORD *)uint64_t v177 = rawValue;
        *(_OWORD *)&v177[4] = v179;
      }
      while ((int)_So9NSDecimala__exponent_getter(v177) > 0);
    }
    *(_DWORD *)uint64_t v177 = v5._rawValue;
    *(_WORD *)&v177[4] = v88;
    *(_WORD *)&v177[6] = v89;
    *(_WORD *)&v177[8] = v4;
    *(_WORD *)&v177[10] = v90;
    *(_WORD *)&v177[12] = v6;
    *(_WORD *)&v177[14] = (_WORD)v7;
    *(_WORD *)&v177[16] = v3;
    *(_WORD *)&v177[18] = v87;
    if (!_So9NSDecimala__exponent_getter(v177))
    {
      _So9NSDecimala__exponent_setter(1, &rawValue);
      LODWORD(v5._rawValue) = rawValue;
      char v88 = (unsigned __int16)v179;
      uint64_t v89 = WORD1(v179);
      LOWORD(v4) = WORD2(v179);
      uint64_t v90 = WORD3(v179);
      LOWORD(v6) = WORD4(v179);
      LOWORD(v7) = WORD5(v179);
      LOWORD(v3) = WORD6(v179);
      LOWORD(v87) = HIWORD(v179);
    }
    *(_DWORD *)uint64_t v177 = v5._rawValue;
    uint64_t v172 = v89;
    long long v173 = v88;
    *(_WORD *)&v177[4] = v88;
    *(_WORD *)&v177[6] = v89;
    *(_WORD *)&v177[8] = v4;
    *(_WORD *)&v177[10] = v90;
    *(_WORD *)&v177[12] = v6;
    *(_WORD *)&v177[14] = (_WORD)v7;
    *(_WORD *)&v177[16] = v3;
    *(_WORD *)&v177[18] = v87;
    if (!_So9NSDecimala__length_getter(v177))
    {
      uint64_t v94 = v172;
      uint64_t v93 = v173;
LABEL_117:
      *(_DWORD *)uint64_t v177 = v5._rawValue;
      *(_WORD *)&v177[4] = v93;
      *(_WORD *)&v177[6] = v94;
      *(_WORD *)&v177[8] = v4;
      *(_WORD *)&v177[10] = v90;
      *(_WORD *)&v177[12] = v6;
      *(_WORD *)&v177[14] = (_WORD)v7;
      *(_WORD *)&v177[16] = v3;
      *(_WORD *)&v177[18] = v87;
      uint64_t v135 = v93;
      uint64_t v136 = v94;
      uint64_t v137 = _So9NSDecimala__exponent_getter(v177);
      uint64_t v138 = v135;
      uint64_t v139 = v136;
      if (v137 <= 0)
      {
        *(_DWORD *)uint64_t v177 = v5._rawValue;
        *(_WORD *)&v177[4] = v135;
        uint64_t v172 = v136;
        *(_WORD *)&v177[6] = v136;
        *(_WORD *)&v177[8] = v4;
        *(_WORD *)&v177[10] = v90;
        *(_WORD *)&v177[12] = v6;
        *(_WORD *)&v177[14] = (_WORD)v7;
        *(_WORD *)&v177[16] = v3;
        *(_WORD *)&v177[18] = v87;
        char v140 = _So9NSDecimala__exponent_getter(v177);
        long long v173 = v135;
        uint64_t v141 = v90;
        if (v140)
        {
          uint64_t v142 = v172;
          do
          {
            v143._uint64_t countAndFlagsBits = 48;
            v143._object = (void *)0xE100000000000000;
            String.append(_:)(v143);
            *(_DWORD *)uint64_t v177 = v5._rawValue;
            *(_WORD *)&v177[4] = v173;
            *(_WORD *)&v177[6] = v142;
            *(_WORD *)&v177[8] = v4;
            *(_WORD *)&v177[10] = v141;
            *(_WORD *)&v177[12] = v6;
            *(_WORD *)&v177[14] = (_WORD)v7;
            *(_WORD *)&v177[16] = v3;
            *(_WORD *)&v177[18] = v87;
            uint64_t v144 = _So9NSDecimala__exponent_getter(v177);
            _So9NSDecimala__exponent_setter((v144 + 1), &rawValue);
            LODWORD(v5._rawValue) = rawValue;
            uint64_t v142 = WORD1(v179);
            LOWORD(v4) = WORD2(v179);
            uint64_t v141 = WORD3(v179);
            LOWORD(v6) = WORD4(v179);
            LOWORD(v7) = WORD5(v179);
            LOWORD(v3) = WORD6(v179);
            LOWORD(v87) = HIWORD(v179);
            *(_DWORD *)uint64_t v177 = rawValue;
            long long v173 = (unsigned __int16)v179;
            *(_OWORD *)&v177[4] = v179;
          }
          while (_So9NSDecimala__exponent_getter(v177));
        }
        else
        {
          uint64_t v142 = v172;
        }
        v155._uint64_t countAndFlagsBits = 46;
        v155._object = (void *)0xE100000000000000;
        String.append(_:)(v155);
        v156._uint64_t countAndFlagsBits = 48;
        v156._object = (void *)0xE100000000000000;
        String.append(_:)(v156);
        LOWORD(v90) = v141;
        uint64_t v138 = v173;
        uint64_t v139 = v142;
      }
      *(_DWORD *)uint64_t v177 = v5._rawValue;
      *(_WORD *)&v177[4] = v138;
      *(_WORD *)&v177[6] = v139;
      *(_WORD *)&v177[8] = v4;
      *(_WORD *)&v177[10] = v90;
      *(_WORD *)&v177[12] = v6;
      *(_WORD *)&v177[14] = (_WORD)v7;
      *(_WORD *)&v177[16] = v3;
      *(_WORD *)&v177[18] = v87;
      if (_So9NSDecimala__isNegative_getter(v177))
      {
        v157._uint64_t countAndFlagsBits = 45;
        v157._object = (void *)0xE100000000000000;
        String.append(_:)(v157);
      }
      *(void *)uint64_t v177 = *(void *)v174;
      *(void *)&v177[8] = *(void *)&v174[8];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
      uint64_t v110 = String.init<A>(_:)();
      uint64_t v111 = v158;
      goto LABEL_139;
    }
    uint64_t v94 = v172;
    uint64_t v93 = v173;
    while (1)
    {
      uint64_t v172 = v94;
      long long v173 = v93;
      *(_DWORD *)uint64_t v177 = v5._rawValue;
      *(_WORD *)&v177[4] = v93;
      *(_WORD *)&v177[6] = v94;
      *(_WORD *)&v177[8] = v4;
      *(_WORD *)&v177[10] = v90;
      *(_WORD *)&v177[12] = v6;
      *(_WORD *)&v177[14] = (_WORD)v7;
      *(_WORD *)&v177[16] = v3;
      *(_WORD *)&v177[18] = v87;
      if (!_So9NSDecimala__exponent_getter(v177))
      {
        uint64_t v170 = v90;
        v95._uint64_t countAndFlagsBits = 46;
        v95._object = (void *)0xE100000000000000;
        String.append(_:)(v95);
        LOWORD(v90) = v170;
      }
      *(_DWORD *)uint64_t v177 = v5._rawValue;
      *(_WORD *)&v177[4] = v173;
      *(_WORD *)&v177[6] = v172;
      *(_WORD *)&v177[8] = v4;
      *(_WORD *)&v177[10] = v90;
      *(_WORD *)&v177[12] = v6;
      *(_WORD *)&v177[14] = (_WORD)v7;
      *(_WORD *)&v177[16] = v3;
      *(_WORD *)&v177[18] = v87;
      int v96 = _So9NSDecimala__exponent_getter(v177);
      _So9NSDecimala__exponent_setter((v96 + 1), &rawValue);
      uint64_t v97 = rawValue;
      uint64_t v98 = (unsigned __int16)v179;
      LOWORD(v6) = WORD1(v179);
      uint64_t v172 = WORD3(v179);
      long long v173 = WORD2(v179);
      uint64_t v170 = WORD4(v179);
      uint64_t v167 = WORD5(v179);
      LODWORD(v169) = WORD6(v179);
      LODWORD(v166) = HIWORD(v179);
      NSDecimal.asVariableLengthInteger()(rawValue | ((unint64_t)(unsigned __int16)v179 << 32) | ((unint64_t)WORD1(v179) << 48), WORD2(v179) | ((unint64_t)WORD3(v179) << 16) | ((unint64_t)WORD4(v179) << 32) | ((unint64_t)WORD5(v179) << 48), WORD6(v179) | (HIWORD(v179) << 16));
      uint64_t v100 = v99;
      uint64_t v4 = *(void *)(v99 + 16);
      if (!v4) {
        break;
      }
      uint64_t v164 = v98;
      uint64_t v165 = v97;
      v5._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      char v7 = (char *)v5._rawValue + 30;
      *((void *)v5._rawValue + 2) = v4;
      uint64_t v23 = (void *)(2 * v4);
      bzero((char *)v5._rawValue + 32, 2 * v4);
      uint64_t v101 = *(unsigned __int16 *)(2 * v4 + v100 + 30);
      LOWORD(v102) = *(_WORD *)(2 * v4 + v100 + 30) / 0xAu;
      while (1)
      {
        *(_WORD *)&v7[2 * v4] = v102;
        unsigned int v3 = v101 % 0xA;
        if (v4 == 1) {
          break;
        }
        uint64_t v101 = *(unsigned __int16 *)(v100 + 28 + 2 * v4) | (v3 << 16);
        uint64_t v102 = v101 / 0xA;
        uint64_t v103 = v4 - 2;
        --v4;
        if (v103 >= *((void *)v5._rawValue + 2)) {
          goto LABEL_97;
        }
      }
      LOWORD(v98) = v164;
      LODWORD(v97) = v165;
      uint64_t v104 = *((void *)v5._rawValue + 2);
      if (v104) {
        goto LABEL_80;
      }
LABEL_83:
      swift_bridgeObjectRelease();
      *(_DWORD *)uint64_t v177 = v97;
      *(_WORD *)&v177[4] = v98;
      *(_WORD *)&v177[6] = v6;
      *(_WORD *)&v177[8] = v173;
      *(_WORD *)&v177[10] = v172;
      *(_WORD *)&v177[12] = v170;
      *(_WORD *)&v177[14] = v167;
      *(_WORD *)&v177[16] = (_WORD)v169;
      *(_WORD *)&v177[18] = v166;
      NSDecimal.copyVariableLengthInteger(_:)(v5);
      uint64_t v171 = v106;
      if (v106) {
        goto LABEL_141;
      }
      uint64_t v107 = *((void *)v5._rawValue + 2);
      swift_bridgeObjectRelease();
      if (HIDWORD(v107)) {
        goto LABEL_142;
      }
      _So9NSDecimala__length_setter(v107, v177);
      rawValue = *(_DWORD *)v177;
      uint64_t v179 = *(_OWORD *)&v177[4];
      *(void *)uint64_t v177 = v3 | 0x30;
      v108._uint64_t countAndFlagsBits = MEMORY[0x185302020](v177, 1);
      String.append(_:)(v108);
      swift_bridgeObjectRelease();
      LODWORD(v5._rawValue) = rawValue;
      uint64_t v172 = WORD1(v179);
      long long v173 = (unsigned __int16)v179;
      LOWORD(v4) = WORD2(v179);
      uint64_t v90 = WORD3(v179);
      LOWORD(v6) = WORD4(v179);
      LOWORD(v7) = WORD5(v179);
      LOWORD(v3) = WORD6(v179);
      LOWORD(v87) = HIWORD(v179);
      *(_DWORD *)uint64_t v177 = rawValue;
      *(_OWORD *)&v177[4] = v179;
      uint64_t v109 = _So9NSDecimala__length_getter(v177);
      uint64_t v94 = v172;
      uint64_t v93 = v173;
      if (!v109) {
        goto LABEL_117;
      }
    }
    unsigned int v3 = 0;
    v5._rawValue = (void *)MEMORY[0x1E4FBC860];
    uint64_t v104 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v104) {
      goto LABEL_83;
    }
LABEL_80:
    if (!*((_WORD *)v5._rawValue + v104 + 15))
    {
      do
      {
        *((void *)v5._rawValue + 2) = v104 - 1;
        if (v104 == 1) {
          break;
        }
      }
      while (!*((unsigned __int16 *)v5._rawValue + v104-- + 14));
    }
    goto LABEL_83;
  }
  outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v18, (uint64_t)v15, type metadata accessor for NSDecimal.FormatStyle);
  uint64_t v169 = &v15[*(int *)(v13 + 20)];
  uint64_t v47 = *((void *)v15 + 1);
  uint64_t v163 = v15;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v168 = v47 + 472;
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 472);
  swift_unknownObjectRetain();
  uint64_t v50 = v49(ObjectType, v47);
  uint64_t v167 = v51;
  uint64_t v168 = v50;
  swift_unknownObjectRelease();
  uint64_t v164 = v47 + 464;
  uint64_t v52 = *(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(v47 + 464);
  swift_unknownObjectRetain();
  v52(v177, ObjectType, v47);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)&rawValue, &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v53 = v166;
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v169, v166, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v54 = v165;
  uint64_t v55 = (void *)(v53 + *(int *)(v165 + 20));
  uint64_t v56 = v167;
  *uint64_t v55 = v168;
  v55[1] = v56;
  outlined init with take of LocalePreferences?((uint64_t)&rawValue, v53 + *(int *)(v54 + 24), &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v57 = specialized static ICUNumberFormatter._create(with:)(v53);
  outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v53, type metadata accessor for ICUNumberFormatter.Signature);
  if (v57)
  {
    uint64_t v58 = *(void *)(v57 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    uint64_t v59 = v171;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v58, (uint64_t)v5._rawValue, v4, v3);
    if (v59)
    {

      swift_release();
      uint64_t v171 = 0;
    }
    else
    {
      uint64_t v171 = 0;
      uint64_t v110 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
      uint64_t v111 = v113;
      swift_release();
      swift_release();
      if (v111) {
        goto LABEL_133;
      }
    }
  }
  *(_DWORD *)uint64_t v177 = v5._rawValue;
  uint64_t v60 = HIWORD(v3);
  uint64_t v62 = v172;
  uint64_t v61 = v173;
  *(_WORD *)&v177[4] = v173;
  *(_WORD *)&v177[6] = v172;
  *(_WORD *)&v177[8] = v4;
  char v63 = v170;
  *(_WORD *)&v177[10] = v170;
  *(_WORD *)&v177[12] = v6;
  *(_WORD *)&v177[14] = (_WORD)v7;
  *(_DWORD *)&v177[16] = v3;
  if (!_So9NSDecimala__length_getter(v177))
  {
    *(_DWORD *)uint64_t v177 = v5._rawValue;
    *(_WORD *)&v177[4] = v61;
    *(_WORD *)&v177[6] = v62;
    *(_WORD *)&v177[8] = v4;
    *(_WORD *)&v177[10] = v63;
    *(_WORD *)&v177[12] = v6;
    *(_WORD *)&v177[14] = (_WORD)v7;
    *(_DWORD *)&v177[16] = v3;
    if (_So9NSDecimala__isNegative_getter(v177))
    {
      uint64_t v110 = 5136718;
      uint64_t v111 = 0xE300000000000000;
LABEL_133:
      uint64_t v150 = (uint64_t)v163;
      uint64_t v149 = type metadata accessor for NSDecimal.FormatStyle;
      goto LABEL_140;
    }
  }
  *(_DWORD *)uint64_t v177 = v5._rawValue;
  *(_WORD *)&v177[4] = v61;
  *(_WORD *)&v177[6] = v62;
  *(_WORD *)&v177[8] = v4;
  *(_WORD *)&v177[10] = v63;
  *(_WORD *)&v177[12] = v6;
  *(_WORD *)&v177[14] = (_WORD)v7;
  *(_DWORD *)&v177[16] = v3;
  if (!_So9NSDecimala__length_getter(v177))
  {
    uint64_t v111 = 0xE100000000000000;
    uint64_t v110 = 48;
    goto LABEL_133;
  }
  long long v175 = 0;
  uint64_t v176 = 0xE000000000000000;
  *(_DWORD *)uint64_t v177 = v5._rawValue;
  *(_WORD *)&v177[4] = v61;
  *(_WORD *)&v177[6] = v62;
  *(_WORD *)&v177[8] = v4;
  *(_WORD *)&v177[10] = v63;
  *(_WORD *)&v177[12] = v6;
  *(_WORD *)&v177[14] = (_WORD)v7;
  *(_DWORD *)&v177[16] = v3;
  *(_DWORD *)int v174 = v5._rawValue;
  *(_WORD *)&v174[4] = v61;
  *(_WORD *)&v174[6] = v62;
  *(_WORD *)&v174[8] = v4;
  *(_WORD *)&v174[10] = v63;
  *(_WORD *)&v174[12] = v6;
  *(_WORD *)&v174[14] = (_WORD)v7;
  *(_DWORD *)&v174[16] = v3;
  if ((int)_So9NSDecimala__exponent_getter(v174) >= 1)
  {
    do
    {
      LODWORD(v173) = v60;
      v64._uint64_t countAndFlagsBits = 48;
      v64._object = (void *)0xE100000000000000;
      String.append(_:)(v64);
      *(_DWORD *)int v174 = v5._rawValue;
      *(_WORD *)&v174[4] = v61;
      *(_WORD *)&v174[6] = v62;
      *(_WORD *)&v174[8] = v4;
      *(_WORD *)&v174[10] = v63;
      *(_WORD *)&v174[12] = v6;
      *(_WORD *)&v174[14] = (_WORD)v7;
      *(_WORD *)&v174[16] = v3;
      *(_WORD *)&v174[18] = v173;
      char v65 = _So9NSDecimala__exponent_getter(v174);
      _So9NSDecimala__exponent_setter((v65 - 1), v177);
      LODWORD(v5._rawValue) = *(_DWORD *)v177;
      uint64_t v61 = *(unsigned __int16 *)&v177[4];
      uint64_t v62 = *(unsigned __int16 *)&v177[6];
      LOWORD(v4) = *(_WORD *)&v177[8];
      char v63 = *(unsigned __int16 *)&v177[10];
      LOWORD(v6) = *(_WORD *)&v177[12];
      LOWORD(v7) = *(_WORD *)&v177[14];
      LOWORD(v3) = *(_WORD *)&v177[16];
      uint64_t v60 = *(unsigned __int16 *)&v177[18];
      *(_DWORD *)int v174 = *(_DWORD *)v177;
      *(_WORD *)&v174[4] = *(_WORD *)&v177[4];
      *(_WORD *)&v174[6] = *(_WORD *)&v177[6];
      *(_WORD *)&v174[8] = *(_WORD *)&v177[8];
      *(_WORD *)&v174[10] = *(_WORD *)&v177[10];
      *(_WORD *)&v174[12] = *(_WORD *)&v177[12];
      *(_WORD *)&v174[14] = *(_WORD *)&v177[14];
      *(_WORD *)&v174[16] = *(_WORD *)&v177[16];
      *(_WORD *)&v174[18] = *(_WORD *)&v177[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v174) > 0);
  }
  *(_DWORD *)int v174 = v5._rawValue;
  *(_WORD *)&v174[4] = v61;
  *(_WORD *)&v174[6] = v62;
  *(_WORD *)&v174[8] = v4;
  *(_WORD *)&v174[10] = v63;
  *(_WORD *)&v174[12] = v6;
  *(_WORD *)&v174[14] = (_WORD)v7;
  *(_WORD *)&v174[16] = v3;
  *(_WORD *)&v174[18] = v60;
  if (!_So9NSDecimala__exponent_getter(v174))
  {
    _So9NSDecimala__exponent_setter(1, v177);
    LODWORD(v5._rawValue) = *(_DWORD *)v177;
    uint64_t v61 = *(unsigned __int16 *)&v177[4];
    uint64_t v62 = *(unsigned __int16 *)&v177[6];
    LOWORD(v4) = *(_WORD *)&v177[8];
    char v63 = *(unsigned __int16 *)&v177[10];
    LOWORD(v6) = *(_WORD *)&v177[12];
    LOWORD(v7) = *(_WORD *)&v177[14];
    LOWORD(v3) = *(_WORD *)&v177[16];
    LOWORD(v60) = *(_WORD *)&v177[18];
  }
  *(_DWORD *)int v174 = v5._rawValue;
  uint64_t v172 = v62;
  long long v173 = v61;
  *(_WORD *)&v174[4] = v61;
  *(_WORD *)&v174[6] = v62;
  *(_WORD *)&v174[8] = v4;
  *(_WORD *)&v174[10] = v63;
  *(_WORD *)&v174[12] = v6;
  *(_WORD *)&v174[14] = (_WORD)v7;
  *(_WORD *)&v174[16] = v3;
  *(_WORD *)&v174[18] = v60;
  if (!_So9NSDecimala__length_getter(v174))
  {
    char v67 = v172;
    uint64_t v66 = v173;
LABEL_111:
    *(_DWORD *)int v174 = v5._rawValue;
    *(_WORD *)&v174[4] = v66;
    *(_WORD *)&v174[6] = v67;
    *(_WORD *)&v174[8] = v4;
    *(_WORD *)&v174[10] = v63;
    *(_WORD *)&v174[12] = v6;
    *(_WORD *)&v174[14] = (_WORD)v7;
    *(_WORD *)&v174[16] = v3;
    *(_WORD *)&v174[18] = v60;
    uint64_t v125 = v66;
    uint64_t v126 = v67;
    uint64_t v127 = _So9NSDecimala__exponent_getter(v174);
    uint64_t v128 = v125;
    uint64_t v129 = v126;
    if (v127 <= 0)
    {
      *(_DWORD *)int v174 = v5._rawValue;
      *(_WORD *)&v174[4] = v125;
      uint64_t v172 = v126;
      *(_WORD *)&v174[6] = v126;
      *(_WORD *)&v174[8] = v4;
      *(_WORD *)&v174[10] = v63;
      *(_WORD *)&v174[12] = v6;
      *(_WORD *)&v174[14] = (_WORD)v7;
      *(_WORD *)&v174[16] = v3;
      *(_WORD *)&v174[18] = v60;
      uint64_t v130 = _So9NSDecimala__exponent_getter(v174);
      long long v173 = v125;
      uint64_t v131 = v63;
      if (v130)
      {
        uint64_t v132 = v172;
        do
        {
          v133._uint64_t countAndFlagsBits = 48;
          v133._object = (void *)0xE100000000000000;
          String.append(_:)(v133);
          *(_DWORD *)int v174 = v5._rawValue;
          *(_WORD *)&v174[4] = v173;
          *(_WORD *)&v174[6] = v132;
          *(_WORD *)&v174[8] = v4;
          *(_WORD *)&v174[10] = v131;
          *(_WORD *)&v174[12] = v6;
          *(_WORD *)&v174[14] = (_WORD)v7;
          *(_WORD *)&v174[16] = v3;
          *(_WORD *)&v174[18] = v60;
          uint64_t v134 = _So9NSDecimala__exponent_getter(v174);
          _So9NSDecimala__exponent_setter((v134 + 1), v177);
          LODWORD(v5._rawValue) = *(_DWORD *)v177;
          uint64_t v132 = *(_WORD *)&v177[6];
          LOWORD(v4) = *(_WORD *)&v177[8];
          uint64_t v131 = *(_WORD *)&v177[10];
          LOWORD(v6) = *(_WORD *)&v177[12];
          LOWORD(v7) = *(_WORD *)&v177[14];
          LOWORD(v3) = *(_WORD *)&v177[16];
          LOWORD(v60) = *(_WORD *)&v177[18];
          *(_DWORD *)int v174 = *(_DWORD *)v177;
          long long v173 = *(unsigned __int16 *)&v177[4];
          *(_WORD *)&v174[4] = *(_WORD *)&v177[4];
          *(_WORD *)&v174[6] = *(_WORD *)&v177[6];
          *(_WORD *)&v174[8] = *(_WORD *)&v177[8];
          *(_WORD *)&v174[10] = *(_WORD *)&v177[10];
          *(_WORD *)&v174[12] = *(_WORD *)&v177[12];
          *(_WORD *)&v174[14] = *(_WORD *)&v177[14];
          *(_WORD *)&v174[16] = *(_WORD *)&v177[16];
          *(_WORD *)&v174[18] = *(_WORD *)&v177[18];
        }
        while (_So9NSDecimala__exponent_getter(v174));
      }
      else
      {
        uint64_t v132 = v172;
      }
      v151._uint64_t countAndFlagsBits = 46;
      v151._object = (void *)0xE100000000000000;
      String.append(_:)(v151);
      v152._uint64_t countAndFlagsBits = 48;
      v152._object = (void *)0xE100000000000000;
      String.append(_:)(v152);
      LOWORD(v63) = v131;
      uint64_t v128 = v173;
      uint64_t v129 = v132;
    }
    *(_DWORD *)int v174 = v5._rawValue;
    *(_WORD *)&v174[4] = v128;
    *(_WORD *)&v174[6] = v129;
    *(_WORD *)&v174[8] = v4;
    *(_WORD *)&v174[10] = v63;
    *(_WORD *)&v174[12] = v6;
    *(_WORD *)&v174[14] = (_WORD)v7;
    *(_WORD *)&v174[16] = v3;
    *(_WORD *)&v174[18] = v60;
    if (_So9NSDecimala__isNegative_getter(v174))
    {
      v153._uint64_t countAndFlagsBits = 45;
      v153._object = (void *)0xE100000000000000;
      String.append(_:)(v153);
    }
    *(void *)int v174 = v175;
    *(void *)&v174[8] = v176;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    uint64_t v110 = String.init<A>(_:)();
    uint64_t v111 = v154;
    goto LABEL_133;
  }
  char v67 = v172;
  uint64_t v66 = v173;
  while (1)
  {
    uint64_t v172 = v67;
    long long v173 = v66;
    *(_DWORD *)int v174 = v5._rawValue;
    *(_WORD *)&v174[4] = v66;
    *(_WORD *)&v174[6] = v67;
    *(_WORD *)&v174[8] = v4;
    *(_WORD *)&v174[10] = v63;
    *(_WORD *)&v174[12] = v6;
    *(_WORD *)&v174[14] = (_WORD)v7;
    *(_WORD *)&v174[16] = v3;
    *(_WORD *)&v174[18] = v60;
    if (!_So9NSDecimala__exponent_getter(v174))
    {
      uint64_t v170 = v63;
      v68._uint64_t countAndFlagsBits = 46;
      v68._object = (void *)0xE100000000000000;
      String.append(_:)(v68);
      LOWORD(v63) = v170;
    }
    *(_DWORD *)int v174 = v5._rawValue;
    *(_WORD *)&v174[4] = v173;
    *(_WORD *)&v174[6] = v172;
    *(_WORD *)&v174[8] = v4;
    *(_WORD *)&v174[10] = v63;
    *(_WORD *)&v174[12] = v6;
    *(_WORD *)&v174[14] = (_WORD)v7;
    *(_WORD *)&v174[16] = v3;
    *(_WORD *)&v174[18] = v60;
    char v69 = _So9NSDecimala__exponent_getter(v174);
    _So9NSDecimala__exponent_setter((v69 + 1), v177);
    int v70 = *(unsigned int *)v177;
    uint64_t v71 = *(unsigned __int16 *)&v177[4];
    LOWORD(v6) = *(_WORD *)&v177[6];
    uint64_t v172 = *(unsigned __int16 *)&v177[10];
    long long v173 = *(unsigned __int16 *)&v177[8];
    uint64_t v170 = *(unsigned __int16 *)&v177[12];
    uint64_t v168 = *(unsigned __int16 *)&v177[14];
    LODWORD(v169) = *(unsigned __int16 *)&v177[16];
    LODWORD(v167) = *(unsigned __int16 *)&v177[18];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v177 | ((unint64_t)*(unsigned __int16 *)&v177[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v177[6] << 48), *(unsigned __int16 *)&v177[8] | ((unint64_t)*(unsigned __int16 *)&v177[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v177[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v177[14] << 48), *(unsigned __int16 *)&v177[16] | (*(unsigned __int16 *)&v177[18] << 16));
    long long v73 = v72;
    uint64_t v4 = *(void *)(v72 + 16);
    if (v4)
    {
      uint64_t v165 = v71;
      uint64_t v166 = v70;
      v5._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      char v7 = (char *)v5._rawValue + 30;
      *((void *)v5._rawValue + 2) = v4;
      uint64_t v23 = (void *)(2 * v4);
      bzero((char *)v5._rawValue + 32, 2 * v4);
      uint64_t v74 = *(unsigned __int16 *)(2 * v4 + v73 + 30);
      LOWORD(v75) = *(_WORD *)(2 * v4 + v73 + 30) / 0xAu;
      while (1)
      {
        *(_WORD *)&v7[2 * v4] = v75;
        unsigned int v3 = v74 % 0xA;
        if (v4 == 1) {
          break;
        }
        uint64_t v74 = *(unsigned __int16 *)(v73 + 28 + 2 * v4) | (v3 << 16);
        char v75 = v74 / 0xA;
        uint64_t v76 = v4 - 2;
        --v4;
        if (v76 >= *((void *)v5._rawValue + 2))
        {
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          uint64_t v171 = v23;
          uint64_t v110 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
          uint64_t v111 = v112;
          swift_release();
          swift_release();
          if (!v111) {
            goto LABEL_6;
          }
          goto LABEL_127;
        }
      }
      LOWORD(v71) = v165;
      LODWORD(v70) = v166;
      uint64_t v77 = *((void *)v5._rawValue + 2);
      if (!v77) {
        goto LABEL_55;
      }
    }
    else
    {
      unsigned int v3 = 0;
      v5._rawValue = (void *)MEMORY[0x1E4FBC860];
      uint64_t v77 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v77) {
        goto LABEL_55;
      }
    }
    if (!*((_WORD *)v5._rawValue + v77 + 15))
    {
      do
      {
        *((void *)v5._rawValue + 2) = v77 - 1;
        if (v77 == 1) {
          break;
        }
      }
      while (!*((unsigned __int16 *)v5._rawValue + v77-- + 14));
    }
LABEL_55:
    swift_bridgeObjectRelease();
    *(_DWORD *)int v174 = v70;
    *(_WORD *)&v174[4] = v71;
    *(_WORD *)&v174[6] = v6;
    *(_WORD *)&v174[8] = v173;
    *(_WORD *)&v174[10] = v172;
    *(_WORD *)&v174[12] = v170;
    *(_WORD *)&v174[14] = v168;
    *(_WORD *)&v174[16] = (_WORD)v169;
    *(_WORD *)&v174[18] = v167;
    NSDecimal.copyVariableLengthInteger(_:)(v5);
    uint64_t v171 = v79;
    if (v79) {
      break;
    }
    uint64_t v80 = *((void *)v5._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v80)) {
      goto LABEL_142;
    }
    _So9NSDecimala__length_setter(v80, v174);
    *(_DWORD *)uint64_t v177 = *(_DWORD *)v174;
    *(_OWORD *)&v177[4] = *(_OWORD *)&v174[4];
    *(void *)int v174 = v3 | 0x30;
    v81._uint64_t countAndFlagsBits = MEMORY[0x185302020](v174, 1);
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    LODWORD(v5._rawValue) = *(_DWORD *)v177;
    uint64_t v172 = *(unsigned __int16 *)&v177[6];
    long long v173 = *(unsigned __int16 *)&v177[4];
    LOWORD(v4) = *(_WORD *)&v177[8];
    char v63 = *(unsigned __int16 *)&v177[10];
    LOWORD(v6) = *(_WORD *)&v177[12];
    LOWORD(v7) = *(_WORD *)&v177[14];
    LOWORD(v3) = *(_WORD *)&v177[16];
    LOWORD(v60) = *(_WORD *)&v177[18];
    *(_DWORD *)int v174 = *(_DWORD *)v177;
    *(_WORD *)&v174[4] = *(_WORD *)&v177[4];
    *(_WORD *)&v174[6] = *(_WORD *)&v177[6];
    *(_WORD *)&v174[8] = *(_WORD *)&v177[8];
    *(_WORD *)&v174[10] = *(_WORD *)&v177[10];
    *(_WORD *)&v174[12] = *(_WORD *)&v177[12];
    *(_WORD *)&v174[14] = *(_WORD *)&v177[14];
    *(_WORD *)&v174[16] = *(_WORD *)&v177[16];
    *(_WORD *)&v174[18] = *(_WORD *)&v177[18];
    uint64_t v82 = _So9NSDecimala__length_getter(v174);
    char v67 = v172;
    uint64_t v66 = v173;
    if (!v82) {
      goto LABEL_111;
    }
  }
LABEL_141:
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_142:
  uint64_t v159 = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_143:
  result._object = v160;
  result._uint64_t countAndFlagsBits = v159;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v33 = (uint64_t)&v33 - v8;
  uint64_t v9 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v21 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v2, (uint64_t)v23, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      unint64_t v27 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v23, (uint64_t)v14, type metadata accessor for NSDecimal.FormatStyle.Currency);
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v14, (uint64_t)v11, type metadata accessor for NSDecimal.FormatStyle.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v11 = v24;
      v11[1] = v25;
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v14, type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v28 = (uint64_t)v11;
    }
    else
    {
      unint64_t v27 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v31 = v33;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v23, v33, type metadata accessor for NSDecimal.FormatStyle.Percent);
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v31, (uint64_t)v6, type metadata accessor for NSDecimal.FormatStyle.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *unint64_t v6 = v24;
      v6[1] = v25;
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v31, type metadata accessor for NSDecimal.FormatStyle.Percent);
      uint64_t v28 = (uint64_t)v6;
    }
    uint64_t v29 = v34;
    unint64_t v30 = v27;
  }
  else
  {
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v23, (uint64_t)v20, type metadata accessor for NSDecimal.FormatStyle);
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v20, (uint64_t)v17, type metadata accessor for NSDecimal.FormatStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v17 = v24;
    v17[1] = v25;
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v20, type metadata accessor for NSDecimal.FormatStyle);
    uint64_t v28 = (uint64_t)v17;
    uint64_t v29 = v34;
    unint64_t v30 = type metadata accessor for NSDecimal.FormatStyle;
  }
  outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v28, v29, v30);
  return swift_storeEnumTagMultiPayload();
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v15, (uint64_t)v11, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v11, v13, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x74616D726F66 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle@<X0>(NSDecimal **a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v4 = String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.format(_:)(*a1);
  uint64_t result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t specialized static ICUNumberFormatter.create<A>(for:)(uint64_t a1)
{
  void (*v15)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int isUniquelyReferenced_nonNull_native;
  char v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t result;
  uint64_t v64;
  int64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_unfair_lock_s *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75[18];
  void v76[20];

  v76[18] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for ICUNumberFormatter.Signature(0);
  uint64_t v71 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v72 = (uint64_t)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  long long v73 = (uint64_t *)((char *)&v64 - v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v64 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(a1 + *(int *)(v9 + 36), (uint64_t)v8, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 472);
  swift_unknownObjectRetain();
  uint64_t v13 = v12(ObjectType, v10);
  uint64_t v74 = v14;
  swift_unknownObjectRelease();
  uint64_t v15 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v15(v75, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v16 = (uint64_t *)&v8[*(int *)(v2 + 20)];
  uint64_t v17 = v74;
  char *v16 = v13;
  v16[1] = v17;
  char v69 = v2;
  uint64_t v18 = (uint64_t)v8;
  uint64_t v19 = outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)&v8[*(int *)(v2 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v19 = swift_once();
  }
  uint64_t v20 = static ICUNumberFormatter.cache;
  uint64_t v21 = qword_1E8ED53D0;
  MEMORY[0x1F4188790](v19);
  *(&v64 - 2) = v18;
  uint64_t v22 = (uint64_t *)(v21 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v21 + 24));
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v21 + 16, v75);
  os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 24));
  swift_release();
  uint64_t v23 = (void *)v75[0];
  if (v75[0] != 1) {
    goto LABEL_62;
  }
  int v70 = (os_unfair_lock_s *)(v21 + 24);
  uint64_t v74 = v18;
  uint64_t v24 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
  unint64_t v26 = v25;
  unint64_t v27 = *v16;
  type metadata accessor for ICUNumberFormatter();
  uint64_t v23 = (void *)swift_allocObject();
  v23[3] = v24;
  v23[4] = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v24, v26);
  swift_bridgeObjectRelease();
  LODWORD(v75[0]) = 0;
  unint64_t v30 = (os_unfair_lock_s *)v28[2];
  if ((unint64_t)v30 >> 31)
  {
    __break(1u);
    goto LABEL_22;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v31 = unumf_openForSkeletonAndLocale();
  swift_release();
  swift_release();
  uint64_t v16 = v73;
  Swift::String v32 = v74;
  unint64_t v30 = v70;
  if (!v31) {
    goto LABEL_8;
  }
  if (SLODWORD(v75[0]) > 0)
  {
    unumf_close();
LABEL_8:
    swift_bridgeObjectRelease();
    type metadata accessor for ICUNumberFormatterBase();
    swift_deallocPartialClassInstance();
    uint64_t v23 = 0;
    goto LABEL_10;
  }
  v23[2] = v31;
LABEL_10:
  swift_retain();
  os_unfair_lock_lock(v30);
  uint64_t v33 = *(void *)(*(void *)(v21 + 16) + 16);
  char v68 = *(void *)(v21 + 16);
  if (v20 >= v33) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v22 = MEMORY[0x1E4FBC868];
  }
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v32, (uint64_t)v16, type metadata accessor for ICUNumberFormatter.Signature);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v75[0] = *v22;
  unint64_t v27 = v75[0];
  *uint64_t v22 = 0x8000000000000000;
  uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
  uint64_t v36 = *(void *)(v27 + 16);
  uint64_t v37 = (v35 & 1) == 0;
  unsigned int v38 = v36 + v37;
  if (!__OFADD__(v36, v37))
  {
    LOBYTE(v22) = v35;
    if (*(void *)(v27 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      unsigned int v39 = v75[0];
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
      if ((v22 & 1) != (v41 & 1)) {
        goto LABEL_65;
      }
      uint64_t v29 = v40;
      if ((v22 & 1) == 0) {
        goto LABEL_60;
      }
LABEL_20:
      uint64_t v42 = *(void *)(v39 + 56);
      uint64_t v43 = 8 * v29;
      swift_release();
      *(void *)(v42 + v43) = v23;
LABEL_61:
      *(void *)(v21 + 16) = v39;
      swift_bridgeObjectRelease();
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v16, type metadata accessor for ICUNumberFormatter.Signature);
      os_unfair_lock_unlock(v30);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
      uint64_t v18 = v74;
LABEL_62:
      swift_release();
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v18, type metadata accessor for ICUNumberFormatter.Signature);
      return (uint64_t)v23;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unsigned int v39 = v27;
      if (v35) {
        goto LABEL_20;
      }
LABEL_60:
      uint64_t v61 = v72;
      uint64_t v62 = v29;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v16, v72, type metadata accessor for ICUNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v62, v61, (uint64_t)v23, (void *)v39);
      goto LABEL_61;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  char v64 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUNumberFormatter.Signature, ICUNumberFormatter?>);
  unint64_t v44 = static _DictionaryStorage.copy(original:)();
  unsigned int v39 = v44;
  if (!*(void *)(v27 + 16))
  {
LABEL_59:
    swift_bridgeObjectRelease();
    uint64_t v29 = v64;
    if (v22) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
  Swift::String v45 = (char *)(v44 + 64);
  int v46 = 1 << *(unsigned char *)(v39 + 32);
  uint64_t v66 = (char *)(v27 + 64);
  uint64_t v47 = (unint64_t)(v46 + 63) >> 6;
  if (v39 != v27 || v45 >= &v66[8 * v47]) {
    memmove(v45, v66, 8 * v47);
  }
  uint64_t v48 = 0;
  *(void *)(v39 + 16) = *(void *)(v27 + 16);
  uint64_t v49 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v50 = -1;
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  uint64_t v51 = v50 & *(void *)(v27 + 64);
  char v65 = (unint64_t)(v49 + 63) >> 6;
  while (1)
  {
    uint64_t v16 = v73;
    unint64_t v30 = v70;
    if (v51)
    {
      char v67 = (v51 - 1) & v51;
      char v69 = v48;
      uint64_t v52 = __clz(__rbit64(v51)) | (v48 << 6);
      goto LABEL_31;
    }
    uint64_t v57 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v57 >= v65) {
      goto LABEL_59;
    }
    uint64_t v58 = *(void *)&v66[8 * v57];
    uint64_t v59 = v48 + 1;
    if (!v58)
    {
      uint64_t v59 = v48 + 2;
      if (v48 + 2 >= v65) {
        goto LABEL_59;
      }
      uint64_t v58 = *(void *)&v66[8 * v59];
      if (!v58)
      {
        uint64_t v59 = v48 + 3;
        if (v48 + 3 >= v65) {
          goto LABEL_59;
        }
        uint64_t v58 = *(void *)&v66[8 * v59];
        if (!v58)
        {
          uint64_t v59 = v48 + 4;
          if (v48 + 4 >= v65) {
            goto LABEL_59;
          }
          uint64_t v58 = *(void *)&v66[8 * v59];
          if (!v58)
          {
            uint64_t v59 = v48 + 5;
            if (v48 + 5 >= v65) {
              goto LABEL_59;
            }
            uint64_t v58 = *(void *)&v66[8 * v59];
            if (!v58)
            {
              uint64_t v59 = v48 + 6;
              if (v48 + 6 >= v65) {
                goto LABEL_59;
              }
              uint64_t v58 = *(void *)&v66[8 * v59];
              if (!v58)
              {
                uint64_t v59 = v48 + 7;
                if (v48 + 7 >= v65) {
                  goto LABEL_59;
                }
                uint64_t v58 = *(void *)&v66[8 * v59];
                if (!v58)
                {
                  uint64_t v59 = v48 + 8;
                  if (v48 + 8 >= v65) {
                    goto LABEL_59;
                  }
                  uint64_t v58 = *(void *)&v66[8 * v59];
                  if (!v58)
                  {
                    uint64_t v59 = v48 + 9;
                    if (v48 + 9 >= v65) {
                      goto LABEL_59;
                    }
                    uint64_t v58 = *(void *)&v66[8 * v59];
                    if (!v58) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_58:
    char v67 = (v58 - 1) & v58;
    char v69 = v59;
    uint64_t v52 = __clz(__rbit64(v58)) + (v59 << 6);
LABEL_31:
    uint64_t v53 = v72;
    uint64_t v54 = *(void *)(v71 + 72) * v52;
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(*(void *)(v27 + 48) + v54, v72, type metadata accessor for ICUNumberFormatter.Signature);
    uint64_t v55 = 8 * v52;
    uint64_t v56 = *(void *)(*(void *)(v27 + 56) + 8 * v52);
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v53, *(void *)(v39 + 48) + v54, type metadata accessor for ICUNumberFormatter.Signature);
    *(void *)(*(void *)(v39 + 56) + v55) = v56;
    swift_retain();
    uint64_t v48 = v69;
    uint64_t v51 = v67;
  }
  uint64_t v60 = v48 + 10;
  if (v48 + 10 >= v65) {
    goto LABEL_59;
  }
  uint64_t v58 = *(void *)&v66[8 * v60];
  if (v58)
  {
    uint64_t v59 = v48 + 10;
    goto LABEL_58;
  }
  while (1)
  {
    uint64_t v59 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      break;
    }
    uint64_t v16 = v73;
    unint64_t v30 = v70;
    if (v59 >= v65) {
      goto LABEL_59;
    }
    uint64_t v58 = *(void *)&v66[8 * v59];
    ++v60;
    if (v58) {
      goto LABEL_58;
    }
  }
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int isUniquelyReferenced_nonNull_native;
  char v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t result;
  uint64_t v64;
  int64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_unfair_lock_s *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75[18];
  void v76[20];

  v76[18] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for ICUNumberFormatter.Signature(0);
  uint64_t v71 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v72 = (uint64_t)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  long long v73 = (uint64_t *)((char *)&v64 - v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v64 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(a1 + *(int *)(v9 + 36), (uint64_t)v8, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 472);
  swift_unknownObjectRetain();
  uint64_t v13 = v12(ObjectType, v10);
  uint64_t v74 = v14;
  swift_unknownObjectRelease();
  uint64_t v15 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v15(v75, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v16 = (uint64_t *)&v8[*(int *)(v2 + 20)];
  uint64_t v17 = v74;
  char *v16 = v13;
  v16[1] = v17;
  char v69 = v2;
  uint64_t v18 = (uint64_t)v8;
  uint64_t v19 = outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)&v8[*(int *)(v2 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v19 = swift_once();
  }
  uint64_t v20 = static ICUNumberFormatter.cache;
  uint64_t v21 = qword_1E8ED53D0;
  MEMORY[0x1F4188790](v19);
  *(&v64 - 2) = v18;
  uint64_t v22 = (uint64_t *)(v21 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v21 + 24));
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v21 + 16, v75);
  os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 24));
  swift_release();
  uint64_t v23 = (void *)v75[0];
  if (v75[0] != 1) {
    goto LABEL_62;
  }
  int v70 = (os_unfair_lock_s *)(v21 + 24);
  uint64_t v74 = v18;
  uint64_t v24 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
  unint64_t v26 = v25;
  unint64_t v27 = *v16;
  type metadata accessor for ICUNumberFormatter();
  uint64_t v23 = (void *)swift_allocObject();
  v23[3] = v24;
  v23[4] = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v24, v26);
  swift_bridgeObjectRelease();
  LODWORD(v75[0]) = 0;
  unint64_t v30 = (os_unfair_lock_s *)v28[2];
  if ((unint64_t)v30 >> 31)
  {
    __break(1u);
    goto LABEL_22;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v31 = unumf_openForSkeletonAndLocale();
  swift_release();
  swift_release();
  uint64_t v16 = v73;
  Swift::String v32 = v74;
  unint64_t v30 = v70;
  if (!v31) {
    goto LABEL_8;
  }
  if (SLODWORD(v75[0]) > 0)
  {
    unumf_close();
LABEL_8:
    swift_bridgeObjectRelease();
    type metadata accessor for ICUNumberFormatterBase();
    swift_deallocPartialClassInstance();
    uint64_t v23 = 0;
    goto LABEL_10;
  }
  v23[2] = v31;
LABEL_10:
  swift_retain();
  os_unfair_lock_lock(v30);
  uint64_t v33 = *(void *)(*(void *)(v21 + 16) + 16);
  char v68 = *(void *)(v21 + 16);
  if (v20 >= v33) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v22 = MEMORY[0x1E4FBC868];
  }
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v32, (uint64_t)v16, type metadata accessor for ICUNumberFormatter.Signature);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v75[0] = *v22;
  unint64_t v27 = v75[0];
  *uint64_t v22 = 0x8000000000000000;
  uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
  uint64_t v36 = *(void *)(v27 + 16);
  uint64_t v37 = (v35 & 1) == 0;
  unsigned int v38 = v36 + v37;
  if (!__OFADD__(v36, v37))
  {
    LOBYTE(v22) = v35;
    if (*(void *)(v27 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      unsigned int v39 = v75[0];
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
      if ((v22 & 1) != (v41 & 1)) {
        goto LABEL_65;
      }
      uint64_t v29 = v40;
      if ((v22 & 1) == 0) {
        goto LABEL_60;
      }
LABEL_20:
      uint64_t v42 = *(void *)(v39 + 56);
      uint64_t v43 = 8 * v29;
      swift_release();
      *(void *)(v42 + v43) = v23;
LABEL_61:
      *(void *)(v21 + 16) = v39;
      swift_bridgeObjectRelease();
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v16, type metadata accessor for ICUNumberFormatter.Signature);
      os_unfair_lock_unlock(v30);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
      uint64_t v18 = v74;
LABEL_62:
      swift_release();
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v18, type metadata accessor for ICUNumberFormatter.Signature);
      return (uint64_t)v23;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unsigned int v39 = v27;
      if (v35) {
        goto LABEL_20;
      }
LABEL_60:
      uint64_t v61 = v72;
      uint64_t v62 = v29;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v16, v72, type metadata accessor for ICUNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v62, v61, (uint64_t)v23, (void *)v39);
      goto LABEL_61;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  char v64 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUNumberFormatter.Signature, ICUNumberFormatter?>);
  unint64_t v44 = static _DictionaryStorage.copy(original:)();
  unsigned int v39 = v44;
  if (!*(void *)(v27 + 16))
  {
LABEL_59:
    swift_bridgeObjectRelease();
    uint64_t v29 = v64;
    if (v22) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
  Swift::String v45 = (char *)(v44 + 64);
  int v46 = 1 << *(unsigned char *)(v39 + 32);
  uint64_t v66 = (char *)(v27 + 64);
  uint64_t v47 = (unint64_t)(v46 + 63) >> 6;
  if (v39 != v27 || v45 >= &v66[8 * v47]) {
    memmove(v45, v66, 8 * v47);
  }
  uint64_t v48 = 0;
  *(void *)(v39 + 16) = *(void *)(v27 + 16);
  uint64_t v49 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v50 = -1;
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  uint64_t v51 = v50 & *(void *)(v27 + 64);
  char v65 = (unint64_t)(v49 + 63) >> 6;
  while (1)
  {
    uint64_t v16 = v73;
    unint64_t v30 = v70;
    if (v51)
    {
      char v67 = (v51 - 1) & v51;
      char v69 = v48;
      uint64_t v52 = __clz(__rbit64(v51)) | (v48 << 6);
      goto LABEL_31;
    }
    uint64_t v57 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v57 >= v65) {
      goto LABEL_59;
    }
    uint64_t v58 = *(void *)&v66[8 * v57];
    uint64_t v59 = v48 + 1;
    if (!v58)
    {
      uint64_t v59 = v48 + 2;
      if (v48 + 2 >= v65) {
        goto LABEL_59;
      }
      uint64_t v58 = *(void *)&v66[8 * v59];
      if (!v58)
      {
        uint64_t v59 = v48 + 3;
        if (v48 + 3 >= v65) {
          goto LABEL_59;
        }
        uint64_t v58 = *(void *)&v66[8 * v59];
        if (!v58)
        {
          uint64_t v59 = v48 + 4;
          if (v48 + 4 >= v65) {
            goto LABEL_59;
          }
          uint64_t v58 = *(void *)&v66[8 * v59];
          if (!v58)
          {
            uint64_t v59 = v48 + 5;
            if (v48 + 5 >= v65) {
              goto LABEL_59;
            }
            uint64_t v58 = *(void *)&v66[8 * v59];
            if (!v58)
            {
              uint64_t v59 = v48 + 6;
              if (v48 + 6 >= v65) {
                goto LABEL_59;
              }
              uint64_t v58 = *(void *)&v66[8 * v59];
              if (!v58)
              {
                uint64_t v59 = v48 + 7;
                if (v48 + 7 >= v65) {
                  goto LABEL_59;
                }
                uint64_t v58 = *(void *)&v66[8 * v59];
                if (!v58)
                {
                  uint64_t v59 = v48 + 8;
                  if (v48 + 8 >= v65) {
                    goto LABEL_59;
                  }
                  uint64_t v58 = *(void *)&v66[8 * v59];
                  if (!v58)
                  {
                    uint64_t v59 = v48 + 9;
                    if (v48 + 9 >= v65) {
                      goto LABEL_59;
                    }
                    uint64_t v58 = *(void *)&v66[8 * v59];
                    if (!v58) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_58:
    char v67 = (v58 - 1) & v58;
    char v69 = v59;
    uint64_t v52 = __clz(__rbit64(v58)) + (v59 << 6);
LABEL_31:
    uint64_t v53 = v72;
    uint64_t v54 = *(void *)(v71 + 72) * v52;
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(*(void *)(v27 + 48) + v54, v72, type metadata accessor for ICUNumberFormatter.Signature);
    uint64_t v55 = 8 * v52;
    uint64_t v56 = *(void *)(*(void *)(v27 + 56) + 8 * v52);
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v53, *(void *)(v39 + 48) + v54, type metadata accessor for ICUNumberFormatter.Signature);
    *(void *)(*(void *)(v39 + 56) + v55) = v56;
    swift_retain();
    uint64_t v48 = v69;
    uint64_t v51 = v67;
  }
  uint64_t v60 = v48 + 10;
  if (v48 + 10 >= v65) {
    goto LABEL_59;
  }
  uint64_t v58 = *(void *)&v66[8 * v60];
  if (v58)
  {
    uint64_t v59 = v48 + 10;
    goto LABEL_58;
  }
  while (1)
  {
    uint64_t v59 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      break;
    }
    uint64_t v16 = v73;
    unint64_t v30 = v70;
    if (v59 >= v65) {
      goto LABEL_59;
    }
    uint64_t v58 = *(void *)&v66[8 * v59];
    ++v60;
    if (v58) {
      goto LABEL_58;
    }
  }
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static ICUCurrencyNumberFormatter.create<A>(for:)(void *a1)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  os_unfair_lock_s **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  os_unfair_lock_s *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_unfair_lock_s *v74;
  char *v75;
  void v76[19];
  void *v77;
  void v78[18];
  unsigned char v79[152];

  uint64_t v2 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  int v70 = *((void *)v2 - 1);
  MEMORY[0x1F4188790](v2);
  uint64_t v71 = (uint64_t)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v75 = (char *)&v65 - v5;
  long long v73 = (uint64_t)a1
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
               + 40);
  uint64_t v6 = a1[3];
  uint64_t v74 = (os_unfair_lock_s *)a1[2];
  uint64_t v72 = v6;
  uint64_t v7 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v10 = v9(ObjectType, v7);
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  swift_unknownObjectRetain();
  v13(v78, ObjectType, v7);
  uint64_t v14 = (uint64_t)v75;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v73, v14, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v15 = (os_unfair_lock_s **)(v14 + v2[5]);
  uint64_t v16 = v72;
  *uint64_t v15 = v74;
  v15[1] = (os_unfair_lock_s *)v16;
  uint64_t v17 = (uint64_t *)(v14 + v2[6]);
  *uint64_t v17 = v10;
  v17[1] = v12;
  uint64_t v72 = (uint64_t)v2;
  uint64_t v18 = v14 + v2[7];
  uint64_t v19 = outlined init with take of LocalePreferences?((uint64_t)v79, v18, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v19 = swift_once();
  }
  uint64_t v20 = (os_unfair_lock_s *)qword_1E8ED9480;
  long long v73 = static ICUCurrencyNumberFormatter.cache;
  MEMORY[0x1F4188790](v19);
  *(&v65 - 2) = v14;
  uint64_t v21 = v20 + 4;
  uint64_t v22 = v20 + 6;
  swift_retain_n();
  os_unfair_lock_lock(v20 + 6);
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v20[4], (uint64_t *)&v77);
  os_unfair_lock_unlock(v20 + 6);
  swift_release();
  uint64_t v23 = v77;
  if (v77 != (void *)1) {
    goto LABEL_51;
  }
  uint64_t v24 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v14);
  unint64_t v26 = v25;
  uint64_t v74 = v20;
  unint64_t v27 = *v17;
  uint64_t v28 = v17[1];
  outlined init with take of LocalePreferences?(v18, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  uint64_t v29 = v27;
  unint64_t v30 = v74;
  uint64_t v23 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v24, v26, v29, v28, (uint64_t)v76);
  swift_retain();
  os_unfair_lock_lock(v22);
  uint64_t v31 = v22;
  if (v73 >= *(void *)(*(void *)&v30[4]._os_unfair_lock_opaque + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)&v21->_os_unfair_lock_opaque = MEMORY[0x1E4FBC868];
  }
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76[0] = *(void *)&v21->_os_unfair_lock_opaque;
  uint64_t v33 = v76[0];
  *(void *)&v21->_os_unfair_lock_opaque = 0x8000000000000000;
  uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  uint64_t v36 = *(void *)(v33 + 16);
  uint64_t v37 = (v34 & 1) == 0;
  unsigned int v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v21) = v34;
    if (*(void *)(v33 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      unsigned int v39 = v76[0];
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      if ((v21 & 1) != (v41 & 1)) {
        goto LABEL_54;
      }
      uint64_t v35 = v40;
      uint64_t v42 = v74;
      if ((v21 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_14:
      uint64_t v43 = *(void *)(v39 + 56);
      unint64_t v44 = 8 * v35;
      swift_release();
      *(void *)(v43 + v44) = v23;
LABEL_50:
      *(void *)&v42[4]._os_unfair_lock_opaque = v39;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v31);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v77);
LABEL_51:
      swift_release();
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v14, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return (uint64_t)v23;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unsigned int v39 = v33;
      uint64_t v42 = v74;
      if (v34) {
        goto LABEL_14;
      }
LABEL_49:
      uint64_t v62 = v71;
      char v63 = v35;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v14, v71, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v63, v62, (uint64_t)v23, (void *)v39);
      goto LABEL_50;
    }
  }
  uint64_t v66 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  Swift::String v45 = static _DictionaryStorage.copy(original:)();
  unsigned int v39 = v45;
  uint64_t v42 = v74;
  if (!*(void *)(v33 + 16))
  {
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v35 = v66;
    if (v21) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
  int v46 = (char *)(v45 + 64);
  uint64_t v47 = 1 << *(unsigned char *)(v39 + 32);
  char v68 = (char *)(v33 + 64);
  char v69 = v22;
  uint64_t v48 = (unint64_t)(v47 + 63) >> 6;
  if (v39 != v33 || v46 >= &v68[8 * v48]) {
    memmove(v46, v68, 8 * v48);
  }
  uint64_t v49 = 0;
  *(void *)(v39 + 16) = *(void *)(v33 + 16);
  uint64_t v50 = 1 << *(unsigned char *)(v33 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  uint64_t v52 = v51 & *(void *)(v33 + 64);
  char v67 = (unint64_t)(v50 + 63) >> 6;
  while (1)
  {
    uint64_t v31 = v69;
    uint64_t v42 = v74;
    if (v52)
    {
      uint64_t v72 = (v52 - 1) & v52;
      long long v73 = v49;
      uint64_t v53 = __clz(__rbit64(v52)) | (v49 << 6);
      goto LABEL_24;
    }
    uint64_t v58 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    uint64_t v14 = (uint64_t)v75;
    if (v58 >= v67) {
      goto LABEL_48;
    }
    uint64_t v59 = *(void *)&v68[8 * v58];
    uint64_t v60 = v49 + 1;
    if (!v59)
    {
      uint64_t v60 = v49 + 2;
      if (v49 + 2 >= v67) {
        goto LABEL_48;
      }
      uint64_t v59 = *(void *)&v68[8 * v60];
      if (!v59)
      {
        uint64_t v60 = v49 + 3;
        if (v49 + 3 >= v67) {
          goto LABEL_48;
        }
        uint64_t v59 = *(void *)&v68[8 * v60];
        if (!v59)
        {
          uint64_t v60 = v49 + 4;
          if (v49 + 4 >= v67) {
            goto LABEL_48;
          }
          uint64_t v59 = *(void *)&v68[8 * v60];
          if (!v59)
          {
            uint64_t v60 = v49 + 5;
            if (v49 + 5 >= v67) {
              goto LABEL_48;
            }
            uint64_t v59 = *(void *)&v68[8 * v60];
            if (!v59)
            {
              uint64_t v60 = v49 + 6;
              if (v49 + 6 >= v67) {
                goto LABEL_48;
              }
              uint64_t v59 = *(void *)&v68[8 * v60];
              if (!v59)
              {
                uint64_t v60 = v49 + 7;
                if (v49 + 7 >= v67) {
                  goto LABEL_48;
                }
                uint64_t v59 = *(void *)&v68[8 * v60];
                if (!v59) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_47:
    uint64_t v72 = (v59 - 1) & v59;
    long long v73 = v60;
    uint64_t v53 = __clz(__rbit64(v59)) + (v60 << 6);
LABEL_24:
    uint64_t v54 = v71;
    uint64_t v55 = *(void *)(v70 + 72) * v53;
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(*(void *)(v33 + 48) + v55, v71, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    uint64_t v56 = 8 * v53;
    uint64_t v57 = *(void *)(*(void *)(v33 + 56) + 8 * v53);
    outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v54, *(void *)(v39 + 48) + v55, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v39 + 56) + v56) = v57;
    swift_retain();
    uint64_t v52 = v72;
    uint64_t v49 = v73;
  }
  uint64_t v61 = v49 + 8;
  if (v49 + 8 >= v67) {
    goto LABEL_48;
  }
  uint64_t v59 = *(void *)&v68[8 * v61];
  if (v59)
  {
    uint64_t v60 = v49 + 8;
    goto LABEL_47;
  }
  while (1)
  {
    uint64_t v60 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      break;
    }
    uint64_t v42 = v74;
    uint64_t v14 = (uint64_t)v75;
    uint64_t v31 = v69;
    if (v60 >= v67) {
      goto LABEL_48;
    }
    uint64_t v59 = *(void *)&v68[8 * v60];
    ++v61;
    if (v59) {
      goto LABEL_47;
    }
  }
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static ICUPercentNumberFormatter.create<A>(for:)(uint64_t a1)
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void v19[18];
  unsigned char v20[152];

  uint64_t v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  uint64_t v3 = v2 - 8;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ICUPercentNumberFormatter();
  uint64_t v17 = a1
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent)
               + 36);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 472);
  swift_unknownObjectRetain();
  uint64_t v9 = v8(ObjectType, v6);
  uint64_t v16 = v10;
  swift_unknownObjectRelease();
  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v11(v19, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v20, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v17, (uint64_t)v5, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v12 = (uint64_t *)&v5[*(int *)(v3 + 28)];
  uint64_t v13 = v16;
  *uint64_t v12 = v9;
  v12[1] = v13;
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v5[*(int *)(v3 + 32)], &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v14 = static ICUPercentNumberFormatter._create(with:)((uint64_t)v5);
  outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v5, type metadata accessor for ICUPercentNumberFormatter.Signature);
  return v14;
}

uint64_t outlined init with copy of String.LocalizationValue.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.Storage(uint64_t a1)
{
  return a1;
}

void specialized IntegerFormatStyle.hash(into:)(uint64_t a1, uint64_t *a2)
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  char *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  uint64_t v55;
  Swift::UInt64 v56;
  Swift::UInt64 v57;
  int v58;
  Swift::UInt v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  Swift::UInt v64;
  int *v65;
  char *v66;
  uint64_t v67;
  int v68;
  Swift::UInt v69;
  Swift::UInt64 v70;
  Swift::UInt v71;
  void *v72;
  id v73;
  uint64_t v74;
  void *v75;
  id v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned char v81[144];
  char v82[8];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;
  char v99;
  void v100[18];
  unsigned char v101[144];
  unsigned char v102[152];

  uint64_t v78 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  long long v79 = v5;
  uint64_t v80 = v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v77 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v100, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)v102, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v102) == 1)
    {
      Swift::UInt8 v14 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)v82, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v82[0] == 2)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = v82[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    uint64_t v19 = v83;
    if (v83)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v19 + 16));
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?((uint64_t)v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        if (!v84)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v85) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v85)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          uint64_t v22 = v86;
          if (!v86) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v22 = v86;
        if (!v86)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v23 = v87;
          if (!v87)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v23);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v25 = v89;
          unint64_t v26 = v90;
          uint64_t v76 = v91;
          unint64_t v27 = v92;
          long long v73 = v88;
          uint64_t v74 = v2;
          uint64_t v72 = v92;
          if (v88)
          {
            uint64_t v28 = v10;
            uint64_t v29 = v88;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            unint64_t v30 = v25;
            uint64_t v31 = v26;
            Swift::String v32 = v76;
            uint64_t v33 = v27;
            uint64_t v34 = v29;
            _CFObject.hash(into:)();
            if (v25)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v35 = v25;
              uint64_t v36 = v26;
              uint64_t v37 = v25;
              _CFObject.hash(into:)();

              unint64_t v26 = v36;
              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            unsigned int v38 = v27;
            unsigned int v39 = v25;
            unint64_t v40 = v26;
            uint64_t v41 = v76;
            uint64_t v28 = v10;
            if (v25) {
              goto LABEL_27;
            }
          }
          uint64_t v35 = v25;
          Hasher._combine(_:)(0);
LABEL_30:
          uint64_t v42 = v72;
          char v75 = v26;
          if (v26)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v43 = v26;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          unint64_t v44 = v35;
          uint64_t v10 = v28;
          uint64_t v3 = v74;
          if (v76)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            Swift::String v45 = v76;
            _CFObject.hash(into:)();

            if (v42)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              int v46 = v42;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v42) {
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          int v46 = 0;
LABEL_38:
          uint64_t v47 = v75;

          uint64_t v48 = v93;
          if (v48)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v48);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v16 = v78;
          uint64_t v49 = v94;
          if (v94)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v49);
            swift_bridgeObjectRelease();
            if (v95)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              uint64_t v17 = v79;
              if (v96 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                uint64_t v50 = v96 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v50);
              }
              if (v97 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                uint64_t v51 = v97 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v51);
              }
              if (v98 == 2)
              {
                uint64_t v52 = 0;
              }
              else
              {
                uint64_t v52 = v98 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v52);
              if (v99 == 2)
              {
                uint64_t v53 = 0;
              }
              else
              {
                uint64_t v54 = v99 & 1;
                Hasher._combine(_:)(1u);
                uint64_t v53 = v54;
              }
              Hasher._combine(_:)(v53);
              outlined retain of LocalePreferences?((uint64_t)v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v95) {
              goto LABEL_43;
            }
          }
          Hasher._combine(_:)(0);
          goto LABEL_46;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v22);
        swift_bridgeObjectRelease();
        uint64_t v23 = v87;
        if (!v87) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v24 = v81;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v24 = v82;
    }
    outlined retain of LocalePreferences(v24);
    if (!v84) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  Swift::UInt8 v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  uint64_t v16 = v78;
  uint64_t v17 = v79;
LABEL_59:
  uint64_t v55 = v3 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v16) + 36);
  if (*(unsigned char *)(v55 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v56 = *(void *)v55;
    Hasher._combine(_:)(1u);
    if ((v56 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v57 = v56;
    }
    else {
      uint64_t v57 = 0;
    }
    Hasher._combine(_:)(v57);
  }
  outlined init with take of LocalePreferences?(v55 + 16, (uint64_t)v102, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v58 = *(unsigned __int8 *)(v55 + 73);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v59 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }
  uint64_t v60 = *(unsigned __int16 *)(v55 + 74);
  uint64_t v61 = v60 | (*(unsigned __int8 *)(v55 + 76) << 16);
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v61 & 1);
    Hasher._combine(_:)((v61 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v61) & 1);
  }
  uint64_t v62 = v80;
  char v63 = *(unsigned __int8 *)(v55 + 77);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v64 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64);
  }
  char v65 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v55 + v65[9], (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v10, 1, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v66 = v77;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v77, v10, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v66, v17);
  }
  char v67 = v55 + v65[10];
  char v68 = *(unsigned __int8 *)(v67 + 8);
  if (v68 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v69 = *(void *)v67;
    Hasher._combine(_:)(1u);
    if (v68)
    {
      Hasher._combine(_:)(1uLL);
      if ((v69 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        int v70 = v69;
      }
      else {
        int v70 = 0;
      }
      Hasher._combine(_:)(v70);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v69);
    }
  }
  uint64_t v71 = *(unsigned __int8 *)(v55 + v65[11]);
  if (v71 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v71);
  }
}

void specialized IntegerFormatStyle.Currency.hash(into:)(uint64_t a1, uint64_t *a2)
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  uint64_t v54;
  Swift::UInt64 v55;
  Swift::UInt64 v56;
  uint64_t v57;
  int v58;
  Swift::UInt v59;
  unint64_t v60;
  unsigned int v61;
  int v62;
  Swift::UInt v63;
  int *v64;
  char *v65;
  uint64_t v66;
  int v67;
  Swift::UInt v68;
  Swift::UInt64 v69;
  Swift::UInt v70;
  void *v71;
  id v72;
  char *v73;
  void *v74;
  id v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned char v80[144];
  char v81[8];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  char v97;
  char v98;
  void v99[18];
  unsigned char v100[144];
  unsigned char v101[152];

  uint64_t v77 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  long long v79 = v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v76 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v99, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v99, (uint64_t)v100, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v101) == 1)
    {
      Swift::UInt8 v14 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v81[0] == 2)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = v81[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    uint64_t v19 = v82;
    if (v82)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v19 + 16));
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        if (!v83)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v84) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v84)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          uint64_t v22 = v85;
          if (!v85) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v22 = v85;
        if (!v85)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v23 = v86;
          if (!v86)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v23);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v25 = v88;
          unint64_t v26 = v89;
          char v75 = v90;
          unint64_t v27 = v91;
          uint64_t v72 = v87;
          long long v73 = v10;
          uint64_t v71 = v91;
          if (v87)
          {
            uint64_t v28 = v87;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v29 = v25;
            unint64_t v30 = v26;
            uint64_t v31 = v75;
            Swift::String v32 = v27;
            uint64_t v33 = v28;
            _CFObject.hash(into:)();
            if (v25)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v34 = v25;
              uint64_t v35 = v26;
              uint64_t v36 = v25;
              _CFObject.hash(into:)();

              unint64_t v26 = v35;
              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v37 = v27;
            unsigned int v38 = v25;
            unsigned int v39 = v26;
            unint64_t v40 = v75;
            if (v25) {
              goto LABEL_27;
            }
          }
          uint64_t v34 = v25;
          Hasher._combine(_:)(0);
LABEL_30:
          uint64_t v41 = v71;
          uint64_t v74 = v26;
          if (v26)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v42 = v26;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v43 = v34;
          uint64_t v10 = v73;
          if (v75)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            unint64_t v44 = v75;
            _CFObject.hash(into:)();

            if (v41)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              Swift::String v45 = v41;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v41) {
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          Swift::String v45 = 0;
LABEL_38:
          int v46 = v74;

          uint64_t v47 = v92;
          if (v47)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v47);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v16 = v77;
          uint64_t v48 = v93;
          if (v93)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v48);
            swift_bridgeObjectRelease();
            if (v94)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              uint64_t v17 = v78;
              if (v95 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                uint64_t v49 = v95 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v49);
              }
              if (v96 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                uint64_t v50 = v96 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v50);
              }
              if (v97 == 2)
              {
                uint64_t v51 = 0;
              }
              else
              {
                uint64_t v51 = v97 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v51);
              if (v98 == 2)
              {
                uint64_t v52 = 0;
              }
              else
              {
                uint64_t v53 = v98 & 1;
                Hasher._combine(_:)(1u);
                uint64_t v52 = v53;
              }
              Hasher._combine(_:)(v52);
              outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v94) {
              goto LABEL_43;
            }
          }
          Hasher._combine(_:)(0);
          goto LABEL_46;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v22);
        swift_bridgeObjectRelease();
        uint64_t v23 = v86;
        if (!v86) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v24 = v80;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v24 = v81;
    }
    outlined retain of LocalePreferences(v24);
    if (!v83) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  Swift::UInt8 v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  uint64_t v16 = v77;
  uint64_t v17 = v78;
LABEL_59:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v54 = v3 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v16) + 40);
  if (*(unsigned char *)(v54 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v55 = *(void *)v54;
    Hasher._combine(_:)(1u);
    if ((v55 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v56 = v55;
    }
    else {
      uint64_t v56 = 0;
    }
    Hasher._combine(_:)(v56);
  }
  uint64_t v57 = v79;
  outlined init with take of LocalePreferences?(v54 + 16, (uint64_t)v101, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v58 = *(unsigned __int8 *)(v54 + 73);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v59 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }
  uint64_t v60 = *(unsigned int *)(v54 + 74);
  if (*(_DWORD *)(v54 + 74) == 2)
  {
    LOBYTE(v61) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v60 & 1);
    Hasher._combine(_:)((v60 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v60) & 1);
    uint64_t v61 = BYTE3(v60) & 1;
  }
  Hasher._combine(_:)(v61);
  uint64_t v62 = *(unsigned __int8 *)(v54 + 78);
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v63 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v63);
  }
  char v64 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v54 + v64[9], (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v10, 1, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v65 = v76;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v76, v10, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v65, v17);
  }
  uint64_t v66 = v54 + v64[10];
  char v67 = *(unsigned __int8 *)(v66 + 8);
  if (v67 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v68 = *(void *)v66;
    Hasher._combine(_:)(1u);
    if (v67)
    {
      Hasher._combine(_:)(1uLL);
      if ((v68 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        char v69 = v68;
      }
      else {
        char v69 = 0;
      }
      Hasher._combine(_:)(v69);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v68);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v54 + v64[11]));
  int v70 = *(unsigned __int8 *)(v54 + v64[12]);
  if (v70 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v70);
  }
}

uint64_t specialized static IntegerFormatStyle.Currency.== infix(_:_:)(long long *a1, long long *a2, uint64_t *a3)
{
  long long v6 = *a1;
  long long v10 = *a2;
  long long v11 = v6;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v11, (uint64_t)&v10) & 1) == 0) {
    return 0;
  }
  BOOL v7 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a3) + 40);

  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + v8, (char *)a2 + v8);
}

uint64_t specialized static String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, v91);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v92);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v91, v93);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v92, v94);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v91, v95);
  switch(_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v95))
  {
    case 1u:
      uint64_t v31 = (unsigned __int8 *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v95);
      int v32 = *v31;
      int v33 = v31[1];
      int v34 = v31[2];
      int v35 = v31[3];
      int v36 = v31[4];
      uint64_t v37 = *((void *)v31 + 1);
      long long v75 = *(_OWORD *)(v31 + 24);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v92, v90);
      if (_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v90) != 1) {
        goto LABEL_31;
      }
      unsigned int v38 = (unsigned __int8 *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v90);
      int v39 = *v38;
      int v40 = v38[1];
      int v41 = v38[2];
      int v42 = v38[3];
      int v43 = v38[4];
      uint64_t v44 = *((void *)v38 + 1);
      long long v45 = *(_OWORD *)(v38 + 24);
      if (v34) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = 58;
      }
      if (v34) {
        unint64_t v47 = 0xE000000000000000;
      }
      else {
        unint64_t v47 = 0xE100000000000000;
      }
      if (v41) {
        uint64_t v48 = 0;
      }
      else {
        uint64_t v48 = 58;
      }
      if (v41) {
        unint64_t v49 = 0xE000000000000000;
      }
      else {
        unint64_t v49 = 0xE100000000000000;
      }
      int v67 = v43;
      uint64_t v69 = v44;
      long long v72 = v45;
      if (v46 == v48 && v47 == v49)
      {
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v66 & 1) == 0) {
          goto LABEL_86;
        }
      }
      long long v83 = v75;
      long long v76 = v72;
      if ((specialized static TimeZone.== infix(_:_:)((uint64_t)&v83, (uint64_t)&v76) & 1) == 0 || v37 != v69) {
        goto LABEL_86;
      }
      if (v36) {
        uint64_t v51 = 2577447;
      }
      else {
        uint64_t v51 = 32;
      }
      if (v36) {
        unint64_t v52 = 0xE300000000000000;
      }
      else {
        unint64_t v52 = 0xE100000000000000;
      }
      if (v67) {
        uint64_t v53 = 2577447;
      }
      else {
        uint64_t v53 = 32;
      }
      if (v67) {
        unint64_t v54 = 0xE300000000000000;
      }
      else {
        unint64_t v54 = 0xE100000000000000;
      }
      if (v51 == v53 && v52 == v54)
      {
        swift_bridgeObjectRelease_n();
        if (v33 != v40) {
          goto LABEL_86;
        }
      }
      else
      {
        char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v55 & 1) == 0 || ((v33 ^ v40)) {
          goto LABEL_86;
        }
      }
      if (v35) {
        uint64_t v56 = 0;
      }
      else {
        uint64_t v56 = 45;
      }
      if (v35) {
        unint64_t v57 = 0xE000000000000000;
      }
      else {
        unint64_t v57 = 0xE100000000000000;
      }
      if (v42) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = 45;
      }
      if (v42) {
        unint64_t v59 = 0xE000000000000000;
      }
      else {
        unint64_t v59 = 0xE100000000000000;
      }
      if (v56 == v58 && v57 == v59)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v60 & 1) == 0) {
          goto LABEL_86;
        }
      }
      if (v32) {
        uint64_t v61 = 0;
      }
      else {
        uint64_t v61 = 58;
      }
      if (v32) {
        unint64_t v62 = 0xE000000000000000;
      }
      else {
        unint64_t v62 = 0xE100000000000000;
      }
      if (v39) {
        uint64_t v63 = 0;
      }
      else {
        uint64_t v63 = 58;
      }
      if (v39) {
        unint64_t v64 = 0xE000000000000000;
      }
      else {
        unint64_t v64 = 0xE100000000000000;
      }
      if (v61 != v63 || v62 != v64)
      {
        char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)((uint64_t)v93);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        if ((v65 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_88;
      }
      swift_bridgeObjectRelease_n();
      outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)((uint64_t)v93);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      char v21 = 1;
      return v21 & 1;
    case 2u:
      uint64_t v12 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v95);
      long long v70 = *(_OWORD *)(v12 + 16);
      long long v73 = *(_OWORD *)v12;
      uint64_t v13 = *(void *)(v12 + 32);
      uint64_t v14 = *(void *)(v12 + 40);
      uint64_t v15 = *(void *)(v12 + 48);
      uint64_t v16 = *(void *)(v12 + 56);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v92, v90);
      if (_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v90) != 2) {
        goto LABEL_31;
      }
      uint64_t v17 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v90);
      uint64_t v18 = *(void *)(v17 + 48);
      uint64_t v19 = *(void *)(v17 + 56);
      long long v83 = v73;
      long long v84 = v70;
      *(void *)&long long v85 = v13;
      *((void *)&v85 + 1) = v14;
      *(void *)&long long v86 = v15;
      *((void *)&v86 + 1) = v16;
      long long v20 = *(_OWORD *)(v17 + 16);
      long long v76 = *(_OWORD *)v17;
      long long v77 = v20;
      long long v78 = *(_OWORD *)(v17 + 32);
      *(void *)&long long v79 = v18;
      *((void *)&v79 + 1) = v19;
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      char v11 = specialized static Date.VerbatimFormatStyle.== infix(_:_:)(&v83, &v76);
      goto LABEL_6;
    case 3u:
      uint64_t v22 = (unsigned __int8 *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v95);
      int v23 = *v22;
      int v24 = v22[1];
      int v25 = v22[2];
      long long v71 = *(_OWORD *)(v22 + 24);
      long long v74 = *(_OWORD *)(v22 + 8);
      uint64_t v26 = *((void *)v22 + 5);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v92, v90);
      if (_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v90) != 3) {
        goto LABEL_31;
      }
      unint64_t v27 = (unsigned __int8 *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v90);
      if (v23 != *v27 || v24 != v27[1] || v25 != v27[2]) {
        goto LABEL_31;
      }
      long long v28 = *(_OWORD *)(v27 + 8);
      long long v68 = *(_OWORD *)(v27 + 24);
      uint64_t v29 = *((void *)v27 + 5);
      long long v83 = v74;
      long long v76 = v28;
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v83, (uint64_t)&v76) & 1) == 0
        || (v83 = v71, long long v76 = v68, (specialized static Calendar.== infix(_:_:)((uint64_t)&v83, (uint64_t)&v76) & 1) == 0))
      {
LABEL_86:
        outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)((uint64_t)v93);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        goto LABEL_32;
      }
      char v30 = specialized static Set.== infix(_:_:)(v26, v29);
      outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)((uint64_t)v93);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      if ((v30 & 1) == 0) {
        goto LABEL_32;
      }
LABEL_88:
      char v21 = 1;
      break;
    default:
      uint64_t v3 = (long long *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v95);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v92, v90);
      if (_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v90))
      {
LABEL_31:
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)((uint64_t)v93);
LABEL_32:
        char v21 = 0;
      }
      else
      {
        uint64_t v4 = (long long *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v90);
        long long v5 = v3[5];
        long long v87 = v3[4];
        long long v88 = v5;
        v89[0] = v3[6];
        *(_OWORD *)((char *)v89 + 10) = *(long long *)((char *)v3 + 106);
        long long v6 = v3[1];
        long long v83 = *v3;
        long long v84 = v6;
        long long v7 = v3[3];
        long long v85 = v3[2];
        long long v86 = v7;
        long long v8 = v4[5];
        long long v80 = v4[4];
        long long v81 = v8;
        v82[0] = v4[6];
        *(_OWORD *)((char *)v82 + 10) = *(long long *)((char *)v4 + 106);
        long long v9 = v4[1];
        long long v76 = *v4;
        long long v77 = v9;
        long long v10 = v4[3];
        long long v78 = v4[2];
        long long v79 = v10;
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        char v11 = specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)&v83, (uint64_t *)&v76);
LABEL_6:
        char v21 = v11;
        outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)((uint64_t)v93);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      }
      break;
  }
  return v21 & 1;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of Any(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Equatable);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v7, (uint64_t)v10);
    uint64_t v3 = v11;
    uint64_t v4 = __swift_project_boxed_opaque_existential_1(v10, v11);
    char v5 = openEquatable #1 <A>(_:) in static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v4, a2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for Equatable?);
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.Storage.== infix(_:_:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v3, (uint64_t)v303);
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v2, (uint64_t)&v304);
  switch(v303[112])
  {
    case 1:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v303, (uint64_t)v302);
      uint64_t v4 = (_OWORD *)v302[0];
      if (v310 != 1)
      {
        swift_release();
LABEL_154:
        outlined destroy of Any?((uint64_t)v303, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.Storage, String.LocalizationValue.FormatArgument.Storage));
        char v178 = 0;
        return v178 & 1;
      }
      long long v5 = v304;
      uint64_t v194 = v302[1];
      long long v6 = *(_OWORD *)(v302[0] + 16);
      long long v7 = *(_OWORD *)(v302[0] + 32);
      long long v373 = *(_OWORD *)(v302[0] + 48);
      v372[1] = v7;
      v372[0] = v6;
      long long v8 = *(_OWORD *)(v302[0] + 16);
      long long v9 = *(_OWORD *)(v302[0] + 32);
      v374[2] = v373;
      v374[1] = v9;
      v374[0] = v8;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v374, (uint64_t)v375);
      outlined retain of Locale((uint64_t)v375);
      uint64_t v10 = BigString.startIndex.getter();
      uint64_t v12 = v11;
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      outlined release of Locale((uint64_t)v372);
      long long v17 = v4[1];
      long long v18 = v4[2];
      long long v371 = v4[3];
      v370[1] = v18;
      v370[0] = v17;
      long long v19 = v4[1];
      long long v20 = v4[2];
      v376[2] = v371;
      v376[1] = v20;
      v376[0] = v19;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v376, (uint64_t)v377);
      outlined retain of Locale((uint64_t)v377);
      uint64_t v21 = BigString.endIndex.getter();
      uint64_t v23 = v22;
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      outlined release of Locale((uint64_t)v370);
      uint64_t v358 = v10;
      uint64_t v359 = v12;
      uint64_t v360 = v14;
      uint64_t v361 = v16;
      uint64_t v362 = v21;
      uint64_t v363 = v23;
      uint64_t v364 = v25;
      uint64_t v365 = v27;
      long long v28 = *(_OWORD *)(v5 + 16);
      long long v29 = *(_OWORD *)(v5 + 32);
      long long v369 = *(_OWORD *)(v5 + 48);
      v368[1] = v29;
      v368[0] = v28;
      long long v30 = *(_OWORD *)(v5 + 16);
      long long v31 = *(_OWORD *)(v5 + 32);
      v378[2] = v369;
      v378[1] = v31;
      v378[0] = v30;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v378, (uint64_t)v379);
      outlined retain of Locale((uint64_t)v379);
      uint64_t v32 = BigString.startIndex.getter();
      uint64_t v34 = v33;
      uint64_t v36 = v35;
      uint64_t v38 = v37;
      outlined release of Locale((uint64_t)v368);
      long long v39 = *(_OWORD *)(v5 + 16);
      long long v40 = *(_OWORD *)(v5 + 32);
      long long v367 = *(_OWORD *)(v5 + 48);
      v366[1] = v40;
      v366[0] = v39;
      long long v41 = *(_OWORD *)(v5 + 16);
      long long v42 = *(_OWORD *)(v5 + 32);
      v380[2] = v367;
      v380[1] = v42;
      v380[0] = v41;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v380, (uint64_t)v381);
      outlined retain of Locale((uint64_t)v381);
      uint64_t v43 = BigString.endIndex.getter();
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      outlined release of Locale((uint64_t)v366);
      uint64_t v350 = v32;
      uint64_t v351 = v34;
      uint64_t v352 = v36;
      uint64_t v353 = v38;
      uint64_t v354 = v43;
      uint64_t v355 = v45;
      uint64_t v356 = v47;
      uint64_t v357 = v49;
      uint64_t v50 = swift_retain();
      AttributedString.Runs.init(_:in:)(v50, __src);
      long long v291 = __src[10];
      long long v292 = __src[11];
      uint64_t v293 = *(void *)&__src[12];
      long long v287 = __src[6];
      long long v288 = __src[7];
      long long v290 = __src[9];
      long long v289 = __src[8];
      long long v283 = __src[2];
      long long v284 = __src[3];
      long long v286 = __src[5];
      long long v285 = __src[4];
      long long v282 = __src[1];
      long long v281 = __src[0];
      uint64_t v51 = swift_retain();
      AttributedString.Runs.init(_:in:)(v51, __src);
      long long v299 = __src[10];
      long long v300 = __src[11];
      uint64_t v301 = *(void *)&__src[12];
      *(_OWORD *)&v295[16] = __src[6];
      long long v296 = __src[7];
      long long v298 = __src[9];
      long long v297 = __src[8];
      *(_OWORD *)&v294[32] = __src[2];
      *(_OWORD *)&v294[48] = __src[3];
      *(_OWORD *)v295 = __src[5];
      *(_OWORD *)&v294[64] = __src[4];
      *(_OWORD *)&v294[16] = __src[1];
      *(_OWORD *)long long v294 = __src[0];
      uint64_t v52 = *(void *)&__src[0];
      uint64_t v214 = v281;
      if ((void)v281 == *(void *)&__src[0]
        && (static BigString.Index.== infix(_:_:)() & 1) != 0
        && (static BigString.Index.== infix(_:_:)() & 1) != 0)
      {
        goto LABEL_159;
      }
      uint64_t v53 = *((void *)&v285 + 1);
      uint64_t v197 = *((void *)&v281 + 1);
      if (__OFSUB__(*((void *)&v285 + 1), *((void *)&v281 + 1))) {
        goto LABEL_186;
      }
      if (__OFSUB__(*(void *)&v294[72], *(void *)&v294[8]))
      {
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
        JUMPOUT(0x181B00A88);
      }
      if (*((void *)&v285 + 1) - *((void *)&v281 + 1) != *(void *)&v294[72] - *(void *)&v294[8]) {
        goto LABEL_164;
      }
      uint64_t v203 = v282;
      uint64_t v204 = v283;
      uint64_t v201 = v284;
      uint64_t v202 = *((void *)&v283 + 1);
      unint64_t v199 = *((void *)&v282 + 1);
      uint64_t v200 = *((void *)&v284 + 1);
      uint64_t v54 = v285;
      uint64_t v55 = *((void *)&v289 + 1);
      long long v56 = v290;
      uint64_t v57 = v291;
      uint64_t v229 = *((void *)&v297 + 1);
      uint64_t v59 = *((void *)&v298 + 1);
      uint64_t v58 = v298;
      uint64_t v60 = v299;
      __src[10] = v299;
      __src[11] = v300;
      *(void *)&__src[12] = v301;
      __src[6] = *(_OWORD *)&v295[16];
      __src[7] = v296;
      __src[9] = v298;
      __src[8] = v297;
      __src[2] = *(_OWORD *)&v294[32];
      __src[3] = *(_OWORD *)&v294[48];
      __src[5] = *(_OWORD *)v295;
      __src[4] = *(_OWORD *)&v294[64];
      __src[1] = *(_OWORD *)&v294[16];
      __src[0] = *(_OWORD *)v294;
      *(_OWORD *)((char *)&__src[12] + 8) = *(_OWORD *)&v294[8];
      *(_OWORD *)((char *)&__src[13] + 8) = *(_OWORD *)&v294[24];
      *(_OWORD *)((char *)&__src[14] + 8) = *(_OWORD *)&v294[40];
      uint64_t v228 = (long long *)(v214 + 16);
      long long v213 = (long long *)(v52 + 16);
      *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)&v294[56];
      outlined retain of AttributedString.Runs((uint64_t)&v281);
      outlined retain of AttributedString.Runs((uint64_t)v294);
      uint64_t v196 = v55;
      uint64_t v61 = v58;
      uint64_t v62 = v229;
      uint64_t v222 = *((void *)&v56 + 1);
      uint64_t v223 = v56;
      uint64_t v195 = v57;
      uint64_t v221 = v57;
      uint64_t v63 = v197;
      uint64_t v198 = v53;
      break;
    case 2:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v303, (uint64_t)__src);
      if (v310 == 2)
      {
        *(_OWORD *)&__dst[32] = __src[2];
        *(_OWORD *)&__dst[48] = __src[3];
        *(_OWORD *)&__dst[64] = __src[4];
        *(_OWORD *)&__dst[80] = __src[5];
        *(_OWORD *)__dst = __src[0];
        *(_OWORD *)&__dst[16] = __src[1];
        *(_OWORD *)&v294[32] = v306;
        *(_OWORD *)&v294[48] = *(_OWORD *)v307;
        *(_OWORD *)&v294[64] = *(_OWORD *)&v307[16];
        *(_OWORD *)v295 = *(_OWORD *)v308;
        *(_OWORD *)long long v294 = v304;
        *(_OWORD *)&v294[16] = v305;
        char v178 = (*(uint64_t (**)(unsigned char *))&__src[1])(v294);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v294);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)__dst);
        goto LABEL_166;
      }
      outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)__src);
      goto LABEL_154;
    case 3:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v303, (uint64_t)__src);
      if (v310 == 3)
      {
        *(_OWORD *)&__dst[32] = __src[2];
        *(_OWORD *)&__dst[48] = __src[3];
        *(_OWORD *)&__dst[64] = __src[4];
        *(_OWORD *)&__dst[80] = __src[5];
        *(_OWORD *)__dst = __src[0];
        *(_OWORD *)&__dst[16] = __src[1];
        *(_OWORD *)&v294[32] = v306;
        *(_OWORD *)&v294[48] = *(_OWORD *)v307;
        *(_OWORD *)&v294[64] = *(_OWORD *)&v307[16];
        *(_OWORD *)v295 = *(_OWORD *)v308;
        *(_OWORD *)long long v294 = v304;
        *(_OWORD *)&v294[16] = v305;
        char v178 = (*(uint64_t (**)(unsigned char *))&__src[1])(v294);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)v294);
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)__dst);
        goto LABEL_166;
      }
      outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)__src);
      goto LABEL_154;
    case 4:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v303, (uint64_t)__src);
      uint64_t v179 = (void *)*((void *)&__src[4] + 1);
      if (v310 == 4)
      {
        uint64_t v180 = *(void **)&v307[24];
        *(_OWORD *)__dst = __src[0];
        *(_OWORD *)&__dst[16] = __src[1];
        *(_OWORD *)&__dst[32] = __src[2];
        *(_OWORD *)&__dst[48] = __src[3];
        *(_OWORD *)&__dst[64] = __src[4];
        *(_OWORD *)&__dst[80] = __src[5];
        *(_OWORD *)&__dst[96] = __src[6];
        *(_OWORD *)long long v294 = v304;
        *(_OWORD *)&v294[16] = v305;
        *(_OWORD *)&v294[32] = v306;
        *(_OWORD *)&v294[56] = *(_OWORD *)&v307[8];
        *(void *)&v294[48] = *(void *)v307;
        *(void *)&v294[72] = *(void *)&v307[24];
        *(_OWORD *)&v295[8] = *(_OWORD *)&v308[8];
        *(void *)v295 = *(void *)v308;
        *(void *)&v295[24] = v309;
        char v178 = static LocalizedStringResource.== infix(_:_:)(__dst, v294);

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_166;
      }

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_154;
    case 5:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v303, (uint64_t)__src);
      long long v245 = __src[1];
      if (v310 != 5)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_154;
      }
      int v181 = BYTE8(__src[0]);
      int v182 = BYTE9(__src[0]);
      int v183 = BYTE8(v304);
      int v184 = BYTE9(v304);
      long long v243 = v305;
      char v185 = specialized static Array<A>.== infix(_:_:)(*(uint64_t *)&__src[0], v304);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v185 & 1) != 0 && v181 == v183 && v182 == v184)
      {
        *(_OWORD *)__dst = v245;
        *(_OWORD *)long long v294 = v243;
        char v178 = specialized static Locale.== infix(_:_:)((uint64_t)__dst, (uint64_t)v294);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_166;
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_165;
    case 6:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v303, (uint64_t)__src);
      if (v310 != 6) {
        goto LABEL_154;
      }
      BOOL v186 = LOBYTE(__src[0]) == v304;
      goto LABEL_146;
    default:
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v303, (uint64_t)__src);
      if (v310)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)__src);
        goto LABEL_154;
      }
      outlined init with take of Any(__src, __dst);
      outlined init with take of Any(&v304, v294);
      uint64_t v187 = *(void *)&__dst[24];
      uint64_t v188 = __swift_project_boxed_opaque_existential_1(__dst, *(uint64_t *)&__dst[24]);
      *((void *)&v282 + 1) = v187;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v281);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v187 - 8) + 16))(boxed_opaque_existential_1, v188, v187);
      uint64_t v190 = *(void *)&v294[24];
      uint64_t v191 = __swift_project_boxed_opaque_existential_1(v294, *(uint64_t *)&v294[24]);
      uint64_t v261 = v190;
      int v192 = __swift_allocate_boxed_opaque_existential_1(&v258);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v190 - 8) + 16))(v192, v191, v190);
      char v178 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)&v281, (uint64_t)&v258);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v258);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v281);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v294);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
      goto LABEL_166;
  }
  while (1)
  {
    uint64_t v230 = v62;
    uint64_t v231 = v54;
    uint64_t v220 = v61;
    uint64_t v211 = v60;
    uint64_t v212 = v59;
    uint64_t v224 = v55;
    if (v63 == v53)
    {
      uint64_t v241 = 0;
      uint64_t v64 = 0;
      uint64_t v225 = v53;
      uint64_t v227 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      uint64_t v244 = 0;
      uint64_t v67 = 0;
      uint64_t v242 = 0;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      goto LABEL_123;
    }
    if (v63 < v197 || v63 >= v53) {
      goto LABEL_175;
    }
    *(_OWORD *)&__dst[160] = v291;
    *(_OWORD *)&__dst[176] = v292;
    *(void *)&__dst[192] = v293;
    *(_OWORD *)&__dst[96] = v287;
    *(_OWORD *)&__dst[112] = v288;
    *(_OWORD *)&__dst[128] = v289;
    *(_OWORD *)&__dst[144] = v290;
    *(_OWORD *)&__dst[32] = v283;
    *(_OWORD *)&__dst[48] = v284;
    *(_OWORD *)&__dst[64] = v285;
    *(_OWORD *)&__dst[80] = v286;
    *(_OWORD *)__dst = v281;
    *(_OWORD *)&__dst[16] = v282;
    uint64_t v247 = v63;
    uint64_t v248 = v203;
    unint64_t v249 = v199;
    uint64_t v250 = v204;
    uint64_t v251 = v202;
    uint64_t v252 = v201;
    uint64_t v253 = v200;
    uint64_t v254 = v54;
    AttributedString.Runs._resolve(_:)(&v247, &v258);
    if (v258 != *(void *)(v214 + 88))
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
    unint64_t v71 = v259;
    uint64_t v72 = v263;
    uint64_t v73 = v264;
    uint64_t v74 = v265;
    uint64_t v75 = v266;
    uint64_t v76 = v63;
    if (v260)
    {
      long long v77 = (void *)(v260 + 24 * ((v259 >> ((4 * *(unsigned char *)(v260 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v78 = v77[3];
      uint64_t v79 = v77[4];
      uint64_t v80 = v77[5];
      outlined retain of AttributedString.Runs((uint64_t)&v281);
      uint64_t v241 = v79;
      swift_bridgeObjectRetain();
      uint64_t v218 = v80;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v81 = *(void *)(v214 + 64);
      outlined retain of AttributedString.Runs((uint64_t)&v281);
      swift_unknownObjectRetain();
      unint64_t v78 = specialized Rope._Node.subscript.getter(v71, v81);
      uint64_t v241 = v82;
      uint64_t v218 = v83;
      swift_unknownObjectRelease();
    }
    uint64_t v85 = v56;
    uint64_t v84 = v196;
    uint64_t v87 = v195;
    uint64_t v86 = *((void *)&v56 + 1);
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t v84 = v72;
      uint64_t v85 = v73;
      uint64_t v86 = v74;
      uint64_t v87 = v75;
    }
    uint64_t v88 = BigString.Index.utf8Offset.getter();
    int64_t v89 = v88 + v78;
    if (__OFADD__(v88, v78)) {
      goto LABEL_177;
    }
    uint64_t v90 = BigString.Index.utf8Offset.getter();
    if (v90 < v89) {
      int64_t v89 = v90;
    }
    long long v91 = *v228;
    long long v92 = *(_OWORD *)(v214 + 32);
    long long v349 = *(_OWORD *)(v214 + 48);
    v348[1] = v92;
    v348[0] = v91;
    long long v93 = *v228;
    long long v94 = *(_OWORD *)(v214 + 32);
    v382[2] = v349;
    v382[1] = v94;
    v382[0] = v93;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v382, (uint64_t)v383);
    outlined retain of Locale((uint64_t)v383);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v348);
    uint64_t v226 = v76;
    uint64_t v95 = v204;
    if (__OFSUB__(v89, BigString.Index.utf8Offset.getter())) {
      goto LABEL_178;
    }
    uint64_t v96 = v85;
    uint64_t v97 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v99 = v98;
    uint64_t v101 = v100;
    uint64_t v103 = v102;
    outlined release of Locale((uint64_t)v311);
    uint64_t v104 = v97;
    uint64_t v242 = v99;
    uint64_t v236 = v96;
    uint64_t v105 = v103;
    uint64_t v227 = v84;
    uint64_t v217 = v86;
    uint64_t v244 = v87;
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_179;
    }
    uint64_t v107 = *(void *)(v214 + 64);
    uint64_t v106 = *(void *)(v214 + 72);
    uint64_t v240 = *(void *)(v214 + 80);
    uint64_t v108 = v203;
    uint64_t v109 = *(void *)(v214 + 88);
    uint64_t v235 = v105;
    uint64_t v237 = v104;
    if (v204 != 1 && v203 == *(void *)(v214 + 88))
    {
      uint64_t v110 = *(void *)(v214 + 72);
      if (v231 == 2)
      {
        unint64_t v111 = v199;
        if (v107)
        {
          outlined retain of AttributedString.Runs((uint64_t)&v281);
          swift_unknownObjectRetain();
          uint64_t v112 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v203, v199, v204, v107, v106, v240);
        }
        else
        {
          swift_retain();
          uint64_t v112 = 0;
        }
        uint64_t v113 = v109;
      }
      else
      {
        outlined retain of AttributedString.Runs((uint64_t)&v281);
        swift_unknownObjectRetain();
        uint64_t v113 = v109;
        uint64_t v112 = BigString.Index.utf8Offset.getter();
        unint64_t v111 = v199;
      }
      goto LABEL_112;
    }
    if (v107) {
      uint64_t v114 = *(void *)(v214 + 72);
    }
    else {
      uint64_t v114 = 0;
    }
    if (v226 < 0 || v114 < v226) {
      goto LABEL_190;
    }
    if (v107 && v226 < v106 && *(_WORD *)(v107 + 16))
    {
      uint64_t v239 = *(void *)(v214 + 72);
      uint64_t v115 = *(unsigned __int8 *)(v107 + 18);
      if (*(unsigned char *)(v107 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v281);
        swift_unknownObjectRetain();
        uint64_t v116 = v226;
        uint64_t v117 = v107;
        while (1)
        {
          unint64_t v119 = *(unsigned __int16 *)(v117 + 16);
          if (*(_WORD *)(v117 + 16))
          {
            uint64_t v120 = *(void *)(v117 + 32);
            BOOL v121 = __OFSUB__(v116, v120);
            uint64_t v122 = v116 - v120;
            if (v121) {
              goto LABEL_169;
            }
            if (__OFADD__(v122, 1)) {
              goto LABEL_170;
            }
            if (v122 + 1 <= 0)
            {
              unint64_t v119 = 0;
              goto LABEL_45;
            }
            if (v119 != 1)
            {
              uint64_t v123 = *(void *)(v117 + 56);
              uint64_t v116 = v122 - v123;
              if (__OFSUB__(v122, v123)) {
                goto LABEL_188;
              }
              if (__OFADD__(v116, 1)) {
                goto LABEL_189;
              }
              if (v116 + 1 < 1)
              {
                unint64_t v119 = 1;
                uint64_t v116 = v122;
                goto LABEL_45;
              }
              if (v119 == 2) {
                goto LABEL_44;
              }
              uint64_t v124 = *(void *)(v117 + 80);
              BOOL v121 = __OFSUB__(v116, v124);
              uint64_t v122 = v116 - v124;
              if (v121) {
                goto LABEL_192;
              }
              if (__OFADD__(v122, 1)) {
                goto LABEL_193;
              }
              if (v122 + 1 < 1)
              {
                unint64_t v119 = 2;
                goto LABEL_45;
              }
              if (v119 != 3)
              {
                uint64_t v125 = 3;
                if (v119 > 3) {
                  uint64_t v125 = *(unsigned __int16 *)(v117 + 16);
                }
                uint64_t v126 = (void *)(v117 + 104);
                uint64_t v127 = 3;
                while (1)
                {
                  if (v125 == v127) {
                    goto LABEL_183;
                  }
                  uint64_t v116 = v122 - *v126;
                  if (__OFSUB__(v122, *v126)) {
                    goto LABEL_184;
                  }
                  if (__OFADD__(v116, 1)) {
                    goto LABEL_185;
                  }
                  if (v116 + 1 < 1) {
                    break;
                  }
                  ++v127;
                  v126 += 3;
                  uint64_t v122 = v116;
                  if (v119 == v127) {
                    goto LABEL_44;
                  }
                }
                unint64_t v119 = v127;
                uint64_t v116 = v122;
                goto LABEL_45;
              }
            }
            uint64_t v116 = v122;
          }
LABEL_44:
          if (v116)
          {
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
            goto LABEL_176;
          }
LABEL_45:
          char v118 = (4 * *(unsigned char *)(v117 + 18) + 8) & 0x3C;
          uint64_t v115 = ((-15 << v118) - 1) & v115 | (v119 << v118);
          uint64_t v95 = *(void *)(v117 + 24 + 24 * v119);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          uint64_t v117 = v95;
          if (!*(unsigned char *)(v95 + 18)) {
            goto LABEL_77;
          }
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v281);
      swift_unknownObjectRetain();
      uint64_t v116 = v226;
      uint64_t v95 = v107;
LABEL_77:
      unint64_t v129 = *(unsigned __int16 *)(v95 + 16);
      if (*(_WORD *)(v95 + 16))
      {
        unint64_t v130 = v116 - 1;
        if (__OFSUB__(v116, 1)) {
          goto LABEL_195;
        }
        if (__OFADD__(v130, 1)) {
          goto LABEL_196;
        }
        if (v116 <= 0)
        {
          unint64_t v129 = 0;
        }
        else
        {
          if (v129 == 1) {
            goto LABEL_103;
          }
          BOOL v121 = __OFSUB__(v130, 1);
          unint64_t v130 = v116 - 2;
          if (v121) {
            goto LABEL_199;
          }
          if (__OFADD__(v130, 1)) {
            goto LABEL_200;
          }
          if (v116 - 1 < 1)
          {
            unint64_t v129 = 1;
          }
          else
          {
            if (v129 == 2) {
              goto LABEL_103;
            }
            BOOL v121 = __OFSUB__(v130, 1);
            unint64_t v130 = v116 - 3;
            if (v121) {
              goto LABEL_201;
            }
            if (__OFADD__(v130, 1)) {
              goto LABEL_202;
            }
            if (v116 - 2 < 1)
            {
              unint64_t v129 = 2;
            }
            else
            {
              if (v129 == 3) {
                goto LABEL_103;
              }
              uint64_t v131 = 0;
              uint64_t v132 = 3;
              if (v129 > 3) {
                uint64_t v132 = *(unsigned __int16 *)(v95 + 16);
              }
              unint64_t v133 = v132 - 3;
              if (v130 >= v129 - 4) {
                unint64_t v134 = v129 - 4;
              }
              else {
                unint64_t v134 = v116 - 3;
              }
              if (v134 >= v116 + 0x7FFFFFFFFFFFFFFDLL) {
                unint64_t v134 = v116 + 0x7FFFFFFFFFFFFFFDLL;
              }
              while (1)
              {
                if (v133 <= v134) {
                  goto LABEL_197;
                }
                if (v116 + 0x7FFFFFFFFFFFFFFDLL == v131) {
                  goto LABEL_198;
                }
                if (v130 == v131) {
                  break;
                }
                if (v129 - 3 == ++v131)
                {
                  v130 -= v131;
                  goto LABEL_103;
                }
              }
              unint64_t v129 = v116;
            }
          }
        }
      }
      else
      {
        unint64_t v130 = v116;
LABEL_103:
        if (v130) {
          goto LABEL_194;
        }
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v111 = v115 & 0xFFFFFFFFFFFFF0FFLL | (v129 << 8);
      uint64_t v106 = v239;
    }
    else
    {
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v281);
      unint64_t v128 = swift_unknownObjectRetain();
      unint64_t v111 = specialized Rope._endPath.getter(v128);
      swift_unknownObjectRelease();
      uint64_t v95 = 0;
      if (!v107)
      {
        uint64_t v110 = v106;
        uint64_t v112 = 0;
        uint64_t v113 = v109;
        goto LABEL_111;
      }
    }
    swift_unknownObjectRetain();
    uint64_t v113 = v109;
    uint64_t v110 = v106;
    uint64_t v112 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v109, v111, v95, v107, v106, v240);
    swift_unknownObjectRelease_n();
LABEL_111:
    uint64_t v108 = v109;
LABEL_112:
    *(void *)__dst = v108;
    *(void *)&__dst[8] = v111;
    *(void *)&__dst[16] = v95;
    if (__OFADD__(v226, 1)) {
      goto LABEL_180;
    }
    if (v108 != v113) {
      goto LABEL_181;
    }
    if (v95)
    {
      unint64_t v135 = *(void *)(v95 + 24 * ((v111 >> ((4 * *(unsigned char *)(v95 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v135 = specialized Rope._Node.subscript.getter(v111, v107);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v121 = __OFADD__(v112, v135);
    unint64_t v136 = v112 + v135;
    if (v121) {
      goto LABEL_182;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(__dst, v107, v110, v240, v109);
    swift_unknownObjectRelease_n();
    unint64_t v199 = *(void *)&__dst[8];
    uint64_t v203 = *(void *)__dst;
    uint64_t v204 = *(void *)&__dst[16];
    uint64_t v225 = v226 + 1;
    if (v231 == 2)
    {
      long long v137 = *v228;
      long long v138 = *(_OWORD *)(v214 + 32);
      long long v347 = *(_OWORD *)(v214 + 48);
      v346[1] = v138;
      v346[0] = v137;
      long long v139 = *v228;
      long long v140 = *(_OWORD *)(v214 + 32);
      v384[2] = v347;
      v384[1] = v140;
      v384[0] = v139;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v384, (uint64_t)v385);
      outlined retain of Locale((uint64_t)v385);
      uint64_t v141 = &v313;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v346);
      long long v142 = *v228;
      long long v143 = *(_OWORD *)(v214 + 32);
      long long v345 = *(_OWORD *)(v214 + 48);
      v344[1] = v143;
      v344[0] = v142;
      long long v144 = *v228;
      long long v145 = *(_OWORD *)(v214 + 32);
      v386[2] = v345;
      v386[1] = v145;
      v386[0] = v144;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v386, (uint64_t)v387);
      outlined retain of Locale((uint64_t)v387);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v344);
    }
    else
    {
      long long v146 = *v228;
      long long v147 = *(_OWORD *)(v214 + 32);
      long long v343 = *(_OWORD *)(v214 + 48);
      v342[1] = v147;
      v342[0] = v146;
      long long v148 = *v228;
      long long v149 = *(_OWORD *)(v214 + 32);
      v388[2] = v343;
      v388[1] = v149;
      v388[0] = v148;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v388, (uint64_t)v389);
      outlined retain of Locale((uint64_t)v389);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v342);
      if (__OFSUB__(v136, BigString.Index.utf8Offset.getter())) {
        goto LABEL_191;
      }
      uint64_t v141 = &v312;
    }
    uint64_t v150 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v201 = v151;
    uint64_t v202 = v150;
    uint64_t v200 = v152;
    uint64_t v231 = v153;
    uint64_t v68 = v235;
    uint64_t v70 = v101;
    outlined release of Locale((uint64_t)v141);
    outlined release of AttributedString.Runs((uint64_t)&v281);
    uint64_t v69 = v214;
    uint64_t v66 = v217;
    uint64_t v64 = v218;
    uint64_t v65 = v236;
    uint64_t v67 = v237;
LABEL_123:
    specialized IndexingIterator.next()((uint64_t)&v247);
    uint64_t v154 = v247;
    uint64_t v258 = v241;
    unint64_t v259 = v64;
    uint64_t v260 = v227;
    uint64_t v261 = v65;
    uint64_t v262 = v66;
    uint64_t v263 = v244;
    uint64_t v264 = v67;
    uint64_t v265 = v242;
    uint64_t v266 = v70;
    uint64_t v267 = v68;
    uint64_t v268 = v69;
    uint64_t v269 = v247;
    uint64_t v238 = v248;
    uint64_t v270 = v248;
    unint64_t v271 = v249;
    uint64_t v272 = v250;
    uint64_t v273 = v251;
    uint64_t v274 = v252;
    uint64_t v275 = v253;
    uint64_t v276 = v254;
    uint64_t v277 = v255;
    uint64_t v278 = v256;
    uint64_t v279 = v257;
    if (!v241) {
      break;
    }
    if (!v247) {
      goto LABEL_162;
    }
    outlined copy of AttributedString.Runs.Run?(v241);
    outlined copy of AttributedString.Runs.Run?(v154);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Dictionary<>.== infix(_:_:)(v241, v154) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_161:
      outlined consume of AttributedString.Runs.Run?(v241);
      outlined consume of AttributedString.Runs.Run?(v154);
      goto LABEL_162;
    }
    char v155 = specialized static Set.== infix(_:_:)(v64, v238);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v155 & 1) == 0) {
      goto LABEL_161;
    }
    long long v156 = *v228;
    long long v157 = *(_OWORD *)(v214 + 32);
    long long v341 = *(_OWORD *)(v214 + 48);
    v340[1] = v157;
    v340[0] = v156;
    long long v158 = *v228;
    long long v159 = *(_OWORD *)(v214 + 32);
    v390[2] = v341;
    v390[1] = v159;
    v390[0] = v158;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v390, (uint64_t)v391);
    outlined retain of Locale((uint64_t)v391);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v340);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v232 = BigString.Index.utf8Offset.getter();
    uint64_t v219 = BigString.Index.utf8Offset.getter();
    outlined consume of AttributedString.Runs.Run?(v241);
    if (__OFSUB__(v219, v232)) {
      goto LABEL_171;
    }
    uint64_t v215 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v216 = v160;
    uint64_t v207 = v162;
    uint64_t v208 = v161;
    outlined release of Locale((uint64_t)v314);
    long long v163 = *v213;
    long long v164 = v213[1];
    long long v339 = v213[2];
    v338[1] = v164;
    v338[0] = v163;
    long long v165 = *v213;
    long long v166 = v213[1];
    v392[2] = v339;
    v392[1] = v166;
    v392[0] = v165;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v392, (uint64_t)v393);
    outlined retain of Locale((uint64_t)v393);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v338);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v233 = BigString.Index.utf8Offset.getter();
    uint64_t v209 = BigString.Index.utf8Offset.getter();
    outlined consume of AttributedString.Runs.Run?(v154);
    if (__OFSUB__(v209, v233)) {
      goto LABEL_172;
    }
    uint64_t v234 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v205 = v167;
    uint64_t v206 = v168;
    uint64_t v210 = v169;
    outlined release of Locale((uint64_t)v315);
    long long v170 = *v228;
    long long v171 = *(_OWORD *)(v214 + 32);
    long long v337 = *(_OWORD *)(v214 + 48);
    v336[1] = v171;
    v336[0] = v170;
    long long v172 = *v228;
    long long v173 = *(_OWORD *)(v214 + 32);
    v394[2] = v337;
    v394[1] = v173;
    v394[0] = v172;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v394, (uint64_t)v395);
    outlined retain of Locale((uint64_t)v395);
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_173;
    }
    uint64_t v328 = v224;
    uint64_t v329 = v223;
    uint64_t v330 = v222;
    uint64_t v331 = v221;
    uint64_t v332 = v215;
    uint64_t v333 = v216;
    uint64_t v334 = v208;
    uint64_t v335 = v207;
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v336);
    long long v174 = *v213;
    long long v175 = v213[1];
    long long v327 = v213[2];
    v326[1] = v175;
    v326[0] = v174;
    long long v176 = *v213;
    v396[1] = v213[1];
    v396[2] = v327;
    v396[0] = v176;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v396, (uint64_t)v397);
    outlined retain of Locale((uint64_t)v397);
    uint64_t v60 = v210;
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_174;
    }
    uint64_t v318 = v230;
    uint64_t v319 = v220;
    uint64_t v320 = v212;
    uint64_t v321 = v211;
    uint64_t v322 = v234;
    uint64_t v323 = v205;
    uint64_t v324 = v206;
    uint64_t v325 = v210;
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v326);
    char v177 = MEMORY[0x185301310](v316, v317);
    outlined consume of AttributedString.Runs.Run?(v241);
    outlined consume of AttributedString.Runs.Run?(v154);
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v258);
    outlined release of Locale((uint64_t)v317);
    outlined release of Locale((uint64_t)v316);
    if ((v177 & 1) == 0) {
      goto LABEL_163;
    }
    uint64_t v54 = v231;
    uint64_t v62 = v234;
    uint64_t v61 = v205;
    uint64_t v59 = v206;
    uint64_t v55 = v215;
    uint64_t v222 = v208;
    uint64_t v223 = v216;
    uint64_t v221 = v207;
    uint64_t v53 = v198;
    uint64_t v63 = v225;
  }
  if (v247)
  {
LABEL_162:
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v258);
LABEL_163:
    memcpy(__dst, __src, sizeof(__dst));
    outlined release of AttributedString.Runs((uint64_t)__dst);
    outlined release of AttributedString.Runs((uint64_t)&v281);
LABEL_164:
    outlined release of AttributedString.Runs((uint64_t)v294);
    outlined release of AttributedString.Runs((uint64_t)&v281);
    swift_release();
    swift_release();
LABEL_165:
    char v178 = 0;
    goto LABEL_166;
  }
  outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v258);
  memcpy(__dst, __src, sizeof(__dst));
  outlined release of AttributedString.Runs((uint64_t)__dst);
  outlined release of AttributedString.Runs((uint64_t)&v281);
LABEL_159:
  outlined release of AttributedString.Runs((uint64_t)v294);
  outlined release of AttributedString.Runs((uint64_t)&v281);
  swift_release();
  swift_release();
  BOOL v186 = v194 == *((void *)&v5 + 1);
LABEL_146:
  char v178 = v186;
LABEL_166:
  outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v303);
  return v178 & 1;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.CodableStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v560 = a2;
  *(void *)&long long v559 = a1;
  v520 = 0;
  uint64_t v646 = *MEMORY[0x1E4F143B8];
  v515 = (char *)v576 + 4;
  v516 = (char *)v577 + 4;
  uint64_t v4 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v543 = (uint64_t)&v515 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v544 = (uint64_t)&v515 - v7;
  uint64_t v521 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1F4188790](v521);
  v527 = (long long *)((char *)&v515 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1F4188790](v9 - 8);
  v526 = (long long *)((char *)&v515 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1F4188790](v518);
  v523 = (long long *)((char *)&v515 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v538 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v538);
  v533 = (long long *)((char *)&v515 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  v531 = (long long *)((char *)&v515 - v14);
  MEMORY[0x1F4188790](v15);
  v532 = (long long *)((char *)&v515 - v16);
  uint64_t v537 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  MEMORY[0x1F4188790](v537);
  uint64_t v539 = (uint64_t)&v515 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v542 = (uint64_t)&v515 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  *(void *)&long long v557 = (char *)&v515 - v21;
  uint64_t v519 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1F4188790](v519);
  v525 = (long long *)((char *)&v515 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1F4188790](v23 - 8);
  v524 = (long long *)((char *)&v515 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v517 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1F4188790](v517);
  v522 = (long long *)((char *)&v515 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v535 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v535);
  v530 = (long long *)((char *)&v515 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v27);
  v528 = (long long *)((char *)&v515 - v28);
  MEMORY[0x1F4188790](v29);
  v529 = (long long *)((char *)&v515 - v30);
  uint64_t v534 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  MEMORY[0x1F4188790](v534);
  uint64_t v536 = (uint64_t)&v515 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v32 - 8);
  v540 = (long long *)((char *)&v515 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v34);
  uint64_t v541 = (uint64_t)&v515 - v35;
  *(void *)&long long v558 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  MEMORY[0x1F4188790](v558);
  *(void *)&long long v556 = (char *)&v515 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37);
  uint64_t v554 = (uint64_t)&v515 - v38;
  MEMORY[0x1F4188790](v39);
  *(void *)&long long v555 = (char *)&v515 - v40;
  MEMORY[0x1F4188790](v41);
  v553 = (long long *)((char *)&v515 - v42);
  MEMORY[0x1F4188790](v43);
  v552 = (uint64_t *)((char *)&v515 - v44);
  MEMORY[0x1F4188790](v45);
  *(void *)&long long v551 = (char *)&v515 - v46;
  MEMORY[0x1F4188790](v47);
  *(void *)&long long v550 = (char *)&v515 - v48;
  MEMORY[0x1F4188790](v49);
  *(void *)&long long v549 = (char *)&v515 - v50;
  MEMORY[0x1F4188790](v51);
  v548 = (double *)((char *)&v515 - v52);
  MEMORY[0x1F4188790](v53);
  v546 = (uint64_t *)((char *)&v515 - v54);
  MEMORY[0x1F4188790](v55);
  v547 = (double *)((char *)&v515 - v56);
  MEMORY[0x1F4188790](v57);
  v545 = (double *)((char *)&v515 - v58);
  MEMORY[0x1F4188790](v59);
  uint64_t v61 = (float *)((char *)&v515 - v60);
  MEMORY[0x1F4188790](v62);
  uint64_t v64 = (uint64_t *)((char *)&v515 - v63);
  MEMORY[0x1F4188790](v65);
  uint64_t v67 = (int *)((char *)&v515 - v66);
  MEMORY[0x1F4188790](v68);
  uint64_t v70 = (uint64_t *)((char *)&v515 - v69);
  MEMORY[0x1F4188790](v71);
  uint64_t v73 = (int *)((char *)&v515 - v72);
  MEMORY[0x1F4188790](v74);
  uint64_t v76 = (uint64_t *)((char *)&v515 - v75);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.CodableStorage, String.LocalizationValue.FormatArgument.CodableStorage));
  MEMORY[0x1F4188790](v77 - 8);
  uint64_t v79 = (char *)&v515 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = (uint64_t)&v79[*(int *)(v80 + 56)];
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v559, (uint64_t)v79, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  uint64_t v82 = v560;
  *(void *)&long long v560 = v81;
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v82, v81, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v73, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v237 = (int *)v560;
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_114;
      }
      int v238 = *v73;
      goto LABEL_63;
    case 2u:
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v70, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v127 = (void *)v560;
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_114;
      }
      uint64_t v128 = *v70;
      goto LABEL_32;
    case 3u:
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v67, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v237 = (int *)v560;
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_114;
      }
      int v238 = *v67;
LABEL_63:
      int v239 = *v237;
      goto LABEL_66;
    case 4u:
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v64, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v127 = (void *)v560;
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_114;
      }
      uint64_t v128 = *v64;
LABEL_32:
      BOOL v157 = v128 == *v127;
      goto LABEL_78;
    case 5u:
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v61, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v242 = (float *)v560;
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_114;
      }
      BOOL v157 = *v61 == *v242;
      goto LABEL_78;
    case 6u:
      char v155 = v545;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v545, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      long long v156 = (double *)v560;
      if (swift_getEnumCaseMultiPayload() == 6) {
        goto LABEL_77;
      }
      goto LABEL_114;
    case 7u:
      char v155 = v547;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v547, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      long long v156 = (double *)v560;
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_114;
      }
      goto LABEL_77;
    case 8u:
      v368 = v546;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v546, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v370 = *v368;
      uint64_t v369 = v368[1];
      long long v371 = (uint64_t *)v560;
      if (swift_getEnumCaseMultiPayload() != 8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_114;
      }
      uint64_t v372 = *v371;
      uint64_t v373 = v371[1];
      if (v370 == v372 && v369 == v373)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_166;
      }
      char v388 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v388 & 1) == 0) {
        goto LABEL_179;
      }
      goto LABEL_166;
    case 9u:
      char v155 = v548;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v548, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      long long v156 = (double *)v560;
      if (swift_getEnumCaseMultiPayload() != 9) {
        goto LABEL_114;
      }
LABEL_77:
      BOOL v157 = *v155 == *v156;
      goto LABEL_78;
    case 0xAu:
      uint64_t v258 = (void *)v549;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, v549, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v260 = (_OWORD *)*v258;
      uint64_t v259 = v258[1];
      uint64_t v261 = v560;
      if (swift_getEnumCaseMultiPayload() != 10)
      {
        swift_release();
LABEL_114:
        outlined destroy of Any?((uint64_t)v79, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.CodableStorage, String.LocalizationValue.FormatArgument.CodableStorage));
LABEL_115:
        char v126 = 0;
        return v126 & 1;
      }
      *(void *)&long long v559 = v79;
      uint64_t v262 = *(_OWORD **)v261;
      v516 = *(char **)(v261 + 8);
      uint64_t v517 = v259;
      long long v263 = v260[1];
      long long v264 = v260[2];
      long long v629 = v260[3];
      v628[1] = v264;
      v628[0] = v263;
      long long v265 = v260[1];
      long long v266 = v260[2];
      v630[2] = v629;
      v630[1] = v266;
      v630[0] = v265;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v630, (uint64_t)v631);
      outlined retain of Locale((uint64_t)v631);
      *(void *)&long long v560 = BigString.startIndex.getter();
      *(void *)&long long v558 = v267;
      uint64_t v269 = v268;
      uint64_t v271 = v270;
      outlined release of Locale((uint64_t)v628);
      long long v272 = v260[1];
      v626[1] = v260[2];
      long long v627 = v260[3];
      v626[0] = v272;
      long long v273 = v260[1];
      long long v274 = v260[2];
      v632[2] = v627;
      v632[1] = v274;
      v632[0] = v273;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v632, (uint64_t)v633);
      outlined retain of Locale((uint64_t)v633);
      uint64_t v275 = BigString.endIndex.getter();
      uint64_t v277 = v276;
      uint64_t v279 = v278;
      uint64_t v280 = (uint64_t)v260;
      uint64_t v282 = v281;
      outlined release of Locale((uint64_t)v626);
      uint64_t v614 = v560;
      uint64_t v615 = v558;
      uint64_t v616 = v269;
      uint64_t v617 = v271;
      uint64_t v618 = v275;
      uint64_t v619 = v277;
      uint64_t v620 = v279;
      uint64_t v621 = v282;
      long long v283 = v262[1];
      long long v284 = v262[2];
      long long v625 = v262[3];
      v624[1] = v284;
      v624[0] = v283;
      long long v285 = v262[1];
      long long v286 = v262[2];
      v634[2] = v625;
      v634[1] = v286;
      v634[0] = v285;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v634, (uint64_t)v635);
      outlined retain of Locale((uint64_t)v635);
      *(void *)&long long v560 = BigString.startIndex.getter();
      *(void *)&long long v558 = v287;
      uint64_t v289 = v288;
      uint64_t v291 = v290;
      outlined release of Locale((uint64_t)v624);
      long long v292 = v262[1];
      v622[1] = v262[2];
      long long v623 = v262[3];
      v622[0] = v292;
      long long v293 = v262[1];
      long long v294 = v262[2];
      v636[2] = v623;
      v636[1] = v294;
      v636[0] = v293;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v636, (uint64_t)v637);
      outlined retain of Locale((uint64_t)v637);
      uint64_t v295 = BigString.endIndex.getter();
      uint64_t v297 = v296;
      uint64_t v299 = v298;
      uint64_t v301 = v300;
      outlined release of Locale((uint64_t)v622);
      uint64_t v606 = v560;
      uint64_t v607 = v558;
      uint64_t v608 = v289;
      uint64_t v609 = v291;
      uint64_t v610 = v295;
      uint64_t v611 = v297;
      uint64_t v612 = v299;
      uint64_t v613 = v301;
      uint64_t v302 = swift_retain();
      uint64_t v518 = v280;
      AttributedString.Runs.init(_:in:)(v302, v578);
      uint64_t v303 = swift_retain();
      uint64_t v519 = (uint64_t)v262;
      AttributedString.Runs.init(_:in:)(v303, v584);
      uint64_t v304 = *(void *)&v578[0];
      v305._rawValue = *(void **)&v584[0];
      if (*(void *)&v578[0] == *(void *)&v584[0])
      {
        *(void *)&long long v560 = *((void *)&v581 + 1);
        uint64_t v262 = (_OWORD *)v582;
        uint64_t v280 = v583;
        if (static BigString.Index.== infix(_:_:)() & 1) != 0 && (static BigString.Index.== infix(_:_:)())
        {
LABEL_151:
          outlined release of AttributedString.Runs((uint64_t)v584);
          outlined release of AttributedString.Runs((uint64_t)v578);
          swift_release();
          swift_release();
          char v126 = v517 == (void)v516;
          goto LABEL_118;
        }
      }
      if (__OFSUB__(*((void *)&v578[4] + 1), *((void *)&v578[0] + 1)))
      {
        __break(1u);
        goto LABEL_309;
      }
      uint64_t v262 = (_OWORD *)v559;
      if (__OFSUB__(*((void *)&v584[4] + 1), *((void *)&v584[0] + 1)))
      {
LABEL_309:
        __break(1u);
        goto LABEL_310;
      }
      if (*((void *)&v578[4] + 1) - *((void *)&v578[0] + 1) != *((void *)&v584[4] + 1)
                                                                  - *((void *)&v584[0] + 1))
      {
        outlined release of AttributedString.Runs((uint64_t)v584);
        outlined release of AttributedString.Runs((uint64_t)v578);
        swift_release();
        swift_release();
LABEL_156:
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v262, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
        goto LABEL_115;
      }
      uint64_t v539 = *((void *)&v580 + 1);
      v540 = (long long *)*((void *)&v579 + 1);
      uint64_t v537 = v580;
      uint64_t v538 = v581;
      uint64_t v534 = v586;
      uint64_t v535 = *((void *)&v585 + 1);
      uint64_t v536 = *((void *)&v586 + 1);
      v533 = (long long *)v587;
      v577[10] = v581;
      v577[11] = v582;
      *(void *)&v577[12] = v583;
      v577[6] = v578[6];
      v577[7] = v578[7];
      v577[8] = v579;
      v577[9] = v580;
      v577[2] = v578[2];
      v577[3] = v578[3];
      v577[4] = v578[4];
      v577[5] = v578[5];
      v577[0] = v578[0];
      v577[1] = v578[1];
      *(long long *)((char *)&v577[12] + 8) = *(_OWORD *)((char *)v578 + 8);
      *(long long *)((char *)&v577[13] + 8) = *(_OWORD *)((char *)&v578[1] + 8);
      *(long long *)((char *)&v577[14] + 8) = *(_OWORD *)((char *)&v578[2] + 8);
      *(long long *)((char *)&v577[15] + 8) = *(_OWORD *)((char *)&v578[3] + 8);
      v576[10] = v587;
      v576[11] = v588;
      *(void *)&v576[12] = v589;
      v576[6] = v584[6];
      v576[7] = v584[7];
      v576[8] = v585;
      v576[9] = v586;
      v576[2] = v584[2];
      v576[3] = v584[3];
      v576[4] = v584[4];
      v576[5] = v584[5];
      v576[0] = v584[0];
      v576[1] = v584[1];
      *(long long *)((char *)&v576[12] + 8) = *(_OWORD *)((char *)v584 + 8);
      *(long long *)((char *)&v576[13] + 8) = *(_OWORD *)((char *)&v584[1] + 8);
      *(long long *)((char *)&v576[14] + 8) = *(_OWORD *)((char *)&v584[2] + 8);
      v524 = (long long *)((char *)v305._rawValue + 16);
      v525 = (long long *)(v304 + 16);
      *(long long *)((char *)&v576[15] + 8) = *(_OWORD *)((char *)&v584[3] + 8);
      outlined retain of AttributedString.Runs((uint64_t)v578);
      outlined retain of AttributedString.Runs((uint64_t)v584);
      while (1)
      {
        specialized IndexingIterator.next()((uint64_t)v574);
        uint64_t v541 = v574[0];
        uint64_t v306 = v574[1];
        uint64_t v307 = v574[2];
        v308 = (long long *)v574[3];
        uint64_t v309 = v574[4];
        uint64_t v310 = v574[5];
        uint64_t v311 = v574[6];
        uint64_t v312 = v574[7];
        *(void *)&long long v558 = v574[8];
        uint64_t v313 = v574[9];
        *(void *)&long long v557 = v574[10];
        specialized IndexingIterator.next()((uint64_t)&v563);
        uint64_t v314 = v569;
        v575[0] = v541;
        v545 = (double *)v306;
        v546 = (uint64_t *)v309;
        v575[1] = v306;
        uint64_t v315 = v541;
        v552 = (uint64_t *)v307;
        v553 = v308;
        v575[2] = v307;
        v575[3] = (uint64_t)v308;
        v575[4] = v309;
        uint64_t v554 = v310;
        *(void *)&long long v555 = v311;
        v575[5] = v310;
        v575[6] = v311;
        *(void *)&long long v556 = v312;
        v575[7] = v312;
        uint64_t v316 = v563;
        v575[8] = v558;
        *(void *)&long long v551 = v313;
        v575[9] = v313;
        v575[10] = v557;
        v575[11] = v563;
        v575[12] = v564;
        *(void *)&long long v560 = v565;
        v575[13] = v565;
        v575[14] = v566;
        v575[15] = v567;
        v575[16] = v568;
        v575[17] = v569;
        *(void *)&long long v550 = v570;
        v575[18] = v570;
        v548 = (double *)v572;
        *(void *)&long long v549 = v571;
        v575[19] = v571;
        v575[20] = v572;
        v547 = (double *)v573;
        v575[21] = v573;
        if (!v541)
        {
          if (!v563)
          {
            outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(v575);
            memcpy(v561, v576, sizeof(v561));
            outlined release of AttributedString.Runs((uint64_t)v561);
            memcpy(v562, v577, sizeof(v562));
            outlined release of AttributedString.Runs((uint64_t)v562);
            goto LABEL_151;
          }
LABEL_154:
          outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(v575);
LABEL_155:
          memcpy(v561, v576, sizeof(v561));
          outlined release of AttributedString.Runs((uint64_t)v561);
          memcpy(v562, v577, sizeof(v562));
          outlined release of AttributedString.Runs((uint64_t)v562);
          outlined release of AttributedString.Runs((uint64_t)v584);
          outlined release of AttributedString.Runs((uint64_t)v578);
          swift_release();
          swift_release();
          uint64_t v262 = (_OWORD *)v559;
          goto LABEL_156;
        }
        if (!v563) {
          goto LABEL_154;
        }
        uint64_t v317 = v568;
        uint64_t v318 = v567;
        uint64_t v319 = v566;
        uint64_t v320 = v564;
        uint64_t v321 = (uint64_t)v545;
        outlined copy of AttributedString.Runs.Run?(v541);
        v531 = (long long *)v317;
        v532 = (long long *)v314;
        outlined copy of AttributedString.Runs.Run?(v316);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v322 = specialized static Dictionary<>.== infix(_:_:)(v315, v316);
        uint64_t v544 = v320;
        if ((v322 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_153:
          outlined consume of AttributedString.Runs.Run?(v315);
          outlined consume of AttributedString.Runs.Run?(v316);
          goto LABEL_154;
        }
        char v323 = specialized static Set.== infix(_:_:)(v321, v320);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v323 & 1) == 0) {
          goto LABEL_153;
        }
        v529 = (long long *)v319;
        v530 = (long long *)v318;
        v528 = (long long *)v316;
        long long v324 = *v525;
        long long v325 = v525[2];
        v605[1] = v525[1];
        v605[2] = v325;
        v605[0] = v324;
        long long v326 = *v525;
        long long v327 = v525[1];
        v638[2] = v325;
        v638[1] = v327;
        v638[0] = v326;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v638, (uint64_t)v639);
        outlined retain of Locale((uint64_t)v639);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v605);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v543 = BigString.Index.utf8Offset.getter();
        uint64_t v328 = BigString.Index.utf8Offset.getter();
        outlined consume of AttributedString.Runs.Run?(v315);
        LODWORD(v331) = v543;
        if (__OFSUB__(v328, v543)) {
          break;
        }
        v526 = (long long *)BigString.UTF8View.index(_:offsetBy:)();
        v527 = (long long *)v332;
        v522 = (long long *)v334;
        v523 = (long long *)v333;
        outlined release of Locale((uint64_t)&v590);
        long long v335 = *v524;
        long long v336 = v524[2];
        v604[1] = v524[1];
        v604[2] = v336;
        v604[0] = v335;
        long long v337 = *v524;
        long long v338 = v524[1];
        v640[2] = v336;
        v640[1] = v338;
        v640[0] = v337;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v640, (uint64_t)v641);
        outlined retain of Locale((uint64_t)v641);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v604);
        uint64_t v339 = (uint64_t)v528;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v543 = BigString.Index.utf8Offset.getter();
        uint64_t v542 = BigString.Index.utf8Offset.getter();
        outlined consume of AttributedString.Runs.Run?(v339);
        LOWORD(v329) = v542;
        LODWORD(v331) = v543;
        uint64_t v340 = (uint64_t)v540;
        if (__OFSUB__(v542, v543)) {
          goto LABEL_304;
        }
        uint64_t v542 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v543 = v341;
        v520 = v342;
        uint64_t v521 = v343;
        outlined release of Locale((uint64_t)&v591);
        long long v344 = *v525;
        long long v345 = v525[2];
        v603[1] = v525[1];
        v603[2] = v345;
        v603[0] = v344;
        long long v346 = *v525;
        long long v347 = v525[1];
        v642[2] = v345;
        v642[1] = v347;
        v642[0] = v346;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v642, (uint64_t)v643);
        outlined retain of Locale((uint64_t)v643);
        uint64_t v348 = (uint64_t)v526;
        uint64_t v349 = (uint64_t)v527;
        uint64_t v350 = (uint64_t)v522;
        uint64_t v351 = (uint64_t)v523;
        uint64_t v353 = v537;
        uint64_t v352 = v538;
        uint64_t v354 = v539;
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_305;
        }
        uint64_t v595 = v340;
        uint64_t v596 = v353;
        uint64_t v597 = v354;
        uint64_t v598 = v352;
        uint64_t v599 = v348;
        uint64_t v600 = v349;
        uint64_t v355 = v351;
        uint64_t v601 = v351;
        uint64_t v356 = v350;
        uint64_t v602 = v350;
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v603);
        long long v357 = *v524;
        long long v358 = v524[2];
        v594[1] = v524[1];
        v594[2] = v358;
        v594[0] = v357;
        long long v359 = *v524;
        long long v360 = v524[1];
        v644[2] = v358;
        v644[1] = v360;
        v644[0] = v359;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v644, (uint64_t)v645);
        outlined retain of Locale((uint64_t)v645);
        uint64_t v362 = (uint64_t)v520;
        uint64_t v361 = v521;
        uint64_t v363 = v534;
        uint64_t v364 = v535;
        uint64_t v365 = v536;
        uint64_t v366 = (uint64_t)v533;
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_306;
        }
        v593[14] = v364;
        v593[15] = v363;
        v593[16] = v365;
        v593[17] = v366;
        v593[18] = v542;
        v593[19] = v543;
        v593[20] = v362;
        v593[21] = v361;
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v594);
        char v367 = MEMORY[0x185301310](v592, v593);
        outlined consume of AttributedString.Runs.Run?(v541);
        outlined consume of AttributedString.Runs.Run?((uint64_t)v528);
        outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(v575);
        outlined release of Locale((uint64_t)v593);
        outlined release of Locale((uint64_t)v592);
        if ((v367 & 1) == 0) {
          goto LABEL_155;
        }
        uint64_t v534 = v543;
        uint64_t v535 = v542;
        v533 = (long long *)v361;
        uint64_t v539 = v355;
        v540 = v526;
        uint64_t v536 = v362;
        uint64_t v537 = (uint64_t)v527;
        uint64_t v538 = v356;
      }
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
LABEL_307:
      int v504 = *((_DWORD *)v553 + 4);
      *(_DWORD *)v562 = v331;
      *(_WORD *)&v562[4] = v329;
      *(_WORD *)&v562[6] = v330;
      *(void *)&v562[8] = *((void *)v553 + 1);
      *(_DWORD *)&v562[16] = v504;
      uint64_t v505 = _So9NSDecimala__exponent_getter(v562);
      _So9NSDecimala__exponent_setter(v505, (unsigned char *)v558);
LABEL_269:
      uint64_t v466 = LODWORD(v577[0]);
      uint64_t v467 = WORD2(v577[0]);
      __int16 v468 = WORD3(v577[0]);
      uint64_t v469 = WORD4(v577[0]);
      LODWORD(v556) = HIWORD(v577[0]);
      __int16 v470 = v577[1];
      *(void *)&long long v558 = WORD5(v577[0]);
      *(void *)&long long v557 = WORD6(v577[0]);
      __int16 v471 = WORD1(v577[1]);
      NSDecimal.asVariableLengthInteger()(LODWORD(v577[0]) | ((unint64_t)WORD2(v577[0]) << 32) | ((unint64_t)WORD3(v577[0]) << 48), WORD4(v577[0]) | ((unint64_t)WORD5(v577[0]) << 16) | ((unint64_t)WORD6(v577[0]) << 32) | ((unint64_t)HIWORD(v577[0]) << 48), LOWORD(v577[1]) | (WORD1(v577[1]) << 16));
      uint64_t v473 = v472;
      NSDecimal.asVariableLengthInteger()(*(unint64_t *)&v576[0], *((unint64_t *)&v576[0] + 1), v576[1]);
      uint64_t v475 = v474;
      unint64_t v476 = *(void *)(v473 + 16);
      unint64_t v477 = *(void *)(v474 + 16);
      *(void *)&long long v560 = v469;
      if (v477 < v476)
      {
LABEL_270:
        uint64_t v478 = 1;
        goto LABEL_273;
      }
      if (v476 >= v477)
      {
        if (v476)
        {
          uint64_t v481 = 2 * v476 - 2;
          unsigned int v482 = *(unsigned __int16 *)(v473 + v481 + 32);
          unsigned int v483 = *(unsigned __int16 *)(v474 + v481 + 32);
          if (v483 < v482) {
            goto LABEL_270;
          }
          if (v482 < v483) {
            goto LABEL_272;
          }
          uint64_t v554 = v467;
          *(void *)&long long v555 = v466;
          uint64_t v478 = 1;
          while (v476 != 1)
          {
            unint64_t v484 = v476 - 2;
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v476 - 2, 1, v473);
            uint64_t v485 = 2 * v476;
            unsigned int v486 = *(unsigned __int16 *)(v473 + v485 + 28);
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v484, 1, v475);
            unsigned int v487 = *(unsigned __int16 *)(v475 + v485 + 28);
            if (v487 < v486) {
              goto LABEL_286;
            }
            unint64_t v476 = v484 + 1;
            if (v486 < v487)
            {
              uint64_t v478 = -1;
              goto LABEL_286;
            }
          }
          uint64_t v478 = 0;
LABEL_286:
          LOWORD(v467) = v554;
          LODWORD(v466) = v555;
        }
        else
        {
          uint64_t v478 = 0;
        }
      }
      else
      {
LABEL_272:
        uint64_t v478 = -1;
      }
LABEL_273:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_DWORD *)v562 = v466;
      *(_WORD *)&v562[4] = v467;
      *(_WORD *)&v562[6] = v468;
      *(_WORD *)&v562[8] = v560;
      *(_WORD *)&v562[10] = v558;
      *(_WORD *)&v562[12] = v557;
      *(_WORD *)&v562[14] = v556;
      *(_WORD *)&v562[16] = v470;
      *(_WORD *)&v562[18] = v471;
      if (!_So9NSDecimala__isNegative_getter(v562))
      {
        if (!v478) {
          goto LABEL_277;
        }
LABEL_131:
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v543, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v544, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
LABEL_132:
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v559, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
        goto LABEL_115;
      }
      if (v478) {
        goto LABEL_131;
      }
LABEL_277:
      uint64_t v479 = v543;
      uint64_t v480 = v544;
      char v126 = specialized static String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.== infix(_:_:)(v544, v543);
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v479, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v480, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
LABEL_118:
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v559, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      return v126 & 1;
    case 0xBu:
      uint64_t v116 = v550;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, v550, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      double v117 = *(double *)v116;
      long long v118 = *(_OWORD *)(v116 + 88);
      v577[4] = *(_OWORD *)(v116 + 72);
      v577[5] = v118;
      v577[6] = *(_OWORD *)(v116 + 104);
      *(long long *)((char *)&v577[6] + 10) = *(_OWORD *)(v116 + 114);
      long long v119 = *(_OWORD *)(v116 + 24);
      v577[0] = *(_OWORD *)(v116 + 8);
      v577[1] = v119;
      long long v120 = *(_OWORD *)(v116 + 56);
      v577[2] = *(_OWORD *)(v116 + 40);
      v577[3] = v120;
      uint64_t v121 = v560;
      if (swift_getEnumCaseMultiPayload() != 11)
      {
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v577, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        goto LABEL_114;
      }
      double v122 = *(double *)v121;
      long long v123 = *(_OWORD *)(v121 + 88);
      v576[4] = *(_OWORD *)(v121 + 72);
      v576[5] = v123;
      v576[6] = *(_OWORD *)(v121 + 104);
      *(long long *)((char *)&v576[6] + 10) = *(_OWORD *)(v121 + 114);
      long long v124 = *(_OWORD *)(v121 + 24);
      v576[0] = *(_OWORD *)(v121 + 8);
      v576[1] = v124;
      BOOL v157 = v117 == v122;
      long long v125 = *(_OWORD *)(v121 + 56);
      v576[2] = *(_OWORD *)(v121 + 40);
      v576[3] = v125;
      if (!v157)
      {
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v576, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v577, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
        goto LABEL_179;
      }
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v577, v562);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v576, v561);
      char v126 = specialized static String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.== infix(_:_:)((long long *)v562, (long long *)v561);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v576, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v577, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
LABEL_81:
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v79, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      return v126 & 1;
    case 0xCu:
      *(void *)&long long v559 = v79;
      uint64_t v129 = v551;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, v551, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      double v130 = *(double *)(v129 + 8);
      long long v131 = *(_OWORD *)(v129 + 16);
      long long v555 = *(_OWORD *)(v129 + 32);
      long long v556 = v131;
      long long v557 = *(_OWORD *)(v129 + 48);
      char v132 = *(unsigned char *)(v129 + 64);
      uint64_t v133 = *(void *)(v129 + 72);
      v3.i32[0] = *(_DWORD *)(v129 + 80);
      uint64_t v134 = *(void *)(v129 + 88);
      char v135 = *(unsigned char *)(v129 + 96);
      char v136 = *(unsigned char *)(v129 + 97);
      v2.i32[0] = *(_DWORD *)(v129 + 98);
      LODWORD(v554) = *(unsigned __int8 *)(v129 + 102);
      LODWORD(v553) = *(unsigned __int8 *)(v129 + 103);
      v552 = *(uint64_t **)(v129 + 104);
      char v137 = *(unsigned char *)(v129 + 112);
      char v138 = *(unsigned char *)(v129 + 113);
      uint64_t v139 = v560;
      if (swift_getEnumCaseMultiPayload() != 12)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_109;
      }
      long long v142 = *(_OWORD *)(v139 + 16);
      long long v143 = *(_OWORD *)(v139 + 32);
      long long v144 = *(_OWORD *)(v139 + 48);
      BOOL v157 = *(double *)v129 == *(double *)v139;
      long long v558 = v142;
      long long v550 = v144;
      long long v551 = v143;
      if (v157 && v130 == *(double *)(v139 + 8))
      {
        char v145 = *(unsigned char *)(v139 + 64);
        uint64_t v146 = *(void *)(v139 + 72);
        v140.i32[0] = *(_DWORD *)(v139 + 80);
        uint64_t v147 = *(void *)(v139 + 88);
        char v148 = *(unsigned char *)(v139 + 96);
        char v149 = *(unsigned char *)(v139 + 97);
        v141.i32[0] = *(_DWORD *)(v139 + 98);
        char v150 = *(unsigned char *)(v139 + 102);
        char v151 = *(unsigned char *)(v139 + 103);
        uint64_t v152 = *(void *)(v139 + 104);
        char v153 = *(unsigned char *)(v139 + 112);
        char v154 = *(unsigned char *)(v139 + 113);
        v577[0] = v556;
        v577[1] = v555;
        v577[2] = v557;
        LOBYTE(v577[3]) = v132;
        *((void *)&v577[3] + 1) = v133;
        LODWORD(v577[4]) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
        *((void *)&v577[4] + 1) = v134;
        LOBYTE(v577[5]) = v135;
        BYTE1(v577[5]) = v136;
        *(_DWORD *)((char *)&v577[5] + 2) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
        BYTE6(v577[5]) = v554;
        BYTE7(v577[5]) = (_BYTE)v553;
        *((void *)&v577[5] + 1) = v552;
        LOBYTE(v577[6]) = v137;
        BYTE1(v577[6]) = v138;
        v576[0] = v142;
        v576[1] = v143;
        v576[2] = v144;
        LOBYTE(v576[3]) = v145;
        *((void *)&v576[3] + 1) = v146;
        LODWORD(v576[4]) = vmovn_s16((int16x8_t)vmovl_u8(v140)).u32[0];
        *((void *)&v576[4] + 1) = v147;
        LOBYTE(v576[5]) = v148;
        BYTE1(v576[5]) = v149;
        *(_DWORD *)((char *)&v576[5] + 2) = vmovn_s16((int16x8_t)vmovl_u8(v141)).u32[0];
        BYTE6(v576[5]) = v150;
        BYTE7(v576[5]) = v151;
        *((void *)&v576[5] + 1) = v152;
        LOBYTE(v576[6]) = v153;
        BYTE1(v576[6]) = v154;
        char v126 = specialized static Date.IntervalFormatStyle.== infix(_:_:)(v577, v576);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_118;
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_132;
    case 0xDu:
      long long v243 = v552;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v552, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v244 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                    + 48);
      uint64_t v105 = (uint64_t)v243 + v244;
      long long v245 = (uint64_t *)v560;
      if (swift_getEnumCaseMultiPayload() != 13)
      {
        v374 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle;
        goto LABEL_111;
      }
      uint64_t v246 = (uint64_t)v79;
      uint64_t v247 = *v243;
      uint64_t v248 = *v245;
      uint64_t v249 = v541;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v105, v541, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
      uint64_t v250 = (uint64_t)v540;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v245 + v244, (uint64_t)v540, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
      if (v247 != v248)
      {
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v250, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v249, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v246, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
        goto LABEL_115;
      }
      uint64_t v251 = v536;
      uint64_t v252 = v536 + *(int *)(v534 + 48);
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v249, v536, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v250, v252, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v254 = v246;
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v255 = v528;
          outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v251, (uint64_t)v528, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v256 = v524;
            outlined init with take of LocalePreferences?(v252, (uint64_t)v524, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
            char v257 = specialized static IntegerFormatStyle.Currency.== infix(_:_:)(v255, v256, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
            outlined destroy of Any?((uint64_t)v255, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
            outlined destroy of Any?((uint64_t)v256, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
            if ((v257 & 1) == 0) {
              goto LABEL_187;
            }
LABEL_173:
            outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v251, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
            outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v250, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
            outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v249, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
            uint64_t v102 = v254;
            goto LABEL_167;
          }
          v404 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
          uint64_t v408 = (uint64_t)v255;
LABEL_160:
          outlined destroy of Any?(v408, v404);
          outlined destroy of Any?(v251, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
LABEL_188:
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v250, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v249, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v254, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
          goto LABEL_115;
        }
        v403 = v530;
        outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v251, (uint64_t)v530, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          v405 = v525;
          outlined init with take of LocalePreferences?(v252, (uint64_t)v525, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
          v577[0] = *v403;
          v576[0] = *v405;
          if ((specialized static Locale.== infix(_:_:)((uint64_t)v577, (uint64_t)v576) & 1) != 0
            && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v403 + *(int *)(v519 + 36), (char *)v405 + *(int *)(v519 + 36)) & 1) != 0)
          {
            v406 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
LABEL_172:
            outlined destroy of Any?((uint64_t)v403, v406);
            outlined destroy of Any?((uint64_t)v405, v406);
            goto LABEL_173;
          }
          v410 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
          goto LABEL_186;
        }
        v404 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }
      else
      {
        v403 = v529;
        outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v251, (uint64_t)v529, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
        if (!swift_getEnumCaseMultiPayload())
        {
          v405 = v522;
          outlined init with take of LocalePreferences?(v252, (uint64_t)v522, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
          v577[0] = *v403;
          v576[0] = *v405;
          if ((specialized static Locale.== infix(_:_:)((uint64_t)v577, (uint64_t)v576) & 1) != 0
            && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v403 + *(int *)(v517 + 36), (char *)v405 + *(int *)(v517 + 36)) & 1) != 0)
          {
            v406 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
            goto LABEL_172;
          }
          v410 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
LABEL_186:
          outlined destroy of Any?((uint64_t)v403, v410);
          outlined destroy of Any?((uint64_t)v405, v410);
LABEL_187:
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v251, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
          goto LABEL_188;
        }
        v404 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }
      uint64_t v408 = (uint64_t)v403;
      goto LABEL_160;
    case 0xEu:
      uint64_t v103 = (double *)v553;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v553, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v104 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                    + 48);
      uint64_t v105 = (uint64_t)v103 + v104;
      uint64_t v106 = (double *)v560;
      if (swift_getEnumCaseMultiPayload() != 14)
      {
        v374 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle;
LABEL_111:
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v105, v374);
        goto LABEL_114;
      }
      double v107 = *v103;
      double v108 = *v106;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v105, v557, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
      uint64_t v109 = v542;
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle((uint64_t)v106 + v104, v542, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
      if (v107 != v108) {
        goto LABEL_178;
      }
      uint64_t v110 = v539;
      uint64_t v111 = v539 + *(int *)(v537 + 48);
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v557, v539, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v109, v111, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      int v112 = swift_getEnumCaseMultiPayload();
      if (v112)
      {
        if (v112 == 1)
        {
          uint64_t v113 = v531;
          outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v110, (uint64_t)v531, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v114 = v526;
            outlined init with take of LocalePreferences?(v111, (uint64_t)v526, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            char v115 = specialized static IntegerFormatStyle.Currency.== infix(_:_:)(v113, v114, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            outlined destroy of Any?((uint64_t)v113, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            outlined destroy of Any?((uint64_t)v114, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            if ((v115 & 1) == 0) {
              goto LABEL_177;
            }
LABEL_165:
            outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v110, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
            outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v109, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
            outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v557, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
LABEL_166:
            uint64_t v102 = (uint64_t)v79;
            goto LABEL_167;
          }
          v400 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
          uint64_t v407 = (uint64_t)v113;
LABEL_148:
          outlined destroy of Any?(v407, v400);
          outlined destroy of Any?(v110, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
          goto LABEL_178;
        }
        v399 = v533;
        outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v110, (uint64_t)v533, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          v401 = v527;
          outlined init with take of LocalePreferences?(v111, (uint64_t)v527, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
          v577[0] = *v399;
          v576[0] = *v401;
          if ((specialized static Locale.== infix(_:_:)((uint64_t)v577, (uint64_t)v576) & 1) != 0
            && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v399 + *(int *)(v521 + 36), (char *)v401 + *(int *)(v521 + 36)) & 1) != 0)
          {
            v402 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
LABEL_164:
            outlined destroy of Any?((uint64_t)v399, v402);
            outlined destroy of Any?((uint64_t)v401, v402);
            goto LABEL_165;
          }
          v409 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
          goto LABEL_176;
        }
        v400 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }
      else
      {
        v399 = v532;
        outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v110, (uint64_t)v532, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
        if (!swift_getEnumCaseMultiPayload())
        {
          v401 = v523;
          outlined init with take of LocalePreferences?(v111, (uint64_t)v523, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          v577[0] = *v399;
          v576[0] = *v401;
          if ((specialized static Locale.== infix(_:_:)((uint64_t)v577, (uint64_t)v576) & 1) != 0
            && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v399 + *(int *)(v518 + 36), (char *)v401 + *(int *)(v518 + 36)) & 1) != 0)
          {
            v402 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
            goto LABEL_164;
          }
          v409 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
LABEL_176:
          outlined destroy of Any?((uint64_t)v399, v409);
          outlined destroy of Any?((uint64_t)v401, v409);
LABEL_177:
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v110, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
LABEL_178:
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v109, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v557, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
LABEL_179:
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v79, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
          goto LABEL_115;
        }
        v400 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }
      uint64_t v407 = (uint64_t)v399;
      goto LABEL_148;
    case 0xFu:
      *(void *)&long long v559 = v79;
      long long v158 = (int *)v555;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, v555, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      int v159 = *v158;
      uint64_t v160 = *((unsigned __int16 *)v158 + 2);
      int v161 = *((unsigned __int16 *)v158 + 3);
      int v162 = *((unsigned __int16 *)v158 + 4);
      LODWORD(v546) = *((unsigned __int16 *)v158 + 5);
      int v163 = *((unsigned __int16 *)v158 + 6);
      LODWORD(v557) = *((unsigned __int16 *)v158 + 7);
      LODWORD(v547) = *((unsigned __int16 *)v158 + 8);
      LODWORD(v550) = *((unsigned __int16 *)v158 + 9);
      uint64_t v164 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                    + 48);
      uint64_t v165 = (uint64_t)v158 + v164;
      uint64_t v166 = v560;
      if (swift_getEnumCaseMultiPayload() != 15)
      {
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v165, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
LABEL_109:
        uint64_t v79 = (char *)v559;
        goto LABEL_114;
      }
      LODWORD(v558) = *(_DWORD *)v166;
      LODWORD(v540) = v162;
      LODWORD(v555) = *(unsigned __int16 *)(v166 + 4);
      LODWORD(v556) = *(unsigned __int16 *)(v166 + 6);
      LODWORD(v545) = *(unsigned __int16 *)(v166 + 8);
      LODWORD(v541) = v163;
      LODWORD(v554) = *(unsigned __int16 *)(v166 + 10);
      *(void *)&long long v549 = v160;
      LODWORD(v552) = *(unsigned __int16 *)(v166 + 12);
      LODWORD(v542) = v161;
      LODWORD(v548) = v159;
      LODWORD(v553) = *(unsigned __int16 *)(v166 + 14);
      LODWORD(v551) = *(unsigned __int16 *)(v166 + 16);
      int v167 = *(unsigned __int16 *)(v166 + 18);
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v165, v544, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v166 + v164, v543, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
      LODWORD(v577[0]) = v159;
      WORD2(v577[0]) = v160;
      WORD3(v577[0]) = v161;
      WORD4(v577[0]) = v162;
      int v168 = (int)v546;
      WORD5(v577[0]) = (_WORD)v546;
      WORD6(v577[0]) = v163;
      __int16 v169 = v557;
      HIWORD(v577[0]) = v557;
      __int16 v170 = (__int16)v547;
      LOWORD(v577[1]) = (_WORD)v547;
      int v171 = v550;
      WORD1(v577[1]) = v550;
      int v172 = _So9NSDecimala__exponent_getter((char *)v577);
      LODWORD(v577[0]) = v558;
      int v173 = v555;
      WORD2(v577[0]) = v555;
      int v174 = v556;
      WORD3(v577[0]) = v556;
      int v175 = (int)v545;
      WORD4(v577[0]) = (_WORD)v545;
      WORD5(v577[0]) = v554;
      WORD6(v577[0]) = (_WORD)v552;
      HIWORD(v577[0]) = (_WORD)v553;
      LOWORD(v577[1]) = v551;
      LODWORD(v560) = v167;
      WORD1(v577[1]) = v167;
      int v176 = _So9NSDecimala__exponent_getter((char *)v577);
      __int16 v177 = v549;
      int v178 = (int)v548;
      int v179 = v173;
      __int16 v180 = v170;
      int v181 = (int)v540;
      __int16 v182 = v169;
      int v183 = v542;
      int v184 = v168;
      int v185 = v541;
      if (v172 == v176)
      {
        int v186 = v179;
        LODWORD(v577[0]) = v548;
        WORD2(v577[0]) = v549;
        WORD3(v577[0]) = v542;
        WORD4(v577[0]) = (_WORD)v540;
        WORD5(v577[0]) = v184;
        WORD6(v577[0]) = v541;
        HIWORD(v577[0]) = v182;
        LOWORD(v577[1]) = v180;
        WORD1(v577[1]) = v171;
        int v187 = _So9NSDecimala__length_getter(v577);
        LODWORD(v577[0]) = v558;
        WORD2(v577[0]) = v186;
        WORD3(v577[0]) = v174;
        WORD4(v577[0]) = v175;
        WORD5(v577[0]) = v554;
        WORD6(v577[0]) = (_WORD)v552;
        HIWORD(v577[0]) = (_WORD)v553;
        LOWORD(v577[1]) = v551;
        WORD1(v577[1]) = v560;
        int v188 = _So9NSDecimala__length_getter(v577);
        __int16 v180 = (__int16)v547;
        int v178 = (int)v548;
        __int16 v177 = v549;
        __int16 v182 = v557;
        if (v187 == v188)
        {
          LODWORD(v577[0]) = v548;
          WORD2(v577[0]) = v549;
          WORD3(v577[0]) = v183;
          WORD4(v577[0]) = v181;
          WORD5(v577[0]) = v184;
          WORD6(v577[0]) = v185;
          HIWORD(v577[0]) = v557;
          LOWORD(v577[1]) = (_WORD)v547;
          WORD1(v577[1]) = v171;
          int isNegative_getter = _So9NSDecimala__isNegative_getter(v577);
          LODWORD(v577[0]) = v558;
          WORD2(v577[0]) = v186;
          WORD3(v577[0]) = v174;
          WORD4(v577[0]) = v175;
          WORD5(v577[0]) = v554;
          WORD6(v577[0]) = (_WORD)v552;
          HIWORD(v577[0]) = (_WORD)v553;
          LOWORD(v577[1]) = v551;
          WORD1(v577[1]) = v560;
          int v190 = _So9NSDecimala__isNegative_getter(v577);
          __int16 v180 = (__int16)v547;
          int v178 = (int)v548;
          __int16 v177 = v549;
          __int16 v182 = v557;
          if (isNegative_getter == v190)
          {
            LODWORD(v577[0]) = v548;
            WORD2(v577[0]) = v549;
            WORD3(v577[0]) = v183;
            WORD4(v577[0]) = v181;
            WORD5(v577[0]) = v184;
            WORD6(v577[0]) = v185;
            HIWORD(v577[0]) = v557;
            LOWORD(v577[1]) = (_WORD)v547;
            WORD1(v577[1]) = v171;
            int isCompact_getter = _So9NSDecimala__isCompact_getter(v577);
            LODWORD(v577[0]) = v558;
            WORD2(v577[0]) = v186;
            WORD3(v577[0]) = v174;
            WORD4(v577[0]) = v175;
            WORD5(v577[0]) = v554;
            WORD6(v577[0]) = (_WORD)v552;
            HIWORD(v577[0]) = (_WORD)v553;
            LOWORD(v577[1]) = v551;
            WORD1(v577[1]) = v560;
            int v192 = _So9NSDecimala__isCompact_getter(v577);
            __int16 v180 = (__int16)v547;
            int v178 = (int)v548;
            __int16 v177 = v549;
            __int16 v182 = v557;
            if (isCompact_getter == v192)
            {
              LODWORD(v577[0]) = v548;
              WORD2(v577[0]) = v549;
              WORD3(v577[0]) = v183;
              WORD4(v577[0]) = v181;
              WORD5(v577[0]) = v184;
              WORD6(v577[0]) = v185;
              HIWORD(v577[0]) = v557;
              LOWORD(v577[1]) = (_WORD)v547;
              WORD1(v577[1]) = v171;
              int v193 = _So9NSDecimala__reserved_getter(v577);
              LODWORD(v577[0]) = v558;
              WORD2(v577[0]) = v186;
              WORD3(v577[0]) = v174;
              WORD4(v577[0]) = v175;
              WORD5(v577[0]) = v554;
              WORD6(v577[0]) = (_WORD)v552;
              HIWORD(v577[0]) = (_WORD)v553;
              LOWORD(v577[1]) = v551;
              WORD1(v577[1]) = v560;
              int v194 = _So9NSDecimala__reserved_getter(v577);
              __int16 v180 = (__int16)v547;
              int v178 = (int)v548;
              __int16 v177 = v549;
              __int16 v182 = v557;
              if (v193 == v194
                && v549 == v186
                && v183 == v174
                && v181 == v175
                && v184 == v554
                && v185 == v552
                && v557 == v553
                && v547 == v551
                && v171 == v560)
              {
                goto LABEL_277;
              }
            }
          }
        }
      }
      LODWORD(v577[0]) = v178;
      WORD2(v577[0]) = v177;
      WORD3(v577[0]) = v183;
      WORD4(v577[0]) = v181;
      WORD5(v577[0]) = v184;
      WORD6(v577[0]) = v185;
      HIWORD(v577[0]) = v182;
      LOWORD(v577[1]) = v180;
      WORD1(v577[1]) = v171;
      __int16 v195 = v177;
      int v196 = v178;
      __int16 v197 = v182;
      __int16 v198 = v180;
      int v199 = _So9NSDecimala__length_getter(v577);
      __int16 v200 = v181;
      __int16 v201 = v195;
      int v202 = v196;
      __int16 v203 = v198;
      __int16 v204 = v197;
      if (!v199)
      {
        LODWORD(v577[0]) = v202;
        WORD2(v577[0]) = v201;
        WORD3(v577[0]) = v183;
        WORD4(v577[0]) = v200;
        WORD5(v577[0]) = v184;
        WORD6(v577[0]) = v185;
        HIWORD(v577[0]) = v197;
        LOWORD(v577[1]) = v203;
        WORD1(v577[1]) = v171;
        __int16 v389 = v200;
        int v390 = _So9NSDecimala__isNegative_getter(v577);
        __int16 v200 = v389;
        if (v390)
        {
          LODWORD(v577[0]) = v558;
          __int16 v391 = v555;
          WORD2(v577[0]) = v555;
          __int16 v392 = v556;
          WORD3(v577[0]) = v556;
          __int16 v393 = (__int16)v545;
          WORD4(v577[0]) = (_WORD)v545;
          __int16 v394 = v554;
          WORD5(v577[0]) = v554;
          __int16 v395 = (__int16)v552;
          WORD6(v577[0]) = (_WORD)v552;
          __int16 v396 = (__int16)v553;
          HIWORD(v577[0]) = (_WORD)v553;
          __int16 v397 = v551;
          LOWORD(v577[1]) = v551;
          __int16 v398 = v560;
          WORD1(v577[1]) = v560;
          if (_So9NSDecimala__length_getter(v577)) {
            goto LABEL_131;
          }
          LODWORD(v577[0]) = v558;
          WORD2(v577[0]) = v391;
          WORD3(v577[0]) = v392;
          WORD4(v577[0]) = v393;
          WORD5(v577[0]) = v394;
          WORD6(v577[0]) = v395;
          HIWORD(v577[0]) = v396;
          LOWORD(v577[1]) = v397;
          WORD1(v577[1]) = v398;
          if (!_So9NSDecimala__isNegative_getter(v577)) {
            goto LABEL_131;
          }
          goto LABEL_277;
        }
      }
      LODWORD(v577[0]) = v558;
      WORD2(v577[0]) = v555;
      WORD3(v577[0]) = v556;
      __int16 v205 = (__int16)v545;
      WORD4(v577[0]) = (_WORD)v545;
      __int16 v206 = v554;
      WORD5(v577[0]) = v554;
      __int16 v207 = (__int16)v552;
      WORD6(v577[0]) = (_WORD)v552;
      __int16 v208 = (__int16)v553;
      HIWORD(v577[0]) = (_WORD)v553;
      __int16 v209 = v203;
      __int16 v210 = v551;
      LOWORD(v577[1]) = v551;
      __int16 v211 = v200;
      __int16 v212 = v560;
      WORD1(v577[1]) = v560;
      if (!_So9NSDecimala__length_getter(v577))
      {
        LODWORD(v577[0]) = v558;
        WORD2(v577[0]) = v555;
        WORD3(v577[0]) = v556;
        WORD4(v577[0]) = v205;
        WORD5(v577[0]) = v206;
        WORD6(v577[0]) = v207;
        HIWORD(v577[0]) = v208;
        LOWORD(v577[1]) = v210;
        WORD1(v577[1]) = v212;
        if (_So9NSDecimala__isNegative_getter(v577)) {
          goto LABEL_131;
        }
      }
      LODWORD(v577[0]) = v548;
      WORD2(v577[0]) = v549;
      WORD3(v577[0]) = v542;
      WORD4(v577[0]) = v211;
      WORD5(v577[0]) = (_WORD)v546;
      WORD6(v577[0]) = v541;
      HIWORD(v577[0]) = v204;
      LOWORD(v577[1]) = v209;
      WORD1(v577[1]) = v550;
      unsigned int v213 = _So9NSDecimala__isNegative_getter(v577);
      LODWORD(v577[0]) = v558;
      WORD2(v577[0]) = v555;
      WORD3(v577[0]) = v556;
      WORD4(v577[0]) = v205;
      WORD5(v577[0]) = v206;
      WORD6(v577[0]) = v207;
      HIWORD(v577[0]) = v208;
      LOWORD(v577[1]) = v210;
      WORD1(v577[1]) = v212;
      if (_So9NSDecimala__isNegative_getter(v577) < v213) {
        goto LABEL_131;
      }
      LODWORD(v577[0]) = v548;
      WORD2(v577[0]) = v549;
      WORD3(v577[0]) = v542;
      WORD4(v577[0]) = v211;
      WORD5(v577[0]) = (_WORD)v546;
      WORD6(v577[0]) = v541;
      HIWORD(v577[0]) = v557;
      LOWORD(v577[1]) = v209;
      WORD1(v577[1]) = v550;
      unsigned int v214 = _So9NSDecimala__isNegative_getter(v577);
      LODWORD(v577[0]) = v558;
      WORD2(v577[0]) = v555;
      WORD3(v577[0]) = v556;
      WORD4(v577[0]) = v205;
      WORD5(v577[0]) = v206;
      WORD6(v577[0]) = v207;
      HIWORD(v577[0]) = v208;
      LOWORD(v577[1]) = v210;
      WORD1(v577[1]) = v212;
      BOOL v215 = v214 >= _So9NSDecimala__isNegative_getter(v577);
      __int16 v216 = v557;
      if (!v215) {
        goto LABEL_131;
      }
      LODWORD(v577[0]) = v548;
      WORD2(v577[0]) = v549;
      WORD3(v577[0]) = v542;
      WORD4(v577[0]) = v211;
      __int16 v217 = (__int16)v546;
      WORD5(v577[0]) = (_WORD)v546;
      __int16 v218 = v541;
      WORD6(v577[0]) = v541;
      HIWORD(v577[0]) = v557;
      LOWORD(v577[1]) = v209;
      WORD1(v577[1]) = v550;
      if (!_So9NSDecimala__length_getter(v577))
      {
        LODWORD(v577[0]) = v558;
        WORD2(v577[0]) = v555;
        WORD3(v577[0]) = v556;
        WORD4(v577[0]) = (_WORD)v545;
        WORD5(v577[0]) = v554;
        WORD6(v577[0]) = (_WORD)v552;
        HIWORD(v577[0]) = (_WORD)v553;
        LOWORD(v577[1]) = v551;
        WORD1(v577[1]) = v560;
        if (_So9NSDecimala__length_getter(v577)) {
          uint64_t v411 = -1;
        }
        else {
          uint64_t v411 = 0;
        }
        if (v411) {
          goto LABEL_131;
        }
        goto LABEL_277;
      }
      __int16 v219 = v218;
      __int16 v220 = v211;
      LODWORD(v577[0]) = v558;
      uint64_t v221 = v555;
      WORD2(v577[0]) = v555;
      __int16 v222 = v556;
      WORD3(v577[0]) = v556;
      WORD4(v577[0]) = (_WORD)v545;
      WORD5(v577[0]) = v554;
      __int16 v223 = (__int16)v552;
      WORD6(v577[0]) = (_WORD)v552;
      HIWORD(v577[0]) = (_WORD)v553;
      __int16 v224 = v551;
      LOWORD(v577[1]) = v551;
      __int16 v225 = v560;
      WORD1(v577[1]) = v560;
      if (!_So9NSDecimala__length_getter(v577))
      {
        LODWORD(v577[0]) = v548;
        WORD2(v577[0]) = v549;
        WORD3(v577[0]) = v542;
        WORD4(v577[0]) = v220;
        WORD5(v577[0]) = v217;
        WORD6(v577[0]) = v219;
        HIWORD(v577[0]) = v216;
        LOWORD(v577[1]) = (_WORD)v547;
        WORD1(v577[1]) = v550;
        if (!_So9NSDecimala__length_getter(v577)) {
          goto LABEL_277;
        }
        goto LABEL_131;
      }
      LODWORD(v577[0]) = v548;
      WORD2(v577[0]) = v549;
      WORD3(v577[0]) = v542;
      WORD4(v577[0]) = v220;
      WORD5(v577[0]) = v217;
      WORD6(v577[0]) = v219;
      HIWORD(v577[0]) = v216;
      LOWORD(v577[1]) = (_WORD)v547;
      WORD1(v577[1]) = v550;
      __int16 v226 = v223;
      int v227 = v558;
      LODWORD(v576[0]) = v558;
      WORD2(v576[0]) = v221;
      WORD3(v576[0]) = v222;
      WORD4(v576[0]) = (_WORD)v545;
      WORD5(v576[0]) = v554;
      WORD6(v576[0]) = v226;
      HIWORD(v576[0]) = (_WORD)v553;
      LOWORD(v576[1]) = v224;
      WORD1(v576[1]) = v225;
      *(_DWORD *)v562 = v548;
      *(_WORD *)&v562[4] = v549;
      *(_WORD *)&v562[6] = v542;
      *(_WORD *)&v562[8] = v220;
      *(_WORD *)&v562[10] = v217;
      *(_WORD *)&v562[12] = v219;
      *(_WORD *)&v562[14] = v216;
      *(_WORD *)&v562[16] = (_WORD)v547;
      *(_WORD *)&v562[18] = v550;
      int v228 = _So9NSDecimala__exponent_getter(v562);
      *(_DWORD *)v562 = v227;
      *(_WORD *)&v562[4] = v221;
      *(_WORD *)&v562[6] = v222;
      *(_WORD *)&v562[8] = (_WORD)v545;
      *(_WORD *)&v562[10] = v554;
      *(_WORD *)&v562[12] = (_WORD)v552;
      *(_WORD *)&v562[14] = (_WORD)v553;
      *(_WORD *)&v562[16] = v224;
      *(_WORD *)&v562[18] = v225;
      int v229 = _So9NSDecimala__exponent_getter(v562);
      int v230 = v228 - v229;
      if (v228 == v229) {
        goto LABEL_269;
      }
      uint64_t v231 = v230;
      if (v230 < 0)
      {
        uint64_t v231 = -(uint64_t)v230;
        uint64_t v232 = v576;
        uint64_t v233 = v577;
        uint64_t v235 = v221;
        unsigned int v236 = v558;
        uint64_t v234 = v515;
      }
      else
      {
        uint64_t v232 = v577;
        uint64_t v233 = v576;
        uint64_t v234 = v516;
        uint64_t v235 = v549;
        unsigned int v236 = v548;
      }
      unint64_t v412 = v236 | (unint64_t)(v235 << 32) | ((unint64_t)*((unsigned __int16 *)v234 + 1) << 48);
      unint64_t v413 = *(void *)(v234 + 4);
      unsigned int v414 = *((_DWORD *)v234 + 3);
      NSDecimal.asVariableLengthInteger()(v412, v413, v414);
      uint64_t v416 = v415;
      if (!v231)
      {
LABEL_213:
        NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v416);
        if (v262) {
          goto LABEL_268;
        }
        unint64_t v433 = *(void *)(v416 + 16);
        swift_bridgeObjectRelease();
        if (!HIDWORD(v433))
        {
          _So9NSDecimala__length_setter(v433, v232);
          *(_DWORD *)v562 = *(_DWORD *)v233;
          *(_OWORD *)&v562[4] = *(long long *)((char *)v233 + 4);
          uint64_t v434 = _So9NSDecimala__exponent_getter(v562);
          _So9NSDecimala__exponent_setter(v434, v232);
          v435 = v232;
LABEL_217:
          _So9NSDecimala__isCompact_setter(v435);
          goto LABEL_269;
        }
        goto LABEL_358;
      }
      LODWORD(v556) = v414;
      *(void *)&long long v557 = v413;
      *(void *)&long long v555 = v412;
      uint64_t v417 = specialized abs<A>(_:)(v231);
      uint64_t v418 = one-time initialization token for powerOfTen;
      swift_bridgeObjectRetain();
      if (v418 != -1) {
        goto LABEL_333;
      }
LABEL_194:
      rawValue = powerOfTen._rawValue;
      uint64_t v420 = *((void *)powerOfTen._rawValue + 2);
      *(void *)&long long v558 = v233;
      uint64_t v554 = v231;
      if (v420 <= v417)
      {
        v553 = v232;
        v422 = v520;
        if (!v420) {
          goto LABEL_342;
        }
        uint64_t v423 = v420 - 1;
        *(void *)&long long v560 = 1 - v420;
        v552 = (uint64_t *)v416;
        uint64_t v424 = v416;
        do
        {
          uint64_t v425 = v417 - v423;
          if (__OFSUB__(v417, v423)) {
            goto LABEL_327;
          }
          if ((unint64_t)v420 > *((void *)powerOfTen._rawValue + 2))
          {
LABEL_328:
            __break(1u);
LABEL_329:
            __break(1u);
LABEL_330:
            __break(1u);
          }
          uint64_t v426 = *((void *)powerOfTen._rawValue + v423 + 4);
          swift_bridgeObjectRetain();
          uint64_t v427 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v424, v426, 8);
          if (v422)
          {
LABEL_218:
            uint64_t v233 = (long long *)v558;
            goto LABEL_248;
          }
          uint64_t v421 = v427;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v417 += v560;
          uint64_t v424 = v421;
        }
        while (v420 <= v425);
        rawValue = powerOfTen._rawValue;
        uint64_t v417 = v425;
        uint64_t v232 = v553;
        uint64_t v233 = (long long *)v558;
      }
      else
      {
        uint64_t v421 = v416;
      }
      if (v417 < 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v417 < rawValue[2])
      {
        uint64_t v428 = *(void *)(v421 + 16);
        if (!v428 || (uint64_t v429 = rawValue[v417 + 4], (v430 = *(void *)(v429 + 16)) == 0))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v416 = MEMORY[0x1E4FBC860];
          goto LABEL_213;
        }
        uint64_t v431 = v428 + v430;
        if (__OFADD__(v428, v430)) {
          goto LABEL_345;
        }
        v553 = v232;
        if (v431 > 7)
        {
          uint64_t v431 = 8;
        }
        else
        {
          if (v431 < 0) {
            goto LABEL_358;
          }
          if (!v431)
          {
            uint64_t v432 = v429;
            swift_bridgeObjectRetain();
            uint64_t v416 = MEMORY[0x1E4FBC860];
LABEL_221:
            uint64_t v436 = 0;
            *(void *)&long long v560 = v432;
            uint64_t v437 = v432 + 32;
            uint64_t v438 = v416 + 32;
            while (1)
            {
              if (v436 == v430) {
                goto LABEL_337;
              }
              unsigned int v439 = 0;
              uint64_t v440 = 0;
              uint64_t v441 = v436 + 1;
              do
              {
                if (v428 == v440)
                {
                  __break(1u);
LABEL_326:
                  __break(1u);
LABEL_327:
                  __break(1u);
                  goto LABEL_328;
                }
                uint64_t v442 = v440 + v436;
                if (__OFADD__(v440, v436)) {
                  goto LABEL_326;
                }
                if (v442 >= v431)
                {
                  if (v439
                    || (unsigned int v439 = *(unsigned __int16 *)(v437 + 2 * v436), *(_WORD *)(v437 + 2 * v436))
                    && (unsigned int v439 = *(unsigned __int16 *)(v421 + 2 * v440 + 32), *(_WORD *)(v421 + 2 * v440 + 32)))
                  {
                    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                    v422 = (void *)swift_allocError();
                    unsigned char *v449 = 0;
                    swift_willThrow();
                    swift_bridgeObjectRelease();
LABEL_248:
                    unint64_t v450 = v555;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    NSDecimal.asVariableLengthInteger()(v450, v557, v556);
                    uint64_t v452 = *(void *)(v451 + 16);
                    swift_bridgeObjectRelease();
                    double v453 = floor((double)(8 - v452) * 4.81647993);
                    if ((~*(void *)&v453 & 0x7FF0000000000000) != 0)
                    {
                      uint64_t v454 = v554;
                      if (v453 > -9.22337204e18)
                      {
                        if (v453 < 9.22337204e18)
                        {
                          uint64_t v455 = (uint64_t)v453;
                          NSDecimal.asVariableLengthInteger()(*(void *)v233, *((void *)v233 + 1), *((_DWORD *)v233 + 4));
                          *(void *)&long long v560 = v455;
                          BOOL v445 = __OFSUB__(v455, v454);
                          uint64_t v416 = v455 - v454;
                          if (!v445)
                          {
                            uint64_t v232 = v456;
                            if (!v416) {
                              goto LABEL_267;
                            }
                            uint64_t v457 = specialized abs<A>(_:)(v416);
                            uint64_t v458 = specialized Array._getCount()((uint64_t)powerOfTen._rawValue);
                            uint64_t v459 = v458 - 1;
                            if (!__OFSUB__(v458, 1))
                            {
                              uint64_t v231 = v458;
                              swift_bridgeObjectRetain();
                              *(void *)&long long v557 = v232;
                              if (v459 >= v457)
                              {
                                uint64_t v231 = (uint64_t)v232;
                                goto LABEL_263;
                              }
                              uint64_t v233 = (long long *)(1 - v231);
                              while (1)
                              {
                                uint64_t v417 = v457 - v459;
                                if (__OFSUB__(v457, v459)) {
                                  break;
                                }
                                v461 = powerOfTen._rawValue;
                                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v459, 1, powerOfTen._rawValue);
                                uint64_t v462 = v461[v459 + 4];
                                swift_bridgeObjectRetain();
                                if (v416 < 0) {
                                  uint64_t v460 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)((uint64_t)v232, v462, 8);
                                }
                                else {
                                  uint64_t v460 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)((uint64_t)v232, v462, 8);
                                }
                                uint64_t v231 = v460;
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                v457 += (uint64_t)v233;
                                uint64_t v232 = (long long *)v231;
                                if (v459 >= v417)
                                {
                                  uint64_t v457 = v417;
LABEL_263:
                                  v463 = powerOfTen._rawValue;
                                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v457, 1, powerOfTen._rawValue);
                                  uint64_t v464 = v463[v457 + 4];
                                  swift_bridgeObjectRetain();
                                  if (v416 < 0) {
                                    uint64_t v465 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v231, v464, 8);
                                  }
                                  else {
                                    uint64_t v465 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v231, v464, 8);
                                  }
                                  uint64_t v232 = (long long *)v465;
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
LABEL_267:
                                  NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v232);
                                  if (v262)
                                  {
LABEL_268:
                                    swift_bridgeObjectRelease();

                                    goto LABEL_269;
                                  }
                                  uint64_t v488 = specialized Array._getCount()(v232);
                                  swift_bridgeObjectRelease();
                                  if (v488 >= (uint64_t)0xFFFFFFFF80000000)
                                  {
                                    if (v488 <= 0x7FFFFFFF)
                                    {
                                      if ((v488 & 0x80000000) != 0) {
                                        goto LABEL_358;
                                      }
                                      _So9NSDecimala__length_setter(v488, (_DWORD *)v558);
                                      if (v416 >= (uint64_t)0xFFFFFFFF80000000)
                                      {
                                        if (v416 <= 0x7FFFFFFF)
                                        {
                                          *(_DWORD *)v562 = *(_DWORD *)v558;
                                          *(_OWORD *)&v562[4] = *(_OWORD *)(v558 + 4);
                                          int v489 = _So9NSDecimala__exponent_getter(v562);
                                          BOOL v445 = __OFSUB__(v489, v416);
                                          uint64_t v490 = (v489 - v416);
                                          if (!v445)
                                          {
                                            uint64_t v491 = v558;
                                            _So9NSDecimala__exponent_setter(v490, (unsigned char *)v558);
                                            _So9NSDecimala__isCompact_setter((_DWORD *)v491);
                                            *(_DWORD *)v562 = *(_DWORD *)v491;
                                            *(_OWORD *)&v562[4] = *(_OWORD *)(v491 + 4);
                                            int v492 = _So9NSDecimala__length_getter(v562);
                                            uint64_t v331 = *(unsigned int *)v553;
                                            uint64_t v329 = *((unsigned __int16 *)v553 + 2);
                                            uint64_t v330 = *((unsigned __int16 *)v553 + 3);
                                            if (!v492) {
                                              goto LABEL_307;
                                            }
                                            NSDecimal.asVariableLengthInteger()(v331 | (v329 << 32) | (v330 << 48), *((void *)v553 + 1), *((_DWORD *)v553 + 4));
                                            v305._rawValue = v493;
                                            if (!(void)v560) {
                                              goto LABEL_317;
                                            }
                                            uint64_t v280 = specialized abs<A>(_:)(v560);
                                            uint64_t v494 = specialized Array._getCount()((uint64_t)powerOfTen._rawValue);
                                            uint64_t v495 = v494 - 1;
                                            if (!__OFSUB__(v494, 1))
                                            {
                                              uint64_t v496 = v494;
                                              swift_bridgeObjectRetain();
                                              if (v495 < v280)
                                              {
                                                uint64_t v497 = 1 - v496;
                                                uint64_t v498 = (uint64_t)v305._rawValue;
                                                do
                                                {
                                                  uint64_t v501 = v280 - v495;
                                                  if (__OFSUB__(v280, v495)) {
                                                    goto LABEL_343;
                                                  }
                                                  v502 = powerOfTen._rawValue;
                                                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v495, 1, powerOfTen._rawValue);
                                                  uint64_t v503 = v502[v495 + 4];
                                                  swift_bridgeObjectRetain();
                                                  if ((v560 & 0x8000000000000000) != 0) {
                                                    uint64_t v499 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v498, v503, 8);
                                                  }
                                                  else {
                                                    uint64_t v499 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v498, v503, 8);
                                                  }
                                                  uint64_t v500 = v499;
                                                  swift_bridgeObjectRelease();
                                                  swift_bridgeObjectRelease();
                                                  v280 += v497;
                                                  uint64_t v498 = v500;
                                                }
                                                while (v495 < v501);
                                                uint64_t v280 = v501;
LABEL_312:
                                                v506 = powerOfTen._rawValue;
                                                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v280, 1, powerOfTen._rawValue);
                                                uint64_t v507 = v506[v280 + 4];
                                                swift_bridgeObjectRetain();
                                                if ((v560 & 0x8000000000000000) != 0)
                                                {
                                                  uint64_t v508 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v500, v507, 8);
                                                  if (v262) {
                                                    goto LABEL_314;
                                                  }
                                                }
                                                else
                                                {
                                                  uint64_t v508 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v500, v507, 8);
                                                  if (v262)
                                                  {
LABEL_314:
                                                    swift_bridgeObjectRelease();
                                                    swift_bridgeObjectRelease();
                                                    goto LABEL_268;
                                                  }
                                                }
                                                v509 = (void *)v508;
                                                swift_bridgeObjectRelease();
                                                swift_bridgeObjectRelease();
                                                swift_bridgeObjectRelease();
                                                v305._rawValue = v509;
LABEL_317:
                                                NSDecimal.copyVariableLengthInteger(_:)(v305);
                                                if (v262) {
                                                  goto LABEL_268;
                                                }
                                                unint64_t v510 = specialized Array._getCount()(v305._rawValue);
                                                swift_bridgeObjectRelease();
                                                if ((v510 & 0x8000000000000000) != 0 || HIDWORD(v510)) {
                                                  goto LABEL_358;
                                                }
                                                _So9NSDecimala__length_setter(v510, v553);
                                                if ((uint64_t)v560 >= (uint64_t)0xFFFFFFFF80000000)
                                                {
                                                  if ((uint64_t)v560 <= 0x7FFFFFFF)
                                                  {
                                                    *(_DWORD *)v562 = *(_DWORD *)v553;
                                                    *(_OWORD *)&v562[4] = *(long long *)((char *)v553 + 4);
                                                    int v511 = _So9NSDecimala__exponent_getter(v562);
                                                    BOOL v445 = __OFSUB__(v511, v560);
                                                    uint64_t v512 = (v511 - v560);
                                                    if (!v445)
                                                    {
                                                      v513 = v553;
                                                      _So9NSDecimala__exponent_setter(v512, v553);
                                                      v435 = v513;
                                                      goto LABEL_217;
                                                    }
LABEL_357:
                                                    __break(1u);
LABEL_358:
                                                    _assertionFailure(_:_:file:line:flags:)();
                                                    __break(1u);
                                                    JUMPOUT(0x181B04A1CLL);
                                                  }
LABEL_356:
                                                  __break(1u);
                                                  goto LABEL_357;
                                                }
LABEL_355:
                                                __break(1u);
                                                goto LABEL_356;
                                              }
LABEL_310:
                                              uint64_t v500 = (uint64_t)v305._rawValue;
                                              goto LABEL_312;
                                            }
LABEL_354:
                                            __break(1u);
                                            goto LABEL_355;
                                          }
LABEL_353:
                                          __break(1u);
                                          goto LABEL_354;
                                        }
LABEL_352:
                                        __break(1u);
                                        goto LABEL_353;
                                      }
LABEL_351:
                                      __break(1u);
                                      goto LABEL_352;
                                    }
LABEL_350:
                                    __break(1u);
                                    goto LABEL_351;
                                  }
LABEL_349:
                                  __break(1u);
                                  goto LABEL_350;
                                }
                              }
                              __break(1u);
LABEL_333:
                              swift_once();
                              goto LABEL_194;
                            }
LABEL_344:
                            __break(1u);
LABEL_345:
                            __break(1u);
LABEL_346:
                            __break(1u);
LABEL_347:
                            __break(1u);
LABEL_348:
                            __break(1u);
                            goto LABEL_349;
                          }
LABEL_341:
                          __break(1u);
LABEL_342:
                          __break(1u);
LABEL_343:
                          __break(1u);
                          goto LABEL_344;
                        }
LABEL_340:
                        __break(1u);
                        goto LABEL_341;
                      }
LABEL_339:
                      __break(1u);
                      goto LABEL_340;
                    }
LABEL_338:
                    __break(1u);
                    goto LABEL_339;
                  }
                }
                else
                {
                  if (v442 < 0) {
                    goto LABEL_329;
                  }
                  if ((unint64_t)v442 >= *(void *)(v416 + 16)) {
                    goto LABEL_330;
                  }
                  uint64_t v443 = 2 * v442;
                  unsigned int v444 = v439
                       + *(unsigned __int16 *)(v438 + v443)
                       + *(unsigned __int16 *)(v421 + 2 * v440 + 32) * *(unsigned __int16 *)(v437 + 2 * v436);
                  unsigned int v439 = HIWORD(v444);
                  *(_WORD *)(v438 + v443) = v444;
                }
                ++v440;
              }
              while (v428 != v440);
              if (v439)
              {
                BOOL v445 = __OFADD__(v428, v436);
                uint64_t v446 = v428 + v436;
                if (v445) {
                  goto LABEL_346;
                }
                if (v446 >= v431)
                {
                  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                  v422 = (void *)swift_allocError();
                  unsigned char *v514 = 0;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  goto LABEL_218;
                }
                if (v446 < 0) {
                  goto LABEL_347;
                }
                if ((unint64_t)v446 >= *(void *)(v416 + 16)) {
                  goto LABEL_348;
                }
                *(_WORD *)(v438 + 2 * v446) = v439;
                uint64_t v233 = (long long *)v558;
              }
              uint64_t v436 = v441;
              if (v441 == v430)
              {
                uint64_t v447 = *(void *)(v416 + 16);
                if (v447 && !*(_WORD *)(v438 + 2 * v447 - 2))
                {
                  do
                  {
                    *(void *)(v416 + 16) = v447 - 1;
                    if (v447 == 1) {
                      break;
                    }
                  }
                  while (!*(unsigned __int16 *)(v416 + 28 + 2 * v447--));
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v232 = v553;
                uint64_t v233 = (long long *)v558;
                goto LABEL_213;
              }
            }
          }
        }
        uint64_t v432 = v429;
        swift_bridgeObjectRetain();
        uint64_t v416 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v416 + 16) = v431;
        bzero((void *)(v416 + 32), 2 * v431);
        goto LABEL_221;
      }
      __break(1u);
LABEL_337:
      __break(1u);
      goto LABEL_338;
    case 0x10u:
      uint64_t v91 = (uint64_t)v79;
      uint64_t v92 = v554;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, v554, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v93 = *(void *)v92;
      int v94 = *(unsigned __int8 *)(v92 + 8);
      int v95 = *(unsigned __int8 *)(v92 + 9);
      long long v559 = *(_OWORD *)(v92 + 16);
      uint64_t v96 = v560;
      if (swift_getEnumCaseMultiPayload() != 16)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v79 = (char *)v91;
        goto LABEL_114;
      }
      uint64_t v97 = *(void *)v96;
      int v98 = *(unsigned __int8 *)(v96 + 8);
      int v99 = *(unsigned __int8 *)(v96 + 9);
      long long v560 = *(_OWORD *)(v96 + 16);
      char v100 = specialized static Array<A>.== infix(_:_:)(v93, v97);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v100 & 1) != 0 && v94 == v98 && ((v95 ^ v99) & 1) == 0)
      {
        v577[0] = v559;
        v576[0] = v560;
        char v101 = specialized static Locale.== infix(_:_:)((uint64_t)v577, (uint64_t)v576);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (v101)
        {
          uint64_t v102 = v91;
LABEL_167:
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v102, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
          char v126 = 1;
          return v126 & 1;
        }
      }
      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v91, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      goto LABEL_115;
    case 0x11u:
      uint64_t v240 = (unsigned __int8 *)v556;
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, v556, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v241 = (unsigned __int8 *)v560;
      if (swift_getEnumCaseMultiPayload() != 17) {
        goto LABEL_114;
      }
      int v238 = *v240;
      int v239 = *v241;
LABEL_66:
      BOOL v157 = v238 == v239;
LABEL_78:
      char v126 = v157;
      goto LABEL_81;
    default:
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v79, (uint64_t)v76, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v83 = v76[1];
      uint64_t v84 = v76[2];
      uint64_t v85 = v76[4];
      uint64_t v87 = v76[6];
      uint64_t v86 = v76[7];
      *(void *)&long long v559 = v79;
      uint64_t v88 = (void *)v76[9];
      uint64_t v89 = v76[10];
      *(void *)&long long v556 = v76[11];
      *(void *)&long long v557 = v76[13];
      uint64_t v90 = (uint64_t *)v560;
      if (swift_getEnumCaseMultiPayload())
      {

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_109;
      }
      uint64_t v376 = v76[12];
      uint64_t v377 = v76[8];
      uint64_t v378 = v76[5];
      uint64_t v379 = v76[3];
      uint64_t v380 = *v76;
      uint64_t v382 = *v90;
      v381 = (long long *)v90[1];
      uint64_t v383 = v90[3];
      *(void *)&long long v550 = v90[2];
      uint64_t v384 = v90[4];
      uint64_t v385 = v90[5];
      *(void *)&long long v551 = v90[6];
      v386 = (void *)v90[9];
      v552 = (uint64_t *)v90[10];
      v553 = v381;
      *(void *)&long long v558 = v90[13];
      *(void *)&v577[0] = v380;
      *((void *)&v577[0] + 1) = v83;
      *(void *)&v577[1] = v84;
      *((void *)&v577[1] + 1) = v379;
      *(void *)&v577[2] = v85;
      *((void *)&v577[2] + 1) = v378;
      uint64_t v554 = v87;
      *(void *)&long long v555 = v89;
      *(void *)&v577[3] = v87;
      *((void *)&v577[3] + 1) = v86;
      *(void *)&v577[4] = v377;
      *((void *)&v577[4] + 1) = v88;
      *(void *)&v577[5] = v89;
      *((void *)&v577[5] + 1) = v556;
      *(void *)&v577[6] = v376;
      *((void *)&v577[6] + 1) = v557;
      *(void *)&v576[0] = v382;
      *((void *)&v576[0] + 1) = v381;
      *(void *)&v576[1] = v550;
      *((void *)&v576[1] + 1) = v383;
      *(void *)&v576[2] = v384;
      *((void *)&v576[2] + 1) = v385;
      long long v549 = *(_OWORD *)(v90 + 7);
      *(long long *)((char *)&v576[3] + 8) = v549;
      *(void *)&v576[3] = v551;
      *((void *)&v576[4] + 1) = v386;
      v387 = v386;
      long long v560 = *(_OWORD *)(v90 + 11);
      *(long long *)((char *)&v576[5] + 8) = v560;
      *(void *)&v576[5] = v552;
      *((void *)&v576[6] + 1) = v558;
      char v126 = static LocalizedStringResource.== infix(_:_:)(v577, v576);

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_118;
  }
}

uint64_t specialized static String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1F4188790](v39);
  uint64_t v40 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1F4188790](v38);
  uint64_t v41 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (long long *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (long long *)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v37 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (long long *)((char *)&v37 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (uint64_t)&v19[*(int *)(v20 + 56)];
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(a1, (uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v42, v21, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v13, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v41;
        outlined init with take of LocalePreferences?(v21, v41, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
        long long v24 = *(_OWORD *)v13;
        long long v43 = *(_OWORD *)v23;
        long long v44 = v24;
        if (specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43))
        {
          BOOL v25 = *((void *)v13 + 2) == *(void *)(v23 + 16) && *((void *)v13 + 3) == *(void *)(v23 + 24);
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)())
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v13[*(int *)(v38 + 40)], v23 + *(int *)(v38 + 40)) & 1) != 0)
          {
            uint64_t v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            uint64_t v27 = (uint64_t)v13;
LABEL_18:
            outlined destroy of Any?(v27, v26);
            uint64_t v31 = v23;
LABEL_26:
            outlined destroy of Any?(v31, v26);
            outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
            return 1;
          }
        }
        uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
        uint64_t v33 = (uint64_t)v13;
LABEL_28:
        outlined destroy of Any?(v33, v32);
        uint64_t v36 = v23;
LABEL_30:
        outlined destroy of Any?(v36, v32);
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
        return 0;
      }
      uint64_t v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      uint64_t v29 = (uint64_t)v13;
    }
    else
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v10, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v23 = v40;
        outlined init with take of LocalePreferences?(v21, v40, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
        long long v30 = *v10;
        long long v43 = *(_OWORD *)v23;
        long long v44 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v10 + *(int *)(v39 + 36), v23 + *(int *)(v39 + 36)) & 1) != 0)
        {
          uint64_t v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
          uint64_t v27 = (uint64_t)v10;
          goto LABEL_18;
        }
        uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        uint64_t v33 = (uint64_t)v10;
        goto LABEL_28;
      }
      uint64_t v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      uint64_t v29 = (uint64_t)v10;
    }
  }
  else
  {
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?(v21, (uint64_t)v7, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      long long v34 = *v16;
      long long v43 = *v7;
      long long v44 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 36), (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        uint64_t v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
        outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
        uint64_t v31 = (uint64_t)v7;
        goto LABEL_26;
      }
      uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      uint64_t v36 = (uint64_t)v7;
      goto LABEL_30;
    }
    uint64_t v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    uint64_t v29 = (uint64_t)v16;
  }
  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  return 0;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1F4188790](v38);
  uint64_t v39 = (long long *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1F4188790](v37);
  uint64_t v40 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (long long *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (long long *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v36 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (long long *)((char *)&v36 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (uint64_t)&v19[*(int *)(v20 + 56)];
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(a1, (uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v41, v21, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v13, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v40;
        outlined init with take of LocalePreferences?(v21, v40, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
        long long v24 = *(_OWORD *)v13;
        long long v42 = *(_OWORD *)v23;
        long long v43 = v24;
        if (specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42))
        {
          BOOL v25 = *((void *)v13 + 2) == *(void *)(v23 + 16) && *((void *)v13 + 3) == *(void *)(v23 + 24);
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)())
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v13[*(int *)(v37 + 40)], v23 + *(int *)(v37 + 40)) & 1) != 0)
          {
            uint64_t v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            outlined destroy of Any?(v23, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
            uint64_t v27 = (uint64_t)v13;
LABEL_25:
            outlined destroy of Any?(v27, v26);
            outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
            return 1;
          }
        }
        uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
        outlined destroy of Any?(v23, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
        uint64_t v33 = (uint64_t)v13;
        goto LABEL_28;
      }
      uint64_t v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      uint64_t v29 = (uint64_t)v13;
    }
    else
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v10, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        long long v30 = v39;
        outlined init with take of LocalePreferences?(v21, (uint64_t)v39, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
        long long v31 = *v10;
        long long v42 = *v30;
        long long v43 = v31;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v10 + *(int *)(v38 + 36), (char *)v30 + *(int *)(v38 + 36)) & 1) != 0)
        {
          uint64_t v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
          outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
          uint64_t v27 = (uint64_t)v10;
          goto LABEL_25;
        }
        uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
        uint64_t v33 = (uint64_t)v10;
        goto LABEL_28;
      }
      uint64_t v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      uint64_t v29 = (uint64_t)v10;
    }
  }
  else
  {
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?(v21, (uint64_t)v7, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      long long v34 = *v16;
      long long v42 = *v7;
      long long v43 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 36), (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        uint64_t v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
        outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
        uint64_t v27 = (uint64_t)v16;
        goto LABEL_25;
      }
      uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      uint64_t v33 = (uint64_t)v16;
LABEL_28:
      outlined destroy of Any?(v33, v32);
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      return 0;
    }
    uint64_t v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    uint64_t v29 = (uint64_t)v16;
  }
  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  return 0;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v37 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v37);
  uint64_t v38 = (long long *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v36);
  uint64_t v39 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (long long *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (long long *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v35 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (long long *)((char *)&v35 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format));
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (uint64_t)&v19[*(int *)(v20 + 56)];
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(a1, (uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v40, v21, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v13, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v39;
        outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v21, v39, type metadata accessor for NSDecimal.FormatStyle.Currency);
        long long v24 = *(_OWORD *)v13;
        long long v41 = *(_OWORD *)v23;
        long long v42 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (*((void *)v13 + 2) == *(void *)(v23 + 16) && *((void *)v13 + 3) == *(void *)(v23 + 24)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v13[*(int *)(v36 + 24)], v23 + *(int *)(v36 + 24)) & 1) != 0)
        {
          BOOL v25 = type metadata accessor for NSDecimal.FormatStyle.Currency;
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v23, type metadata accessor for NSDecimal.FormatStyle.Currency);
          uint64_t v26 = (uint64_t)v13;
LABEL_23:
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v26, v25);
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
          return 1;
        }
        long long v31 = type metadata accessor for NSDecimal.FormatStyle.Currency;
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v23, type metadata accessor for NSDecimal.FormatStyle.Currency);
        uint64_t v32 = (uint64_t)v13;
        goto LABEL_26;
      }
      uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      uint64_t v28 = (uint64_t)v13;
    }
    else
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v10, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v29 = v38;
        outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v21, (uint64_t)v38, type metadata accessor for NSDecimal.FormatStyle.Percent);
        long long v30 = *v10;
        long long v41 = *v29;
        long long v42 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v10 + *(int *)(v37 + 20), (char *)v29 + *(int *)(v37 + 20)) & 1) != 0)
        {
          BOOL v25 = type metadata accessor for NSDecimal.FormatStyle.Percent;
          outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v29, type metadata accessor for NSDecimal.FormatStyle.Percent);
          uint64_t v26 = (uint64_t)v10;
          goto LABEL_23;
        }
        long long v31 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v29, type metadata accessor for NSDecimal.FormatStyle.Percent);
        uint64_t v32 = (uint64_t)v10;
        goto LABEL_26;
      }
      uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v28 = (uint64_t)v10;
    }
  }
  else
  {
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(v21, (uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
      long long v33 = *v16;
      long long v41 = *v7;
      long long v42 = v33;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 20), (char *)v7 + *(int *)(v5 + 20)) & 1) != 0)
      {
        BOOL v25 = type metadata accessor for NSDecimal.FormatStyle;
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
        uint64_t v26 = (uint64_t)v16;
        goto LABEL_23;
      }
      long long v31 = type metadata accessor for NSDecimal.FormatStyle;
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
      uint64_t v32 = (uint64_t)v16;
LABEL_26:
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v32, v31);
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
      return 0;
    }
    uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle;
    uint64_t v28 = (uint64_t)v16;
  }
  outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(v28, v27);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format));
  return 0;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1F4188790](v39);
  uint64_t v40 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1F4188790](v38);
  uint64_t v41 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (long long *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (long long *)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v37 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (long long *)((char *)&v37 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (uint64_t)&v19[*(int *)(v20 + 56)];
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(a1, (uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v42, v21, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v13, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v41;
        outlined init with take of LocalePreferences?(v21, v41, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
        long long v24 = *(_OWORD *)v13;
        long long v43 = *(_OWORD *)v23;
        long long v44 = v24;
        if (specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43))
        {
          BOOL v25 = *((void *)v13 + 2) == *(void *)(v23 + 16) && *((void *)v13 + 3) == *(void *)(v23 + 24);
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)())
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v13[*(int *)(v38 + 40)], v23 + *(int *)(v38 + 40)) & 1) != 0)
          {
            uint64_t v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
            uint64_t v27 = (uint64_t)v13;
LABEL_18:
            outlined destroy of Any?(v27, v26);
            uint64_t v31 = v23;
LABEL_26:
            outlined destroy of Any?(v31, v26);
            outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
            return 1;
          }
        }
        uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
        uint64_t v33 = (uint64_t)v13;
LABEL_28:
        outlined destroy of Any?(v33, v32);
        uint64_t v36 = v23;
LABEL_30:
        outlined destroy of Any?(v36, v32);
        outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
        return 0;
      }
      uint64_t v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      uint64_t v29 = (uint64_t)v13;
    }
    else
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v10, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v23 = v40;
        outlined init with take of LocalePreferences?(v21, v40, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
        long long v30 = *v10;
        long long v43 = *(_OWORD *)v23;
        long long v44 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v10 + *(int *)(v39 + 36), v23 + *(int *)(v39 + 36)) & 1) != 0)
        {
          uint64_t v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
          uint64_t v27 = (uint64_t)v10;
          goto LABEL_18;
        }
        uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
        uint64_t v33 = (uint64_t)v10;
        goto LABEL_28;
      }
      uint64_t v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      uint64_t v29 = (uint64_t)v10;
    }
  }
  else
  {
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?(v21, (uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      long long v34 = *v16;
      long long v43 = *v7;
      long long v44 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 36), (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        uint64_t v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        uint64_t v31 = (uint64_t)v7;
        goto LABEL_26;
      }
      uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      uint64_t v36 = (uint64_t)v7;
      goto LABEL_30;
    }
    uint64_t v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    uint64_t v29 = (uint64_t)v16;
  }
  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  return 0;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1F4188790](v38);
  uint64_t v39 = (long long *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1F4188790](v37);
  uint64_t v40 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (long long *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (long long *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v36 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (long long *)((char *)&v36 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (uint64_t)&v19[*(int *)(v20 + 56)];
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(a1, (uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(v41, v21, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v13, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v40;
        outlined init with take of LocalePreferences?(v21, v40, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
        long long v24 = *(_OWORD *)v13;
        long long v42 = *(_OWORD *)v23;
        long long v43 = v24;
        if (specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42))
        {
          BOOL v25 = *((void *)v13 + 2) == *(void *)(v23 + 16) && *((void *)v13 + 3) == *(void *)(v23 + 24);
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)())
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v13[*(int *)(v37 + 40)], v23 + *(int *)(v37 + 40)) & 1) != 0)
          {
            uint64_t v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
            outlined destroy of Any?(v23, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            uint64_t v27 = (uint64_t)v13;
LABEL_25:
            outlined destroy of Any?(v27, v26);
            outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
            return 1;
          }
        }
        uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
        outlined destroy of Any?(v23, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
        uint64_t v33 = (uint64_t)v13;
        goto LABEL_28;
      }
      uint64_t v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      uint64_t v29 = (uint64_t)v13;
    }
    else
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v10, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        long long v30 = v39;
        outlined init with take of LocalePreferences?(v21, (uint64_t)v39, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
        long long v31 = *v10;
        long long v42 = *v30;
        long long v43 = v31;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v10 + *(int *)(v38 + 36), (char *)v30 + *(int *)(v38 + 36)) & 1) != 0)
        {
          uint64_t v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
          outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
          uint64_t v27 = (uint64_t)v10;
          goto LABEL_25;
        }
        uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
        outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
        uint64_t v33 = (uint64_t)v10;
        goto LABEL_28;
      }
      uint64_t v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      uint64_t v29 = (uint64_t)v10;
    }
  }
  else
  {
    outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v19, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?(v21, (uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      long long v34 = *v16;
      long long v42 = *v7;
      long long v43 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 36), (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        uint64_t v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        uint64_t v27 = (uint64_t)v16;
        goto LABEL_25;
      }
      uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      uint64_t v33 = (uint64_t)v16;
LABEL_28:
      outlined destroy of Any?(v33, v32);
      outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      return 0;
    }
    uint64_t v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    uint64_t v29 = (uint64_t)v16;
  }
  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  return 0;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 112))
  {
    case 0:
      uint64_t v4 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 112) = 0;
      break;
    case 1:
      uint64_t v8 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 112) = 1;
      swift_retain();
      break;
    case 2:
      *(void *)a1 = *(void *)a2;
      uint64_t v9 = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = v9;
      uint64_t v10 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v10;
      uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
      swift_retain();
      swift_retain();
      v11(a1 + 32, a2 + 32, v10);
      uint64_t v12 = *(void *)(a2 + 88);
      *(void *)(a1 + 88) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 64, a2 + 64);
      *(unsigned char *)(a1 + 112) = 2;
      break;
    case 3:
      *(void *)a1 = *(void *)a2;
      uint64_t v13 = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = v13;
      uint64_t v14 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v14;
      uint64_t v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v14 - 8);
      swift_retain();
      swift_retain();
      v15(a1 + 32, a2 + 32, v14);
      uint64_t v16 = *(void *)(a2 + 88);
      *(void *)(a1 + 88) = v16;
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 64, a2 + 64);
      *(unsigned char *)(a1 + 112) = 3;
      break;
    case 4:
      uint64_t v17 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v17;
      uint64_t v18 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v18;
      uint64_t v19 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v19;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v21 = *(void **)(a2 + 72);
      uint64_t v20 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = v21;
      *(void *)(a1 + 80) = v20;
      uint64_t v22 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v22;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(unsigned char *)(a1 + 112) = 4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      id v23 = v21;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      break;
    case 5:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 112) = 5;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      break;
    default:
      long long v5 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v5;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      long long v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v7;
      break;
  }
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
    switch(*((unsigned char *)a2 + 112))
    {
      case 0:
        uint64_t v4 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v4;
        (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
        *(unsigned char *)(a1 + 112) = 0;
        break;
      case 1:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *(unsigned char *)(a1 + 112) = 1;
        swift_retain();
        break;
      case 2:
        uint64_t v5 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v5;
        uint64_t v6 = *((void *)a2 + 3);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = v6;
        uint64_t v7 = *((void *)a2 + 7);
        *(void *)(a1 + 56) = v7;
        uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
        swift_retain();
        swift_retain();
        v8(a1 + 32, (uint64_t)(a2 + 2), v7);
        uint64_t v9 = *((void *)a2 + 11);
        *(void *)(a1 + 88) = v9;
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 64, (uint64_t)(a2 + 4));
        *(unsigned char *)(a1 + 112) = 2;
        break;
      case 3:
        uint64_t v10 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v10;
        uint64_t v11 = *((void *)a2 + 3);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = v11;
        uint64_t v12 = *((void *)a2 + 7);
        *(void *)(a1 + 56) = v12;
        uint64_t v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
        swift_retain();
        swift_retain();
        v13(a1 + 32, (uint64_t)(a2 + 2), v12);
        uint64_t v14 = *((void *)a2 + 11);
        *(void *)(a1 + 88) = v14;
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 64, (uint64_t)(a2 + 4));
        *(unsigned char *)(a1 + 112) = 3;
        break;
      case 4:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
        uint64_t v15 = (void *)*((void *)a2 + 9);
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        *(unsigned char *)(a1 + 112) = 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v16 = v15;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        break;
      case 5:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
        *(_OWORD *)(a1 + 16) = a2[1];
        *(unsigned char *)(a1 + 112) = 5;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        break;
      default:
        long long v17 = *a2;
        long long v18 = a2[1];
        long long v19 = a2[3];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v19;
        *(_OWORD *)a1 = v17;
        *(_OWORD *)(a1 + 16) = v18;
        long long v20 = a2[4];
        long long v21 = a2[5];
        long long v22 = a2[6];
        *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
        *(_OWORD *)(a1 + 80) = v21;
        *(_OWORD *)(a1 + 96) = v22;
        *(_OWORD *)(a1 + 64) = v20;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy113_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
    long long v4 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v4;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)__n128 result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 112) = -(char)a2;
    }
  }
  return result;
}

uint64_t outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int16 a16)
{
  switch(a16 >> 14)
  {
    case 1:
      swift_retain();
      goto LABEL_8;
    case 2:
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_8;
    case 3:
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      return swift_bridgeObjectRetain();
    default:
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
LABEL_8:
      return swift_unknownObjectRetain();
  }
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int16 a16)
{
  switch(a16 >> 14)
  {
    case 1:
      swift_release();
      goto LABEL_8;
    case 2:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 3:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    default:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
LABEL_8:
      return swift_unknownObjectRelease();
  }
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  return &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  int v8 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v8 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 36);
      uint64_t v27 = a1 + v26;
      uint64_t v28 = (uint64_t)a2 + v26;
      *(void *)uint64_t v27 = *(uint64_t *)((char *)a2 + v26);
      *(unsigned char *)(v27 + 8) = *((unsigned char *)a2 + v26 + 8);
      long long v29 = *(_OWORD *)((char *)a2 + v26 + 32);
      *(_OWORD *)(v27 + 16) = *(_OWORD *)((char *)a2 + v26 + 16);
      *(_OWORD *)(v27 + 32) = v29;
      *(_OWORD *)(v27 + 48) = *(_OWORD *)((char *)a2 + v26 + 48);
      *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v26 + 57);
      *(unsigned char *)(v27 + 73) = *((unsigned char *)a2 + v26 + 73);
      *(unsigned char *)(v27 + 76) = *((unsigned char *)a2 + v26 + 76);
      *(_WORD *)(v27 + 74) = *(_WORD *)((char *)a2 + v26 + 74);
      *(unsigned char *)(v27 + 77) = *((unsigned char *)a2 + v26 + 77);
      long long v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v31 = v30[9];
      uint64_t v32 = (void *)(v27 + v31);
      uint64_t v33 = (const void *)(v28 + v31);
      uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
LABEL_10:
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
LABEL_14:
        uint64_t v43 = v30[10];
        uint64_t v44 = v27 + v43;
        uint64_t v45 = v28 + v43;
        *(void *)uint64_t v44 = *(void *)v45;
        *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
        *(unsigned char *)(v27 + v30[11]) = *(unsigned char *)(v28 + v30[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v13 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v13;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
        uint64_t v15 = a1 + v14;
        uint64_t v16 = (uint64_t)a2 + v14;
        *(void *)uint64_t v15 = *(uint64_t *)((char *)a2 + v14);
        *(unsigned char *)(v15 + 8) = *((unsigned char *)a2 + v14 + 8);
        long long v17 = *(_OWORD *)((char *)a2 + v14 + 32);
        *(_OWORD *)(v15 + 16) = *(_OWORD *)((char *)a2 + v14 + 16);
        *(_OWORD *)(v15 + 32) = v17;
        *(_OWORD *)(v15 + 48) = *(_OWORD *)((char *)a2 + v14 + 48);
        *(_OWORD *)(v15 + 57) = *(_OWORD *)((char *)a2 + v14 + 57);
        *(unsigned char *)(v15 + 73) = *((unsigned char *)a2 + v14 + 73);
        *(_DWORD *)(v15 + 74) = *(_DWORD *)((char *)a2 + v14 + 74);
        *(unsigned char *)(v15 + 78) = *((unsigned char *)a2 + v14 + 78);
        long long v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v19 = v18[9];
        long long v20 = (void *)(v15 + v19);
        long long v21 = (const void *)(v16 + v19);
        uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v23 = *(void *)(v22 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        uint64_t v40 = v18[10];
        uint64_t v41 = v15 + v40;
        uint64_t v42 = v16 + v40;
        *(void *)uint64_t v41 = *(void *)v42;
        *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 8);
        *(unsigned char *)(v15 + v18[11]) = *(unsigned char *)(v16 + v18[11]);
        *(unsigned char *)(v15 + v18[12]) = *(unsigned char *)(v16 + v18[12]);
        goto LABEL_15;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v36 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a4) + 36);
      uint64_t v27 = a1 + v36;
      uint64_t v28 = (uint64_t)a2 + v36;
      *(void *)uint64_t v27 = *(uint64_t *)((char *)a2 + v36);
      *(unsigned char *)(v27 + 8) = *((unsigned char *)a2 + v36 + 8);
      long long v37 = *(_OWORD *)((char *)a2 + v36 + 32);
      *(_OWORD *)(v27 + 16) = *(_OWORD *)((char *)a2 + v36 + 16);
      *(_OWORD *)(v27 + 32) = v37;
      *(_OWORD *)(v27 + 48) = *(_OWORD *)((char *)a2 + v36 + 48);
      *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v36 + 57);
      *(unsigned char *)(v27 + 73) = *((unsigned char *)a2 + v36 + 73);
      *(unsigned char *)(v27 + 76) = *((unsigned char *)a2 + v36 + 76);
      *(_WORD *)(v27 + 74) = *(_WORD *)((char *)a2 + v36 + 74);
      *(unsigned char *)(v27 + 77) = *((unsigned char *)a2 + v36 + 77);
      long long v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v38 = v30[9];
      uint64_t v32 = (void *)(v27 + v38);
      uint64_t v33 = (const void *)(v28 + v38);
      uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
        goto LABEL_10;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    goto LABEL_14;
  }
  uint64_t v25 = *a2;
  *(void *)a1 = *a2;
  a1 = v25 + ((v8 + 16) & ~(unint64_t)v8);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = a5;
LABEL_6:
    uint64_t v11 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v10) + 36);
    uint64_t v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v10 = a3;
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a4) + 40);
  uint64_t v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14);
  if (!result)
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    return v15(v13, v14);
  }
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    uint64_t v24 = a6;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v12 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v12;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
      uint64_t v14 = a1 + v13;
      uint64_t v15 = a2 + v13;
      *(void *)uint64_t v14 = *(void *)(a2 + v13);
      *(unsigned char *)(v14 + 8) = *(unsigned char *)(a2 + v13 + 8);
      long long v16 = *(_OWORD *)(a2 + v13 + 32);
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(a2 + v13 + 16);
      *(_OWORD *)(v14 + 32) = v16;
      *(_OWORD *)(v14 + 48) = *(_OWORD *)(a2 + v13 + 48);
      *(_OWORD *)(v14 + 57) = *(_OWORD *)(a2 + v13 + 57);
      *(unsigned char *)(v14 + 73) = *(unsigned char *)(a2 + v13 + 73);
      *(_DWORD *)(v14 + 74) = *(_DWORD *)(a2 + v13 + 74);
      *(unsigned char *)(v14 + 78) = *(unsigned char *)(a2 + v13 + 78);
      long long v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v18 = v17[9];
      uint64_t v19 = (void *)(v14 + v18);
      long long v20 = (const void *)(v15 + v18);
      uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      uint64_t v42 = v17[10];
      uint64_t v43 = v14 + v42;
      uint64_t v44 = v15 + v42;
      *(void *)uint64_t v43 = *(void *)v44;
      *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
      *(unsigned char *)(v14 + v17[11]) = *(unsigned char *)(v15 + v17[11]);
      uint64_t v45 = v17[12];
      uint64_t v40 = (unsigned char *)(v14 + v45);
      uint64_t v41 = (unsigned char *)(v15 + v45);
      goto LABEL_13;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    uint64_t v24 = a4;
  }
  uint64_t v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v24) + 36);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)uint64_t v26 = *(void *)(a2 + v25);
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(a2 + v25 + 8);
  long long v28 = *(_OWORD *)(a2 + v25 + 32);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)(a2 + v25 + 16);
  *(_OWORD *)(v26 + 32) = v28;
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a2 + v25 + 48);
  *(_OWORD *)(v26 + 57) = *(_OWORD *)(a2 + v25 + 57);
  *(unsigned char *)(v26 + 73) = *(unsigned char *)(a2 + v25 + 73);
  *(unsigned char *)(v26 + 76) = *(unsigned char *)(a2 + v25 + 76);
  *(_WORD *)(v26 + 74) = *(_WORD *)(a2 + v25 + 74);
  *(unsigned char *)(v26 + 77) = *(unsigned char *)(a2 + v25 + 77);
  long long v29 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v30 = v29[9];
  uint64_t v31 = (void *)(v26 + v30);
  uint64_t v32 = (const void *)(v27 + v30);
  uint64_t v33 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v31, v32, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  uint64_t v36 = v29[10];
  uint64_t v37 = v26 + v36;
  uint64_t v38 = v27 + v36;
  *(void *)uint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  uint64_t v39 = v29[11];
  uint64_t v40 = (unsigned char *)(v26 + v39);
  uint64_t v41 = (unsigned char *)(v27 + v39);
LABEL_13:
  *uint64_t v40 = *v41;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a4);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v27 = a7;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        uint64_t v14 = a1 + v13;
        uint64_t v15 = a2 + v13;
        uint64_t v16 = *(void *)(a2 + v13);
        *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
        *(void *)uint64_t v14 = v16;
        long long v17 = *(_OWORD *)(v15 + 57);
        long long v19 = *(_OWORD *)(v15 + 32);
        long long v18 = *(_OWORD *)(v15 + 48);
        *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
        *(_OWORD *)(v14 + 32) = v19;
        *(_OWORD *)(v14 + 48) = v18;
        *(_OWORD *)(v14 + 57) = v17;
        *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
        *(_DWORD *)(v14 + 74) = *(_DWORD *)(v15 + 74);
        *(unsigned char *)(v14 + 78) = *(unsigned char *)(v15 + 78);
        long long v20 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v21 = v20[9];
        uint64_t v22 = (void *)(v14 + v21);
        uint64_t v23 = (const void *)(v15 + v21);
        uint64_t v24 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v25 = *(void *)(v24 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        uint64_t v49 = v20[10];
        uint64_t v50 = v14 + v49;
        uint64_t v51 = (uint64_t *)(v15 + v49);
        uint64_t v52 = *v51;
        *(unsigned char *)(v50 + 8) = *((unsigned char *)v51 + 8);
        *(void *)uint64_t v50 = v52;
        *(unsigned char *)(v14 + v20[11]) = *(unsigned char *)(v15 + v20[11]);
        uint64_t v53 = v20[12];
        uint64_t v47 = (unsigned char *)(v14 + v53);
        uint64_t v48 = (unsigned char *)(v15 + v53);
LABEL_14:
        *uint64_t v47 = *v48;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v27 = a5;
    }
    uint64_t v28 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v27) + 36);
    uint64_t v29 = a1 + v28;
    uint64_t v30 = a2 + v28;
    uint64_t v31 = *(void *)(a2 + v28);
    *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
    *(void *)uint64_t v29 = v31;
    long long v32 = *(_OWORD *)(v30 + 57);
    long long v34 = *(_OWORD *)(v30 + 32);
    long long v33 = *(_OWORD *)(v30 + 48);
    *(_OWORD *)(v29 + 16) = *(_OWORD *)(v30 + 16);
    *(_OWORD *)(v29 + 32) = v34;
    *(_OWORD *)(v29 + 48) = v33;
    *(_OWORD *)(v29 + 57) = v32;
    *(unsigned char *)(v29 + 73) = *(unsigned char *)(v30 + 73);
    LOBYTE(v31) = *(unsigned char *)(v30 + 76);
    *(_WORD *)(v29 + 74) = *(_WORD *)(v30 + 74);
    *(unsigned char *)(v29 + 76) = v31;
    *(unsigned char *)(v29 + 77) = *(unsigned char *)(v30 + 77);
    uint64_t v35 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v36 = v35[9];
    uint64_t v37 = (void *)(v29 + v36);
    uint64_t v38 = (const void *)(v30 + v36);
    uint64_t v39 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    uint64_t v42 = v35[10];
    uint64_t v43 = v29 + v42;
    uint64_t v44 = (uint64_t *)(v30 + v42);
    uint64_t v45 = *v44;
    *(unsigned char *)(v43 + 8) = *((unsigned char *)v44 + 8);
    *(void *)uint64_t v43 = v45;
    uint64_t v46 = v35[11];
    uint64_t v47 = (unsigned char *)(v29 + v46);
    uint64_t v48 = (unsigned char *)(v30 + v46);
    goto LABEL_14;
  }
  return a1;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v24 = a6;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      long long v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      *(void *)uint64_t v14 = *(void *)((char *)a2 + v13);
      long long v14[8] = *((unsigned char *)a2 + v13 + 8);
      long long v16 = *(_OWORD *)((char *)a2 + v13 + 32);
      *((_OWORD *)v14 + 1) = *(_OWORD *)((char *)a2 + v13 + 16);
      *((_OWORD *)v14 + 2) = v16;
      *((_OWORD *)v14 + 3) = *(_OWORD *)((char *)a2 + v13 + 48);
      *(_OWORD *)(v14 + 57) = *(_OWORD *)((char *)a2 + v13 + 57);
      v14[73] = *((unsigned char *)a2 + v13 + 73);
      *(_DWORD *)(v14 + 74) = *(_DWORD *)((char *)a2 + v13 + 74);
      v14[78] = *((unsigned char *)a2 + v13 + 78);
      long long v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v18 = v17[9];
      long long v19 = &v14[v18];
      long long v20 = &v15[v18];
      uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      uint64_t v42 = v17[10];
      uint64_t v43 = &v14[v42];
      uint64_t v44 = &v15[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      v14[v17[11]] = v15[v17[11]];
      uint64_t v45 = v17[12];
      uint64_t v40 = &v14[v45];
      uint64_t v41 = &v15[v45];
      goto LABEL_13;
    }
    *a1 = *a2;
    uint64_t v24 = a4;
  }
  uint64_t v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v24) + 36);
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)uint64_t v26 = *(void *)((char *)a2 + v25);
  v26[8] = *((unsigned char *)a2 + v25 + 8);
  long long v28 = *(_OWORD *)((char *)a2 + v25 + 32);
  *((_OWORD *)v26 + 1) = *(_OWORD *)((char *)a2 + v25 + 16);
  *((_OWORD *)v26 + 2) = v28;
  *((_OWORD *)v26 + 3) = *(_OWORD *)((char *)a2 + v25 + 48);
  *(_OWORD *)(v26 + 57) = *(_OWORD *)((char *)a2 + v25 + 57);
  v26[73] = *((unsigned char *)a2 + v25 + 73);
  v26[76] = *((unsigned char *)a2 + v25 + 76);
  *((_WORD *)v26 + 37) = *(_WORD *)((char *)a2 + v25 + 74);
  v26[77] = *((unsigned char *)a2 + v25 + 77);
  uint64_t v29 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v30 = v29[9];
  uint64_t v31 = &v26[v30];
  long long v32 = &v27[v30];
  uint64_t v33 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  uint64_t v36 = v29[10];
  uint64_t v37 = &v26[v36];
  uint64_t v38 = &v27[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  uint64_t v39 = v29[11];
  uint64_t v40 = &v26[v39];
  uint64_t v41 = &v27[v39];
LABEL_13:
  *uint64_t v40 = *v41;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)a1, a4);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v25 = a7;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        long long v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        uint64_t v15 = (char *)a1 + v14;
        long long v16 = (char *)a2 + v14;
        *(void *)uint64_t v15 = *(void *)((char *)a2 + v14);
        v15[8] = *((unsigned char *)a2 + v14 + 8);
        long long v17 = *(_OWORD *)((char *)a2 + v14 + 32);
        *((_OWORD *)v15 + 1) = *(_OWORD *)((char *)a2 + v14 + 16);
        *((_OWORD *)v15 + 2) = v17;
        *((_OWORD *)v15 + 3) = *(_OWORD *)((char *)a2 + v14 + 48);
        *(_OWORD *)(v15 + 57) = *(_OWORD *)((char *)a2 + v14 + 57);
        v15[73] = *((unsigned char *)a2 + v14 + 73);
        *(_DWORD *)(v15 + 74) = *(_DWORD *)((char *)a2 + v14 + 74);
        v15[78] = *((unsigned char *)a2 + v14 + 78);
        uint64_t v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v19 = v18[9];
        long long v20 = &v15[v19];
        uint64_t v21 = &v16[v19];
        uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v23 = *(void *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        uint64_t v43 = v18[10];
        uint64_t v44 = &v15[v43];
        uint64_t v45 = &v16[v43];
        *(void *)uint64_t v44 = *(void *)v45;
        v44[8] = v45[8];
        v15[v18[11]] = v16[v18[11]];
        uint64_t v46 = v18[12];
        uint64_t v41 = &v15[v46];
        uint64_t v42 = &v16[v46];
LABEL_14:
        *uint64_t v41 = *v42;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      uint64_t v25 = a5;
    }
    uint64_t v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v25) + 36);
    uint64_t v27 = (char *)a1 + v26;
    long long v28 = (char *)a2 + v26;
    *(void *)uint64_t v27 = *(void *)((char *)a2 + v26);
    v27[8] = *((unsigned char *)a2 + v26 + 8);
    long long v29 = *(_OWORD *)((char *)a2 + v26 + 32);
    *((_OWORD *)v27 + 1) = *(_OWORD *)((char *)a2 + v26 + 16);
    *((_OWORD *)v27 + 2) = v29;
    *((_OWORD *)v27 + 3) = *(_OWORD *)((char *)a2 + v26 + 48);
    *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v26 + 57);
    v27[73] = *((unsigned char *)a2 + v26 + 73);
    v27[76] = *((unsigned char *)a2 + v26 + 76);
    *((_WORD *)v27 + 37) = *(_WORD *)((char *)a2 + v26 + 74);
    v27[77] = *((unsigned char *)a2 + v26 + 77);
    uint64_t v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v31 = v30[9];
    long long v32 = &v27[v31];
    uint64_t v33 = &v28[v31];
    uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    uint64_t v37 = v30[10];
    uint64_t v38 = &v27[v37];
    uint64_t v39 = &v28[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    uint64_t v40 = v30[11];
    uint64_t v41 = &v27[v40];
    uint64_t v42 = &v28[v40];
    goto LABEL_14;
  }
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v20 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      uint64_t v21 = a1 + v20;
      uint64_t v22 = (uint64_t)a2 + v20;
      *(void *)uint64_t v21 = *(uint64_t *)((char *)a2 + v20);
      *(unsigned char *)(v21 + 8) = *((unsigned char *)a2 + v20 + 8);
      long long v23 = *(_OWORD *)((char *)a2 + v20 + 32);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)((char *)a2 + v20 + 16);
      *(_OWORD *)(v21 + 32) = v23;
      *(_OWORD *)(v21 + 48) = *(_OWORD *)((char *)a2 + v20 + 48);
      *(_OWORD *)(v21 + 57) = *(_OWORD *)((char *)a2 + v20 + 57);
      *(unsigned char *)(v21 + 73) = *((unsigned char *)a2 + v20 + 73);
      *(_WORD *)(v21 + 74) = *(_WORD *)((char *)a2 + v20 + 74);
      *(unsigned char *)(v21 + 76) = *((unsigned char *)a2 + v20 + 76);
      *(unsigned char *)(v21 + 77) = *((unsigned char *)a2 + v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v25 = v24[9];
      __dsta = (void *)(v21 + v25);
      uint64_t v26 = (const void *)(v22 + v25);
      uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v28 = *(void *)(v27 - 8);
      long long v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      if (v29(v26, 1, v27))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dsta, v26, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(__dsta, v26, v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(__dsta, 0, 1, v27);
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v7 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v9 = a1 + v8;
        uint64_t v10 = (uint64_t)a2 + v8;
        *(void *)uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
        *(unsigned char *)(v9 + 8) = *((unsigned char *)a2 + v8 + 8);
        long long v11 = *(_OWORD *)((char *)a2 + v8 + 32);
        *(_OWORD *)(v9 + 16) = *(_OWORD *)((char *)a2 + v8 + 16);
        *(_OWORD *)(v9 + 32) = v11;
        *(_OWORD *)(v9 + 48) = *(_OWORD *)((char *)a2 + v8 + 48);
        *(_OWORD *)(v9 + 57) = *(_OWORD *)((char *)a2 + v8 + 57);
        *(unsigned char *)(v9 + 73) = *((unsigned char *)a2 + v8 + 73);
        *(_DWORD *)(v9 + 74) = *(_DWORD *)((char *)a2 + v8 + 74);
        *(unsigned char *)(v9 + 78) = *((unsigned char *)a2 + v8 + 78);
        long long v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v13 = v12[9];
        __dst = (void *)(v9 + v13);
        uint64_t v14 = (const void *)(v10 + v13);
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        long long v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1, v15))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
        }
        uint64_t v39 = v12[10];
        uint64_t v40 = v9 + v39;
        uint64_t v41 = v10 + v39;
        *(void *)uint64_t v40 = *(void *)v41;
        *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
        *(unsigned char *)(v9 + v12[11]) = *(unsigned char *)(v10 + v12[11]);
        *(unsigned char *)(v9 + v12[12]) = *(unsigned char *)(v10 + v12[12]);
        goto LABEL_16;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v31 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      uint64_t v21 = a1 + v31;
      uint64_t v22 = (uint64_t)a2 + v31;
      *(void *)uint64_t v21 = *(uint64_t *)((char *)a2 + v31);
      *(unsigned char *)(v21 + 8) = *((unsigned char *)a2 + v31 + 8);
      long long v32 = *(_OWORD *)((char *)a2 + v31 + 32);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)((char *)a2 + v31 + 16);
      *(_OWORD *)(v21 + 32) = v32;
      *(_OWORD *)(v21 + 48) = *(_OWORD *)((char *)a2 + v31 + 48);
      *(_OWORD *)(v21 + 57) = *(_OWORD *)((char *)a2 + v31 + 57);
      *(unsigned char *)(v21 + 73) = *((unsigned char *)a2 + v31 + 73);
      *(_WORD *)(v21 + 74) = *(_WORD *)((char *)a2 + v31 + 74);
      *(unsigned char *)(v21 + 76) = *((unsigned char *)a2 + v31 + 76);
      *(unsigned char *)(v21 + 77) = *((unsigned char *)a2 + v31 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v33 = v24[9];
      uint64_t v46 = (void *)(v21 + v33);
      uint64_t v34 = (const void *)(v22 + v33);
      uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
      swift_unknownObjectRetain();
      if (v37(v34, 1, v35))
      {
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v46, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v46, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v46, 0, 1, v35);
      }
    }
    uint64_t v42 = v24[10];
    uint64_t v43 = v21 + v42;
    uint64_t v44 = v22 + v42;
    *(void *)uint64_t v43 = *(void *)v44;
    *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
    *(unsigned char *)(v21 + v24[11]) = *(unsigned char *)(v22 + v24[11]);
LABEL_16:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  uint64_t v19 = *a2;
  *(void *)a1 = *a2;
  a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
LABEL_6:
    uint64_t v4 = a1 + *(int *)(v3 + 20);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle(0);
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  uint64_t v6 = v4 + *(int *)(v5 + 36);
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v17 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = a2 + v17;
    *(void *)uint64_t v18 = *(void *)(a2 + v17);
    *(unsigned char *)(v18 + 8) = *(unsigned char *)(a2 + v17 + 8);
    long long v20 = *(_OWORD *)(a2 + v17 + 32);
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(a2 + v17 + 16);
    *(_OWORD *)(v18 + 32) = v20;
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(a2 + v17 + 48);
    *(_OWORD *)(v18 + 57) = *(_OWORD *)(a2 + v17 + 57);
    *(unsigned char *)(v18 + 73) = *(unsigned char *)(a2 + v17 + 73);
    *(_WORD *)(v18 + 74) = *(_WORD *)(a2 + v17 + 74);
    *(unsigned char *)(v18 + 76) = *(unsigned char *)(a2 + v17 + 76);
    *(unsigned char *)(v18 + 77) = *(unsigned char *)(a2 + v17 + 77);
    uint64_t v21 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v22 = v21[9];
    long long v23 = (void *)(v18 + v22);
    uint64_t v24 = (const void *)(v19 + v22);
    uint64_t v25 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
    swift_unknownObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v47 = v21[10];
    uint64_t v48 = v18 + v47;
    uint64_t v49 = v19 + v47;
    *(void *)uint64_t v48 = *(void *)v49;
    *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
    uint64_t v50 = v21[11];
    uint64_t v45 = (unsigned char *)(v18 + v50);
    uint64_t v46 = (unsigned char *)(v19 + v50);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    *(void *)uint64_t v7 = *(void *)(a2 + v6);
    *(unsigned char *)(v7 + 8) = *(unsigned char *)(a2 + v6 + 8);
    long long v9 = *(_OWORD *)(a2 + v6 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
    *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
    *(unsigned char *)(v7 + 73) = *(unsigned char *)(a2 + v6 + 73);
    *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
    *(unsigned char *)(v7 + 78) = *(unsigned char *)(a2 + v6 + 78);
    uint64_t v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v11 = v10[9];
    __dst = (void *)(v7 + v11);
    long long v12 = (const void *)(v8 + v11);
    uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v41 = v10[10];
    uint64_t v42 = v7 + v41;
    uint64_t v43 = v8 + v41;
    *(void *)uint64_t v42 = *(void *)v43;
    *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
    *(unsigned char *)(v7 + v10[11]) = *(unsigned char *)(v8 + v10[11]);
    uint64_t v44 = v10[12];
    uint64_t v45 = (unsigned char *)(v7 + v44);
    uint64_t v46 = (unsigned char *)(v8 + v44);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v29 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
    uint64_t v30 = a1 + v29;
    uint64_t v31 = a2 + v29;
    *(void *)uint64_t v30 = *(void *)(a2 + v29);
    *(unsigned char *)(v30 + 8) = *(unsigned char *)(a2 + v29 + 8);
    long long v32 = *(_OWORD *)(a2 + v29 + 32);
    *(_OWORD *)(v30 + 16) = *(_OWORD *)(a2 + v29 + 16);
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)(v30 + 48) = *(_OWORD *)(a2 + v29 + 48);
    *(_OWORD *)(v30 + 57) = *(_OWORD *)(a2 + v29 + 57);
    *(unsigned char *)(v30 + 73) = *(unsigned char *)(a2 + v29 + 73);
    *(_WORD *)(v30 + 74) = *(_WORD *)(a2 + v29 + 74);
    *(unsigned char *)(v30 + 76) = *(unsigned char *)(a2 + v29 + 76);
    *(unsigned char *)(v30 + 77) = *(unsigned char *)(a2 + v29 + 77);
    uint64_t v33 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v34 = v33[9];
    uint64_t v35 = (void *)(v30 + v34);
    uint64_t v36 = (const void *)(v31 + v34);
    uint64_t v37 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
    swift_unknownObjectRetain();
    if (v39(v36, 1, v37))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v51 = v33[10];
    uint64_t v52 = v30 + v51;
    uint64_t v53 = v31 + v51;
    *(void *)uint64_t v52 = *(void *)v53;
    *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
    uint64_t v54 = v33[11];
    uint64_t v45 = (unsigned char *)(v30 + v54);
    uint64_t v46 = (unsigned char *)(v31 + v54);
  }
  *uint64_t v45 = *v46;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v18 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      LOBYTE(v18) = *(unsigned char *)(a2 + v18 + 8);
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v18;
      long long v21 = *(_OWORD *)(v20 + 57);
      long long v23 = *(_OWORD *)(v20 + 32);
      long long v22 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v19 + 32) = v23;
      *(_OWORD *)(v19 + 48) = v22;
      *(_OWORD *)(v19 + 57) = v21;
      *(unsigned char *)(v19 + 73) = *(unsigned char *)(v20 + 73);
      LOWORD(v18) = *(_WORD *)(v20 + 74);
      *(unsigned char *)(v19 + 76) = *(unsigned char *)(v20 + 76);
      *(_WORD *)(v19 + 74) = v18;
      *(unsigned char *)(v19 + 77) = *(unsigned char *)(v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v25 = v24[9];
      uint64_t v26 = (void *)(v19 + v25);
      uint64_t v27 = (const void *)(v20 + v25);
      uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v30(v27, 1, v28))
      {
LABEL_9:
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v26, v27, *(void *)(*(void *)(v37 - 8) + 64));
LABEL_13:
        uint64_t v45 = v24[10];
        uint64_t v46 = v19 + v45;
        uint64_t v47 = (uint64_t *)(v20 + v45);
        uint64_t v48 = *v47;
        *(unsigned char *)(v46 + 8) = *((unsigned char *)v47 + 8);
        *(void *)uint64_t v46 = v48;
        uint64_t v49 = v24[11];
        uint64_t v43 = (unsigned char *)(v19 + v49);
        uint64_t v44 = (unsigned char *)(v20 + v49);
LABEL_14:
        *uint64_t v43 = *v44;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        LOBYTE(v5) = *(unsigned char *)(a2 + v5 + 8);
        *(void *)uint64_t v6 = *(void *)v7;
        *(unsigned char *)(v6 + 8) = v5;
        long long v8 = *(_OWORD *)(v7 + 57);
        long long v10 = *(_OWORD *)(v7 + 32);
        long long v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(unsigned char *)(v6 + 73) = *(unsigned char *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(unsigned char *)(v6 + 78) = *(unsigned char *)(v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        __dst = (void *)(v6 + v12);
        uint64_t v13 = (const void *)(v7 + v12);
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1, v14))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
        uint64_t v38 = v11[10];
        uint64_t v39 = v6 + v38;
        uint64_t v40 = (uint64_t *)(v7 + v38);
        uint64_t v41 = *v40;
        *(unsigned char *)(v39 + 8) = *((unsigned char *)v40 + 8);
        *(void *)uint64_t v39 = v41;
        *(unsigned char *)(v6 + v11[11]) = *(unsigned char *)(v7 + v11[11]);
        uint64_t v42 = v11[12];
        uint64_t v43 = (unsigned char *)(v6 + v42);
        uint64_t v44 = (unsigned char *)(v7 + v42);
        goto LABEL_14;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v31 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      uint64_t v19 = a1 + v31;
      uint64_t v20 = a2 + v31;
      LOBYTE(v31) = *(unsigned char *)(a2 + v31 + 8);
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v31;
      long long v32 = *(_OWORD *)(v20 + 57);
      long long v34 = *(_OWORD *)(v20 + 32);
      long long v33 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v19 + 32) = v34;
      *(_OWORD *)(v19 + 48) = v33;
      *(_OWORD *)(v19 + 57) = v32;
      *(unsigned char *)(v19 + 73) = *(unsigned char *)(v20 + 73);
      LOWORD(v31) = *(_WORD *)(v20 + 74);
      *(unsigned char *)(v19 + 76) = *(unsigned char *)(v20 + 76);
      *(_WORD *)(v19 + 74) = v31;
      *(unsigned char *)(v19 + 77) = *(unsigned char *)(v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v35 = v24[9];
      uint64_t v26 = (void *)(v19 + v35);
      uint64_t v27 = (const void *)(v20 + v35);
      uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v36(v27, 1, v28)) {
        goto LABEL_9;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    goto LABEL_13;
  }
  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      long long v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      uint64_t v7 = (char *)a1 + v6;
      long long v8 = (char *)a2 + v6;
      *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
      long long v7[8] = *((unsigned char *)a2 + v6 + 8);
      long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((unsigned char *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((unsigned char *)a2 + v6 + 78);
      long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v11 = v10[9];
      uint64_t v12 = &v7[v11];
      uint64_t v13 = &v8[v11];
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v35 = v10[10];
      uint64_t v36 = &v7[v35];
      uint64_t v37 = &v8[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      uint64_t v38 = v10[12];
      long long v33 = &v7[v38];
      long long v34 = &v8[v38];
      goto LABEL_13;
    }
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0);
  }
  uint64_t v18 = *(int *)(v17 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  v19[8] = *((unsigned char *)a2 + v18 + 8);
  long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((unsigned char *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((unsigned char *)a2 + v18 + 76);
  v19[77] = *((unsigned char *)a2 + v18 + 77);
  long long v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v23 = v22[9];
  uint64_t v24 = &v19[v23];
  uint64_t v25 = &v20[v23];
  uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = v22[10];
  uint64_t v30 = &v19[v29];
  uint64_t v31 = &v20[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = v22[11];
  long long v33 = &v19[v32];
  long long v34 = &v20[v32];
LABEL_13:
  *long long v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)a1, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        long long v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v7 = (char *)a1 + v6;
        long long v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        long long v7[8] = *((unsigned char *)a2 + v6 + 8);
        long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((unsigned char *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((unsigned char *)a2 + v6 + 78);
        long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v11 = v10[9];
        uint64_t v12 = &v7[v11];
        uint64_t v13 = &v8[v11];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        uint64_t v35 = v10[10];
        uint64_t v36 = &v7[v35];
        uint64_t v37 = &v8[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        uint64_t v38 = v10[12];
        long long v33 = &v7[v38];
        long long v34 = &v8[v38];
LABEL_14:
        *long long v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0);
    }
    uint64_t v18 = *(int *)(v17 + 20);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[8] = *((unsigned char *)a2 + v18 + 8);
    long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((unsigned char *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((unsigned char *)a2 + v18 + 76);
    v19[77] = *((unsigned char *)a2 + v18 + 77);
    long long v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v23 = v22[9];
    uint64_t v24 = &v19[v23];
    uint64_t v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    long long v33 = &v19[v32];
    long long v34 = &v20[v32];
    goto LABEL_14;
  }
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v19 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                    + 40);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        uint64_t v8 = *(void *)(a2 + v5);
        *(unsigned char *)(v6 + 8) = *(unsigned char *)(v7 + 8);
        *(void *)uint64_t v6 = v8;
        long long v9 = *(_OWORD *)(v7 + 57);
        long long v11 = *(_OWORD *)(v7 + 32);
        long long v10 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v11;
        *(_OWORD *)(v6 + 48) = v10;
        *(_OWORD *)(v6 + 57) = v9;
        *(unsigned char *)(v6 + 73) = *(unsigned char *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(unsigned char *)(v6 + 78) = *(unsigned char *)(v7 + 78);
        uint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v13 = v12[9];
        uint64_t v14 = (void *)(v6 + v13);
        uint64_t v15 = (const void *)(v7 + v13);
        uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        }
        uint64_t v41 = v12[10];
        uint64_t v42 = v6 + v41;
        uint64_t v43 = (uint64_t *)(v7 + v41);
        uint64_t v44 = *v43;
        *(unsigned char *)(v42 + 8) = *((unsigned char *)v43 + 8);
        *(void *)uint64_t v42 = v44;
        *(unsigned char *)(v6 + v12[11]) = *(unsigned char *)(v7 + v12[11]);
        uint64_t v45 = v12[12];
        uint64_t v39 = (unsigned char *)(v6 + v45);
        uint64_t v40 = (unsigned char *)(v7 + v45);
LABEL_14:
        *uint64_t v39 = *v40;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v19 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    }
    uint64_t v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v19) + 36);
    uint64_t v21 = a1 + v20;
    uint64_t v22 = a2 + v20;
    uint64_t v23 = *(void *)(a2 + v20);
    *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
    *(void *)uint64_t v21 = v23;
    long long v24 = *(_OWORD *)(v22 + 57);
    long long v26 = *(_OWORD *)(v22 + 32);
    long long v25 = *(_OWORD *)(v22 + 48);
    *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
    *(_OWORD *)(v21 + 32) = v26;
    *(_OWORD *)(v21 + 48) = v25;
    *(_OWORD *)(v21 + 57) = v24;
    *(unsigned char *)(v21 + 73) = *(unsigned char *)(v22 + 73);
    LOBYTE(v23) = *(unsigned char *)(v22 + 76);
    *(_WORD *)(v21 + 74) = *(_WORD *)(v22 + 74);
    *(unsigned char *)(v21 + 76) = v23;
    *(unsigned char *)(v21 + 77) = *(unsigned char *)(v22 + 77);
    uint64_t v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v28 = v27[9];
    uint64_t v29 = (void *)(v21 + v28);
    uint64_t v30 = (const void *)(v22 + v28);
    uint64_t v31 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    uint64_t v34 = v27[10];
    uint64_t v35 = v21 + v34;
    uint64_t v36 = (uint64_t *)(v22 + v34);
    uint64_t v37 = *v36;
    *(unsigned char *)(v35 + 8) = *((unsigned char *)v36 + 8);
    *(void *)uint64_t v35 = v37;
    uint64_t v38 = v27[11];
    uint64_t v39 = (unsigned char *)(v21 + v38);
    uint64_t v40 = (unsigned char *)(v22 + v38);
    goto LABEL_14;
  }
  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)a1, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v17 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        long long v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                    + 40);
        uint64_t v7 = (char *)a1 + v6;
        uint64_t v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        long long v7[8] = *((unsigned char *)a2 + v6 + 8);
        long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((unsigned char *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((unsigned char *)a2 + v6 + 78);
        long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v11 = v10[9];
        uint64_t v12 = &v7[v11];
        uint64_t v13 = &v8[v11];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        uint64_t v35 = v10[10];
        uint64_t v36 = &v7[v35];
        uint64_t v37 = &v8[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        uint64_t v38 = v10[12];
        uint64_t v33 = &v7[v38];
        uint64_t v34 = &v8[v38];
LABEL_14:
        *uint64_t v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      uint64_t v17 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    }
    uint64_t v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v17) + 36);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[8] = *((unsigned char *)a2 + v18 + 8);
    long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((unsigned char *)a2 + v18 + 73);
    v19[76] = *((unsigned char *)a2 + v18 + 76);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[77] = *((unsigned char *)a2 + v18 + 77);
    uint64_t v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v23 = v22[9];
    long long v24 = &v19[v23];
    long long v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    uint64_t v33 = &v19[v32];
    uint64_t v34 = &v20[v32];
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181B0A88C);
}

uint64_t sub_181B0A88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181B0A8B8);
}

uint64_t sub_181B0A8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int v12 = *(_DWORD *)(*(void *)(a4(0) - 8) + 80);
  if ((v12 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a7) + 36);
      uint64_t v28 = a1 + v27;
      uint64_t v29 = (uint64_t)a2 + v27;
      *(void *)uint64_t v28 = *(uint64_t *)((char *)a2 + v27);
      *(unsigned char *)(v28 + 8) = *((unsigned char *)a2 + v27 + 8);
      long long v30 = *(_OWORD *)((char *)a2 + v27 + 32);
      *(_OWORD *)(v28 + 16) = *(_OWORD *)((char *)a2 + v27 + 16);
      *(_OWORD *)(v28 + 32) = v30;
      *(_OWORD *)(v28 + 48) = *(_OWORD *)((char *)a2 + v27 + 48);
      *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)a2 + v27 + 57);
      *(unsigned char *)(v28 + 73) = *((unsigned char *)a2 + v27 + 73);
      *(unsigned char *)(v28 + 76) = *((unsigned char *)a2 + v27 + 76);
      *(_WORD *)(v28 + 74) = *(_WORD *)((char *)a2 + v27 + 74);
      *(unsigned char *)(v28 + 77) = *((unsigned char *)a2 + v27 + 77);
      uint64_t v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v32 = v31[9];
      uint64_t v33 = (void *)(v28 + v32);
      uint64_t v34 = (const void *)(v29 + v32);
      uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
LABEL_10:
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
LABEL_14:
        uint64_t v44 = v31[10];
        uint64_t v45 = v28 + v44;
        uint64_t v46 = v29 + v44;
        *(void *)uint64_t v45 = *(void *)v46;
        *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
        *(unsigned char *)(v28 + v31[11]) = *(unsigned char *)(v29 + v31[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v14 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v14;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        uint64_t v16 = a1 + v15;
        uint64_t v17 = (uint64_t)a2 + v15;
        *(void *)uint64_t v16 = *(uint64_t *)((char *)a2 + v15);
        *(unsigned char *)(v16 + 8) = *((unsigned char *)a2 + v15 + 8);
        long long v18 = *(_OWORD *)((char *)a2 + v15 + 32);
        *(_OWORD *)(v16 + 16) = *(_OWORD *)((char *)a2 + v15 + 16);
        *(_OWORD *)(v16 + 32) = v18;
        *(_OWORD *)(v16 + 48) = *(_OWORD *)((char *)a2 + v15 + 48);
        *(_OWORD *)(v16 + 57) = *(_OWORD *)((char *)a2 + v15 + 57);
        *(unsigned char *)(v16 + 73) = *((unsigned char *)a2 + v15 + 73);
        *(_DWORD *)(v16 + 74) = *(_DWORD *)((char *)a2 + v15 + 74);
        *(unsigned char *)(v16 + 78) = *((unsigned char *)a2 + v15 + 78);
        uint64_t v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v20 = v19[9];
        long long v21 = (void *)(v16 + v20);
        uint64_t v22 = (const void *)(v17 + v20);
        uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v21, v22, v23);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        uint64_t v41 = v19[10];
        uint64_t v42 = v16 + v41;
        uint64_t v43 = v17 + v41;
        *(void *)uint64_t v42 = *(void *)v43;
        *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
        *(unsigned char *)(v16 + v19[11]) = *(unsigned char *)(v17 + v19[11]);
        *(unsigned char *)(v16 + v19[12]) = *(unsigned char *)(v17 + v19[12]);
        goto LABEL_15;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v37 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 36);
      uint64_t v28 = a1 + v37;
      uint64_t v29 = (uint64_t)a2 + v37;
      *(void *)uint64_t v28 = *(uint64_t *)((char *)a2 + v37);
      *(unsigned char *)(v28 + 8) = *((unsigned char *)a2 + v37 + 8);
      long long v38 = *(_OWORD *)((char *)a2 + v37 + 32);
      *(_OWORD *)(v28 + 16) = *(_OWORD *)((char *)a2 + v37 + 16);
      *(_OWORD *)(v28 + 32) = v38;
      *(_OWORD *)(v28 + 48) = *(_OWORD *)((char *)a2 + v37 + 48);
      *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)a2 + v37 + 57);
      *(unsigned char *)(v28 + 73) = *((unsigned char *)a2 + v37 + 73);
      *(unsigned char *)(v28 + 76) = *((unsigned char *)a2 + v37 + 76);
      *(_WORD *)(v28 + 74) = *(_WORD *)((char *)a2 + v37 + 74);
      *(unsigned char *)(v28 + 77) = *((unsigned char *)a2 + v37 + 77);
      uint64_t v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v39 = v31[9];
      uint64_t v33 = (void *)(v28 + v39);
      uint64_t v34 = (const void *)(v29 + v39);
      uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35)) {
        goto LABEL_10;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    goto LABEL_14;
  }
  uint64_t v26 = *a2;
  *(void *)a1 = *a2;
  a1 = v26 + ((v12 + 16) & ~(unint64_t)v12);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  a3(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = a6;
LABEL_6:
    uint64_t v12 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v11) + 36);
    uint64_t v13 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v11 = a4;
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
  uint64_t v13 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  uint64_t v14 = v12 + *(int *)(v13 + 36);
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v17 = *(void *)(v15 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15);
  if (!result)
  {
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
    return v16(v14, v15);
  }
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  a4(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    uint64_t v25 = a7;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v13 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v13;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
      uint64_t v15 = a1 + v14;
      uint64_t v16 = a2 + v14;
      *(void *)uint64_t v15 = *(void *)(a2 + v14);
      *(unsigned char *)(v15 + 8) = *(unsigned char *)(a2 + v14 + 8);
      long long v17 = *(_OWORD *)(a2 + v14 + 32);
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(a2 + v14 + 16);
      *(_OWORD *)(v15 + 32) = v17;
      *(_OWORD *)(v15 + 48) = *(_OWORD *)(a2 + v14 + 48);
      *(_OWORD *)(v15 + 57) = *(_OWORD *)(a2 + v14 + 57);
      *(unsigned char *)(v15 + 73) = *(unsigned char *)(a2 + v14 + 73);
      *(_DWORD *)(v15 + 74) = *(_DWORD *)(a2 + v14 + 74);
      *(unsigned char *)(v15 + 78) = *(unsigned char *)(a2 + v14 + 78);
      long long v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v19 = v18[9];
      uint64_t v20 = (void *)(v15 + v19);
      long long v21 = (const void *)(v16 + v19);
      uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      uint64_t v43 = v18[10];
      uint64_t v44 = v15 + v43;
      uint64_t v45 = v16 + v43;
      *(void *)uint64_t v44 = *(void *)v45;
      *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
      *(unsigned char *)(v15 + v18[11]) = *(unsigned char *)(v16 + v18[11]);
      uint64_t v46 = v18[12];
      uint64_t v41 = (unsigned char *)(v15 + v46);
      uint64_t v42 = (unsigned char *)(v16 + v46);
      goto LABEL_13;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    uint64_t v25 = a5;
  }
  uint64_t v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v25) + 36);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)uint64_t v27 = *(void *)(a2 + v26);
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(a2 + v26 + 8);
  long long v29 = *(_OWORD *)(a2 + v26 + 32);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)(a2 + v26 + 16);
  *(_OWORD *)(v27 + 32) = v29;
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(a2 + v26 + 48);
  *(_OWORD *)(v27 + 57) = *(_OWORD *)(a2 + v26 + 57);
  *(unsigned char *)(v27 + 73) = *(unsigned char *)(a2 + v26 + 73);
  *(unsigned char *)(v27 + 76) = *(unsigned char *)(a2 + v26 + 76);
  *(_WORD *)(v27 + 74) = *(_WORD *)(a2 + v26 + 74);
  *(unsigned char *)(v27 + 77) = *(unsigned char *)(a2 + v26 + 77);
  long long v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v31 = v30[9];
  uint64_t v32 = (void *)(v27 + v31);
  uint64_t v33 = (const void *)(v28 + v31);
  uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v37 = v30[10];
  uint64_t v38 = v27 + v37;
  uint64_t v39 = v28 + v37;
  *(void *)uint64_t v38 = *(void *)v39;
  *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
  uint64_t v40 = v30[11];
  uint64_t v41 = (unsigned char *)(v27 + v40);
  uint64_t v42 = (unsigned char *)(v28 + v40);
LABEL_13:
  *uint64_t v41 = *v42;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v19 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                    + 40);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        uint64_t v8 = *(void *)(a2 + v5);
        *(unsigned char *)(v6 + 8) = *(unsigned char *)(v7 + 8);
        *(void *)uint64_t v6 = v8;
        long long v9 = *(_OWORD *)(v7 + 57);
        long long v11 = *(_OWORD *)(v7 + 32);
        long long v10 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v11;
        *(_OWORD *)(v6 + 48) = v10;
        *(_OWORD *)(v6 + 57) = v9;
        *(unsigned char *)(v6 + 73) = *(unsigned char *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(unsigned char *)(v6 + 78) = *(unsigned char *)(v7 + 78);
        uint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v13 = v12[9];
        uint64_t v14 = (void *)(v6 + v13);
        uint64_t v15 = (const void *)(v7 + v13);
        uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        }
        uint64_t v41 = v12[10];
        uint64_t v42 = v6 + v41;
        uint64_t v43 = (uint64_t *)(v7 + v41);
        uint64_t v44 = *v43;
        *(unsigned char *)(v42 + 8) = *((unsigned char *)v43 + 8);
        *(void *)uint64_t v42 = v44;
        *(unsigned char *)(v6 + v12[11]) = *(unsigned char *)(v7 + v12[11]);
        uint64_t v45 = v12[12];
        uint64_t v39 = (unsigned char *)(v6 + v45);
        uint64_t v40 = (unsigned char *)(v7 + v45);
LABEL_14:
        *uint64_t v39 = *v40;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v19 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    }
    uint64_t v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v19) + 36);
    uint64_t v21 = a1 + v20;
    uint64_t v22 = a2 + v20;
    uint64_t v23 = *(void *)(a2 + v20);
    *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
    *(void *)uint64_t v21 = v23;
    long long v24 = *(_OWORD *)(v22 + 57);
    long long v26 = *(_OWORD *)(v22 + 32);
    long long v25 = *(_OWORD *)(v22 + 48);
    *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
    *(_OWORD *)(v21 + 32) = v26;
    *(_OWORD *)(v21 + 48) = v25;
    *(_OWORD *)(v21 + 57) = v24;
    *(unsigned char *)(v21 + 73) = *(unsigned char *)(v22 + 73);
    LOBYTE(v23) = *(unsigned char *)(v22 + 76);
    *(_WORD *)(v21 + 74) = *(_WORD *)(v22 + 74);
    *(unsigned char *)(v21 + 76) = v23;
    *(unsigned char *)(v21 + 77) = *(unsigned char *)(v22 + 77);
    uint64_t v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v28 = v27[9];
    long long v29 = (void *)(v21 + v28);
    long long v30 = (const void *)(v22 + v28);
    uint64_t v31 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    uint64_t v34 = v27[10];
    uint64_t v35 = v21 + v34;
    uint64_t v36 = (uint64_t *)(v22 + v34);
    uint64_t v37 = *v36;
    *(unsigned char *)(v35 + 8) = *((unsigned char *)v36 + 8);
    *(void *)uint64_t v35 = v37;
    uint64_t v38 = v27[11];
    uint64_t v39 = (unsigned char *)(v21 + v38);
    uint64_t v40 = (unsigned char *)(v22 + v38);
    goto LABEL_14;
  }
  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3, void (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  a4(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    long long v25 = a7;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      long long v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      *(void *)uint64_t v15 = *(void *)((char *)a2 + v14);
      v15[8] = *((unsigned char *)a2 + v14 + 8);
      long long v17 = *(_OWORD *)((char *)a2 + v14 + 32);
      *((_OWORD *)v15 + 1) = *(_OWORD *)((char *)a2 + v14 + 16);
      *((_OWORD *)v15 + 2) = v17;
      *((_OWORD *)v15 + 3) = *(_OWORD *)((char *)a2 + v14 + 48);
      *(_OWORD *)(v15 + 57) = *(_OWORD *)((char *)a2 + v14 + 57);
      v15[73] = *((unsigned char *)a2 + v14 + 73);
      *(_DWORD *)(v15 + 74) = *(_DWORD *)((char *)a2 + v14 + 74);
      v15[78] = *((unsigned char *)a2 + v14 + 78);
      uint64_t v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v19 = v18[9];
      uint64_t v20 = &v15[v19];
      uint64_t v21 = &v16[v19];
      uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      uint64_t v43 = v18[10];
      uint64_t v44 = &v15[v43];
      uint64_t v45 = &v16[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      v15[v18[11]] = v16[v18[11]];
      uint64_t v46 = v18[12];
      uint64_t v41 = &v15[v46];
      uint64_t v42 = &v16[v46];
      goto LABEL_13;
    }
    *a1 = *a2;
    long long v25 = a5;
  }
  uint64_t v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v25) + 36);
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  *(void *)uint64_t v27 = *(void *)((char *)a2 + v26);
  v27[8] = *((unsigned char *)a2 + v26 + 8);
  long long v29 = *(_OWORD *)((char *)a2 + v26 + 32);
  *((_OWORD *)v27 + 1) = *(_OWORD *)((char *)a2 + v26 + 16);
  *((_OWORD *)v27 + 2) = v29;
  *((_OWORD *)v27 + 3) = *(_OWORD *)((char *)a2 + v26 + 48);
  *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v26 + 57);
  v27[73] = *((unsigned char *)a2 + v26 + 73);
  v27[76] = *((unsigned char *)a2 + v26 + 76);
  *((_WORD *)v27 + 37) = *(_WORD *)((char *)a2 + v26 + 74);
  v27[77] = *((unsigned char *)a2 + v26 + 77);
  long long v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v31 = v30[9];
  uint64_t v32 = &v27[v31];
  uint64_t v33 = &v28[v31];
  uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v37 = v30[10];
  uint64_t v38 = &v27[v37];
  uint64_t v39 = &v28[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  v38[8] = v39[8];
  uint64_t v40 = v30[11];
  uint64_t v41 = &v27[v40];
  uint64_t v42 = &v28[v40];
LABEL_13:
  *uint64_t v41 = *v42;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)a1, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      long long v17 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        long long v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                    + 40);
        uint64_t v7 = (char *)a1 + v6;
        uint64_t v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        long long v7[8] = *((unsigned char *)a2 + v6 + 8);
        long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((unsigned char *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((unsigned char *)a2 + v6 + 78);
        long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v11 = v10[9];
        uint64_t v12 = &v7[v11];
        long long v13 = &v8[v11];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        uint64_t v35 = v10[10];
        uint64_t v36 = &v7[v35];
        uint64_t v37 = &v8[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        uint64_t v38 = v10[12];
        uint64_t v33 = &v7[v38];
        uint64_t v34 = &v8[v38];
LABEL_14:
        *uint64_t v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      long long v17 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    }
    uint64_t v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v17) + 36);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[8] = *((unsigned char *)a2 + v18 + 8);
    long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((unsigned char *)a2 + v18 + 73);
    v19[76] = *((unsigned char *)a2 + v18 + 76);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[77] = *((unsigned char *)a2 + v18 + 77);
    uint64_t v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v23 = v22[9];
    uint64_t v24 = &v19[v23];
    long long v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = v22[10];
    long long v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)long long v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    uint64_t v33 = &v19[v32];
    uint64_t v34 = &v20[v32];
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181B0BF6C);
}

uint64_t sub_181B0BF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181B0BF98);
}

uint64_t sub_181B0BF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0)
                             - 8)
                 + 80);
  if ((v4 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = (uint64_t)a2 + v19;
      *(void *)uint64_t v20 = *(uint64_t *)((char *)a2 + v19);
      *(unsigned char *)(v20 + 8) = *((unsigned char *)a2 + v19 + 8);
      long long v22 = *(_OWORD *)((char *)a2 + v19 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v19 + 16);
      *(_OWORD *)(v20 + 32) = v22;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v19 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
      *(unsigned char *)(v20 + 73) = *((unsigned char *)a2 + v19 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v19 + 74);
      *(unsigned char *)(v20 + 76) = *((unsigned char *)a2 + v19 + 76);
      *(unsigned char *)(v20 + 77) = *((unsigned char *)a2 + v19 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v24 = v23[9];
      __dsta = (void *)(v20 + v24);
      long long v25 = (const void *)(v21 + v24);
      uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
      swift_unknownObjectRetain();
      if (v28(v25, 1, v26))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dsta, v25, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(__dsta, v25, v26);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(__dsta, 0, 1, v26);
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v6 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v6;
        uint64_t v7 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v8 = a1 + v7;
        uint64_t v9 = (uint64_t)a2 + v7;
        *(void *)uint64_t v8 = *(uint64_t *)((char *)a2 + v7);
        *(unsigned char *)(v8 + 8) = *((unsigned char *)a2 + v7 + 8);
        long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)((char *)a2 + v7 + 16);
        *(_OWORD *)(v8 + 32) = v10;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)((char *)a2 + v7 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
        *(unsigned char *)(v8 + 73) = *((unsigned char *)a2 + v7 + 73);
        *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
        *(unsigned char *)(v8 + 78) = *((unsigned char *)a2 + v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        __dst = (void *)(v8 + v12);
        long long v13 = (const void *)(v9 + v12);
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1, v14))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
        uint64_t v38 = v11[10];
        uint64_t v39 = v8 + v38;
        uint64_t v40 = v9 + v38;
        *(void *)uint64_t v39 = *(void *)v40;
        *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
        *(unsigned char *)(v8 + v11[11]) = *(unsigned char *)(v9 + v11[11]);
        *(unsigned char *)(v8 + v11[12]) = *(unsigned char *)(v9 + v11[12]);
        goto LABEL_16;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      uint64_t v20 = a1 + v30;
      uint64_t v21 = (uint64_t)a2 + v30;
      *(void *)uint64_t v20 = *(uint64_t *)((char *)a2 + v30);
      *(unsigned char *)(v20 + 8) = *((unsigned char *)a2 + v30 + 8);
      long long v31 = *(_OWORD *)((char *)a2 + v30 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v30 + 16);
      *(_OWORD *)(v20 + 32) = v31;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v30 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v30 + 57);
      *(unsigned char *)(v20 + 73) = *((unsigned char *)a2 + v30 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v30 + 74);
      *(unsigned char *)(v20 + 76) = *((unsigned char *)a2 + v30 + 76);
      *(unsigned char *)(v20 + 77) = *((unsigned char *)a2 + v30 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v32 = v23[9];
      uint64_t v45 = (void *)(v20 + v32);
      uint64_t v33 = (const void *)(v21 + v32);
      uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
      swift_unknownObjectRetain();
      if (v36(v33, 1, v34))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v45, v33, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v45, v33, v34);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v45, 0, 1, v34);
      }
    }
    uint64_t v41 = v23[10];
    uint64_t v42 = v20 + v41;
    uint64_t v43 = v21 + v41;
    *(void *)uint64_t v42 = *(void *)v43;
    *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
    *(unsigned char *)(v20 + v23[11]) = *(unsigned char *)(v21 + v23[11]);
LABEL_16:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  uint64_t v18 = *a2;
  *(void *)a1 = *a2;
  a1 = v18 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1)
{
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
LABEL_6:
    uint64_t v4 = a1 + *(int *)(v3 + 20);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle(0);
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  uint64_t v6 = v4 + *(int *)(v5 + 36);
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v17 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = a2 + v17;
    *(void *)uint64_t v18 = *(void *)(a2 + v17);
    *(unsigned char *)(v18 + 8) = *(unsigned char *)(a2 + v17 + 8);
    long long v20 = *(_OWORD *)(a2 + v17 + 32);
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(a2 + v17 + 16);
    *(_OWORD *)(v18 + 32) = v20;
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(a2 + v17 + 48);
    *(_OWORD *)(v18 + 57) = *(_OWORD *)(a2 + v17 + 57);
    *(unsigned char *)(v18 + 73) = *(unsigned char *)(a2 + v17 + 73);
    *(_WORD *)(v18 + 74) = *(_WORD *)(a2 + v17 + 74);
    *(unsigned char *)(v18 + 76) = *(unsigned char *)(a2 + v17 + 76);
    *(unsigned char *)(v18 + 77) = *(unsigned char *)(a2 + v17 + 77);
    uint64_t v21 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v22 = v21[9];
    uint64_t v23 = (void *)(v18 + v22);
    uint64_t v24 = (const void *)(v19 + v22);
    uint64_t v25 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
    swift_unknownObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v47 = v21[10];
    uint64_t v48 = v18 + v47;
    uint64_t v49 = v19 + v47;
    *(void *)uint64_t v48 = *(void *)v49;
    *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
    uint64_t v50 = v21[11];
    uint64_t v45 = (unsigned char *)(v18 + v50);
    uint64_t v46 = (unsigned char *)(v19 + v50);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    *(void *)uint64_t v7 = *(void *)(a2 + v6);
    *(unsigned char *)(v7 + 8) = *(unsigned char *)(a2 + v6 + 8);
    long long v9 = *(_OWORD *)(a2 + v6 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
    *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
    *(unsigned char *)(v7 + 73) = *(unsigned char *)(a2 + v6 + 73);
    *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
    *(unsigned char *)(v7 + 78) = *(unsigned char *)(a2 + v6 + 78);
    long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v11 = v10[9];
    __dst = (void *)(v7 + v11);
    uint64_t v12 = (const void *)(v8 + v11);
    uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v41 = v10[10];
    uint64_t v42 = v7 + v41;
    uint64_t v43 = v8 + v41;
    *(void *)uint64_t v42 = *(void *)v43;
    *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
    *(unsigned char *)(v7 + v10[11]) = *(unsigned char *)(v8 + v10[11]);
    uint64_t v44 = v10[12];
    uint64_t v45 = (unsigned char *)(v7 + v44);
    uint64_t v46 = (unsigned char *)(v8 + v44);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v29 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
    uint64_t v30 = a1 + v29;
    uint64_t v31 = a2 + v29;
    *(void *)uint64_t v30 = *(void *)(a2 + v29);
    *(unsigned char *)(v30 + 8) = *(unsigned char *)(a2 + v29 + 8);
    long long v32 = *(_OWORD *)(a2 + v29 + 32);
    *(_OWORD *)(v30 + 16) = *(_OWORD *)(a2 + v29 + 16);
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)(v30 + 48) = *(_OWORD *)(a2 + v29 + 48);
    *(_OWORD *)(v30 + 57) = *(_OWORD *)(a2 + v29 + 57);
    *(unsigned char *)(v30 + 73) = *(unsigned char *)(a2 + v29 + 73);
    *(_WORD *)(v30 + 74) = *(_WORD *)(a2 + v29 + 74);
    *(unsigned char *)(v30 + 76) = *(unsigned char *)(a2 + v29 + 76);
    *(unsigned char *)(v30 + 77) = *(unsigned char *)(a2 + v29 + 77);
    uint64_t v33 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v34 = v33[9];
    uint64_t v35 = (void *)(v30 + v34);
    uint64_t v36 = (const void *)(v31 + v34);
    uint64_t v37 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
    swift_unknownObjectRetain();
    if (v39(v36, 1, v37))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v51 = v33[10];
    uint64_t v52 = v30 + v51;
    uint64_t v53 = v31 + v51;
    *(void *)uint64_t v52 = *(void *)v53;
    *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
    uint64_t v54 = v33[11];
    uint64_t v45 = (unsigned char *)(v30 + v54);
    uint64_t v46 = (unsigned char *)(v31 + v54);
  }
  *uint64_t v45 = *v46;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v18 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      LOBYTE(v18) = *(unsigned char *)(a2 + v18 + 8);
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v18;
      long long v21 = *(_OWORD *)(v20 + 57);
      long long v23 = *(_OWORD *)(v20 + 32);
      long long v22 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v19 + 32) = v23;
      *(_OWORD *)(v19 + 48) = v22;
      *(_OWORD *)(v19 + 57) = v21;
      *(unsigned char *)(v19 + 73) = *(unsigned char *)(v20 + 73);
      LOWORD(v18) = *(_WORD *)(v20 + 74);
      *(unsigned char *)(v19 + 76) = *(unsigned char *)(v20 + 76);
      *(_WORD *)(v19 + 74) = v18;
      *(unsigned char *)(v19 + 77) = *(unsigned char *)(v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v25 = v24[9];
      uint64_t v26 = (void *)(v19 + v25);
      uint64_t v27 = (const void *)(v20 + v25);
      uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v30(v27, 1, v28))
      {
LABEL_9:
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v26, v27, *(void *)(*(void *)(v37 - 8) + 64));
LABEL_13:
        uint64_t v45 = v24[10];
        uint64_t v46 = v19 + v45;
        uint64_t v47 = (uint64_t *)(v20 + v45);
        uint64_t v48 = *v47;
        *(unsigned char *)(v46 + 8) = *((unsigned char *)v47 + 8);
        *(void *)uint64_t v46 = v48;
        uint64_t v49 = v24[11];
        uint64_t v43 = (unsigned char *)(v19 + v49);
        uint64_t v44 = (unsigned char *)(v20 + v49);
LABEL_14:
        *uint64_t v43 = *v44;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        LOBYTE(v5) = *(unsigned char *)(a2 + v5 + 8);
        *(void *)uint64_t v6 = *(void *)v7;
        *(unsigned char *)(v6 + 8) = v5;
        long long v8 = *(_OWORD *)(v7 + 57);
        long long v10 = *(_OWORD *)(v7 + 32);
        long long v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(unsigned char *)(v6 + 73) = *(unsigned char *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(unsigned char *)(v6 + 78) = *(unsigned char *)(v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        __dst = (void *)(v6 + v12);
        uint64_t v13 = (const void *)(v7 + v12);
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1, v14))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
        uint64_t v38 = v11[10];
        uint64_t v39 = v6 + v38;
        uint64_t v40 = (uint64_t *)(v7 + v38);
        uint64_t v41 = *v40;
        *(unsigned char *)(v39 + 8) = *((unsigned char *)v40 + 8);
        *(void *)uint64_t v39 = v41;
        *(unsigned char *)(v6 + v11[11]) = *(unsigned char *)(v7 + v11[11]);
        uint64_t v42 = v11[12];
        uint64_t v43 = (unsigned char *)(v6 + v42);
        uint64_t v44 = (unsigned char *)(v7 + v42);
        goto LABEL_14;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v31 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      uint64_t v19 = a1 + v31;
      uint64_t v20 = a2 + v31;
      LOBYTE(v31) = *(unsigned char *)(a2 + v31 + 8);
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v31;
      long long v32 = *(_OWORD *)(v20 + 57);
      long long v34 = *(_OWORD *)(v20 + 32);
      long long v33 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v19 + 32) = v34;
      *(_OWORD *)(v19 + 48) = v33;
      *(_OWORD *)(v19 + 57) = v32;
      *(unsigned char *)(v19 + 73) = *(unsigned char *)(v20 + 73);
      LOWORD(v31) = *(_WORD *)(v20 + 74);
      *(unsigned char *)(v19 + 76) = *(unsigned char *)(v20 + 76);
      *(_WORD *)(v19 + 74) = v31;
      *(unsigned char *)(v19 + 77) = *(unsigned char *)(v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v35 = v24[9];
      uint64_t v26 = (void *)(v19 + v35);
      uint64_t v27 = (const void *)(v20 + v35);
      uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v36(v27, 1, v28)) {
        goto LABEL_9;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    goto LABEL_13;
  }
  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(_OWORD *a1, _OWORD *a2)
{
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      long long v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      uint64_t v7 = (char *)a1 + v6;
      long long v8 = (char *)a2 + v6;
      *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
      long long v7[8] = *((unsigned char *)a2 + v6 + 8);
      long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((unsigned char *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((unsigned char *)a2 + v6 + 78);
      long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v11 = v10[9];
      uint64_t v12 = &v7[v11];
      uint64_t v13 = &v8[v11];
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v35 = v10[10];
      uint64_t v36 = &v7[v35];
      uint64_t v37 = &v8[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      uint64_t v38 = v10[12];
      long long v33 = &v7[v38];
      long long v34 = &v8[v38];
      goto LABEL_13;
    }
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0);
  }
  uint64_t v18 = *(int *)(v17 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  v19[8] = *((unsigned char *)a2 + v18 + 8);
  long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((unsigned char *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((unsigned char *)a2 + v18 + 76);
  v19[77] = *((unsigned char *)a2 + v18 + 77);
  long long v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v23 = v22[9];
  uint64_t v24 = &v19[v23];
  uint64_t v25 = &v20[v23];
  uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = v22[10];
  uint64_t v30 = &v19[v29];
  uint64_t v31 = &v20[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = v22[11];
  long long v33 = &v19[v32];
  long long v34 = &v20[v32];
LABEL_13:
  *long long v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)a1, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        long long v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v7 = (char *)a1 + v6;
        long long v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        long long v7[8] = *((unsigned char *)a2 + v6 + 8);
        long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((unsigned char *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((unsigned char *)a2 + v6 + 78);
        long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v11 = v10[9];
        uint64_t v12 = &v7[v11];
        uint64_t v13 = &v8[v11];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        uint64_t v35 = v10[10];
        uint64_t v36 = &v7[v35];
        uint64_t v37 = &v8[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        uint64_t v38 = v10[12];
        long long v33 = &v7[v38];
        long long v34 = &v8[v38];
LABEL_14:
        *long long v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0);
    }
    uint64_t v18 = *(int *)(v17 + 20);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[8] = *((unsigned char *)a2 + v18 + 8);
    long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((unsigned char *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((unsigned char *)a2 + v18 + 76);
    v19[77] = *((unsigned char *)a2 + v18 + 77);
    long long v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v23 = v22[9];
    uint64_t v24 = &v19[v23];
    uint64_t v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    long long v33 = &v19[v32];
    long long v34 = &v20[v32];
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181B0D8A4);
}

uint64_t sub_181B0D8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181B0D8D0);
}

uint64_t sub_181B0D8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

char *initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.CodableStorage(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  uint64_t v6 = *(void *)(a3 - 8);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v7 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v7;
      uint64_t v8 = *((void *)a2 + 3);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a1 + 3) = v8;
      uint64_t v9 = *((void *)a2 + 5);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *((void *)a1 + 5) = v9;
      *((void *)a1 + 6) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      long long v10 = (void *)*((void *)a2 + 9);
      uint64_t v11 = *((void *)a2 + 10);
      *((void *)a1 + 9) = v10;
      *((void *)a1 + 10) = v11;
      uint64_t v12 = *((void *)a2 + 12);
      *((void *)a1 + 11) = *((void *)a2 + 11);
      *((void *)a1 + 12) = v12;
      *((void *)a1 + 13) = *((void *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      id v13 = v10;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 8u:
      uint64_t v16 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v16;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xAu:
      uint64_t v17 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v17;
      swift_retain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xBu:
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      uint64_t v19 = *((void *)a2 + 2);
      uint64_t v20 = *((void *)a2 + 3);
      uint64_t v21 = *((void *)a2 + 4);
      uint64_t v22 = *((void *)a2 + 5);
      uint64_t v23 = *((void *)a2 + 6);
      uint64_t v24 = *((void *)a2 + 7);
      uint64_t v25 = *((void *)a2 + 8);
      uint64_t v125 = *((void *)a2 + 9);
      uint64_t v126 = *((void *)a2 + 10);
      uint64_t v127 = *((void *)a2 + 11);
      uint64_t __dsta = *((void *)a2 + 12);
      uint64_t v130 = *((void *)a2 + 13);
      uint64_t v131 = *((void *)a2 + 14);
      uint64_t v132 = *((void *)a2 + 15);
      unsigned __int16 v26 = *((_WORD *)a2 + 64);
      outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v18, v19, v20, v21, v22, v23, v24, v25, v125, v126, v127, __dsta, v130, v131, v132, v26);
      *((void *)a1 + 1) = v18;
      *((void *)a1 + 2) = v19;
      *((void *)a1 + 3) = v20;
      *((void *)a1 + 4) = v21;
      *((void *)a1 + 5) = v22;
      *((void *)a1 + 6) = v23;
      *((void *)a1 + 7) = v24;
      *((void *)a1 + 8) = v25;
      *((void *)a1 + 9) = v125;
      *((void *)a1 + 10) = v126;
      *((void *)a1 + 11) = v127;
      *((void *)a1 + 12) = __dsta;
      *((void *)a1 + 13) = v130;
      *((void *)a1 + 14) = v131;
      *((void *)a1 + 15) = v132;
      *((_WORD *)a1 + 64) = v26;
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xCu:
      long long v27 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v27;
      long long v133 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v133;
      long long v28 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v28;
      long long v29 = *((_OWORD *)a2 + 6);
      *((_WORD *)a1 + 56) = *((_WORD *)a2 + 56);
      *((_OWORD *)a1 + 6) = v29;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xDu:
      *(void *)a1 = *(void *)a2;
      uint64_t v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                   + 48);
      uint64_t v31 = &a1[v30];
      uint64_t v32 = &a2[v30];
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
        swift_unknownObjectRetain();
        uint64_t v70 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
          uint64_t v34 = *((void *)v32 + 3);
          *((void *)v31 + 2) = *((void *)v32 + 2);
          *((void *)v31 + 3) = v34;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v35 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                       + 40);
          uint64_t v36 = &v31[v35];
          uint64_t v37 = &v32[v35];
          *(void *)uint64_t v36 = *(void *)&v32[v35];
          v36[8] = v32[v35 + 8];
          long long v38 = *(_OWORD *)&v32[v35 + 32];
          *((_OWORD *)v36 + 1) = *(_OWORD *)&v32[v35 + 16];
          *((_OWORD *)v36 + 2) = v38;
          *((_OWORD *)v36 + 3) = *(_OWORD *)&v32[v35 + 48];
          *(_OWORD *)(v36 + 57) = *(_OWORD *)&v32[v35 + 57];
          v36[73] = v32[v35 + 73];
          *(_DWORD *)(v36 + 74) = *(_DWORD *)&v32[v35 + 74];
          v36[78] = v32[v35 + 78];
          uint64_t v39 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v40 = v39[9];
          uint64_t v41 = &v36[v40];
          uint64_t v42 = &v37[v40];
          uint64_t v43 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v44 = *(void *)(v43 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43)) {
            goto LABEL_39;
          }
          goto LABEL_13;
        }
        *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
        swift_unknownObjectRetain();
        uint64_t v70 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }
      uint64_t v71 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v70) + 36);
      uint64_t v72 = &v31[v71];
      uint64_t v73 = &v32[v71];
      *(void *)uint64_t v72 = *(void *)&v32[v71];
      v72[8] = v32[v71 + 8];
      long long v74 = *(_OWORD *)&v32[v71 + 32];
      *((_OWORD *)v72 + 1) = *(_OWORD *)&v32[v71 + 16];
      *((_OWORD *)v72 + 2) = v74;
      *((_OWORD *)v72 + 3) = *(_OWORD *)&v32[v71 + 48];
      *(_OWORD *)(v72 + 57) = *(_OWORD *)&v32[v71 + 57];
      v72[73] = v32[v71 + 73];
      v72[76] = v32[v71 + 76];
      *((_WORD *)v72 + 37) = *(_WORD *)&v32[v71 + 74];
      v72[77] = v32[v71 + 77];
      uint64_t v75 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v76 = v75[9];
      uint64_t v77 = &v72[v76];
      uint64_t v78 = &v73[v76];
      uint64_t v79 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v80 = *(void *)(v79 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79)) {
        goto LABEL_36;
      }
      goto LABEL_27;
    case 0xEu:
      *(void *)a1 = *(void *)a2;
      uint64_t v46 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                   + 48);
      uint64_t v47 = &a1[v46];
      uint64_t v48 = &a2[v46];
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      int v49 = swift_getEnumCaseMultiPayload();
      if (v49 == 2)
      {
        *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
        swift_unknownObjectRetain();
        uint64_t v82 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }
      else
      {
        if (v49 == 1)
        {
          *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
          uint64_t v50 = *((void *)v48 + 3);
          *((void *)v47 + 2) = *((void *)v48 + 2);
          *((void *)v47 + 3) = v50;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v51 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                       + 40);
          uint64_t v36 = &v47[v51];
          uint64_t v37 = &v48[v51];
          *(void *)uint64_t v36 = *(void *)&v48[v51];
          v36[8] = v48[v51 + 8];
          long long v52 = *(_OWORD *)&v48[v51 + 32];
          *((_OWORD *)v36 + 1) = *(_OWORD *)&v48[v51 + 16];
          *((_OWORD *)v36 + 2) = v52;
          *((_OWORD *)v36 + 3) = *(_OWORD *)&v48[v51 + 48];
          *(_OWORD *)(v36 + 57) = *(_OWORD *)&v48[v51 + 57];
          v36[73] = v48[v51 + 73];
          *(_DWORD *)(v36 + 74) = *(_DWORD *)&v48[v51 + 74];
          v36[78] = v48[v51 + 78];
          uint64_t v39 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v53 = v39[9];
          uint64_t v41 = &v36[v53];
          uint64_t v42 = &v37[v53];
          uint64_t v43 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v44 = *(void *)(v43 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
          {
LABEL_13:
            uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
          }
          else
          {
LABEL_39:
            (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
          }
          uint64_t v113 = v39[10];
          uint64_t v114 = &v36[v113];
          char v115 = &v37[v113];
          *(void *)uint64_t v114 = *(void *)v115;
          v114[8] = v115[8];
          v36[v39[11]] = v37[v39[11]];
          uint64_t v116 = v39[12];
          uint64_t v111 = &v36[v116];
          int v112 = &v37[v116];
          goto LABEL_41;
        }
        *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
        swift_unknownObjectRetain();
        uint64_t v82 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }
      uint64_t v83 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v82) + 36);
      uint64_t v72 = &v47[v83];
      uint64_t v73 = &v48[v83];
      *(void *)uint64_t v72 = *(void *)&v48[v83];
      v72[8] = v48[v83 + 8];
      long long v84 = *(_OWORD *)&v48[v83 + 32];
      *((_OWORD *)v72 + 1) = *(_OWORD *)&v48[v83 + 16];
      *((_OWORD *)v72 + 2) = v84;
      *((_OWORD *)v72 + 3) = *(_OWORD *)&v48[v83 + 48];
      *(_OWORD *)(v72 + 57) = *(_OWORD *)&v48[v83 + 57];
      v72[73] = v48[v83 + 73];
      v72[76] = v48[v83 + 76];
      *((_WORD *)v72 + 37) = *(_WORD *)&v48[v83 + 74];
      v72[77] = v48[v83 + 77];
      uint64_t v75 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v85 = v75[9];
      uint64_t v77 = &v72[v85];
      uint64_t v78 = &v73[v85];
      uint64_t v79 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v80 = *(void *)(v79 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
      {
LABEL_27:
        uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
      }
      else
      {
LABEL_36:
        (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v77, v78, v79);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      }
      uint64_t v107 = v75[10];
      double v108 = &v72[v107];
      uint64_t v109 = &v73[v107];
      *(void *)double v108 = *(void *)v109;
      v108[8] = v109[8];
      uint64_t v110 = v75[11];
      uint64_t v111 = &v72[v110];
      int v112 = &v73[v110];
      goto LABEL_41;
    case 0xFu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      uint64_t v54 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                   + 48);
      uint64_t v55 = &a1[v54];
      uint64_t v56 = &a2[v54];
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      int v57 = swift_getEnumCaseMultiPayload();
      if (v57 == 2)
      {
        *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
        uint64_t v86 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
        uint64_t v87 = &v55[v86];
        uint64_t v88 = &v56[v86];
        *(void *)uint64_t v87 = *(void *)&v56[v86];
        v87[8] = v56[v86 + 8];
        long long v89 = *(_OWORD *)&v56[v86 + 32];
        *((_OWORD *)v87 + 1) = *(_OWORD *)&v56[v86 + 16];
        *((_OWORD *)v87 + 2) = v89;
        *((_OWORD *)v87 + 3) = *(_OWORD *)&v56[v86 + 48];
        *(_OWORD *)(v87 + 57) = *(_OWORD *)&v56[v86 + 57];
        v87[73] = v56[v86 + 73];
        *((_WORD *)v87 + 37) = *(_WORD *)&v56[v86 + 74];
        v87[76] = v56[v86 + 76];
        v87[77] = v56[v86 + 77];
        uint64_t v90 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v91 = v90[9];
        uint64_t v92 = &v87[v91];
        uint64_t v93 = &v88[v91];
        uint64_t v94 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v95 = *(void *)(v94 - 8);
        uint64_t v96 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
        swift_unknownObjectRetain();
        if (v96(v93, 1, v94))
        {
          uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v92, v93, *(void *)(*(void *)(v97 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v92, v93, v94);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
        }
        goto LABEL_47;
      }
      if (v57 != 1)
      {
        *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
        uint64_t v98 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
        uint64_t v87 = &v55[v98];
        uint64_t v88 = &v56[v98];
        *(void *)uint64_t v87 = *(void *)&v56[v98];
        v87[8] = v56[v98 + 8];
        long long v99 = *(_OWORD *)&v56[v98 + 32];
        *((_OWORD *)v87 + 1) = *(_OWORD *)&v56[v98 + 16];
        *((_OWORD *)v87 + 2) = v99;
        *((_OWORD *)v87 + 3) = *(_OWORD *)&v56[v98 + 48];
        *(_OWORD *)(v87 + 57) = *(_OWORD *)&v56[v98 + 57];
        v87[73] = v56[v98 + 73];
        *((_WORD *)v87 + 37) = *(_WORD *)&v56[v98 + 74];
        v87[76] = v56[v98 + 76];
        v87[77] = v56[v98 + 77];
        uint64_t v90 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v100 = v90[9];
        char v101 = &v87[v100];
        uint64_t v102 = &v88[v100];
        uint64_t v103 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v104 = *(void *)(v103 - 8);
        uint64_t v105 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48);
        swift_unknownObjectRetain();
        if (v105(v102, 1, v103))
        {
          uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v101, v102, *(void *)(*(void *)(v106 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v101, v102, v103);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
        }
LABEL_47:
        uint64_t v121 = v90[10];
        double v122 = &v87[v121];
        long long v123 = &v88[v121];
        *(void *)double v122 = *(void *)v123;
        v122[8] = v123[8];
        uint64_t v124 = v90[11];
        uint64_t v111 = &v87[v124];
        int v112 = &v88[v124];
        goto LABEL_41;
      }
      *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
      uint64_t v58 = *((void *)v56 + 3);
      *((void *)v55 + 2) = *((void *)v56 + 2);
      *((void *)v55 + 3) = v58;
      uint64_t v59 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      uint64_t v60 = &v55[v59];
      uint64_t v61 = &v56[v59];
      *(void *)uint64_t v60 = *(void *)&v56[v59];
      v60[8] = v56[v59 + 8];
      long long v62 = *(_OWORD *)&v56[v59 + 32];
      *((_OWORD *)v60 + 1) = *(_OWORD *)&v56[v59 + 16];
      *((_OWORD *)v60 + 2) = v62;
      *((_OWORD *)v60 + 3) = *(_OWORD *)&v56[v59 + 48];
      *(_OWORD *)(v60 + 57) = *(_OWORD *)&v56[v59 + 57];
      v60[73] = v56[v59 + 73];
      *(_DWORD *)(v60 + 74) = *(_DWORD *)&v56[v59 + 74];
      v60[78] = v56[v59 + 78];
      uint64_t v63 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v64 = v63[9];
      __dst = &v60[v64];
      uint64_t v65 = &v61[v64];
      uint64_t v66 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v67 = *(void *)(v66 - 8);
      uint64_t v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v68(v65, 1, v66))
      {
        uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v65, *(void *)(*(void *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(__dst, v65, v66);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(__dst, 0, 1, v66);
      }
      uint64_t v117 = v63[10];
      long long v118 = &v60[v117];
      long long v119 = &v61[v117];
      *(void *)long long v118 = *(void *)v119;
      v118[8] = v119[8];
      v60[v63[11]] = v61[v63[11]];
      uint64_t v120 = v63[12];
      uint64_t v111 = &v60[v120];
      int v112 = &v61[v120];
LABEL_41:
      *uint64_t v111 = *v112;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x10u:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      a1[9] = a2[9];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    default:
      memcpy(a1, a2, *(void *)(v6 + 64));
      return a1;
  }
}

uint64_t destroy for String.LocalizationValue.FormatArgument.CodableStorage(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_release();
      swift_release();
      goto LABEL_3;
    case 8:
LABEL_3:
      return swift_bridgeObjectRelease();
    case 10:
      return swift_release();
    case 11:
      return outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(_WORD *)(a1 + 128));
    case 12:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_24;
    case 13:
      uint64_t v3 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                  + 48);
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 2)
      {
        swift_unknownObjectRelease();
        uint64_t v4 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        goto LABEL_30;
      }
      if (result == 1)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v6 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
        goto LABEL_32;
      }
      if (result) {
        return result;
      }
      swift_unknownObjectRelease();
      uint64_t v4 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      goto LABEL_30;
    case 14:
      uint64_t v3 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                  + 48);
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 2)
      {
        swift_unknownObjectRelease();
        uint64_t v4 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
LABEL_30:
        uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v4) + 36);
        goto LABEL_35;
      }
      if (result != 1)
      {
        if (result) {
          return result;
        }
        swift_unknownObjectRelease();
        uint64_t v4 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        goto LABEL_30;
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
LABEL_32:
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v6) + 40);
LABEL_37:
      uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_38:
      uint64_t v9 = v3 + v7 + *(int *)(v8 + 36);
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v12 = *(void *)(v10 - 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v10);
      if (!result)
      {
        uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
        return v11(v9, v10);
      }
      return result;
    case 15:
      uint64_t v3 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                  + 48);
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 2)
      {
        swift_unknownObjectRelease();
        uint64_t v5 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
      }
      else
      {
        if (result == 1)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v7 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
          goto LABEL_37;
        }
        if (result) {
          return result;
        }
        swift_unknownObjectRelease();
        uint64_t v5 = type metadata accessor for NSDecimal.FormatStyle(0);
      }
      uint64_t v7 = *(int *)(v5 + 20);
LABEL_35:
      uint64_t v8 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      goto LABEL_38;
    case 16:
      swift_bridgeObjectRelease();
LABEL_24:
      return swift_unknownObjectRelease();
    default:
      return result;
  }
}

char *initializeWithCopy for String.LocalizationValue.FormatArgument.CodableStorage(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v6;
      uint64_t v7 = *((void *)a2 + 3);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a1 + 3) = v7;
      uint64_t v8 = *((void *)a2 + 5);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *((void *)a1 + 5) = v8;
      *((void *)a1 + 6) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v9 = (void *)*((void *)a2 + 9);
      uint64_t v10 = *((void *)a2 + 10);
      *((void *)a1 + 9) = v9;
      *((void *)a1 + 10) = v10;
      uint64_t v11 = *((void *)a2 + 12);
      *((void *)a1 + 11) = *((void *)a2 + 11);
      *((void *)a1 + 12) = v11;
      *((void *)a1 + 13) = *((void *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      id v12 = v9;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_45;
    case 8u:
      uint64_t v13 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v13;
      swift_bridgeObjectRetain();
      goto LABEL_45;
    case 0xAu:
      uint64_t v14 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v14;
      swift_retain();
      goto LABEL_45;
    case 0xBu:
      uint64_t v15 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      uint64_t v16 = *((void *)a2 + 2);
      uint64_t v17 = *((void *)a2 + 3);
      uint64_t v18 = *((void *)a2 + 4);
      uint64_t v19 = *((void *)a2 + 5);
      uint64_t v20 = *((void *)a2 + 6);
      uint64_t v21 = *((void *)a2 + 7);
      uint64_t v22 = *((void *)a2 + 8);
      uint64_t v123 = *((void *)a2 + 9);
      uint64_t v124 = *((void *)a2 + 10);
      uint64_t v125 = *((void *)a2 + 11);
      uint64_t __dsta = *((void *)a2 + 12);
      uint64_t v128 = *((void *)a2 + 13);
      uint64_t v129 = *((void *)a2 + 14);
      uint64_t v130 = *((void *)a2 + 15);
      unsigned __int16 v23 = *((_WORD *)a2 + 64);
      outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v15, v16, v17, v18, v19, v20, v21, v22, v123, v124, v125, __dsta, v128, v129, v130, v23);
      *((void *)a1 + 1) = v15;
      *((void *)a1 + 2) = v16;
      *((void *)a1 + 3) = v17;
      *((void *)a1 + 4) = v18;
      *((void *)a1 + 5) = v19;
      *((void *)a1 + 6) = v20;
      *((void *)a1 + 7) = v21;
      *((void *)a1 + 8) = v22;
      *((void *)a1 + 9) = v123;
      *((void *)a1 + 10) = v124;
      *((void *)a1 + 11) = v125;
      *((void *)a1 + 12) = __dsta;
      *((void *)a1 + 13) = v128;
      *((void *)a1 + 14) = v129;
      *((void *)a1 + 15) = v130;
      *((_WORD *)a1 + 64) = v23;
      goto LABEL_45;
    case 0xCu:
      long long v24 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v24;
      long long v131 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v131;
      long long v25 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v25;
      long long v26 = *((_OWORD *)a2 + 6);
      *((_WORD *)a1 + 56) = *((_WORD *)a2 + 56);
      *((_OWORD *)a1 + 6) = v26;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_45;
    case 0xDu:
      *(void *)a1 = *(void *)a2;
      uint64_t v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                   + 48);
      long long v28 = &a1[v27];
      long long v29 = &a2[v27];
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(_OWORD *)long long v28 = *(_OWORD *)v29;
        swift_unknownObjectRetain();
        uint64_t v67 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(_OWORD *)long long v28 = *(_OWORD *)v29;
          uint64_t v31 = *((void *)v29 + 3);
          *((void *)v28 + 2) = *((void *)v29 + 2);
          *((void *)v28 + 3) = v31;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v32 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                       + 40);
          long long v33 = &v28[v32];
          uint64_t v34 = &v29[v32];
          *(void *)long long v33 = *(void *)&v29[v32];
          v33[8] = v29[v32 + 8];
          long long v35 = *(_OWORD *)&v29[v32 + 32];
          *((_OWORD *)v33 + 1) = *(_OWORD *)&v29[v32 + 16];
          *((_OWORD *)v33 + 2) = v35;
          *((_OWORD *)v33 + 3) = *(_OWORD *)&v29[v32 + 48];
          *(_OWORD *)(v33 + 57) = *(_OWORD *)&v29[v32 + 57];
          v33[73] = v29[v32 + 73];
          *(_DWORD *)(v33 + 74) = *(_DWORD *)&v29[v32 + 74];
          v33[78] = v29[v32 + 78];
          uint64_t v36 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v37 = v36[9];
          long long v38 = &v33[v37];
          uint64_t v39 = &v34[v37];
          uint64_t v40 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v41 = *(void *)(v40 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40)) {
            goto LABEL_36;
          }
          goto LABEL_10;
        }
        *(_OWORD *)long long v28 = *(_OWORD *)v29;
        swift_unknownObjectRetain();
        uint64_t v67 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }
      uint64_t v68 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v67) + 36);
      uint64_t v69 = &v28[v68];
      uint64_t v70 = &v29[v68];
      *(void *)uint64_t v69 = *(void *)&v29[v68];
      _OWORD v69[8] = v29[v68 + 8];
      long long v71 = *(_OWORD *)&v29[v68 + 32];
      *((_OWORD *)v69 + 1) = *(_OWORD *)&v29[v68 + 16];
      *((_OWORD *)v69 + 2) = v71;
      *((_OWORD *)v69 + 3) = *(_OWORD *)&v29[v68 + 48];
      *(_OWORD *)(v69 + 57) = *(_OWORD *)&v29[v68 + 57];
      v69[73] = v29[v68 + 73];
      v69[76] = v29[v68 + 76];
      *((_WORD *)v69 + 37) = *(_WORD *)&v29[v68 + 74];
      v69[77] = v29[v68 + 77];
      uint64_t v72 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v73 = v72[9];
      long long v74 = &v69[v73];
      uint64_t v75 = &v70[v73];
      uint64_t v76 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v77 = *(void *)(v76 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76)) {
        goto LABEL_33;
      }
      goto LABEL_24;
    case 0xEu:
      *(void *)a1 = *(void *)a2;
      uint64_t v43 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                   + 48);
      uint64_t v44 = &a1[v43];
      uint64_t v45 = &a2[v43];
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      int v46 = swift_getEnumCaseMultiPayload();
      if (v46 == 2)
      {
        *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
        swift_unknownObjectRetain();
        uint64_t v79 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }
      else
      {
        if (v46 == 1)
        {
          *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
          uint64_t v47 = *((void *)v45 + 3);
          *((void *)v44 + 2) = *((void *)v45 + 2);
          *((void *)v44 + 3) = v47;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v48 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                       + 40);
          long long v33 = &v44[v48];
          uint64_t v34 = &v45[v48];
          *(void *)long long v33 = *(void *)&v45[v48];
          v33[8] = v45[v48 + 8];
          long long v49 = *(_OWORD *)&v45[v48 + 32];
          *((_OWORD *)v33 + 1) = *(_OWORD *)&v45[v48 + 16];
          *((_OWORD *)v33 + 2) = v49;
          *((_OWORD *)v33 + 3) = *(_OWORD *)&v45[v48 + 48];
          *(_OWORD *)(v33 + 57) = *(_OWORD *)&v45[v48 + 57];
          v33[73] = v45[v48 + 73];
          *(_DWORD *)(v33 + 74) = *(_DWORD *)&v45[v48 + 74];
          v33[78] = v45[v48 + 78];
          uint64_t v36 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v50 = v36[9];
          long long v38 = &v33[v50];
          uint64_t v39 = &v34[v50];
          uint64_t v40 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v41 = *(void *)(v40 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
          {
LABEL_10:
            uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
          }
          else
          {
LABEL_36:
            (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
          }
          uint64_t v110 = v36[10];
          uint64_t v111 = &v33[v110];
          int v112 = &v34[v110];
          *(void *)uint64_t v111 = *(void *)v112;
          v111[8] = v112[8];
          v33[v36[11]] = v34[v36[11]];
          uint64_t v113 = v36[12];
          double v108 = &v33[v113];
          uint64_t v109 = &v34[v113];
          goto LABEL_44;
        }
        *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
        swift_unknownObjectRetain();
        uint64_t v79 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }
      uint64_t v80 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v79) + 36);
      uint64_t v69 = &v44[v80];
      uint64_t v70 = &v45[v80];
      *(void *)uint64_t v69 = *(void *)&v45[v80];
      _OWORD v69[8] = v45[v80 + 8];
      long long v81 = *(_OWORD *)&v45[v80 + 32];
      *((_OWORD *)v69 + 1) = *(_OWORD *)&v45[v80 + 16];
      *((_OWORD *)v69 + 2) = v81;
      *((_OWORD *)v69 + 3) = *(_OWORD *)&v45[v80 + 48];
      *(_OWORD *)(v69 + 57) = *(_OWORD *)&v45[v80 + 57];
      v69[73] = v45[v80 + 73];
      v69[76] = v45[v80 + 76];
      *((_WORD *)v69 + 37) = *(_WORD *)&v45[v80 + 74];
      v69[77] = v45[v80 + 77];
      uint64_t v72 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v82 = v72[9];
      long long v74 = &v69[v82];
      uint64_t v75 = &v70[v82];
      uint64_t v76 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v77 = *(void *)(v76 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
      {
LABEL_24:
        uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
      }
      else
      {
LABEL_33:
        (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v74, v75, v76);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
      }
      uint64_t v104 = v72[10];
      uint64_t v105 = &v69[v104];
      uint64_t v106 = &v70[v104];
      *(void *)uint64_t v105 = *(void *)v106;
      v105[8] = v106[8];
      uint64_t v107 = v72[11];
      double v108 = &v69[v107];
      uint64_t v109 = &v70[v107];
      goto LABEL_44;
    case 0xFu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      uint64_t v51 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                   + 48);
      long long v52 = &a1[v51];
      uint64_t v53 = &a2[v51];
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      int v54 = swift_getEnumCaseMultiPayload();
      if (v54 == 2)
      {
        *(_OWORD *)long long v52 = *(_OWORD *)v53;
        uint64_t v83 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
        long long v84 = &v52[v83];
        uint64_t v85 = &v53[v83];
        *(void *)long long v84 = *(void *)&v53[v83];
        v84[8] = v53[v83 + 8];
        long long v86 = *(_OWORD *)&v53[v83 + 32];
        *((_OWORD *)v84 + 1) = *(_OWORD *)&v53[v83 + 16];
        *((_OWORD *)v84 + 2) = v86;
        *((_OWORD *)v84 + 3) = *(_OWORD *)&v53[v83 + 48];
        *(_OWORD *)(v84 + 57) = *(_OWORD *)&v53[v83 + 57];
        v84[73] = v53[v83 + 73];
        *((_WORD *)v84 + 37) = *(_WORD *)&v53[v83 + 74];
        v84[76] = v53[v83 + 76];
        v84[77] = v53[v83 + 77];
        uint64_t v87 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v88 = v87[9];
        long long v89 = &v84[v88];
        uint64_t v90 = &v85[v88];
        uint64_t v91 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v92 = *(void *)(v91 - 8);
        uint64_t v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
        swift_unknownObjectRetain();
        if (v93(v90, 1, v91))
        {
          uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v89, v90, *(void *)(*(void *)(v94 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v89, v90, v91);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
        }
        goto LABEL_43;
      }
      if (v54 != 1)
      {
        *(_OWORD *)long long v52 = *(_OWORD *)v53;
        uint64_t v95 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
        long long v84 = &v52[v95];
        uint64_t v85 = &v53[v95];
        *(void *)long long v84 = *(void *)&v53[v95];
        v84[8] = v53[v95 + 8];
        long long v96 = *(_OWORD *)&v53[v95 + 32];
        *((_OWORD *)v84 + 1) = *(_OWORD *)&v53[v95 + 16];
        *((_OWORD *)v84 + 2) = v96;
        *((_OWORD *)v84 + 3) = *(_OWORD *)&v53[v95 + 48];
        *(_OWORD *)(v84 + 57) = *(_OWORD *)&v53[v95 + 57];
        v84[73] = v53[v95 + 73];
        *((_WORD *)v84 + 37) = *(_WORD *)&v53[v95 + 74];
        v84[76] = v53[v95 + 76];
        v84[77] = v53[v95 + 77];
        uint64_t v87 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v97 = v87[9];
        uint64_t v98 = &v84[v97];
        long long v99 = &v85[v97];
        uint64_t v100 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v101 = *(void *)(v100 - 8);
        uint64_t v102 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48);
        swift_unknownObjectRetain();
        if (v102(v99, 1, v100))
        {
          uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v98, v99, *(void *)(*(void *)(v103 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v98, v99, v100);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
        }
LABEL_43:
        uint64_t v118 = v87[10];
        long long v119 = &v84[v118];
        uint64_t v120 = &v85[v118];
        *(void *)long long v119 = *(void *)v120;
        v119[8] = v120[8];
        uint64_t v121 = v87[11];
        double v108 = &v84[v121];
        uint64_t v109 = &v85[v121];
        goto LABEL_44;
      }
      *(_OWORD *)long long v52 = *(_OWORD *)v53;
      uint64_t v55 = *((void *)v53 + 3);
      *((void *)v52 + 2) = *((void *)v53 + 2);
      *((void *)v52 + 3) = v55;
      uint64_t v56 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      int v57 = &v52[v56];
      uint64_t v58 = &v53[v56];
      *(void *)int v57 = *(void *)&v53[v56];
      v57[8] = v53[v56 + 8];
      long long v59 = *(_OWORD *)&v53[v56 + 32];
      *((_OWORD *)v57 + 1) = *(_OWORD *)&v53[v56 + 16];
      *((_OWORD *)v57 + 2) = v59;
      *((_OWORD *)v57 + 3) = *(_OWORD *)&v53[v56 + 48];
      *(_OWORD *)(v57 + 57) = *(_OWORD *)&v53[v56 + 57];
      v57[73] = v53[v56 + 73];
      *(_DWORD *)(v57 + 74) = *(_DWORD *)&v53[v56 + 74];
      v57[78] = v53[v56 + 78];
      uint64_t v60 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v61 = v60[9];
      __dst = &v57[v61];
      long long v62 = &v58[v61];
      uint64_t v63 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v64 = *(void *)(v63 - 8);
      uint64_t v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v65(v62, 1, v63))
      {
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v62, *(void *)(*(void *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(__dst, v62, v63);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(__dst, 0, 1, v63);
      }
      uint64_t v114 = v60[10];
      char v115 = &v57[v114];
      uint64_t v116 = &v58[v114];
      *(void *)char v115 = *(void *)v116;
      v115[8] = v116[8];
      v57[v60[11]] = v58[v60[11]];
      uint64_t v117 = v60[12];
      double v108 = &v57[v117];
      uint64_t v109 = &v58[v117];
LABEL_44:
      *double v108 = *v109;
      swift_storeEnumTagMultiPayload();
LABEL_45:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x10u:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      a1[9] = a2[9];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_45;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

char *assignWithCopy for String.LocalizationValue.FormatArgument.CodableStorage(char *a1, char *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)a1, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a1 + 3) = *((void *)a2 + 3);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *((void *)a1 + 5) = *((void *)a2 + 5);
      *((void *)a1 + 6) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v6 = (void *)*((void *)a2 + 9);
      *((void *)a1 + 9) = v6;
      *((void *)a1 + 10) = *((void *)a2 + 10);
      *((void *)a1 + 11) = *((void *)a2 + 11);
      *((void *)a1 + 12) = *((void *)a2 + 12);
      *((void *)a1 + 13) = *((void *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      id v7 = v6;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_47;
    case 8u:
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    case 0xAu:
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      swift_retain();
      goto LABEL_47;
    case 0xBu:
      *(void *)a1 = *(void *)a2;
      uint64_t v8 = *((void *)a2 + 1);
      uint64_t v9 = *((void *)a2 + 2);
      uint64_t v10 = *((void *)a2 + 3);
      uint64_t v11 = *((void *)a2 + 4);
      uint64_t v12 = *((void *)a2 + 5);
      uint64_t v13 = *((void *)a2 + 6);
      uint64_t v15 = *((void *)a2 + 7);
      uint64_t v14 = *((void *)a2 + 8);
      uint64_t v135 = *((void *)a2 + 9);
      uint64_t v136 = *((void *)a2 + 10);
      uint64_t v137 = *((void *)a2 + 11);
      uint64_t __dsta = *((void *)a2 + 12);
      uint64_t v140 = *((void *)a2 + 13);
      uint64_t v141 = *((void *)a2 + 14);
      uint64_t v142 = *((void *)a2 + 15);
      unsigned __int16 v16 = *((_WORD *)a2 + 64);
      outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v9, v10, v11, v12, v13, v15, v14, v135, v136, v137, __dsta, v140, v141, v142, v16);
      *((void *)a1 + 1) = v8;
      *((void *)a1 + 2) = v9;
      *((void *)a1 + 3) = v10;
      *((void *)a1 + 4) = v11;
      *((void *)a1 + 5) = v12;
      *((void *)a1 + 6) = v13;
      *((void *)a1 + 7) = v15;
      *((void *)a1 + 8) = v14;
      *((void *)a1 + 9) = v135;
      *((void *)a1 + 10) = v136;
      *((void *)a1 + 11) = v137;
      *((void *)a1 + 12) = __dsta;
      *((void *)a1 + 13) = v140;
      *((void *)a1 + 14) = v141;
      *((void *)a1 + 15) = v142;
      *((_WORD *)a1 + 64) = v16;
      goto LABEL_47;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      long long v17 = *((_OWORD *)a2 + 4);
      long long v18 = *((_OWORD *)a2 + 5);
      long long v19 = *((_OWORD *)a2 + 6);
      *((_WORD *)a1 + 56) = *((_WORD *)a2 + 56);
      *((_OWORD *)a1 + 5) = v18;
      *((_OWORD *)a1 + 6) = v19;
      *((_OWORD *)a1 + 4) = v17;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_47;
    case 0xDu:
      *(void *)a1 = *(void *)a2;
      uint64_t v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                   + 48);
      uint64_t v21 = &a1[v20];
      uint64_t v22 = &a2[v20];
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
        swift_unknownObjectRetain();
        uint64_t v66 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
          *((void *)v21 + 2) = *((void *)v22 + 2);
          *((void *)v21 + 3) = *((void *)v22 + 3);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                       + 40);
          long long v25 = &v21[v24];
          long long v26 = &v22[v24];
          uint64_t v27 = *(void *)&v22[v24];
          v25[8] = v26[8];
          *(void *)long long v25 = v27;
          long long v28 = *(_OWORD *)(v26 + 57);
          long long v30 = *((_OWORD *)v26 + 2);
          long long v29 = *((_OWORD *)v26 + 3);
          *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
          *((_OWORD *)v25 + 2) = v30;
          *((_OWORD *)v25 + 3) = v29;
          *(_OWORD *)(v25 + 57) = v28;
          v25[73] = v26[73];
          *(_DWORD *)(v25 + 74) = *(_DWORD *)(v26 + 74);
          v25[78] = v26[78];
          uint64_t v31 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v32 = v31[9];
          long long v33 = &v25[v32];
          uint64_t v34 = &v26[v32];
          uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v36 = *(void *)(v35 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35)) {
            goto LABEL_38;
          }
          goto LABEL_11;
        }
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
        swift_unknownObjectRetain();
        uint64_t v66 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }
      uint64_t v67 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v66) + 36);
      uint64_t v68 = &v21[v67];
      uint64_t v69 = &v22[v67];
      uint64_t v70 = *(void *)&v22[v67];
      long long v68[8] = v69[8];
      *(void *)uint64_t v68 = v70;
      long long v71 = *(_OWORD *)(v69 + 57);
      long long v73 = *((_OWORD *)v69 + 2);
      long long v72 = *((_OWORD *)v69 + 3);
      *((_OWORD *)v68 + 1) = *((_OWORD *)v69 + 1);
      *((_OWORD *)v68 + 2) = v73;
      *((_OWORD *)v68 + 3) = v72;
      *(_OWORD *)(v68 + 57) = v71;
      v68[73] = v69[73];
      LOBYTE(v70) = v69[76];
      *((_WORD *)v68 + 37) = *((_WORD *)v69 + 37);
      v68[76] = v70;
      v68[77] = v69[77];
      long long v74 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v75 = v74[9];
      uint64_t v76 = &v68[v75];
      uint64_t v77 = &v69[v75];
      uint64_t v78 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v79 = *(void *)(v78 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78)) {
        goto LABEL_35;
      }
      goto LABEL_25;
    case 0xEu:
      *(void *)a1 = *(void *)a2;
      uint64_t v38 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                   + 48);
      uint64_t v39 = &a1[v38];
      uint64_t v40 = &a2[v38];
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      int v41 = swift_getEnumCaseMultiPayload();
      if (v41 == 2)
      {
        *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
        swift_unknownObjectRetain();
        long long v81 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }
      else
      {
        if (v41 == 1)
        {
          *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
          *((void *)v39 + 2) = *((void *)v40 + 2);
          *((void *)v39 + 3) = *((void *)v40 + 3);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v42 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                       + 40);
          long long v25 = &v39[v42];
          long long v26 = &v40[v42];
          uint64_t v43 = *(void *)&v40[v42];
          v25[8] = v26[8];
          *(void *)long long v25 = v43;
          long long v44 = *(_OWORD *)(v26 + 57);
          long long v46 = *((_OWORD *)v26 + 2);
          long long v45 = *((_OWORD *)v26 + 3);
          *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
          *((_OWORD *)v25 + 2) = v46;
          *((_OWORD *)v25 + 3) = v45;
          *(_OWORD *)(v25 + 57) = v44;
          v25[73] = v26[73];
          *(_DWORD *)(v25 + 74) = *(_DWORD *)(v26 + 74);
          v25[78] = v26[78];
          uint64_t v31 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v47 = v31[9];
          long long v33 = &v25[v47];
          uint64_t v34 = &v26[v47];
          uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v36 = *(void *)(v35 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
          {
LABEL_11:
            uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
          }
          else
          {
LABEL_38:
            (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          }
          uint64_t v119 = v31[10];
          uint64_t v120 = &v25[v119];
          uint64_t v121 = &v26[v119];
          uint64_t v122 = *(void *)v121;
          v120[8] = v121[8];
          *(void *)uint64_t v120 = v122;
          v25[v31[11]] = v26[v31[11]];
          uint64_t v123 = v31[12];
          uint64_t v117 = &v25[v123];
          uint64_t v118 = &v26[v123];
          goto LABEL_46;
        }
        *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
        swift_unknownObjectRetain();
        long long v81 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }
      uint64_t v82 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v81) + 36);
      uint64_t v68 = &v39[v82];
      uint64_t v69 = &v40[v82];
      uint64_t v83 = *(void *)&v40[v82];
      long long v68[8] = v69[8];
      *(void *)uint64_t v68 = v83;
      long long v84 = *(_OWORD *)(v69 + 57);
      long long v86 = *((_OWORD *)v69 + 2);
      long long v85 = *((_OWORD *)v69 + 3);
      *((_OWORD *)v68 + 1) = *((_OWORD *)v69 + 1);
      *((_OWORD *)v68 + 2) = v86;
      *((_OWORD *)v68 + 3) = v85;
      *(_OWORD *)(v68 + 57) = v84;
      v68[73] = v69[73];
      LOBYTE(v83) = v69[76];
      *((_WORD *)v68 + 37) = *((_WORD *)v69 + 37);
      v68[76] = v83;
      v68[77] = v69[77];
      long long v74 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v87 = v74[9];
      uint64_t v76 = &v68[v87];
      uint64_t v77 = &v69[v87];
      uint64_t v78 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v79 = *(void *)(v78 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
      {
LABEL_25:
        uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64));
      }
      else
      {
LABEL_35:
        (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
      }
      uint64_t v112 = v74[10];
      uint64_t v113 = &v68[v112];
      uint64_t v114 = &v69[v112];
      uint64_t v115 = *(void *)v114;
      v113[8] = v114[8];
      *(void *)uint64_t v113 = v115;
      uint64_t v116 = v74[11];
      uint64_t v117 = &v68[v116];
      uint64_t v118 = &v69[v116];
      goto LABEL_46;
    case 0xFu:
      long long v48 = *(_OWORD *)a2;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      *(_OWORD *)a1 = v48;
      uint64_t v49 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                   + 48);
      uint64_t v50 = &a1[v49];
      uint64_t v51 = &a2[v49];
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      int v52 = swift_getEnumCaseMultiPayload();
      if (v52 == 2)
      {
        *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
        uint64_t v88 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
        long long v89 = &v50[v88];
        uint64_t v90 = &v51[v88];
        LOBYTE(v88) = v51[v88 + 8];
        *(void *)long long v89 = *(void *)v90;
        v89[8] = v88;
        long long v91 = *(_OWORD *)(v90 + 57);
        long long v93 = *((_OWORD *)v90 + 2);
        long long v92 = *((_OWORD *)v90 + 3);
        *((_OWORD *)v89 + 1) = *((_OWORD *)v90 + 1);
        *((_OWORD *)v89 + 2) = v93;
        *((_OWORD *)v89 + 3) = v92;
        *(_OWORD *)(v89 + 57) = v91;
        v89[73] = v90[73];
        LOWORD(v88) = *((_WORD *)v90 + 37);
        v89[76] = v90[76];
        *((_WORD *)v89 + 37) = v88;
        v89[77] = v90[77];
        uint64_t v94 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v95 = v94[9];
        long long v96 = &v89[v95];
        uint64_t v97 = &v90[v95];
        uint64_t v98 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v99 = *(void *)(v98 - 8);
        uint64_t v100 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48);
        swift_unknownObjectRetain();
        if (!v100(v97, 1, v98))
        {
          (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v96, v97, v98);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
          goto LABEL_45;
        }
        size_t v101 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                     - 8)
                         + 64);
        uint64_t v102 = v96;
LABEL_34:
        memcpy(v102, v97, v101);
LABEL_45:
        uint64_t v129 = v94[10];
        uint64_t v130 = &v89[v129];
        long long v131 = &v90[v129];
        uint64_t v132 = *(void *)v131;
        v130[8] = v131[8];
        *(void *)uint64_t v130 = v132;
        uint64_t v133 = v94[11];
        uint64_t v117 = &v89[v133];
        uint64_t v118 = &v90[v133];
        goto LABEL_46;
      }
      if (v52 != 1)
      {
        *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
        uint64_t v103 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
        long long v89 = &v50[v103];
        uint64_t v90 = &v51[v103];
        LOBYTE(v103) = v51[v103 + 8];
        *(void *)long long v89 = *(void *)v90;
        v89[8] = v103;
        long long v104 = *(_OWORD *)(v90 + 57);
        long long v106 = *((_OWORD *)v90 + 2);
        long long v105 = *((_OWORD *)v90 + 3);
        *((_OWORD *)v89 + 1) = *((_OWORD *)v90 + 1);
        *((_OWORD *)v89 + 2) = v106;
        *((_OWORD *)v89 + 3) = v105;
        *(_OWORD *)(v89 + 57) = v104;
        v89[73] = v90[73];
        LOWORD(v103) = *((_WORD *)v90 + 37);
        v89[76] = v90[76];
        *((_WORD *)v89 + 37) = v103;
        v89[77] = v90[77];
        uint64_t v94 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v107 = v94[9];
        double v108 = &v89[v107];
        uint64_t v97 = &v90[v107];
        uint64_t v109 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v110 = *(void *)(v109 - 8);
        uint64_t v111 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
        swift_unknownObjectRetain();
        if (!v111(v97, 1, v109))
        {
          (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v108, v97, v109);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v108, 0, 1, v109);
          goto LABEL_45;
        }
        size_t v101 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                     - 8)
                         + 64);
        uint64_t v102 = v108;
        goto LABEL_34;
      }
      *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
      *((void *)v50 + 2) = *((void *)v51 + 2);
      *((void *)v50 + 3) = *((void *)v51 + 3);
      uint64_t v53 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      int v54 = &v50[v53];
      uint64_t v55 = &v51[v53];
      LOBYTE(v53) = v51[v53 + 8];
      *(void *)int v54 = *(void *)v55;
      _OWORD v54[8] = v53;
      long long v56 = *(_OWORD *)(v55 + 57);
      long long v58 = *((_OWORD *)v55 + 2);
      long long v57 = *((_OWORD *)v55 + 3);
      *((_OWORD *)v54 + 1) = *((_OWORD *)v55 + 1);
      *((_OWORD *)v54 + 2) = v58;
      *((_OWORD *)v54 + 3) = v57;
      *(_OWORD *)(v54 + 57) = v56;
      v54[73] = v55[73];
      *(_DWORD *)(v54 + 74) = *(_DWORD *)(v55 + 74);
      v54[78] = v55[78];
      long long v59 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v60 = v59[9];
      __dst = &v54[v60];
      uint64_t v61 = &v55[v60];
      uint64_t v62 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v63 = *(void *)(v62 - 8);
      uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v64(v61, 1, v62))
      {
        uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v61, *(void *)(*(void *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 16))(__dst, v61, v62);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v62);
      }
      uint64_t v124 = v59[10];
      uint64_t v125 = &v54[v124];
      uint64_t v126 = &v55[v124];
      uint64_t v127 = *(void *)v126;
      v125[8] = v126[8];
      *(void *)uint64_t v125 = v127;
      v54[v59[11]] = v55[v59[11]];
      uint64_t v128 = v59[12];
      uint64_t v117 = &v54[v128];
      uint64_t v118 = &v55[v128];
LABEL_46:
      *uint64_t v117 = *v118;
      swift_storeEnumTagMultiPayload();
LABEL_47:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x10u:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      a1[9] = a2[9];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_47;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

_DWORD *initializeWithTake for String.LocalizationValue.FormatArgument.CodableStorage(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 15:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[4] = a2[4];
      uint64_t v22 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                   + 48);
      unsigned __int16 v23 = (_OWORD *)((char *)a1 + v22);
      uint64_t v24 = (_OWORD *)((char *)a2 + v22);
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      int v25 = swift_getEnumCaseMultiPayload();
      if (v25 == 2)
      {
        *unsigned __int16 v23 = *v24;
        uint64_t v48 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
      }
      else
      {
        if (v25 == 1)
        {
          long long v26 = v24[1];
          *unsigned __int16 v23 = *v24;
          v23[1] = v26;
          uint64_t v27 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
          uint64_t v13 = (char *)v23 + v27;
          uint64_t v14 = (char *)v24 + v27;
          *(void *)uint64_t v13 = *(void *)((char *)v24 + v27);
          v13[8] = *((unsigned char *)v24 + v27 + 8);
          long long v28 = *(_OWORD *)((char *)v24 + v27 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v24 + v27 + 16);
          *((_OWORD *)v13 + 2) = v28;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v24 + v27 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v24 + v27 + 57);
          v13[73] = *((unsigned char *)v24 + v27 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v24 + v27 + 74);
          v13[78] = *((unsigned char *)v24 + v27 + 78);
          unsigned __int16 v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v29 = v16[9];
          long long v18 = &v13[v29];
          long long v19 = &v14[v29];
          uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v21 = *(void *)(v20 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
          {
LABEL_11:
            uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v18, v19, *(void *)(*(void *)(v30 - 8) + 64));
LABEL_32:
            uint64_t v61 = v16[10];
            uint64_t v62 = &v13[v61];
            uint64_t v63 = &v14[v61];
            *(void *)uint64_t v62 = *(void *)v63;
            v62[8] = v63[8];
            v13[v16[11]] = v14[v16[11]];
            uint64_t v60 = v16[12];
            goto LABEL_33;
          }
LABEL_31:
          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
          goto LABEL_32;
        }
        *unsigned __int16 v23 = *v24;
        uint64_t v48 = type metadata accessor for NSDecimal.FormatStyle(0);
      }
      uint64_t v49 = *(int *)(v48 + 20);
      uint64_t v13 = (char *)v23 + v49;
      uint64_t v14 = (char *)v24 + v49;
      *(void *)uint64_t v13 = *(void *)((char *)v24 + v49);
      v13[8] = *((unsigned char *)v24 + v49 + 8);
      long long v50 = *(_OWORD *)((char *)v24 + v49 + 32);
      *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v24 + v49 + 16);
      *((_OWORD *)v13 + 2) = v50;
      *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v24 + v49 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v24 + v49 + 57);
      v13[73] = *((unsigned char *)v24 + v49 + 73);
      *((_WORD *)v13 + 37) = *(_WORD *)((char *)v24 + v49 + 74);
      v13[76] = *((unsigned char *)v24 + v49 + 76);
      v13[77] = *((unsigned char *)v24 + v49 + 77);
      uint64_t v42 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v51 = v42[9];
      long long v44 = &v13[v51];
      long long v45 = &v14[v51];
      uint64_t v46 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v47 = *(void *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
        goto LABEL_28;
      }
      goto LABEL_29;
    case 14:
      *(void *)a1 = *(void *)a2;
      uint64_t v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                   + 48);
      uint64_t v32 = (_OWORD *)((char *)a1 + v31);
      long long v33 = (_OWORD *)((char *)a2 + v31);
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      int v34 = swift_getEnumCaseMultiPayload();
      if (v34 == 2)
      {
        *uint64_t v32 = *v33;
        int v52 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }
      else
      {
        if (v34 == 1)
        {
          long long v35 = v33[1];
          *uint64_t v32 = *v33;
          v32[1] = v35;
          uint64_t v36 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                       + 40);
          uint64_t v13 = (char *)v32 + v36;
          uint64_t v14 = (char *)v33 + v36;
          *(void *)uint64_t v13 = *(void *)((char *)v33 + v36);
          v13[8] = *((unsigned char *)v33 + v36 + 8);
          long long v37 = *(_OWORD *)((char *)v33 + v36 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v33 + v36 + 16);
          *((_OWORD *)v13 + 2) = v37;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v33 + v36 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v33 + v36 + 57);
          v13[73] = *((unsigned char *)v33 + v36 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v33 + v36 + 74);
          v13[78] = *((unsigned char *)v33 + v36 + 78);
          unsigned __int16 v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v38 = v16[9];
          long long v18 = &v13[v38];
          long long v19 = &v14[v38];
          uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v21 = *(void *)(v20 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20)) {
            goto LABEL_11;
          }
          goto LABEL_31;
        }
        *uint64_t v32 = *v33;
        int v52 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }
      uint64_t v53 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v52) + 36);
      uint64_t v13 = (char *)v32 + v53;
      uint64_t v14 = (char *)v33 + v53;
      *(void *)uint64_t v13 = *(void *)((char *)v33 + v53);
      v13[8] = *((unsigned char *)v33 + v53 + 8);
      long long v54 = *(_OWORD *)((char *)v33 + v53 + 32);
      *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v33 + v53 + 16);
      *((_OWORD *)v13 + 2) = v54;
      *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v33 + v53 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v33 + v53 + 57);
      v13[73] = *((unsigned char *)v33 + v53 + 73);
      v13[76] = *((unsigned char *)v33 + v53 + 76);
      *((_WORD *)v13 + 37) = *(_WORD *)((char *)v33 + v53 + 74);
      v13[77] = *((unsigned char *)v33 + v53 + 77);
      uint64_t v42 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v55 = v42[9];
      long long v44 = &v13[v55];
      long long v45 = &v14[v55];
      uint64_t v46 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v47 = *(void *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
LABEL_28:
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v44, v45, *(void *)(*(void *)(v56 - 8) + 64));
LABEL_30:
        uint64_t v57 = v42[10];
        long long v58 = &v13[v57];
        long long v59 = &v14[v57];
        *(void *)long long v58 = *(void *)v59;
        v58[8] = v59[8];
        uint64_t v60 = v42[11];
LABEL_33:
        v13[v60] = v14[v60];
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_29:
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v44, v45, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      goto LABEL_30;
    case 13:
      *(void *)a1 = *(void *)a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                  + 48);
      uint64_t v8 = (_OWORD *)((char *)a1 + v7);
      uint64_t v9 = (_OWORD *)((char *)a2 + v7);
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      int v10 = swift_getEnumCaseMultiPayload();
      if (v10 == 2)
      {
        *uint64_t v8 = *v9;
        uint64_t v39 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }
      else
      {
        if (v10 == 1)
        {
          long long v11 = v9[1];
          *uint64_t v8 = *v9;
          v8[1] = v11;
          uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                       + 40);
          uint64_t v13 = (char *)v8 + v12;
          uint64_t v14 = (char *)v9 + v12;
          *(void *)uint64_t v13 = *(void *)((char *)v9 + v12);
          v13[8] = *((unsigned char *)v9 + v12 + 8);
          long long v15 = *(_OWORD *)((char *)v9 + v12 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v9 + v12 + 16);
          *((_OWORD *)v13 + 2) = v15;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v9 + v12 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v9 + v12 + 57);
          v13[73] = *((unsigned char *)v9 + v12 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v9 + v12 + 74);
          v13[78] = *((unsigned char *)v9 + v12 + 78);
          unsigned __int16 v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v17 = v16[9];
          long long v18 = &v13[v17];
          long long v19 = &v14[v17];
          uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v21 = *(void *)(v20 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20)) {
            goto LABEL_11;
          }
          goto LABEL_31;
        }
        *uint64_t v8 = *v9;
        uint64_t v39 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }
      uint64_t v40 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v39) + 36);
      uint64_t v13 = (char *)v8 + v40;
      uint64_t v14 = (char *)v9 + v40;
      *(void *)uint64_t v13 = *(void *)((char *)v9 + v40);
      v13[8] = *((unsigned char *)v9 + v40 + 8);
      long long v41 = *(_OWORD *)((char *)v9 + v40 + 32);
      *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v9 + v40 + 16);
      *((_OWORD *)v13 + 2) = v41;
      *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v9 + v40 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v9 + v40 + 57);
      v13[73] = *((unsigned char *)v9 + v40 + 73);
      v13[76] = *((unsigned char *)v9 + v40 + 76);
      *((_WORD *)v13 + 37) = *(_WORD *)((char *)v9 + v40 + 74);
      v13[77] = *((unsigned char *)v9 + v40 + 77);
      uint64_t v42 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v43 = v42[9];
      long long v44 = &v13[v43];
      long long v45 = &v14[v43];
      uint64_t v46 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v47 = *(void *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
        goto LABEL_28;
      }
      goto LABEL_29;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_DWORD *assignWithTake for String.LocalizationValue.FormatArgument.CodableStorage(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  outlined destroy of String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format((uint64_t)a1, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 15:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[4] = a2[4];
      uint64_t v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                   + 48);
      uint64_t v24 = (_OWORD *)((char *)a1 + v23);
      int v25 = (_OWORD *)((char *)a2 + v23);
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      int v26 = swift_getEnumCaseMultiPayload();
      if (v26 == 2)
      {
        *uint64_t v24 = *v25;
        uint64_t v61 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
      }
      else
      {
        if (v26 == 1)
        {
          long long v27 = v25[1];
          *uint64_t v24 = *v25;
          v24[1] = v27;
          uint64_t v28 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
          uint64_t v29 = (char *)v24 + v28;
          uint64_t v30 = (char *)v25 + v28;
          *(void *)uint64_t v29 = *(void *)((char *)v25 + v28);
          v29[8] = *((unsigned char *)v25 + v28 + 8);
          long long v31 = *(_OWORD *)((char *)v25 + v28 + 32);
          *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v25 + v28 + 16);
          *((_OWORD *)v29 + 2) = v31;
          *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v25 + v28 + 48);
          *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v25 + v28 + 57);
          v29[73] = *((unsigned char *)v25 + v28 + 73);
          *(_DWORD *)(v29 + 74) = *(_DWORD *)((char *)v25 + v28 + 74);
          v29[78] = *((unsigned char *)v25 + v28 + 78);
          uint64_t v32 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v33 = v32[9];
          int v34 = &v29[v33];
          long long v35 = &v30[v33];
          uint64_t v36 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v37 = *(void *)(v36 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
          {
LABEL_12:
            uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
LABEL_36:
            uint64_t v85 = v32[10];
            long long v86 = &v29[v85];
            uint64_t v87 = &v30[v85];
            *(void *)long long v86 = *(void *)v87;
            v86[8] = v87[8];
            v29[v32[11]] = v30[v32[11]];
            uint64_t v78 = v32[12];
            goto LABEL_37;
          }
LABEL_35:
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          goto LABEL_36;
        }
        *uint64_t v24 = *v25;
        uint64_t v61 = type metadata accessor for NSDecimal.FormatStyle(0);
      }
      uint64_t v62 = *(int *)(v61 + 20);
      uint64_t v29 = (char *)v24 + v62;
      uint64_t v30 = (char *)v25 + v62;
      *(void *)uint64_t v29 = *(void *)((char *)v25 + v62);
      v29[8] = *((unsigned char *)v25 + v62 + 8);
      long long v63 = *(_OWORD *)((char *)v25 + v62 + 32);
      *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v25 + v62 + 16);
      *((_OWORD *)v29 + 2) = v63;
      *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v25 + v62 + 48);
      *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v25 + v62 + 57);
      v29[73] = *((unsigned char *)v25 + v62 + 73);
      *((_WORD *)v29 + 37) = *(_WORD *)((char *)v25 + v62 + 74);
      v29[76] = *((unsigned char *)v25 + v62 + 76);
      v29[77] = *((unsigned char *)v25 + v62 + 77);
      uint64_t v64 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v65 = v64[9];
      uint64_t v66 = &v29[v65];
      uint64_t v67 = &v30[v65];
      uint64_t v68 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v69 = *(void *)(v68 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68)) {
        goto LABEL_25;
      }
      goto LABEL_30;
    case 14:
      *(void *)a1 = *(void *)a2;
      uint64_t v39 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                   + 48);
      uint64_t v40 = (_OWORD *)((char *)a1 + v39);
      long long v41 = (_OWORD *)((char *)a2 + v39);
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      int v42 = swift_getEnumCaseMultiPayload();
      if (v42 == 2)
      {
        *uint64_t v40 = *v41;
        long long v71 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }
      else
      {
        if (v42 == 1)
        {
          long long v43 = v41[1];
          *uint64_t v40 = *v41;
          v40[1] = v43;
          uint64_t v44 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                       + 40);
          uint64_t v29 = (char *)v40 + v44;
          uint64_t v30 = (char *)v41 + v44;
          *(void *)uint64_t v29 = *(void *)((char *)v41 + v44);
          v29[8] = *((unsigned char *)v41 + v44 + 8);
          long long v45 = *(_OWORD *)((char *)v41 + v44 + 32);
          *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v41 + v44 + 16);
          *((_OWORD *)v29 + 2) = v45;
          *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v41 + v44 + 48);
          *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v41 + v44 + 57);
          v29[73] = *((unsigned char *)v41 + v44 + 73);
          *(_DWORD *)(v29 + 74) = *(_DWORD *)((char *)v41 + v44 + 74);
          v29[78] = *((unsigned char *)v41 + v44 + 78);
          uint64_t v32 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v46 = v32[9];
          int v34 = &v29[v46];
          long long v35 = &v30[v46];
          uint64_t v36 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v37 = *(void *)(v36 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36)) {
            goto LABEL_12;
          }
          goto LABEL_35;
        }
        *uint64_t v40 = *v41;
        long long v71 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }
      uint64_t v72 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v71) + 36);
      uint64_t v29 = (char *)v40 + v72;
      uint64_t v30 = (char *)v41 + v72;
      *(void *)uint64_t v29 = *(void *)((char *)v41 + v72);
      v29[8] = *((unsigned char *)v41 + v72 + 8);
      long long v73 = *(_OWORD *)((char *)v41 + v72 + 32);
      *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v41 + v72 + 16);
      *((_OWORD *)v29 + 2) = v73;
      *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v41 + v72 + 48);
      *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v41 + v72 + 57);
      v29[73] = *((unsigned char *)v41 + v72 + 73);
      v29[76] = *((unsigned char *)v41 + v72 + 76);
      *((_WORD *)v29 + 37) = *(_WORD *)((char *)v41 + v72 + 74);
      v29[77] = *((unsigned char *)v41 + v72 + 77);
      uint64_t v64 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v74 = v64[9];
      uint64_t v66 = &v29[v74];
      uint64_t v67 = &v30[v74];
      uint64_t v68 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v69 = *(void *)(v68 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
      {
LABEL_25:
        uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
LABEL_31:
        uint64_t v75 = v64[10];
        uint64_t v76 = &v29[v75];
        uint64_t v77 = &v30[v75];
        *(void *)uint64_t v76 = *(void *)v77;
        v76[8] = v77[8];
        uint64_t v78 = v64[11];
LABEL_37:
        v29[v78] = v30[v78];
        swift_storeEnumTagMultiPayload();
LABEL_42:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_30:
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v66, v67, v68);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
      goto LABEL_31;
    case 13:
      *(void *)a1 = *(void *)a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                  + 48);
      uint64_t v8 = (_OWORD *)((char *)a1 + v7);
      uint64_t v9 = (_OWORD *)((char *)a2 + v7);
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      int v10 = swift_getEnumCaseMultiPayload();
      if (v10 == 2)
      {
        *uint64_t v8 = *v9;
        uint64_t v47 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent)
                     + 36);
        uint64_t v48 = (char *)v8 + v47;
        uint64_t v49 = (char *)v9 + v47;
        *(void *)uint64_t v48 = *(void *)((char *)v9 + v47);
        v48[8] = *((unsigned char *)v9 + v47 + 8);
        long long v50 = *(_OWORD *)((char *)v9 + v47 + 32);
        *((_OWORD *)v48 + 1) = *(_OWORD *)((char *)v9 + v47 + 16);
        *((_OWORD *)v48 + 2) = v50;
        *((_OWORD *)v48 + 3) = *(_OWORD *)((char *)v9 + v47 + 48);
        *(_OWORD *)(v48 + 57) = *(_OWORD *)((char *)v9 + v47 + 57);
        v48[73] = *((unsigned char *)v9 + v47 + 73);
        v48[76] = *((unsigned char *)v9 + v47 + 76);
        *((_WORD *)v48 + 37) = *(_WORD *)((char *)v9 + v47 + 74);
        v48[77] = *((unsigned char *)v9 + v47 + 77);
        uint64_t v51 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v52 = v51[9];
        uint64_t v53 = &v48[v52];
        long long v54 = &v49[v52];
        uint64_t v55 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v56 = *(void *)(v55 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
LABEL_21:
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v53, v54, *(void *)(*(void *)(v60 - 8) + 64));
LABEL_40:
          uint64_t v88 = v51[10];
          long long v89 = &v48[v88];
          uint64_t v90 = &v49[v88];
          *(void *)long long v89 = *(void *)v90;
          v89[8] = v90[8];
          uint64_t v91 = v51[11];
          uint64_t v83 = &v48[v91];
          long long v84 = &v49[v91];
LABEL_41:
          char *v83 = *v84;
          swift_storeEnumTagMultiPayload();
          goto LABEL_42;
        }
      }
      else
      {
        if (v10 == 1)
        {
          long long v11 = v9[1];
          *uint64_t v8 = *v9;
          v8[1] = v11;
          uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                       + 40);
          uint64_t v13 = (char *)v8 + v12;
          uint64_t v14 = (char *)v9 + v12;
          *(void *)uint64_t v13 = *(void *)((char *)v9 + v12);
          v13[8] = *((unsigned char *)v9 + v12 + 8);
          long long v15 = *(_OWORD *)((char *)v9 + v12 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v9 + v12 + 16);
          *((_OWORD *)v13 + 2) = v15;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v9 + v12 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v9 + v12 + 57);
          v13[73] = *((unsigned char *)v9 + v12 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v9 + v12 + 74);
          v13[78] = *((unsigned char *)v9 + v12 + 78);
          unsigned __int16 v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          uint64_t v17 = v16[9];
          long long v18 = &v13[v17];
          long long v19 = &v14[v17];
          uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v21 = *(void *)(v20 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
          {
            uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
          }
          uint64_t v79 = v16[10];
          uint64_t v80 = &v13[v79];
          long long v81 = &v14[v79];
          *(void *)uint64_t v80 = *(void *)v81;
          v80[8] = v81[8];
          v13[v16[11]] = v14[v16[11]];
          uint64_t v82 = v16[12];
          uint64_t v83 = &v13[v82];
          long long v84 = &v14[v82];
          goto LABEL_41;
        }
        *uint64_t v8 = *v9;
        uint64_t v57 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>)
                     + 36);
        uint64_t v48 = (char *)v8 + v57;
        uint64_t v49 = (char *)v9 + v57;
        *(void *)uint64_t v48 = *(void *)((char *)v9 + v57);
        v48[8] = *((unsigned char *)v9 + v57 + 8);
        long long v58 = *(_OWORD *)((char *)v9 + v57 + 32);
        *((_OWORD *)v48 + 1) = *(_OWORD *)((char *)v9 + v57 + 16);
        *((_OWORD *)v48 + 2) = v58;
        *((_OWORD *)v48 + 3) = *(_OWORD *)((char *)v9 + v57 + 48);
        *(_OWORD *)(v48 + 57) = *(_OWORD *)((char *)v9 + v57 + 57);
        v48[73] = *((unsigned char *)v9 + v57 + 73);
        v48[76] = *((unsigned char *)v9 + v57 + 76);
        *((_WORD *)v48 + 37) = *(_WORD *)((char *)v9 + v57 + 74);
        v48[77] = *((unsigned char *)v9 + v57 + 77);
        uint64_t v51 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v59 = v51[9];
        uint64_t v53 = &v48[v59];
        long long v54 = &v49[v59];
        uint64_t v55 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v56 = *(void *)(v55 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55)) {
          goto LABEL_21;
        }
      }
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v53, v54, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      goto LABEL_40;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        long long v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper()
{
  return &type metadata for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a1 + 32;
  uint64_t v6 = a2 + 32;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  swift_retain();
  v8(v5, v6, v7);
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 64, a2 + 64);
  return a1;
}

void *assignWithCopy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_0(a1 + 4, a2 + 4);
  __swift_assign_boxed_opaque_existential_0(a1 + 8, a2 + 8);
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 2));
  long long v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 4));
  long long v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper()
{
  return &type metadata for String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.Storage(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 112);
  if (v2 >= 7) {
    unsigned int v2 = *(_DWORD *)result + 7;
  }
  switch(v2)
  {
    case 1u:
      uint64_t result = swift_release();
      break;
    case 2u:
    case 3u:
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v1 + 32);
      uint64_t result = v1 + 64;
      goto LABEL_5;
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_release();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5u:
      swift_bridgeObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      break;
    case 6u:
      return result;
    default:
LABEL_5:
      uint64_t result = __swift_destroy_boxed_opaque_existential_1(result);
      break;
  }
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 112);
  if (v4 >= 7) {
    unsigned int v4 = *(_DWORD *)a2 + 7;
  }
  switch(v4)
  {
    case 1u:
      uint64_t v6 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 112) = 1;
      swift_retain();
      return a1;
    case 2u:
      *(void *)a1 = *(void *)a2;
      uint64_t v7 = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = v7;
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v8;
      uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
      swift_retain();
      swift_retain();
      v9(a1 + 32, a2 + 32, v8);
      uint64_t v10 = *(void *)(a2 + 88);
      *(void *)(a1 + 88) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 64, a2 + 64);
      char v11 = 2;
      goto LABEL_11;
    case 3u:
      *(void *)a1 = *(void *)a2;
      uint64_t v12 = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = v12;
      uint64_t v13 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v13;
      uint64_t v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
      swift_retain();
      swift_retain();
      v14(a1 + 32, a2 + 32, v13);
      uint64_t v15 = *(void *)(a2 + 88);
      *(void *)(a1 + 88) = v15;
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 64, a2 + 64);
      char v11 = 3;
      goto LABEL_11;
    case 4u:
      uint64_t v16 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v16;
      uint64_t v17 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v17;
      uint64_t v18 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v18;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v20 = *(void **)(a2 + 72);
      uint64_t v19 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = v20;
      *(void *)(a1 + 80) = v19;
      uint64_t v21 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v21;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(unsigned char *)(a1 + 112) = 4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      id v22 = v20;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      return a1;
    case 5u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 112) = 5;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      return a1;
    case 6u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      char v11 = 6;
LABEL_11:
      *(unsigned char *)(a1 + 112) = v11;
      break;
    default:
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      *(unsigned char *)(a1 + 112) = 0;
      break;
  }
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 112);
    if (v4 >= 7) {
      unsigned int v4 = *(_DWORD *)a1 + 7;
    }
    switch(v4)
    {
      case 1u:
        swift_release();
        break;
      case 2u:
      case 3u:
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        __swift_destroy_boxed_opaque_existential_1(a1 + 64);
        break;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        break;
      case 5u:
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        break;
      case 6u:
        break;
      default:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 112);
    if (v5 >= 7) {
      unsigned int v5 = *(_DWORD *)a2 + 7;
    }
    switch(v5)
    {
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 112) = 1;
        swift_retain();
        return a1;
      case 2u:
        uint64_t v7 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v7;
        uint64_t v8 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v8;
        uint64_t v9 = *(void *)(a2 + 56);
        *(void *)(a1 + 56) = v9;
        uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
        swift_retain();
        swift_retain();
        v10(a1 + 32, a2 + 32, v9);
        uint64_t v11 = *(void *)(a2 + 88);
        *(void *)(a1 + 88) = v11;
        (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
        char v12 = 2;
        goto LABEL_20;
      case 3u:
        uint64_t v13 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v13;
        uint64_t v14 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v14;
        uint64_t v15 = *(void *)(a2 + 56);
        *(void *)(a1 + 56) = v15;
        uint64_t v16 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
        swift_retain();
        swift_retain();
        v16(a1 + 32, a2 + 32, v15);
        uint64_t v17 = *(void *)(a2 + 88);
        *(void *)(a1 + 88) = v17;
        (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 64, a2 + 64);
        char v12 = 3;
        goto LABEL_20;
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        uint64_t v18 = *(void **)(a2 + 72);
        *(void *)(a1 + 72) = v18;
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        *(unsigned char *)(a1 + 112) = 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v19 = v18;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        return a1;
      case 5u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(unsigned char *)(a1 + 112) = 5;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        return a1;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        char v12 = 6;
LABEL_20:
        *(unsigned char *)(a1 + 112) = v12;
        break;
      default:
        uint64_t v6 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v6;
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
        *(unsigned char *)(a1 + 112) = 0;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 112);
    if (v4 >= 7) {
      unsigned int v4 = *(_DWORD *)a1 + 7;
    }
    switch(v4)
    {
      case 1u:
        swift_release();
        break;
      case 2u:
      case 3u:
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        __swift_destroy_boxed_opaque_existential_1(a1 + 64);
        break;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        break;
      case 5u:
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        break;
      case 6u:
        break;
      default:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 112);
    if (v5 >= 7) {
      unsigned int v5 = *(_DWORD *)a2 + 7;
    }
    switch(v5)
    {
      case 1u:
        *(_OWORD *)a1 = *a2;
        char v6 = 1;
        goto LABEL_21;
      case 2u:
        long long v9 = a2[3];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v9;
        long long v10 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v10;
        long long v7 = *a2;
        long long v8 = a2[1];
        char v6 = 2;
        goto LABEL_17;
      case 3u:
        long long v11 = a2[3];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v11;
        long long v12 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v12;
        long long v7 = *a2;
        long long v8 = a2[1];
        char v6 = 3;
        goto LABEL_17;
      case 4u:
        long long v13 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v13;
        *(_OWORD *)(a1 + 96) = a2[6];
        long long v14 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v14;
        long long v15 = a2[3];
        char v6 = 4;
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v15;
        goto LABEL_21;
      case 5u:
        long long v16 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v16;
        char v6 = 5;
        goto LABEL_21;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        char v6 = 6;
        goto LABEL_21;
      default:
        char v6 = 0;
        long long v7 = *a2;
        long long v8 = a2[1];
LABEL_17:
        *(_OWORD *)a1 = v7;
        *(_OWORD *)(a1 + 16) = v8;
LABEL_21:
        *(unsigned char *)(a1 + 112) = v6;
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 >= 7) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + 112) = 0;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 112) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for String.LocalizationValue.FormatArgument.Storage(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 112);
  if (result >= 7) {
    return (*(_DWORD *)a1 + 7);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument.Storage(uint64_t result, unsigned int a2)
{
  if (a2 > 6)
  {
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    unsigned int v2 = a2 - 7;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    LOBYTE(a2) = 7;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 112) = a2;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.Storage()
{
  return &type metadata for String.LocalizationValue.FormatArgument.Storage;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle()
{
  return lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  a1[2] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  uint64_t result = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle()
{
  return lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  a1[2] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  uint64_t result = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle()
{
  return lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  a1[2] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  uint64_t result = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format()
{
  return lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format()
{
  return lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format()
{
  return lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
  a1[2] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
  unint64_t result = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }
  return result;
}

uint64_t outlined init with take of String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }
  return result;
}

_OWORD *outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  long long v5 = a1[4];
  long long v6 = a1[5];
  long long v7 = a1[6];
  *(_OWORD *)((char *)a2 + 106) = *(long long *)((char *)a1 + 106);
  a2[5] = v6;
  a2[6] = v7;
  a2[4] = v5;
  return a2;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 120) >> 14;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi2_(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  __int16 v4 = *(_WORD *)(result + 120) & 0x107 | 0xC000;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v1;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  __int16 v4 = *(_WORD *)(result + 120) & 0x107 | 0x8000;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v1;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(uint64_t result)
{
  *(_WORD *)(result + 120) &= 0x3FFFu;
  return result;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  __int16 v4 = *(_WORD *)(result + 120) & 0x107;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v1;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v4 = *(_WORD *)(a1 + 120);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), v4);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation23LocalizedStringResourceVG_SSs5NeverOTg506_sSS10d164E17LocalizationValueV14FormatArgumentV7resolve10attributed4with9includings7CVarArg_p6vararg_AE15_AttributeFixupOSg11attrStrInfotSb_AA6LocaleVxmtAA0M5ScopeRzlFSSAA23efG7VXEfU0_AF6LocaleVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v52 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v6 = a3;
  uint64_t result = v52;
  v44[0] = 0;
  v44[1] = 0;
  __int16 v45 = 256;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  long long v8 = (void *)(a1 + 136);
  char v48 = 0;
  uint64_t v33 = v6;
  do
  {
    int64_t v36 = v3;
    uint64_t v37 = result;
    uint64_t v38 = *(v8 - 12);
    uint64_t v10 = *(v8 - 11);
    long long v9 = (char *)*(v8 - 10);
    uint64_t v12 = *(v8 - 9);
    uint64_t v11 = *(v8 - 8);
    uint64_t v13 = *(v8 - 7);
    long long v14 = (void *)*(v8 - 4);
    uint64_t v15 = *(v8 - 3);
    uint64_t v16 = *v8;
    v49[0] = *(v8 - 13);
    v49[1] = v38;
    v49[2] = v10;
    v49[3] = v9;
    uint64_t v40 = v12;
    uint64_t v41 = v10;
    long long v35 = v9;
    v49[4] = v12;
    v49[5] = v11;
    v49[6] = v13;
    v49[7] = a2;
    v49[8] = v6;
    v49[9] = v14;
    v49[10] = v15;
    long long v50 = *((_OWORD *)v8 - 1);
    uint64_t v51 = v16;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    id v17 = v14;
    swift_unknownObjectRetain();
    id v18 = v17;
    swift_bridgeObjectRelease();
    id v19 = v18;
    uint64_t v34 = specialized LocalizedStringResource._withExtensionForBundle<A>(_:)(v49, v44, v49);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();

      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v23 = v34;
      int64_t v24 = v36;
    }
    else
    {
      v43[0] = MEMORY[0x1E4FBC860];
      v43[1] = 0;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain();
      uint64_t v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v41, v43, a2, v33);
      swift_bridgeObjectRelease();
      if (*(void *)(v25 + 16))
      {
        swift_unknownObjectRetain();
        uint64_t v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v25, a2, v33, v42);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        long long v35 = specialized withVaList<A>(_:_:)(v32, (uint64_t)v35, v40, a2, v33);
        uint64_t v27 = v26;
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = v27;
        uint64_t v28 = v19;
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v28 = v19;

        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v22 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      int64_t v24 = v36;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v23 = (uint64_t)v35;
    }
    uint64_t result = v37;
    uint64_t v52 = v37;
    unint64_t v30 = *(void *)(v37 + 16);
    unint64_t v29 = *(void *)(v37 + 24);
    if (v30 >= v29 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      uint64_t result = v52;
    }
    *(void *)(result + 16) = v30 + 1;
    uint64_t v31 = result + 16 * v30;
    *(void *)(v31 + 32) = v23;
    *(void *)(v31 + 40) = v22;
    v8 += 14;
    int64_t v3 = v24 - 1;
    uint64_t v6 = v33;
  }
  while (v3);
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }
  return result;
}

uint64_t outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v15 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 144);
  uint64_t v4 = *(void *)(a1 + 152);
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 176);
  uint64_t v8 = *(void *)(a1 + 184);
  long long v13 = *(_OWORD *)(a1 + 208);
  long long v14 = *(_OWORD *)(a1 + 192);
  long long v12 = *(_OWORD *)(a1 + 224);
  uint64_t v9 = *(void *)(a1 + 240);
  unsigned __int16 v10 = *(_WORD *)(a1 + 248);
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(_WORD *)(a1 + 120));
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v15, v2, v3, v4, v5, v6, v7, v8, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t outlined init with copy of String.LocalizationValue.FormatArgument.CodableStorage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(a1, *(void *)(v3 + 16));
  if (!v4) {
    *a3 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }
  return result;
}

uint64_t _So9NSDecimala__reserved_getter(_DWORD *a1)
{
  return *a1 >> 14;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi0_(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  __int16 v4 = *(_WORD *)(result + 120) & 0x107 | 0x4000;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v1;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t sub_181B1541C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 <= 0xFD) {
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(*(void *)(v0 + 16), *(void *)(v0 + 24), v1 & 1);
  }

  return MEMORY[0x1F4186498](v0, 33, 7);
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_release();
  }
}

unint64_t lazy protocol witness table accessor for type NSAttributedString and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject)
  {
    type metadata accessor for NSMorphologyPronoun(255, &lazy cache variable for type metadata for NSAttributedString);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject);
  }
  return result;
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(result, a2, a3 & 1);
  }
  return result;
}

uint64_t outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup??(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 254) {
    return outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(result, a2, a3);
  }
  return result;
}

uint64_t outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(result, a2, a3 & 1);
  }
  return result;
}

uint64_t outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    return swift_retain();
  }
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup??(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 254) {
    return outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(result, a2, a3);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [LocalizedStringResource] and conformance <A> [A](unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value);
  }
  return result;
}

uint64_t outlined init with copy of String.LocalizationValue.FormatArgument(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2[3] - 8) + 80);
  return closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)(a1, (uint64_t)v2+ ((((v3 + 48) & ~v3)+ *(void *)(*(void *)(v2[3] - 8) + 64)+ *(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80)), v2[3], v2[4], v2[5], a2);
}

uint64_t partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(long long *a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80);
  return closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, (uint64_t)v1 + v2, (uint64_t)v1+ ((v2 + *(void *)(*(void *)(v1[3] - 8) + 64) + *(unsigned __int8 *)(*(void *)(v1[2] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[2] - 8) + 80)), v1[2], v1[3], v1[4]);
}

uint64_t objectdestroy_24Tm()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(v1 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + *(void *)(v2 + 64) + v6) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v3 | v6 | 7;
  (*(void (**)(uint64_t))(v2 + 8))(v0 + v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v1);

  return MEMORY[0x1F4186498](v0, v8, v9);
}

uint64_t partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)(uint64_t a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80);
  return closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v1 + v2, v1+ ((v2+ *(void *)(*(void *)(*(void *)(v1 + 24) - 8) + 64)+ *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1)
{
  return outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument._AttributeFixup()
{
  return &type metadata for String.LocalizationValue.FormatArgument._AttributeFixup;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys()
{
  return &unk_1ECA4D9D0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys()
{
  return &unk_1ECA4D290;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys()
{
  return &unk_1ECA4DCA0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_1ECA4D790;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys()
{
  return &unk_1ECA4D820;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return &unk_1ECA4D940;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys()
{
  return &unk_1ECA4D8B0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_1ECA4D050;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  return &unk_1ECA4D0E0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return &unk_1ECA4D200;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys()
{
  return &unk_1ECA4D170;
}

unsigned char *storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B15D64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_1ECA4DA60;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys()
{
  return &unk_1ECA4DAF0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return &unk_1ECA4DC10;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys()
{
  return &unk_1ECA4DB80;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  return &unk_1ECA4D680;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *unint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B15F38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  return &unk_1ECA4DD30;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys()
{
  return &unk_1ECA4E750;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys()
{
  return &unk_1ECA4DEE0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys()
{
  return &unk_1ECA4DF70;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys()
{
  return &unk_1ECA4E120;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys()
{
  return &unk_1ECA4E1B0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys()
{
  return &unk_1ECA4DE50;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys()
{
  return &unk_1ECA4E000;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return &unk_1ECA4E240;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys()
{
  return &unk_1ECA4E090;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys()
{
  return &unk_1ECA4DDC0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  return &unk_1ECA4E5A0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys()
{
  return &unk_1ECA4E3F0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys()
{
  return &unk_1ECA4E6C0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  return &unk_1ECA4E360;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys()
{
  return &unk_1ECA4E510;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys()
{
  return &unk_1ECA4E630;
}

unsigned char *storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B16140);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys()
{
  return &unk_1ECA4E480;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys()
{
  return &unk_1ECA4E2D0;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1)
{
  return outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(_WORD *)(a1 + 120));
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  unsigned __int16 v19 = *(_WORD *)(a2 + 120);
  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(_WORD *)(a1 + 120) = v19;
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v26 = *(void *)(a2 + 72);
  uint64_t v27 = *(void *)(a2 + 80);
  uint64_t v28 = *(void *)(a2 + 88);
  uint64_t v29 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 104);
  uint64_t v31 = *(void *)(a2 + 112);
  unsigned __int16 v32 = *(_WORD *)(a2 + 120);
  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 112);
  unsigned __int16 v24 = *(_WORD *)(a1 + 120);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v26;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v29;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v31;
  *(_WORD *)(a1 + 120) = v32;
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, v24);
  return a1;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  __int16 v4 = *(_WORD *)(a2 + 120);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 112);
  unsigned __int16 v17 = *(_WORD *)(a1 + 120);
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = v3;
  *(_WORD *)(a1 + 120) = v4;
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 122)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 64) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 120) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 122) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = 2 * -a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_WORD *)(a1 + 120) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 122) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(uint64_t result, __int16 a2)
{
  uint64_t v2 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  __int16 v5 = *(_WORD *)(result + 120) & 0x107 | (a2 << 14);
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v2;
  *(void *)(result + 96) = v3;
  *(void *)(result + 112) = v4;
  *(_WORD *)(result + 120) = v5;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  return &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
}

uint64_t specialized String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017 && a2 == 0x80000001823AA100
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x3233746E69 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x3436746E69 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x3233746E6975 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x3436746E6975 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74616F6C66 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656C62756F64 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x74616F6C666763 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x676E69727473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001823AA120 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x657474616D726F66 && a2 == 0xED00006574614464 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001823AA140 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x657474616D726F66 && a2 == 0xEC000000746E4964 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x657474616D726F66 && a2 == 0xEE0074616F6C4664 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001823AA160 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x657474616D726F66 && a2 == 0xED00007473694C64 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6C6F686563616C70 && a2 == 0xEB00000000726564)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 17;
    }
    else {
      return 18;
    }
  }
}

uint64_t specialized String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }
  return result;
}

uint64_t specialized String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D695465746164 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x313036386F7369 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D69746162726576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65766974616C6572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265626D756ELL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unsigned char *storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B199E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_1ECA4D3B0;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys()
{
  return &unk_1ECA4D320;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys()
{
  return &unk_1ECA4D440;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys()
{
  return &unk_1ECA4D560;
}

unsigned char *storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181B19AE8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys()
{
  return &unk_1ECA4D4D0;
}

uint64_t DateComponents.calendar.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_unknownObjectRelease();
  *uint64_t v1 = v2;
  v1[1] = v3;
  uint64_t result = v1[2];
  if (result) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = v1[3];
    v7[0] = v1[2];
    v7[1] = v6;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter(v7);
  }
  return result;
}

uint64_t DateComponents.era.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 32) = v3;
  *(unsigned char *)(v2 + 40) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.nanosecond.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 160) = v3;
  *(unsigned char *)(v2 + 168) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekday.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 176) = v3;
  *(unsigned char *)(v2 + 184) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekdayOrdinal.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 192) = v3;
  *(unsigned char *)(v2 + 200) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.quarter.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 208) = v3;
  *(unsigned char *)(v2 + 216) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekOfMonth.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 240) = v3;
  *(unsigned char *)(v2 + 248) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekOfYear.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 256) = v3;
  *(unsigned char *)(v2 + 264) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.yearForWeekOfYear.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 272) = v3;
  *(unsigned char *)(v2 + 280) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.dayOfYear.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 96) = v3;
  *(unsigned char *)(v2 + 104) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t key path setter for DateComponents.calendar : DateComponents(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *a2 = v3;
  a2[1] = v4;
  uint64_t result = a2[2];
  if (result) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = a2[3];
    v8[0] = a2[2];
    v8[1] = v7;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter(v8);
  }
  return result;
}

uint64_t _s10Foundation14DateComponentsVSgWOi0_(uint64_t a1)
{
  *(void *)a1 = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t result = a1 + 8;
  *(_OWORD *)(result + 256) = 0u;
  return result;
}

uint64_t (*DateComponents.calendar.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  swift_unknownObjectRetain();
  return DateComponents.calendar.modify;
}

uint64_t DateComponents.calendar.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = (void *)a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v2 = v4;
    v2[1] = v3;
    if (v2[2]) {
      BOOL v5 = v4 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v6 = v2[3];
      uint64_t v10 = v2[2];
      uint64_t v11 = v6;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(&v10);
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    *uint64_t v2 = v4;
    v2[1] = v3;
    uint64_t result = v2[2];
    if (result) {
      BOOL v8 = v4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t v9 = v2[3];
      uint64_t v10 = v2[2];
      uint64_t v11 = v9;
      swift_unknownObjectRetain();
      return Calendar.timeZone.setter(&v10);
    }
  }
  return result;
}

uint64_t key path setter for DateComponents.timeZone : DateComponents(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  a2[2] = *a1;
  a2[3] = v4;
  swift_unknownObjectRetain_n();
  uint64_t result = swift_unknownObjectRelease();
  if (v3)
  {
    if (*a2)
    {
      v6[0] = v3;
      v6[1] = v4;
      return Calendar.timeZone.setter(v6);
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t (*DateComponents.timeZone.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  return DateComponents.timeZone.modify;
}

uint64_t DateComponents.timeZone.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = a1[1];
  uint64_t v3 = (void *)a1[2];
  uint64_t v5 = *a1;
  v3[2] = *a1;
  v3[3] = v4;
  swift_unknownObjectRetain();
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (v5)
    {
      if (*v3)
      {
        uint64_t v7 = v5;
        uint64_t v8 = v4;
        Calendar.timeZone.setter(&v7);
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    uint64_t result = swift_unknownObjectRelease();
    if (!v5) {
      return result;
    }
    if (*v3)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v4;
      return Calendar.timeZone.setter(&v7);
    }
  }

  return swift_unknownObjectRelease();
}

uint64_t *(*DateComponents.era.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.era.modify;
}

uint64_t *DateComponents.era.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 40) = v4;
  return result;
}

uint64_t *(*DateComponents.year.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 48);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.year.modify;
}

uint64_t *DateComponents.year.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 48) = v2;
  *(unsigned char *)(v1 + 56) = v4;
  return result;
}

uint64_t *(*DateComponents.month.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 72);
  *(void *)a1 = *(void *)(v1 + 64);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.month.modify;
}

uint64_t *DateComponents.month.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 64) = v2;
  *(unsigned char *)(v1 + 72) = v4;
  return result;
}

uint64_t *(*DateComponents.day.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 88);
  *(void *)a1 = *(void *)(v1 + 80);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.day.modify;
}

uint64_t *DateComponents.day.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 80) = v2;
  *(unsigned char *)(v1 + 88) = v4;
  return result;
}

uint64_t *(*DateComponents.hour.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 120);
  *(void *)a1 = *(void *)(v1 + 112);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.hour.modify;
}

uint64_t *DateComponents.hour.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 112) = v2;
  *(unsigned char *)(v1 + 120) = v4;
  return result;
}

uint64_t *(*DateComponents.minute.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 136);
  *(void *)a1 = *(void *)(v1 + 128);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.minute.modify;
}

uint64_t *DateComponents.minute.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 128) = v2;
  *(unsigned char *)(v1 + 136) = v4;
  return result;
}

uint64_t *(*DateComponents.second.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 152);
  *(void *)a1 = *(void *)(v1 + 144);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.second.modify;
}

uint64_t *DateComponents.second.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 144) = v2;
  *(unsigned char *)(v1 + 152) = v4;
  return result;
}

uint64_t *(*DateComponents.nanosecond.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 168);
  *(void *)a1 = *(void *)(v1 + 160);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.nanosecond.modify;
}

uint64_t *DateComponents.nanosecond.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 160) = v2;
  *(unsigned char *)(v1 + 168) = v4;
  return result;
}

uint64_t *(*DateComponents.weekday.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 184);
  *(void *)a1 = *(void *)(v1 + 176);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.weekday.modify;
}

uint64_t *DateComponents.weekday.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 176) = v2;
  *(unsigned char *)(v1 + 184) = v4;
  return result;
}

uint64_t *(*DateComponents.weekdayOrdinal.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 200);
  *(void *)a1 = *(void *)(v1 + 192);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.weekdayOrdinal.modify;
}

uint64_t *DateComponents.weekdayOrdinal.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 192) = v2;
  *(unsigned char *)(v1 + 200) = v4;
  return result;
}

uint64_t *(*DateComponents.quarter.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 216);
  *(void *)a1 = *(void *)(v1 + 208);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.quarter.modify;
}

uint64_t *DateComponents.quarter.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 208) = v2;
  *(unsigned char *)(v1 + 216) = v4;
  return result;
}

uint64_t *(*DateComponents.weekOfMonth.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 248);
  *(void *)a1 = *(void *)(v1 + 240);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.weekOfMonth.modify;
}

uint64_t *DateComponents.weekOfMonth.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 240) = v2;
  *(unsigned char *)(v1 + 248) = v4;
  return result;
}

uint64_t *(*DateComponents.weekOfYear.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 264);
  *(void *)a1 = *(void *)(v1 + 256);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.weekOfYear.modify;
}

uint64_t *DateComponents.weekOfYear.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 256) = v2;
  *(unsigned char *)(v1 + 264) = v4;
  return result;
}

uint64_t DateComponents.dayOfYear.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t *(*DateComponents.dayOfYear.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 104);
  *(void *)a1 = *(void *)(v1 + 96);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.dayOfYear.modify;
}

uint64_t *DateComponents.dayOfYear.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 96) = v2;
  *(unsigned char *)(v1 + 104) = v4;
  return result;
}

uint64_t DateComponents.week.getter()
{
  return *(void *)(v0 + 224);
}

uint64_t DateComponents.week.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 224) = v3;
  *(unsigned char *)(v2 + 232) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t *(*DateComponents.week.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 232);
  *(void *)a1 = *(void *)(v1 + 224);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.week.modify;
}

uint64_t *DateComponents.week.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 224) = v2;
  *(unsigned char *)(v1 + 232) = v4;
  return result;
}

uint64_t *(*DateComponents.yearForWeekOfYear.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 280);
  *(void *)a1 = *(void *)(v1 + 272);
  *(unsigned char *)(a1 + 8) = v2;
  return DateComponents.yearForWeekOfYear.modify;
}

uint64_t *DateComponents.yearForWeekOfYear.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 272) = v2;
  *(unsigned char *)(v1 + 280) = v4;
  return result;
}

uint64_t DateComponents.isLeapMonth.getter()
{
  return *(unsigned __int8 *)(v0 + 281);
}

uint64_t DateComponents.isLeapMonth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 281) = result;
  return result;
}

unsigned char *(*DateComponents.isLeapMonth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 281);
  return DateComponents.isLeapMonth.modify;
}

unsigned char *DateComponents.isLeapMonth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 281) = result[8];
  return result;
}

Swift::Int_optional __swiftcall DateComponents.value(for:)(Foundation::Calendar::Component a1)
{
  uint64_t v2 = *(unsigned __int8 *)a1;
  Swift::Int v3 = *(void *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 40);
  switch(v2)
  {
    case 1:
      char v4 = *(unsigned char *)(v1 + 56);
      Swift::Int v3 = *(void *)(v1 + 48);
      break;
    case 2:
      char v4 = *(unsigned char *)(v1 + 72);
      Swift::Int v3 = *(void *)(v1 + 64);
      break;
    case 3:
      char v4 = *(unsigned char *)(v1 + 88);
      Swift::Int v3 = *(void *)(v1 + 80);
      break;
    case 4:
      char v4 = *(unsigned char *)(v1 + 120);
      Swift::Int v3 = *(void *)(v1 + 112);
      break;
    case 5:
      char v4 = *(unsigned char *)(v1 + 136);
      Swift::Int v3 = *(void *)(v1 + 128);
      break;
    case 6:
      char v4 = *(unsigned char *)(v1 + 152);
      Swift::Int v3 = *(void *)(v1 + 144);
      break;
    case 7:
      char v4 = *(unsigned char *)(v1 + 184);
      Swift::Int v3 = *(void *)(v1 + 176);
      break;
    case 8:
      char v4 = *(unsigned char *)(v1 + 200);
      Swift::Int v3 = *(void *)(v1 + 192);
      break;
    case 9:
      char v4 = *(unsigned char *)(v1 + 216);
      Swift::Int v3 = *(void *)(v1 + 208);
      break;
    case 10:
      char v4 = *(unsigned char *)(v1 + 248);
      Swift::Int v3 = *(void *)(v1 + 240);
      break;
    case 11:
      char v4 = *(unsigned char *)(v1 + 264);
      Swift::Int v3 = *(void *)(v1 + 256);
      break;
    case 12:
      char v4 = *(unsigned char *)(v1 + 280);
      Swift::Int v3 = *(void *)(v1 + 272);
      break;
    case 13:
      char v4 = *(unsigned char *)(v1 + 168);
      Swift::Int v3 = *(void *)(v1 + 160);
      break;
    case 14:
    case 15:
    case 16:
      Swift::Int v3 = 0;
      char v4 = 1;
      break;
    case 17:
      char v4 = *(unsigned char *)(v1 + 104);
      Swift::Int v3 = *(void *)(v1 + 96);
      break;
    default:
      break;
  }
  result.value = v3;
  result.is_nil = v4;
  return result;
}

uint64_t DateComponents.isValidDate.getter()
{
  void (*v4)(void *__return_ptr, _OWORD *, uint64_t, uint64_t);
  double v5;
  uint64_t v6;
  void (*v7)(double *__return_ptr, void *, uint64_t, uint64_t);
  uint64_t v9;
  double v10;
  double v11;
  void v12[36];
  uint64_t v13;
  double v14;
  uint64_t v15;
  _OWORD __src[18];
  _OWORD __dst[18];

  memcpy(__dst, v0, 0x11AuLL);
  double v1 = *(double *)__dst;
  if (!*(void *)&__dst[0]) {
    return 0;
  }
  uint64_t v2 = *((void *)&__dst[0] + 1);
  if (BYTE8(__dst[10])) {
    goto LABEL_3;
  }
  if (*(uint64_t *)&__dst[10] > 999999999) {
    return 0;
  }
  if ((*(void *)&__dst[10] & 0x8000000000000000) != 0)
  {
LABEL_3:
    uint64_t ObjectType = swift_getObjectType();
    memcpy(__src, v0, 0x11AuLL);
    char v4 = *(void (**)(void *__return_ptr, _OWORD *, uint64_t, uint64_t))(v2 + 176);
    swift_unknownObjectRetain();
    v4(v12, __src, ObjectType, v2);
    if ((v12[1] & 1) == 0)
    {
      uint64_t v5 = *(double *)v12;
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  *(void *)&__src[2] = *(void *)&__dst[2];
  BYTE8(__src[2]) = BYTE8(__dst[2]);
  *(void *)&__src[3] = *(void *)&__dst[3];
  BYTE8(__src[3]) = BYTE8(__dst[3]);
  *(void *)&__src[4] = *(void *)&__dst[4];
  BYTE8(__src[4]) = BYTE8(__dst[4]);
  *(void *)&__src[5] = *(void *)&__dst[5];
  BYTE8(__src[5]) = BYTE8(__dst[5]);
  *(void *)&__src[6] = *(void *)&__dst[6];
  BYTE8(__src[6]) = BYTE8(__dst[6]);
  *(void *)&__src[7] = *(void *)&__dst[7];
  BYTE8(__src[7]) = BYTE8(__dst[7]);
  *(void *)&__src[8] = *(void *)&__dst[8];
  BYTE8(__src[8]) = BYTE8(__dst[8]);
  *(void *)&__src[9] = *(void *)&__dst[9];
  BYTE8(__src[9]) = BYTE8(__dst[9]);
  *(void *)&__src[11] = *(void *)&__dst[11];
  BYTE8(__src[11]) = BYTE8(__dst[11]);
  *(void *)&__src[12] = *(void *)&__dst[12];
  BYTE8(__src[12]) = BYTE8(__dst[12]);
  *(void *)&__src[13] = *(void *)&__dst[13];
  BYTE8(__src[13]) = BYTE8(__dst[13]);
  *(void *)&__src[14] = *(void *)&__dst[14];
  BYTE8(__src[14]) = BYTE8(__dst[14]);
  *(void *)&__src[15] = *(void *)&__dst[15];
  BYTE8(__src[15]) = BYTE8(__dst[15]);
  BYTE8(__src[16]) = BYTE8(__dst[16]);
  WORD4(__src[17]) = WORD4(__dst[17]);
  *(void *)&__src[16] = *(void *)&__dst[16];
  *(void *)&_OWORD __src[17] = *(void *)&__dst[17];
  __src[0] = __dst[0];
  __src[1] = __dst[1];
  *(void *)&__src[10] = 0;
  BYTE8(__src[10]) = 0;
  uint64_t v6 = swift_getObjectType();
  memcpy(v12, __src, 0x11AuLL);
  uint64_t v7 = *(void (**)(double *__return_ptr, void *, uint64_t, uint64_t))(v2 + 176);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  outlined retain of DateComponents((uint64_t)__src);
  v7(&v14, v12, v6, v2);
  outlined release of DateComponents((uint64_t)__src);
  outlined release of DateComponents((uint64_t)__src);
  if (v15)
  {
LABEL_8:
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v5 = v14;
LABEL_11:
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  v12[0] = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347B8);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347B9);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347BA);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347BB);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347BC);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347BD);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347BE);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347BF);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347C0);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347C1);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347C2);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347C3);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347C4);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA347C5);
  long long v14 = v1;
  long long v15 = v2;
  uint64_t v9 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v9, &v13);
  uint64_t v10 = 1.59271755e13;
  if (v5 <= 1.59271755e13) {
    uint64_t v10 = v5;
  }
  uint64_t v11 = fmax(v10, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v13, &v11, __src);
  swift_bridgeObjectRelease();
  memcpy(v12, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v12);
  swift_unknownObjectRelease();
  if ((BYTE8(__dst[2]) & 1) == 0 && ((v12[5] & 1) != 0 || *(void *)&__dst[2] != v12[4])
    || (BYTE8(__dst[3]) & 1) == 0 && ((v12[7] & 1) != 0 || *(void *)&__dst[3] != v12[6])
    || (BYTE8(__dst[13]) & 1) == 0 && ((v12[27] & 1) != 0 || *(void *)&__dst[13] != v12[26])
    || (BYTE8(__dst[4]) & 1) == 0 && ((v12[9] & 1) != 0 || *(void *)&__dst[4] != v12[8])
    || (BYTE8(__dst[5]) & 1) == 0 && ((v12[11] & 1) != 0 || *(void *)&__dst[5] != v12[10])
    || (BYTE8(__dst[7]) & 1) == 0 && ((v12[15] & 1) != 0 || *(void *)&__dst[7] != v12[14])
    || (BYTE8(__dst[8]) & 1) == 0 && ((v12[17] & 1) != 0 || *(void *)&__dst[8] != v12[16])
    || (BYTE8(__dst[9]) & 1) == 0 && ((v12[19] & 1) != 0 || *(void *)&__dst[9] != v12[18])
    || (BYTE8(__dst[11]) & 1) == 0 && ((v12[23] & 1) != 0 || *(void *)&__dst[11] != v12[22])
    || (BYTE8(__dst[12]) & 1) == 0 && ((v12[25] & 1) != 0 || *(void *)&__dst[12] != v12[24])
    || (BYTE8(__dst[15]) & 1) == 0 && ((v12[31] & 1) != 0 || *(void *)&__dst[15] != v12[30])
    || (BYTE8(__dst[16]) & 1) == 0 && ((v12[33] & 1) != 0 || *(void *)&__dst[16] != v12[32])
    || (BYTE8(__dst[17]) & 1) == 0 && ((v12[35] & 1) != 0 || *(void *)&__dst[17] != v12[34]))
  {
    return 0;
  }
  if (BYTE8(__dst[6])) {
    return 1;
  }
  else {
    return (*(void *)&__dst[6] == v12[12]) & ~LOBYTE(v12[13]);
  }
}

uint64_t DateComponents.isValidDate(in:)(double *a1)
{
  void (*v7)(double *__return_ptr, void *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v9;
  double v10;
  double v11;
  void v12[36];
  uint64_t v13;
  double v14;
  uint64_t v15;
  _OWORD __src[18];
  _OWORD __dst[18];

  double v3 = *a1;
  uint64_t v2 = *((void *)a1 + 1);
  memcpy(__dst, v1, 0x11AuLL);
  if (BYTE8(__dst[10])) {
    goto LABEL_2;
  }
  if (*(uint64_t *)&__dst[10] > 999999999) {
    return 0;
  }
  if ((*(void *)&__dst[10] & 0x8000000000000000) != 0)
  {
LABEL_2:
    uint64_t ObjectType = swift_getObjectType();
    memcpy(__src, v1, 0x11AuLL);
    (*(void (**)(void *__return_ptr, _OWORD *, uint64_t, uint64_t))(v2 + 176))(v12, __src, ObjectType, v2);
    if ((v12[1] & 1) == 0)
    {
      double v5 = *(double *)v12;
      goto LABEL_8;
    }
    return 0;
  }
  *(void *)&__src[2] = *(void *)&__dst[2];
  BYTE8(__src[2]) = BYTE8(__dst[2]);
  *(void *)&__src[3] = *(void *)&__dst[3];
  BYTE8(__src[3]) = BYTE8(__dst[3]);
  *(void *)&__src[4] = *(void *)&__dst[4];
  BYTE8(__src[4]) = BYTE8(__dst[4]);
  *(void *)&__src[5] = *(void *)&__dst[5];
  BYTE8(__src[5]) = BYTE8(__dst[5]);
  *(void *)&__src[6] = *(void *)&__dst[6];
  BYTE8(__src[6]) = BYTE8(__dst[6]);
  *(void *)&__src[7] = *(void *)&__dst[7];
  BYTE8(__src[7]) = BYTE8(__dst[7]);
  *(void *)&__src[8] = *(void *)&__dst[8];
  BYTE8(__src[8]) = BYTE8(__dst[8]);
  *(void *)&__src[9] = *(void *)&__dst[9];
  BYTE8(__src[9]) = BYTE8(__dst[9]);
  *(void *)&__src[11] = *(void *)&__dst[11];
  BYTE8(__src[11]) = BYTE8(__dst[11]);
  *(void *)&__src[12] = *(void *)&__dst[12];
  BYTE8(__src[12]) = BYTE8(__dst[12]);
  *(void *)&__src[13] = *(void *)&__dst[13];
  BYTE8(__src[13]) = BYTE8(__dst[13]);
  *(void *)&__src[14] = *(void *)&__dst[14];
  BYTE8(__src[14]) = BYTE8(__dst[14]);
  *(void *)&__src[15] = *(void *)&__dst[15];
  BYTE8(__src[15]) = BYTE8(__dst[15]);
  BYTE8(__src[16]) = BYTE8(__dst[16]);
  WORD4(__src[17]) = WORD4(__dst[17]);
  *(void *)&__src[16] = *(void *)&__dst[16];
  *(void *)&_OWORD __src[17] = *(void *)&__dst[17];
  __src[0] = __dst[0];
  __src[1] = __dst[1];
  *(void *)&__src[10] = 0;
  BYTE8(__src[10]) = 0;
  uint64_t v6 = swift_getObjectType();
  memcpy(v12, __src, 0x11AuLL);
  uint64_t v7 = *(void (**)(double *__return_ptr, void *, uint64_t, uint64_t))(v2 + 176);
  outlined retain of DateComponents((uint64_t)__dst);
  outlined retain of DateComponents((uint64_t)__src);
  v7(&v14, v12, v6, v2);
  outlined release of DateComponents((uint64_t)__src);
  outlined release of DateComponents((uint64_t)__src);
  Swift::Int_optional result = 0;
  if (v15) {
    return result;
  }
  double v5 = v14;
LABEL_8:
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  v12[0] = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA34788);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA34789);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA3478A);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA3478B);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA3478C);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA3478D);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA3478E);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA3478F);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA34790);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA34791);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA34792);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA34793);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA34794);
  specialized Set._Variant.insert(_:)(&v14, byte_1ECA34795);
  long long v14 = v3;
  long long v15 = v2;
  uint64_t v9 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v9, &v13);
  uint64_t v10 = 1.59271755e13;
  if (v5 <= 1.59271755e13) {
    uint64_t v10 = v5;
  }
  uint64_t v11 = fmax(v10, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v13, &v11, __src);
  swift_bridgeObjectRelease();
  memcpy(v12, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v12);
  if ((BYTE8(__dst[2]) & 1) == 0 && ((v12[5] & 1) != 0 || *(void *)&__dst[2] != v12[4])
    || (BYTE8(__dst[3]) & 1) == 0 && ((v12[7] & 1) != 0 || *(void *)&__dst[3] != v12[6])
    || (BYTE8(__dst[13]) & 1) == 0 && ((v12[27] & 1) != 0 || *(void *)&__dst[13] != v12[26])
    || (BYTE8(__dst[4]) & 1) == 0 && ((v12[9] & 1) != 0 || *(void *)&__dst[4] != v12[8])
    || (BYTE8(__dst[5]) & 1) == 0 && ((v12[11] & 1) != 0 || *(void *)&__dst[5] != v12[10])
    || (BYTE8(__dst[7]) & 1) == 0 && ((v12[15] & 1) != 0 || *(void *)&__dst[7] != v12[14])
    || (BYTE8(__dst[8]) & 1) == 0 && ((v12[17] & 1) != 0 || *(void *)&__dst[8] != v12[16])
    || (BYTE8(__dst[9]) & 1) == 0 && ((v12[19] & 1) != 0 || *(void *)&__dst[9] != v12[18])
    || (BYTE8(__dst[11]) & 1) == 0 && ((v12[23] & 1) != 0 || *(void *)&__dst[11] != v12[22])
    || (BYTE8(__dst[12]) & 1) == 0 && ((v12[25] & 1) != 0 || *(void *)&__dst[12] != v12[24])
    || (BYTE8(__dst[15]) & 1) == 0 && ((v12[31] & 1) != 0 || *(void *)&__dst[15] != v12[30])
    || (BYTE8(__dst[16]) & 1) == 0 && ((v12[33] & 1) != 0 || *(void *)&__dst[16] != v12[32])
    || (BYTE8(__dst[17]) & 1) == 0 && ((v12[35] & 1) != 0 || *(void *)&__dst[17] != v12[34]))
  {
    return 0;
  }
  if (BYTE8(__dst[6])) {
    return 1;
  }
  else {
    return (*(void *)&__dst[6] == v12[12]) & ~LOBYTE(v12[13]);
  }
}

uint64_t DateComponents.scaled(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = v2;
  memcpy(__dst, v3, 0x11AuLL);
  long long v55 = *v3;
  long long v56 = v3[1];
  char v54 = __dst[5];
  int v53 = HIDWORD(__dst[5]);
  LOBYTE(v53) = BYTE4(__dst[5]);
  char v52 = __dst[7];
  *(_DWORD *)&v51[3] = HIDWORD(__dst[7]);
  *(_DWORD *)uint64_t v51 = *(_DWORD *)((char *)&__dst[7] + 1);
  char v50 = __dst[9];
  *(_DWORD *)&v49[3] = HIDWORD(__dst[9]);
  *(_DWORD *)uint64_t v49 = *(_DWORD *)((char *)&__dst[9] + 1);
  char v48 = __dst[11];
  uint64_t v6 = __dst[14];
  *(void *)&v47[15] = __dst[13];
  *(_OWORD *)uint64_t v47 = *(_OWORD *)((char *)&__dst[11] + 1);
  char v46 = __dst[15];
  uint64_t v7 = __dst[16];
  char v45 = __dst[17];
  uint64_t v8 = __dst[18];
  char v44 = __dst[19];
  uint64_t v9 = __dst[20];
  char v43 = __dst[21];
  uint64_t v10 = __dst[26];
  char v42 = __dst[27];
  char v41 = __dst[29];
  uint64_t v11 = __dst[30];
  char v40 = __dst[31];
  uint64_t result = __dst[32];
  char v39 = __dst[33];
  uint64_t v13 = __dst[34];
  char v14 = __dst[35];
  char v38 = BYTE1(__dst[35]);
  if (__dst[5])
  {
    uint64_t v37 = __dst[4];
    uint64_t v17 = __dst[6];
    if (__dst[7]) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v15 = __dst[4] * a1;
    if ((unsigned __int128)(__dst[4] * (__int128)a1) >> 64 != (__dst[4] * a1) >> 63)
    {
      __break(1u);
      goto LABEL_80;
    }
    BOOL v16 = v15 == 0x7FFFFFFFFFFFFFFFLL;
    if (v15 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v15 = 0;
    }
    uint64_t v37 = v15;
    char v54 = v16;
    uint64_t v17 = __dst[6];
    if (__dst[7])
    {
LABEL_6:
      uint64_t v18 = __dst[8];
      if (__dst[9]) {
        goto LABEL_7;
      }
      goto LABEL_24;
    }
  }
  uint64_t v21 = v17 * a1;
  if ((unsigned __int128)(v17 * (__int128)a1) >> 64 != (v17 * a1) >> 63)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v17 = 0;
  }
  else {
    v17 *= a1;
  }
  char v52 = v21 == 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v18 = __dst[8];
  if (__dst[9])
  {
LABEL_7:
    uint64_t v19 = __dst[10];
    if (__dst[11]) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_24:
  uint64_t v22 = v18 * a1;
  if ((unsigned __int128)(v18 * (__int128)a1) >> 64 != (v18 * a1) >> 63)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (v22 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v18 = 0;
  }
  else {
    v18 *= a1;
  }
  char v50 = v22 == 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v19 = __dst[10];
  if (__dst[11])
  {
LABEL_8:
    if (__dst[15]) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_29:
  uint64_t v23 = v19 * a1;
  if ((unsigned __int128)(v19 * (__int128)a1) >> 64 != (v19 * a1) >> 63)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (v23 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v19 = 0;
  }
  else {
    v19 *= a1;
  }
  char v48 = v23 == 0x7FFFFFFFFFFFFFFFLL;
  if (__dst[15])
  {
LABEL_9:
    if (__dst[17]) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_34:
  uint64_t v24 = __dst[14] * a1;
  if ((unsigned __int128)(__dst[14] * (__int128)a1) >> 64 != (__dst[14] * a1) >> 63)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = __dst[14] * a1;
  }
  char v46 = v24 == 0x7FFFFFFFFFFFFFFFLL;
  if (__dst[17])
  {
LABEL_10:
    if (__dst[19]) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_39:
  uint64_t v25 = __dst[16] * a1;
  if ((unsigned __int128)(__dst[16] * (__int128)a1) >> 64 != (__dst[16] * a1) >> 63)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (v25 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = __dst[16] * a1;
  }
  char v45 = v25 == 0x7FFFFFFFFFFFFFFFLL;
  if (__dst[19])
  {
LABEL_11:
    if (__dst[21]) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }
LABEL_44:
  uint64_t v26 = __dst[18] * a1;
  if ((unsigned __int128)(__dst[18] * (__int128)a1) >> 64 != (__dst[18] * a1) >> 63)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v26 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = __dst[18] * a1;
  }
  char v44 = v26 == 0x7FFFFFFFFFFFFFFFLL;
  if (__dst[21])
  {
LABEL_12:
    if (__dst[27]) {
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_49:
  uint64_t v27 = __dst[20] * a1;
  if ((unsigned __int128)(__dst[20] * (__int128)a1) >> 64 != (__dst[20] * a1) >> 63)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (v27 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = __dst[20] * a1;
  }
  char v43 = v27 == 0x7FFFFFFFFFFFFFFFLL;
  if (__dst[27])
  {
LABEL_13:
    uint64_t v20 = __dst[28];
    if (__dst[29]) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }
LABEL_54:
  uint64_t v28 = __dst[26] * a1;
  if ((unsigned __int128)(__dst[26] * (__int128)a1) >> 64 != (__dst[26] * a1) >> 63)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (v28 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = __dst[26] * a1;
  }
  char v42 = v28 == 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v20 = __dst[28];
  if (__dst[29])
  {
LABEL_14:
    if (__dst[31]) {
      goto LABEL_15;
    }
    goto LABEL_64;
  }
LABEL_59:
  uint64_t v29 = v20 * a1;
  if ((unsigned __int128)(v20 * (__int128)a1) >> 64 != (v20 * a1) >> 63)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v29 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v20 = 0;
  }
  else {
    v20 *= a1;
  }
  char v41 = v29 == 0x7FFFFFFFFFFFFFFFLL;
  if (__dst[31])
  {
LABEL_15:
    if (__dst[33]) {
      goto LABEL_16;
    }
    goto LABEL_69;
  }
LABEL_64:
  uint64_t v30 = __dst[30] * a1;
  if ((unsigned __int128)(__dst[30] * (__int128)a1) >> 64 != (__dst[30] * a1) >> 63)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (v30 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = __dst[30] * a1;
  }
  char v40 = v30 == 0x7FFFFFFFFFFFFFFFLL;
  if (__dst[33])
  {
LABEL_16:
    if (__dst[35])
    {
LABEL_78:
      *(_DWORD *)(a2 + 41) = *(_DWORD *)((char *)&__dst[5] + 1);
      *(_DWORD *)(a2 + 44) = v53;
      *(_DWORD *)(a2 + 57) = *(_DWORD *)v51;
      *(_DWORD *)(a2 + 60) = *(_DWORD *)&v51[3];
      *(_DWORD *)(a2 + 76) = *(_DWORD *)&v49[3];
      *(_DWORD *)(a2 + 73) = *(_DWORD *)v49;
      *(_DWORD *)(a2 + 121) = *(_DWORD *)((char *)&__dst[15] + 1);
      int v33 = HIDWORD(__dst[17]);
      *(_DWORD *)(a2 + 124) = HIDWORD(__dst[15]);
      *(_DWORD *)(a2 + 137) = *(_DWORD *)((char *)&__dst[17] + 1);
      *(_DWORD *)(a2 + 140) = v33;
      *(_DWORD *)(a2 + 156) = HIDWORD(__dst[19]);
      *(_DWORD *)(a2 + 153) = *(_DWORD *)((char *)&__dst[19] + 1);
      *(_DWORD *)(a2 + 268) = HIDWORD(__dst[33]);
      *(_DWORD *)(a2 + 265) = *(_DWORD *)((char *)&__dst[33] + 1);
      int v34 = HIDWORD(__dst[29]);
      *(_DWORD *)(a2 + 220) = HIDWORD(__dst[27]);
      *(_DWORD *)(a2 + 217) = *(_DWORD *)((char *)&__dst[27] + 1);
      *(_DWORD *)(a2 + 236) = v34;
      *(_DWORD *)(a2 + 233) = *(_DWORD *)((char *)&__dst[29] + 1);
      *(_DWORD *)(a2 + 249) = *(_DWORD *)((char *)&__dst[31] + 1);
      *(_DWORD *)(a2 + 252) = HIDWORD(__dst[31]);
      *(void *)(a2 + 32) = v37;
      *(unsigned char *)(a2 + 40) = v54;
      *(void *)(a2 + 48) = v17;
      *(unsigned char *)(a2 + 56) = v52;
      *(void *)(a2 + 64) = v18;
      *(unsigned char *)(a2 + 72) = v50;
      *(void *)(a2 + 80) = v19;
      *(unsigned char *)(a2 + 88) = v48;
      *(void *)(a2 + 104) = *(void *)&v47[15];
      *(void *)(a2 + 112) = v6;
      *(unsigned char *)(a2 + 120) = v46;
      *(void *)(a2 + 128) = v7;
      *(unsigned char *)(a2 + 136) = v45;
      *(void *)(a2 + 144) = v8;
      *(unsigned char *)(a2 + 152) = v44;
      *(void *)(a2 + 160) = v9;
      *(unsigned char *)(a2 + 168) = v43;
      long long v35 = *(_OWORD *)((char *)&__dst[21] + 1);
      long long v36 = *(_OWORD *)((char *)&__dst[23] + 1);
      *(void *)(a2 + 200) = __dst[25];
      *(void *)(a2 + 208) = v10;
      *(unsigned char *)(a2 + 216) = v42;
      *(void *)(a2 + 224) = v20;
      *(unsigned char *)(a2 + 232) = v41;
      *(void *)(a2 + 240) = v11;
      *(unsigned char *)(a2 + 248) = v40;
      *(void *)(a2 + 256) = result;
      *(unsigned char *)(a2 + 264) = v39;
      *(void *)(a2 + 272) = v13;
      *(unsigned char *)(a2 + 280) = v14;
      *(unsigned char *)(a2 + 281) = v38;
      *(_OWORD *)a2 = v55;
      *(_OWORD *)(a2 + 16) = v56;
      *(_OWORD *)(a2 + 89) = *(_OWORD *)v47;
      *(_OWORD *)(a2 + 185) = v36;
      *(_OWORD *)(a2 + 169) = v35;
      return outlined retain of DateComponents((uint64_t)__dst);
    }
    goto LABEL_74;
  }
LABEL_69:
  uint64_t v31 = __dst[32] * a1;
  if ((unsigned __int128)(__dst[32] * (__int128)a1) >> 64 != (__dst[32] * a1) >> 63)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (v31 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = __dst[32] * a1;
  }
  char v39 = v31 == 0x7FFFFFFFFFFFFFFFLL;
  if (__dst[35]) {
    goto LABEL_78;
  }
LABEL_74:
  uint64_t v32 = __dst[34] * a1;
  if ((unsigned __int128)(__dst[34] * (__int128)a1) >> 64 == (__dst[34] * a1) >> 63)
  {
    char v14 = v32 == 0x7FFFFFFFFFFFFFFFLL;
    if (v32 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = __dst[34] * a1;
    }
    goto LABEL_78;
  }
LABEL_91:
  __break(1u);
  return result;
}

void DateComponents.hash(into:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  int v5 = *(unsigned __int8 *)(v1 + 40);
  Swift::UInt v12 = *(void *)(v1 + 32);
  Swift::UInt v13 = *(void *)(v1 + 48);
  int v27 = *(unsigned __int8 *)(v1 + 56);
  int v28 = *(unsigned __int8 *)(v1 + 72);
  Swift::UInt v14 = *(void *)(v1 + 64);
  Swift::UInt v15 = *(void *)(v1 + 80);
  int v29 = *(unsigned __int8 *)(v1 + 88);
  Swift::UInt v26 = *(void *)(v1 + 96);
  int v41 = *(unsigned __int8 *)(v1 + 104);
  int v30 = *(unsigned __int8 *)(v1 + 120);
  Swift::UInt v16 = *(void *)(v1 + 112);
  Swift::UInt v17 = *(void *)(v1 + 128);
  int v31 = *(unsigned __int8 *)(v1 + 136);
  Swift::UInt v18 = *(void *)(v1 + 144);
  int v32 = *(unsigned __int8 *)(v1 + 152);
  Swift::UInt v19 = *(void *)(v1 + 160);
  int v33 = *(unsigned __int8 *)(v1 + 168);
  Swift::UInt v20 = *(void *)(v1 + 176);
  int v34 = *(unsigned __int8 *)(v1 + 184);
  Swift::UInt v21 = *(void *)(v1 + 192);
  int v35 = *(unsigned __int8 *)(v1 + 200);
  Swift::UInt v22 = *(void *)(v1 + 208);
  int v36 = *(unsigned __int8 *)(v1 + 216);
  Swift::UInt v23 = *(void *)(v1 + 240);
  int v39 = *(unsigned __int8 *)(v1 + 280);
  int v37 = *(unsigned __int8 *)(v1 + 248);
  Swift::UInt v24 = *(void *)(v1 + 256);
  int v38 = *(unsigned __int8 *)(v1 + 264);
  Swift::UInt v25 = *(void *)(v1 + 272);
  int v40 = *(unsigned __int8 *)(v1 + 281);
  if (*(void *)v1)
  {
    uint64_t v6 = *(void *)(v1 + 8);
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 120);
    swift_unknownObjectRetain();
    v8(a1, ObjectType, v6);
    swift_unknownObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v5) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  if (!v4) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  uint64_t v9 = swift_getObjectType();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
  swift_unknownObjectRetain();
  v10(a1, v9, v3);
  swift_unknownObjectRelease();
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
LABEL_7:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v12);
LABEL_8:
  if (v27)
  {
    Hasher._combine(_:)(0);
    if (!v28) {
      goto LABEL_10;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13);
    if (!v28)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v14);
      if (!v29) {
        goto LABEL_11;
      }
      goto LABEL_24;
    }
  }
  Hasher._combine(_:)(0);
  if (!v29)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    if (!v30) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(0);
  if (!v30)
  {
LABEL_12:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
    if (!v31) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  if (!v31)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    if (!v32) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(0);
  if (!v32)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
    if (!v33) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(0);
  if (!v33)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
    if (!v34) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(0);
  if (!v34)
  {
LABEL_16:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    if (!v35) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (!v35)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    if (!v36) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v36)
  {
LABEL_18:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    if (!v37) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  if (!v37)
  {
LABEL_19:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
    if (!v38) {
      goto LABEL_20;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (!v39) {
      goto LABEL_21;
    }
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (v38) {
    goto LABEL_33;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v24);
  if (!v39)
  {
LABEL_21:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
LABEL_35:
  if (v40 == 2)
  {
    Swift::UInt8 v11 = 0;
  }
  else
  {
    Swift::UInt8 v11 = v40 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  if (v41)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v26);
  }
}

Swift::Int DateComponents.hashValue.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  int v5 = *((unsigned __int8 *)v0 + 40);
  Swift::UInt v13 = v0[4];
  Swift::UInt v14 = v0[6];
  int v28 = *((unsigned __int8 *)v0 + 56);
  int v29 = *((unsigned __int8 *)v0 + 72);
  Swift::UInt v15 = v0[8];
  Swift::UInt v16 = v0[10];
  Swift::UInt v27 = v0[12];
  int v6 = *((unsigned __int8 *)v0 + 104);
  int v30 = *((unsigned __int8 *)v0 + 88);
  int v31 = *((unsigned __int8 *)v0 + 120);
  Swift::UInt v17 = v0[14];
  Swift::UInt v18 = v0[16];
  int v32 = *((unsigned __int8 *)v0 + 136);
  int v33 = *((unsigned __int8 *)v0 + 152);
  Swift::UInt v19 = v0[18];
  Swift::UInt v20 = v0[20];
  int v34 = *((unsigned __int8 *)v0 + 168);
  int v35 = *((unsigned __int8 *)v0 + 184);
  Swift::UInt v21 = v0[22];
  Swift::UInt v22 = v0[24];
  int v36 = *((unsigned __int8 *)v0 + 200);
  int v37 = *((unsigned __int8 *)v0 + 216);
  Swift::UInt v23 = v0[26];
  Swift::UInt v24 = v0[30];
  int v38 = *((unsigned __int8 *)v0 + 248);
  int v39 = *((unsigned __int8 *)v0 + 264);
  int v40 = *((unsigned __int8 *)v0 + 280);
  Swift::UInt v25 = v0[32];
  Swift::UInt v26 = v0[34];
  int v41 = *((unsigned __int8 *)v0 + 281);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 120);
    swift_unknownObjectRetain();
    v8(v42, ObjectType, v1);
    swift_unknownObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      uint64_t v9 = swift_getObjectType();
      uint64_t v10 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 112);
      swift_unknownObjectRetain();
      v10(v42, v9, v4);
      swift_unknownObjectRelease();
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  Hasher._combine(_:)(0);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(0);
    if (!v28) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v13);
  if (!v28)
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
    if (!v29) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(0);
  if (!v29)
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    if (!v30) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(0);
  if (!v30)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
    if (!v31) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(0);
  if (!v31)
  {
LABEL_8:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    if (!v32) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(0);
  if (!v32)
  {
LABEL_9:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
    if (!v33) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  if (!v33)
  {
LABEL_10:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
    if (!v34) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(0);
  if (!v34)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    if (!v35) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(0);
  if (!v35)
  {
LABEL_12:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    if (!v36) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(0);
  if (!v36)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    if (!v37) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (!v37)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
    if (!v38) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v38)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
    if (!v39) {
      goto LABEL_16;
    }
LABEL_32:
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  if (v39) {
    goto LABEL_32;
  }
LABEL_16:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v25);
  if (!v40)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v26);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(0);
LABEL_34:
  if (v41 == 2)
  {
    Swift::UInt8 v11 = 0;
  }
  else
  {
    Swift::UInt8 v11 = v41 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  if (v6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
  }
  return Hasher._finalize()();
}

uint64_t DateComponents.debugDescription.getter()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v25, v0, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)v25);
  DateComponents.customMirror.getter();
  uint64_t v5 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v22 + 1))
  {
    v14[1] = v5;
    do
    {
      long long v18 = v20;
      v19[0] = v21;
      v19[1] = v22;
      v17._uint64_t countAndFlagsBits = 0;
      v17._object = (void *)0xE000000000000000;
      int v6 = (void *)*((void *)&v20 + 1);
      uint64_t v7 = v20;
      long long v15 = v20;
      outlined init with copy of Any((uint64_t)v19, (uint64_t)v16);
      if (v6)
      {
        uint64_t v8 = v6;
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      v9._uint64_t countAndFlagsBits = v7;
      v9._object = v8;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = 8250;
      v10._object = (void *)0xE200000000000000;
      String.append(_:)(v10);
      _print_unlocked<A, B>(_:_:)();
      v11._uint64_t countAndFlagsBits = 32;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v18);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((void *)&v22 + 1));
    uint64_t v12 = v23;
  }
  else
  {
    uint64_t v12 = 0;
  }
  swift_release();
  swift_release();
  outlined release of DateComponents((uint64_t)v25);
  return v12;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DateComponents.CodingKeys@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized DateComponents.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DateComponents.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized DateComponents.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance DateComponents.CodingKeys@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized DateComponents.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DateComponents.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DateComponents.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t DateComponents.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DateComponents.CodingKeys>);
  uint64_t v5 = *(void *)(v119 - 8);
  MEMORY[0x1F4188790](v119);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v82 = v5;
    LOBYTE(v84) = 0;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v8 = v85[0];
    LOBYTE(v84) = 1;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v80 = *((void *)&v8 + 1);
    uint64_t v81 = v8;
    long long v9 = v85[0];
    LOBYTE(v85[0]) = 2;
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v76 = v11;
    uint64_t v77 = v10;
    uint64_t v78 = *((void *)&v9 + 1);
    uint64_t v79 = v9;
    LOBYTE(v85[0]) = 3;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v14 = v13;
    uint64_t v75 = v12;
    LOBYTE(v85[0]) = 4;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v73 = v16;
    uint64_t v74 = v15;
    LOBYTE(v85[0]) = 5;
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v71 = v18;
    uint64_t v72 = v17;
    LOBYTE(v85[0]) = 6;
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v69 = v20;
    uint64_t v70 = v19;
    LOBYTE(v85[0]) = 7;
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v66 = v22;
    uint64_t v68 = v21;
    LOBYTE(v85[0]) = 8;
    uint64_t v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v65 = v23;
    LOBYTE(v85[0]) = 9;
    uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v64 = v26;
    uint64_t v27 = v25;
    LOBYTE(v85[0]) = 10;
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v63 = v29;
    uint64_t v30 = v28;
    LOBYTE(v85[0]) = 11;
    uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v61 = v31;
    LOBYTE(v85[0]) = 12;
    uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v59 = v32;
    LOBYTE(v85[0]) = 13;
    uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v57 = v33;
    LOBYTE(v85[0]) = 14;
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v55 = v34;
    LOBYTE(v85[0]) = 15;
    uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v53 = v35;
    LOBYTE(v85[0]) = 16;
    int v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v100 = 17;
    uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v51 = v36;
    *(void *)&long long v84 = v81;
    *((void *)&v84 + 1) = v80;
    v83[0] = v79;
    v83[1] = v78;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v84, v83, v77, v76 & 1, v75, v14 & 1, v74, v73 & 1, (uint64_t)v85, v72, v71 & 1, v70, v69 & 1, v68, v66 & 1, v67, v65 & 1, v27, v64 & 1,
      v30,
      v63 & 1,
      v62,
      v61 & 1,
      v60,
      v59 & 1,
      v58,
      v57 & 1,
      v56,
      v55 & 1,
      v54,
      v53 & 1);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v7, v119);
    long long v115 = v85[2];
    long long v116 = v85[3];
    long long v117 = v85[4];
    long long v118 = v85[5];
    long long v113 = v85[0];
    long long v114 = v85[1];
    uint64_t v37 = v86;
    BOOL v38 = v87;
    long long v101 = v88;
    long long v102 = v89;
    long long v105 = v92;
    long long v106 = v93;
    long long v103 = v90;
    long long v104 = v91;
    long long v110 = v97;
    long long v111 = v98;
    long long v108 = v95;
    long long v109 = v96;
    char v39 = v99;
    if (v52 != 2) {
      char v39 = v52;
    }
    long long v107 = v94;
    if ((v51 & 1) == 0)
    {
      uint64_t v37 = v50;
      BOOL v38 = v50 == 0x7FFFFFFFFFFFFFFFLL;
      if (v50 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v37 = 0;
      }
      BOOL v112 = v50 == 0x7FFFFFFFFFFFFFFFLL;
    }
    long long v40 = v116;
    *(_OWORD *)(a2 + 32) = v115;
    *(_OWORD *)(a2 + 48) = v40;
    long long v41 = v118;
    *(_OWORD *)(a2 + 64) = v117;
    *(_OWORD *)(a2 + 80) = v41;
    long long v42 = v114;
    *(_OWORD *)a2 = v113;
    *(_OWORD *)(a2 + 16) = v42;
    *(void *)(a2 + 96) = v37;
    *(unsigned char *)(a2 + 104) = v38;
    long long v43 = v101;
    long long v44 = v102;
    long long v45 = v104;
    *(_OWORD *)(a2 + 137) = v103;
    *(_OWORD *)(a2 + 121) = v44;
    *(_OWORD *)(a2 + 105) = v43;
    long long v46 = v108;
    *(_OWORD *)(a2 + 201) = v107;
    long long v47 = v105;
    *(_OWORD *)(a2 + 185) = v106;
    *(_OWORD *)(a2 + 169) = v47;
    *(_OWORD *)(a2 + 153) = v45;
    long long v48 = v109;
    long long v49 = v110;
    *(_OWORD *)(a2 + 265) = v111;
    *(_OWORD *)(a2 + 249) = v49;
    *(_OWORD *)(a2 + 233) = v48;
    *(_OWORD *)(a2 + 217) = v46;
    *(unsigned char *)(a2 + 281) = v39;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DateComponents@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DateComponents.init(from:)(a1, a2);
}

unint64_t static DateComponents._getObjectiveCType()()
{
  return type metadata accessor for NSDateComponents();
}

uint64_t NSDateComponents._toCustomAnyHashable()()
{
  __src[0] = 0uLL;
  v6[1] = 0;
  v6[0] = 0;
  id v1 = v0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, v6, 0, 1, 0, 1, 0, 1, (uint64_t)v5, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  destructiveProjectEnumData for PredicateCodableError(v5, v2);
  outlined init with take of DateComponents?((uint64_t)v5, (uint64_t)__dst);
  static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v1, (uint64_t)__dst);
  outlined init with take of DateComponents?((uint64_t)__dst, (uint64_t)v6);
  outlined init with take of DateComponents?((uint64_t)v6, (uint64_t)__src);
  uint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {

    memcpy(__dst, __src, 0x11AuLL);
    lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
    return AnyHashable.init<A>(_:)();
  }
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDateComponents()
{
  id v1 = *v0;
  NSDateComponents._toCustomAnyHashable()();
}

unint64_t type metadata accessor for NSDateComponents()
{
  unint64_t result = lazy cache variable for type metadata for NSDateComponents;
  if (!lazy cache variable for type metadata for NSDateComponents)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDateComponents);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for DateComponents(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  a1[2] = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  a1[3] = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  unint64_t result = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  a1[4] = result;
  return result;
}

uint64_t sub_181B1D788@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t sub_181B1D79C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t sub_181B1D7B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 40);
  *(void *)a2 = *(void *)(result + 32);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1D7C4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 32) = v2;
  *(unsigned char *)(a2 + 40) = v4;
  return result;
}

uint64_t sub_181B1D7F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 56);
  *(void *)a2 = *(void *)(result + 48);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1D804(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 48) = v2;
  *(unsigned char *)(a2 + 56) = v4;
  return result;
}

uint64_t sub_181B1D830@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 72);
  *(void *)a2 = *(void *)(result + 64);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1D844(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 64) = v2;
  *(unsigned char *)(a2 + 72) = v4;
  return result;
}

uint64_t sub_181B1D870@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 88);
  *(void *)a2 = *(void *)(result + 80);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1D884(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 80) = v2;
  *(unsigned char *)(a2 + 88) = v4;
  return result;
}

uint64_t sub_181B1D8B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 120);
  *(void *)a2 = *(void *)(result + 112);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1D8C4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 112) = v2;
  *(unsigned char *)(a2 + 120) = v4;
  return result;
}

uint64_t sub_181B1D8F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 136);
  *(void *)a2 = *(void *)(result + 128);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1D904(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 128) = v2;
  *(unsigned char *)(a2 + 136) = v4;
  return result;
}

uint64_t sub_181B1D930@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 152);
  *(void *)a2 = *(void *)(result + 144);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1D944(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 144) = v2;
  *(unsigned char *)(a2 + 152) = v4;
  return result;
}

uint64_t sub_181B1D970@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 168);
  *(void *)a2 = *(void *)(result + 160);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1D984(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 160) = v2;
  *(unsigned char *)(a2 + 168) = v4;
  return result;
}

uint64_t sub_181B1D9B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 184);
  *(void *)a2 = *(void *)(result + 176);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1D9C4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 176) = v2;
  *(unsigned char *)(a2 + 184) = v4;
  return result;
}

uint64_t sub_181B1D9F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 200);
  *(void *)a2 = *(void *)(result + 192);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1DA04(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 192) = v2;
  *(unsigned char *)(a2 + 200) = v4;
  return result;
}

uint64_t sub_181B1DA30@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 216);
  *(void *)a2 = *(void *)(result + 208);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1DA44(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 208) = v2;
  *(unsigned char *)(a2 + 216) = v4;
  return result;
}

uint64_t sub_181B1DA70@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 248);
  *(void *)a2 = *(void *)(result + 240);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1DA84(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 240) = v2;
  *(unsigned char *)(a2 + 248) = v4;
  return result;
}

uint64_t sub_181B1DAB0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 264);
  *(void *)a2 = *(void *)(result + 256);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1DAC8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 256) = v2;
  *(unsigned char *)(a2 + 264) = v4;
  return result;
}

uint64_t sub_181B1DAF4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 104);
  *(void *)a2 = *(void *)(result + 96);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1DB08(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 96) = v2;
  *(unsigned char *)(a2 + 104) = v4;
  return result;
}

uint64_t sub_181B1DB34@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 232);
  *(void *)a2 = *(void *)(result + 224);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1DB48(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 224) = v2;
  *(unsigned char *)(a2 + 232) = v4;
  return result;
}

uint64_t sub_181B1DB74@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 280);
  *(void *)a2 = *(void *)(result + 272);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181B1DB8C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((unsigned char *)result + 8);
  }
  if (!*((unsigned char *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 272) = v2;
  *(unsigned char *)(a2 + 280) = v4;
  return result;
}

uint64_t sub_181B1DBB8@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 281);
  return result;
}

unsigned char *sub_181B1DBC4(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 281) = *result;
  return result;
}

uint64_t assignWithCopy for DateComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v12;
  uint64_t v13 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v18;
  uint64_t v19 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v19;
  uint64_t v20 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v20;
  uint64_t v21 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v21;
  *(unsigned char *)(a1 + 281) = *(unsigned char *)(a2 + 281);
  return a1;
}

uint64_t assignWithTake for DateComponents(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v5 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v5;
  uint64_t v6 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v6;
  uint64_t v7 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v7;
  *(unsigned char *)(a1 + 281) = *(unsigned char *)(a2 + 281);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for DateComponents.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *unint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B1DF5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

void *type metadata accessor for DateComponents.CodingKeys()
{
  return &unk_1ECA347D8;
}

unint64_t specialized DateComponents.CodingKeys.init(rawValue:)(unint64_t result)
{
  if (result >= 0x12) {
    return 18;
  }
  return result;
}

uint64_t specialized DateComponents.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6386277 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1918985593 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x68746E6F6DLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7954788 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1920298856 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6574756E696DLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x646E6F636573 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6F6365736F6E616ELL && a2 == 0xEA0000000000646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7961646B656577 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x4F7961646B656577 && a2 == 0xEE006C616E696472 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x72657472617571 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6F4D664F6B656577 && a2 == 0xEB0000000068746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6559664F6B656577 && a2 == 0xEA00000000007261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823AA180 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6F4D7061654C7369 && a2 == 0xEB0000000068746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x616559664F796164 && a2 == 0xE900000000000072)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 17;
    }
    else {
      return 18;
    }
  }
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.DictionaryIterator : PlistDictionaryIterator in XMLPlistMap()
{
  return &protocol witness table for XMLPlistMap.DictionaryIterator;
}

void protocol witness for static PlistDecodingMap.nullValue.getter in conformance XMLPlistMap(void *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

unint64_t protocol witness for PlistDecodingMap.topObject.getter in conformance XMLPlistMap@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = XMLPlistMap.loadValue(at:)(0);
  if ((~result & 0xF000000000000007) != 0) {
    *a1 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t XMLPlistMap.Value.dateValue<A>(in:for:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v37 = a7;
  uint64_t v36 = a1;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v39 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v36 - v19;
  if (a4 >> 60 == 4)
  {
    MEMORY[0x1F4188790](v18);
    *(&v36 - 4) = a5;
    *(&v36 - 3) = a6;
    *(&v36 - 2) = a2;
    *(&v36 - 1) = a3;
    uint64_t v22 = *(void *)(v36 + 24);
    *(double *)&long long v24 = MEMORY[0x1F4188790](v23);
    *(&v36 - 4) = (uint64_t)partial apply for closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:);
    *(&v36 - 3) = v25;
    *((_OWORD *)&v36 - 1) = v24;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v22 + 40));
    partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v22 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 40));
    return swift_release();
  }
  else
  {
    uint64_t v37 = a6;
    unint64_t v38 = a4;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16);
    v27((char *)&v36 - v19, a3, v13, v20);
    ((void (*)(char *, char *, uint64_t))v27)(v16, v21, v13);
    uint64_t v28 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v16, 1, a5) == 1)
    {
      int v29 = *(void (**)(char *, uint64_t))(v14 + 8);
      v29(v16, v13);
      _CodingPathNode.path.getter(a2);
      v29(v21, v13);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v39, v16, a5);
      uint64_t v30 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v32 = v37;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v32;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      int v34 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v28 + 16))(boxed_opaque_existential_1, v39, a5);
      uint64_t v41 = v30;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v34, a5);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)&type metadata for Date, v38, v35);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
}

void closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  void (*v50)(uint64_t *__return_ptr, long long *, uint64_t, unint64_t);
  BOOL v51;
  double v52;
  double v53;
  double v54;
  long long v55;
  Swift::String v56;
  long long v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  Swift::String v61;
  unsigned int v62;
  Swift::String v63;
  long long v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t v67;
  unsigned char v68[32];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  long long v79[18];
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[18];
  long long v83;
  long long v84;
  long long v85;
  uint64_t v86;
  long long v87;
  long long v88;
  uint64_t v89;
  uint64_t ObjectType;

  uint64_t ObjectType = a8;
  uint64_t v77 = a6;
  uint64_t v78 = (uint64_t *)a7;
  int v76 = a5;
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v17 = v14;
  void v14[2] = a3;
  uint64_t v18 = v14 + 2;
  unint64_t v19 = (unint64_t)&a1[a2];
  uint64_t v14[3] = a4;
  v14[4] = a1;
  v14[5] = a1;
  v14[6] = &a1[a2];
  uint64_t v75 = a9;
  if (a2 >= 1)
  {
    if ((uint64_t)&a1[-a3] >= 0)
    {
      uint64_t v15 = a3 + a4;
      if ((uint64_t)(a3 + a4 - v19) < 0)
      {
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      int v20 = *a1;
      uint64_t v21 = a1;
      BOOL v22 = v20 == 45;
      if (v20 == 45)
      {
        uint64_t v21 = a1 + 1;
        v14[5] = a1 + 1;
        if ((unint64_t)a2 < 2)
        {
          uint64_t v15 = 0;
          uint64_t v23 = 0;
          BOOL v22 = 1;
          ++a1;
          goto LABEL_20;
        }
      }
      uint64_t v23 = 0;
      uint64_t v15 = (uint64_t)&a1[a2];
      unint64_t v16 = &a1[a2] - v21;
      unint64_t v24 = (unint64_t)&v21[-a3];
      a1 = v21;
      while (v19 >= (unint64_t)a1)
      {
        if ((v24 & 0x8000000000000000) != 0) {
          goto LABEL_80;
        }
        if ((v16 & 0x8000000000000000) != 0) {
          goto LABEL_81;
        }
        if ((*a1 - 58) >= 0xF6u)
        {
          unsigned __int8 v25 = *a1 - 48;
          uint64_t v26 = 10 * v23;
          BOOL v27 = (unsigned __int128)(v23 * (__int128)10) >> 64 != (10 * v23) >> 63;
          uint64_t v23 = 10 * v23 + v25;
          BOOL v28 = __OFADD__(v26, v25);
          v14[5] = ++a1;
          uint64_t v15 = 1;
          if (v27 || v28) {
            goto LABEL_20;
          }
          uint64_t v15 = (uint64_t)(a1 + 1);
          --v16;
          ++v24;
          if (v19 >= (unint64_t)(a1 + 1)) {
            continue;
          }
        }
        uint64_t v15 = 0;
        goto LABEL_20;
      }
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
    }
    __break(1u);
    goto LABEL_83;
  }
  uint64_t v15 = 0;
  uint64_t v23 = 0;
  BOOL v22 = 0;
LABEL_20:
  unint64_t v16 = (unint64_t)(a1 + 1);
  if (v19 < (unint64_t)(a1 + 1))
  {
LABEL_77:
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    *(void *)&v82[0] = 0xD000000000000023;
    *((void *)&v82[0] + 1) = 0x80000001823AA850;
    int v55 = *((_OWORD *)v18 + 1);
    long long v84 = *(_OWORD *)v18;
    uint64_t v85 = v55;
    uint64_t v86 = v18[4];
    *(void *)&v79[0] = BufferReader.lineNumber.getter();
    v56._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    goto LABEL_78;
  }
  if (v19 < (unint64_t)a1) {
    goto LABEL_84;
  }
  if ((uint64_t)&a1[-a3] < 0)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if ((uint64_t)(v19 - (void)a1) < 0)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if ((uint64_t)(a3 + a4 - v19) < 0)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (*a1 != 45) {
    goto LABEL_77;
  }
  v14[5] = v16;
  if (v15) {
    goto LABEL_77;
  }
  BOOL v29 = v22;
  uint64_t v30 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v14);
  if (v31) {
    goto LABEL_77;
  }
  unint64_t v16 = v17[5];
  uint64_t v15 = v16 + 1;
  if (v19 < v16 + 1) {
    goto LABEL_77;
  }
  if (v19 < v16) {
    goto LABEL_88;
  }
  if ((uint64_t)(v16 - a3) < 0)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if ((uint64_t)(v19 - v16) < 0)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  if (*(unsigned char *)v16 != 45) {
    goto LABEL_77;
  }
  uint64_t v32 = v30;
  v17[5] = v15;
  uint64_t v33 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v17);
  if (v34) {
    goto LABEL_77;
  }
  unint64_t v16 = v17[5];
  uint64_t v15 = v16 + 1;
  if (v19 < v16 + 1) {
    goto LABEL_77;
  }
  if (v19 < v16) {
    goto LABEL_91;
  }
  if ((uint64_t)(v16 - a3) < 0)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  if ((uint64_t)(v19 - v16) < 0)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (*(unsigned char *)v16 != 84) {
    goto LABEL_77;
  }
  uint64_t v35 = v33;
  v17[5] = v15;
  uint64_t v36 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v17);
  if (v37) {
    goto LABEL_77;
  }
  unint64_t v38 = (unsigned char *)v17[5];
  if (v19 < (unint64_t)(v38 + 1)) {
    goto LABEL_77;
  }
  if (v19 < (unint64_t)v38)
  {
    __break(1u);
    goto LABEL_100;
  }
  if ((uint64_t)&v38[-a3] < 0)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if ((uint64_t)(v19 - (void)v38) < 0)
  {
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  if (*v38 != 58) {
    goto LABEL_77;
  }
  v17[5] = v38 + 1;
  int v73 = v36;
  uint64_t v39 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v17);
  if (v40) {
    goto LABEL_77;
  }
  uint64_t v41 = (unsigned char *)v17[5];
  if (v19 < (unint64_t)(v41 + 1)) {
    goto LABEL_77;
  }
  int v71 = v39;
  uint64_t v72 = v35;
  if (v19 < (unint64_t)v41) {
    goto LABEL_102;
  }
  if ((uint64_t)&v41[-a3] < 0)
  {
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  if ((uint64_t)(v19 - (void)v41) < 0)
  {
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  if (*v41 != 58) {
    goto LABEL_77;
  }
  v17[5] = v41 + 1;
  uint64_t v42 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v17);
  uint64_t v70 = v42;
  if (v43) {
    goto LABEL_77;
  }
  long long v44 = (unsigned char *)v17[5];
  uint64_t v15 = (uint64_t)(v44 + 1);
  unint64_t v16 = v19 - (void)(v44 + 1);
  if (v19 < (unint64_t)(v44 + 1)) {
    goto LABEL_77;
  }
  if (v19 < (unint64_t)v44) {
    goto LABEL_105;
  }
  if ((uint64_t)&v44[-a3] < 0)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  if ((uint64_t)(v19 - (void)v44) < 0)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  if (*v44 != 90) {
    goto LABEL_77;
  }
  v17[5] = v15;
  if (v19 >= (unint64_t)(v44 + 2))
  {
LABEL_94:
    if ((((v15 - a3) | v16) & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_110;
    }
    int v59 = *(char *)v15;
    uint64_t v60 = *(unsigned __int8 *)v15;
    *(void *)&v82[0] = 0;
    *((void *)&v82[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v61._uint64_t countAndFlagsBits = 0xD000000000000021;
    v61._object = (void *)0x80000001823AA880;
    String.append(_:)(v61);
    uint64_t v62 = ((v60 >> 6) & 0xFFFFC0FF | ((v60 & 0x3F) << 8)) + 33217;
    if (v59 >= 0) {
      uint64_t v62 = v60 + 1;
    }
    *(void *)&v79[0] = (v62 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v62) >> 3)) & 7)));
    MEMORY[0x185302020](v79);
    Character.write<A>(to:)();
    swift_bridgeObjectRelease();
    v63._uint64_t countAndFlagsBits = 0x656E696C20746120;
    v63._object = (void *)0xE900000000000020;
    String.append(_:)(v63);
    int v64 = *((_OWORD *)v18 + 1);
    BOOL v87 = *(_OWORD *)v18;
    long long v88 = v64;
    long long v89 = v18[4];
    *(void *)&v79[0] = BufferReader.lineNumber.getter();
    v65._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    v66._object = (void *)0x80000001823AA8B0;
    v66._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v66);
LABEL_78:
    int v57 = v82[0];
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(v57, *((uint64_t *)&v57 + 1), v76, v77, (uint64_t)v78, ObjectType, v58);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release();
    return;
  }
  if (one-time initialization token for cache != -1) {
LABEL_108:
  }
    uint64_t v42 = swift_once();
  uint64_t v78 = &v69;
  long long v45 = (os_unfair_lock_s *)static CalendarCache.cache;
  MEMORY[0x1F4188790](v42);
  v68[16] = 7;
  unint64_t v19 = (unint64_t)&v45[15];
  swift_retain_n();
  os_unfair_lock_lock(v45 + 15);
  uint64_t v46 = v74;
  partial apply for closure #1 in CalendarCache.fixed(_:)((uint64_t)&v45[4], v82);
  uint64_t ObjectType = v46;
  if (v46) {
    goto LABEL_118;
  }
  os_unfair_lock_unlock(v45 + 15);
  uint64_t v47 = swift_release_n();
  uint64_t v83 = v82[0];
  if (one-time initialization token for cache != -1) {
    uint64_t v47 = swift_once();
  }
  uint64_t v78 = (uint64_t *)v68;
  long long v48 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v47);
  unint64_t v19 = (unint64_t)&v48[36];
  swift_retain_n();
  os_unfair_lock_lock(v48 + 36);
  uint64_t v49 = ObjectType;
  partial apply for closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v48[4], v82);
  if (v49) {
    goto LABEL_118;
  }
  os_unfair_lock_unlock(v48 + 36);
  swift_release_n();
  if (*(void *)&v82[0])
  {
    v79[0] = v82[0];
    Calendar.timeZone.setter((uint64_t *)v79);
    v79[0] = 0uLL;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v79, &v80, 0, 1, v23, 0, v32, 0, (uint64_t)v82, v72, 0, v73, 0, v71, 0, v70, 0, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    unint64_t v19 = *((void *)&v83 + 1);
    uint64_t ObjectType = swift_getObjectType();
    memcpy(v79, v82, 0x11AuLL);
    uint64_t v50 = *(void (**)(uint64_t *__return_ptr, long long *, uint64_t, unint64_t))(v19 + 176);
    swift_unknownObjectRetain();
    v50(&v80, v79, ObjectType, v19);
    swift_unknownObjectRelease();
    outlined release of DateComponents((uint64_t)v82);
    swift_unknownObjectRelease();
    if ((v81 & 1) == 0)
    {
      uint64_t v67 = v80;
      swift_release();
      *uint64_t v75 = v67;
      return;
    }
    if (v29)
    {
      int v51 = __OFSUB__(0, v23);
      uint64_t v23 = -v23;
      if (v51) {
        goto LABEL_116;
      }
    }
    if (v32 <= 127)
    {
      if (v72 <= 127)
      {
        if (v73 <= 127)
        {
          if (v32 >= -128 && v72 >= -128 && v73 >= -128 && v71 >= -128)
          {
            if (v71 <= 127)
            {
              if (!__OFSUB__(v23, 2001))
              {
                int v52 = (double)v70;
                specialized static Date.daysSinceReferenceDate(year:month:day:)(v23 - 2001, v32, v72);
                uint64_t v54 = v53;
                swift_release();
                *(double *)uint64_t v75 = (double)v73 * 3600.0 + (double)v71 * 60.0 + v52 + v54 * 86400.0;
                return;
              }
              goto LABEL_115;
            }
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
            goto LABEL_117;
          }
LABEL_113:
          __break(1u);
          goto LABEL_114;
        }
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }
LABEL_111:
      __break(1u);
      goto LABEL_112;
    }
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
LABEL_117:
  __break(1u);
LABEL_118:
  os_unfair_lock_unlock((os_unfair_lock_t)v19);
  __break(1u);
}

uint64_t read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(void *a1)
{
  id v1 = (char *)a1[5];
  unint64_t v2 = a1[6];
  if (v2 < (unint64_t)v1)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = a1[2];
  if ((uint64_t)&v1[-v4] < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((uint64_t)(v2 - (void)v1) < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((uint64_t)(v4 + a1[3] - v2) < 0)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x181B1F760);
  }
  uint64_t v5 = v1 + 2;
  if (v2 < (unint64_t)(v1 + 2)) {
    return 0;
  }
  uint64_t result = 0;
  char v7 = *v1;
  char v8 = v1[1];
  a1[5] = v5;
  if ((v7 - 58) >= 0xF6u && (v8 - 58) >= 0xF6u) {
    return 10 * (v7 - 48) + (v8 - 48);
  }
  return result;
}

uint64_t XMLPlistScanner.PartialMapData.record(tagType:with:)(unsigned __int8 a1, void *a2)
{
  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(a2);
  uint64_t v4 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = a1;
  *unint64_t v2 = v4;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.skipXMLComment()()
{
  unint64_t v1 = v0[3];
  unint64_t v2 = v0[4] - 3;
  if (v2 < v1)
  {
LABEL_11:
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    BufferReader.lineNumber.getter();
    v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000025;
    *(void *)(v8 + 8) = 0x80000001823AA2A0;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    *(unsigned char *)(v8 + 32) = 5;
    swift_willThrow();
  }
  else
  {
    unint64_t v3 = *v0 + v0[1];
    uint64_t v4 = v3 - v1;
    unint64_t v5 = v1 - *v0;
    while (v3 >= v1)
    {
      if ((v5 & 0x8000000000000000) != 0) {
        goto LABEL_14;
      }
      if (v4 < 0) {
        goto LABEL_15;
      }
      if (*(_WORD *)v1 == 11565 && *(unsigned char *)(v1 + 2) == 62)
      {
        v0[3] = v1 + 3;
        return;
      }
      ++v1;
      --v4;
      ++v5;
      if (v2 < v1) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanAnyValue(for:)(Foundation::XMLPlistTag a1)
{
  Swift::Bool v1 = XMLPlistScanner.scanUpToNextValue(for:)(a1);
  if (!v3)
  {
    if (v1)
    {
      XMLPlistScanner.scanXMLElement()();
      if (!v4) {
        char v2 = 1;
      }
    }
    else
    {
      char v2 = 0;
    }
  }
  return v2 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance XMLPlistError(long long *a1, long long *a2)
{
  outlined init with take of PredicateCodableError(a1, (uint64_t)v4);
  outlined init with take of PredicateCodableError(a2, (uint64_t)v5);
  return specialized static XMLPlistError.== infix(_:_:)(v4, v5) & 1;
}

unint64_t lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError()
{
  unint64_t result = lazy protocol witness table cache variable for type XMLPlistError and conformance XMLPlistError;
  if (!lazy protocol witness table cache variable for type XMLPlistError and conformance XMLPlistError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLPlistError and conformance XMLPlistError);
  }
  return result;
}

uint64_t specialized static XMLPlistError.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of PredicateCodableError(a2, (uint64_t)v21);
  outlined init with take of PredicateCodableError(a1, (uint64_t)&v25);
  switch(v29)
  {
    case 1:
      unint64_t v6 = v25;
      outlined init with take of PredicateCodableError(a2, (uint64_t)&v22);
      if (v24 == 1) {
        goto LABEL_21;
      }
      goto LABEL_33;
    case 2:
      int v7 = v25;
      unint64_t v6 = v26;
      outlined init with take of PredicateCodableError(a2, (uint64_t)&v22);
      if (v24 != 2 || v7 != v22.u8[0]) {
        goto LABEL_33;
      }
      uint64_t v8 = v22.i64[1];
      goto LABEL_22;
    case 3:
      int v9 = v25;
      unint64_t v11 = v26;
      unint64_t v10 = v27;
      unint64_t v12 = v28;
      outlined init with take of PredicateCodableError(a2, (uint64_t)&v22);
      if (v24 != 3) {
        goto LABEL_33;
      }
      char v13 = 0;
      if (v9 != v22.u8[0] || v11 != v22.i64[1]) {
        return v13 & 1;
      }
      if (!v12)
      {
        if (v23.i64[1]) {
          goto LABEL_33;
        }
        goto LABEL_39;
      }
      if (!v23.i64[1]) {
        goto LABEL_33;
      }
      if (__PAIR128__(v12, v10) == *(_OWORD *)&v23) {
        goto LABEL_35;
      }
      goto LABEL_18;
    case 4:
      unint64_t v6 = v25;
      outlined init with take of PredicateCodableError(a2, (uint64_t)&v22);
      if (v24 != 4) {
        goto LABEL_33;
      }
LABEL_21:
      uint64_t v8 = v22.i64[0];
LABEL_22:
      char v13 = v6 == v8;
      return v13 & 1;
    case 5:
      unint64_t v14 = v25;
      unint64_t v15 = v26;
      outlined init with take of PredicateCodableError(a2, (uint64_t)&v22);
      if (v24 != 5) {
        goto LABEL_33;
      }
      if (v14 == v22.i64[0] && v15 == v22.i64[1]) {
        goto LABEL_35;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      return v13 & 1;
    case 6:
      outlined init with take of PredicateCodableError(a2, (uint64_t)&v22);
      int8x16_t v17 = vorrq_s8(v22, v23);
      int8x8_t v18 = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
      if (v24 != 6 || *(void *)&v18 != 0) {
        goto LABEL_33;
      }
      goto LABEL_35;
    default:
      unint64_t v5 = v25;
      unint64_t v4 = v26;
      outlined init with take of PredicateCodableError(a2, (uint64_t)&v22);
      if (v24) {
        goto LABEL_33;
      }
      if (!v4)
      {
        if (!v22.i64[1])
        {
LABEL_39:
          swift_bridgeObjectRetain();
          char v13 = 1;
          return v13 & 1;
        }
LABEL_33:
        char v13 = 0;
        return v13 & 1;
      }
      if (!v22.i64[1]) {
        goto LABEL_33;
      }
      if (__PAIR128__(v4, v5) != *(_OWORD *)&v22)
      {
LABEL_18:
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_33;
        }
      }
LABEL_35:
      char v13 = 1;
      return v13 & 1;
  }
}

unint64_t specialized static XMLPlistScanner.parseCDSect_pl(reader:string:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[3];
  unint64_t v4 = a1[4];
  unint64_t result = v3 + 9;
  if (v4 < v3 + 9) {
    goto LABEL_21;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v8 = *a1 + v7;
  if (v8 < v3)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((uint64_t)(v3 - v6) < 0)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((uint64_t)(v8 - v3) < 0) {
    goto LABEL_37;
  }
  if (*(void *)v3 != 0x41544144435B213CLL || *(unsigned char *)(v3 + 8) != 91)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    BufferReader.lineNumber.getter();
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v11 = 0xD00000000000002BLL;
    *(void *)(v11 + 8) = 0x80000001823AA470;
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 24) = 0;
    *(unsigned char *)(v11 + 32) = 5;
    return swift_willThrow();
  }
  a1[3] = result;
  if (result >= v4 - 2)
  {
LABEL_20:
    a1[3] = result;
LABEL_21:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(unsigned char *)(v17 + 32) = 0;
    return swift_willThrow();
  }
  uint64_t v13 = 0;
  uint64_t v14 = v7 + v6 - v3 - 9;
  while (1)
  {
    unint64_t v15 = (_WORD *)(v3 + v13 + 9);
    if (v8 < (unint64_t)v15)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if ((uint64_t)(v3 - v6 + 9 + v13) < 0) {
      goto LABEL_33;
    }
    if (v14 < 0) {
      goto LABEL_34;
    }
    if (*v15 == 23901 && *(unsigned char *)(v3 + v13 + 11) == 62) {
      break;
    }
    a1[3] = v3 + v13++ + 10;
    --v14;
    if (v4 - v3 - 11 == v13) {
      goto LABEL_20;
    }
  }
  unint64_t v18 = v13 + 9;
  if (!*(void *)(a2 + 8))
  {
    unint64_t v20 = v18 + v3;
LABEL_30:
    a1[3] = v20 + 3;
    return result;
  }
  if (v18 < 9) {
    goto LABEL_38;
  }
  if ((uint64_t)(result - v6) >= 0)
  {
    unint64_t result = static String._tryFromUTF8(_:)();
    if (v19)
    {
      if (!*(void *)(a2 + 8)) {
        goto LABEL_40;
      }
      String.append(_:)(*(Swift::String *)&result);
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v20 = a1[3];
      goto LABEL_30;
    }
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(unsigned char *)(v21 + 32) = 6;
    return swift_willThrow();
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized static XMLPlistScanner.parseNumericEntityReference(reader:string:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v3 = (unsigned char *)a1[3];
  unint64_t v2 = a1[4];
  unint64_t v4 = v3 + 1;
  if (v2 < (unint64_t)(v3 + 1))
  {
LABEL_9:
    int v5 = 0;
    if ((unsigned char *)v2 == v3) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  if ((uint64_t)&v3[-v1] < 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  if ((uint64_t)(v2 - (void)v3) < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((uint64_t)(v1 + a1[1] - v2) < 0)
  {
LABEL_36:
    __break(1u);
    JUMPOUT(0x181B20A18);
  }
  if (*v3 != 120) {
    goto LABEL_9;
  }
  a1[3] = (uint64_t)v4;
  int v5 = 1;
  ++v3;
  if ((unsigned char *)v2 == v4)
  {
LABEL_7:
    uint64_t v6 = 0;
LABEL_8:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(unsigned char *)(v7 + 32) = 0;
LABEL_32:
    swift_willThrow();
    return v6;
  }
LABEL_10:
  uint64_t v6 = 0;
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v11 = v3[v8];
    a1[3] = (uint64_t)&v3[v8 + 1];
    if (v11 == 59) {
      break;
    }
    if (v8 == 8)
    {
      _StringGuts.grow(_:)(116);
      v16._object = (void *)0x80000001823AA4F0;
      v16._uint64_t countAndFlagsBits = 0xD000000000000031;
      String.append(_:)(v16);
      BufferReader.lineNumber.getter();
      v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      unint64_t v14 = 0xD000000000000041;
      unint64_t v15 = " while parsing data (too large of a value for a Unicode sequence)";
      goto LABEL_27;
    }
    int v9 = 16 * v6;
    if ((v11 - 58) >= 0xF6u)
    {
      if (!v5) {
        int v9 = 10 * v6;
      }
      char v10 = -48;
    }
    else
    {
      if ((v5 & 1) == 0)
      {
        uint64_t v21 = BufferReader.lineNumber.getter();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(void *)uint64_t v19 = v11;
        *(void *)(v19 + 8) = v21;
        unint64_t v22 = 0xD00000000000001CLL;
        int8x16_t v23 = "while parsing decimal entity";
        goto LABEL_30;
      }
      if ((v11 - 71) > 0xF9u)
      {
        char v10 = -55;
      }
      else
      {
        if ((v11 - 103) <= 0xF9u)
        {
          uint64_t v24 = BufferReader.lineNumber.getter();
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(void *)uint64_t v19 = v11;
          *(void *)(v19 + 8) = v24;
          unint64_t v22 = 0xD000000000000020;
          int8x16_t v23 = "while parsing hexadecimal entity";
LABEL_30:
          *(void *)(v19 + 16) = v22;
          *(void *)(v19 + 24) = (unint64_t)(v23 - 32) | 0x8000000000000000;
          char v20 = 3;
LABEL_31:
          *(unsigned char *)(v19 + 32) = v20;
          goto LABEL_32;
        }
        char v10 = -87;
      }
    }
    ++v8;
    uint64_t v6 = v9 + (v11 + v10);
    if (&v3[v8] == (unsigned char *)v2) {
      goto LABEL_8;
    }
  }
  if (WORD1(v6) > 0x10u || (v6 & 0xFFFFF800) == 0xD800)
  {
    _StringGuts.grow(_:)(110);
    v12._object = (void *)0x80000001823AA4F0;
    v12._uint64_t countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v12);
    BufferReader.lineNumber.getter();
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD00000000000003BLL;
    unint64_t v15 = " while parsing data (input did not result in a real string)";
LABEL_27:
    unint64_t v18 = (unint64_t)(v15 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v14);
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v19 = 0;
    *(void *)(v19 + 8) = 0xE000000000000000;
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    char v20 = 5;
    goto LABEL_31;
  }
  return v6;
}

uint64_t sub_181B20A5C()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_181B20A6C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181B20A7C()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t outlined copy of XMLPlistError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5 || a5 == 5 || a5 == 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for XMLPlistError(uint64_t a1)
{
  return outlined consume of XMLPlistError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t outlined consume of XMLPlistError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5 || a5 == 5 || a5 == 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for XMLPlistError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of XMLPlistError(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for XMLPlistError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of XMLPlistError(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of XMLPlistError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for XMLPlistError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of XMLPlistError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XMLPlistError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XMLPlistError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for XMLPlistError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 5u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t destructiveInjectEnumTag for XMLPlistError(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)uint64_t result = a2 - 6;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 6;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for XMLPlistError()
{
  return &type metadata for XMLPlistError;
}

ValueMetadata *type metadata accessor for XMLPlistMap.DictionaryIterator()
{
  return &type metadata for XMLPlistMap.DictionaryIterator;
}

unint64_t *assignWithCopy for XMLPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of XMLPlistMap.Value(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of XMLPlistMap.Value(v4);
  return a1;
}

unint64_t *assignWithTake for XMLPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of XMLPlistMap.Value(v3);
  return a1;
}

uint64_t getEnumTag for XMLPlistMap.Value(void *a1)
{
  uint64_t v1 = *a1 >> 60;
  if (v1 <= 7) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 8;
  }
}

void *destructiveProjectEnumData for XMLPlistMap.Value(void *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for XMLPlistMap.Value(unint64_t *result, uint64_t a2)
{
  if (a2 < 8)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 60;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 8);
    unint64_t v3 = 0x8000000000000000;
  }
  *uint64_t result = v2 | v3;
  return result;
}

void partial apply for closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(a1, a2, a3, a4, *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 16), *(void *)(v5 + 24), a5);
}

uint64_t sub_181B20E38()
{
  return MEMORY[0x1F4186498](v0, 56, 7);
}

ValueMetadata *type metadata accessor for XMLPlistMap.Region()
{
  return &type metadata for XMLPlistMap.Region;
}

uint64_t getEnumTagSinglePayload for XMLPlistTag(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for XMLPlistTag(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B20FB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XMLPlistTag()
{
  return &type metadata for XMLPlistTag;
}

unint64_t lazy protocol witness table accessor for type XMLPlistTag and conformance XMLPlistTag()
{
  unint64_t result = lazy protocol witness table cache variable for type XMLPlistTag and conformance XMLPlistTag;
  if (!lazy protocol witness table cache variable for type XMLPlistTag and conformance XMLPlistTag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLPlistTag and conformance XMLPlistTag);
  }
  return result;
}

NSValue __swiftcall _NSRange._bridgeToObjectiveC()()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  type metadata accessor for _NSRange(0);
  return (NSValue)objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, &v3, "{_NSRange=QQ}");
}

id static _NSRange._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static _NSRange._forceBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for _NSRange, "{_NSRange=QQ}");
}

BOOL static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for _NSRange, "{_NSRange=QQ}");
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance _NSRange()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  long long v2 = *v0;
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, &v2, "{_NSRange=QQ}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange(a1, a2, a3, a4, "{_NSRange=QQ}");
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance _NSRange(void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for _NSRange, "{_NSRange=QQ}");
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance _NSRange@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized static _NSRange._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

NSValue __swiftcall CGRect._bridgeToObjectiveC()()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = v0;
  uint64_t v6 = v1;
  uint64_t v7 = v2;
  uint64_t v8 = v3;
  type metadata accessor for CGRect(0);
  return (NSValue)objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, &v5, "{CGRect={CGPoint=dd}{CGSize=dd}}");
}

id static CGRect._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGRect(0);
  id result = (id)strcmp(v4, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(unsigned char *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 32);
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGRect()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, v3, "{CGRect={CGPoint=dd}{CGSize=dd}}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGRect(void *a1, uint64_t a2)
{
  id v3 = a1;
  id result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(unsigned char *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 32);
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGRect(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = specialized static CGRect._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
}

NSValue __swiftcall CGPoint._bridgeToObjectiveC()()
{
  return (NSValue)CGPoint._bridgeToObjectiveC()(type metadata accessor for CGPoint, (uint64_t)"{CGPoint=dd}", v0, v1);
}

id static CGPoint._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGPoint(0);
  id result = (id)strcmp(v4, "{CGPoint=dd}");
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint(a1, a2, (uint64_t)"{CGPoint=dd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGPoint(void *a1, uint64_t a2)
{
  id v3 = a1;
  id result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGPoint=dd}");
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGPoint(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = specialized static CGPoint._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)(a2 + 8) = v3;
}

NSValue __swiftcall CGVector._bridgeToObjectiveC()()
{
  return (NSValue)CGPoint._bridgeToObjectiveC()(type metadata accessor for CGVector, (uint64_t)"{CGVector=dd}", v0, v1);
}

id static CGVector._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static _NSRange._forceBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for CGVector, "{CGVector=dd}");
}

id static _NSRange._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, void (*a3)(void), const char *a4)
{
  id v7 = a1;
  uint64_t v8 = (const char *)objc_msgSend(v7, sel_objCType);
  a3(0);
  id result = (id)strcmp(v8, a4);
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return objc_msgSend(v7, sel_getValue_size_, a2, 16);
  }
  return result;
}

BOOL static CGVector._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for CGVector, "{CGVector=dd}");
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGVector(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint(a1, a2, (uint64_t)"{CGVector=dd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGVector(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange(a1, a2, a3, a4, "{CGVector=dd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  id v7 = a1;
  id result = (id)strcmp((const char *)objc_msgSend(v7, sel_objCType), a5);
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return objc_msgSend(v7, sel_getValue_size_, a2, 16);
  }
  return result;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CGVector(void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for CGVector, "{CGVector=dd}");
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGVector(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = specialized static CGVector._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)(a2 + 8) = v3;
}

NSValue __swiftcall CGSize._bridgeToObjectiveC()()
{
  return (NSValue)CGPoint._bridgeToObjectiveC()(type metadata accessor for CGSize, (uint64_t)"{CGSize=dd}", v0, v1);
}

id CGPoint._bridgeToObjectiveC()(void (*a1)(void), uint64_t a2, double a3, double a4)
{
  uint64_t v6[2] = *MEMORY[0x1E4F143B8];
  *(double *)uint64_t v6 = a3;
  *(double *)&v6[1] = a4;
  a1(0);
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, v6, a2);
}

id static CGSize._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGSize(0);
  id result = (id)strcmp(v4, "{CGSize=dd}");
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGSize(void *a1, uint64_t a2)
{
  id v3 = a1;
  id result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGSize=dd}");
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGSize(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = specialized static CGSize._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)(a2 + 8) = v3;
}

NSValue __swiftcall CGAffineTransform._bridgeToObjectiveC()()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  _OWORD v3[2] = v0[2];
  type metadata accessor for CGAffineTransform(0);
  return (NSValue)objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, v3, "{CGAffineTransform=dddddd}");
}

id static CGAffineTransform._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGAffineTransform(0);
  id result = (id)strcmp(v4, "{CGAffineTransform=dddddd}");
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(unsigned char *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 48);
  }
  return result;
}

double static CGAffineTransform._unconditionallyBridgeFromObjectiveC(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized static CGAffineTransform._unconditionallyBridgeFromObjectiveC(_:)(a1, v5);
  long long v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGAffineTransform()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  _OWORD v3[2] = v0[2];
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, v3, "{CGAffineTransform=dddddd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGAffineTransform(void *a1, uint64_t a2)
{
  id v3 = a1;
  id result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGAffineTransform=dddddd}");
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(unsigned char *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 48);
  }
  return result;
}

double protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGAffineTransform@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized static CGAffineTransform._unconditionallyBridgeFromObjectiveC(_:)(a1, v5);
  long long v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

uint64_t NSValue.value<A>(of:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (swift_isClassType()) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    id v6 = v2;
    objc_msgSend(v6, sel_objCType);
    uint64_t v7 = String.init(cString:)();
    BOOL v9 = v7 == 30302 && v8 == 0xE200000000000000;
    if (v9
      || (uint64_t v10 = v7, v11 = v8, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      || (v10 == 64 ? (BOOL v19 = v11 == 0xE100000000000000) : (BOOL v19 = 0), v19))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
      {
        unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
        goto LABEL_22;
      }
    }
    if (objc_msgSend(v6, sel_nonretainedObjectValue))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(alignp, sizep);
    }
    else
    {
      *(_OWORD *)sizep = 0u;
      long long v24 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    int v17 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v17 ^ 1u, 1, a1);
  }
  uint64_t v12 = *(void *)(a1 - 8);
  int v13 = *(_DWORD *)(v12 + 80);
  if ((v13 & 0x10000) == 0)
  {
    sizep[0] = 0;
    uint64_t v21 = v12;
    alignp[0] = 0;
    id v14 = v2;
    NSGetSizeAndAlignment((const char *)objc_msgSend(v14, sel_objCType), sizep, alignp);
    if (*(void *)(v21 + 64) != sizep[0] || alignp[0] != v13 + 1) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(a2, 1, 1, a1);
    }
    uint64_t v15 = swift_slowAlloc();
    objc_msgSend(v14, sel_getValue_size_, v15, sizep[0]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a2, v15, a1);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(a2, 0, 1, a1);
    return MEMORY[0x185309510](v15, -1, -1);
  }
  unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
LABEL_22:

  return v18(a2, 1, 1, a1);
}

uint64_t specialized static _NSRange._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  long long v4[2] = *MEMORY[0x1E4F143B8];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v1 = a1;
  uint64_t v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for _NSRange(0);
  if (strcmp(v2, "{_NSRange=QQ}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  v4[0] = 0;
  v4[1] = 0;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return v4[0];
}

BOOL specialized static CGRect._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGRect(0);
  int v5 = strcmp(v4, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if (v5)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 32) = 1;
  }
  else
  {
    *(unsigned char *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    objc_msgSend(v3, sel_getValue_size_, a2, 32);
  }
  return v5 == 0;
}

double specialized static CGRect._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v1 = a1;
  uint64_t v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGRect(0);
  if (strcmp(v2, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  memset(v4, 0, sizeof(v4));
  objc_msgSend(v1, sel_getValue_size_, v4, 32);
  return *(double *)v4;
}

double specialized static CGPoint._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  _OWORD v4[2] = *MEMORY[0x1E4F143B8];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v1 = a1;
  uint64_t v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGPoint(0);
  if (strcmp(v2, "{CGPoint=dd}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  v4[0] = 0;
  v4[1] = 0;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return *(double *)v4;
}

BOOL specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, void (*a3)(void), const char *a4)
{
  id v7 = a1;
  uint64_t v8 = (const char *)objc_msgSend(v7, sel_objCType);
  a3(0);
  int v9 = strcmp(v8, a4);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (v9)
  {
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)(a2 + 16) = 0;
    objc_msgSend(v7, sel_getValue_size_, a2, 16);
  }
  return v9 == 0;
}

double specialized static CGVector._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  _OWORD v4[2] = *MEMORY[0x1E4F143B8];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v1 = a1;
  uint64_t v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGVector(0);
  if (strcmp(v2, "{CGVector=dd}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  v4[0] = 0;
  v4[1] = 0;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return *(double *)v4;
}

double specialized static CGSize._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  _OWORD v4[2] = *MEMORY[0x1E4F143B8];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v1 = a1;
  uint64_t v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGSize(0);
  if (strcmp(v2, "{CGSize=dd}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  v4[0] = 0;
  v4[1] = 0;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return *(double *)v4;
}

BOOL specialized static CGAffineTransform._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGAffineTransform(0);
  int v5 = strcmp(v4, "{CGAffineTransform=dddddd}");
  if (v5)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(unsigned char *)(a2 + 48) = 1;
  }
  else
  {
    *(unsigned char *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    objc_msgSend(v3, sel_getValue_size_, a2, 48);
  }
  return v5 == 0;
}

double specialized static CGAffineTransform._unconditionallyBridgeFromObjectiveC(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGAffineTransform(0);
  if (strcmp(v4, "{CGAffineTransform=dddddd}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  objc_msgSend(v3, sel_getValue_size_, &v8, 48);
  double result = *(double *)&v8;
  long long v6 = v9;
  long long v7 = v10;
  *a2 = v8;
  a2[1] = v6;
  a2[2] = v7;
  return result;
}

void _MutableHandle.hash(into:)()
{
  id v1 = *(id *)(v0 + 16);
  NSObject.hash(into:)();
}

id static _MutableHandle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 16), sel_isEqual_, *(void *)(a2 + 16));
}

Swift::Int _MutableHandle.hashValue.getter()
{
  Hasher.init(_seed:)();
  id v1 = *(id *)(v0 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _MutableHandle<A>()
{
  return _MutableHandle.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance _MutableHandle<A>()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _MutableHandle<A>()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _MutableHandle<A>(uint64_t *a1, uint64_t *a2)
{
  return (unint64_t)static _MutableHandle.== infix(_:_:)(*a1, *a2) & 1;
}

uint64_t base witness table accessor for Equatable in _MutableHandle<A>()
{
  return swift_getWitnessTable();
}

id Data.init(base64Encoded:options:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      long long v6 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
      goto LABEL_7;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      long long v9 = __DataStorage.bridgedReference(_:)(v7, v8);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      long long v6 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      uint64_t v13 = a1;
      __int16 v14 = a2;
      char v15 = BYTE2(a2);
      char v16 = BYTE3(a2);
      char v17 = BYTE4(a2);
      char v18 = BYTE5(a2);
      long long v6 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v13, BYTE6(a2));
LABEL_7:
      long long v9 = v6;
LABEL_8:
      id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBase64EncodedData_options_, v9, a3);
      outlined consume of Data._Representation(a1, a2);

      if (!v10) {
        return 0;
      }
      id v11 = specialized Data.init(referencing:)(v10);

      return v11;
  }
}

id Data.base64EncodedData(options:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (a2 >> 32 != (int)a2)
      {
        uint64_t v27 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v27)
        {
          uint64_t v28 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          if (!__OFSUB__((int)a2, v28))
          {
            uint64_t v29 = v27 + (int)a2 - v28;
            id v30 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
            outlined copy of Data._Representation(a2, a3);
            id v11 = objc_msgSend(v30, sel_initWithBytesNoCopy_length_freeWhenDone_, v29, (a2 >> 32) - (int)a2, 0);
            id v12 = objc_msgSend(v11, sel_base64EncodedDataWithOptions_, a1);
            if (v12) {
              goto LABEL_7;
            }
            goto LABEL_22;
          }
LABEL_28:
          __break(1u);
        }
LABEL_30:
        __break(1u);
        JUMPOUT(0x181B22F44);
      }
      id v10 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
      outlined copy of Data._Representation(a2, a3);
      id v11 = objc_msgSend(v10, sel_init);
      id v12 = objc_msgSend(v11, sel_base64EncodedDataWithOptions_, a1);
      if (v12)
      {
LABEL_7:
        id v13 = v12;
        id v9 = specialized Data.init(referencing:)(v13);

        outlined consume of Data._Representation(a2, a3);
        return v9;
      }
LABEL_22:

      outlined consume of Data._Representation(a2, a3);
      return 0;
    case 2uLL:
      uint64_t v14 = *(void *)(a2 + 16);
      uint64_t v15 = *(void *)(a2 + 24);
      if (v14 == v15)
      {
        id v16 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        swift_retain();
        swift_retain();
        id v17 = objc_msgSend(v16, sel_init);
        id v18 = objc_msgSend(v17, sel_base64EncodedDataWithOptions_, a1);
        if (v18)
        {
LABEL_10:
          id v19 = v18;
          id v9 = specialized Data.init(referencing:)(v19);
          swift_release();

LABEL_18:
          swift_release();
          return v9;
        }
      }
      else
      {
        uint64_t v20 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v20)
        {
          __break(1u);
          goto LABEL_30;
        }
        uint64_t v21 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v22 = __OFSUB__(v14, v21);
        uint64_t v23 = v14 - v21;
        if (v22) {
          goto LABEL_26;
        }
        uint64_t v24 = v15 - v14;
        if (__OFSUB__(v15, v14))
        {
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        uint64_t v25 = v20 + v23;
        id v26 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        swift_retain();
        swift_retain();
        id v17 = objc_msgSend(v26, sel_initWithBytesNoCopy_length_freeWhenDone_, v25, v24, 0);
        id v18 = objc_msgSend(v17, sel_base64EncodedDataWithOptions_, a1);
        if (v18) {
          goto LABEL_10;
        }
      }
      swift_release();

      id v9 = 0;
      goto LABEL_18;
    case 3uLL:
      id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      id v7 = objc_msgSend(v6, sel_base64EncodedDataWithOptions_, a1);
      if (!v7) {
        goto LABEL_12;
      }
      goto LABEL_3;
    default:
      uint64_t v32 = a2;
      __int16 v33 = a3;
      char v34 = BYTE2(a3);
      char v35 = BYTE3(a3);
      char v36 = BYTE4(a3);
      char v37 = BYTE5(a3);
      id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytesNoCopy_length_freeWhenDone_, &v32, BYTE6(a3), 0);
      id v7 = objc_msgSend(v6, sel_base64EncodedDataWithOptions_, a1);
      if (v7)
      {
LABEL_3:
        id v8 = v7;
        id v9 = specialized Data.init(referencing:)(v8);

        return v9;
      }
LABEL_12:

      return 0;
  }
}

uint64_t specialized _BridgedStoredNSError.init(_:userInfo:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v4 = objc_allocWithZone((Class)NSError);
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithDomain_code_userInfo_, v5, a1, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v7 = objc_msgSend(v6, sel_domain);
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v10 == v11) {
    goto LABEL_7;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease_n();
  }
  *a2 = v6;
  return result;
}

uint64_t FloatingPointParseStrategy.formatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t FloatingPointParseStrategy.formatStyle.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*FloatingPointParseStrategy.formatStyle.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointParseStrategy.lenient.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t FloatingPointParseStrategy.lenient.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*FloatingPointParseStrategy.lenient.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointParseStrategy.hash(into:)(uint64_t a1, int *a2)
{
  void (*v87)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  Swift::UInt v115;
  Swift::UInt v116;
  Swift::UInt8 v117;
  Swift::UInt8 v118;
  Swift::UInt8 v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  unsigned char v132[144];
  char v133[8];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  char v148;
  char v149;
  char v150;
  void v151[18];
  unsigned char v152[144];
  unsigned char v153[144];
  unsigned char v154[72];

  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v128 = *(void *)(v5 - 8);
  uint64_t v129 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v126 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v124 = (uint64_t)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v123 = (uint64_t)&v121 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v122 = (uint64_t)&v121 - v12;
  uint64_t v125 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v125);
  uint64_t v14 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v127);
  id v16 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  id v19 = (char *)&v121 - v18;
  uint64_t v20 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v20);
  BOOL v22 = (unsigned __int8 *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + a2[11]));
  uint64_t v130 = v2;
  long long v131 = a2;
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v2 + a2[12], (uint64_t)v22, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of CurrencyFormatStyleConfiguration.Collection((uint64_t)v22, (uint64_t)v16, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(1uLL);
      if (v16[8])
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v32 = *(void *)v16;
        Hasher._combine(_:)(1u);
        if ((v32 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v33 = v32;
        }
        else {
          Swift::UInt64 v33 = 0;
        }
        Hasher._combine(_:)(v33);
      }
      uint64_t v35 = v128;
      uint64_t v34 = v129;
      char v36 = (int *)v127;
      outlined init with take of LocalePreferences?((uint64_t)(v16 + 16), (uint64_t)v154, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
      specialized Optional<A>.hash(into:)();
      int v37 = v16[73];
      if (v37 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v46 = v37 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v46);
      }
      int v47 = *((unsigned __int16 *)v16 + 37);
      unsigned int v48 = v47 | (v16[76] << 16);
      if (v47 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v48 & 1);
        Hasher._combine(_:)((v48 >> 8) & 1);
        Hasher._combine(_:)(HIWORD(v48) & 1);
      }
      uint64_t v23 = v131;
      int v53 = v16[77];
      if (v53 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v59 = v53 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v59);
      }
      uint64_t v60 = v123;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v16[v36[9]], v123, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v60, 1, v34) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        int v66 = v126;
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v126, v60, v34);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v66, v34);
      }
      uint64_t v67 = &v16[v36[10]];
      int v68 = v67[8];
      if (v68 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v73 = *(void *)v67;
        Hasher._combine(_:)(1u);
        if (v68)
        {
          Hasher._combine(_:)(1uLL);
          if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v79 = v73;
          }
          else {
            Swift::UInt64 v79 = 0;
          }
          Hasher._combine(_:)(v79);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v73);
        }
      }
      uint64_t v26 = v130;
      Swift::UInt v80 = v16[v36[11]];
      if (v80 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v80);
      }
      uint64_t v77 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v78 = (uint64_t)v16;
      goto LABEL_96;
    case 2u:
      outlined init with take of CurrencyFormatStyleConfiguration.Collection((uint64_t)v22, (uint64_t)v14, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(2uLL);
      uint64_t v23 = v131;
      if (v14[8])
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v38 = *(void *)v14;
        Hasher._combine(_:)(1u);
        if ((v38 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v39 = v38;
        }
        else {
          Swift::UInt64 v39 = 0;
        }
        Hasher._combine(_:)(v39);
      }
      uint64_t v40 = v128;
      uint64_t v41 = (int *)v125;
      outlined init with take of LocalePreferences?((uint64_t)(v14 + 16), (uint64_t)v154, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
      specialized Optional<A>.hash(into:)();
      int v42 = v14[73];
      if (v42 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v49 = v42 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v49);
      }
      unint64_t v50 = *(unsigned int *)(v14 + 74);
      if (*(_DWORD *)(v14 + 74) == 2)
      {
        LOBYTE(v51) = 0;
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v50 & 1);
        Hasher._combine(_:)((v50 >> 8) & 1);
        Hasher._combine(_:)(WORD1(v50) & 1);
        unsigned int v51 = BYTE3(v50) & 1;
      }
      uint64_t v54 = v129;
      Hasher._combine(_:)(v51);
      int v55 = v14[78];
      if (v55 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v61 = v55 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v61);
      }
      uint64_t v62 = v124;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v14[v41[9]], v124, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v62, 1, v54) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        int v69 = v126;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v126, v62, v54);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v69, v54);
      }
      uint64_t v70 = &v14[v41[10]];
      int v71 = v70[8];
      if (v71 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v74 = *(void *)v70;
        Hasher._combine(_:)(1u);
        if (v71)
        {
          Hasher._combine(_:)(1uLL);
          if ((v74 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v81 = v74;
          }
          else {
            Swift::UInt64 v81 = 0;
          }
          Hasher._combine(_:)(v81);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v74);
        }
      }
      uint64_t v26 = v130;
      Hasher._combine(_:)(v14[v41[11]]);
      Swift::UInt v82 = v14[v41[12]];
      if (v82 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v82);
      }
      uint64_t v77 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection;
      uint64_t v78 = (uint64_t)v14;
      goto LABEL_96;
    case 3u:
      uint64_t v24 = *v22;
      Swift::UInt v25 = v22[1];
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v24 + 1);
      uint64_t v23 = v131;
      if (v25 == 5)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v25);
      }
      uint64_t v26 = v130;
      goto LABEL_97;
    default:
      outlined init with take of CurrencyFormatStyleConfiguration.Collection((uint64_t)v22, (uint64_t)v19, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(0);
      if (v19[8])
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v27 = *(void *)v19;
        Hasher._combine(_:)(1u);
        if ((v27 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v28 = v27;
        }
        else {
          Swift::UInt64 v28 = 0;
        }
        Hasher._combine(_:)(v28);
      }
      id v30 = (int *)v127;
      uint64_t v29 = v128;
      outlined init with take of LocalePreferences?((uint64_t)(v19 + 16), (uint64_t)v154, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
      specialized Optional<A>.hash(into:)();
      int v31 = v19[73];
      if (v31 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v43 = v31 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v43);
      }
      int v44 = *((unsigned __int16 *)v19 + 37);
      unsigned int v45 = v44 | (v19[76] << 16);
      if (v44 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v45 & 1);
        Hasher._combine(_:)((v45 >> 8) & 1);
        Hasher._combine(_:)(HIWORD(v45) & 1);
      }
      int v52 = v19[77];
      if (v52 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v56 = v52 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v56);
      }
      uint64_t v57 = v129;
      uint64_t v58 = v122;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v19[v30[9]], v122, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v58, 1, v57) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        int v63 = v126;
        (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v126, v58, v57);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v63, v57);
      }
      int v64 = &v19[v30[10]];
      int v65 = v64[8];
      if (v65 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v72 = *(void *)v64;
        Hasher._combine(_:)(1u);
        if (v65)
        {
          Hasher._combine(_:)(1uLL);
          if ((v72 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v75 = v72;
          }
          else {
            Swift::UInt64 v75 = 0;
          }
          Hasher._combine(_:)(v75);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v72);
        }
      }
      uint64_t v23 = v131;
      Swift::UInt v76 = v19[v30[11]];
      if (v76 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v76);
      }
      uint64_t v26 = v130;
      uint64_t v77 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v78 = (uint64_t)v19;
LABEL_96:
      outlined destroy of CurrencyFormatStyleConfiguration.Collection(v78, v77);
LABEL_97:
      uint64_t v83 = *(void *)(v26 + v23[13] + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v85 = *(uint64_t (**)(uint64_t, uint64_t))(v83 + 48);
      swift_unknownObjectRetain();
      if (v85(ObjectType, v83))
      {
        Swift::UInt8 v86 = 1;
LABEL_101:
        Hasher._combine(_:)(v86);
        return swift_unknownObjectRelease();
      }
      Hasher._combine(_:)(0);
      (*(void (**)(uint64_t, uint64_t))(v83 + 64))(ObjectType, v83);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      BOOL v87 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v83 + 464);
      swift_unknownObjectRetain();
      v87(v151, ObjectType, v83);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v151, (uint64_t)v152, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v152, (uint64_t)v153, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v153) == 1)
      {
        Swift::UInt8 v86 = 0;
        goto LABEL_101;
      }
      outlined init with take of LocalePreferences?((uint64_t)v152, (uint64_t)v133, &demangling cache variable for type metadata for LocalePreferences?);
      Hasher._combine(_:)(1u);
      if (v133[0] == 2)
      {
        long long v88 = 0;
      }
      else
      {
        long long v88 = v133[0] & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v88);
      long long v89 = v134;
      if (!v134)
      {
        Hasher._combine(_:)(0);
        long long v94 = v133;
        goto LABEL_116;
      }
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v89 + 16));
      long long v90 = *(void *)(v89 + 16);
      if (!v90)
      {
        outlined init with take of LocalePreferences?((uint64_t)v152, (uint64_t)v132, &demangling cache variable for type metadata for LocalePreferences?);
        long long v94 = v132;
LABEL_116:
        outlined retain of LocalePreferences(v94);
        if (!v135) {
          goto LABEL_110;
        }
        goto LABEL_117;
      }
      outlined retain of LocalePreferences?((uint64_t)v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      swift_bridgeObjectRetain();
      long long v91 = v89 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v91 += 16;
        --v90;
      }
      while (v90);
      swift_bridgeObjectRelease();
      if (!v135)
      {
LABEL_110:
        Hasher._combine(_:)(0);
        if (!v136) {
          goto LABEL_111;
        }
        goto LABEL_118;
      }
LABEL_117:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (!v136)
      {
LABEL_111:
        Hasher._combine(_:)(0);
        long long v92 = v137;
        if (!v137) {
          goto LABEL_112;
        }
LABEL_119:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v92);
        swift_bridgeObjectRelease();
        long long v93 = v138;
        if (!v138) {
          goto LABEL_113;
        }
        goto LABEL_120;
      }
LABEL_118:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      long long v92 = v137;
      if (v137) {
        goto LABEL_119;
      }
LABEL_112:
      Hasher._combine(_:)(0);
      long long v93 = v138;
      if (!v138)
      {
LABEL_113:
        Hasher._combine(_:)(0);
        goto LABEL_121;
      }
LABEL_120:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v93);
      swift_bridgeObjectRelease();
LABEL_121:
      long long v95 = v139;
      long long v96 = v140;
      long long v98 = v141;
      long long v97 = v142;
      char v99 = v143;
      if (v139)
      {
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        char v100 = v96;
        long long v101 = v98;
        long long v102 = v97;
        long long v103 = v99;
        long long v104 = v95;
        _CFObject.hash(into:)();
        long long v131 = (int *)v95;
        if (v96) {
          goto LABEL_123;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        long long v109 = v99;
        long long v110 = v96;
        long long v111 = v98;
        BOOL v112 = v97;
        long long v131 = 0;
        if (v96)
        {
LABEL_123:
          Hasher._combine(_:)(1u);
          type metadata accessor for CFDictionaryRef(0);
          _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
          long long v105 = v96;
          _CFObject.hash(into:)();

          if (v98) {
            goto LABEL_124;
          }
          goto LABEL_129;
        }
      }
      Hasher._combine(_:)(0);
      if (v98)
      {
LABEL_124:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        long long v106 = v98;
        _CFObject.hash(into:)();

        if (v97) {
          goto LABEL_125;
        }
LABEL_130:
        Hasher._combine(_:)(0);
        if (v99) {
          goto LABEL_126;
        }
        goto LABEL_131;
      }
LABEL_129:
      Hasher._combine(_:)(0);
      if (!v97) {
        goto LABEL_130;
      }
LABEL_125:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      long long v107 = v97;
      _CFObject.hash(into:)();

      if (v99)
      {
LABEL_126:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        long long v108 = v99;
        _CFObject.hash(into:)();

        goto LABEL_132;
      }
LABEL_131:
      Hasher._combine(_:)(0);
      long long v108 = 0;
LABEL_132:

      long long v113 = v144;
      if (v113)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v113);
        swift_bridgeObjectRelease();
        long long v114 = v145;
        if (v145) {
          goto LABEL_134;
        }
LABEL_137:
        Hasher._combine(_:)(0);
        if (v146) {
          goto LABEL_135;
        }
LABEL_138:
        Hasher._combine(_:)(0);
        goto LABEL_139;
      }
      Hasher._combine(_:)(0);
      long long v114 = v145;
      if (!v145) {
        goto LABEL_137;
      }
LABEL_134:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v114);
      swift_bridgeObjectRelease();
      if (!v146) {
        goto LABEL_138;
      }
LABEL_135:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
LABEL_139:
      if (v147 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        long long v115 = v147 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v115);
      }
      if (v148 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        long long v116 = v148 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v116);
      }
      if (v149 == 2)
      {
        long long v117 = 0;
      }
      else
      {
        long long v117 = v149 & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v117);
      if (v150 == 2)
      {
        long long v118 = 0;
      }
      else
      {
        uint64_t v119 = v150 & 1;
        Hasher._combine(_:)(1u);
        long long v118 = v119;
      }
      Hasher._combine(_:)(v118);
      outlined retain of LocalePreferences?((uint64_t)v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      return swift_unknownObjectRelease();
  }
}

uint64_t static FloatingPointParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = type metadata accessor for FloatingPointParseStrategy(),
        *(unsigned __int8 *)(a1 + *(int *)(v4 + 44)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 44)))
    && (uint64_t v5 = v4,
        (static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)(a1 + *(int *)(v4 + 48), a2 + *(int *)(v4 + 48)) & 1) != 0))
  {
    uint64_t v6 = *(int *)(v5 + 52);
    long long v7 = *(_OWORD *)(a1 + v6);
    long long v10 = *(_OWORD *)(a2 + v6);
    long long v11 = v7;
    char v8 = specialized static Locale.== infix(_:_:)((uint64_t)&v11, (uint64_t)&v10);
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

BOOL static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void FloatingPointParseStrategy.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t FloatingPointParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x745374616D726F66 && a2 == 0xEB00000000656C79;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65696E656CLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001823AA9C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

Swift::Int FloatingPointParseStrategy.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t FloatingPointParseStrategy.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x745374616D726F66;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x746E65696E656CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x656C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointParseStrategy<A>.CodingKeys(char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FloatingPointParseStrategy<A>.CodingKeys()
{
  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance FloatingPointParseStrategy<A>.CodingKeys(uint64_t a1)
{
  FloatingPointParseStrategy.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointParseStrategy<A>.CodingKeys()
{
  Hasher.init(_seed:)();
  FloatingPointParseStrategy.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance FloatingPointParseStrategy<A>.CodingKeys()
{
  return FloatingPointParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FloatingPointParseStrategy<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = FloatingPointParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FloatingPointParseStrategy<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized FloatingPointParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointParseStrategy<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointParseStrategy<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t FloatingPointParseStrategy.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  v13[0] = a2;
  v13[1] = v3;
  type metadata accessor for FloatingPointParseStrategy.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)v13 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  uint64_t v8 = v13[2];
  uint64_t v9 = v13[3];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v9) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v11 = v5;
  uint64_t v12 = v13[0];
  LOBYTE(v14) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v14) = 2;
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType, (void (*)(uint64_t))type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  long long v14 = *(_OWORD *)(v8 + *(int *)(v12 + 52));
  char v15 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v7, v4);
}

Swift::Int FloatingPointParseStrategy.hashValue.getter(int *a1)
{
  Hasher.init(_seed:)();
  FloatingPointParseStrategy.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t FloatingPointParseStrategy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v31 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v31);
  id v30 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v8);
  Swift::UInt64 v33 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FloatingPointParseStrategy.CodingKeys();
  swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v28 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v32 = a3;
  uint64_t v12 = type metadata accessor for FloatingPointParseStrategy();
  uint64_t v26 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v26 - v13;
  uint64_t v15 = a1[3];
  char v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  uint64_t v34 = v11;
  uint64_t v16 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  }
  uint64_t v17 = v30;
  uint64_t v19 = v28;
  uint64_t v18 = v29;
  LOBYTE(v38) = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v14, v33, a2);
  LOBYTE(v38) = 1;
  char v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v37 = v12;
  v14[*(int *)(v12 + 44)] = v20 & 1;
  LOBYTE(v38) = 2;
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType, (void (*)(uint64_t))type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t v21 = (uint64_t)v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v37;
  outlined init with take of CurrencyFormatStyleConfiguration.Collection(v21, (uint64_t)&v14[*(int *)(v37 + 48)], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  char v39 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v34, v35);
  *(_OWORD *)&v14[*(int *)(v22 + 52)] = v38;
  uint64_t v24 = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 16))(v27, v14, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v23);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointParseStrategy<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointParseStrategy.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointParseStrategy<A>(void *a1, uint64_t a2)
{
  return FloatingPointParseStrategy.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointParseStrategy<A>(uint64_t a1, int *a2)
{
  Hasher.init(_seed:)();
  FloatingPointParseStrategy.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointParseStrategy<A>(uint64_t a1, uint64_t a2)
{
  return static FloatingPointParseStrategy.== infix(_:_:)(a1, a2);
}

uint64_t FloatingPointParseStrategy.parse(_:)@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v137 = a2;
  unint64_t v136 = a1;
  uint64_t v123 = a4;
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v129 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v128 = (char *)&v112 - v10;
  uint64_t v122 = *(void *)(a3 + 32);
  uint64_t v127 = *(void *)(v122 + 8);
  uint64_t v133 = v11;
  uint64_t v126 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v126);
  uint64_t v125 = (char *)&v112 - v12;
  uint64_t v131 = v7;
  uint64_t v130 = v8;
  uint64_t v134 = swift_getAssociatedTypeWitness();
  uint64_t v124 = *(void *)(v134 - 8);
  MEMORY[0x1F4188790](v134);
  uint64_t v135 = (char *)&v112 - v13;
  uint64_t v14 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  uint64_t v138 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v138 + 64);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (uint64_t *)((char *)&v112 - v18);
  uint64_t v20 = *(int *)(a3 + 44);
  uint64_t v21 = v4 + *(int *)(a3 + 48);
  uint64_t v22 = (uint64_t *)(v4 + *(int *)(a3 + 52));
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  uint64_t v132 = v5;
  char v25 = *(unsigned char *)(v5 + v20);
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v21, (uint64_t)&v112 - v18, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v28 = v27(ObjectType, v24);
  uint64_t inited = v23;
  uint64_t v30 = v28;
  uint64_t v32 = v31;
  swift_unknownObjectRelease();
  Swift::UInt64 v33 = (char *)v19 + *(int *)(v14 + 20);
  *(void *)Swift::UInt64 v33 = v30;
  *((void *)v33 + 1) = v32;
  uint64_t v120 = v14;
  *((unsigned char *)v19 + *(int *)(v14 + 24)) = v25;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v34 = static ICULegacyNumberFormatter.cache;
  uint64_t v35 = unk_1E8ED3298;
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v19, (uint64_t)v16, type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v36 = (*(unsigned __int8 *)(v138 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
  uint64_t v140 = swift_allocObject();
  uint64_t v121 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = outlined init with take of CurrencyFormatStyleConfiguration.Collection((uint64_t)v16, v140 + v36, type metadata accessor for ICULegacyNumberFormatter.Signature);
  MEMORY[0x1F4188790](v37);
  long long v38 = v19;
  *(&v112 - 2) = (uint64_t)v19;
  char v39 = (uint64_t *)(v35 + 16);
  uint64_t v40 = v35 + 24;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v35 + 24));
  uint64_t v41 = v139;
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v35 + 16, v142);
  if (v41)
  {
LABEL_71:
    os_unfair_lock_unlock((os_unfair_lock_t)v40);
    __break(1u);
    goto LABEL_72;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 24));
  swift_release();
  if (!v142[0])
  {
    uint64_t v77 = partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v35 + 24));
    uint64_t v78 = *(void *)(*(void *)(v35 + 16) + 16);
    uint64_t v118 = *(void *)(v35 + 16);
    if (v34 < v78) {
      *char v39 = MEMORY[0x1E4FBC868];
    }
    else {
      swift_bridgeObjectRetain();
    }
    uint64_t v79 = (uint64_t)v121;
    swift_retain();
    LODWORD(v119) = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v141 = *v39;
    uint64_t v45 = v141;
    *char v39 = 0x8000000000000000;
    uint64_t v42 = (uint64_t)v19;
    unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19);
    uint64_t v80 = *(void *)(v45 + 16);
    BOOL v81 = (v50 & 1) == 0;
    uint64_t v82 = v80 + v81;
    if (__OFADD__(v80, v81)) {
      goto LABEL_32;
    }
    uint64_t v83 = *(void *)(v45 + 24);
    uint64_t v139 = v77;
    if (v83 >= v82)
    {
      if ((v119 & 1) == 0) {
        goto LABEL_33;
      }
      long long v88 = (os_unfair_lock_s *)(v35 + 24);
      if ((v50 & 1) == 0) {
        goto LABEL_68;
      }
    }
    else
    {
      char v84 = v50;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v82, (int)v119);
      uint64_t v45 = v141;
      unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19);
      if ((v84 & 1) != (v86 & 1)) {
        goto LABEL_73;
      }
      unint64_t v51 = v85;
      char v87 = v84;
      long long v88 = (os_unfair_lock_s *)(v35 + 24);
      if ((v87 & 1) == 0) {
        goto LABEL_68;
      }
    }
    goto LABEL_27;
  }
  uint64_t v139 = v142[0];
  swift_release();
  uint64_t v40 = v134;
  uint64_t v42 = (uint64_t)v19;
  while (1)
  {
    outlined destroy of CurrencyFormatStyleConfiguration.Collection(v42, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    Swift::UInt v43 = v137;
    swift_bridgeObjectRetain();
    uint64_t v35 = v136;
    specialized BidirectionalCollection._trimmingCharacters(while:)(v136, (unint64_t)v43);
    uint64_t v45 = v44;
    long long v38 = v46;
    swift_bridgeObjectRelease();
    uint64_t v47 = String.init(_:)();
    uint64_t inited = v48;
    Swift::UInt v49 = specialized _copyCollectionToContiguousArray<A>(_:)(v47, v48);
    LODWORD(v142[0]) = 0;
    int v52 = v135;
    if (v49[2] >> 31)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    unum_parseDouble();
    swift_bridgeObjectRelease();
    swift_release();
    if (SLODWORD(v142[0]) <= 0)
    {
      dispatch thunk of BinaryFloatingPoint.init(_:)();
      return swift_release();
    }
    uint64_t v53 = v133;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinFloatLiteral.init(_builtinFloatLiteral:)();
    uint64_t v54 = v128;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    (*(void (**)(char *, uint64_t))(v131 + 48))(v54, v130);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v54, v53);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 40) = v55;
    v142[0] = 0;
    v142[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(73);
    v56._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
    v56._object = (void *)0xED00002065737261;
    String.append(_:)(v56);
    v57._uint64_t countAndFlagsBits = v35;
    v57._object = v43;
    String.append(_:)(v57);
    v58._uint64_t countAndFlagsBits = 0xD000000000000038;
    v58._object = (void *)0x80000001823AA980;
    String.append(_:)(v58);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v59 = v142[0];
    uint64_t v60 = v142[1];
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 48) = v59;
    *(void *)(inited + 56) = v60;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v45 = static _DictionaryStorage.allocate(capacity:)();
    long long v38 = v142;
    outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v142, &demangling cache variable for type metadata for (String, Any));
    uint64_t v61 = v142[0];
    uint64_t v62 = v142[1];
    swift_retain();
    unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v62);
    if (v50) {
      goto LABEL_29;
    }
    *(void *)(v45 + 8 * (v63 >> 6) + 64) |= 1 << v63;
    int v64 = (uint64_t *)(*(void *)(v45 + 48) + 16 * v63);
    *int v64 = v61;
    v64[1] = v62;
    outlined init with take of Any(&v143, (_OWORD *)(*(void *)(v45 + 56) + 32 * v63));
    uint64_t v65 = *(void *)(v45 + 16);
    BOOL v66 = __OFADD__(v65, 1);
    uint64_t v67 = v65 + 1;
    if (v66) {
      goto LABEL_30;
    }
    *(void *)(v45 + 16) = v67;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v68 = objc_allocWithZone((Class)NSError);
    uint64_t v69 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v70 = objc_msgSend(v68, sel_initWithDomain_code_userInfo_, v69, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    long long v38 = (uint64_t *)objc_msgSend(v70, sel_domain);
    id v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    uint64_t v45 = v72;

    id v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    uint64_t inited = v74;
    if (v71 == v73 && v45 == v74)
    {
      swift_bridgeObjectRelease_n();
LABEL_16:
      swift_willThrow();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v52, v40);
    }
    char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v76) {
      goto LABEL_16;
    }
LABEL_31:
    __break(1u);
    __break(1u);
    __break(1u);
LABEL_32:
    __break(1u);
    __break(1u);
LABEL_33:
    int v113 = v50;
    unint64_t v114 = v51;
    long long v115 = (os_unfair_lock_s *)v40;
    uint64_t v112 = inited;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
    long long v91 = (void *)v45;
    uint64_t v92 = static _DictionaryStorage.copy(original:)();
    uint64_t v45 = v92;
    uint64_t v119 = v91;
    if (v91[2]) {
      break;
    }
LABEL_67:
    swift_bridgeObjectRelease();
    uint64_t v77 = v139;
    uint64_t v79 = (uint64_t)v121;
    uint64_t v42 = (uint64_t)v38;
    unint64_t v51 = v114;
    long long v88 = v115;
    if (v113)
    {
LABEL_27:
      uint64_t v89 = *(void *)(v45 + 56);
      uint64_t v90 = 8 * v51;
      swift_release();
      *(void *)(v89 + v90) = v77;
    }
    else
    {
LABEL_68:
      unint64_t v111 = v51;
      outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v42, v79, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v111, v79, v77, (void *)v45);
    }
    uint64_t v40 = v134;
    *(void *)(v35 + 16) = v45;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v88);
    swift_release_n();
    swift_bridgeObjectRelease();
  }
  long long v93 = (char *)(v92 + 64);
  uint64_t v94 = 1 << *(unsigned char *)(v45 + 32);
  long long v117 = (char *)(v119 + 8);
  unint64_t v95 = (unint64_t)(v94 + 63) >> 6;
  if ((void *)v45 != v119 || v93 >= &v117[8 * v95]) {
    memmove(v93, v117, 8 * v95);
  }
  uint64_t v120 = 0;
  long long v96 = v119;
  *(void *)(v45 + 16) = v119[2];
  uint64_t v97 = 1 << *((unsigned char *)v96 + 32);
  uint64_t v98 = v96[8];
  uint64_t v99 = -1;
  if (v97 < 64) {
    uint64_t v99 = ~(-1 << v97);
  }
  unint64_t v100 = v99 & v98;
  int64_t v116 = (unint64_t)(v97 + 63) >> 6;
  uint64_t v101 = (uint64_t)v121;
  while (2)
  {
    if (v100)
    {
      unint64_t v102 = __clz(__rbit64(v100));
      v100 &= v100 - 1;
      unint64_t v103 = v102 | (v120 << 6);
LABEL_41:
      long long v104 = v119;
      uint64_t v40 = *(void *)(v138 + 72) * v103;
      outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v119[6] + v40, v101, type metadata accessor for ICULegacyNumberFormatter.Signature);
      uint64_t v105 = 8 * v103;
      uint64_t v106 = *(void *)(v104[7] + v105);
      outlined init with take of CurrencyFormatStyleConfiguration.Collection(v101, *(void *)(v45 + 48) + v40, type metadata accessor for ICULegacyNumberFormatter.Signature);
      *(void *)(*(void *)(v45 + 56) + v105) = v106;
      swift_retain();
      continue;
    }
    break;
  }
  int64_t v107 = v120 + 1;
  if (__OFADD__(v120, 1))
  {
    __break(1u);
    goto LABEL_71;
  }
  if (v107 >= v116) {
    goto LABEL_67;
  }
  unint64_t v108 = *(void *)&v117[8 * v107];
  int64_t v109 = v120 + 1;
  if (v108) {
    goto LABEL_66;
  }
  int64_t v109 = v120 + 2;
  if (v120 + 2 >= v116) {
    goto LABEL_67;
  }
  unint64_t v108 = *(void *)&v117[8 * v109];
  if (v108) {
    goto LABEL_66;
  }
  int64_t v109 = v120 + 3;
  if (v120 + 3 >= v116) {
    goto LABEL_67;
  }
  unint64_t v108 = *(void *)&v117[8 * v109];
  if (v108) {
    goto LABEL_66;
  }
  int64_t v109 = v120 + 4;
  if (v120 + 4 >= v116) {
    goto LABEL_67;
  }
  unint64_t v108 = *(void *)&v117[8 * v109];
  if (v108) {
    goto LABEL_66;
  }
  int64_t v109 = v120 + 5;
  if (v120 + 5 >= v116) {
    goto LABEL_67;
  }
  unint64_t v108 = *(void *)&v117[8 * v109];
  if (v108) {
    goto LABEL_66;
  }
  int64_t v109 = v120 + 6;
  if (v120 + 6 >= v116) {
    goto LABEL_67;
  }
  unint64_t v108 = *(void *)&v117[8 * v109];
  if (v108) {
    goto LABEL_66;
  }
  int64_t v109 = v120 + 7;
  if (v120 + 7 >= v116) {
    goto LABEL_67;
  }
  unint64_t v108 = *(void *)&v117[8 * v109];
  if (v108) {
    goto LABEL_66;
  }
  int64_t v109 = v120 + 8;
  if (v120 + 8 >= v116) {
    goto LABEL_67;
  }
  unint64_t v108 = *(void *)&v117[8 * v109];
  if (v108)
  {
LABEL_66:
    unint64_t v100 = (v108 - 1) & v108;
    uint64_t v120 = v109;
    unint64_t v103 = __clz(__rbit64(v108)) + (v109 << 6);
    goto LABEL_41;
  }
  uint64_t v110 = v120 + 9;
  if (v120 + 9 >= v116) {
    goto LABEL_67;
  }
  unint64_t v108 = *(void *)&v117[8 * v110];
  if (v108)
  {
    int64_t v109 = v120 + 9;
    goto LABEL_66;
  }
  while (1)
  {
    int64_t v109 = v110 + 1;
    if (__OFADD__(v110, 1)) {
      break;
    }
    if (v109 >= v116) {
      goto LABEL_67;
    }
    unint64_t v108 = *(void *)&v117[8 * v109];
    ++v110;
    if (v108) {
      goto LABEL_66;
    }
  }
LABEL_72:
  __break(1u);
LABEL_73:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t FloatingPointParseStrategy.parse(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, int *a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  uint64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  MEMORY[0x1F4188790](v14);
  uint64_t v118 = &v98[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = &v98[-v17];
  if (a3 >> 14 >= a4 >> 14)
  {
    swift_getAssociatedTypeWitness();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v55 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);
    return v55(a6, 1, 1, TupleTypeMetadata2);
  }
  unint64_t v116 = a3;
  uint64_t v117 = v18;
  uint64_t v109 = a1;
  unint64_t v110 = a4;
  uint64_t v108 = a2;
  uint64_t v112 = a5;
  int v113 = a6;
  uint64_t v20 = a5[11];
  uint64_t v21 = v7 + a5[12];
  uint64_t v22 = (uint64_t *)(v7 + a5[13]);
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  char v25 = *(unsigned char *)(v7 + v20);
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v21, (uint64_t)&v98[-v17], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v28 = v27(ObjectType, v24);
  uint64_t v30 = v29;
  uint64_t v114 = v23;
  swift_unknownObjectRelease();
  uint64_t v31 = (uint64_t *)&v19[*(int *)(v14 + 20)];
  *uint64_t v31 = v28;
  v31[1] = v30;
  v19[*(int *)(v14 + 24)] = v25;
  uint64_t v32 = (uint64_t)v19;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v33 = static ICULegacyNumberFormatter.cache;
  uint64_t v34 = (os_unfair_lock_s *)unk_1E8ED3298;
  uint64_t v35 = v118;
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v32, (uint64_t)v118, type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v36 = (*(unsigned __int8 *)(v117 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
  uint64_t v37 = swift_allocObject();
  uint64_t v38 = outlined init with take of CurrencyFormatStyleConfiguration.Collection((uint64_t)v35, v37 + v36, type metadata accessor for ICULegacyNumberFormatter.Signature);
  MEMORY[0x1F4188790](v38);
  uint64_t v115 = v32;
  *(void *)&v98[-16] = v32;
  char v39 = v34 + 4;
  uint64_t v40 = v34 + 6;
  swift_retain_n();
  os_unfair_lock_lock(v34 + 6);
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v34[4], v119);
  os_unfair_lock_unlock(v34 + 6);
  swift_release();
  if (v119[0])
  {
    uint64_t v107 = v37;
    uint64_t v111 = v119[0];
    swift_release();
    uint64_t v41 = v115;
    goto LABEL_6;
  }
  uint64_t v106 = v34;
  uint64_t v56 = partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  uint64_t v107 = v37;
  uint64_t v111 = v56;
  Swift::String v58 = v106;
  swift_retain();
  long long v104 = v34 + 6;
  os_unfair_lock_lock(v34 + 6);
  uint64_t v59 = *(void *)&v58[4]._os_unfair_lock_opaque;
  uint64_t v60 = *(void *)(v59 + 16);
  uint64_t v41 = v115;
  uint64_t v105 = v59;
  if (v33 < v60) {
    *(void *)&v39->_os_unfair_lock_opaque = MEMORY[0x1E4FBC868];
  }
  else {
    swift_bridgeObjectRetain();
  }
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v120 = *(void **)&v39->_os_unfair_lock_opaque;
  uint64_t v62 = v120;
  *(void *)&v39->_os_unfair_lock_opaque = 0x8000000000000000;
  unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
  uint64_t v65 = v62[2];
  BOOL v66 = (v63 & 1) == 0;
  uint64_t v67 = v65 + v66;
  if (__OFADD__(v65, v66))
  {
    __break(1u);
  }
  else
  {
    if (v62[3] < v67)
    {
      char v68 = v63;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, isUniquelyReferenced_nonNull_native);
      uint64_t v69 = (uint64_t)v120;
      unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
      if ((v68 & 1) != (v71 & 1)) {
        goto LABEL_63;
      }
      unint64_t v64 = v70;
      if ((v68 & 1) == 0) {
        goto LABEL_59;
      }
LABEL_22:
      uint64_t v72 = *(void *)(v69 + 56);
      uint64_t v73 = 8 * v64;
      swift_release();
      *(void *)(v72 + v73) = v111;
LABEL_60:
      *(void *)&v106[4]._os_unfair_lock_opaque = v69;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v40);
      swift_release_n();
      swift_bridgeObjectRelease();
LABEL_6:
      outlined destroy of CurrencyFormatStyleConfiguration.Collection(v41, type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      unint64_t v42 = String.subscript.getter();
      uint64_t v44 = v43;
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      uint64_t v120 = 0;
      specialized ICULegacyNumberFormatter.parseAsDouble<A>(_:upperBound:)(v42, v43, v45, v47, &v120);
      if (v49)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_getAssociatedTypeWitness();
        uint64_t v57 = swift_getTupleTypeMetadata2();
        return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v113, 1, 1, v57);
      }
      else
      {
        v119[0] = v42;
        v119[1] = v44;
        v119[2] = v46;
        v119[3] = v48;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        uint64_t v50 = String.Index.init<A>(utf16Offset:in:)();
        swift_getAssociatedTypeWitness();
        uint64_t v51 = swift_getTupleTypeMetadata2();
        int v52 = v113;
        *int v113 = v50;
        dispatch thunk of BinaryFloatingPoint.init(_:)();
        swift_release();
        return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v52, 0, 1, v51);
      }
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v69 = (uint64_t)v62;
      if (v63) {
        goto LABEL_22;
      }
LABEL_59:
      long long v96 = v118;
      unint64_t v97 = v64;
      outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v41, (uint64_t)v118, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v97, (uint64_t)v96, v111, (void *)v69);
      uint64_t v40 = v104;
      goto LABEL_60;
    }
  }
  int v99 = v63;
  unint64_t v100 = v64;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  uint64_t v74 = static _DictionaryStorage.copy(original:)();
  uint64_t v69 = v74;
  unint64_t v103 = v62;
  if (!v62[2])
  {
LABEL_58:
    swift_bridgeObjectRelease();
    uint64_t v41 = v115;
    unint64_t v64 = v100;
    if (v99) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }
  Swift::UInt64 v75 = (char *)(v74 + 64);
  uint64_t v76 = 1 << *(unsigned char *)(v69 + 32);
  unint64_t v102 = (char *)(v103 + 8);
  unint64_t v77 = (unint64_t)(v76 + 63) >> 6;
  if ((void *)v69 != v103 || v75 >= &v102[8 * v77]) {
    memmove(v75, v102, 8 * v77);
  }
  int64_t v78 = 0;
  uint64_t v79 = v103;
  *(void *)(v69 + 16) = v103[2];
  uint64_t v80 = 1 << *((unsigned char *)v79 + 32);
  uint64_t v81 = v79[8];
  uint64_t v82 = -1;
  if (v80 < 64) {
    uint64_t v82 = ~(-1 << v80);
  }
  unint64_t v83 = v82 & v81;
  int64_t v101 = (unint64_t)(v80 + 63) >> 6;
  char v84 = v118;
  while (1)
  {
    if (v83)
    {
      unint64_t v85 = __clz(__rbit64(v83));
      v83 &= v83 - 1;
      unint64_t v86 = v85 | (v78 << 6);
      uint64_t v87 = v117;
      goto LABEL_32;
    }
    int64_t v93 = v78 + 1;
    uint64_t v87 = v117;
    if (__OFADD__(v78, 1))
    {
      __break(1u);
      goto LABEL_62;
    }
    if (v93 >= v101) {
      goto LABEL_58;
    }
    unint64_t v94 = *(void *)&v102[8 * v93];
    ++v78;
    if (!v94)
    {
      int64_t v78 = v93 + 1;
      if (v93 + 1 >= v101) {
        goto LABEL_58;
      }
      unint64_t v94 = *(void *)&v102[8 * v78];
      if (!v94)
      {
        int64_t v78 = v93 + 2;
        if (v93 + 2 >= v101) {
          goto LABEL_58;
        }
        unint64_t v94 = *(void *)&v102[8 * v78];
        if (!v94)
        {
          int64_t v78 = v93 + 3;
          if (v93 + 3 >= v101) {
            goto LABEL_58;
          }
          unint64_t v94 = *(void *)&v102[8 * v78];
          if (!v94)
          {
            int64_t v78 = v93 + 4;
            if (v93 + 4 >= v101) {
              goto LABEL_58;
            }
            unint64_t v94 = *(void *)&v102[8 * v78];
            if (!v94)
            {
              int64_t v78 = v93 + 5;
              if (v93 + 5 >= v101) {
                goto LABEL_58;
              }
              unint64_t v94 = *(void *)&v102[8 * v78];
              if (!v94)
              {
                int64_t v78 = v93 + 6;
                if (v93 + 6 >= v101) {
                  goto LABEL_58;
                }
                unint64_t v94 = *(void *)&v102[8 * v78];
                if (!v94)
                {
                  int64_t v78 = v93 + 7;
                  if (v93 + 7 >= v101) {
                    goto LABEL_58;
                  }
                  unint64_t v94 = *(void *)&v102[8 * v78];
                  if (!v94) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_57:
    unint64_t v83 = (v94 - 1) & v94;
    unint64_t v86 = __clz(__rbit64(v94)) + (v78 << 6);
LABEL_32:
    long long v88 = v103;
    unint64_t v89 = *(void *)(v87 + 72) * v86;
    outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v103[6] + v89, (uint64_t)v84, type metadata accessor for ICULegacyNumberFormatter.Signature);
    uint64_t v90 = v88[7];
    uint64_t v91 = 8 * v86;
    uint64_t v92 = *(void *)(v90 + 8 * v86);
    outlined init with take of CurrencyFormatStyleConfiguration.Collection((uint64_t)v84, *(void *)(v69 + 48) + v89, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v69 + 56) + v91) = v92;
    swift_retain();
  }
  int64_t v95 = v93 + 8;
  if (v95 >= v101) {
    goto LABEL_58;
  }
  unint64_t v94 = *(void *)&v102[8 * v95];
  if (v94)
  {
    int64_t v78 = v95;
    uint64_t v87 = v117;
    char v84 = v118;
    goto LABEL_57;
  }
  while (1)
  {
    int64_t v78 = v95 + 1;
    if (__OFADD__(v95, 1)) {
      break;
    }
    uint64_t v87 = v117;
    char v84 = v118;
    if (v78 >= v101) {
      goto LABEL_58;
    }
    unint64_t v94 = *(void *)&v102[8 * v78];
    ++v95;
    if (v94) {
      goto LABEL_57;
    }
  }
LABEL_62:
  __break(1u);
LABEL_63:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized ICULegacyNumberFormatter.parseAsDouble<A>(_:upperBound:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = String.UTF16View.distance(from:to:)();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v10, 0);
    unint64_t v13 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v17, (uint64_t)(v12 + 4), v11, a1, a2, a3, a4);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if (v13 != v11) {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  }
  v17[0] = 0;
  if (v12[2] >> 31)
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }
  unum_parseDouble();
  uint64_t v15 = v14;
  swift_release();
  if (v17[0] > 0) {
    return 0;
  }
  *a5 = 0;
  return v15;
}

uint64_t protocol witness for ParseStrategy.parse(_:) in conformance FloatingPointParseStrategy<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointParseStrategy.parse(_:)(*(void *)a1, *(void **)(a1 + 8), a2, a3);
}

uint64_t FloatingPointParseStrategy.init<A>(format:lenient:)@<X0>(_OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return FloatingPointParseStrategy.init<A>(format:lenient:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle, a5);
}

{
  return FloatingPointParseStrategy.init<A>(format:lenient:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent, a5);
}

uint64_t FloatingPointParseStrategy.init<A>(format:lenient:)@<X0>(long long *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FloatingPointFormatStyle.Currency();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, long long *, uint64_t))(v10 + 16))(a3, a1, v9);
  swift_getWitnessTable();
  uint64_t v11 = (int *)type metadata accessor for FloatingPointParseStrategy();
  *(unsigned char *)(a3 + v11[11]) = a2;
  uint64_t v12 = v11[13];
  long long v15 = *a1;
  *(_OWORD *)(a3 + v12) = v15;
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)a1 + *(int *)(v9 + 40), (uint64_t)v8, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  unint64_t v13 = *(void (**)(long long *, uint64_t))(v10 + 8);
  swift_unknownObjectRetain();
  v13(a1, v9);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of CurrencyFormatStyleConfiguration.Collection((uint64_t)v8, a3 + v11[12], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t FloatingPointParseStrategy.init<A>(format:lenient:)@<X0>(_OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = a5(0, a3, a4);
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)(v9 - 8) + 16))(a6, a1, v9);
  swift_getWitnessTable();
  uint64_t v10 = (int *)type metadata accessor for FloatingPointParseStrategy();
  *(unsigned char *)(a6 + v10[11]) = a2;
  *(_OWORD *)(a6 + v10[13]) = *a1;
  outlined init with take of CurrencyFormatStyleConfiguration.Collection((uint64_t)a1 + *(int *)(v9 + 36), a6 + v10[12], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);

  return swift_storeEnumTagMultiPayload();
}

void specialized Optional<A>.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with take of LocalePreferences?(v2, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  char v5 = v16[0];
  uint64_t v4 = v16[1];
  int v6 = v17;
  uint64_t v7 = v18;
  unint64_t v9 = v19;
  uint64_t v8 = v20;
  unsigned int v10 = v21;
  outlined init with take of LocalePreferences?(v2, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  if ((unint64_t)v22[38] << 48 == 0x3000000000000)
  {
LABEL_48:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  if (v5 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  int v11 = BYTE1(v6);
  if ((_BYTE)v6 == 0xFF)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v4, v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  int v12 = HIBYTE(v6);
  int v13 = BYTE2(v6);
  if (v11 == 5)
  {
    Hasher._combine(_:)(0);
    if (v13 != 5) {
      goto LABEL_10;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v13 != 5)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v12 != 3) {
        goto LABEL_13;
      }
      goto LABEL_16;
    }
  }
  Hasher._combine(_:)(0);
  if (v12 != 3)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
LABEL_16:
  Hasher._combine(_:)(0);
LABEL_17:
  if ((v9 & 0x100) != 0)
  {
    Hasher._combine(_:)(0);
    if (BYTE2(v9) == 3) {
      goto LABEL_28;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (BYTE3(v9) != 6) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  Hasher._combine(_:)(1u);
  if ((v9 & 1) == 0)
  {
    uint64_t v14 = 10;
    if (v7 < 10) {
      uint64_t v14 = v7;
    }
    if (v14 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v14;
    }
    MEMORY[0x185302340](103, 0xE100000000000000, v15);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (BYTE2(v9) != 3) {
    goto LABEL_26;
  }
LABEL_28:
  Hasher._combine(_:)(0);
  if (BYTE3(v9) != 6)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(0);
LABEL_32:
  if (BYTE4(v9) == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)();
  }
  if (BYTE5(v9) == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(SBYTE5(v9));
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if ((v9 & 0xFF000000000000) == 0x2000000000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (HIBYTE(v9) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if ((_BYTE)v10 == 0xFF)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v8, v10 & 1);
  }
  if (v10 >> 8 == 12) {
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(SBYTE1(v10));
  String.hash(into:)();
  swift_bridgeObjectRelease();
}

void specialized Optional<A>.hash(into:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  if (a3)
  {
    Hasher._combine(_:)(1u);
    if (a2 == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(a2 + 1);
    }
    if ((a2 & 0xFF00) == 0xE00)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(a2) + 1);
    }
    if ((*(void *)&a2 & 0xFF0000) == 0x60000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(a2) + 1);
    }
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, a3);
    if (a4 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(a4 + 1);
    }
    if ((a4 & 0xFF00) == 0x300)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(a4) + 1);
    }
    if ((a4 & 0xFF0000) == 0x30000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(a4) + 1);
    }
    if ((a4 & 0xFF000000) == 0x2000000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(((a4 >> 24) & 1) + 1);
    }
    if ((a4 & 0xFF00000000) == 0x200000000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)((HIDWORD(a4) & 1) + 1);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v12 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_19;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13) {
        break;
      }
    }
LABEL_18:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    Hasher._combine(_:)(*(_DWORD *)(*(void *)(a2 + 48) + 4 * v11));
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 ^= Hasher._finalize()();
  }
  int64_t v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v12 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_19;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13) {
        break;
      }
    }
LABEL_18:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    Hasher._combine(_:)(*(void *)(*(void *)(a2 + 48) + 8 * v11));
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 ^= Hasher._finalize()();
  }
  int64_t v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
}

{
  Swift::UInt v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = a2 + 64;
  unint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  int64_t v7 = -1;
  if (v6 < 64) {
    int64_t v7 = ~(-1 << v6);
  }
  Swift::UInt v8 = v7 & *(void *)(a2 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    unint64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v13 >= v9) {
      goto LABEL_19;
    }
    int64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      uint64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        goto LABEL_19;
      }
      int64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14) {
        break;
      }
    }
LABEL_18:
    Swift::UInt v8 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    int64_t v12 = *(void *)(*(void *)(a2 + 56) + 8 * v11);
    Hasher._combine(_:)(*(unsigned __int8 *)(*(void *)(a2 + 48) + v11));
    Hasher._combine(_:)(v12);
    v3 ^= Hasher._finalize()();
  }
  uint64_t v15 = v13 + 2;
  if (v15 >= v9)
  {
LABEL_19:
    Hasher._combine(_:)(v3);
    return;
  }
  int64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    uint64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_19;
    }
    int64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  uint64_t v24;
  void v25[2];
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;

  uint64_t v17 = a2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  uint64_t v5 = v4 & *(void *)(a2 + 64);
  uint64_t v18 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_4:
  Swift::UInt v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  int64_t v9 = v8 | (v7 << 6);
LABEL_5:
  unint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v9);
  int64_t v12 = *v10;
  unint64_t v11 = v10[1];
  outlined init with copy of AttributedString._AttributeValue(*(void *)(a2 + 56) + 72 * v9, (uint64_t)&v20);
  *(void *)&unint64_t v19 = v12;
  *((void *)&v19 + 1) = v11;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of LocalePreferences?((uint64_t)&v19, (uint64_t)v25, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
    if (!v25[1])
    {
      swift_release();
      Hasher._combine(_:)(v6);
      return;
    }
    unsigned __int16 v21 = v28;
    uint64_t v22 = v29;
    *(void *)&uint64_t v23 = v30;
    unint64_t v19 = v26;
    uint64_t v20 = v27;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v19);
    v6 ^= Hasher._finalize()();
    if (v5) {
      goto LABEL_4;
    }
LABEL_6:
    unint64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 < v18)
    {
      int64_t v14 = *(void *)(v17 + 8 * v13);
      if (v14) {
        goto LABEL_9;
      }
      uint64_t v15 = v7 + 2;
      ++v7;
      if (v13 + 1 < v18)
      {
        int64_t v14 = *(void *)(v17 + 8 * v15);
        if (v14)
        {
          ++v13;
LABEL_9:
          uint64_t v5 = (v14 - 1) & v14;
          int64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
          int64_t v7 = v13;
          goto LABEL_5;
        }
        uint64_t v16 = v13 + 2;
        int64_t v7 = v13 + 1;
        if (v13 + 2 < v18) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v5 = 0;
    uint64_t v24 = 0;
    uint64_t v22 = 0u;
    uint64_t v23 = 0u;
    uint64_t v20 = 0u;
    unsigned __int16 v21 = 0u;
    unint64_t v19 = 0u;
  }
  int64_t v14 = *(void *)(v17 + 8 * v16);
  if (v14)
  {
    v13 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    unint64_t v13 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v13 >= v18)
    {
      int64_t v7 = v18 - 1;
      goto LABEL_21;
    }
    int64_t v14 = *(void *)(v17 + 8 * v13);
    ++v16;
    if (v14) {
      goto LABEL_9;
    }
  }
LABEL_27:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v22;

  uint64_t v20 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a2 + 64);
  unint64_t v19 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      uint64_t v22 = (v4 - 1) & v4;
      int64_t v7 = v6;
      Swift::UInt v8 = __clz(__rbit64(v4)) | (v6 << 6);
      goto LABEL_20;
    }
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v9 >= v19) {
      goto LABEL_32;
    }
    unint64_t v10 = *(void *)(v20 + 8 * v9);
    unint64_t v11 = v6 + 1;
    if (!v10)
    {
      unint64_t v11 = v6 + 2;
      if (v6 + 2 >= v19) {
        goto LABEL_32;
      }
      unint64_t v10 = *(void *)(v20 + 8 * v11);
      if (!v10) {
        break;
      }
    }
LABEL_19:
    uint64_t v22 = (v10 - 1) & v10;
    int64_t v7 = v11;
    Swift::UInt v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
    unint64_t v13 = (void *)(*(void *)(a2 + 56) + 80 * v8);
    int64_t v14 = v13[1];
    uint64_t v15 = v13[3];
    uint64_t v16 = v13[5];
    uint64_t v17 = v13[7];
    uint64_t v18 = v13[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v14)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    unint64_t v6 = v7;
    if (v15)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_25;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      if (v16)
      {
LABEL_25:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_26;
        }
        goto LABEL_30;
      }
    }
    Hasher._combine(_:)(0);
    if (v17)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
LABEL_30:
    Hasher._combine(_:)(0);
    if (v18)
    {
LABEL_4:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_5;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v4 = v22;
    v5 ^= Hasher._finalize()();
  }
  int64_t v12 = v6 + 3;
  if (v6 + 3 >= v19)
  {
LABEL_32:
    swift_release();
    Hasher._combine(_:)(v5);
    return;
  }
  unint64_t v10 = *(void *)(v20 + 8 * v12);
  if (v10)
  {
    unint64_t v11 = v6 + 3;
    goto LABEL_19;
  }
  while (1)
  {
    unint64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v11 >= v19) {
      goto LABEL_32;
    }
    unint64_t v10 = *(void *)(v20 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_19;
    }
  }
LABEL_34:
  __break(1u);
}

{
  Swift::UInt v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = a2 + 64;
  unint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  int64_t v7 = -1;
  if (v6 < 64) {
    int64_t v7 = ~(-1 << v6);
  }
  Swift::UInt v8 = v7 & *(void *)(a2 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    unint64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v13 >= v9) {
      goto LABEL_19;
    }
    int64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      uint64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        goto LABEL_19;
      }
      int64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14) {
        break;
      }
    }
LABEL_18:
    Swift::UInt v8 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    int64_t v12 = *(void *)(*(void *)(a2 + 56) + 8 * v11);
    Hasher._combine(_:)(*(_DWORD *)(*(void *)(a2 + 48) + 4 * v11));
    Hasher._combine(_:)(v12);
    v3 ^= Hasher._finalize()();
  }
  uint64_t v15 = v13 + 2;
  if (v15 >= v9)
  {
LABEL_19:
    Hasher._combine(_:)(v3);
    return;
  }
  int64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    uint64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_19;
    }
    int64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;

  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_20;
    }
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v12 >= v7) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_22;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13) {
        break;
      }
    }
LABEL_19:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_20:
    uint64_t v15 = *(void *)(*(void *)(a2 + 56) + 16 * v11 + 8);
    Hasher._combine(_:)(*(unsigned __int8 *)(*(void *)(a2 + 48) + v11));
    if (v15)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v8 ^= Hasher._finalize()();
  }
  int64_t v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_22:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_24:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v12 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_19;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13) {
        break;
      }
    }
LABEL_18:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    Hasher._combine(_:)(*(unsigned __int8 *)(*(void *)(a2 + 48) + v11));
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 ^= Hasher._finalize()();
  }
  int64_t v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  Swift::UInt v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v15 = a2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  uint64_t v5 = v4 & *(void *)(a2 + 64);
  unint64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  Swift::UInt v8 = 0;
  while (1)
  {
    if (v5)
    {
      int64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_20;
    }
    unint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v11 >= v6) {
      goto LABEL_22;
    }
    int64_t v12 = *(void *)(v15 + 8 * v11);
    ++v8;
    if (!v12)
    {
      Swift::UInt v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_22;
      }
      int64_t v12 = *(void *)(v15 + 8 * v8);
      if (!v12) {
        break;
      }
    }
LABEL_19:
    uint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_20:
    int64_t v14 = *(void *)(*(void *)(a2 + 56) + 16 * v10 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v14)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v7 ^= Hasher._finalize()();
  }
  unint64_t v13 = v11 + 2;
  if (v13 < v6)
  {
    int64_t v12 = *(void *)(v15 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        Swift::UInt v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v8 >= v6) {
          goto LABEL_22;
        }
        int64_t v12 = *(void *)(v15 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_19;
        }
      }
LABEL_24:
      __break(1u);
      JUMPOUT(0x181B28EE4);
    }
    Swift::UInt v8 = v13;
    goto LABEL_19;
  }
LABEL_22:
  swift_release();
  Hasher._combine(_:)(v7);
}

uint64_t type metadata accessor for FloatingPointParseStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FloatingPointParseStrategy.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined destroy of CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t base witness table accessor for Equatable in FloatingPointParseStrategy<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for FloatingPointParseStrategy<A>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t type metadata completion function for FloatingPointParseStrategy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for FloatingPointParseStrategy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 | 7;
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v13 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v9 + 64) + 1;
  }
  uint64_t v12 = (v10 + 78) & ~v10;
  uint64_t v14 = v10 + 79;
  if (((v13 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v13 + 7 + v12) & 0xFFFFFFFFFFFFFFF8) + 10) {
    unint64_t v15 = ((v13 + 7 + v12) & 0xFFFFFFFFFFFFFFF8) + 10;
  }
  else {
    unint64_t v15 = ((v13 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 11;
  }
  unsigned int v16 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v16 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v15 + (((v10 | 7) + v7 + 1) & ~(v10 | 7)) + 8) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    uint64_t v20 = (void *)(v19 + (((v16 | 7) + 16) & ~(unint64_t)(v16 | 7)));
    swift_retain();
  }
  else
  {
    size_t __n = v13;
    uint64_t v60 = v10 + 78;
    uint64_t v62 = *(void *)(v8 - 8);
    uint64_t v63 = v8;
    uint64_t v61 = v13 + 7;
    uint64_t v21 = ~v11;
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    *((unsigned char *)a1 + v7) = *((unsigned char *)a2 + v7);
    uint64_t v22 = ((unint64_t)a1 + v7 + v11 + 1) & v21;
    uint64_t v23 = ((unint64_t)a2 + v7 + v11 + 1) & v21;
    unsigned int v24 = *(unsigned __int8 *)(v23 + v15);
    unsigned int v25 = v24 - 4;
    if (v24 >= 4)
    {
      if (v15 <= 3) {
        int v26 = v15;
      }
      else {
        int v26 = 4;
      }
      switch(v26)
      {
        case 2:
          int v27 = *(unsigned __int16 *)v23;
          break;
        case 3:
          int v27 = *(unsigned __int16 *)v23 | (*(unsigned __int8 *)(v23 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)v23;
          break;
        default:
          int v27 = *(unsigned __int8 *)v23;
          break;
      }
      int v28 = (v27 | (v25 << (8 * v15))) + 4;
      unsigned int v24 = v27 + 4;
      if (v15 < 4) {
        unsigned int v24 = v28;
      }
    }
    uint64_t v29 = ~v10;
    uint64_t v20 = a1;
    switch(v24)
    {
      case 1u:
        uint64_t v36 = *(void *)v23;
        *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
        *(void *)uint64_t v22 = v36;
        long long v37 = *(_OWORD *)(v23 + 16);
        long long v38 = *(_OWORD *)(v23 + 32);
        long long v39 = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v22 + 57) = *(_OWORD *)(v23 + 57);
        *(_OWORD *)(v22 + 32) = v38;
        *(_OWORD *)(v22 + 48) = v39;
        *(_OWORD *)(v22 + 16) = v37;
        *(unsigned char *)(v22 + 73) = *(unsigned char *)(v23 + 73);
        LOWORD(v36) = *(_WORD *)(v23 + 74);
        *(unsigned char *)(v22 + 76) = *(unsigned char *)(v23 + 76);
        *(_WORD *)(v22 + 74) = v36;
        *(unsigned char *)(v22 + 77) = *(unsigned char *)(v23 + 77);
        uint64_t v40 = (void *)((v60 + v22) & v29);
        uint64_t v41 = (const void *)((v60 + v23) & v29);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v62 + 48))(v41, 1, v63))
        {
          memcpy(v40, v41, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v62 + 16))(v40, v41, v63);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v40, 0, 1, v63);
        }
        unint64_t v52 = ((unint64_t)v40 + v61) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v53 = ((unint64_t)v41 + v61) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v54 = *(void *)v53;
        *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
        *(void *)unint64_t v52 = v54;
        *(unsigned char *)(v52 + 9) = *(unsigned char *)(v53 + 9);
        char v48 = 1;
        break;
      case 2u:
        uint64_t v42 = *(void *)v23;
        *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
        *(void *)uint64_t v22 = v42;
        long long v43 = *(_OWORD *)(v23 + 16);
        long long v44 = *(_OWORD *)(v23 + 32);
        long long v45 = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v22 + 57) = *(_OWORD *)(v23 + 57);
        *(_OWORD *)(v22 + 32) = v44;
        *(_OWORD *)(v22 + 48) = v45;
        *(_OWORD *)(v22 + 16) = v43;
        *(unsigned char *)(v22 + 73) = *(unsigned char *)(v23 + 73);
        *(_DWORD *)(v22 + 74) = *(_DWORD *)(v23 + 74);
        *(unsigned char *)(v22 + 78) = *(unsigned char *)(v23 + 78);
        uint64_t v46 = (void *)((v14 + v22) & v29);
        unint64_t v47 = (const void *)((v14 + v23) & v29);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v62 + 48))(v47, 1, v63))
        {
          memcpy(v46, v47, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v62 + 16))(v46, v47, v63);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v46, 0, 1, v63);
        }
        unint64_t v55 = ((unint64_t)v46 + v61) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v56 = ((unint64_t)v47 + v61) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v57 = *(void *)v56;
        *(unsigned char *)(v55 + 8) = *(unsigned char *)(v56 + 8);
        *(void *)unint64_t v55 = v57;
        *(unsigned char *)(v55 + 9) = *(unsigned char *)(v56 + 9);
        *(unsigned char *)(v55 + 10) = *(unsigned char *)(v56 + 10);
        char v48 = 2;
        break;
      case 3u:
        *(_WORD *)uint64_t v22 = *(_WORD *)v23;
        char v48 = 3;
        break;
      default:
        uint64_t v30 = *(void *)v23;
        *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
        *(void *)uint64_t v22 = v30;
        long long v31 = *(_OWORD *)(v23 + 16);
        long long v32 = *(_OWORD *)(v23 + 32);
        long long v33 = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v22 + 57) = *(_OWORD *)(v23 + 57);
        *(_OWORD *)(v22 + 32) = v32;
        *(_OWORD *)(v22 + 48) = v33;
        *(_OWORD *)(v22 + 16) = v31;
        *(unsigned char *)(v22 + 73) = *(unsigned char *)(v23 + 73);
        LOWORD(v30) = *(_WORD *)(v23 + 74);
        *(unsigned char *)(v22 + 76) = *(unsigned char *)(v23 + 76);
        *(_WORD *)(v22 + 74) = v30;
        *(unsigned char *)(v22 + 77) = *(unsigned char *)(v23 + 77);
        uint64_t v34 = (void *)((v60 + v22) & v29);
        uint64_t v35 = (const void *)((v60 + v23) & v29);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v62 + 48))(v35, 1, v63))
        {
          memcpy(v34, v35, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v62 + 16))(v34, v35, v63);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v34, 0, 1, v63);
        }
        char v48 = 0;
        unint64_t v49 = ((unint64_t)v34 + v61) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v50 = ((unint64_t)v35 + v61) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v51 = *(void *)v50;
        *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
        *(void *)unint64_t v49 = v51;
        *(unsigned char *)(v49 + 9) = *(unsigned char *)(v50 + 9);
        break;
    }
    *(unsigned char *)(v22 + v15) = v48;
    *(_OWORD *)(((v22 | 7) + v15 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v23 | 7) + v15 + 1) & 0xFFFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return v20;
}

uint64_t destroy for FloatingPointParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (unsigned __int16 *)((a1 + (v7 | 7) + v4 + 1) & ~(v7 | 7));
  uint64_t v9 = (v7 + 78) & ~v7;
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v10 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 64) + 1;
  }
  unint64_t v11 = ((v10 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v12 = ((v10 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v12 <= v11) {
    unint64_t v13 = ((v10 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 10;
  }
  else {
    unint64_t v13 = ((v10 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11;
  }
  unsigned int v14 = *((unsigned __int8 *)v8 + v13);
  unsigned int v15 = v14 - 4;
  if (v14 >= 4)
  {
    if (v13 <= 3) {
      int v16 = v13;
    }
    else {
      int v16 = 4;
    }
    switch(v16)
    {
      case 2:
        int v17 = *v8;
        break;
      case 3:
        int v17 = *v8 | (*((unsigned __int8 *)v8 + 2) << 16);
        break;
      case 4:
        int v17 = *(_DWORD *)v8;
        break;
      default:
        int v17 = *(unsigned __int8 *)v8;
        break;
    }
    int v18 = (v17 | (v15 << (8 * v13))) + 4;
    unsigned int v14 = v17 + 4;
    if (v13 < 4) {
      unsigned int v14 = v18;
    }
  }
  uint64_t v19 = ~v7;
  switch(v14)
  {
    case 2u:
      uint64_t v20 = (uint64_t)v8 + v7 + 79;
      goto LABEL_21;
    case 3u:
      break;
    default:
      uint64_t v20 = (uint64_t)v8 + v7 + 78;
LABEL_21:
      uint64_t v21 = v20 & v19;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v20 & v19, 1, v5)) {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v5);
      }
      break;
  }

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)(v6 + a1) = *(unsigned char *)(v6 + a2);
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (v12 + v8) & ~(v11 | 7);
  uint64_t v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84)) {
    size_t v16 = *(void *)(v10 + 64);
  }
  else {
    size_t v16 = *(void *)(v10 + 64) + 1;
  }
  size_t v17 = v16 + 7;
  uint64_t v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 10)
    unint64_t v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 10;
  else {
    unint64_t v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11;
  }
  unsigned int v20 = *(unsigned __int8 *)(v14 + v19);
  unsigned int v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v19 <= 3) {
      int v22 = v19;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *(unsigned __int16 *)v14;
        break;
      case 3:
        int v23 = *(unsigned __int16 *)v14 | (*(unsigned __int8 *)(v14 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)v14;
        break;
      default:
        int v23 = *(unsigned __int8 *)v14;
        break;
    }
    int v24 = (v23 | (v21 << (8 * v19))) + 4;
    unsigned int v20 = v23 + 4;
    if (v19 < 4) {
      unsigned int v20 = v24;
    }
  }
  uint64_t v25 = ~v11;
  switch(v20)
  {
    case 1u:
      uint64_t v32 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v32;
      long long v33 = *(_OWORD *)(v14 + 16);
      long long v34 = *(_OWORD *)(v14 + 32);
      long long v35 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v34;
      *(_OWORD *)(v13 + 48) = v35;
      *(_OWORD *)(v13 + 16) = v33;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      LOWORD(v32) = *(_WORD *)(v14 + 74);
      *(unsigned char *)(v13 + 76) = *(unsigned char *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v32;
      *(unsigned char *)(v13 + 77) = *(unsigned char *)(v14 + 77);
      uint64_t v36 = (void *)((v15 + v13) & v25);
      long long v37 = (const void *)((v15 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v37, 1, v9))
      {
        memcpy(v36, v37, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v36, v37, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v36, 0, 1, v9);
      }
      unint64_t v48 = ((unint64_t)v36 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v49 = ((unint64_t)v37 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v50 = *(void *)v49;
      *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
      *(void *)unint64_t v48 = v50;
      *(unsigned char *)(v48 + 9) = *(unsigned char *)(v49 + 9);
      char v44 = 1;
      break;
    case 2u:
      uint64_t v38 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v38;
      long long v39 = *(_OWORD *)(v14 + 16);
      long long v40 = *(_OWORD *)(v14 + 32);
      long long v41 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v40;
      *(_OWORD *)(v13 + 48) = v41;
      *(_OWORD *)(v13 + 16) = v39;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(unsigned char *)(v13 + 78) = *(unsigned char *)(v14 + 78);
      uint64_t v42 = (void *)((v18 + v13) & v25);
      long long v43 = (const void *)((v18 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v43, 1, v9))
      {
        memcpy(v42, v43, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v42, v43, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v42, 0, 1, v9);
      }
      unint64_t v51 = ((unint64_t)v42 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v52 = ((unint64_t)v43 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v53 = *(void *)v52;
      *(unsigned char *)(v51 + 8) = *(unsigned char *)(v52 + 8);
      *(void *)unint64_t v51 = v53;
      *(unsigned char *)(v51 + 9) = *(unsigned char *)(v52 + 9);
      *(unsigned char *)(v51 + 10) = *(unsigned char *)(v52 + 10);
      char v44 = 2;
      break;
    case 3u:
      *(_WORD *)uint64_t v13 = *(_WORD *)v14;
      char v44 = 3;
      break;
    default:
      uint64_t v26 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v26;
      long long v27 = *(_OWORD *)(v14 + 16);
      long long v28 = *(_OWORD *)(v14 + 32);
      long long v29 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v28;
      *(_OWORD *)(v13 + 48) = v29;
      *(_OWORD *)(v13 + 16) = v27;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      LOWORD(v26) = *(_WORD *)(v14 + 74);
      *(unsigned char *)(v13 + 76) = *(unsigned char *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v26;
      *(unsigned char *)(v13 + 77) = *(unsigned char *)(v14 + 77);
      uint64_t v30 = (void *)((v15 + v13) & v25);
      long long v31 = (const void *)((v15 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v31, 1, v9))
      {
        memcpy(v30, v31, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v30, v31, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v30, 0, 1, v9);
      }
      char v44 = 0;
      unint64_t v45 = ((unint64_t)v30 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v46 = ((unint64_t)v31 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v47 = *(void *)v46;
      *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
      *(void *)unint64_t v45 = v47;
      *(unsigned char *)(v45 + 9) = *(unsigned char *)(v46 + 9);
      break;
  }
  *(unsigned char *)(v13 + v19) = v44;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *(unsigned char *)(v6 + a1) = *v8;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 | 7) + 1;
  uint64_t v14 = (v13 + v7) & ~(v12 | 7);
  uint64_t v15 = (unint64_t)&v8[v13] & ~(v12 | 7);
  if (v14 == v15)
  {
    int v28 = *(_DWORD *)(v10 + 84);
    size_t v29 = *(void *)(v10 + 64);
    uint64_t v30 = (v12 + 79) & ~v12;
    uint64_t v18 = (v12 + 78) & ~v12;
  }
  else
  {
    uint64_t v16 = v9;
    uint64_t v17 = v12 + 78;
    uint64_t v18 = (v12 + 78) & ~v12;
    if (*(_DWORD *)(v10 + 84)) {
      uint64_t v19 = *(void *)(v10 + 64);
    }
    else {
      uint64_t v19 = *(void *)(v10 + 64) + 1;
    }
    unint64_t v20 = ((v19 + 7 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
    uint64_t v81 = a1;
    unint64_t v21 = (v19 + 7 + ((v12 + 79) & ~v12)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = v21 + 11;
    if (v21 + 11 <= v20) {
      unint64_t v23 = ((v19 + 7 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
    }
    else {
      unint64_t v23 = v21 + 11;
    }
    unsigned int v24 = *(unsigned __int8 *)(v14 + v23);
    unsigned int v25 = v24 - 4;
    if (v24 >= 4)
    {
      if (v23 <= 3) {
        int v26 = v23;
      }
      else {
        int v26 = 4;
      }
      switch(v26)
      {
        case 2:
          int v27 = *(unsigned __int16 *)v14;
          break;
        case 3:
          int v27 = *(unsigned __int16 *)v14 | (*(unsigned __int8 *)(v14 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)v14;
          break;
        default:
          int v27 = *(unsigned __int8 *)v14;
          break;
      }
      int v31 = (v27 | (v25 << (8 * v23))) + 4;
      unsigned int v24 = v27 + 4;
      if (v23 < 4) {
        unsigned int v24 = v31;
      }
    }
    size_t __n = v19;
    uint64_t v32 = ~v12;
    int v84 = *(_DWORD *)(v10 + 84);
    size_t v83 = *(void *)(v10 + 64);
    switch(v24)
    {
      case 2u:
        uint64_t v80 = v12 + 78;
        uint64_t v33 = v14 + v12 + 79;
        goto LABEL_23;
      case 3u:
        goto LABEL_26;
      default:
        uint64_t v80 = v12 + 78;
        uint64_t v33 = v17 + v14;
LABEL_23:
        uint64_t v34 = v33 & v32;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v33 & v32, 1, v9)) {
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v34, v16);
        }
        uint64_t v18 = (v12 + 78) & ~v12;
        size_t v35 = v83;
        uint64_t v17 = v80;
        if (!v84) {
LABEL_26:
        }
          size_t v35 = __n;
        unint64_t v36 = ((v18 + v35 + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
        if (v20 > v36) {
          unint64_t v36 = v20;
        }
        if (v22 > v36) {
          unint64_t v36 = v22;
        }
        unsigned int v37 = *(unsigned __int8 *)(v15 + v36);
        unsigned int v38 = v37 - 4;
        if (v37 >= 4)
        {
          if (v23 <= 3) {
            int v39 = v23;
          }
          else {
            int v39 = 4;
          }
          switch(v39)
          {
            case 2:
              int v40 = *(unsigned __int16 *)v15;
              break;
            case 3:
              int v40 = *(unsigned __int16 *)v15 | (*(unsigned __int8 *)(v15 + 2) << 16);
              break;
            case 4:
              int v40 = *(_DWORD *)v15;
              break;
            default:
              int v40 = *(unsigned __int8 *)v15;
              break;
          }
          int v41 = (v40 | (v38 << (8 * v23))) + 4;
          unsigned int v37 = v40 + 4;
          if (v23 < 4) {
            unsigned int v37 = v41;
          }
        }
        switch(v37)
        {
          case 1u:
            uint64_t v49 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v49;
            long long v50 = *(_OWORD *)(v15 + 16);
            long long v51 = *(_OWORD *)(v15 + 32);
            long long v52 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v51;
            *(_OWORD *)(v14 + 48) = v52;
            *(_OWORD *)(v14 + 16) = v50;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            LOWORD(v49) = *(_WORD *)(v15 + 74);
            *(unsigned char *)(v14 + 76) = *(unsigned char *)(v15 + 76);
            *(_WORD *)(v14 + 74) = v49;
            *(unsigned char *)(v14 + 77) = *(unsigned char *)(v15 + 77);
            uint64_t v53 = (void *)((v17 + v14) & v32);
            uint64_t v54 = (const void *)((v17 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v54, 1, v16))
            {
              size_t v55 = __n;
              memcpy(v53, v54, __n);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v53, v54, v16);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v53, 0, 1, v16);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
              size_t v55 = __n;
            }
            unint64_t v68 = ((unint64_t)v53 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v69 = ((unint64_t)v54 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v70 = *(void *)v69;
            *(unsigned char *)(v68 + 8) = *(unsigned char *)(v69 + 8);
            *(void *)unint64_t v68 = v70;
            *(unsigned char *)(v68 + 9) = *(unsigned char *)(v69 + 9);
            *(unsigned char *)(v14 + v23) = 1;
            goto LABEL_57;
          case 2u:
            uint64_t v56 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v56;
            long long v57 = *(_OWORD *)(v15 + 16);
            long long v58 = *(_OWORD *)(v15 + 32);
            long long v59 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v58;
            *(_OWORD *)(v14 + 48) = v59;
            *(_OWORD *)(v14 + 16) = v57;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            *(_DWORD *)(v14 + 74) = *(_DWORD *)(v15 + 74);
            *(unsigned char *)(v14 + 78) = *(unsigned char *)(v15 + 78);
            uint64_t v60 = (const void *)((v12 + 79 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v60, 1, v16))
            {
              size_t v61 = __n;
              memcpy((void *)((v14 + v12 + 79) & v32), v60, __n);
            }
            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v11 + 16))((v14 + v12 + 79) & v32, v60, v16);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))((v14 + v12 + 79) & v32, 0, 1, v16);
              size_t v61 = __n;
            }
            unint64_t v62 = (((v14 + v12 + 79) & v32) + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v63 = ((unint64_t)v60 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v64 = *(void *)v63;
            *(unsigned char *)(v62 + 8) = *(unsigned char *)(v63 + 8);
            *(void *)unint64_t v62 = v64;
            *(unsigned char *)(v62 + 9) = *(unsigned char *)(v63 + 9);
            *(unsigned char *)(v62 + 10) = *(unsigned char *)(v63 + 10);
            *(unsigned char *)(v14 + v23) = 2;
            a1 = v81;
            int v28 = v84;
            uint64_t v18 = (v12 + 78) & ~v12;
            size_t v29 = v83;
            goto LABEL_52;
          case 3u:
            *(_WORD *)uint64_t v14 = *(_WORD *)v15;
            *(unsigned char *)(v14 + v23) = 3;
            a1 = v81;
            int v28 = v84;
            size_t v29 = v83;
LABEL_52:
            uint64_t v30 = (v12 + 79) & ~v12;
            break;
          default:
            uint64_t v42 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v42;
            long long v43 = *(_OWORD *)(v15 + 16);
            long long v44 = *(_OWORD *)(v15 + 32);
            long long v45 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v44;
            *(_OWORD *)(v14 + 48) = v45;
            *(_OWORD *)(v14 + 16) = v43;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            LOWORD(v42) = *(_WORD *)(v15 + 74);
            *(unsigned char *)(v14 + 76) = *(unsigned char *)(v15 + 76);
            *(_WORD *)(v14 + 74) = v42;
            *(unsigned char *)(v14 + 77) = *(unsigned char *)(v15 + 77);
            unint64_t v46 = (void *)((v17 + v14) & v32);
            uint64_t v47 = (const void *)((v17 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v47, 1, v16))
            {
              size_t v48 = __n;
              memcpy(v46, v47, __n);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v46, v47, v16);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v46, 0, 1, v16);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
              size_t v48 = __n;
            }
            unint64_t v65 = ((unint64_t)v46 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v66 = ((unint64_t)v47 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v67 = *(void *)v66;
            *(unsigned char *)(v65 + 8) = *(unsigned char *)(v66 + 8);
            *(void *)unint64_t v65 = v67;
            *(unsigned char *)(v65 + 9) = *(unsigned char *)(v66 + 9);
            *(unsigned char *)(v14 + v23) = 0;
LABEL_57:
            a1 = v81;
            break;
        }
        break;
    }
  }
  if (v28) {
    size_t v71 = v29;
  }
  else {
    size_t v71 = v29 + 1;
  }
  size_t v72 = v71 + 7;
  unint64_t v73 = ((v72 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v74 = ((v72 + v30) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v74 <= v73) {
    unint64_t v74 = v73;
  }
  unint64_t v75 = v74 + 1;
  uint64_t v76 = (void *)(((v14 | 7) + v75) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v77 = (void *)(((v15 | 7) + v75) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v78 = v77[1];
  *uint64_t v76 = *v77;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v76[1] = v78;
  return a1;
}

uint64_t initializeWithTake for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)(v6 + a1) = *(unsigned char *)(v6 + a2);
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (v12 + v8) & ~(v11 | 7);
  uint64_t v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84)) {
    size_t v16 = *(void *)(v10 + 64);
  }
  else {
    size_t v16 = *(void *)(v10 + 64) + 1;
  }
  size_t v17 = v16 + 7;
  uint64_t v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 10)
    unint64_t v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 10;
  else {
    unint64_t v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11;
  }
  unsigned int v20 = *(unsigned __int8 *)(v14 + v19);
  unsigned int v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v19 <= 3) {
      int v22 = v19;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *(unsigned __int16 *)v14;
        break;
      case 3:
        int v23 = *(unsigned __int16 *)v14 | (*(unsigned __int8 *)(v14 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)v14;
        break;
      default:
        int v23 = *(unsigned __int8 *)v14;
        break;
    }
    int v24 = (v23 | (v21 << (8 * v19))) + 4;
    unsigned int v20 = v23 + 4;
    if (v19 < 4) {
      unsigned int v20 = v24;
    }
  }
  uint64_t v25 = ~v11;
  switch(v20)
  {
    case 1u:
      uint64_t v32 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v32;
      long long v33 = *(_OWORD *)(v14 + 16);
      long long v34 = *(_OWORD *)(v14 + 32);
      long long v35 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v34;
      *(_OWORD *)(v13 + 48) = v35;
      *(_OWORD *)(v13 + 16) = v33;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      LOWORD(v32) = *(_WORD *)(v14 + 74);
      *(unsigned char *)(v13 + 76) = *(unsigned char *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v32;
      *(unsigned char *)(v13 + 77) = *(unsigned char *)(v14 + 77);
      unint64_t v36 = (void *)((v15 + v13) & v25);
      unsigned int v37 = (const void *)((v15 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v37, 1, v9))
      {
        memcpy(v36, v37, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v36, v37, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v36, 0, 1, v9);
      }
      unint64_t v48 = ((unint64_t)v36 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v49 = ((unint64_t)v37 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v50 = *(void *)v49;
      *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
      *(void *)unint64_t v48 = v50;
      *(unsigned char *)(v48 + 9) = *(unsigned char *)(v49 + 9);
      char v44 = 1;
      break;
    case 2u:
      uint64_t v38 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v38;
      long long v39 = *(_OWORD *)(v14 + 16);
      long long v40 = *(_OWORD *)(v14 + 32);
      long long v41 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v40;
      *(_OWORD *)(v13 + 48) = v41;
      *(_OWORD *)(v13 + 16) = v39;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(unsigned char *)(v13 + 78) = *(unsigned char *)(v14 + 78);
      uint64_t v42 = (void *)((v18 + v13) & v25);
      long long v43 = (const void *)((v18 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v43, 1, v9))
      {
        memcpy(v42, v43, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v42, v43, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v42, 0, 1, v9);
      }
      unint64_t v51 = ((unint64_t)v42 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v52 = ((unint64_t)v43 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v53 = *(void *)v52;
      *(unsigned char *)(v51 + 8) = *(unsigned char *)(v52 + 8);
      *(void *)unint64_t v51 = v53;
      *(unsigned char *)(v51 + 9) = *(unsigned char *)(v52 + 9);
      *(unsigned char *)(v51 + 10) = *(unsigned char *)(v52 + 10);
      char v44 = 2;
      break;
    case 3u:
      *(_WORD *)uint64_t v13 = *(_WORD *)v14;
      char v44 = 3;
      break;
    default:
      uint64_t v26 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v26;
      long long v27 = *(_OWORD *)(v14 + 16);
      long long v28 = *(_OWORD *)(v14 + 32);
      long long v29 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v28;
      *(_OWORD *)(v13 + 48) = v29;
      *(_OWORD *)(v13 + 16) = v27;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      LOWORD(v26) = *(_WORD *)(v14 + 74);
      *(unsigned char *)(v13 + 76) = *(unsigned char *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v26;
      *(unsigned char *)(v13 + 77) = *(unsigned char *)(v14 + 77);
      uint64_t v30 = (void *)((v15 + v13) & v25);
      int v31 = (const void *)((v15 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v31, 1, v9))
      {
        memcpy(v30, v31, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v30, v31, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v30, 0, 1, v9);
      }
      char v44 = 0;
      unint64_t v45 = ((unint64_t)v30 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v46 = ((unint64_t)v31 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v47 = *(void *)v46;
      *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
      *(void *)unint64_t v45 = v47;
      *(unsigned char *)(v45 + 9) = *(unsigned char *)(v46 + 9);
      break;
  }
  *(unsigned char *)(v13 + v19) = v44;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *(unsigned char *)(v6 + a1) = *v8;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 | 7) + 1;
  uint64_t v14 = (v13 + v7) & ~(v12 | 7);
  uint64_t v15 = (unint64_t)&v8[v13] & ~(v12 | 7);
  if (v14 == v15)
  {
    int v28 = *(_DWORD *)(v10 + 84);
    size_t v29 = *(void *)(v10 + 64);
    uint64_t v30 = (v12 + 79) & ~v12;
    uint64_t v18 = (v12 + 78) & ~v12;
  }
  else
  {
    uint64_t v16 = v9;
    uint64_t v17 = v12 + 78;
    uint64_t v18 = (v12 + 78) & ~v12;
    if (*(_DWORD *)(v10 + 84)) {
      uint64_t v19 = *(void *)(v10 + 64);
    }
    else {
      uint64_t v19 = *(void *)(v10 + 64) + 1;
    }
    unint64_t v20 = ((v19 + 7 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
    uint64_t v81 = a1;
    unint64_t v21 = (v19 + 7 + ((v12 + 79) & ~v12)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = v21 + 11;
    if (v21 + 11 <= v20) {
      unint64_t v23 = ((v19 + 7 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
    }
    else {
      unint64_t v23 = v21 + 11;
    }
    unsigned int v24 = *(unsigned __int8 *)(v14 + v23);
    unsigned int v25 = v24 - 4;
    if (v24 >= 4)
    {
      if (v23 <= 3) {
        int v26 = v23;
      }
      else {
        int v26 = 4;
      }
      switch(v26)
      {
        case 2:
          int v27 = *(unsigned __int16 *)v14;
          break;
        case 3:
          int v27 = *(unsigned __int16 *)v14 | (*(unsigned __int8 *)(v14 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)v14;
          break;
        default:
          int v27 = *(unsigned __int8 *)v14;
          break;
      }
      int v31 = (v27 | (v25 << (8 * v23))) + 4;
      unsigned int v24 = v27 + 4;
      if (v23 < 4) {
        unsigned int v24 = v31;
      }
    }
    size_t __n = v19;
    uint64_t v32 = ~v12;
    int v84 = *(_DWORD *)(v10 + 84);
    size_t v83 = *(void *)(v10 + 64);
    switch(v24)
    {
      case 2u:
        uint64_t v80 = v12 + 78;
        uint64_t v33 = v14 + v12 + 79;
        goto LABEL_23;
      case 3u:
        goto LABEL_26;
      default:
        uint64_t v80 = v12 + 78;
        uint64_t v33 = v17 + v14;
LABEL_23:
        uint64_t v34 = v33 & v32;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v33 & v32, 1, v9)) {
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v34, v16);
        }
        uint64_t v18 = (v12 + 78) & ~v12;
        size_t v35 = v83;
        uint64_t v17 = v80;
        if (!v84) {
LABEL_26:
        }
          size_t v35 = __n;
        unint64_t v36 = ((v18 + v35 + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
        if (v20 > v36) {
          unint64_t v36 = v20;
        }
        if (v22 > v36) {
          unint64_t v36 = v22;
        }
        unsigned int v37 = *(unsigned __int8 *)(v15 + v36);
        unsigned int v38 = v37 - 4;
        if (v37 >= 4)
        {
          if (v23 <= 3) {
            int v39 = v23;
          }
          else {
            int v39 = 4;
          }
          switch(v39)
          {
            case 2:
              int v40 = *(unsigned __int16 *)v15;
              break;
            case 3:
              int v40 = *(unsigned __int16 *)v15 | (*(unsigned __int8 *)(v15 + 2) << 16);
              break;
            case 4:
              int v40 = *(_DWORD *)v15;
              break;
            default:
              int v40 = *(unsigned __int8 *)v15;
              break;
          }
          int v41 = (v40 | (v38 << (8 * v23))) + 4;
          unsigned int v37 = v40 + 4;
          if (v23 < 4) {
            unsigned int v37 = v41;
          }
        }
        switch(v37)
        {
          case 1u:
            uint64_t v49 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v49;
            long long v50 = *(_OWORD *)(v15 + 16);
            long long v51 = *(_OWORD *)(v15 + 32);
            long long v52 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v51;
            *(_OWORD *)(v14 + 48) = v52;
            *(_OWORD *)(v14 + 16) = v50;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            LOWORD(v49) = *(_WORD *)(v15 + 74);
            *(unsigned char *)(v14 + 76) = *(unsigned char *)(v15 + 76);
            *(_WORD *)(v14 + 74) = v49;
            *(unsigned char *)(v14 + 77) = *(unsigned char *)(v15 + 77);
            uint64_t v53 = (void *)((v17 + v14) & v32);
            uint64_t v54 = (const void *)((v17 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v54, 1, v16))
            {
              size_t v55 = __n;
              memcpy(v53, v54, __n);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v53, v54, v16);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v53, 0, 1, v16);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
              size_t v55 = __n;
            }
            unint64_t v68 = ((unint64_t)v53 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v69 = ((unint64_t)v54 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v70 = *(void *)v69;
            *(unsigned char *)(v68 + 8) = *(unsigned char *)(v69 + 8);
            *(void *)unint64_t v68 = v70;
            *(unsigned char *)(v68 + 9) = *(unsigned char *)(v69 + 9);
            *(unsigned char *)(v14 + v23) = 1;
            goto LABEL_57;
          case 2u:
            uint64_t v56 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v56;
            long long v57 = *(_OWORD *)(v15 + 16);
            long long v58 = *(_OWORD *)(v15 + 32);
            long long v59 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v58;
            *(_OWORD *)(v14 + 48) = v59;
            *(_OWORD *)(v14 + 16) = v57;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            *(_DWORD *)(v14 + 74) = *(_DWORD *)(v15 + 74);
            *(unsigned char *)(v14 + 78) = *(unsigned char *)(v15 + 78);
            uint64_t v60 = (const void *)((v12 + 79 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v60, 1, v16))
            {
              size_t v61 = __n;
              memcpy((void *)((v14 + v12 + 79) & v32), v60, __n);
            }
            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v11 + 32))((v14 + v12 + 79) & v32, v60, v16);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))((v14 + v12 + 79) & v32, 0, 1, v16);
              size_t v61 = __n;
            }
            unint64_t v62 = (((v14 + v12 + 79) & v32) + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v63 = ((unint64_t)v60 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v64 = *(void *)v63;
            *(unsigned char *)(v62 + 8) = *(unsigned char *)(v63 + 8);
            *(void *)unint64_t v62 = v64;
            *(unsigned char *)(v62 + 9) = *(unsigned char *)(v63 + 9);
            *(unsigned char *)(v62 + 10) = *(unsigned char *)(v63 + 10);
            *(unsigned char *)(v14 + v23) = 2;
            a1 = v81;
            int v28 = v84;
            uint64_t v18 = (v12 + 78) & ~v12;
            size_t v29 = v83;
            goto LABEL_52;
          case 3u:
            *(_WORD *)uint64_t v14 = *(_WORD *)v15;
            *(unsigned char *)(v14 + v23) = 3;
            a1 = v81;
            int v28 = v84;
            size_t v29 = v83;
LABEL_52:
            uint64_t v30 = (v12 + 79) & ~v12;
            break;
          default:
            uint64_t v42 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v42;
            long long v43 = *(_OWORD *)(v15 + 16);
            long long v44 = *(_OWORD *)(v15 + 32);
            long long v45 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v44;
            *(_OWORD *)(v14 + 48) = v45;
            *(_OWORD *)(v14 + 16) = v43;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            LOWORD(v42) = *(_WORD *)(v15 + 74);
            *(unsigned char *)(v14 + 76) = *(unsigned char *)(v15 + 76);
            *(_WORD *)(v14 + 74) = v42;
            *(unsigned char *)(v14 + 77) = *(unsigned char *)(v15 + 77);
            unint64_t v46 = (void *)((v17 + v14) & v32);
            uint64_t v47 = (const void *)((v17 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v47, 1, v16))
            {
              size_t v48 = __n;
              memcpy(v46, v47, __n);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v46, v47, v16);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v46, 0, 1, v16);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
              size_t v48 = __n;
            }
            unint64_t v65 = ((unint64_t)v46 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v66 = ((unint64_t)v47 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v67 = *(void *)v66;
            *(unsigned char *)(v65 + 8) = *(unsigned char *)(v66 + 8);
            *(void *)unint64_t v65 = v67;
            *(unsigned char *)(v65 + 9) = *(unsigned char *)(v66 + 9);
            *(unsigned char *)(v14 + v23) = 0;
LABEL_57:
            a1 = v81;
            break;
        }
        break;
    }
  }
  if (v28) {
    size_t v71 = v29;
  }
  else {
    size_t v71 = v29 + 1;
  }
  size_t v72 = v71 + 7;
  unint64_t v73 = ((v72 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v74 = ((v72 + v30) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v74 <= v73) {
    unint64_t v74 = v73;
  }
  unint64_t v75 = v74 + 1;
  uint64_t v76 = (void *)(((v14 | 7) + v75) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v77 = (void *)(((v15 | 7) + v75) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v78 = v77[1];
  *uint64_t v76 = *v77;
  swift_unknownObjectRelease();
  v76[1] = v78;
  return a1;
}

uint64_t getEnumTagSinglePayload for FloatingPointParseStrategy(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = *(_DWORD *)(v8 + 84);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v7;
  }
  BOOL v13 = v10 == 0;
  uint64_t v14 = *(void *)(v6 + 64);
  if (v13) {
    ++v11;
  }
  uint64_t v15 = v11 + 7;
  unint64_t v16 = ((v15 + ((v9 + 78) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v17 = ((v15 + ((v9 + 79) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v17 > v16) {
    unint64_t v16 = v17;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = v9 | 7;
  if (v12 < a2)
  {
    unint64_t v19 = ((v16 + ((v14 + v18 + 1) & ~v18) + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v20 = v19 & 0xFFFFFFF8;
    if ((v19 & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v12 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v19);
        if (!v24) {
          break;
        }
        goto LABEL_26;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v19);
        if (v24) {
          goto LABEL_26;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181B2B59CLL);
      case 4:
        int v24 = *(int *)((char *)a1 + v19);
        if (!v24) {
          break;
        }
LABEL_26:
        int v26 = v24 - 1;
        if (v20)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        return v12 + (v27 | v26) + 1;
      default:
        break;
    }
  }
  if (v7 < 0x7FFFFFFF)
  {
    unint64_t v29 = *(void *)(((((unint64_t)a1 + v14 + v18 + 1) & ~v18 | 7) + v16 + 1) & 0xFFFFFFFFFFFFFFF8);
    if (v29 >= 0xFFFFFFFF) {
      LODWORD(v29) = -1;
    }
    return (v29 + 1);
  }
  else
  {
    int v28 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v6 + 48);
    return v28(a1, v7, v5);
  }
}

void storeEnumTagSinglePayload for FloatingPointParseStrategy(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v35 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 + 78) & ~v11;
  int v13 = *(_DWORD *)(v10 + 84);
  uint64_t v14 = *(void *)(v10 + 64);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v9;
  }
  BOOL v16 = v13 == 0;
  uint64_t v17 = (v11 + 79) & ~v11;
  uint64_t v18 = *(void *)(v8 + 64);
  uint64_t v19 = v11 | 7;
  uint64_t v20 = (v18 + (v11 | 7) + 1) & ~(v11 | 7);
  if (v16) {
    uint64_t v21 = v14 + 1;
  }
  else {
    uint64_t v21 = v14;
  }
  uint64_t v22 = v21 + 7;
  unint64_t v23 = ((v22 + v12) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v24 = ((v22 + v17) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v24 <= v23) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = ((v24 + v20 + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v15 >= a3)
  {
    int v28 = 0;
    int v29 = a2 - v15;
    if (a2 <= v15)
    {
LABEL_22:
      switch(v28)
      {
        case 1:
          *((unsigned char *)a1 + v25) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_35;
        case 2:
          *(_WORD *)((char *)a1 + v25) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_35;
        case 3:
          goto LABEL_48;
        case 4:
          *(_DWORD *)((char *)a1 + v25) = 0;
          goto LABEL_34;
        default:
LABEL_34:
          if (a2)
          {
LABEL_35:
            if (v9 < 0x7FFFFFFF)
            {
              uint64_t v33 = (void *)(((((unint64_t)a1 + v18 + v19 + 1) & ~v19 | 7) + v24 + 1) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v34 = a2 ^ 0x80000000;
                v33[1] = 0;
              }
              else
              {
                uint64_t v34 = (a2 - 1);
              }
              *uint64_t v33 = v34;
            }
            else
            {
              uint64_t v32 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v35 + 56);
              v32(a1, a2, v9, v7);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v24 + v20 + 8) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v26 = a3 - v15 + 1;
    }
    else {
      unsigned int v26 = 2;
    }
    if (v26 >= 0x10000) {
      int v27 = 4;
    }
    else {
      int v27 = 2;
    }
    if (v26 < 0x100) {
      int v27 = 1;
    }
    if (v26 >= 2) {
      int v28 = v27;
    }
    else {
      int v28 = 0;
    }
    int v29 = a2 - v15;
    if (a2 <= v15) {
      goto LABEL_22;
    }
  }
  if (((v24 + v20 + 8) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v30 = v29;
  }
  else {
    int v30 = 1;
  }
  if (((v24 + v20 + 8) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v31 = ~v15 + a2;
    bzero(a1, ((v24 + v20 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v31;
  }
  switch(v28)
  {
    case 1:
      *((unsigned char *)a1 + v25) = v30;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v25) = v30;
      break;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x181B2B880);
    case 4:
      *(_DWORD *)((char *)a1 + v25) = v30;
      break;
    default:
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for FloatingPointParseStrategy.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B2B974);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in FloatingPointParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FloatingPointParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FloatingPointParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t specialized FloatingPointParseStrategy.CodingKeys.init(intValue:)()
{
  return 4;
}

unsigned char *storeEnumTagSinglePayload for NSDecimal._CalculationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B2BAFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NSDecimal._CalculationError()
{
  return &type metadata for NSDecimal._CalculationError;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._power(exponent:roundingMode:)(NSDecimal *__return_ptr retstr, Swift::Int exponent, NSRoundingMode roundingMode)
{
  unsigned int v6 = v5;
  unint64_t v7 = v4;
  unint64_t v8 = v3;
  uint64_t v183 = v3;
  v194[0] = v3;
  unint64_t v9 = HIWORD(v3);
  uint64_t v177 = WORD2(v3);
  v194[1] = v4;
  uint64_t v195 = (unsigned __int16)v4;
  unint64_t v10 = HIWORD(v4);
  uint64_t v11 = WORD1(v4);
  uint64_t v12 = WORD2(v4);
  LODWORD(v194[2]) = v5;
  int v13 = (unsigned __int16)v5;
  unsigned int v14 = HIWORD(v5);
  if (!_So9NSDecimala__length_getter(v194))
  {
    LODWORD(v194[0]) = v183;
    WORD2(v194[0]) = v177;
    HIWORD(v194[0]) = v9;
    LOWORD(v194[1]) = v195;
    WORD1(v194[1]) = v11;
    WORD2(v194[1]) = v12;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v13;
    WORD1(v194[2]) = v14;
    if (_So9NSDecimala__isNegative_getter(v194)) {
      goto LABEL_7;
    }
  }
  unsigned int v171 = v14;
  int v175 = v13;
  uint64_t v174 = v12;
  uint64_t v15 = v195;
  if (!exponent)
  {
    specialized NSDecimal.init(_:)(1uLL);
    return;
  }
  if (specialized static NSDecimal.== infix(_:_:)(v8, v7, v6, 0, 0, 0))
  {
    if (exponent <= 0)
    {
      *(_OWORD *)((char *)v194 + 4) = 0uLL;
      _So9NSDecimala__exponent_setter(0, v194);
      _So9NSDecimala__length_setter(0, v194);
      _So9NSDecimala__isNegative_setter(1, v194);
      _So9NSDecimala__isCompact_setter_0(0, v194);
      _So9NSDecimala__reserved_setter(v194);
    }
    return;
  }
  Swift::Int v17 = exponent;
  uint64_t v18 = v183;
  uint64_t v19 = v177;
  uint64_t v20 = v15;
  uint64_t v21 = v11;
  unint64_t v22 = v9;
  uint64_t v23 = v174;
  unsigned int v24 = v171;
  if (exponent < 0)
  {
    Swift::Int v17 = -exponent;
    if (__OFSUB__(0, exponent))
    {
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
      goto LABEL_202;
    }
  }
  Swift::Int v25 = v17;
  unint64_t v26 = specialized NSDecimal.init(_:)(1uLL);
  uint64_t v27 = v25;
  uint64_t v28 = v26;
  uint64_t v168 = WORD1(v29);
  uint64_t v169 = (unsigned __int16)v29;
  unint64_t v170 = HIWORD(v26);
  uint64_t v167 = WORD2(v29);
  unint64_t v164 = HIWORD(v29);
  uint64_t v165 = WORD2(v26);
  LODWORD(v166) = HIWORD(v30);
  HIDWORD(v166) = (unsigned __int16)v30;
  if (v27 < 2)
  {
LABEL_124:
    LODWORD(v194[0]) = v28;
    WORD2(v194[0]) = v165;
    HIWORD(v194[0]) = v170;
    LOWORD(v194[1]) = v169;
    WORD1(v194[1]) = v168;
    WORD2(v194[1]) = v167;
    HIWORD(v194[1]) = v164;
    LOWORD(v194[2]) = WORD2(v166);
    WORD1(v194[2]) = v166;
    if (!_So9NSDecimala__length_getter(v194))
    {
      LODWORD(v194[0]) = v28;
      WORD2(v194[0]) = v165;
      HIWORD(v194[0]) = v170;
      LOWORD(v194[1]) = v169;
      WORD1(v194[1]) = v168;
      WORD2(v194[1]) = v167;
      HIWORD(v194[1]) = v164;
      LOWORD(v194[2]) = WORD2(v166);
      WORD1(v194[2]) = v166;
      if (_So9NSDecimala__isNegative_getter(v194)) {
        goto LABEL_7;
      }
    }
    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v23;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194))
    {
      LODWORD(v194[0]) = v18;
      WORD2(v194[0]) = v19;
      HIWORD(v194[0]) = v22;
      LOWORD(v194[1]) = v20;
      WORD1(v194[1]) = v21;
      WORD2(v194[1]) = v23;
      HIWORD(v194[1]) = v10;
      LOWORD(v194[2]) = v175;
      WORD1(v194[2]) = v24;
      if (_So9NSDecimala__isNegative_getter(v194)) {
        goto LABEL_7;
      }
    }
    LODWORD(v194[0]) = v28;
    WORD2(v194[0]) = v165;
    HIWORD(v194[0]) = v170;
    LOWORD(v194[1]) = v169;
    WORD1(v194[1]) = v168;
    WORD2(v194[1]) = v167;
    HIWORD(v194[1]) = v164;
    LOWORD(v194[2]) = WORD2(v166);
    WORD1(v194[2]) = v166;
    if (!_So9NSDecimala__length_getter(v194)) {
      goto LABEL_139;
    }
    LODWORD(v161) = v28;
    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v23;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194))
    {
LABEL_139:
      unsigned int v115 = 0;
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      unsigned int v118 = 0;
      unsigned int v119 = 0;
      uint64_t v120 = 0;
      uint64_t v121 = 0;
      int v122 = 0;
      int v123 = 0;
      if ((exponent & 0x8000000000000000) == 0) {
        return;
      }
      goto LABEL_155;
    }
    NSDecimal.asVariableLengthInteger()(v28 | (v165 << 32) | (v170 << 48), v169 | (v168 << 16) | (v167 << 32) | (v164 << 48), HIDWORD(v166) | (v166 << 16));
    uint64_t v104 = v18;
    uint64_t v106 = v105;
    LOWORD(v178) = v19;
    LODWORD(v184) = v104;
    LOWORD(v158) = v22;
    unint64_t v107 = v104 | (v19 << 32) | (v22 << 48);
    uint64_t v195 = v20;
    LOWORD(v159) = v21;
    uint64_t v108 = v20 | (v21 << 16);
    LOWORD(v21) = v23;
    LOWORD(v172) = v24;
    NSDecimal.asVariableLengthInteger()(v107, v108 | (v23 << 32) | (v10 << 48), v175 | (v24 << 16));
    uint64_t v110 = v109;
    uint64_t v111 = *(void *)(v106 + 16);
    if (!v111 || (uint64_t v112 = *(void *)(v109 + 16)) == 0)
    {
      __int16 v124 = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v174 = MEMORY[0x1E4FBC860];
      int v125 = v28;
      __int16 v126 = v21;
      LOWORD(v28) = v22;
      goto LABEL_145;
    }
    uint64_t v113 = v111 + v112;
    if (__OFADD__(v111, v112)) {
      goto LABEL_216;
    }
    if (v113 > 15)
    {
      uint64_t v113 = 16;
      LOWORD(v28) = v22;
    }
    else
    {
      LOWORD(v28) = v22;
      if (v113 < 0) {
        goto LABEL_223;
      }
      if (!v113)
      {
        uint64_t v114 = MEMORY[0x1E4FBC860];
LABEL_158:
        uint64_t v141 = 0;
        uint64_t v142 = v110 + 32;
        uint64_t v143 = v114 + 32;
        while (2)
        {
          if (v141 == v112) {
            goto LABEL_212;
          }
          unsigned int v144 = 0;
          uint64_t v145 = 0;
          uint64_t v146 = v141 + 1;
          do
          {
            if (v111 == v145) {
              goto LABEL_195;
            }
            uint64_t v147 = v145 + v141;
            if (__OFADD__(v145, v141)) {
              goto LABEL_196;
            }
            if (v147 >= v113)
            {
              if (v144) {
                goto LABEL_185;
              }
              unsigned int v144 = *(unsigned __int16 *)(v142 + 2 * v141);
              if (*(_WORD *)(v142 + 2 * v141))
              {
                unsigned int v144 = *(unsigned __int16 *)(v106 + 2 * v145 + 32);
                if (*(_WORD *)(v106 + 2 * v145 + 32)) {
                  goto LABEL_185;
                }
              }
            }
            else
            {
              if (v147 < 0)
              {
                __break(1u);
LABEL_199:
                __break(1u);
                goto LABEL_200;
              }
              if ((unint64_t)v147 >= *(void *)(v114 + 16)) {
                goto LABEL_199;
              }
              uint64_t v148 = 2 * v147;
              unsigned int v149 = v144
                   + *(unsigned __int16 *)(v143 + v148)
                   + *(unsigned __int16 *)(v106 + 2 * v145 + 32) * *(unsigned __int16 *)(v142 + 2 * v141);
              unsigned int v144 = HIWORD(v149);
              *(_WORD *)(v143 + v148) = v149;
            }
            ++v145;
          }
          while (v111 != v145);
          if (v144)
          {
            BOOL v49 = __OFADD__(v111, v141);
            uint64_t v150 = v111 + v141;
            if (v49) {
              goto LABEL_217;
            }
            if (v150 >= v113) {
              goto LABEL_185;
            }
            if (v150 < 0) {
              goto LABEL_218;
            }
            if ((unint64_t)v150 >= *(void *)(v114 + 16)) {
              goto LABEL_219;
            }
            *(_WORD *)(v143 + 2 * v150) = v144;
          }
          uint64_t v141 = v146;
          if (v146 != v112) {
            continue;
          }
          break;
        }
        uint64_t v151 = *(void *)(v114 + 16);
        uint64_t v174 = v114;
        if (v151)
        {
          int v125 = v161;
          __int16 v124 = v10;
          if (!*(_WORD *)(v143 + 2 * v151 - 2))
          {
            uint64_t v152 = v151 + 14;
            do
            {
              *(void *)(v114 + 16) = v152 - 15;
              if (v152 == 15) {
                break;
              }
            }
            while (!*(unsigned __int16 *)(v114 + 2 * v152--));
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __int16 v126 = v21;
          goto LABEL_145;
        }
        goto LABEL_197;
      }
    }
    uint64_t v114 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v114 + 16) = v113;
    bzero((void *)(v114 + 32), 2 * v113);
    goto LABEL_158;
  }
  while (1)
  {
    uint64_t v174 = v23;
    unint64_t v160 = v27;
    if (v27)
    {
      LODWORD(v194[0]) = v28;
      WORD2(v194[0]) = v165;
      HIWORD(v194[0]) = v170;
      LOWORD(v194[1]) = v169;
      WORD1(v194[1]) = v168;
      WORD2(v194[1]) = v167;
      HIWORD(v194[1]) = v164;
      LOWORD(v194[2]) = WORD2(v166);
      WORD1(v194[2]) = v166;
      if (!_So9NSDecimala__length_getter(v194))
      {
        LODWORD(v194[0]) = v28;
        WORD2(v194[0]) = v165;
        HIWORD(v194[0]) = v170;
        LOWORD(v194[1]) = v169;
        WORD1(v194[1]) = v168;
        WORD2(v194[1]) = v167;
        HIWORD(v194[1]) = v164;
        LOWORD(v194[2]) = WORD2(v166);
        WORD1(v194[2]) = v166;
        if (_So9NSDecimala__isNegative_getter(v194)) {
          goto LABEL_7;
        }
      }
      LODWORD(v194[0]) = v18;
      WORD2(v194[0]) = v19;
      HIWORD(v194[0]) = v22;
      LOWORD(v194[1]) = v20;
      WORD1(v194[1]) = v21;
      WORD2(v194[1]) = v23;
      HIWORD(v194[1]) = v10;
      LOWORD(v194[2]) = v175;
      WORD1(v194[2]) = v24;
      if (!_So9NSDecimala__length_getter(v194))
      {
        LODWORD(v194[0]) = v18;
        WORD2(v194[0]) = v19;
        HIWORD(v194[0]) = v22;
        LOWORD(v194[1]) = v20;
        WORD1(v194[1]) = v21;
        WORD2(v194[1]) = v23;
        HIWORD(v194[1]) = v10;
        LOWORD(v194[2]) = v175;
        WORD1(v194[2]) = v24;
        if (_So9NSDecimala__isNegative_getter(v194)) {
          goto LABEL_7;
        }
      }
      LODWORD(v194[0]) = v28;
      WORD2(v194[0]) = v165;
      HIWORD(v194[0]) = v170;
      LOWORD(v194[1]) = v169;
      WORD1(v194[1]) = v168;
      WORD2(v194[1]) = v167;
      HIWORD(v194[1]) = v164;
      LOWORD(v194[2]) = WORD2(v166);
      WORD1(v194[2]) = v166;
      if (!_So9NSDecimala__length_getter(v194)) {
        goto LABEL_53;
      }
      LODWORD(v161) = v28;
      LODWORD(v194[0]) = v18;
      WORD2(v194[0]) = v19;
      HIWORD(v194[0]) = v22;
      LOWORD(v194[1]) = v20;
      WORD1(v194[1]) = v21;
      WORD2(v194[1]) = v23;
      HIWORD(v194[1]) = v10;
      LOWORD(v194[2]) = v175;
      WORD1(v194[2]) = v24;
      if (_So9NSDecimala__length_getter(v194))
      {
        NSDecimal.asVariableLengthInteger()(v28 | (v165 << 32) | (v170 << 48), v169 | (v168 << 16) | (v167 << 32) | (v164 << 48), HIDWORD(v166) | (v166 << 16));
        uint64_t v31 = v20;
        uint64_t v33 = v32;
        unint64_t v158 = v22;
        uint64_t v195 = v31;
        unsigned int v172 = v24;
        NSDecimal.asVariableLengthInteger()(v18 | (v19 << 32) | (v22 << 48), v31 | (v21 << 16) | (v23 << 32) | (v10 << 48), v175 | (v24 << 16));
        uint64_t v35 = v34;
        uint64_t v36 = *(void *)(v33 + 16);
        uint64_t v184 = v18;
        uint64_t v159 = v21;
        unint64_t v155 = v10;
        if (v36 && (uint64_t v37 = *(void *)(v34 + 16)) != 0)
        {
          uint64_t v178 = v19;
          if (__OFADD__(v36, v37)) {
            goto LABEL_208;
          }
          if (v36 + v37 >= 16) {
            uint64_t v38 = 16;
          }
          else {
            uint64_t v38 = v36 + v37;
          }
          LOWORD(v10) = v158;
          if (v38 < 0) {
            goto LABEL_223;
          }
          uint64_t v39 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v39 + 16) = v38;
          uint64_t v21 = v39 + 32;
          bzero((void *)(v39 + 32), 2 * v38);
          uint64_t v40 = 0;
          uint64_t v41 = v35 + 32;
          __int16 v42 = v174;
          do
          {
            unsigned int v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = v40++;
            do
            {
              uint64_t v48 = v44 + v45;
              if (__OFADD__(v44, v45)) {
                goto LABEL_190;
              }
              if (v48 >= v38)
              {
                if (v43) {
                  goto LABEL_185;
                }
                unsigned int v43 = *(unsigned __int16 *)(v41 + 2 * v45);
                if (*(_WORD *)(v41 + 2 * v45))
                {
                  unsigned int v43 = *(unsigned __int16 *)(v33 + 2 * v44 + 32);
                  if (*(_WORD *)(v33 + 2 * v44 + 32)) {
                    goto LABEL_185;
                  }
                }
              }
              else
              {
                if (v48 < 0) {
                  goto LABEL_193;
                }
                if ((unint64_t)v48 >= *(void *)(v39 + 16)) {
                  goto LABEL_194;
                }
                uint64_t v46 = 2 * v48;
                unsigned int v47 = v43
                    + *(unsigned __int16 *)(v21 + v46)
                    + *(unsigned __int16 *)(v33 + 2 * v44 + 32) * *(unsigned __int16 *)(v41 + 2 * v45);
                unsigned int v43 = HIWORD(v47);
                *(_WORD *)(v21 + v46) = v47;
              }
              ++v44;
            }
            while (v36 != v44);
            if (v43)
            {
              BOOL v49 = __OFADD__(v36, v45);
              uint64_t v50 = v36 + v45;
              if (v49) {
                goto LABEL_213;
              }
              if (v50 >= v38)
              {
LABEL_185:
                lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                swift_allocError();
                unsigned char *v154 = 0;
                swift_willThrow();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_186;
              }
              if (v50 < 0) {
                goto LABEL_214;
              }
              if ((unint64_t)v50 >= *(void *)(v39 + 16)) {
                goto LABEL_215;
              }
              *(_WORD *)(v21 + 2 * v50) = v43;
            }
          }
          while (v40 != v37);
          uint64_t v51 = *(void *)(v39 + 16);
          uint64_t v156 = v39;
          if (v51)
          {
            uint64_t v19 = v178;
            if (!*(_WORD *)(v21 + 2 * v51 - 2))
            {
              uint64_t v52 = v51 + 14;
              do
              {
                *(void *)(v39 + 16) = v52 - 15;
                if (v52 == 15) {
                  break;
                }
              }
              while (!*(unsigned __int16 *)(v39 + 2 * v52--));
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v19 = v178;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v156 = MEMORY[0x1E4FBC860];
          __int16 v42 = v174;
          LOWORD(v10) = v158;
        }
        memset(v194, 0, 20);
        int v185 = v28;
        __int16 v186 = v165;
        __int16 v187 = v170;
        __int16 v188 = v169;
        __int16 v189 = v168;
        __int16 v190 = v167;
        __int16 v191 = v164;
        __int16 v192 = WORD2(v166);
        __int16 v193 = v166;
        int isNegative_getter = _So9NSDecimala__isNegative_getter(&v185);
        int v185 = v184;
        __int16 v186 = v19;
        __int16 v187 = v10;
        __int16 v188 = v195;
        __int16 v55 = v10;
        __int16 v189 = v159;
        __int16 v190 = v42;
        unint64_t v10 = v155;
        __int16 v191 = v155;
        __int16 v192 = v175;
        __int16 v193 = v172;
        BOOL v56 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v185);
        _So9NSDecimala__isNegative_setter(v56, v194);
        int v185 = v28;
        __int16 v186 = v165;
        __int16 v187 = v170;
        __int16 v188 = v169;
        __int16 v189 = v168;
        __int16 v190 = v167;
        __int16 v191 = v164;
        __int16 v192 = WORD2(v166);
        __int16 v193 = v166;
        int v57 = _So9NSDecimala__exponent_getter((char *)&v185);
        int v185 = v184;
        __int16 v186 = v19;
        __int16 v187 = v55;
        __int16 v188 = v195;
        uint64_t v21 = v159;
        __int16 v189 = v159;
        __int16 v190 = v174;
        __int16 v191 = v155;
        __int16 v192 = v175;
        __int16 v193 = v172;
        uint64_t v58 = _So9NSDecimala__exponent_getter((char *)&v185) + v57;
        v59._rawValue = (void *)v156;
        if (*(void *)(v156 + 16) < 9uLL)
        {
          unint64_t v22 = v158;
        }
        else
        {
          uint64_t v180 = v19;
          specialized static NSDecimal._fitMantissa(_:roundingMode:)(v156, roundingMode);
          if (v173) {
            goto LABEL_188;
          }
          unint64_t v62 = v60;
          uint64_t v63 = v61;
          swift_bridgeObjectRelease();
          if (v63 < (uint64_t)0xFFFFFFFF80000000) {
            goto LABEL_209;
          }
          unint64_t v22 = v158;
          if (v63 > 0x7FFFFFFF)
          {
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
LABEL_222:
            __break(1u);
LABEL_223:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_224:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
          BOOL v49 = __OFADD__(v58, v63);
          uint64_t v58 = (v58 + v63);
          if (v49) {
            goto LABEL_211;
          }
          v59._rawValue = v62;
          uint64_t v19 = v180;
        }
        NSDecimal.copyVariableLengthInteger(_:)(v59);
        uint64_t v173 = v64;
        if (v64)
        {
LABEL_188:
          swift_bridgeObjectRelease();
          return;
        }
        unint64_t v65 = *((void *)v59._rawValue + 2);
        swift_bridgeObjectRelease();
        if (HIDWORD(v65)) {
          goto LABEL_224;
        }
        _So9NSDecimala__length_setter(v65, v194);
        _So9NSDecimala__isCompact_setter_0(0, v194);
        uint64_t v18 = v184;
        if ((int)v58 >= 128) {
          goto LABEL_7;
        }
        _So9NSDecimala__exponent_setter(v58, v194);
        NSDecimal.compact()();
        uint64_t v54 = LODWORD(v194[0]);
        uint64_t v165 = WORD2(v194[0]);
        unint64_t v170 = HIWORD(v194[0]);
        uint64_t v169 = LOWORD(v194[1]);
        uint64_t v168 = WORD1(v194[1]);
        uint64_t v167 = WORD2(v194[1]);
        unint64_t v164 = HIWORD(v194[1]);
        LODWORD(v166) = WORD1(v194[2]);
        HIDWORD(v166) = LOWORD(v194[2]);
        uint64_t v20 = v195;
        unsigned int v24 = v172;
      }
      else
      {
LABEL_53:
        uint64_t v54 = 0;
        unint64_t v164 = 0;
        uint64_t v165 = 0;
        uint64_t v169 = 0;
        unint64_t v170 = 0;
        uint64_t v167 = 0;
        uint64_t v168 = 0;
        uint64_t v166 = 0;
      }
      --v160;
      uint64_t v161 = v54;
    }
    else
    {
      uint64_t v161 = v28;
    }
    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v174;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194))
    {
      LODWORD(v194[0]) = v18;
      WORD2(v194[0]) = v19;
      HIWORD(v194[0]) = v22;
      LOWORD(v194[1]) = v20;
      WORD1(v194[1]) = v21;
      WORD2(v194[1]) = v174;
      HIWORD(v194[1]) = v10;
      LOWORD(v194[2]) = v175;
      WORD1(v194[2]) = v24;
      if (_So9NSDecimala__isNegative_getter(v194)) {
        goto LABEL_7;
      }
    }
    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v174;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194))
    {
      LODWORD(v194[0]) = v18;
      WORD2(v194[0]) = v19;
      HIWORD(v194[0]) = v22;
      LOWORD(v194[1]) = v20;
      WORD1(v194[1]) = v21;
      WORD2(v194[1]) = v174;
      HIWORD(v194[1]) = v10;
      LOWORD(v194[2]) = v175;
      WORD1(v194[2]) = v24;
      if (_So9NSDecimala__isNegative_getter(v194)) {
        goto LABEL_7;
      }
    }
    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v174;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194)) {
      goto LABEL_107;
    }
    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v174;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194))
    {
LABEL_107:
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      unint64_t v22 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v23 = 0;
      unint64_t v10 = 0;
      int v175 = 0;
      unsigned int v24 = 0;
      goto LABEL_120;
    }
    LOWORD(v178) = v19;
    LODWORD(v184) = v18;
    unsigned int v66 = v24;
    unint64_t v67 = v10;
    LOWORD(v10) = v22;
    unint64_t v68 = v18 | (v19 << 32) | (v22 << 48);
    uint64_t v195 = v20;
    __int16 v69 = v67;
    unint64_t v70 = v20 | (v21 << 16) | (v174 << 32) | (v67 << 48);
    LOWORD(v172) = v66;
    unsigned int v71 = v175 | (v66 << 16);
    NSDecimal.asVariableLengthInteger()(v68, v70, v71);
    uint64_t v73 = v72;
    NSDecimal.asVariableLengthInteger()(v68, v70, v71);
    uint64_t v75 = v74;
    uint64_t v76 = *(void *)(v73 + 16);
    LOWORD(v159) = v21;
    if (!v76 || (uint64_t v28 = *(void *)(v74 + 16)) == 0)
    {
      __int16 v93 = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v157 = MEMORY[0x1E4FBC860];
LABEL_109:
      __int16 v89 = v178;
      __int16 v90 = v174;
      goto LABEL_110;
    }
    if (__OFADD__(v76, v28)) {
      goto LABEL_201;
    }
    if (v76 + v28 >= 16) {
      uint64_t v77 = 16;
    }
    else {
      uint64_t v77 = v76 + v28;
    }
    if (v77 < 0) {
      goto LABEL_223;
    }
    uint64_t v78 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v78 + 16) = v77;
    uint64_t v21 = v78 + 32;
    bzero((void *)(v78 + 32), 2 * v77);
    uint64_t v79 = 0;
    uint64_t v80 = v75 + 32;
    do
    {
      unsigned int v81 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = v79++;
      do
      {
        uint64_t v86 = v82 + v83;
        if (__OFADD__(v82, v83))
        {
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __int16 v124 = v10;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __int16 v126 = v21;
          int v125 = v161;
LABEL_145:
          memset(v194, 0, 20);
          int v185 = v125;
          __int16 v186 = v165;
          __int16 v187 = v170;
          __int16 v188 = v169;
          __int16 v189 = v168;
          __int16 v190 = v167;
          __int16 v191 = v164;
          __int16 v192 = WORD2(v166);
          __int16 v193 = v166;
          int v162 = _So9NSDecimala__isNegative_getter(&v185);
          int v185 = v184;
          __int16 v186 = v178;
          __int16 v187 = v28;
          __int16 v127 = v195;
          __int16 v188 = v195;
          __int16 v189 = v159;
          __int16 v190 = v126;
          __int16 v191 = v124;
          __int16 v192 = v175;
          __int16 v193 = v172;
          BOOL v128 = v162 != _So9NSDecimala__isNegative_getter(&v185);
          _So9NSDecimala__isNegative_setter(v128, v194);
          int v185 = v125;
          __int16 v186 = v165;
          __int16 v187 = v170;
          __int16 v188 = v169;
          __int16 v189 = v168;
          __int16 v190 = v167;
          __int16 v191 = v164;
          __int16 v192 = WORD2(v166);
          __int16 v193 = v166;
          int v129 = _So9NSDecimala__exponent_getter((char *)&v185);
          int v185 = v184;
          __int16 v186 = v178;
          __int16 v187 = v158;
          __int16 v188 = v127;
          __int16 v189 = v159;
          __int16 v190 = v126;
          __int16 v191 = v124;
          __int16 v192 = v175;
          __int16 v193 = v172;
          uint64_t v130 = _So9NSDecimala__exponent_getter((char *)&v185) + v129;
          v131._rawValue = (void *)v174;
          if (*(void *)(v174 + 16) >= 9uLL)
          {
            specialized static NSDecimal._fitMantissa(_:roundingMode:)(v174, roundingMode);
            if (v173) {
              goto LABEL_186;
            }
            uint64_t v134 = v132;
            uint64_t v135 = v133;
            swift_bridgeObjectRelease();
            if (v135 < (uint64_t)0xFFFFFFFF80000000) {
              goto LABEL_220;
            }
            if (v135 > 0x7FFFFFFF) {
              goto LABEL_221;
            }
            BOOL v49 = __OFADD__(v130, v135);
            uint64_t v130 = (v130 + v135);
            if (v49) {
              goto LABEL_222;
            }
            v131._rawValue = v134;
          }
          NSDecimal.copyVariableLengthInteger(_:)(v131);
          if (!v136)
          {
            unint64_t v137 = *((void *)v131._rawValue + 2);
            swift_bridgeObjectRelease();
            if (HIDWORD(v137)) {
              goto LABEL_224;
            }
            _So9NSDecimala__length_setter(v137, v194);
            _So9NSDecimala__isCompact_setter_0(0, v194);
            if ((int)v130 >= 128)
            {
LABEL_7:
              lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
              swift_allocError();
              unsigned char *v16 = 0;
              swift_willThrow();
              return;
            }
            _So9NSDecimala__exponent_setter(v130, v194);
            NSDecimal.compact()();
            unsigned int v115 = v194[0];
            uint64_t v116 = WORD2(v194[0]);
            uint64_t v117 = HIWORD(v194[0]);
            unsigned int v118 = LOWORD(v194[1]);
            unsigned int v119 = WORD1(v194[1]);
            uint64_t v120 = WORD2(v194[1]);
            uint64_t v121 = HIWORD(v194[1]);
            int v122 = LOWORD(v194[2]);
            int v123 = WORD1(v194[2]);
            if ((exponent & 0x8000000000000000) == 0) {
              return;
            }
LABEL_155:
            unint64_t v138 = specialized NSDecimal.init(_:)(1uLL);
            specialized NSDecimal._divide(by:roundingMode:)(v115 | (unint64_t)(v116 << 32) | (v117 << 48), v118 | ((unint64_t)v119 << 16) | (v120 << 32) | (v121 << 48), v122 | (v123 << 16), v138, v139, v140);
            return;
          }
LABEL_186:
          swift_bridgeObjectRelease();
          return;
        }
        if (v86 >= v77)
        {
          if (v81) {
            goto LABEL_185;
          }
          unsigned int v81 = *(unsigned __int16 *)(v80 + 2 * v83);
          if (*(_WORD *)(v80 + 2 * v83))
          {
            unsigned int v81 = *(unsigned __int16 *)(v73 + 2 * v82 + 32);
            if (*(_WORD *)(v73 + 2 * v82 + 32)) {
              goto LABEL_185;
            }
          }
        }
        else
        {
          if (v86 < 0) {
            goto LABEL_191;
          }
          if ((unint64_t)v86 >= *(void *)(v78 + 16)) {
            goto LABEL_192;
          }
          uint64_t v84 = 2 * v86;
          unsigned int v85 = v81
              + *(unsigned __int16 *)(v21 + v84)
              + *(unsigned __int16 *)(v73 + 2 * v82 + 32) * *(unsigned __int16 *)(v80 + 2 * v83);
          unsigned int v81 = HIWORD(v85);
          *(_WORD *)(v21 + v84) = v85;
        }
        ++v82;
      }
      while (v76 != v82);
      if (!v81) {
        continue;
      }
      BOOL v49 = __OFADD__(v76, v83);
      uint64_t v87 = v76 + v83;
      if (v49) {
        goto LABEL_205;
      }
      if (v87 >= v77) {
        goto LABEL_185;
      }
      if (v87 < 0) {
        goto LABEL_206;
      }
      if ((unint64_t)v87 >= *(void *)(v78 + 16))
      {
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
        goto LABEL_210;
      }
      *(_WORD *)(v21 + 2 * v87) = v81;
    }
    while (v79 != v28);
    uint64_t v88 = *(void *)(v78 + 16);
    uint64_t v157 = v78;
    if (!v88)
    {
      __int16 v93 = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    }
    __int16 v89 = v178;
    __int16 v90 = v174;
    if (!*(_WORD *)(v21 + 2 * v88 - 2))
    {
      uint64_t v91 = v88 + 14;
      do
      {
        *(void *)(v78 + 16) = v91 - 15;
        if (v91 == 15) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v78 + 2 * v91--));
    }
    __int16 v93 = v69;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_110:
    memset(v194, 0, 20);
    int v185 = v184;
    __int16 v186 = v89;
    __int16 v187 = v10;
    __int16 v94 = v195;
    __int16 v188 = v195;
    __int16 v189 = v159;
    __int16 v190 = v90;
    __int16 v191 = v93;
    __int16 v192 = v175;
    __int16 v193 = v172;
    int v181 = _So9NSDecimala__isNegative_getter(&v185);
    int v185 = v184;
    __int16 v186 = v89;
    __int16 v187 = v10;
    __int16 v188 = v94;
    __int16 v189 = v159;
    __int16 v190 = v90;
    __int16 v191 = v93;
    __int16 v192 = v175;
    __int16 v193 = v172;
    BOOL v95 = v181 != _So9NSDecimala__isNegative_getter(&v185);
    _So9NSDecimala__isNegative_setter(v95, v194);
    int v185 = v184;
    __int16 v186 = v89;
    __int16 v187 = v10;
    __int16 v188 = v94;
    __int16 v189 = v159;
    __int16 v190 = v90;
    __int16 v191 = v93;
    __int16 v192 = v175;
    __int16 v193 = v172;
    int v182 = _So9NSDecimala__exponent_getter((char *)&v185);
    int v185 = v184;
    __int16 v186 = v89;
    __int16 v187 = v10;
    __int16 v188 = v94;
    __int16 v189 = v159;
    __int16 v190 = v90;
    __int16 v191 = v93;
    __int16 v192 = v175;
    __int16 v193 = v172;
    uint64_t v96 = _So9NSDecimala__exponent_getter((char *)&v185) + v182;
    v97._rawValue = (void *)v157;
    if (*(void *)(v157 + 16) >= 9uLL) {
      break;
    }
LABEL_116:
    NSDecimal.copyVariableLengthInteger(_:)(v97);
    if (v102) {
      goto LABEL_186;
    }
    unint64_t v103 = *((void *)v97._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v103)) {
      goto LABEL_224;
    }
    _So9NSDecimala__length_setter(v103, v194);
    _So9NSDecimala__isCompact_setter_0(0, v194);
    if ((int)v96 >= 128) {
      goto LABEL_7;
    }
    uint64_t v173 = 0;
    _So9NSDecimala__exponent_setter(v96, v194);
    NSDecimal.compact()();
    uint64_t v18 = LODWORD(v194[0]);
    uint64_t v19 = WORD2(v194[0]);
    unint64_t v22 = HIWORD(v194[0]);
    uint64_t v20 = LOWORD(v194[1]);
    uint64_t v21 = WORD1(v194[1]);
    uint64_t v23 = WORD2(v194[1]);
    unint64_t v10 = HIWORD(v194[1]);
    int v175 = LOWORD(v194[2]);
    unsigned int v24 = WORD1(v194[2]);
LABEL_120:
    uint64_t v28 = v161;
    uint64_t v27 = v160 >> 1;
    if (v160 <= 3) {
      goto LABEL_124;
    }
  }
  specialized static NSDecimal._fitMantissa(_:roundingMode:)(v157, roundingMode);
  int v99 = v98;
  uint64_t v101 = v100;
  swift_bridgeObjectRelease();
  if (!v173)
  {
    if (v101 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v101 <= 0x7FFFFFFF)
      {
        BOOL v49 = __OFADD__(v96, v101);
        uint64_t v96 = (v96 + v101);
        if (!v49)
        {
          v97._rawValue = v99;
          goto LABEL_116;
        }
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
        goto LABEL_207;
      }
LABEL_203:
      __break(1u);
      goto LABEL_204;
    }
LABEL_202:
    __break(1u);
    goto LABEL_203;
  }
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._round(scale:roundingMode:)(NSDecimal *__return_ptr retstr, Swift::Int scale, NSRoundingMode roundingMode)
{
  unsigned __int16 v6 = v5;
  unint64_t v7 = v4;
  unint64_t v8 = v3;
  unint64_t v128 = v3;
  unint64_t v10 = HIWORD(v3);
  unint64_t v129 = v4;
  unint64_t v11 = HIWORD(v4);
  unsigned int v12 = HIWORD(v5);
  unsigned int v130 = v5;
  int v13 = _So9NSDecimala__exponent_getter((char *)&v128);
  Swift::Int v14 = scale + v13;
  if (__OFADD__(scale, v13))
  {
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  unint64_t v15 = (unsigned __int16)v7;
  uint64_t v16 = WORD1(v7);
  uint64_t v17 = WORD2(v7);
  int v18 = v6;
  if (scale == 0x7FFF || (v14 & 0x8000000000000000) == 0) {
    return;
  }
  if (__OFSUB__(0, v14)) {
    goto LABEL_87;
  }
  Swift::Int v101 = scale + v13;
  __int16 v108 = WORD2(v8);
  uint64_t v109 = v8;
  LODWORD(v128) = v8;
  WORD2(v128) = WORD2(v8);
  HIWORD(v128) = v10;
  LOWORD(v129) = v15;
  WORD1(v129) = v16;
  WORD2(v129) = v17;
  HIWORD(v129) = v11;
  LOWORD(v130) = v6;
  HIWORD(v130) = v12;
  unint64_t v19 = v15;
  uint64_t v20 = v16;
  int v21 = v18;
  uint64_t v22 = -v14;
  int v23 = _So9NSDecimala__exponent_getter((char *)&v128);
  if (__OFADD__(v23, v22)) {
    goto LABEL_88;
  }
  uint64_t v24 = v22;
  uint64_t v100 = v23;
  uint64_t v102 = v23 + v22;
  LOWORD(v129) = v19;
  WORD1(v129) = v20;
  WORD2(v129) = v17;
  HIWORD(v129) = v11;
  LOWORD(v130) = v21;
  HIWORD(v130) = v12;
  unint64_t v25 = v19;
  int v26 = v21;
  __int16 v104 = v19;
  __int16 v105 = v10;
  __int16 v106 = v12;
  __int16 v103 = v21;
  if (v22 < 5)
  {
    int v27 = 0;
    unsigned int v28 = 0;
    uint64_t v31 = WORD2(v8);
    uint64_t v32 = v109;
    unint64_t v30 = v10;
    unint64_t v8 = v25;
    uint64_t v29 = v20;
    uint64_t v53 = v17;
    unint64_t v52 = v11;
    int v34 = v26;
    unsigned int v39 = v12;
    while (1)
    {
LABEL_26:
      uint64_t v118 = v24;
      __int16 v120 = v31;
      if (v28) {
        int v27 = 1;
      }
      int v131 = v27;
      int v122 = v32;
      __int16 v124 = v30;
      __int16 v112 = v29;
      __int16 v113 = v8;
      LOWORD(v115) = v53;
      LOWORD(v116) = v52;
      __int16 v114 = v34;
      unsigned int v132 = v39;
      NSDecimal.asVariableLengthInteger()(v32 | (v31 << 32) | (v30 << 48), v8 | (v29 << 16) | (v53 << 32) | (v52 << 48), v34 | (v39 << 16));
      uint64_t v55 = v54;
      uint64_t v56 = *(void *)(v54 + 16);
      if (v56) {
        break;
      }
      LOWORD(v60) = 0;
      uint64_t v57 = MEMORY[0x1E4FBC860];
      uint64_t v62 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (v62) {
        goto LABEL_36;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      LODWORD(v125) = v122;
      WORD2(v125) = v120;
      HIWORD(v125) = v124;
      LOWORD(v126) = v113;
      WORD1(v126) = v112;
      WORD2(v126) = v115;
      HIWORD(v126) = v116;
      LOWORD(v127) = v114;
      HIWORD(v127) = v132;
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v57);
      if (v64) {
        goto LABEL_49;
      }
      unint64_t v65 = *(void *)(v57 + 16);
      swift_bridgeObjectRelease();
      if (HIDWORD(v65)) {
        goto LABEL_92;
      }
      _So9NSDecimala__length_setter(v65, &v125);
      uint64_t v32 = v125;
      uint64_t v31 = WORD2(v125);
      unint64_t v30 = HIWORD(v125);
      unint64_t v8 = (unsigned __int16)v126;
      uint64_t v29 = WORD1(v126);
      uint64_t v53 = WORD2(v126);
      unint64_t v52 = HIWORD(v126);
      int v34 = (unsigned __int16)v127;
      unsigned int v39 = HIWORD(v127);
      unint64_t v128 = v125;
      unint64_t v129 = v126;
      unsigned int v130 = v127;
      uint64_t v24 = v118 - 1;
      if (__OFSUB__(v118, 1)) {
        goto LABEL_89;
      }
      unsigned int v28 = (unsigned __int16)v60;
      int v27 = v131;
      if (v118 == 1)
      {
        unsigned int v132 = HIWORD(v127);
        uint64_t v115 = WORD2(v126);
        LOWORD(v116) = HIWORD(v126);
        __int16 v114 = v127;
        uint64_t v66 = WORD1(v126);
        if (!(_WORD)v131)
        {
          __int16 v68 = v104;
          __int16 v67 = v105;
          __int16 v70 = v108;
          int v69 = v109;
          __int16 v72 = v17;
          __int16 v71 = v20;
          __int16 v73 = v103;
          if (v28) {
            goto LABEL_52;
          }
          goto LABEL_77;
        }
        __int16 v68 = v104;
        __int16 v67 = v105;
        __int16 v70 = v108;
        int v69 = v109;
        __int16 v72 = v17;
        __int16 v71 = v20;
        __int16 v73 = v103;
        if (v28 == 5 || !v28) {
          ++v28;
        }
LABEL_52:
        __int16 v74 = WORD2(v125);
        int v75 = v125;
        LOWORD(v76) = HIWORD(v125);
        LODWORD(v125) = v69;
        WORD2(v125) = v70;
        HIWORD(v125) = v67;
        LOWORD(v126) = v68;
        WORD1(v126) = v71;
        WORD2(v126) = v72;
        HIWORD(v126) = v11;
        LOWORD(v127) = v73;
        HIWORD(v127) = v12;
        if (_So9NSDecimala__isNegative_getter(&v125))
        {
          __int16 v77 = v66;
          __int16 v78 = v114;
          LOWORD(v79) = v132;
          if (roundingMode)
          {
            if (roundingMode != NSRoundDown)
            {
              if (roundingMode != NSRoundBankers) {
                goto LABEL_72;
              }
              BOOL v80 = v28 == 5;
              if (v74) {
                BOOL v80 = 0;
              }
              if (v28 < 5 || v80) {
                goto LABEL_72;
              }
            }
          }
          else if (v28 < 5)
          {
            goto LABEL_72;
          }
          NSDecimal._add(_:)((NSDecimal *)(v8 | (v66 << 16) | (v115 << 32)), 1u);
          if (v86) {
            return;
          }
          unint64_t v128 = v83;
          unint64_t v76 = HIWORD(v83);
          unsigned int v79 = HIWORD(v85);
          __int16 v78 = v85;
          LOWORD(v8) = v84;
          int v75 = v83;
          unint64_t v129 = v84;
          LOWORD(v115) = WORD2(v84);
          unint64_t v116 = HIWORD(v84);
          __int16 v77 = WORD1(v84);
          unsigned int v130 = v85;
          __int16 v74 = WORD2(v83);
LABEL_72:
          LODWORD(v125) = v75;
          WORD2(v125) = v74;
          HIWORD(v125) = v76;
          LOWORD(v126) = v8;
          WORD1(v126) = v77;
          WORD2(v126) = v115;
          HIWORD(v126) = v116;
          LOWORD(v127) = v78;
          HIWORD(v127) = v79;
          uint64_t v87 = _So9NSDecimala__length_getter(&v125);
          uint64_t v88 = v102;
          if (!v87) {
            _So9NSDecimala__isNegative_setter(v87, &v128);
          }
LABEL_78:
          _So9NSDecimala__isCompact_setter_0(0, &v128);
          if (v88 >= 128)
          {
            __int16 v93 = (NSDecimal *)HIWORD(v128);
            uint64_t v94 = v100 - v101 + 1;
            uint64_t v88 = 127;
            while (1)
            {
              NSDecimal._multiply(byShort:)(v93, 0xAu);
              if (v98) {
                return;
              }
              unint64_t v128 = v95;
              __int16 v93 = (NSDecimal *)HIWORD(v95);
              unint64_t v129 = v96;
              unsigned int v130 = v97;
              if (--v94 <= 128) {
                goto LABEL_84;
              }
            }
          }
          if (v88 >= (uint64_t)0xFFFFFFFF80000000)
          {
LABEL_84:
            _So9NSDecimala__exponent_setter(v88, &v128);
            NSDecimal.compact()();
            return;
          }
LABEL_90:
          __break(1u);
LABEL_91:
          LOWORD(v129) = v113;
          WORD1(v129) = v112;
          WORD2(v129) = v115;
          HIWORD(v129) = v116;
          LOWORD(v130) = v114;
          HIWORD(v130) = v132;
LABEL_92:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
        if (roundingMode)
        {
          uint64_t v81 = v115;
          if (roundingMode != NSRoundUp)
          {
            if (roundingMode != NSRoundBankers) {
              goto LABEL_77;
            }
            BOOL v82 = v28 == 5;
            if (v74) {
              BOOL v82 = 0;
            }
            if (v28 < 5 || v82) {
              goto LABEL_77;
            }
          }
        }
        else
        {
          uint64_t v81 = v115;
          if (v28 < 5)
          {
LABEL_77:
            uint64_t v88 = v102;
            goto LABEL_78;
          }
        }
        NSDecimal._add(_:)((NSDecimal *)(v8 | (v66 << 16) | (v81 << 32)), 1u);
        if (v92) {
          return;
        }
        unint64_t v128 = v89;
        unint64_t v129 = v90;
        unsigned int v130 = v91;
        goto LABEL_77;
      }
    }
    uint64_t v57 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v57 + 16) = v56;
    bzero((void *)(v57 + 32), 2 * v56);
    unsigned int v58 = *(unsigned __int16 *)(2 * v56 + v55 + 30);
    unsigned int v59 = v58 / 0xA;
    while (1)
    {
      *(_WORD *)(v57 + 30 + 2 * v56) = v59;
      unsigned int v60 = v58 % 0xA;
      if (v56 == 1) {
        break;
      }
      unsigned int v58 = *(unsigned __int16 *)(v55 + 28 + 2 * v56) | (v60 << 16);
      unsigned int v59 = v58 / 0xA;
      unint64_t v61 = v56 - 2;
      --v56;
      if (v61 >= *(void *)(v57 + 16))
      {
        __break(1u);
        goto LABEL_47;
      }
    }
    LOWORD(v12) = v106;
    uint64_t v62 = *(void *)(v57 + 16);
    if (!v62) {
      goto LABEL_39;
    }
LABEL_36:
    if (!*(_WORD *)(v57 + 2 * v62 + 30))
    {
      do
      {
        *(void *)(v57 + 16) = v62 - 1;
        if (v62 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v57 + 28 + 2 * v62--));
    }
    goto LABEL_39;
  }
  int v27 = 0;
  unsigned int v28 = 0;
  LOWORD(v8) = v129;
  LOWORD(v29) = WORD1(v129);
  LOWORD(v115) = WORD2(v129);
  unint64_t v30 = v10;
  uint64_t v31 = WORD2(v8);
  LOWORD(v116) = HIWORD(v129);
  uint64_t v32 = v109;
  unint64_t v33 = v25;
  LOWORD(v34) = v130;
  uint64_t v35 = v17;
  __int16 v99 = v11;
  unint64_t v36 = v11;
  uint64_t v37 = v20;
  int v38 = v26;
  unsigned int v39 = v12;
  while (1)
  {
    uint64_t v117 = v24;
    __int16 v114 = v34;
    __int16 v112 = v29;
    __int16 v113 = v8;
    if (v28) {
      int v27 = 1;
    }
    int v131 = v27;
    __int16 v119 = v31;
    int v121 = v32;
    __int16 v123 = v30;
    __int16 v110 = v36;
    __int16 v111 = v35;
    unsigned int v132 = v39;
    NSDecimal.asVariableLengthInteger()(v32 | (v31 << 32) | (v30 << 48), v33 | (v37 << 16) | (v35 << 32) | (v36 << 48), v38 | (v39 << 16));
    uint64_t v41 = v40;
    uint64_t v42 = *(void *)(v40 + 16);
    if (v42)
    {
      uint64_t v43 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v43 + 16) = v42;
      bzero((void *)(v43 + 32), 2 * v42);
      unsigned int v44 = *(unsigned __int16 *)(2 * v42 + v41 + 30);
      unsigned int v45 = (839 * (v44 >> 4)) >> 19;
      while (1)
      {
        *(_WORD *)(v43 + 30 + 2 * v42) = v45;
        unsigned int v46 = v44 % 0x2710;
        if (v42 == 1) {
          break;
        }
        unsigned int v44 = *(unsigned __int16 *)(v41 + 28 + 2 * v42) | (v46 << 16);
        unsigned int v45 = v44 / 0x2710;
        unint64_t v47 = v42 - 2;
        --v42;
        if (v47 >= *(void *)(v43 + 16))
        {
LABEL_47:
          LOWORD(v129) = v113;
          WORD1(v129) = v112;
          WORD2(v129) = v115;
          HIWORD(v129) = v116;
          LOWORD(v130) = v114;
          HIWORD(v130) = v132;
          __break(1u);
          goto LABEL_48;
        }
      }
      uint64_t v48 = *(void *)(v43 + 16);
      if (!v48) {
        goto LABEL_21;
      }
    }
    else
    {
      LOWORD(v46) = 0;
      uint64_t v43 = MEMORY[0x1E4FBC860];
      uint64_t v48 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v48) {
        goto LABEL_21;
      }
    }
    if (!*(_WORD *)(v43 + 2 * v48 + 30))
    {
      do
      {
        *(void *)(v43 + 16) = v48 - 1;
        if (v48 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v43 + 28 + 2 * v48--));
    }
LABEL_21:
    swift_bridgeObjectRelease();
    LODWORD(v125) = v121;
    WORD2(v125) = v119;
    HIWORD(v125) = v123;
    LOWORD(v126) = v33;
    WORD1(v126) = v37;
    WORD2(v126) = v111;
    HIWORD(v126) = v110;
    LOWORD(v127) = v38;
    HIWORD(v127) = v132;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v43);
    if (v50) {
      break;
    }
    unint64_t v51 = *(void *)(v43 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v51)) {
      goto LABEL_91;
    }
    _So9NSDecimala__length_setter(v51, &v125);
    uint64_t v32 = v125;
    uint64_t v31 = WORD2(v125);
    unint64_t v30 = HIWORD(v125);
    unint64_t v8 = (unsigned __int16)v126;
    uint64_t v29 = WORD1(v126);
    int v34 = (unsigned __int16)v127;
    unsigned int v28 = (unsigned __int16)v46;
    unint64_t v33 = (unsigned __int16)v126;
    uint64_t v37 = WORD1(v126);
    LOWORD(v115) = WORD2(v126);
    LOWORD(v116) = HIWORD(v126);
    uint64_t v35 = WORD2(v126);
    unsigned int v39 = HIWORD(v127);
    unint64_t v36 = HIWORD(v126);
    int v38 = (unsigned __int16)v127;
    uint64_t v24 = v117 - 4;
    int v27 = v131;
    if (v117 <= 8)
    {
      unint64_t v129 = v126;
      uint64_t v53 = WORD2(v126);
      unint64_t v52 = HIWORD(v126);
      unsigned int v130 = v127;
      unint64_t v128 = v125;
      uint64_t v24 = v117 - 4;
      LOWORD(v11) = v99;
      LOWORD(v12) = v106;
      goto LABEL_26;
    }
  }
LABEL_48:
  LOWORD(v129) = v113;
  WORD1(v129) = v112;
  WORD2(v129) = v115;
  HIWORD(v129) = v116;
  LOWORD(v130) = v114;
  HIWORD(v130) = v132;
LABEL_49:
  swift_bridgeObjectRelease();
}

uint64_t NSDecimal.doubleValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned __int16 v3 = a3;
  unsigned __int16 v4 = a2;
  int v5 = a1;
  v24[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v24[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v25 = a3;
  if (!_So9NSDecimala__length_getter(v24)) {
    goto LABEL_4;
  }
  LODWORD(v24[0]) = v5;
  WORD2(v24[0]) = v6;
  HIWORD(v24[0]) = v7;
  LOWORD(v24[1]) = v4;
  WORD1(v24[1]) = v8;
  WORD2(v24[1]) = v9;
  HIWORD(v24[1]) = v10;
  LOWORD(v25) = v3;
  HIWORD(v25) = v11;
  unsigned int v12 = _So9NSDecimala__length_getter(v24);
  if (v12 <= 8)
  {
    if (!v12) {
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v12 = 8;
  }
  double v14 = 0.0;
  unsigned int v15 = v12 - 1;
  if (v12 != 1)
  {
    while (2)
    {
      unsigned __int16 v16 = v7;
      switch(v15)
      {
        case 1u:
          goto LABEL_9;
        case 2u:
          unsigned __int16 v16 = v4;
          goto LABEL_9;
        case 3u:
          unsigned __int16 v16 = v8;
          goto LABEL_9;
        case 4u:
          unsigned __int16 v16 = v9;
          goto LABEL_9;
        case 5u:
          unsigned __int16 v16 = v10;
          goto LABEL_9;
        case 6u:
          unsigned __int16 v16 = v3;
          goto LABEL_9;
        case 7u:
          unsigned __int16 v16 = v11;
LABEL_9:
          double v14 = v14 * 65536.0 + (double)v16;
          if (--v15) {
            continue;
          }
          double v14 = v14 * 65536.0;
          break;
        default:
          goto LABEL_34;
      }
      break;
    }
  }
  for (double i = v14 + (double)(unsigned __int16)v6; ; double i = 0.0)
  {
    LODWORD(v24[0]) = v5;
    WORD2(v24[0]) = v6;
    HIWORD(v24[0]) = v7;
    LOWORD(v24[1]) = v4;
    WORD1(v24[1]) = v8;
    WORD2(v24[1]) = v9;
    HIWORD(v24[1]) = v10;
    LOWORD(v25) = v3;
    HIWORD(v25) = v11;
    if ((_So9NSDecimala__exponent_getter((char *)v24) & 0x80000000) == 0) {
      break;
    }
    LODWORD(v24[0]) = v5;
    WORD2(v24[0]) = v6;
    HIWORD(v24[0]) = v7;
    LOWORD(v24[1]) = v4;
    WORD1(v24[1]) = v8;
    WORD2(v24[1]) = v9;
    HIWORD(v24[1]) = v10;
    LOWORD(v25) = v3;
    HIWORD(v25) = v11;
    int v19 = _So9NSDecimala__exponent_getter((char *)v24);
    if (v19 > 0)
    {
      __break(1u);
LABEL_34:
      v24[0] = 0;
      v24[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v24, "Invalid index ");
      HIBYTE(v24[1]) = -18;
      v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
      v23._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v23);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181B2E200);
    }
    if (!v19) {
      goto LABEL_4;
    }
    int v20 = v19;
    while (v20 >= v19)
    {
      double i = i / 10.0;
      if (__CFADD__(v20++, 1)) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    ;
  }
  LODWORD(v24[0]) = v5;
  WORD2(v24[0]) = v6;
  HIWORD(v24[0]) = v7;
  LOWORD(v24[1]) = v4;
  WORD1(v24[1]) = v8;
  WORD2(v24[1]) = v9;
  HIWORD(v24[1]) = v10;
  LOWORD(v25) = v3;
  HIWORD(v25) = v11;
  int v18 = _So9NSDecimala__exponent_getter((char *)v24);
  if (v18 < 0) {
    goto LABEL_31;
  }
  for (; v18; --v18)
    double i = i * 10.0;
LABEL_4:
  LODWORD(v24[0]) = v5;
  WORD2(v24[0]) = v6;
  HIWORD(v24[0]) = v7;
  LOWORD(v24[1]) = v4;
  WORD1(v24[1]) = v8;
  WORD2(v24[1]) = v9;
  HIWORD(v24[1]) = v10;
  LOWORD(v25) = v3;
  HIWORD(v25) = v11;
  return _So9NSDecimala__isNegative_getter(v24);
}

uint64_t specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5) {
    return MEMORY[0x1E4FBC860];
  }
  if (!__OFADD__(v3, v5))
  {
    if (v3 + v5 >= a3) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = v3 + v5;
    }
    if (v6 < 0) {
      goto LABEL_51;
    }
    if (v6)
    {
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v6;
      bzero((void *)(v8 + 32), 2 * v6);
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4FBC860];
    }
    uint64_t v9 = 0;
    uint64_t v10 = a2 + 32;
    uint64_t v11 = a1 + 32;
    uint64_t v12 = v8 + 32;
    while (2)
    {
      if (v9 != v5)
      {
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = v9 + 1;
        do
        {
          if (v3 == v14)
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
          unint64_t v18 = v14 + v9;
          if (__OFADD__(v14, v9)) {
            goto LABEL_43;
          }
          if ((uint64_t)v18 >= v6)
          {
            if (v13) {
              goto LABEL_40;
            }
            unsigned int v13 = *(unsigned __int16 *)(v10 + 2 * v9);
            if (*(_WORD *)(v10 + 2 * v9))
            {
              unsigned int v13 = *(unsigned __int16 *)(v11 + 2 * v14);
              if (*(_WORD *)(v11 + 2 * v14)) {
                goto LABEL_40;
              }
            }
          }
          else
          {
            if ((v18 & 0x8000000000000000) != 0) {
              goto LABEL_44;
            }
            if (v18 >= *(void *)(v8 + 16)) {
              goto LABEL_45;
            }
            uint64_t v16 = 2 * v18;
            unsigned int v17 = v13
                + *(unsigned __int16 *)(v12 + v16)
                + *(unsigned __int16 *)(v11 + 2 * v14) * *(unsigned __int16 *)(v10 + 2 * v9);
            unsigned int v13 = HIWORD(v17);
            *(_WORD *)(v12 + v16) = v17;
          }
          ++v14;
        }
        while (v3 != v14);
        if (!v13) {
          goto LABEL_33;
        }
        BOOL v19 = __OFADD__(v3, v9);
        unint64_t v20 = v3 + v9;
        if (v19) {
          goto LABEL_48;
        }
        if ((uint64_t)v20 >= v6)
        {
LABEL_40:
          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
          swift_allocError();
          *uint64_t v24 = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          return v8;
        }
        if ((v20 & 0x8000000000000000) != 0) {
          goto LABEL_49;
        }
        if (v20 < *(void *)(v8 + 16))
        {
          *(_WORD *)(v12 + 2 * v20) = v13;
LABEL_33:
          uint64_t v9 = v15;
          if (v15 != v5) {
            continue;
          }
          uint64_t v21 = *(void *)(v8 + 16);
          if (v21 && !*(_WORD *)(v12 + 2 * v21 - 2))
          {
            uint64_t v22 = v21 + 14;
            do
            {
              *(void *)(v8 + 16) = v22 - 15;
              if (v22 == 15) {
                break;
              }
            }
            while (!*(unsigned __int16 *)(v8 + 2 * v22--));
          }
          return v8;
        }
        goto LABEL_50;
      }
      break;
    }
LABEL_46:
    __break(1u);
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static NSDecimal._integerSubtract(term:subtrahend:maxResultLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0) {
    goto LABEL_51;
  }
  if (a3)
  {
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = a3;
    bzero((void *)(v9 + 32), 2 * a3);
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  unint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a2 + 16);
  if (v11 >= v10) {
    unint64_t v12 = *(void *)(a1 + 16);
  }
  else {
    unint64_t v12 = *(void *)(a2 + 16);
  }
  if (!v12)
  {
    if (!v10) {
      goto LABEL_36;
    }
    unint64_t v12 = 0;
    goto LABEL_22;
  }
  unint64_t v13 = *(void *)(v9 + 16);
  if (v13)
  {
    uint64_t v4 = 0;
    unsigned int v14 = (*(unsigned __int16 *)(a1 + 32) | 0x10000) - *(unsigned __int16 *)(a2 + 32);
    unint64_t v15 = v12 - 1;
    uint64_t v5 = a2 + 34;
    while (1)
    {
      int v3 = HIWORD(v14);
      *(_WORD *)(v9 + 32 + 2 * v4) = v14;
      unint64_t v12 = v4 + 1;
      if (v15 == v4) {
        break;
      }
      int v3 = v3 + *(unsigned __int16 *)(a1 + 34 + 2 * v4) - *(unsigned __int16 *)(v5 + 2 * v4);
      unsigned int v14 = v3 + 0xFFFF;
      ++v4;
      if (v12 >= v13) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    __break(1u);
  }
  if (v12 < v10)
  {
    if (!v3)
    {
      while ((unint64_t)(v4 + 1) < *(void *)(v9 + 16))
      {
        int v16 = *(unsigned __int16 *)(a1 + 34 + 2 * v4);
        LODWORD(v5) = v16 + 0xFFFF;
        *(_WORD *)(v9 + 34 + 2 * v4) = v16 - 1;
        if (v10 - 2 == v4) {
          goto LABEL_39;
        }
        ++v4;
        if (v16)
        {
          unint64_t v12 = v4 + 1;
          goto LABEL_22;
        }
      }
      goto LABEL_50;
    }
LABEL_22:
    if (v12 <= v10) {
      unint64_t v17 = v10;
    }
    else {
      unint64_t v17 = v12;
    }
    while (v17 != v12)
    {
      if (v12 >= *(void *)(v9 + 16)) {
        goto LABEL_49;
      }
      *(_WORD *)(v9 + 32 + 2 * v12) = *(_WORD *)(a1 + 32 + 2 * v12);
      if ((uint64_t)++v12 >= (uint64_t)v10)
      {
        int v3 = 1;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_29:
  if ((uint64_t)v12 < (uint64_t)v11)
  {
    while (v12 >= v11)
    {
      __break(1u);
LABEL_39:
      int v3 = WORD1(v5);
      unint64_t v12 = v10;
      if ((uint64_t)v10 >= (uint64_t)v11) {
        goto LABEL_40;
      }
    }
    while (v12 >= *(void *)(v9 + 16))
    {
LABEL_35:
      __break(1u);
LABEL_36:
      if (!v11) {
        goto LABEL_41;
      }
      unint64_t v12 = 0;
      int v3 = 1;
    }
    unsigned int v18 = v3 + (*(unsigned __int16 *)(a2 + 32 + 2 * v12) ^ 0xFFFF);
    --v11;
    while (1)
    {
      int v3 = HIWORD(v18);
      *(_WORD *)(v9 + 32 + 2 * v12) = v18;
      if (v11 == v12) {
        break;
      }
      unsigned int v18 = v3 + (*(unsigned __int16 *)(a2 + 34 + 2 * v12++) ^ 0xFFFF);
      if (v12 >= *(void *)(v9 + 16)) {
        goto LABEL_35;
      }
    }
  }
LABEL_40:
  if (v3)
  {
LABEL_41:
    uint64_t v19 = *(void *)(v9 + 16);
    if (v19 && !*(_WORD *)(v9 + 2 * v19 + 30))
    {
      do
      {
        *(void *)(v9 + 16) = v19 - 1;
        if (v19 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v9 + 28 + 2 * v19--));
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *uint64_t v21 = 0;
    swift_willThrow();
  }
  return v9;
}

uint64_t specialized NSDecimal._multiplyByPowerOfTen(power:roundingMode:)(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v29 = a1;
  __int16 v4 = a4;
  __int16 v5 = a3;
  int v6 = a2;
  unint64_t v26 = a2;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = HIWORD(a2);
  unint64_t v27 = a3;
  unint64_t v9 = a3 >> 16;
  unint64_t v10 = HIDWORD(a3);
  unint64_t v11 = HIWORD(a3);
  unsigned int v12 = HIWORD(a4);
  unsigned int v28 = a4;
  if (!_So9NSDecimala__length_getter(&v26))
  {
    LODWORD(v26) = v6;
    WORD2(v26) = v7;
    HIWORD(v26) = v8;
    LOWORD(v27) = v5;
    WORD1(v27) = v9;
    WORD2(v27) = v10;
    HIWORD(v27) = v11;
    LOWORD(v28) = v4;
    HIWORD(v28) = v12;
    if (_So9NSDecimala__isNegative_getter(&v26)) {
      goto LABEL_12;
    }
  }
  LODWORD(v26) = v6;
  WORD2(v26) = v7;
  HIWORD(v26) = v8;
  LOWORD(v27) = v5;
  WORD1(v27) = v9;
  WORD2(v27) = v10;
  HIWORD(v27) = v11;
  LOWORD(v28) = v4;
  HIWORD(v28) = v12;
  if (!_So9NSDecimala__length_getter(&v26)) {
    return 0;
  }
  LODWORD(v26) = v6;
  WORD2(v26) = v7;
  HIWORD(v26) = v8;
  LOWORD(v27) = v5;
  WORD1(v27) = v9;
  WORD2(v27) = v10;
  HIWORD(v27) = v11;
  LOWORD(v28) = v4;
  HIWORD(v28) = v12;
  int v17 = v6;
  __int16 v18 = v7;
  __int16 v19 = v8;
  __int16 v20 = v5;
  __int16 v21 = v9;
  __int16 v22 = v10;
  __int16 v23 = v11;
  __int16 v24 = v4;
  __int16 v25 = v12;
  uint64_t result = _So9NSDecimala__exponent_getter((char *)&v17);
  if (v29 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v29 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  BOOL v14 = __OFADD__(result, v29);
  uint64_t result = (result + v29);
  if (v14)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if ((int)result <= -129)
  {
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *unint64_t v15 = 1;
    return swift_willThrow();
  }
  if ((int)result >= 128)
  {
LABEL_12:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    unsigned char *v16 = 0;
    return swift_willThrow();
  }
  _So9NSDecimala__exponent_setter(result, &v26);
  return v26;
}

_DWORD *_So9NSDecimala__reserved_setter(_DWORD *result)
{
  *result &= 0x3FFFu;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FormatStyleCapitalizationContext.Option@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FormatStyleCapitalizationContext.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FormatStyleCapitalizationContext.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FormatStyleCapitalizationContext.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static FormatStyleCapitalizationContext.middleOfSentence.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FormatStyleCapitalizationContext.CodingKeys()
{
  return 0x6E6F6974706FLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FormatStyleCapitalizationContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FormatStyleCapitalizationContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t FormatStyleCapitalizationContext.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FormatStyleCapitalizationContext.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }
  return result;
}

uint64_t FormatStyleCapitalizationContext.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FormatStyleCapitalizationContext.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FormatStyleCapitalizationContext@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return FormatStyleCapitalizationContext.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FormatStyleCapitalizationContext(void *a1)
{
  return FormatStyleCapitalizationContext.encode(to:)(a1);
}

void NumberFormatStyleConfiguration.Collection.hash(into:)()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v8 = *(void *)v0;
    Hasher._combine(_:)(1u);
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v9 = v8;
    }
    else {
      Swift::UInt64 v9 = 0;
    }
    Hasher._combine(_:)(v9);
  }
  outlined init with take of NumberFormatStyleConfiguration.Precision?(v0 + 16, (uint64_t)v22);
  specialized Optional<A>.hash(into:)();
  int v10 = *(unsigned __int8 *)(v0 + 73);
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v11 = v10 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  int v12 = *(unsigned __int16 *)(v0 + 74);
  unsigned int v13 = v12 | (*(unsigned __int8 *)(v0 + 76) << 16);
  if (v12 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13 & 1);
    Hasher._combine(_:)((v13 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v13) & 1);
  }
  int v14 = *(unsigned __int8 *)(v0 + 77);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  int v16 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v0 + v16[9], (uint64_t)v7);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  }
  uint64_t v17 = v0 + v16[10];
  int v18 = *(unsigned __int8 *)(v17 + 8);
  if (v18 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v19 = *(void *)v17;
    Hasher._combine(_:)(1u);
    if (v18)
    {
      Hasher._combine(_:)(1uLL);
      if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v20 = v19;
      }
      else {
        Swift::UInt64 v20 = 0;
      }
      Hasher._combine(_:)(v20);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v19);
    }
  }
  Swift::UInt v21 = *(unsigned __int8 *)(v0 + v16[11]);
  if (v21 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
  }
}

unint64_t NumberFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x656C616373;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F69736963657270;
      break;
    case 2:
      unint64_t result = 0x70756F7267;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0x676E69646E756F72;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 0x6E6F697461746F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t NumberFormatStyleConfiguration.Collection.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Collection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::UInt64 v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = *(void *)(v3 + 64);
    char v10 = *(unsigned char *)(v3 + 72);
    long long v11 = *(_OWORD *)(v3 + 32);
    long long v19 = *(_OWORD *)(v3 + 16);
    long long v20 = v11;
    long long v21 = *(_OWORD *)(v3 + 48);
    uint64_t v22 = v9;
    char v23 = v10;
    char v18 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(unsigned char *)(v3 + 73);
    char v18 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    __int16 v12 = *(_WORD *)(v3 + 74);
    BYTE2(v19) = *(unsigned char *)(v3 + 76);
    LOWORD(v19) = v12;
    char v18 = 3;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(unsigned char *)(v3 + 77);
    char v18 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v13 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    LOBYTE(v19) = 5;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    int v14 = (uint64_t *)(v3 + *(int *)(v13 + 40));
    uint64_t v15 = *v14;
    LOBYTE(v14) = *((unsigned char *)v14 + 8);
    *(void *)&long long v19 = v15;
    BYTE8(v19) = (_BYTE)v14;
    char v18 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(unsigned char *)(v3 + *(int *)(v13 + 44));
    char v18 = 7;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t NumberFormatStyleConfiguration.Collection.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Collection.CodingKeys>);
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  Swift::UInt64 v8 = (int *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)char v10 = 0;
  long long v10[8] = 1;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = 0;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0x1FFFFFFFELL;
  *((void *)v10 + 7) = 0;
  *((void *)v10 + 8) = 0;
  *((void *)v10 + 6) = 0;
  *((_DWORD *)v10 + 18) = 131584;
  *((_WORD *)v10 + 38) = 512;
  uint64_t v11 = (uint64_t)&v10[v8[11]];
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  uint64_t v31 = v11;
  v13(v11, 1, 1, v12);
  int v14 = &v10[v8[12]];
  *(void *)int v14 = 0;
  long long v14[8] = -1;
  uint64_t v15 = v8[13];
  v10[v15] = 3;
  uint64_t v16 = a1[3];
  uint64_t v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys();
  uint64_t v17 = v6;
  uint64_t v18 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v18)
  {
    uint64_t v36 = v12;
    uint64_t v19 = v32;
    uint64_t v20 = (uint64_t)v33;
    LOBYTE(v37) = 0;
    uint64_t v21 = v34;
    *(void *)char v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    long long v10[8] = v22 & 1;
    char v42 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v23 = v40;
    char v24 = v41;
    long long v25 = v38;
    *((_OWORD *)v10 + 1) = v37;
    *((_OWORD *)v10 + 2) = v25;
    *((_OWORD *)v10 + 3) = v39;
    *((void *)v10 + 8) = v23;
    v10[72] = v24;
    char v42 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10[73] = v37;
    char v42 = 3;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    __int16 v26 = v37;
    v10[76] = BYTE2(v37);
    *((_WORD *)v10 + 37) = v26;
    char v42 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10[77] = v37;
    LOBYTE(v37) = 5;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of FloatingPointRoundingRule?(v20, v31);
    char v42 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v28 = BYTE8(v37);
    *(void *)int v14 = v37;
    long long v14[8] = v28;
    char v42 = 7;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v21);
    v10[v15] = v37;
    outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)v10, v30, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return outlined destroy of NumberFormatStyleConfiguration.Collection((uint64_t)v10, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  return NumberFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.Collection.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NumberFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NumberFormatStyleConfiguration.Collection.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Collection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Collection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Collection@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NumberFormatStyleConfiguration.Collection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Collection(void *a1)
{
  return NumberFormatStyleConfiguration.Collection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.Collection(a1, a2, (void (*)(unsigned char *))NumberFormatStyleConfiguration.Collection.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Collection(a1, a2, a3, (void (*)(unsigned char *))NumberFormatStyleConfiguration.Collection.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Grouping.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Grouping.Option()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NumberFormatStyleConfiguration.Grouping.description.getter()
{
  if (*v0) {
    return 0x726576656ELL;
  }
  else {
    return 0x6974616D6F747561;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Grouping.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Grouping.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NumberFormatStyleConfiguration.Grouping.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Grouping.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }
  return result;
}

uint64_t NumberFormatStyleConfiguration.Grouping.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Grouping.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::UInt64 v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void NumberFormatStyleConfiguration.Precision.Option.hash(into:)()
{
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, &v11);
  char v1 = v17;
  if (v17 < 0)
  {
    v17 &= ~0x80u;
    Swift::UInt v5 = v11;
    int v6 = BYTE8(v11);
    Swift::UInt v7 = v12;
    int v8 = v13;
    Swift::UInt v9 = v14;
    int v10 = v15;
    Swift::UInt v2 = v16;
    Hasher._combine(_:)(1uLL);
    if (v6 == 1)
    {
      Hasher._combine(_:)(0);
      if (!v8) {
        goto LABEL_6;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v5);
      if (!v8)
      {
LABEL_6:
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v7);
        if (!v10) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    Hasher._combine(_:)(0);
    if (!v10)
    {
LABEL_7:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9);
      if (v1) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    if (v1) {
      goto LABEL_3;
    }
    goto LABEL_12;
  }
  Swift::UInt v2 = *((void *)&v11 + 1);
  Swift::UInt v3 = v11;
  int v4 = v12;
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v3);
  if (v4 == 1)
  {
LABEL_3:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_12:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Grouping@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return NumberFormatStyleConfiguration.Grouping.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Grouping(void *a1)
{
  return NumberFormatStyleConfiguration.Grouping.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Grouping()
{
  if (*v0) {
    return 0x726576656ELL;
  }
  else {
    return 0x6974616D6F747561;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.Precision.Option()
{
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v2);
  Hasher.init(_seed:)();
  NumberFormatStyleConfiguration.Precision.Option.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.Precision.Option()
{
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v1);
  NumberFormatStyleConfiguration.Precision.Option.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Precision.Option()
{
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v2);
  Hasher.init(_seed:)();
  NumberFormatStyleConfiguration.Precision.Option.hash(into:)();
  return Hasher._finalize()();
}

double static NumberFormatStyleConfiguration.Precision.significantDigits<A>(_:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = RangeExpression.clampedLowerAndUpperBounds(_:)(1, 999, a1);
  if (v6) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v3;
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5 & 1;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(unsigned char *)(a2 + 56) = 0;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.significantDigits(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a1;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 41) = 0u;
  return result;
}

uint64_t static NumberFormatStyleConfiguration.Precision.integerAndFractionLength(integer:fraction:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = a2;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = a2;
  *(unsigned char *)(a3 + 56) = 0x80;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.integerLength<A>(_:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 999, a1);
  *(void *)(a2 + 8) = v3 & 1;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v4 & 1;
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = xmmword_182106C90;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = -127;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.integerLength(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = a1;
  *(void *)&double result = 1;
  *(_OWORD *)(a2 + 40) = xmmword_18210C780;
  *(unsigned char *)(a2 + 56) = -127;
  return result;
}

void NumberFormatStyleConfiguration.Precision.hash(into:)()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  int v4 = *(char *)(v0 + 56);
  if (v4 < 0)
  {
    uint64_t v7 = *(void *)(v0 + 40);
    Swift::UInt v6 = *(void *)(v0 + 48);
    uint64_t v9 = *(void *)(v0 + 24);
    Swift::UInt v8 = *(void *)(v0 + 32);
    Hasher._combine(_:)(1uLL);
    if (v1)
    {
      Hasher._combine(_:)(0);
      char v10 = v4;
      if (v9)
      {
LABEL_6:
        Hasher._combine(_:)(0);
        if (v7) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
      char v10 = v4;
      if (v9) {
        goto LABEL_6;
      }
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    if (v7)
    {
LABEL_7:
      Hasher._combine(_:)(0);
      if (v10) {
        goto LABEL_8;
      }
LABEL_12:
      Hasher._combine(_:)(1u);
      Swift::UInt v5 = v6;
      goto LABEL_13;
    }
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    if (v10) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  if (v3)
  {
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  Swift::UInt v5 = v1;
LABEL_13:
  Hasher._combine(_:)(v5);
}

BOOL static NumberFormatStyleConfiguration.Precision.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a1, v4);
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a2, v5);
  return specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v4, v5);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Precision.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Precision.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NumberFormatStyleConfiguration.Precision.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Precision.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  Swift::UInt v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *v1;
  long long v12 = v1[1];
  long long v13 = v7;
  long long v11 = v1[2];
  uint64_t v8 = *((void *)v1 + 6);
  char v9 = *((unsigned char *)v1 + 56);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v14 = v13;
  long long v15 = v12;
  long long v16 = v11;
  uint64_t v17 = v8;
  char v18 = v9;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int NumberFormatStyleConfiguration.Precision.hashValue.getter()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  Swift::UInt v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  Swift::UInt v7 = *(void *)(v0 + 48);
  int v8 = *(char *)(v0 + 56);
  Hasher.init(_seed:)();
  if (v8 < 0)
  {
    Hasher._combine(_:)(1uLL);
    if (v1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
    }
    if (v4)
    {
      Hasher._combine(_:)(0);
      if (v6)
      {
LABEL_9:
        Hasher._combine(_:)(0);
        if (v8) {
          goto LABEL_10;
        }
LABEL_13:
        Hasher._combine(_:)(1u);
        Swift::UInt v9 = v7;
        goto LABEL_14;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      if (v6) {
        goto LABEL_9;
      }
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if (v8) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  if ((v3 & 1) == 0)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v9 = v1;
LABEL_14:
    Hasher._combine(_:)(v9);
    return Hasher._finalize()();
  }
LABEL_10:
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t NumberFormatStyleConfiguration.Precision.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Precision.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v9 = v15;
    char v10 = v16;
    long long v11 = v14[1];
    long long v12 = v14[2];
    *(_OWORD *)a2 = v14[0];
    *(_OWORD *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 32) = v12;
    *(void *)(a2 + 48) = v9;
    *(unsigned char *)(a2 + 56) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Precision@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NumberFormatStyleConfiguration.Precision.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Precision(void *a1)
{
  return NumberFormatStyleConfiguration.Precision.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.Precision()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  int v4 = *(char *)(v0 + 56);
  if (v4 < 0)
  {
    uint64_t v7 = *(void *)(v0 + 40);
    Swift::UInt v6 = *(void *)(v0 + 48);
    uint64_t v9 = *(void *)(v0 + 24);
    Swift::UInt v8 = *(void *)(v0 + 32);
    Hasher._combine(_:)(1uLL);
    if (v1)
    {
      Hasher._combine(_:)(0);
      char v10 = v4;
      if (v9)
      {
LABEL_6:
        Hasher._combine(_:)(0);
        if (v7) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
      char v10 = v4;
      if (v9) {
        goto LABEL_6;
      }
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    if (v7)
    {
LABEL_7:
      Hasher._combine(_:)(0);
      if (v10) {
        goto LABEL_8;
      }
LABEL_12:
      Hasher._combine(_:)(1u);
      Swift::UInt v5 = v6;
      goto LABEL_13;
    }
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    if (v10) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  if (v3)
  {
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  Swift::UInt v5 = v1;
LABEL_13:
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Precision()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  Swift::UInt v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  Swift::UInt v7 = *(void *)(v0 + 48);
  int v8 = *(char *)(v0 + 56);
  Hasher.init(_seed:)();
  if (v8 < 0)
  {
    Hasher._combine(_:)(1uLL);
    if (v1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
    }
    if (v4)
    {
      Hasher._combine(_:)(0);
      if (v6)
      {
LABEL_9:
        Hasher._combine(_:)(0);
        if (v8) {
          goto LABEL_10;
        }
LABEL_13:
        Hasher._combine(_:)(1u);
        Swift::UInt v9 = v7;
        goto LABEL_14;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      if (v6) {
        goto LABEL_9;
      }
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if (v8) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  if ((v3 & 1) == 0)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v9 = v1;
LABEL_14:
    Hasher._combine(_:)(v9);
    return Hasher._finalize()();
  }
LABEL_10:
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NumberFormatStyleConfiguration.Precision.Option(long long *a1, long long *a2)
{
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a1, v4);
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a2, v5);
  return specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v4, v5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.always.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.description.getter()
{
  if (*v0) {
    return 0x737961776C61;
  }
  else {
    return 0x6974616D6F747561;
  }
}

void NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy(void *a1)
{
  return NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy()
{
  if (*v0) {
    return 0x737961776C61;
  }
  else {
    return 0x6974616D6F747561;
  }
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 257;
  *(unsigned char *)(a1 + 2) = 1;
}

uint64_t static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = result ^ 1;
  return result;
}

uint64_t NumberFormatStyleConfiguration.SignDisplayStrategy.description.getter()
{
  if (*v0)
  {
    if (v0[1]) {
      return 0x726576656ELL;
    }
    else {
      return 0x6974616D6F747561;
    }
  }
  else if (v0[2])
  {
    return 0xD00000000000001CLL;
  }
  else
  {
    return 0xD00000000000001BLL;
  }
}

void NumberFormatStyleConfiguration.SignDisplayStrategy.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  uint64_t v1 = 0x657669746167656ELL;
  if (*v0 != 1) {
    uint64_t v1 = 1869768058;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6576697469736F70;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NumberFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  int v9 = v1[1];
  int v13 = v1[2];
  int v14 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v20 = v8;
  char v19 = 0;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v10 = v13;
    char v18 = v14;
    char v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v16 = v10;
    char v15 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NumberFormatStyleConfiguration.SignDisplayStrategy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t NumberFormatStyleConfiguration.SignDisplayStrategy.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v18 = 0;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v19;
    char v16 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v13 = v17;
    char v14 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v11 = v15;
    *a2 = v9;
    a2[1] = v13;
    a2[2] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return NumberFormatStyleConfiguration.SignDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy(void *a1)
{
  return NumberFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Notation.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Notation.Option()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NumberFormatStyleConfiguration.Notation.description.getter()
{
  uint64_t v1 = 0x6669746E65696373;
  if (*v0 != 1) {
    uint64_t v1 = 0x20746361706D6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6974616D6F747561;
  }
}

void NumberFormatStyleConfiguration.Notation.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static NumberFormatStyleConfiguration.Notation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Notation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Notation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NumberFormatStyleConfiguration.Notation.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Notation.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t NumberFormatStyleConfiguration.Notation.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Notation.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Notation@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return NumberFormatStyleConfiguration.Notation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Notation(void *a1)
{
  return NumberFormatStyleConfiguration.Notation.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Notation()
{
  uint64_t v1 = 0x6669746E65696373;
  if (*v0 != 1) {
    uint64_t v1 = 0x20746361706D6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6974616D6F747561;
  }
}

Swift::Int NumberFormatStyleConfiguration.RoundingIncrement.hashValue.getter(Swift::UInt a1, char a2)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = a1;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  return NumberFormatStyleConfiguration.RoundingIncrement.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  Swift::UInt v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v2 = v1;
    }
    else {
      Swift::UInt64 v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v1;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  if (*(unsigned char *)(v0 + 8) != 1) {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }

  return Double.description.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NumberFormatStyleConfiguration.RoundingIncrement(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 8);
  BOOL v3 = *(double *)a1 == *(double *)a2;
  if ((v2 & 1) == 0) {
    BOOL v3 = 0;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    return v3;
  }
  else {
    return (*(void *)a1 == *(void *)a2) & ~v2;
  }
}

void CurrencyFormatStyleConfiguration.Collection.hash(into:)()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  Swift::UInt64 v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v8 = *(void *)v0;
    Hasher._combine(_:)(1u);
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v9 = v8;
    }
    else {
      Swift::UInt64 v9 = 0;
    }
    Hasher._combine(_:)(v9);
  }
  outlined init with take of NumberFormatStyleConfiguration.Precision?(v0 + 16, (uint64_t)v22);
  specialized Optional<A>.hash(into:)();
  int v10 = *(unsigned __int8 *)(v0 + 73);
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v11 = v10 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  unint64_t v12 = *(unsigned int *)(v0 + 74);
  if (*(_DWORD *)(v0 + 74) == 2)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12 & 1);
    Hasher._combine(_:)((v12 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v12) & 1);
    unsigned int v13 = BYTE3(v12) & 1;
  }
  Hasher._combine(_:)(v13);
  int v14 = *(unsigned __int8 *)(v0 + 78);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  char v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v0 + v16[9], (uint64_t)v7);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  }
  uint64_t v17 = v0 + v16[10];
  int v18 = *(unsigned __int8 *)(v17 + 8);
  if (v18 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v19 = *(void *)v17;
    Hasher._combine(_:)(1u);
    if (v18)
    {
      Hasher._combine(_:)(1uLL);
      if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v20 = v19;
      }
      else {
        Swift::UInt64 v20 = 0;
      }
      Hasher._combine(_:)(v20);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v19);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + v16[11]));
  Swift::UInt v21 = *(unsigned __int8 *)(v0 + v16[12]);
  if (v21 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
  }
}

unint64_t CurrencyFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x656C616373;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F69736963657270;
      break;
    case 2:
      unint64_t result = 0x70756F7267;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0x676E69646E756F72;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 0x61746E6573657270;
      break;
    case 8:
      unint64_t result = 0x6E6F697461746F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CurrencyFormatStyleConfiguration.Collection.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CurrencyFormatStyleConfiguration.Collection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::UInt64 v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = *(void *)(v3 + 64);
    char v10 = *(unsigned char *)(v3 + 72);
    long long v11 = *(_OWORD *)(v3 + 32);
    long long v18 = *(_OWORD *)(v3 + 16);
    long long v19 = v11;
    long long v20 = *(_OWORD *)(v3 + 48);
    uint64_t v21 = v9;
    char v22 = v10;
    char v17 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(unsigned char *)(v3 + 73);
    char v17 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LODWORD(v18) = *(_DWORD *)(v3 + 74);
    char v17 = 3;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(unsigned char *)(v3 + 78);
    char v17 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    unint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    LOBYTE(v18) = 5;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    unsigned int v13 = (uint64_t *)(v3 + v12[10]);
    uint64_t v14 = *v13;
    LOBYTE(v13) = *((unsigned char *)v13 + 8);
    *(void *)&long long v18 = v14;
    BYTE8(v18) = (_BYTE)v13;
    char v17 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(unsigned char *)(v3 + v12[11]);
    char v17 = 7;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = *(unsigned char *)(v3 + v12[12]);
    char v17 = 8;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t CurrencyFormatStyleConfiguration.Collection.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v34 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CurrencyFormatStyleConfiguration.Collection.CodingKeys>);
  uint64_t v33 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v9 = 0;
  _OWORD v9[8] = 1;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = 0;
  *((void *)v9 + 5) = 0x1FFFFFFFELL;
  *((void *)v9 + 7) = 0;
  *((void *)v9 + 8) = 0;
  *((void *)v9 + 6) = 0;
  *((_WORD *)v9 + 36) = 512;
  *(_DWORD *)(v9 + 74) = 2;
  v9[78] = 2;
  uint64_t v11 = (uint64_t)&v9[*(int *)(v10 + 36)];
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  unsigned int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  uint64_t v38 = v11;
  v13(v11, 1, 1, v12);
  uint64_t v14 = &v9[*(int *)(v7 + 40)];
  *(void *)uint64_t v14 = 0;
  long long v14[8] = -1;
  uint64_t v15 = *(int *)(v7 + 48);
  v9[v15] = 3;
  uint64_t v16 = a1[3];
  long long v37 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys();
  uint64_t v36 = v6;
  char v17 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    uint64_t v25 = v38;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    return outlined destroy of Any?(v25, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  }
  else
  {
    uint64_t v30 = v15;
    uint64_t v31 = v7;
    long long v39 = v14;
    uint64_t v19 = v33;
    uint64_t v18 = (uint64_t)v34;
    LOBYTE(v40) = 0;
    uint64_t v20 = v35;
    *(void *)uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    _OWORD v9[8] = v21 & 1;
    char v45 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v22 = v43;
    char v23 = v44;
    long long v24 = v41;
    *((_OWORD *)v9 + 1) = v40;
    *((_OWORD *)v9 + 2) = v24;
    *((_OWORD *)v9 + 3) = v42;
    *((void *)v9 + 8) = v22;
    v9[72] = v23;
    char v45 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v9[73] = v40;
    char v45 = 3;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_DWORD *)(v9 + 74) = v40;
    char v45 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v9[78] = v40;
    LOBYTE(v40) = 5;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of FloatingPointRoundingRule?(v18, v38);
    char v45 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    __int16 v26 = v39;
    char v27 = BYTE8(v40);
    *(void *)long long v39 = v40;
    v26[8] = v27;
    char v45 = 7;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9[*(int *)(v31 + 44)] = v40;
    char v45 = 8;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    char v28 = v36;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v20);
    v9[v30] = v40;
    outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)v9, v32, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    return outlined destroy of NumberFormatStyleConfiguration.Collection((uint64_t)v9, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  return CurrencyFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CurrencyFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.Collection@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CurrencyFormatStyleConfiguration.Collection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.Collection(void *a1)
{
  return CurrencyFormatStyleConfiguration.Collection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.Collection(a1, a2, (void (*)(unsigned char *))CurrencyFormatStyleConfiguration.Collection.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Collection(a1, a2, a3, (void (*)(unsigned char *))CurrencyFormatStyleConfiguration.Collection.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return RawRepresentable<>.encode(to:)();
}

double static CurrencyFormatStyleConfiguration.SignDisplayStrategy.automatic.getter@<D0>(_DWORD *a1@<X8>)
{
  *(void *)&double result = 0x1000100010001;
  *a1 = 65537;
  return result;
}

double static CurrencyFormatStyleConfiguration.SignDisplayStrategy.never.getter@<D0>(_DWORD *a1@<X8>)
{
  *(void *)&double result = 65793;
  *a1 = 65793;
  return result;
}

uint64_t static CurrencyFormatStyleConfiguration.SignDisplayStrategy.always(showZero:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = result ^ 1;
  *(unsigned char *)(a2 + 3) = 0;
  return result;
}

double static CurrencyFormatStyleConfiguration.SignDisplayStrategy.accounting.getter@<D0>(_DWORD *a1@<X8>)
{
  *(void *)&double result = 16842753;
  *a1 = 16842753;
  return result;
}

uint64_t static CurrencyFormatStyleConfiguration.SignDisplayStrategy.accountingAlways(showZero:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = result ^ 1;
  *(unsigned char *)(a2 + 3) = 1;
  return result;
}

void CurrencyFormatStyleConfiguration.SignDisplayStrategy.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  uint64_t result = 0x6576697469736F70;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x657669746167656ELL;
      break;
    case 2:
      uint64_t result = 1869768058;
      break;
    case 3:
      uint64_t result = 0x69746E756F636361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CurrencyFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  int v9 = v1[1];
  int v13 = v1[2];
  int v14 = v9;
  v12[1] = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v21 = v8;
  char v20 = 0;
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v10 = v13;
    char v19 = v14;
    char v18 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v17 = v10;
    char v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v15 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int CurrencyFormatStyleConfiguration.SignDisplayStrategy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t CurrencyFormatStyleConfiguration.SignDisplayStrategy.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v20 = 0;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v9 = v21;
    char v18 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v14 = v9;
    LOBYTE(v9) = v19;
    char v16 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v11 = v9;
    LOBYTE(v9) = v17;
    char v15 = 3;
    char v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v14;
    a2[1] = v11;
    a2[2] = v9;
    a2[3] = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return CurrencyFormatStyleConfiguration.SignDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy(void *a1)
{
  return CurrencyFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CurrencyFormatStyleConfiguration.Presentation.Option@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CurrencyFormatStyleConfiguration.Presentation.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.Presentation.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.Presentation.Option()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CurrencyFormatStyleConfiguration.Presentation.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CurrencyFormatStyleConfiguration.Presentation.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t CurrencyFormatStyleConfiguration.Presentation.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CurrencyFormatStyleConfiguration.Presentation.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.Presentation@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return CurrencyFormatStyleConfiguration.Presentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.Presentation(void *a1)
{
  return CurrencyFormatStyleConfiguration.Presentation.encode(to:)(a1);
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result >= 4uLL) {
    char v2 = 3;
  }
  else {
    char v2 = 0x2010003u >> (8 * *result);
  }
  *a2 = v2;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.Option(void *a1@<X8>)
{
  *a1 = *v1 + 1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void DescriptiveNumberFormatConfiguration.Presentation.hash(into:)()
{
  Hasher._combine(_:)(*v0 + 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FormatStyleCapitalizationContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t DescriptiveNumberFormatConfiguration.Presentation.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DescriptiveNumberFormatConfiguration.Presentation.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int DescriptiveNumberFormatConfiguration.Presentation.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t DescriptiveNumberFormatConfiguration.Presentation.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DescriptiveNumberFormatConfiguration.Presentation.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DescriptiveNumberFormatConfiguration.Presentation@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return DescriptiveNumberFormatConfiguration.Presentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DescriptiveNumberFormatConfiguration.Presentation(void *a1)
{
  return DescriptiveNumberFormatConfiguration.Presentation.encode(to:)(a1);
}

uint64_t DescriptiveNumberFormatConfiguration.Collection.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DescriptiveNumberFormatConfiguration.Collection.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  int v11 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = v8;
  char v14 = 0;
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v13 = v11;
    char v12 = 1;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DescriptiveNumberFormatConfiguration.Collection.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DescriptiveNumberFormatConfiguration.Collection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v15 = 0;
    lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v16;
    char v13 = 1;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v10 = v14;
    *a2 = v9;
    a2[1] = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000015;
  }
  else {
    return 0x61746E6573657270;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized DescriptiveNumberFormatConfiguration.Collection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DescriptiveNumberFormatConfiguration.Collection@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return DescriptiveNumberFormatConfiguration.Collection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DescriptiveNumberFormatConfiguration.Collection(void *a1)
{
  return DescriptiveNumberFormatConfiguration.Collection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DescriptiveNumberFormatConfiguration.Collection()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  if (v2 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DescriptiveNumberFormatConfiguration.Collection()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0 + 1);
  if (v1 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DescriptiveNumberFormatConfiguration.Collection()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  if (v2 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FloatingPointRoundingRule.CodingValue@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FloatingPointRoundingRule.CodingValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointRoundingRule.CodingValue()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointRoundingRule.CodingValue()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t FloatingPointRoundingRule.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v11, v11[3]);
    lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, **((unsigned int **)&unk_1E51F5220 + v12), v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t FloatingPointRoundingRule.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  char v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v2, v4, v6);
  int v9 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 == *MEMORY[0x1E4FBBEA0])
  {
    char v10 = 0;
  }
  else
  {
    if (v9 != *MEMORY[0x1E4FBBE98])
    {
      if (v9 == *MEMORY[0x1E4FBBEA8])
      {
        char v10 = 2;
        goto LABEL_13;
      }
      if (v9 == *MEMORY[0x1E4FBBEB0])
      {
        char v10 = 3;
        goto LABEL_13;
      }
      if (v9 == *MEMORY[0x1E4FBBE88])
      {
        char v10 = 4;
        goto LABEL_13;
      }
      if (v9 == *MEMORY[0x1E4FBBE90])
      {
        char v10 = 5;
        goto LABEL_13;
      }
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
    }
    char v10 = 1;
  }
LABEL_13:
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v12[7] = v10;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
  lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointRoundingRule@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointRoundingRule.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointRoundingRule(void *a1)
{
  return FloatingPointRoundingRule.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  if (*v0) {
    return 0x676E6974616F6C66;
  }
  else {
    return 0x72656765746E69;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NumberFormatStyleConfiguration.RoundingIncrement.encode(to:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (a3)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  else
  {
    char v11 = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t NumberFormatStyleConfiguration.Precision.Option.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.RoundingIncrement@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized NumberFormatStyleConfiguration.RoundingIncrement.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.RoundingIncrement(void *a1)
{
  return NumberFormatStyleConfiguration.RoundingIncrement.encode(to:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  return NumberFormatStyleConfiguration.Precision.Option.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NumberFormatStyleConfiguration.Precision.Option.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NumberFormatStyleConfiguration.Precision.Option.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Precision.Option.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v3, &v20);
  char v9 = v26;
  if (v26 < 0)
  {
    v26 &= ~0x80u;
    int v27 = v22;
    uint64_t v16 = v23;
    uint64_t v17 = v21;
    int v15 = v24;
    uint64_t v12 = v25;
    uint64_t v18 = v20;
    char v19 = BYTE8(v20);
    char v28 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v2) {
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    uint64_t v14 = v12;
    uint64_t v18 = v17;
    char v19 = v27;
    char v28 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v18 = v16;
    char v19 = v15;
    char v28 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v18 = v14;
    char v19 = v9 & 1;
    char v28 = 5;
    goto LABEL_4;
  }
  uint64_t v10 = *((void *)&v20 + 1);
  char v11 = v21;
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v18 = v10;
    char v19 = v11;
    char v28 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?();
LABEL_4:
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

_OWORD *protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Precision.Option@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = (_OWORD *)specialized NumberFormatStyleConfiguration.Precision.Option.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v5, a2);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Precision.Option(void *a1)
{
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4);
  return NumberFormatStyleConfiguration.Precision.Option.encode(to:)(a1);
}

uint64_t NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(int64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    if (a1 >= 1)
    {
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v86 = 0xD000000000000014;
      unint64_t v87 = 0x80000001823AAB90;
      unint64_t v3 = specialized NSDecimal.init(_:)(a1);
      LOWORD(v5) = v4;
      LOWORD(v7) = v6;
      *(void *)unsigned int v85 = v3;
      unint64_t v8 = HIDWORD(v3);
      unint64_t v9 = HIWORD(v3);
      v10._rawValue = (void *)(v4 >> 16);
      *(void *)&v85[8] = v4;
      unint64_t v11 = HIDWORD(v4);
      uint64_t v12 = (char *)HIWORD(v4);
      unsigned int v13 = HIWORD(v6);
      *(_DWORD *)&v85[16] = v6;
      if (_So9NSDecimala__length_getter(v85)
        || (*(void *)unsigned int v85 = v3,
            *(_WORD *)&v85[8] = v5,
            *(_WORD *)&v85[10] = v10._rawValue,
            *(_WORD *)&v85[12] = v11,
            *(_WORD *)&v85[14] = (_WORD)v12,
            *(_WORD *)&v85[16] = v7,
            *(_WORD *)&v85[18] = v13,
            !_So9NSDecimala__isNegative_getter(v85)))
      {
        *(void *)unsigned int v85 = v3;
        *(_WORD *)&v85[8] = v5;
        *(_WORD *)&v85[10] = v10._rawValue;
        *(_WORD *)&v85[12] = v11;
        *(_WORD *)&v85[14] = (_WORD)v12;
        *(_WORD *)&v85[16] = v7;
        *(_WORD *)&v85[18] = v13;
        if (_So9NSDecimala__length_getter(v85))
        {
          *(void *)&long long v84 = 0;
          *((void *)&v84 + 1) = 0xE000000000000000;
          *(void *)unsigned int v85 = v3;
          *(_WORD *)&v85[8] = v5;
          *(_WORD *)&v85[10] = v10._rawValue;
          *(_WORD *)&v85[12] = v11;
          *(_WORD *)&v85[14] = (_WORD)v12;
          *(_WORD *)&v85[16] = v7;
          *(_WORD *)&v85[18] = v13;
          *(void *)unint64_t v83 = v3;
          *(_WORD *)&v83[8] = v5;
          *(_WORD *)&v83[10] = v10._rawValue;
          *(_WORD *)&v83[12] = v11;
          *(_WORD *)&v83[14] = (_WORD)v12;
          *(_WORD *)&v83[16] = v7;
          *(_WORD *)&v83[18] = v13;
          if ((int)_So9NSDecimala__exponent_getter(v83) >= 1)
          {
            do
            {
              v14._uint64_t countAndFlagsBits = 48;
              v14._object = (void *)0xE100000000000000;
              String.append(_:)(v14);
              *(_DWORD *)unint64_t v83 = v3;
              *(_WORD *)&v83[4] = v8;
              *(_WORD *)&v83[6] = v9;
              *(_WORD *)&v83[8] = v5;
              *(_WORD *)&v83[10] = v10._rawValue;
              *(_WORD *)&v83[12] = v11;
              *(_WORD *)&v83[14] = (_WORD)v12;
              *(_WORD *)&v83[16] = v7;
              *(_WORD *)&v83[18] = v13;
              int v15 = _So9NSDecimala__exponent_getter(v83);
              _So9NSDecimala__exponent_setter((v15 - 1), v85);
              LODWORD(v3) = *(_DWORD *)v85;
              LOWORD(v8) = *(_WORD *)&v85[4];
              LOWORD(v9) = *(_WORD *)&v85[6];
              LOWORD(v5) = *(_WORD *)&v85[8];
              LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
              LOWORD(v11) = *(_WORD *)&v85[12];
              LOWORD(v12) = *(_WORD *)&v85[14];
              LOWORD(v7) = *(_WORD *)&v85[16];
              LOWORD(v13) = *(_WORD *)&v85[18];
              *(_OWORD *)unint64_t v83 = *(_OWORD *)v85;
              *(_WORD *)&v83[16] = *(_WORD *)&v85[16];
              *(_WORD *)&v83[18] = *(_WORD *)&v85[18];
            }
            while ((int)_So9NSDecimala__exponent_getter(v83) > 0);
          }
          *(_DWORD *)unint64_t v83 = v3;
          *(_WORD *)&v83[4] = v8;
          *(_WORD *)&v83[6] = v9;
          *(_WORD *)&v83[8] = v5;
          *(_WORD *)&v83[10] = v10._rawValue;
          *(_WORD *)&v83[12] = v11;
          *(_WORD *)&v83[14] = (_WORD)v12;
          *(_WORD *)&v83[16] = v7;
          *(_WORD *)&v83[18] = v13;
          if (!_So9NSDecimala__exponent_getter(v83))
          {
            _So9NSDecimala__exponent_setter(1, v85);
            LODWORD(v3) = *(_DWORD *)v85;
            LOWORD(v8) = *(_WORD *)&v85[4];
            LOWORD(v9) = *(_WORD *)&v85[6];
            LOWORD(v5) = *(_WORD *)&v85[8];
            LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
            LOWORD(v11) = *(_WORD *)&v85[12];
            LOWORD(v12) = *(_WORD *)&v85[14];
            LOWORD(v7) = *(_WORD *)&v85[16];
            LOWORD(v13) = *(_WORD *)&v85[18];
          }
          int v76 = v3;
          *(_DWORD *)unint64_t v83 = v3;
          LOWORD(v16) = v8;
          *(_WORD *)&v83[4] = v8;
          *(_WORD *)&v83[6] = v9;
          *(_WORD *)&v83[8] = v5;
          *(_WORD *)&v83[10] = v10._rawValue;
          *(_WORD *)&v83[12] = v11;
          *(_WORD *)&v83[14] = (_WORD)v12;
          *(_WORD *)&v83[16] = v7;
          *(_WORD *)&v83[18] = v13;
          if (_So9NSDecimala__length_getter(v83))
          {
            __int16 v17 = v8;
            int v18 = v3;
            while (1)
            {
              __int16 v77 = v17;
              *(_DWORD *)unint64_t v83 = v18;
              *(_WORD *)&v83[4] = v17;
              *(_WORD *)&v83[6] = v9;
              *(_WORD *)&v83[8] = v5;
              *(_WORD *)&v83[10] = v10._rawValue;
              *(_WORD *)&v83[12] = v11;
              *(_WORD *)&v83[14] = (_WORD)v12;
              *(_WORD *)&v83[16] = v7;
              *(_WORD *)&v83[18] = v13;
              if (!_So9NSDecimala__exponent_getter(v83))
              {
                v19._uint64_t countAndFlagsBits = 46;
                v19._object = (void *)0xE100000000000000;
                String.append(_:)(v19);
              }
              *(_DWORD *)unint64_t v83 = v18;
              *(_WORD *)&v83[4] = v77;
              *(_WORD *)&v83[6] = v9;
              *(_WORD *)&v83[8] = v5;
              *(_WORD *)&v83[10] = v10._rawValue;
              *(_WORD *)&v83[12] = v11;
              *(_WORD *)&v83[14] = (_WORD)v12;
              *(_WORD *)&v83[16] = v7;
              *(_WORD *)&v83[18] = v13;
              int v20 = _So9NSDecimala__exponent_getter(v83);
              _So9NSDecimala__exponent_setter((v20 + 1), v85);
              int v21 = *(_DWORD *)v85;
              LOWORD(v9) = *(_WORD *)&v85[6];
              LOWORD(v13) = *(_WORD *)&v85[14];
              int v76 = *(unsigned __int16 *)&v85[8];
              __int16 v78 = *(_WORD *)&v85[4];
              __int16 v72 = *(_WORD *)&v85[12];
              __int16 v74 = *(_WORD *)&v85[10];
              LOWORD(v11) = *(_WORD *)&v85[18];
              __int16 v70 = *(_WORD *)&v85[16];
              NSDecimal.asVariableLengthInteger()(*(unsigned int *)v85 | ((unint64_t)*(unsigned __int16 *)&v85[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v85[6] << 48), *(unsigned __int16 *)&v85[8] | ((unint64_t)*(unsigned __int16 *)&v85[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v85[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v85[14] << 48), *(unsigned __int16 *)&v85[16] | (*(unsigned __int16 *)&v85[18] << 16));
              uint64_t v16 = v22;
              uint64_t v7 = *(void *)(v22 + 16);
              if (!v7) {
                break;
              }
              int v68 = v21;
              v10._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
              uint64_t v12 = (char *)v10._rawValue + 30;
              *((void *)v10._rawValue + 2) = v7;
              bzero((char *)v10._rawValue + 32, 2 * v7);
              unsigned int v23 = *(unsigned __int16 *)(2 * v7 + v16 + 30);
              unsigned int v24 = v23 / 0xA;
              while (1)
              {
                *(_WORD *)&v12[2 * v7] = v24;
                unsigned int v5 = v23 % 0xA;
                if (v7 == 1) {
                  break;
                }
                unsigned int v23 = *(unsigned __int16 *)(v16 + 28 + 2 * v7) | (v5 << 16);
                unsigned int v24 = v23 / 0xA;
                unint64_t v25 = v7 - 2;
                --v7;
                if (v25 >= *((void *)v10._rawValue + 2))
                {
                  __break(1u);
                  goto LABEL_60;
                }
              }
              int v21 = v68;
              uint64_t v26 = *((void *)v10._rawValue + 2);
              if (v26) {
                goto LABEL_21;
              }
LABEL_24:
              swift_bridgeObjectRelease();
              *(_DWORD *)unint64_t v83 = v21;
              *(_WORD *)&v83[4] = v78;
              *(_WORD *)&v83[6] = v9;
              *(_WORD *)&v83[8] = v76;
              *(_WORD *)&v83[10] = v74;
              *(_WORD *)&v83[12] = v72;
              *(_WORD *)&v83[14] = v13;
              *(_WORD *)&v83[16] = v70;
              *(_WORD *)&v83[18] = v11;
              NSDecimal.copyVariableLengthInteger(_:)(v10);
              if (v28) {
                goto LABEL_77;
              }
              unint64_t v29 = *((void *)v10._rawValue + 2);
              swift_bridgeObjectRelease();
              if (HIDWORD(v29)) {
                goto LABEL_78;
              }
              _So9NSDecimala__length_setter(v29, v83);
              *(_DWORD *)unsigned int v85 = *(_DWORD *)v83;
              *(_OWORD *)&v85[4] = *(_OWORD *)&v83[4];
              *(void *)unint64_t v83 = v5 | 0x30;
              v30._uint64_t countAndFlagsBits = MEMORY[0x185302020](v83, 1);
              String.append(_:)(v30);
              swift_bridgeObjectRelease();
              int v18 = *(_DWORD *)v85;
              __int16 v79 = *(_WORD *)&v85[4];
              LOWORD(v9) = *(_WORD *)&v85[6];
              LOWORD(v5) = *(_WORD *)&v85[8];
              LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
              LOWORD(v11) = *(_WORD *)&v85[12];
              LOWORD(v12) = *(_WORD *)&v85[14];
              LOWORD(v7) = *(_WORD *)&v85[16];
              LOWORD(v13) = *(_WORD *)&v85[18];
              *(_OWORD *)unint64_t v83 = *(_OWORD *)v85;
              *(_WORD *)&v83[16] = *(_WORD *)&v85[16];
              *(_WORD *)&v83[18] = *(_WORD *)&v85[18];
              int v31 = _So9NSDecimala__length_getter(v83);
              __int16 v17 = v79;
              if (!v31) {
                goto LABEL_62;
              }
            }
            unsigned int v5 = 0;
            v10._rawValue = (void *)MEMORY[0x1E4FBC860];
            uint64_t v26 = *(void *)(MEMORY[0x1E4FBC860] + 16);
            if (!v26) {
              goto LABEL_24;
            }
LABEL_21:
            if (!*((_WORD *)v10._rawValue + v26 + 15))
            {
              do
              {
                *((void *)v10._rawValue + 2) = v26 - 1;
                if (v26 == 1) {
                  break;
                }
              }
              while (!*((unsigned __int16 *)v10._rawValue + v26-- + 14));
            }
            goto LABEL_24;
          }
LABEL_61:
          __int16 v17 = v16;
          int v18 = v76;
LABEL_62:
          *(_DWORD *)unint64_t v83 = v18;
          *(_WORD *)&v83[4] = v17;
          *(_WORD *)&v83[6] = v9;
          *(_WORD *)&v83[8] = v5;
          *(_WORD *)&v83[10] = v10._rawValue;
          *(_WORD *)&v83[12] = v11;
          *(_WORD *)&v83[14] = (_WORD)v12;
          *(_WORD *)&v83[16] = v7;
          *(_WORD *)&v83[18] = v13;
          __int16 v57 = v17;
          int v58 = v18;
          if ((int)_So9NSDecimala__exponent_getter(v83) > 0) {
            goto LABEL_73;
          }
          while (1)
          {
            *(_DWORD *)unint64_t v83 = v58;
            *(_WORD *)&v83[4] = v57;
            *(_WORD *)&v83[6] = v9;
            *(_WORD *)&v83[8] = v5;
            *(_WORD *)&v83[10] = v10._rawValue;
            *(_WORD *)&v83[12] = v11;
            *(_WORD *)&v83[14] = (_WORD)v12;
            *(_WORD *)&v83[16] = v7;
            *(_WORD *)&v83[18] = v13;
            if (!_So9NSDecimala__exponent_getter(v83)) {
              break;
            }
            v59._uint64_t countAndFlagsBits = 48;
            v59._object = (void *)0xE100000000000000;
            String.append(_:)(v59);
            *(_DWORD *)unint64_t v83 = v58;
            *(_WORD *)&v83[4] = v57;
            *(_WORD *)&v83[6] = v9;
            *(_WORD *)&v83[8] = v5;
            *(_WORD *)&v83[10] = v10._rawValue;
            *(_WORD *)&v83[12] = v11;
            *(_WORD *)&v83[14] = (_WORD)v12;
            *(_WORD *)&v83[16] = v7;
            *(_WORD *)&v83[18] = v13;
            int v60 = _So9NSDecimala__exponent_getter(v83);
            _So9NSDecimala__exponent_setter((v60 + 1), v85);
            int v58 = *(_DWORD *)v85;
            __int16 v57 = *(_WORD *)&v85[4];
            LOWORD(v9) = *(_WORD *)&v85[6];
            LOWORD(v5) = *(_WORD *)&v85[8];
            LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
            LOWORD(v11) = *(_WORD *)&v85[12];
            LOWORD(v12) = *(_WORD *)&v85[14];
            LOWORD(v7) = *(_WORD *)&v85[16];
            LOWORD(v13) = *(_WORD *)&v85[18];
          }
          goto LABEL_72;
        }
        goto LABEL_55;
      }
LABEL_59:
      uint64_t v56 = 5136718;
      unint64_t v55 = 0xE300000000000000;
      goto LABEL_76;
    }
    return 0;
  }
  if (*(double *)&a1 <= 0.0) {
    return 0;
  }
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  unint64_t v86 = 0xD000000000000014;
  unint64_t v87 = 0x80000001823AAB90;
  specialized NSDecimal.init(_:)(*(double *)&a1);
  int v33 = v32;
  LOWORD(v5) = v34;
  LOWORD(v7) = v35;
  *(void *)unsigned int v85 = v32;
  unint64_t v36 = HIDWORD(v32);
  unint64_t v9 = HIWORD(v32);
  v10._rawValue = (void *)(v34 >> 16);
  *(void *)&v85[8] = v34;
  unint64_t v11 = HIDWORD(v34);
  uint64_t v12 = (char *)HIWORD(v34);
  unsigned int v13 = HIWORD(v35);
  *(_DWORD *)&v85[16] = v35;
  if (!_So9NSDecimala__length_getter(v85))
  {
    *(_DWORD *)unsigned int v85 = v33;
    *(_WORD *)&v85[4] = v36;
    *(_WORD *)&_OWORD v85[6] = v9;
    *(_WORD *)&v85[8] = v5;
    *(_WORD *)&v85[10] = v10._rawValue;
    *(_WORD *)&v85[12] = v11;
    *(_WORD *)&v85[14] = (_WORD)v12;
    *(_WORD *)&v85[16] = v7;
    *(_WORD *)&v85[18] = v13;
    if (_So9NSDecimala__isNegative_getter(v85)) {
      goto LABEL_59;
    }
  }
  *(_DWORD *)unsigned int v85 = v33;
  *(_WORD *)&v85[4] = v36;
  *(_WORD *)&_OWORD v85[6] = v9;
  *(_WORD *)&v85[8] = v5;
  *(_WORD *)&v85[10] = v10._rawValue;
  *(_WORD *)&v85[12] = v11;
  *(_WORD *)&v85[14] = (_WORD)v12;
  *(_WORD *)&v85[16] = v7;
  *(_WORD *)&v85[18] = v13;
  if (!_So9NSDecimala__length_getter(v85))
  {
LABEL_55:
    unint64_t v55 = 0xE100000000000000;
    uint64_t v56 = 48;
LABEL_76:
    unint64_t v67 = v55;
    String.append(_:)(*(Swift::String *)&v56);
    swift_bridgeObjectRelease();
    return v86;
  }
  *(void *)&long long v84 = 0;
  *((void *)&v84 + 1) = 0xE000000000000000;
  *(_DWORD *)unsigned int v85 = v33;
  *(_WORD *)&v85[4] = v36;
  *(_WORD *)&_OWORD v85[6] = v9;
  *(_WORD *)&v85[8] = v5;
  *(_WORD *)&v85[10] = v10._rawValue;
  *(_WORD *)&v85[12] = v11;
  *(_WORD *)&v85[14] = (_WORD)v12;
  *(_WORD *)&v85[16] = v7;
  *(_WORD *)&v85[18] = v13;
  *(_DWORD *)unint64_t v83 = v33;
  *(_WORD *)&v83[4] = v36;
  *(_WORD *)&v83[6] = v9;
  *(_WORD *)&v83[8] = v5;
  *(_WORD *)&v83[10] = v10._rawValue;
  *(_WORD *)&v83[12] = v11;
  *(_WORD *)&v83[14] = (_WORD)v12;
  *(_WORD *)&v83[16] = v7;
  *(_WORD *)&v83[18] = v13;
  if ((int)_So9NSDecimala__exponent_getter(v83) >= 1)
  {
    do
    {
      v37._uint64_t countAndFlagsBits = 48;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      *(_DWORD *)unint64_t v83 = v33;
      *(_WORD *)&v83[4] = v36;
      *(_WORD *)&v83[6] = v9;
      *(_WORD *)&v83[8] = v5;
      *(_WORD *)&v83[10] = v10._rawValue;
      *(_WORD *)&v83[12] = v11;
      *(_WORD *)&v83[14] = (_WORD)v12;
      *(_WORD *)&v83[16] = v7;
      *(_WORD *)&v83[18] = v13;
      int v38 = _So9NSDecimala__exponent_getter(v83);
      _So9NSDecimala__exponent_setter((v38 - 1), v85);
      int v33 = *(_DWORD *)v85;
      LOWORD(v36) = *(_WORD *)&v85[4];
      LOWORD(v9) = *(_WORD *)&v85[6];
      LOWORD(v5) = *(_WORD *)&v85[8];
      LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
      LOWORD(v11) = *(_WORD *)&v85[12];
      LOWORD(v12) = *(_WORD *)&v85[14];
      LOWORD(v7) = *(_WORD *)&v85[16];
      LOWORD(v13) = *(_WORD *)&v85[18];
      *(_OWORD *)unint64_t v83 = *(_OWORD *)v85;
      *(_WORD *)&v83[16] = *(_WORD *)&v85[16];
      *(_WORD *)&v83[18] = *(_WORD *)&v85[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v83) > 0);
  }
  *(_DWORD *)unint64_t v83 = v33;
  *(_WORD *)&v83[4] = v36;
  *(_WORD *)&v83[6] = v9;
  *(_WORD *)&v83[8] = v5;
  *(_WORD *)&v83[10] = v10._rawValue;
  *(_WORD *)&v83[12] = v11;
  *(_WORD *)&v83[14] = (_WORD)v12;
  *(_WORD *)&v83[16] = v7;
  *(_WORD *)&v83[18] = v13;
  if (!_So9NSDecimala__exponent_getter(v83))
  {
    _So9NSDecimala__exponent_setter(1, v85);
    int v33 = *(_DWORD *)v85;
    LOWORD(v36) = *(_WORD *)&v85[4];
    LOWORD(v9) = *(_WORD *)&v85[6];
    LOWORD(v5) = *(_WORD *)&v85[8];
    LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
    LOWORD(v11) = *(_WORD *)&v85[12];
    LOWORD(v12) = *(_WORD *)&v85[14];
    LOWORD(v7) = *(_WORD *)&v85[16];
    LOWORD(v13) = *(_WORD *)&v85[18];
  }
  *(_DWORD *)unint64_t v83 = v33;
  *(_WORD *)&v83[4] = v36;
  *(_WORD *)&v83[6] = v9;
  *(_WORD *)&v83[8] = v5;
  *(_WORD *)&v83[10] = v10._rawValue;
  *(_WORD *)&v83[12] = v11;
  *(_WORD *)&v83[14] = (_WORD)v12;
  *(_WORD *)&v83[16] = v7;
  *(_WORD *)&v83[18] = v13;
  if (!_So9NSDecimala__length_getter(v83))
  {
    __int16 v39 = v36;
    int v40 = v33;
LABEL_68:
    *(_DWORD *)unint64_t v83 = v40;
    *(_WORD *)&v83[4] = v39;
    *(_WORD *)&v83[6] = v9;
    *(_WORD *)&v83[8] = v5;
    *(_WORD *)&v83[10] = v10._rawValue;
    *(_WORD *)&v83[12] = v11;
    *(_WORD *)&v83[14] = (_WORD)v12;
    *(_WORD *)&v83[16] = v7;
    *(_WORD *)&v83[18] = v13;
    __int16 v57 = v39;
    int v58 = v40;
    if ((int)_So9NSDecimala__exponent_getter(v83) > 0) {
      goto LABEL_73;
    }
    while (1)
    {
      *(_DWORD *)unint64_t v83 = v58;
      *(_WORD *)&v83[4] = v57;
      *(_WORD *)&v83[6] = v9;
      *(_WORD *)&v83[8] = v5;
      *(_WORD *)&v83[10] = v10._rawValue;
      *(_WORD *)&v83[12] = v11;
      *(_WORD *)&v83[14] = (_WORD)v12;
      *(_WORD *)&v83[16] = v7;
      *(_WORD *)&v83[18] = v13;
      if (!_So9NSDecimala__exponent_getter(v83)) {
        break;
      }
      v61._uint64_t countAndFlagsBits = 48;
      v61._object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      *(_DWORD *)unint64_t v83 = v58;
      *(_WORD *)&v83[4] = v57;
      *(_WORD *)&v83[6] = v9;
      *(_WORD *)&v83[8] = v5;
      *(_WORD *)&v83[10] = v10._rawValue;
      *(_WORD *)&v83[12] = v11;
      *(_WORD *)&v83[14] = (_WORD)v12;
      *(_WORD *)&v83[16] = v7;
      *(_WORD *)&v83[18] = v13;
      int v62 = _So9NSDecimala__exponent_getter(v83);
      _So9NSDecimala__exponent_setter((v62 + 1), v85);
      int v58 = *(_DWORD *)v85;
      __int16 v57 = *(_WORD *)&v85[4];
      LOWORD(v9) = *(_WORD *)&v85[6];
      LOWORD(v5) = *(_WORD *)&v85[8];
      LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
      LOWORD(v11) = *(_WORD *)&v85[12];
      LOWORD(v12) = *(_WORD *)&v85[14];
      LOWORD(v7) = *(_WORD *)&v85[16];
      LOWORD(v13) = *(_WORD *)&v85[18];
    }
LABEL_72:
    v63._uint64_t countAndFlagsBits = 46;
    v63._object = (void *)0xE100000000000000;
    String.append(_:)(v63);
    v64._uint64_t countAndFlagsBits = 48;
    v64._object = (void *)0xE100000000000000;
    String.append(_:)(v64);
LABEL_73:
    *(_DWORD *)unint64_t v83 = v58;
    *(_WORD *)&v83[4] = v57;
    *(_WORD *)&v83[6] = v9;
    *(_WORD *)&v83[8] = v5;
    *(_WORD *)&v83[10] = v10._rawValue;
    *(_WORD *)&v83[12] = v11;
    *(_WORD *)&v83[14] = (_WORD)v12;
    *(_WORD *)&v83[16] = v7;
    *(_WORD *)&v83[18] = v13;
    if (_So9NSDecimala__isNegative_getter(v83))
    {
      v65._uint64_t countAndFlagsBits = 45;
      v65._object = (void *)0xE100000000000000;
      String.append(_:)(v65);
    }
    *(_OWORD *)unint64_t v83 = v84;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    uint64_t v56 = String.init<A>(_:)();
    unint64_t v55 = v66;
    goto LABEL_76;
  }
  __int16 v39 = v36;
  int v40 = v33;
  while (1)
  {
    __int16 v80 = v39;
    *(_DWORD *)unint64_t v83 = v40;
    *(_WORD *)&v83[4] = v39;
    *(_WORD *)&v83[6] = v9;
    *(_WORD *)&v83[8] = v5;
    *(_WORD *)&v83[10] = v10._rawValue;
    *(_WORD *)&v83[12] = v11;
    *(_WORD *)&v83[14] = (_WORD)v12;
    *(_WORD *)&v83[16] = v7;
    *(_WORD *)&v83[18] = v13;
    if (!_So9NSDecimala__exponent_getter(v83))
    {
      v41._uint64_t countAndFlagsBits = 46;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
    }
    *(_DWORD *)unint64_t v83 = v40;
    *(_WORD *)&v83[4] = v80;
    *(_WORD *)&v83[6] = v9;
    *(_WORD *)&v83[8] = v5;
    *(_WORD *)&v83[10] = v10._rawValue;
    *(_WORD *)&v83[12] = v11;
    *(_WORD *)&v83[14] = (_WORD)v12;
    *(_WORD *)&v83[16] = v7;
    *(_WORD *)&v83[18] = v13;
    int v42 = _So9NSDecimala__exponent_getter(v83);
    _So9NSDecimala__exponent_setter((v42 + 1), v85);
    int v43 = *(_DWORD *)v85;
    LOWORD(v9) = *(_WORD *)&v85[6];
    LOWORD(v13) = *(_WORD *)&v85[14];
    int v76 = *(unsigned __int16 *)&v85[8];
    __int16 v81 = *(_WORD *)&v85[4];
    __int16 v73 = *(_WORD *)&v85[12];
    __int16 v75 = *(_WORD *)&v85[10];
    LOWORD(v11) = *(_WORD *)&v85[18];
    __int16 v71 = *(_WORD *)&v85[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v85 | ((unint64_t)*(unsigned __int16 *)&v85[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v85[6] << 48), *(unsigned __int16 *)&v85[8] | ((unint64_t)*(unsigned __int16 *)&v85[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v85[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v85[14] << 48), *(unsigned __int16 *)&v85[16] | (*(unsigned __int16 *)&v85[18] << 16));
    uint64_t v16 = v44;
    uint64_t v7 = *(void *)(v44 + 16);
    if (v7)
    {
      int v69 = v43;
      v10._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v12 = (char *)v10._rawValue + 30;
      *((void *)v10._rawValue + 2) = v7;
      bzero((char *)v10._rawValue + 32, 2 * v7);
      unsigned int v45 = *(unsigned __int16 *)(2 * v7 + v16 + 30);
      unsigned int v46 = v45 / 0xA;
      while (1)
      {
        *(_WORD *)&v12[2 * v7] = v46;
        unsigned int v5 = v45 % 0xA;
        if (v7 == 1) {
          break;
        }
        unsigned int v45 = *(unsigned __int16 *)(v16 + 28 + 2 * v7) | (v5 << 16);
        unsigned int v46 = v45 / 0xA;
        unint64_t v47 = v7 - 2;
        --v7;
        if (v47 >= *((void *)v10._rawValue + 2))
        {
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
      }
      int v43 = v69;
      uint64_t v48 = *((void *)v10._rawValue + 2);
      if (!v48) {
        goto LABEL_50;
      }
    }
    else
    {
      unsigned int v5 = 0;
      v10._rawValue = (void *)MEMORY[0x1E4FBC860];
      uint64_t v48 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v48) {
        goto LABEL_50;
      }
    }
    if (!*((_WORD *)v10._rawValue + v48 + 15))
    {
      do
      {
        *((void *)v10._rawValue + 2) = v48 - 1;
        if (v48 == 1) {
          break;
        }
      }
      while (!*((unsigned __int16 *)v10._rawValue + v48-- + 14));
    }
LABEL_50:
    swift_bridgeObjectRelease();
    *(_DWORD *)unint64_t v83 = v43;
    *(_WORD *)&v83[4] = v81;
    *(_WORD *)&v83[6] = v9;
    *(_WORD *)&v83[8] = v76;
    *(_WORD *)&v83[10] = v75;
    *(_WORD *)&v83[12] = v73;
    *(_WORD *)&v83[14] = v13;
    *(_WORD *)&v83[16] = v71;
    *(_WORD *)&v83[18] = v11;
    NSDecimal.copyVariableLengthInteger(_:)(v10);
    if (v50) {
      break;
    }
    unint64_t v51 = *((void *)v10._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v51)) {
      goto LABEL_78;
    }
    _So9NSDecimala__length_setter(v51, v83);
    *(_DWORD *)unsigned int v85 = *(_DWORD *)v83;
    *(_OWORD *)&v85[4] = *(_OWORD *)&v83[4];
    *(void *)unint64_t v83 = v5 | 0x30;
    v52._uint64_t countAndFlagsBits = MEMORY[0x185302020](v83, 1);
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    int v40 = *(_DWORD *)v85;
    __int16 v82 = *(_WORD *)&v85[4];
    LOWORD(v9) = *(_WORD *)&v85[6];
    LOWORD(v5) = *(_WORD *)&v85[8];
    LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
    LOWORD(v11) = *(_WORD *)&v85[12];
    LOWORD(v12) = *(_WORD *)&v85[14];
    LOWORD(v7) = *(_WORD *)&v85[16];
    LOWORD(v13) = *(_WORD *)&v85[18];
    *(_OWORD *)unint64_t v83 = *(_OWORD *)v85;
    *(_WORD *)&v83[16] = *(_WORD *)&v85[16];
    *(_WORD *)&v83[18] = *(_WORD *)&v85[18];
    int v53 = _So9NSDecimala__length_getter(v83);
    __int16 v39 = v82;
    if (!v53) {
      goto LABEL_68;
    }
  }
LABEL_77:
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_78:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::String __swiftcall NumberFormatStyleConfiguration.Precision.skeletonWithRoundingIncrement(stem:)(Swift::String stem)
{
  object = stem._object;
  uint64_t countAndFlagsBits = stem._countAndFlagsBits;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v9 = *(void *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 48);
  int v11 = *(char *)(v1 + 56);
  uint64_t v12 = String.count.getter();
  if (v12 >= 1)
  {
    uint64_t v27 = countAndFlagsBits;
    uint64_t v28 = object;
    if ((v11 & 0x80000000) == 0)
    {
      swift_bridgeObjectRetain();
LABEL_24:
      uint64_t v13 = v27;
      Swift::String v14 = v28;
      goto LABEL_28;
    }
    if (v9)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = v7 & 1;
      if ((v5 & 1) == 0) {
        goto LABEL_23;
      }
LABEL_21:
      if (v22) {
        goto LABEL_24;
      }
      uint64_t v4 = 0;
LABEL_23:
      v24._uint64_t countAndFlagsBits = NumberFormatStyleConfiguration.Precision.integerStem(min:max:)(v4, v6, v22);
      v29._uint64_t countAndFlagsBits = 32;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    v29._uint64_t countAndFlagsBits = 46;
    v29._object = (void *)0xE100000000000000;
    MEMORY[0x1F4188790](v12);
    v26[2] = &v29;
    swift_bridgeObjectRetain();
    specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v26, countAndFlagsBits, (unint64_t)object);
    if (v16)
    {
      v23._uint64_t countAndFlagsBits = MEMORY[0x185302340](48, 0xE100000000000000, v8);
      v29._uint64_t countAndFlagsBits = 46;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      uint64_t v19 = v29._countAndFlagsBits;
      int v20 = v29._object;
      goto LABEL_19;
    }
    swift_bridgeObjectRetain();
    unint64_t v17 = String.index(after:)();
    specialized Collection.suffix(from:)(v17, countAndFlagsBits, (unint64_t)object);
    swift_bridgeObjectRelease();
    if (Substring.distance(from:to:)() >= v8) {
      goto LABEL_20;
    }
    uint64_t v18 = Substring.distance(from:to:)();
    uint64_t v13 = swift_bridgeObjectRelease();
    if (!__OFSUB__(v8, v18))
    {
      uint64_t v19 = MEMORY[0x185302340](48, 0xE100000000000000, v8 - v18);
LABEL_19:
      String.append(_:)(*(Swift::String *)&v19);
LABEL_20:
      swift_bridgeObjectRelease();
      uint64_t v22 = v7 & 1;
      if ((v5 & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_21;
    }
    goto LABEL_27;
  }
  if (v11 < 0)
  {
    uint64_t v13 = NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)(v4, v5 & 1, v6, v7 & 1, v8, v9 & 1, v10, v11 & 1);
  }
  else
  {
    uint64_t v13 = MEMORY[0x185302340](64, 0xE100000000000000, v4);
    v29._uint64_t countAndFlagsBits = v13;
    v29._object = v14;
    if (v6)
    {
      v21._uint64_t countAndFlagsBits = 43;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
    }
    else
    {
      if (__OFSUB__(v5, v4))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v15._uint64_t countAndFlagsBits = MEMORY[0x185302340](35, 0xE100000000000000, v5 - v4);
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
    }
    uint64_t v13 = v29._countAndFlagsBits;
    Swift::String v14 = v29._object;
  }
LABEL_28:
  result._object = v14;
  result._uint64_t countAndFlagsBits = v13;
  return result;
}

uint64_t CurrencyFormatStyleConfiguration.Collection.skeleton.getter()
{
  uint64_t v1 = v0;
  unint64_t v2 = 0xD000000000000010;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  __int16 v123 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)&v111 - v10;
  uint64_t v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  unint64_t v13 = 0xD000000000000011;
  unint64_t v14 = 0x80000001823AAC50;
  Swift::String v15 = (int *)v12;
  switch(*(unsigned char *)(v0 + *(int *)(v12 + 44)))
  {
    case 1:
      unint64_t v14 = 0x80000001823AAC30;
      unint64_t v13 = 0xD000000000000010;
      break;
    case 2:
      unint64_t v13 = 0xD000000000000013;
      char v16 = "unit-width-iso-code";
      goto LABEL_5;
    case 3:
      unint64_t v13 = 0xD000000000000014;
      char v16 = "unit-width-full-name";
LABEL_5:
      unint64_t v14 = (unint64_t)(v16 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  __int16 v124 = v5;
  *(void *)unint64_t v129 = v13;
  *(void *)&v129[8] = v14;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = 32;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  long long v135 = *(_OWORD *)v129;
  if ((*(unsigned char *)(v0 + 8) & 1) == 0)
  {
    uint64_t v121 = v6;
    uint64_t v122 = 0;
    uint64_t v118 = v11;
    __int16 v119 = v15;
    uint64_t v120 = v7;
    double v18 = *(double *)v0;
    *(void *)&long long v128 = 0x2F656C616373;
    *((void *)&v128 + 1) = 0xE600000000000000;
    specialized NSDecimal.init(_:)(v18);
    unint64_t v20 = v19;
    LOWORD(v15) = v21;
    LOWORD(v23) = v22;
    *(void *)unint64_t v129 = v19;
    unint64_t v24 = HIDWORD(v19);
    unint64_t v25 = HIWORD(v19);
    unint64_t v26 = v21 >> 16;
    *(void *)&v129[8] = v21;
    unint64_t v27 = HIDWORD(v21);
    uint64_t v28 = HIWORD(v21);
    unsigned int v29 = HIWORD(v22);
    *(_DWORD *)&v129[16] = v22;
    if (_So9NSDecimala__length_getter(v129)) {
      goto LABEL_8;
    }
    *(_DWORD *)unint64_t v129 = v20;
    *(_WORD *)&v129[4] = v24;
    *(_WORD *)&v129[6] = v25;
    *(_WORD *)&v129[8] = (_WORD)v15;
    *(_WORD *)&v129[10] = v26;
    *(_WORD *)&v129[12] = v27;
    *(_WORD *)&v129[14] = v28;
    *(_WORD *)&v129[16] = v23;
    *(_WORD *)&v129[18] = v29;
    if (!_So9NSDecimala__isNegative_getter(v129))
    {
LABEL_8:
      *(_DWORD *)unint64_t v129 = v20;
      *(_WORD *)&v129[4] = v24;
      *(_WORD *)&v129[6] = v25;
      *(_WORD *)&v129[8] = (_WORD)v15;
      *(_WORD *)&v129[10] = v26;
      *(_WORD *)&v129[12] = v27;
      *(_WORD *)&v129[14] = v28;
      *(_WORD *)&v129[16] = v23;
      *(_WORD *)&v129[18] = v29;
      if (_So9NSDecimala__length_getter(v129))
      {
        uint64_t v112 = v1;
        *(void *)&long long v127 = 0;
        *((void *)&v127 + 1) = 0xE000000000000000;
        *(_DWORD *)unint64_t v129 = v20;
        *(_WORD *)&v129[4] = v24;
        *(_WORD *)&v129[6] = v25;
        *(_WORD *)&v129[8] = (_WORD)v15;
        *(_WORD *)&v129[10] = v26;
        *(_WORD *)&v129[12] = v27;
        *(_WORD *)&v129[14] = v28;
        *(_WORD *)&v129[16] = v23;
        *(_WORD *)&v129[18] = v29;
        *(_DWORD *)unint64_t v126 = v20;
        *(_WORD *)&v126[4] = v24;
        *(_WORD *)&v126[6] = v25;
        *(_WORD *)&v126[8] = (_WORD)v15;
        *(_WORD *)&v126[10] = v26;
        *(_WORD *)&v126[12] = v27;
        *(_WORD *)&v126[14] = v28;
        *(_WORD *)&v126[16] = v23;
        *(_WORD *)&v126[18] = v29;
        if ((int)_So9NSDecimala__exponent_getter(v126) >= 1)
        {
          do
          {
            v30._uint64_t countAndFlagsBits = 48;
            v30._object = (void *)0xE100000000000000;
            String.append(_:)(v30);
            *(_DWORD *)unint64_t v126 = v20;
            *(_WORD *)&v126[4] = v24;
            *(_WORD *)&v126[6] = v25;
            *(_WORD *)&v126[8] = (_WORD)v15;
            *(_WORD *)&v126[10] = v26;
            *(_WORD *)&v126[12] = v27;
            *(_WORD *)&v126[14] = v28;
            *(_WORD *)&v126[16] = v23;
            *(_WORD *)&v126[18] = v29;
            int v31 = _So9NSDecimala__exponent_getter(v126);
            _So9NSDecimala__exponent_setter((v31 - 1), v129);
            unint64_t v20 = *(unsigned int *)v129;
            unint64_t v24 = *(unsigned __int16 *)&v129[4];
            LOWORD(v25) = *(_WORD *)&v129[6];
            LOWORD(v15) = *(_WORD *)&v129[8];
            LOWORD(v26) = *(_WORD *)&v129[10];
            LOWORD(v27) = *(_WORD *)&v129[12];
            LOWORD(v28) = *(_WORD *)&v129[14];
            LOWORD(v23) = *(_WORD *)&v129[16];
            LOWORD(v29) = *(_WORD *)&v129[18];
            *(_OWORD *)unint64_t v126 = *(_OWORD *)v129;
            *(_DWORD *)&v126[16] = *(_DWORD *)&v129[16];
          }
          while ((int)_So9NSDecimala__exponent_getter(v126) > 0);
        }
        *(_DWORD *)unint64_t v126 = v20;
        *(_WORD *)&v126[4] = v24;
        *(_WORD *)&v126[6] = v25;
        *(_WORD *)&v126[8] = (_WORD)v15;
        *(_WORD *)&v126[10] = v26;
        *(_WORD *)&v126[12] = v27;
        *(_WORD *)&v126[14] = v28;
        *(_WORD *)&v126[16] = v23;
        *(_WORD *)&v126[18] = v29;
        if (!_So9NSDecimala__exponent_getter(v126))
        {
          _So9NSDecimala__exponent_setter(1, v129);
          unint64_t v20 = *(unsigned int *)v129;
          unint64_t v24 = *(unsigned __int16 *)&v129[4];
          LOWORD(v25) = *(_WORD *)&v129[6];
          LOWORD(v15) = *(_WORD *)&v129[8];
          LOWORD(v26) = *(_WORD *)&v129[10];
          LOWORD(v27) = *(_WORD *)&v129[12];
          LOWORD(v28) = *(_WORD *)&v129[14];
          LOWORD(v23) = *(_WORD *)&v129[16];
          LOWORD(v29) = *(_WORD *)&v129[18];
        }
        *(_DWORD *)unint64_t v126 = v20;
        unint64_t v125 = v24;
        *(_WORD *)&v126[4] = v24;
        *(_WORD *)&v126[6] = v25;
        *(_WORD *)&v126[8] = (_WORD)v15;
        *(_WORD *)&v126[10] = v26;
        *(_WORD *)&v126[12] = v27;
        *(_WORD *)&v126[14] = v28;
        *(_WORD *)&v126[16] = v23;
        *(_WORD *)&v126[18] = v29;
        if (_So9NSDecimala__length_getter(v126))
        {
          unint64_t v32 = v125;
          while (1)
          {
            unint64_t v125 = v32;
            *(_DWORD *)unint64_t v126 = v20;
            *(_WORD *)&v126[4] = v32;
            *(_WORD *)&v126[6] = v25;
            *(_WORD *)&v126[8] = (_WORD)v15;
            *(_WORD *)&v126[10] = v26;
            *(_WORD *)&v126[12] = v27;
            *(_WORD *)&v126[14] = v28;
            *(_WORD *)&v126[16] = v23;
            *(_WORD *)&v126[18] = v29;
            if (!_So9NSDecimala__exponent_getter(v126))
            {
              unint64_t v117 = v20;
              v33._uint64_t countAndFlagsBits = 46;
              v33._object = (void *)0xE100000000000000;
              String.append(_:)(v33);
              LODWORD(v20) = v117;
            }
            *(_DWORD *)unint64_t v126 = v20;
            *(_WORD *)&v126[4] = v125;
            *(_WORD *)&v126[6] = v25;
            *(_WORD *)&v126[8] = (_WORD)v15;
            *(_WORD *)&v126[10] = v26;
            *(_WORD *)&v126[12] = v27;
            *(_WORD *)&v126[14] = v28;
            *(_WORD *)&v126[16] = v23;
            *(_WORD *)&v126[18] = v29;
            int v34 = _So9NSDecimala__exponent_getter(v126);
            _So9NSDecimala__exponent_setter((v34 + 1), v129);
            unint64_t v35 = *(unsigned int *)v129;
            LOWORD(v29) = *(_WORD *)&v129[6];
            LOWORD(v27) = *(_WORD *)&v129[14];
            unint64_t v117 = *(unsigned __int16 *)&v129[4];
            uint64_t v116 = *(unsigned __int16 *)&v129[8];
            uint64_t v115 = *(unsigned __int16 *)&v129[10];
            uint64_t v114 = *(unsigned __int16 *)&v129[12];
            LOWORD(v26) = *(_WORD *)&v129[18];
            int v113 = *(unsigned __int16 *)&v129[16];
            NSDecimal.asVariableLengthInteger()(*(unsigned int *)v129 | ((unint64_t)*(unsigned __int16 *)&v129[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v129[6] << 48), *(unsigned __int16 *)&v129[8] | ((unint64_t)*(unsigned __int16 *)&v129[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v129[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v129[14] << 48), *(unsigned __int16 *)&v129[16] | (*(unsigned __int16 *)&v129[18] << 16));
            unint64_t v20 = v36;
            unint64_t v25 = *(void *)(v36 + 16);
            unint64_t v125 = v35;
            if (v25) {
              break;
            }
            LODWORD(v15) = 0;
            uint64_t v23 = MEMORY[0x1E4FBC860];
LABEL_23:
            uint64_t v40 = *(void *)(v23 + 16);
            if (v40 && !*(_WORD *)(v23 + 2 * v40 + 30))
            {
              do
              {
                *(void *)(v23 + 16) = v40 - 1;
                if (v40 == 1) {
                  break;
                }
              }
              while (!*(unsigned __int16 *)(v23 + 28 + 2 * v40--));
            }
            swift_bridgeObjectRelease();
            *(_DWORD *)unint64_t v126 = v125;
            *(_WORD *)&v126[4] = v117;
            *(_WORD *)&v126[6] = v29;
            *(_WORD *)&v126[8] = v116;
            *(_WORD *)&v126[10] = v115;
            *(_WORD *)&v126[12] = v114;
            *(_WORD *)&v126[14] = v27;
            *(_WORD *)&v126[16] = v113;
            *(_WORD *)&v126[18] = v26;
            NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v23);
            if (v42) {
              goto LABEL_121;
            }
            uint64_t v122 = 0;
            unint64_t v43 = *(void *)(v23 + 16);
            swift_bridgeObjectRelease();
            if (HIDWORD(v43)) {
              goto LABEL_122;
            }
            _So9NSDecimala__length_setter(v43, v126);
            *(_DWORD *)unint64_t v129 = *(_DWORD *)v126;
            *(_OWORD *)&v129[4] = *(_OWORD *)&v126[4];
            *(void *)unint64_t v126 = v15 | 0x30;
            v44._uint64_t countAndFlagsBits = MEMORY[0x185302020](v126, 1);
            String.append(_:)(v44);
            swift_bridgeObjectRelease();
            unint64_t v20 = *(unsigned int *)v129;
            unint64_t v125 = *(unsigned __int16 *)&v129[4];
            LOWORD(v25) = *(_WORD *)&v129[6];
            LOWORD(v15) = *(_WORD *)&v129[8];
            LOWORD(v26) = *(_WORD *)&v129[10];
            LOWORD(v27) = *(_WORD *)&v129[12];
            LOWORD(v28) = *(_WORD *)&v129[14];
            LOWORD(v23) = *(_WORD *)&v129[16];
            LOWORD(v29) = *(_WORD *)&v129[18];
            *(_OWORD *)unint64_t v126 = *(_OWORD *)v129;
            *(_DWORD *)&v126[16] = *(_DWORD *)&v129[16];
            int v45 = _So9NSDecimala__length_getter(v126);
            unint64_t v32 = v125;
            if (!v45) {
              goto LABEL_36;
            }
          }
          uint64_t v23 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          uint64_t v28 = v23 + 30;
          *(void *)(v23 + 16) = v25;
          bzero((void *)(v23 + 32), 2 * v25);
          unsigned int v37 = *(unsigned __int16 *)(2 * v25 + v20 + 30);
          unsigned int v38 = v37 / 0xA;
          do
          {
            *(_WORD *)(v28 + 2 * v25) = v38;
            LODWORD(v15) = v37 % 0xA;
            if (v25 == 1) {
              goto LABEL_23;
            }
            unsigned int v37 = *(unsigned __int16 *)(v20 + 28 + 2 * v25) | (v15 << 16);
            unsigned int v38 = v37 / 0xA;
            unint64_t v39 = v25 - 2;
            --v25;
          }
          while (v39 < *(void *)(v23 + 16));
          __break(1u);
        }
        LOWORD(v32) = v125;
LABEL_36:
        *(_DWORD *)unint64_t v126 = v20;
        *(_WORD *)&v126[4] = v32;
        *(_WORD *)&v126[6] = v25;
        *(_WORD *)&v126[8] = (_WORD)v15;
        *(_WORD *)&v126[10] = v26;
        *(_WORD *)&v126[12] = v27;
        *(_WORD *)&v126[14] = v28;
        *(_WORD *)&v126[16] = v23;
        *(_WORD *)&v126[18] = v29;
        __int16 v48 = v32;
        if ((int)_So9NSDecimala__exponent_getter(v126) <= 0)
        {
          *(_DWORD *)unint64_t v126 = v20;
          *(_WORD *)&v126[4] = v48;
          *(_WORD *)&v126[6] = v25;
          *(_WORD *)&v126[8] = (_WORD)v15;
          *(_WORD *)&v126[10] = v26;
          *(_WORD *)&v126[12] = v27;
          *(_WORD *)&v126[14] = v28;
          *(_WORD *)&v126[16] = v23;
          *(_WORD *)&v126[18] = v29;
          for (int i = v20; _So9NSDecimala__exponent_getter(v126); *(_DWORD *)&v126[16] = *(_DWORD *)&v129[16])
          {
            v50._uint64_t countAndFlagsBits = 48;
            v50._object = (void *)0xE100000000000000;
            String.append(_:)(v50);
            *(_DWORD *)unint64_t v126 = i;
            *(_WORD *)&v126[4] = v48;
            *(_WORD *)&v126[6] = v25;
            *(_WORD *)&v126[8] = (_WORD)v15;
            *(_WORD *)&v126[10] = v26;
            *(_WORD *)&v126[12] = v27;
            *(_WORD *)&v126[14] = v28;
            *(_WORD *)&v126[16] = v23;
            *(_WORD *)&v126[18] = v29;
            int v51 = _So9NSDecimala__exponent_getter(v126);
            _So9NSDecimala__exponent_setter((v51 + 1), v129);
            int i = *(_DWORD *)v129;
            __int16 v48 = *(_WORD *)&v129[4];
            LOWORD(v25) = *(_WORD *)&v129[6];
            LOWORD(v15) = *(_WORD *)&v129[8];
            LOWORD(v26) = *(_WORD *)&v129[10];
            LOWORD(v27) = *(_WORD *)&v129[12];
            LOWORD(v28) = *(_WORD *)&v129[14];
            LOWORD(v23) = *(_WORD *)&v129[16];
            LOWORD(v29) = *(_WORD *)&v129[18];
            *(_OWORD *)unint64_t v126 = *(_OWORD *)v129;
          }
          v52._uint64_t countAndFlagsBits = 46;
          v52._object = (void *)0xE100000000000000;
          String.append(_:)(v52);
          v53._uint64_t countAndFlagsBits = 48;
          v53._object = (void *)0xE100000000000000;
          String.append(_:)(v53);
          LODWORD(v20) = i;
        }
        uint64_t v6 = v121;
        *(_DWORD *)unint64_t v126 = v20;
        *(_WORD *)&v126[4] = v48;
        *(_WORD *)&v126[6] = v25;
        *(_WORD *)&v126[8] = (_WORD)v15;
        *(_WORD *)&v126[10] = v26;
        *(_WORD *)&v126[12] = v27;
        *(_WORD *)&v126[14] = v28;
        *(_WORD *)&v126[16] = v23;
        *(_WORD *)&v126[18] = v29;
        if (_So9NSDecimala__isNegative_getter(v126))
        {
          v54._uint64_t countAndFlagsBits = 45;
          v54._object = (void *)0xE100000000000000;
          String.append(_:)(v54);
        }
        *(_OWORD *)unint64_t v126 = v127;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
        lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
        uint64_t v47 = String.init<A>(_:)();
        unint64_t v46 = v55;
        uint64_t v7 = v120;
        unint64_t v2 = 0xD000000000000010;
        Swift::String v15 = v119;
        int v11 = v118;
        uint64_t v1 = v112;
        goto LABEL_43;
      }
      unint64_t v46 = 0xE100000000000000;
      uint64_t v47 = 48;
    }
    else
    {
      unint64_t v46 = 0xE300000000000000;
      uint64_t v47 = 5136718;
    }
    uint64_t v7 = v120;
    unint64_t v2 = 0xD000000000000010;
    Swift::String v15 = v119;
    int v11 = v118;
    uint64_t v6 = v121;
LABEL_43:
    unint64_t v56 = v46;
    String.append(_:)(*(Swift::String *)&v47);
    swift_bridgeObjectRelease();
    *(_OWORD *)unint64_t v129 = v128;
    swift_bridgeObjectRetain();
    v57._uint64_t countAndFlagsBits = 32;
    v57._object = (void *)0xE100000000000000;
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v129);
    swift_bridgeObjectRelease();
  }
  uint64_t v59 = *(void *)(v1 + 16);
  uint64_t v58 = *(void *)(v1 + 24);
  uint64_t v61 = *(void *)(v1 + 32);
  unint64_t v60 = *(void *)(v1 + 40);
  uint64_t v62 = *(void *)(v1 + 48);
  unint64_t v63 = *(void *)(v1 + 56);
  uint64_t v64 = *(void *)(v1 + 64);
  unsigned int v65 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v66 = v1 + v15[10];
  int v67 = *(unsigned __int8 *)(v66 + 8);
  if (v60 >> 1 == 0xFFFFFFFF && v63 <= 1 && v65 < 2)
  {
    uint64_t v68 = (uint64_t)v124;
    if (v67 == 255) {
      goto LABEL_61;
    }
    *(void *)unint64_t v129 = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(*(void *)v66, v67 & 1);
    *(void *)&v129[8] = v69;
    swift_bridgeObjectRetain();
    goto LABEL_59;
  }
  if (v67 == 255)
  {
    if ((v65 & 0x80) != 0)
    {
      uint64_t v75 = NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)(*(void *)(v1 + 16), v58 & 1, *(void *)(v1 + 32), v60 & 1, v62, *(unsigned char *)(v1 + 56) & 1, v64, v65 & 1);
      uint64_t v77 = v76;
      uint64_t v68 = (uint64_t)v124;
    }
    else
    {
      *(void *)unint64_t v129 = MEMORY[0x185302340](64, 0xE100000000000000, *(void *)(v1 + 16));
      *(void *)&v129[8] = v73;
      if (v61)
      {
        v78._uint64_t countAndFlagsBits = 43;
        v78._object = (void *)0xE100000000000000;
        String.append(_:)(v78);
      }
      else
      {
        if (__OFSUB__(v58, v59))
        {
          __break(1u);
LABEL_121:
          swift_bridgeObjectRelease();
          swift_unexpectedError();
          __break(1u);
LABEL_122:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x181B37A34);
        }
        v74._uint64_t countAndFlagsBits = MEMORY[0x185302340](35, 0xE100000000000000, v58 - v59);
        String.append(_:)(v74);
        swift_bridgeObjectRelease();
      }
      uint64_t v68 = (uint64_t)v124;
      uint64_t v77 = *(void *)&v129[8];
      uint64_t v75 = *(void *)v129;
    }
    *(void *)unint64_t v129 = v75;
    *(void *)&v129[8] = v77;
    swift_bridgeObjectRetain();
LABEL_59:
    v79._uint64_t countAndFlagsBits = 32;
    v79._object = (void *)0xE100000000000000;
    String.append(_:)(v79);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v129);
    goto LABEL_60;
  }
  int64_t v70 = *(void *)v66;
  *(void *)unint64_t v129 = *(void *)(v1 + 16);
  *(void *)&v129[8] = v58;
  *(void *)&v129[16] = v61;
  unint64_t v130 = v60;
  uint64_t v131 = v62;
  unint64_t v132 = v63;
  uint64_t v133 = v64;
  char v134 = v65;
  v71._uint64_t countAndFlagsBits = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(v70, v67 & 1);
  Swift::String v72 = NumberFormatStyleConfiguration.Precision.skeletonWithRoundingIncrement(stem:)(v71);
  swift_bridgeObjectRelease();
  String.append(_:)(v72);
  uint64_t v68 = (uint64_t)v124;
LABEL_60:
  swift_bridgeObjectRelease();
LABEL_61:
  int v80 = *(unsigned __int8 *)(v1 + 73);
  if (v80 != 2)
  {
    if (v80) {
      uint64_t v81 = 0x666F2D70756F7267;
    }
    else {
      uint64_t v81 = 0;
    }
    if (v80) {
      unint64_t v82 = 0xE900000000000066;
    }
    else {
      unint64_t v82 = 0xE000000000000000;
    }
    unint64_t v83 = v82;
    String.append(_:)(*(Swift::String *)&v81);
    swift_bridgeObjectRelease();
  }
  unint64_t v84 = 0xEA00000000006369;
  int v85 = *(_DWORD *)(v1 + 74);
  if (v85 != 2)
  {
    unint64_t v86 = 0x776C612D6E676973;
    if ((v85 & 0x10000) != 0) {
      unint64_t v86 = 0xD000000000000010;
    }
    unint64_t v87 = 0x80000001823AAB50;
    if ((v85 & 0x10000) == 0) {
      unint64_t v87 = 0xEB00000000737961;
    }
    uint64_t v88 = 0x76656E2D6E676973;
    if ((v85 & 0x100) == 0) {
      uint64_t v88 = 0x7475612D6E676973;
    }
    unint64_t v89 = 0xE90000000000006FLL;
    if ((v85 & 0x100) != 0) {
      unint64_t v89 = 0xEA00000000007265;
    }
    if (v85)
    {
      unint64_t v86 = v88;
      unint64_t v87 = v89;
    }
    unint64_t v90 = 0xEF676E69746E756FLL;
    uint64_t v91 = 0x6363612D6E676973;
    unint64_t v92 = 0xD000000000000016;
    if ((v85 & 0x10000) != 0) {
      unint64_t v92 = 0xD00000000000001BLL;
    }
    unint64_t v93 = 0x80000001823AABF0;
    if ((v85 & 0x10000) != 0) {
      unint64_t v93 = 0x80000001823AABD0;
    }
    if ((v85 & 1) == 0)
    {
      uint64_t v91 = v92;
      unint64_t v90 = v93;
    }
    BOOL v94 = (v85 & 0x1000000) == 0;
    if ((v85 & 0x1000000) != 0) {
      unint64_t v95 = v91;
    }
    else {
      unint64_t v95 = v86;
    }
    if (v94) {
      unint64_t v96 = v87;
    }
    else {
      unint64_t v96 = v90;
    }
    *(void *)unint64_t v129 = v95;
    *(void *)&v129[8] = v96;
    swift_bridgeObjectRetain();
    v97._uint64_t countAndFlagsBits = 32;
    v97._object = (void *)0xE100000000000000;
    String.append(_:)(v97);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v129);
    swift_bridgeObjectRelease();
  }
  int v98 = *(unsigned __int8 *)(v1 + 78);
  if (v98 != 2)
  {
    if (v98) {
      unint64_t v99 = 0xEE00737961776C61;
    }
    else {
      unint64_t v99 = 0xEC0000006F747561;
    }
    *(void *)unint64_t v129 = 0x2D6C616D69636564;
    *(void *)&v129[8] = v99;
    swift_bridgeObjectRetain();
    v100._uint64_t countAndFlagsBits = 32;
    v100._object = (void *)0xE100000000000000;
    String.append(_:)(v100);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v129);
    swift_bridgeObjectRelease();
  }
  outlined init with copy of FloatingPointRoundingRule?(v1 + v15[9], v68);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v68, 1, v6) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v11, v68, v6);
    Swift::Int v101 = v123;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v123, v11, v6);
    int v102 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v101, v6);
    if (v102 == *MEMORY[0x1E4FBBEA0])
    {
      unint64_t v2 = 0xD000000000000015;
      __int16 v103 = "rounding-mode-half-up";
    }
    else if (v102 == *MEMORY[0x1E4FBBE98])
    {
      unint64_t v2 = 0xD000000000000017;
      __int16 v103 = "rounding-mode-half-even";
    }
    else if (v102 == *MEMORY[0x1E4FBBEA8])
    {
      unint64_t v2 = 0xD000000000000015;
      __int16 v103 = "rounding-mode-ceiling";
    }
    else if (v102 == *MEMORY[0x1E4FBBEB0])
    {
      unint64_t v2 = 0xD000000000000013;
      __int16 v103 = "rounding-mode-floor";
    }
    else if (v102 == *MEMORY[0x1E4FBBE88])
    {
      unint64_t v2 = 0xD000000000000012;
      __int16 v103 = "rounding-mode-down";
    }
    else
    {
      if (v102 != *MEMORY[0x1E4FBBE90])
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v123, v6);
        unint64_t v2 = 0;
        unint64_t v104 = 0xE000000000000000;
        goto LABEL_113;
      }
      __int16 v103 = "rounding-mode-up";
    }
    unint64_t v104 = (unint64_t)(v103 - 32) | 0x8000000000000000;
LABEL_113:
    *(void *)unint64_t v129 = v2;
    *(void *)&v129[8] = v104;
    swift_bridgeObjectRetain();
    v105._uint64_t countAndFlagsBits = 32;
    v105._object = (void *)0xE100000000000000;
    String.append(_:)(v105);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v129);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    goto LABEL_114;
  }
  outlined destroy of Any?(v68, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
LABEL_114:
  uint64_t v106 = 0x6669746E65696373;
  switch(*(unsigned char *)(v1 + v15[12]))
  {
    case 1:
      goto LABEL_117;
    case 2:
      unint64_t v84 = 0xED000074726F6873;
      uint64_t v106 = 0x2D746361706D6F63;
      goto LABEL_117;
    case 3:
      goto LABEL_118;
    default:
      uint64_t v106 = 0;
      unint64_t v84 = 0xE000000000000000;
LABEL_117:
      *(void *)unint64_t v129 = v106;
      *(void *)&v129[8] = v84;
      swift_bridgeObjectRetain();
      v107._uint64_t countAndFlagsBits = 32;
      v107._object = (void *)0xE100000000000000;
      String.append(_:)(v107);
      swift_bridgeObjectRelease();
      String.append(_:)(*(Swift::String *)v129);
      swift_bridgeObjectRelease();
LABEL_118:
      long long v108 = v135;
      swift_bridgeObjectRetain();
      specialized BidirectionalCollection._trimmingCharacters(while:)(v108, *((unint64_t *)&v108 + 1));
      swift_bridgeObjectRelease();
      uint64_t v109 = String.init(_:)();
      swift_bridgeObjectRelease();
      return v109;
  }
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }
  return result;
}

BOOL specialized static CurrencyFormatStyleConfiguration.SignDisplayStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a1[2] ^ a2[2] | a2[3] ^ a1[3]) & 1) == 0;
}

uint64_t specialized static DescriptiveNumberFormatConfiguration.Collection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = a1[1];
  int v3 = a2[1];
  if (v2 == 5)
  {
    if (v3 != 5) {
      return 0;
    }
  }
  else if (v3 == 5 || v2 != v3)
  {
    return 0;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue()
{
  unint64_t result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext()
{
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation()
{
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation);
  }
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration()
{
  return &type metadata for NumberFormatStyleConfiguration;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Grouping()
{
  return &type metadata for NumberFormatStyleConfiguration.Grouping;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy()
{
  return &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.SignDisplayStrategy(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v6 = v4 - 2;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.SignDisplayStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)__n128 result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)__n128 result = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration()
{
  return &type metadata for CurrencyFormatStyleConfiguration;
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CurrencyFormatStyleConfiguration.SignDisplayStrategy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[4]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.SignDisplayStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  return &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.Presentation()
{
  return &type metadata for CurrencyFormatStyleConfiguration.Presentation;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration()
{
  return &type metadata for DescriptiveNumberFormatConfiguration;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration.Presentation()
{
  return &type metadata for DescriptiveNumberFormatConfiguration.Presentation;
}

void *type metadata accessor for FloatingPointRoundingRule.CodingValue()
{
  return &unk_1ECA511E0;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  return &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option;
}

void *type metadata accessor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys()
{
  return &unk_1ECA434F0;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.Presentation.Option()
{
  return &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option;
}

void *type metadata accessor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys()
{
  return &unk_1ECA42D40;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
}

unsigned char *storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Presentation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B388ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return &unk_1ECA42EE0;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Notation.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.Notation.Option;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Notation.CodingKeys()
{
  return &unk_1ECA42648;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
}

unsigned char *storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Notation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B389E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return &unk_1ECA42160;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
}

void *type metadata accessor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys()
{
  return &unk_1ECA42308;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Precision.CodingKeys()
{
  return &unk_1ECA427E8;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.Precision(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 24) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Precision(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 2 * -a2;
      *(void *)(result + 40) = 0;
      *(void *)(result + 48) = 0;
      *(void *)(result + 32) = 0;
      *(unsigned char *)(result + 56) = 0;
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for NumberFormatStyleConfiguration.Precision.Option(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56) >> 7;
}

uint64_t destructiveProjectEnumData for NumberFormatStyleConfiguration.Precision.Option(uint64_t result)
{
  *(unsigned char *)(result + 56) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for NumberFormatStyleConfiguration.Precision.Option(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 40) & 1;
  char v3 = *(unsigned char *)(result + 56) & 1 | (a2 << 7);
  *(void *)(result + 24) &= 1uLL;
  *(void *)(result + 40) = v2;
  *(unsigned char *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Precision.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.Precision.Option;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Grouping.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.Grouping.Option;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Grouping.CodingKeys()
{
  return &unk_1ECA424A8;
}

uint64_t getEnumTagSinglePayload for FormatStyleCapitalizationContext(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatStyleCapitalizationContext(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B38CD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatStyleCapitalizationContext.Option()
{
  return &type metadata for FormatStyleCapitalizationContext.Option;
}

unsigned char *storeEnumTagSinglePayload for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181B38DA4);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for FormatStyleCapitalizationContext.CodingKeys()
{
  return &unk_1ECA430A8;
}

void *initializeBufferWithCopyOfBuffer for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    long long v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    long long v8 = *(_OWORD *)((char *)a2 + 57);
    *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
    *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
    *(unsigned char *)(a1 + 78) = *((unsigned char *)a2 + 78);
    uint64_t v9 = a3[9];
    uint64_t v10 = (void *)(a1 + v9);
    int v11 = (char *)a2 + v9;
    *(_OWORD *)(a1 + 57) = v8;
    uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v16 = a3[10];
    uint64_t v17 = a3[11];
    double v18 = (char *)v4 + v16;
    uint64_t v19 = (uint64_t)a2 + v16;
    *(void *)double v18 = *(void *)v19;
    v18[8] = *(unsigned char *)(v19 + 8);
    *((unsigned char *)v4 + v17) = *((unsigned char *)a2 + v17);
    *((unsigned char *)v4 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  }
  return v4;
}

uint64_t initializeWithCopy for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  uint64_t v8 = a3[9];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithCopy for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  long long v7 = *((_OWORD *)a2 + 1);
  long long v8 = *((_OWORD *)a2 + 2);
  long long v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
  *(unsigned char *)(a1 + 78) = *((unsigned char *)a2 + 78);
  uint64_t v10 = a3[9];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  unint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  *(unsigned char *)(a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  uint64_t v8 = a3[9];
  long long v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  uint64_t v8 = a3[9];
  long long v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

void *initializeBufferWithCopyOfBuffer for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    long long v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    long long v8 = *(_OWORD *)((char *)a2 + 57);
    *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
    *(unsigned char *)(a1 + 76) = *((unsigned char *)a2 + 76);
    *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
    *(unsigned char *)(a1 + 77) = *((unsigned char *)a2 + 77);
    uint64_t v9 = a3[9];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    *(_OWORD *)(a1 + 57) = v8;
    uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v16 = a3[10];
    uint64_t v17 = a3[11];
    uint64_t v18 = (char *)v4 + v16;
    uint64_t v19 = (uint64_t)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = *(unsigned char *)(v19 + 8);
    *((unsigned char *)v4 + v17) = *((unsigned char *)a2 + v17);
  }
  return v4;
}

uint64_t destroy for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v3);
  if (!result)
  {
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(v2, v3);
  }
  return result;
}

uint64_t initializeWithCopy for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  uint64_t v8 = a3[9];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  return a1;
}

uint64_t assignWithCopy for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  long long v7 = *((_OWORD *)a2 + 1);
  long long v8 = *((_OWORD *)a2 + 2);
  long long v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
  LOWORD(v6) = *((_WORD *)a2 + 37);
  *(unsigned char *)(a1 + 76) = *((unsigned char *)a2 + 76);
  *(_WORD *)(a1 + 74) = v6;
  *(unsigned char *)(a1 + 77) = *((unsigned char *)a2 + 77);
  uint64_t v10 = a3[9];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  unint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  *(unsigned char *)(a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  uint64_t v8 = a3[9];
  long long v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  return a1;
}

uint64_t assignWithTake for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  uint64_t v8 = a3[9];
  long long v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_0);
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_0);
}

uint64_t base witness table accessor for Equatable in NumberFormatStyleConfiguration.Collection()
{
  return lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t base witness table accessor for Equatable in CurrencyFormatStyleConfiguration.Collection()
{
  return lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
}

uint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Int? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Int? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int? and conformance <A> A?);
  }
  return result;
}

BOOL specialized static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (int *)((char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v11 - 8);
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)&v67 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v67 - v17;
  char v19 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v19 = 1;
    }
    if (v19) {
      return 0;
    }
  }
  Swift::String v71 = v7;
  uint64_t v73 = v5;
  Swift::String v74 = v10;
  uint64_t v72 = v4;
  unint64_t v20 = *(void *)(a1 + 40);
  unint64_t v21 = *(void *)(a1 + 56);
  unsigned int v22 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = *(void *)(a2 + 24);
  uint64_t v25 = *(void *)(a2 + 32);
  unint64_t v26 = *(void *)(a2 + 40);
  uint64_t v27 = *(void *)(a2 + 48);
  unint64_t v28 = *(void *)(a2 + 56);
  uint64_t v29 = *(void *)(a2 + 64);
  unsigned int v30 = *(unsigned __int8 *)(a2 + 72);
  if (v20 >> 1 != 0xFFFFFFFF || v21 > 1 || v22 >= 2)
  {
    uint64_t v32 = *(void *)(a1 + 64);
    uint64_t v33 = *(void *)(a1 + 48);
    uint64_t v34 = *(void *)(a1 + 32);
    long long v75 = *(_OWORD *)(a1 + 16);
    uint64_t v76 = v34;
    unint64_t v77 = v20;
    uint64_t v78 = v33;
    unint64_t v79 = v21;
    uint64_t v80 = v32;
    char v81 = v22;
    if (v26 >> 1 == 0xFFFFFFFF && v28 <= 1 && v30 < 2) {
      return 0;
    }
    uint64_t v69 = v16;
    uint64_t v68 = v18;
    int64_t v70 = v14;
    uint64_t v67 = v29;
    uint64_t v35 = v25;
    uint64_t v36 = v8;
    uint64_t v37 = v27;
    outlined init with take of NumberFormatStyleConfiguration.Precision.Option(&v75, v82);
    *(void *)&long long v83 = v23;
    *((void *)&v83 + 1) = v24;
    uint64_t v84 = v35;
    unint64_t v85 = v26;
    uint64_t v86 = v37;
    unint64_t v87 = v28;
    uint64_t v8 = v36;
    uint64_t v88 = v67;
    char v89 = v30;
    BOOL v38 = specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v82, &v83);
    int v14 = v70;
    uint64_t v18 = v68;
    uint64_t v16 = v69;
    if (!v38) {
      return 0;
    }
LABEL_18:
    int v39 = *(unsigned __int8 *)(a1 + 73);
    int v40 = *(unsigned __int8 *)(a2 + 73);
    if (v39 == 2)
    {
      if (v40 != 2) {
        return 0;
      }
    }
    else if (v40 == 2 || ((((v40 & 1) == 0) ^ v39) & 1) == 0)
    {
      return 0;
    }
    int v41 = *(_DWORD *)(a2 + 74);
    if (*(_DWORD *)(a1 + 74) == 2)
    {
      if (v41 != 2) {
        return 0;
      }
    }
    else
    {
      if (v41 == 2) {
        return 0;
      }
      BOOL result = 0;
      unsigned int v42 = *(_DWORD *)(a1 + 74) ^ *(_DWORD *)(a2 + 74);
      if ((v42 & 1) != 0 || ((v42 >> 8) & 1) != 0 || (v42 & 0x10000) != 0 || (v42 & 0x1000000) != 0) {
        return result;
      }
    }
    int v43 = *(unsigned __int8 *)(a1 + 78);
    int v44 = *(unsigned __int8 *)(a2 + 78);
    if (v43 == 2)
    {
      uint64_t v45 = (uint64_t)v74;
      if (v44 != 2) {
        return 0;
      }
    }
    else
    {
      uint64_t v45 = (uint64_t)v74;
      if (v44 == 2 || ((((v44 & 1) == 0) ^ v43) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v46 = v16;
    uint64_t v47 = (uint64_t)v18;
    uint64_t v48 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    outlined init with copy of FloatingPointRoundingRule?(a1 + *(int *)(v48 + 36), v47);
    Swift::String v74 = (int *)v48;
    outlined init with copy of FloatingPointRoundingRule?(a2 + *(int *)(v48 + 36), (uint64_t)v14);
    uint64_t v49 = v45 + *(int *)(v8 + 48);
    outlined init with copy of FloatingPointRoundingRule?(v47, v45);
    outlined init with copy of FloatingPointRoundingRule?((uint64_t)v14, v49);
    Swift::String v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    uint64_t v51 = v72;
    if (v50(v45, 1, v72) == 1)
    {
      outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v47, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if (v50(v49, 1, v51) == 1)
      {
        outlined destroy of Any?(v45, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
LABEL_45:
        uint64_t v57 = v74[10];
        uint64_t v58 = (double *)(a1 + v57);
        int v59 = *(unsigned __int8 *)(a1 + v57 + 8);
        unint64_t v60 = (double *)(a2 + v57);
        int v61 = *(unsigned __int8 *)(a2 + v57 + 8);
        if (v59 == 255)
        {
          if (v61 != 255) {
            return 0;
          }
        }
        else
        {
          if (v61 == 255) {
            return 0;
          }
          double v65 = *v58;
          double v66 = *v60;
          BOOL result = 0;
          if (v59)
          {
            if ((v61 & 1) == 0 || v65 != v66) {
              return result;
            }
          }
          else if ((v61 & 1) != 0 || *(void *)&v65 != *(void *)&v66)
          {
            return result;
          }
        }
        if (*(unsigned __int8 *)(a1 + v74[11]) == *(unsigned __int8 *)(a2 + v74[11]))
        {
          uint64_t v62 = v74[12];
          int v63 = *(unsigned __int8 *)(a1 + v62);
          int v64 = *(unsigned __int8 *)(a2 + v62);
          if (v63 != 3) {
            return v64 != 3 && v63 == v64;
          }
          if (v64 == 3) {
            return 1;
          }
        }
        return 0;
      }
    }
    else
    {
      int64_t v70 = v14;
      uint64_t v52 = v46;
      outlined init with copy of FloatingPointRoundingRule?(v45, v46);
      if (v50(v49, 1, v51) != 1)
      {
        uint64_t v53 = v73;
        Swift::String v54 = v71;
        (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v71, v49, v51);
        char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v56 = *(void (**)(char *, uint64_t))(v53 + 8);
        v56(v54, v51);
        outlined destroy of Any?((uint64_t)v70, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        outlined destroy of Any?(v47, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        v56((char *)v52, v51);
        outlined destroy of Any?(v45, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        if ((v55 & 1) == 0) {
          return 0;
        }
        goto LABEL_45;
      }
      outlined destroy of Any?((uint64_t)v70, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v47, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v46, v51);
    }
    outlined destroy of Any?(v45, &demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
    return 0;
  }
  BOOL result = 0;
  if (v26 >> 1 == 0xFFFFFFFF && v28 <= 1 && v30 < 2) {
    goto LABEL_18;
  }
  return result;
}

uint64_t specialized NumberFormatStyleConfiguration.RoundingIncrement.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v13[15] = 0;
    uint64_t v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if (v9)
    {
      v13[14] = 1;
      uint64_t v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      char v12 = v11;
      (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
      if (v12) {
        uint64_t v7 = 0x3FE0000000000000;
      }
    }
    else
    {
      uint64_t v7 = v8;
      (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

uint64_t specialized NumberFormatStyleConfiguration.Precision.Option.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Precision.Option.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v38 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v10 & 1) != 0 || (uint64_t v12 = v9, v33 = 1, v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(), (v14))
  {
    char v37 = 2;
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if ((v18 & 1) == 0)
    {
      uint64_t v12 = v17;
      char v36 = 3;
      uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      if ((v20 & 1) == 0)
      {
        uint64_t v21 = v19;
        char v35 = 4;
        uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        if ((v23 & 1) == 0)
        {
          uint64_t v29 = v22;
          char v34 = 5;
          uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          if ((v25 & 1) == 0)
          {
            uint64_t v15 = 0;
            uint64_t v30 = v24;
            uint64_t v31 = v21;
            LODWORD(v32) = 128;
            uint64_t v16 = v29;
            goto LABEL_7;
          }
        }
      }
    }
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v27;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Decoder.codingPath.getter();
    uint64_t v28 = v32;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA78], v26);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v15 = v13;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v16 = 0;
  LODWORD(v32) = 0;
LABEL_7:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v31;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v16;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = v30;
  *(unsigned char *)(a2 + 56) = v32;
  return result;
}

unint64_t specialized FormatStyleCapitalizationContext.Option.init(rawValue:)(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t specialized NumberFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C616373 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69736963657270 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x70756F7267 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823AAD30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001823AAD50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x676E69646E756F72 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823AAD70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E6F697461746F6ELL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t specialized NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6576697469736F70 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657669746167656ELL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1869768058 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized CurrencyFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C616373 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69736963657270 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x70756F7267 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823AAD30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001823AAD50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x676E69646E756F72 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823AAD70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x61746E6573657270 && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E6F697461746F6ELL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t specialized CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6576697469736F70 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657669746167656ELL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1869768058 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x69746E756F636361 && a2 == 0xEA0000000000676ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement);
  }
  return result;
}

uint64_t outlined assign with take of FloatingPointRoundingRule?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }
  return result;
}

unint64_t specialized CurrencyFormatStyleConfiguration.Presentation.Option.init(rawValue:)(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t specialized DescriptiveNumberFormatConfiguration.Collection.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x61746E6573657270 && a2 == 0xEC0000006E6F6974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001823A8D30)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t specialized FloatingPointRoundingRule.CodingValue.init(rawValue:)(unint64_t result)
{
  if (result >= 6) {
    return 6;
  }
  return result;
}

void *type metadata accessor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  return &unk_1ECA42040;
}

unsigned char *storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Collection.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B3D068);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  return &unk_1ECA42CB0;
}

unsigned char *storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Collection.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B3D16CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  return &unk_1ECA41FB0;
}

unsigned char *storeEnumTagSinglePayload for FloatingPointRoundingRule.CodingValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B3D270);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  return &unk_1ECA42878;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DescriptiveNumberFormatConfiguration.Collection(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DescriptiveNumberFormatConfiguration.Collection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B3D414);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration.Collection()
{
  return &type metadata for DescriptiveNumberFormatConfiguration.Collection;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.RoundingIncrement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.RoundingIncrement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for NumberFormatStyleConfiguration.RoundingIncrement(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for NumberFormatStyleConfiguration.RoundingIncrement(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.RoundingIncrement()
{
  return &type metadata for NumberFormatStyleConfiguration.RoundingIncrement;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection()
{
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }
  return result;
}

uint64_t specialized NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656765746E69 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6974616F6C66 && a2 == 0xED0000746E696F50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized NumberFormatStyleConfiguration.Precision.Option.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000001823AAC70
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001823AAC90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001823AACB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001823AACD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823AACF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823AAD10)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unsigned char *storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Grouping(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B3DF88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  return &unk_1ECA433E0;
}

double NSRunLoop.SchedulerTimeType.date.getter@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double NSRunLoop.SchedulerTimeType.date.setter(double *a1)
{
  double result = *a1;
  *uint64_t v1 = *(void *)a1;
  return result;
}

uint64_t (*NSRunLoop.SchedulerTimeType.date.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double NSRunLoop.SchedulerTimeType.distance(to:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 - *v2;
  *a2 = result;
  return result;
}

double NSRunLoop.SchedulerTimeType.advanced(by:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 + *v2;
  *a2 = result;
  return result;
}

double NSRunLoop.SchedulerTimeType.Stride.timeInterval.getter()
{
  return *(double *)v0;
}

double NSRunLoop.SchedulerTimeType.Stride.magnitude.getter()
{
  return *(double *)v0;
}

void NSRunLoop.SchedulerTimeType.Stride.magnitude.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*NSRunLoop.SchedulerTimeType.Stride.magnitude.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, a2, v7);
  uint64_t v10 = Double.init<A>(exactly:)((uint64_t)v9, a2);
  char v12 = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  if (v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v10;
  }
  *(void *)a3 = v14;
  *(unsigned char *)(a3 + 8) = v12 & 1;
  return result;
}

uint64_t Double.init<A>(exactly:)(uint64_t a1, uint64_t a2)
{
  if (dispatch thunk of BinaryInteger.bitWidth.getter() > 64)
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    char v4 = static BinaryFloatingPoint<>._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    if (v4) {
      return v11;
    }
    goto LABEL_13;
  }
  char v6 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v7 = dispatch thunk of BinaryInteger._lowWord.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (v6)
  {
    double v8 = (double)v7;
    if ((double)v7 < 9.22337204e18)
    {
      *(double *)&uint64_t result = (double)v7;
      if ((~*(void *)&v8 & 0x7FF0000000000000) != 0)
      {
        if (v8 > -9.22337204e18)
        {
          uint64_t v9 = (uint64_t)v8;
          goto LABEL_12;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_17;
    }
  }
  else
  {
    double v10 = (double)(unint64_t)v7;
    if ((double)(unint64_t)v7 < 1.84467441e19)
    {
      *(double *)&uint64_t result = (double)(unint64_t)v7;
      if ((~*(void *)&v10 & 0x7FF0000000000000) != 0)
      {
        uint64_t v9 = (unint64_t)v10;
LABEL_12:
        if (v7 == v9) {
          return result;
        }
        goto LABEL_13;
      }
LABEL_17:
      __break(1u);
      return result;
    }
  }
LABEL_13:
  *(double *)&uint64_t result = 0.0;
  return result;
}

BOOL static NSRunLoop.SchedulerTimeType.Stride.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double static NSRunLoop.SchedulerTimeType.Stride.* infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 * *a2;
  *a3 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.+ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 + *a2;
  *a3 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.- infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 - *a2;
  *a3 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.*= infix(_:_:)(double *a1, double *a2)
{
  double result = *a2 * *a1;
  *a1 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.+= infix(_:_:)(double *a1, double *a2)
{
  double result = *a2 + *a1;
  *a1 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.-= infix(_:_:)(double *a1, double *a2)
{
  double result = *a1 - *a2;
  *a1 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.microseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000.0;
  *a2 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.nanoseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000000.0;
  *a2 = result;
  return result;
}

BOOL static NSRunLoop.SchedulerTimeType.Stride.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  return 0x647574696E67616DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x647574696E67616DLL && a2 == 0xE900000000000065)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSRunLoop.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSRunLoop.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  double v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

double protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double protocol witness for static SignedNumeric.- prefix(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = 0.0 - *a1;
  *a2 = result;
  return result;
}

double protocol witness for SignedNumeric.negate() in conformance NSRunLoop.SchedulerTimeType.Stride()
{
  double result = 0.0 - *v0;
  double *v0 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSRunLoop.SchedulerTimeType.Stride@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return NSRunLoop.SchedulerTimeType.Stride.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSRunLoop.SchedulerTimeType.Stride(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSRunLoop.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void protocol witness for static SchedulerTimeIntervalConvertible.seconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double protocol witness for static SchedulerTimeIntervalConvertible.microseconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000.0;
  *a2 = result;
  return result;
}

double protocol witness for static SchedulerTimeIntervalConvertible.nanoseconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000000.0;
  *a2 = result;
  return result;
}

double protocol witness for Numeric.magnitude.getter in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double protocol witness for static Numeric.* infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 * *a2;
  *a3 = result;
  return result;
}

double protocol witness for static Numeric.*= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride(double *a1, double *a2)
{
  double result = *a2 * *a1;
  *a1 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 + *a2;
  *a3 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride(double *a1, double *a2)
{
  double result = *a2 + *a1;
  *a1 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 - *a2;
  *a3 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride(double *a1, double *a2)
{
  double result = *a1 - *a2;
  *a1 = result;
  return result;
}

void NSRunLoop.SchedulerTimeType.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSRunLoop.SchedulerTimeType.CodingKeys()
{
  return 1702125924;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSRunLoop.SchedulerTimeType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSRunLoop.SchedulerTimeType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSRunLoop.SchedulerTimeType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NSRunLoop.SchedulerTimeType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSRunLoop.SchedulerTimeType.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  lazy protocol witness table accessor for type Date and conformance Date();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }
  return result;
}

Swift::Int NSRunLoop.SchedulerTimeType.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NSRunLoop.SchedulerTimeType.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSRunLoop.SchedulerTimeType.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  double v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance NSRunLoop.SchedulerTimeType(double *a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double *a6)
{
  *a1 = *a4 + *a6;
  return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSRunLoop.SchedulerTimeType@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return NSRunLoop.SchedulerTimeType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSRunLoop.SchedulerTimeType(void *a1)
{
  return NSRunLoop.SchedulerTimeType.encode(to:)(a1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance NSRunLoop.SchedulerTimeType(double *a1, double *a2)
{
  return *a2 - *a1 > 0.0;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType(double *a1, double *a2)
{
  return *a1 - *a2 <= 0.0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType(double *a1, double *a2)
{
  return *a2 - *a1 <= 0.0;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance NSRunLoop.SchedulerTimeType(double *a1, double *a2)
{
  return *a1 - *a2 > 0.0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSRunLoop.SchedulerTimeType(double *a1, double *a2)
{
  return *a2 - *a1 == 0.0;
}

void NSRunLoop.schedule(options:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  v8[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v8[5] = v6;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  uint64_t v8[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v8[3] = &block_descriptor_0;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_performBlock_, v7);
  _Block_release(v7);
}

uint64_t sub_181B3F1D0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

double NSRunLoop.now.getter@<D0>(double *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

void NSRunLoop.minimumTolerance.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void @objc NSRunLoop.runLoopScheduled(action:)(void *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(void (**)(void))&a3[OBJC_IVAR____TtC10FoundationP33_AE6BD10245B422606B9EE93C01570D8F21_CombineRunLoopAction_action];
  uint64_t v5 = a3;
  id v6 = a1;
  v4();
}

id _CombineRunLoopAction.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _CombineRunLoopAction();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_181B3F38C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in NSRunLoop.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E4FBB450];
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride()
{
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

uint64_t associated type witness table accessor for Numeric.Magnitude : Numeric in NSRunLoop.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E4FBB410];
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in NSRunLoop.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E4FBB458];
}

uint64_t type metadata accessor for _CombineRunLoopAction()
{
  return self;
}

void *type metadata accessor for NSRunLoop.SchedulerTimeType.CodingKeys()
{
  return &unk_1ECA50EE0;
}

unsigned char *storeEnumTagSinglePayload for NSRunLoop.SchedulerTimeType.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181B3F724);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  return &unk_1ECA50F70;
}

uint64_t (*PropertyListEncoder.outputFormat.modify(void *a1))(void *a1)
{
  int v3 = *(os_unfair_lock_s **)(v1 + 32);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 16);
  return PropertyListEncoder.outputFormat.modify;
}

uint64_t PropertyListEncoder.outputFormat.modify(void *a1)
{
  uint64_t v1 = (os_unfair_lock_s *)a1[2];
  *(void *)(a1[1] + 16) = *a1;
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);

  return swift_release();
}

uint64_t PropertyListEncoder.userInfo.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 32);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t PropertyListEncoder.userInfo.setter(uint64_t a1)
{
  int v3 = *(os_unfair_lock_s **)(v1 + 32);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + 24) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

void *PropertyListEncoder.__allocating_init()()
{
  uint64_t v0 = (void *)swift_allocObject();
  uint64_t v1 = MEMORY[0x1E4FBC868];
  v0[2] = 200;
  v0[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  v0[4] = v2;
  return v0;
}

unint64_t PropertyListEncoder.encode<A>(_:configuration:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4)
{
  id v6 = v5;
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v4 + 96))();
  if (v11 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 40) = v17;
    *(void *)(inited + 48) = 0xD000000000000038;
    *(void *)(inited + 56) = 0x80000001823AAEA0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    char v18 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v58);
    uint64_t v19 = v58;
    uint64_t v20 = v59;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
    if (v22)
    {
      __break(1u);
    }
    else
    {
      v18[(result >> 6) + 8] |= 1 << result;
      char v23 = (uint64_t *)(v18[6] + 16 * result);
      *char v23 = v19;
      v23[1] = v20;
      unint64_t result = (unint64_t)outlined init with take of Any(&v60, (_OWORD *)(v18[7] + 32 * result));
      uint64_t v24 = v18[2];
      BOOL v25 = __OFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (!v25)
      {
        v18[2] = v26;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v27 = objc_allocWithZone((Class)NSError);
        uint64_t v28 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v6 = objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, 3852, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        a2 = objc_msgSend(v6, sel_domain);
        id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        uint64_t v31 = v30;

        if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v31 == v32) {
          goto LABEL_18;
        }
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v33)
        {
LABEL_20:
          swift_willThrow();
          goto LABEL_21;
        }
        __break(1u);
LABEL_12:
        char v34 = PropertyListEncoder._encodeXML<A>(_:configuration:)(a1, (uint64_t)a2, a3);
        if (!v6) {
          return (unint64_t)v34;
        }
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v12 = v11;
  if (v11 == 100) {
    goto LABEL_12;
  }
  if (v11 == 200)
  {
    uint64_t v13 = PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:configuration:)(a1, (uint64_t)a2, a3, a4);
    if (!v5)
    {
      uint64_t v14 = (uint64_t)v13;
      uint64_t v15 = swift_slowAlloc();
      uint64_t v58 = MEMORY[0x1E4FBC860];
      LOBYTE(v59) = 0;
      *(void *)&long long v60 = v15;
      *((void *)&v60 + 1) = 0x2000;
      uint64_t v61 = 0;
      id v6 = (id)_BPlistEncodingFormat.Writer.serializePlist(_:)(v14);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(0, 0xC000000000000000);
      swift_release();
      return (unint64_t)v6;
    }
LABEL_21:
    uint64_t v53 = type metadata accessor for EncodingError();
    swift_allocError();
    char v55 = v54;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v55[3] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v55);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
    id v57 = v6;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v53 - 8) + 104))(v55, *MEMORY[0x1E4FBBAA0], v53);
    swift_willThrow();

    return (unint64_t)v6;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = xmmword_1821037E0;
  *(void *)(v35 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v35 + 40) = v36;
  uint64_t v58 = 0;
  unint64_t v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  v37._object = (void *)0x80000001823AAE40;
  v37._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v37);
  uint64_t v62 = v12;
  type metadata accessor for NSPropertyListFormat(0);
  _print_unlocked<A, B>(_:_:)();
  *(void *)(v35 + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(v35 + 48) = 0;
  *(void *)(v35 + 56) = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  char v38 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(v35 + 32, (uint64_t)&v58);
  uint64_t v39 = v58;
  uint64_t v40 = v59;
  swift_retain();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
  if (v41) {
    goto LABEL_26;
  }
  v38[(result >> 6) + 8] |= 1 << result;
  unsigned int v42 = (uint64_t *)(v38[6] + 16 * result);
  *unsigned int v42 = v39;
  v42[1] = v40;
  unint64_t result = (unint64_t)outlined init with take of Any(&v60, (_OWORD *)(v38[7] + 32 * result));
  uint64_t v43 = v38[2];
  BOOL v25 = __OFADD__(v43, 1);
  uint64_t v44 = v43 + 1;
  if (v25)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v38[2] = v44;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v45 = objc_allocWithZone((Class)NSError);
  uint64_t v46 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v45, sel_initWithDomain_code_userInfo_, v46, 3852, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v47 = objc_msgSend(v6, sel_domain);
  id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  uint64_t v50 = v49;

  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v50 == v51)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    goto LABEL_20;
  }
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if (v52) {
    goto LABEL_20;
  }
LABEL_28:
  __break(1u);
  return result;
}

void **PropertyListEncoder._encodeXML<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  p_src = &__src;
  PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:configuration:)(a1, a3, (uint64_t)&__src);
  if (!v3)
  {
    uint64_t v5 = __src;
    unint64_t v6 = v14;
    char v7 = v15;
    __src = (void *)swift_slowAlloc();
    uint64_t v14 = 0x2000;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 0xC000000000000000;
    _XMLPlistEncodingFormat.Writer.append(_:)("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n", 164);
    uint64_t v10 = (uint64_t)v5;
    unint64_t v11 = v6;
    char v12 = v7;
    _XMLPlistEncodingFormat.Writer.append(_:indentation:)((uint64_t)&v10, 0);
    uint64_t v10 = 0x3E7473696C702F3CLL;
    unint64_t v11 = 0xE90000000000000ALL;
    specialized String.withUTF8<A>(_:)(&v10);
    swift_bridgeObjectRelease();
    if (v15 >= 1)
    {
      if (__src) {
        double v8 = (char *)__src + v15;
      }
      else {
        double v8 = 0;
      }
      Data._Representation.append(contentsOf:)(__src, v8);
    }
    p_src = v16;
    if (__src) {
      MEMORY[0x185309510](__src, -1, -1);
    }
    outlined consume of _XMLPlistEncodingFormat.Reference((uint64_t)v5, v6, v7);
  }
  return p_src;
}

uint64_t PropertyListEncoder.encode<A, B>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  double v15 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v17 = (char *)&v20 - v16;
  (*(void (**)(uint64_t, uint64_t, double))(a6 + 16))(a4, a6, v15);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v7 + 200))(a1, v17, a3, a5);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
  return v18;
}

uint64_t *PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  type metadata accessor for __PlistEncoderBPlist();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x1E4FBC860];
  *(void *)(v12 + 24) = v11;
  *(void *)(v12 + 32) = v10;
  *(void *)(v12 + 16) = v13;
  *(_OWORD *)(v12 + 40) = xmmword_18210F290;
  specialized _BPlistEncodingFormat.init()((uint64_t *)v27);
  long long v14 = v27[1];
  *(_OWORD *)(v12 + 56) = v27[0];
  *(_OWORD *)(v12 + 72) = v14;
  *(void *)(v12 + 88) = v28;
  void v24[2] = a3;
  v24[3] = a4;
  v24[4] = a1;
  v24[5] = a2;
  swift_bridgeObjectRetain();
  double v15 = (uint64_t *)v12;
  uint64_t v16 = specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)((void (*)(void *))partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:), (uint64_t)v24, 0x8000000000000000, 0, 0, 0, 255);
  if (!v5)
  {
    double v15 = (uint64_t *)v16;
    if (!v16)
    {
      uint64_t v18 = type metadata accessor for EncodingError();
      swift_allocError();
      uint64_t v20 = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      v20[3] = a3;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
      uint64_t v25 = 0;
      unint64_t v26 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      uint64_t v25 = 0x6576656C2D706F54;
      unint64_t v26 = 0xEA0000000000206CLL;
      v22._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._object = (void *)0x80000001823AAF20;
      double v15 = &v25;
      v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v23);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBAA0], v18);
      swift_willThrow();
    }
  }
  swift_release();
  return v15;
}

uint64_t PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  type metadata accessor for __PlistEncoderXML();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v10 + 24) = v9;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 40) = 0x8000000000000000;
  *(void *)(v10 + 56) = 0;
  *(void *)(v10 + 64) = 0;
  *(void *)(v10 + 48) = 0;
  *(unsigned char *)(v10 + 72) = 8;
  *(_OWORD *)(v10 + 80) = xmmword_18210C780;
  *(unsigned char *)(v10 + 96) = 8;
  *(_OWORD *)(v10 + 104) = xmmword_18210F2A0;
  *(unsigned char *)(v10 + 120) = 8;
  swift_bridgeObjectRetain();
  specialized __PlistEncoderXML._wrapGeneric<A>(_:for:_:)((void (*)(void *))partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:configuration:for:_:), 0x8000000000000000, 0, 0, 0, 255, (uint64_t)&v21);
  if (v4) {
    return swift_release();
  }
  unsigned __int8 v12 = v23;
  if (v23 == 255)
  {
    uint64_t v15 = type metadata accessor for EncodingError();
    swift_allocError();
    unint64_t v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v17[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    uint64_t v21 = 0x6576656C2D706F54;
    unint64_t v22 = 0xEA0000000000206CLL;
    v19._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x80000001823AAF20;
    v20._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v20);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBAA0], v15);
    swift_willThrow();
    return swift_release();
  }
  uint64_t v14 = v21;
  unint64_t v13 = v22;
  uint64_t result = swift_release();
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v13;
  *(unsigned char *)(a3 + 16) = v12;
  return result;
}

uint64_t PropertyListEncoder.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), unint64_t *a7, void (*a8)(uint64_t))
{
  v16[3] = a6(0);
  v16[4] = lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML(a7, a8);
  v16[0] = a1;
  uint64_t v14 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a5 + 16);
  swift_retain();
  v14(v16, a3, a4, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_181B40C24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_181B40C70(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 104))(*a1);
}

uint64_t sub_181B40CB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_181B40D04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for PropertyListEncoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PropertyListEncoder);
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PropertyListEncoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A, B>(_:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

void *initializeBufferWithCopyOfBuffer for PropertyListEncoder._Options(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PropertyListEncoder._Options(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for PropertyListEncoder._Options(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PropertyListEncoder._Options()
{
  return &type metadata for PropertyListEncoder._Options;
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:configuration:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(void))type metadata accessor for __PlistEncoderXML, &lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML, (void (*)(uint64_t))type metadata accessor for __PlistEncoderXML);
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(void))type metadata accessor for __PlistEncoderBPlist, &lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist, (void (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist);
}

uint64_t lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t URL.ParseStrategy.requiredComponentsValue.getter()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  unint64_t v6 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  unint64_t v7 = *(void *)(v0 + 56);
  unsigned __int8 v24 = *(unsigned char *)(v0 + 72);
  unint64_t v8 = *(void *)(v0 + 88);
  unint64_t v9 = *(void *)(v0 + 104);
  uint64_t v20 = *(void *)(v0 + 80);
  uint64_t v21 = *(void *)(v0 + 96);
  uint64_t v22 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 64);
  unint64_t v25 = *(void *)(v0 + 120);
  if (v2)
  {
    uint64_t v10 = *(void *)v0;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v10, v2);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v10, v2);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
    uint64_t v11 = 0;
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v11 = 1;
    if (v3)
    {
LABEL_3:
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v1, v3);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v1, v3);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
      uint64_t v12 = 0;
      if (v6) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v13 = 4;
      if (v7) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }
  uint64_t v12 = 2;
  if (!v6) {
    goto LABEL_8;
  }
LABEL_4:
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v6);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v6);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
  uint64_t v13 = 0;
  if (v7)
  {
LABEL_5:
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v5, v7);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v5, v7);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
    uint64_t v14 = 0;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v14 = 8;
LABEL_10:
  if ((v24 & (v23 == 0)) != 0) {
    uint64_t v15 = 16;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v8)
  {
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v20, v8);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v20, v8);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
    uint64_t v16 = 0;
    if (v9)
    {
LABEL_15:
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v21, v9);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v21, v9);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
      uint64_t v17 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = 32;
    if (v9) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = 64;
LABEL_18:
  uint64_t v18 = v11 | v15 | v12 | v13 | v14 | v16 | v17;
  if (!v25) {
    return v18 | 0x80;
  }
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v22, v25);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v22, v25);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
  return v18;
}

uint64_t specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2)
  {
    if (!a4) {
      return 1;
    }
    goto LABEL_8;
  }
  if (a2 == 1)
  {
    if (a4 == 1) {
      return 1;
    }
LABEL_8:
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(a1, a2);
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(a3, a4);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(a1, a2);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(a3, a4);
    return 0;
  }
  if (a4 < 2) {
    goto LABEL_8;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v8;
  uint64_t v37 = v9;
  uint64_t v38 = v10;
  uint64_t v39 = v11;
  uint64_t v40 = v8;
  uint64_t v12 = type metadata accessor for URL.ParseStrategy.ComponentParseStrategy();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v36 = (char *)&v31 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = *(void *)(TupleTypeMetadata2 - 8);
  double v17 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  Swift::String v19 = (char *)&v31 - v18;
  uint64_t v34 = v13;
  uint64_t v35 = v20;
  uint64_t v21 = (char *)&v31 + *(int *)(v20 + 48) - v18;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v22((char *)&v31 - v18, a1, v12, v17);
  ((void (*)(char *, uint64_t, uint64_t))v22)(v21, a2, v12);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v24 = v23(v19, 2, a3);
  if (v24)
  {
    if (v24 == 1)
    {
      if (v23(v21, 2, a3) != 1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    if (v23(v21, 2, a3) == 2)
    {
LABEL_8:
      char v25 = 1;
LABEL_11:
      uint64_t v16 = v34;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v31 = v6;
    ((void (*)(char *, char *, uint64_t))v22)(v36, v19, v12);
    if (!v23(v21, 2, a3))
    {
      uint64_t v26 = v31;
      id v27 = v32;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v32, v21, a3);
      uint64_t v28 = v36;
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v29 = *(void (**)(char *, uint64_t))(v26 + 8);
      v29(v27, a3);
      v29(v28, a3);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a3);
  }
LABEL_9:
  char v25 = 0;
  uint64_t v12 = v35;
LABEL_12:
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v12);
  return v25 & 1;
}

uint64_t type metadata accessor for URL.ParseStrategy.ComponentParseStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t URL.ParseStrategy.defaultValues.getter()
{
  unint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(void *)(v0 + 40);
  uint64_t v237 = *(void *)(v0 + 48);
  uint64_t v238 = *(void *)(v0 + 32);
  int64_t v239 = *(void *)(v0 + 16);
  uint64_t v240 = *(char **)(v0 + 56);
  unint64_t v5 = *(unsigned __int8 *)(v0 + 72);
  unint64_t v6 = *(void *)(v0 + 88);
  unint64_t v7 = *(void *)(v0 + 104);
  uint64_t v234 = *(void *)(v0 + 96);
  uint64_t v235 = *(void *)(v0 + 80);
  unint64_t v8 = *(void *)(v0 + 120);
  uint64_t v236 = *(void *)(v0 + 112);
  unint64_t v9 = MEMORY[0x1E4FBC868];
  unint64_t v242 = MEMORY[0x1E4FBC868];
  unint64_t v241 = v4;
  if (v1 < 2) {
    goto LABEL_11;
  }
  unsigned int v233 = *(unsigned __int8 *)(v0 + 72);
  unint64_t v5 = *(void *)(v0 + 88);
  unint64_t v232 = *(void *)(v0 + 104);
  unint64_t v6 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(1);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_76;
  }
  LOBYTE(v4) = v11;
  if (*(void *)(v9 + 24) >= v14)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_82;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(1);
    if ((v4 & 1) != (v16 & 1)) {
      goto LABEL_334;
    }
    unint64_t v7 = v15;
  }
  while (1)
  {
    unint64_t v8 = v6;
    unint64_t v6 = v5;
    if (v4)
    {
      double v17 = (unint64_t *)(*(void *)(v9 + 56) + 16 * v7);
      swift_bridgeObjectRelease();
      *double v17 = v2;
      v17[1] = v1;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v7, 1, v2, v1, (void *)v9);
    }
    unint64_t v5 = v233;
    unint64_t v4 = v241;
    unint64_t v242 = v9;
    swift_bridgeObjectRelease();
    unint64_t v7 = v232;
LABEL_11:
    if (v3 < 2)
    {
      unint64_t v1 = v9;
      unint64_t v18 = (unint64_t)v240;
      if (v4 >= 2) {
        goto LABEL_29;
      }
LABEL_13:
      unint64_t v3 = v1;
      if (v18 >= 2) {
        goto LABEL_38;
      }
LABEL_14:
      unint64_t v4 = v3;
      if ((v5 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_15:
      unint64_t v3 = v4;
      if (v6 >= 2) {
        goto LABEL_56;
      }
LABEL_16:
      unint64_t v4 = v3;
      if (v7 >= 2) {
        goto LABEL_65;
      }
LABEL_17:
      unint64_t v19 = v4;
      if (v8 < 2) {
        return v19;
      }
      goto LABEL_18;
    }
    swift_bridgeObjectRetain();
    unint64_t v1 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(2);
    uint64_t v23 = *(void *)(v9 + 16);
    BOOL v24 = (v22 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    char v26 = v22;
    if (*(void *)(v9 + 24) < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v1);
      unint64_t v1 = v9;
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(2);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_334;
      }
      unint64_t v2 = v27;
      unint64_t v18 = (unint64_t)v240;
      if ((v26 & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_24;
    }
    if (v1)
    {
      unint64_t v1 = v9;
      unint64_t v18 = (unint64_t)v240;
      if ((v22 & 1) == 0) {
        goto LABEL_27;
      }
LABEL_24:
      id v29 = (int64_t *)(*(void *)(v1 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *id v29 = v239;
      v29[1] = v3;
      goto LABEL_28;
    }
    unsigned int v233 = v5;
    unint64_t v96 = v6;
    unint64_t v232 = v7;
    unint64_t v97 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    uint64_t v98 = static _DictionaryStorage.copy(original:)();
    unint64_t v1 = v98;
    if (!*(void *)(v9 + 16)) {
      goto LABEL_308;
    }
    unint64_t v99 = (char *)(v98 + 64);
    __srca = (char *)(v9 + 64);
    unint64_t v100 = (unint64_t)((1 << *(unsigned char *)(v1 + 32)) + 63) >> 6;
    if (v1 != v9 || v99 >= &__srca[8 * v100]) {
      memmove(v99, __srca, 8 * v100);
    }
    int64_t v101 = 0;
    *(void *)(v1 + 16) = *(void *)(v9 + 16);
    uint64_t v102 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v103 = -1;
    if (v102 < 64) {
      uint64_t v103 = ~(-1 << v102);
    }
    unint64_t v104 = v103 & *(void *)(v9 + 64);
    int64_t v105 = (unint64_t)(v102 + 63) >> 6;
    while (1)
    {
      if (v104)
      {
        unint64_t v106 = __clz(__rbit64(v104));
        v104 &= v104 - 1;
        unint64_t v107 = v106 | (v101 << 6);
        goto LABEL_123;
      }
      int64_t v115 = v101 + 1;
      if (__OFADD__(v101, 1)) {
        goto LABEL_321;
      }
      if (v115 >= v105) {
        goto LABEL_308;
      }
      unint64_t v116 = *(void *)&__srca[8 * v115];
      ++v101;
      if (!v116)
      {
        int64_t v101 = v115 + 1;
        if (v115 + 1 >= v105) {
          goto LABEL_308;
        }
        unint64_t v116 = *(void *)&__srca[8 * v101];
        if (!v116)
        {
          int64_t v101 = v115 + 2;
          if (v115 + 2 >= v105) {
            goto LABEL_308;
          }
          unint64_t v116 = *(void *)&__srca[8 * v101];
          if (!v116)
          {
            int64_t v101 = v115 + 3;
            if (v115 + 3 >= v105) {
              goto LABEL_308;
            }
            unint64_t v116 = *(void *)&__srca[8 * v101];
            if (!v116)
            {
              int64_t v101 = v115 + 4;
              if (v115 + 4 >= v105) {
                goto LABEL_308;
              }
              unint64_t v116 = *(void *)&__srca[8 * v101];
              if (!v116)
              {
                int64_t v101 = v115 + 5;
                if (v115 + 5 >= v105) {
                  goto LABEL_308;
                }
                unint64_t v116 = *(void *)&__srca[8 * v101];
                if (!v116)
                {
                  int64_t v101 = v115 + 6;
                  if (v115 + 6 >= v105) {
                    goto LABEL_308;
                  }
                  unint64_t v116 = *(void *)&__srca[8 * v101];
                  if (!v116) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
LABEL_146:
      unint64_t v104 = (v116 - 1) & v116;
      unint64_t v107 = __clz(__rbit64(v116)) + (v101 << 6);
LABEL_123:
      uint64_t v108 = 8 * v107;
      uint64_t v109 = *(void *)(*(void *)(v9 + 48) + 8 * v107);
      uint64_t v110 = 16 * v107;
      uint64_t v111 = (uint64_t *)(*(void *)(v9 + 56) + v110);
      uint64_t v113 = *v111;
      uint64_t v112 = v111[1];
      *(void *)(*(void *)(v1 + 48) + v108) = v109;
      uint64_t v114 = (void *)(*(void *)(v1 + 56) + v110);
      *uint64_t v114 = v113;
      v114[1] = v112;
      swift_bridgeObjectRetain();
    }
    int64_t v117 = v115 + 7;
    if (v117 >= v105) {
      goto LABEL_308;
    }
    unint64_t v116 = *(void *)&__srca[8 * v117];
    if (v116)
    {
      int64_t v101 = v117;
      goto LABEL_146;
    }
    while (1)
    {
      int64_t v101 = v117 + 1;
      if (__OFADD__(v117, 1)) {
        goto LABEL_328;
      }
      if (v101 >= v105) {
        break;
      }
      unint64_t v116 = *(void *)&__srca[8 * v101];
      ++v117;
      if (v116) {
        goto LABEL_146;
      }
    }
LABEL_308:
    swift_bridgeObjectRelease();
    unint64_t v8 = v97;
    unint64_t v7 = v232;
    unint64_t v6 = v96;
    unint64_t v5 = v233;
    unint64_t v18 = (unint64_t)v240;
    if (v26) {
      goto LABEL_24;
    }
LABEL_27:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 2, v239, v3, (void *)v1);
LABEL_28:
    LOBYTE(v4) = v241;
    unint64_t v242 = v1;
    swift_bridgeObjectRelease();
    if (v241 < 2) {
      goto LABEL_13;
    }
LABEL_29:
    swift_bridgeObjectRetain();
    unint64_t v3 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(4);
    uint64_t v31 = *(void *)(v1 + 16);
    BOOL v32 = (v30 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      goto LABEL_77;
    }
    char v34 = v30;
    if (*(void *)(v1 + 24) < v33)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, v3);
      unint64_t v3 = v1;
      unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(4);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_334;
      }
      unint64_t v2 = v35;
      if ((v34 & 1) == 0) {
        goto LABEL_36;
      }
      goto LABEL_33;
    }
    if (v3)
    {
      unint64_t v3 = v1;
      if ((v30 & 1) == 0) {
        goto LABEL_36;
      }
      goto LABEL_33;
    }
    unsigned int v233 = v5;
    unint64_t v118 = v6;
    unint64_t v232 = v7;
    unint64_t v119 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    uint64_t v120 = static _DictionaryStorage.copy(original:)();
    unint64_t v3 = v120;
    if (!*(void *)(v1 + 16)) {
      goto LABEL_310;
    }
    uint64_t v121 = (void *)(v120 + 64);
    unint64_t v122 = v1 + 64;
    unint64_t v123 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
    if (v3 != v1 || (unint64_t)v121 >= v122 + 8 * v123) {
      memmove(v121, (const void *)(v1 + 64), 8 * v123);
    }
    int64_t v124 = 0;
    *(void *)(v3 + 16) = *(void *)(v1 + 16);
    uint64_t v125 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v126 = -1;
    if (v125 < 64) {
      uint64_t v126 = ~(-1 << v125);
    }
    unint64_t v127 = v126 & *(void *)(v1 + 64);
    int64_t v128 = (unint64_t)(v125 + 63) >> 6;
    while (2)
    {
      if (v127)
      {
        unint64_t v129 = __clz(__rbit64(v127));
        v127 &= v127 - 1;
        unint64_t v130 = v129 | (v124 << 6);
LABEL_155:
        uint64_t v131 = 8 * v130;
        uint64_t v132 = *(void *)(*(void *)(v1 + 48) + 8 * v130);
        uint64_t v133 = 16 * v130;
        char v134 = (uint64_t *)(*(void *)(v1 + 56) + v133);
        uint64_t v136 = *v134;
        uint64_t v135 = v134[1];
        *(void *)(*(void *)(v3 + 48) + v131) = v132;
        unint64_t v137 = (void *)(*(void *)(v3 + 56) + v133);
        *unint64_t v137 = v136;
        v137[1] = v135;
        swift_bridgeObjectRetain();
        continue;
      }
      break;
    }
    int64_t v138 = v124 + 1;
    if (__OFADD__(v124, 1)) {
      goto LABEL_322;
    }
    unint64_t v18 = (unint64_t)v240;
    if (v138 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v138);
    ++v124;
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 1;
    if (v138 + 1 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 2;
    if (v138 + 2 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 3;
    if (v138 + 3 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 4;
    if (v138 + 4 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 5;
    if (v138 + 5 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 6;
    if (v138 + 6 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139)
    {
LABEL_178:
      unint64_t v127 = (v139 - 1) & v139;
      unint64_t v130 = __clz(__rbit64(v139)) + (v124 << 6);
      goto LABEL_155;
    }
    int64_t v140 = v138 + 7;
    if (v140 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v140);
    if (v139)
    {
      int64_t v124 = v140;
      goto LABEL_178;
    }
    while (1)
    {
      int64_t v124 = v140 + 1;
      if (__OFADD__(v140, 1)) {
        goto LABEL_329;
      }
      unint64_t v18 = (unint64_t)v240;
      if (v124 >= v128) {
        break;
      }
      unint64_t v139 = *(void *)(v122 + 8 * v124);
      ++v140;
      if (v139) {
        goto LABEL_178;
      }
    }
LABEL_310:
    swift_bridgeObjectRelease();
    unint64_t v8 = v119;
    unint64_t v7 = v232;
    unint64_t v6 = v118;
    unint64_t v5 = v233;
    if (v34)
    {
LABEL_33:
      uint64_t v37 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *uint64_t v37 = v238;
      v37[1] = v241;
      goto LABEL_37;
    }
LABEL_36:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 4, v238, v241, (void *)v3);
LABEL_37:
    unint64_t v242 = v3;
    swift_bridgeObjectRelease();
    if (v18 < 2) {
      goto LABEL_14;
    }
LABEL_38:
    swift_bridgeObjectRetain();
    LOBYTE(v4) = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(8);
    uint64_t v39 = *(void *)(v3 + 16);
    BOOL v40 = (v38 & 1) == 0;
    uint64_t v41 = v39 + v40;
    if (__OFADD__(v39, v40)) {
      goto LABEL_78;
    }
    unint64_t v1 = v38;
    if (*(void *)(v3 + 24) < v41)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, v4);
      unint64_t v4 = v3;
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(8);
      if ((v1 & 1) != (v43 & 1)) {
        goto LABEL_334;
      }
      unint64_t v2 = v42;
      uint64_t v44 = v237;
      if ((v1 & 1) == 0) {
        goto LABEL_45;
      }
      goto LABEL_42;
    }
    if (v4)
    {
      unint64_t v4 = v3;
      uint64_t v44 = v237;
      if ((v38 & 1) == 0) {
        goto LABEL_45;
      }
      goto LABEL_42;
    }
    unsigned int v233 = v5;
    unint64_t v241 = v6;
    unint64_t v141 = v7;
    unint64_t v142 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    uint64_t v143 = static _DictionaryStorage.copy(original:)();
    unint64_t v4 = v143;
    if (!*(void *)(v3 + 16)) {
      goto LABEL_312;
    }
    unsigned int v144 = (void *)(v143 + 64);
    unint64_t v145 = v3 + 64;
    unint64_t v146 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
    if (v4 != v3 || (unint64_t)v144 >= v145 + 8 * v146) {
      memmove(v144, (const void *)(v3 + 64), 8 * v146);
    }
    int64_t v147 = 0;
    *(void *)(v4 + 16) = *(void *)(v3 + 16);
    uint64_t v148 = 1 << *(unsigned char *)(v3 + 32);
    uint64_t v149 = -1;
    if (v148 < 64) {
      uint64_t v149 = ~(-1 << v148);
    }
    unint64_t v150 = v149 & *(void *)(v3 + 64);
    int64_t v151 = (unint64_t)(v148 + 63) >> 6;
    while (2)
    {
      if (v150)
      {
        unint64_t v152 = __clz(__rbit64(v150));
        v150 &= v150 - 1;
        unint64_t v153 = v152 | (v147 << 6);
LABEL_187:
        uint64_t v154 = 8 * v153;
        uint64_t v155 = *(void *)(*(void *)(v3 + 48) + 8 * v153);
        uint64_t v156 = 16 * v153;
        uint64_t v157 = (uint64_t *)(*(void *)(v3 + 56) + v156);
        uint64_t v159 = *v157;
        uint64_t v158 = v157[1];
        *(void *)(*(void *)(v4 + 48) + v154) = v155;
        unint64_t v160 = (void *)(*(void *)(v4 + 56) + v156);
        *unint64_t v160 = v159;
        v160[1] = v158;
        swift_bridgeObjectRetain();
        continue;
      }
      break;
    }
    int64_t v161 = v147 + 1;
    if (__OFADD__(v147, 1)) {
      goto LABEL_323;
    }
    unint64_t v18 = (unint64_t)v240;
    if (v161 >= v151) {
      goto LABEL_312;
    }
    unint64_t v162 = *(void *)(v145 + 8 * v161);
    ++v147;
    if (v162) {
      goto LABEL_210;
    }
    int64_t v147 = v161 + 1;
    if (v161 + 1 >= v151) {
      goto LABEL_312;
    }
    unint64_t v162 = *(void *)(v145 + 8 * v147);
    if (v162) {
      goto LABEL_210;
    }
    int64_t v147 = v161 + 2;
    if (v161 + 2 >= v151) {
      goto LABEL_312;
    }
    unint64_t v162 = *(void *)(v145 + 8 * v147);
    if (v162) {
      goto LABEL_210;
    }
    int64_t v147 = v161 + 3;
    if (v161 + 3 >= v151) {
      goto LABEL_312;
    }
    unint64_t v162 = *(void *)(v145 + 8 * v147);
    if (v162) {
      goto LABEL_210;
    }
    int64_t v147 = v161 + 4;
    if (v161 + 4 >= v151) {
      goto LABEL_312;
    }
    unint64_t v162 = *(void *)(v145 + 8 * v147);
    if (v162) {
      goto LABEL_210;
    }
    int64_t v147 = v161 + 5;
    if (v161 + 5 >= v151) {
      goto LABEL_312;
    }
    unint64_t v162 = *(void *)(v145 + 8 * v147);
    if (v162) {
      goto LABEL_210;
    }
    int64_t v147 = v161 + 6;
    if (v161 + 6 >= v151) {
      goto LABEL_312;
    }
    unint64_t v162 = *(void *)(v145 + 8 * v147);
    if (v162)
    {
LABEL_210:
      unint64_t v150 = (v162 - 1) & v162;
      unint64_t v153 = __clz(__rbit64(v162)) + (v147 << 6);
      goto LABEL_187;
    }
    int64_t v163 = v161 + 7;
    if (v163 >= v151) {
      goto LABEL_312;
    }
    unint64_t v162 = *(void *)(v145 + 8 * v163);
    if (v162)
    {
      int64_t v147 = v163;
      goto LABEL_210;
    }
    while (1)
    {
      int64_t v147 = v163 + 1;
      if (__OFADD__(v163, 1)) {
        goto LABEL_330;
      }
      unint64_t v18 = (unint64_t)v240;
      if (v147 >= v151) {
        break;
      }
      unint64_t v162 = *(void *)(v145 + 8 * v147);
      ++v163;
      if (v162) {
        goto LABEL_210;
      }
    }
LABEL_312:
    swift_bridgeObjectRelease();
    unint64_t v8 = v142;
    unint64_t v7 = v141;
    unint64_t v6 = v241;
    unint64_t v5 = v233;
    uint64_t v44 = v237;
    if (v1)
    {
LABEL_42:
      id v45 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *id v45 = v44;
      v45[1] = v18;
      goto LABEL_46;
    }
LABEL_45:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 8, v44, v18, (void *)v4);
LABEL_46:
    unint64_t v242 = v4;
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_15;
    }
LABEL_47:
    unint64_t v5 = v6;
    unint64_t v46 = v7;
    unint64_t v6 = v8;
    unint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v1 = v47;
    unint64_t v3 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(16);
    uint64_t v50 = *(void *)(v4 + 16);
    BOOL v51 = (v48 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      goto LABEL_79;
    }
    char v53 = v48;
    if (*(void *)(v4 + 24) < v52)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v3);
      unint64_t v3 = v4;
      unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(16);
      if ((v53 & 1) != (v55 & 1)) {
        goto LABEL_334;
      }
      unint64_t v49 = v54;
      if ((v53 & 1) == 0) {
        goto LABEL_54;
      }
      goto LABEL_51;
    }
    if (v3)
    {
      unint64_t v3 = v4;
      if ((v48 & 1) == 0) {
        goto LABEL_54;
      }
      goto LABEL_51;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    uint64_t v164 = static _DictionaryStorage.copy(original:)();
    unint64_t v3 = v164;
    if (!*(void *)(v4 + 16)) {
      goto LABEL_314;
    }
    uint64_t v165 = (char *)(v164 + 64);
    uint64_t v240 = (char *)(v4 + 64);
    unint64_t v166 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
    if (v3 != v4 || v165 >= &v240[8 * v166]) {
      memmove(v165, v240, 8 * v166);
    }
    unint64_t v167 = 0;
    *(void *)(v3 + 16) = *(void *)(v4 + 16);
    uint64_t v168 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v169 = -1;
    if (v168 < 64) {
      uint64_t v169 = ~(-1 << v168);
    }
    unint64_t v170 = v169 & *(void *)(v4 + 64);
    int64_t v239 = (unint64_t)(v168 + 63) >> 6;
    while (2)
    {
      if (v170)
      {
        unint64_t v171 = __clz(__rbit64(v170));
        v170 &= v170 - 1;
        unint64_t v241 = v167;
        unint64_t v172 = v171 | (v167 << 6);
LABEL_219:
        uint64_t v173 = 8 * v172;
        uint64_t v174 = *(void *)(*(void *)(v4 + 48) + 8 * v172);
        uint64_t v175 = 16 * v172;
        int v176 = (uint64_t *)(*(void *)(v4 + 56) + v175);
        uint64_t v178 = *v176;
        uint64_t v177 = v176[1];
        *(void *)(*(void *)(v3 + 48) + v173) = v174;
        int v179 = (void *)(*(void *)(v3 + 56) + v175);
        *int v179 = v178;
        v179[1] = v177;
        swift_bridgeObjectRetain();
        unint64_t v167 = v241;
        continue;
      }
      break;
    }
    int64_t v180 = v167 + 1;
    if (__OFADD__(v167, 1)) {
      goto LABEL_324;
    }
    if (v180 >= v239) {
      goto LABEL_314;
    }
    unint64_t v181 = *(void *)&v240[8 * v180];
    int64_t v182 = v167 + 1;
    if (v181) {
      goto LABEL_242;
    }
    int64_t v182 = v167 + 2;
    if ((uint64_t)(v167 + 2) >= v239) {
      goto LABEL_314;
    }
    unint64_t v181 = *(void *)&v240[8 * v182];
    if (v181) {
      goto LABEL_242;
    }
    int64_t v182 = v167 + 3;
    if ((uint64_t)(v167 + 3) >= v239) {
      goto LABEL_314;
    }
    unint64_t v181 = *(void *)&v240[8 * v182];
    if (v181) {
      goto LABEL_242;
    }
    int64_t v182 = v167 + 4;
    if ((uint64_t)(v167 + 4) >= v239) {
      goto LABEL_314;
    }
    unint64_t v181 = *(void *)&v240[8 * v182];
    if (v181) {
      goto LABEL_242;
    }
    int64_t v182 = v167 + 5;
    if ((uint64_t)(v167 + 5) >= v239) {
      goto LABEL_314;
    }
    unint64_t v181 = *(void *)&v240[8 * v182];
    if (v181) {
      goto LABEL_242;
    }
    int64_t v182 = v167 + 6;
    if ((uint64_t)(v167 + 6) >= v239) {
      goto LABEL_314;
    }
    unint64_t v181 = *(void *)&v240[8 * v182];
    if (v181) {
      goto LABEL_242;
    }
    int64_t v182 = v167 + 7;
    if ((uint64_t)(v167 + 7) >= v239) {
      goto LABEL_314;
    }
    unint64_t v181 = *(void *)&v240[8 * v182];
    if (v181)
    {
LABEL_242:
      unint64_t v170 = (v181 - 1) & v181;
      unint64_t v241 = v182;
      unint64_t v172 = __clz(__rbit64(v181)) + (v182 << 6);
      goto LABEL_219;
    }
    unint64_t v183 = v167 + 8;
    if ((uint64_t)(v167 + 8) >= v239) {
      goto LABEL_314;
    }
    unint64_t v181 = *(void *)&v240[8 * v183];
    if (v181)
    {
      int64_t v182 = v167 + 8;
      goto LABEL_242;
    }
    while (1)
    {
      int64_t v182 = v183 + 1;
      if (__OFADD__(v183, 1)) {
        goto LABEL_331;
      }
      if (v182 >= v239) {
        break;
      }
      unint64_t v181 = *(void *)&v240[8 * v182];
      ++v183;
      if (v181) {
        goto LABEL_242;
      }
    }
LABEL_314:
    swift_bridgeObjectRelease();
    if (v53)
    {
LABEL_51:
      unint64_t v56 = (unint64_t *)(*(void *)(v3 + 56) + 16 * v49);
      swift_bridgeObjectRelease();
      *unint64_t v56 = v2;
      v56[1] = v1;
      goto LABEL_55;
    }
LABEL_54:
    specialized _NativeDictionary._insert(at:key:value:)(v49, 16, v2, v1, (void *)v3);
LABEL_55:
    unint64_t v242 = v3;
    swift_bridgeObjectRelease();
    unint64_t v8 = v6;
    unint64_t v7 = v46;
    unint64_t v6 = v5;
    if (v5 < 2) {
      goto LABEL_16;
    }
LABEL_56:
    swift_bridgeObjectRetain();
    LOBYTE(v4) = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(32);
    uint64_t v58 = *(void *)(v3 + 16);
    BOOL v59 = (v57 & 1) == 0;
    uint64_t v60 = v58 + v59;
    if (__OFADD__(v58, v59)) {
      goto LABEL_80;
    }
    unint64_t v1 = v57;
    if (*(void *)(v3 + 24) < v60)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, v4);
      unint64_t v4 = v3;
      unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(32);
      if ((v1 & 1) != (v62 & 1)) {
        goto LABEL_334;
      }
      unint64_t v2 = v61;
      if ((v1 & 1) == 0) {
        goto LABEL_63;
      }
      goto LABEL_60;
    }
    if (v4)
    {
      unint64_t v4 = v3;
      if ((v57 & 1) == 0) {
        goto LABEL_63;
      }
      goto LABEL_60;
    }
    unint64_t v232 = v7;
    unint64_t v184 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    uint64_t v185 = static _DictionaryStorage.copy(original:)();
    unint64_t v4 = v185;
    if (!*(void *)(v3 + 16)) {
      goto LABEL_316;
    }
    unint64_t v5 = v6;
    __int16 v186 = (void *)(v185 + 64);
    unint64_t v187 = v3 + 64;
    unint64_t v188 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
    if (v4 != v3 || (unint64_t)v186 >= v187 + 8 * v188) {
      memmove(v186, (const void *)(v3 + 64), 8 * v188);
    }
    int64_t v189 = 0;
    *(void *)(v4 + 16) = *(void *)(v3 + 16);
    uint64_t v190 = 1 << *(unsigned char *)(v3 + 32);
    uint64_t v191 = -1;
    if (v190 < 64) {
      uint64_t v191 = ~(-1 << v190);
    }
    unint64_t v192 = v191 & *(void *)(v3 + 64);
    int64_t v193 = (unint64_t)(v190 + 63) >> 6;
    while (2)
    {
      if (v192)
      {
        unint64_t v194 = __clz(__rbit64(v192));
        v192 &= v192 - 1;
        unint64_t v195 = v194 | (v189 << 6);
LABEL_251:
        uint64_t v196 = 8 * v195;
        uint64_t v197 = *(void *)(*(void *)(v3 + 48) + 8 * v195);
        uint64_t v198 = 16 * v195;
        int v199 = (uint64_t *)(*(void *)(v3 + 56) + v198);
        uint64_t v201 = *v199;
        uint64_t v200 = v199[1];
        *(void *)(*(void *)(v4 + 48) + v196) = v197;
        int v202 = (void *)(*(void *)(v4 + 56) + v198);
        *int v202 = v201;
        v202[1] = v200;
        swift_bridgeObjectRetain();
        continue;
      }
      break;
    }
    int64_t v203 = v189 + 1;
    if (__OFADD__(v189, 1)) {
      goto LABEL_325;
    }
    unint64_t v6 = v5;
    if (v203 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v203);
    ++v189;
    if (v204) {
      goto LABEL_274;
    }
    int64_t v189 = v203 + 1;
    if (v203 + 1 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204) {
      goto LABEL_274;
    }
    int64_t v189 = v203 + 2;
    if (v203 + 2 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204) {
      goto LABEL_274;
    }
    int64_t v189 = v203 + 3;
    if (v203 + 3 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204) {
      goto LABEL_274;
    }
    int64_t v189 = v203 + 4;
    if (v203 + 4 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204) {
      goto LABEL_274;
    }
    int64_t v189 = v203 + 5;
    if (v203 + 5 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204) {
      goto LABEL_274;
    }
    int64_t v189 = v203 + 6;
    if (v203 + 6 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204)
    {
LABEL_274:
      unint64_t v192 = (v204 - 1) & v204;
      unint64_t v195 = __clz(__rbit64(v204)) + (v189 << 6);
      goto LABEL_251;
    }
    int64_t v205 = v203 + 7;
    if (v205 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v205);
    if (v204)
    {
      int64_t v189 = v205;
      goto LABEL_274;
    }
    while (1)
    {
      int64_t v189 = v205 + 1;
      if (__OFADD__(v205, 1)) {
        goto LABEL_332;
      }
      unint64_t v6 = v5;
      if (v189 >= v193) {
        break;
      }
      unint64_t v204 = *(void *)(v187 + 8 * v189);
      ++v205;
      if (v204) {
        goto LABEL_274;
      }
    }
LABEL_316:
    swift_bridgeObjectRelease();
    unint64_t v8 = v184;
    unint64_t v7 = v232;
    if (v1)
    {
LABEL_60:
      int v63 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *int v63 = v235;
      v63[1] = v6;
      goto LABEL_64;
    }
LABEL_63:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 32, v235, v6, (void *)v4);
LABEL_64:
    unint64_t v242 = v4;
    swift_bridgeObjectRelease();
    if (v7 < 2) {
      goto LABEL_17;
    }
LABEL_65:
    swift_bridgeObjectRetain();
    unint64_t v3 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(64);
    uint64_t v65 = *(void *)(v4 + 16);
    BOOL v66 = (v64 & 1) == 0;
    uint64_t v67 = v65 + v66;
    if (!__OFADD__(v65, v66)) {
      break;
    }
LABEL_81:
    __break(1u);
LABEL_82:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    uint64_t v73 = static _DictionaryStorage.copy(original:)();
    uint64_t v74 = MEMORY[0x1E4FBC868];
    unint64_t v9 = v73;
    uint64_t v75 = *(void *)(MEMORY[0x1E4FBC868] + 16);
    if (v75)
    {
      uint64_t v76 = (void *)(v73 + 64);
      unint64_t v77 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
      if (v9 != MEMORY[0x1E4FBC868] || (unint64_t)v76 >= MEMORY[0x1E4FBC868] + 8 * v77 + 64)
      {
        memmove(v76, (const void *)(MEMORY[0x1E4FBC868] + 64), 8 * v77);
        uint64_t v74 = MEMORY[0x1E4FBC868];
      }
      uint64_t v78 = 0;
      *(void *)(v9 + 16) = v75;
      uint64_t v79 = 1 << *(unsigned char *)(v74 + 32);
      uint64_t v80 = *(void *)(v74 + 64);
      uint64_t v81 = -1;
      if (v79 < 64) {
        uint64_t v81 = ~(-1 << v79);
      }
      unint64_t v82 = v81 & v80;
      __src = (void *)((unint64_t)(v79 + 63) >> 6);
      while (1)
      {
        if (v82)
        {
          unint64_t v83 = __clz(__rbit64(v82));
          v82 &= v82 - 1;
          unint64_t v84 = v83 | (v78 << 6);
          uint64_t v85 = MEMORY[0x1E4FBC868];
        }
        else
        {
          BOOL v93 = __OFADD__(v78++, 1);
          uint64_t v85 = MEMORY[0x1E4FBC868];
          if (v93)
          {
            __break(1u);
LABEL_321:
            __break(1u);
LABEL_322:
            __break(1u);
LABEL_323:
            __break(1u);
LABEL_324:
            __break(1u);
LABEL_325:
            __break(1u);
LABEL_326:
            __break(1u);
            goto LABEL_327;
          }
          if (v78 >= (uint64_t)__src) {
            break;
          }
          unint64_t v94 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v78 + 64);
          if (!v94)
          {
            uint64_t v95 = v78 + 1;
            if (v78 + 1 >= (uint64_t)__src) {
              break;
            }
            unint64_t v94 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v95 + 64);
            if (!v94)
            {
              uint64_t v95 = v78 + 2;
              if (v78 + 2 >= (uint64_t)__src) {
                break;
              }
              unint64_t v94 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v95 + 64);
              if (!v94)
              {
                uint64_t v95 = v78 + 3;
                if (v78 + 3 >= (uint64_t)__src) {
                  break;
                }
                unint64_t v94 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v95 + 64);
                if (!v94)
                {
                  uint64_t v95 = v78 + 4;
                  if (v78 + 4 >= (uint64_t)__src) {
                    break;
                  }
                  unint64_t v94 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v95 + 64);
                  if (!v94)
                  {
                    uint64_t v95 = v78 + 5;
                    if (v78 + 5 >= (uint64_t)__src) {
                      break;
                    }
                    unint64_t v94 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v95 + 64);
                    if (!v94)
                    {
                      uint64_t v95 = v78 + 6;
                      if (v78 + 6 >= (uint64_t)__src) {
                        break;
                      }
                      unint64_t v94 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v95 + 64);
                      if (!v94)
                      {
                        uint64_t v95 = v78 + 7;
                        if (v78 + 7 >= (uint64_t)__src) {
                          break;
                        }
                        unint64_t v94 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v95 + 64);
                        if (!v94)
                        {
                          while (1)
                          {
                            uint64_t v78 = v95 + 1;
                            if (__OFADD__(v95, 1)) {
                              break;
                            }
                            uint64_t v85 = MEMORY[0x1E4FBC868];
                            if (v78 >= (uint64_t)__src) {
                              goto LABEL_307;
                            }
                            unint64_t v94 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v78 + 64);
                            ++v95;
                            if (v94) {
                              goto LABEL_110;
                            }
                          }
LABEL_327:
                          __break(1u);
LABEL_328:
                          __break(1u);
LABEL_329:
                          __break(1u);
LABEL_330:
                          __break(1u);
LABEL_331:
                          __break(1u);
LABEL_332:
                          __break(1u);
                          goto LABEL_333;
                        }
                      }
                    }
                  }
                }
              }
            }
            uint64_t v78 = v95;
          }
LABEL_110:
          unint64_t v82 = (v94 - 1) & v94;
          unint64_t v84 = __clz(__rbit64(v94)) + (v78 << 6);
        }
        uint64_t v86 = 8 * v84;
        uint64_t v87 = *(void *)(*(void *)(v85 + 48) + 8 * v84);
        uint64_t v88 = 16 * v84;
        char v89 = (uint64_t *)(*(void *)(v85 + 56) + v88);
        uint64_t v91 = *v89;
        uint64_t v90 = v89[1];
        *(void *)(*(void *)(v9 + 48) + v86) = v87;
        unint64_t v92 = (void *)(*(void *)(v9 + 56) + v88);
        *unint64_t v92 = v91;
        v92[1] = v90;
        swift_bridgeObjectRetain();
      }
    }
LABEL_307:
    swift_bridgeObjectRelease();
  }
  char v68 = v64;
  if (*(void *)(v4 + 24) < v67)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, v3);
    unint64_t v19 = v4;
    unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(64);
    if ((v68 & 1) != (v70 & 1)) {
      goto LABEL_334;
    }
    unint64_t v2 = v69;
    uint64_t v71 = v234;
    if (v68)
    {
LABEL_69:
      uint64_t v72 = (uint64_t *)(*(void *)(v19 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *uint64_t v72 = v71;
      v72[1] = v7;
      goto LABEL_73;
    }
LABEL_72:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 64, v71, v7, (void *)v19);
LABEL_73:
    unint64_t v242 = v19;
    swift_bridgeObjectRelease();
    if (v8 < 2) {
      return v19;
    }
LABEL_18:
    uint64_t v20 = URL.FormatStyle.Component.rawValue.getter();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter(v236, v8, v20);
    return v242;
  }
  if (v3)
  {
    unint64_t v19 = v4;
    uint64_t v71 = v234;
    if (v64) {
      goto LABEL_69;
    }
    goto LABEL_72;
  }
  unint64_t v206 = v7;
  unint64_t v207 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  uint64_t v208 = static _DictionaryStorage.copy(original:)();
  unint64_t v19 = v208;
  if (!*(void *)(v4 + 16))
  {
LABEL_318:
    swift_bridgeObjectRelease();
    unint64_t v8 = v207;
    unint64_t v7 = v206;
    uint64_t v71 = v234;
    if (v68) {
      goto LABEL_69;
    }
    goto LABEL_72;
  }
  __int16 v209 = (void *)(v208 + 64);
  unint64_t v210 = v4 + 64;
  unint64_t v211 = (unint64_t)((1 << *(unsigned char *)(v19 + 32)) + 63) >> 6;
  if (v19 != v4 || (unint64_t)v209 >= v210 + 8 * v211) {
    memmove(v209, (const void *)(v4 + 64), 8 * v211);
  }
  int64_t v212 = 0;
  *(void *)(v19 + 16) = *(void *)(v4 + 16);
  uint64_t v213 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v214 = -1;
  if (v213 < 64) {
    uint64_t v214 = ~(-1 << v213);
  }
  unint64_t v215 = v214 & *(void *)(v4 + 64);
  int64_t v216 = (unint64_t)(v213 + 63) >> 6;
  while (2)
  {
    if (v215)
    {
      unint64_t v217 = __clz(__rbit64(v215));
      v215 &= v215 - 1;
      unint64_t v218 = v217 | (v212 << 6);
LABEL_283:
      uint64_t v219 = 8 * v218;
      uint64_t v220 = *(void *)(*(void *)(v4 + 48) + 8 * v218);
      uint64_t v221 = 16 * v218;
      __int16 v222 = (uint64_t *)(*(void *)(v4 + 56) + v221);
      uint64_t v224 = *v222;
      uint64_t v223 = v222[1];
      *(void *)(*(void *)(v19 + 48) + v219) = v220;
      __int16 v225 = (void *)(*(void *)(v19 + 56) + v221);
      *__int16 v225 = v224;
      v225[1] = v223;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v226 = v212 + 1;
  if (__OFADD__(v212, 1)) {
    goto LABEL_326;
  }
  if (v226 >= v216) {
    goto LABEL_318;
  }
  unint64_t v227 = *(void *)(v210 + 8 * v226);
  ++v212;
  if (v227) {
    goto LABEL_306;
  }
  int64_t v212 = v226 + 1;
  if (v226 + 1 >= v216) {
    goto LABEL_318;
  }
  unint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227) {
    goto LABEL_306;
  }
  int64_t v212 = v226 + 2;
  if (v226 + 2 >= v216) {
    goto LABEL_318;
  }
  unint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227) {
    goto LABEL_306;
  }
  int64_t v212 = v226 + 3;
  if (v226 + 3 >= v216) {
    goto LABEL_318;
  }
  unint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227) {
    goto LABEL_306;
  }
  int64_t v212 = v226 + 4;
  if (v226 + 4 >= v216) {
    goto LABEL_318;
  }
  unint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227) {
    goto LABEL_306;
  }
  int64_t v212 = v226 + 5;
  if (v226 + 5 >= v216) {
    goto LABEL_318;
  }
  unint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227) {
    goto LABEL_306;
  }
  int64_t v212 = v226 + 6;
  if (v226 + 6 >= v216) {
    goto LABEL_318;
  }
  unint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227)
  {
LABEL_306:
    unint64_t v215 = (v227 - 1) & v227;
    unint64_t v218 = __clz(__rbit64(v227)) + (v212 << 6);
    goto LABEL_283;
  }
  int64_t v228 = v226 + 7;
  if (v228 >= v216) {
    goto LABEL_318;
  }
  unint64_t v229 = v19;
  unint64_t v227 = *(void *)(v210 + 8 * v228);
  if (v227)
  {
    int64_t v212 = v228;
    goto LABEL_306;
  }
  while (1)
  {
    int64_t v212 = v228 + 1;
    if (__OFADD__(v228, 1)) {
      break;
    }
    unint64_t v19 = v229;
    if (v212 >= v216) {
      goto LABEL_318;
    }
    unint64_t v227 = *(void *)(v210 + 8 * v212);
    ++v228;
    if (v227) {
      goto LABEL_306;
    }
  }
LABEL_333:
  __break(1u);
LABEL_334:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

__n128 URL.ParseStrategy.init(scheme:user:password:host:port:path:query:fragment:)@<Q0>(_OWORD *a1@<X0>, long long *a2@<X1>, _OWORD *a3@<X2>, long long *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X5>, long long *a7@<X6>, __n128 *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9 = *a5;
  char v10 = *((unsigned char *)a5 + 8);
  long long v11 = *a2;
  *(_OWORD *)a9 = *a1;
  *(_OWORD *)(a9 + 16) = v11;
  long long v12 = *a4;
  *(_OWORD *)(a9 + 32) = *a3;
  *(_OWORD *)(a9 + 48) = v12;
  *(void *)(a9 + 64) = v9;
  *(unsigned char *)(a9 + 72) = v10;
  long long v13 = *a7;
  *(_OWORD *)(a9 + 80) = *a6;
  *(_OWORD *)(a9 + 96) = v13;
  __n128 result = *a8;
  *(__n128 *)(a9 + 112) = *a8;
  return result;
}

uint64_t URL.ParseStrategy.init(format:lenient:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = a1[11];
  long long v28 = a1[10];
  long long v29 = v3;
  long long v30 = a1[12];
  long long v4 = a1[7];
  long long v24 = a1[6];
  long long v25 = v4;
  long long v5 = a1[9];
  long long v26 = a1[8];
  long long v27 = v5;
  long long v6 = a1[3];
  long long v20 = a1[2];
  long long v21 = v6;
  long long v7 = a1[5];
  long long v22 = a1[4];
  long long v23 = v7;
  long long v8 = a1[1];
  long long v18 = *a1;
  long long v19 = v8;
  if (v18 != 1) {
    goto LABEL_4;
  }
  if ((void)v19)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    uint64_t v9 = 1;
    goto LABEL_6;
  }
  uint64_t v9 = 0;
LABEL_6:
  if (BYTE8(v19) != 1)
  {
LABEL_9:
    uint64_t v10 = 1;
    goto LABEL_11;
  }
  if (*((void *)&v20 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v10 = 0;
LABEL_11:
  if (v21 != 1)
  {
LABEL_14:
    uint64_t v11 = 1;
    goto LABEL_16;
  }
  if ((void)v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v11 = 0;
LABEL_16:
  if (BYTE8(v22) != 1)
  {
LABEL_19:
    uint64_t v12 = 1;
    goto LABEL_21;
  }
  if (*((void *)&v23 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v12 = 0;
LABEL_21:
  if (v25 != 1)
  {
LABEL_24:
    uint64_t v13 = 1;
    goto LABEL_26;
  }
  if ((void)v26)
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v13 = 0;
LABEL_26:
  if (BYTE8(v26) != 1)
  {
LABEL_29:
    uint64_t v14 = 1;
    goto LABEL_31;
  }
  if (*((void *)&v27 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  uint64_t v14 = 0;
LABEL_31:
  if (v28 != 1)
  {
LABEL_34:
    uint64_t v15 = 1;
    goto LABEL_36;
  }
  if ((void)v29)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  uint64_t v15 = 0;
LABEL_36:
  if (BYTE8(v29) == 1)
  {
    if (!*((void *)&v30 + 1))
    {
      uint64_t result = outlined release of URL.FormatStyle((uint64_t)&v18);
      uint64_t v17 = 0;
      goto LABEL_42;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URL.FormatStyle((uint64_t)&v18);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = outlined release of URL.FormatStyle((uint64_t)&v18);
  }
  uint64_t v17 = 1;
LABEL_42:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v12;
  *(void *)(a2 + 64) = v13;
  *(unsigned char *)(a2 + 72) = 1;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = v14;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = v15;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = v17;
  return result;
}

void URL.ParseStrategy.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(void *)(v0 + 40);
  uint64_t v24 = *(void *)(v0 + 32);
  uint64_t v25 = *(void *)(v0 + 48);
  unint64_t v5 = *(void *)(v0 + 56);
  int v27 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v26 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 96);
  Swift::UInt v28 = *(void *)(v0 + 64);
  unint64_t v29 = *(void *)(v0 + 88);
  unint64_t v8 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 112);
  unint64_t v9 = *(void *)(v0 + 120);
  if (!v1)
  {
    Swift::UInt v10 = 0;
LABEL_5:
    Hasher._combine(_:)(v10);
    if (v3) {
      goto LABEL_6;
    }
LABEL_9:
    Swift::UInt v11 = 0;
LABEL_10:
    Hasher._combine(_:)(v11);
    if (v4) {
      goto LABEL_11;
    }
LABEL_14:
    Swift::UInt v17 = 0;
LABEL_15:
    Hasher._combine(_:)(v17);
    unint64_t v18 = v29;
    if (v5) {
      goto LABEL_16;
    }
LABEL_19:
    Swift::UInt v19 = 0;
LABEL_20:
    Hasher._combine(_:)(v19);
    if (v27) {
      goto LABEL_21;
    }
    goto LABEL_25;
  }
  if (v1 == 1)
  {
    Swift::UInt v10 = 1;
    goto LABEL_5;
  }
  unint64_t v23 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 96);
  unint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v15 = *(void *)v0;
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  uint64_t v16 = v15;
  uint64_t v7 = v14;
  unint64_t v9 = v13;
  uint64_t v6 = v12;
  unint64_t v8 = v23;
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v16, v1);
  if (!v3) {
    goto LABEL_9;
  }
LABEL_6:
  if (v3 == 1)
  {
    Swift::UInt v11 = 1;
    goto LABEL_10;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v2, v3);
  if (!v4) {
    goto LABEL_14;
  }
LABEL_11:
  if (v4 == 1)
  {
    Swift::UInt v17 = 1;
    goto LABEL_15;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v24, v4);
  unint64_t v18 = v29;
  if (!v5) {
    goto LABEL_19;
  }
LABEL_16:
  if (v5 == 1)
  {
    Swift::UInt v19 = 1;
    goto LABEL_20;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v25, v5);
  if (v27)
  {
LABEL_21:
    Hasher._combine(_:)(v28 != 0);
    if (v18) {
      goto LABEL_22;
    }
LABEL_26:
    Swift::UInt v20 = 0;
LABEL_27:
    Hasher._combine(_:)(v20);
    if (v8) {
      goto LABEL_28;
    }
LABEL_31:
    Swift::UInt v21 = 0;
LABEL_32:
    Hasher._combine(_:)(v21);
    if (v9) {
      goto LABEL_33;
    }
LABEL_36:
    Swift::UInt v22 = 0;
    goto LABEL_37;
  }
LABEL_25:
  Hasher._combine(_:)(2uLL);
  Hasher._combine(_:)(v28);
  if (!v18) {
    goto LABEL_26;
  }
LABEL_22:
  if (v18 == 1)
  {
    Swift::UInt v20 = 1;
    goto LABEL_27;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v26, v18);
  if (!v8) {
    goto LABEL_31;
  }
LABEL_28:
  if (v8 == 1)
  {
    Swift::UInt v21 = 1;
    goto LABEL_32;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v8);
  if (!v9) {
    goto LABEL_36;
  }
LABEL_33:
  if (v9 == 1)
  {
    Swift::UInt v22 = 1;
LABEL_37:
    Hasher._combine(_:)(v22);
    return;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v7, v9);
}

uint64_t outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.ParseStrategy.CodingKeys()
{
  uint64_t result = 0x656D65686373;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1919251317;
      break;
    case 2:
      uint64_t result = 0x64726F7773736170;
      break;
    case 3:
      uint64_t result = 1953722216;
      break;
    case 4:
      uint64_t result = 1953656688;
      break;
    case 5:
      uint64_t result = 1752457584;
      break;
    case 6:
      uint64_t result = 0x7972657571;
      break;
    case 7:
      uint64_t result = 0x746E656D67617266;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t URL.ParseStrategy.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.ParseStrategy.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  uint64_t v9 = v1[2];
  uint64_t v30 = v1[3];
  uint64_t v31 = v9;
  uint64_t v10 = v1[4];
  uint64_t v28 = v1[5];
  uint64_t v29 = v10;
  uint64_t v11 = v1[7];
  uint64_t v26 = v1[6];
  uint64_t v27 = v11;
  uint64_t v12 = v1[8];
  int v35 = *((unsigned __int8 *)v1 + 72);
  uint64_t v13 = v1[10];
  uint64_t v24 = v1[11];
  uint64_t v25 = v12;
  uint64_t v14 = v1[12];
  uint64_t v22 = v1[13];
  uint64_t v23 = v13;
  uint64_t v19 = v1[14];
  uint64_t v20 = v1[15];
  uint64_t v21 = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v33 = v8;
  uint64_t v34 = v7;
  char v36 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<String> and conformance URL.ParseStrategy.ComponentParseStrategy<A>, &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>);
  uint64_t v15 = v32;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v15)
  {
    uint64_t v16 = v28;
    uint64_t v17 = v29;
    uint64_t v33 = v31;
    uint64_t v34 = v30;
    char v36 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v17;
    uint64_t v34 = v16;
    char v36 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v26;
    uint64_t v34 = v27;
    char v36 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v25;
    LOBYTE(v34) = v35;
    char v36 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<Int> and conformance URL.ParseStrategy.ComponentParseStrategy<A>, &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v23;
    uint64_t v34 = v24;
    char v36 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v21;
    uint64_t v34 = v22;
    char v36 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v19;
    uint64_t v34 = v20;
    char v36 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int URL.ParseStrategy.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t *URL.ParseStrategy.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.ParseStrategy.CodingKeys>);
  uint64_t v5 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t)a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (uint64_t *)v57;
  }
  else
  {
    uint64_t v55 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>);
    LOBYTE(v59) = 0;
    uint64_t v9 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<String> and conformance URL.ParseStrategy.ComponentParseStrategy<A>, &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v54 = a2;
    uint64_t v10 = v9;
    uint64_t v12 = v67;
    unint64_t v11 = v68;
    LOBYTE(v59) = 1;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v67, v68);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v52 = v11;
    uint64_t v53 = v12;
    uint64_t v14 = v67;
    unint64_t v13 = v68;
    LOBYTE(v59) = 2;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v67, v68);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v57 = v14;
    unint64_t v51 = v13;
    uint64_t v15 = v67;
    unint64_t v16 = v68;
    LOBYTE(v59) = 3;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v67, v68);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v56 = v16;
    uint64_t v48 = v10;
    uint64_t v49 = v15;
    uint64_t v18 = v67;
    unint64_t v17 = v68;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>);
    LOBYTE(v59) = 4;
    uint64_t v50 = v18;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v18, v17);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<Int> and conformance URL.ParseStrategy.ComponentParseStrategy<A>, &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v45 = v17;
    uint64_t v42 = v67;
    LODWORD(v18) = v68;
    char v84 = v68;
    LOBYTE(v59) = 5;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v41 = v18;
    uint64_t v20 = v67;
    unint64_t v19 = v68;
    LOBYTE(v59) = 6;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v67, v68);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v43 = v19;
    uint64_t v44 = v20;
    uint64_t v21 = v67;
    char v85 = 7;
    unint64_t v47 = v68;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v67, v68);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v46 = v21;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v7, v58);
    uint64_t v55 = *((void *)&v83 + 1);
    unint64_t v22 = v19;
    uint64_t v58 = v83;
    *(void *)&long long v59 = v53;
    *((void *)&v59 + 1) = v52;
    *(void *)&long long v60 = v57;
    uint64_t v23 = v50;
    *((void *)&v60 + 1) = v51;
    *(void *)&long long v61 = v49;
    *((void *)&v61 + 1) = v56;
    *(void *)&long long v62 = v50;
    uint64_t v24 = v21;
    uint64_t v25 = v44;
    unint64_t v26 = v45;
    *((void *)&v62 + 1) = v45;
    *(void *)&long long v63 = v42;
    BYTE8(v63) = v41;
    *(void *)&long long v64 = v44;
    *((void *)&v64 + 1) = v19;
    unint64_t v27 = v47;
    *(void *)&long long v65 = v24;
    *((void *)&v65 + 1) = v47;
    long long v66 = v83;
    outlined retain of URL.ParseStrategy((uint64_t *)&v59, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v24, v27);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v25, v22);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v23, v26);
    uint64_t v28 = v49;
    unint64_t v29 = v56;
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v49, v56);
    uint64_t v30 = v57;
    unint64_t v31 = v51;
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v57, v51);
    unint64_t v33 = v52;
    uint64_t v32 = v53;
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v53, v52);
    long long v34 = v64;
    int v35 = v54;
    v54[4] = v63;
    v35[5] = v34;
    long long v36 = v66;
    v35[6] = v65;
    v35[7] = v36;
    long long v37 = v60;
    *int v35 = v59;
    v35[1] = v37;
    long long v38 = v62;
    v35[2] = v61;
    v35[3] = v38;
    __swift_destroy_boxed_opaque_existential_1(v8);
    uint64_t v67 = v32;
    unint64_t v68 = v33;
    uint64_t v69 = v30;
    unint64_t v70 = v31;
    uint64_t v71 = v28;
    unint64_t v72 = v29;
    uint64_t v73 = v50;
    unint64_t v74 = v45;
    uint64_t v75 = v42;
    char v76 = v84;
    uint64_t v77 = v44;
    unint64_t v78 = v43;
    uint64_t v79 = v46;
    unint64_t v80 = v47;
    uint64_t v81 = v58;
    uint64_t v82 = v55;
    return outlined retain of URL.ParseStrategy(&v67, (void (*)(uint64_t, uint64_t))outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>);
  }
}

uint64_t *protocol witness for Decodable.init(from:) in conformance URL.ParseStrategy@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return URL.ParseStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.ParseStrategy(void *a1)
{
  return URL.ParseStrategy.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.ParseStrategy()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.ParseStrategy()
{
  return Hasher._finalize()();
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.description.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v17 - v6;
  double v9 = MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v12 + 16))(v11, v9);
  int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 2, v1);
  if (v13)
  {
    if (v13 == 1) {
      return 0x6465726975716572;
    }
    else {
      return 0x6C616E6F6974706FLL;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v11, v1);
    unint64_t v17 = 0;
    unint64_t v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v17 = 0xD000000000000015;
    unint64_t v18 = 0x80000001823AB0B0;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    v15._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    unint64_t v14 = v17;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  }
  return v14;
}

void URL.ParseStrategy.ComponentParseStrategy.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v10, v12, a2, v8);
  int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 2, v3);
  if (v13)
  {
    Hasher._combine(_:)(v13 != 1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
    Hasher._combine(_:)(2uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6465726975716572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616E6F6974706FLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x56746C7561666564 && a2 == 0xEC00000065756C61)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6465726975716572;
  }
  if (a1 == 1) {
    return 0x6C616E6F6974706FLL;
  }
  return 0x56746C7561666564;
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys(char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys(uint64_t a1)
{
  FloatingPointParseStrategy.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  Hasher.init(_seed:)();
  FloatingPointParseStrategy.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  return URL.ParseStrategy.ComponentParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys@<X0>(void *a1@<X1>, unsigned char *a2@<X8>)
{
  return protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys(a1, (uint64_t (*)(void, void, void, void))default argument 1 of _typeName(_:qualified:), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys@<X0>(void *a1@<X2>, unsigned char *a2@<X8>)
{
  return protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys(a1, (uint64_t (*)(void, void, void, void))default argument 1 of _typeName(_:qualified:), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys@<X0>(void *a1@<X2>, uint64_t (*a2)(void, void, void, void)@<X4>, unsigned char *a3@<X8>)
{
  char v4 = a2(a1[2], a1[3], a1[4], a1[5]);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys@<X0>(void *a1@<X1>, uint64_t (*a2)(void, void, void, void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(a1[2], a1[3], a1[4], a1[5]);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.encode(to:)(void *a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v6 = a2[5];
  uint64_t v53 = a2[2];
  uint64_t v5 = v53;
  uint64_t v54 = v4;
  uint64_t v55 = v7;
  uint64_t v56 = v6;
  uint64_t v47 = type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v48 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v43 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v46 = (char *)&v33 - v8;
  uint64_t v50 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v45 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v5;
  uint64_t v54 = v4;
  uint64_t v55 = v7;
  uint64_t v56 = v6;
  uint64_t v11 = type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.OptionalCodingKeys();
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v42 = v11;
  uint64_t v40 = v12;
  uint64_t v41 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v39 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  long long v38 = (char *)&v33 - v13;
  uint64_t v53 = v5;
  uint64_t v54 = v4;
  uint64_t v55 = v7;
  uint64_t v56 = v6;
  uint64_t v14 = type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.RequiredCodingKeys();
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v37 = v14;
  uint64_t v35 = v15;
  uint64_t v36 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v34 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  unint64_t v33 = (char *)&v33 - v16;
  uint64_t v17 = *(a2 - 1);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v5;
  uint64_t v54 = v4;
  uint64_t v49 = v7;
  uint64_t v55 = v7;
  uint64_t v56 = v6;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.CodingKeys();
  swift_getWitnessTable();
  uint64_t v57 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v51 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  unint64_t v22 = (char *)&v33 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v23 = v50;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, void *))(v17 + 16))(v20, v52, a2);
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 2, v5);
  if (v24)
  {
    if (v24 == 1)
    {
      LOBYTE(v53) = 0;
      uint64_t v25 = v33;
      uint64_t v26 = v57;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v36);
    }
    else
    {
      LOBYTE(v53) = 1;
      uint64_t v32 = v38;
      uint64_t v26 = v57;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v32, v41);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v22, v26);
  }
  else
  {
    uint64_t v27 = v43;
    uint64_t v28 = v45;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v45, v20, v5);
    LOBYTE(v53) = 2;
    unint64_t v29 = v46;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v30 = v48;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v30);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v22, v57);
  }
}

Swift::Int URL.ParseStrategy.ComponentParseStrategy.hashValue.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2, a1);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 2, v4);
  if (v12)
  {
    Hasher._combine(_:)(v12 != 1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    Hasher._combine(_:)(2uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return Hasher._finalize()();
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v76 = a6;
  uint64_t v83 = a3;
  uint64_t v84 = a4;
  unint64_t v85 = a5;
  uint64_t v11 = type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v72 = v11;
  uint64_t v63 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v62 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v73 = (char *)&v55 - v12;
  uint64_t v82 = a2;
  uint64_t v83 = a3;
  uint64_t v84 = a4;
  unint64_t v85 = a5;
  uint64_t v13 = type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.OptionalCodingKeys();
  uint64_t v69 = swift_getWitnessTable();
  uint64_t v70 = v13;
  uint64_t v77 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v61 = *(void *)(v77 - 8);
  MEMORY[0x1F4188790](v77);
  unint64_t v68 = (char *)&v55 - v14;
  uint64_t v82 = a2;
  uint64_t v83 = a3;
  uint64_t v84 = a4;
  unint64_t v85 = a5;
  uint64_t v15 = type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.RequiredCodingKeys();
  uint64_t v66 = swift_getWitnessTable();
  uint64_t v67 = v15;
  uint64_t v60 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v59 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  long long v65 = (char *)&v55 - v16;
  uint64_t v82 = a2;
  uint64_t v83 = a3;
  uint64_t v84 = a4;
  unint64_t v85 = a5;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.CodingKeys();
  uint64_t v80 = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v74 = *(void *)(v17 - 8);
  uint64_t v75 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v78 = a3;
  uint64_t v79 = a2;
  uint64_t v82 = a2;
  uint64_t v83 = a3;
  uint64_t v84 = a4;
  unint64_t v85 = a5;
  uint64_t v20 = type metadata accessor for URL.ParseStrategy.ComponentParseStrategy();
  uint64_t v64 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  unint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v55 - v24;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v26 = v81;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v26)
  {
    uint64_t v56 = v22;
    uint64_t v57 = v25;
    uint64_t v58 = v20;
    uint64_t v27 = v79;
    uint64_t v28 = v76;
    uint64_t v80 = (uint64_t)v19;
    uint64_t v81 = a1;
    uint64_t v29 = v75;
    uint64_t v30 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v31 = _ArrayBuffer.requestNativeBuffer()();
    if (!v31)
    {
      uint64_t v86 = v30;
      type metadata accessor for Array();
      swift_getWitnessTable();
      uint64_t v31 = _copyCollectionToContiguousArray<A>(_:)();
    }
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    uint64_t v33 = v77;
    uint64_t v34 = (2 * *(void *)(v32 + 16)) | 1;
    uint64_t v82 = v32;
    uint64_t v83 = v32 + 32;
    uint64_t v84 = 0;
    unint64_t v85 = v34;
    type metadata accessor for ArraySlice();
    swift_getWitnessTable();
    Collection<>.popFirst()();
    if (v86 != 3 && v84 == v85 >> 1)
    {
      if ((_BYTE)v86)
      {
        if (v86 != 1)
        {
          LOBYTE(v86) = 2;
          uint64_t v48 = v73;
          uint64_t v49 = v29;
          uint64_t v50 = v80;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v51 = v63;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v52 = v74;
          (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v51);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v49);
          uint64_t v53 = v56;
          (*(void (**)(char *, void, uint64_t))(*(void *)(v79 - 8) + 56))(v56, 0, 2);
          uint64_t v47 = v64;
          uint64_t v37 = v57;
          uint64_t v54 = v53;
          uint64_t v46 = v58;
          (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v57, v54, v58);
          goto LABEL_14;
        }
        LOBYTE(v86) = 1;
        uint64_t v35 = v68;
        uint64_t v36 = v80;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v35, v33);
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v36, v29);
        uint64_t v37 = v57;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v57, 2, 2, v27);
      }
      else
      {
        LOBYTE(v86) = 0;
        uint64_t v44 = v65;
        uint64_t v45 = v80;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v60);
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v45, v29);
        uint64_t v37 = v57;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v57, 1, 2, v27);
      }
      uint64_t v46 = v58;
      uint64_t v47 = v64;
LABEL_14:
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v28, v37, v46);
      uint64_t v42 = (uint64_t)v81;
      return __swift_destroy_boxed_opaque_existential_1(v42);
    }
    uint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v40 = v58;
    uint64_t v41 = v80;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v38 - 8) + 104))(v40, *MEMORY[0x1E4FBBA70], v38);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v41, v29);
    a1 = v81;
  }
  uint64_t v42 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v42);
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return URL.ParseStrategy.ComponentParseStrategy.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>(void *a1, void *a2)
{
  return URL.ParseStrategy.ComponentParseStrategy.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  URL.ParseStrategy.ComponentParseStrategy.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

__n128 URL.ParseStrategy.scheme(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[7];
  __n128 v25 = v2[6];
  __n128 v26 = v6;
  __n128 v7 = v2[5];
  __n128 v23 = v2[4];
  __n128 v24 = v7;
  __n128 v8 = v2[3];
  __n128 v21 = v2[2];
  __n128 v22 = v8;
  __n128 v9 = v2[1];
  v20[0] = *v2;
  v20[1] = v9;
  __n128 v10 = v26;
  __n128 v18 = v24;
  __n128 v19 = v25;
  unint64_t v11 = v23.n128_u64[0];
  char v12 = v23.n128_i8[8];
  __n128 v16 = v21;
  __n128 v17 = v22;
  __n128 v15 = v9;
  long long v13 = v20[0];
  outlined retain of URL.ParseStrategy((uint64_t *)v20, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v13, *((unint64_t *)&v13 + 1));
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = v5;
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v17;
  a2[4].n128_u64[0] = v11;
  a2[4].n128_u8[8] = v12;
  __n128 result = v19;
  a2[5] = v18;
  a2[6] = v19;
  a2[7] = v10;
  return result;
}

__n128 URL.ParseStrategy.user(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[7];
  __n128 v26 = v2[6];
  __n128 v27 = v6;
  __n128 v7 = v2[5];
  __n128 v24 = v2[4];
  __n128 v25 = v7;
  __n128 v8 = v2[3];
  __n128 v22 = v2[2];
  __n128 v23 = v8;
  __n128 v9 = v2[1];
  v21[0] = *v2;
  v21[1] = v9;
  uint64_t v10 = v27.n128_i64[1];
  unint64_t v20 = v27.n128_u64[0];
  __n128 v18 = v25;
  __n128 v19 = v26;
  unint64_t v11 = v24.n128_u64[0];
  char v12 = v24.n128_i8[8];
  __n128 v16 = v22;
  __n128 v17 = v8;
  long long v13 = v21[0];
  __n128 v14 = v9;
  outlined retain of URL.ParseStrategy((uint64_t *)v21, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14.n128_i64[0], v14.n128_u64[1]);
  *(_OWORD *)a2 = v13;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(__n128 *)(a2 + 32) = v16;
  *(__n128 *)(a2 + 48) = v17;
  *(void *)(a2 + 64) = v11;
  *(unsigned char *)(a2 + 72) = v12;
  __n128 result = v19;
  *(__n128 *)(a2 + 80) = v18;
  *(__n128 *)(a2 + 96) = v19;
  *(void *)(a2 + 112) = v20;
  *(void *)(a2 + 120) = v10;
  return result;
}

__n128 URL.ParseStrategy.password(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[7];
  __n128 v27 = v2[6];
  __n128 v28 = v6;
  __n128 v7 = v2[5];
  __n128 v25 = v2[4];
  __n128 v26 = v7;
  __n128 v8 = v2[1];
  __n128 v21 = *v2;
  __n128 v22 = v8;
  __n128 v9 = v2[3];
  __n128 v23 = v2[2];
  __n128 v24 = v9;
  uint64_t v10 = v28.n128_i64[1];
  unint64_t v20 = v28.n128_u64[0];
  __n128 v18 = v26;
  __n128 v19 = v27;
  unint64_t v11 = v25.n128_u64[0];
  char v12 = v25.n128_i8[8];
  __n128 v13 = v22;
  __n128 v16 = v21;
  __n128 v17 = v9;
  __n128 v14 = v23;
  outlined retain of URL.ParseStrategy((uint64_t *)&v21, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14.n128_i64[0], v14.n128_u64[1]);
  *a2 = v16;
  a2[1] = v13;
  a2[2].n128_u64[0] = v4;
  a2[2].n128_u64[1] = v5;
  a2[3] = v17;
  a2[4].n128_u64[0] = v11;
  a2[4].n128_u8[8] = v12;
  __n128 result = v19;
  a2[5] = v18;
  a2[6] = v19;
  a2[7].n128_u64[0] = v20;
  a2[7].n128_u64[1] = v10;
  return result;
}

__n128 URL.ParseStrategy.host(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[7];
  __n128 v27 = v2[6];
  __n128 v28 = v6;
  __n128 v7 = v2[5];
  __n128 v25 = v2[4];
  __n128 v26 = v7;
  __n128 v8 = v2[1];
  v22[0] = *v2;
  v22[1] = v8;
  __n128 v9 = v2[3];
  __n128 v23 = v2[2];
  __n128 v24 = v9;
  uint64_t v10 = v28.n128_i64[1];
  unint64_t v21 = v28.n128_u64[0];
  __n128 v19 = v26;
  __n128 v20 = v27;
  unint64_t v11 = v9.n128_u64[1];
  unint64_t v12 = v25.n128_u64[0];
  char v13 = v25.n128_i8[8];
  __n128 v14 = v23;
  long long v17 = v22[0];
  __n128 v18 = v8;
  uint64_t v15 = v9.n128_u64[0];
  outlined retain of URL.ParseStrategy((uint64_t *)v22, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v15, v11);
  *(_OWORD *)a2 = v17;
  *(__n128 *)(a2 + 16) = v18;
  *(__n128 *)(a2 + 32) = v14;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(void *)(a2 + 64) = v12;
  *(unsigned char *)(a2 + 72) = v13;
  __n128 result = v20;
  *(__n128 *)(a2 + 80) = v19;
  *(__n128 *)(a2 + 96) = v20;
  *(void *)(a2 + 112) = v21;
  *(void *)(a2 + 120) = v10;
  return result;
}

uint64_t *URL.ParseStrategy.port(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  long long v5 = v2[5];
  long long v17 = v2[4];
  long long v18 = v5;
  long long v6 = v2[7];
  long long v19 = v2[6];
  long long v20 = v6;
  long long v7 = v2[1];
  long long v13 = *v2;
  long long v14 = v7;
  long long v8 = v2[3];
  long long v15 = v2[2];
  long long v16 = v8;
  char v21 = v4;
  long long v9 = v14;
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + 16) = v9;
  long long v10 = v16;
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v10;
  *(void *)(a2 + 64) = v3;
  *(unsigned char *)(a2 + 72) = v4;
  long long v11 = v19;
  *(_OWORD *)(a2 + 80) = v18;
  *(_OWORD *)(a2 + 96) = v11;
  *(_OWORD *)(a2 + 112) = v20;
  return outlined retain of URL.ParseStrategy((uint64_t *)&v13, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
}

__n128 URL.ParseStrategy.path(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[7];
  __n128 v25 = v2[6];
  __n128 v26 = v6;
  __n128 v7 = v2[3];
  __n128 v21 = v2[2];
  __n128 v22 = v7;
  __n128 v8 = v2[1];
  v20[0] = *v2;
  v20[1] = v8;
  __n128 v9 = v2[5];
  __n128 v23 = v2[4];
  __n128 v24 = v9;
  __n128 v10 = v26;
  unint64_t v11 = v23.n128_u64[0];
  char v12 = v23.n128_i8[8];
  __n128 v18 = v22;
  __n128 v19 = v25;
  __n128 v16 = v8;
  __n128 v17 = v21;
  long long v15 = v20[0];
  __n128 v13 = v9;
  outlined retain of URL.ParseStrategy((uint64_t *)v20, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v13.n128_i64[0], v13.n128_u64[1]);
  *(_OWORD *)a2 = v15;
  *(__n128 *)(a2 + 16) = v16;
  *(__n128 *)(a2 + 32) = v17;
  *(__n128 *)(a2 + 48) = v18;
  *(void *)(a2 + 64) = v11;
  *(unsigned char *)(a2 + 72) = v12;
  *(void *)(a2 + 80) = v4;
  *(void *)(a2 + 88) = v5;
  __n128 result = v19;
  *(__n128 *)(a2 + 96) = v19;
  *(__n128 *)(a2 + 112) = v10;
  return result;
}

__n128 URL.ParseStrategy.query(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[5];
  __n128 v25 = v2[4];
  __n128 v26 = v6;
  __n128 v7 = v2[3];
  __n128 v23 = v2[2];
  __n128 v24 = v7;
  __n128 v8 = v2[1];
  __n128 v21 = *v2;
  __n128 v22 = v8;
  __n128 v9 = v2[7];
  __n128 v27 = v2[6];
  __n128 v28 = v9;
  uint64_t v10 = v9.n128_i64[1];
  unint64_t v20 = v9.n128_u64[0];
  __n128 v11 = v26;
  unint64_t v12 = v25.n128_u64[0];
  char v13 = v25.n128_i8[8];
  __n128 v18 = v23;
  __n128 v19 = v24;
  __n128 v16 = v21;
  __n128 v17 = v22;
  __n128 v14 = v27;
  outlined retain of URL.ParseStrategy((uint64_t *)&v21, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14.n128_i64[0], v14.n128_u64[1]);
  *a2 = v16;
  a2[1] = v17;
  __n128 result = v19;
  a2[2] = v18;
  a2[3] = v19;
  a2[4].n128_u64[0] = v12;
  a2[4].n128_u8[8] = v13;
  a2[5] = v11;
  a2[6].n128_u64[0] = v4;
  a2[6].n128_u64[1] = v5;
  a2[7].n128_u64[0] = v20;
  a2[7].n128_u64[1] = v10;
  return result;
}

__n128 URL.ParseStrategy.fragment(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[5];
  __n128 v23 = v2[4];
  __n128 v24 = v6;
  __n128 v7 = v2[3];
  __n128 v21 = v2[2];
  __n128 v22 = v7;
  __n128 v8 = v2[1];
  v20[0] = *v2;
  v20[1] = v8;
  __n128 v9 = v2[7];
  __n128 v25 = v2[6];
  __n128 v26 = v9;
  __n128 v10 = v25;
  unint64_t v11 = v23.n128_u64[0];
  char v12 = v23.n128_i8[8];
  __n128 v18 = v22;
  __n128 v19 = v24;
  __n128 v16 = v8;
  __n128 v17 = v21;
  long long v15 = v20[0];
  __n128 v13 = v9;
  outlined retain of URL.ParseStrategy((uint64_t *)v20, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v13.n128_i64[0], v13.n128_u64[1]);
  *(_OWORD *)a2 = v15;
  *(__n128 *)(a2 + 16) = v16;
  *(__n128 *)(a2 + 32) = v17;
  *(__n128 *)(a2 + 48) = v18;
  *(void *)(a2 + 64) = v11;
  *(unsigned char *)(a2 + 72) = v12;
  __n128 result = v19;
  *(__n128 *)(a2 + 80) = v19;
  *(__n128 *)(a2 + 96) = v10;
  *(void *)(a2 + 112) = v4;
  *(void *)(a2 + 120) = v5;
  return result;
}

uint64_t URL.ParseStrategy.validate(_:)(long long *a1)
{
  long long v2 = a1[7];
  long long v130 = a1[6];
  long long v131 = v2;
  v132[0] = a1[8];
  *(_OWORD *)((char *)v132 + 10) = *(long long *)((char *)a1 + 138);
  long long v3 = a1[3];
  long long v126 = a1[2];
  long long v127 = v3;
  long long v4 = a1[5];
  long long v128 = a1[4];
  long long v129 = v4;
  long long v5 = a1[1];
  long long v124 = *a1;
  long long v125 = v5;
  long long v6 = v1[5];
  long long v7 = v1[3];
  long long v137 = v1[4];
  long long v138 = v6;
  long long v8 = v1[5];
  long long v9 = v1[7];
  long long v139 = v1[6];
  long long v140 = v9;
  long long v10 = v1[1];
  long long v133 = *v1;
  long long v134 = v10;
  long long v11 = v1[3];
  long long v13 = *v1;
  long long v12 = v1[1];
  long long v135 = v1[2];
  long long v136 = v11;
  long long v119 = v137;
  long long v120 = v8;
  long long v14 = v1[7];
  long long v121 = v139;
  long long v122 = v14;
  long long v115 = v13;
  long long v116 = v12;
  long long v117 = v135;
  long long v118 = v7;
  if ((URL.ParseStrategy.requiredComponentsValue.getter() & 1) != 0 && !(void)v126)
  {
    if (BYTE9(v124) != 1 || !(void)v124 || (*(unsigned char *)(v124 + 48) & 1) != 0) {
      return 0;
    }
    outlined retain of URLComponents((uint64_t)&v124);
    uint64_t v15 = String.subscript.getter();
    MEMORY[0x185301F50](v15);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v124);
    swift_bridgeObjectRelease();
  }
  long long v119 = v137;
  long long v120 = v138;
  long long v121 = v139;
  long long v122 = v140;
  long long v115 = v133;
  long long v116 = v134;
  long long v117 = v135;
  long long v118 = v136;
  if ((URL.ParseStrategy.requiredComponentsValue.getter() & 2) == 0) {
    goto LABEL_71;
  }
  long long v121 = v130;
  long long v122 = v131;
  v123[0] = v132[0];
  *(_OWORD *)((char *)v123 + 10) = *(_OWORD *)((char *)v132 + 10);
  long long v117 = v126;
  long long v118 = v127;
  long long v119 = v128;
  long long v120 = v129;
  long long v115 = v124;
  long long v116 = v125;
  uint64_t v16 = outlined retain of URLComponents((uint64_t)&v124);
  URLComponents._URLComponents.user.getter(v16);
  uint64_t v18 = v17;
  outlined release of URLComponents((uint64_t)&v124);
  swift_bridgeObjectRelease();
  if (v18)
  {
LABEL_71:
    long long v110 = v137;
    long long v111 = v138;
    long long v112 = v139;
    long long v113 = v140;
    long long v106 = v133;
    long long v107 = v134;
    long long v108 = v135;
    long long v109 = v136;
    if ((URL.ParseStrategy.requiredComponentsValue.getter() & 4) == 0) {
      goto LABEL_11;
    }
    long long v112 = v130;
    long long v113 = v131;
    v114[0] = v132[0];
    *(_OWORD *)((char *)v114 + 10) = *(_OWORD *)((char *)v132 + 10);
    long long v108 = v126;
    long long v109 = v127;
    long long v110 = v128;
    long long v111 = v129;
    long long v106 = v124;
    long long v107 = v125;
    uint64_t v19 = outlined retain of URLComponents((uint64_t)&v124);
    URLComponents._URLComponents.password.getter(v19);
    uint64_t v18 = v20;
    outlined release of URLComponents((uint64_t)&v124);
    swift_bridgeObjectRelease();
    if (v18)
    {
LABEL_11:
      long long v101 = v137;
      long long v102 = v138;
      long long v103 = v139;
      long long v104 = v140;
      long long v97 = v133;
      long long v98 = v134;
      long long v99 = v135;
      long long v100 = v136;
      if ((URL.ParseStrategy.requiredComponentsValue.getter() & 8) == 0) {
        goto LABEL_55;
      }
      long long v103 = v130;
      long long v104 = v131;
      v105[0] = v132[0];
      *(_OWORD *)((char *)v105 + 10) = *(_OWORD *)((char *)v132 + 10);
      long long v99 = v126;
      long long v100 = v127;
      long long v101 = v128;
      long long v102 = v129;
      long long v97 = v124;
      long long v98 = v125;
      unint64_t v21 = v129;
      if ((void)v129)
      {
        uint64_t v22 = *((void *)&v128 + 1);
        uint64_t v23 = outlined retain of URLComponents((uint64_t)&v124);
        unint64_t v24 = v21;
      }
      else if ((BYTE12(v124) & 1) != 0 && (void)v124 && (*(unsigned char *)(v124 + 120) & 1) == 0)
      {
        outlined retain of URLComponents((uint64_t)&v124);
        uint64_t v44 = String.subscript.getter();
        uint64_t v22 = MEMORY[0x185301F50](v44);
        unint64_t v24 = v45;
        uint64_t v23 = swift_bridgeObjectRelease();
      }
      else
      {
        outlined retain of URLComponents((uint64_t)&v124);
        uint64_t v23 = URLComponents._URLComponents.port.getter();
        if (v25)
        {
          URLComponents._URLComponents.percentEncodedUser.getter();
          uint64_t v18 = v26;
          uint64_t v23 = swift_bridgeObjectRelease();
          if (!v18)
          {
            outlined release of URLComponents((uint64_t)&v124);
            return v18;
          }
        }
        uint64_t v22 = 0;
        unint64_t v24 = 0xE000000000000000;
      }
      uint64_t v27 = v22 & 0xFFFFFFFFFFFFLL;
      if ((v24 & 0x2000000000000000) != 0) {
        uint64_t v28 = HIBYTE(v24) & 0xF;
      }
      else {
        uint64_t v28 = v22 & 0xFFFFFFFFFFFFLL;
      }
      if (!v28)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined release of URLComponents((uint64_t)&v124);
        goto LABEL_55;
      }
      if (BYTE8(v132[1]))
      {
        *(void *)&long long v88 = v22;
        *((void *)&v88 + 1) = v24;
        MEMORY[0x1F4188790](v23);
        unint64_t v68 = &v88;
        uint64_t v69 = MEMORY[0x1E4FBC870];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v67, v22, v24);
        if (v29 == 1)
        {
          unint64_t v31 = *((void *)&v88 + 1);
          Swift::Int v30 = v88;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v30, v31, MEMORY[0x1E4FBC870]);
          uint64_t v18 = v32;
          swift_bridgeObjectRelease_n();
LABEL_52:
          swift_bridgeObjectRelease();
LABEL_53:
          outlined release of URLComponents((uint64_t)&v124);
          if (!v18) {
            return v18;
          }
          goto LABEL_54;
        }
        uint64_t v18 = v29;
LABEL_39:
        swift_bridgeObjectRelease_n();
        goto LABEL_53;
      }
      if ((v24 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        if ((v24 & 0x2000000000000000) != 0)
        {
          *(void *)&long long v88 = v22;
          *((void *)&v88 + 1) = v24 & 0xFFFFFFFFFFFFFFLL;
          *(void *)&long long v79 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          *((void *)&v79 + 1) = 0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v88, HIBYTE(v24) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v79, 0, (unsigned __int8 *)&v88, HIBYTE(v24) & 0xF, (uint64_t *)&v70);
          uint64_t v18 = *((void *)&v70 + 1);
          swift_release();
        }
        else
        {
          if ((v22 & 0x1000000000000000) != 0)
          {
            uint64_t v33 = (unsigned __int8 *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            uint64_t v33 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            uint64_t v27 = v52;
          }
          *(void *)&long long v88 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          *((void *)&v88 + 1) = 0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v33, v27, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v88, 0, v33, v27);
          uint64_t v18 = v34;
        }
        swift_bridgeObjectRelease();
        if (v18 != 1) {
          goto LABEL_39;
        }
      }
      *(void *)&long long v88 = v22;
      *((void *)&v88 + 1) = v24;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      uint64_t v35 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v36 = objc_msgSend(v35, sel__fastCharacterContents);
      id v37 = v35;
      if (v36)
      {
        *(void *)&long long v88 = v22;
        *((void *)&v88 + 1) = v24;
        StringProtocol._ephemeralString.getter();
        uint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v39 = objc_msgSend(v38, sel_length);
        uint64_t v40 = swift_unknownObjectRelease();
        MEMORY[0x1F4188790](v40);
        LOBYTE(v68) = 0;
        MEMORY[0x1F4188790](v41);
        _OWORD v66[2] = v36;
        v66[3] = v39;
        specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v36, (uint64_t)v39, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v42, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v66);
        uint64_t v18 = v43;
        swift_bridgeObjectRelease_n();
        outlined release of URLComponents((uint64_t)&v124);
        if (!v18) {
          return v18;
        }
LABEL_54:
        swift_bridgeObjectRelease();
LABEL_55:
        long long v92 = v137;
        long long v93 = v138;
        long long v94 = v139;
        long long v95 = v140;
        long long v88 = v133;
        long long v89 = v134;
        long long v90 = v135;
        long long v91 = v136;
        if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x10) == 0) {
          goto LABEL_60;
        }
        long long v94 = v130;
        long long v95 = v131;
        v96[0] = v132[0];
        *(_OWORD *)((char *)v96 + 10) = *(_OWORD *)((char *)v132 + 10);
        long long v90 = v126;
        long long v91 = v127;
        long long v92 = v128;
        long long v93 = v129;
        long long v88 = v124;
        long long v89 = v125;
        URLComponents.port.getter();
        if ((v55 & 1) == 0)
        {
LABEL_60:
          long long v92 = v137;
          long long v93 = v138;
          long long v94 = v139;
          long long v95 = v140;
          long long v88 = v133;
          long long v89 = v134;
          long long v90 = v135;
          long long v91 = v136;
          if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x20) == 0) {
            goto LABEL_61;
          }
          long long v94 = v130;
          long long v95 = v131;
          v96[0] = v132[0];
          *(_OWORD *)((char *)v96 + 10) = *(_OWORD *)((char *)v132 + 10);
          long long v90 = v126;
          long long v91 = v127;
          long long v92 = v128;
          long long v93 = v129;
          long long v88 = v124;
          long long v89 = v125;
          outlined retain of URLComponents((uint64_t)&v124);
          unint64_t v56 = (unint64_t)URLComponents._URLComponents.path.getter();
          unint64_t v58 = v57;
          outlined release of URLComponents((uint64_t)&v124);
          swift_bridgeObjectRelease();
          uint64_t v59 = HIBYTE(v58) & 0xF;
          if ((v58 & 0x2000000000000000) == 0) {
            uint64_t v59 = v56 & 0xFFFFFFFFFFFFLL;
          }
          if (v59)
          {
LABEL_61:
            long long v83 = v137;
            long long v84 = v138;
            long long v85 = v139;
            long long v86 = v140;
            long long v79 = v133;
            long long v80 = v134;
            long long v81 = v135;
            long long v82 = v136;
            if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x40) == 0) {
              goto LABEL_63;
            }
            long long v85 = v130;
            long long v86 = v131;
            v87[0] = v132[0];
            *(_OWORD *)((char *)v87 + 10) = *(_OWORD *)((char *)v132 + 10);
            long long v81 = v126;
            long long v82 = v127;
            long long v83 = v128;
            long long v84 = v129;
            long long v79 = v124;
            long long v80 = v125;
            uint64_t v60 = outlined retain of URLComponents((uint64_t)&v124);
            URLComponents._URLComponents.query.getter(v60);
            uint64_t v18 = v61;
            outlined release of URLComponents((uint64_t)&v124);
            swift_bridgeObjectRelease();
            if (v18)
            {
LABEL_63:
              long long v74 = v137;
              long long v75 = v138;
              long long v76 = v139;
              long long v77 = v140;
              long long v70 = v133;
              long long v71 = v134;
              long long v72 = v135;
              long long v73 = v136;
              if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x80) != 0)
              {
                long long v77 = v131;
                v78[0] = v132[0];
                *(_OWORD *)((char *)v78 + 10) = *(_OWORD *)((char *)v132 + 10);
                long long v72 = v126;
                long long v73 = v127;
                long long v74 = v128;
                long long v75 = v129;
                long long v76 = v130;
                long long v70 = v124;
                long long v71 = v125;
                uint64_t v63 = outlined retain of URLComponents((uint64_t)&v124);
                URLComponents._URLComponents.fragment.getter(v63);
                uint64_t v65 = v64;
                outlined release of URLComponents((uint64_t)&v124);
                uint64_t v18 = v65 != 0;
                swift_bridgeObjectRelease();
              }
              else
              {
                return 1;
              }
            }
            return v18;
          }
        }
        return 0;
      }
      *(void *)&long long v88 = v22;
      *((void *)&v88 + 1) = v24;
      swift_bridgeObjectRetain();
      uint64_t v47 = String.init<A>(_:)();
      unint64_t v48 = v46;
      if ((v46 & 0x1000000000000000) != 0)
      {
        uint64_t v47 = static String._copying(_:)();
        unint64_t v54 = v53;
        swift_bridgeObjectRelease();
        unint64_t v48 = v54;
        if ((v54 & 0x2000000000000000) == 0) {
          goto LABEL_44;
        }
      }
      else if ((v46 & 0x2000000000000000) == 0)
      {
LABEL_44:
        if ((v47 & 0x1000000000000000) != 0)
        {
          uint64_t v49 = (unsigned __int8 *)((v48 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v50 = v47 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v49 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        *(void *)&long long v88 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v88 + 1) = 0;
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v49, v50, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v88, 0, v49, v50);
        uint64_t v18 = v51;
        goto LABEL_51;
      }
      *(void *)&long long v88 = v47;
      *((void *)&v88 + 1) = v48 & 0xFFFFFFFFFFFFFFLL;
      *(void *)&long long v79 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v79 + 1) = 0;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v88, HIBYTE(v48) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v79, 0, (unsigned __int8 *)&v88, HIBYTE(v48) & 0xF, (uint64_t *)&v70);
      uint64_t v18 = *((void *)&v70 + 1);
      swift_release();
LABEL_51:
      swift_bridgeObjectRelease_n();
      goto LABEL_52;
    }
  }
  return v18;
}

uint64_t URL.ParseStrategy.fillDefaultValues(for:)(long long *a1)
{
  long long v3 = 0;
  long long v4 = v1[5];
  v383[6] = v1[4];
  v383[7] = v4;
  long long v5 = v1[7];
  v383[8] = v1[6];
  v383[9] = v5;
  long long v6 = v1[1];
  v383[2] = *v1;
  v383[3] = v6;
  long long v7 = v1[3];
  v383[4] = v1[2];
  v383[5] = v7;
  uint64_t v8 = *((void *)a1 + 4);
  if (v8)
  {
    if ((v8 & 0x2000000000000000) == 0)
    {
      uint64_t v9 = *((void *)a1 + 3);
      goto LABEL_4;
    }
    uint64_t v13 = v8;
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v10 = swift_bridgeObjectRelease();
    if ((v13 & 0xF00000000000000) != 0) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  if (*((unsigned char *)a1 + 9) == 1 && *(void *)a1 && (*(unsigned char *)(*(void *)a1 + 48) & 1) == 0)
  {
    uint64_t v11 = String.subscript.getter();
    uint64_t v9 = MEMORY[0x185301F50](v11);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 0x2000000000000000) == 0)
    {
LABEL_4:
      swift_bridgeObjectRetain();
      uint64_t v10 = swift_bridgeObjectRelease();
      if ((v9 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v14 = URL.ParseStrategy.defaultValues.getter();
  if (*(void *)(v14 + 16) && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(1), (v16 & 1) != 0))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = (void *)v17[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
  }
  swift_bridgeObjectRelease();
  v20.value._uint64_t countAndFlagsBits = v19;
  v20.value._object = v18;
  URLComponents._URLComponents.setScheme(_:)(v20);
  if (v3)
  {

    swift_bridgeObjectRelease();
    LODWORD(v271) = 0;
    uint64_t v270 = 714;
    goto LABEL_201;
  }
  uint64_t v10 = swift_bridgeObjectRelease();
LABEL_19:
  long long v21 = a1[7];
  long long v381 = a1[6];
  long long v382 = v21;
  v383[0] = a1[8];
  *(_OWORD *)((char *)v383 + 10) = *(long long *)((char *)a1 + 138);
  long long v22 = a1[3];
  long long v377 = a1[2];
  long long v378 = v22;
  long long v23 = a1[5];
  long long v379 = a1[4];
  long long v380 = v23;
  long long v24 = a1[1];
  long long v375 = *a1;
  long long v376 = v24;
  char v25 = URLComponents._URLComponents.user.getter(v10);
  if (!v26) {
    goto LABEL_24;
  }
  unint64_t v27 = (unint64_t)v25;
  unint64_t v28 = v26;
  swift_bridgeObjectRelease();
  uint64_t v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0) {
    uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (!v29)
  {
LABEL_24:
    uint64_t v32 = URL.ParseStrategy.defaultValues.getter();
    if (*(void *)(v32 + 16) && (unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(2), (v34 & 1) != 0))
    {
      uint64_t v35 = (unint64_t *)(*(void *)(v32 + 56) + 16 * v33);
      unint64_t v30 = *v35;
      unint64_t v31 = v35[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((unsigned char *)a1 + 8) = 0;
      *((unsigned char *)a1 + 10) = 0;
      if ((v31 & 0x1000000000000000) != 0)
      {
        unint64_t v360 = v30;
        uint64_t v361 = v31;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v247 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v248 = (unsigned __int16 *)objc_msgSend(v247, sel__fastCharacterContents);
        uint64_t v249 = v247;
        uint64_t v250 = v248;
        id v251 = v249;
        if (v250)
        {
          unint64_t v360 = v30;
          uint64_t v361 = v31;
          StringProtocol._ephemeralString.getter();
          uint64_t v252 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v253 = objc_msgSend(v252, sel_length);
          swift_unknownObjectRelease();
          char v254 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v250, (uint64_t)v253, 2u, 0);
        }
        else
        {
          char v254 = specialized Sequence.allSatisfy(_:)(v30, v31, 2);
        }
        char v264 = v254;
        uint64_t v83 = swift_bridgeObjectRelease();
        if ((v264 & 1) == 0) {
          goto LABEL_56;
        }
      }
      else
      {
        if ((v31 & 0x2000000000000000) != 0)
        {
          uint64_t v37 = HIBYTE(v31) & 0xF;
          unint64_t v360 = v30;
          uint64_t v361 = v31 & 0xFFFFFFFFFFFFFFLL;
          id v36 = (char *)&v360;
        }
        else if ((v30 & 0x1000000000000000) != 0)
        {
          id v36 = (char *)((v31 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v37 = v30 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          id v36 = (char *)_StringObject.sharedUTF8.getter();
        }
        uint64_t v83 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v37, 2u, 0);
        if ((v83 & 1) == 0)
        {
LABEL_56:
          uint64_t v84 = HIBYTE(v31) & 0xF;
          if ((v31 & 0x2000000000000000) == 0) {
            uint64_t v84 = v30 & 0xFFFFFFFFFFFFLL;
          }
          if (v84)
          {
            unint64_t v360 = v30;
            uint64_t v361 = v31;
            MEMORY[0x1F4188790](v83);
            uint64_t v270 = (uint64_t)&v360;
            LOBYTE(v271) = 2;
            swift_bridgeObjectRetain();
            long long v85 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v269, v30, v31);
            if (v86)
            {
              unint64_t v30 = (unint64_t)v85;
              unint64_t v87 = v86;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              unint64_t v230 = v360;
              unint64_t v231 = v361;
              swift_bridgeObjectRetain();
              unint64_t v30 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v230, v231, 2u);
              unint64_t v87 = v232;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
            }
            unint64_t v31 = v87;
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v30 = 0;
            unint64_t v31 = 0xE000000000000000;
          }
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      *((unsigned char *)a1 + 8) = 0;
      *((unsigned char *)a1 + 10) = 0;
    }
    swift_bridgeObjectRelease();
    *((void *)a1 + 5) = v30;
    *((void *)a1 + 6) = v31;
    goto LABEL_32;
  }
  unint64_t v30 = *((void *)&v377 + 1);
  unint64_t v31 = v378;
LABEL_32:
  unint64_t v38 = *(void *)a1;
  char v39 = *((unsigned char *)a1 + 8);
  char v40 = *((unsigned char *)a1 + 9);
  char v41 = *((unsigned char *)a1 + 10);
  char v42 = *((unsigned char *)a1 + 11);
  char v43 = *((unsigned char *)a1 + 12);
  char v44 = *((unsigned char *)a1 + 13);
  char v45 = *((unsigned char *)a1 + 14);
  char v46 = *((unsigned char *)a1 + 15);
  char v47 = *((unsigned char *)a1 + 16);
  unint64_t v48 = *((void *)a1 + 7);
  char v49 = *((unsigned char *)a1 + 152);
  char v50 = *((unsigned char *)a1 + 153);
  unsigned __int8 v303 = *((unsigned char *)a1 + 96);
  unint64_t v360 = v38;
  LOBYTE(v361) = v39;
  BYTE1(v361) = v40;
  BYTE2(v361) = v41;
  BYTE3(v361) = v42;
  BYTE4(v361) = v43;
  BYTE5(v361) = v44;
  BYTE6(v361) = v45;
  HIBYTE(v361) = v46;
  char v362 = v47;
  long long v363 = *(long long *)((char *)a1 + 24);
  unint64_t v364 = v30;
  unint64_t v365 = v31;
  unint64_t v366 = v48;
  long long v51 = a1[5];
  long long v293 = a1[4];
  long long v367 = v293;
  long long v368 = v51;
  unsigned __int8 v369 = v303;
  long long v370 = *(long long *)((char *)a1 + 104);
  long long v371 = *(long long *)((char *)a1 + 120);
  long long v372 = *(long long *)((char *)a1 + 136);
  char v373 = v49;
  char v374 = v50;
  uint64_t v52 = URLComponents._URLComponents.password.getter(v303);
  if (v53)
  {
    unint64_t v54 = (unint64_t)v52;
    unint64_t v55 = v53;
    swift_bridgeObjectRelease();
    uint64_t v56 = HIBYTE(v55) & 0xF;
    if ((v55 & 0x2000000000000000) == 0) {
      uint64_t v56 = v54 & 0xFFFFFFFFFFFFLL;
    }
    if (v56)
    {
      unint64_t v57 = v293;
      goto LABEL_45;
    }
  }
  uint64_t v58 = URL.ParseStrategy.defaultValues.getter();
  if (*(void *)(v58 + 16) && (unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(4), (v60 & 1) != 0))
  {
    uint64_t v61 = (unint64_t *)(*(void *)(v58 + 56) + 16 * v59);
    unint64_t v48 = *v61;
    unint64_t v57 = v61[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((unsigned char *)a1 + 8) = 0;
    *((unsigned char *)a1 + 11) = 0;
    if ((v57 & 0x1000000000000000) != 0)
    {
      unint64_t v345 = v48;
      uint64_t v346 = v57;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      uint64_t v255 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v256 = (unsigned __int16 *)objc_msgSend(v255, sel__fastCharacterContents);
      id v257 = v255;
      if (v256)
      {
        unint64_t v345 = v48;
        uint64_t v346 = v57;
        StringProtocol._ephemeralString.getter();
        uint64_t v258 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v259 = objc_msgSend(v258, sel_length);
        swift_unknownObjectRelease();
        char v260 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v256, (uint64_t)v259, 2u, 0);
      }
      else
      {
        char v260 = specialized Sequence.allSatisfy(_:)(v48, v57, 2);
      }
      char v265 = v260;
      uint64_t v88 = swift_bridgeObjectRelease();
      if ((v265 & 1) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      if ((v57 & 0x2000000000000000) != 0)
      {
        uint64_t v63 = HIBYTE(v57) & 0xF;
        unint64_t v345 = v48;
        uint64_t v346 = v57 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v62 = (char *)&v345;
      }
      else if ((v48 & 0x1000000000000000) != 0)
      {
        uint64_t v62 = (char *)((v57 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v63 = v48 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v62 = (char *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v88 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v62, v63, 2u, 0);
      if ((v88 & 1) == 0)
      {
LABEL_64:
        uint64_t v89 = HIBYTE(v57) & 0xF;
        if ((v57 & 0x2000000000000000) == 0) {
          uint64_t v89 = v48 & 0xFFFFFFFFFFFFLL;
        }
        if (v89)
        {
          unint64_t v345 = v48;
          uint64_t v346 = v57;
          MEMORY[0x1F4188790](v88);
          uint64_t v270 = (uint64_t)&v345;
          LOBYTE(v271) = 2;
          swift_bridgeObjectRetain();
          long long v90 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v269, v48, v57);
          if (v91)
          {
            unint64_t v48 = (unint64_t)v90;
            unint64_t v92 = v91;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            unint64_t v233 = v345;
            unint64_t v234 = v346;
            swift_bridgeObjectRetain();
            unint64_t v48 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v233, v234, 2u);
            unint64_t v92 = v235;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
          unint64_t v57 = v92;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v48 = 0;
          unint64_t v57 = 0xE000000000000000;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v48 = 0;
    unint64_t v57 = 0;
    *((unsigned char *)a1 + 8) = 0;
    *((unsigned char *)a1 + 11) = 0;
  }
  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = v48;
  *((void *)a1 + 8) = v57;
LABEL_45:
  unint64_t v64 = *(void *)a1;
  char v65 = *((unsigned char *)a1 + 8);
  char v66 = *((unsigned char *)a1 + 9);
  char v67 = *((unsigned char *)a1 + 10);
  char v68 = *((unsigned char *)a1 + 11);
  char v69 = *((unsigned char *)a1 + 12);
  char v70 = *((unsigned char *)a1 + 13);
  char v71 = *((unsigned char *)a1 + 14);
  char v72 = *((unsigned char *)a1 + 15);
  char v73 = *((unsigned char *)a1 + 16);
  uint64_t v74 = *((void *)a1 + 9);
  char v76 = *((unsigned char *)a1 + 152);
  char v77 = *((unsigned char *)a1 + 153);
  unsigned __int8 v302 = *((unsigned char *)a1 + 96);
  uint64_t v75 = v302;
  unint64_t v345 = v64;
  LOBYTE(v346) = v65;
  BYTE1(v346) = v66;
  BYTE2(v346) = v67;
  BYTE3(v346) = v68;
  BYTE4(v346) = v69;
  BYTE5(v346) = v70;
  BYTE6(v346) = v71;
  HIBYTE(v346) = v72;
  char v347 = v73;
  long long v348 = *(long long *)((char *)a1 + 24);
  long long v349 = *(long long *)((char *)a1 + 40);
  unint64_t v350 = v48;
  unint64_t v351 = v57;
  uint64_t v352 = v74;
  long long v78 = a1[5];
  long long v353 = v78;
  unsigned __int8 v354 = v302;
  long long v355 = *(long long *)((char *)a1 + 104);
  long long v356 = *(long long *)((char *)a1 + 120);
  long long v357 = *(long long *)((char *)a1 + 136);
  char v358 = v76;
  char v359 = v77;
  if ((void)v78)
  {
    unint64_t v79 = v78;
  }
  else
  {
    if (!v64) {
      char v69 = 0;
    }
    if ((v69 & 1) != 0 && (*(unsigned char *)(v64 + 120) & 1) == 0)
    {
      uint64_t v93 = String.subscript.getter();
      uint64_t v74 = MEMORY[0x185301F50](v93);
      unint64_t v79 = v94;
      uint64_t v75 = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v75 = URLComponents._URLComponents.port.getter();
      if (v80)
      {
        URLComponents._URLComponents.percentEncodedUser.getter();
        uint64_t v82 = v81;
        uint64_t v75 = swift_bridgeObjectRelease();
        if (!v82) {
          goto LABEL_98;
        }
      }
      uint64_t v74 = 0;
      unint64_t v79 = 0xE000000000000000;
    }
  }
  uint64_t v95 = v74 & 0xFFFFFFFFFFFFLL;
  if ((v79 & 0x2000000000000000) != 0) {
    uint64_t v96 = HIBYTE(v79) & 0xF;
  }
  else {
    uint64_t v96 = v74 & 0xFFFFFFFFFFFFLL;
  }
  if (!v96)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v104 = 0xE000000000000000;
    goto LABEL_97;
  }
  if (v76)
  {
    char v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
    uint64_t v323 = v79;
    MEMORY[0x1F4188790](v75);
    uint64_t v270 = (uint64_t)&v322;
    uint64_t v271 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v97 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v269, v74, v79);
    if (v98 == 1)
    {
      long long v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v322;
      unint64_t v100 = v323;
      swift_bridgeObjectRetain();
      uint64_t v101 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((Swift::Int)v99, v100, MEMORY[0x1E4FBC870]);
LABEL_78:
      uint64_t v103 = v101;
      unint64_t v104 = v102;
      goto LABEL_79;
    }
    uint64_t v103 = (uint64_t)v97;
    unint64_t v104 = v98;
    goto LABEL_93;
  }
  if ((v79 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((v79 & 0x2000000000000000) != 0)
    {
      char v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
      uint64_t v323 = v79 & 0xFFFFFFFFFFFFFFLL;
      *(void *)&v319[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v319[0] + 1) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v322, HIBYTE(v79) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v319, 0, (unsigned __int8 *)&v322, HIBYTE(v79) & 0xF, &v304);
      uint64_t v103 = v304;
      unint64_t v104 = v305;
      swift_release();
    }
    else
    {
      if ((v74 & 0x1000000000000000) != 0)
      {
        int64_t v105 = (unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        int64_t v105 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        uint64_t v95 = v261;
      }
      char v322 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v323 = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      uint64_t v103 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v105, v95, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v322, 0, v105, v95);
      unint64_t v104 = v106;
    }
    swift_bridgeObjectRelease();
    if (v104 != 1)
    {
LABEL_93:
      swift_bridgeObjectRelease_n();
      if (!v104) {
        goto LABEL_98;
      }
      goto LABEL_94;
    }
  }
  char v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
  uint64_t v323 = v79;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  long long v107 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v108 = objc_msgSend(v107, sel__fastCharacterContents);
  id v109 = v107;
  if (!v108)
  {
    char v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
    uint64_t v323 = v79;
    swift_bridgeObjectRetain();
    uint64_t v190 = String.init<A>(_:)();
    unint64_t v191 = v189;
    long long v3 = 0;
    if ((v189 & 0x1000000000000000) != 0)
    {
      uint64_t v190 = static String._copying(_:)();
      unint64_t v267 = v266;
      swift_bridgeObjectRelease();
      unint64_t v191 = v267;
      if ((v267 & 0x2000000000000000) == 0) {
        goto LABEL_139;
      }
    }
    else if ((v189 & 0x2000000000000000) == 0)
    {
LABEL_139:
      if ((v190 & 0x1000000000000000) != 0)
      {
        unint64_t v192 = (unsigned __int8 *)((v191 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v193 = v190 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        unint64_t v192 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      char v322 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v323 = 0;
      uint64_t v101 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v192, v193, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v322, 0, v192, v193);
      goto LABEL_78;
    }
    char v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v190;
    uint64_t v323 = v191 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&v319[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v319[0] + 1) = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v322, HIBYTE(v191) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v319, 0, (unsigned __int8 *)&v322, HIBYTE(v191) & 0xF, &v304);
    uint64_t v103 = v304;
    unint64_t v104 = v305;
    swift_release();
LABEL_79:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (!v104) {
      goto LABEL_98;
    }
    goto LABEL_94;
  }
  char v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
  uint64_t v323 = v79;
  StringProtocol._ephemeralString.getter();
  long long v110 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v111 = objc_msgSend(v110, sel_length);
  uint64_t v112 = swift_unknownObjectRelease();
  MEMORY[0x1F4188790](v112);
  LOBYTE(v270) = 0;
  MEMORY[0x1F4188790](v113);
  v268[2] = v108;
  v268[3] = v111;
  uint64_t v103 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v108, (uint64_t)v111, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v114, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v268);
  unint64_t v104 = v115;
  swift_bridgeObjectRelease_n();
  long long v3 = 0;
  if (v104)
  {
LABEL_94:
    swift_bridgeObjectRelease();
    if ((v104 & 0x2000000000000000) == 0)
    {
      if ((v103 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_103;
      }
      goto LABEL_98;
    }
LABEL_97:
    if ((v104 & 0xF00000000000000) != 0) {
      goto LABEL_103;
    }
  }
LABEL_98:
  uint64_t v116 = URL.ParseStrategy.defaultValues.getter();
  if (*(void *)(v116 + 16) && (unint64_t v117 = specialized __RawDictionaryStorage.find<A>(_:)(8), (v118 & 1) != 0))
  {
    long long v119 = (unint64_t *)(*(void *)(v116 + 56) + 16 * v117);
    unint64_t v120 = *v119;
    unint64_t v121 = v119[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v120 = 0;
    unint64_t v121 = 0;
  }
  swift_bridgeObjectRelease();
  URLComponents._URLComponents.host.setter(v120, v121);
LABEL_103:
  *(void *)&long long v293 = v3;
  long long v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
  char v123 = *((unsigned char *)a1 + 8);
  char v301 = *((unsigned char *)a1 + 9);
  char v300 = *((unsigned char *)a1 + 10);
  char v299 = *((unsigned char *)a1 + 11);
  char v298 = *((unsigned char *)a1 + 12);
  char v124 = *((unsigned char *)a1 + 13);
  int v125 = *((unsigned __int8 *)a1 + 14);
  int v126 = *((unsigned __int8 *)a1 + 15);
  int v127 = *((unsigned __int8 *)a1 + 16);
  *(_DWORD *)long long v325 = *(_DWORD *)((char *)a1 + 17);
  *(_DWORD *)&v325[3] = *((_DWORD *)a1 + 5);
  uint64_t v129 = *((void *)a1 + 3);
  uint64_t v128 = *((void *)a1 + 4);
  uint64_t v130 = *((void *)a1 + 5);
  uint64_t v131 = *((void *)a1 + 6);
  uint64_t v132 = *((void *)a1 + 7);
  uint64_t v133 = *((void *)a1 + 8);
  uint64_t v134 = *((void *)a1 + 9);
  uint64_t v135 = *((void *)a1 + 10);
  uint64_t v136 = *((void *)a1 + 11);
  char v137 = *((unsigned char *)a1 + 96);
  *(_DWORD *)long long v336 = *(_DWORD *)((char *)a1 + 97);
  *(_DWORD *)&v336[3] = *((_DWORD *)a1 + 25);
  uint64_t v139 = *((void *)a1 + 13);
  uint64_t v138 = *((void *)a1 + 14);
  uint64_t v140 = *((void *)a1 + 15);
  uint64_t v141 = *((void *)a1 + 16);
  BYTE1(v323) = v301;
  BYTE2(v323) = v300;
  uint64_t v143 = *((void *)a1 + 17);
  uint64_t v142 = *((void *)a1 + 18);
  BYTE3(v323) = v299;
  int v144 = *((unsigned __int8 *)a1 + 152);
  BYTE4(v323) = v298;
  int v145 = *((unsigned __int8 *)a1 + 153);
  LOBYTE(v323) = v123;
  int v272 = v123 & 1;
  BYTE5(v323) = v124;
  char v146 = v124 & 1;
  char v335 = v137;
  char v147 = v137 & 1;
  uint64_t v291 = v129;
  long long v292 = v122;
  char v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v122;
  int v278 = v126;
  int v279 = v125;
  BYTE6(v323) = v125;
  HIBYTE(v323) = v126;
  int v277 = v127;
  char v324 = v127;
  uint64_t v326 = v129;
  uint64_t v289 = v130;
  uint64_t v290 = v128;
  uint64_t v327 = v128;
  uint64_t v328 = v130;
  uint64_t v287 = v132;
  uint64_t v288 = v131;
  uint64_t v329 = v131;
  uint64_t v330 = v132;
  uint64_t v285 = v134;
  uint64_t v286 = v133;
  uint64_t v331 = v133;
  uint64_t v332 = v134;
  uint64_t v283 = v139;
  uint64_t v284 = v135;
  uint64_t v333 = v135;
  uint64_t v148 = v136;
  uint64_t v334 = v136;
  uint64_t v337 = v139;
  uint64_t v281 = v140;
  uint64_t v282 = v138;
  uint64_t v338 = v138;
  uint64_t v339 = v140;
  uint64_t v280 = v141;
  uint64_t v340 = v141;
  uint64_t v276 = v143;
  uint64_t v341 = v143;
  uint64_t v273 = v142;
  uint64_t v342 = v142;
  int v274 = v144;
  int v275 = v145;
  char v343 = v144;
  char v344 = v145;
  URLComponents.port.getter();
  if ((v149 & 1) == 0)
  {
    char v150 = v146;
    char v151 = v272;
    goto LABEL_109;
  }
  uint64_t v152 = URL.ParseStrategy.defaultValues.getter();
  uint64_t v153 = specialized Dictionary.subscript.getter(16, v152);
  unint64_t v155 = v154;
  swift_bridgeObjectRelease();
  char v150 = v146;
  char v151 = v272;
  if (v155)
  {
    uint64_t v156 = specialized FixedWidthInteger.init(_:)(v153, v155);
    uint64_t v148 = v156;
    char v147 = v157;
    *((unsigned char *)a1 + 8) = 0;
    *((unsigned char *)a1 + 13) = 0;
    if ((v157 & 1) != 0 || (v156 & 0x8000000000000000) == 0)
    {
      char v150 = 0;
      char v151 = 0;
      *((void *)a1 + 11) = v156;
      *((unsigned char *)a1 + 96) = v157 & 1;
      goto LABEL_109;
    }
    LODWORD(v271) = 0;
    uint64_t v270 = 764;
LABEL_201:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_109:
  char v297 = v147 & 1;
  char v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v292;
  LOBYTE(v323) = v151;
  BYTE1(v323) = v301;
  BYTE2(v323) = v300;
  BYTE3(v323) = v299;
  BYTE4(v323) = v298;
  BYTE5(v323) = v150;
  BYTE6(v323) = v279 & 1;
  HIBYTE(v323) = v278 & 1;
  char v324 = v277 & 1;
  uint64_t v326 = v291;
  uint64_t v327 = v290;
  uint64_t v328 = v289;
  uint64_t v329 = v288;
  uint64_t v330 = v287;
  uint64_t v331 = v286;
  uint64_t v332 = v285;
  uint64_t v333 = v284;
  uint64_t v334 = v148;
  char v335 = v147 & 1;
  uint64_t v337 = v283;
  uint64_t v338 = v282;
  uint64_t v339 = v281;
  uint64_t v340 = v280;
  uint64_t v341 = v276;
  uint64_t v342 = v273;
  char v343 = v274 & 1;
  char v344 = v275 & 1;
  unint64_t v158 = (unint64_t)URLComponents._URLComponents.path.getter();
  unint64_t v160 = v159;
  uint64_t v161 = swift_bridgeObjectRelease();
  uint64_t v162 = HIBYTE(v160) & 0xF;
  if ((v160 & 0x2000000000000000) == 0) {
    uint64_t v162 = v158 & 0xFFFFFFFFFFFFLL;
  }
  if (!v162)
  {
    uint64_t v163 = URL.ParseStrategy.defaultValues.getter();
    uint64_t v164 = specialized Dictionary.subscript.getter(32, v163);
    unint64_t v166 = v165;
    swift_bridgeObjectRelease();
    if (v166) {
      unint64_t v167 = v164;
    }
    else {
      unint64_t v167 = 0;
    }
    if (v166) {
      unint64_t v168 = v166;
    }
    else {
      unint64_t v168 = 0xE000000000000000;
    }
    uint64_t v161 = URLComponents._URLComponents.path.setter(v167, v168);
  }
  long long v169 = a1[7];
  v319[6] = a1[6];
  long long v320 = v169;
  v321[0] = a1[8];
  *(_OWORD *)((char *)v321 + 10) = *(long long *)((char *)a1 + 138);
  long long v170 = a1[3];
  v319[2] = a1[2];
  v319[3] = v170;
  long long v171 = a1[5];
  v319[4] = a1[4];
  v319[5] = v171;
  long long v172 = a1[1];
  v319[0] = *a1;
  v319[1] = v172;
  uint64_t v173 = URLComponents._URLComponents.query.getter(v161);
  if (!v174) {
    goto LABEL_124;
  }
  unint64_t v175 = (unint64_t)v173;
  unint64_t v176 = v174;
  swift_bridgeObjectRelease();
  uint64_t v177 = HIBYTE(v176) & 0xF;
  if ((v176 & 0x2000000000000000) == 0) {
    uint64_t v177 = v175 & 0xFFFFFFFFFFFFLL;
  }
  if (!v177)
  {
LABEL_124:
    uint64_t v180 = URL.ParseStrategy.defaultValues.getter();
    uint64_t v178 = specialized Dictionary.subscript.getter(64, v180);
    unint64_t v179 = v181;
    swift_bridgeObjectRelease();
    *((unsigned char *)a1 + 8) = 0;
    *((unsigned char *)a1 + 15) = 0;
    if (v179)
    {
      if ((v179 & 0x1000000000000000) != 0)
      {
        uint64_t v304 = v178;
        uint64_t v305 = v179;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v236 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v237 = (unsigned __int16 *)objc_msgSend(v236, sel__fastCharacterContents);
        id v238 = v236;
        if (v237)
        {
          uint64_t v304 = v178;
          uint64_t v305 = v179;
          StringProtocol._ephemeralString.getter();
          int64_t v239 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v240 = (uint64_t)objc_msgSend(v239, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v240) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v237, v240, 0x40u, 0);
          uint64_t v184 = swift_bridgeObjectRelease();
          if (v240) {
            goto LABEL_144;
          }
        }
        else
        {
          char v262 = specialized Sequence.allSatisfy(_:)(v178, v179, 64);
          uint64_t v184 = swift_bridgeObjectRelease();
          if (v262) {
            goto LABEL_144;
          }
        }
LABEL_131:
        uint64_t v185 = HIBYTE(v179) & 0xF;
        if ((v179 & 0x2000000000000000) == 0) {
          uint64_t v185 = v178 & 0xFFFFFFFFFFFFLL;
        }
        if (v185)
        {
          uint64_t v304 = v178;
          uint64_t v305 = v179;
          MEMORY[0x1F4188790](v184);
          uint64_t v270 = (uint64_t)&v304;
          LOBYTE(v271) = 64;
          swift_bridgeObjectRetain();
          __int16 v186 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v269, v178, v179);
          if (v187)
          {
            uint64_t v178 = (uint64_t)v186;
            unint64_t v188 = v187;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            unint64_t v194 = v304;
            unint64_t v195 = v305;
            swift_bridgeObjectRetain();
            uint64_t v178 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v194, v195, 0x40u);
            unint64_t v188 = v196;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
          unint64_t v179 = v188;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v178 = 0;
          unint64_t v179 = 0xE000000000000000;
        }
        goto LABEL_144;
      }
      if ((v179 & 0x2000000000000000) != 0)
      {
        uint64_t v183 = HIBYTE(v179) & 0xF;
        uint64_t v304 = v178;
        uint64_t v305 = v179 & 0xFFFFFFFFFFFFFFLL;
        int64_t v182 = (char *)&v304;
      }
      else if ((v178 & 0x1000000000000000) != 0)
      {
        int64_t v182 = (char *)((v179 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v183 = v178 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        int64_t v182 = (char *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v184 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v182, v183, 0x40u, 0);
      if ((v184 & 1) == 0) {
        goto LABEL_131;
      }
    }
LABEL_144:
    swift_bridgeObjectRelease();
    *((void *)a1 + 15) = v178;
    *((void *)a1 + 16) = v179;
    goto LABEL_145;
  }
  uint64_t v178 = *((void *)&v320 + 1);
  unint64_t v179 = *(void *)&v321[0];
LABEL_145:
  uint64_t v197 = *(void *)a1;
  char v198 = *((unsigned char *)a1 + 8);
  char v199 = *((unsigned char *)a1 + 9);
  char v200 = *((unsigned char *)a1 + 10);
  char v201 = *((unsigned char *)a1 + 11);
  char v202 = *((unsigned char *)a1 + 12);
  char v203 = *((unsigned char *)a1 + 13);
  char v204 = *((unsigned char *)a1 + 14);
  char v205 = *((unsigned char *)a1 + 15);
  char v206 = *((unsigned char *)a1 + 16);
  uint64_t v207 = *((void *)a1 + 11);
  char v208 = *((unsigned char *)a1 + 152);
  char v209 = *((unsigned char *)a1 + 153);
  char v296 = *((unsigned char *)a1 + 96);
  uint64_t v304 = v197;
  LOBYTE(v305) = v198;
  BYTE1(v305) = v199;
  BYTE2(v305) = v200;
  BYTE3(v305) = v201;
  BYTE4(v305) = v202;
  BYTE5(v305) = v203;
  BYTE6(v305) = v204;
  HIBYTE(v305) = v205;
  char v306 = v206;
  long long v307 = *(long long *)((char *)a1 + 24);
  long long v308 = *(long long *)((char *)a1 + 40);
  long long v309 = *(long long *)((char *)a1 + 56);
  long long v310 = *(long long *)((char *)a1 + 72);
  uint64_t v311 = v207;
  char v312 = v296;
  long long v313 = *(long long *)((char *)a1 + 104);
  uint64_t v314 = v178;
  unint64_t v315 = v179;
  long long v316 = *(long long *)((char *)a1 + 136);
  char v317 = v208;
  char v318 = v209;
  unint64_t v210 = URLComponents._URLComponents.fragment.getter(v207);
  if (!v211) {
    goto LABEL_149;
  }
  unint64_t v212 = (unint64_t)v210;
  unint64_t v213 = v211;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v215 = HIBYTE(v213) & 0xF;
  if ((v213 & 0x2000000000000000) == 0) {
    uint64_t v215 = v212 & 0xFFFFFFFFFFFFLL;
  }
  if (!v215)
  {
LABEL_149:
    uint64_t v216 = URL.ParseStrategy.defaultValues.getter();
    unint64_t v217 = specialized Dictionary.subscript.getter(128, v216);
    unint64_t v219 = v218;
    swift_bridgeObjectRelease();
    *((unsigned char *)a1 + 8) = 0;
    *((unsigned char *)a1 + 16) = 0;
    if (v219)
    {
      if ((v219 & 0x1000000000000000) != 0)
      {
        unint64_t v294 = v217;
        uint64_t v295 = v219;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        unint64_t v241 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v242 = (unsigned __int16 *)objc_msgSend(v241, sel__fastCharacterContents);
        id v243 = v241;
        if (v242)
        {
          unint64_t v294 = v217;
          uint64_t v295 = v219;
          StringProtocol._ephemeralString.getter();
          uint64_t v244 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v245 = objc_msgSend(v244, sel_length);
          swift_unknownObjectRelease();
          char v246 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v242, (uint64_t)v245, 0x40u, 0);
        }
        else
        {
          char v246 = specialized Sequence.allSatisfy(_:)(v217, v219, 64);
        }
        char v263 = v246;
        uint64_t v222 = swift_bridgeObjectRelease();
        if ((v263 & 1) == 0) {
          goto LABEL_156;
        }
      }
      else
      {
        if ((v219 & 0x2000000000000000) != 0)
        {
          uint64_t v221 = HIBYTE(v219) & 0xF;
          unint64_t v294 = v217;
          uint64_t v295 = v219 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v220 = (char *)&v294;
        }
        else if ((v217 & 0x1000000000000000) != 0)
        {
          uint64_t v220 = (char *)((v219 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v221 = v217 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v220 = (char *)_StringObject.sharedUTF8.getter();
        }
        uint64_t v222 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v220, v221, 0x40u, 0);
        if ((v222 & 1) == 0)
        {
LABEL_156:
          uint64_t v223 = HIBYTE(v219) & 0xF;
          if ((v219 & 0x2000000000000000) == 0) {
            uint64_t v223 = v217 & 0xFFFFFFFFFFFFLL;
          }
          if (v223)
          {
            unint64_t v294 = v217;
            uint64_t v295 = v219;
            MEMORY[0x1F4188790](v222);
            uint64_t v270 = (uint64_t)&v294;
            LOBYTE(v271) = 64;
            swift_bridgeObjectRetain();
            uint64_t v224 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (uint64_t)v269, v217, v219);
            if (v225)
            {
              unint64_t v217 = (unint64_t)v224;
              unint64_t v226 = v225;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              unint64_t v227 = v294;
              unint64_t v228 = v295;
              swift_bridgeObjectRetain();
              unint64_t v217 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v227, v228, 0x40u);
              unint64_t v226 = v229;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
            }
            unint64_t v219 = v226;
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v217 = 0;
            unint64_t v219 = 0xE000000000000000;
          }
        }
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    *((void *)a1 + 17) = v217;
    *((void *)a1 + 18) = v219;
  }
  return result;
}

void URL.ParseStrategy.parse(_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  long long v7 = v3[5];
  _OWORD v85[6] = v3[4];
  v85[7] = v7;
  long long v8 = v3[7];
  v85[8] = v3[6];
  v85[9] = v8;
  long long v9 = v3[1];
  v85[2] = *v3;
  v85[3] = v9;
  long long v10 = v3[3];
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v11 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v85[4] = v3[2];
  v85[5] = v10;
  if (v11)
  {
    do
    {
      String.subscript.getter();
      char v12 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
    }
    while ((v12 & 1) == 0 && 4 * v11 != (unint64_t)String.index(after:)() >> 14);
  }
  *(void *)&long long v68 = String.subscript.getter();
  *((void *)&v68 + 1) = v13;
  *(void *)&long long v69 = v14;
  *((void *)&v69 + 1) = v15;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v16 = String.init<A>(_:)();
  unint64_t v18 = v17;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v16, v18, 1, (uint64_t)v83);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v83, (uint64_t)v84);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v84) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v65 = v84[6];
    long long v66 = v84[7];
    v67[0] = v85[0];
    *(_OWORD *)((char *)v67 + 10) = *(_OWORD *)((char *)v85 + 10);
    long long v61 = v84[2];
    long long v62 = v84[3];
    long long v63 = v84[4];
    long long v64 = v84[5];
    long long v59 = v84[0];
    long long v60 = v84[1];
    swift_bridgeObjectRelease();
    long long v56 = v65;
    long long v57 = v66;
    v58[0] = v67[0];
    *(_OWORD *)((char *)v58 + 10) = *(_OWORD *)((char *)v67 + 10);
    long long v52 = v61;
    long long v53 = v62;
    long long v54 = v63;
    long long v55 = v64;
    long long v50 = v59;
    long long v51 = v60;
    long long v74 = v65;
    long long v75 = v66;
    *(_OWORD *)char v76 = v67[0];
    *(_OWORD *)&v76[10] = *(_OWORD *)((char *)v67 + 10);
    long long v70 = v61;
    long long v71 = v62;
    long long v72 = v63;
    long long v73 = v64;
    long long v68 = v59;
    long long v69 = v60;
    if (URL.ParseStrategy.validate(_:)(&v50))
    {
      URL.ParseStrategy.fillDefaultValues(for:)(&v68);
      long long v56 = v74;
      long long v57 = v75;
      v58[0] = *(_OWORD *)v76;
      *(_OWORD *)((char *)v58 + 10) = *(_OWORD *)&v76[10];
      long long v52 = v70;
      long long v53 = v71;
      long long v54 = v72;
      long long v55 = v73;
      long long v50 = v68;
      long long v51 = v69;
      URLComponents.url.getter(v49);
      outlined release of URLComponents((uint64_t)&v50);
      uint64_t v19 = v49[1];
      uint64_t v20 = v49[2];
      if (v49[0])
      {
        *a3 = v49[0];
        a3[1] = v19;
        a3[2] = v20;
        return;
      }
    }
    else
    {
      outlined release of URLComponents?(v83);
    }
  }
  URL.init(string:)(0xD000000000000039, 0x80000001823AB0D0, (uint64_t *)&v59);
  long long v21 = (void *)v59;
  if (!(void)v59) {
    goto LABEL_24;
  }
  LOBYTE(v68) = 1;
  *(void *)&long long v69 = 0;
  *((void *)&v68 + 1) = 0;
  BYTE8(v69) = 1;
  long long v70 = 0uLL;
  LOBYTE(v71) = 1;
  *(void *)&long long v72 = 0;
  *((void *)&v71 + 1) = 0;
  BYTE8(v72) = 1;
  long long v73 = 0uLL;
  LOBYTE(v74) = 0;
  *((void *)&v74 + 1) = 0;
  LOBYTE(v75) = 1;
  *(void *)char v76 = 0;
  *((void *)&v75 + 1) = 0;
  v76[8] = 1;
  *(void *)&v76[16] = 0;
  *(void *)&v76[24] = 0;
  char v77 = 1;
  uint64_t v79 = 0;
  uint64_t v78 = 0;
  char v80 = 1;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  long long v50 = v59;
  *(void *)&long long v51 = v60;
  uint64_t v22 = URL.FormatStyle.format(_:)((uint64_t *)&v50);
  long long v24 = v23;
  *(void *)&long long v68 = 0;
  *((void *)&v68 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(88);
  v25._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
  v25._object = (void *)0xED00002065737261;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = a1;
  v26._object = (void *)a2;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 0xD000000000000046;
  v27._object = (void *)0x80000001823AB110;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = v22;
  unint64_t v86 = v24;
  v28._object = v24;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 46;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  long long v30 = v68;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1821037E0;
  *(void *)(v31 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v31 + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(v31 + 40) = v32;
  *(_OWORD *)(v31 + 48) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  unint64_t v33 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(v31 + 32, (uint64_t)&v68);
  long long v34 = v68;
  swift_retain();
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
  if (v36)
  {
    __break(1u);
  }
  else
  {
    v33[(v35 >> 6) + 8] |= 1 << v35;
    *(_OWORD *)(v33[6] + 16 * v35) = v34;
    outlined init with take of Any(&v69, (_OWORD *)(v33[7] + 32 * v35));
    uint64_t v37 = v33[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (!v38)
    {
      v33[2] = v39;
      swift_release();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v40 = objc_allocWithZone((Class)NSError);
      uint64_t v41 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v42 = objc_msgSend(v40, sel_initWithDomain_code_userInfo_, v41, 2048, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v43 = objc_msgSend(v42, sel_domain);
      id v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      uint64_t v46 = v45;

      if (v44 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v46 == v47)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_20:
        swift_willThrow();
        outlined consume of URL?(v21);
        outlined consume of URL?(0);
        return;
      }
      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v48) {
        goto LABEL_20;
      }
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

void protocol witness for ParseStrategy.parse(_:) in conformance URL.ParseStrategy(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double static ParseStrategy<>.url.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 24) = xmmword_18210C780;
  *(void *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 1;
  *(unsigned char *)(a1 + 72) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = xmmword_182106C90;
  *(_OWORD *)(a1 + 96) = xmmword_182106C90;
  *(_OWORD *)(a1 + 112) = xmmword_182106C90;
  return result;
}

__n128 URL.init<A>(_:strategy:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v12, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  if (!v5)
  {
    __n128 result = v13;
    *(void *)a5 = v12;
    *(__n128 *)(a5 + 8) = result;
  }
  return result;
}

void URL.ParseStrategy.consuming(_:startingAt:in:)(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  long long v5 = v3[5];
  v72[6] = v3[4];
  v72[7] = v5;
  long long v6 = v3[7];
  v72[8] = v3[6];
  v72[9] = v6;
  long long v7 = v3[1];
  v72[2] = *v3;
  v72[3] = v7;
  long long v8 = v3[3];
  v72[4] = v3[2];
  v72[5] = v8;
  if (a1 >> 14 >= a2 >> 14) {
    goto LABEL_21;
  }
  unint64_t v9 = String.subscript.getter();
  unint64_t v12 = v9;
  unint64_t v13 = v10;
  uint64_t v14 = v11;
  unint64_t v15 = v10 >> 14;
  unint64_t v16 = v9 >> 14;
  if (v9 >> 14 == v10 >> 14)
  {
    uint64_t v73 = v11;
    unint64_t v17 = v10;
  }
  else
  {
    unint64_t v33 = v9 >> 14;
    Substring.subscript.getter();
    char v18 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    unint64_t v17 = v12;
    if (v18)
    {
LABEL_14:
      *(void *)&long long v64 = Substring.subscript.getter();
      *((void *)&v64 + 1) = v24;
      *(void *)&long long v65 = v25;
      *((void *)&v65 + 1) = v26;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v27 = String.init<A>(_:)();
      unint64_t v29 = v28;
      swift_bridgeObjectRetain();
      specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v27, v29, 1, (uint64_t)v63);
      outlined init with take of URLComponents._URLComponents?((uint64_t)v63, (uint64_t)&v64);
      if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v64) == 1)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v51 = v70;
        long long v52 = v71;
        v53[0] = v72[0];
        *(_OWORD *)((char *)v53 + 10) = *(_OWORD *)((char *)v72 + 10);
        long long v47 = v66;
        long long v48 = v67;
        long long v49 = v68;
        long long v50 = v69;
        long long v45 = v64;
        long long v46 = v65;
        swift_bridgeObjectRelease();
        long long v42 = v51;
        long long v43 = v52;
        v44[0] = v53[0];
        *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v53 + 10);
        long long v38 = v47;
        long long v39 = v48;
        long long v40 = v49;
        long long v41 = v50;
        long long v36 = v45;
        long long v37 = v46;
        long long v60 = v51;
        long long v61 = v52;
        v62[0] = v53[0];
        *(_OWORD *)((char *)v62 + 10) = *(_OWORD *)((char *)v53 + 10);
        long long v56 = v47;
        long long v57 = v48;
        long long v58 = v49;
        long long v59 = v50;
        long long v54 = v45;
        long long v55 = v46;
        if (URL.ParseStrategy.validate(_:)(&v36))
        {
          URL.ParseStrategy.fillDefaultValues(for:)(&v54);
          long long v42 = v60;
          long long v43 = v61;
          v44[0] = v62[0];
          *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v62 + 10);
          long long v38 = v56;
          long long v39 = v57;
          long long v40 = v58;
          long long v41 = v59;
          long long v36 = v54;
          long long v37 = v55;
          URLComponents.url.getter((uint64_t *)&v34);
          outlined release of URLComponents((uint64_t)&v36);
          swift_bridgeObjectRelease();
          long long v30 = v34;
          if ((void)v34)
          {
            uint64_t v31 = v35;
            *(void *)a3 = v17;
            *(_OWORD *)(a3 + 8) = v30;
            *(void *)(a3 + 24) = v31;
            return;
          }
          goto LABEL_21;
        }
        outlined release of URLComponents?(v63);
      }
      swift_bridgeObjectRelease();
LABEL_21:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    }
    uint64_t v32 = a3;
    unint64_t v19 = Substring.index(after:)();
    unint64_t v20 = v19 >> 14;
    uint64_t v73 = v14;
    if (v19 >> 14 == v15)
    {
      unint64_t v17 = v13;
    }
    else
    {
      unint64_t v17 = v19;
      Substring.subscript.getter();
      char v21 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
      if (v21)
      {
LABEL_10:
        unint64_t v15 = v20;
      }
      else
      {
        while (1)
        {
          unint64_t v22 = Substring.index(after:)();
          unint64_t v20 = v22 >> 14;
          if (v22 >> 14 == v15) {
            break;
          }
          unint64_t v17 = v22;
          Substring.subscript.getter();
          char v23 = Character.isWhitespace.getter();
          swift_bridgeObjectRelease();
          if (v23) {
            goto LABEL_10;
          }
        }
        unint64_t v17 = v13;
      }
    }
    a3 = v32;
    unint64_t v16 = v33;
  }
  if (v15 >= v16) {
    goto LABEL_14;
  }
  __break(1u);
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance URL.ParseStrategy(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance URL.ParseStrategy(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();

  return MEMORY[0x1F4188350](a1, v2);
}

uint64_t static RegexComponent<>.url(scheme:user:password:host:port:path:query:fragment:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  uint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  uint64_t v13 = *a3;
  unint64_t v14 = a3[1];
  uint64_t v15 = *a4;
  unint64_t v16 = a4[1];
  uint64_t v17 = *a5;
  uint64_t v18 = *a6;
  unint64_t v19 = a6[1];
  uint64_t v20 = *a7;
  unint64_t v21 = a7[1];
  unint64_t v23 = a8[1];
  uint64_t v24 = *a8;
  char v25 = *((unsigned char *)a5 + 8);
  *(void *)a9 = *a1;
  *(void *)(a9 + 8) = v10;
  *(void *)(a9 + 16) = v11;
  *(void *)(a9 + 24) = v12;
  *(void *)(a9 + 32) = v13;
  *(void *)(a9 + 40) = v14;
  *(void *)(a9 + 48) = v15;
  *(void *)(a9 + 56) = v16;
  *(void *)(a9 + 64) = v17;
  *(unsigned char *)(a9 + 72) = v25;
  *(void *)(a9 + 80) = v18;
  *(void *)(a9 + 88) = v19;
  *(void *)(a9 + 96) = v20;
  *(void *)(a9 + 104) = v21;
  *(void *)(a9 + 112) = v24;
  *(void *)(a9 + 120) = v23;
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v9, v10);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v11, v12);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v13, v14);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v15, v16);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v18, v19);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v20, v21);

  return outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v24, v23);
}

uint64_t specialized static URL.ParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  unint64_t v43 = *(void *)(a1 + 40);
  uint64_t v44 = *(void *)(a1 + 32);
  unint64_t v40 = *(void *)(a1 + 56);
  uint64_t v41 = *(void *)(a1 + 48);
  uint64_t v36 = *(void *)(a1 + 64);
  int v37 = *(unsigned __int8 *)(a1 + 72);
  unint64_t v32 = *(void *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 80);
  unint64_t v28 = *(void *)(a1 + 104);
  uint64_t v29 = *(void *)(a1 + 96);
  unint64_t v24 = *(void *)(a1 + 120);
  uint64_t v25 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  unint64_t v10 = *(void *)(a2 + 40);
  uint64_t v42 = *(void *)(a2 + 32);
  unint64_t v38 = *(void *)(a2 + 56);
  uint64_t v39 = *(void *)(a2 + 48);
  uint64_t v34 = *(void *)(a2 + 64);
  char v35 = *(unsigned char *)(a2 + 72);
  unint64_t v30 = *(void *)(a2 + 88);
  uint64_t v31 = *(void *)(a2 + 80);
  unint64_t v26 = *(void *)(a2 + 104);
  uint64_t v27 = *(void *)(a2 + 96);
  unint64_t v22 = *(void *)(a2 + 120);
  uint64_t v23 = *(void *)(a2 + 112);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(*(void *)a1, v3);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v7);
  char v11 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v2, v3, v6, v7);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v7);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v2, v3);
  if (v11)
  {
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v8, v9);
    char v12 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v4, v5, v8, v9);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v8, v9);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
    if (v12)
    {
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v44, v43);
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v42, v10);
      char v13 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v44, v43, v42, v10);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v42, v10);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v44, v43);
      if (v13)
      {
        outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v41, v40);
        outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v39, v38);
        char v14 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v41, v40, v39, v38);
        outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v39, v38);
        outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v41, v40);
        if (v14)
        {
          if (v37)
          {
            if (v36)
            {
              char v15 = v35;
              if (!v34) {
                char v15 = 0;
              }
              if ((v15 & 1) == 0) {
                return 0;
              }
            }
            else
            {
              char v17 = v35;
              if (v34) {
                char v17 = 0;
              }
              if ((v17 & 1) == 0) {
                return 0;
              }
            }
          }
          else
          {
            char v16 = v35;
            if (v36 != v34) {
              char v16 = 1;
            }
            if (v16) {
              return 0;
            }
          }
          outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v33, v32);
          outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v31, v30);
          char v18 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v33, v32, v31, v30);
          outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v31, v30);
          outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v33, v32);
          if (v18)
          {
            outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v29, v28);
            outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v27, v26);
            char v19 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v29, v28, v27, v26);
            outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v27, v26);
            outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v29, v28);
            if (v19)
            {
              outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v25, v24);
              outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v23, v22);
              char v20 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v25, v24, v23, v22);
              outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v23, v22);
              outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v25, v24);
              return v20 & 1;
            }
          }
        }
      }
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }
  return result;
}

uint64_t outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t *outlined retain of URL.ParseStrategy(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[10];
  uint64_t v11 = a1[11];
  uint64_t v13 = a1[13];
  uint64_t v14 = a1[12];
  uint64_t v15 = a1[15];
  uint64_t v16 = a1[14];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  return a1;
}

uint64_t type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.OptionalCodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.RequiredCodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t outlined init with take of URLComponents._URLComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents._URLComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in URL.ParseStrategy.ComponentParseStrategy<A>()
{
  return swift_getWitnessTable();
}

unint64_t instantiation function for generic protocol witness table for URL.ParseStrategy(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();
  a1[2] = lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();
  unint64_t result = lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();
  a1[3] = result;
  return result;
}

unint64_t destroy for URL.ParseStrategy(void *a1)
{
  if (a1[1] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (a1[3] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (a1[5] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (a1[7] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (a1[11] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (a1[13] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  unint64_t result = a1[15];
  if (result >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for URL.ParseStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= 2)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 >= 2)
  {
    *(void *)(a1 + 16) = *v5;
    *(void *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
  }
  uint64_t v7 = (void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  if (v8 >= 2)
  {
    *(void *)(a1 + 32) = *v7;
    *(void *)(a1 + 40) = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v7;
  }
  uint64_t v9 = (void *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 56);
  if (v10 >= 2)
  {
    *(void *)(a1 + 48) = *v9;
    *(void *)(a1 + 56) = v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v9;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v11 = (void *)(a2 + 80);
  unint64_t v12 = *(void *)(a2 + 88);
  if (v12 >= 2)
  {
    *(void *)(a1 + 80) = *v11;
    *(void *)(a1 + 88) = v12;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v11;
  }
  uint64_t v13 = (void *)(a2 + 96);
  unint64_t v14 = *(void *)(a2 + 104);
  if (v14 >= 2)
  {
    *(void *)(a1 + 96) = *v13;
    *(void *)(a1 + 104) = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v13;
  }
  uint64_t v15 = (void *)(a2 + 112);
  unint64_t v16 = *(void *)(a2 + 120);
  if (v16 >= 2)
  {
    *(void *)(a1 + 112) = *v15;
    *(void *)(a1 + 120) = v16;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v15;
  }
  return a1;
}

uint64_t assignWithCopy for URL.ParseStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) < 2uLL)
  {
    if (v4 >= 2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 < 2)
  {
    outlined destroy of String(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 2uLL)
  {
    if (v5 >= 2)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v5 < 2)
  {
    outlined destroy of String(a1 + 16);
LABEL_13:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_15;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_15:
  unint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) < 2uLL)
  {
    if (v6 >= 2)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v6 < 2)
  {
    outlined destroy of String(a1 + 32);
LABEL_20:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_22;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_22:
  unint64_t v7 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) < 2uLL)
  {
    if (v7 >= 2)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v7 < 2)
  {
    outlined destroy of String(a1 + 48);
LABEL_27:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_29;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_29:
  uint64_t v8 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  unint64_t v9 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) < 2uLL)
  {
    if (v9 >= 2)
    {
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v9 < 2)
  {
    outlined destroy of String(a1 + 80);
LABEL_34:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_36;
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_36:
  unint64_t v10 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) < 2uLL)
  {
    if (v10 >= 2)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v10 < 2)
  {
    outlined destroy of String(a1 + 96);
LABEL_41:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_43;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_43:
  unint64_t v11 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120) >= 2uLL)
  {
    if (v11 >= 2)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of String(a1 + 112);
    goto LABEL_48;
  }
  if (v11 < 2)
  {
LABEL_48:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    return a1;
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of String(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for URL.ParseStrategy(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 2uLL) {
    goto LABEL_4;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 2)
  {
    outlined destroy of String(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  unint64_t v5 = (_OWORD *)(a2 + 16);
  if (*(void *)(a1 + 24) < 2uLL)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v5;
    goto LABEL_11;
  }
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 < 2)
  {
    outlined destroy of String(a1 + 16);
    goto LABEL_9;
  }
  *(void *)(a1 + 16) = *(void *)v5;
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
LABEL_11:
  long long v7 = (_OWORD *)(a2 + 32);
  if (*(void *)(a1 + 40) < 2uLL)
  {
LABEL_14:
    *(_OWORD *)(a1 + 32) = *v7;
    goto LABEL_16;
  }
  unint64_t v8 = *(void *)(a2 + 40);
  if (v8 < 2)
  {
    outlined destroy of String(a1 + 32);
    goto LABEL_14;
  }
  *(void *)(a1 + 32) = *(void *)v7;
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
LABEL_16:
  unint64_t v9 = (_OWORD *)(a2 + 48);
  if (*(void *)(a1 + 56) < 2uLL)
  {
LABEL_19:
    *(_OWORD *)(a1 + 48) = *v9;
    goto LABEL_21;
  }
  unint64_t v10 = *(void *)(a2 + 56);
  if (v10 < 2)
  {
    outlined destroy of String(a1 + 48);
    goto LABEL_19;
  }
  *(void *)(a1 + 48) = *(void *)v9;
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
LABEL_21:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  unint64_t v11 = (_OWORD *)(a2 + 80);
  if (*(void *)(a1 + 88) < 2uLL)
  {
LABEL_24:
    *(_OWORD *)(a1 + 80) = *v11;
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(a2 + 88);
  if (v12 < 2)
  {
    outlined destroy of String(a1 + 80);
    goto LABEL_24;
  }
  *(void *)(a1 + 80) = *(void *)v11;
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v13 = (_OWORD *)(a2 + 96);
  if (*(void *)(a1 + 104) < 2uLL)
  {
LABEL_29:
    *(_OWORD *)(a1 + 96) = *v13;
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(a2 + 104);
  if (v14 < 2)
  {
    outlined destroy of String(a1 + 96);
    goto LABEL_29;
  }
  *(void *)(a1 + 96) = *(void *)v13;
  *(void *)(a1 + 104) = v14;
  swift_bridgeObjectRelease();
LABEL_31:
  uint64_t v15 = (void *)(a2 + 112);
  if (*(void *)(a1 + 120) >= 2uLL)
  {
    unint64_t v16 = *(void *)(a2 + 120);
    if (v16 >= 2)
    {
      *(void *)(a1 + 112) = *v15;
      *(void *)(a1 + 120) = v16;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of String(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.ParseStrategy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 2;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.ParseStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for URL.ParseStrategy()
{
  return &type metadata for URL.ParseStrategy;
}

uint64_t type metadata completion function for URL.ParseStrategy.ComponentParseStrategy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for URL.ParseStrategy.ComponentParseStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    unint64_t v9 = v10 + v8;
  }
  uint64_t v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          unsigned int v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            uint64_t v18 = 4;
          }
          else
          {
            BOOL v20 = v19 != 0;
            BOOL v13 = v19 >= 0xFF;
            uint64_t v18 = 2;
            if (!v13) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for URL.ParseStrategy.ComponentParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 2, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *initializeWithCopy for URL.ParseStrategy.ComponentParseStrategy(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithCopy for URL.ParseStrategy.ComponentParseStrategy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *initializeWithTake for URL.ParseStrategy.ComponentParseStrategy(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithTake for URL.ParseStrategy.ComponentParseStrategy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 2;
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 1)
  {
    unsigned int v6 = 0;
    if (v7 <= 3)
    {
      unsigned int v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        uint64_t v8 = 4;
      }
      else
      {
        BOOL v10 = v9 != 0;
        BOOL v11 = v9 >= 0xFF;
        uint64_t v8 = 2;
        if (!v11) {
          uint64_t v8 = v10;
        }
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    v7 += v8;
  }
  if (!a2) {
    return 0;
  }
  int v12 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_30;
  }
  char v13 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)((char *)a1 + v7);
      if (!v14) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_30:
      if (v6)
      {
        unsigned int v19 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v19 >= 3) {
          return v19 - 2;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_30;
  }
LABEL_20:
  int v16 = (v14 - 1) << v13;
  if (v7 > 3) {
    int v16 = 0;
  }
  if (v7)
  {
    if (v7 <= 3) {
      int v17 = v7;
    }
    else {
      int v17 = 4;
    }
    switch(v17)
    {
      case 2:
        int v18 = *a1;
        break;
      case 3:
        int v18 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)a1;
        break;
      default:
        int v18 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v18 = 0;
  }
  return v6 + (v18 | v16) + 1;
}

void storeEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 2;
  size_t v9 = *(void *)(v6 + 64);
  if (v7 <= 1)
  {
    unsigned int v8 = 0;
    if (v9 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    v9 += v10;
  }
  BOOL v13 = a3 >= v8;
  unsigned int v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      unsigned int v18 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v18))
      {
        int v15 = 4;
      }
      else if (v18 >= 0x100)
      {
        int v15 = 2;
      }
      else
      {
        int v15 = v18 > 1;
      }
    }
    else
    {
      int v15 = 1;
    }
  }
  else
  {
    int v15 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v16 = ~v8 + a2;
    if (v9 < 4)
    {
      int v17 = (v16 >> (8 * v9)) + 1;
      if (v9)
      {
        int v19 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v9] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v17;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v9] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x181B4B56CLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        BOOL v20 = *(void (**)(void))(v6 + 56);
        v20();
      }
      return;
  }
}

uint64_t getEnumTag for URL.ParseStrategy.ComponentParseStrategy(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t destructiveInjectEnumTag for URL.ParseStrategy.ComponentParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

unsigned char *storeEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B4B6C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181B4B784);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for URL.ParseStrategy.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B4B878);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for URL.ParseStrategy.CodingKeys()
{
  return &unk_1ECA44280;
}

uint64_t base witness table accessor for Equatable in URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t outlined release of URL.FormatStyle(uint64_t a1)
{
  return a1;
}

void specialized Sequence._copyContents(initializing:)(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  NSFastEnumerationIterator.init(_:)(v3, (uint64_t)&v25);
  if (!a2)
  {
    long long v8 = *(_OWORD *)((char *)v37 + 9);
    long long v9 = v36;
    a1[10] = v35;
    a1[11] = v9;
    a1[12] = v37[0];
LABEL_11:
    *(_OWORD *)((char *)a1 + 201) = v8;
    long long v11 = v32;
    a1[6] = v31;
    a1[7] = v11;
    long long v12 = v34;
    a1[8] = v33;
    a1[9] = v12;
    long long v13 = v28;
    a1[2] = v27;
    a1[3] = v13;
    long long v14 = v30;
    a1[4] = v29;
    a1[5] = v14;
    long long v15 = v25;
    long long v16 = v26;
LABEL_13:
    *a1 = v15;
    a1[1] = v16;
    return;
  }
  if (!a3)
  {
LABEL_10:
    long long v10 = v36;
    a1[10] = v35;
    a1[11] = v10;
    a1[12] = v37[0];
    long long v8 = *(_OWORD *)((char *)v37 + 9);
    goto LABEL_11;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    NSFastEnumerationIterator.next()((uint64_t)&v22);
    if (!v23)
    {
LABEL_12:
      outlined destroy of Any?((uint64_t)&v22);
      long long v17 = v36;
      a1[10] = v35;
      a1[11] = v17;
      a1[12] = v37[0];
      *(_OWORD *)((char *)a1 + 201) = *(_OWORD *)((char *)v37 + 9);
      long long v18 = v32;
      a1[6] = v31;
      a1[7] = v18;
      long long v19 = v34;
      a1[8] = v33;
      a1[9] = v19;
      long long v20 = v28;
      a1[2] = v27;
      a1[3] = v20;
      long long v21 = v30;
      a1[4] = v29;
      a1[5] = v21;
      long long v15 = v25;
      long long v16 = v26;
      goto LABEL_13;
    }
    uint64_t v7 = 0;
    while (1)
    {
      outlined init with take of Any(&v22, v24);
      outlined init with take of Any(v24, a2);
      if (a3 - 1 == v7) {
        goto LABEL_10;
      }
      a2 += 2;
      NSFastEnumerationIterator.next()((uint64_t)&v22);
      ++v7;
      if (!v23) {
        goto LABEL_12;
      }
    }
  }
  __break(1u);
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, void *a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v5 = result;
  if (!a2)
  {
    id v11 = 0;
    uint64_t v6 = 0;
    *(void *)uint64_t result = v4;
    BOOL v7 = 1;
    *(unsigned char *)(result + 8) = 1;
    goto LABEL_14;
  }
  uint64_t v6 = a3;
  BOOL v7 = a3 == 0;
  if (!a3)
  {
    id v11 = 0;
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    id v9 = objc_msgSend(v4, sel_firstIndex);
    if (v9 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t i = 0;
LABEL_6:
      id v11 = 0;
      *(void *)uint64_t v5 = v4;
      *(unsigned char *)(v5 + 8) = 0;
      BOOL v7 = 1;
      uint64_t v6 = i;
LABEL_14:
      *(void *)(v5 + 16) = v11;
      *(unsigned char *)(v5 + 24) = v7;
      return v6;
    }
    id v11 = v9;
    *a2 = v9;
    if (v6 != 1)
    {
      for (uint64_t i = 1; i != v6; a2[i++] = v12)
      {
        id v12 = objc_msgSend(v4, sel_indexGreaterThanIndex_, v11);
        if (v12 == (id)0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_6;
        }
        id v11 = v12;
      }
    }
LABEL_13:
    *(void *)uint64_t v5 = v4;
    *(unsigned char *)(v5 + 8) = v6 == 0;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = (_OWORD *)result;
  uint64_t v5 = *((void *)v3 + 17);
  uint64_t v6 = *((void *)v3 + 18);
  uint64_t v7 = *((void *)v3 + 19);
  long long v9 = v3[9];
  long long v10 = v3[11];
  long long v55 = v3[10];
  uint64_t v8 = v55;
  long long v56 = v10;
  long long v57 = v3[12];
  long long v11 = v3[7];
  long long v51 = v3[6];
  long long v52 = v11;
  long long v53 = v3[8];
  long long v54 = v9;
  long long v12 = v3[3];
  long long v47 = v3[2];
  long long v48 = v12;
  long long v13 = v3[5];
  long long v49 = v3[4];
  long long v50 = v13;
  long long v14 = v3[1];
  long long v45 = *v3;
  long long v46 = v14;
  *(void *)&long long v58 = v5;
  *((void *)&v58 + 1) = v6;
  *(void *)&long long v59 = v7;
  *((void *)&v59 + 1) = v55;
  if (!a2)
  {
    uint64_t v15 = 0;
    long long v24 = v3[11];
    *(_OWORD *)(result + 160) = v3[10];
    *(_OWORD *)(result + 176) = v24;
    *(_OWORD *)(result + 192) = v3[12];
    long long v25 = v3[7];
    *(_OWORD *)(result + 96) = v3[6];
    *(_OWORD *)(result + 112) = v25;
    long long v26 = v3[9];
    *(_OWORD *)(result + 128) = v3[8];
    *(_OWORD *)(result + 144) = v26;
    long long v27 = v3[3];
    *(_OWORD *)(result + 32) = v3[2];
    *(_OWORD *)(result + 48) = v27;
    long long v28 = v3[5];
    *(_OWORD *)(result + 64) = v3[4];
    *(_OWORD *)(result + 80) = v28;
    long long v29 = v3[1];
    *(_OWORD *)uint64_t result = *v3;
    *(_OWORD *)(result + 16) = v29;
    *(void *)(result + 208) = v5;
    *(void *)(result + 216) = v6;
    *(void *)(result + 224) = v7;
    *(void *)(result + 232) = v8;
    return v15;
  }
  uint64_t v15 = a3;
  if (!a3) {
    goto LABEL_10;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = a2;
    AttributedString.Runs.NSAttributesSlice.Iterator.next()(v44);
    uint64_t v17 = *(void *)&v44[0];
    if (!*(void *)&v44[0])
    {
      uint64_t v18 = 0;
LABEL_12:
      long long v38 = v58;
      v4[12] = v57;
      v4[13] = v38;
      v4[14] = v59;
      long long v39 = v54;
      long long v4[8] = v53;
      v4[9] = v39;
      long long v40 = v56;
      v4[10] = v55;
      v4[11] = v40;
      long long v41 = v50;
      _OWORD v4[4] = v49;
      v4[5] = v41;
      long long v42 = v52;
      v4[6] = v51;
      v4[7] = v42;
      long long v43 = v46;
      *unsigned int v4 = v45;
      v4[1] = v43;
      long long v37 = v47;
      long long v36 = v48;
      uint64_t v15 = v18;
      goto LABEL_13;
    }
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = *((void *)&v44[0] + 1);
      long long v20 = v44[1];
      long long v21 = v44[2];
      long long v22 = v44[3];
      long long v23 = v44[4];
      *(void *)uint64_t v16 = v17;
      *(void *)(v16 + 8) = v19;
      *(_OWORD *)(v16 + 16) = v20;
      *(_OWORD *)(v16 + 32) = v21;
      *(_OWORD *)(v16 + 48) = v22;
      *(_OWORD *)(v16 + 64) = v23;
      if (v15 - 1 == v18) {
        break;
      }
      AttributedString.Runs.NSAttributesSlice.Iterator.next()(v44);
      uint64_t v17 = *(void *)&v44[0];
      v16 += 80;
      ++v18;
      if (!*(void *)&v44[0]) {
        goto LABEL_12;
      }
    }
LABEL_10:
    long long v30 = v58;
    v4[12] = v57;
    v4[13] = v30;
    v4[14] = v59;
    long long v31 = v54;
    long long v4[8] = v53;
    v4[9] = v31;
    long long v32 = v56;
    v4[10] = v55;
    v4[11] = v32;
    long long v33 = v50;
    _OWORD v4[4] = v49;
    v4[5] = v33;
    long long v34 = v52;
    v4[6] = v51;
    v4[7] = v34;
    long long v35 = v46;
    *unsigned int v4 = v45;
    v4[1] = v35;
    long long v37 = v47;
    long long v36 = v48;
LABEL_13:
    _OWORD v4[2] = v37;
    void v4[3] = v36;
    return v15;
  }
  __break(1u);
  return result;
}

{
  long long *v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[4];
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  uint64_t v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  uint64_t v83;

  unsigned int v4 = v3[9];
  uint64_t v5 = v3[11];
  long long v67 = v3[10];
  long long v68 = v5;
  uint64_t v6 = v3[11];
  long long v69 = v3[12];
  uint64_t v7 = v3[5];
  uint64_t v8 = v3[7];
  long long v63 = v3[6];
  long long v64 = v8;
  long long v9 = v3[7];
  long long v10 = v3[9];
  long long v65 = v3[8];
  long long v66 = v10;
  long long v11 = v3[1];
  long long v12 = v3[3];
  long long v59 = v3[2];
  long long v60 = v12;
  long long v13 = v3[3];
  long long v14 = v3[5];
  long long v61 = v3[4];
  long long v62 = v14;
  uint64_t v15 = v3[1];
  long long v57 = *v3;
  long long v58 = v15;
  uint64_t v81 = v67;
  uint64_t v82 = v6;
  char v77 = v63;
  uint64_t v78 = v9;
  uint64_t v79 = v65;
  char v80 = v4;
  uint64_t v73 = v59;
  long long v74 = v13;
  long long v75 = v61;
  char v76 = v7;
  long long v70 = *((void *)v3 + 26);
  uint64_t v83 = *((void *)v3 + 24);
  long long v71 = v57;
  long long v72 = v11;
  uint64_t v16 = *((void *)&v67 + 1);
  uint64_t v18 = *((void *)&v6 + 1);
  uint64_t v17 = v6;
  uint64_t v19 = v83;
  long long v36 = result;
  if (!a2)
  {
    long long v22 = 0;
LABEL_12:
    long long v28 = v3[11];
    *(_OWORD *)(v36 + 160) = v3[10];
    *(_OWORD *)(v36 + 176) = v28;
    *(_OWORD *)(v36 + 192) = v3[12];
    long long v29 = *((void *)v3 + 26);
    long long v30 = v3[7];
    *(_OWORD *)(v36 + 96) = v3[6];
    *(_OWORD *)(v36 + 112) = v30;
    long long v31 = v3[9];
    *(_OWORD *)(v36 + 128) = v3[8];
    *(_OWORD *)(v36 + 144) = v31;
    long long v32 = v3[3];
    *(_OWORD *)(v36 + 32) = v3[2];
    *(_OWORD *)(v36 + 48) = v32;
    long long v33 = v3[5];
    *(_OWORD *)(v36 + 64) = v3[4];
    *(_OWORD *)(v36 + 80) = v33;
    long long v34 = v3[1];
    *(_OWORD *)long long v36 = *v3;
    *(_OWORD *)(v36 + 16) = v34;
    *(void *)(v36 + 208) = v29;
    *(void *)(v36 + 216) = v16;
    *(void *)(v36 + 224) = v17;
    *(void *)(v36 + 232) = v18;
    *(void *)(v36 + 240) = v19;
    return v22;
  }
  if (!a3)
  {
    long long v22 = 0;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v21 = a2;
    long long v22 = 0;
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      long long v37 = *((void *)&v69 + 1);
      long long v38 = v70;
      long long v35 = a3;
      long long v23 = a3 - 1;
      while (1)
      {
        long long v50 = v81;
        long long v51 = v82;
        long long v52 = v83;
        long long v46 = v77;
        long long v47 = v78;
        long long v48 = v79;
        long long v49 = v80;
        long long v42 = v73;
        long long v43 = v74;
        uint64_t v44 = v75;
        long long v45 = v76;
        long long v40 = v71;
        long long v41 = v72;
        v39[0] = v16;
        v39[1] = v17;
        v39[2] = v18;
        v39[3] = v19;
        outlined retain of AttributedString.Runs((uint64_t)&v71);
        AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(v39, v37, v38, &v53);
        outlined release of AttributedString.Runs((uint64_t)&v71);
        uint64_t v16 = v53;
        uint64_t v17 = v54;
        uint64_t v18 = v55;
        uint64_t v19 = v56;
        specialized AttributedString.Runs.AttributesSlice1.subscript.getter(&v40, (void *)&v40 + 1, v53, v54, v55, v56);
        long long v24 = v44;
        long long v25 = v41;
        long long v26 = v42;
        long long v27 = v43;
        *(_OWORD *)long long v21 = v40;
        *(_OWORD *)(v21 + 16) = v25;
        *(_OWORD *)(v21 + 32) = v26;
        *(_OWORD *)(v21 + 48) = v27;
        *(void *)(v21 + 64) = v24;
        if (v23 == v22) {
          break;
        }
        ++v22;
        v21 += 72;
        if (static BigString.Index.== infix(_:_:)()) {
          goto LABEL_12;
        }
      }
      long long v22 = v35;
    }
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

{
  long long *v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[4];
  long long v42;
  unsigned char v43[80];
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  uint64_t v81;

  unsigned int v4 = v3[9];
  uint64_t v5 = v3[11];
  long long v65 = v3[10];
  long long v66 = v5;
  uint64_t v6 = v3[11];
  long long v67 = v3[12];
  uint64_t v7 = v3[5];
  uint64_t v8 = v3[7];
  long long v61 = v3[6];
  long long v62 = v8;
  long long v9 = v3[7];
  long long v10 = v3[9];
  long long v63 = v3[8];
  long long v64 = v10;
  long long v11 = v3[1];
  long long v12 = v3[3];
  long long v57 = v3[2];
  long long v58 = v12;
  long long v13 = v3[3];
  long long v14 = v3[5];
  long long v59 = v3[4];
  long long v60 = v14;
  uint64_t v15 = v3[1];
  long long v55 = *v3;
  long long v56 = v15;
  uint64_t v79 = v65;
  char v80 = v6;
  long long v75 = v61;
  char v76 = v9;
  char v77 = v63;
  uint64_t v78 = v4;
  long long v71 = v57;
  long long v72 = v13;
  uint64_t v73 = v59;
  long long v74 = v7;
  long long v68 = *((void *)v3 + 26);
  uint64_t v81 = *((void *)v3 + 24);
  long long v69 = v55;
  long long v70 = v11;
  uint64_t v16 = *((void *)&v65 + 1);
  uint64_t v18 = *((void *)&v6 + 1);
  uint64_t v17 = v6;
  uint64_t v19 = v81;
  long long v38 = result;
  if (!a2)
  {
    long long v22 = 0;
LABEL_12:
    long long v30 = v3[11];
    *(_OWORD *)(v38 + 160) = v3[10];
    *(_OWORD *)(v38 + 176) = v30;
    *(_OWORD *)(v38 + 192) = v3[12];
    long long v31 = *((void *)v3 + 26);
    long long v32 = v3[7];
    *(_OWORD *)(v38 + 96) = v3[6];
    *(_OWORD *)(v38 + 112) = v32;
    long long v33 = v3[9];
    *(_OWORD *)(v38 + 128) = v3[8];
    *(_OWORD *)(v38 + 144) = v33;
    long long v34 = v3[3];
    *(_OWORD *)(v38 + 32) = v3[2];
    *(_OWORD *)(v38 + 48) = v34;
    long long v35 = v3[5];
    *(_OWORD *)(v38 + 64) = v3[4];
    *(_OWORD *)(v38 + 80) = v35;
    long long v36 = v3[1];
    *(_OWORD *)long long v38 = *v3;
    *(_OWORD *)(v38 + 16) = v36;
    *(void *)(v38 + 208) = v31;
    *(void *)(v38 + 216) = v16;
    *(void *)(v38 + 224) = v17;
    *(void *)(v38 + 232) = v18;
    *(void *)(v38 + 240) = v19;
    return v22;
  }
  if (!a3)
  {
    long long v22 = 0;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v21 = a2;
    long long v22 = 0;
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      long long v39 = *((void *)&v67 + 1);
      long long v40 = v68;
      long long v37 = a3;
      long long v23 = a3 - 1;
      while (1)
      {
        long long v48 = v79;
        long long v49 = v80;
        long long v50 = v81;
        uint64_t v44 = v75;
        long long v45 = v76;
        long long v46 = v77;
        long long v47 = v78;
        *(_OWORD *)&v43[16] = v71;
        *(_OWORD *)&v43[32] = v72;
        *(_OWORD *)&v43[48] = v73;
        *(_OWORD *)&v43[64] = v74;
        long long v42 = v69;
        *(_OWORD *)long long v43 = v70;
        v41[0] = v16;
        v41[1] = v17;
        v41[2] = v18;
        v41[3] = v19;
        outlined retain of AttributedString.Runs((uint64_t)&v69);
        AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(v41, v39, v40, &v51);
        outlined release of AttributedString.Runs((uint64_t)&v69);
        uint64_t v16 = v51;
        uint64_t v17 = v52;
        uint64_t v18 = v53;
        uint64_t v19 = v54;
        specialized AttributedString.Runs.AttributesSlice1.subscript.getter(&v42, &v43[8], v51, v52, v53, v54);
        long long v24 = *(_DWORD *)v43;
        long long v25 = v43[4];
        long long v26 = *(_OWORD *)&v43[8];
        long long v27 = *(_OWORD *)&v43[24];
        long long v28 = *(_OWORD *)&v43[40];
        long long v29 = *(_OWORD *)&v43[56];
        *(_OWORD *)long long v21 = v42;
        *(unsigned char *)(v21 + 20) = v25;
        *(_DWORD *)(v21 + 16) = v24;
        *(_OWORD *)(v21 + 24) = v26;
        *(_OWORD *)(v21 + 40) = v27;
        *(_OWORD *)(v21 + 56) = v28;
        *(_OWORD *)(v21 + 72) = v29;
        if (v23 == v22) {
          break;
        }
        ++v22;
        v21 += 88;
        if (static BigString.Index.== infix(_:_:)()) {
          goto LABEL_12;
        }
      }
      long long v22 = v37;
    }
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t IndexPath.Storage.append(contentsOf:)@<X0>(uint64_t result@<X0>, void *a2@<X1>, char a3@<W2>, unint64_t a4@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v8 = (void *)*v6;
  uint64_t v9 = v7[1];
  uint64_t v11 = result;
  switch(*((unsigned char *)v7 + 16))
  {
    case 1:
      switch(a3)
      {
        case 1:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t result = swift_allocObject();
          *(_OWORD *)(result + 16) = xmmword_18210C6A0;
          *(void *)(result + 32) = v8;
          *(void *)(result + 40) = v9;
          *(void *)(result + 48) = v11;
          *(void *)(result + 56) = a2;
          goto LABEL_17;
        case 2:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v14 = swift_allocObject();
          *(_OWORD *)(v14 + 16) = xmmword_182106040;
          *(void *)(v14 + 32) = v8;
          *(void *)(v14 + 40) = v9;
          goto LABEL_19;
        case 3:
          return result;
        default:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t result = swift_allocObject();
          *(_OWORD *)(result + 16) = xmmword_18210C6B0;
          *(void *)(result + 32) = v8;
          *(void *)(result + 40) = v9;
          *(void *)(result + 48) = v11;
          goto LABEL_17;
      }
      return result;
    case 2:
      switch(a3)
      {
        case 1:
          uint64_t v15 = (void *)v8[2];
          uint64_t v16 = (char *)v15 + 2;
          if (__OFADD__(v15, 2))
          {
            __break(1u);
LABEL_42:
            int64_t v27 = v4;
            long long v22 = v15;
            unint64_t v23 = v5;
            long long v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(a4 > 1), v4, 1, v22);
            unint64_t v5 = v23;
            int64_t v4 = v27;
            uint64_t v15 = v24;
            a4 = v24[3];
            unint64_t v18 = a4 >> 1;
            goto LABEL_37;
          }
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
          if (isUniquelyReferenced_nonNull_native
            && (a4 = v8[3], unint64_t v18 = a4 >> 1, (uint64_t)(a4 >> 1) >= (uint64_t)v16))
          {
            uint64_t v15 = v8;
          }
          else
          {
            if ((uint64_t)v15 <= (uint64_t)v16) {
              int64_t v20 = (int64_t)v15 + 2;
            }
            else {
              int64_t v20 = (int64_t)v15;
            }
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v20, 1, v8);
            a4 = v15[3];
            unint64_t v18 = a4 >> 1;
          }
          unint64_t v5 = v15[2];
          int64_t v4 = v5 + 1;
          if (v18 <= v5) {
            goto LABEL_42;
          }
LABEL_37:
          v15[2] = v4;
          v15[v5 + 4] = v11;
          unint64_t v21 = v5 + 2;
          if ((uint64_t)v18 < (uint64_t)(v5 + 2))
          {
            int64_t v25 = v4;
            long long v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(a4 > 1), v5 + 2, 1, v15);
            int64_t v4 = v25;
            uint64_t v15 = v26;
          }
          v15[2] = v21;
          v15[v4 + 4] = a2;
          uint64_t result = outlined consume of IndexPath.Storage((uint64_t)v8, v9, 2);
          *uint64_t v7 = (uint64_t)v15;
          v7[1] = 0;
          *((unsigned char *)v7 + 16) = 2;
          return result;
        case 2:
          long long v28 = v8;
          goto LABEL_25;
        case 3:
          return result;
        default:
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
            uint64_t v8 = (void *)result;
          }
          unint64_t v13 = v8[2];
          unint64_t v12 = v8[3];
          if (v13 >= v12 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v8);
            uint64_t v8 = (void *)result;
          }
          uint64_t v8[2] = v13 + 1;
          v8[v13 + 4] = v11;
          *uint64_t v7 = (uint64_t)v8;
          goto LABEL_26;
      }
    case 3:
      switch(a3)
      {
        case 1:
          *uint64_t v7 = result;
          v7[1] = (uint64_t)a2;
          goto LABEL_28;
        case 2:
          *uint64_t v7 = result;
          v7[1] = (uint64_t)a2;
          *((unsigned char *)v7 + 16) = 2;
          uint64_t result = swift_bridgeObjectRetain();
          break;
        case 3:
          return result;
        default:
          *uint64_t v7 = result;
          v7[1] = (uint64_t)a2;
          *((unsigned char *)v7 + 16) = 0;
          break;
      }
      return result;
    default:
      switch(a3)
      {
        case 1:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t result = swift_allocObject();
          *(_OWORD *)(result + 16) = xmmword_18210C6B0;
          *(void *)(result + 32) = v8;
          *(void *)(result + 40) = v11;
          *(void *)(result + 48) = a2;
LABEL_17:
          *uint64_t v7 = result;
          goto LABEL_26;
        case 2:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v14 = swift_allocObject();
          *(_OWORD *)(v14 + 16) = xmmword_1821037E0;
          *(void *)(v14 + 32) = v8;
LABEL_19:
          long long v28 = (void *)v14;
LABEL_25:
          uint64_t v19 = swift_bridgeObjectRetain();
          uint64_t result = specialized Array.append<A>(contentsOf:)(v19);
          *uint64_t v7 = (uint64_t)v28;
LABEL_26:
          v7[1] = 0;
          *((unsigned char *)v7 + 16) = 2;
          break;
        case 3:
          return result;
        default:
          v7[1] = result;
LABEL_28:
          *((unsigned char *)v7 + 16) = 1;
          break;
      }
      return result;
  }
}

void *IndexPath.Storage.append(contentsOf:)(void *result)
{
  long long v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = v2[1];
  uint64_t v5 = (uint64_t)result;
  switch(*((unsigned char *)v2 + 16))
  {
    case 1:
      if (!result[2]) {
        goto LABEL_14;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_182106040;
      *(void *)(v7 + 32) = v3;
      *(void *)(v7 + 40) = v4;
      goto LABEL_7;
    case 2:
      uint64_t v12 = v3;
      goto LABEL_9;
    case 3:
      uint64_t v9 = result[2];
      switch(v9)
      {
        case 2:
          uint64_t v3 = result[4];
          uint64_t v10 = result[5];
          goto LABEL_19;
        case 1:
          uint64_t v11 = result[4];
          uint64_t result = (void *)swift_bridgeObjectRelease();
          *long long v2 = v11;
          v2[1] = 0;
          *((unsigned char *)v2 + 16) = 0;
          return result;
        case 0:
          goto LABEL_14;
      }
      *long long v2 = (uint64_t)result;
      goto LABEL_10;
    default:
      uint64_t v6 = result[2];
      if (v6 == 1)
      {
        uint64_t v10 = result[4];
LABEL_19:
        uint64_t result = (void *)swift_bridgeObjectRelease();
        *long long v2 = v3;
        v2[1] = v10;
        char v8 = 1;
LABEL_20:
        *((unsigned char *)v2 + 16) = v8;
        return result;
      }
      if (v6)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        uint64_t v7 = swift_allocObject();
        *(_OWORD *)(v7 + 16) = xmmword_1821037E0;
        *(void *)(v7 + 32) = v3;
LABEL_7:
        uint64_t v12 = v7;
LABEL_9:
        uint64_t result = (void *)specialized Array.append<A>(contentsOf:)(v5);
        *long long v2 = v12;
LABEL_10:
        v2[1] = 0;
        char v8 = 2;
        goto LABEL_20;
      }
LABEL_14:
      return (void *)swift_bridgeObjectRelease();
  }
}

uint64_t IndexPath.Storage.subscript.getter(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      if (a1 > 1) {
        goto LABEL_12;
      }
      if (a1) {
        return a3;
      }
      return a2;
    case 2:
      goto LABEL_4;
    case 3:
      goto LABEL_14;
    default:
      if (!a1) {
        return a2;
      }
      __break(1u);
LABEL_4:
      if ((a1 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v5);
        swift_bridgeObjectRelease();
        v6._object = (void *)0x80000001823AB180;
        v6._uint64_t countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v6);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181B4D080);
      }
      if (*(void *)(a2 + 16) <= a1) {
        goto LABEL_13;
      }
      return *(void *)(a2 + 8 * a1 + 32);
  }
}

uint64_t IndexPath.Storage.subscript.setter(uint64_t result, unint64_t a2)
{
  char v3 = *(unsigned char *)(v2 + 16);
  uint64_t v5 = result;
  switch(v3)
  {
    case 1:
      if (a2 > 1) {
        goto LABEL_17;
      }
      if (a2) {
        *(void *)(v2 + 8) = result;
      }
      else {
        *(void *)uint64_t v2 = result;
      }
      goto LABEL_13;
    case 2:
      Swift::String v6 = *(void **)v2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        if ((a2 & 0x8000000000000000) == 0) {
          goto LABEL_6;
        }
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v7);
        swift_bridgeObjectRelease();
        v8._object = (void *)0x80000001823AB180;
        v8._uint64_t countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v8);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181B4D228);
      }
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      Swift::String v6 = (void *)result;
      if ((a2 & 0x8000000000000000) != 0) {
        goto LABEL_15;
      }
LABEL_6:
      if (v6[2] <= a2) {
        goto LABEL_18;
      }
      v6[a2 + 4] = v5;
      *(void *)uint64_t v2 = v6;
LABEL_8:
      *(void *)(v2 + 8) = 0;
LABEL_13:
      *(unsigned char *)(v2 + 16) = v3;
      return result;
    case 3:
      goto LABEL_19;
    default:
      if (a2) {
        goto LABEL_16;
      }
      *(void *)uint64_t v2 = result;
      goto LABEL_8;
  }
}

uint64_t IndexPath.Storage.subscript.getter(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = a3;
  switch(a5)
  {
    case 1:
      if (!(a1 | a2) || a1 == 1 && a2 == 1 || a1 == 2 && a2 == 2) {
        return 0;
      }
      if (!a1 && a2 == 1) {
        return v7;
      }
      if (a1 == 1 && a2 == 2) {
        return a4;
      }
      if (a1 || a2 != 2)
      {
        while (1)
        {
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          _print_unlocked<A, B>(_:_:)();
          v23._uint64_t countAndFlagsBits = 3943982;
          v23._object = (void *)0xE300000000000000;
          String.append(_:)(v23);
          _print_unlocked<A, B>(_:_:)();
          v24._uint64_t countAndFlagsBits = 0;
          v24._object = (void *)0xE000000000000000;
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          v25._object = (void *)0x80000001823AB1A0;
          v25._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
          String.append(_:)(v25);
LABEL_58:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      return v7;
    case 2:
      if ((a1 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      unint64_t v10 = *(void *)(a3 + 16);
      if (v10 < a1 || (uint64_t)v10 < (uint64_t)a2) {
        goto LABEL_50;
      }
      if ((a2 & 0x8000000000000000) != 0)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      unint64_t v12 = a2 - a1;
      if (a2 == a1) {
        return a2 - a1;
      }
      uint64_t v5 = a3 + 32;
      if (v12 == 2)
      {
        if (a2 != a1)
        {
          if (a2 <= a1) {
            goto LABEL_55;
          }
          if (a2 - 1 < a1)
          {
LABEL_56:
            __break(1u);
LABEL_57:
            _StringGuts.grow(_:)(36);
            swift_bridgeObjectRelease();
            _print_unlocked<A, B>(_:_:)();
            v20._uint64_t countAndFlagsBits = 3943982;
            v20._object = (void *)0xE300000000000000;
            String.append(_:)(v20);
            _print_unlocked<A, B>(_:_:)();
            v21._uint64_t countAndFlagsBits = 0;
            v21._object = (void *)0xE000000000000000;
            String.append(_:)(v21);
            swift_bridgeObjectRelease();
            v22._object = (void *)0x80000001823AB1C0;
            v22._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
            String.append(_:)(v22);
            goto LABEL_58;
          }
          return *(void *)(v5 + 8 * a1);
        }
        goto LABEL_53;
      }
      if (v12 != 1)
      {
        outlined copy of IndexPath.Storage(a3, a4, 2);
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        uint64_t v17 = swift_dynamicCastClass();
        if (!v17)
        {
          outlined consume of IndexPath.Storage(v7, a4, 2);
          uint64_t v17 = MEMORY[0x1E4FBC860];
        }
        uint64_t v18 = *(void *)(v17 + 16);
        swift_release();
        if (v18 == v12)
        {
          uint64_t v19 = swift_dynamicCastClass();
          if (!v19)
          {
            outlined consume of IndexPath.Storage(v7, a4, 2);
            uint64_t v19 = MEMORY[0x1E4FBC860];
          }
          goto LABEL_40;
        }
LABEL_54:
        outlined consume of IndexPath.Storage(v7, a4, 2);
        uint64_t v19 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v5, a1, (2 * a2) | 1);
LABEL_40:
        outlined consume of IndexPath.Storage(v7, a4, 2);
        return v19;
      }
      if (a2 == a1)
      {
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      if (a2 <= a1)
      {
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      return *(void *)(v5 + 8 * a1);
    case 3:
      if (!(a1 | a2)) {
        return 0;
      }
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      _print_unlocked<A, B>(_:_:)();
      v13._uint64_t countAndFlagsBits = 3943982;
      v13._object = (void *)0xE300000000000000;
      String.append(_:)(v13);
      _print_unlocked<A, B>(_:_:)();
      v14._uint64_t countAndFlagsBits = 0;
      v14._object = (void *)0xE000000000000000;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._object = (void *)0x80000001823AB1E0;
      v15._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v15);
      goto LABEL_58;
    default:
      if (!(a1 | a2) || a1 == 1 && a2 == 1) {
        return 0;
      }
      if (a1 || a2 != 1) {
        goto LABEL_57;
      }
      return v7;
  }
}

uint64_t IndexPath.Storage.subscript.setter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X8>)
{
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v9 = v6;
  unint64_t v11 = a3;
  Swift::String v13 = (void *)result;
  switch(*(unsigned char *)(v6 + 16))
  {
    case 1:
      if (a4 != 2)
      {
        if (a4 == 1)
        {
          if (a5 == 2)
          {
            switch((char)a3)
            {
              case 1:
                goto LABEL_47;
              case 2:
                goto LABEL_50;
              case 3:
                goto LABEL_75;
              default:
                goto LABEL_16;
            }
          }
          goto LABEL_103;
        }
        if (a4) {
          goto LABEL_103;
        }
        if (a5 != 2)
        {
          if (a5 == 1)
          {
            switch((char)a3)
            {
              case 1:
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
                uint64_t result = swift_allocObject();
                *(_OWORD *)(result + 16) = xmmword_18210C6B0;
                *(void *)(result + 32) = v13;
                *(void *)(result + 40) = a2;
                goto LABEL_73;
              case 2:
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
                  Swift::String v13 = (void *)result;
                }
                unint64_t v24 = v13[2];
                unint64_t v23 = v13[3];
                if (v24 >= v23 >> 1)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v13);
                  Swift::String v13 = (void *)result;
                }
                v13[2] = v24 + 1;
                v13[v24 + 4] = v8;
                goto LABEL_71;
              case 3:
                *(void *)uint64_t v6 = v8;
LABEL_75:
                *(void *)(v6 + 8) = 0;
                *(unsigned char *)(v6 + 16) = 0;
                break;
              default:
                *(void *)uint64_t v6 = result;
                goto LABEL_55;
            }
            return result;
          }
          if (!a5)
          {
            switch((char)a3)
            {
              case 1:
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
                uint64_t result = swift_allocObject();
                *(_OWORD *)(result + 16) = xmmword_18210C6A0;
                *(void *)(result + 32) = v13;
                *(void *)(result + 40) = a2;
                *(void *)(result + 48) = v7;
                *(void *)(result + 56) = v8;
                goto LABEL_77;
              case 2:
                Swift::String v25 = *(void **)(result + 16);
                int64_t v26 = (int64_t)v25 + 2;
                if (__OFADD__(v25, 2))
                {
                  __break(1u);
                }
                else
                {
                  swift_bridgeObjectRetain();
                  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
                  if (isUniquelyReferenced_nonNull_native
                    && (a6 = v13[3], unint64_t v28 = a6 >> 1, (uint64_t)(a6 >> 1) >= v26))
                  {
                    Swift::String v25 = v13;
                  }
                  else
                  {
                    if ((uint64_t)v25 <= v26) {
                      int64_t v29 = (int64_t)v25 + 2;
                    }
                    else {
                      int64_t v29 = (int64_t)v25;
                    }
                    Swift::String v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v29, 1, v13);
                    a6 = v25[3];
                    unint64_t v28 = a6 >> 1;
                  }
                  unint64_t v11 = v25[2];
                  int64_t v26 = v11 + 1;
                  if (v28 > v11)
                  {
LABEL_90:
                    v25[2] = v26;
                    v25[v11 + 4] = v7;
                    int64_t v30 = v11 + 2;
                    if ((uint64_t)v28 < v30) {
                      Swift::String v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(a6 > 1), v30, 1, v25);
                    }
                    v25[2] = v30;
                    v25[v26 + 4] = v8;
                    uint64_t result = outlined consume of IndexPath.Storage((uint64_t)v13, a2, 2);
                    *(void *)uint64_t v9 = v25;
                    *(void *)(v9 + 8) = 0;
                    *(unsigned char *)(v9 + 16) = 2;
                    return result;
                  }
                }
                Swift::String v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(a6 > 1), v26, 1, v25);
                a6 = v25[3];
                unint64_t v28 = a6 >> 1;
                goto LABEL_90;
              case 3:
                return result;
              default:
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
                uint64_t result = swift_allocObject();
                *(_OWORD *)(result + 16) = xmmword_18210C6B0;
                *(void *)(result + 32) = v13;
                *(void *)(result + 40) = v7;
LABEL_73:
                *(void *)(result + 48) = v8;
                goto LABEL_77;
            }
          }
LABEL_103:
          outlined consume of IndexPath.Storage(result, a2, a3);
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          _print_unlocked<A, B>(_:_:)();
          v34._uint64_t countAndFlagsBits = 3943982;
          v34._object = (void *)0xE300000000000000;
          String.append(_:)(v34);
          _print_unlocked<A, B>(_:_:)();
          v35._uint64_t countAndFlagsBits = 0;
          v35._object = (void *)0xE000000000000000;
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          v36._object = (void *)0x80000001823AB1A0;
          v36._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
          String.append(_:)(v36);
          goto LABEL_104;
        }
LABEL_11:
        *(void *)uint64_t v6 = result;
        *(void *)(v6 + 8) = a2;
        *(unsigned char *)(v6 + 16) = a3;
        return result;
      }
      if (a5 != 2) {
        goto LABEL_103;
      }
      switch((char)a3)
      {
        case 1:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t result = swift_allocObject();
          *(_OWORD *)(result + 16) = xmmword_18210C6A0;
          *(void *)(result + 32) = v7;
          *(void *)(result + 40) = v8;
          *(void *)(result + 48) = v13;
          *(void *)(result + 56) = a2;
          goto LABEL_77;
        case 2:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v21 = swift_allocObject();
          *(_OWORD *)(v21 + 16) = xmmword_182106040;
          *(void *)(v21 + 32) = v7;
          *(void *)(v21 + 40) = v8;
          goto LABEL_65;
        case 3:
          return result;
        default:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t result = swift_allocObject();
          *(_OWORD *)(result + 16) = xmmword_18210C6B0;
          *(void *)(result + 32) = v7;
          *(void *)(result + 40) = v8;
          *(void *)(result + 48) = v13;
          goto LABEL_77;
      }
      return result;
    case 2:
      uint64_t v37 = *(void *)v6;
      specialized Array.replaceSubrange<A>(_:with:)(a4, a5);
      switch((char)v11)
      {
        case 1:
          if (*(void *)(v37 + 16) < a4) {
            goto LABEL_95;
          }
          if (a4 < 0) {
            goto LABEL_97;
          }
          specialized Array.replaceSubrange<A>(_:with:)(a4, a4, (uint64_t)v13);
          if (*(void *)(v37 + 16) <= (unint64_t)a4) {
            goto LABEL_98;
          }
          uint64_t v14 = a4 + 1;
          int64_t v15 = a4 + 1;
          uint64_t v16 = a2;
          goto LABEL_29;
        case 2:
          specialized Array.replaceSubrange<A>(_:with:)(a4, a4, (uint64_t)v13);
          outlined consume of IndexPath.Storage((uint64_t)v13, a2, 2);
          break;
        case 3:
          break;
        default:
          if (*(void *)(v37 + 16) < a4) {
            goto LABEL_94;
          }
          if (a4 < 0) {
            goto LABEL_96;
          }
          uint64_t v14 = a4;
          int64_t v15 = a4;
          uint64_t v16 = (uint64_t)v13;
LABEL_29:
          specialized Array.replaceSubrange<A>(_:with:)(v14, v15, v16);
          break;
      }
      uint64_t result = specialized IndexPath.Storage.init(arrayLiteral:)(v37);
      *(void *)uint64_t v6 = result;
      *(void *)(v6 + 8) = v17;
      *(unsigned char *)(v6 + 16) = v18;
      return result;
    case 3:
      if (!(a5 | a4)) {
        goto LABEL_11;
      }
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
      goto LABEL_99;
    default:
      switch((char)a3)
      {
        case 1:
          if (a4 == 1)
          {
            if (a5 == 1)
            {
LABEL_47:
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
              uint64_t result = swift_allocObject();
              *(_OWORD *)(result + 16) = xmmword_18210C6B0;
              *(void *)(result + 32) = v7;
              *(void *)(result + 40) = v13;
              *(void *)(result + 48) = a2;
LABEL_77:
              *(void *)uint64_t v6 = result;
LABEL_78:
              *(void *)(v6 + 8) = 0;
              char v22 = 2;
              goto LABEL_79;
            }
          }
          else if (!a4)
          {
            if (a5 == 1) {
              goto LABEL_11;
            }
            if (!a5)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
              uint64_t result = swift_allocObject();
              *(_OWORD *)(result + 16) = xmmword_18210C6B0;
              *(void *)(result + 32) = v13;
              *(void *)(result + 40) = a2;
              *(void *)(result + 48) = v7;
              goto LABEL_77;
            }
          }
          goto LABEL_102;
        case 2:
          if (a4)
          {
            if (a4 == 1 && a5 == 1)
            {
LABEL_50:
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
              uint64_t v21 = swift_allocObject();
              *(_OWORD *)(v21 + 16) = xmmword_1821037E0;
              *(void *)(v21 + 32) = v7;
LABEL_65:
              uint64_t v38 = v21;
              uint64_t result = specialized Array.append<A>(contentsOf:)((uint64_t)v13);
              *(void *)uint64_t v6 = v38;
              goto LABEL_78;
            }
          }
          else
          {
            if (a5 == 1) {
              goto LABEL_11;
            }
            if (!a5)
            {
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
LABEL_99:
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
                Swift::String v13 = (void *)result;
              }
              unint64_t v20 = v13[2];
              unint64_t v19 = v13[3];
              if (v20 >= v19 >> 1)
              {
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v13);
                Swift::String v13 = (void *)result;
              }
              v13[2] = v20 + 1;
              v13[v20 + 4] = v7;
LABEL_71:
              *(void *)uint64_t v6 = v13;
              goto LABEL_78;
            }
          }
          goto LABEL_102;
        case 3:
          if (!(a4 | a5) || a4 == 1 && a5 == 1) {
            return result;
          }
          if (a4 || a5 != 1) {
            goto LABEL_102;
          }
          goto LABEL_11;
        default:
          if (a4 == 1)
          {
            if (a5 != 1) {
              goto LABEL_102;
            }
LABEL_16:
            *(void *)(v6 + 8) = result;
          }
          else
          {
            if (a4) {
              goto LABEL_102;
            }
            if (a5 == 1) {
              goto LABEL_11;
            }
            if (a5)
            {
LABEL_102:
              _StringGuts.grow(_:)(36);
              swift_bridgeObjectRelease();
              _print_unlocked<A, B>(_:_:)();
              v31._uint64_t countAndFlagsBits = 3943982;
              v31._object = (void *)0xE300000000000000;
              String.append(_:)(v31);
              _print_unlocked<A, B>(_:_:)();
              v32._uint64_t countAndFlagsBits = 0;
              v32._object = (void *)0xE000000000000000;
              String.append(_:)(v32);
              swift_bridgeObjectRelease();
              v33._object = (void *)0x80000001823AB1C0;
              v33._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
              String.append(_:)(v33);
LABEL_104:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x181B4E074);
            }
            *(void *)uint64_t v6 = result;
            *(void *)(v6 + 8) = v7;
          }
LABEL_55:
          char v22 = 1;
LABEL_79:
          *(unsigned char *)(v6 + 16) = v22;
          return result;
      }
  }
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance IndexPath.Storage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized IndexPath.Storage.init(arrayLiteral:)(a1);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

void IndexPath.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 3;
}

uint64_t IndexPath.init<A>(indexes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int64_t v30 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v33 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 & ~(v11 >> 63), 0);
  uint64_t v12 = v33;
  uint64_t v28 = v5;
  uint64_t v29 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v11 < 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (v11)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      uint64_t result = dispatch thunk of IteratorProtocol.next()();
      if (v32) {
        goto LABEL_17;
      }
      uint64_t v14 = v31;
      uint64_t v33 = v12;
      unint64_t v16 = *(void *)(v12 + 16);
      unint64_t v15 = *(void *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v12 = v33;
      }
      *(void *)(v12 + 16) = v16 + 1;
      *(void *)(v12 + 8 * v16 + 32) = v14;
      if (!--v11) {
        goto LABEL_10;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
LABEL_10:
  dispatch thunk of IteratorProtocol.next()();
  if ((v32 & 1) == 0)
  {
    do
    {
      uint64_t v23 = v31;
      uint64_t v33 = v12;
      unint64_t v25 = *(void *)(v12 + 16);
      unint64_t v24 = *(void *)(v12 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        uint64_t v12 = v33;
      }
      *(void *)(v12 + 16) = v25 + 1;
      *(void *)(v12 + 8 * v25 + 32) = v23;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v32 != 1);
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, AssociatedTypeWitness);
  uint64_t v17 = specialized IndexPath.Storage.init(arrayLiteral:)(v33);
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v29, a2);
  char v22 = v30;
  *int64_t v30 = v17;
  v22[1] = v19;
  *((unsigned char *)v22 + 16) = v21;
  return result;
}

uint64_t IndexPath.init(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1821037E0;
  *(void *)(v4 + 32) = a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

void IndexPath.dropLast()(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  switch(v5)
  {
    case 1:
      uint64_t v3 = 0;
      char v5 = 0;
      break;
    case 2:
      unint64_t v6 = *(void *)(v4 + 16);
      if (v6 == 3)
      {
        uint64_t v7 = v4 + 32;
        uint64_t v4 = *(void *)(v4 + 32);
        uint64_t v3 = *(void *)(v7 + 8);
        char v5 = 1;
      }
      else
      {
        if (v6 <= 1) {
          unint64_t v8 = 1;
        }
        else {
          unint64_t v8 = 2 * v6 - 1;
        }
        uint64_t v9 = swift_unknownObjectRetain();
        outlined copy of IndexPath.Storage(v9, v3, 2);
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        uint64_t v10 = swift_dynamicCastClass();
        if (!v10)
        {
          swift_unknownObjectRelease();
          uint64_t v10 = MEMORY[0x1E4FBC860];
        }
        uint64_t v11 = *(void *)(v10 + 16);
        swift_release();
        if (v11 == v8 >> 1)
        {
          uint64_t v12 = swift_dynamicCastClass();
          if (!v12)
          {
            swift_unknownObjectRelease();
            uint64_t v12 = MEMORY[0x1E4FBC860];
          }
        }
        else
        {
          swift_unknownObjectRelease();
          uint64_t v12 = specialized _copyCollectionToContiguousArray<A>(_:)(v4, v4 + 32, 0, v8);
        }
        swift_unknownObjectRelease();
        uint64_t v3 = 0;
        char v5 = 2;
        uint64_t v4 = v12;
      }
      break;
    case 3:
      break;
    default:
      uint64_t v4 = 0;
      uint64_t v3 = 0;
      char v5 = 3;
      break;
  }
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v5;
}

uint64_t IndexPath.append(_:)(uint64_t a1)
{
  return IndexPath.Storage.append(contentsOf:)(*(void *)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a1);
}

Swift::Void __swiftcall IndexPath.append(_:)(Swift::Int a1)
{
  uint64_t v2 = *(void **)v1;
  char v3 = 1;
  char v5 = 0;
  switch(*(unsigned char *)(v1 + 16))
  {
    case 1:
      uint64_t v6 = *(void *)(v1 + 8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_18210C6B0;
      *(void *)(v7 + 32) = v2;
      *(void *)(v7 + 40) = v6;
      unint64_t v8 = (Swift::Int *)(v7 + 48);
      uint64_t v2 = (void *)v7;
      goto LABEL_8;
    case 2:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
      }
      unint64_t v9 = v2[2];
      unint64_t v10 = v2[3];
      unint64_t v11 = v9 + 1;
      if (v9 >= v10 >> 1)
      {
        unint64_t v15 = v9 + 1;
        uint64_t v12 = v2;
        unint64_t v13 = v2[2];
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v9 + 1, 1, v12);
        unint64_t v9 = v13;
        unint64_t v11 = v15;
        uint64_t v2 = v14;
      }
      v2[2] = v11;
      unint64_t v8 = &v2[v9 + 4];
LABEL_8:
      *unint64_t v8 = a1;
      char v5 = 2;
      a1 = (Swift::Int)v2;
      goto LABEL_9;
    case 3:
LABEL_9:
      *(void *)uint64_t v1 = a1;
      char v3 = v5;
      a1 = 0;
      break;
    default:
      break;
  }
  *(void *)(v1 + 8) = a1;
  *(unsigned char *)(v1 + 16) = v3;
}

Swift::Void __swiftcall IndexPath.append(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1 = (void *)swift_bridgeObjectRetain();

  IndexPath.Storage.append(contentsOf:)(v1);
}

uint64_t IndexPath.appending(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(void **)v2;
  uint64_t v4 = result;
  char v6 = 0;
  uint64_t v7 = 0;
  switch(*(unsigned char *)(v2 + 16))
  {
    case 1:
      uint64_t v8 = *(void *)(v2 + 8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t result = swift_allocObject();
      uint64_t v7 = 0;
      *(_OWORD *)(result + 16) = xmmword_18210C6B0;
      *(void *)(result + 32) = v3;
      *(void *)(result + 40) = v8;
      *(void *)(result + 48) = v4;
      char v6 = 2;
      break;
    case 2:
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      }
      unint64_t v10 = v3[2];
      unint64_t v9 = v3[3];
      unint64_t v11 = v10 + 1;
      if (v10 >= v9 >> 1)
      {
        uint64_t v12 = v3;
        unint64_t v13 = v3[2];
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v12);
        unint64_t v10 = v13;
        char v3 = v14;
      }
      uint64_t v7 = 0;
      _OWORD v3[2] = v11;
      v3[v10 + 4] = v4;
      char v6 = 2;
      uint64_t result = (uint64_t)v3;
      break;
    case 3:
      break;
    default:
      char v6 = 1;
      uint64_t result = *(void *)v2;
      uint64_t v7 = v4;
      break;
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v6;
  return result;
}

double IndexPath.appending(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  long long v9 = *v2;
  char v10 = *((unsigned char *)v2 + 16);
  outlined copy of IndexPath.Storage(*(void *)v2, *((void *)v2 + 1), v10);
  IndexPath.Storage.append(contentsOf:)(v4, v5, v6, v7);
  double result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(unsigned char *)(a2 + 16) = v10;
  return result;
}

double IndexPath.appending(_:)@<D0>(uint64_t a1@<X8>)
{
  long long v5 = *v1;
  char v6 = *((unsigned char *)v1 + 16);
  outlined copy of IndexPath.Storage(*(void *)v1, *((void *)v1 + 1), v6);
  char v3 = (void *)swift_bridgeObjectRetain();
  IndexPath.Storage.append(contentsOf:)(v3);
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(unsigned char *)(a1 + 16) = v6;
  return result;
}

uint64_t (*IndexPath.subscript.modify(uint64_t *a1, unint64_t a2))(uint64_t a1)
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = IndexPath.subscript.getter(a2);
  return IndexPath.subscript.modify;
}

uint64_t IndexPath.subscript.modify(uint64_t a1)
{
  return IndexPath.Storage.subscript.setter(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t IndexPath.subscript.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IndexPath.Storage.subscript.getter(a1, a2, *(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = v7;
  return result;
}

uint64_t key path getter for IndexPath.subscript(_:) : IndexPath@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  char v8 = *(unsigned char *)(a1 + 16);
  outlined copy of IndexPath.Storage(*(void *)a1, v5, v8);
  uint64_t v9 = IndexPath.Storage.subscript.getter(v6, v7, v4, v5, v8);
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t result = outlined consume of IndexPath.Storage(v4, v5, v8);
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = v13;
  return result;
}

uint64_t key path setter for IndexPath.subscript(_:) : IndexPath(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of IndexPath.Storage(*(void *)a1, v6, v7);
  return IndexPath.Storage.subscript.setter(v5, v6, v7, v3, v4, v8);
}

uint64_t IndexPath.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IndexPath.Storage.subscript.setter(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), a2, a3, *(void *)a1);
}

void (*IndexPath.subscript.modify(void *a1, unint64_t a2, unint64_t a3))(uint64_t **a1@<X0>, char a2@<W1>, unint64_t a3@<X8>)
{
  unint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  *unint64_t v7 = IndexPath.Storage.subscript.getter(a2, a3, *(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  v7[1] = v8;
  *((unsigned char *)v7 + 16) = v9;
  return IndexPath.subscript.modify;
}

void IndexPath.subscript.modify(uint64_t **a1@<X0>, char a2@<W1>, unint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  unint64_t v6 = *((unsigned __int8 *)*a1 + 16);
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (*a1)[3];
  if (a2)
  {
    outlined copy of IndexPath.Storage(**a1, v5, v6);
    IndexPath.Storage.subscript.setter(v4, v5, v6, v8, v7, v9);
    outlined consume of IndexPath.Storage(*v3, v3[1], *((unsigned char *)v3 + 16));
  }
  else
  {
    IndexPath.Storage.subscript.setter(**a1, v5, v6, v8, v7, a3);
  }

  free(v3);
}

uint64_t IndexPath.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = 0;
  return outlined copy of IndexPath.Storage(v2, v3, v4);
}

uint64_t IndexPath.startIndex.getter()
{
  return 0;
}

uint64_t IndexPath.endIndex.getter()
{
  uint64_t result = 0;
  switch(v0[16])
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = *(void *)(*(void *)v0 + 16);
      break;
    case 3:
      return result;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

Swift::Int __swiftcall IndexPath.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall IndexPath.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t IndexPath.compare(_:)(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = *(void **)v1;
  uint64_t v6 = *(void *)(v1 + 8);
  int v7 = *(unsigned __int8 *)(v1 + 16);
  unint64_t v8 = 0;
  switch(*(unsigned char *)(v1 + 16))
  {
    case 1:
      unint64_t v8 = 2;
      break;
    case 2:
      unint64_t v8 = v5[2];
      break;
    case 3:
      break;
    default:
      unint64_t v8 = 1;
      break;
  }
  switch(*(unsigned char *)(a1 + 16))
  {
    case 1:
      uint64_t v9 = 2;
      unint64_t v10 = v8;
      if (v8 < 3) {
        goto LABEL_11;
      }
      goto LABEL_14;
    case 2:
      uint64_t v9 = v2[2];
      unint64_t v10 = v8;
      if (v9 < v8) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 3:
      uint64_t v9 = 0;
      if (v8) {
        goto LABEL_14;
      }
      goto LABEL_32;
    default:
      uint64_t v9 = 1;
      unint64_t v10 = v8;
      if (v8 > 1)
      {
LABEL_14:
        unint64_t v10 = v9;
        if (!v9) {
          goto LABEL_32;
        }
      }
      else
      {
LABEL_11:
        if (!v10) {
          goto LABEL_32;
        }
      }
      switch(*(unsigned char *)(a1 + 16))
      {
        case 0:
          uint64_t v11 = *(void *)a1;
          uint64_t v12 = v3;
          char v13 = 0;
          goto LABEL_18;
        case 1:
          uint64_t v11 = *(void *)a1;
          uint64_t v12 = v3;
          char v13 = 1;
LABEL_18:
          outlined consume of IndexPath.Storage(v11, v12, v13);
          uint64_t v14 = v2;
          goto LABEL_21;
        case 2:
          if (!v2[2]) {
            goto LABEL_60;
          }
          uint64_t v14 = (void *)v2[4];
          break;
        case 3:
          goto LABEL_66;
        default:
          JUMPOUT(0);
      }
      return result;
  }
LABEL_21:
  switch(v7)
  {
    case 1:
      uint64_t v15 = (uint64_t)v5;
      uint64_t v16 = v6;
      char v17 = 1;
      goto LABEL_27;
    case 2:
      if (!v5[2]) {
        goto LABEL_61;
      }
      uint64_t v18 = (void *)v5[4];
      if ((uint64_t)v18 >= (uint64_t)v14) {
        goto LABEL_29;
      }
      return -1;
    case 3:
      goto LABEL_66;
    default:
      uint64_t v15 = (uint64_t)v5;
      uint64_t v16 = v6;
      char v17 = 0;
LABEL_27:
      outlined consume of IndexPath.Storage(v15, v16, v17);
      uint64_t v18 = v5;
      if ((uint64_t)v5 < (uint64_t)v14) {
        return -1;
      }
LABEL_29:
      if ((uint64_t)v14 < (uint64_t)v18) {
        return 1;
      }
      if (v10 == 1) {
        goto LABEL_32;
      }
      if (v4 == 1)
      {
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 1);
        uint64_t v21 = v3;
        if (v7 != 1) {
          goto LABEL_43;
        }
LABEL_48:
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 1);
        uint64_t v22 = v6;
        if (v6 >= v21) {
          goto LABEL_49;
        }
        return -1;
      }
      if (v4 != 2)
      {
LABEL_64:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 0);
        __break(1u);
        goto LABEL_65;
      }
      if (v2[2] < 2uLL)
      {
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 1);
        __break(1u);
LABEL_63:
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 1);
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v21 = v2[5];
      if (v7 == 1) {
        goto LABEL_48;
      }
LABEL_43:
      if (v7 != 2)
      {
LABEL_65:
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 0);
        __break(1u);
LABEL_66:
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._object = (void *)0x80000001823AB180;
        v27._uint64_t countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v27);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181B4F184);
      }
      if (v5[2] < 2uLL) {
        goto LABEL_61;
      }
      uint64_t v22 = v5[5];
      if (v22 < v21) {
        return -1;
      }
LABEL_49:
      if (v21 < v22) {
        return 1;
      }
      if (v10 != 2)
      {
        uint64_t v23 = 0;
        uint64_t result = 1;
        while (v4 == 2)
        {
          if ((unint64_t)(v23 + 2) >= v2[2]) {
            goto LABEL_60;
          }
          if (v7 != 2) {
            goto LABEL_63;
          }
          if ((unint64_t)(v23 + 2) >= v5[2]) {
            goto LABEL_61;
          }
          uint64_t v24 = v2[v23 + 6];
          uint64_t v25 = v5[v23 + 6];
          if (v25 < v24) {
            return -1;
          }
          if (v24 < v25) {
            return result;
          }
          if (v10 - 2 == ++v23) {
            goto LABEL_32;
          }
        }
        goto LABEL_62;
      }
LABEL_32:
      if ((uint64_t)v8 >= v9) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = -1;
      }
      if (v9 >= (uint64_t)v8) {
        return v20;
      }
      else {
        return 1;
      }
  }
}

BOOL static IndexPath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 16);
  unint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  int v9 = *(unsigned __int8 *)(a2 + 16);
  switch(v6)
  {
    case 1:
      if (v9 != 1) {
        goto LABEL_17;
      }
      BOOL result = v4 == (void *)v7 && v5 == v8;
      break;
    case 2:
      if (v9 != 2) {
        goto LABEL_17;
      }
      BOOL result = specialized static Array<A>.== infix(_:_:)(v4, (void *)v7);
      break;
    case 3:
      unint64_t v12 = v8 | v7;
      if (v9 != 3 || v12 != 0) {
        goto LABEL_17;
      }
      BOOL result = 1;
      break;
    default:
      if (v9) {
LABEL_17:
      }
        BOOL result = 0;
      else {
        BOOL result = v4 == (void *)v7;
      }
      break;
  }
  return result;
}

double static IndexPath.+ infix(_:_:)@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  long long v9 = *a1;
  char v10 = *((unsigned char *)a1 + 16);
  outlined copy of IndexPath.Storage(*(void *)a1, *((void *)a1 + 1), v10);
  IndexPath.Storage.append(contentsOf:)(v4, v5, v6, v7);
  double result = *(double *)&v9;
  *(_OWORD *)a3 = v9;
  *(unsigned char *)(a3 + 16) = v10;
  return result;
}

uint64_t static IndexPath.+= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return IndexPath.Storage.append(contentsOf:)(*(void *)a2, *(void **)(a2 + 8), *(unsigned char *)(a2 + 16), *(void *)(a2 + 8));
}

BOOL static IndexPath.< infix(_:_:)(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a2 + 16);
  long long v7 = *a1;
  char v8 = v2;
  long long v5 = *a2;
  char v6 = v3;
  return IndexPath.compare(_:)((uint64_t)&v5) == -1;
}

Swift::Int IndexPath.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IndexPath()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance IndexPath(uint64_t *a1, unint64_t *a2)
{
  return IndexPath.Storage.subscript.setter(*a1, *a2);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance IndexPath(uint64_t *a1, unint64_t *a2))(uint64_t a1)
{
  unint64_t v4 = *a2;
  a1[1] = v2;
  a1[2] = v4;
  *a1 = IndexPath.subscript.getter(v4);
  return protocol witness for MutableCollection.subscript.modify in conformance IndexPath;
}

uint64_t protocol witness for MutableCollection.subscript.modify in conformance IndexPath(uint64_t a1)
{
  return IndexPath.Storage.subscript.setter(*(void *)a1, *(void *)(a1 + 16));
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance IndexPath(uint64_t a1, uint64_t *a2)
{
  return IndexPath.Storage.subscript.setter(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *a2, a2[1], *(void *)a1);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance IndexPath(void *a1, unint64_t *a2))(uint64_t **a1@<X0>, char a2@<W1>, unint64_t a3@<X8>)
{
  long long v5 = malloc(0x30uLL);
  *a1 = v5;
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  v5[3] = v2;
  long long v5[4] = v6;
  v5[5] = v7;
  *long long v5 = IndexPath.Storage.subscript.getter(v6, v7, *(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
  v5[1] = v8;
  *((unsigned char *)v5 + 16) = v9;
  return protocol witness for MutableCollection.subscript.modify in conformance IndexPath;
}

void protocol witness for MutableCollection.subscript.modify in conformance IndexPath(uint64_t **a1@<X0>, char a2@<W1>, unint64_t a3@<X8>)
{
  char v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  unint64_t v6 = *((unsigned __int8 *)*a1 + 16);
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  if (a2)
  {
    outlined copy of IndexPath.Storage(**a1, v5, v6);
    IndexPath.Storage.subscript.setter(v4, v5, v6, v8, v7, v9);
    outlined consume of IndexPath.Storage(*v3, v3[1], *((unsigned char *)v3 + 16));
  }
  else
  {
    IndexPath.Storage.subscript.setter(**a1, v5, v6, v8, v7, a3);
  }

  free(v3);
}

unint64_t protocol witness for MutableCollection.partition(by:) in conformance IndexPath@<X0>(uint64_t (*a1)(uint64_t *)@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t *protocol witness for MutableCollection.swapAt(_:_:) in conformance IndexPath(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *result;
  unint64_t v4 = *a2;
  if (*result != *a2)
  {
    uint64_t v5 = *(void *)v2;
    uint64_t v6 = *(void *)(v2 + 8);
    char v7 = *(unsigned char *)(v2 + 16);
    uint64_t v8 = IndexPath.Storage.subscript.getter(*result, *(void *)v2, v6, v7);
    uint64_t v9 = IndexPath.Storage.subscript.getter(v4, v5, v6, v7);
    IndexPath.Storage.subscript.setter(v9, v3);
    return (unint64_t *)IndexPath.Storage.subscript.setter(v8, v4);
  }
  return result;
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance IndexPath@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySJqd__Isgyrzo_10Foundation16AttributedStringV13CharacterViewVABsAG_pALRszr__lIetMggrzo_Tp5(a1, a2);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance IndexPath(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a2 + 16);
  long long v7 = *a1;
  char v8 = v2;
  long long v5 = *a2;
  char v6 = v3;
  return IndexPath.compare(_:)((uint64_t)&v5) == -1;
}

void protocol witness for Collection.endIndex.getter in conformance IndexPath(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0;
  switch(v1[16])
  {
    case 1:
      uint64_t v2 = 2;
      goto LABEL_4;
    case 2:
      *a1 = *(void *)(*(void *)v1 + 16);
      break;
    case 3:
LABEL_4:
      *a1 = v2;
      break;
    default:
      *a1 = 1;
      break;
  }
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IndexPath(uint64_t *a1, unint64_t *a2))(void, void)
{
  *a1 = IndexPath.Storage.subscript.getter(*a2, *(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Collection.subscript.getter in conformance IndexPath@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IndexPath.Storage.subscript.getter(*a1, a1[1], *(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance IndexPath@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = 0;
  switch(v4)
  {
    case 1:
      uint64_t v6 = 2;
      break;
    case 2:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t result = outlined copy of IndexPath.Storage(result, v3, 2);
      break;
    case 3:
      break;
    default:
      uint64_t v6 = 1;
      break;
  }
  *(void *)(a1 + 32) = v6;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance IndexPath()
{
  BOOL result = 1;
  switch(v0[16])
  {
    case 2:
      BOOL result = *(void *)(*(void *)v0 + 16) == 0;
      break;
    case 3:
      return result;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance IndexPath(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexPath(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexPath(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection.index(after:) in conformance IndexPath@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance IndexPath@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance IndexPath(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance IndexPath@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized BidirectionalCollection.index(_:offsetBy:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance IndexPath@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance IndexPath(void *a1, void *a2)
{
  return specialized BidirectionalCollection.distance(from:to:)(*a1, *a2);
}

__n128 protocol witness for Sequence.makeIterator() in conformance IndexPath@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u64[1] = 0;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance IndexPath()
{
  uint64_t result = 0;
  switch(v0[16])
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = *(void *)(*(void *)v0 + 16);
      break;
    case 3:
      return result;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance IndexPath()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  BOOL v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v1, v2, v3);
  outlined consume of IndexPath.Storage((uint64_t)v1, v2, v3);
  return v4;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance IndexPath(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void **)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance IndexPath@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_10Foundation9IndexPathVABsAG_pAJRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t IndexPath.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v16[1] = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  BOOL v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)v1;
  uint64_t v10 = *(void *)(v1 + 8);
  char v11 = *(unsigned char *)(v1 + 16);
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  char v20 = v11;
  void v16[2] = v9;
  v16[3] = v10;
  char v17 = v11;
  uint64_t v12 = *MEMORY[0x1E4FBC3E8];
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v8, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v8, 0, 1, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v2);
  outlined copy of IndexPath.Storage(v9, v10, v11);
  outlined copy of IndexPath.Storage(v9, v10, v11);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance IndexPath@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[0] = a2;
  v17[1] = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)v2;
  uint64_t v11 = *(void *)(v2 + 8);
  char v12 = *(unsigned char *)(v2 + 16);
  uint64_t v19 = v10;
  uint64_t v20 = v11;
  char v21 = v12;
  v17[2] = v10;
  v17[3] = v11;
  char v18 = v12;
  uint64_t v13 = *MEMORY[0x1E4FBC3E8];
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v9, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBC430], v3);
  outlined copy of IndexPath.Storage(v10, v11, v12);
  outlined copy of IndexPath.Storage(v10, v11, v12);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance IndexPath.CodingKeys@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IndexPath.CodingKeys()
{
  return 0x73657865646E69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IndexPath.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73657865646E69 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance IndexPath.CodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IndexPath.CodingKeys@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IndexPath.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IndexPath.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t IndexPath.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IndexPath.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v22[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    __swift_project_boxed_opaque_existential_1(v22, v23);
    uint64_t v9 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    uint64_t v24 = a2;
    if (v10) {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
    }
    else {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0, MEMORY[0x1E4FBC860]);
    }
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v22, v23);
      if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()) {
        break;
      }
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v22, v23);
      uint64_t v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      }
      unint64_t v14 = v11[2];
      unint64_t v13 = v11[3];
      if (v14 >= v13 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v11);
      }
      v11[2] = v14 + 1;
      v11[v14 + 4] = v12;
    }
    uint64_t v15 = v11[2];
    if (v15 == 2)
    {
      uint64_t v16 = (void *)v11[4];
      uint64_t v17 = v11[5];
      swift_bridgeObjectRelease();
      char v18 = 1;
    }
    else if (v15 == 1)
    {
      uint64_t v16 = (void *)v11[4];
      swift_bridgeObjectRelease();
      uint64_t v17 = 0;
      char v18 = 0;
    }
    else if (v15)
    {
      uint64_t v17 = 0;
      char v18 = 2;
      uint64_t v16 = v11;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v18 = 3;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    uint64_t v19 = v24;
    *uint64_t v24 = v16;
    v19[1] = v17;
    *((unsigned char *)v19 + 16) = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t IndexPath.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IndexPath.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)v1;
  uint64_t v12 = *(void *)(v1 + 8);
  uint64_t v8 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  switch(v8)
  {
    case 1:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
      uint64_t v9 = v13;
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      if (v9) {
        goto LABEL_6;
      }
      goto LABEL_3;
    case 2:
      uint64_t v16 = v7;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int]);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(contentsOf:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      outlined consume of IndexPath.Storage(v7, v12, 2);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    case 3:
      goto LABEL_6;
    default:
LABEL_3:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
LABEL_6:
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance IndexPath@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return IndexPath.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IndexPath(void *a1)
{
  return IndexPath.encode(to:)(a1);
}

uint64_t NSIndexPath._toCustomAnyHashable()()
{
  id v1 = v0;
  unint64_t v2 = (unint64_t)objc_msgSend(v1, sel_length);
  if (v2 == 2)
  {
    objc_msgSend(v1, sel_indexAtPosition_, 0);
    objc_msgSend(v1, sel_indexAtPosition_, 1);
    goto LABEL_7;
  }
  unint64_t v3 = v2;
  if (v2 == 1)
  {
    objc_msgSend(v1, sel_indexAtPosition_, 0);

LABEL_10:
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
    return AnyHashable.init<A>(_:)();
  }
  if (!v2)
  {
    specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x1E4FBC860]);
LABEL_7:

    goto LABEL_10;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16) = v3;
    objc_msgSend(v1, sel_getIndexes_range_, v4 + 32, 0, v3);
    *(void *)(v4 + 16) = v3;

    goto LABEL_10;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSIndexPath()
{
  id v1 = *v0;
  NSIndexPath._toCustomAnyHashable()();
}

unint64_t static IndexPath._getObjectiveCType()()
{
  return type metadata accessor for NSIndexPath();
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2 = (uint64_t)objc_msgSend(a1, sel_length);
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_length);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (uint64_t)objc_msgSend(a1, sel_length);
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v4 = (void *)swift_allocObject();
        size_t v5 = _swift_stdlib_malloc_size(v4);
        _OWORD v4[2] = v2;
        void v4[3] = 2 * v5 - 64;
        id v6 = a1;
        uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)(v8, (uint64_t)(v4 + 4), v2);

        if (v7 == (void *)v2) {
          return (uint64_t)v4;
        }
        __break(1u);
      }
      return MEMORY[0x1E4FBC860];
    }
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 < a3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (__OFSUB__(v3, a3))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!a2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = (uint64_t)result;
  if (a2 <= 0)
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v8 = (void *)swift_allocObject();
    size_t v9 = _swift_stdlib_malloc_size(v8);
    id v8[2] = a2;
    v8[3] = 2 * v9 - 64;
  }
  uint64_t result = specialized Sequence._copySequenceContents(initializing:)(v10, (uint64_t)(v8 + 4), a2, v7, a2, a3);
  if (result == (void *)a2) {
    return v8;
  }
LABEL_14:
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v5 = 1;
  switch(a3)
  {
    case 1:
      uint64_t v5 = 2;
      goto LABEL_4;
    case 2:
      uint64_t v5 = a1[2];
      if (v5) {
        goto LABEL_4;
      }
      return v4;
    case 3:
      return v4;
    default:
LABEL_4:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v4 = (void *)swift_allocObject();
      int64_t v8 = _swift_stdlib_malloc_size(v4);
      uint64_t v9 = v8 - 32;
      if (v8 < 32) {
        uint64_t v9 = v8 - 25;
      }
      _OWORD v4[2] = v5;
      void v4[3] = 2 * (v9 >> 3);
      outlined copy of IndexPath.Storage((uint64_t)a1, a2, a3);
      uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v12, v4 + 4, v5, a1, a2, a3);
      outlined consume of IndexPath.Storage(v12[0], v12[1], v13);
      if (v10 != v5)
      {
        __break(1u);
        JUMPOUT(0x181B50BCCLL);
      }
      return v4;
  }
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  if (a2 > a1)
  {
    uint64_t v7 = 0;
    while ((unint64_t)(~a1 + a2) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v6 == ++v7) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    JUMPOUT(0x181B50E1CLL);
  }
  if (a2 >= a1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = 0;
  unint64_t v8 = ~a2 + a1;
  if (v8 >= (a1 ^ 0x8000000000000000)) {
    unint64_t v8 = a1 ^ 0x8000000000000000;
  }
  unint64_t v9 = 0x8000000000000000;
  if (v8 < 0x8000000000000000) {
    unint64_t v9 = v8;
  }
  do
  {
    if ((v8 & 0x8000000000000000) != 0) {
      goto LABEL_24;
    }
    if ((a1 ^ 0x8000000000000000) == v9) {
      goto LABEL_25;
    }
    --v7;
  }
  while (v6 != v7);
LABEL_14:
  if (!v7) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  if (v7 <= 0)
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v7;
    void v10[3] = 2 * (v12 >> 4);
  }
  swift_retain();
  char v13 = specialized Sequence._copySequenceContents(initializing:)(&v15, v10 + 4, v7, a1, a2, a3);
  swift_release();
  if (v13 != (void *)v7) {
    goto LABEL_26;
  }
  return v10;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 72);
  uint64_t v3 = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
  }
  else
  {
    if (!v3) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v4 = result;
    if (v3 <= 0)
    {
      uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.Runs.Run>);
      uint64_t v5 = (void *)swift_allocObject();
      size_t v6 = _swift_stdlib_malloc_size(v5);
      _OWORD v5[2] = v3;
      v5[3] = 2 * ((uint64_t)(v6 - 32) / 88);
    }
    outlined retain of AttributedString.Runs(v4);
    uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v8, v5 + 4, v3);
    uint64_t result = outlined release of AttributedString.Runs((uint64_t)v8);
    if (v7 == v3) {
      return (uint64_t)v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  size_t v6 = specialized Collection.count.getter(a1, a2, a3);
  if (!v6) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = (uint64_t)v6;
  if ((uint64_t)v6 <= 0)
  {
    unint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString._InternalRun>);
    unint64_t v8 = (void *)swift_allocObject();
    size_t v9 = _swift_stdlib_malloc_size(v8);
    id v8[2] = v7;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 24);
  }
  swift_retain();
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v12, v8 + 4, v7, a1, a2, a3);
  uint64_t result = swift_release();
  if (v10 == v7) {
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BigString.Index.init(_utf8Offset:)();
  BigString.Index.init(_utf8Offset:)();
  uint64_t v8 = specialized Collection.distance(from:to:)();
  if (!v8) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = v8;
  if (v8 <= 0)
  {
    uint64_t v10 = (uint64_t *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.Index>);
    uint64_t v10 = (uint64_t *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v9;
    void v10[3] = 2 * (v12 >> 5);
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized Sequence._copySequenceContents(initializing:)(v15, v10 + 4, v9, a1, a2, a3, a4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v13 == v9) {
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, int64_t a2)
{
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v4 = (char *)swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size(v4);
    *((void *)v4 + 2) = a2;
    *((void *)v4 + 3) = 2 * v5 - 64;
    size_t v6 = v4 + 32;
    if (&v4[a2 + 32] <= a1 || v6 >= &a1[a2])
    {
      memcpy(v6, a1, a2);
      return (uint64_t)v4;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char *specialized _copyCollectionToContiguousArray<A>(_:)(unsigned char *result, uint64_t a2)
{
  if (!a2) {
    return (unsigned char *)MEMORY[0x1E4FBC860];
  }
  if (a2 > 0)
  {
    uint64_t v3 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v4 = swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size((const void *)v4);
    *(void *)(v4 + 16) = a2;
    *(void *)(v4 + 24) = 2 * v5 - 64;
    *(unsigned char *)(v4 + 32) = *v3;
    uint64_t v6 = v4 + 32;
    uint64_t v7 = a2 - 1;
    if (a2 != 1)
    {
      if ((unint64_t)a2 < 9)
      {
        unint64_t v8 = 1;
        uint64_t v9 = v3;
        goto LABEL_18;
      }
      if ((unint64_t)a2 >= 0x21)
      {
        uint64_t v11 = 0;
        unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint64_t v12 = v4 + v11;
          long long v13 = *(_OWORD *)&v3[v11 + 17];
          *(_OWORD *)(v12 + 33) = *(_OWORD *)&v3[v11 + 1];
          *(_OWORD *)(v12 + 49) = v13;
          v11 += 32;
        }
        while (v10 != v11);
        if (v7 == v10) {
          return (unsigned char *)v4;
        }
        if ((v7 & 0x18) == 0)
        {
          uint64_t v9 = &v3[v10];
          v6 += v10;
          unint64_t v8 = v10 | 1;
LABEL_18:
          unint64_t v15 = a2 - v8;
          uint64_t v16 = (unsigned char *)(v6 + 1);
          uint64_t v17 = v9 + 1;
          do
          {
            char v18 = *v17++;
            *v16++ = v18;
            --v15;
          }
          while (v15);
          return (unsigned char *)v4;
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8 | 1;
      v6 += v7 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v9 = &v3[v7 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        *(void *)(v4 + v10 + 33) = *(void *)&v3[v10 + 1];
        v10 += 8;
      }
      while (v14 != v10);
      if (v7 == v14) {
        return (unsigned char *)v4;
      }
      goto LABEL_18;
    }
    return (unsigned char *)v4;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, MEMORY[0x1E4FBBA40]);
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  while (1)
  {
    if (v4 <= 0)
    {
      size_t v5 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      size_t v5 = (void *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      _OWORD v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return (void *)MEMORY[0x1E4FBC860];
    }
  }
  return v5;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [_BPlistEncodingFormat.Reference] and conformance [A], &demangling cache variable for type metadata for [_BPlistEncodingFormat.Reference]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [_BPlistEncodingFormat.Reference]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x185303120](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t specialized static IndexPath.> infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  size_t v5 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  int64_t v8 = 0;
  switch(*(unsigned char *)(a1 + 16))
  {
    case 1:
      int64_t v8 = 2;
      break;
    case 2:
      int64_t v8 = v2[2];
      break;
    case 3:
      break;
    default:
      int64_t v8 = 1;
      break;
  }
  switch(*(unsigned char *)(a2 + 16))
  {
    case 1:
      uint64_t v9 = 2;
      int64_t v10 = v8;
      if ((unint64_t)v8 < 3) {
        goto LABEL_11;
      }
      goto LABEL_14;
    case 2:
      uint64_t v9 = v5[2];
      int64_t v10 = v8;
      if (v9 < (unint64_t)v8) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 3:
      uint64_t v9 = 0;
      if (v8) {
        goto LABEL_14;
      }
      return v9 < v8;
    default:
      uint64_t v9 = 1;
      int64_t v10 = v8;
      if ((unint64_t)v8 > 1)
      {
LABEL_14:
        int64_t v10 = v9;
        if (!v9) {
          return v9 < v8;
        }
      }
      else
      {
LABEL_11:
        if (!v10) {
          return v9 < v8;
        }
      }
      switch(*(unsigned char *)(a2 + 16))
      {
        case 0:
          uint64_t v11 = *(void *)a2;
          uint64_t v12 = *(void *)(a2 + 8);
          char v13 = 0;
          goto LABEL_18;
        case 1:
          uint64_t v11 = *(void *)a2;
          uint64_t v12 = *(void *)(a2 + 8);
          char v13 = 1;
LABEL_18:
          outlined consume of IndexPath.Storage(v11, v12, v13);
          uint64_t v14 = v5;
          goto LABEL_21;
        case 2:
          if (!v5[2]) {
            goto LABEL_54;
          }
          uint64_t v14 = (void *)v5[4];
          break;
        case 3:
          goto LABEL_60;
        default:
          JUMPOUT(0);
      }
      return result;
  }
LABEL_21:
  switch(v4)
  {
    case 1:
      uint64_t v15 = (uint64_t)v2;
      uint64_t v16 = v3;
      char v17 = 1;
      goto LABEL_27;
    case 2:
      if (!v2[2]) {
        goto LABEL_55;
      }
      char v18 = (void *)v2[4];
      if ((uint64_t)v18 >= (uint64_t)v14) {
        goto LABEL_29;
      }
      return 0;
    case 3:
      goto LABEL_60;
    default:
      uint64_t v15 = (uint64_t)v2;
      uint64_t v16 = v3;
      char v17 = 0;
LABEL_27:
      outlined consume of IndexPath.Storage(v15, v16, v17);
      char v18 = v2;
      if ((uint64_t)v2 < (uint64_t)v14) {
        return 0;
      }
LABEL_29:
      if ((uint64_t)v14 < (uint64_t)v18) {
        return 1;
      }
      if (v10 == 1) {
        return v9 < v8;
      }
      if (v7 == 1)
      {
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 1);
        uint64_t v20 = v6;
        if (v4 != 1) {
          goto LABEL_37;
        }
LABEL_42:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 1);
        uint64_t v21 = v3;
        if (v3 >= v20) {
          goto LABEL_43;
        }
        return 0;
      }
      if (v7 != 2)
      {
LABEL_58:
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 0);
        __break(1u);
        goto LABEL_59;
      }
      if (v5[2] < 2uLL)
      {
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 1);
        __break(1u);
LABEL_57:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 1);
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v20 = v5[5];
      if (v4 == 1) {
        goto LABEL_42;
      }
LABEL_37:
      if (v4 != 2)
      {
LABEL_59:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 0);
        __break(1u);
LABEL_60:
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._object = (void *)0x80000001823AB180;
        v26._uint64_t countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v26);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181B527E4);
      }
      if (v2[2] < 2uLL) {
        goto LABEL_55;
      }
      uint64_t v21 = v2[5];
      if (v21 < v20) {
        return 0;
      }
LABEL_43:
      if (v20 < v21) {
        return 1;
      }
      if (v10 == 2) {
        return v9 < v8;
      }
      uint64_t v22 = 0;
      while (1)
      {
        if (v7 != 2) {
          goto LABEL_56;
        }
        if ((unint64_t)(v22 + 2) >= v5[2]) {
          goto LABEL_54;
        }
        if (v4 != 2) {
          goto LABEL_57;
        }
        if ((unint64_t)(v22 + 2) >= v2[2]) {
          goto LABEL_55;
        }
        uint64_t v23 = v5[v22 + 6];
        uint64_t v24 = v2[v22 + 6];
        if (v24 != v23) {
          return v24 >= v23;
        }
        if (v10 - 2 == ++v22) {
          return v9 < v8;
        }
      }
  }
}

BOOL specialized static IndexPath.>= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  size_t v5 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v8 = 0;
  switch(*(unsigned char *)(a1 + 16))
  {
    case 1:
      unint64_t v8 = 2;
      break;
    case 2:
      unint64_t v8 = v2[2];
      break;
    case 3:
      break;
    default:
      unint64_t v8 = 1;
      break;
  }
  switch(*(unsigned char *)(a2 + 16))
  {
    case 1:
      uint64_t v9 = 2;
      unint64_t v10 = v8;
      if (v8 < 3) {
        goto LABEL_11;
      }
      goto LABEL_14;
    case 2:
      uint64_t v9 = v5[2];
      unint64_t v10 = v8;
      if (v9 < v8) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 3:
      uint64_t v9 = 0;
      if (v8) {
        goto LABEL_14;
      }
      goto LABEL_32;
    default:
      uint64_t v9 = 1;
      unint64_t v10 = v8;
      if (v8 > 1)
      {
LABEL_14:
        unint64_t v10 = v9;
        if (!v9) {
          goto LABEL_32;
        }
      }
      else
      {
LABEL_11:
        if (!v10) {
          goto LABEL_32;
        }
      }
      switch(*(unsigned char *)(a2 + 16))
      {
        case 0:
          uint64_t v11 = *(void *)a2;
          uint64_t v12 = *(void *)(a2 + 8);
          char v13 = 0;
          goto LABEL_18;
        case 1:
          uint64_t v11 = *(void *)a2;
          uint64_t v12 = *(void *)(a2 + 8);
          char v13 = 1;
LABEL_18:
          outlined consume of IndexPath.Storage(v11, v12, v13);
          uint64_t v14 = v5;
          goto LABEL_21;
        case 2:
          if (!v5[2]) {
            goto LABEL_56;
          }
          uint64_t v14 = (void *)v5[4];
          break;
        case 3:
          goto LABEL_62;
        default:
          JUMPOUT(0);
      }
      return result;
  }
LABEL_21:
  switch(v4)
  {
    case 1:
      uint64_t v15 = (uint64_t)v2;
      uint64_t v16 = v3;
      char v17 = 1;
      goto LABEL_27;
    case 2:
      if (!v2[2]) {
        goto LABEL_57;
      }
      char v18 = (void *)v2[4];
      if ((uint64_t)v18 >= (uint64_t)v14) {
        goto LABEL_29;
      }
      return 0;
    case 3:
      goto LABEL_62;
    default:
      uint64_t v15 = (uint64_t)v2;
      uint64_t v16 = v3;
      char v17 = 0;
LABEL_27:
      outlined consume of IndexPath.Storage(v15, v16, v17);
      char v18 = v2;
      if ((uint64_t)v2 < (uint64_t)v14) {
        return 0;
      }
LABEL_29:
      if ((uint64_t)v14 < (uint64_t)v18) {
        return 1;
      }
      if (v10 == 1) {
        goto LABEL_32;
      }
      if (v7 == 1)
      {
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 1);
        uint64_t v21 = v6;
        if (v4 != 1) {
          goto LABEL_40;
        }
LABEL_45:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 1);
        uint64_t v22 = v3;
        if (v3 >= v21) {
          goto LABEL_46;
        }
        return 0;
      }
      if (v7 != 2)
      {
LABEL_60:
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 0);
        __break(1u);
        goto LABEL_61;
      }
      if (v5[2] < 2uLL)
      {
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 1);
        __break(1u);
LABEL_59:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 1);
        __break(1u);
        goto LABEL_60;
      }
      uint64_t v21 = v5[5];
      if (v4 == 1) {
        goto LABEL_45;
      }
LABEL_40:
      if (v4 != 2)
      {
LABEL_61:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 0);
        __break(1u);
LABEL_62:
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._object = (void *)0x80000001823AB180;
        v27._uint64_t countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v27);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181B52C0CLL);
      }
      if (v2[2] < 2uLL) {
        goto LABEL_57;
      }
      uint64_t v22 = v2[5];
      if (v22 < v21) {
        return 0;
      }
LABEL_46:
      if (v21 < v22) {
        return 1;
      }
      if (v10 != 2)
      {
        uint64_t v23 = 0;
        while (v7 == 2)
        {
          if ((unint64_t)(v23 + 2) >= v5[2]) {
            goto LABEL_56;
          }
          if (v4 != 2) {
            goto LABEL_59;
          }
          if ((unint64_t)(v23 + 2) >= v2[2]) {
            goto LABEL_57;
          }
          uint64_t v24 = v5[v23 + 6];
          uint64_t v25 = v2[v23 + 6];
          BOOL v20 = v25 < v24;
          if (v25 != v24) {
            return !v20;
          }
          if (v10 - 2 == ++v23) {
            goto LABEL_32;
          }
        }
        goto LABEL_58;
      }
LABEL_32:
      BOOL v20 = (uint64_t)v8 < v9;
      return !v20;
  }
}

uint64_t specialized static IndexPath.<= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  size_t v5 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  int64_t v8 = 0;
  switch(*(unsigned char *)(a1 + 16))
  {
    case 1:
      int64_t v8 = 2;
      break;
    case 2:
      int64_t v8 = v2[2];
      break;
    case 3:
      break;
    default:
      int64_t v8 = 1;
      break;
  }
  switch(*(unsigned char *)(a2 + 16))
  {
    case 1:
      uint64_t v9 = 2;
      int64_t v10 = v8;
      if ((unint64_t)v8 < 3) {
        goto LABEL_11;
      }
      goto LABEL_14;
    case 2:
      uint64_t v9 = v5[2];
      int64_t v10 = v8;
      if (v9 < (unint64_t)v8) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 3:
      uint64_t v9 = 0;
      if (v8) {
        goto LABEL_14;
      }
      return v9 >= v8;
    default:
      uint64_t v9 = 1;
      int64_t v10 = v8;
      if ((unint64_t)v8 > 1)
      {
LABEL_14:
        int64_t v10 = v9;
        if (!v9) {
          return v9 >= v8;
        }
      }
      else
      {
LABEL_11:
        if (!v10) {
          return v9 >= v8;
        }
      }
      switch(*(unsigned char *)(a2 + 16))
      {
        case 0:
          uint64_t v11 = *(void *)a2;
          uint64_t v12 = *(void *)(a2 + 8);
          char v13 = 0;
          goto LABEL_18;
        case 1:
          uint64_t v11 = *(void *)a2;
          uint64_t v12 = *(void *)(a2 + 8);
          char v13 = 1;
LABEL_18:
          outlined consume of IndexPath.Storage(v11, v12, v13);
          uint64_t v14 = v5;
          goto LABEL_21;
        case 2:
          if (!v5[2]) {
            goto LABEL_54;
          }
          uint64_t v14 = (void *)v5[4];
          break;
        case 3:
          goto LABEL_60;
        default:
          JUMPOUT(0);
      }
      return result;
  }
LABEL_21:
  switch(v4)
  {
    case 1:
      uint64_t v15 = (uint64_t)v2;
      uint64_t v16 = v3;
      char v17 = 1;
      goto LABEL_27;
    case 2:
      if (!v2[2]) {
        goto LABEL_55;
      }
      char v18 = (void *)v2[4];
      if ((uint64_t)v18 >= (uint64_t)v14) {
        goto LABEL_29;
      }
      return 1;
    case 3:
      goto LABEL_60;
    default:
      uint64_t v15 = (uint64_t)v2;
      uint64_t v16 = v3;
      char v17 = 0;
LABEL_27:
      outlined consume of IndexPath.Storage(v15, v16, v17);
      char v18 = v2;
      if ((uint64_t)v2 < (uint64_t)v14) {
        return 1;
      }
LABEL_29:
      if ((uint64_t)v14 < (uint64_t)v18) {
        return 0;
      }
      if (v10 == 1) {
        return v9 >= v8;
      }
      if (v7 == 1)
      {
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 1);
        uint64_t v20 = v6;
        if (v4 != 1) {
          goto LABEL_37;
        }
LABEL_42:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 1);
        uint64_t v21 = v3;
        if (v3 >= v20) {
          goto LABEL_43;
        }
        return 1;
      }
      if (v7 != 2)
      {
LABEL_58:
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 0);
        __break(1u);
        goto LABEL_59;
      }
      if (v5[2] < 2uLL)
      {
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        outlined consume of IndexPath.Storage((uint64_t)v5, v6, 1);
        __break(1u);
LABEL_57:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 1);
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v20 = v5[5];
      if (v4 == 1) {
        goto LABEL_42;
      }
LABEL_37:
      if (v4 != 2)
      {
LABEL_59:
        outlined consume of IndexPath.Storage((uint64_t)v2, v3, 0);
        __break(1u);
LABEL_60:
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._object = (void *)0x80000001823AB180;
        v26._uint64_t countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v26);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181B53040);
      }
      if (v2[2] < 2uLL) {
        goto LABEL_55;
      }
      uint64_t v21 = v2[5];
      if (v21 < v20) {
        return 1;
      }
LABEL_43:
      if (v20 < v21) {
        return 0;
      }
      if (v10 == 2) {
        return v9 >= v8;
      }
      uint64_t v22 = 0;
      while (1)
      {
        if (v7 != 2) {
          goto LABEL_56;
        }
        if ((unint64_t)(v22 + 2) >= v5[2]) {
          goto LABEL_54;
        }
        if (v4 != 2) {
          goto LABEL_57;
        }
        if ((unint64_t)(v22 + 2) >= v2[2]) {
          goto LABEL_55;
        }
        uint64_t v23 = v5[v22 + 6];
        uint64_t v24 = v2[v22 + 6];
        if (v23 != v24) {
          return v24 < v23;
        }
        if (v10 - 2 == ++v22) {
          return v9 >= v8;
        }
      }
  }
}

uint64_t specialized IndexPath.Storage.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 == 2 || v1 == 1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    swift_bridgeObjectRelease();
  }
  else if (v1)
  {
    return a1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }
  return result;
}

unint64_t type metadata accessor for NSIndexPath()
{
  unint64_t result = lazy cache variable for type metadata for NSIndexPath;
  if (!lazy cache variable for type metadata for NSIndexPath)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSIndexPath);
  }
  return result;
}

uint64_t specialized static IndexPath._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of IndexPath?(*(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
  unint64_t v4 = (unint64_t)objc_msgSend(a1, sel_length);
  if (v4 == 2)
  {
    uint64_t v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    char v10 = 1;
    id v8 = objc_msgSend(a1, sel_indexAtPosition_, 1);
    goto LABEL_9;
  }
  unint64_t v5 = v4;
  if (v4 == 1)
  {
    uint64_t v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    id v8 = 0;
    char v10 = 0;
    goto LABEL_9;
  }
  if (!v4)
  {
    uint64_t v6 = (void *)specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x1E4FBC860]);
    id v8 = v7;
    char v10 = v9;
LABEL_9:
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = v10;
    return 1;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v6[2] = v5;
    objc_msgSend(a1, sel_getIndexes_range_, v6 + 4, 0, v5);
    id v8 = 0;
    uint64_t v6[2] = v5;
    char v10 = 2;
    goto LABEL_9;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in IndexPath()
{
  return lazy protocol witness table accessor for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>, (void (*)(void))lazy protocol witness table accessor for type IndexPath and conformance IndexPath);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IndexPath()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<IndexPath> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IndexPath>);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in IndexPath()
{
  return lazy protocol witness table accessor for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>, (void (*)(void))lazy protocol witness table accessor for type IndexPath and conformance IndexPath);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for DefaultIndices<IndexPath>);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in IndexPath()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<IndexPath> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<IndexPath>);
}

unint64_t instantiation function for generic protocol witness table for IndexPath(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  a1[2] = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  a1[3] = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  unint64_t result = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  a1[4] = result;
  return result;
}

uint64_t sub_181B537C4@<X0>(unint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = IndexPath.subscript.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_181B53810(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  return IndexPath.Storage.subscript.setter(*a1, *a3);
}

uint64_t sub_181B5383C()
{
  return 0;
}

uint64_t sub_181B53854()
{
  return 0;
}

uint64_t assignWithCopy for IndexPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of IndexPath.Storage(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of IndexPath.Storage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for IndexPath(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of IndexPath.Storage(v4, v5, v6);
  return a1;
}

uint64_t getEnumTag for IndexPath.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for IndexPath.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void *type metadata accessor for IndexPath.Storage()
{
  return &unk_1ECA4C700;
}

unsigned char *storeEnumTagSinglePayload for IndexPath.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181B539E8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for IndexPath.CodingKeys()
{
  return &unk_1ECA4C670;
}

uint64_t outlined retain of AttributedString.Runs.NSAttributesSlice(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator(uint64_t a1)
{
  return a1;
}

uint64_t Locale.Language.hash(into:)()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[4];
  uint64_t v12 = *v0;
  uint64_t v13 = v0[5];
  uint64_t v4 = v0[9];
  uint64_t v11 = v0[8];
  if (v1)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v2, v1);
    outlined copy of Locale.LanguageCode?(v3, v13);
    uint64_t v5 = v11;
    outlined copy of Locale.LanguageCode?(v11, v4);
    outlined copy of Locale.LanguageCode?(v2, v1);
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v2, v1);
    uint64_t v6 = v13;
    if (v13) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    uint64_t v8 = v1;
    uint64_t v7 = v3;
    uint64_t v9 = v4;
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  outlined copy of Locale.LanguageCode?(v2, 0);
  outlined copy of Locale.LanguageCode?(v3, v13);
  uint64_t v5 = v11;
  outlined copy of Locale.LanguageCode?(v11, v4);
  uint64_t v6 = v13;
  if (!v13) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  uint64_t v7 = v3;
  outlined consume of Locale.LanguageCode?(v3, v6);
  uint64_t v8 = v1;
  uint64_t v9 = v4;
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v5, v9);
LABEL_8:
  outlined consume of Locale.LanguageCode?(v12, v8);
  outlined consume of Locale.LanguageCode?(v7, v6);
  return outlined consume of Locale.LanguageCode?(v5, v9);
}

__n128 Locale.Language.Components.init(languageCode:script:region:)@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  long long v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  long long v5 = a2[1];
  a4[2] = *a2;
  a4[3] = v5;
  __n128 result = *(__n128 *)a3;
  long long v7 = *(_OWORD *)(a3 + 16);
  a4[4] = *(_OWORD *)a3;
  a4[5] = v7;
  return result;
}

__n128 Locale.Language.init(components:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v5 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v5;
  return result;
}

__n128 Locale.Language.Components.languageCode.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(*v1, v1[1]);
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*Locale.Language.Components.languageCode.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Language.Components.script.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[4];
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Language.Components.script.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[4], v1[5]);
  __n128 result = v5;
  *((__n128 *)v1 + 2) = v5;
  v1[6] = v2;
  v1[7] = v3;
  return result;
}

uint64_t (*Locale.Language.Components.script.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Language.Components.region.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  uint64_t v5 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Language.Components.region.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[8], v1[9]);
  __n128 result = v5;
  *((__n128 *)v1 + 4) = v5;
  v1[10] = v2;
  v1[11] = v3;
  return result;
}

uint64_t (*Locale.Language.Components.region.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Language.Components.hash(into:)()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[8];
  if (v1)
  {
    uint64_t v5 = *v0;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v5, v1);
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v2, v3);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v6, v4);
    return;
  }
LABEL_7:
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Language.Components.CodingKeys()
{
  uint64_t v1 = 0x747069726373;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F69676572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65676175676E616CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Language.Components.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Locale.Language.Components.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Language.Components.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Language.Components.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.Language.Components.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.Language.Components.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v27 = *v1;
  uint64_t v8 = *((void *)v1 + 2);
  uint64_t v7 = *((void *)v1 + 3);
  uint64_t v9 = *((void *)v1 + 4);
  uint64_t v25 = *((void *)v1 + 5);
  uint64_t v26 = v9;
  uint64_t v10 = *((void *)v1 + 6);
  uint64_t v23 = *((void *)v1 + 7);
  uint64_t v24 = v10;
  uint64_t v11 = *((void *)v1 + 8);
  uint64_t v21 = *((void *)v1 + 9);
  uint64_t v22 = v11;
  uint64_t v12 = *((void *)v1 + 10);
  uint64_t v19 = *((void *)v1 + 11);
  uint64_t v20 = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v29 = v27;
  uint64_t v30 = v8;
  uint64_t v31 = v7;
  char v32 = 0;
  lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode();
  uint64_t v13 = v28;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v13)
  {
    uint64_t v15 = v19;
    uint64_t v14 = v20;
    uint64_t v17 = v21;
    uint64_t v16 = v22;
    *(void *)&long long v29 = v26;
    *((void *)&v29 + 1) = v25;
    uint64_t v30 = v24;
    uint64_t v31 = v23;
    char v32 = 1;
    lazy protocol witness table accessor for type Locale.Script and conformance Locale.Script();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v29 = v16;
    *((void *)&v29 + 1) = v17;
    uint64_t v30 = v14;
    uint64_t v31 = v15;
    char v32 = 2;
    lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Locale.Language.Components.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t Locale.Language.Components.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Language.Components.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v45 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of Locale.LanguageCode?(0, 0);
    outlined consume of Locale.LanguageCode?(0, 0);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    char v50 = 0;
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = v46;
    uint64_t v11 = v47;
    char v50 = 1;
    uint64_t v43 = v49;
    uint64_t v44 = v48;
    outlined copy of Locale.LanguageCode?(v46, v47);
    lazy protocol witness table accessor for type Locale.Script and conformance Locale.Script();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v41 = v10;
    uint64_t v42 = v11;
    long long v39 = a2;
    char v50 = 2;
    uint64_t v12 = v46;
    uint64_t v13 = v47;
    uint64_t v14 = v48;
    uint64_t v45 = v49;
    outlined copy of Locale.LanguageCode?(v46, v47);
    lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v15 = v46;
    uint64_t v38 = v48;
    uint64_t v40 = v49;
    uint64_t v16 = v47;
    outlined copy of Locale.LanguageCode?(v46, v47);
    outlined consume of Locale.LanguageCode?(0, 0);
    uint64_t v17 = v41;
    uint64_t v18 = v43;
    outlined copy of Locale.LanguageCode?(v41, v42);
    uint64_t v33 = v12;
    uint64_t v36 = v13;
    uint64_t v37 = v14;
    outlined copy of Locale.LanguageCode?(v12, v13);
    uint64_t v34 = v16;
    uint64_t v35 = v15;
    outlined copy of Locale.LanguageCode?(v15, v16);
    outlined consume of Locale.LanguageCode?(v15, v16);
    uint64_t v19 = v12;
    uint64_t v21 = v36;
    uint64_t v20 = v37;
    uint64_t v22 = v45;
    outlined consume of Locale.LanguageCode?(v19, v36);
    uint64_t v23 = v42;
    uint64_t v24 = v44;
    outlined consume of Locale.LanguageCode?(v17, v42);
    uint64_t v25 = v39;
    uint64_t v26 = v40;
    *long long v39 = v17;
    v25[1] = v23;
    v25[2] = v24;
    v25[3] = v18;
    uint64_t v27 = v33;
    v25[4] = v33;
    v25[5] = v21;
    v25[6] = v20;
    v25[7] = v22;
    uint64_t v29 = v34;
    uint64_t v28 = v35;
    v25[8] = v35;
    v25[9] = v29;
    v25[10] = v38;
    v25[11] = v26;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of Locale.LanguageCode?(v17, v42);
    outlined consume of Locale.LanguageCode?(v27, v36);
    uint64_t v30 = v28;
    uint64_t v31 = v29;
  }
  return outlined consume of Locale.LanguageCode?(v30, v31);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.Language.Components()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Language.Components()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Language.Components@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Language.Components.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Language.Components(void *a1)
{
  return Locale.Language.Components.encode(to:)(a1);
}

uint64_t Locale.Language.components.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = v1[9];
  uint64_t v13 = v1[10];
  uint64_t v12 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v6, v7);
  return outlined copy of Locale.LanguageCode?(v10, v11);
}

__n128 Locale.Language.components.setter(long long *a1)
{
  long long v12 = a1[1];
  long long v13 = *a1;
  long long v10 = a1[3];
  long long v11 = a1[2];
  __n128 v9 = (__n128)a1[4];
  uint64_t v2 = *((void *)a1 + 10);
  uint64_t v8 = *((void *)a1 + 11);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  outlined consume of Locale.LanguageCode?(*(void *)v1, *(void *)(v1 + 8));
  outlined consume of Locale.LanguageCode?(v3, v4);
  outlined consume of Locale.LanguageCode?(v5, v6);
  *(_OWORD *)uint64_t v1 = v13;
  *(_OWORD *)(v1 + 16) = v12;
  *(_OWORD *)(v1 + 32) = v11;
  *(_OWORD *)(v1 + 48) = v10;
  __n128 result = v9;
  *(__n128 *)(v1 + 64) = v9;
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v8;
  return result;
}

uint64_t (*Locale.Language.components.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Locale.Language.init(languageCode:script:region:)@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  long long v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  long long v5 = a2[1];
  a4[2] = *a2;
  a4[3] = v5;
  __n128 result = *(__n128 *)a3;
  long long v7 = *(_OWORD *)(a3 + 16);
  a4[4] = *(_OWORD *)a3;
  a4[5] = v7;
  return result;
}

uint64_t static Locale.Language.systemLanguages.getter()
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v0 = objc_msgSend(self, sel_systemLanguages);
  if (!v0) {
    __break(1u);
  }
  uint64_t v1 = v0;
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v1, sel_copy);
    uint64_t v35 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v3 = specialized _arrayForceCast<A, B>(_:)(v35);

    swift_bridgeObjectRelease();
    int64_t v4 = *(void *)(v3 + 16);
    if (v4) {
      goto LABEL_6;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = v2;

  int64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    goto LABEL_30;
  }
LABEL_6:
  uint64_t v49 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  uint64_t v38 = v3;
  uint64_t v5 = v3 + 32;
  uint64_t v39 = MEMORY[0x1E4FBC840] + 8;
  do
  {
    uint64_t v45 = v5;
    outlined init with copy of Any(v5, (uint64_t)v51);
    outlined init with copy of Any((uint64_t)v51, (uint64_t)v50);
    uint64_t v6 = swift_dynamicCast();
    MEMORY[0x1F4188790](v6);
    LODWORD(v47) = 0;
    String.utf8CString.getter();
    int Language = uloc_getLanguage();
    uint64_t v8 = swift_release();
    uint64_t v9 = 0;
    int64_t v46 = v4;
    uint64_t v10 = 0;
    if ((int)v47 <= 0 && Language > 0)
    {
      v37[Language] = 0;
      uint64_t v8 = MEMORY[0x185301F80](v37);
      uint64_t v9 = v8;
      uint64_t v10 = v11;
    }
    MEMORY[0x1F4188790](v8);
    LODWORD(v47) = 0;
    String.utf8CString.getter();
    int Script = uloc_getScript();
    uint64_t v13 = swift_release();
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    if ((int)v47 <= 0 && Script > 0)
    {
      v37[Script] = 0;
      uint64_t v13 = MEMORY[0x185301F80](v37);
      uint64_t v14 = v13;
      uint64_t v15 = v16;
    }
    MEMORY[0x1F4188790](v13);
    LODWORD(v47) = 0;
    String.utf8CString.getter();
    int Country = uloc_getCountry();
    swift_release();
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    if ((int)v47 <= 0 && Country > 0)
    {
      v37[Country] = 0;
      uint64_t v18 = MEMORY[0x185301F80](v37);
      uint64_t v19 = v20;
    }
    swift_bridgeObjectRelease();
    if (v10)
    {
      Swift::String v21 = String.lowercased()();
      object = v21._object;
      uint64_t countAndFlagsBits = v21._countAndFlagsBits;
      if (v15) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v9 = 0;
      object = 0;
      uint64_t countAndFlagsBits = 0;
      if (v15)
      {
LABEL_18:
        uint64_t v47 = v14;
        uint64_t v48 = v15;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        Swift::String v22 = String._capitalized()();
        uint64_t v41 = v22._object;
        uint64_t v42 = v22._countAndFlagsBits;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v23 = v14;
        if (v19) {
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v23 = 0;
    if (v19)
    {
LABEL_19:
      Swift::String v24 = String.uppercased()();
      uint64_t v40 = v24._countAndFlagsBits;
      uint64_t v25 = v24._object;
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v18 = 0;
    uint64_t v40 = 0;
    uint64_t v25 = 0;
LABEL_23:
    uint64_t v26 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    uint64_t v27 = v49;
    uint64_t v28 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
      uint64_t v27 = v49;
    }
    unint64_t v30 = *(void *)(v27 + 16);
    unint64_t v29 = *(void *)(v27 + 24);
    if (v30 >= v29 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      uint64_t v27 = v49;
    }
    *(void *)(v27 + 16) = v30 + 1;
    uint64_t v31 = (void *)(v27 + 96 * v30);
    v31[4] = v28;
    v31[5] = v26;
    uint64_t v32 = v45;
    uint64_t v33 = object;
    v31[6] = countAndFlagsBits;
    v31[7] = v33;
    v31[8] = v23;
    v31[9] = v15;
    uint64_t v34 = v41;
    v31[10] = v42;
    v31[11] = v34;
    v31[12] = v18;
    v31[13] = v19;
    uint64_t v5 = v32 + 32;
    v31[14] = v40;
    v31[15] = v25;
    int64_t v4 = v46 - 1;
  }
  while (v46 != 1);
  swift_bridgeObjectRelease();
  return v27;
}

BOOL static Locale.Language.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v10[0] = *a1;
  v10[1] = v2;
  long long v3 = a1[3];
  void v10[2] = a1[2];
  void v10[3] = v3;
  long long v4 = a1[5];
  void v10[4] = a1[4];
  v10[5] = v4;
  long long v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  long long v6 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v6;
  long long v7 = a2[5];
  v9[4] = a2[4];
  v9[5] = v7;
  return specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)v10, (uint64_t *)v9);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Language.CodingKeys()
{
  return 0x6E656E6F706D6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Language.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E656E6F706D6F63 && a2 == 0xEA00000000007374)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Language.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Language.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.Language.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.Language.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *v1;
  long long v15 = v1[1];
  long long v16 = v7;
  long long v8 = v1[2];
  long long v13 = v1[3];
  long long v14 = v8;
  long long v12 = v1[4];
  uint64_t v10 = *((void *)v1 + 10);
  uint64_t v9 = *((void *)v1 + 11);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v17 = v16;
  long long v18 = v15;
  long long v19 = v14;
  long long v20 = v13;
  long long v21 = v12;
  uint64_t v22 = v10;
  uint64_t v23 = v9;
  lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Locale.Language.hashValue.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[9];
  uint64_t v7 = v0[8];
  uint64_t v6 = v0[4];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v2, v1);
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v6, v3);
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v7, v4);
  return Hasher._finalize()();
}

uint64_t Locale.Language.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Language.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  long long v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    long long v9 = v15[1];
    long long v10 = v15[2];
    long long v11 = v15[3];
    long long v12 = v15[4];
    long long v13 = v15[5];
    *a2 = v15[0];
    a2[1] = v9;
    a2[2] = v10;
    a2[3] = v11;
    a2[4] = v12;
    a2[5] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for Hashable.hash(into:) in conformance Locale.Language()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[8];
  if (v1)
  {
    uint64_t v5 = *v0;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v5, v1);
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v2, v3);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v6, v4);
    return;
  }
LABEL_7:
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Language()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[9];
  uint64_t v7 = v0[8];
  uint64_t v6 = v0[4];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v2, v1);
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v6, v3);
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v7, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Language@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Locale.Language.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Language(void *a1)
{
  return Locale.Language.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Locale.Language(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v10[0] = *a1;
  v10[1] = v2;
  long long v3 = a1[3];
  void v10[2] = a1[2];
  void v10[3] = v3;
  long long v4 = a1[5];
  void v10[4] = a1[4];
  v10[5] = v4;
  long long v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  long long v6 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v6;
  long long v7 = a2[5];
  v9[4] = a2[4];
  v9[5] = v7;
  return specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)v10, (uint64_t *)v9);
}

BOOL specialized static Locale.Language.Components.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  uint64_t v10 = a1[10];
  uint64_t v9 = a1[11];
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = a2[6];
  uint64_t v16 = a2[7];
  uint64_t v17 = a2[8];
  uint64_t v18 = a2[9];
  uint64_t v19 = a2[10];
  uint64_t v20 = a2[11];
  if (!v3)
  {
    uint64_t v56 = a1[4];
    if (!v11) {
      goto LABEL_8;
    }
LABEL_15:
    outlined copy of Locale.LanguageCode?(v12, v11);
    outlined consume of Locale.LanguageCode?(v2, v3);
    uint64_t v42 = v12;
    uint64_t v43 = v11;
    goto LABEL_29;
  }
  if (!v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  uint64_t v56 = a1[4];
  if (a1[2] == a2[2] && a1[3] == a2[3]) {
    goto LABEL_8;
  }
  uint64_t v54 = a2[10];
  uint64_t v55 = a1[10];
  uint64_t v52 = a2[6];
  uint64_t v53 = a1[11];
  uint64_t v51 = a2[11];
  uint64_t v21 = a1[8];
  uint64_t v22 = a1[9];
  uint64_t v23 = a2[8];
  uint64_t v24 = a2[9];
  uint64_t v25 = a1[7];
  uint64_t v26 = a1[6];
  uint64_t v27 = a2[7];
  uint64_t v28 = a2[4];
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v13 = v28;
  uint64_t v20 = v51;
  uint64_t v15 = v52;
  uint64_t v16 = v27;
  uint64_t v6 = v26;
  uint64_t v5 = v25;
  uint64_t v18 = v24;
  uint64_t v17 = v23;
  uint64_t v8 = v22;
  uint64_t v7 = v21;
  uint64_t v19 = v54;
  uint64_t v10 = v55;
  uint64_t v9 = v53;
  char v30 = v29;
  BOOL result = 0;
  if (v30)
  {
LABEL_8:
    if (v4)
    {
      if (v14)
      {
        if (v6 != v15 || v5 != v16)
        {
          uint64_t v32 = v10;
          uint64_t v33 = v19;
          uint64_t v34 = v9;
          uint64_t v35 = v20;
          uint64_t v36 = v7;
          uint64_t v37 = v8;
          uint64_t v38 = v17;
          uint64_t v39 = v18;
          char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v18 = v39;
          uint64_t v17 = v38;
          uint64_t v8 = v37;
          uint64_t v7 = v36;
          uint64_t v19 = v33;
          uint64_t v20 = v35;
          uint64_t v10 = v32;
          uint64_t v9 = v34;
          char v41 = v40;
          BOOL result = 0;
          if ((v41 & 1) == 0) {
            return result;
          }
        }
        goto LABEL_17;
      }
      uint64_t v44 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = v44;
    }
    else if (!v14)
    {
LABEL_17:
      if (v8)
      {
        if (v18) {
          return v10 == v19 && v9 == v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
        }
        uint64_t v47 = v7;
        uint64_t v46 = v8;
        uint64_t v48 = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v18 = 0;
        uint64_t v17 = v48;
      }
      else
      {
        uint64_t v46 = 0;
        uint64_t v47 = v7;
        if (!v18) {
          return 1;
        }
      }
      uint64_t v49 = v17;
      uint64_t v50 = v18;
      outlined copy of Locale.LanguageCode?(v17, v18);
      outlined consume of Locale.LanguageCode?(v47, v46);
      uint64_t v42 = v49;
      uint64_t v43 = v50;
LABEL_29:
      outlined consume of Locale.LanguageCode?(v42, v43);
      return 0;
    }
    uint64_t v45 = v13;
    outlined copy of Locale.LanguageCode?(v13, v14);
    outlined consume of Locale.LanguageCode?(v56, v4);
    uint64_t v42 = v45;
    uint64_t v43 = v14;
    goto LABEL_29;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Script and conformance Locale.Script()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language and conformance Locale.Language()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language and conformance Locale.Language;
  if (!lazy protocol witness table cache variable for type Locale.Language and conformance Locale.Language)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language and conformance Locale.Language);
  }
  return result;
}

void *assignWithCopy for Locale.Language(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode((uint64_t)a1);
      long long v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v6;
  }
  uint64_t v7 = a1 + 4;
  uint64_t v8 = a2 + 4;
  uint64_t v9 = a2[5];
  if (a1[5])
  {
    if (v9)
    {
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Script((uint64_t)(a1 + 4));
      long long v10 = *((_OWORD *)a2 + 3);
      *uint64_t v7 = *v8;
      *((_OWORD *)a1 + 3) = v10;
    }
  }
  else if (v9)
  {
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 3);
    *uint64_t v7 = *v8;
    *((_OWORD *)a1 + 3) = v11;
  }
  uint64_t v12 = a1 + 8;
  uint64_t v13 = a2 + 8;
  uint64_t v14 = a2[9];
  if (a1[9])
  {
    if (v14)
    {
      a1[8] = a2[8];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[10] = a2[10];
      a1[11] = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Region((uint64_t)(a1 + 8));
      long long v15 = *((_OWORD *)a2 + 5);
      *uint64_t v12 = *v13;
      *((_OWORD *)a1 + 5) = v15;
    }
  }
  else if (v14)
  {
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    a1[11] = a2[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = *((_OWORD *)a2 + 5);
    *uint64_t v12 = *v13;
    *((_OWORD *)a1 + 5) = v16;
  }
  return a1;
}

uint64_t assignWithTake for Locale.Language(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Locale.LanguageCode(a1);
  }
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  if (*(void *)(a1 + 40))
  {
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Locale.Script(a1 + 32);
  }
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_11:
  if (!*(void *)(a1 + 72))
  {
LABEL_15:
    long long v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    return a1;
  }
  uint64_t v10 = *(void *)(a2 + 72);
  if (!v10)
  {
    outlined destroy of Locale.Region(a1 + 64);
    goto LABEL_15;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *storeEnumTagSinglePayload for Locale.Language.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181B565BCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Locale.Language.CodingKeys()
{
  return &unk_1ECA4A260;
}

unsigned char *storeEnumTagSinglePayload for Locale.Language.Components.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B566C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Locale.Language.Components.CodingKeys()
{
  return &unk_1ECA4A2F0;
}

uint64_t specialized Locale.Language.Components.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65676175676E616CLL && a2 == 0xEC00000065646F43;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x747069726373 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F69676572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileManager.replaceItemAtURL(originalItemURL:withItemAtURL:backupItemName:options:)(NSURL_optional *__return_ptr retstr, NSURL *originalItemURL, NSURL *withItemAtURL, Swift::String_optional backupItemName, NSFileManagerItemReplacementOptions options)
{
  object = backupItemName.value._object;
  URL.init(reference:)(originalItemURL, &v14);
  uint64_t v8 = v14;
  URL.init(reference:)(withItemAtURL, &v13);
  long long v9 = v13;
  id v10 = v15[4];
  NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(&v14, &v13, (uint64_t)object, options, (uint64_t)v15);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (!v10)
  {
    id v11 = v15[0];
    if (v15[0])
    {
      id v12 = v15[0];
      outlined consume of URL?(v11);
    }
  }
}

void NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(void **a1@<X0>, void **a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  char v6 = v5;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v9 = *a1;
  id v10 = *a2;
  if (a3) {
    id v11 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    id v11 = 0;
  }
  id v25 = 0;
  uint64_t v26 = 0;
  id v12 = v9;
  id v13 = v10;
  unsigned int v14 = objc_msgSend(v6, sel__replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_, v12, v13, v11, a4, &v26, &v25);

  id v16 = v25;
  long long v15 = v26;
  if (v14)
  {
    if (v26)
    {
      URL.init(reference:)(v26, &v26);
      long long v15 = v26;
      long long v24 = v27;
      id v17 = v16;
      long long v18 = v24;
    }
    else
    {
      id v20 = v25;
      long long v18 = 0uLL;
    }
    *(void *)a5 = v15;
    *(_OWORD *)(a5 + 8) = v18;
  }
  else
  {
    if (v25)
    {
      v25;
      id v19 = v15;
    }
    else
    {
      uint64_t v21 = one-time initialization token for _nilObjCError;
      id v22 = v26;
      if (v21 != -1) {
        swift_once();
      }
      id v23 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
}

id NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void **)a2;
  id v12 = *(void **)a1;
  long long v13 = *(_OWORD *)(a1 + 8);
  id v10 = v7;
  long long v11 = *(_OWORD *)(a2 + 8);
  NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(&v12, &v10, a4, a5, (uint64_t)&v14);
  if (!v6)
  {
    id v5 = v14;
    if (v14)
    {
      id v8 = v14;
      outlined consume of URL?(v5);
    }
  }
  return v5;
}

uint64_t sub_181B56D9C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(int a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1E4FBC868];
  unint64_t v165 = MEMORY[0x1E4FBC868];
  uint64_t v162 = specialized Array._getCount()(a2);
  if (!v162) {
    return v4;
  }
  uint64_t v161 = v2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v155 = 0;
  long long v156 = xmmword_18210F2A0;
  uint64_t v154 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v158 = v2;
  int v159 = a1;
  while (1)
  {
    uint64_t v6 = specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v5, 1, v2);
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_183:
      __break(1u);
      goto LABEL_184;
    }
    id v8 = (uint64_t *)(v161 + 16 * v5);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    MEMORY[0x1F4188790](v6);
    v147[4] = a1;
    uint64_t v148 = &v165;
    uint64_t v149 = v10;
    uint64_t v150 = v9;
    if ((v9 & 0x1000000000000000) != 0) {
      goto LABEL_69;
    }
    if ((v9 & 0x2000000000000000) == 0) {
      break;
    }
    *(void *)name = v10;
    *(void *)&name[8] = v9 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v16 = swift_bridgeObjectRetain();
    MEMORY[0x1F4188790](v16);
    ssize_t v17 = fgetxattr(a1, name, v146, 0x3E8uLL, 0, 0);
    if (v17 == -1)
    {
      if (MEMORY[0x185301870]() != 34) {
        goto LABEL_56;
      }
      ssize_t v23 = fgetxattr(a1, name, 0, 0, 0, 0);
      long long v24 = malloc(v23);
      if (!v24) {
        goto LABEL_191;
      }
      id v25 = v24;
      if (fgetxattr(a1, name, v24, v23, 0, 0) == v23)
      {
        uint64_t v163 = &v151;
        unint64_t v160 = v147;
        if (v23)
        {
          type metadata accessor for __DataStorage();
          uint64_t v26 = swift_allocObject();
          if (v23 > 0x3FFFFFFFFFFFFFFELL)
          {
LABEL_187:
            __break(1u);
            goto LABEL_188;
          }
          long long v27 = (void *)v26;
          *(void *)(v26 + 32) = v23;
          *(void *)(v26 + 40) = 0;
          *(unsigned char *)(v26 + 64) = 0;
          *(void *)(v26 + 16) = v25;
          *(void *)(v26 + 24) = v23;
          *(void *)(v26 + 48) = closure #2 in Data.Deallocator._deallocator.getter;
          *(void *)(v26 + 56) = 0;
          swift_bridgeObjectRetain();
          uint64_t v28 = specialized Data._Representation.init(_:count:)(v27, v23);
          unint64_t v157 = v29;
        }
        else
        {
          swift_bridgeObjectRetain();
          free(v25);
          uint64_t v28 = 0;
          unint64_t v157 = 0xC000000000000000;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v69 = v165;
        unint64_t v164 = v165;
        unint64_t v165 = 0x8000000000000000;
        unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
        uint64_t v72 = *(void *)(v69 + 16);
        BOOL v73 = (v70 & 1) == 0;
        uint64_t v74 = v72 + v73;
        if (!__OFADD__(v72, v73))
        {
          char v75 = v70;
          if (*(void *)(v69 + 24) < v74)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v74, isUniquelyReferenced_nonNull_native);
            unint64_t v76 = v164;
            unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
            if ((v75 & 1) != (v78 & 1)) {
              goto LABEL_197;
            }
            unint64_t v71 = v77;
            if ((v75 & 1) == 0) {
              goto LABEL_66;
            }
            goto LABEL_63;
          }
          if (isUniquelyReferenced_nonNull_native)
          {
            unint64_t v76 = v69;
            if ((v70 & 1) == 0) {
              goto LABEL_66;
            }
            goto LABEL_63;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
          uint64_t v127 = static _DictionaryStorage.copy(original:)();
          unint64_t v76 = v127;
          if (!*(void *)(v69 + 16)) {
            goto LABEL_176;
          }
          uint64_t v128 = (void *)(v127 + 64);
          unint64_t v129 = (unint64_t)((1 << *(unsigned char *)(v76 + 32)) + 63) >> 6;
          if (v76 != v69 || (unint64_t)v128 >= v69 + 64 + 8 * v129) {
            memmove(v128, (const void *)(v69 + 64), 8 * v129);
          }
          unint64_t v151 = v69 + 64;
          int64_t v130 = 0;
          *(void *)(v76 + 16) = *(void *)(v69 + 16);
          uint64_t v131 = 1 << *(unsigned char *)(v69 + 32);
          if (v131 < 64) {
            uint64_t v132 = ~(-1 << v131);
          }
          else {
            uint64_t v132 = -1;
          }
          unint64_t v133 = v132 & *(void *)(v69 + 64);
          int64_t v152 = (unint64_t)(v131 + 63) >> 6;
          while (1)
          {
            if (v133)
            {
              unint64_t v134 = __clz(__rbit64(v133));
              v133 &= v133 - 1;
              unint64_t v135 = v134 | (v130 << 6);
            }
            else
            {
              BOOL v52 = __OFADD__(v130++, 1);
              if (v52) {
                goto LABEL_193;
              }
              if (v130 >= v152) {
                goto LABEL_175;
              }
              unint64_t v143 = *(void *)(v151 + 8 * v130);
              if (!v143)
              {
                int64_t v144 = v130 + 1;
                if (v130 + 1 >= v152) {
                  goto LABEL_175;
                }
                unint64_t v143 = *(void *)(v151 + 8 * v144);
                if (!v143)
                {
                  int64_t v144 = v130 + 2;
                  if (v130 + 2 >= v152) {
                    goto LABEL_175;
                  }
                  unint64_t v143 = *(void *)(v151 + 8 * v144);
                  if (!v143)
                  {
                    int64_t v144 = v130 + 3;
                    if (v130 + 3 >= v152) {
                      goto LABEL_175;
                    }
                    unint64_t v143 = *(void *)(v151 + 8 * v144);
                    if (!v143)
                    {
                      int64_t v144 = v130 + 4;
                      if (v130 + 4 >= v152) {
                        goto LABEL_175;
                      }
                      unint64_t v143 = *(void *)(v151 + 8 * v144);
                      if (!v143)
                      {
                        int64_t v144 = v130 + 5;
                        if (v130 + 5 >= v152) {
                          goto LABEL_175;
                        }
                        unint64_t v143 = *(void *)(v151 + 8 * v144);
                        if (!v143)
                        {
                          int64_t v144 = v130 + 6;
                          if (v130 + 6 >= v152) {
                            goto LABEL_175;
                          }
                          unint64_t v143 = *(void *)(v151 + 8 * v144);
                          if (!v143)
                          {
                            int64_t v144 = v130 + 7;
                            if (v130 + 7 >= v152) {
                              goto LABEL_175;
                            }
                            unint64_t v143 = *(void *)(v151 + 8 * v144);
                            if (!v143)
                            {
                              while (1)
                              {
                                int64_t v130 = v144 + 1;
                                if (__OFADD__(v144, 1)) {
                                  goto LABEL_196;
                                }
                                if (v130 >= v152) {
                                  break;
                                }
                                unint64_t v143 = *(void *)(v151 + 8 * v130);
                                ++v144;
                                if (v143) {
                                  goto LABEL_170;
                                }
                              }
LABEL_175:
                              uint64_t v2 = v158;
LABEL_176:
                              swift_bridgeObjectRelease();
                              if ((v75 & 1) == 0)
                              {
LABEL_66:
                                *(void *)(v76 + 8 * (v71 >> 6) + 64) |= 1 << v71;
                                uint64_t v81 = (uint64_t *)(*(void *)(v76 + 48) + 16 * v71);
                                *uint64_t v81 = v10;
                                v81[1] = v9;
                                uint64_t v82 = (uint64_t *)(*(void *)(v76 + 56) + 16 * v71);
                                unint64_t v83 = v157;
                                *uint64_t v82 = v28;
                                v82[1] = v83;
                                uint64_t v84 = *(void *)(v76 + 16);
                                BOOL v52 = __OFADD__(v84, 1);
                                uint64_t v85 = v84 + 1;
                                if (!v52)
                                {
                                  *(void *)(v76 + 16) = v85;
                                  swift_bridgeObjectRetain();
                                  goto LABEL_68;
                                }
LABEL_188:
                                __break(1u);
LABEL_189:
                                __break(1u);
LABEL_190:
                                __break(1u);
LABEL_191:
                                __break(1u);
LABEL_192:
                                __break(1u);
LABEL_193:
                                __break(1u);
                              }
LABEL_63:
                              uint64_t v79 = *(void *)(v76 + 56) + 16 * v71;
                              outlined consume of Data._Representation(*(void *)v79, *(void *)(v79 + 8));
                              unint64_t v80 = v157;
                              *(void *)uint64_t v79 = v28;
                              *(void *)(v79 + 8) = v80;
LABEL_68:
                              unint64_t v165 = v76;
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              goto LABEL_42;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                int64_t v130 = v144;
              }
LABEL_170:
              unint64_t v133 = (v143 - 1) & v143;
              unint64_t v135 = __clz(__rbit64(v143)) + (v130 << 6);
            }
            uint64_t v136 = 16 * v135;
            char v137 = (uint64_t *)(*(void *)(v69 + 48) + v136);
            uint64_t v139 = *v137;
            uint64_t v138 = v137[1];
            uint64_t v140 = *(void *)(v76 + 48);
            long long v153 = *(_OWORD *)(*(void *)(v69 + 56) + v136);
            long long v141 = v153;
            uint64_t v142 = (void *)(v140 + v136);
            *uint64_t v142 = v139;
            v142[1] = v138;
            *(_OWORD *)(*(void *)(v76 + 56) + v136) = v141;
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v153, *((unint64_t *)&v153 + 1));
          }
        }
LABEL_186:
        __break(1u);
        goto LABEL_187;
      }
      long long v67 = v25;
LABEL_55:
      free(v67);
      goto LABEL_56;
    }
    unint64_t v18 = v17;
    uint64_t v163 = &v151;
    unint64_t v160 = v147;
    if (v17)
    {
      if (v17 <= 14)
      {
        uint64_t v21 = specialized Data.InlineData.init(_:)(v146, &v146[v17]);
        unint64_t v22 = v35 & 0xFFFFFFFFFFFFFFLL;
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        unint64_t v19 = (unint64_t)__DataStorage.init(bytes:length:)((unint64_t)v146, v18);
        unint64_t v20 = v19;
        if (v18 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = 0;
          *(void *)(v21 + 24) = v18;
          unint64_t v22 = v20 | 0x8000000000000000;
        }
        else
        {
          uint64_t v21 = v18 << 32;
          unint64_t v22 = v19 | 0x4000000000000000;
        }
      }
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0xC000000000000000;
    }
    swift_bridgeObjectRetain();
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v38 = v165;
    unint64_t v164 = v165;
    unint64_t v165 = 0x8000000000000000;
    unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    uint64_t v41 = *(void *)(v38 + 16);
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_183;
    }
    char v44 = v39;
    if (*(void *)(v38 + 24) < v43)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, v37);
      unint64_t v45 = v164;
      unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
      if ((v44 & 1) != (v47 & 1)) {
        goto LABEL_197;
      }
      unint64_t v40 = v46;
      if ((v44 & 1) == 0) {
        goto LABEL_39;
      }
      goto LABEL_36;
    }
    if (v37)
    {
      unint64_t v45 = v38;
      if ((v39 & 1) == 0) {
        goto LABEL_39;
      }
LABEL_36:
      uint64_t v48 = *(void *)(v45 + 56) + 16 * v40;
      outlined consume of Data._Representation(*(void *)v48, *(void *)(v48 + 8));
      *(void *)uint64_t v48 = v21;
      *(void *)(v48 + 8) = v22;
      goto LABEL_41;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
    uint64_t v87 = static _DictionaryStorage.copy(original:)();
    unint64_t v45 = v87;
    if (!*(void *)(v38 + 16)) {
      goto LABEL_179;
    }
    uint64_t v88 = (void *)(v87 + 64);
    unint64_t v89 = (unint64_t)((1 << *(unsigned char *)(v45 + 32)) + 63) >> 6;
    if (v45 != v38 || (unint64_t)v88 >= v38 + 64 + 8 * v89) {
      memmove(v88, (const void *)(v38 + 64), 8 * v89);
    }
    unint64_t v151 = v38 + 64;
    unint64_t v90 = 0;
    *(void *)(v45 + 16) = *(void *)(v38 + 16);
    uint64_t v91 = 1 << *(unsigned char *)(v38 + 32);
    if (v91 < 64) {
      uint64_t v92 = ~(-1 << v91);
    }
    else {
      uint64_t v92 = -1;
    }
    unint64_t v93 = v92 & *(void *)(v38 + 64);
    int64_t v152 = (unint64_t)(v91 + 63) >> 6;
    while (1)
    {
      if (v93)
      {
        unint64_t v94 = __clz(__rbit64(v93));
        v93 &= v93 - 1;
        unint64_t v157 = v90;
        unint64_t v95 = v94 | (v90 << 6);
        goto LABEL_79;
      }
      BOOL v52 = __OFADD__(v90, 1);
      int64_t v103 = v90 + 1;
      if (v52) {
        goto LABEL_189;
      }
      if (v103 >= v152) {
        goto LABEL_179;
      }
      unint64_t v104 = *(void *)(v151 + 8 * v103);
      if (!v104) {
        break;
      }
LABEL_95:
      unint64_t v93 = (v104 - 1) & v104;
      unint64_t v157 = v103;
      unint64_t v95 = __clz(__rbit64(v104)) + (v103 << 6);
LABEL_79:
      uint64_t v96 = 16 * v95;
      long long v97 = (uint64_t *)(*(void *)(v38 + 48) + v96);
      uint64_t v99 = *v97;
      uint64_t v98 = v97[1];
      uint64_t v100 = *(void *)(v45 + 48);
      long long v153 = *(_OWORD *)(*(void *)(v38 + 56) + v96);
      long long v101 = v153;
      unint64_t v102 = (void *)(v100 + v96);
      *unint64_t v102 = v99;
      v102[1] = v98;
      *(_OWORD *)(*(void *)(v45 + 56) + v96) = v101;
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v153, *((unint64_t *)&v153 + 1));
      unint64_t v90 = v157;
    }
    int64_t v105 = v103 + 1;
    if (v103 + 1 >= v152) {
      goto LABEL_179;
    }
    unint64_t v104 = *(void *)(v151 + 8 * v105);
    if (v104) {
      goto LABEL_94;
    }
    int64_t v105 = v103 + 2;
    if (v103 + 2 >= v152) {
      goto LABEL_179;
    }
    unint64_t v104 = *(void *)(v151 + 8 * v105);
    if (v104) {
      goto LABEL_94;
    }
    int64_t v105 = v103 + 3;
    if (v103 + 3 >= v152) {
      goto LABEL_179;
    }
    unint64_t v104 = *(void *)(v151 + 8 * v105);
    if (v104) {
      goto LABEL_94;
    }
    int64_t v105 = v103 + 4;
    if (v103 + 4 >= v152) {
      goto LABEL_179;
    }
    unint64_t v104 = *(void *)(v151 + 8 * v105);
    if (v104) {
      goto LABEL_94;
    }
    int64_t v105 = v103 + 5;
    if (v103 + 5 >= v152) {
      goto LABEL_179;
    }
    unint64_t v104 = *(void *)(v151 + 8 * v105);
    if (v104)
    {
LABEL_94:
      int64_t v103 = v105;
      goto LABEL_95;
    }
    unint64_t v106 = v45;
    int64_t v107 = v103 + 6;
    if (v103 + 6 >= v152) {
      goto LABEL_178;
    }
    unint64_t v104 = *(void *)(v151 + 8 * v107);
    if (v104) {
      goto LABEL_100;
    }
    int64_t v107 = v103 + 7;
    if (v103 + 7 >= v152) {
      goto LABEL_178;
    }
    unint64_t v104 = *(void *)(v151 + 8 * v107);
    if (v104)
    {
LABEL_100:
      int64_t v103 = v107;
      goto LABEL_95;
    }
    while (1)
    {
      int64_t v103 = v107 + 1;
      if (__OFADD__(v107, 1))
      {
        __break(1u);
        goto LABEL_195;
      }
      if (v103 >= v152) {
        break;
      }
      unint64_t v104 = *(void *)(v151 + 8 * v103);
      ++v107;
      unint64_t v45 = v106;
      if (v104) {
        goto LABEL_95;
      }
    }
LABEL_178:
    unint64_t v45 = v106;
LABEL_179:
    swift_bridgeObjectRelease();
    if (v44) {
      goto LABEL_36;
    }
LABEL_39:
    *(void *)(v45 + 8 * (v40 >> 6) + 64) |= 1 << v40;
    uint64_t v49 = (uint64_t *)(*(void *)(v45 + 48) + 16 * v40);
    *uint64_t v49 = v10;
    v49[1] = v9;
    uint64_t v50 = (uint64_t *)(*(void *)(v45 + 56) + 16 * v40);
    *uint64_t v50 = v21;
    v50[1] = v22;
    uint64_t v51 = *(void *)(v45 + 16);
    BOOL v52 = __OFADD__(v51, 1);
    uint64_t v53 = v51 + 1;
    if (v52) {
      goto LABEL_185;
    }
    *(void *)(v45 + 16) = v53;
    swift_bridgeObjectRetain();
LABEL_41:
    unint64_t v165 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = v158;
LABEL_42:
    a1 = v159;
LABEL_56:
    swift_bridgeObjectRelease();
    uint64_t v5 = v7;
    if (v7 == v162)
    {
      swift_bridgeObjectRelease();
      return v165;
    }
  }
  if ((v10 & 0x1000000000000000) == 0)
  {
LABEL_69:
    swift_bridgeObjectRetain();
    uint64_t v86 = v155;
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v155 = v86;
    goto LABEL_56;
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  MEMORY[0x1F4188790](v11);
  ssize_t v12 = fgetxattr(a1, (const char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32), v146, 0x3E8uLL, 0, 0);
  if (v12 == -1)
  {
    if (MEMORY[0x185301870]() != 34) {
      goto LABEL_56;
    }
    ssize_t v30 = fgetxattr(a1, (const char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32), 0, 0, 0, 0);
    uint64_t v31 = malloc(v30);
    if (!v31) {
      goto LABEL_192;
    }
    unint64_t v32 = (unint64_t)v31;
    if (fgetxattr(a1, (const char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32), v31, v30, 0, 0) == v30)
    {
      *(_OWORD *)name = v156;
      swift_bridgeObjectRetain();
      uint64_t v33 = specialized Data.init(bytesNoCopy:count:deallocator:)(v32, v30, (unint64_t *)name);
      specialized Dictionary.subscript.setter(v33, v34, v10, v9);
      goto LABEL_56;
    }
    long long v67 = (void *)v32;
    goto LABEL_55;
  }
  uint64_t v163 = &v151;
  if (v12)
  {
    long long v13 = &v146[v12];
    if (v12 <= 14)
    {
      unint64_t v160 = (_DWORD *)specialized Data.InlineData.init(_:)(v146, v13);
      uint64_t v15 = v36 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v12 >= 0x7FFFFFFF)
    {
      unint64_t v160 = (_DWORD *)specialized Data.LargeSlice.init(_:)((unint64_t)v146, (uint64_t)v13);
      uint64_t v15 = v54 | 0x8000000000000000;
    }
    else
    {
      unint64_t v160 = specialized Data.InlineSlice.init(_:)((unint64_t)v146, (uint64_t)v13);
      uint64_t v15 = v14 | 0x4000000000000000;
    }
  }
  else
  {
    unint64_t v160 = 0;
    uint64_t v15 = 0xC000000000000000;
  }
  swift_bridgeObjectRetain();
  char v55 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v56 = v165;
  unint64_t v165 = 0x8000000000000000;
  *(void *)name = v56;
  unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
  uint64_t v59 = *(void *)(v56 + 16);
  BOOL v60 = (v57 & 1) == 0;
  uint64_t v61 = v59 + v60;
  if (__OFADD__(v59, v60))
  {
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }
  char v62 = v57;
  if (*(void *)(v56 + 24) < v61)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v61, v55);
    unint64_t v63 = *(void *)name;
    unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    if ((v62 & 1) != (v65 & 1)) {
      goto LABEL_197;
    }
    unint64_t v58 = v64;
    uint64_t v2 = v158;
    if (v62)
    {
LABEL_48:
      uint64_t v66 = *(void *)(v63 + 56) + 16 * v58;
      outlined consume of Data._Representation(*(void *)v66, *(void *)(v66 + 8));
      *(void *)uint64_t v66 = v160;
      *(void *)(v66 + 8) = v15;
LABEL_52:
      unint64_t v165 = v63;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v159;
      goto LABEL_56;
    }
LABEL_51:
    specialized _NativeDictionary._insert(at:key:value:)(v58, v10, v9, (uint64_t)v160, v15, (void *)v63);
    swift_bridgeObjectRetain();
    goto LABEL_52;
  }
  if (v55)
  {
    unint64_t v63 = v56;
    uint64_t v2 = v158;
    if (v57) {
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v108 = static _DictionaryStorage.copy(original:)();
  unint64_t v63 = v108;
  if (!*(void *)(v56 + 16))
  {
LABEL_139:
    swift_bridgeObjectRelease();
    uint64_t v2 = v158;
    if (v62) {
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  id v109 = (void *)(v108 + 64);
  unint64_t v110 = (unint64_t)((1 << *(unsigned char *)(v63 + 32)) + 63) >> 6;
  if (v63 != v56 || (unint64_t)v109 >= v56 + 64 + 8 * v110) {
    memmove(v109, (const void *)(v56 + 64), 8 * v110);
  }
  unint64_t v151 = v56 + 64;
  unint64_t v111 = 0;
  *(void *)(v63 + 16) = *(void *)(v56 + 16);
  uint64_t v112 = 1 << *(unsigned char *)(v56 + 32);
  if (v112 < 64) {
    uint64_t v113 = ~(-1 << v112);
  }
  else {
    uint64_t v113 = -1;
  }
  unint64_t v114 = v113 & *(void *)(v56 + 64);
  int64_t v152 = (unint64_t)(v112 + 63) >> 6;
  while (2)
  {
    if (v114)
    {
      unint64_t v115 = __clz(__rbit64(v114));
      v114 &= v114 - 1;
      unint64_t v157 = v111;
      unint64_t v116 = v115 | (v111 << 6);
LABEL_114:
      uint64_t v117 = 16 * v116;
      char v118 = (uint64_t *)(*(void *)(v56 + 48) + v117);
      uint64_t v120 = *v118;
      uint64_t v119 = v118[1];
      uint64_t v121 = *(void *)(v63 + 48);
      long long v153 = *(_OWORD *)(*(void *)(v56 + 56) + v117);
      long long v122 = v153;
      char v123 = (void *)(v121 + v117);
      *char v123 = v120;
      v123[1] = v119;
      *(_OWORD *)(*(void *)(v63 + 56) + v117) = v122;
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v153, *((unint64_t *)&v153 + 1));
      unint64_t v111 = v157;
      continue;
    }
    break;
  }
  BOOL v52 = __OFADD__(v111, 1);
  int64_t v124 = v111 + 1;
  if (v52) {
    goto LABEL_190;
  }
  if (v124 >= v152) {
    goto LABEL_139;
  }
  unint64_t v125 = *(void *)(v151 + 8 * v124);
  if (v125)
  {
LABEL_134:
    unint64_t v114 = (v125 - 1) & v125;
    unint64_t v157 = v124;
    unint64_t v116 = __clz(__rbit64(v125)) + (v124 << 6);
    goto LABEL_114;
  }
  int64_t v126 = v124 + 1;
  if (v124 + 1 >= v152) {
    goto LABEL_139;
  }
  unint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  int64_t v126 = v124 + 2;
  if (v124 + 2 >= v152) {
    goto LABEL_139;
  }
  unint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  int64_t v126 = v124 + 3;
  if (v124 + 3 >= v152) {
    goto LABEL_139;
  }
  unint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  int64_t v126 = v124 + 4;
  if (v124 + 4 >= v152) {
    goto LABEL_139;
  }
  unint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  int64_t v126 = v124 + 5;
  if (v124 + 5 >= v152) {
    goto LABEL_139;
  }
  unint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  int64_t v126 = v124 + 6;
  if (v124 + 6 >= v152) {
    goto LABEL_139;
  }
  unint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  int64_t v126 = v124 + 7;
  if (v124 + 7 >= v152) {
    goto LABEL_139;
  }
  unint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125)
  {
LABEL_133:
    int64_t v124 = v126;
    goto LABEL_134;
  }
  while (1)
  {
    int64_t v124 = v126 + 1;
    if (__OFADD__(v126, 1)) {
      break;
    }
    if (v124 >= v152) {
      goto LABEL_139;
    }
    unint64_t v125 = *(void *)(v151 + 8 * v124);
    ++v126;
    if (v125) {
      goto LABEL_134;
    }
  }
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(char *name, int fd, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  closure #1 in closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(v6, 1000, fd, name, 0x3E8uLL, a3, a4, a5);
  if (v5)
  {
    swift_willThrow();
    __break(1u);
  }
}

void closure #1 in closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(unsigned char *value, int a2, int fd, char *name, size_t size, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  ssize_t v14 = fgetxattr(fd, name, value, size, 0, 0);
  if (v14 != -1)
  {
    if (!value) {
      goto LABEL_100;
    }
    uint64_t v15 = specialized Data.init(bytes:count:)(value, v14);
    uint64_t v95 = v16;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = *a6;
    uint64_t v18 = *a6;
    *a6 = 0x8000000000000000;
    uint64_t v19 = a7;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a7, a8);
    uint64_t v22 = *(void *)(v18 + 16);
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(a7) = v20;
      if (*(void *)(v18 + 24) < v24)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
        uint64_t v25 = v97;
        unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v19, a8);
        if ((a7 & 1) != (v27 & 1)) {
          goto LABEL_105;
        }
        unint64_t v21 = v26;
        if ((a7 & 1) == 0) {
          goto LABEL_60;
        }
        goto LABEL_15;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v25 = v18;
        if ((v20 & 1) == 0)
        {
LABEL_60:
          unint64_t v65 = v21;
          uint64_t v66 = v19;
          uint64_t v67 = a8;
          uint64_t v68 = v15;
          uint64_t v69 = v95;
          goto LABEL_61;
        }
LABEL_15:
        uint64_t v34 = *(void *)(v25 + 56) + 16 * v21;
        outlined consume of Data._Representation(*(void *)v34, *(void *)(v34 + 8));
        *(void *)uint64_t v34 = v15;
        *(void *)(v34 + 8) = v95;
        goto LABEL_62;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
    uint64_t v47 = static _DictionaryStorage.copy(original:)();
    uint64_t v25 = v47;
    if (*(void *)(v18 + 16))
    {
      uint64_t v48 = (void *)(v47 + 64);
      unint64_t v49 = (unint64_t)((1 << *(unsigned char *)(v25 + 32)) + 63) >> 6;
      if (v25 != v18 || (unint64_t)v48 >= v18 + 64 + 8 * v49) {
        memmove(v48, (const void *)(v18 + 64), 8 * v49);
      }
      uint64_t v87 = v18 + 64;
      uint64_t v50 = 0;
      *(void *)(v25 + 16) = *(void *)(v18 + 16);
      uint64_t v51 = 1 << *(unsigned char *)(v18 + 32);
      uint64_t v52 = -1;
      if (v51 < 64) {
        uint64_t v52 = ~(-1 << v51);
      }
      unint64_t v53 = v52 & *(void *)(v18 + 64);
      __src = (void *)((unint64_t)(v51 + 63) >> 6);
      while (1)
      {
        if (v53)
        {
          unint64_t v54 = __clz(__rbit64(v53));
          v53 &= v53 - 1;
          uint64_t v93 = v50;
          unint64_t v55 = v54 | (v50 << 6);
        }
        else
        {
          uint64_t v61 = v50 + 1;
          if (__OFADD__(v50, 1))
          {
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
            goto LABEL_103;
          }
          if (v61 >= (uint64_t)__src) {
            break;
          }
          unint64_t v62 = *(void *)(v87 + 8 * v61);
          uint64_t v63 = v50 + 1;
          if (!v62)
          {
            uint64_t v63 = v50 + 2;
            if (v50 + 2 >= (uint64_t)__src) {
              break;
            }
            unint64_t v62 = *(void *)(v87 + 8 * v63);
            if (!v62)
            {
              uint64_t v63 = v50 + 3;
              if (v50 + 3 >= (uint64_t)__src) {
                break;
              }
              unint64_t v62 = *(void *)(v87 + 8 * v63);
              if (!v62)
              {
                uint64_t v63 = v50 + 4;
                if (v50 + 4 >= (uint64_t)__src) {
                  break;
                }
                unint64_t v62 = *(void *)(v87 + 8 * v63);
                if (!v62)
                {
                  uint64_t v63 = v50 + 5;
                  if (v50 + 5 >= (uint64_t)__src) {
                    break;
                  }
                  unint64_t v62 = *(void *)(v87 + 8 * v63);
                  if (!v62)
                  {
                    uint64_t v63 = v50 + 6;
                    if (v50 + 6 >= (uint64_t)__src) {
                      break;
                    }
                    unint64_t v62 = *(void *)(v87 + 8 * v63);
                    if (!v62)
                    {
                      uint64_t v63 = v50 + 7;
                      if (v50 + 7 >= (uint64_t)__src) {
                        break;
                      }
                      unint64_t v62 = *(void *)(v87 + 8 * v63);
                      if (!v62)
                      {
                        uint64_t v64 = v50 + 8;
                        if (v50 + 8 >= (uint64_t)__src) {
                          break;
                        }
                        unint64_t v62 = *(void *)(v87 + 8 * v64);
                        if (!v62)
                        {
                          while (1)
                          {
                            uint64_t v63 = v64 + 1;
                            if (__OFADD__(v64, 1)) {
                              break;
                            }
                            if (v63 >= (uint64_t)__src) {
                              goto LABEL_59;
                            }
                            unint64_t v62 = *(void *)(v87 + 8 * v63);
                            ++v64;
                            if (v62) {
                              goto LABEL_58;
                            }
                          }
LABEL_103:
                          __break(1u);
LABEL_104:
                          __break(1u);
LABEL_105:
                          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                          __break(1u);
                          JUMPOUT(0x181B58564);
                        }
                        uint64_t v63 = v50 + 8;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_58:
          unint64_t v53 = (v62 - 1) & v62;
          uint64_t v93 = v63;
          unint64_t v55 = __clz(__rbit64(v62)) + (v63 << 6);
        }
        uint64_t v56 = 16 * v55;
        char v57 = (uint64_t *)(*(void *)(v18 + 48) + v56);
        uint64_t v59 = *v57;
        uint64_t v58 = v57[1];
        long long v91 = *(_OWORD *)(*(void *)(v18 + 56) + v56);
        BOOL v60 = (void *)(*(void *)(v25 + 48) + v56);
        *BOOL v60 = v59;
        v60[1] = v58;
        *(_OWORD *)(*(void *)(v25 + 56) + v56) = v91;
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v91, *((unint64_t *)&v91 + 1));
        uint64_t v50 = v93;
      }
    }
LABEL_59:
    swift_bridgeObjectRelease();
    if ((a7 & 1) == 0) {
      goto LABEL_60;
    }
    goto LABEL_15;
  }
  if (MEMORY[0x185301870]() != 34) {
    return;
  }
  ssize_t v28 = fgetxattr(fd, name, 0, 0, 0, 0);
  unint64_t v29 = malloc(v28);
  if (!v29) {
    goto LABEL_101;
  }
  ssize_t v30 = v29;
  if (fgetxattr(fd, name, v29, v28, 0, 0) != v28)
  {
    free(v30);
    return;
  }
  if (v28)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v31 = (void *)__DataStorage.init(bytes:length:copy:deallocator:offset:)((unint64_t)v30, v28, 0, (void (*)(unint64_t, uint64_t))closure #2 in Data.Deallocator._deallocator.getter, 0, 0);
    uint64_t v96 = specialized Data._Representation.init(_:count:)(v31, v28);
    unint64_t v33 = v32;
  }
  else
  {
    swift_bridgeObjectRetain();
    free(v30);
    uint64_t v96 = 0;
    unint64_t v33 = 0xC000000000000000;
  }
  char v35 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v98 = *a6;
  uint64_t v36 = *a6;
  *a6 = 0x8000000000000000;
  uint64_t v37 = a7;
  unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(a7, a8);
  uint64_t v40 = *(void *)(v36 + 16);
  BOOL v41 = (v38 & 1) == 0;
  uint64_t v42 = v40 + v41;
  if (__OFADD__(v40, v41))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(a7) = v38;
    if (*(void *)(v36 + 24) < v42)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, v35);
      uint64_t v25 = v98;
      unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v37, a8);
      if ((a7 & 1) != (v44 & 1)) {
        goto LABEL_105;
      }
      unint64_t v39 = v43;
      uint64_t v45 = v96;
      if ((a7 & 1) == 0) {
        goto LABEL_98;
      }
      goto LABEL_25;
    }
    if (v35)
    {
      uint64_t v25 = v36;
      uint64_t v45 = v96;
      if ((v38 & 1) == 0) {
        goto LABEL_98;
      }
      goto LABEL_25;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v70 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v70;
  if (!*(void *)(v36 + 16)) {
    goto LABEL_97;
  }
  unint64_t v71 = (char *)(v70 + 64);
  __srca = (char *)(v36 + 64);
  unint64_t v72 = (unint64_t)((1 << *(unsigned char *)(v25 + 32)) + 63) >> 6;
  if (v25 != v36 || v71 >= &__srca[8 * v72]) {
    memmove(v71, __srca, 8 * v72);
  }
  int64_t v92 = 0;
  *(void *)(v25 + 16) = *(void *)(v36 + 16);
  uint64_t v73 = 1 << *(unsigned char *)(v36 + 32);
  uint64_t v74 = -1;
  if (v73 < 64) {
    uint64_t v74 = ~(-1 << v73);
  }
  unint64_t v75 = v74 & *(void *)(v36 + 64);
  int64_t v88 = (unint64_t)(v73 + 63) >> 6;
  while (1)
  {
    if (v75)
    {
      unint64_t v76 = __clz(__rbit64(v75));
      v75 &= v75 - 1;
      unint64_t v77 = v76 | (v92 << 6);
      goto LABEL_73;
    }
    int64_t v83 = v92 + 1;
    if (__OFADD__(v92, 1)) {
      goto LABEL_102;
    }
    if (v83 >= v88) {
      goto LABEL_97;
    }
    unint64_t v84 = *(void *)&__srca[8 * v83];
    int64_t v85 = v92 + 1;
    if (!v84)
    {
      int64_t v85 = v92 + 2;
      if (v92 + 2 >= v88) {
        goto LABEL_97;
      }
      unint64_t v84 = *(void *)&__srca[8 * v85];
      if (!v84)
      {
        int64_t v85 = v92 + 3;
        if (v92 + 3 >= v88) {
          goto LABEL_97;
        }
        unint64_t v84 = *(void *)&__srca[8 * v85];
        if (!v84)
        {
          int64_t v85 = v92 + 4;
          if (v92 + 4 >= v88) {
            goto LABEL_97;
          }
          unint64_t v84 = *(void *)&__srca[8 * v85];
          if (!v84)
          {
            int64_t v85 = v92 + 5;
            if (v92 + 5 >= v88) {
              goto LABEL_97;
            }
            unint64_t v84 = *(void *)&__srca[8 * v85];
            if (!v84)
            {
              int64_t v85 = v92 + 6;
              if (v92 + 6 >= v88) {
                goto LABEL_97;
              }
              unint64_t v84 = *(void *)&__srca[8 * v85];
              if (!v84)
              {
                int64_t v85 = v92 + 7;
                if (v92 + 7 >= v88) {
                  goto LABEL_97;
                }
                unint64_t v84 = *(void *)&__srca[8 * v85];
                if (!v84) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_96:
    unint64_t v75 = (v84 - 1) & v84;
    int64_t v92 = v85;
    unint64_t v77 = __clz(__rbit64(v84)) + (v85 << 6);
LABEL_73:
    uint64_t v78 = 16 * v77;
    uint64_t v79 = (uint64_t *)(*(void *)(v36 + 48) + v78);
    uint64_t v81 = *v79;
    uint64_t v80 = v79[1];
    long long v94 = *(_OWORD *)(*(void *)(v36 + 56) + v78);
    uint64_t v82 = (void *)(*(void *)(v25 + 48) + v78);
    *uint64_t v82 = v81;
    v82[1] = v80;
    *(_OWORD *)(*(void *)(v25 + 56) + v78) = v94;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v94, *((unint64_t *)&v94 + 1));
  }
  int64_t v86 = v92 + 8;
  if (v92 + 8 >= v88) {
    goto LABEL_97;
  }
  unint64_t v84 = *(void *)&__srca[8 * v86];
  if (v84)
  {
    int64_t v85 = v92 + 8;
    goto LABEL_96;
  }
  while (1)
  {
    int64_t v85 = v86 + 1;
    if (__OFADD__(v86, 1)) {
      goto LABEL_104;
    }
    if (v85 >= v88) {
      break;
    }
    unint64_t v84 = *(void *)&__srca[8 * v85];
    ++v86;
    if (v84) {
      goto LABEL_96;
    }
  }
LABEL_97:
  swift_bridgeObjectRelease();
  uint64_t v45 = v96;
  if (a7)
  {
LABEL_25:
    uint64_t v46 = *(void *)(v25 + 56) + 16 * v39;
    outlined consume of Data._Representation(*(void *)v46, *(void *)(v46 + 8));
    *(void *)uint64_t v46 = v45;
    *(void *)(v46 + 8) = v33;
    goto LABEL_62;
  }
LABEL_98:
  unint64_t v65 = v39;
  uint64_t v66 = v37;
  uint64_t v67 = a8;
  uint64_t v68 = v45;
  uint64_t v69 = v33;
LABEL_61:
  specialized _NativeDictionary._insert(at:key:value:)(v65, v66, v67, v68, v69, (void *)v25);
  swift_bridgeObjectRetain();
LABEL_62:
  *a6 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for NSProgress()
{
  unint64_t result = lazy cache variable for type metadata for NSProgress;
  if (!lazy cache variable for type metadata for NSProgress)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSProgress);
  }
  return result;
}

void partial apply for closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(char *a1)
{
  closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(a1, *(_DWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

void *NSFileHandle.read(upToCount:)(uint64_t a1)
{
  v14[1] = *(id *)MEMORY[0x1E4F143B8];
  v14[0] = 0;
  id v2 = objc_msgSend(v1, sel_readDataUpToLength_error_, a1, v14);
  int v3 = v14[0];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = v3;
    int v3 = specialized Data.init(referencing:)(v4);
    unint64_t v7 = v6;

    switch(v7 >> 62)
    {
      case 1uLL:
        LODWORD(v8) = HIDWORD(v3) - v3;
        if (!__OFSUB__(HIDWORD(v3), v3))
        {
          uint64_t v8 = (int)v8;
          goto LABEL_9;
        }
        __break(1u);
        goto LABEL_16;
      case 2uLL:
        uint64_t v10 = v3[2];
        uint64_t v9 = v3[3];
        BOOL v11 = __OFSUB__(v9, v10);
        uint64_t v8 = v9 - v10;
        if (!v11) {
          goto LABEL_9;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v8 = BYTE6(v7);
LABEL_9:
        if (v8 <= 0)
        {
LABEL_10:
          outlined consume of Data._Representation((uint64_t)v3, v7);
          return 0;
        }
        return v3;
    }
  }
  if (v14[0])
  {
    v14[0];
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
LABEL_17:
    }
      swift_once();
    id v12 = (id)_nilObjCError;
  }
  swift_willThrow();
  return v3;
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileHandle.offset()()
{
  return (Swift::UInt64)NSFileHandle.offset()((SEL *)&selRef_getOffset_error_);
}

uint64_t specialized NSFileHandle.write<A>(contentsOf:)()
{
  int64_t v1 = (int64_t)v0;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (_NSFileHandleIsClosed((uint64_t)v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)&long long v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *((void *)&v75 + 1) = v3;
    uint64_t v4 = MEMORY[0x1E4FBB1A0];
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = v4;
    *(void *)(inited + 72) = 0xD00000000000002ELL;
    *(void *)(inited + 80) = 0x80000001823AB290;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
    int64_t v1 = (int64_t)&v75;
    outlined init with copy of (AnyHashable, Any)(inited + 32, (uint64_t)&v75);
    swift_retain();
    uint64_t v6 = v5;
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v75);
    if (v8) {
      goto LABEL_83;
    }
    uint64_t v65 = v5 + 64;
    *(void *)(v5 + 64 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
    uint64_t v9 = *(void *)(v5 + 48) + 40 * v7;
    long long v10 = v75;
    long long v11 = v76;
    *(void *)(v9 + 32) = *(void *)&v77[0];
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    outlined init with take of Any((_OWORD *)((char *)v77 + 8), (_OWORD *)(*(void *)(v5 + 56) + 32 * v7));
    uint64_t v12 = *(void *)(v5 + 16);
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (!v13)
    {
      *(void *)(v5 + 16) = v14;
      swift_release();
      swift_bridgeObjectRelease();
      if (*(void *)(v5 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v6 = MEMORY[0x1E4FBC868];
      }
      uint64_t v41 = -1;
      uint64_t v42 = -1 << *(unsigned char *)(v5 + 32);
      if (-v42 < 64) {
        uint64_t v41 = ~(-1 << -(char)v42);
      }
      unint64_t v43 = v41 & *(void *)(v5 + 64);
      int64_t v64 = (unint64_t)(63 - v42) >> 6;
      swift_retain();
      int64_t v44 = 0;
      while (1)
      {
        if (v43)
        {
          uint64_t v48 = (v43 - 1) & v43;
          unint64_t v49 = __clz(__rbit64(v43)) | (v44 << 6);
          int64_t v1 = v44;
        }
        else
        {
          int64_t v50 = v44 + 1;
          if (__OFADD__(v44, 1)) {
            goto LABEL_81;
          }
          if (v50 >= v64)
          {
LABEL_67:
            outlined consume of Set<A1>.Iterator._Variant<A><A1>();
            goto LABEL_68;
          }
          unint64_t v51 = *(void *)(v65 + 8 * v50);
          int64_t v1 = v44 + 1;
          if (!v51)
          {
            int64_t v1 = v44 + 2;
            if (v44 + 2 >= v64) {
              goto LABEL_67;
            }
            unint64_t v51 = *(void *)(v65 + 8 * v1);
            if (!v51)
            {
              int64_t v1 = v44 + 3;
              if (v44 + 3 >= v64) {
                goto LABEL_67;
              }
              unint64_t v51 = *(void *)(v65 + 8 * v1);
              if (!v51)
              {
                int64_t v1 = v44 + 4;
                if (v44 + 4 >= v64) {
                  goto LABEL_67;
                }
                unint64_t v51 = *(void *)(v65 + 8 * v1);
                if (!v51)
                {
                  int64_t v1 = v44 + 5;
                  if (v44 + 5 >= v64) {
                    goto LABEL_67;
                  }
                  unint64_t v51 = *(void *)(v65 + 8 * v1);
                  if (!v51)
                  {
                    int64_t v1 = v44 + 6;
                    if (v44 + 6 >= v64) {
                      goto LABEL_67;
                    }
                    unint64_t v51 = *(void *)(v65 + 8 * v1);
                    if (!v51)
                    {
                      int64_t v52 = v44 + 7;
                      if (v44 + 7 >= v64) {
                        goto LABEL_67;
                      }
                      unint64_t v51 = *(void *)(v65 + 8 * v52);
                      if (!v51)
                      {
                        while (1)
                        {
                          int64_t v1 = v52 + 1;
                          if (__OFADD__(v52, 1)) {
                            break;
                          }
                          if (v1 >= v64) {
                            goto LABEL_67;
                          }
                          unint64_t v51 = *(void *)(v65 + 8 * v1);
                          ++v52;
                          if (v51) {
                            goto LABEL_60;
                          }
                        }
                        __break(1u);
LABEL_88:
                        swift_once();
LABEL_76:
                        id v63 = (id)_nilObjCError;
                        goto LABEL_77;
                      }
                      int64_t v1 = v44 + 7;
                    }
                  }
                }
              }
            }
          }
LABEL_60:
          uint64_t v48 = (v51 - 1) & v51;
          unint64_t v49 = __clz(__rbit64(v51)) + (v1 << 6);
        }
        outlined init with copy of AnyHashable(*(void *)(v5 + 48) + 40 * v49, (uint64_t)&v75);
        outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v49, (uint64_t)v77 + 8);
        v73[0] = v77[0];
        v73[1] = v77[1];
        uint64_t v74 = v78;
        v72[0] = v75;
        v72[1] = v76;
        outlined init with copy of AnyHashable((uint64_t)v72, (uint64_t)v67);
        if (!swift_dynamicCast())
        {
          outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v72);
          swift_bridgeObjectRelease();
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_release();
LABEL_68:
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v59 = objc_allocWithZone((Class)NSError);
          uint64_t v60 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          objc_msgSend(v59, sel_initWithDomain_code_userInfo_, v60, 512, _NativeDictionary.bridged()());
          swift_release();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          return swift_willThrow();
        }
        outlined init with copy of Any((uint64_t)v73 + 8, (uint64_t)v67);
        outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v72);
        outlined init with take of Any(v67, v68);
        long long v69 = v66;
        outlined init with take of Any(v68, v70);
        long long v53 = v69;
        outlined init with take of Any(v70, v71);
        outlined init with take of Any(v71, &v69);
        unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v53, *((uint64_t *)&v53 + 1));
        unint64_t v55 = v54;
        if (v56)
        {
          uint64_t v45 = v5;
          uint64_t v46 = (_OWORD *)(*(void *)(v6 + 48) + 16 * v54);
          swift_bridgeObjectRelease();
          *uint64_t v46 = v53;
          uint64_t v5 = v45;
          uint64_t v47 = (_OWORD *)(*(void *)(v6 + 56) + 32 * v55);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
          outlined init with take of Any(&v69, v47);
        }
        else
        {
          if (*(void *)(v6 + 16) >= *(void *)(v6 + 24))
          {
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            break;
          }
          *(void *)(v6 + 64 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
          *(_OWORD *)(*(void *)(v6 + 48) + 16 * v54) = v53;
          outlined init with take of Any(&v69, (_OWORD *)(*(void *)(v6 + 56) + 32 * v54));
          uint64_t v57 = *(void *)(v6 + 16);
          BOOL v13 = __OFADD__(v57, 1);
          uint64_t v58 = v57 + 1;
          if (v13) {
            goto LABEL_80;
          }
          *(void *)(v6 + 16) = v58;
        }
        int64_t v44 = v1;
        unint64_t v43 = v48;
      }
    }
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v6);
LABEL_74:
    uint64_t v62 = *(void *)(v6 + 16);
    *(void *)&long long v75 = v6 + 32;
    *((void *)&v75 + 1) = v62;
    closure #3 in NSFileHandle.write<A>(contentsOf:)((ssize_t)&v75, (uint64_t *)v72, (id)v1);
    return swift_bridgeObjectRelease();
  }
  id CanPerformWritingInSwiftOverlay = (id)_NSFileHandleCanPerformWritingInSwiftOverlay(v0);
  if (CanPerformWritingInSwiftOverlay)
  {
    id CanPerformWritingInSwiftOverlay = objc_msgSend(v0, sel_fileDescriptor);
    if ((CanPerformWritingInSwiftOverlay & 0x80000000) == 0)
    {
      type metadata accessor for DispatchData();
      lazy protocol witness table accessor for type DispatchData and conformance DispatchData();
      *(void *)&v72[0] = dispatch thunk of Collection.count.getter();
      uint64_t v16 = MEMORY[0x1E4FBC860];
      *(void *)&long long v75 = MEMORY[0x1E4FBC860];
      MEMORY[0x1F4188790](*(void *)&v72[0]);
      DispatchData.enumerateBytes(_:)();
      uint64_t v17 = v75;
      int64_t v18 = *(void *)(v75 + 16);
      if (v18)
      {
        *(void *)&long long v75 = v16;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
        uint64_t v6 = v16;
        unint64_t v19 = *(void *)(v16 + 16);
        uint64_t v20 = 16 * v19;
        unint64_t v21 = (uint64_t *)(v17 + 40);
        do
        {
          uint64_t v22 = *(v21 - 1);
          if (v22) {
            uint64_t v23 = *v21;
          }
          else {
            uint64_t v23 = 0;
          }
          *(void *)&long long v75 = v6;
          unint64_t v24 = *(void *)(v6 + 24);
          unint64_t v25 = v19 + 1;
          if (v19 >= v24 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v19 + 1, 1);
            uint64_t v6 = v75;
          }
          v21 += 3;
          *(void *)(v6 + 16) = v25;
          uint64_t v26 = v6 + v20;
          *(void *)(v26 + 32) = v22;
          *(void *)(v26 + 40) = v23;
          v20 += 16;
          unint64_t v19 = v25;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = MEMORY[0x1E4FBC860];
      }
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_74;
      }
      goto LABEL_86;
    }
  }
  *(void *)&long long v75 = MEMORY[0x1E4FBC860];
  MEMORY[0x1F4188790](CanPerformWritingInSwiftOverlay);
  DispatchData.enumerateBytes(_:)();
  uint64_t v27 = *(void *)(v75 + 16);
  if (v27)
  {
    for (unint64_t i = (uint64_t *)(v75 + 40); ; i += 3)
    {
      uint64_t v35 = *(i - 1);
      if (v35)
      {
        uint64_t v6 = *i;
        if (*i)
        {
          type metadata accessor for __DataStorage();
          uint64_t v36 = swift_allocObject();
          if (v6 > 0x3FFFFFFFFFFFFFFELL) {
            goto LABEL_82;
          }
          *(void *)(v36 + 32) = v6;
          *(void *)(v36 + 40) = 0;
          *(unsigned char *)(v36 + 64) = 0;
          *(void *)(v36 + 16) = v35;
          *(void *)(v36 + 24) = v6;
          *(void *)(v36 + 48) = destructiveProjectEnumData for PredicateCodableError;
          *(void *)(v36 + 56) = 0;
          uint64_t v37 = specialized Data._Representation.init(_:count:)((void *)v36, v6);
          uint64_t v29 = v37;
          unint64_t v30 = v38;
          switch(v38 >> 62)
          {
            case 1uLL:
              uint64_t v6 = v37 >> 32;
              if (v37 >> 32 < (int)v37) {
                goto LABEL_85;
              }
              swift_retain();
              unint64_t v32 = __DataStorage.bridgedReference(_:)((int)v29, v29 >> 32);
              outlined consume of Data._Representation(v29, v30);
              break;
            case 2uLL:
              uint64_t v40 = *(void *)(v37 + 16);
              uint64_t v39 = *(void *)(v37 + 24);
              swift_retain();
              swift_retain();
              unint64_t v32 = __DataStorage.bridgedReference(_:)(v40, v39);
              swift_release();
              swift_release();
              break;
            case 3uLL:
              goto LABEL_20;
            default:
              *(void *)&long long v75 = v37;
              WORD4(v75) = v38;
              BYTE10(v75) = BYTE2(v38);
              BYTE11(v75) = BYTE3(v38);
              BYTE12(v75) = BYTE4(v38);
              BYTE13(v75) = BYTE5(v38);
              uint64_t v31 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v75, BYTE6(v38));
              goto LABEL_21;
          }
        }
        else
        {
          uint64_t v29 = 0;
          unint64_t v30 = 0xC000000000000000;
LABEL_20:
          uint64_t v31 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
LABEL_21:
          unint64_t v32 = v31;
        }
        outlined consume of Data._Representation(v29, v30);
        *(void *)&long long v75 = 0;
        unsigned int v33 = objc_msgSend((id)v1, sel_writeData_error_, v32, &v75);

        if (!v33)
        {
          if (!(void)v75)
          {
            if (one-time initialization token for _nilObjCError != -1) {
              goto LABEL_88;
            }
            goto LABEL_76;
          }
          (id)v75;
LABEL_77:
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }
        id v34 = (id)v75;
      }
      if (!--v27) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return swift_bridgeObjectRelease();
}

unsigned char *closure #1 in NSFileHandle.write<A>(contentsOf:)(unsigned char *result, unsigned char *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    unint64_t v4 = (unint64_t)result;
    uint64_t v5 = a2 - result;
    if (a2 == result)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0xC000000000000000;
LABEL_6:
      long long v11 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
LABEL_7:
      uint64_t v12 = v11;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      char v8 = (void *)__DataStorage.init(bytes:length:copy:deallocator:offset:)(v4, v5, 0, (void (*)(unint64_t, uint64_t))destructiveProjectEnumData for PredicateCodableError, 0, 0);
      uint64_t v9 = specialized Data._Representation.init(_:count:)(v8, v5);
      uint64_t v6 = v9;
      unint64_t v7 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          if (v9 >> 32 < (int)v9) {
            __break(1u);
          }
          swift_retain();
          uint64_t v12 = __DataStorage.bridgedReference(_:)((int)v6, v6 >> 32);
          outlined consume of Data._Representation(v6, v7);
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v9 + 16);
          uint64_t v15 = *(void *)(v9 + 24);
          swift_retain();
          swift_retain();
          uint64_t v12 = __DataStorage.bridgedReference(_:)(v16, v15);
          swift_release();
          swift_release();
          break;
        case 3uLL:
          goto LABEL_6;
        default:
          id v17 = (id)v9;
          __int16 v18 = v10;
          char v19 = BYTE2(v10);
          char v20 = BYTE3(v10);
          char v21 = BYTE4(v10);
          char v22 = BYTE5(v10);
          long long v11 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v17, BYTE6(v10));
          goto LABEL_7;
      }
    }
    outlined consume of Data._Representation(v6, v7);
    id v17 = 0;
    unsigned int v13 = objc_msgSend(a3, sel_writeData_error_, v12, &v17);

    if (v13)
    {
      return v17;
    }
    else
    {
      if (v17)
      {
        v17;
      }
      else
      {
        if (one-time initialization token for _nilObjCError != -1) {
          swift_once();
        }
        id v14 = (id)_nilObjCError;
      }
      return (unsigned char *)swift_willThrow();
    }
  }
  return result;
}

ssize_t closure #3 in NSFileHandle.write<A>(contentsOf:)(ssize_t result, uint64_t *a2, id a3)
{
  uint64_t v3 = *(void *)(result + 8);
  if (v3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_32;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (*a2 < 1) {
    return result;
  }
  uint64_t v6 = *(const iovec **)result;
  do
  {
    while (1)
    {
      unint64_t result = writev((int)objc_msgSend(a3, sel_fileDescriptor), v6, v3);
      if (result < 0) {
        break;
      }
      uint64_t v7 = *a2 - result;
      if (__OFSUB__(*a2, result)) {
        goto LABEL_34;
      }
      *a2 = v7;
      if (v7 < 1) {
        return result;
      }
      if ((v3 & 0x80000000) != 0) {
        goto LABEL_35;
      }
      unint64_t v8 = 0;
      if (!v3) {
        goto LABEL_23;
      }
      ssize_t v9 = 0;
      unint64_t v10 = v6;
      while (1)
      {
        if (v3 == v8)
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        if (!v6) {
          goto LABEL_39;
        }
        size_t iov_len = v10->iov_len;
        BOOL v12 = __OFADD__(v9, iov_len);
        ssize_t v13 = v9 + iov_len;
        if (v12) {
          goto LABEL_31;
        }
        if (result < v13) {
          break;
        }
        ++v8;
        ++v10;
        ssize_t v9 = v13;
        if (v3 == v8)
        {
          unint64_t v8 = v3;
          goto LABEL_22;
        }
      }
      if (!v10->iov_base) {
        goto LABEL_41;
      }
      BOOL v12 = __OFSUB__(result, v9);
      ssize_t v14 = result - v9;
      if (v12) {
        goto LABEL_38;
      }
      v10->iov_base = (char *)v10->iov_base + v14;
LABEL_22:
      if (v8 >> 31) {
        goto LABEL_36;
      }
LABEL_23:
      BOOL v12 = __OFSUB__(v3, v8);
      LODWORD(v3) = v3 - v8;
      if (v12) {
        goto LABEL_37;
      }
      uint64_t v15 = &v6[v8];
      if (v6) {
        uint64_t v6 = v15;
      }
      else {
        uint64_t v6 = 0;
      }
    }
  }
  while (MEMORY[0x185301870]() == 35);
  int v16 = MEMORY[0x185301870]();
  if (!_NSErrorWithFilePathAndErrno(v16, 0, 0))
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    JUMPOUT(0x181B599D8);
  }
  return swift_willThrow();
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x185303130);
}

unsigned char *partial apply for closure #1 in NSFileHandle.write<A>(contentsOf:)(unsigned char *a1, unsigned char *a2)
{
  return closure #1 in NSFileHandle.write<A>(contentsOf:)(a1, a2, *(void **)(v2 + 16));
}

ssize_t partial apply for closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:)(ssize_t a1, uint64_t a2)
{
  return closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:)(a1, a2, *(_DWORD *)(v2 + 16));
}

uint64_t outlined init with copy of (AnyHashable, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: AnyHashable, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: AnyHashable, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in DispatchData.regions.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in DispatchData.regions.getter(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

unint64_t lazy protocol witness table accessor for type DispatchData and conformance DispatchData()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchData and conformance DispatchData;
  if (!lazy protocol witness table cache variable for type DispatchData and conformance DispatchData)
  {
    type metadata accessor for DispatchData();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10Foundation13JSONReferenceCG_So8NSStringC3key_AH5valuets5NeverOTg5061_s10Foundation10JSONWriterV15serializeObject_5depthySDySSAA13e11CG_SitKFSo8F31C3key_AG5valuetSSAK_AgLt_tXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v3 = a1;
    uint64_t v28 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v28;
    uint64_t v5 = specialized Dictionary.startIndex.getter(v3);
    uint64_t v6 = 0;
    uint64_t v7 = v3 + 64;
    uint64_t v23 = v3 + 80;
    int64_t v24 = v1;
    int v25 = v4;
    uint64_t v26 = v3 + 64;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v3 + 32))
    {
      unint64_t v10 = (unint64_t)v5 >> 6;
      if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
        goto LABEL_23;
      }
      if (*(_DWORD *)(v3 + 36) != v4) {
        goto LABEL_24;
      }
      uint64_t v27 = v6;
      uint64_t v11 = *(void *)(*(void *)(v3 + 56) + 8 * v5);
      uint64_t v12 = String._bridgeToObjectiveCImpl()();
      uint64_t v13 = v3;
      unint64_t v15 = *(void *)(v28 + 16);
      unint64_t v14 = *(void *)(v28 + 24);
      swift_retain();
      if (v15 >= v14 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      }
      *(void *)(v28 + 16) = v15 + 1;
      uint64_t v16 = v28 + 16 * v15;
      *(void *)(v16 + 32) = v12;
      *(void *)(v16 + 40) = v11;
      int64_t v8 = 1 << *(unsigned char *)(v13 + 32);
      if (v5 >= v8) {
        goto LABEL_25;
      }
      uint64_t v7 = v26;
      uint64_t v17 = *(void *)(v26 + 8 * v10);
      if ((v17 & (1 << v5)) == 0) {
        goto LABEL_26;
      }
      uint64_t v3 = v13;
      int v4 = v25;
      if (*(_DWORD *)(v13 + 36) != v25) {
        goto LABEL_27;
      }
      unint64_t v18 = v17 & (-2 << (v5 & 0x3F));
      if (v18)
      {
        int64_t v8 = __clz(__rbit64(v18)) | v5 & 0xFFFFFFFFFFFFFFC0;
        int64_t v9 = v24;
      }
      else
      {
        unint64_t v19 = v10 + 1;
        unint64_t v20 = (unint64_t)(v8 + 63) >> 6;
        int64_t v9 = v24;
        if (v10 + 1 < v20)
        {
          unint64_t v21 = *(void *)(v26 + 8 * v19);
          if (v21)
          {
LABEL_20:
            int64_t v8 = __clz(__rbit64(v21)) + (v19 << 6);
          }
          else
          {
            while (v20 - 2 != v10)
            {
              unint64_t v21 = *(void *)(v23 + 8 * v10++);
              if (v21)
              {
                unint64_t v19 = v10 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      uint64_t v6 = v27 + 1;
      uint64_t v5 = v8;
      if (v27 + 1 == v9) {
        return v2;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    JUMPOUT(0x181B59F28);
  }
  return v2;
}

uint64_t specialized String.withUTF8<A>(_:)(uint64_t (*a1)(void *, uint64_t))
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = v10;
    return a1(v5, v6);
  }
  uint64_t v3 = static String._copying(_:)();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  *int64_t v1 = v3;
  v1[1] = v8;
  unint64_t v4 = v8;
  if ((v8 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    uint64_t v5 = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v5 = (void *)_StringObject.sharedUTF8.getter();
  }
  return a1(v5, v6);
}

unint64_t lazy protocol witness table accessor for type JSONError and conformance JSONError()
{
  unint64_t result = lazy protocol witness table cache variable for type JSONError and conformance JSONError;
  if (!lazy protocol witness table cache variable for type JSONError and conformance JSONError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONError and conformance JSONError);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t *__src, unint64_t *a2, unint64_t a3, unint64_t *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = ((char *)a2 - (char *)__src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v27 = __src;
  uint64_t v26 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[3 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      uint64_t v16 = &v4[3 * v11];
      int v25 = v16;
      uint64_t v27 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v17 = a3 - 24;
        unint64_t v18 = v6;
        while (1)
        {
          unint64_t v19 = (unint64_t *)(v17 + 24);
          unint64_t v20 = *(v18 - 3);
          unint64_t v21 = *(v18 - 2);
          v18 -= 3;
          if (specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(v20, v21, *(v16 - 3), *(v16 - 2)))
          {
            if (v19 != v6 || v17 >= (unint64_t)v6)
            {
              long long v22 = *(_OWORD *)v18;
              *(void *)(v17 + 16) = v18[2];
              *(_OWORD *)unint64_t v17 = v22;
            }
            uint64_t v27 = v18;
            if (v18 <= v7) {
              goto LABEL_38;
            }
          }
          else
          {
            int v25 = v16 - 3;
            if (v19 < v16 || v17 >= (unint64_t)v16 || v19 != v16)
            {
              long long v23 = *(_OWORD *)(v16 - 3);
              *(void *)(v17 + 16) = *(v16 - 1);
              *(_OWORD *)unint64_t v17 = v23;
            }
            unint64_t v18 = v6;
            v16 -= 3;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }
          v17 -= 24;
          uint64_t v6 = v18;
          if (v16 <= v4) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[3 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[3 * v9];
    int v25 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if (specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*v4, v4[1], *v6, v6[1]))
        {
          uint64_t v13 = v6 + 3;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
          {
            long long v14 = *(_OWORD *)v6;
            uint64_t v7[2] = v6[2];
            *(_OWORD *)uint64_t v7 = v14;
          }
        }
        else
        {
          if (v7 != v4)
          {
            long long v15 = *(_OWORD *)v4;
            uint64_t v7[2] = v4[2];
            *(_OWORD *)uint64_t v7 = v15;
          }
          v4 += 3;
          uint64_t v26 = v4;
          uint64_t v13 = v6;
        }
        v7 += 3;
        if (v4 >= v12) {
          break;
        }
        uint64_t v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      uint64_t v27 = v7;
    }
LABEL_38:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **__dst)
{
  unint64_t v4 = __dst;
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 4;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 4;
  unint64_t v51 = __src;
  int64_t v50 = __dst;
  if (v9 >= v11 >> 4)
  {
    if (v10 >= -15)
    {
      if (__dst != a2 || &a2[2 * v12] <= __dst) {
        memmove(__dst, a2, 16 * v12);
      }
      int v25 = &v4[2 * v12];
      unint64_t v49 = v25;
      unint64_t v51 = v5;
      if (v6 < v5 && v10 >= 16)
      {
        uint64_t v39 = v4;
        uint64_t v26 = (id *)(a3 - 16);
        uint64_t v27 = v5;
        int64_t v44 = v6;
        while (1)
        {
          uint64_t v45 = v5;
          unint64_t v43 = (unint64_t)v25;
          uint64_t v28 = v25 - 2;
          uint64_t v29 = *(v27 - 2);
          v27 -= 2;
          id v30 = *(v25 - 2);
          swift_retain();
          id v40 = v29;
          swift_retain();
          id v31 = objc_msgSend(v30, sel_length);
          if (one-time initialization token for cache != -1) {
            swift_once();
          }
          uint64_t v32 = static LocaleCache.cache + 16;
          unint64_t v19 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
          swift_retain_n();
          os_unfair_lock_lock(v19);
          closure #1 in LocaleCache.system.getter(v32, &v47);
          if (v46) {
            goto LABEL_51;
          }
          unsigned int v33 = v26 + 2;
          os_unfair_lock_unlock(v19);
          swift_release_n();
          uint64_t v34 = v48;
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v36 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 488))(ObjectType, v34);
          id v37 = objc_msgSend(v30, sel_compare_options_range_locale_, v40, 577, 0, v31, v36);
          swift_release();

          swift_release();
          swift_unknownObjectRelease();
          if (v37 == (id)-1)
          {
            int v25 = (void **)v43;
            if (v33 != v45 || v26 >= v45) {
              *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
            }
            unint64_t v51 = v27;
          }
          else
          {
            unint64_t v49 = v28;
            uint64_t v27 = v45;
            if ((unint64_t)v33 < v43 || (unint64_t)v26 >= v43 || v33 != (id *)v43) {
              *(_OWORD *)uint64_t v26 = *(_OWORD *)v28;
            }
            int v25 = v28;
          }
          if (v27 > v44)
          {
            v26 -= 2;
            uint64_t v5 = v27;
            if (v25 > v39) {
              continue;
            }
          }
          break;
        }
      }
LABEL_50:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v51, (const void **)&v50, &v49);
      return 1;
    }
  }
  else if (v7 >= -15)
  {
    if (__dst != __src || &__src[2 * v9] <= __dst) {
      memmove(__dst, __src, 16 * v9);
    }
    uint64_t v41 = &v4[2 * v9];
    unint64_t v49 = v41;
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      while (1)
      {
        uint64_t v13 = *v4;
        long long v14 = v4;
        id v15 = *v5;
        swift_retain();
        id v16 = v13;
        swift_retain();
        id v17 = objc_msgSend(v15, sel_length);
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        uint64_t v18 = static LocaleCache.cache + 16;
        unint64_t v19 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
        swift_retain_n();
        os_unfair_lock_lock(v19);
        closure #1 in LocaleCache.system.getter(v18, &v47);
        if (v46) {
          break;
        }
        os_unfair_lock_unlock(v19);
        swift_release_n();
        uint64_t v20 = v48;
        uint64_t v21 = swift_getObjectType();
        long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 488))(v21, v20);
        id v23 = objc_msgSend(v15, sel_compare_options_range_locale_, v16, 577, 0, v17, v22);
        swift_release();

        swift_release();
        swift_unknownObjectRelease();
        if (v23 == (id)-1)
        {
          int64_t v24 = v5 + 2;
          unint64_t v4 = v14;
          if (v6 < v5 || v6 >= v24 || v6 != v5) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
          }
        }
        else
        {
          int64_t v24 = v5;
          if (v6 != v14) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v14;
          }
          unint64_t v4 = v14 + 2;
          int64_t v50 = v14 + 2;
        }
        v6 += 2;
        if (v4 < v41)
        {
          uint64_t v5 = v24;
          if ((unint64_t)v24 < a3) {
            continue;
          }
        }
        unint64_t v51 = v6;
        goto LABEL_50;
      }
LABEL_51:
      os_unfair_lock_unlock(v19);
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_50;
  }
LABEL_52:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Locale.forceTemperatureUnit.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 456))(ObjectType, v1);
}

uint64_t Locale.forceMeasurementSystem.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 448))(ObjectType, v1);
}

BOOL static Locale.IdentifierType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Locale.IdentifierType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Locale.IdentifierType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double Locale.init(languageComponents:)@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = (void *)a1[3];
  uint64_t v5 = a1[5];
  uint64_t v19 = *a1;
  uint64_t v20 = a1[4];
  uint64_t v6 = a1[6];
  int64_t v7 = (void *)a1[7];
  uint64_t v8 = a1[9];
  uint64_t v21 = a1[8];
  uint64_t v9 = a1[10];
  uint64_t v10 = (void *)a1[11];
  *(void *)&long long v23 = 0;
  *((void *)&v23 + 1) = 0xE000000000000000;
  if (v2)
  {
    v11._uint64_t countAndFlagsBits = v4;
    v11._object = v3;
    String.append(_:)(v11);
  }
  if (v5)
  {
    v12._uint64_t countAndFlagsBits = 45;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = v6;
    v13._object = v7;
    String.append(_:)(v13);
  }
  if (v8)
  {
    v14._uint64_t countAndFlagsBits = 95;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = v9;
    v15._object = v10;
    String.append(_:)(v15);
  }
  outlined consume of Locale.LanguageCode?(v19, v2);
  outlined consume of Locale.LanguageCode?(v20, v5);
  uint64_t v16 = outlined consume of Locale.LanguageCode?(v21, v8);
  if (one-time initialization token for cache != -1) {
    uint64_t v16 = swift_once();
  }
  id v17 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](v16);
  swift_retain_n();
  os_unfair_lock_lock(v17 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v17[4], &v23);
  os_unfair_lock_unlock(v17 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  double result = *(double *)&v23;
  *a2 = v23;
  return result;
}

double Locale.init(languageCode:script:languageRegion:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  long long v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  long long v6 = a2[1];
  v13[2] = *a2;
  v13[3] = v6;
  long long v7 = a3[1];
  void v13[4] = *a3;
  v13[5] = v7;
  LOBYTE(v13[6]) = 16;
  *(_OWORD *)((char *)&v13[6] + 8) = 0u;
  *(_OWORD *)((char *)&v13[7] + 8) = 0u;
  *(_OWORD *)((char *)&v13[8] + 8) = 0u;
  *(_OWORD *)((char *)&v13[9] + 8) = 0u;
  *(_OWORD *)((char *)&v13[10] + 8) = 0u;
  *(_OWORD *)((char *)&v13[11] + 8) = 0u;
  WORD4(v13[12]) = 1031;
  memset(&v13[13], 0, 144);
  memcpy(v12, v13, sizeof(v12));
  uint64_t v8 = (uint64_t)outlined retain of Locale.Components((uint64_t *)v13);
  if (one-time initialization token for cache != -1) {
    uint64_t v8 = swift_once();
  }
  uint64_t v9 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](v8);
  swift_retain_n();
  os_unfair_lock_lock(v9 + 31);
  closure #1 in LocaleCache.fixedComponents(_:)partial apply((uint64_t)&v9[4], &v11);
  os_unfair_lock_unlock(v9 + 31);
  swift_release_n();
  outlined release of Locale.Components((uint64_t *)v13);
  outlined release of Locale.Components((uint64_t *)v13);
  double result = *(double *)&v11;
  *a4 = v11;
  return result;
}

uint64_t Locale.init(identifier:preferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  outlined init with take of LocalePreferences?(a3, (uint64_t)v13);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  long long v7 = (os_unfair_lock_s *)static LocaleCache.cache;
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)v14);
  uint64_t v8 = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v14);
  if (v8 == 1)
  {
    MEMORY[0x1F4188790](v8);
    swift_retain_n();
    os_unfair_lock_lock(v7 + 31);
    closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v7[4], v12);
    os_unfair_lock_unlock(v7 + 31);
    swift_bridgeObjectRelease();
    swift_release_n();
    uint64_t result = outlined release of LocalePreferences?((uint64_t)v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    uint64_t v11 = *((void *)&v12[0] + 1);
    uint64_t v10 = *(void **)&v12[0];
  }
  else
  {
    type metadata accessor for _LocaleICU();
    uint64_t v11 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)v12);
    swift_allocObject();
    swift_retain();
    outlined release of LocalePreferences?((uint64_t)v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized _LocaleICU.init(identifier:prefs:)(a1, a2, (uint64_t)v12);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LocalePreferences?((uint64_t)v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  }
  *a4 = v10;
  a4[1] = v11;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forIdentifier:)(Swift::String forIdentifier)
{
  object = forIdentifier._object;
  uint64_t countAndFlagsBits = forIdentifier._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 72))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forLanguageCode:)(Swift::String forLanguageCode)
{
  object = forLanguageCode._object;
  uint64_t countAndFlagsBits = forLanguageCode._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 80))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forRegionCode:)(Swift::String forRegionCode)
{
  object = forRegionCode._object;
  uint64_t countAndFlagsBits = forRegionCode._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 88))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forScriptCode:)(Swift::String forScriptCode)
{
  object = forScriptCode._object;
  uint64_t countAndFlagsBits = forScriptCode._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 96))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forVariantCode:)(Swift::String forVariantCode)
{
  object = forVariantCode._object;
  uint64_t countAndFlagsBits = forVariantCode._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 104))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forCurrencyCode:)(Swift::String forCurrencyCode)
{
  object = forCurrencyCode._object;
  uint64_t countAndFlagsBits = forCurrencyCode._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 120))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forCollationIdentifier:)(Swift::String forCollationIdentifier)
{
  object = forCollationIdentifier._object;
  uint64_t countAndFlagsBits = forCollationIdentifier._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 136))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forCollatorIdentifier:)(Swift::String forCollatorIdentifier)
{
  object = forCollatorIdentifier._object;
  uint64_t countAndFlagsBits = forCollatorIdentifier._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 144))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

uint64_t Locale.scriptCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 160))(ObjectType, v1);
}

uint64_t Locale.variantCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 168))(ObjectType, v1);
  if (v4)
  {
    uint64_t v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0) {
      uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
    }
    if (!v5)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t Locale.exemplarCharacterSet.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 184))(ObjectType, v1);
}

uint64_t Locale._calendarIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 200))(ObjectType, v1);
}

uint64_t Locale.collationIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 208))(ObjectType, v1);
}

uint64_t Locale.usesMetricSystem.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1) & 1;
}

uint64_t Locale.groupingSeparator.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 232))(ObjectType, v1);
}

uint64_t Locale.currencySymbol.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 240))(ObjectType, v1);
}

uint64_t Locale.currencyCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 248))(ObjectType, v1);
}

uint64_t Locale.collatorIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 256))(ObjectType, v1);
}

uint64_t Locale.quotationBeginDelimiter.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 264))(ObjectType, v1);
}

uint64_t Locale.quotationEndDelimiter.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 272))(ObjectType, v1);
}

uint64_t Locale.alternateQuotationBeginDelimiter.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 280))(ObjectType, v1);
}

uint64_t Locale.alternateQuotationEndDelimiter.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 288))(ObjectType, v1);
}

uint64_t Locale.currency.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 304))(ObjectType, v1);
}

uint64_t Locale.numberingSystem.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 312))(ObjectType, v1);
}

uint64_t Locale.availableNumberingSystems.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 320))(ObjectType, v1);
}

uint64_t Locale.firstDayOfWeek.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 328))(ObjectType, v1);
}

Swift::String __swiftcall Locale.identifier(_:)(Foundation::Locale::IdentifierType a1)
{
  char v2 = *(unsigned char *)a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = v2;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 416))(&v8, ObjectType, v3);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t Locale.collation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 368))(ObjectType, v1);
}

uint64_t Locale.timeZone.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 384))(ObjectType, v1);
}

uint64_t Locale.subdivision.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 392))(ObjectType, v1);
}

uint64_t Locale.variant.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 400))(ObjectType, v1);
}

uint64_t Locale.forceHourCycle.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 424))(ObjectType, v1);
}

uint64_t Locale.forceFirstWeekday(_:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 432))(&v6, ObjectType, v3);
}

Swift::Int_optional __swiftcall Locale.forceMinDaysInFirstWeek(_:)(Foundation::Calendar::Identifier a1)
{
  char v2 = *(unsigned char *)a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = v2;
  Swift::Int v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 440))(&v8, ObjectType, v3);
  Swift::Bool v7 = v6 & 1;
  result.value = v5;
  result.is_nil = v7;
  return result;
}

uint64_t Locale.customDateFormat(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 496))(&v6, ObjectType, v3);
}

uint64_t Locale.temperatureUnit.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 408))(ObjectType, v1);
}

uint64_t Locale.prefs.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 464))(ObjectType, v1);
}

uint64_t Locale.identifierCapturingPreferences.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 472))(ObjectType, v1);
}

id static Locale.canonicalIdentifier(from:)()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  CFStringRef v1 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v0, v1);
  swift_unknownObjectRelease();
  if (!CanonicalLocaleIdentifierFromString) {
    return 0;
  }
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);

  return v3;
}

id static Locale._canonicalLocaleIdentifier(from:)(uint64_t a1, uint64_t a2)
{
  return static Locale._canonicalLocaleIdentifier(from:)(a1, a2, MEMORY[0x1E4F1C250]);
}

id static Locale.canonicalLanguageIdentifier(from:)(uint64_t a1, uint64_t a2)
{
  return static Locale._canonicalLocaleIdentifier(from:)(a1, a2, MEMORY[0x1E4F1C248]);
}

id static Locale._canonicalLocaleIdentifier(from:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = *MEMORY[0x1E4F1CFB0];
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  uint64_t v6 = (void *)a3(v4, v5);
  swift_unknownObjectRelease();
  if (!v6) {
    return 0;
  }
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

Swift::Int Locale.hashValue.getter()
{
  void (*v4)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  Swift::UInt v33;
  Swift::UInt8 v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  unsigned char v38[144];
  unsigned char v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;
  void v57[18];
  unsigned char v58[144];
  unsigned char v59[144];
  unsigned char v60[72];

  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1))
  {
    Swift::UInt8 v3 = 1;
LABEL_5:
    Hasher._combine(_:)(v3);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v4(v57, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v57, (uint64_t)v58);
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v59);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v59) == 1)
  {
    Swift::UInt8 v3 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v39);
  Hasher._combine(_:)(1u);
  if (v39[0] == 2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v39[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v5);
  uint64_t v6 = v40;
  if (!v40)
  {
    Hasher._combine(_:)(0);
    uint64_t v11 = v39;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v6 + 16));
  id v7 = *(void *)(v6 + 16);
  if (!v7)
  {
    outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v38);
    uint64_t v11 = v38;
LABEL_20:
    outlined retain of LocalePreferences(v11);
    if (!v41) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined release of LocalePreferences?((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v8 = v6 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 += 16;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  if (!v41)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v42) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v9 = v43;
    if (!v43) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v9);
    swift_bridgeObjectRelease();
    uint64_t v10 = v44;
    if (!v44) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = v43;
  if (v43) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v10 = v44;
  if (!v44)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v10);
  swift_bridgeObjectRelease();
LABEL_25:
  Swift::String v13 = v45;
  Swift::String v12 = v46;
  Swift::String v15 = v47;
  Swift::String v14 = v48;
  uint64_t v16 = v49;
  if (v45)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v17 = v12;
    uint64_t v18 = v15;
    uint64_t v19 = v14;
    uint64_t v20 = v16;
    uint64_t v21 = v13;
    _CFObject.hash(into:)();
    if (v12) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v26 = v16;
    uint64_t v27 = v12;
    uint64_t v28 = v15;
    uint64_t v29 = v14;
    if (v12)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      long long v22 = v12;
      _CFObject.hash(into:)();

      if (v15) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v15)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    long long v23 = v15;
    _CFObject.hash(into:)();

    if (v14) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v16) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v14) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  int64_t v24 = v14;
  _CFObject.hash(into:)();

  if (v16)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int v25 = v16;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  int v25 = 0;
LABEL_36:

  id v30 = v50;
  if (v30)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v30);
    swift_bridgeObjectRelease();
    id v31 = v51;
    if (v51) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v52) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  id v31 = v51;
  if (!v51) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v31);
  swift_bridgeObjectRelease();
  if (!v52) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v53 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v32 = v53 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32);
  }
  if (v54 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unsigned int v33 = v54 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v33);
  }
  if (v55 == 2)
  {
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v34 = v55 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v34);
  if (v56 == 2)
  {
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v35 = v36;
  }
  Hasher._combine(_:)(v35);
  outlined release of LocalePreferences?((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined release of LocalePreferences?((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale()
{
  void (*v4)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  Swift::UInt v32;
  Swift::UInt8 v33;
  Swift::UInt8 v34;
  Swift::UInt8 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  void v55[18];
  unsigned char v56[144];
  unsigned char v57[144];
  unsigned char v58[72];

  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1))
  {
    Swift::UInt8 v3 = 1;
LABEL_5:
    Hasher._combine(_:)(v3);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v4(v55, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v55, (uint64_t)v56);
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v57) == 1)
  {
    Swift::UInt8 v3 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)&v37);
  Hasher._combine(_:)(1u);
  if (v37 == 2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v37 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v5);
  uint64_t v6 = v38;
  if (!v38)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v37);
    if (!v39) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v6 + 16));
  id v7 = *(void *)(v6 + 16);
  if (!v7) {
    goto LABEL_19;
  }
  outlined release of LocalePreferences?((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v8 = v6 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 += 16;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v9 = v41;
    if (!v41) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v58, v9);
    swift_bridgeObjectRelease();
    uint64_t v10 = v42;
    if (!v42) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = v41;
  if (v41) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v10 = v42;
  if (!v42)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v10);
  swift_bridgeObjectRelease();
LABEL_24:
  Swift::String v12 = v43;
  uint64_t v11 = v44;
  Swift::String v14 = v45;
  Swift::String v13 = v46;
  Swift::String v15 = v47;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v16 = v11;
    id v17 = v14;
    uint64_t v18 = v13;
    uint64_t v19 = v15;
    uint64_t v20 = v12;
    _CFObject.hash(into:)();
    if (v11) {
      goto LABEL_26;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    int v25 = v15;
    uint64_t v26 = v11;
    uint64_t v27 = v14;
    uint64_t v28 = v13;
    if (v11)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v21 = v11;
      _CFObject.hash(into:)();

      if (v14) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v14)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    long long v22 = v14;
    _CFObject.hash(into:)();

    if (v13) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v15) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v13) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  long long v23 = v13;
  _CFObject.hash(into:)();

  if (v15)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int64_t v24 = v15;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  int64_t v24 = 0;
LABEL_35:

  uint64_t v29 = v48;
  if (v29)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v58, v29);
    swift_bridgeObjectRelease();
    id v30 = v49;
    if (v49) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v50) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  id v30 = v49;
  if (!v49) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v30);
  swift_bridgeObjectRelease();
  if (!v50) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    id v31 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v31);
  }
  if (v52 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32);
  }
  if (v53 == 2)
  {
    unsigned int v33 = 0;
  }
  else
  {
    unsigned int v33 = v53 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v33);
  if (v54 == 2)
  {
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v35 = v54 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v34 = v35;
  }
  Hasher._combine(_:)(v34);
  outlined release of LocalePreferences?((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined release of LocalePreferences?((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t Locale.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v33[1] = a1;
  v33[0] = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v33[0] - 8);
  MEMORY[0x1F4188790](v33[0]);
  uint64_t v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  id v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v9 = v1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 64);
  swift_unknownObjectRetain();
  uint64_t v12 = v11(ObjectType, v9);
  uint64_t v14 = v13;
  swift_unknownObjectRelease();
  uint64_t v15 = MEMORY[0x1E4FBB1A0];
  uint64_t v38 = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v37 = v12;
  *((void *)&v37 + 1) = v14;
  long long v34 = xmmword_182110490;
  outlined init with take of Any(&v37, &v35);
  uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v18 = v16[2];
  unint64_t v17 = v16[3];
  if (v18 >= v17 >> 1) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
  }
  void v16[2] = v18 + 1;
  uint64_t v19 = &v16[6 * v18];
  long long v20 = v34;
  long long v21 = v36;
  v19[3] = v35;
  v19[4] = v21;
  _OWORD v19[2] = v20;
  *(void *)&long long v34 = v8;
  uint64_t v22 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
  uint64_t v38 = v15;
  *(void *)&long long v37 = v22;
  *((void *)&v37 + 1) = v23;
  long long v34 = xmmword_1821104A0;
  outlined init with take of Any(&v37, &v35);
  unint64_t v25 = v16[2];
  unint64_t v24 = v16[3];
  if (v25 >= v24 >> 1) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v16);
  }
  void v16[2] = v25 + 1;
  uint64_t v26 = &v16[6 * v25];
  long long v27 = v34;
  long long v28 = v36;
  v26[3] = v35;
  v26[4] = v28;
  v26[2] = v27;
  *(void *)&long long v34 = v8;
  *((void *)&v34 + 1) = v9;
  *(void *)&long long v37 = v16;
  uint64_t v29 = *MEMORY[0x1E4FBC410];
  uint64_t v30 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v7, v29, v30);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v7, 0, 1, v30);
  (*(void (**)(char *, void, void))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v33[0]);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Locale.debugDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  v5._uint64_t countAndFlagsBits = 10272;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v4;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale()
{
  return Locale.description.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Locale.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Locale.CodingKeys@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::String v6 = a2;
  Swift::String v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  long long v27 = __src;
  uint64_t v26 = __dst;
  if (v10 < v12 >> 4)
  {
    if (v8 >= -15)
    {
      if (__dst != __src || &__src[16 * v10] <= __dst) {
        memmove(__dst, __src, 16 * v10);
      }
      uint64_t v14 = &v4[16 * v10];
      unint64_t v25 = v14;
      if ((unint64_t)v6 < a3 && v8 >= 16)
      {
        do
        {
          BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
          if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if (v7 != v4) {
              *(_OWORD *)Swift::String v7 = *(_OWORD *)v4;
            }
            v4 += 16;
            uint64_t v26 = v4;
            uint64_t v16 = v6;
          }
          else
          {
            uint64_t v16 = v6 + 16;
            if (v7 < v6 || v7 >= v16 || v7 != v6) {
              *(_OWORD *)Swift::String v7 = *(_OWORD *)v6;
            }
          }
          v7 += 16;
          if (v4 >= v14) {
            break;
          }
          Swift::String v6 = v16;
        }
        while ((unint64_t)v16 < a3);
        long long v27 = v7;
      }
      goto LABEL_50;
    }
LABEL_51:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181B5D704);
  }
  if (v11 < -15) {
    goto LABEL_51;
  }
  if (__dst != a2 || &a2[16 * v13] <= __dst) {
    memmove(__dst, a2, 16 * v13);
  }
  unint64_t v17 = &v4[16 * v13];
  unint64_t v25 = v17;
  long long v27 = v6;
  if (v7 < v6 && v11 >= 16)
  {
    unint64_t v18 = (char *)(a3 - 16);
    uint64_t v19 = v6;
    do
    {
      long long v20 = v18 + 16;
      uint64_t v21 = *((void *)v19 - 2);
      uint64_t v22 = *((void *)v19 - 1);
      v19 -= 16;
      BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unint64_t v25 = v17 - 16;
        if (v20 < v17 || v18 >= v17 || v20 != v17) {
          *(_OWORD *)unint64_t v18 = *((_OWORD *)v17 - 1);
        }
        uint64_t v19 = v6;
        v17 -= 16;
        if (v6 <= v7) {
          break;
        }
      }
      else
      {
        if (v20 != v6 || v18 >= v6) {
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
        }
        long long v27 = v19;
        if (v19 <= v7) {
          break;
        }
      }
      v18 -= 16;
      Swift::String v6 = v19;
    }
    while (v17 > v4);
  }
LABEL_50:
  specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
  return 1;
}

{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  _OWORD *v15;
  unint64_t v16;
  long long v17;
  long long v18;
  long long v19;
  char *v20;
  long long v21;
  long long v22;
  long long v23;
  char *v24;
  unint64_t v25;
  long long v26;
  long long v27;
  long long v28;
  char *v29;
  char v31;
  char *v32;
  char *v33;
  long long v34;
  long long v35;
  long long v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;

  uint64_t v4 = __dst;
  Swift::String v6 = a2;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 56;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 56;
  int64_t v44 = __src;
  unint64_t v43 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -55)
    {
      if (__dst != a2 || &a2[56 * v11] <= __dst) {
        memmove(__dst, a2, 56 * v11);
      }
      unint64_t v24 = &v4[56 * v11];
      uint64_t v42 = v24;
      int64_t v44 = v6;
      if (__src < v6 && v10 >= 56)
      {
        unint64_t v25 = a3 - 56;
        do
        {
          outlined init with copy of (key: String, value: Encodable)((uint64_t)(v24 - 56), (uint64_t)&v40);
          uint64_t v29 = v6 - 56;
          outlined init with copy of (key: String, value: Encodable)((uint64_t)(v6 - 56), (uint64_t)&v38);
          if (v40 == v38 && v41 == v39) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          uint64_t v32 = (char *)(v25 + 56);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v38);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v40);
          if (v31)
          {
            if (v32 != v6 || v25 >= (unint64_t)v6)
            {
              uint64_t v26 = *(_OWORD *)v29;
              long long v27 = *(_OWORD *)(v6 - 40);
              long long v28 = *(_OWORD *)(v6 - 24);
              *(void *)(v25 + 48) = *((void *)v6 - 1);
              *(_OWORD *)(v25 + 16) = v27;
              *(_OWORD *)(v25 + 32) = v28;
              *(_OWORD *)unint64_t v25 = v26;
            }
            v44 -= 56;
            unint64_t v24 = v42;
            if (v42 <= v4) {
              break;
            }
          }
          else
          {
            unsigned int v33 = v42;
            unint64_t v24 = v42 - 56;
            v42 -= 56;
            if (v32 < v33 || v25 >= (unint64_t)v33 || v32 != v33)
            {
              long long v34 = *(_OWORD *)v24;
              long long v35 = *(_OWORD *)(v33 - 40);
              long long v36 = *(_OWORD *)(v33 - 24);
              *(void *)(v25 + 48) = *((void *)v33 - 1);
              *(_OWORD *)(v25 + 16) = v35;
              *(_OWORD *)(v25 + 32) = v36;
              *(_OWORD *)unint64_t v25 = v34;
            }
            uint64_t v29 = v6;
            if (v24 <= v4) {
              break;
            }
          }
          v25 -= 56;
          Swift::String v6 = v29;
        }
        while (v29 > __src);
      }
LABEL_51:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v44, (const void **)&v43, &v42);
      return 1;
    }
  }
  else if (v8 >= -55)
  {
    if (__dst != __src || &__src[56 * v9] <= __dst) {
      memmove(__dst, __src, 56 * v9);
    }
    uint64_t v12 = (unint64_t)&v4[56 * v9];
    uint64_t v42 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 56)
    {
      while (1)
      {
        outlined init with copy of (key: String, value: Encodable)((uint64_t)v6, (uint64_t)&v40);
        outlined init with copy of (key: String, value: Encodable)((uint64_t)v4, (uint64_t)&v38);
        if (v40 == v38 && v41 == v39) {
          break;
        }
        uint64_t v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v38);
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v40);
        if ((v14 & 1) == 0) {
          goto LABEL_18;
        }
        BOOL v15 = v44;
        uint64_t v16 = (unint64_t)(v6 + 56);
        if (v44 >= v6 && (unint64_t)v44 < v16 && v44 == v6)
        {
          BOOL v15 = v6;
        }
        else
        {
          unint64_t v17 = *(_OWORD *)v6;
          unint64_t v18 = *((_OWORD *)v6 + 1);
          uint64_t v19 = *((_OWORD *)v6 + 2);
          *((void *)v44 + 6) = *((void *)v6 + 6);
          v15[1] = v18;
          v15[2] = v19;
          *BOOL v15 = v17;
        }
LABEL_22:
        int64_t v44 = (char *)v15 + 56;
        uint64_t v4 = v43;
        if ((unint64_t)v43 < v12)
        {
          Swift::String v6 = (char *)v16;
          if (v16 < a3) {
            continue;
          }
        }
        goto LABEL_51;
      }
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v38);
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v40);
LABEL_18:
      BOOL v15 = v44;
      long long v20 = v43 + 56;
      if (v44 != v43 || v44 >= v20)
      {
        uint64_t v21 = *(_OWORD *)v43;
        uint64_t v22 = *((_OWORD *)v43 + 1);
        BOOL v23 = *((_OWORD *)v43 + 2);
        *((void *)v44 + 6) = *((void *)v43 + 6);
        v15[1] = v22;
        v15[2] = v23;
        *BOOL v15 = v21;
      }
      unint64_t v43 = v20;
      uint64_t v16 = (unint64_t)v6;
      goto LABEL_22;
    }
    goto LABEL_51;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  BOOL v14;
  char *v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  BOOL v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t result;
  char *v31;
  char *v32;
  char *v33;

  uint64_t v4 = __dst;
  Swift::String v6 = a2;
  Swift::String v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 48;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 48;
  unsigned int v33 = __src;
  uint64_t v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      long long v20 = 48 * v11;
      if (__dst != a2 || &a2[v20] <= __dst) {
        memmove(__dst, a2, 48 * v11);
      }
      uint64_t v21 = &v4[v20];
      uint64_t v31 = v21;
      unsigned int v33 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        uint64_t v22 = (char *)(a3 - 48);
        while (!*(v21 - 32) && !*(v6 - 32))
        {
          BOOL v23 = v22 + 48;
          unint64_t v24 = v6 - 48;
          unint64_t v25 = *((void *)v21 - 6) == *((void *)v6 - 6) && *((void *)v21 - 5) == *((void *)v6 - 5);
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v31 = v21 - 48;
            if (v23 < v21 || v22 >= v21 || v23 != v21)
            {
              long long v28 = *((_OWORD *)v21 - 3);
              uint64_t v29 = *((_OWORD *)v21 - 1);
              *((_OWORD *)v22 + 1) = *((_OWORD *)v21 - 2);
              *((_OWORD *)v22 + 2) = v29;
              *(_OWORD *)uint64_t v22 = v28;
            }
            unint64_t v24 = v6;
            v21 -= 48;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v23 != v6 || v22 >= v6)
            {
              uint64_t v26 = *(_OWORD *)v24;
              long long v27 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v22 + 1) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v22 + 2) = v27;
              *(_OWORD *)uint64_t v22 = v26;
            }
            unsigned int v33 = v6 - 48;
            if (v24 <= v7) {
              goto LABEL_50;
            }
          }
          v22 -= 48;
          Swift::String v6 = v24;
          if (v21 <= v4) {
            goto LABEL_50;
          }
        }
        goto LABEL_51;
      }
LABEL_50:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v33, (const void **)&v32, &v31);
      return 1;
    }
  }
  else if (v8 >= -47)
  {
    uint64_t v12 = 48 * v9;
    if (__dst != __src || &__src[v12] <= __dst) {
      memmove(__dst, __src, v12);
    }
    uint64_t v13 = &v4[v12];
    uint64_t v31 = v13;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      while (!v6[16] && !v4[16])
      {
        uint64_t v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
          {
            unint64_t v18 = *(_OWORD *)v4;
            uint64_t v19 = *((_OWORD *)v4 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v4 + 1);
            *((_OWORD *)v7 + 2) = v19;
            *(_OWORD *)Swift::String v7 = v18;
          }
          v4 += 48;
          uint64_t v32 = v4;
          BOOL v15 = v6;
        }
        else
        {
          BOOL v15 = v6 + 48;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            uint64_t v16 = *(_OWORD *)v6;
            unint64_t v17 = *((_OWORD *)v6 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v6 + 1);
            *((_OWORD *)v7 + 2) = v17;
            *(_OWORD *)Swift::String v7 = v16;
          }
        }
        v7 += 48;
        unsigned int v33 = v7;
        if (v4 < v13)
        {
          Swift::String v6 = v15;
          if ((unint64_t)v15 < a3) {
            continue;
          }
        }
        goto LABEL_50;
      }
LABEL_51:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_50;
  }
LABEL_52:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *type metadata accessor for Locale.Current()
{
  return &unk_1ECA49E30;
}

uint64_t specialized Locale.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6572727563 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t closure #1 in LocaleCache.fixedComponents(_:)partial apply@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return partial apply for closure #1 in LocaleCache.fixedComponents(_:)(a1, a2);
}

CFMutableCharacterSetRef specialized SetAlgebra.isEmpty.getter(uint64_t a1)
{
  CFMutableCharacterSetRef result = CFCharacterSetCreateMutable(0);
  if (result)
  {
    CFMutableCharacterSetRef v3 = result;
    int v4 = CFEqual(*(CFTypeRef *)(a1 + 16), result);

    return (CFMutableCharacterSetRef)(v4 != 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void __CharacterSetStorage.hash(into:)()
{
  id v2 = *(id *)(v0 + 16);
  Swift::UInt v1 = CFHash(v2);
  Hasher._combine(_:)(v1);
}

uint64_t __CharacterSetStorage.mutableCopy()()
{
  char v1 = *(unsigned char *)(v0 + 24);
  CFCharacterSetRef v2 = (const __CFCharacterSet *)*(id *)(v0 + 16);
  uint64_t result = (uint64_t)CFCharacterSetCreateMutableCopy(0, v2);
  uint64_t v4 = result;
  if (v1)
  {
    if (result)
    {
LABEL_5:

      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v4;
      *(unsigned char *)(result + 24) = 1;
      return result;
    }
    __break(1u);
  }
  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

CFDataRef __CharacterSetStorage.bitmapRepresentation.getter()
{
  char v1 = *(unsigned char *)(v0 + 24);
  CFCharacterSetRef v2 = (const __CFCharacterSet *)*(id *)(v0 + 16);
  CFDataRef result = CFCharacterSetCreateBitmapRepresentation(0, v2);
  CFDataRef v4 = result;
  if (v1)
  {
    if (result)
    {
LABEL_5:
      id v5 = specialized Data.init(referencing:)(result);

      return (CFDataRef)v5;
    }
    __break(1u);
  }
  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void __CharacterSetStorage.subtract(_:)(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 24);
  CFCharacterSetRef v3 = (const __CFCharacterSet *)*(id *)(a1 + 16);
  CFCharacterSetRef InvertedSet = CFCharacterSetCreateInvertedSet(0, v3);
  CFCharacterSetRef v5 = InvertedSet;
  if (v2)
  {
    if (InvertedSet) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if (!InvertedSet)
  {
    __break(1u);
    goto LABEL_14;
  }
LABEL_5:

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  Swift::String v7 = *(__CFCharacterSet **)(v1 + 16);
  if (*(unsigned char *)(v1 + 24))
  {
    CFCharacterSetIntersect(v7, v5);
    swift_release();
    return;
  }
  CFCharacterSetRef v8 = v7;
  CFMutableCharacterSetRef MutableCopy = CFCharacterSetCreateMutableCopy(0, v8);
  if (!MutableCopy)
  {
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v10 = MutableCopy;
  CFCharacterSetRef v11 = (const __CFCharacterSet *)*(id *)(v6 + 16);
  CFCharacterSetIntersect(v10, v11);

  id v12 = *(id *)(v1 + 16);
  *(void *)(v1 + 16) = v10;
  *(unsigned char *)(v1 + 24) = 1;
  swift_release();
}