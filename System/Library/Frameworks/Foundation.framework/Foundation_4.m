uint64_t CharacterSet.union(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return __CharacterSetStorage.union(_:)(*a1, MEMORY[0x1E4F1C218], a2);
}

uint64_t __CharacterSetStorage.union(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, void)@<X1>, uint64_t *a3@<X8>)
{
  char v7 = *(unsigned char *)(v3 + 24);
  CFCharacterSetRef v8 = (const __CFCharacterSet *)*(id *)(v3 + 16);
  uint64_t result = (uint64_t)CFCharacterSetCreateMutableCopy(0, v8);
  uint64_t v10 = result;
  if (v7)
  {
    if (result)
    {
LABEL_5:

      a2(v10, *(void *)(a1 + 16));
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v10;
      *(unsigned char *)(result + 24) = 1;
      *a3 = result;
      return result;
    }
    __break(1u);
  }
  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration@<X0>(uint64_t a1@<X8>)
{
  *(void *)&long long v93 = MEMORY[0x1E4FBC868];
  *((void *)&v93 + 1) = MEMORY[0x1E4FBC868];
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E4FBB550], 0, 0, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E4FBB390], 0, 0, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E4FBB3D0], 0, 0, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E4FBB1A0], 0, 0, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E4FBB7A8], 0, 0, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E4FBAF58], 0, 0, 1);
  v1 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  uint64_t v2 = *v1;
  if ((unint64_t)*v1 > 0x7FF || ((unint64_t)(v2 - 512) >= 3 ? (BOOL v3 = v2 == 0) : (BOOL v3 = 1), v3))
  {
    uint64_t v4 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v4, 0x72412E7466697753, (void *)0xEB00000000796172);
  }
  v5 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : Int]);
  uint64_t v6 = *v5;
  if ((unint64_t)*v5 > 0x7FF || (unint64_t)(v6 - 512) < 3 || !v6)
  {
    uint64_t v7 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v7, 0xD000000000000010, (void *)0x80000001823AFA70);
  }
  CFCharacterSetRef v8 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Int>);
  uint64_t v9 = *v8;
  if ((unint64_t)*v8 > 0x7FF || (unint64_t)(v9 - 512) < 3 || !v9)
  {
    uint64_t v10 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v10, 0x65532E7466697753, (void *)0xE900000000000074);
  }
  unint64_t v11 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  if (v11 > 0x7FF || v11 - 512 < 3 || !v11)
  {
    uint64_t v12 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v12, 0x704F2E7466697753, (void *)0xEE006C616E6F6974);
  }
  unint64_t v13 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<String>);
  if (v13 > 0x7FF || v13 - 512 < 3 || !v13)
  {
    uint64_t v14 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v14, 0x6C532E7466697753, (void *)0xEB00000000656369);
  }
  unint64_t v15 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{Int}>);
  if (v15 > 0x7FF || v15 - 512 < 3 || !v15)
  {
    uint64_t v16 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v16, 0xD000000000000014, (void *)0x80000001823AFA90);
  }
  unint64_t v17 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Pack{Int}, Int>);
  if (v17 > 0x7FF || v17 - 512 < 3 || !v17)
  {
    uint64_t v18 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v18, 0xD000000000000015, (void *)0x80000001823AFAB0);
  }
  uint64_t v19 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v19, 0, 0, 1);
  unint64_t v20 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Arithmetic<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  if (v20 > 0x7FF || v20 - 512 < 3 || !v20)
  {
    uint64_t v21 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v21, 0xD00000000000001FLL, (void *)0x80000001823AFAD0);
  }
  unint64_t v22 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ClosedRange<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  if (v22 > 0x7FF || v22 - 512 < 3 || !v22)
  {
    uint64_t v23 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v23, 0xD000000000000020, (void *)0x80000001823AFAF0);
  }
  unint64_t v24 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.RangeExpressionContains<PredicateExpressions.Value<Range<Int>>, PredicateExpressions.Value<Int>>);
  if (v24 > 0x7FF || v24 - 512 < 3 || !v24)
  {
    uint64_t v25 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v25, 0xD00000000000002CLL, (void *)0x80000001823AFB20);
  }
  unint64_t v26 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.CollectionContainsCollection<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<[Int]>>);
  if (v26 > 0x7FF || v26 - 512 < 3 || !v26)
  {
    uint64_t v27 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v27, 0xD000000000000031, (void *)0x80000001823AFB50);
  }
  v92 = v5;
  unint64_t v28 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.CollectionIndexSubscript<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Int>>);
  if (v28 > 0x7FF || v28 - 512 < 3 || !v28)
  {
    uint64_t v29 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v29, 0xD00000000000002DLL, (void *)0x80000001823AFB90);
  }
  v30 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.CollectionRangeSubscript<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Range<Int>>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v30, 0xD00000000000002DLL, (void *)0x80000001823AFBC0);
  v31 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Comparison<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v31, 0xD00000000000001FLL, (void *)0x80000001823AFBF0);
  v32 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Conditional<PredicateExpressions.Value<Bool>, PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v32, 0xD000000000000020, (void *)0x80000001823AFC10);
  v33 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Conjunction<PredicateExpressions.Value<Bool>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v33, 0xD000000000000020, (void *)0x80000001823AFC40);
  v34 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.DictionaryKeyDefaultValueSubscript<PredicateExpressions.Value<[Int : Int]>, PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v34, 0xD000000000000037, (void *)0x80000001823AFC70);
  v35 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.DictionaryKeySubscript<PredicateExpressions.Value<[Int : Int]>, PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v35, 0xD00000000000002BLL, (void *)0x80000001823AFCB0);
  v36 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Disjunction<PredicateExpressions.Value<Bool>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v36, 0xD000000000000020, (void *)0x80000001823AFCE0);
  v37 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.IntDivision<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v37, 0xD000000000000020, (void *)0x80000001823AFD10);
  v38 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.IntRemainder<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v38, 0xD000000000000021, (void *)0x80000001823AFD40);
  v39 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.FloatDivision<PredicateExpressions.Value<Float>, PredicateExpressions.Value<Float>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v39, 0xD000000000000022, (void *)0x80000001823AFD70);
  v40 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v40, 0xD00000000000001ALL, (void *)0x80000001823AFDA0);
  v41 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Filter<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v41, 0xD00000000000001BLL, (void *)0x80000001823AFDC0);
  v42 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.NotEqual<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v42, 0xD00000000000001DLL, (void *)0x80000001823AFDE0);
  v43 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Negation<PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v43, 0xD00000000000001DLL, (void *)0x80000001823AFE00);
  v44 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.OptionalFlatMap<PredicateExpressions.Value<Bool?>, Bool, PredicateExpressions.Value<Bool>, Bool>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v44, 0xD000000000000024, (void *)0x80000001823AFE20);
  v45 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.NilCoalesce<PredicateExpressions.Value<Bool?>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v45, 0xD000000000000020, (void *)0x80000001823AFE50);
  v46 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ForcedUnwrap<PredicateExpressions.Value<Bool?>, Bool>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v46, 0xD000000000000021, (void *)0x80000001823AFE80);
  v47 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Range<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v47, 0xD00000000000001ALL, (void *)0x80000001823AFEB0);
  v48 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceContains<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v48, 0xD000000000000025, (void *)0x80000001823AFED0);
  v49 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceContainsWhere<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v49, 0xD00000000000002ALL, (void *)0x80000001823AFF00);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v49, 0xD000000000000027, (void *)0x80000001823AFF30);
  v50 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceStartsWith<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<[Int]>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v50, 0xD000000000000027, (void *)0x80000001823AFF60);
  v51 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceMaximum<PredicateExpressions.Value<[Int]>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v51, 0xD000000000000024, (void *)0x80000001823AFF90);
  v52 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceMinimum<PredicateExpressions.Value<[Int]>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v52, 0xD000000000000024, (void *)0x80000001823AFFC0);
  v53 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ConditionalCast<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v53, 0xD000000000000024, (void *)0x80000001823AFFF0);
  v54 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ForceCast<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v54, 0xD00000000000001ELL, (void *)0x80000001823B0020);
  v55 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.TypeCheck<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v55, 0xD00000000000001ELL, (void *)0x80000001823B0040);
  v56 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.UnaryMinus<PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v56, 0xD00000000000001FLL, (void *)0x80000001823B0060);
  v57 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.NilLiteral<Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v57, 0xD00000000000001FLL, (void *)0x80000001823B0080);
  v58 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.PredicateEvaluate<PredicateExpressions.Value<Predicate<Pack{Int}>>, Pack{PredicateExpressions.Value<Int>}>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v58, 0xD000000000000026, (void *)0x80000001823B00A0);
  v59 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringContainsRegex<PredicateExpressions.Value<String>, PredicateExpressions.Value<PredicateExpressions.PredicateRegex>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v59, 0xD000000000000028, (void *)0x80000001823B00D0);
  v60 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringCaseInsensitiveCompare<PredicateExpressions.Value<String>, PredicateExpressions.Value<String>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v60, 0xD000000000000031, (void *)0x80000001823B0100);
  v61 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringLocalizedCompare<PredicateExpressions.Value<String>, PredicateExpressions.Value<String>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v61, 0xD00000000000002BLL, (void *)0x80000001823B0140);
  v62 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringLocalizedStandardContains<PredicateExpressions.Value<String>, PredicateExpressions.Value<String>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v62, 0xD000000000000034, (void *)0x80000001823B0170);
  v63 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v63, 0xD00000000000001CLL, (void *)0x80000001823B01B0);
  v64 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Variable<Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v64, 0xD00000000000001DLL, (void *)0x80000001823B01D0);
  v65 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v65, 0xD00000000000001ALL, (void *)0x80000001823B01F0);
  uint64_t KeyPath = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(KeyPath, 0xD000000000000012, (void *)0x80000001823B0210);
  swift_release();
  uint64_t v67 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v67, 0xD000000000000015, (void *)0x80000001823B0230);
  swift_release();
  uint64_t v68 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v68, 0xD000000000000014, (void *)0x80000001823B0250);
  swift_release();
  uint64_t v69 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v69, 0xD000000000000017, (void *)0x80000001823B0270);
  swift_release();
  uint64_t v70 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v70, 0xD000000000000012, (void *)0x80000001823B0290);
  swift_release();
  uint64_t v71 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v71, 0xD000000000000015, (void *)0x80000001823B02B0);
  swift_release();
  uint64_t v72 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v72, 0xD000000000000011, (void *)0x80000001823B02D0);
  swift_release();
  uint64_t v73 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v73, 0xD000000000000014, (void *)0x80000001823B02F0);
  uint64_t result = swift_release();
  uint64_t v75 = *v1;
  if ((unint64_t)*v1 <= 0x7FF && (unint64_t)(v75 - 512) >= 3 && v75)
  {
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  uint64_t v76 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v76, 0xD000000000000011, 0x80000001823B0310, 0x746E756F63, 0xE500000000000000, (uint64_t)closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  uint64_t v77 = *v1;
  if ((unint64_t)*v1 <= 0x7FF && (unint64_t)(v77 - 512) >= 3 && v77) {
    goto LABEL_78;
  }
  uint64_t v78 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v78, 0xD000000000000013, 0x80000001823B0330, 0x7974706D457369, 0xE700000000000000, (uint64_t)closure #2 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  uint64_t v79 = *v1;
  if ((unint64_t)*v1 <= 0x7FF && (unint64_t)(v79 - 512) >= 3 && v79) {
    goto LABEL_79;
  }
  uint64_t v80 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v80, 0xD000000000000011, 0x80000001823B0350, 0x7473726966, 0xE500000000000000, (uint64_t)closure #3 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  uint64_t v81 = *v1;
  if ((unint64_t)*v1 <= 0x7FF && (unint64_t)(v81 - 512) >= 3 && v81) {
    goto LABEL_80;
  }
  uint64_t v82 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v82, 0xD000000000000010, 0x80000001823B0370, 1953718636, 0xE400000000000000, (uint64_t)closure #4 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  uint64_t v83 = *v8;
  if ((unint64_t)*v8 <= 0x7FF && (unint64_t)(v83 - 512) >= 3 && v83) {
    goto LABEL_81;
  }
  uint64_t v84 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v84, 0x65532E7466697753, 0xEF746E756F632E74, 0x746E756F63, 0xE500000000000000, (uint64_t)closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  uint64_t v85 = *v8;
  if ((unint64_t)*v8 <= 0x7FF && (unint64_t)(v85 - 512) >= 3 && v85) {
    goto LABEL_82;
  }
  uint64_t v86 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v86, 0xD000000000000011, 0x80000001823B0390, 0x7974706D457369, 0xE700000000000000, (uint64_t)closure #6 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  uint64_t v87 = *v92;
  if ((unint64_t)*v92 <= 0x7FF && (unint64_t)(v87 - 512) >= 3 && v87) {
    goto LABEL_83;
  }
  uint64_t v88 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v88, 0xD000000000000016, 0x80000001823B03B0, 0x746E756F63, 0xE500000000000000, (uint64_t)closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  uint64_t v89 = *v92;
  if ((unint64_t)*v92 > 0x7FF || (unint64_t)(v89 - 512) < 3 || !v89)
  {
    uint64_t v90 = TypeMetadata.descriptor.getter();
    uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v90, 0xD000000000000018, 0x80000001823B03D0, 0x7974706D457369, 0xE700000000000000, (uint64_t)closure #8 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
    *(_OWORD *)a1 = v93;
    *(unsigned char *)(a1 + 16) = 1;
    return result;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t PredicateCodableConfiguration._allowPartialType(_:identifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(void *)(v3 + 8);
  uint64_t v104 = v8 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v8 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v8 + 64);
  __src = (void *)((unint64_t)(v9 + 63) >> 6);
  swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  while (1)
  {
    do
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v12 << 6);
        goto LABEL_24;
      }
      uint64_t v17 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      if (v17 >= (uint64_t)__src) {
        goto LABEL_72;
      }
      unint64_t v18 = *(void *)(v104 + 8 * v17);
      ++v12;
      if (v18) {
        goto LABEL_23;
      }
      uint64_t v12 = v17 + 1;
      if (v17 + 1 >= (uint64_t)__src) {
        goto LABEL_72;
      }
      unint64_t v18 = *(void *)(v104 + 8 * v12);
      if (v18) {
        goto LABEL_23;
      }
      uint64_t v12 = v17 + 2;
      if (v17 + 2 >= (uint64_t)__src) {
        goto LABEL_72;
      }
      unint64_t v18 = *(void *)(v104 + 8 * v12);
      if (v18) {
        goto LABEL_23;
      }
      uint64_t v19 = v17 + 3;
      if (v19 >= (uint64_t)__src)
      {
LABEL_72:
        swift_release();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v109 = *(void *)(v5 + 8);
        uint64_t v4 = v109;
        *(void *)(v5 + 8) = 0x8000000000000000;
        unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
        uint64_t v57 = *(void *)(v109 + 16);
        BOOL v58 = (v56 & 1) == 0;
        uint64_t v59 = v57 + v58;
        if (!__OFADD__(v57, v58))
        {
          LOBYTE(v8) = v56;
          if (*(void *)(v109 + 24) < v59)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, isUniquelyReferenced_nonNull_native);
            uint64_t v60 = v109;
            unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
            if ((v8 & 1) != (v62 & 1)) {
              goto LABEL_127;
            }
            unint64_t v11 = v61;
            uint64_t v63 = a1;
            if ((v8 & 1) == 0) {
              goto LABEL_116;
            }
            goto LABEL_79;
          }
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v60 = v109;
            uint64_t v63 = a1;
            if ((v56 & 1) == 0) {
              goto LABEL_116;
            }
            goto LABEL_79;
          }
LABEL_83:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
          uint64_t v65 = static _DictionaryStorage.copy(original:)();
          uint64_t v60 = v65;
          if (!*(void *)(v4 + 16)) {
            goto LABEL_115;
          }
          v66 = (char *)(v65 + 64);
          uint64_t v105 = v60;
          __srca = (char *)(v4 + 64);
          unint64_t v67 = (unint64_t)((1 << *(unsigned char *)(v60 + 32)) + 63) >> 6;
          if (v60 != v4 || v66 >= &__srca[8 * v67]) {
            memmove(v66, __srca, 8 * v67);
          }
          int64_t v68 = 0;
          *(void *)(v60 + 16) = *(void *)(v4 + 16);
          uint64_t v69 = 1 << *(unsigned char *)(v4 + 32);
          uint64_t v70 = -1;
          if (v69 < 64) {
            uint64_t v70 = ~(-1 << v69);
          }
          unint64_t v71 = v70 & *(void *)(v4 + 64);
          int64_t v72 = (unint64_t)(v69 + 63) >> 6;
          while (1)
          {
            if (v71)
            {
              unint64_t v73 = __clz(__rbit64(v71));
              v71 &= v71 - 1;
              unint64_t v74 = v73 | (v68 << 6);
            }
            else
            {
              int64_t v83 = v68 + 1;
              if (__OFADD__(v68, 1))
              {
LABEL_121:
                __break(1u);
                goto LABEL_122;
              }
              if (v83 >= v72) {
                goto LABEL_115;
              }
              unint64_t v84 = *(void *)&__srca[8 * v83];
              ++v68;
              if (!v84)
              {
                int64_t v68 = v83 + 1;
                if (v83 + 1 >= v72) {
                  goto LABEL_115;
                }
                unint64_t v84 = *(void *)&__srca[8 * v68];
                if (!v84)
                {
                  int64_t v68 = v83 + 2;
                  if (v83 + 2 >= v72) {
                    goto LABEL_115;
                  }
                  unint64_t v84 = *(void *)&__srca[8 * v68];
                  if (!v84)
                  {
                    int64_t v68 = v83 + 3;
                    if (v83 + 3 >= v72) {
                      goto LABEL_115;
                    }
                    unint64_t v84 = *(void *)&__srca[8 * v68];
                    if (!v84)
                    {
                      int64_t v68 = v83 + 4;
                      if (v83 + 4 >= v72) {
                        goto LABEL_115;
                      }
                      unint64_t v84 = *(void *)&__srca[8 * v68];
                      if (!v84)
                      {
                        int64_t v68 = v83 + 5;
                        if (v83 + 5 >= v72) {
                          goto LABEL_115;
                        }
                        unint64_t v84 = *(void *)&__srca[8 * v68];
                        if (!v84)
                        {
                          int64_t v68 = v83 + 6;
                          if (v83 + 6 >= v72) {
                            goto LABEL_115;
                          }
                          unint64_t v84 = *(void *)&__srca[8 * v68];
                          if (!v84)
                          {
                            int64_t v85 = v83 + 7;
                            if (v85 >= v72) {
                              goto LABEL_115;
                            }
                            unint64_t v84 = *(void *)&__srca[8 * v85];
                            if (!v84)
                            {
                              while (1)
                              {
                                int64_t v68 = v85 + 1;
                                if (__OFADD__(v85, 1)) {
                                  goto LABEL_123;
                                }
                                uint64_t v60 = v105;
                                if (v68 >= v72) {
                                  break;
                                }
                                unint64_t v84 = *(void *)&__srca[8 * v68];
                                ++v85;
                                if (v84) {
                                  goto LABEL_114;
                                }
                              }
LABEL_115:
                              swift_bridgeObjectRelease();
                              uint64_t v63 = a1;
                              if ((v8 & 1) == 0)
                              {
LABEL_116:
                                specialized _NativeDictionary._insert(at:key:value:)(v11, a2, (uint64_t)a3, v63, 1, (void *)v60);
                                swift_bridgeObjectRetain();
                                goto LABEL_117;
                              }
LABEL_79:
                              uint64_t v64 = *(void *)(v60 + 56) + 16 * v11;
                              *(void *)uint64_t v64 = v63;
                              *(unsigned char *)(v64 + 8) = 1;
LABEL_117:
                              *(void *)(v5 + 8) = v60;
                              swift_bridgeObjectRelease();
                              return swift_bridgeObjectRelease();
                            }
                            int64_t v68 = v85;
                            uint64_t v60 = v105;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_114:
              unint64_t v71 = (v84 - 1) & v84;
              unint64_t v74 = __clz(__rbit64(v84)) + (v68 << 6);
            }
            uint64_t v75 = 16 * v74;
            uint64_t v76 = (uint64_t *)(*(void *)(v4 + 48) + v75);
            uint64_t v78 = *v76;
            uint64_t v77 = v76[1];
            uint64_t v79 = *(void *)(v4 + 56) + v75;
            uint64_t v80 = *(void *)v79;
            LOBYTE(v79) = *(unsigned char *)(v79 + 8);
            uint64_t v81 = (void *)(*(void *)(v60 + 48) + v75);
            *uint64_t v81 = v78;
            v81[1] = v77;
            uint64_t v82 = *(void *)(v60 + 56) + v75;
            *(void *)uint64_t v82 = v80;
            *(unsigned char *)(v82 + 8) = v79;
            swift_bridgeObjectRetain();
          }
        }
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      unint64_t v18 = *(void *)(v104 + 8 * v19);
      if (!v18)
      {
        while (1)
        {
          uint64_t v12 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            goto LABEL_81;
          }
          if (v12 >= (uint64_t)__src) {
            goto LABEL_72;
          }
          unint64_t v18 = *(void *)(v104 + 8 * v12);
          ++v19;
          if (v18) {
            goto LABEL_23;
          }
        }
      }
      uint64_t v12 = v19;
LABEL_23:
      unint64_t v11 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_24:
      uint64_t v20 = 16 * v16;
      uint64_t v21 = (uint64_t *)(*(void *)(v8 + 48) + v20);
      uint64_t v22 = *v21;
      uint64_t v4 = v21[1];
      uint64_t v23 = *(void *)(v8 + 56) + v20;
      uint64_t v24 = *(void *)v23;
      int v25 = *(unsigned __int8 *)(v23 + 8);
      BOOL v26 = *v21 == a2 && v4 == (void)a3;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (!v25) {
          goto LABEL_124;
        }
        if (v24 != a1)
        {
          _StringGuts.grow(_:)(83);
          v93._countAndFlagsBits = 0xD000000000000021;
          v93._object = (void *)0x80000001823AFA40;
          String.append(_:)(v93);
          swift_getKeyPath();
          dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          swift_getAtKeyPath();
          swift_release();
          v94._countAndFlagsBits = String.init(cString:)();
          String.append(_:)(v94);
          swift_bridgeObjectRelease();
          v95._object = (void *)0x80000001823AFA20;
          v95._countAndFlagsBits = 0xD000000000000014;
          String.append(_:)(v95);
          swift_getKeyPath();
          dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          swift_getAtKeyPath();
          swift_release();
          v96._countAndFlagsBits = String.init(cString:)();
          String.append(_:)(v96);
          swift_bridgeObjectRelease();
          v97._countAndFlagsBits = 0xD000000000000017;
          v97._object = (void *)0x80000001823AF9E0;
          String.append(_:)(v97);
          v98._countAndFlagsBits = a2;
          v98._object = a3;
          String.append(_:)(v98);
          v99._countAndFlagsBits = 39;
          v99._object = (void *)0xE100000000000000;
          String.append(_:)(v99);
          goto LABEL_126;
        }
        return swift_release();
      }
      if (v24 == a1) {
        int v27 = v25;
      }
      else {
        int v27 = 0;
      }
    }
    while (v27 != 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v4);
    char v30 = v29;
    swift_bridgeObjectRelease();
    if (v30) {
      break;
    }
LABEL_7:
    swift_bridgeObjectRelease();
  }
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v32 = *(void *)(v5 + 8);
  *(void *)(v5 + 8) = 0x8000000000000000;
  if (v31)
  {
    uint64_t v13 = v32;
LABEL_6:
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v28, v13);
    uint64_t v14 = *(void *)(v5 + 8);
    *(void *)(v5 + 8) = v13;
    swift_bridgeObjectRelease();
    uint64_t v4 = v14;
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  uint64_t v33 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v33;
  if (!*(void *)(v32 + 16))
  {
LABEL_66:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v34 = (char *)(v33 + 64);
  v35 = (char *)(v32 + 64);
  unint64_t v36 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  uint64_t v100 = v32 + 64;
  if (v13 != v32 || v34 >= &v35[8 * v36]) {
    memmove(v34, v35, 8 * v36);
  }
  int64_t v37 = 0;
  *(void *)(v13 + 16) = *(void *)(v32 + 16);
  uint64_t v38 = 1 << *(unsigned char *)(v32 + 32);
  if (v38 < 64) {
    uint64_t v39 = ~(-1 << v38);
  }
  else {
    uint64_t v39 = -1;
  }
  unint64_t v40 = v39 & *(void *)(v32 + 64);
  int64_t v101 = (unint64_t)(v38 + 63) >> 6;
  while (2)
  {
    if (v40)
    {
      uint64_t v102 = (v40 - 1) & v40;
      int64_t v103 = v37;
      unint64_t v41 = __clz(__rbit64(v40)) | (v37 << 6);
LABEL_44:
      uint64_t v42 = 16 * v41;
      v43 = (uint64_t *)(*(void *)(v32 + 48) + v42);
      uint64_t v45 = *v43;
      uint64_t v44 = v43[1];
      uint64_t v46 = *(void *)(v32 + 56) + v42;
      uint64_t v47 = *(void *)v46;
      LOBYTE(v46) = *(unsigned char *)(v46 + 8);
      v48 = (void *)(*(void *)(v13 + 48) + v42);
      void *v48 = v45;
      v48[1] = v44;
      uint64_t v49 = *(void *)(v13 + 56) + v42;
      *(void *)uint64_t v49 = v47;
      *(unsigned char *)(v49 + 8) = v46;
      swift_bridgeObjectRetain();
      unint64_t v40 = v102;
      int64_t v37 = v103;
      continue;
    }
    break;
  }
  int64_t v50 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
    __break(1u);
    goto LABEL_121;
  }
  if (v50 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v50);
  int64_t v52 = v37 + 1;
  if (v51) {
    goto LABEL_65;
  }
  int64_t v52 = v37 + 2;
  if (v37 + 2 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v52);
  if (v51) {
    goto LABEL_65;
  }
  int64_t v52 = v37 + 3;
  if (v37 + 3 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v52);
  if (v51) {
    goto LABEL_65;
  }
  int64_t v52 = v37 + 4;
  if (v37 + 4 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v52);
  if (v51) {
    goto LABEL_65;
  }
  int64_t v52 = v37 + 5;
  if (v37 + 5 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v52);
  if (v51) {
    goto LABEL_65;
  }
  int64_t v52 = v37 + 6;
  if (v37 + 6 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v52);
  if (v51)
  {
LABEL_65:
    uint64_t v102 = (v51 - 1) & v51;
    int64_t v103 = v52;
    unint64_t v41 = __clz(__rbit64(v51)) + (v52 << 6);
    goto LABEL_44;
  }
  uint64_t v53 = v37 + 7;
  if (v37 + 7 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v53);
  if (v51)
  {
    int64_t v52 = v37 + 7;
    goto LABEL_65;
  }
  while (1)
  {
    int64_t v52 = v53 + 1;
    if (__OFADD__(v53, 1)) {
      break;
    }
    if (v52 >= v101) {
      goto LABEL_66;
    }
    unint64_t v51 = *(void *)(v100 + 8 * v52);
    ++v53;
    if (v51) {
      goto LABEL_65;
    }
  }
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  _StringGuts.grow(_:)(75);
  v86._countAndFlagsBits = 0xD000000000000019;
  v86._object = (void *)0x80000001823AFA00;
  String.append(_:)(v86);
  v87._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v87);
  swift_bridgeObjectRelease();
  v88._object = (void *)0x80000001823AFA20;
  v88._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v88);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v89._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._countAndFlagsBits = 0xD000000000000017;
  v90._object = (void *)0x80000001823AF9E0;
  String.append(_:)(v90);
  v91._countAndFlagsBits = a2;
  v91._object = a3;
  String.append(_:)(v91);
  v92._countAndFlagsBits = 39;
  v92._object = (void *)0xE100000000000000;
  String.append(_:)(v92);
LABEL_126:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_127:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = a6[7] + 16 * result;
  *(void *)uint64_t v7 = a4;
  *(unsigned char *)(v7 + 8) = a5 & 1;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t *PredicateCodableConfiguration.allowPartialType(_:identifier:)(uint64_t *result, uint64_t a2, void *a3)
{
  uint64_t v5 = *result;
  if ((unint64_t)*result > 0x7FF || ((unint64_t)(v5 - 512) >= 3 ? (BOOL v6 = v5 == 0) : (BOOL v6 = 1), v6))
  {
    uint64_t v7 = TypeMetadata.descriptor.getter();
    return (uint64_t *)PredicateCodableConfiguration._allowPartialType(_:identifier:)(v7, a2, a3);
  }
  return result;
}

uint64_t PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a5;
  uint64_t v12 = a4;
  v153[0] = a1;
  v153[1] = a6;
  v153[2] = a7;
  v153[3] = a4;
  v153[4] = a5;
  char v154 = 1;
  uint64_t v15 = *v7;
  uint64_t v143 = v15 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v15 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(v15 + 64);
  __src = (void *)((unint64_t)(v16 + 63) >> 6);
  swift_retain();
  v140 = (void *)v11;
  swift_bridgeObjectRetain();
  uint64_t v147 = v15;
  swift_bridgeObjectRetain();
  uint64_t countAndFlagsBits = a2;
  object = (uint64_t *)a3;
  uint64_t v149 = 0;
  v151._uint64_t countAndFlagsBits = a2;
  v151._object = (void *)a3;
  for (i = v12; ; uint64_t v12 = i)
  {
    while (1)
    {
      do
      {
        if (v18)
        {
          unint64_t v21 = __clz(__rbit64(v18));
          v18 &= v18 - 1;
          unint64_t v22 = v21 | (v149 << 6);
          goto LABEL_21;
        }
        uint64_t v23 = v149 + 1;
        if (__OFADD__(v149, 1))
        {
          __break(1u);
LABEL_97:
          __break(1u);
          goto LABEL_98;
        }
        if (v23 >= (uint64_t)__src) {
          goto LABEL_88;
        }
        unint64_t v24 = *(void *)(v143 + 8 * v23);
        uint64_t v25 = v149 + 1;
        if (v24) {
          goto LABEL_20;
        }
        uint64_t v25 = v149 + 2;
        if (v149 + 2 >= (uint64_t)__src) {
          goto LABEL_88;
        }
        unint64_t v24 = *(void *)(v143 + 8 * v25);
        if (v24) {
          goto LABEL_20;
        }
        uint64_t v25 = v149 + 3;
        if (v149 + 3 >= (uint64_t)__src) {
          goto LABEL_88;
        }
        unint64_t v24 = *(void *)(v143 + 8 * v25);
        if (v24) {
          goto LABEL_20;
        }
        uint64_t v26 = v149 + 4;
        if (v149 + 4 >= (uint64_t)__src)
        {
LABEL_88:
          swift_release();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          BOOL v9 = v139;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v152 = *v139;
          uint64_t v8 = *v139;
          uint64_t *v139 = 0x8000000000000000;
          a3 = specialized __RawDictionaryStorage.find<A>(_:)(v151._countAndFlagsBits, (uint64_t)v151._object);
          uint64_t v74 = *(void *)(v8 + 16);
          BOOL v75 = (v73 & 1) == 0;
          uint64_t v76 = v74 + v75;
          if (!__OFADD__(v74, v75))
          {
            uint64_t v11 = v73;
            if (*(void *)(v8 + 24) < v76)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v76, isUniquelyReferenced_nonNull_native);
              uint64_t v77 = v152;
              unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v151._countAndFlagsBits, (uint64_t)v151._object);
              if ((v11 & 1) != (v79 & 1)) {
                goto LABEL_141;
              }
              a3 = v78;
              if ((v11 & 1) == 0) {
                goto LABEL_132;
              }
              goto LABEL_95;
            }
            if (isUniquelyReferenced_nonNull_native)
            {
              uint64_t v77 = v8;
              if ((v73 & 1) == 0) {
                goto LABEL_132;
              }
              goto LABEL_95;
            }
LABEL_99:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
            uint64_t v80 = static _DictionaryStorage.copy(original:)();
            uint64_t v77 = v80;
            if (!*(void *)(v8 + 16)) {
              goto LABEL_131;
            }
            uint64_t v81 = (char *)(v80 + 64);
            __srca = (char *)(v8 + 64);
            unint64_t v82 = (unint64_t)((1 << *(unsigned char *)(v77 + 32)) + 63) >> 6;
            uint64_t v142 = v77;
            if (v77 != v8 || v81 >= &__srca[8 * v82]) {
              memmove(v81, __srca, 8 * v82);
            }
            *(void *)(v77 + 16) = *(void *)(v8 + 16);
            uint64_t v83 = 1 << *(unsigned char *)(v8 + 32);
            uint64_t v84 = -1;
            if (v83 < 64) {
              uint64_t v84 = ~(-1 << v83);
            }
            int64_t v148 = 0;
            unint64_t v150 = v84 & *(void *)(v8 + 64);
            int64_t v144 = (unint64_t)(v83 + 63) >> 6;
            while (1)
            {
              BOOL v9 = v139;
              if (v150)
              {
                unint64_t v85 = __clz(__rbit64(v150));
                v150 &= v150 - 1;
                unint64_t v86 = v85 | (v148 << 6);
              }
              else
              {
                int64_t v98 = v148 + 1;
                if (__OFADD__(v148, 1))
                {
LABEL_135:
                  __break(1u);
                  goto LABEL_136;
                }
                if (v98 >= v144) {
                  goto LABEL_131;
                }
                unint64_t v99 = *(void *)&__srca[8 * v98];
                int64_t v100 = v148 + 1;
                if (!v99)
                {
                  int64_t v100 = v148 + 2;
                  if (v148 + 2 >= v144) {
                    goto LABEL_131;
                  }
                  unint64_t v99 = *(void *)&__srca[8 * v100];
                  if (!v99)
                  {
                    int64_t v100 = v148 + 3;
                    if (v148 + 3 >= v144) {
                      goto LABEL_131;
                    }
                    unint64_t v99 = *(void *)&__srca[8 * v100];
                    if (!v99)
                    {
                      int64_t v100 = v148 + 4;
                      if (v148 + 4 >= v144) {
                        goto LABEL_131;
                      }
                      unint64_t v99 = *(void *)&__srca[8 * v100];
                      if (!v99)
                      {
                        int64_t v100 = v148 + 5;
                        if (v148 + 5 >= v144) {
                          goto LABEL_131;
                        }
                        unint64_t v99 = *(void *)&__srca[8 * v100];
                        if (!v99)
                        {
                          int64_t v100 = v148 + 6;
                          if (v148 + 6 >= v144) {
                            goto LABEL_131;
                          }
                          unint64_t v99 = *(void *)&__srca[8 * v100];
                          if (!v99)
                          {
                            int64_t v100 = v148 + 7;
                            if (v148 + 7 >= v144) {
                              goto LABEL_131;
                            }
                            unint64_t v99 = *(void *)&__srca[8 * v100];
                            if (!v99)
                            {
                              int64_t v101 = v148 + 8;
                              if (v148 + 8 >= v144) {
                                goto LABEL_131;
                              }
                              unint64_t v99 = *(void *)&__srca[8 * v101];
                              if (!v99)
                              {
                                while (1)
                                {
                                  int64_t v100 = v101 + 1;
                                  if (__OFADD__(v101, 1)) {
                                    goto LABEL_137;
                                  }
                                  uint64_t v77 = v142;
                                  BOOL v9 = v139;
                                  if (v100 >= v144) {
                                    break;
                                  }
                                  unint64_t v99 = *(void *)&__srca[8 * v100];
                                  ++v101;
                                  if (v99) {
                                    goto LABEL_130;
                                  }
                                }
LABEL_131:
                                swift_bridgeObjectRelease();
                                if ((v11 & 1) == 0)
                                {
LABEL_132:
                                  specialized _NativeDictionary._insert(at:key:value:)(a3, v151._countAndFlagsBits, (uint64_t)v151._object, (uint64_t)v153, (void *)v77);
                                  swift_bridgeObjectRetain();
                                  goto LABEL_133;
                                }
LABEL_95:
                                outlined assign with take of PredicateCodableConfiguration.AllowListKeyPath((uint64_t)v153, *(void *)(v77 + 56) + 48 * a3);
LABEL_133:
                                *BOOL v9 = v77;
                                swift_bridgeObjectRelease();
                                swift_release();
                                swift_bridgeObjectRelease();
                                return swift_bridgeObjectRelease();
                              }
                              int64_t v100 = v148 + 8;
                              uint64_t v77 = v142;
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_130:
                int64_t v148 = v100;
                unint64_t v150 = (v99 - 1) & v99;
                unint64_t v86 = __clz(__rbit64(v99)) + (v100 << 6);
              }
              uint64_t v87 = 16 * v86;
              uint64_t v88 = *(void *)(v8 + 56);
              Swift::String v89 = (void *)(*(void *)(v8 + 48) + 16 * v86);
              uint64_t v90 = v89[1];
              uint64_t v91 = 48 * v86;
              uint64_t v92 = *(void *)(v88 + v91);
              uint64_t v93 = *(void *)(v88 + v91 + 8);
              uint64_t v94 = *(void *)(v88 + v91 + 16);
              uint64_t v12 = *(void *)(v88 + v91 + 24);
              uint64_t v10 = *(void **)(v88 + v91 + 32);
              char v95 = *(unsigned char *)(v88 + v91 + 40);
              Swift::String v96 = (void *)(*(void *)(v77 + 48) + v87);
              *Swift::String v96 = *v89;
              v96[1] = v90;
              uint64_t v97 = *(void *)(v77 + 56) + v91;
              *(void *)uint64_t v97 = v92;
              *(void *)(v97 + 8) = v93;
              *(void *)(v97 + 16) = v94;
              *(void *)(v97 + 24) = v12;
              *(void *)(v97 + 32) = v10;
              *(unsigned char *)(v97 + 40) = v95;
              swift_bridgeObjectRetain();
              outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v92, v93, v94, v12, (uint64_t)v10, v95);
            }
          }
LABEL_98:
          __break(1u);
          goto LABEL_99;
        }
        unint64_t v24 = *(void *)(v143 + 8 * v26);
        if (!v24)
        {
          while (1)
          {
            uint64_t v25 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_97;
            }
            if (v25 >= (uint64_t)__src) {
              goto LABEL_88;
            }
            unint64_t v24 = *(void *)(v143 + 8 * v25);
            ++v26;
            if (v24) {
              goto LABEL_20;
            }
          }
        }
        uint64_t v25 = v149 + 4;
LABEL_20:
        unint64_t v18 = (v24 - 1) & v24;
        uint64_t v149 = v25;
        unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_21:
        int v27 = (uint64_t *)(*(void *)(v147 + 48) + 16 * v22);
        uint64_t v28 = *v27;
        BOOL v9 = (uint64_t *)v27[1];
        uint64_t v29 = *(void *)(v147 + 56) + 48 * v22;
        a3 = *(void *)v29;
        uint64_t v8 = *(void *)(v29 + 8);
        uint64_t v30 = *(void *)(v29 + 16);
        uint64_t v11 = *(void *)(v29 + 24);
        uint64_t v10 = *(void **)(v29 + 32);
        int v31 = *(unsigned __int8 *)(v29 + 40);
        if (*v27 != countAndFlagsBits || v9 != object)
        {
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          object = (uint64_t *)v151._object;
          uint64_t countAndFlagsBits = v151._countAndFlagsBits;
          if ((v33 & 1) == 0) {
            continue;
          }
        }
        if ((v31 & 1) == 0)
        {
          outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 0);
          swift_retain();
          _StringGuts.grow(_:)(57);
          v114._object = (void *)0x80000001823AF9C0;
          v114._uint64_t countAndFlagsBits = 0xD000000000000014;
          String.append(_:)(v114);
          v115._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
          String.append(_:)(v115);
          swift_bridgeObjectRelease();
          v116._uint64_t countAndFlagsBits = 0x2720646E612027;
          v116._object = (void *)0xE700000000000000;
          String.append(_:)(v116);
          swift_getKeyPath();
          dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          swift_getAtKeyPath();
          swift_release();
          v117._uint64_t countAndFlagsBits = String.init(cString:)();
          String.append(_:)(v117);
          swift_bridgeObjectRelease();
          v118._uint64_t countAndFlagsBits = 46;
          v118._object = (void *)0xE100000000000000;
          String.append(_:)(v118);
          v119._uint64_t countAndFlagsBits = v12;
          v119._object = v140;
          String.append(_:)(v119);
          v120._uint64_t countAndFlagsBits = 92;
          v120._object = (void *)0xE100000000000000;
          String.append(_:)(v120);
          swift_bridgeObjectRelease();
          v121._uint64_t countAndFlagsBits = 0xD000000000000017;
          v121._object = (void *)0x80000001823AF9E0;
          String.append(_:)(v121);
          String.append(_:)(v151);
          v122._uint64_t countAndFlagsBits = 39;
          v122._object = (void *)0xE100000000000000;
          String.append(_:)(v122);
          goto LABEL_140;
        }
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
        if (a3 != a1) {
          goto LABEL_138;
        }
        if (v11 == v12 && v10 == v140)
        {
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v12, (uint64_t)v140, 1);
        }
        else
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_138;
          }
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
        }
        swift_bridgeObjectRelease();
        return swift_release();
      }
      while (!v31);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
      swift_bridgeObjectRetain();
      swift_release();
      if (a3 != a1)
      {
        outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
      if (v11 == v12 && v10 == v140) {
        break;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v35) {
        goto LABEL_37;
      }
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
LABEL_29:
      swift_bridgeObjectRelease();
      object = (uint64_t *)v151._object;
      uint64_t countAndFlagsBits = v151._countAndFlagsBits;
    }
    swift_bridgeObjectRelease();
LABEL_37:
    uint64_t v12 = (uint64_t)v139;
    swift_bridgeObjectRetain();
    unint64_t v137 = specialized __RawDictionaryStorage.find<A>(_:)(v28, (uint64_t)v9);
    char v37 = v36;
    swift_bridgeObjectRelease();
    if (v37) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_42:
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
    object = (uint64_t *)v151._object;
    uint64_t countAndFlagsBits = v151._countAndFlagsBits;
  }
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = *v139;
  uint64_t *v139 = 0x8000000000000000;
  if (v38)
  {
    uint64_t v40 = v39;
LABEL_40:
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void *)(v40 + 56) + 48 * v137;
    uint64_t v42 = *(void *)v41;
    uint64_t v133 = *(void *)(v41 + 16);
    uint64_t v135 = *(void *)(v41 + 8);
    uint64_t v129 = *(void *)(v41 + 32);
    uint64_t v131 = *(void *)(v41 + 24);
    char v127 = *(unsigned char *)(v41 + 40);
    specialized _NativeDictionary._delete(at:)(v137, v40);
    uint64_t *v139 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v42, v135, v133, v131, v129, v127);
    goto LABEL_42;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
  uint64_t v43 = static _DictionaryStorage.copy(original:)();
  uint64_t v126 = v43;
  if (!*(void *)(v39 + 16))
  {
LABEL_75:
    swift_bridgeObjectRelease();
    uint64_t v40 = v126;
    goto LABEL_40;
  }
  uint64_t v44 = v43;
  uint64_t v45 = (char *)(v43 + 64);
  uint64_t v46 = (char *)(v39 + 64);
  unint64_t v47 = (unint64_t)((1 << *(unsigned char *)(v44 + 32)) + 63) >> 6;
  uint64_t v123 = v39 + 64;
  if (v44 != v39 || v45 >= &v46[8 * v47])
  {
    memmove(v45, v46, 8 * v47);
    uint64_t v44 = v126;
  }
  int64_t v48 = 0;
  *(void *)(v44 + 16) = *(void *)(v39 + 16);
  uint64_t v49 = 1 << *(unsigned char *)(v39 + 32);
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  else {
    uint64_t v50 = -1;
  }
  unint64_t v51 = v50 & *(void *)(v39 + 64);
  int64_t v124 = (unint64_t)(v49 + 63) >> 6;
  uint64_t v125 = v39;
  while (2)
  {
    if (v51)
    {
      int64_t v134 = v48;
      uint64_t v136 = (v51 - 1) & v51;
      unint64_t v52 = __clz(__rbit64(v51)) | (v48 << 6);
      uint64_t v54 = v125;
      uint64_t v53 = v126;
LABEL_52:
      uint64_t v55 = 16 * v52;
      char v56 = (uint64_t *)(*(void *)(v54 + 48) + 16 * v52);
      uint64_t v58 = *v56;
      uint64_t v57 = v56[1];
      uint64_t v59 = 48 * v52;
      uint64_t v60 = *(void *)(v54 + 56) + v59;
      uint64_t v12 = *(void *)v60;
      uint64_t v61 = *(void *)(v60 + 8);
      uint64_t v62 = *(void *)(v60 + 16);
      uint64_t v130 = *(void *)(v60 + 32);
      uint64_t v132 = *(void *)(v60 + 24);
      char v63 = *(unsigned char *)(v60 + 40);
      char v128 = v63;
      uint64_t v64 = (void *)(*(void *)(v53 + 48) + v55);
      void *v64 = v58;
      v64[1] = v57;
      uint64_t v65 = *(void *)(v53 + 56) + v59;
      *(void *)uint64_t v65 = v12;
      *(void *)(v65 + 8) = v61;
      *(void *)(v65 + 16) = v62;
      *(void *)(v65 + 24) = v132;
      *(void *)(v65 + 32) = v130;
      *(unsigned char *)(v65 + 40) = v63;
      swift_bridgeObjectRetain();
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v12, v61, v62, v132, v130, v128);
      int64_t v48 = v134;
      unint64_t v51 = v136;
      continue;
    }
    break;
  }
  int64_t v66 = v48 + 1;
  uint64_t v54 = v125;
  uint64_t v53 = v126;
  if (__OFADD__(v48, 1))
  {
    __break(1u);
    goto LABEL_135;
  }
  if (v66 >= v124) {
    goto LABEL_75;
  }
  unint64_t v67 = *(void *)(v123 + 8 * v66);
  int64_t v68 = v48 + 1;
  if (v67) {
    goto LABEL_74;
  }
  int64_t v68 = v48 + 2;
  if (v48 + 2 >= v124) {
    goto LABEL_75;
  }
  unint64_t v67 = *(void *)(v123 + 8 * v68);
  if (v67) {
    goto LABEL_74;
  }
  int64_t v68 = v48 + 3;
  if (v48 + 3 >= v124) {
    goto LABEL_75;
  }
  unint64_t v67 = *(void *)(v123 + 8 * v68);
  if (v67) {
    goto LABEL_74;
  }
  int64_t v68 = v48 + 4;
  if (v48 + 4 >= v124) {
    goto LABEL_75;
  }
  unint64_t v67 = *(void *)(v123 + 8 * v68);
  if (v67) {
    goto LABEL_74;
  }
  int64_t v68 = v48 + 5;
  if (v48 + 5 >= v124) {
    goto LABEL_75;
  }
  unint64_t v67 = *(void *)(v123 + 8 * v68);
  if (v67) {
    goto LABEL_74;
  }
  int64_t v68 = v48 + 6;
  if (v48 + 6 >= v124) {
    goto LABEL_75;
  }
  unint64_t v67 = *(void *)(v123 + 8 * v68);
  if (v67)
  {
LABEL_74:
    int64_t v134 = v68;
    uint64_t v136 = (v67 - 1) & v67;
    unint64_t v52 = __clz(__rbit64(v67)) + (v68 << 6);
    goto LABEL_52;
  }
  uint64_t v69 = v48 + 7;
  if (v48 + 7 >= v124) {
    goto LABEL_75;
  }
  unint64_t v67 = *(void *)(v123 + 8 * v69);
  if (v67)
  {
    int64_t v68 = v48 + 7;
    uint64_t v54 = v125;
    uint64_t v53 = v126;
    goto LABEL_74;
  }
  uint64_t v54 = v125;
  uint64_t v53 = v126;
  while (1)
  {
    int64_t v68 = v69 + 1;
    if (__OFADD__(v69, 1)) {
      break;
    }
    if (v68 >= v124) {
      goto LABEL_75;
    }
    unint64_t v67 = *(void *)(v123 + 8 * v68);
    ++v69;
    if (v67) {
      goto LABEL_74;
    }
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  _StringGuts.grow(_:)(57);
  v102._object = (void *)0x80000001823AF9C0;
  v102._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v102);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v103._uint64_t countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v103);
  swift_bridgeObjectRelease();
  v104._uint64_t countAndFlagsBits = 46;
  v104._object = (void *)0xE100000000000000;
  String.append(_:)(v104);
  v105._uint64_t countAndFlagsBits = v11;
  v105._object = v10;
  String.append(_:)(v105);
  v106._uint64_t countAndFlagsBits = 92;
  v106._object = (void *)0xE100000000000000;
  String.append(_:)(v106);
  swift_bridgeObjectRelease();
  v107._uint64_t countAndFlagsBits = 0x2720646E612027;
  v107._object = (void *)0xE700000000000000;
  String.append(_:)(v107);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v108._uint64_t countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v108);
  swift_bridgeObjectRelease();
  v109._uint64_t countAndFlagsBits = 46;
  v109._object = (void *)0xE100000000000000;
  String.append(_:)(v109);
  v110._uint64_t countAndFlagsBits = v12;
  v110._object = v140;
  String.append(_:)(v110);
  v111._uint64_t countAndFlagsBits = 92;
  v111._object = (void *)0xE100000000000000;
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  v112._uint64_t countAndFlagsBits = 0xD000000000000017;
  v112._object = (void *)0x80000001823AF9E0;
  String.append(_:)(v112);
  String.append(_:)(v151);
  v113._uint64_t countAndFlagsBits = 39;
  v113._object = (void *)0xE100000000000000;
  String.append(_:)(v113);
LABEL_140:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_141:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.PredicateRegex(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for PredicateExpressions.PredicateRegex);
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs(void *a1, uint64_t a2))(void **a1)
{
  uint64_t v4 = malloc(0x58uLL);
  *a1 = v4;
  AttributedString.Runs.subscript.getter(a2, v4);
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs;
}

uint64_t AttributedString.Runs.subscript.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  long long v4 = *(_OWORD *)result;
  long long v5 = *(_OWORD *)(result + 16);
  long long v6 = *(_OWORD *)(result + 32);
  long long v7 = *(_OWORD *)(result + 48);
  long long v8 = *(_OWORD *)(v2 + 176);
  long long v65 = *(_OWORD *)(v2 + 160);
  long long v66 = v8;
  uint64_t v67 = *(void *)(v2 + 192);
  long long v9 = *(_OWORD *)(v2 + 112);
  long long v61 = *(_OWORD *)(v2 + 96);
  long long v62 = v9;
  long long v10 = *(_OWORD *)(v2 + 144);
  long long v63 = *(_OWORD *)(v2 + 128);
  long long v64 = v10;
  long long v11 = *(_OWORD *)(v2 + 48);
  v58[2] = *(_OWORD *)(v2 + 32);
  v58[3] = v11;
  long long v12 = *(_OWORD *)(v2 + 80);
  long long v59 = *(_OWORD *)(v2 + 64);
  long long v60 = v12;
  long long v13 = *(_OWORD *)(v2 + 16);
  v58[0] = *(_OWORD *)v2;
  v58[1] = v13;
  if ((uint64_t)v4 < *((uint64_t *)&v58[0] + 1) || (uint64_t)v4 >= *((uint64_t *)&v59 + 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  long long v52 = v4;
  long long v53 = v5;
  long long v54 = v6;
  long long v55 = v7;
  uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)((uint64_t *)&v52, (uint64_t *)&v46);
  uint64_t v14 = *(_OWORD **)&v58[0];
  if ((void)v46 != *(void *)(*(void *)&v58[0] + 88))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v15 = *((void *)&v46 + 1);
  uint64_t v44 = v49;
  uint64_t v45 = *((void *)&v48 + 1);
  uint64_t v16 = v51;
  uint64_t v43 = v50;
  if ((void)v47)
  {
    uint64_t v17 = (void *)(v47 + 24 * ((*((void *)&v46 + 1) >> ((4 * *(unsigned char *)(v47 + 18) + 8) & 0x3C)) & 0xFLL));
    uint64_t v18 = v17[4];
    unint64_t v42 = v17[3];
    uint64_t v19 = v17[5];
    outlined retain of AttributedString.Runs((uint64_t)v58);
    uint64_t v41 = v18;
    swift_bridgeObjectRetain();
    uint64_t v40 = v19;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v20 = *(void *)(*(void *)&v58[0] + 64);
    outlined retain of AttributedString.Runs((uint64_t)v58);
    swift_unknownObjectRetain();
    unint64_t v42 = specialized Rope._Node.subscript.getter(v15, v20);
    uint64_t v40 = v22;
    uint64_t v41 = v21;
    swift_unknownObjectRelease();
  }
  uint64_t v23 = *((void *)&v63 + 1);
  uint64_t v25 = *((void *)&v64 + 1);
  uint64_t v24 = v64;
  uint64_t v26 = v65;
  if (static BigString.Index.< infix(_:_:)())
  {
    uint64_t v23 = v45;
    uint64_t v24 = v44;
    uint64_t v25 = v43;
    uint64_t v26 = v16;
  }
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v27 = result + v42;
  if (__OFADD__(result, v42)) {
    goto LABEL_18;
  }
  uint64_t v28 = BigString.Index.utf8Offset.getter();
  if (v28 >= v27) {
    uint64_t v29 = v27;
  }
  else {
    uint64_t v29 = v28;
  }
  long long v30 = v14[1];
  long long v31 = v14[3];
  long long v53 = v14[2];
  long long v54 = v31;
  long long v52 = v30;
  long long v32 = v14[1];
  long long v47 = v14[2];
  long long v48 = v31;
  long long v46 = v32;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v46, (uint64_t)v57);
  outlined retain of Locale((uint64_t)v57);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v52);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v29, result)) {
    goto LABEL_19;
  }
  uint64_t v33 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  outlined release of Locale((uint64_t)v56);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a2 = v41;
    a2[1] = v40;
    a2[2] = v23;
    a2[3] = v24;
    a2[4] = v25;
    a2[5] = v26;
    a2[6] = v33;
    a2[7] = v35;
    a2[8] = v37;
    a2[9] = v39;
    a2[10] = v14;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.SequenceMaximum()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t PropertyListDecoder.userInfo.modify(void *a1)
{
  unint64_t v1 = (os_unfair_lock_s *)a1[2];
  *(void *)(a1[1] + 16) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();

  return swift_release();
}

void closure #1 in closure #1 in NSURLSession.data(from:delegate:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  double v15 = MEMORY[0x1F4188790](v12);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v13 + 16))(&v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v12, v15);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v13 + 32))(v17 + v16, &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v12);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_142;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = a3;
  swift_release();
  id v20 = objc_msgSend(a2, sel__dataTaskWithURL_delegate_completionHandler_, v19, a6, v18);
  _Block_release(v18);

  objc_msgSend(v20, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v20, sel_resume);
  uint64_t v21 = *(os_unfair_lock_s **)(a7 + 16);
  id v25 = v20;
  uint64_t v22 = v21 + 4;
  uint64_t v23 = v21 + 8;
  os_unfair_lock_lock(v21 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)partial apply(v22, (char *)aBlock);
  os_unfair_lock_unlock(v23);
  if ((aBlock[0] & 1) == 0) {
    objc_msgSend(v20, sel_cancel);
  }
}

void closure #1 in closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  double v15 = MEMORY[0x1F4188790](v12);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v13 + 16))(&v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v12, v15);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v13 + 32))(v17 + v16, &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v12);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_106;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = a3;
  swift_release();
  id v20 = objc_msgSend(a2, sel__downloadTaskWithURL_delegate_completionHandler_, v19, a6, v18);
  _Block_release(v18);

  objc_msgSend(v20, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v20, sel_set_keepDownloadTaskFile_, 1);
  objc_msgSend(v20, sel_resume);
  uint64_t v21 = *(os_unfair_lock_s **)(a7 + 16);
  id v25 = v20;
  uint64_t v22 = v21 + 4;
  uint64_t v23 = v21 + 8;
  os_unfair_lock_lock(v21 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)partial apply(v22, (char *)aBlock);
  os_unfair_lock_unlock(v23);
  if ((aBlock[0] & 1) == 0) {
    objc_msgSend(v20, sel_cancel);
  }
}

void closure #1 in closure #1 in NSURLSession.data(for:delegate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  objc_msgSend(*(id *)(a3 + 16), sel_copy, MEMORY[0x1F4188790](v9));
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  uint64_t v12 = (void *)aBlock[6];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_151;
  double v15 = _Block_copy(aBlock);
  swift_release();
  id v16 = objc_msgSend(a2, sel__dataTaskWithRequest_delegate_completionHandler_, v12, a4, v15);
  _Block_release(v15);

  objc_msgSend(v16, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v16, sel_resume);
  uint64_t v17 = *(os_unfair_lock_s **)(v21 + 16);
  id v22 = v16;
  uint64_t v18 = v17 + 4;
  id v19 = v17 + 8;
  os_unfair_lock_lock(v17 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)partial apply(v18, (char *)aBlock);
  os_unfair_lock_unlock(v19);
  if ((aBlock[0] & 1) == 0) {
    objc_msgSend(v16, sel_cancel);
  }
}

void *closure #1 in NSURLSession.CancelState.activate(task:)partial apply@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return partial apply for closure #1 in NSURLSession.CancelState.activate(task:)(a1, a2);
}

void *partial apply for closure #1 in NSURLSession.CancelState.activate(task:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return closure #1 in NSURLSession.CancelState.activate(task:)(a1, *(void **)(v2 + 16), a2);
}

void *closure #1 in NSURLSession.CancelState.activate(task:)@<X0>(void *result@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  if (result[1])
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (*(unsigned char *)result)
    {
      char v4 = 0;
    }
    else
    {
      *(unsigned char *)uint64_t result = 0;
      result[1] = a2;
      uint64_t result = a2;
      char v4 = 1;
    }
    *a3 = v4;
  }
  return result;
}

uint64_t URL.description.getter()
{
  unint64_t v1 = *(void **)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v6 = objc_msgSend(v1, sel_description);
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

    return (uint64_t)v7;
  }
  long long v46 = v1;
  unint64_t v47 = v2;
  uint64_t v48 = v3;
  URL.scheme.getter();
  if (!v4) {
    goto LABEL_16;
  }
  Swift::String v5 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v5._countAndFlagsBits == 1635017060 && v5._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      goto LABEL_16;
    }
  }
  swift_retain();
  id v9 = v1;
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (result)
  {
    if (!v2)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }
  else
  {
    id v11 = objc_msgSend(v9, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    swift_release();
    swift_release();
  }
  uint64_t v12 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v12 < 129)
  {
LABEL_16:
    swift_retain();
    id v14 = v1;
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if (!result)
    {
      id v16 = objc_msgSend(v14, sel_relativeString);
      id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      double v15 = v17;
      swift_release();
      swift_release();

      goto LABEL_26;
    }
    if (v2)
    {
      id v7 = *(id *)(v2 + 16);
      double v15 = *(void **)(v2 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();

      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_30;
  }
  long long v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  id v13 = v9;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v18 = objc_msgSend(v13, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    swift_release();
    swift_release();

    goto LABEL_21;
  }
  if (!v2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();

LABEL_21:
  uint64_t v19 = specialized Collection.prefix(_:)(120);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = MEMORY[0x185301F50](v19, v21, v23, v25);
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x202E2E2E20;
  v27._object = (void *)0xE500000000000000;
  String.append(_:)(v27);
  id v28 = v13;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v31 = objc_msgSend(v28, sel_relativeString);
    id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    unint64_t v29 = v32;
    swift_release();
    swift_release();

    goto LABEL_25;
  }
  if (v2)
  {
    id v30 = *(id *)(v2 + 16);
    unint64_t v29 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

LABEL_25:
    uint64_t v33 = specialized BidirectionalCollection.suffix(_:)(8, (uint64_t)v30, v29);
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    v40._uint64_t countAndFlagsBits = MEMORY[0x185301F50](v33, v35, v37, v39);
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v7 = v46;
    double v15 = (void *)v47;
LABEL_26:
    URL.baseURL.getter((uint64_t *)&v46);
    uint64_t v41 = v46;
    if (v46)
    {
      unint64_t v43 = v47;
      uint64_t v42 = v48;
      long long v46 = 0;
      unint64_t v47 = 0xE000000000000000;
      v44._uint64_t countAndFlagsBits = (uint64_t)v7;
      v44._object = v15;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._uint64_t countAndFlagsBits = 539831584;
      v45._object = (void *)0xE400000000000000;
      String.append(_:)(v45);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v41, v43, v42);
      outlined consume of URL?(v41);
      return (uint64_t)v46;
    }
    return (uint64_t)v7;
  }
LABEL_32:
  __break(1u);
  return result;
}

BOOL _bridgeNSErrorToError<A>(_:out:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v20 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  double v14 = MEMORY[0x1F4188790](v13);
  id v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 16))(a1, a3, a4, v14);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3);
  if (v17 == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    id v18 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v18(v16, v11, a3);
    v18(a2, v16, a3);
  }
  return v17 != 1;
}

uint64_t _BridgedStoredNSError.init(_bridgedNSError:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8 = objc_msgSend(a1, sel_domain);
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  if (v9 == (id)(*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 16))(a2) && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {

      uint64_t v15 = 1;
      goto LABEL_9;
    }
  }
  (*(void (**)(void *, uint64_t, uint64_t))(a3 + 72))(a1, a2, a3);
  uint64_t v15 = 0;
LABEL_9:
  id v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);

  return v16(a4, v15, 1, a2);
}

uint64_t base witness table accessor for Equatable in ComparableComparator<A>()
{
  return swift_getWitnessTable();
}

uint64_t closure #1 in NSURLSession.data(for:delegate:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in NSURLSession.data(for:delegate:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = *(void *)(v0 + 40);
  unint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *uint64_t v4 = v0;
  v4[1] = closure #1 in NSURLSession.data(for:delegate:);
  id v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000013, 0x80000001823ADC30, partial apply for closure #1 in closure #1 in NSURLSession.data(for:delegate:), v3, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _CalendarICU.__deallocating_deinit()
{
  ucal_close();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

void NSDeallocateObject(id object)
{
  name[1] = *(char **)MEMORY[0x1E4F143B8];
  if (object)
  {
    if (NSZombieEnabled)
    {
      Class = object_getClass(object);
      name[0] = 0;
      uint64_t v3 = class_getName(Class);
      asprintf(name, "_NSZombie_%s", v3);
      uint64_t v4 = objc_lookUpClass(name[0]);
      if (!v4)
      {
        uint64_t v5 = objc_lookUpClass("_NSZombie_");
        uint64_t v4 = objc_duplicateClass(v5, name[0], 0);
      }
      free(name[0]);
      if (NSDeallocateZombies)
      {
        object_setClass(object, v4);
        object_dispose(object);
      }
      else
      {
        objc_destructInstance(object);
        object_setClass(object, v4);
      }
    }
    else
    {
      object_dispose(object);
    }
  }
}

void static String.Encoding.ascii.getter(void *a1@<X8>)
{
  *a1 = 1;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingFormat.Map : PlistDecodingMap in _XMLPlistDecodingFormat()
{
  return &protocol witness table for XMLPlistMap;
}

id static Locale._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v2 = result;
    type metadata accessor for _NSSwiftLocale();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      uint64_t result = (id)swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _LocaleBridged();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v2;
      uint64_t v6 = _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
      uint64_t result = v2;
    }
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*PropertyListDecoder.userInfo.modify(void *a1))(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  return PropertyListDecoder.userInfo.modify;
}

Swift::Void __swiftcall URLRequest.setValue(_:forHTTPHeaderField:)(Swift::String_optional _, Swift::String forHTTPHeaderField)
{
  object = _.value._object;
  uint64_t countAndFlagsBits = _.value._countAndFlagsBits;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  specialized URLRequest._applyMutation<A>(_:)(v2, countAndFlagsBits, (uint64_t)object);
}

uint64_t JSONEncoder.keyEncodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  unint64_t v5 = v1[14];
  v1[14] = v2;
  v1[15] = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);

  return swift_release();
}

ValueMetadata *type metadata accessor for Locale.Script()
{
  return &type metadata for Locale.Script;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.DateFieldCollection()
{
  return &type metadata for Date.FormatStyle.DateFieldCollection;
}

void *type metadata accessor for LoadedScopeCache.ScopeType()
{
  return &unk_1ECA38D90;
}

uint64_t static MeasurementFormatUnitUsage.== infix(_:_:)(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 0x746C7561666564;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x746C7561666564;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x6E6F73726570;
      break;
    case 2:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v5 = 1685024614;
      break;
    case 3:
      uint64_t v5 = 0x682D6E6F73726570;
      unint64_t v4 = 0xED00007468676965;
      break;
    case 4:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v5 = 1684107122;
      break;
    case 5:
      uint64_t v5 = 0x656C2D6C61636F66;
      unint64_t v4 = 0xEC0000006874676ELL;
      break;
    case 6:
      unint64_t v4 = 0xE800000000000000;
      unsigned int v6 = 1852399986;
      goto LABEL_9;
    case 7:
      unint64_t v4 = 0xE800000000000000;
      unsigned int v6 = 2003791475;
LABEL_9:
      uint64_t v5 = v6 | 0x6C6C616600000000;
      break;
    case 8:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v5 = 0x79746C6269736976;
      break;
    case 9:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v5 = 0x6372746D6F726162;
      break;
    case 10:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v5 = 1684957559;
      break;
    case 11:
      uint64_t v5 = 0x72656874616577;
      break;
    case 12:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v5 = 0x6469756C66;
      break;
    case 13:
      uint64_t v5 = 0x6469766F72507361;
      unint64_t v4 = 0xEA00000000006465;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE700000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v7 = 0xE600000000000000;
      if (v5 == 0x6E6F73726570) {
        goto LABEL_41;
      }
      goto LABEL_44;
    case 2:
      unint64_t v7 = 0xE400000000000000;
      if (v5 != 1685024614) {
        goto LABEL_44;
      }
      goto LABEL_41;
    case 3:
      unint64_t v7 = 0xED00007468676965;
      if (v5 != 0x682D6E6F73726570) {
        goto LABEL_44;
      }
      goto LABEL_41;
    case 4:
      unint64_t v7 = 0xE400000000000000;
      if (v5 != 1684107122) {
        goto LABEL_44;
      }
      goto LABEL_41;
    case 5:
      unint64_t v7 = 0xEC0000006874676ELL;
      if (v5 != 0x656C2D6C61636F66) {
        goto LABEL_44;
      }
      goto LABEL_41;
    case 6:
      unint64_t v7 = 0xE800000000000000;
      unsigned int v8 = 1852399986;
      goto LABEL_29;
    case 7:
      unint64_t v7 = 0xE800000000000000;
      unsigned int v8 = 2003791475;
LABEL_29:
      if (v5 != (v8 | 0x6C6C616600000000)) {
        goto LABEL_44;
      }
      goto LABEL_41;
    case 8:
      unint64_t v7 = 0xE800000000000000;
      if (v5 != 0x79746C6269736976) {
        goto LABEL_44;
      }
      goto LABEL_41;
    case 9:
      unint64_t v7 = 0xE800000000000000;
      if (v5 != 0x6372746D6F726162) {
        goto LABEL_44;
      }
      goto LABEL_41;
    case 0xA:
      unint64_t v7 = 0xE400000000000000;
      if (v5 != 1684957559) {
        goto LABEL_44;
      }
      goto LABEL_41;
    case 0xB:
      if (v5 != 0x72656874616577) {
        goto LABEL_44;
      }
      goto LABEL_41;
    case 0xC:
      unint64_t v7 = 0xE500000000000000;
      uint64_t v2 = 0x6469756C66;
      goto LABEL_40;
    case 0xD:
      unint64_t v7 = 0xEA00000000006465;
      if (v5 != 0x6469766F72507361) {
        goto LABEL_44;
      }
      goto LABEL_41;
    default:
LABEL_40:
      if (v5 != v2) {
        goto LABEL_44;
      }
LABEL_41:
      if (v4 == v7) {
        char v9 = 1;
      }
      else {
LABEL_44:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

void URL.appendingPathComponent(_:isDirectory:)(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v10 = *(void **)v4;
  char v9 = *(unsigned char **)(v4 + 8);
  uint64_t v11 = *(void *)(v4 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (_foundation_swift_url_feature_enabled())
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, a2, (a3 & 1) == 0, 0, v10, v9, v11, (void *)a4);
      return;
    }
    v14._uint64_t countAndFlagsBits = 47;
    v14._object = (void *)0xE100000000000000;
    String.hasSuffix(_:)(v14);
    *(void *)int64_t v98 = a1;
    *(void *)&v98[8] = a2;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v15 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(v10, sel_URLByAppendingPathComponent_isDirectory_, v15, a3 & 1);
    swift_unknownObjectRelease();
    if (v12)
    {
LABEL_7:
      URL.init(reference:)(v12, v98);

      long long v13 = *(_OWORD *)&v98[8];
      *(void *)a4 = *(void *)v98;
      *(_OWORD *)(a4 + 8) = v13;
      return;
    }
    *(void *)int64_t v98 = v10;
    *(void *)&v98[8] = v9;
    *(void *)&v98[16] = v11;
    uint64_t v18 = URL.absoluteString.getter();
    specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v18, v19, 1, (uint64_t)v88);
    outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)v87, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)&v89, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v89) == 1)
    {
LABEL_13:
      *(void *)a4 = v10;
      *(void *)(a4 + 8) = v9;
      *(void *)(a4 + 16) = v11;
      swift_retain();
      id v20 = v10;
      swift_retain();
      return;
    }
    long long v99 = v95;
    *(_OWORD *)int64_t v100 = v96;
    *(_OWORD *)&v100[16] = v97[0];
    *(_OWORD *)&v100[26] = *(_OWORD *)((char *)v97 + 10);
    *(_OWORD *)&v98[32] = v91;
    *(_OWORD *)&v98[48] = v92;
    *(_OWORD *)&v98[64] = v93;
    *(_OWORD *)&v98[80] = v94;
    *(_OWORD *)int64_t v98 = v89;
    *(_OWORD *)&v98[16] = v90;
    outlined init with take of LocalePreferences?((uint64_t)v87, (uint64_t)v86, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v86);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v88);
    id v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v75 = a1;
    unint64_t v76 = (unint64_t)a2;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v31 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v32 = objc_msgSend(v30, sel_stringByAppendingPathComponent_, v31);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v33 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    unint64_t v35 = v34;

    if ((v35 & 0x2000000000000000) != 0) {
      unint64_t v36 = HIBYTE(v35) & 0xF;
    }
    else {
      unint64_t v36 = v33 & 0xFFFFFFFFFFFFLL;
    }
    outlined init with take of LocalePreferences?((uint64_t)&v99 + 8, (uint64_t)v101, &demangling cache variable for type metadata for String?);
    if (v36)
    {
      swift_bridgeObjectRetain();
      unint64_t v36 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v33, v35);
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v38 = 0xE000000000000000;
    }
    outlined release of String((uint64_t)v101);
    if ((a3 & 1) != 0
      && (v51._uint64_t countAndFlagsBits = 47, v51._object = (void *)0xE100000000000000, !String.hasSuffix(_:)(v51)))
    {
      unint64_t v75 = v33;
      unint64_t v76 = v35;
      swift_bridgeObjectRetain();
      v53._uint64_t countAndFlagsBits = 47;
      v53._object = (void *)0xE100000000000000;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      unint64_t v54 = HIBYTE(v35) & 0xF;
      if ((v35 & 0x2000000000000000) == 0) {
        unint64_t v54 = v75 & 0xFFFFFFFFFFFFLL;
      }
      if (v54)
      {
        unint64_t v36 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v75, v76);
        unint64_t v56 = v55;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v38 = v56;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v36 = 0;
        unint64_t v38 = 0xE000000000000000;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unint64_t v75 = *(void *)v98;
    LOBYTE(v76) = 0;
    *(_DWORD *)((char *)&v76 + 1) = *(_DWORD *)&v98[9];
    *(_WORD *)((char *)&v76 + 5) = v98[13];
    HIBYTE(v76) = v98[15];
    char v77 = v98[16];
    *(_OWORD *)unint64_t v78 = *(_OWORD *)&v98[24];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v98[40];
    *(_OWORD *)&v78[32] = *(_OWORD *)&v98[56];
    *(_OWORD *)&v78[48] = *(_OWORD *)&v98[72];
    *(void *)&v78[64] = *(void *)&v98[88];
    char v79 = v99;
    unint64_t v80 = v36;
    unint64_t v81 = v38;
    long long v82 = *(_OWORD *)&v100[8];
    long long v83 = *(_OWORD *)&v100[24];
    char v84 = v100[40];
    char v85 = v100[41];
    URLComponents.url.getter((uint64_t *)&v72);
    outlined release of URLComponents((uint64_t)&v75);
    id v52 = v72;
    if (v72)
    {
      char v9 = v73;
      uint64_t v11 = v74;
    }
    else
    {
      swift_retain();
      id v52 = v10;
      swift_retain();
    }
    *(void *)a4 = v52;
    *(void *)(a4 + 8) = v9;
    *(void *)(a4 + 16) = v11;
  }
  else
  {
    uint64_t v71 = v11;
    id v12 = objc_msgSend(v10, sel_URLByAppendingPathComponent_isDirectory_, String._bridgeToObjectiveCImpl()(), a3 & 1);
    swift_unknownObjectRelease();
    if (v12) {
      goto LABEL_7;
    }
    *(void *)int64_t v98 = v10;
    *(void *)&v98[8] = v9;
    *(void *)&v98[16] = v11;
    uint64_t v16 = URL.absoluteString.getter();
    specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v16, v17, 1, (uint64_t)v88);
    outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)v87, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)&v89, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v89) == 1) {
      goto LABEL_13;
    }
    long long v99 = v95;
    *(_OWORD *)int64_t v100 = v96;
    *(_OWORD *)&v100[16] = v97[0];
    *(_OWORD *)&v100[26] = *(_OWORD *)((char *)v97 + 10);
    *(_OWORD *)&v98[32] = v91;
    *(_OWORD *)&v98[48] = v92;
    *(_OWORD *)&v98[64] = v93;
    *(_OWORD *)&v98[80] = v94;
    *(_OWORD *)int64_t v98 = v89;
    *(_OWORD *)&v98[16] = v90;
    outlined init with take of LocalePreferences?((uint64_t)v87, (uint64_t)v86, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v86);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v88);
    uint64_t v21 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v22 = objc_msgSend(v21, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v23 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    unint64_t v25 = v24;

    if (a3)
    {
      unint64_t v75 = v23;
      unint64_t v76 = v25;
      swift_bridgeObjectRetain();
      v26._uint64_t countAndFlagsBits = 47;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
    }
    uint64_t v27 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0) {
      uint64_t v27 = v23 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v57 = v10;
    if (v27)
    {
      unint64_t v28 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v23, v25);
      unint64_t v58 = v29;
      unint64_t v59 = v28;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v58 = 0xE000000000000000;
      unint64_t v59 = 0;
    }
    char v69 = v100[40];
    char v70 = v100[41];
    uint64_t v67 = *(void *)&v100[32];
    uint64_t v68 = *(void *)&v100[24];
    uint64_t v65 = *(void *)&v100[16];
    uint64_t v66 = *(void *)&v100[8];
    char v64 = v99;
    long long v63 = *(_OWORD *)&v98[80];
    long long v62 = *(_OWORD *)&v98[64];
    long long v61 = *(_OWORD *)&v98[48];
    uint64_t v39 = *(void *)&v98[24];
    long long v60 = *(_OWORD *)&v98[32];
    char v40 = v98[16];
    char v41 = v98[15];
    unsigned __int8 v42 = v98[13];
    char v43 = v98[12];
    char v44 = v98[11];
    char v45 = v98[10];
    char v46 = v98[9];
    unint64_t v47 = *(void *)v98;
    outlined init with take of LocalePreferences?((uint64_t)&v99 + 8, (uint64_t)v101, &demangling cache variable for type metadata for String?);
    outlined release of String((uint64_t)v101);
    unint64_t v75 = v47;
    LOBYTE(v76) = 0;
    BYTE1(v76) = v46;
    BYTE2(v76) = v45;
    BYTE3(v76) = v44;
    BYTE4(v76) = v43;
    *(_WORD *)((char *)&v76 + 5) = v42;
    HIBYTE(v76) = v41;
    char v77 = v40;
    *(void *)unint64_t v78 = v39;
    *(_OWORD *)&v78[8] = v60;
    *(_OWORD *)&v78[24] = v61;
    *(_OWORD *)&v78[40] = v62;
    *(_OWORD *)&v78[56] = v63;
    char v79 = v64;
    unint64_t v80 = v59;
    unint64_t v81 = v58;
    *(void *)&long long v82 = v66;
    *((void *)&v82 + 1) = v65;
    *(void *)&long long v83 = v68;
    *((void *)&v83 + 1) = v67;
    char v84 = v69;
    char v85 = v70;
    URLComponents.url.getter((uint64_t *)&v72);
    outlined release of URLComponents((uint64_t)&v75);
    id v48 = v72;
    if (v72)
    {
      uint64_t v49 = (uint64_t)v73;
      uint64_t v50 = v74;
    }
    else
    {
      uint64_t v50 = v71;
      swift_retain();
      id v48 = v57;
      uint64_t v49 = swift_retain();
    }
    *(void *)a4 = v48;
    *(void *)(a4 + 8) = v49;
    *(void *)(a4 + 16) = v50;
  }
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  void *v1 = v0;
  v1[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator;
  uint64_t v2 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188148](v2, closure #1 in NSNotificationCenter.Notifications.Iterator.next()partial apply);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator, 0, 0);
}

uint64_t partial apply for closure #1 in NSURLSession.data(for:delegate:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 40) = v4;
  *(void *)(v6 + 48) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.data(for:delegate:), 0, 0);
}

void _initUbiquityIdentityDidChange()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[NSFileManager defaultManager];
  if (([(NSFileManager *)v0 _processHasUbiquityContainerEntitlement]
     || [(NSFileManager *)v0 _processUsesCloudServices])
    && [(NSFileManager *)v0 _processCanAccessUbiquityIdentityToken])
  {
    if (qword_1EB1ECEC8 != -1)
    {
      dispatch_once(&qword_1EB1ECEC8, &__block_literal_global_652);
    }
  }
  else
  {
    uint64_t v1 = _NSOSLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl(&dword_181795000, v1, OS_LOG_TYPE_INFO, "Registering for NSUbiquityIdentityDidChangeNotification without the necessary entitlements", v2, 2u);
    }
  }
}

uint64_t _NSFCProviderLog()
{
  if (qword_1EB1EDDD0 != -1) {
    dispatch_once(&qword_1EB1EDDD0, &__block_literal_global_922);
  }
  return qword_1EB1EDD48;
}

uint64_t _NSSetThreadSpecificMaterializationState(int a1, int *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v4 = getiopolicy_np(3, 1);
  if (v4 == -1)
  {
    if (qword_1EB1EDDD0 != -1) {
      dispatch_once(&qword_1EB1EDDD0, &__block_literal_global_922);
    }
    uint64_t v11 = qword_1EB1EDD30;
    if (!os_log_type_enabled((os_log_t)qword_1EB1EDD30, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    int v13 = *__error();
    int v14 = 67109120;
    int v15 = v13;
    unsigned int v8 = "Failed to get thread materialization iopolicy value: %{darwin.errno}d";
    uint64_t v9 = v11;
    uint32_t v10 = 8;
    goto LABEL_14;
  }
  *a2 = v4;
  uint64_t v5 = 1;
  if (v4 != a1 && setiopolicy_np(3, 1, a1))
  {
    if (qword_1EB1EDDD0 != -1) {
      dispatch_once(&qword_1EB1EDDD0, &__block_literal_global_922);
    }
    uint64_t v6 = qword_1EB1EDD30;
    if (!os_log_type_enabled((os_log_t)qword_1EB1EDD30, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    int v7 = *__error();
    int v14 = 67109376;
    int v15 = a1;
    __int16 v16 = 1024;
    int v17 = v7;
    unsigned int v8 = "Failed to set thread materialization iopolicy value (%d): %{darwin.errno}d";
    uint64_t v9 = v6;
    uint32_t v10 = 14;
LABEL_14:
    _os_log_error_impl(&dword_181795000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v14, v10);
    return 0;
  }
  return v5;
}

NSFileAccessArbiterProxy *NSFileCoordinatorSharedAccessArbiter()
{
  v1[5] = *MEMORY[0x1E4F143B8];
  uint64_t result = (NSFileAccessArbiterProxy *)qword_1EB1EDDB8;
  if (!qword_1EB1EDDB8)
  {
    if (qword_1EB1EDDA0)
    {
      uint64_t result = __NSFileCoordinatorSharedAccessArbiter_block_invoke();
      qword_1EB1EDDB8 = (uint64_t)result;
    }
    else
    {
      v1[0] = MEMORY[0x1E4F143A8];
      v1[1] = 3221225472;
      v1[2] = __NSFileCoordinatorSharedAccessArbiter_block_invoke_2;
      v1[3] = &unk_1E51F8650;
      v1[4] = &__block_literal_global_932;
      if (qword_1EB1EDDD8 != -1) {
        dispatch_once(&qword_1EB1EDDD8, v1);
      }
      return (NSFileAccessArbiterProxy *)qword_1EB1EDDE0;
    }
  }
  return result;
}

void sub_1819D9080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1819D9E70()
{
}

void sub_1819D9ED4()
{
}

void sub_1819DA690(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    if (v3) {
      free(v2);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1819DA6BC(_Unwind_Exception *a1)
{
}

void _doPatternNormalization(const __CFString *a1, void **a2, unsigned __int8 *a3, int a4, CFStringRef *a5, CFStringCompareFlags a6, CFIndex *a7, size_t a8, CFStringNormalizationForm theForm)
{
  uint32_t v10 = a7;
  CFStringCompareFlags v46 = a6;
  int v13 = a3;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v15 = (UniChar *)*a2;
  int v16 = *a3;
  CFIndex v17 = *a7;
  bzero(*a2, a8);
  v63.location = 0;
  v63.length = v17;
  CFStringGetCharacters(a1, v63, v15);
  CFStringCompareFlags v18 = v46;
  v15[v17] = 0;
  *a5 = CFStringCreateWithCharacters(0, v15, v17);
  if (a4)
  {
    +[_NSPredicateOperatorUtilities copyRegexFindSafePattern:a1 toBuffer:v15];
    CFIndex v17 = u_strlen(v15);
  }
  CFMutableStringRef MutableWithExternalCharactersNoCopy = CFStringCreateMutableWithExternalCharactersNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v15, v17, a8, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (v18)
  {
    if ((v18 & 0x100) != 0)
    {
      self;
      CFIndex Length = CFStringGetLength(MutableWithExternalCharactersNoCopy);
      CFStringRef theString = MutableWithExternalCharactersNoCopy;
      uint64_t v58 = 0;
      CFIndex v59 = Length;
      CharactersPtr = CFStringGetCharactersPtr(MutableWithExternalCharactersNoCopy);
      char v44 = v13;
      char v43 = v10;
      if (CharactersPtr) {
        CStringPtr = 0;
      }
      else {
        CStringPtr = CFStringGetCStringPtr(MutableWithExternalCharactersNoCopy, 0x600u);
      }
      int64_t v60 = 0;
      int64_t v61 = 0;
      uint64_t v57 = CStringPtr;
      if (Length >= 1)
      {
        int64_t v22 = 0;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        CFIndex v23 = -Length;
        CFIndex v24 = Length + 64;
        long long v49 = 0u;
        long long v50 = 0u;
        unint64_t v25 = Length;
        *(_OWORD *)buffer = 0u;
        long long v48 = 0u;
        do
        {
          int64_t v26 = v25;
          if (v25 >= 5) {
            uint64_t v27 = 5;
          }
          else {
            uint64_t v27 = v25;
          }
          --v25;
          CFIndex v28 = v59;
          if (v59 >= v26)
          {
            if (CharactersPtr)
            {
              UniChar v29 = CharactersPtr[v26 - 1 + v58];
            }
            else if (v57)
            {
              UniChar v29 = v57[v58 - 1 + v26];
            }
            else
            {
              BOOL v30 = v61 >= v26 && v22 < v26;
              if (!v30)
              {
                uint64_t v31 = v27 + v23;
                CFIndex v32 = v24 - v27;
                int64_t v33 = v26 - v27;
                CFIndex v34 = v33 + 64;
                if (v33 + 64 >= v59) {
                  CFIndex v34 = v59;
                }
                int64_t v60 = v33;
                int64_t v61 = v34;
                if (v59 >= v32) {
                  CFIndex v28 = v32;
                }
                v64.length = v28 + v31;
                v64.location = v33 + v58;
                CFStringGetCharacters(theString, v64, buffer);
                int64_t v22 = v60;
              }
              UniChar v29 = buffer[v26 - 1 - v22];
            }
            int v35 = v29;
            unsigned int v36 = v29 - 65284;
            BOOL v30 = v36 > 0x3A;
            uint64_t v37 = (1 << v36) & 0x580000008000CF1;
            if (!v30 && v37 != 0 || (v35 - 65371) < 3)
            {
              CFStringInsert(MutableWithExternalCharactersNoCopy, v25, @"\\"");
              CFStringRef theString = MutableWithExternalCharactersNoCopy;
              uint64_t v58 = 0;
              CFIndex v59 = Length;
              CharactersPtr = CFStringGetCharactersPtr(MutableWithExternalCharactersNoCopy);
              if (CharactersPtr) {
                char v40 = 0;
              }
              else {
                char v40 = CFStringGetCStringPtr(MutableWithExternalCharactersNoCopy, 0x600u);
              }
              int64_t v22 = 0;
              uint64_t v57 = v40;
              int64_t v60 = 0;
              int64_t v61 = 0;
            }
          }
          ++v23;
          --v24;
        }
        while (v25 + 1 > 1);
      }
      int v13 = v44;
      uint32_t v10 = v43;
      CFStringCompareFlags v18 = v46;
    }
    CFStringFold(MutableWithExternalCharactersNoCopy, v18, 0);
  }
  CFStringNormalize(MutableWithExternalCharactersNoCopy, theForm);
  if (CFStringGetCharactersPtr(MutableWithExternalCharactersNoCopy) == v15)
  {
    CFIndex v41 = CFStringGetLength(MutableWithExternalCharactersNoCopy);
  }
  else
  {
    if (v16) {
      free(v15);
    }
    CFIndex v41 = CFStringGetLength(MutableWithExternalCharactersNoCopy);
    unsigned __int8 v42 = (UniChar *)malloc_type_malloc(2 * v41 + 2, 0x1000040BDFB0063uLL);
    *a2 = v42;
    *int v13 = 1;
    v65.location = 0;
    v65.length = v41;
    CFStringGetCharacters(MutableWithExternalCharactersNoCopy, v65, v42);
    v42[v41] = 0;
  }
  *uint32_t v10 = v41;
  CFRelease(MutableWithExternalCharactersNoCopy);
}

void sub_1819DAAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12)
{
  int v16 = v14;
  if (a2 == 1)
  {
    id v15 = objc_begin_catch(exception_object);
    if (v16) {
      free(v13);
    }
    *id v12 = 0;
    objc_exception_throw(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t StringProtocol.localizedStandardRange<A>(of:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  v13[0] = LocaleCache.current.getter();
  v13[1] = v10;
  uint64_t v11 = StringProtocol.range<A>(of:options:range:locale:)(a1, 0x81uLL, 0, 0, 1, v13, a2, a3, a4, a5);
  swift_unknownObjectRelease();
  return v11;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt8(void *a1, unsigned char *a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  return v5 & 1;
}

uint64_t type metadata accessor for PredicateExpressions.TypeCheck()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.ForceCast()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.Negation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.Filter()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.Range()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.DictionaryKeyDefaultValueSubscript()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.StringLocalizedStandardContains()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.StringCaseInsensitiveCompare()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.CollectionRangeSubscript()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.CollectionIndexSubscript()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.RangeExpressionContains()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.StringLocalizedCompare()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.DictionaryKeySubscript()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.SequenceContainsWhere()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.StringContainsRegex()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.SequenceStartsWith()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.SequenceMinimum()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.SequenceMaximum()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.ConditionalCast()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.FloatDivision()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.IntRemainder()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.ForcedUnwrap()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.NilCoalesce()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.IntDivision()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.Disjunction()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.Conditional()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.ClosedRange()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.UnaryMinus()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.Arithmetic()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.PredicateEvaluate()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.CollectionContainsCollection()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AttributeContainer.Builder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for KeyPathComparator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Expression()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for ListFormatStyle(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_unknownObjectRelease();
}

uint64_t *assignWithTake for Data._Representation(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t partial apply for closure #1 in _LocaleICU.currencySymbol.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _LocaleICU.decimalSeparator.getter(v1, a1);
}

uint64_t Locale.decimalSeparator.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 224))(ObjectType, v1);
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 224))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.decimalSeparator.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.decimalSeparator.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _LocaleICU.decimalSeparator.getter(v1, a1);
}

uint64_t closure #1 in _LocaleICU.decimalSeparator.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v12[18] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v11);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v12) == 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v12[14];
    swift_bridgeObjectRetain();
  }
  uint64_t v6 = _LocaleICU.State.NumberFormattersBox.formatter(for:identifier:numberSymbols:)(1, v4, v3, v5);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    MEMORY[0x1F4188790](result);
    v10[19] = 0;
    int Symbol = unum_getSymbol();
    uint64_t result = 0;
    uint64_t v9 = 0;
    if (Symbol <= 32 && Symbol > 0) {
      uint64_t result = specialized String.init(_utf16:)((uint64_t)v10, Symbol);
    }
    *a2 = result;
    a2[1] = v9;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t protocol witness for _LocaleProtocol.currencyCode.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencyCode.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.currencyCode.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _LocaleICU.currencyCode.getter(v1, a1);
}

uint64_t closure #1 in _LocaleICU.currencyCode.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v12[18] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v11);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v12) == 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v12[14];
    swift_bridgeObjectRetain();
  }
  uint64_t v6 = _LocaleICU.State.NumberFormattersBox.formatter(for:identifier:numberSymbols:)(2, v4, v3, v5);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    MEMORY[0x1F4188790](result);
    v10[133] = 0;
    int TextAttribute = unum_getTextAttribute();
    uint64_t result = 0;
    uint64_t v9 = 0;
    if (TextAttribute <= 257 && TextAttribute > 0) {
      uint64_t result = specialized String.init(_utf16:)((uint64_t)v10, TextAttribute);
    }
    *a2 = result;
    a2[1] = v9;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *_LocaleICU.State.NumberFormattersBox.formatter(for:identifier:numberSymbols:)(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v64[5] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *v4;
  if (*(void *)(v8 + 16))
  {
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v10) {
      return *(void **)(*(void *)(v8 + 56) + 8 * v9);
    }
  }
  String.utf8CString.getter();
  id v12 = (void *)unum_open();
  swift_release();
  if (!v12) {
    return 0;
  }
  int64_t v13 = a1;
  if (unum_getAttribute() != 1) {
    unum_setAttribute();
  }
  unum_setAttribute();
  unum_setContext();
  uint64_t v63 = (uint64_t)v12;
  if (!a4)
  {
LABEL_43:
    id v12 = v61;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v64[0] = *v61;
    a2 = v64[0];
    void *v61 = 0x8000000000000000;
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    uint64_t v34 = *(void *)(a2 + 16);
    BOOL v35 = (v33 & 1) == 0;
    BOOL v36 = __OFADD__(v34, v35);
    uint64_t v37 = v34 + v35;
    if (v36) {
      goto LABEL_56;
    }
    LOBYTE(a4) = v33;
    if (*(void *)(a2 + 24) < v37)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
      uint64_t v38 = v64[0];
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((a4 & 1) == (v39 & 1)) {
        goto LABEL_49;
      }
      unint64_t v18 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_57;
    }
    uint64_t v38 = a2;
LABEL_49:
    if ((a4 & 1) == 0)
    {
LABEL_90:
      specialized _NativeDictionary._insert(at:key:value:)(v18, v13, v63, (void *)v38);
      goto LABEL_91;
    }
LABEL_50:
    *(void *)(*(void *)(v38 + 56) + 8 * v18) = v63;
LABEL_91:
    *id v12 = v38;
    swift_bridgeObjectRelease();
    return (void *)v63;
  }
  unsigned int v60 = a1;
  uint64_t v62 = a4 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(a4 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  unint64_t v18 = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  if (!v16) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    a2 = *(unsigned int *)(*(void *)(a4 + 48) + 4 * i);
    CFIndex v24 = (uint64_t *)(*(void *)(a4 + 56) + 16 * i);
    uint64_t v26 = *v24;
    unint64_t v25 = v24[1];
    if ((v25 & 0x1000000000000000) != 0)
    {
      unint64_t v18 = String.UTF16View._foreignCount()();
      uint64_t v27 = v18;
      if (!v18)
      {
LABEL_36:
        CFIndex v28 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v18 = String.UTF16View._nativeGetOffset(for:)();
      uint64_t v27 = v18;
      if (!v18) {
        goto LABEL_36;
      }
    }
    if (v27 < 1)
    {
      CFIndex v28 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      CFIndex v28 = (void *)swift_allocObject();
      int64_t v29 = _swift_stdlib_malloc_size(v28);
      int64_t v30 = v29 - 32;
      if (v29 < 32) {
        int64_t v30 = v29 - 31;
      }
      v28[2] = v27;
      v28[3] = v30 & 0xFFFFFFFFFFFFFFFELL;
    }
    swift_bridgeObjectRetain_n();
    id v12 = (void *)specialized Sequence._copySequenceContents(initializing:)((uint64_t)v64, (uint64_t)(v28 + 4), v27, v26, v25);
    unint64_t v18 = swift_bridgeObjectRelease();
    if (v12 != (void *)v27) {
      goto LABEL_53;
    }
    unint64_t v18 = swift_bridgeObjectRelease();
    id v12 = (void *)v63;
LABEL_37:
    unint64_t v31 = v28[2];
    LODWORD(v64[0]) = 0;
    if ((a2 & 0x80000000) != 0) {
      break;
    }
    if (v31 >> 31) {
      goto LABEL_52;
    }
    unum_setSymbol();
    unint64_t v18 = swift_release();
    if (v16) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_54;
    }
    if (v21 >= v17)
    {
LABEL_42:
      swift_release();
      int64_t v13 = v60;
      goto LABEL_43;
    }
    unint64_t v22 = *(void *)(v62 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_42;
      }
      unint64_t v22 = *(void *)(v62 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_42;
        }
        unint64_t v22 = *(void *)(v62 + 8 * v13);
        if (!v22)
        {
          int64_t v23 = v21 + 3;
          if (v23 >= v17) {
            goto LABEL_42;
          }
          unint64_t v22 = *(void *)(v62 + 8 * v23);
          if (!v22)
          {
            while (1)
            {
              int64_t v13 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_55;
              }
              if (v13 >= v17) {
                goto LABEL_42;
              }
              unint64_t v22 = *(void *)(v62 + 8 * v13);
              ++v23;
              if (v22) {
                goto LABEL_25;
              }
            }
          }
          int64_t v13 = v23;
        }
      }
    }
LABEL_25:
    unint64_t v16 = (v22 - 1) & v22;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  unint64_t v40 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, UnsafeMutablePointer<UnsafeMutableRawPointer?>>);
  uint64_t v41 = static _DictionaryStorage.copy(original:)();
  uint64_t v38 = v41;
  if (!*(void *)(a2 + 16))
  {
LABEL_89:
    swift_bridgeObjectRelease();
    unint64_t v18 = v40;
    if ((a4 & 1) == 0) {
      goto LABEL_90;
    }
    goto LABEL_50;
  }
  uint64_t result = (void *)(v41 + 64);
  uint64_t v42 = a2 + 64;
  unint64_t v43 = (unint64_t)((1 << *(unsigned char *)(v38 + 32)) + 63) >> 6;
  if (v38 != a2 || (unint64_t)result >= v42 + 8 * v43) {
    uint64_t result = memmove(result, (const void *)(a2 + 64), 8 * v43);
  }
  int64_t v44 = 0;
  *(void *)(v38 + 16) = *(void *)(a2 + 16);
  uint64_t v45 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & *(void *)(a2 + 64);
  int64_t v48 = (unint64_t)(v45 + 63) >> 6;
  while (2)
  {
    if (v47)
    {
      unint64_t v49 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      unint64_t v50 = v49 | (v44 << 6);
LABEL_65:
      uint64_t v51 = 4 * v50;
      int v52 = *(_DWORD *)(*(void *)(a2 + 48) + 4 * v50);
      uint64_t v53 = 8 * v50;
      uint64_t v54 = *(void *)(*(void *)(a2 + 56) + v53);
      *(_DWORD *)(*(void *)(v38 + 48) + v51) = v52;
      *(void *)(*(void *)(v38 + 56) + v53) = v54;
      continue;
    }
    break;
  }
  int64_t v55 = v44 + 1;
  if (__OFADD__(v44, 1))
  {
    __break(1u);
    goto LABEL_93;
  }
  if (v55 >= v48) {
    goto LABEL_89;
  }
  unint64_t v56 = *(void *)(v42 + 8 * v55);
  ++v44;
  if (v56) {
    goto LABEL_88;
  }
  int64_t v44 = v55 + 1;
  if (v55 + 1 >= v48) {
    goto LABEL_89;
  }
  unint64_t v56 = *(void *)(v42 + 8 * v44);
  if (v56) {
    goto LABEL_88;
  }
  int64_t v44 = v55 + 2;
  if (v55 + 2 >= v48) {
    goto LABEL_89;
  }
  unint64_t v56 = *(void *)(v42 + 8 * v44);
  if (v56) {
    goto LABEL_88;
  }
  int64_t v44 = v55 + 3;
  if (v55 + 3 >= v48) {
    goto LABEL_89;
  }
  unint64_t v56 = *(void *)(v42 + 8 * v44);
  if (v56) {
    goto LABEL_88;
  }
  int64_t v44 = v55 + 4;
  if (v55 + 4 >= v48) {
    goto LABEL_89;
  }
  unint64_t v56 = *(void *)(v42 + 8 * v44);
  if (v56) {
    goto LABEL_88;
  }
  int64_t v44 = v55 + 5;
  if (v55 + 5 >= v48) {
    goto LABEL_89;
  }
  unint64_t v56 = *(void *)(v42 + 8 * v44);
  if (v56) {
    goto LABEL_88;
  }
  int64_t v44 = v55 + 6;
  if (v55 + 6 >= v48) {
    goto LABEL_89;
  }
  unint64_t v56 = *(void *)(v42 + 8 * v44);
  if (v56)
  {
LABEL_88:
    unint64_t v47 = (v56 - 1) & v56;
    unint64_t v50 = __clz(__rbit64(v56)) + (v44 << 6);
    goto LABEL_65;
  }
  int64_t v57 = v55 + 7;
  if (v57 >= v48) {
    goto LABEL_89;
  }
  int64_t v58 = v13;
  uint64_t v59 = v42;
  unint64_t v56 = *(void *)(v42 + 8 * v57);
  if (v56)
  {
    int64_t v44 = v57;
    id v12 = v61;
    goto LABEL_88;
  }
  while (1)
  {
    int64_t v44 = v57 + 1;
    if (__OFADD__(v57, 1)) {
      break;
    }
    id v12 = v61;
    int64_t v13 = v58;
    if (v44 >= v48) {
      goto LABEL_89;
    }
    uint64_t v42 = v59;
    unint64_t v56 = *(void *)(v59 + 8 * v44);
    ++v57;
    if (v56) {
      goto LABEL_88;
    }
  }
LABEL_93:
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x185303FF0](*(void *)(v1 + 40), a1, 4);

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t @objc _NSSwiftCalendar.isDateInYesterday(_:)(void *a1, int a2, id a3, uint64_t (*a4)(uint64_t *))
{
  objc_msgSend(a3, sel_timeIntervalSinceReferenceDate);
  uint64_t v9 = v6;
  id v7 = a1;
  LOBYTE(a4) = _NSSwiftCalendar.isDateInToday(_:)(&v9, a4);

  return a4 & 1;
}

uint64_t _NSSwiftCalendar.isDateInToday(_:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v4 = *a1;
  BOOL v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v6 = v5 + 4;
  id v7 = v5 + 8;
  os_unfair_lock_lock(v5 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v11);
  os_unfair_lock_unlock(v7);
  long long v10 = v11;
  uint64_t v9 = v4;
  LOBYTE(a2) = a2(&v9);
  swift_unknownObjectRelease();
  return a2 & 1;
}

Swift::Bool __swiftcall Calendar.isDateInYesterday(_:)(Foundation::Date a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  __darwin_time_t v3 = *v1;
  double v5 = *v2;
  double v4 = v2[1];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v6 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  LOBYTE(v11._time) = 3;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  *(double *)&__darwin_time_t v7 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v7;
  (*(void (**)(double *__return_ptr, Foundation::Date *, timespec *, uint64_t, double))(*(void *)&v4 + 160))(v13, &v11, &__tp, ObjectType, COERCE_DOUBLE(*(void *)&v4));
  if (v14) {
    return 0;
  }
  v10._time = v13[0] + -60.0;
  v13[0] = v5;
  v13[1] = v4;
  v11._time = v10._time;
  __tp.tv_sec = v3;
  return Calendar.compare(_:to:toGranularity:)(v10, (Foundation::Date)0xC04E000000000000, (Foundation::Calendar::Component)&__tp) == NSOrderedSame;
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithUnsignedInt_, v1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(double a1)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1);
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(double a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  specialized _BPlistEncodingFormat.number<A>(from:)(a1);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v27 = v5;
  if (specialized Sequence.allSatisfy(_:)(v4, v5))
  {
    swift_bridgeObjectRetain();
    id v6 = (id)String.hashValue.getter();
    unsigned __int8 v7 = 1;
  }
  else
  {
    uint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v7 = 0;
  }
  uint64_t v9 = *(void *)(v3 + 88);
  uint64_t v10 = v3;
  uint64_t v11 = *(void *)(v9 + 16);
  unint64_t v12 = *(void *)(v9 + 24);
  uint64_t v13 = *(void *)(v9 + 32);
  unint64_t v14 = v27;
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = v14;
  *(void *)(v9 + 32) = v6;
  unsigned __int8 v15 = *(unsigned char *)(v9 + 40);
  *(unsigned char *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v4, v14, (uint64_t)v6, v7);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v11, v12, v13, v15);
  swift_retain();
  char v16 = specialized Set._Variant.insert(_:)(&v25, v9);
  uint64_t v17 = v25;
  if (v16)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 16) = 2;
    *(unsigned char *)(v18 + 40) = -112;
    *(void *)(v18 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v10 + 88) = v18;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v2 + 40) & 0xF0) == 0x60)
  {
    uint64_t v25 = *(void *)(v2 + 16);
    long long v26 = *(_OWORD *)(v2 + 24);
    *(void *)(v2 + 16) = 2;
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 32) = 0;
    *(unsigned char *)(v2 + 40) = -112;
    swift_retain();
    uint64_t v20 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v20, v17);
    uint64_t v21 = *(void *)(v2 + 16);
    unint64_t v22 = *(void *)(v2 + 24);
    uint64_t v23 = *(void *)(v2 + 32);
    *(void *)(v2 + 16) = v25;
    *(_OWORD *)(v2 + 24) = v26;
    unsigned __int8 v24 = *(unsigned char *)(v2 + 40);
    *(unsigned char *)(v2 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v21, v22, v23, v24);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  *(double *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  unsigned __int8 v7 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 40) = 48;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
  swift_retain();
  char v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  uint64_t v9 = v12;
  if (v8)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 16) = 2;
    *(unsigned char *)(v10 + 40) = -112;
    *(void *)(v10 + 48) = -1;
    swift_release();
    *(void *)(v2 + 32) = v10;
  }
  return v9;
}

void static URL.temporaryDirectory.getter(uint64_t a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = objc_msgSend(v2, sel_temporaryDirectory);

    if (v3)
    {
      URL.init(reference:)(v3, &v9);

      long long v4 = v10;
      *(void *)a1 = v9;
      *(_OWORD *)(a1 + 8) = v4;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    unint64_t v5 = NSTemporaryDirectory();
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v8 = v7;

    unsigned __int8 v11 = 0;
    uint64_t v9 = 0;
    long long v10 = 0uLL;
    URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v6, v8, &v11, (uint64_t)&v9, (void *)a1);
  }
}

NSString *NSTemporaryDirectory(void)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (!confstr(65537, __s, 0x402uLL))
  {
    if (issetugid() || !getenv("TMPDIR"))
    {
      __strlcpy_chk();
      return [(NSString *)[+[NSFileManager defaultManager] stringWithFileSystemRepresentation:__s length:strlen(__s)] stringByStandardizingPath];
    }
    __strlcpy_chk();
  }
  size_t v0 = strlen(__s);
  if (!v0 || __s[v0 - 1] != 47) {
    *(_WORD *)&__s[v0] = 47;
  }
  return [[NSString alloc] initWithUTF8String:__s];
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

uint64_t base witness table accessor for Equatable in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions, type metadata accessor for NSStringCompareOptions);
}

uint64_t base witness table accessor for Equatable in NSLinguisticTag()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag, type metadata accessor for NSLinguisticTag);
}

uint64_t Date.FormatStyle.year(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((unsigned __int8 *)a1 + 8);
  long long v5 = v2[1];
  long long v19 = *v2;
  long long v20 = v5;
  long long v6 = v2[3];
  unsigned long long v21 = v2[2];
  *(_OWORD *)unint64_t v22 = v6;
  long long v7 = v2[5];
  *(_OWORD *)&v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v7;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(long long *)((char *)v2 + 106);
  unsigned long long v8 = v21;
  if ((v21 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v9 = 0x906030001;
    uint64_t v10 = 50332931;
    if (v4 == 255)
    {
      uint64_t v13 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      uint64_t v10 = 50333183;
      uint64_t v9 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      uint64_t v13 = 327680;
    }
    uint64_t v15 = 0;
    uint64_t v16 = v10 | v13;
    unsigned long long v8 = (unint64_t)v12 | (unsigned __int128)(v11 | (unint64_t)v9);
    __int16 v17 = 3327;
    uint64_t v14 = 3;
  }
  else
  {
    uint64_t v14 = v19;
    uint64_t v15 = *((void *)&v20 + 1);
    uint64_t v16 = v20;
    __int16 v17 = *(_WORD *)v22;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(void *)(a2 + 114) = *(void *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v16 & 0xFFFFFFFFFFFFFF00 | v4;
  *(void *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 32) = v8;
  *(_WORD *)(a2 + 48) = v17;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

uint64_t base witness table accessor for RawRepresentable in NSURLUbiquitousItemDownloadingStatus()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus, type metadata accessor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLUbiquitousSharedItemPermissions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemPermissions and conformance NSURLUbiquitousSharedItemPermissions, type metadata accessor for NSURLUbiquitousSharedItemPermissions);
}

uint64_t Date.FormatStyle.month(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v4;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(long long *)((char *)v2 + 106);
  long long v5 = v2[1];
  long long v18 = *v2;
  long long v19 = v5;
  long long v6 = v2[3];
  long long v20 = v2[2];
  *(_OWORD *)unsigned long long v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v8 = 0x906030001;
    if (v3 == 5)
    {
      uint64_t v9 = 0x1000000000000;
      uint64_t v10 = 0x200000000000000;
      uint64_t v11 = 1283;
    }
    else
    {
      uint64_t v8 = 0x906030100;
      uint64_t v9 = 0x2000000000000;
      uint64_t v10 = 0x2000E0000000000;
      uint64_t v11 = 1535;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v7 = v10 | v9 | v8;
    long long v15 = xmmword_1821A2DA0;
    __int16 v12 = 3327;
    unint64_t v16 = 50331648;
  }
  else
  {
    __int16 v12 = *(_WORD *)v21;
    uint64_t v13 = *((void *)&v20 + 1);
    uint64_t v14 = *((void *)&v19 + 1);
    long long v15 = v18;
    unint64_t v16 = v19 & 0xFFFFFFFFFF000000;
    uint64_t v11 = (unsigned __int16)v19;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v15;
  *(void *)(a2 + 16) = v16 | (v3 << 16) | v11;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v13;
  *(_WORD *)(a2 + 48) = v12;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.weekday(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  unsigned long long v4 = v2[1];
  long long v18 = *v2;
  unsigned long long v19 = v4;
  long long v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(long long *)((char *)v2 + 106);
  long long v6 = v2[3];
  long long v20 = v2[2];
  *(_OWORD *)unsigned long long v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v8 = 0x906030001;
    uint64_t v9 = 50332931;
    if (v3 == 6)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      uint64_t v9 = 50333183;
      uint64_t v8 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      uint64_t v10 = 327680;
    }
    uint64_t v15 = 0;
    uint64_t v7 = v12 | v11 | v8;
    unsigned long long v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    long long v14 = xmmword_1821A2DA0;
    __int16 v16 = 3327;
  }
  else
  {
    long long v14 = v18;
    unsigned long long v13 = v19;
    uint64_t v15 = *((void *)&v20 + 1);
    __int16 v16 = *(_WORD *)v21;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(void *)(a2 + 32) = v7 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v3 << 24);
  *(void *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.day(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  long long v6 = v2[5];
  *(_OWORD *)&v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v6;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(long long *)((char *)v2 + 106);
  long long v7 = v2[1];
  long long v19 = *v2;
  long long v20 = v7;
  long long v8 = v2[3];
  long long v21 = v2[2];
  *(_OWORD *)unint64_t v22 = v8;
  if ((v21 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v9 = 50332931;
    if (v5)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0x100000000;
      uint64_t v12 = 0x20000090603;
    }
    else
    {
      uint64_t v9 = 50333183;
      uint64_t v11 = 0x200000000;
      uint64_t v12 = 0x2000E090603;
      uint64_t v10 = 327680;
    }
    uint64_t v16 = 0;
    uint64_t v15 = v9 | v10;
    unint64_t v14 = v12 | v11;
    long long v13 = xmmword_1821A2DA0;
    __int16 v17 = 3327;
  }
  else
  {
    long long v13 = v19;
    unint64_t v14 = (unint64_t)v21 >> 16;
    uint64_t v15 = v20;
    uint64_t v16 = *((void *)&v21 + 1);
    __int16 v17 = *(_WORD *)v22;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(void *)(a2 + 114) = *(void *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(_OWORD *)a2 = v13;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v3;
  *(unsigned char *)(a2 + 32) = v4;
  *(unsigned char *)(a2 + 33) = v5;
  *(_DWORD *)(a2 + 34) = v14;
  *(_WORD *)(a2 + 38) = WORD2(v14);
  *(void *)(a2 + 40) = v16;
  *(_WORD *)(a2 + 48) = v17;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

__n128 static FormatStyle<>.dateTime.getter@<Q0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, (uint64_t *)v14);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = *(void *)&v14[0];
  uint64_t v5 = _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static CalendarCache.cache + 16;
  long long v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v6, (uint64_t *)v14);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  __n128 v13 = (__n128)v14[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static TimeZoneCache.cache + 16;
  uint64_t v9 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v8, (uint64_t *)v14);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  uint64_t v10 = *(void *)&v14[0];
  uint64_t v11 = _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (void (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = xmmword_1821A2DB0;
  *(_WORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v11;
  __n128 result = v13;
  *(__n128 *)(a1 + 104) = v13;
  *(_WORD *)(a1 + 120) = 256;
  return result;
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
}

uint64_t Date.FormatStyle.hour(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  unsigned long long v4 = v2[1];
  long long v18 = *v2;
  unsigned long long v19 = v4;
  long long v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(long long *)((char *)v2 + 106);
  long long v6 = v2[3];
  long long v20 = v2[2];
  *(_OWORD *)long long v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v8 = 0x906030001;
    uint64_t v9 = 50332931;
    if (v3 == 14)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      uint64_t v9 = 50333183;
      uint64_t v8 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      uint64_t v10 = 327680;
    }
    uint64_t v15 = 0;
    uint64_t v7 = v12 | v11 | v8;
    unsigned long long v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    long long v14 = xmmword_1821A2DA0;
    __int16 v16 = 3327;
  }
  else
  {
    long long v14 = v18;
    unsigned long long v13 = v19;
    uint64_t v15 = *((void *)&v20 + 1);
    __int16 v16 = *(_WORD *)v21;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(void *)(a2 + 32) = v7 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v3 << 40);
  *(void *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.formatted(date:time:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v37 = *a1;
  char v38 = 0;
  uint64_t v35 = v2;
  char v36 = 0;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v3 = static LocaleCache.cache + 16;
  unsigned long long v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v3, (uint64_t *)v33);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  *(void *)&long long v19 = *(void *)&v33[0];
  *((void *)&v19 + 1) = _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = static CalendarCache.cache + 16;
  long long v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v5, (uint64_t *)v33);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  long long v18 = v33[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v7 = static TimeZoneCache.cache + 16;
  uint64_t v8 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v7, &v17);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  uint64_t v9 = v17;
  uint64_t v10 = _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (void (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating);
  *(void *)&long long v27 = v9;
  *((void *)&v27 + 1) = v10;
  LOBYTE(v20[0]) = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)((uint64_t)&v37, &v35, &v19, &v18, &v27, (char *)v20, (uint64_t)v33);
  long long v30 = v33[4];
  long long v31 = v33[5];
  v32[0] = v34[0];
  *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)((char *)v34 + 10);
  long long v27 = v33[0];
  long long v28 = v33[1];
  v29[0] = v33[2];
  v29[1] = v33[3];
  outlined retain of Date.FormatStyle((uint64_t)v33);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v27, (uint64_t)v20);
  long long v27 = v20[0];
  long long v28 = v20[1];
  LOBYTE(v29[0]) = v21;
  *(_OWORD *)((char *)v29 + 8) = v22;
  BYTE8(v29[1]) = v23;
  long long v30 = v24;
  LOBYTE(v31) = v25;
  *((void *)&v31 + 1) = v26;
  uint64_t v11 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v11
    || (uint64_t v12 = swift_retain_n(),
        MEMORY[0x1F4188790](v12),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v16, (uint64_t *)&v27),
        uint64_t v14 = *((void *)&v27 + 1),
        uint64_t v13 = v27,
        swift_release_n(),
        !v14))
  {
    uint64_t v13 = 0;
  }
  outlined release of Date.FormatStyle((uint64_t)v33);
  return v13;
}

Swift::String __swiftcall Date.formatted()()
{
  uint64_t v18 = 1;
  char v19 = 0;
  uint64_t v16 = 1;
  char v17 = 0;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v0, (uint64_t *)v20);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  *(void *)&long long v15 = *(void *)&v20[0];
  *((void *)&v15 + 1) = _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static CalendarCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v2, (uint64_t *)v20);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  long long v14 = v20[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = static TimeZoneCache.cache + 16;
  uint64_t v5 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v4, (uint64_t *)v20);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  *(void *)&long long v13 = *(void *)&v20[0];
  *((void *)&v13 + 1) = _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (void (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating);
  char v12 = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)((uint64_t)&v18, &v16, &v15, &v14, &v13, &v12, (uint64_t)v20);
  uint64_t v6 = specialized Date.formatted<A>(_:)(v20);
  uint64_t v8 = v7;
  outlined release of Date.FormatStyle((uint64_t)v20);
  uint64_t v9 = v6;
  uint64_t v10 = v8;
  result._object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, long long *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *(void *)result;
  uint64_t v8 = *a2;
  char v9 = *((unsigned char *)a2 + 8);
  char v10 = *(unsigned char *)(result + 8) | (*(void *)result == 0);
  if (*(unsigned char *)(result + 8) & 1 | (*(void *)result == 0))
  {
    uint64_t v7 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = 0x3000000000000;
  }
  else
  {
    if ((unint64_t)(v7 - 1) > 3)
    {
      unsigned int v13 = 3327;
      uint64_t v14 = 0x2020E0906030001;
      uint64_t v12 = 50660611;
    }
    else
    {
      uint64_t v15 = 8 * (v7 - 1);
      uint64_t v12 = *(void *)((char *)&unk_1821A3E18 + v15);
      uint64_t v14 = *(void *)((char *)&unk_1821A3E38 + v15);
      unsigned int v13 = 3327;
    }
    uint64_t v11 = 3;
  }
  long long v16 = *a3;
  long long v17 = *a4;
  long long v18 = *a5;
  char v19 = *a6;
  if (!v8) {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v20 = 0x900000000;
    uint64_t v21 = 0x1000000000000;
    if ((~v14 & 0x3000000000000) != 0)
    {
      uint64_t v27 = 0;
      uint64_t v24 = v14 & 0x200000000000000;
      unsigned int v22 = v13 >> 8;
      uint64_t v23 = v12 & 3;
      uint64_t v30 = v12 & 0x500;
      uint64_t v29 = v12 & 0x70000;
      uint64_t v28 = v12 & 0x3000000;
      uint64_t v26 = v14 & 0x30000;
      uint64_t v25 = v14 & 0x7000000;
      uint64_t v20 = v14 & 0x900000000;
      uint64_t v21 = v14 & 1 | 0x1000000000000;
      if (v8 != 3)
      {
LABEL_12:
        if (v8 == 2) {
          uint64_t v31 = 0x100000000000000;
        }
        else {
          uint64_t v31 = v24;
        }
        goto LABEL_17;
      }
    }
    else
    {
      LOWORD(v22) = 12;
      uint64_t v23 = 255;
      uint64_t v24 = 0x200000000000000;
      uint64_t v25 = 100663296;
      uint64_t v26 = 196608;
      uint64_t v27 = 256;
      uint64_t v28 = 50331648;
      uint64_t v29 = 327680;
      uint64_t v30 = 1280;
      uint64_t v11 = 3;
      LOBYTE(v13) = -1;
      if (v8 != 3) {
        goto LABEL_12;
      }
    }
    LOWORD(v22) = 0;
    uint64_t v31 = 0x100000000000000;
LABEL_17:
    uint64_t v12 = v30 | v23 | v29 | v28;
    uint64_t v32 = v21 | v27;
    Swift::String result = v26 | v25;
    uint64_t v14 = v32 | v26 | v25 | v20 | v31 & 0x300000000000000;
    LOWORD(v13) = v13 | (unsigned __int16)((_WORD)v22 << 8);
  }
  *(void *)a7 = v11;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = v12;
  *(void *)(a7 + 24) = 0;
  *(void *)(a7 + 32) = v14;
  *(void *)(a7 + 40) = 0;
  *(_WORD *)(a7 + 48) = v13;
  *(void *)(a7 + 56) = v7;
  *(unsigned char *)(a7 + 64) = v10 & 1;
  *(_OWORD *)(a7 + 72) = v16;
  *(_OWORD *)(a7 + 88) = v18;
  *(_OWORD *)(a7 + 104) = v17;
  *(unsigned char *)(a7 + 120) = v19;
  *(unsigned char *)(a7 + 121) = 1;
  return result;
}

uint64_t static TimeZone.autoupdatingCurrent.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static TimeZoneCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v2, &v6);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v6;
  uint64_t result = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (void (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating);
  *a1 = v4;
  a1[1] = result;
  return result;
}

uint64_t _NSSwiftLocale.classForCoder.getter()
{
  long long v10 = *(_OWORD *)(v0 + OBJC_IVAR____NSSwiftLocale_locale);
  uint64_t v1 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v9[0];
  uint64_t v5 = _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  v9[0] = v4;
  v9[1] = v5;
  char v6 = specialized static Locale.== infix(_:_:)((uint64_t)&v10, (uint64_t)v9);
  swift_unknownObjectRelease();
  swift_release();
  if (v6) {
    uint64_t v7 = (unint64_t *)&lazy cache variable for type metadata for NSAutoLocale;
  }
  else {
    uint64_t v7 = &lazy cache variable for type metadata for NSLocale;
  }
  return type metadata accessor for NSMorphologyPronoun(0, v7);
}

id _NSSwiftTimeZone.replacementObject(for:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  long long v14 = *(_OWORD *)&v1[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  uint64_t v5 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = static TimeZoneCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v6, v13);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  uint64_t v8 = v13[0];
  uint64_t v9 = lazy protocol witness table accessor for type _LocaleBridged and conformance _LocaleBridged(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (void (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating);
  v13[0] = v8;
  v13[1] = v9;
  char v10 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v14, (uint64_t)v13);
  swift_unknownObjectRelease();
  swift_release();
  if (v10)
  {
    id v11 = objc_msgSend(objc_allocWithZone((Class)__NSLocalTimeZone), sel_init);
    id result = (id)type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for __NSLocalTimeZone);
    uint64_t ObjectType = (uint64_t)result;
  }
  else
  {
    id result = v2;
    id v11 = result;
  }
  a1[3] = ObjectType;
  *a1 = v11;
  return result;
}

uint64_t closure #1 in TimeZoneCache.autoupdatingCurrent()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = v4;
  }
  else
  {
    type metadata accessor for _TimeZoneAutoupdating();
    uint64_t v5 = swift_allocObject();
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }
  *a2 = v5;
  return swift_retain();
}

uint64_t lazy protocol witness table accessor for type _LocaleBridged and conformance _LocaleBridged(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Date.formatted<A>(_:)(long long *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v1 = a1[5];
  long long v20 = a1[4];
  long long v21 = v1;
  v22[0] = a1[6];
  *(_OWORD *)((char *)v22 + 10) = *(long long *)((char *)a1 + 106);
  long long v2 = a1[1];
  long long v17 = *a1;
  long long v18 = v2;
  long long v3 = a1[3];
  *(_OWORD *)char v19 = a1[2];
  *(_OWORD *)&v19[16] = v3;
  outlined retain of Date.FormatStyle((uint64_t)a1);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v17, (uint64_t)v10);
  long long v17 = v10[0];
  long long v18 = v10[1];
  v19[0] = v11;
  *(_OWORD *)&v19[8] = v12;
  v19[24] = v13;
  long long v20 = v14;
  LOBYTE(v21) = v15;
  *((void *)&v21 + 1) = v16;
  uint64_t v4 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = swift_retain_n();
  MEMORY[0x1F4188790](v5);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v9, (uint64_t *)&v17);
  uint64_t v7 = *((void *)&v17 + 1);
  uint64_t v6 = v17;
  swift_release_n();
  if (!v7) {
    return 0;
  }
  return v6;
}

uint64_t outlined retain of Date.FormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t specialized static ICUDateFormatter.cachedFormatter(for:)(uint64_t a1)
{
  v119[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v76 = v6;
  char v8 = *(unsigned char *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = *(void *)(a1 + 72);
  char v11 = (os_unfair_lock_s *)*(unsigned __int8 *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  char v84 = v5;
  if (one-time initialization token for formatterCache != -1)
  {
    uint64_t v41 = *(void *)(a1 + 40);
    uint64_t v42 = *(void *)(a1 + 16);
    a1 = swift_once();
    char v5 = v84;
    uint64_t v3 = v42;
    uint64_t v7 = v41;
    uint64_t v6 = v76;
  }
  uint64_t v80 = v3;
  uint64_t v82 = v9;
  BYTE8(v92) = v8;
  char v13 = *(os_unfair_lock_s **)algn_1E8EDF478;
  uint64_t v77 = static ICUDateFormatter.formatterCache;
  *(void *)&long long v89 = v2;
  *((void *)&v89 + 1) = v1;
  *(void *)&long long v90 = v3;
  *((void *)&v90 + 1) = v4;
  LOBYTE(v91) = v5;
  uint64_t v75 = v7;
  *((void *)&v91 + 1) = v7;
  *(void *)&long long v92 = v6;
  *(void *)&long long v93 = v9;
  *((void *)&v93 + 1) = v10;
  LOBYTE(v94) = (_BYTE)v11;
  *((void *)&v94 + 1) = v12;
  MEMORY[0x1F4188790](a1);
  uint64_t v79 = v2;
  unint64_t v14 = v10;
  unint64_t v15 = v4;
  swift_retain_n();
  os_unfair_lock_lock(v13 + 6);
  unint64_t v78 = v13 + 4;
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v13[4], v119);
  unint64_t v86 = v13 + 6;
  os_unfair_lock_unlock(v13 + 6);
  swift_release();
  uint64_t v16 = v119[0];
  if (v119[0] != 1) {
    goto LABEL_74;
  }
  uint64_t v74 = v13;
  type metadata accessor for ICUDateFormatter();
  uint64_t v87 = swift_allocObject();
  char v73 = (char)v11;
  *(unsigned char *)(v87 + 24) = (_BYTE)v11;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(v79, v1, &v96);
  v118[0] = v96;
  v118[1] = v97;
  v118[2] = v98;
  v118[3] = v99;
  v118[4] = v100;
  v118[5] = v101;
  LOBYTE(v118[6]) = v84;
  *(_OWORD *)((char *)&v118[6] + 8) = v102;
  *(_OWORD *)((char *)&v118[7] + 8) = v103;
  *(_OWORD *)((char *)&v118[8] + 8) = v104;
  *(_OWORD *)((char *)&v118[9] + 8) = v105;
  *(_OWORD *)((char *)&v118[10] + 8) = v106;
  *(_OWORD *)((char *)&v118[11] + 8) = v107;
  WORD4(v118[12]) = v108;
  v118[13] = v109;
  v118[14] = v110;
  v118[15] = v111;
  v118[16] = v112;
  v118[17] = v113;
  v118[18] = v114;
  v118[19] = v115;
  v118[20] = v116;
  v118[21] = v117;
  memcpy(v95, v118, sizeof(v95));
  Locale.Components.icuIdentifier.getter();
  outlined release of Locale.Components((uint64_t *)v118);
  swift_bridgeObjectRelease();
  long long v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v80, v4);
  swift_bridgeObjectRelease();
  p_os_unfair_lock_opaque = specialized _copyCollectionToContiguousArray<A>(_:)(v82, v14);
  swift_bridgeObjectRelease();
  if (v17[2] >> 31)
  {
    __break(1u);
    goto LABEL_37;
  }
  if (p_os_unfair_lock_opaque[2] >> 31)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v19 = udat_open();
  swift_release();
  swift_release();
  swift_release();
  char v11 = v13 + 6;
  uint64_t v28 = v87;
  uint64_t v27 = v13 + 4;
  if (!v19) {
    goto LABEL_15;
  }
  *(void *)(v87 + 16) = v19;
  udat_setContext();
  specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
  p_os_unfair_lock_opaque = &v74->_os_unfair_lock_opaque;
  udat_setLenient();
  if ((v73 & 1) == 0)
  {
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
  }
  udat_getCalendar();
  uint64_t v29 = ucal_clone();
  if (!specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR) || !v29) {
    goto LABEL_24;
  }
  MEMORY[0x1853098F0](v29);
  if (v75 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_76;
  }
  if (v75 > 0x7FFFFFFF)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  ucal_setAttribute();
  if (v76 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
  }
  if (v76 > 0x7FFFFFFF) {
    goto LABEL_78;
  }
  ucal_setAttribute();
  ucal_setMillis();
  ucal_get();
  ucal_setDateTime();
  ucal_getMillis();
  udat_set2DigitYearStart();
  udat_setCalendar();
LABEL_24:
  ucal_close();
  while (1)
  {
    swift_retain();
    os_unfair_lock_lock(v11);
    if (v77 >= *(void *)(p_os_unfair_lock_opaque[2] + 16)) {
      swift_bridgeObjectRetain();
    }
    else {
      *(void *)&v27->_os_unfair_lock_opaque = MEMORY[0x1E4FBC868];
    }
    long long v98 = v91;
    long long v99 = v92;
    long long v100 = v93;
    long long v101 = v94;
    long long v96 = v89;
    long long v97 = v90;
    uint64_t v88 = v28;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v95[0] = *(void *)&v27->_os_unfair_lock_opaque;
    unint64_t v15 = v95[0];
    *(void *)&v27->_os_unfair_lock_opaque = 0x8000000000000000;
    unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((double *)&v96);
    uint64_t v33 = *(void *)(v15 + 16);
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (!__OFADD__(v33, v34)) {
      break;
    }
LABEL_38:
    __break(1u);
    swift_once();
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static ICUError.logger);
    long long v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(void *)&long long v96 = v24;
      *(_DWORD *)uint64_t v23 = 136315394;
      v95[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x80000001823AE920, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v25 = ICUError.debugDescription.getter((UErrorCode)p_os_unfair_lock_opaque);
      v95[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v25, v26, (uint64_t *)&v96);
      char v11 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_181795000, v21, v22, "%s. Error: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x185309510](v24, -1, -1);
      MEMORY[0x185309510](v23, -1, -1);
    }

    uint64_t v27 = v78;
    if (v15) {
      udat_close();
    }
LABEL_15:
    swift_deallocPartialClassInstance();
    uint64_t v28 = 0;
    p_os_unfair_lock_opaque = &v74->_os_unfair_lock_opaque;
  }
  char v36 = v31;
  if (*(void *)(v15 + 24) < v35)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, isUniquelyReferenced_nonNull_native);
    uint64_t v37 = v95[0];
    unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)((double *)&v96);
    if ((v36 & 1) != (v39 & 1)) {
      goto LABEL_81;
    }
    unint64_t v32 = v38;
    if ((v36 & 1) == 0) {
      goto LABEL_72;
    }
LABEL_35:
    uint64_t v40 = *(void *)(v37 + 56);
    swift_release();
    *(void *)(v40 + 8 * v32) = v88;
    uint64_t v16 = v88;
LABEL_73:
    p_os_unfair_lock_opaque[2] = v37;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v11);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of ICUDateIntervalFormatter??(v119[0]);
LABEL_74:
    swift_release();
    return v16;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v37 = v15;
    if (v31) {
      goto LABEL_35;
    }
LABEL_72:
    uint64_t v16 = v88;
    specialized _NativeDictionary._insert(at:key:value:)(v32, &v96, v88, (void *)v37);
    outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)&v96);
    goto LABEL_73;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter?>);
  uint64_t v43 = static _DictionaryStorage.copy(original:)();
  uint64_t v37 = v43;
  if (!*(void *)(v15 + 16))
  {
LABEL_71:
    swift_bridgeObjectRelease();
    if (v36) {
      goto LABEL_35;
    }
    goto LABEL_72;
  }
  int64_t v44 = (char *)(v43 + 64);
  long long v83 = (char *)(v15 + 64);
  unint64_t v45 = (unint64_t)((1 << *(unsigned char *)(v37 + 32)) + 63) >> 6;
  if (v37 != v15 || v44 >= &v83[8 * v45]) {
    memmove(v44, v83, 8 * v45);
  }
  int64_t v46 = 0;
  *(void *)(v37 + 16) = *(void *)(v15 + 16);
  uint64_t v47 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v48 = -1;
  if (v47 < 64) {
    uint64_t v48 = ~(-1 << v47);
  }
  unint64_t v49 = v48 & *(void *)(v15 + 64);
  int64_t v81 = (unint64_t)(v47 + 63) >> 6;
  while (1)
  {
    p_os_unfair_lock_opaque = &v74->_os_unfair_lock_opaque;
    char v11 = v86;
    if (v49)
    {
      unint64_t v50 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      int64_t v85 = v46;
      unint64_t v51 = v50 | (v46 << 6);
      goto LABEL_47;
    }
    int64_t v67 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
      goto LABEL_80;
    }
    if (v67 >= v81) {
      goto LABEL_71;
    }
    unint64_t v68 = *(void *)&v83[8 * v67];
    int64_t v69 = v46 + 1;
    if (!v68)
    {
      int64_t v69 = v46 + 2;
      if (v46 + 2 >= v81) {
        goto LABEL_71;
      }
      unint64_t v68 = *(void *)&v83[8 * v69];
      if (!v68)
      {
        int64_t v69 = v46 + 3;
        if (v46 + 3 >= v81) {
          goto LABEL_71;
        }
        unint64_t v68 = *(void *)&v83[8 * v69];
        if (!v68)
        {
          int64_t v69 = v46 + 4;
          if (v46 + 4 >= v81) {
            goto LABEL_71;
          }
          unint64_t v68 = *(void *)&v83[8 * v69];
          if (!v68)
          {
            int64_t v69 = v46 + 5;
            if (v46 + 5 >= v81) {
              goto LABEL_71;
            }
            unint64_t v68 = *(void *)&v83[8 * v69];
            if (!v68)
            {
              int64_t v69 = v46 + 6;
              if (v46 + 6 >= v81) {
                goto LABEL_71;
              }
              unint64_t v68 = *(void *)&v83[8 * v69];
              if (!v68)
              {
                int64_t v69 = v46 + 7;
                if (v46 + 7 >= v81) {
                  goto LABEL_71;
                }
                unint64_t v68 = *(void *)&v83[8 * v69];
                if (!v68) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_70:
    unint64_t v49 = (v68 - 1) & v68;
    int64_t v85 = v69;
    unint64_t v51 = __clz(__rbit64(v68)) + (v69 << 6);
LABEL_47:
    uint64_t v52 = 96 * v51;
    uint64_t v53 = *(void *)(v15 + 48) + 96 * v51;
    uint64_t v54 = *(void *)(v53 + 8);
    uint64_t v55 = *(void *)(v53 + 16);
    uint64_t v56 = *(void *)(v53 + 24);
    char v57 = *(unsigned char *)(v53 + 32);
    char v58 = *(unsigned char *)(v53 + 56);
    uint64_t v59 = *(void *)(v53 + 64);
    uint64_t v60 = *(void *)(v53 + 72);
    char v61 = *(unsigned char *)(v53 + 80);
    uint64_t v62 = 8 * v51;
    uint64_t v63 = *(void *)(*(void *)(v15 + 56) + v62);
    uint64_t v64 = *(void *)(v53 + 88);
    uint64_t v65 = *(void *)(v37 + 48) + v52;
    long long v66 = *(_OWORD *)(v53 + 40);
    *(void *)uint64_t v65 = *(void *)v53;
    *(void *)(v65 + 8) = v54;
    *(void *)(v65 + 16) = v55;
    *(void *)(v65 + 24) = v56;
    *(unsigned char *)(v65 + 32) = v57;
    *(_OWORD *)(v65 + 40) = v66;
    *(unsigned char *)(v65 + 56) = v58;
    *(void *)(v65 + 64) = v59;
    *(void *)(v65 + 72) = v60;
    *(unsigned char *)(v65 + 80) = v61;
    *(void *)(v65 + 88) = v64;
    *(void *)(*(void *)(v37 + 56) + v62) = v63;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v46 = v85;
  }
  uint64_t v70 = v46 + 8;
  if (v46 + 8 >= v81) {
    goto LABEL_71;
  }
  uint64_t v71 = v37;
  unint64_t v68 = *(void *)&v83[8 * v70];
  if (v68)
  {
    int64_t v69 = v46 + 8;
    goto LABEL_70;
  }
  while (1)
  {
    int64_t v69 = v70 + 1;
    if (__OFADD__(v70, 1)) {
      break;
    }
    uint64_t v37 = v71;
    p_os_unfair_lock_opaque = &v74->_os_unfair_lock_opaque;
    char v11 = v86;
    if (v69 >= v81) {
      goto LABEL_71;
    }
    unint64_t v68 = *(void *)&v83[8 * v69];
    ++v70;
    if (v68) {
      goto LABEL_70;
    }
  }
LABEL_80:
  __break(1u);
LABEL_81:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, double *a2)
{
  if (*(void *)(*(void *)a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 1;
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double *a1)
{
  Hasher.init(_seed:)();
  ICUDateFormatter.DateFormatInfo.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

void ICUDateFormatter.DateFormatInfo.hash(into:)()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 32);
  Swift::UInt v2 = *(void *)(v0 + 40);
  Swift::UInt v3 = *(void *)(v0 + 48);
  Swift::UInt v6 = *(unsigned __int8 *)(v0 + 56);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 80);
  Swift::UInt64 v4 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v7);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v4;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(double *a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v35 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v33 = ~v3;
    uint64_t v34 = *(void *)(v2 + 48);
    uint64_t v36 = *((void *)a1 + 1);
    double v37 = *a1;
    uint64_t v31 = *((void *)a1 + 3);
    uint64_t v32 = *((void *)a1 + 2);
    int v30 = *((unsigned __int8 *)a1 + 32);
    uint64_t v28 = *((void *)a1 + 6);
    uint64_t v29 = *((void *)a1 + 5);
    int v27 = *((unsigned __int8 *)a1 + 56);
    uint64_t v25 = *((void *)a1 + 9);
    uint64_t v26 = *((void *)a1 + 8);
    double v5 = a1[11];
    int v24 = *((unsigned __int8 *)a1 + 80);
    do
    {
      uint64_t v6 = v34 + 96 * v4;
      uint64_t v8 = *(void *)(v6 + 16);
      uint64_t v7 = *(void *)(v6 + 24);
      int v9 = *(unsigned __int8 *)(v6 + 32);
      uint64_t v10 = *(void *)(v6 + 40);
      uint64_t v11 = *(void *)(v6 + 48);
      int v12 = *(unsigned __int8 *)(v6 + 56);
      uint64_t v13 = *(void *)(v6 + 64);
      uint64_t v14 = *(void *)(v6 + 72);
      int v15 = *(unsigned __int8 *)(v6 + 80);
      double v16 = *(double *)(v6 + 88);
      BOOL v17 = *(void *)v6 == *(void *)&v37 && *(void *)(v6 + 8) == v36;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v18 = v8 == v32 && v7 == v31;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          BOOL v19 = v9 == v30 && v10 == v29;
          BOOL v20 = v19 && v11 == v28;
          if (v20 && v12 == v27)
          {
            BOOL v22 = v13 == v26 && v14 == v25;
            if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)())
              && ((v24 ^ v15) & 1) == 0
              && v16 == v5)
            {
              break;
            }
          }
        }
      }
      unint64_t v4 = (v4 + 1) & v33;
    }
    while (((*(void *)(v35 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id @objc static NSCalendar._newCalendarWithIdentifier(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  id v4 = specialized static NSCalendar._newCalendarWithIdentifier(_:)(v3);

  return v4;
}

id specialized static NSCalendar._newCalendarWithIdentifier(_:)(void *a1)
{
  uint64_t v2 = (void *)*MEMORY[0x1E4F1D198];
  if (*MEMORY[0x1E4F1D198])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v3 = a1;
    id v4 = v2;
    char v5 = static _CFObject.== infix(_:_:)();

    if (v5) {
      goto LABEL_33;
    }
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1CFE0];
  if (*MEMORY[0x1E4F1CFE0])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v8 = a1;
    id v9 = v7;
    char v10 = static _CFObject.== infix(_:_:)();

    if (v10) {
      goto LABEL_33;
    }
  }
  uint64_t v11 = (void *)*MEMORY[0x1E4F1D040];
  if (*MEMORY[0x1E4F1D040])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v12 = a1;
    id v13 = v11;
    char v14 = static _CFObject.== infix(_:_:)();

    if (v14) {
      goto LABEL_33;
    }
  }
  int v15 = (void *)*MEMORY[0x1E4F1D1A0];
  if (*MEMORY[0x1E4F1D1A0])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v16 = a1;
    id v17 = v15;
    char v18 = static _CFObject.== infix(_:_:)();

    if (v18) {
      goto LABEL_33;
    }
  }
  BOOL v19 = (void *)*MEMORY[0x1E4F1D1B8];
  if (*MEMORY[0x1E4F1D1B8])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v20 = a1;
    id v21 = v19;
    char v22 = static _CFObject.== infix(_:_:)();

    if (v22) {
      goto LABEL_33;
    }
  }
  uint64_t v23 = (void *)*MEMORY[0x1E4F1D1C0];
  if (*MEMORY[0x1E4F1D1C0])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v24 = a1;
    id v25 = v23;
    char v26 = static _CFObject.== infix(_:_:)();

    if (v26) {
      goto LABEL_33;
    }
  }
  int v27 = (void *)*MEMORY[0x1E4F1D1D8];
  if (*MEMORY[0x1E4F1D1D8])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v28 = a1;
    id v29 = v27;
    char v30 = static _CFObject.== infix(_:_:)();

    if (v30) {
      goto LABEL_33;
    }
  }
  uint64_t v31 = (void *)*MEMORY[0x1E4F1D400];
  if (*MEMORY[0x1E4F1D400])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v32 = a1;
    id v33 = v31;
    char v34 = static _CFObject.== infix(_:_:)();

    if (v34) {
      goto LABEL_33;
    }
  }
  uint64_t v35 = (void *)*MEMORY[0x1E4F1D3B0];
  if (*MEMORY[0x1E4F1D3B0])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v36 = a1;
    id v37 = v35;
    char v38 = static _CFObject.== infix(_:_:)();

    if (v38) {
      goto LABEL_33;
    }
  }
  char v39 = (void *)*MEMORY[0x1E4F1D1B0];
  if (*MEMORY[0x1E4F1D1B0])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v40 = a1;
    id v41 = v39;
    char v42 = static _CFObject.== infix(_:_:)();

    if (v42) {
      goto LABEL_33;
    }
  }
  uint64_t v43 = (void *)*MEMORY[0x1E4F1D1A8];
  if (*MEMORY[0x1E4F1D1A8])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v44 = a1;
    id v45 = v43;
    char v46 = static _CFObject.== infix(_:_:)();

    if (v46) {
      goto LABEL_33;
    }
  }
  uint64_t v47 = (void *)*MEMORY[0x1E4F1D1C8];
  if (*MEMORY[0x1E4F1D1C8])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v48 = a1;
    id v49 = v47;
    char v50 = static _CFObject.== infix(_:_:)();

    if (v50) {
      goto LABEL_33;
    }
  }
  unint64_t v51 = (void *)*MEMORY[0x1E4F1D1D0];
  if (*MEMORY[0x1E4F1D1D0])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v52 = a1;
    id v53 = v51;
    char v54 = static _CFObject.== infix(_:_:)();

    if (v54) {
      goto LABEL_33;
    }
  }
  uint64_t v55 = (void *)*MEMORY[0x1E4F1D028];
  if (*MEMORY[0x1E4F1D028])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v56 = a1;
    id v57 = v55;
    char v58 = static _CFObject.== infix(_:_:)();

    if (v58) {
      goto LABEL_33;
    }
  }
  uint64_t v59 = (void *)*MEMORY[0x1E4F1D038];
  if (*MEMORY[0x1E4F1D038])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v60 = a1;
    id v61 = v59;
    char v62 = static _CFObject.== infix(_:_:)();

    if (v62) {
      goto LABEL_33;
    }
  }
  id result = 0;
  uint64_t v63 = (void *)*MEMORY[0x1E4F1D030];
  if (*MEMORY[0x1E4F1D030])
  {
    type metadata accessor for CFStringRef(0);
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v64 = a1;
    id v65 = v63;
    char v66 = static _CFObject.== infix(_:_:)();

    id result = 0;
    if (v66)
    {
LABEL_33:
      if (one-time initialization token for cache != -1) {
        id result = (id)swift_once();
      }
      int64_t v67 = (os_unfair_lock_s *)static CalendarCache.cache;
      MEMORY[0x1F4188790](result);
      swift_retain_n();
      os_unfair_lock_lock(v67 + 15);
      closure #1 in CalendarCache.fixed(_:)partial apply((uint64_t)&v67[4], &v74);
      os_unfair_lock_unlock(v67 + 15);
      swift_release_n();
      unint64_t v68 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
      long long v72 = v74;
      int64_t v69 = (char *)objc_allocWithZone(v68);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
      uint64_t v70 = swift_allocObject();
      *(_DWORD *)(v70 + 32) = 0;
      *(_OWORD *)(v70 + 16) = v72;
      *(void *)&v69[OBJC_IVAR____NSSwiftCalendar__lock] = v70;
      uint64_t v71 = *MEMORY[0x1E4F1C318];
      v73.receiver = v69;
      v73.super_class = v68;
      return objc_msgSendSuper2(&v73, sel_initWithCheckedCalendarIdentifier_, v71);
    }
  }
  return result;
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type _TimeZoneBridged and conformance _TimeZoneBridged(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ICUDateFormatter()
{
  return self;
}

BOOL specialized UErrorCode.checkSuccessAndLogError(_:)(UErrorCode a1, uint64_t a2, unint64_t a3)
{
  if (a1 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static ICUError.logger);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v14 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      uint64_t v11 = ICUError.debugDescription.getter(a1);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_181795000, v7, v8, "%s. Error: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x185309510](v10, -1, -1);
      MEMORY[0x185309510](v9, -1, -1);
    }
  }
  return a1 < U_ILLEGAL_ARGUMENT_ERROR;
}

BOOL specialized UErrorCode.checkSuccessAndLogError(_:)(UErrorCode a1)
{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000012, 0x80000001823AF050);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000017, 0x80000001823AF140);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD00000000000001ELL, 0x80000001823AF010);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000027, 0x80000001823AF110);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000024, 0x80000001823AF0E0);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD00000000000002CLL, 0x80000001823AF0B0);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000032, 0x80000001823AF070);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD00000000000001FLL, 0x80000001823AF030);
}

uint64_t outlined retain of ICUDateFormatter.DateFormatInfo(uint64_t a1)
{
  return a1;
}

void ___explicitSubclassExceptions_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)_explicitSubclassExceptionKeys, (const void **)_explicitSubclassExceptionObjects, 20, 0, 0);
  qword_1EB1ED1B8 = (uint64_t)CFDictionaryCreateMutableCopy(v0, 21, v1);
  CFRelease(v1);
  uint64_t v2 = (__CFDictionary *)qword_1EB1ED1B8;
  Class v3 = NSClassFromString((NSString *)@"NSSharedKeyDictionary");
  CFDictionaryAddValue(v2, v3, MEMORY[0x1E4F1CA60]);
  id v4 = (__CFDictionary *)qword_1EB1ED1B8;
  Class v5 = NSClassFromString((NSString *)@"__NSCFString");
  CFDictionaryAddValue(v4, v5, NSMutableString);
  uint64_t v6 = (__CFDictionary *)qword_1EB1ED1B8;
  Class v7 = NSClassFromString((NSString *)@"__NSCFConstantString");

  CFDictionaryAddValue(v6, v7, NSMutableString);
}

ValueMetadata *type metadata accessor for StringStyle()
{
  return &type metadata for StringStyle;
}

void NSKeyValueObservingTSDDestroy(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

void specialized static _FileOperations.moveFile(_:to:with:options:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void **)a1;
  Class v5 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)a2;
  os_log_type_t v8 = *(void **)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  char v84 = *(void **)a1;
  int64_t v85 = v5;
  uint64_t v86 = v7;
  uint64_t v87 = v9;
  uint64_t v88 = v8;
  uint64_t v89 = v10;
  long long v90 = a3;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v94 = v7;
    swift_retain();
    id v11 = v6;
    swift_retain();
    Swift::String v12 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    Swift::String v93 = v12;
    swift_bridgeObjectRetain();
    uint64_t v82 = v5;
    long long v83 = (void *)v7;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v12._object;
    }
    else
    {
      unint64_t object = (unint64_t)v12._object;
      if ((specialized BidirectionalCollection.last.getter(v12._countAndFlagsBits, (unint64_t)v12._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v93._countAndFlagsBits;
        unint64_t object = (unint64_t)v93._object;
      }
    }
    uint64_t v91 = Set.init(minimumCapacity:)();
    uint64_t v23 = specialized Set._Variant.insert(_:)(&v95, 0x2FuLL);
    uint64_t v24 = v91;
    uint64_t v25 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v25 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v25)
    {
      uint64_t v91 = countAndFlagsBits;
      unint64_t v92 = object;
      MEMORY[0x1F4188790](v23);
      uint64_t v76 = &v91;
      uint64_t v77 = v24;
      swift_bridgeObjectRetain();
      char v26 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v75, countAndFlagsBits, object);
      if (v27 == 1)
      {
        Swift::Int v28 = v91;
        unint64_t v29 = v92;
        swift_bridgeObjectRetain();
        char v30 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v28, v29, v24);
        unint64_t v32 = v31;
        swift_bridgeObjectRelease();
      }
      else
      {
        char v30 = (void (*)(char *, void))v26;
        unint64_t v32 = v27;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v32)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v30 = 0;
        unint64_t v32 = 0xE000000000000000;
        goto LABEL_26;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      char v30 = 0;
      unint64_t v32 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_26:
    _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n((uint64_t)v30, v32, (uint64_t (*)(char *))partial apply for closure #1 in static _FileOperations.moveFile(_:to:with:options:));
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v81 = v3;
  id v15 = v6;
  id v16 = (const std::__fs::filesystem::path *)objc_msgSend(v15, sel_fileSystemRepresentation);
  if (v16)
  {
    id v17 = v16;
    uint64_t v80 = &v78;
    MEMORY[0x1F4188790](v16);
    v74[2] = v9;
    v74[3] = v8;
    v74[4] = v10;
    v74[5] = a3;
    v75[0] = v18;
    v75[1] = v15;
    uint64_t v76 = v5;
    uint64_t v77 = v7;
    if (!_foundation_swift_url_feature_enabled())
    {
      id v39 = v9;
      closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)((const std::__fs::filesystem::path *)objc_msgSend(v39, sel_fileSystemRepresentation), v39, v8, v10, a3, v17, v15, v5, v7);
      return;
    }
    long long v83 = v74;
    v93._uint64_t countAndFlagsBits = (uint64_t)v9;
    v93._unint64_t object = v8;
    uint64_t v94 = v10;
    swift_retain();
    BOOL v19 = v9;
    swift_retain();
    Swift::String v20 = URL.path(percentEncoded:)(1);
    uint64_t v21 = v20._countAndFlagsBits;
    Swift::String v93 = v20;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t v22 = (unint64_t)v20._object;
    }
    else
    {
      unint64_t v22 = (unint64_t)v20._object;
      if ((specialized BidirectionalCollection.last.getter(v20._countAndFlagsBits, (unint64_t)v20._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v21 = v93._countAndFlagsBits;
        unint64_t v22 = (unint64_t)v93._object;
      }
    }
    uint64_t v91 = Set.init(minimumCapacity:)();
    uint64_t v52 = specialized Set._Variant.insert(_:)(&v95, 0x2FuLL);
    uint64_t v53 = v91;
    uint64_t v54 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0) {
      uint64_t v54 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if (v54)
    {
      uint64_t v82 = v19;
      uint64_t v91 = v21;
      unint64_t v92 = v22;
      MEMORY[0x1F4188790](v52);
      v73[2] = &v91;
      v73[3] = v53;
      swift_bridgeObjectRetain();
      uint64_t v55 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v73, v21, v22);
      if (v56 == 1)
      {
        Swift::Int v57 = v91;
        unint64_t v58 = v92;
        swift_bridgeObjectRetain();
        uint64_t v59 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v57, v58, v53);
        unint64_t v61 = v60;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v59 = (void (*)(char *, void))v55;
        unint64_t v61 = v56;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v19 = v82;
      if (!v61)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v59 = 0;
        unint64_t v61 = 0xE000000000000000;
        goto LABEL_48;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v59 = 0;
      unint64_t v61 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n((uint64_t)v59, v61, (uint64_t (*)(char *))partial apply for closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:));
    swift_bridgeObjectRelease();
    return;
  }
  swift_retain_n();
  id v33 = v15;
  swift_retain_n();
  id v34 = v33;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v94 = v7;
    uint64_t v35 = (uint64_t *)v34;
    swift_retain();
    swift_retain();
    Swift::String v36 = URL.path(percentEncoded:)(1);
    uint64_t v37 = v36._countAndFlagsBits;
    Swift::String v93 = v36;
    swift_bridgeObjectRetain();
    uint64_t v80 = v35;
    if (String.count.getter() <= 1)
    {
      unint64_t v38 = (unint64_t)v36._object;
    }
    else
    {
      unint64_t v38 = (unint64_t)v36._object;
      if ((specialized BidirectionalCollection.last.getter(v36._countAndFlagsBits, (unint64_t)v36._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v37 = v93._countAndFlagsBits;
        unint64_t v38 = (unint64_t)v93._object;
      }
    }
    uint64_t v91 = Set.init(minimumCapacity:)();
    uint64_t v62 = specialized Set._Variant.insert(_:)(&v95, 0x2FuLL);
    uint64_t v63 = v91;
    uint64_t v64 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000) == 0) {
      uint64_t v64 = v37 & 0xFFFFFFFFFFFFLL;
    }
    if (v64)
    {
      id v79 = v34;
      uint64_t v91 = v37;
      unint64_t v92 = v38;
      MEMORY[0x1F4188790](v62);
      uint64_t v76 = &v91;
      uint64_t v77 = v63;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v75, v37, v38);
      if (v65 == 1)
      {
        Swift::Int v66 = v91;
        unint64_t v67 = v92;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v66, v67, v63);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v34 = v79;
      int64_t v69 = v80;
    }
    else
    {
      swift_bridgeObjectRelease();
      int64_t v69 = v80;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    id v40 = objc_msgSend(v34, sel__parameterString);
    if (v40)
    {
      id v41 = v40;
      id v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      id v44 = v43;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v45 = objc_msgSend(v34, sel_path)) != 0)
      {
        char v46 = v45;
        id v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        id v49 = v48;

        v93._uint64_t countAndFlagsBits = (uint64_t)v47;
        v93._unint64_t object = v49;
        swift_bridgeObjectRetain();
        v50._uint64_t countAndFlagsBits = 59;
        v50._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v50);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v51._uint64_t countAndFlagsBits = (uint64_t)v42;
        v51._unint64_t object = v44;
        String.append(_:)(v51);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        v93._uint64_t countAndFlagsBits = 59;
        v93._unint64_t object = (void *)0xE100000000000000;
        v70._uint64_t countAndFlagsBits = (uint64_t)v42;
        v70._unint64_t object = v44;
        String.append(_:)(v70);
        swift_release();
        swift_release();
      }
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    unint64_t v68 = (uint64_t *)objc_msgSend(v34, sel_path);
    if (!v68)
    {
      swift_release();
      swift_release();

      goto LABEL_57;
    }
    int64_t v69 = v68;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    swift_release();
    swift_release();
  }
LABEL_57:
  uint64_t v71 = self;
  uint64_t v72 = String._bridgeToObjectiveCImpl()();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  objc_msgSend(v71, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v72, v34, 0, 0, 0, 0);
  swift_unknownObjectRelease();

  swift_willThrow();
}

void closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)(const std::__fs::filesystem::path *a1, void *a2, void *a3, uint64_t a4, void *a5, const std::__fs::filesystem::path *a6, void *a7, void *a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v494 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    swift_retain_n();
    id v30 = a2;
    swift_retain_n();
    id v31 = v30;
    unint64_t v32 = a3;
    if (_foundation_swift_url_feature_enabled())
    {
      v483 = v10;
      *(void *)&v493.st_uid = a4;
      id v33 = v31;
      swift_retain();
      swift_retain();
      Swift::String v34 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v34._countAndFlagsBits;
      *(void *)&v493.st_dev = v34._countAndFlagsBits;
      v493.st_ino = (__darwin_ino64_t)v34._object;
      swift_bridgeObjectRetain();
      v474 = v32;
      uint64_t v480 = a4;
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v34._object;
      }
      else
      {
        unint64_t object = (unint64_t)v34._object;
        if ((specialized BidirectionalCollection.last.getter(v34._countAndFlagsBits, (unint64_t)v34._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = *(void *)&v493.st_dev;
          unint64_t object = v493.st_ino;
        }
      }
      v489._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v65 = specialized Set._Variant.insert(_:)(&v491, 0x2FuLL);
      uint64_t v66 = v489._countAndFlagsBits;
      uint64_t v67 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0) {
        uint64_t v67 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v67)
      {
        id v482 = v33;
        v489._uint64_t countAndFlagsBits = countAndFlagsBits;
        v489._unint64_t object = (void *)object;
        MEMORY[0x1F4188790](v65);
        v461 = &v489;
        v462 = (Swift::String *)v66;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v460, countAndFlagsBits, object);
        if (v68 == 1)
        {
          Swift::Int v69 = v489._countAndFlagsBits;
          Swift::String v70 = v489._object;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v69, (unint64_t)v70, v66);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v33 = v482;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v37 = objc_msgSend(v31, sel__parameterString);
      if (v37)
      {
        unint64_t v38 = v37;
        id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        id v41 = v40;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v42 = objc_msgSend(v31, sel_path)) != 0)
        {
          uint64_t v43 = v42;
          id v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          __darwin_ino64_t v46 = v45;

          *(void *)&v493.st_dev = v44;
          v493.st_ino = v46;
          swift_bridgeObjectRetain();
          v47._uint64_t countAndFlagsBits = 59;
          v47._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v47);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v48._uint64_t countAndFlagsBits = (uint64_t)v39;
          v48._unint64_t object = v41;
          String.append(_:)(v48);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          *(void *)&v493.st_dev = 59;
          v493.st_ino = 0xE100000000000000;
          v71._uint64_t countAndFlagsBits = (uint64_t)v39;
          v71._unint64_t object = v41;
          String.append(_:)(v71);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
      id v72 = objc_msgSend(v31, sel_path);
      if (!v72)
      {
        swift_release();
        swift_release();

        goto LABEL_39;
      }
      id v33 = v72;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
      swift_release();
      swift_release();
    }
LABEL_39:
    uint64_t v78 = self;
    uint64_t v79 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    objc_msgSend(v78, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v79, v31, 0, 0, 0, 0);
    swift_unknownObjectRelease();

    goto LABEL_40;
  }
  v483 = v10;
  id v477 = a7;
  id v478 = a2;
  v479 = a8;
  uint64_t v17 = String.init(cString:)();
  unint64_t v19 = v18;
  uint64_t v20 = String.init(cString:)();
  uint64_t v21 = v17;
  unint64_t v22 = a5;
  LOBYTE(a5) = NSFileManager._shouldCopyItemAtPath(_:to:)(v21, v19, v20, v23, (SEL *)&selRef_fileManager_shouldMoveItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldMoveItemAtPath_toPath_);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a5 & 1) == 0) {
    return;
  }
  uint64_t v480 = a4;
  uint64_t v24 = a9;
  memset(&v493, 0, 28);
  memset(&v493.st_atimespec, 0, 112);
  v472 = a1;
  uint64_t v473 = a9;
  if (lstat((const char *)a1, &v493))
  {
    LODWORD(v482) = 0;
    unint64_t v26 = (unint64_t)a3;
    unint64_t v27 = v483;
    Swift::Int v28 = v22;
    unint64_t v29 = a6;
    goto LABEL_144;
  }
  swift_retain();
  id v49 = v477;
  swift_retain();
  v469 = a6;
  id v470 = v49;
  v474 = a3;
  v471 = v22;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v490 = a9;
    id v50 = v49;
    swift_retain();
    swift_retain();
    Swift::String v51 = URL.path(percentEncoded:)(1);
    Swift::String v489 = v51;
    swift_bridgeObjectRetain();
    uint64_t v52 = v483;
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v51._countAndFlagsBits, (unint64_t)v51._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    id v482 = v50;
    v491._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v53 = specialized Set._Variant.insert(_:)(&v486, 0x2FuLL);
    uint64_t v54 = v491._countAndFlagsBits;
    uint64_t v56 = v489._countAndFlagsBits;
    uint64_t v55 = v489._object;
    unint64_t v57 = ((unint64_t)v489._object >> 56) & 0xF;
    if (((uint64_t)v489._object & 0x2000000000000000) == 0) {
      unint64_t v57 = v489._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v57)
    {
      Swift::String v491 = v489;
      MEMORY[0x1F4188790](v53);
      v461 = &v491;
      v462 = (Swift::String *)v54;
      swift_bridgeObjectRetain();
      unint64_t v58 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v460, v56, (unint64_t)v55);
      v483 = v52;
      if (v59 == 1)
      {
        unint64_t v61 = (unint64_t)v491._object;
        Swift::Int v60 = v491._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v62 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v60, v61, v54);
        unint64_t v64 = v63;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v62 = (void (*)(char *, void))v58;
        unint64_t v64 = v59;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v81 = v474;
      if (!v64)
      {
        swift_release();
        swift_release();
        id v84 = v482;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v80 = 0;
        unint64_t v64 = 0xE000000000000000;
        goto LABEL_51;
      }
      uint64_t v80 = (uint64_t)v62;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v80 = 0;
      unint64_t v64 = 0xE000000000000000;
      uint64_t v81 = v474;
    }
    swift_release();
    swift_release();
    id v84 = v482;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_51:
    swift_bridgeObjectRetain();
    id Path = (id)String._lastPathComponent.getter(v80, v64);
    id v482 = v85;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease_n();
    uint64_t v82 = v483;
    uint64_t v83 = v480;
    goto LABEL_52;
  }
  id v73 = objc_msgSend(v49, sel_lastPathComponent);
  long long v74 = v49;
  id Path = v73;
  if (v73)
  {
    id v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    id v482 = v77;
    swift_release();
    swift_release();

    id Path = v76;
  }
  else
  {
    swift_release();
    swift_release();

    id v482 = (id)0xE000000000000000;
  }
  uint64_t v82 = v483;
  uint64_t v83 = v480;
  uint64_t v81 = v474;
LABEL_52:
  swift_retain();
  id v86 = v478;
  swift_retain();
  char v87 = _foundation_swift_url_feature_enabled();
  id v468 = v86;
  if ((v87 & 1) == 0)
  {
    v483 = v82;
    id v101 = objc_msgSend(v86, sel_lastPathComponent);
    if (v101)
    {
      long long v102 = v101;
      v481 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
      long long v104 = v103;
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();

      v481 = 0;
      long long v104 = (void *)0xE000000000000000;
    }
    goto LABEL_70;
  }
  v476 = Path;
  v489._uint64_t countAndFlagsBits = (uint64_t)v86;
  v489._unint64_t object = v81;
  uint64_t v490 = v83;
  v481 = v86;
  swift_retain();
  swift_retain();
  Swift::String v88 = URL.path(percentEncoded:)(1);
  Swift::String v489 = v88;
  swift_bridgeObjectRetain();
  if (String.count.getter() > 1
    && (specialized BidirectionalCollection.last.getter(v88._countAndFlagsBits, (unint64_t)v88._object) & 0x1FF) == 0x2F)
  {
    specialized RangeReplaceableCollection<>.popLast()();
    swift_bridgeObjectRelease();
  }
  v491._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
  uint64_t v89 = specialized Set._Variant.insert(_:)(&v486, 0x2FuLL);
  uint64_t v90 = v491._countAndFlagsBits;
  uint64_t v92 = v489._countAndFlagsBits;
  uint64_t v91 = v489._object;
  unint64_t v93 = ((unint64_t)v489._object >> 56) & 0xF;
  if (((uint64_t)v489._object & 0x2000000000000000) == 0) {
    unint64_t v93 = v489._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v93)
  {
    Swift::String v491 = v489;
    MEMORY[0x1F4188790](v89);
    v461 = &v491;
    v462 = (Swift::String *)v90;
    swift_bridgeObjectRetain();
    uint64_t v94 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v460, v92, (unint64_t)v91);
    v483 = v82;
    if (v95 == 1)
    {
      unint64_t v97 = (unint64_t)v491._object;
      Swift::Int v96 = v491._countAndFlagsBits;
      swift_bridgeObjectRetain();
      long long v98 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v96, v97, v90);
      unint64_t v100 = v99;
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v98 = (void (*)(char *, void))v94;
      unint64_t v100 = v95;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v105 = v481;
    if (!v100)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v98 = 0;
      unint64_t v100 = 0xE000000000000000;
      goto LABEL_69;
    }
  }
  else
  {
    v483 = v82;
    swift_bridgeObjectRelease();
    long long v98 = 0;
    unint64_t v100 = 0xE000000000000000;
    long long v105 = v481;
  }
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_69:
  swift_bridgeObjectRetain();
  v481 = (void *)String._lastPathComponent.getter((uint64_t)v98, v100);
  long long v104 = v106;
  swift_release();
  swift_release();

  swift_bridgeObjectRelease_n();
  id Path = v476;
LABEL_70:
  v489._uint64_t countAndFlagsBits = (uint64_t)Path;
  v489._unint64_t object = v482;
  swift_bridgeObjectRetain();
  unint64_t v107 = Substring.init<A>(_:)();
  unint64_t v109 = v108;
  uint64_t v111 = v110;
  uint64_t v113 = v112;
  v489._uint64_t countAndFlagsBits = (uint64_t)v481;
  v489._unint64_t object = v104;
  swift_bridgeObjectRetain();
  unint64_t v114 = Substring.init<A>(_:)();
  uint64_t v118 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v114, v115, v116, v117, 0, 0, 1, 0, 0, v107, v109, v111, v113);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v118)
  {
    unint64_t v26 = (unint64_t)v474;
    uint64_t v119 = v480;
LABEL_72:
    unint64_t v27 = v483;
    Swift::String v120 = v479;
    uint64_t v24 = v473;
    unint64_t v29 = v469;
    goto LABEL_141;
  }
  uint64_t v475 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  uint64_t v121 = swift_allocObject();
  uint64_t v122 = specialized static Array._adoptStorage(_:count:)(v121, 1);
  uint64_t v123 = (void *)*MEMORY[0x1E4F1C6F8];
  *int64_t v124 = *MEMORY[0x1E4F1C6F8];
  uint64_t v125 = (void *)destructiveProjectEnumData for PredicateCodableError(v122, v124);
  uint64_t v466 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v126 = static _SetStorage.allocate(capacity:)();
  id v465 = v123;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v125);
  v481 = v125;
  uint64_t v24 = v125[4];
  static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v24);
  Hasher.init(_seed:)();
  id v482 = (id)v24;
  String.hash(into:)();
  Swift::Int v127 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v128 = -1 << *(unsigned char *)(v126 + 32);
  unint64_t v26 = v127 & ~v128;
  unint64_t v129 = v26 >> 6;
  v476 = (void *)(v126 + 56);
  uint64_t v130 = *(void *)(v126 + 56 + 8 * (v26 >> 6));
  uint64_t v131 = 1 << v26;
  if (((1 << v26) & v130) == 0) {
    goto LABEL_84;
  }
  id v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v126 + 48) + 8 * v26));
  uint64_t v134 = v133;
  if (v132 == static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v24) && v134 == v135)
  {
    swift_bridgeObjectRelease_n();
LABEL_78:

    uint64_t v119 = v480;
    goto LABEL_79;
  }
  char v136 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v136) {
    goto LABEL_78;
  }
  unint64_t v137 = ~v128;
  unint64_t v26 = (v26 + 1) & ~v128;
  unint64_t v129 = v26 >> 6;
  uint64_t v130 = v476[v26 >> 6];
  uint64_t v131 = 1 << v26;
  if ((v130 & (1 << v26)) == 0)
  {
LABEL_84:
    uint64_t v119 = v480;
    goto LABEL_85;
  }
  id v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v126 + 48) + 8 * v26));
  uint64_t v140 = v139;
  if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v24) && v140 == v141)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v119 = v480;
    goto LABEL_299;
  }
  char v431 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v119 = v480;
  if ((v431 & 1) == 0)
  {
    unint64_t v26 = (v26 + 1) & v137;
    unint64_t v129 = v26 >> 6;
    uint64_t v130 = v476[v26 >> 6];
    uint64_t v131 = 1 << v26;
    if ((v130 & (1 << v26)) == 0) {
      goto LABEL_85;
    }
    id v432 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v126 + 48) + 8 * v26));
    uint64_t v434 = v433;
    if (v432 == static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v24) && v434 == v435) {
      goto LABEL_288;
    }
    char v452 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v452 & 1) == 0) {
      goto LABEL_301;
    }
  }
LABEL_299:
  while (2)
  {

LABEL_79:
    uint64_t v24 = v473;
    unint64_t v29 = v469;
LABEL_87:
    swift_bridgeObjectRelease();
    uint64_t v145 = swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)(v145);
    unint64_t v467 = v126;
    swift_release();
    type metadata accessor for NSURLResourceKey(0);
    uint64_t v147 = v146;
    uint64_t v148 = _ContiguousArrayBuffer._asCocoaArray()();
    v489._uint64_t countAndFlagsBits = 0;
    id v149 = objc_msgSend(v470, sel_resourceValuesForKeys_error_, v148, &v489);
    swift_unknownObjectRelease();
    unint64_t v150 = (void *)v489._countAndFlagsBits;
    if (!v149)
    {
      if (!v489._countAndFlagsBits)
      {
        unint64_t v26 = (unint64_t)v474;
        if (one-time initialization token for _nilObjCError != -1) {
          goto LABEL_310;
        }
        goto LABEL_131;
      }
      id v201 = (id)v489._countAndFlagsBits;
      swift_willThrow();
      swift_release();

      goto LABEL_138;
    }
    uint64_t v464 = v147;
    uint64_t v463 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v149);
    id v151 = v150;

    uint64_t v152 = swift_allocObject();
    uint64_t v153 = specialized static Array._adoptStorage(_:count:)(v152, 3);
    char v154 = (void *)*MEMORY[0x1E4F1C8C0];
    v155 = v465;
    void *v156 = v465;
    v156[1] = v154;
    v157 = (void *)*MEMORY[0x1E4F1C8C8];
    v156[2] = *MEMORY[0x1E4F1C8C8];
    v158 = (void *)destructiveProjectEnumData for PredicateCodableError(v153, v156);
    unint64_t v26 = static _SetStorage.allocate(capacity:)();
    v481 = (void *)(v26 + 56);
    uint64_t v475 = (uint64_t)(v158 + 4);
    v476 = v158;
    id v159 = v155;
    id v160 = v154;
    id v161 = v157;
    uint64_t v126 = 0;
    while (1)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v126, 1, v476);
      v162 = *(void **)(v475 + 8 * v126);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v162);
      uint64_t v119 = v163;
      Hasher.init(_seed:)();
      id v482 = v162;
      String.hash(into:)();
      Swift::Int v164 = Hasher._finalize()();
      swift_bridgeObjectRelease();
      uint64_t v24 = -1 << *(unsigned char *)(v26 + 32);
      unint64_t v137 = v164 & ~v24;
      unint64_t v165 = v137 >> 6;
      uint64_t v166 = v481[v137 >> 6];
      uint64_t v167 = 1 << v137;
      if (((1 << v137) & v166) == 0) {
        break;
      }
      id v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v26 + 48) + 8 * v137));
      uint64_t v170 = v169;
      if (v168 == static String._unconditionallyBridgeFromObjectiveC(_:)(v162) && v170 == v171) {
        goto LABEL_89;
      }
      uint64_t v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v119) {
        goto LABEL_90;
      }
      uint64_t v24 = ~v24;
      unint64_t v137 = (v137 + 1) & v24;
      unint64_t v165 = v137 >> 6;
      uint64_t v166 = v481[v137 >> 6];
      uint64_t v167 = 1 << v137;
      if ((v166 & (1 << v137)) == 0) {
        break;
      }
      id v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v26 + 48) + 8 * v137));
      uint64_t v175 = v174;
      if (v173 == static String._unconditionallyBridgeFromObjectiveC(_:)(v162) && v175 == v176) {
        goto LABEL_89;
      }
      uint64_t v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v119) {
        goto LABEL_90;
      }
      unint64_t v137 = (v137 + 1) & v24;
      unint64_t v165 = v137 >> 6;
      uint64_t v166 = v481[v137 >> 6];
      uint64_t v167 = 1 << v137;
      if ((v166 & (1 << v137)) == 0) {
        break;
      }
      id v178 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v26 + 48) + 8 * v137));
      uint64_t v180 = v179;
      id v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v162);
      uint64_t v119 = v182;
      if (v178 == v181 && v180 == v182)
      {
LABEL_89:
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v183 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v183 & 1) == 0)
        {
          do
          {
            unint64_t v137 = (v137 + 1) & v24;
            unint64_t v165 = v137 >> 6;
            uint64_t v166 = v481[v137 >> 6];
            uint64_t v167 = 1 << v137;
            if ((v166 & (1 << v137)) == 0) {
              goto LABEL_115;
            }
            id v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v26 + 48) + 8 * v137));
            uint64_t v186 = v185;
            if (v184 == static String._unconditionallyBridgeFromObjectiveC(_:)(v162) && v186 == v187) {
              goto LABEL_89;
            }
            uint64_t v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          while ((v119 & 1) == 0);
        }
      }
LABEL_90:

LABEL_91:
      if (++v126 == 3)
      {
        swift_bridgeObjectRelease();
        uint64_t v191 = swift_bridgeObjectRetain();
        specialized _copyCollectionToContiguousArray<A>(_:)(v191);
        swift_release();
        uint64_t v192 = _ContiguousArrayBuffer._asCocoaArray()();
        v489._uint64_t countAndFlagsBits = 0;
        id v193 = objc_msgSend(v468, sel_resourceValuesForKeys_error_, v192, &v489);
        swift_unknownObjectRelease();
        v194 = (void *)v489._countAndFlagsBits;
        if (v193)
        {
          v195 = (void *)specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v193);
          id v196 = v194;

          v491._uint64_t countAndFlagsBits = v463;
          v491._unint64_t object = (void *)v467;
          URLResourceValues.parentDirectory.getter(&v489);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v197 = (void *)v489._countAndFlagsBits;
          v198 = v489._object;
          uint64_t v199 = v490;
          id v482 = v195;
          id v486 = v195;
          unint64_t v487 = v26;
          URLResourceValues.parentDirectory.getter(&v491);
          v200 = (void *)v491._countAndFlagsBits;
          unint64_t v29 = v469;
          if (v197)
          {
            id v486 = v197;
            unint64_t v487 = (unint64_t)v198;
            uint64_t v488 = v199;
            if (v491._countAndFlagsBits)
            {
              Swift::String v484 = v491;
              uint64_t v485 = v492;
              outlined copy of URL?((uint64_t)v197);
              LODWORD(v481) = specialized static URL.== infix(_:_:)((uint64_t)&v486, &v484._countAndFlagsBits);
              outlined consume of URL?(v200);

              swift_release();
              swift_release();
              outlined consume of URL?(v197);
              uint64_t v119 = v480;
              if ((v481 & 1) == 0)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v26 = (unint64_t)v474;
                goto LABEL_72;
              }
LABEL_127:
              uint64_t v203 = (uint64_t)v482;
              v489._uint64_t countAndFlagsBits = (uint64_t)v482;
              v489._unint64_t object = (void *)v26;
              char v204 = URLResourceValues.volumeSupportsCasePreservedNames.getter();
              uint64_t v24 = v473;
              if (v204 == 2)
              {
                __break(1u);
              }
              else
              {
                unint64_t v27 = v483;
                unint64_t v29 = v469;
                if ((v204 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_139;
                }
                v489._uint64_t countAndFlagsBits = v203;
                v489._unint64_t object = (void *)v26;
                char v424 = URLResourceValues.volumeSupportsCaseSensitiveNames.getter();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v424 != 2)
                {
                  unint64_t v26 = (unint64_t)v474;
                  if (v424) {
                    goto LABEL_140;
                  }
                  LODWORD(v482) = 0;
LABEL_143:
                  Swift::Int v28 = v471;
LABEL_144:
                  rename(v29, v472, v25);
                  int v214 = v213;
                  int v215 = MEMORY[0x185301870]();
                  int v216 = v215;
                  if (v214 && v215 == 2)
                  {
                    LOBYTE(v491._countAndFlagsBits) = 0;
                    v489._uint64_t countAndFlagsBits = 0;
                    if (objc_msgSend(v28, sel__handleFaultedOutCloudDocFromSource_toDestination_handled_error_, v477, v478, &v491, &v489))
                    {
                      char v217 = v491._countAndFlagsBits;
                      id v218 = (id)v489._countAndFlagsBits;
                      if (v217) {
                        return;
                      }
                      goto LABEL_160;
                    }
                    if (v489._countAndFlagsBits)
                    {
                      (id)v489._countAndFlagsBits;
                    }
                    else
                    {
                      if (one-time initialization token for _nilObjCError != -1) {
                        swift_once();
                      }
                      id v271 = (id)_nilObjCError;
                    }
LABEL_40:
                    swift_willThrow();
                    return;
                  }
                  if (!v214) {
                    return;
                  }
                  if (v215 != 18)
                  {
LABEL_160:
                    v471 = v28;
                    id v237 = v477;
                    uint64_t v238 = v24;
                    v239 = v479;
                    uint64_t v240 = v480;
                    v489._uint64_t countAndFlagsBits = (uint64_t)v477;
                    v489._unint64_t object = v479;
                    uint64_t v490 = v238;
                    v491._uint64_t countAndFlagsBits = (uint64_t)v478;
                    v491._unint64_t object = (void *)v26;
                    uint64_t v492 = v480;
                    static CocoaError.moveFileError(_:_:_:)(v216, (uint64_t)&v489, (void **)&v491, (void *(*)(void *__return_ptr, void *, uint64_t))&v486);
                    id v241 = v486;
                    swift_retain();
                    v481 = v241;
                    id v242 = v237;
                    swift_retain();
                    int v243 = _foundation_swift_url_feature_enabled();
                    v483 = v27;
                    if (!v243)
                    {
                      id v259 = objc_msgSend(v242, sel__parameterString);
                      if (v259)
                      {
                        v260 = v259;
                        id v261 = static String._unconditionallyBridgeFromObjectiveC(_:)(v259);
                        v263 = v262;

                        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                          && (id v264 = objc_msgSend(v242, sel_path)) != 0)
                        {
                          v265 = v264;
                          id v266 = static String._unconditionallyBridgeFromObjectiveC(_:)(v264);
                          v268 = v267;

                          v489._uint64_t countAndFlagsBits = (uint64_t)v266;
                          v489._unint64_t object = v268;
                          swift_bridgeObjectRetain();
                          v269._uint64_t countAndFlagsBits = 59;
                          v269._unint64_t object = (void *)0xE100000000000000;
                          String.append(_:)(v269);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRetain();
                          v270._uint64_t countAndFlagsBits = (uint64_t)v261;
                          v270._unint64_t object = v263;
                          String.append(_:)(v270);
                          swift_release();
                          swift_release();

                          swift_bridgeObjectRelease();
                        }
                        else
                        {
                          v489._uint64_t countAndFlagsBits = 59;
                          v489._unint64_t object = (void *)0xE100000000000000;
                          v285._uint64_t countAndFlagsBits = (uint64_t)v261;
                          v285._unint64_t object = v263;
                          String.append(_:)(v285);
                          swift_release();
                          swift_release();
                        }
                        swift_bridgeObjectRelease();
                        v258 = v489._object;
                        id v482 = (id)v489._countAndFlagsBits;
                      }
                      else
                      {
                        id v286 = objc_msgSend(v242, sel_path);
                        if (v286)
                        {
                          v287 = v286;
                          id v482 = static String._unconditionallyBridgeFromObjectiveC(_:)(v286);
                          v258 = v288;
                          swift_release();
                          swift_release();
                        }
                        else
                        {
                          swift_release();
                          swift_release();

                          id v482 = 0;
                          v258 = (void *)0xE000000000000000;
                        }
                      }
LABEL_192:
                      swift_retain();
                      id v289 = v478;
                      swift_retain();
                      if (!_foundation_swift_url_feature_enabled())
                      {
                        id v306 = objc_msgSend(v289, sel__parameterString);
                        if (v306)
                        {
                          v307 = v306;
                          id v308 = static String._unconditionallyBridgeFromObjectiveC(_:)(v306);
                          v310 = v309;

                          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                            && (id v311 = objc_msgSend(v289, sel_path)) != 0)
                          {
                            v312 = v311;
                            id v313 = static String._unconditionallyBridgeFromObjectiveC(_:)(v311);
                            v315 = v314;

                            v489._uint64_t countAndFlagsBits = (uint64_t)v313;
                            v489._unint64_t object = v315;
                            swift_bridgeObjectRetain();
                            v316._uint64_t countAndFlagsBits = 59;
                            v316._unint64_t object = (void *)0xE100000000000000;
                            String.append(_:)(v316);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRetain();
                            v317._uint64_t countAndFlagsBits = (uint64_t)v308;
                            v317._unint64_t object = v310;
                            String.append(_:)(v317);
                            swift_release();
                            swift_release();

                            swift_bridgeObjectRelease();
                          }
                          else
                          {
                            v489._uint64_t countAndFlagsBits = 59;
                            v489._unint64_t object = (void *)0xE100000000000000;
                            v318._uint64_t countAndFlagsBits = (uint64_t)v308;
                            v318._unint64_t object = v310;
                            String.append(_:)(v318);
                            swift_release();
                            swift_release();
                          }
                          swift_bridgeObjectRelease();
                          uint64_t v303 = v489._countAndFlagsBits;
                          v305 = v489._object;
                        }
                        else
                        {
                          id v319 = objc_msgSend(v289, sel_path);
                          if (v319)
                          {
                            v320 = v319;
                            uint64_t v303 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v319);
                            v305 = v321;
                            swift_release();
                            swift_release();
                          }
                          else
                          {
                            swift_release();
                            swift_release();

                            uint64_t v303 = 0;
                            v305 = (void *)0xE000000000000000;
                          }
                        }
                        goto LABEL_215;
                      }
                      v489._uint64_t countAndFlagsBits = (uint64_t)v289;
                      v489._unint64_t object = (void *)v26;
                      uint64_t v490 = v240;
                      id v290 = v289;
                      v474 = (void *)v26;
                      swift_retain();
                      swift_retain();
                      Swift::String v291 = URL.path(percentEncoded:)(1);
                      Swift::String v489 = v291;
                      swift_bridgeObjectRetain();
                      if (String.count.getter() > 1
                        && (specialized BidirectionalCollection.last.getter(v291._countAndFlagsBits, (unint64_t)v291._object) & 0x1FF) == 0x2F)
                      {
                        specialized RangeReplaceableCollection<>.popLast()();
                        swift_bridgeObjectRelease();
                      }
                      v491._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
                      uint64_t v292 = specialized Set._Variant.insert(_:)(&v486, 0x2FuLL);
                      uint64_t v293 = v491._countAndFlagsBits;
                      uint64_t v294 = v489._countAndFlagsBits;
                      v295 = v489._object;
                      unint64_t v296 = ((unint64_t)v489._object >> 56) & 0xF;
                      if (((uint64_t)v489._object & 0x2000000000000000) == 0) {
                        unint64_t v296 = v489._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                      }
                      if (v296)
                      {
                        Swift::String v491 = v489;
                        MEMORY[0x1F4188790](v292);
                        v461 = &v491;
                        v462 = (Swift::String *)v293;
                        swift_bridgeObjectRetain();
                        uint64_t v297 = v294;
                        v298 = v483;
                        v299 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v460, v297, (unint64_t)v295);
                        v483 = v298;
                        if (v300 == (void *)1)
                        {
                          unint64_t v302 = (unint64_t)v491._object;
                          Swift::Int v301 = v491._countAndFlagsBits;
                          swift_bridgeObjectRetain();
                          uint64_t v303 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v301, v302, v293);
                          v305 = v304;
                          swift_bridgeObjectRelease();
                        }
                        else
                        {
                          uint64_t v303 = (uint64_t)v299;
                          v305 = v300;
                        }
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if (!v305)
                        {
                          swift_release();
                          swift_release();

                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v303 = 0;
                          v305 = (void *)0xE000000000000000;
                          goto LABEL_214;
                        }
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                        uint64_t v303 = 0;
                        v305 = (void *)0xE000000000000000;
                      }
                      swift_release();
                      swift_release();

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
LABEL_214:
                      swift_release();
                      swift_release();

LABEL_215:
                      v322 = v481;
                      unsigned __int8 v323 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v481, (uint64_t)v482, (unint64_t)v258, v303, (unint64_t)v305, (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtPath_toPath_);

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v323 & 1) == 0) {
                        goto LABEL_217;
                      }

                      return;
                    }
                    v489._uint64_t countAndFlagsBits = (uint64_t)v242;
                    v489._unint64_t object = v239;
                    uint64_t v490 = v238;
                    id v244 = v242;
                    swift_retain();
                    swift_retain();
                    Swift::String v245 = URL.path(percentEncoded:)(1);
                    Swift::String v489 = v245;
                    swift_bridgeObjectRetain();
                    if (String.count.getter() > 1
                      && (specialized BidirectionalCollection.last.getter(v245._countAndFlagsBits, (unint64_t)v245._object) & 0x1FF) == 0x2F)
                    {
                      specialized RangeReplaceableCollection<>.popLast()();
                      swift_bridgeObjectRelease();
                    }
                    v491._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
                    uint64_t v246 = specialized Set._Variant.insert(_:)(&v486, 0x2FuLL);
                    uint64_t v247 = v491._countAndFlagsBits;
                    uint64_t v249 = v489._countAndFlagsBits;
                    v248 = v489._object;
                    unint64_t v250 = ((unint64_t)v489._object >> 56) & 0xF;
                    if (((uint64_t)v489._object & 0x2000000000000000) == 0) {
                      unint64_t v250 = v489._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                    }
                    if (v250)
                    {
                      Swift::String v491 = v489;
                      MEMORY[0x1F4188790](v246);
                      v461 = &v491;
                      v462 = (Swift::String *)v247;
                      swift_bridgeObjectRetain();
                      uint64_t v251 = v249;
                      v252 = v483;
                      v253 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v460, v251, (unint64_t)v248);
                      v483 = v252;
                      if (v254 == (void *)1)
                      {
                        unint64_t v256 = (unint64_t)v491._object;
                        Swift::Int v255 = v491._countAndFlagsBits;
                        swift_bridgeObjectRetain();
                        id v482 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v255, v256, v247);
                        v258 = v257;
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        v258 = v254;
                        id v482 = v253;
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v240 = v480;
                      if (!v258)
                      {
                        swift_release();
                        swift_release();

                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        id v482 = 0;
                        v258 = (void *)0xE000000000000000;
                        goto LABEL_191;
                      }
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      id v482 = 0;
                      v258 = (void *)0xE000000000000000;
                    }
                    swift_release();
                    swift_release();

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
LABEL_191:
                    swift_release();
                    swift_release();

                    goto LABEL_192;
                  }
                  swift_retain();
                  v219 = v477;
                  v220 = v479;
                  swift_retain();
                  int v221 = _foundation_swift_url_feature_enabled();
                  v476 = v219;
                  v474 = (void *)v26;
                  v471 = v28;
                  if (!v221)
                  {
                    id v272 = objc_msgSend(v219, sel__parameterString);
                    if (v272)
                    {
                      v273 = v272;
                      id v274 = static String._unconditionallyBridgeFromObjectiveC(_:)(v272);
                      v276 = v275;

                      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                        && (id v277 = objc_msgSend(v219, sel_path)) != 0)
                      {
                        v278 = v277;
                        id v279 = static String._unconditionallyBridgeFromObjectiveC(_:)(v277);
                        v280 = v219;
                        v282 = v281;

                        v489._uint64_t countAndFlagsBits = (uint64_t)v279;
                        v489._unint64_t object = v282;
                        swift_bridgeObjectRetain();
                        v283._uint64_t countAndFlagsBits = 59;
                        v283._unint64_t object = (void *)0xE100000000000000;
                        String.append(_:)(v283);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRetain();
                        v284._uint64_t countAndFlagsBits = (uint64_t)v274;
                        v284._unint64_t object = v276;
                        String.append(_:)(v284);
                        swift_release();
                        swift_release();

                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        v489._uint64_t countAndFlagsBits = 59;
                        v489._unint64_t object = (void *)0xE100000000000000;
                        v324._uint64_t countAndFlagsBits = (uint64_t)v274;
                        v324._unint64_t object = v276;
                        String.append(_:)(v324);
                        swift_release();
                        swift_release();
                      }
                      swift_bridgeObjectRelease();
                      v481 = (void *)v489._countAndFlagsBits;
                      id v477 = v489._object;
                    }
                    else
                    {
                      id v325 = objc_msgSend(v219, sel_path);
                      if (v325)
                      {
                        v326 = v325;
                        v481 = static String._unconditionallyBridgeFromObjectiveC(_:)(v325);
                        id v477 = v327;
                        swift_release();
                        swift_release();
                      }
                      else
                      {
                        swift_release();
                        swift_release();

                        v481 = 0;
                        id v477 = (id)0xE000000000000000;
                      }
                    }
LABEL_230:
                    uint64_t v328 = v480;
                    swift_retain();
                    id v329 = v478;
                    swift_retain();
                    char v330 = _foundation_swift_url_feature_enabled();
                    id v478 = v329;
                    if ((v330 & 1) == 0)
                    {
                      id v346 = objc_msgSend(v329, sel__parameterString);
                      if (v346)
                      {
                        v347 = v346;
                        id v348 = static String._unconditionallyBridgeFromObjectiveC(_:)(v346);
                        v350 = v349;

                        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                          && (id v351 = objc_msgSend(v329, sel_path)) != 0)
                        {
                          v352 = v351;
                          id v353 = static String._unconditionallyBridgeFromObjectiveC(_:)(v351);
                          v354 = v329;
                          v356 = v355;

                          v489._uint64_t countAndFlagsBits = (uint64_t)v353;
                          v489._unint64_t object = v356;
                          swift_bridgeObjectRetain();
                          v357._uint64_t countAndFlagsBits = 59;
                          v357._unint64_t object = (void *)0xE100000000000000;
                          String.append(_:)(v357);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRetain();
                          v358._uint64_t countAndFlagsBits = (uint64_t)v348;
                          v358._unint64_t object = v350;
                          String.append(_:)(v358);
                          swift_release();
                          swift_release();

                          swift_bridgeObjectRelease();
                        }
                        else
                        {
                          v489._uint64_t countAndFlagsBits = 59;
                          v489._unint64_t object = (void *)0xE100000000000000;
                          v359._uint64_t countAndFlagsBits = (uint64_t)v348;
                          v359._unint64_t object = v350;
                          String.append(_:)(v359);
                          swift_release();
                          swift_release();
                        }
                        uint64_t v360 = swift_bridgeObjectRelease();
                        uint64_t v343 = v489._countAndFlagsBits;
                        v345 = v489._object;
                      }
                      else
                      {
                        id v361 = objc_msgSend(v329, sel_path);
                        if (v361)
                        {
                          v362 = v361;
                          uint64_t v343 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v361);
                          v345 = v363;
                          swift_release();
                          swift_release();
                        }
                        else
                        {
                          swift_release();
                          swift_release();

                          uint64_t v343 = 0;
                          v345 = (void *)0xE000000000000000;
                        }
                      }
LABEL_253:
                      LOBYTE(v489._countAndFlagsBits) = 1;
                      HIDWORD(v489._countAndFlagsBits) = 0;
                      v489._unint64_t object = v471;
                      MEMORY[0x1F4188790](v360);
                      uint64_t v364 = (uint64_t)v481;
                      unint64_t v365 = (unint64_t)v477;
                      v459[2] = v481;
                      v459[3] = v477;
                      v460[0] = v343;
                      v460[1] = v345;
                      v461 = v366;
                      v462 = &v489;
                      v367 = v366;
                      specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))partial apply for specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:), (uint64_t)v459, v364, v365);
                      if (v27)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();

                        v491._uint64_t countAndFlagsBits = (uint64_t)v27;
                        id v368 = v27;
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
                        if (swift_dynamicCast())
                        {

                          id v369 = v486;
                          v370 = v474;
                          if ((v482 & 1) == 0)
                          {
                            v489._uint64_t countAndFlagsBits = (uint64_t)v478;
                            v489._unint64_t object = v474;
                            uint64_t v490 = v480;
                            uint64_t v371 = URL.path.getter();
                            unint64_t v373 = v372;
                            swift_bridgeObjectRetain();
                            specialized String.withFileSystemRepresentation<A>(_:)(v371, v373, v371, v373, 0);
                            swift_bridgeObjectRelease();
                          }
                          id v374 = v369;
                          specialized _BridgedStoredNSError.code.getter(v374, &v484);

                          uint64_t v375 = v484._countAndFlagsBits;
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                          uint64_t v376 = swift_allocObject();
                          uint64_t v377 = specialized static Array._adoptStorage(_:count:)(v376, 4);
                          v379 = v378;
                          id *v378 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFilePath");
                          v379[1] = v380;
                          v489._uint64_t countAndFlagsBits = (uint64_t)v476;
                          v489._unint64_t object = v479;
                          uint64_t v490 = v473;
                          uint64_t v381 = URL.path.getter();
                          v382 = (void *)MEMORY[0x1E4FBB1A0];
                          v379[5] = (id)MEMORY[0x1E4FBB1A0];
                          v379[2] = (id)v381;
                          v379[3] = v383;
                          v379[6] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDestinationFilePath");
                          v379[7] = v384;
                          v489._uint64_t countAndFlagsBits = (uint64_t)v478;
                          v489._unint64_t object = v370;
                          uint64_t v490 = v480;
                          uint64_t v385 = URL.path.getter();
                          v379[11] = v382;
                          v379[8] = (id)v385;
                          v379[9] = v386;
                          v379[12] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUserStringVariant");
                          v379[13] = v387;
                          v379[17] = v382;
                          v379[14] = (id)1702260557;
                          v379[15] = (id)0xE400000000000000;
                          v379[18] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUnderlyingError");
                          v379[19] = v388;
                          v379[23] = &type metadata for CocoaError;
                          v379[20] = v374;
                          uint64_t v389 = v377;
                          goto LABEL_294;
                        }
                        goto LABEL_295;
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();

                      v390 = v476;
                      v391 = v479;
                      swift_retain();
                      uint64_t v392 = v473;
                      swift_retain();
                      if (!_foundation_swift_url_feature_enabled())
                      {
                        id v411 = objc_msgSend(v390, sel__parameterString);
                        v412 = v474;
                        if (v411)
                        {
                          v413 = v411;
                          id v414 = static String._unconditionallyBridgeFromObjectiveC(_:)(v411);
                          v416 = v415;

                          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                            && (id v417 = objc_msgSend(v390, sel_path)) != 0)
                          {
                            v418 = v417;
                            id v419 = static String._unconditionallyBridgeFromObjectiveC(_:)(v417);
                            v421 = v420;

                            v489._uint64_t countAndFlagsBits = (uint64_t)v419;
                            v489._unint64_t object = v421;
                            swift_bridgeObjectRetain();
                            v422._uint64_t countAndFlagsBits = 59;
                            v422._unint64_t object = (void *)0xE100000000000000;
                            String.append(_:)(v422);
                            unint64_t v27 = 0;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRetain();
                            v423._uint64_t countAndFlagsBits = (uint64_t)v414;
                            v423._unint64_t object = v416;
                            String.append(_:)(v423);
                            uint64_t v392 = v473;
                            swift_release();
                            swift_release();

                            swift_bridgeObjectRelease();
                          }
                          else
                          {
                            v489._uint64_t countAndFlagsBits = 59;
                            v489._unint64_t object = (void *)0xE100000000000000;
                            v425._uint64_t countAndFlagsBits = (uint64_t)v414;
                            v425._unint64_t object = v416;
                            String.append(_:)(v425);
                            uint64_t v392 = v473;
                            swift_release();
                            swift_release();
                          }
                          swift_bridgeObjectRelease();
                          uint64_t v408 = v489._countAndFlagsBits;
                          v410 = v489._object;
                        }
                        else
                        {
                          id v427 = objc_msgSend(v390, sel_path);
                          if (v427)
                          {
                            v428 = v427;
                            uint64_t v408 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v427);
                            v410 = v429;
                            swift_release();
                            swift_release();
                          }
                          else
                          {
                            swift_release();
                            swift_release();

                            uint64_t v408 = 0;
                            v410 = (void *)0xE000000000000000;
                          }
                        }
LABEL_291:
                        swift_bridgeObjectRetain();
                        specialized String.withFileSystemRepresentation<A>(_:)(v408, (unint64_t)v410, v408, (unint64_t)v410, 0);
                        if (!v27)
                        {
                          swift_bridgeObjectRelease();
                          return;
                        }
                        swift_bridgeObjectRelease();
                        v491._uint64_t countAndFlagsBits = (uint64_t)v27;
                        id v436 = v27;
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
                        if (swift_dynamicCast())
                        {

                          uint64_t v437 = v392;
                          id v374 = v486;
                          specialized _BridgedStoredNSError.code.getter(v374, &v484);

                          uint64_t v375 = v484._countAndFlagsBits;
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                          uint64_t v438 = swift_allocObject();
                          uint64_t v439 = specialized static Array._adoptStorage(_:count:)(v438, 4);
                          v441 = v440;
                          id *v440 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFilePath");
                          v441[1] = v442;
                          v489._uint64_t countAndFlagsBits = (uint64_t)v390;
                          v489._unint64_t object = v479;
                          uint64_t v490 = v437;
                          uint64_t v443 = URL.path.getter();
                          v444 = (void *)MEMORY[0x1E4FBB1A0];
                          v441[5] = (id)MEMORY[0x1E4FBB1A0];
                          v441[2] = (id)v443;
                          v441[3] = v445;
                          v441[6] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDestinationFilePath");
                          v441[7] = v446;
                          v489._uint64_t countAndFlagsBits = (uint64_t)v478;
                          v489._unint64_t object = v412;
                          uint64_t v490 = v480;
                          uint64_t v447 = URL.path.getter();
                          v441[11] = v444;
                          v441[8] = (id)v447;
                          v441[9] = v448;
                          v441[12] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUserStringVariant");
                          v441[13] = v449;
                          v441[17] = v444;
                          v441[14] = (id)1702260557;
                          v441[15] = (id)0xE400000000000000;
                          v441[18] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUnderlyingError");
                          v441[19] = v388;
                          v441[23] = &type metadata for CocoaError;
                          v441[20] = v374;
                          uint64_t v389 = v439;
LABEL_294:
                          uint64_t v450 = destructiveProjectEnumData for PredicateCodableError(v389, v388);
                          id v451 = v374;
                          specialized Dictionary.init(dictionaryLiteral:)(v450);
                          specialized _BridgedStoredNSError.init(_:userInfo:)(v375, &v489);
                          swift_willThrow();
                        }
LABEL_295:

                        return;
                      }
                      v483 = 0;
                      v489._uint64_t countAndFlagsBits = (uint64_t)v390;
                      v489._unint64_t object = v391;
                      uint64_t v490 = v392;
                      v481 = v390;
                      swift_retain();
                      swift_retain();
                      Swift::String v393 = URL.path(percentEncoded:)(1);
                      Swift::String v489 = v393;
                      swift_bridgeObjectRetain();
                      uint64_t v394 = String.count.getter();
                      v395 = v474;
                      if (v394 > 1
                        && (specialized BidirectionalCollection.last.getter(v393._countAndFlagsBits, (unint64_t)v393._object) & 0x1FF) == 0x2F)
                      {
                        specialized RangeReplaceableCollection<>.popLast()();
                        swift_bridgeObjectRelease();
                      }
                      v491._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
                      uint64_t v396 = specialized Set._Variant.insert(_:)(&v486, 0x2FuLL);
                      uint64_t v397 = v491._countAndFlagsBits;
                      uint64_t v398 = v489._countAndFlagsBits;
                      v399 = v489._object;
                      unint64_t v400 = ((unint64_t)v489._object >> 56) & 0xF;
                      if (((uint64_t)v489._object & 0x2000000000000000) == 0) {
                        unint64_t v400 = v489._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                      }
                      id v482 = v390;
                      if (v400)
                      {
                        v401 = v395;
                        Swift::String v491 = v489;
                        MEMORY[0x1F4188790](v396);
                        v461 = &v491;
                        v462 = (Swift::String *)v397;
                        swift_bridgeObjectRetain();
                        uint64_t v402 = v398;
                        v403 = v483;
                        v404 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v460, v402, (unint64_t)v399);
                        v483 = v403;
                        if (v405 == (void *)1)
                        {
                          unint64_t v407 = (unint64_t)v491._object;
                          Swift::Int v406 = v491._countAndFlagsBits;
                          swift_bridgeObjectRetain();
                          uint64_t v408 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v406, v407, v397);
                          v410 = v409;
                          swift_bridgeObjectRelease();
                        }
                        else
                        {
                          uint64_t v408 = (uint64_t)v404;
                          v410 = v405;
                        }
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v426 = v401;
                        if (!v410)
                        {
                          uint64_t v392 = v473;
                          swift_release();
                          swift_release();
                          v430 = v481;

                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v408 = 0;
                          v410 = (void *)0xE000000000000000;
                          goto LABEL_290;
                        }
                      }
                      else
                      {
                        v426 = v395;
                        swift_bridgeObjectRelease();
                        uint64_t v408 = 0;
                        v410 = (void *)0xE000000000000000;
                      }
                      uint64_t v392 = v473;
                      swift_release();
                      swift_release();
                      v430 = v481;

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
LABEL_290:
                      swift_release();
                      swift_release();

                      v412 = v426;
                      v390 = v482;
                      unint64_t v27 = v483;
                      goto LABEL_291;
                    }
                    v331 = v27;
                    v489._uint64_t countAndFlagsBits = (uint64_t)v329;
                    v489._unint64_t object = (void *)v26;
                    uint64_t v490 = v328;
                    id v332 = v329;
                    swift_retain();
                    swift_retain();
                    Swift::String v333 = URL.path(percentEncoded:)(1);
                    Swift::String v489 = v333;
                    swift_bridgeObjectRetain();
                    if (String.count.getter() > 1
                      && (specialized BidirectionalCollection.last.getter(v333._countAndFlagsBits, (unint64_t)v333._object) & 0x1FF) == 0x2F)
                    {
                      specialized RangeReplaceableCollection<>.popLast()();
                      swift_bridgeObjectRelease();
                    }
                    v491._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
                    uint64_t v334 = specialized Set._Variant.insert(_:)(&v486, 0x2FuLL);
                    uint64_t v335 = v491._countAndFlagsBits;
                    uint64_t v336 = v489._countAndFlagsBits;
                    v337 = v489._object;
                    unint64_t v338 = ((unint64_t)v489._object >> 56) & 0xF;
                    if (((uint64_t)v489._object & 0x2000000000000000) == 0) {
                      unint64_t v338 = v489._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                    }
                    if (v338)
                    {
                      Swift::String v491 = v489;
                      MEMORY[0x1F4188790](v334);
                      v461 = &v491;
                      v462 = (Swift::String *)v335;
                      swift_bridgeObjectRetain();
                      v339 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v460, v336, (unint64_t)v337);
                      if (v340 == (void *)1)
                      {
                        unint64_t v342 = (unint64_t)v491._object;
                        Swift::Int v341 = v491._countAndFlagsBits;
                        swift_bridgeObjectRetain();
                        uint64_t v343 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v341, v342, v335);
                        v345 = v344;
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        uint64_t v343 = (uint64_t)v339;
                        v345 = v340;
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (!v345)
                      {
                        swift_release();
                        swift_release();

                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v343 = 0;
                        v345 = (void *)0xE000000000000000;
                        goto LABEL_252;
                      }
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v343 = 0;
                      v345 = (void *)0xE000000000000000;
                    }
                    swift_release();
                    swift_release();

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
LABEL_252:
                    swift_release();
                    swift_release();

                    unint64_t v27 = v331;
                    goto LABEL_253;
                  }
                  v222 = v220;
                  v223 = v27;
                  v489._uint64_t countAndFlagsBits = (uint64_t)v219;
                  v489._unint64_t object = v222;
                  uint64_t v490 = v24;
                  v224 = v219;
                  swift_retain();
                  swift_retain();
                  Swift::String v225 = URL.path(percentEncoded:)(1);
                  Swift::String v489 = v225;
                  swift_bridgeObjectRetain();
                  if (String.count.getter() > 1
                    && (specialized BidirectionalCollection.last.getter(v225._countAndFlagsBits, (unint64_t)v225._object) & 0x1FF) == 0x2F)
                  {
                    specialized RangeReplaceableCollection<>.popLast()();
                    swift_bridgeObjectRelease();
                  }
                  v491._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
                  uint64_t v226 = specialized Set._Variant.insert(_:)(&v486, 0x2FuLL);
                  uint64_t v227 = v491._countAndFlagsBits;
                  uint64_t v229 = v489._countAndFlagsBits;
                  v228 = v489._object;
                  unint64_t v230 = ((unint64_t)v489._object >> 56) & 0xF;
                  if (((uint64_t)v489._object & 0x2000000000000000) == 0) {
                    unint64_t v230 = v489._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                  }
                  if (v230)
                  {
                    Swift::String v491 = v489;
                    MEMORY[0x1F4188790](v226);
                    v461 = &v491;
                    v462 = (Swift::String *)v227;
                    swift_bridgeObjectRetain();
                    v231 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v460, v229, (unint64_t)v228);
                    if (v232 == (void *)1)
                    {
                      unint64_t v234 = (unint64_t)v491._object;
                      Swift::Int v233 = v491._countAndFlagsBits;
                      swift_bridgeObjectRetain();
                      v481 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v233, v234, v227);
                      v236 = v235;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      unint64_t v27 = v223;
                    }
                    else
                    {
                      v236 = v232;
                      v481 = v231;
                      swift_bridgeObjectRelease();
                    }
                    swift_bridgeObjectRelease();
                    unint64_t v26 = (unint64_t)v474;
                    if (!v236)
                    {
                      swift_release();
                      swift_release();

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v481 = 0;
                      id v477 = (id)0xE000000000000000;
                      goto LABEL_229;
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    v481 = 0;
                    v236 = (void *)0xE000000000000000;
                  }
                  id v477 = v236;
                  swift_release();
                  swift_release();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
LABEL_229:
                  swift_release();
                  swift_release();

                  goto LABEL_230;
                }
              }
              __break(1u);
              return;
            }
            uint64_t v119 = v480;
          }
          else
          {
            uint64_t v119 = v480;
            if (!v491._countAndFlagsBits) {
              goto LABEL_127;
            }
          }
          outlined consume of URL?(v197);
          outlined consume of URL?(v200);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v26 = (unint64_t)v474;
          unint64_t v27 = v483;
LABEL_134:
          Swift::String v120 = v479;
          uint64_t v24 = v473;
          goto LABEL_141;
        }
        uint64_t v119 = v480;
        unint64_t v29 = v469;
        if (v489._countAndFlagsBits)
        {
          id v202 = (id)v489._countAndFlagsBits;
          swift_willThrow();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v27 = 0;
          unint64_t v26 = (unint64_t)v474;
          goto LABEL_134;
        }
        uint64_t v24 = v473;
        if (one-time initialization token for _nilObjCError != -1) {
          swift_once();
        }
        v205 = (void *)_nilObjCError;
        id v206 = (id)_nilObjCError;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
LABEL_138:
        unint64_t v27 = 0;
LABEL_139:
        unint64_t v26 = (unint64_t)v474;
        goto LABEL_140;
      }
    }
LABEL_115:
    v481[v165] = v167 | v166;
    *(void *)(*(void *)(v26 + 48) + 8 * v137) = v482;
    uint64_t v189 = *(void *)(v26 + 16);
    BOOL v143 = __OFADD__(v189, 1);
    uint64_t v190 = v189 + 1;
    if (!v143)
    {
      *(void *)(v26 + 16) = v190;
      goto LABEL_91;
    }
    __break(1u);
LABEL_301:
    unint64_t v467 = v137;
    unint64_t v26 = (v26 + 1) & v137;
    unint64_t v129 = v26 >> 6;
    uint64_t v130 = v476[v26 >> 6];
    uint64_t v131 = 1 << v26;
    if ((v130 & (1 << v26)) != 0)
    {
      while (1)
      {
        id v453 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v126 + 48) + 8 * v26));
        uint64_t v455 = v454;
        if (v453 == static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v24) && v455 == v456) {
          break;
        }
        char v458 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v458) {
          goto LABEL_299;
        }
        unint64_t v26 = (v26 + 1) & v467;
        unint64_t v129 = v26 >> 6;
        uint64_t v130 = v476[v26 >> 6];
        uint64_t v131 = 1 << v26;
        if ((v130 & (1 << v26)) == 0) {
          goto LABEL_85;
        }
      }
LABEL_288:
      swift_bridgeObjectRelease_n();
      continue;
    }
    break;
  }
LABEL_85:
  v476[v129] = v131 | v130;
  *(void *)(*(void *)(v126 + 48) + 8 * v26) = v482;
  uint64_t v142 = *(void *)(v126 + 16);
  BOOL v143 = __OFADD__(v142, 1);
  uint64_t v144 = v142 + 1;
  unint64_t v29 = v469;
  if (!v143)
  {
    *(void *)(v126 + 16) = v144;
    uint64_t v24 = v473;
    goto LABEL_87;
  }
  __break(1u);
LABEL_310:
  swift_once();
LABEL_131:
  swift_willThrow();
  swift_release();
  unint64_t v27 = 0;
LABEL_140:
  Swift::String v120 = v479;
LABEL_141:
  v489._uint64_t countAndFlagsBits = (uint64_t)v470;
  v489._unint64_t object = v120;
  uint64_t v490 = v24;
  v491._uint64_t countAndFlagsBits = (uint64_t)v468;
  v491._unint64_t object = (void *)v26;
  uint64_t v492 = v119;
  static CocoaError.moveFileError(_:_:_:)(17, (uint64_t)&v489, (void **)&v491, (void *(*)(void *__return_ptr, void *, uint64_t))&v486);
  id v207 = v486;
  uint64_t v208 = String.init(cString:)();
  unint64_t v210 = v209;
  uint64_t v211 = String.init(cString:)();
  LOBYTE(v208) = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v207, v208, v210, v211, v212, (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtPath_toPath_);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v208)
  {

    LODWORD(v482) = 1;
    uint64_t v24 = v473;
    goto LABEL_143;
  }
LABEL_217:
  swift_willThrow();
}

id NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, SEL *a6, SEL *a7)
{
  id v15 = objc_msgSend(v7, sel__safeDelegate);
  if (!v15) {
    return 0;
  }
  id v16 = v15;
  if ((objc_msgSend(v15, sel_respondsToSelector_, *a6) & 1) == 0)
  {
    if (objc_msgSend(v16, sel_respondsToSelector_, *a7))
    {
      swift_unknownObjectRetain();
      id v21 = a1;
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v23 = String._bridgeToObjectiveCImpl()();
      id v20 = objc_msgSend(v16, *a7, v7, v22, v23, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v20;
    }
    swift_unknownObjectRelease();
    return 0;
  }
  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a2, a3, (uint64_t)&v26);
  uint64_t v17 = v26;
  URL.init(fileURLWithPath:)(a4, a5, (uint64_t)&v25);
  unint64_t v18 = v25;
  id v19 = a1;
  id v20 = objc_msgSend(v16, *a6, v7, _swift_stdlib_bridgeErrorToNSError(), v17, v18);

  swift_unknownObjectRelease_n();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v20;
}

uint64_t static CocoaError.moveFileError(_:_:_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void **a3@<X2>, void *(*a4)(void *__return_ptr, void *, uint64_t)@<X8>)
{
  void *(*v147)(void *__return_ptr, void *, uint64_t);
  void *v148;
  int v149;
  id v150;
  void *countAndFlagsBits;
  void *v152;
  void *v153;
  void *v154;
  Swift::String v155;
  char v156;
  Swift::String v157;
  void *v158;
  uint64_t v159;

  id v149 = a1;
  uint64_t v147 = a4;
  id v159 = *MEMORY[0x1E4F143B8];
  id v4 = *(void **)a2;
  Class v5 = *(void **)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = a3[1];
  uint64_t v148 = *a3;
  os_log_type_t v8 = a3[2];
  swift_retain();
  id v9 = v4;
  swift_retain();
  uint64_t v10 = &selRef___old_unswizzled_keyPathsForValuesAffectingValueForKey_;
  uint64_t v152 = v8;
  uint64_t v153 = v7;
  char v154 = v5;
  if (!_foundation_swift_url_feature_enabled())
  {
    id v15 = objc_msgSend(v9, sel__parameterString);
    if (v15)
    {
      id v16 = v15;
      id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      id v19 = v18;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v20 = objc_msgSend(v9, sel_path)) != 0)
      {
        id v21 = v20;
        id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        uint64_t v24 = v23;

        v157._uint64_t countAndFlagsBits = (uint64_t)v22;
        v157._unint64_t object = v24;
        swift_bridgeObjectRetain();
        v25._uint64_t countAndFlagsBits = 59;
        v25._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v25);
        uint64_t v7 = v153;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v26._uint64_t countAndFlagsBits = (uint64_t)v17;
        v26._unint64_t object = v19;
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
      }
      else
      {
        v157._uint64_t countAndFlagsBits = 59;
        v157._unint64_t object = (void *)0xE100000000000000;
        v37._uint64_t countAndFlagsBits = (uint64_t)v17;
        v37._unint64_t object = v19;
        String.append(_:)(v37);
      }
      swift_bridgeObjectRelease();
      unint64_t object = v157._object;
      uint64_t countAndFlagsBits = (void *)v157._countAndFlagsBits;
      Class v5 = v154;
      if ((_foundation_swift_url_feature_enabled() & 1) == 0) {
        goto LABEL_17;
      }
    }
    else
    {
      id v53 = objc_msgSend(v9, sel_path);
      if (!v53)
      {
        uint64_t countAndFlagsBits = 0;
        unint64_t object = (void *)0xE000000000000000;
        if (_foundation_swift_url_feature_enabled()) {
          goto LABEL_34;
        }
        goto LABEL_17;
      }
      uint64_t v54 = v53;
      uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      unint64_t object = v55;

      if ((_foundation_swift_url_feature_enabled() & 1) == 0) {
        goto LABEL_17;
      }
    }
LABEL_34:
    v157._uint64_t countAndFlagsBits = (uint64_t)v9;
    v157._unint64_t object = v5;
    v158 = v6;
    id v59 = v9;
    swift_retain();
    swift_retain();
    Swift::String v60 = URL.path(percentEncoded:)(1);
    v157 = v60;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v60._countAndFlagsBits, (unint64_t)v60._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v155._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v61 = specialized Set._Variant.insert(_:)(&v156, 0x2FuLL);
    uint64_t v62 = v155._countAndFlagsBits;
    uint64_t v64 = v157._countAndFlagsBits;
    unint64_t v63 = v157._object;
    unint64_t v65 = ((unint64_t)v157._object >> 56) & 0xF;
    if (((uint64_t)v157._object & 0x2000000000000000) == 0) {
      unint64_t v65 = v157._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v65)
    {
      id v146 = v59;
      uint64_t v66 = object;
      v155 = v157;
      MEMORY[0x1F4188790](v61);
      uint64_t v143 = (uint64_t)&v155;
      uint64_t v144 = v62;
      swift_bridgeObjectRetain();
      uint64_t v67 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v142, v64, (unint64_t)v63);
      if (v68 == (void *)1)
      {
        unint64_t v70 = (unint64_t)v155._object;
        Swift::Int v69 = v155._countAndFlagsBits;
        swift_bridgeObjectRetain();
        unint64_t v150 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v69, v70, v62);
        uint64_t v52 = v71;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v52 = v68;
        unint64_t v150 = v67;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      os_log_type_t v8 = v152;
      unint64_t object = v66;
      if (!v52)
      {
        swift_release();
        swift_release();
        id v59 = v146;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v150 = 0;
        uint64_t v52 = (void *)0xE000000000000000;
        id v72 = v148;
        goto LABEL_48;
      }
      id v72 = v148;
      id v59 = v146;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v150 = 0;
      uint64_t v52 = (void *)0xE000000000000000;
      os_log_type_t v8 = v152;
      id v72 = v148;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    swift_release();
    swift_release();

    uint64_t v7 = v153;
    goto LABEL_53;
  }
  v158 = v6;
  id v11 = v9;
  swift_retain();
  swift_retain();
  Swift::String v12 = URL.path(percentEncoded:)(1);
  uint64_t v13 = v12._countAndFlagsBits;
  v157 = v12;
  swift_bridgeObjectRetain();
  unint64_t v150 = v11;
  if (String.count.getter() <= 1)
  {
    unint64_t v14 = (unint64_t)v12._object;
  }
  else
  {
    unint64_t v14 = (unint64_t)v12._object;
    if ((specialized BidirectionalCollection.last.getter(v12._countAndFlagsBits, (unint64_t)v12._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
      uint64_t v13 = v157._countAndFlagsBits;
      unint64_t v14 = (unint64_t)v157._object;
    }
  }
  v155._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
  uint64_t v27 = specialized Set._Variant.insert(_:)(&v156, 0x2FuLL);
  uint64_t v28 = v155._countAndFlagsBits;
  uint64_t v29 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v29 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (!v29)
  {
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 0;
    unint64_t object = (void *)0xE000000000000000;
    uint64_t v7 = v153;
    Class v5 = v154;
LABEL_31:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v155._uint64_t countAndFlagsBits = v13;
  v155._unint64_t object = (void *)v14;
  MEMORY[0x1F4188790](v27);
  uint64_t v143 = (uint64_t)&v155;
  uint64_t v144 = v28;
  swift_bridgeObjectRetain();
  id v30 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v142, v13, v14);
  if (v31 == (void *)1)
  {
    unint64_t v33 = (unint64_t)v155._object;
    Swift::Int v32 = v155._countAndFlagsBits;
    swift_bridgeObjectRetain();
    uint64_t countAndFlagsBits = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v32, v33, v28);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t object = v35;
  }
  else
  {
    unint64_t object = v31;
    uint64_t countAndFlagsBits = v30;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = v153;
  Class v5 = v154;
  uint64_t v10 = &selRef___old_unswizzled_keyPathsForValuesAffectingValueForKey_;
  if (object) {
    goto LABEL_31;
  }
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = 0;
  unint64_t object = (void *)0xE000000000000000;
LABEL_33:
  os_log_type_t v8 = v152;
  if (_foundation_swift_url_feature_enabled()) {
    goto LABEL_34;
  }
LABEL_17:
  id v38 = [v9 v10[51]];
  if (v38)
  {
    id v39 = v38;
    id v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    id v42 = v41;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v43 = objc_msgSend(v9, sel_path)) != 0)
    {
      id v44 = v43;
      __darwin_ino64_t v45 = object;
      id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      Swift::String v48 = v47;

      v157._uint64_t countAndFlagsBits = (uint64_t)v46;
      v157._unint64_t object = v48;
      swift_bridgeObjectRetain();
      v49._uint64_t countAndFlagsBits = 59;
      v49._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      uint64_t v7 = v153;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v50._uint64_t countAndFlagsBits = (uint64_t)v40;
      v50._unint64_t object = v42;
      String.append(_:)(v50);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      unint64_t object = v45;
    }
    else
    {
      v157._uint64_t countAndFlagsBits = 59;
      v157._unint64_t object = (void *)0xE100000000000000;
      v51._uint64_t countAndFlagsBits = (uint64_t)v40;
      v51._unint64_t object = v42;
      String.append(_:)(v51);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v52 = v157._object;
    unint64_t v150 = (id)v157._countAndFlagsBits;
  }
  else
  {
    id v56 = objc_msgSend(v9, sel_path);
    if (v56)
    {
      unint64_t v57 = v56;
      unint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      uint64_t v52 = v58;
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();

      unint64_t v150 = 0;
      uint64_t v52 = (void *)0xE000000000000000;
    }
  }
  id v72 = v148;
LABEL_53:
  swift_retain();
  id v73 = v72;
  swift_retain();
  char v74 = _foundation_swift_url_feature_enabled();
  char v154 = v52;
  if (v74)
  {
    v157._uint64_t countAndFlagsBits = (uint64_t)v73;
    v157._unint64_t object = v7;
    v158 = v8;
    id v75 = v73;
    swift_retain();
    swift_retain();
    Swift::String v76 = URL.path(percentEncoded:)(1);
    v157 = v76;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v76._countAndFlagsBits, (unint64_t)v76._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v155._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v77 = specialized Set._Variant.insert(_:)(&v156, 0x2FuLL);
    uint64_t v78 = v155._countAndFlagsBits;
    uint64_t v79 = v157._countAndFlagsBits;
    uint64_t v80 = v157._object;
    unint64_t v81 = ((unint64_t)v157._object >> 56) & 0xF;
    if (((uint64_t)v157._object & 0x2000000000000000) == 0) {
      unint64_t v81 = v157._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v81)
    {
      v155 = v157;
      MEMORY[0x1F4188790](v77);
      uint64_t v143 = (uint64_t)&v155;
      uint64_t v144 = v78;
      swift_bridgeObjectRetain();
      uint64_t v82 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v142, v79, (unint64_t)v80);
      if (v83 == 1)
      {
        unint64_t v85 = (unint64_t)v155._object;
        Swift::Int v84 = v155._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v86 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v84, v85, v78);
        unint64_t v88 = v87;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v86 = (uint64_t)v82;
        unint64_t v88 = v83;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v88)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v86 = 0;
        unint64_t v88 = 0xE000000000000000;
        goto LABEL_75;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v86 = 0;
      unint64_t v88 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_75:
    swift_release();
    swift_release();

    LODWORD(v90) = v149;
    goto LABEL_76;
  }
  id v89 = objc_msgSend(v73, sel__parameterString);
  LODWORD(v90) = v149;
  if (v89)
  {
    uint64_t v91 = v89;
    id v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    uint64_t v94 = v93;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v95 = objc_msgSend(v73, sel_path)) != 0)
    {
      Swift::Int v96 = v95;
      id v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
      unint64_t v99 = v98;

      v157._uint64_t countAndFlagsBits = (uint64_t)v97;
      v157._unint64_t object = v99;
      swift_bridgeObjectRetain();
      v100._uint64_t countAndFlagsBits = 59;
      v100._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v101._uint64_t countAndFlagsBits = (uint64_t)v92;
      v101._unint64_t object = v94;
      String.append(_:)(v101);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v157._uint64_t countAndFlagsBits = 59;
      v157._unint64_t object = (void *)0xE100000000000000;
      v102._uint64_t countAndFlagsBits = (uint64_t)v92;
      v102._unint64_t object = v94;
      String.append(_:)(v102);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v86 = v157._countAndFlagsBits;
    unint64_t v88 = (unint64_t)v157._object;
  }
  else
  {
    id v103 = objc_msgSend(v73, sel_path);
    if (v103)
    {
      long long v104 = v103;
      uint64_t v86 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
      unint64_t v88 = v105;
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();

      uint64_t v86 = 0;
      unint64_t v88 = 0xE000000000000000;
    }
  }
LABEL_76:
  int64_t Path = 4;
  unint64_t v107 = (unint64_t)object;
  switch((int)v90)
  {
    case 1:
    case 13:
      int64_t Path = 513;
      goto LABEL_87;
    case 2:
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      goto LABEL_81;
    case 17:
      int64_t Path = 516;
      goto LABEL_87;
    case 28:
    case 69:
      int64_t Path = 640;
      goto LABEL_87;
    case 30:
      int64_t Path = 642;
      goto LABEL_87;
    case 63:
      swift_bridgeObjectRetain();
      int64_t Path = String._lastPathComponent.getter(v86, v88);
      unint64_t v107 = v109;
      swift_bridgeObjectRelease();
      if ((v107 & 0x1000000000000000) != 0) {
        goto LABEL_132;
      }
      if ((v107 & 0x2000000000000000) != 0) {
        uint64_t isStackAllocationSafe = HIBYTE(v107) & 0xF;
      }
      else {
        uint64_t isStackAllocationSafe = Path & 0xFFFFFFFFFFFFLL;
      }
      goto LABEL_96;
    default:
      if (v90 == 102)
      {
        id v108 = 0;
        int64_t Path = 512;
        unint64_t v107 = (unint64_t)object;
LABEL_93:
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))Path, (uint64_t)countAndFlagsBits, v107, v108, 1702260557, 0xE400000000000000, (uint64_t)v150, (uint64_t)v154, v147, v86, v88);
        return swift_bridgeObjectRelease();
      }
LABEL_81:
      int64_t Path = 512;
LABEL_87:
      unint64_t v107 = (unint64_t)object;
      break;
  }
  while ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v111 = (int)POSIXErrorCode.rawValue.getter();
    id v112 = objc_allocWithZone((Class)NSError);
    uint64_t v113 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v108 = objc_msgSend(v112, sel_initWithDomain_code_userInfo_, v113, v111, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v114 = objc_msgSend(v108, sel_domain);
    id v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
    uint64_t v90 = v116;

    if (v115 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v90 == v117)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_93;
    }
    char v118 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v118) {
      goto LABEL_93;
    }
    __break(1u);
LABEL_132:
    uint64_t isStackAllocationSafe = String.UTF8View._foreignCount()();
LABEL_96:
    uint64_t v120 = 3 * isStackAllocationSafe;
    if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 == (3 * isStackAllocationSafe) >> 63)
    {
      if (v120 < -1) {
        goto LABEL_136;
      }
      uint64_t v121 = v120 + 1;
      if (v120 < 1024
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1F4188790](isStackAllocationSafe);
        uint64_t v123 = (char *)&v145 - v122;
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v123, v121, 1, Path, v107);
        char v125 = v124;
        swift_bridgeObjectRelease();
        if (v125) {
          int64_t Path = 0;
        }
        else {
          int64_t Path = strnlen(v123, 0x100uLL);
        }
        LODWORD(v90) = v149;
      }
      else
      {
        uint64_t v126 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v126, v121, 1, Path, v107);
        char v128 = v127;
        swift_bridgeObjectRelease();
        if (v128) {
          int64_t Path = 0;
        }
        else {
          int64_t Path = strnlen(v126, 0x100uLL);
        }
        MEMORY[0x185309510](v126, -1, -1);
      }
      swift_bridgeObjectRelease();
      if ((v88 & 0x1000000000000000) == 0)
      {
        if ((v88 & 0x2000000000000000) != 0) {
          uint64_t v129 = HIBYTE(v88) & 0xF;
        }
        else {
          uint64_t v129 = v86 & 0xFFFFFFFFFFFFLL;
        }
        goto LABEL_112;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v129 = String.UTF8View._foreignCount()();
LABEL_112:
    uint64_t v130 = 3 * v129;
    if ((unsigned __int128)(v129 * (__int128)3) >> 64 != (3 * v129) >> 63)
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
    }
    if (v130 < -1) {
      goto LABEL_137;
    }
    uint64_t v131 = v130 + 1;
    if (v130 < 1024 || (uint64_t v129 = swift_stdlib_isStackAllocationSafe(), (v129 & 1) != 0))
    {
      MEMORY[0x1F4188790](v129);
      uint64_t v133 = (char *)&v145 - v132;
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v133, v131, 1, v86, v88);
      char v135 = v134;
      swift_bridgeObjectRelease();
      if (v135) {
        int64_t v136 = 0;
      }
      else {
        int64_t v136 = strnlen(v133, 0x401uLL);
      }
      if (Path > 255) {
        goto LABEL_120;
      }
LABEL_125:
      uint64_t v140 = v150;
      if (v136 > 1024) {
        uint64_t v140 = (void *)v86;
      }
      uint64_t countAndFlagsBits = v140;
      if (v136 <= 1024) {
        unint64_t v107 = (unint64_t)v154;
      }
      else {
        unint64_t v107 = v88;
      }
      int64_t Path = 514;
    }
    else
    {
      unint64_t v137 = (const char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v137, v131, 1, v86, v88);
      char v139 = v138;
      swift_bridgeObjectRelease();
      if (v139) {
        int64_t v136 = 0;
      }
      else {
        int64_t v136 = strnlen(v137, 0x401uLL);
      }
      MEMORY[0x185309510](v137, -1, -1);
      if (Path <= 255) {
        goto LABEL_125;
      }
LABEL_120:
      int64_t Path = 514;
      uint64_t countAndFlagsBits = (void *)v86;
      unint64_t v107 = v88;
    }
  }
  v157._uint64_t countAndFlagsBits = 0;
  v157._unint64_t object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v157._uint64_t countAndFlagsBits = 0xD000000000000014;
  v157._unint64_t object = (void *)0x80000001823A9780;
  LODWORD(v155._countAndFlagsBits) = v90;
  v141._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v141);
  swift_bridgeObjectRelease();
  LODWORD(v144) = 0;
  uint64_t v143 = 73;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ___collectionClasses_block_invoke()
{
  v2[11] = *MEMORY[0x1E4F143B8];
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  v2[0] = MEMORY[0x1E4F1C978];
  v2[1] = MEMORY[0x1E4F1CA48];
  v2[2] = MEMORY[0x1E4F1C9E8];
  v2[3] = MEMORY[0x1E4F1CA60];
  v2[4] = MEMORY[0x1E4F1CA80];
  v2[5] = MEMORY[0x1E4F1CAD0];
  v2[6] = MEMORY[0x1E4F1CA70];
  v2[7] = MEMORY[0x1E4F1CAA0];
  uint8_t v2[8] = MEMORY[0x1E4F1CA80];
  v2[9] = NSHashTable;
  v2[10] = NSPointerArray;
  uint64_t result = objc_msgSend(v0, "initWithArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v2, 11));
  qword_1EB1ED1A8 = result;
  return result;
}

uint64_t closure #1 in closure #2 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t *a5@<X8>)
{
  unsigned __int8 v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = a2 + a3;
  if (!a2) {
    uint64_t v8 = 0;
  }
  uint64_t v27 = a2;
  uint64_t v28 = v8;
  char v29 = a4;
  char v30 = 0;
  unsigned int v31 = 0;
  for (i = 0; ; unsigned __int8 v6 = i)
  {
    if (v6)
    {
      unsigned int v10 = v31;
      if ((v31 & 0xF800) != 0xD800)
      {
        lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
        id v17 = (uint64_t (*)(char *, void))Locale.Language.components.modify();
        specialized RangeReplaceableCollection.remove(at:)(0);
        uint64_t result = v17(v26, 0);
LABEL_28:
        unsigned int v10 = (unsigned __int16)v10;
        char v16 = 1;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t result = specialized UTF16EndianAdaptor.Iterator.next()();
      if ((result & 0x10000) != 0) {
        goto LABEL_45;
      }
      LOWORD(v10) = result;
      if ((result & 0xF800) != 0xD800) {
        goto LABEL_28;
      }
      unsigned int v10 = (unsigned __int16)result | (HIWORD(v31) << 16);
      unsigned __int8 v6 = 16;
    }
    uint64_t result = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((result & 0x10000) != 0) {
      break;
    }
    unsigned int v10 = ((-65535 << v6) - 1) & v10 | ((unsigned __int16)result << v6);
    unsigned __int8 v11 = v6 + 16;
    if ((v6 + 16) <= 0x1Fu)
    {
      uint64_t result = specialized UTF16EndianAdaptor.Iterator.next()();
      if ((result & 0x10000) != 0) {
        goto LABEL_16;
      }
      unsigned int v10 = ((-65535 << v11) - 1) & v10 | ((unsigned __int16)result << v11);
      unsigned __int8 v11 = v6 + 32;
      if (v6 >= 0xE0u)
      {
        uint64_t result = specialized UTF16EndianAdaptor.Iterator.next()();
        if ((result & 0x10000) != 0) {
          goto LABEL_16;
        }
        unsigned int v10 = ((-65535 << v6) - 1) & v10 | ((unsigned __int16)result << v6);
        unsigned __int8 v11 = v6 + 48;
      }
    }
LABEL_17:
    unsigned int v12 = v10 & 0xFC00FC00;
    if ((v10 & 0xFC00FC00) == 0xDC00D800) {
      char v13 = 32;
    }
    else {
      char v13 = 16;
    }
    unsigned __int8 i = v11 - v13;
    BOOL v14 = v12 == -603924480;
    if (v12 == -603924480) {
      char v15 = 32;
    }
    else {
      char v15 = 16;
    }
    unsigned int v31 = (unint64_t)v10 >> v15;
    if (!v14) {
      goto LABEL_48;
    }
    char v16 = 0;
LABEL_29:
    if ((unsigned __int16)v10 >= 0x80u)
    {
      int v21 = (v10 & 0x3F) << 8;
      if ((unsigned __int16)v10 >= 0x800u)
      {
        if ((v10 & 0xF800) == 0xD800)
        {
          if (v16)
          {
            if ((unsigned __int16)v10 > 0x7Fu)
            {
              int v23 = (v10 & 0x3F) << 8;
              unsigned int v18 = (((unsigned __int16)v10 >> 12) | ((v23 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8)) + 8487393;
              if ((unsigned __int16)v10 < 0x800u) {
                unsigned int v18 = (v23 | ((unsigned __int16)v10 >> 6)) + 33217;
              }
            }
            else
            {
              unsigned int v18 = (unsigned __int16)v10 + 1;
            }
          }
          else
          {
            unsigned int v22 = ((v10 & 0x3FF) << 10) | HIWORD(v10) & 0x3FF;
            unsigned int v18 = (((v22 + 0x10000) >> 4) & 0x3F00 | ((v22 + 0x10000) >> 18) | (((v22 >> 6) & 0x3F | (((v22 + 0x10000) & 0x3F) << 8)) << 16))
                - 2122219023;
          }
        }
        else
        {
          unsigned int v18 = (((v21 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8) | ((unsigned __int16)v10 >> 12)) + 8487393;
        }
      }
      else
      {
        unsigned int v18 = (v21 | ((unsigned __int16)v10 >> 6)) + 33217;
      }
LABEL_31:
      while (1)
      {
        *(unsigned char *)(a1 + v7) = v18 - 1;
        uint64_t v19 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          break;
        }
        ++v7;
        BOOL v20 = v18 >= 0x100;
        v18 >>= 8;
        if (!v20)
        {
          uint64_t v7 = v19;
          goto LABEL_4;
        }
      }
      __break(1u);
LABEL_48:
      *a5 = 0;
      a5[1] = 0;
      return result;
    }
    unsigned int v18 = (v10 + 1);
    if ((_BYTE)v10 != 0xFF) {
      goto LABEL_31;
    }
LABEL_4:
    ;
  }
  unsigned __int8 v11 = v6;
LABEL_16:
  if (v11) {
    goto LABEL_17;
  }
LABEL_45:
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static String._tryFromUTF8(_:)();
    *a5 = result;
    a5[1] = v24;
  }
  return result;
}

uint64_t specialized UTF16EndianAdaptor.Iterator.next()()
{
  CFDictionaryRef v1 = *v0;
  if (*((unsigned char *)v0 + 17))
  {
    if (!v1)
    {
LABEL_24:
      int v3 = 1;
      return (unsigned __int16)v1 | (v3 << 16);
    }
  }
  else
  {
    int v3 = 1;
    *((unsigned char *)v0 + 17) = 1;
    if (!v1) {
      return (unsigned __int16)v1 | (v3 << 16);
    }
    Class v5 = v0[1];
    if (v1 == v5) {
      goto LABEL_23;
    }
    unsigned __int8 v6 = v1 + 1;
    *id v0 = v1 + 1;
    unsigned int v4 = *v1;
    if (v4 <= 0xFD)
    {
      if (v6 != v5)
      {
        int v3 = 0;
        goto LABEL_16;
      }
      goto LABEL_23;
    }
    if (v6 == v5)
    {
LABEL_23:
      LOWORD(v1) = 0;
      goto LABEL_24;
    }
    uint64_t v7 = v1 + 2;
    *id v0 = v1 + 2;
    int v8 = v1[1];
    if (v4 == 255 && v8 == 254)
    {
      int v9 = *((unsigned __int8 *)v0 + 16);
      if (v9 != 2)
      {
        int v3 = 0;
        if (v9) {
          LOWORD(v1) = -2;
        }
        else {
          LOWORD(v1) = -257;
        }
        return (unsigned __int16)v1 | (v3 << 16);
      }
      *((unsigned char *)v0 + 16) = 0;
    }
    else
    {
      if (v4 != 254 || v8 != 255)
      {
        int v3 = 0;
        LODWORD(v1) = v4 | (v8 << 8);
        int v15 = *((unsigned __int8 *)v0 + 16);
        BOOL v11 = (v15 & 1) != 0 || v15 == 2;
        LOWORD(v12) = __rev16(v1);
        goto LABEL_20;
      }
      int v14 = *((unsigned __int8 *)v0 + 16);
      if (v14 != 2)
      {
        int v3 = 0;
        if (v14) {
          LOWORD(v1) = -257;
        }
        else {
          LOWORD(v1) = -2;
        }
        return (unsigned __int16)v1 | (v3 << 16);
      }
      *((unsigned char *)v0 + 16) = 1;
    }
    CFDictionaryRef v1 = v7;
  }
  uint64_t v2 = v0[1];
  if (v1 == v2) {
    goto LABEL_23;
  }
  *id v0 = v1 + 1;
  if (v1 + 1 == v2) {
    goto LABEL_23;
  }
  int v3 = 0;
  unsigned int v4 = *v1;
LABEL_16:
  *id v0 = v1 + 2;
  LODWORD(v1) = v4 | (v1[1] << 8);
  int v10 = *((unsigned __int8 *)v0 + 16);
  BOOL v11 = (v10 & 1) != 0 || v10 == 2;
  unsigned int v12 = bswap32(v1) >> 16;
LABEL_20:
  if (v11) {
    LOWORD(v1) = v12;
  }
  return (unsigned __int16)v1 | (v3 << 16);
}

{
  uint64_t v0;
  Swift::UInt8_optional v1;
  Swift::UInt8 value;
  int v3;
  int v4;
  Swift::UInt8_optional v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  int v13;

  if (*(unsigned char *)(v0 + 65))
  {
LABEL_2:
    CFDictionaryRef v1 = Data.Iterator.next()();
    if ((*(_WORD *)&v1 & 0x100) != 0) {
      goto LABEL_20;
    }
    value = v1.value;
    LOWORD(v3) = Data.Iterator.next()();
    if ((v3 & 0x100) != 0) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unsigned int v4 = 1;
  *(unsigned char *)(v0 + 65) = 1;
  Class v5 = Data.Iterator.next()();
  if ((*(_WORD *)&v5 & 0x100) != 0)
  {
    LOWORD(v8) = 0;
    return (unsigned __int16)v8 | (v4 << 16);
  }
  value = v5.value;
  unsigned __int8 v6 = v5.value;
  LOWORD(v3) = Data.Iterator.next()();
  if (v6 < 0xFE)
  {
    if ((v3 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_20:
    LOWORD(v8) = 0;
    unsigned int v4 = 1;
    return (unsigned __int16)v8 | (v4 << 16);
  }
  if ((v3 & 0x100) != 0) {
    goto LABEL_20;
  }
  if (v6 == 255 && v3 == 254)
  {
    uint64_t v7 = *(unsigned __int8 *)(v0 + 64);
    if (v7 != 2)
    {
      unsigned int v4 = 0;
      if (v7) {
        LOWORD(v8) = -2;
      }
      else {
        LOWORD(v8) = -257;
      }
      return (unsigned __int16)v8 | (v4 << 16);
    }
    *(unsigned char *)(v0 + 64) = 0;
    goto LABEL_2;
  }
  if (v6 == 254 && v3 == 255)
  {
    char v13 = *(unsigned __int8 *)(v0 + 64);
    if (v13 != 2)
    {
      unsigned int v4 = 0;
      if (v13) {
        LOWORD(v8) = -257;
      }
      else {
        LOWORD(v8) = -2;
      }
      return (unsigned __int16)v8 | (v4 << 16);
    }
    *(unsigned char *)(v0 + 64) = 1;
    goto LABEL_2;
  }
LABEL_14:
  unsigned int v4 = 0;
  int v9 = value | (v3 << 8);
  int v10 = *(unsigned __int8 *)(v0 + 64);
  BOOL v11 = (v10 & 1) != 0 || v10 == 2;
  int v8 = bswap32(v9) >> 16;
  if (!v11) {
    LOWORD(v8) = v9;
  }
  return (unsigned __int16)v8 | (v4 << 16);
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t result;
  int v22;
  int v23;

  if (*((unsigned char *)v0 + 17) == 1)
  {
    CFDictionaryRef v1 = *v0;
    uint64_t v2 = v0[1];
LABEL_3:
    int v3 = *(void *)(v1 + 16);
    if (v2 == v3)
    {
LABEL_6:
      LOWORD(v6) = 0;
      uint64_t v7 = 1;
      return (unsigned __int16)v6 | (v7 << 16);
    }
    if (v2 < v3)
    {
      unsigned int v4 = v1 + 32;
      Class v5 = *(unsigned __int8 *)(v1 + 32 + v2);
      v0[1] = v2 + 1;
      if (v2 + 1 == v3) {
        goto LABEL_6;
      }
      if (v2 + 1 < v3)
      {
        uint64_t v7 = 0;
        int v15 = *(unsigned __int8 *)(v4 + v2 + 1);
        v0[1] = v2 + 2;
        unsigned __int8 v6 = v5 | (v15 << 8);
LABEL_22:
        unsigned int v18 = *((unsigned __int8 *)v0 + 16);
        uint64_t v19 = (v18 & 1) != 0 || v18 == 2;
        BOOL v20 = bswap32(v6) >> 16;
LABEL_26:
        if (v19) {
          LOWORD(v6) = v20;
        }
        return (unsigned __int16)v6 | (v7 << 16);
      }
      goto LABEL_46;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v7 = 1;
  *((unsigned char *)v0 + 17) = 1;
  CFDictionaryRef v1 = *v0;
  int v8 = v0[1];
  int v9 = *(void *)(*v0 + 16);
  if (v8 == v9)
  {
LABEL_8:
    LOWORD(v6) = 0;
    return (unsigned __int16)v6 | (v7 << 16);
  }
  if (v8 >= v9) {
    goto LABEL_45;
  }
  int v10 = v1 + 32;
  BOOL v11 = *(unsigned __int8 *)(v1 + 32 + v8);
  unsigned int v12 = v8 + 1;
  v0[1] = v8 + 1;
  if (v11 > 0xFD)
  {
    if (v12 != v9)
    {
      if (v12 >= v9)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      char v13 = *(unsigned __int8 *)(v10 + v12);
      uint64_t v2 = v8 + 2;
      v0[1] = v2;
      if (v11 == 255 && v13 == 254)
      {
        int v14 = *((unsigned __int8 *)v0 + 16);
        if (v14 != 2)
        {
          uint64_t v7 = 0;
          if (v14) {
            LOWORD(v6) = -2;
          }
          else {
            LOWORD(v6) = -257;
          }
          return (unsigned __int16)v6 | (v7 << 16);
        }
        *((unsigned char *)v0 + 16) = 0;
      }
      else
      {
        if (v11 != 254 || v13 != 255)
        {
          uint64_t v7 = 0;
          unsigned __int8 v6 = v11 | (v13 << 8);
          int v23 = *((unsigned __int8 *)v0 + 16);
          uint64_t v19 = (v23 & 1) != 0 || v23 == 2;
          LOWORD(v20) = __rev16(v6);
          goto LABEL_26;
        }
        unsigned int v22 = *((unsigned __int8 *)v0 + 16);
        if (v22 != 2)
        {
          uint64_t v7 = 0;
          if (v22) {
            LOWORD(v6) = -257;
          }
          else {
            LOWORD(v6) = -2;
          }
          return (unsigned __int16)v6 | (v7 << 16);
        }
        *((unsigned char *)v0 + 16) = 1;
      }
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (v12 == v9) {
    goto LABEL_8;
  }
  if (v12 < v9)
  {
    uint64_t v7 = 0;
    char v16 = v8 + 2;
    id v17 = *(unsigned __int8 *)(v10 + v12);
    v0[1] = v16;
    unsigned __int8 v6 = v11 | (v17 << 8);
    goto LABEL_22;
  }
LABEL_48:
  __break(1u);
  return result;
}

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  unsigned int v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  int v12;

  if (*((unsigned char *)v0 + 17))
  {
LABEL_2:
    CFDictionaryRef v1 = *v0;
    if (*v0 >= v0[1]) {
      goto LABEL_20;
    }
    uint64_t v2 = *v1;
    *id v0 = v1 + 1;
    int v3 = specialized BufferViewIterator.next()();
    if ((v3 & 0x100) != 0) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unsigned int v4 = 1;
  *((unsigned char *)v0 + 17) = 1;
  Class v5 = *v0;
  if (*v0 >= v0[1])
  {
    LOWORD(v7) = 0;
    return (unsigned __int16)v7 | (v4 << 16);
  }
  uint64_t v2 = *v5;
  *id v0 = v5 + 1;
  int v3 = specialized BufferViewIterator.next()();
  if (v2 <= 0xFD)
  {
    if ((v3 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_20:
    LOWORD(v7) = 0;
    unsigned int v4 = 1;
    return (unsigned __int16)v7 | (v4 << 16);
  }
  if ((v3 & 0x100) != 0) {
    goto LABEL_20;
  }
  if (v2 == 255 && v3 == 254)
  {
    unsigned __int8 v6 = *((unsigned __int8 *)v0 + 16);
    if (v6 != 2)
    {
      unsigned int v4 = 0;
      if (v6) {
        LOWORD(v7) = -2;
      }
      else {
        LOWORD(v7) = -257;
      }
      return (unsigned __int16)v7 | (v4 << 16);
    }
    *((unsigned char *)v0 + 16) = 0;
    goto LABEL_2;
  }
  if (v2 == 254 && v3 == 255)
  {
    unsigned int v12 = *((unsigned __int8 *)v0 + 16);
    if (v12 != 2)
    {
      unsigned int v4 = 0;
      if (v12) {
        LOWORD(v7) = -257;
      }
      else {
        LOWORD(v7) = -2;
      }
      return (unsigned __int16)v7 | (v4 << 16);
    }
    *((unsigned char *)v0 + 16) = 1;
    goto LABEL_2;
  }
LABEL_14:
  unsigned int v4 = 0;
  uint64_t v7 = v2 | (v3 << 8);
  int v8 = *((unsigned __int8 *)v0 + 16);
  int v9 = (v8 & 1) != 0 || v8 == 2;
  int v10 = bswap32(v7) >> 16;
  if (v9) {
    LOWORD(v7) = v10;
  }
  return (unsigned __int16)v7 | (v4 << 16);
}

uint64_t one-time initialization function for vmOpsThreshold()
{
  if (one-time initialization token for _pageSize != -1) {
    uint64_t result = swift_once();
  }
  if ((unint64_t)(_pageSize - 0x2000000000000000) >> 62 == 3) {
    static __DataStorage.vmOpsThreshold = 4 * _pageSize;
  }
  else {
    __break(1u);
  }
  return result;
}

id _NSSwiftLocale.displayName(forKey:value:)(void *a1, uint64_t a2)
{
  outlined init with copy of Any(a2, (uint64_t)v123);
  if (!swift_dynamicCast()) {
    return 0;
  }
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C430]);
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C438]);
      uint64_t v12 = v11;
      if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v12 == v13)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
        {
          id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C400]);
          uint64_t v18 = v17;
          if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v18 == v19)
          {
            swift_bridgeObjectRelease_n();
LABEL_22:
            uint64_t v28 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForCountryCode_, v28);
            goto LABEL_19;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_22;
          }
          id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C470]);
          uint64_t v31 = v30;
          if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v31 == v32)
          {
            swift_bridgeObjectRelease_n();
LABEL_27:
            uint64_t v34 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForScriptCode_, v34);
            goto LABEL_19;
          }
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v33) {
            goto LABEL_27;
          }
          id v35 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C498]);
          uint64_t v37 = v36;
          if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v37 == v38)
          {
            swift_bridgeObjectRelease_n();
LABEL_32:
            uint64_t v40 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForVariantCode_, v40);
            goto LABEL_19;
          }
          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v39) {
            goto LABEL_32;
          }
          id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C420]);
          uint64_t v43 = v42;
          if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v43 == v44)
          {
LABEL_35:
            swift_bridgeObjectRelease_n();
LABEL_37:
            swift_bridgeObjectRelease();
            return 0;
          }
          char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v45) {
            goto LABEL_37;
          }
          id v47 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3E8]);
          uint64_t v49 = v48;
          if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v49 == v50) {
            goto LABEL_45;
          }
          char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v51)
          {
LABEL_46:
            uint64_t v56 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForCalendarIdentifier_, v56);
            goto LABEL_19;
          }
          id v52 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3E0]);
          uint64_t v54 = v53;
          if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v54 == v55)
          {
LABEL_45:
            swift_bridgeObjectRelease_n();
            goto LABEL_46;
          }
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v57) {
            goto LABEL_46;
          }
          id v58 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3F0]);
          uint64_t v60 = v59;
          if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v60 == v61)
          {
            swift_bridgeObjectRelease_n();
LABEL_52:
            uint64_t v63 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForCollationIdentifier_, v63);
            goto LABEL_19;
          }
          char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v62) {
            goto LABEL_52;
          }
          id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C490]);
          uint64_t v66 = v65;
          if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v66 == v67) {
            goto LABEL_35;
          }
          char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v68) {
            goto LABEL_37;
          }
          id v69 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C440]);
          uint64_t v71 = v70;
          if (v69 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v71 == v72) {
            goto LABEL_35;
          }
          char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v73) {
            goto LABEL_37;
          }
          id v74 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C418]);
          uint64_t v76 = v75;
          if (v74 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v76 == v77) {
            goto LABEL_35;
          }
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v78) {
            goto LABEL_37;
          }
          id v79 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C428]);
          uint64_t v81 = v80;
          if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v81 == v82) {
            goto LABEL_35;
          }
          char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v83) {
            goto LABEL_37;
          }
          id v84 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C410]);
          uint64_t v86 = v85;
          if (v84 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v86 == v87)
          {
            swift_bridgeObjectRelease_n();
LABEL_69:
            uint64_t v89 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForCurrencySymbol_, v89);
            goto LABEL_19;
          }
          char v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v88) {
            goto LABEL_69;
          }
          id v90 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C408]);
          uint64_t v92 = v91;
          if (v90 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v92 == v93)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v94 & 1) == 0)
            {
              id v96 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3F8]);
              uint64_t v98 = v97;
              if (v96 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v98 == v99)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
                char v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v100 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  id v102 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C460]);
                  uint64_t v104 = v103;
                  if (v102 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v104 == v105) {
                    goto LABEL_82;
                  }
                  char v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v106) {
                    return 0;
                  }
                  id v107 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C468]);
                  uint64_t v109 = v108;
                  if (v107 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v109 == v110) {
                    goto LABEL_82;
                  }
                  char v111 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v111) {
                    return 0;
                  }
                  id v112 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3D0]);
                  uint64_t v114 = v113;
                  if (v112 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v114 == v115)
                  {
LABEL_82:
                    swift_bridgeObjectRelease_n();
                    return 0;
                  }
                  char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v116) {
                    return 0;
                  }
                  id v117 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3D8]);
                  uint64_t v119 = v118;
                  if (v117 != static String._unconditionallyBridgeFromObjectiveC(_:)(a1) || v119 != v120) {
                    _stringCompareWithSmolCheck(_:_:expecting:)();
                  }
                  swift_bridgeObjectRelease();
                  goto LABEL_37;
                }
              }
              uint64_t v101 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v25 = objc_msgSend(v2, sel_localizedStringForCollatorIdentifier_, v101);
LABEL_19:
              id v26 = v25;
              swift_unknownObjectRelease();
              if (v26)
              {
                id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);

                return v23;
              }
              return 0;
            }
          }
          uint64_t v95 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v25 = objc_msgSend(v2, sel_localizedStringForCurrencyCode_, v95);
          goto LABEL_19;
        }
      }
      uint64_t v24 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v25 = objc_msgSend(v2, sel_localizedStringForLanguageCode_, v24);
      goto LABEL_19;
    }
  }
  uint64_t v20 = *(void *)&v2[OBJC_IVAR____NSSwiftLocale_locale + 8];
  uint64_t ObjectType = swift_getObjectType();
  unsigned int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 72);
  swift_unknownObjectRetain();
  id v23 = (id)v22(v121, v122, ObjectType, v20);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v23;
}

uint64_t protocol witness for _LocaleProtocol.languageCodeDisplayName(for:) in conformance _LocaleICU()
{
  CFDictionaryRef v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.languageCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.languageCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _LocaleICU.languageCodeDisplayName(for:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in _LocaleICU.languageCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 472);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v11)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3, MEMORY[0x1E4FBA668]);
  uint64_t v53 = v17;
  uint64_t v13 = v18;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(a1 + 472);
  *(void *)(a1 + 472) = 0x8000000000000000;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v22 = *(void *)(v54 + 16);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    char v4 = v20;
    if (*(void *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      uint64_t v25 = v54;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v27 & 1)) {
        goto LABEL_52;
      }
      unint64_t v21 = v26;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v28 = (void *)(*(void *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      uint64_t v14 = v53;
      *uint64_t v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(void *)(a1 + 472) = v25;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v25 = v54;
      if (v20) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v48 = a2;
      uint64_t v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  unint64_t v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v29 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v29;
  if (!*(void *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v21 = v49;
    if (v4) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  uint64_t v30 = (void *)(v29 + 64);
  unint64_t v31 = (unint64_t)((1 << *(unsigned char *)(v25 + 32)) + 63) >> 6;
  if (v25 != v54 || (unint64_t)v30 >= v54 + 64 + 8 * v31) {
    memmove(v30, (const void *)(v54 + 64), 8 * v31);
  }
  uint64_t v50 = v54 + 64;
  int64_t v32 = 0;
  *(void *)(v25 + 16) = *(void *)(v54 + 16);
  uint64_t v33 = 1 << *(unsigned char *)(v54 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & *(void *)(v54 + 64);
  int64_t v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      unint64_t v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      int64_t v52 = v32;
      unint64_t v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }
    int64_t v44 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v44 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v44);
    int64_t v46 = v32 + 1;
    if (!v45)
    {
      int64_t v46 = v32 + 2;
      if (v32 + 2 >= v51) {
        goto LABEL_46;
      }
      unint64_t v45 = *(void *)(v50 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v32 + 3;
        if (v32 + 3 >= v51) {
          goto LABEL_46;
        }
        unint64_t v45 = *(void *)(v50 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v32 + 4;
          if (v32 + 4 >= v51) {
            goto LABEL_46;
          }
          unint64_t v45 = *(void *)(v50 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v32 + 5;
            if (v32 + 5 >= v51) {
              goto LABEL_46;
            }
            unint64_t v45 = *(void *)(v50 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v32 + 6;
              if (v32 + 6 >= v51) {
                goto LABEL_46;
              }
              unint64_t v45 = *(void *)(v50 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v32 + 7;
                if (v32 + 7 >= v51) {
                  goto LABEL_46;
                }
                unint64_t v45 = *(void *)(v50 + 8 * v46);
                if (!v45) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_45:
    unint64_t v35 = (v45 - 1) & v45;
    int64_t v52 = v46;
    unint64_t v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    uint64_t v38 = 16 * v37;
    char v39 = (uint64_t *)(*(void *)(v54 + 48) + v38);
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    uint64_t v42 = (void *)(*(void *)(v25 + 48) + v38);
    long long v43 = *(_OWORD *)(*(void *)(v54 + 56) + v38);
    void *v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(void *)(v25 + 56) + v38) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v32 = v52;
  }
  uint64_t v47 = v32 + 8;
  if (v32 + 8 >= v51) {
    goto LABEL_46;
  }
  unint64_t v45 = *(void *)(v50 + 8 * v47);
  if (v45)
  {
    int64_t v46 = v32 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v46 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_45;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for _LocaleProtocol.countryCodeDisplayName(for:) in conformance _LocaleICU()
{
  CFDictionaryRef v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.countryCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.countryCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _LocaleICU.countryCodeDisplayName(for:)(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t closure #1 in _LocaleICU.countryCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 480);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if (v11)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  uint64_t v53 = v17;
  uint64_t v13 = v18;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(a1 + 480);
  *(void *)(a1 + 480) = 0x8000000000000000;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  uint64_t v22 = *(void *)(v54 + 16);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    char v4 = v20;
    if (*(void *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      uint64_t v25 = v54;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v27 & 1)) {
        goto LABEL_52;
      }
      unint64_t v21 = v26;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v28 = (void *)(*(void *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      uint64_t v14 = v53;
      *uint64_t v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(void *)(a1 + 480) = v25;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v25 = v54;
      if (v20) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v48 = a2;
      uint64_t v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  unint64_t v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v29 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v29;
  if (!*(void *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v21 = v49;
    if (v4) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  uint64_t v30 = (void *)(v29 + 64);
  unint64_t v31 = (unint64_t)((1 << *(unsigned char *)(v25 + 32)) + 63) >> 6;
  if (v25 != v54 || (unint64_t)v30 >= v54 + 64 + 8 * v31) {
    memmove(v30, (const void *)(v54 + 64), 8 * v31);
  }
  uint64_t v50 = v54 + 64;
  int64_t v32 = 0;
  *(void *)(v25 + 16) = *(void *)(v54 + 16);
  uint64_t v33 = 1 << *(unsigned char *)(v54 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & *(void *)(v54 + 64);
  int64_t v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      unint64_t v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      int64_t v52 = v32;
      unint64_t v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }
    int64_t v44 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v44 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v44);
    int64_t v46 = v32 + 1;
    if (!v45)
    {
      int64_t v46 = v32 + 2;
      if (v32 + 2 >= v51) {
        goto LABEL_46;
      }
      unint64_t v45 = *(void *)(v50 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v32 + 3;
        if (v32 + 3 >= v51) {
          goto LABEL_46;
        }
        unint64_t v45 = *(void *)(v50 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v32 + 4;
          if (v32 + 4 >= v51) {
            goto LABEL_46;
          }
          unint64_t v45 = *(void *)(v50 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v32 + 5;
            if (v32 + 5 >= v51) {
              goto LABEL_46;
            }
            unint64_t v45 = *(void *)(v50 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v32 + 6;
              if (v32 + 6 >= v51) {
                goto LABEL_46;
              }
              unint64_t v45 = *(void *)(v50 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v32 + 7;
                if (v32 + 7 >= v51) {
                  goto LABEL_46;
                }
                unint64_t v45 = *(void *)(v50 + 8 * v46);
                if (!v45) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_45:
    unint64_t v35 = (v45 - 1) & v45;
    int64_t v52 = v46;
    unint64_t v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    uint64_t v38 = 16 * v37;
    char v39 = (uint64_t *)(*(void *)(v54 + 48) + v38);
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    uint64_t v42 = (void *)(*(void *)(v25 + 48) + v38);
    long long v43 = *(_OWORD *)(*(void *)(v54 + 56) + v38);
    void *v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(void *)(v25 + 56) + v38) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v32 = v52;
  }
  uint64_t v47 = v32 + 8;
  if (v32 + 8 >= v51) {
    goto LABEL_46;
  }
  unint64_t v45 = *(void *)(v50 + 8 * v47);
  if (v45)
  {
    int64_t v46 = v32 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v46 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_45;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  v32[18] = *MEMORY[0x1E4F143B8];
  specialized closure #1 in closure #1 in _LocaleICU.countryCodeDisplayName(for:)(*(void *)(a1 + 16), *(void *)(a1 + 24), a2, a3);
  if (!v6)
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v31);
    outlined init with take of LocalePreferences?((uint64_t)v31, (uint64_t)v32);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v32) == 1 || !v32[1])
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      uint64_t v7 = swift_bridgeObjectRetain();
    }
    uint64_t v22 = v7;
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8)
    {
LABEL_23:
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v24 = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    uint64_t v10 = v22 + 40;
    uint64_t v25 = v4;
    unint64_t v26 = v3;
    CFAllocatorRef v23 = v9;
    while (1)
    {
      CFStringRef v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (String.count.getter() > 153) {
        goto LABEL_11;
      }
      uint64_t v29 = 6254181;
      unint64_t v30 = 0xE300000000000000;
      v13._uint64_t countAndFlagsBits = v4;
      v13._unint64_t object = v3;
      String.append(_:)(v13);
      uint64_t v14 = swift_bridgeObjectRetain();
      char v27 = &v22;
      MEMORY[0x1F4188790](v14);
      int v28 = 0;
      String.utf8CString.getter();
      String.utf8CString.getter();
      int DisplayCountry = uloc_getDisplayCountry();
      swift_release();
      uint64_t v16 = swift_release();
      if (v28 > 0 || v28 == -127 || DisplayCountry > 257 || DisplayCountry <= 0) {
        break;
      }
      MEMORY[0x1F4188790](v16);
      uint64_t v18 = v24;
      closure #1 in String.init(_utf16:)((unsigned char *)&v22 - v17, (unsigned __int16 *)&v22 - 264, v19, &v29);
      uint64_t v24 = v18;
      CFAllocatorRef v9 = v23;
      if (v18)
      {
        unint64_t v21 = v24;
        swift_willThrow();

        __break(1u);
        return;
      }
      unint64_t v20 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v4 = v25;
      uint64_t v3 = v26;
      if (v20) {
        goto LABEL_23;
      }
LABEL_12:
      v10 += 16;
      if (!--v8) {
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v25;
    uint64_t v3 = v26;
    CFAllocatorRef v9 = v23;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
}

{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFAllocatorRef v9;
  uint64_t v10;
  CFStringRef v11;
  __CFString *CanonicalLanguageIdentifierFromString;
  Swift::String v13;
  uint64_t v14;
  int DisplayVariant;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  CFAllocatorRef v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned char v31[144];
  void v32[20];

  uint64_t v3 = a3;
  uint64_t v4 = a2;
  v32[18] = *MEMORY[0x1E4F143B8];
  specialized closure #1 in closure #1 in _LocaleICU.variantCodeDisplayName(for:)(*(void *)(a1 + 16), *(void *)(a1 + 24), a2, a3);
  if (!v6)
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v31);
    outlined init with take of LocalePreferences?((uint64_t)v31, (uint64_t)v32);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v32) == 1 || !v32[1])
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      uint64_t v7 = swift_bridgeObjectRetain();
    }
    uint64_t v22 = v7;
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8)
    {
LABEL_23:
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v24 = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    uint64_t v10 = v22 + 40;
    uint64_t v25 = v4;
    unint64_t v26 = v3;
    CFAllocatorRef v23 = v9;
    while (1)
    {
      CFStringRef v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (String.count.getter() > 250) {
        goto LABEL_11;
      }
      uint64_t v29 = 0x5F53555F6E65;
      unint64_t v30 = 0xE600000000000000;
      v13._uint64_t countAndFlagsBits = v4;
      v13._unint64_t object = v3;
      String.append(_:)(v13);
      uint64_t v14 = swift_bridgeObjectRetain();
      char v27 = &v22;
      MEMORY[0x1F4188790](v14);
      int v28 = 0;
      String.utf8CString.getter();
      String.utf8CString.getter();
      DisplayVariant = uloc_getDisplayVariant();
      swift_release();
      uint64_t v16 = swift_release();
      if (v28 > 0 || v28 == -127 || DisplayVariant > 257 || DisplayVariant <= 0) {
        break;
      }
      MEMORY[0x1F4188790](v16);
      uint64_t v18 = v24;
      closure #1 in String.init(_utf16:)((unsigned char *)&v22 - v17, (unsigned __int16 *)&v22 - 264, v19, &v29);
      uint64_t v24 = v18;
      CFAllocatorRef v9 = v23;
      if (v18)
      {
        unint64_t v21 = v24;
        swift_willThrow();

        __break(1u);
        return;
      }
      unint64_t v20 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v4 = v25;
      uint64_t v3 = v26;
      if (v20) {
        goto LABEL_23;
      }
LABEL_12:
      v10 += 16;
      if (!--v8) {
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v25;
    uint64_t v3 = v26;
    CFAllocatorRef v9 = v23;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
}

uint64_t specialized closure #1 in closure #1 in _LocaleICU.countryCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v11[69] = *MEMORY[0x1E4F143B8];
  if (String.count.getter() > 153) {
    return 0;
  }
  v11[68] = 0xE300000000000000;
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  uint64_t v7 = swift_bridgeObjectRetain();
  MEMORY[0x1F4188790](v7);
  v11[67] = 0;
  String.utf8CString.getter();
  String.utf8CString.getter();
  int DisplayCountry = uloc_getDisplayCountry();
  swift_release();
  swift_release();
  uint64_t v9 = 0;
  if (DisplayCountry <= 257 && DisplayCountry > 0) {
    uint64_t v9 = specialized String.init(_utf16:)((uint64_t)v11, DisplayCountry);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

void specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *, uint64_t, int *))
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v38 = 0;
  uint64_t v31 = a2;
  uint64_t v7 = String.utf8CString.getter() + 32;
  uint64_t v8 = String.utf8CString.getter();
  int64_t v32 = a4;
  int v9 = a4(v7, v8 + 32, (uint64_t *)v35, 257, &v38);
  swift_release();
  swift_release();
  if (v38 > 0 || v38 == -127 || (v9 <= 257 ? (BOOL v10 = v9 <= 0) : (BOOL v10 = 1), v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized String.init(_utf16:)((uint64_t)v35, v9);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12) {
      return;
    }
  }
  outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v37);
  outlined init with take of LocalePreferences?((uint64_t)v37, (uint64_t)&v38);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v38) == 1 || !v39)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v13 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
  }
  else
  {
    uint64_t v13 = swift_bridgeObjectRetain();
  }
  uint64_t v28 = v13;
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    unint64_t v30 = 0;
    CFAllocatorRef v29 = (CFAllocatorRef)*MEMORY[0x1E4F1CFB0];
    uint64_t v15 = v28 + 40;
    do
    {
      CFStringRef v16 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v29, v16);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      uint64_t v18 = swift_bridgeObjectRetain();
      uint64_t v33 = &v28;
      MEMORY[0x1F4188790](v18);
      int v34 = 0;
      uint64_t v19 = String.utf8CString.getter() + 32;
      uint64_t v20 = String.utf8CString.getter();
      int v21 = v32(v19, v20 + 32, &v28 - 66, 257, &v34);
      swift_release();
      uint64_t v22 = swift_release();
      if (v34 > 0 || v34 == -127 || v21 > 257 || v21 <= 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        MEMORY[0x1F4188790](v22);
        uint64_t v24 = v30;
        closure #1 in String.init(_utf16:)((unsigned char *)&v28 - v23, (unsigned __int16 *)&v28 - 264, v25, v36);
        unint64_t v30 = v24;
        if (v24)
        {
          char v27 = v30;
          swift_willThrow();

          __break(1u);
          return;
        }
        uint64_t v26 = v36[1];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v26)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      v15 += 16;
      --v14;
    }
    while (v14);
  }
  swift_bridgeObjectRelease();
}

uint64_t Locale.Components.languageComponents.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = v1[9];
  uint64_t v13 = v1[10];
  uint64_t v12 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v6, v7);
  return outlined copy of Locale.LanguageCode?(v10, v11);
}

void NSHashRemove(NSHashTable *table, const void *pointer)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "void NSHashRemove(NSHashTable * _Nonnull, const void * _Nullable)");
  }

  [(NSHashTable *)table removeItem:pointer];
}

void protocol witness for Collection.endIndex.getter in conformance Data(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      *a1 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v2 + 24);
      goto LABEL_4;
    case 3uLL:
LABEL_4:
      *a1 = v4;
      break;
    default:
      *a1 = BYTE6(v3);
      break;
  }
}

unint64_t instantiation function for generic protocol witness table for _LocaleUnlocalized(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized()
{
  unint64_t result = lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized;
  if (!lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized)
  {
    type metadata accessor for _LocaleUnlocalized();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized;
  if (!lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized)
  {
    type metadata accessor for _LocaleUnlocalized();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized);
  }
  return result;
}

void specialized JSONDecoderImpl.unwrapDate<A>(from:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, double *a9@<X8>)
{
  uint64_t v11 = (void *)a7;
  uint64_t v13 = a5;
  uint64_t v14 = a3;
  uint64_t v15 = (void *)a2;
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  BOOL v16 = (a3 & 0xE0) == 0xA0 && (a2 | a1) == 0;
  if (v16 && a3 == 160)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    *uint64_t v22 = &type metadata for Date;
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      outlined copy of _CodingKey(v13, a6, (uint64_t)v11, a8);
      uint64_t v24 = v13;
      uint64_t v25 = a6;
      uint64_t v26 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v28 = swift_allocObject();
      *(void *)(inited + 32) = v28;
      *(void *)(v28 + 16) = v24;
      *(void *)(v28 + 24) = v25;
      *(void *)(v28 + 32) = v11;
      *(unsigned char *)(v28 + 40) = a8;
      *(void *)&long long v141 = v26;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *(void *)&long long v141 = 0;
    *((void *)&v141 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v39._unint64_t object = (void *)0x80000001823B3360;
    v39._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = 1702125892;
    v40._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v40);
    v41._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v41._unint64_t object = (void *)0x80000001823B3380;
    String.append(_:)(v41);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x1E4FBBA80], v21);
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v139 + 40);
  if (!*(unsigned char *)(v139 + 56))
  {
    uint64_t v134 = *(void *)(v139 + 48);
    uint64_t v15 = (void *)a4;
    int64_t v136 = *(void **)(v139 + 40);
    id v126 = (id)v17;
    unsigned __int8 v31 = v14;
    uint64_t v14 = a5;
    specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, v31, (unint64_t)v15, a5, a6, (uint64_t)v11, a8);
    if (v9)
    {
      outlined consume of JSONEncoder.DateEncodingStrategy((void *)v17, v134, 0);
      return;
    }
    uint64_t v132 = a6;
    LOBYTE(v13) = a8;
    uint64_t v35 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v36 = objc_msgSend(v126, sel_dateFromString_, v35);
    swift_unknownObjectRelease();
    if (v36)
    {
      objc_msgSend(v36, sel_timeIntervalSinceReferenceDate);
      uint64_t v38 = v37;
      outlined consume of JSONEncoder.DateEncodingStrategy((void *)v17, v134, 0);

      *(void *)a9 = v38;
      return;
    }
    goto LABEL_64;
  }
  if (*(unsigned char *)(v139 + 56) != 1)
  {
    switch(v17)
    {
      case 1uLL:
        uint64_t v42 = a9;
        specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, a5, a6, a7, a8);
        if (!v9) {
          goto LABEL_43;
        }
        return;
      case 2uLL:
        uint64_t v42 = a9;
        specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, a5, a6, a7, a8);
        if (v9) {
          return;
        }
        double v44 = v43 / 1000.0;
LABEL_43:
        double *v42 = v44 + -978307200.0;
        return;
      case 3uLL:
        uint64_t v46 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, a5, a6, a7, a8);
        if (v9) {
          return;
        }
        uint64_t v131 = (uint64_t *)a9;
        unint64_t v133 = v46;
        char v138 = v47;
        if (one-time initialization token for cache != -1) {
          uint64_t v46 = swift_once();
        }
        uint64_t v48 = (os_unfair_lock_s *)static TimeZoneCache.cache;
        MEMORY[0x1F4188790](v46);
        unint64_t v49 = v48 + 4;
        uint64_t v50 = v48 + 36;
        swift_retain_n();
        os_unfair_lock_lock(v48 + 36);
        partial apply for closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v48[4], &v141);
        os_unfair_lock_unlock(v48 + 36);
        uint64_t v51 = swift_release_n();
        uint64_t v135 = v141;
        if ((void)v141)
        {
          uint64_t v52 = *((void *)&v141 + 1);
          uint64_t v53 = (os_unfair_lock_s *)static TimeZoneCache.cache;
          MEMORY[0x1F4188790](v51);
          uint64_t v50 = v53 + 4;
          unint64_t v49 = v53 + 36;
          swift_retain_n();
          os_unfair_lock_lock(v53 + 36);
          closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v53[4], &v141);
          os_unfair_lock_unlock(v53 + 36);
          swift_release_n();
          if ((void)v141)
          {
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *(void *)&long long v141 = v135;
            *((void *)&v141 + 1) = v52;
            if (one-time initialization token for cache != -1) {
              swift_once();
            }
            type metadata accessor for _LocaleUnlocalized();
            swift_retain();
            __darwin_time_t v54 = swift_initStaticObject();
            swift_release();
            uint64_t v55 = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl((unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized, (void (*)(uint64_t))type metadata accessor for _LocaleUnlocalized);
            __tp.tv_sec = v54;
            __tp.uint64_t tv_nsec = v55;
            uint64_t v146 = 0;
            char v147 = 1;
            type metadata accessor for _CalendarGregorian();
            swift_allocObject();
            _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)&v140, (uint64_t *)&v141, (long long *)&__tp.tv_sec, 2, 0, 4, 0, (uint64_t)&v146);
            LODWORD(v141) = 0x10000;
            BYTE4(v141) = 1;
            *((void *)&v141 + 1) = 0;
            *(void *)&long long v142 = v56;
            uint64_t v57 = v56;
            *((void *)&v142 + 1) = v135;
            uint64_t v143 = v52;
            Date.ISO8601FormatStyle.parse(_:in:)(v133, (unint64_t)v138, (uint64_t)&__tp);
            if ((v145 & 1) == 0)
            {
              uint64_t tv_nsec = __tp.tv_nsec;
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_release();
              *uint64_t v131 = tv_nsec;
              return;
            }
            LODWORD(v141) = 0x10000;
            BYTE4(v141) = 1;
            *((void *)&v141 + 1) = 0;
            *(void *)&long long v142 = v57;
            *((void *)&v142 + 1) = v135;
            uint64_t v143 = v52;
            __tp.tv_sec = 0;
            __tp.uint64_t tv_nsec = 0;
            clock_gettime(_CLOCK_REALTIME, &__tp);
            *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
            Swift::String v58 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
            *(void *)&long long v141 = 0;
            *((void *)&v141 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(88);
            v59._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
            v59._unint64_t object = (void *)0xED00002065737261;
            String.append(_:)(v59);
            v60._uint64_t countAndFlagsBits = v133;
            v60._unint64_t object = v138;
            String.append(_:)(v60);
            v61._uint64_t countAndFlagsBits = 0xD000000000000046;
            v61._unint64_t object = (void *)0x80000001823AB110;
            String.append(_:)(v61);
            String.append(_:)(v58);
            v62._uint64_t countAndFlagsBits = 46;
            v62._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v62);
            long long v63 = v141;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
            uint64_t v64 = swift_initStackObject();
            *(_OWORD *)(v64 + 16) = xmmword_1821037E0;
            *(void *)(v64 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
            *(void *)(v64 + 72) = MEMORY[0x1E4FBB1A0];
            *(void *)(v64 + 40) = v65;
            *(_OWORD *)(v64 + 48) = v63;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
            uint64_t v66 = (void *)static _DictionaryStorage.allocate(capacity:)();
            outlined init with copy of (Hashable & Sendable)?(v64 + 32, (uint64_t)&v141, &demangling cache variable for type metadata for (String, Any));
            long long v67 = v141;
            swift_retain();
            unint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(v67, *((uint64_t *)&v67 + 1));
            if ((v69 & 1) == 0)
            {
              v66[(v68 >> 6) + 8] |= 1 << v68;
              *(_OWORD *)(v66[6] + 16 * v68) = v67;
              outlined init with take of Any(&v142, (_OWORD *)(v66[7] + 32 * v68));
              uint64_t v70 = v66[2];
              BOOL v71 = __OFADD__(v70, 1);
              uint64_t v72 = v70 + 1;
              if (!v71)
              {
                v66[2] = v72;
                swift_release();
                swift_bridgeObjectRelease();
                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                id v73 = objc_allocWithZone((Class)NSError);
                uint64_t v74 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v75 = objc_msgSend(v73, sel_initWithDomain_code_userInfo_, v74, 2048, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                id v76 = objc_msgSend(v75, sel_domain);
                id v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
                uint64_t v79 = v78;

                if (v77 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
                  && v79 == v80)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  char v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v115 & 1) == 0) {
                    goto LABEL_105;
                  }
                }
                swift_willThrow();
                swift_unknownObjectRelease();
                swift_release();

                swift_bridgeObjectRelease();
                uint64_t v116 = type metadata accessor for DecodingError();
                swift_allocError();
                uint64_t v118 = v117;
                unint64_t v119 = *(void *)(v139 + 160);
                swift_retain();
                _CodingPathNode.path.getter(v119);
                swift_release();
                DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
                (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v116 - 8) + 104))(v118, *MEMORY[0x1E4FBBA78], v116);
LABEL_26:
                swift_willThrow();
                return;
              }
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
            }
LABEL_103:
            __break(1u);
            goto LABEL_104;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        os_unfair_lock_unlock(v50);
        __break(1u);
        os_unfair_lock_unlock(v49);
        __break(1u);
        return;
      default:
        uint64_t v129 = a9;
        uint64_t v132 = v9;
        uint64_t v125 = a1;
        uint64_t v122 = a2;
        if (a8 == -1)
        {
          uint64_t v101 = a7;
          swift_retain();
          uint64_t v103 = (void *)a4;
          goto LABEL_74;
        }
        int64_t v32 = (void *)swift_allocObject();
        v32[5] = &type metadata for _CodingKey;
        v32[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v33 = swift_allocObject();
        _OWORD v32[2] = v33;
        *(void *)(v33 + 16) = v13;
        *(void *)(v33 + 24) = a6;
        *(void *)(v33 + 32) = v11;
        *(unsigned char *)(v33 + 40) = a8;
        v32[7] = a4;
        if (a4 >> 62)
        {
          if (a4 >> 62 != 1)
          {
            uint64_t v104 = 0;
            goto LABEL_72;
          }
          int v34 = (uint64_t *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          int v34 = (uint64_t *)(a4 + 64);
        }
        uint64_t v104 = *v34;
        swift_retain();
LABEL_72:
        uint64_t v105 = v104 + 1;
        if (__OFADD__(v104, 1))
        {
          __break(1u);
          goto LABEL_97;
        }
        uint64_t v101 = (uint64_t)v11;
        v32[8] = v105;
        uint64_t v103 = v32;
LABEL_74:
        uint64_t v11 = *(void **)(v139 + 160);
        *(void *)(v139 + 160) = v103;
        uint64_t v89 = *(void **)(v139 + 16);
        outlined copy of _CodingKey?(v13, a6, v101, a8);
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v139 + 16) = v89;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_75;
        }
        goto LABEL_95;
    }
  }
  uint64_t v125 = a1;
  uint64_t v132 = v9;
  uint64_t v134 = *(void *)(v139 + 48);
  int64_t v136 = *(void **)(v139 + 40);
  uint64_t v129 = a9;
  if (a8 == -1)
  {
    uint64_t v11 = (void *)a4;
    swift_retain();
    goto LABEL_47;
  }
  unint64_t v17 = a4;
  uint64_t v11 = (void *)swift_allocObject();
  v11[5] = &type metadata for _CodingKey;
  v11[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v18 = swift_allocObject();
  v11[2] = v18;
  *(void *)(v18 + 16) = v13;
  *(void *)(v18 + 24) = a6;
  *(void *)(v18 + 32) = a7;
  *(unsigned char *)(v18 + 40) = a8;
  v11[7] = v17;
  if (v17 >> 62)
  {
    if (v17 >> 62 != 1)
    {
      uint64_t v82 = 1;
      goto LABEL_46;
    }
    uint64_t v19 = (uint64_t *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v17 + 64);
  }
  uint64_t v81 = *v19;
  swift_retain();
  uint64_t v82 = v81 + 1;
  if (__OFADD__(v81, 1))
  {
    __break(1u);
LABEL_64:
    uint64_t v94 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v96 = v95;
    if ((_BYTE)v13 == 0xFF)
    {
      _CodingPathNode.path.getter((unint64_t)v15);
    }
    else
    {
      uint64_t v97 = v11;
      outlined copy of _CodingKey(v14, v132, (uint64_t)v11, v13);
      uint64_t v98 = _CodingPathNode.path.getter((unint64_t)v15);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v99 = swift_initStackObject();
      *(_OWORD *)(v99 + 16) = xmmword_1821037E0;
      *(void *)(v99 + 56) = &type metadata for _CodingKey;
      *(void *)(v99 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v100 = swift_allocObject();
      *(void *)(v99 + 32) = v100;
      *(void *)(v100 + 16) = v14;
      *(void *)(v100 + 24) = v132;
      *(void *)(v100 + 32) = v97;
      unint64_t v17 = (unint64_t)v136;
      *(unsigned char *)(v100 + 40) = v13;
      *(void *)&long long v141 = v98;
      specialized Array.append<A>(contentsOf:)(v99);
    }
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v94 - 8) + 104))(v96, *MEMORY[0x1E4FBBA78], v94);
    swift_willThrow();
    uint64_t v91 = (void *)v17;
    uint64_t v92 = v134;
    char v93 = 0;
    goto LABEL_60;
  }
LABEL_46:
  v11[8] = v82;
LABEL_47:
  uint64_t v123 = *(void *)(v139 + 160);
  *(void *)(v139 + 160) = v11;
  uint64_t v11 = *(void **)(v139 + 16);
  outlined copy of _CodingKey?(v13, a6, a7, a8);
  outlined copy of JSONEncoder.DateEncodingStrategy(v136, v134, 1);
  swift_retain();
  char v83 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v139 + 16) = v11;
  if ((v83 & 1) == 0)
  {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    *(void *)(v139 + 16) = v11;
  }
  unint64_t v85 = v11[2];
  unint64_t v84 = v11[3];
  uint64_t v86 = v125;
  if (v85 >= v84 >> 1)
  {
    uint64_t v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v84 > 1), v85 + 1, 1, v11);
    uint64_t v86 = v125;
    uint64_t v11 = v120;
  }
  v11[2] = v85 + 1;
  uint64_t v87 = &v11[3 * v85];
  v87[4] = v86;
  v87[5] = v15;
  *((unsigned char *)v87 + 48) = v14;
  *(void *)(v139 + 16) = v11;
  *((void *)&v142 + 1) = type metadata accessor for JSONDecoderImpl();
  uint64_t v143 = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
  *(void *)&long long v141 = v139;
  swift_retain();
  ((void (*)(long long *))v136)(&v141);
  LOBYTE(v14) = v132;
  uint64_t v88 = (uint64_t)&v141;
  if (!v132)
  {
LABEL_56:
    __swift_destroy_boxed_opaque_existential_1(v88);
    *(void *)(v139 + 160) = v123;
    swift_retain();
    swift_release();
    uint64_t v89 = *(void **)(v139 + 16);
    if (v89[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v90 = v89[2];
        if (v90) {
          goto LABEL_59;
        }
        goto LABEL_94;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v89 = specialized _ArrayBuffer._consumeAndCreateNew()(v89);
    uint64_t v90 = v89[2];
    if (v90) {
      goto LABEL_59;
    }
LABEL_94:
    __break(1u);
LABEL_95:
    uint64_t v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89[2] + 1, 1, v89);
    *(void *)(v139 + 16) = v89;
LABEL_75:
    uint64_t v107 = v125;
    unint64_t v109 = v89[2];
    unint64_t v108 = v89[3];
    if (v109 >= v108 >> 1)
    {
      uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v108 > 1), v109 + 1, 1, v89);
      uint64_t v107 = v125;
      uint64_t v89 = v121;
    }
    v89[2] = v109 + 1;
    uint64_t v110 = &v89[3 * v109];
    v110[4] = v107;
    v110[5] = v122;
    *((unsigned char *)v110 + 48) = v14;
    *(void *)(v139 + 16) = v89;
    swift_retain();
    specialized JSONDecoderImpl.decode(_:)();
    if (!v132)
    {
LABEL_82:
      uint64_t v113 = v111;
      swift_release();
      *(void *)uint64_t v129 = v113;
      *(void *)(v139 + 160) = v11;
      swift_retain();
      swift_release();
      uint64_t v15 = *(void **)(v139 + 16);
      if (v15[2])
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v112 = v15[2];
          if (v112) {
            goto LABEL_85;
          }
          goto LABEL_102;
        }
      }
      else
      {
        __break(1u);
      }
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
      uint64_t v112 = v15[2];
      if (v112) {
        goto LABEL_85;
      }
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    swift_release();
    *(void *)(v139 + 160) = v11;
    swift_retain();
    swift_release();
    uint64_t v15 = *(void **)(v139 + 16);
    if (v15[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v112 = v15[2];
        if (v112)
        {
LABEL_85:
          v15[2] = v112 - 1;
          *(void *)(v139 + 16) = v15;
          swift_release();
          swift_release();
          return;
        }
        goto LABEL_81;
      }
LABEL_98:
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
      uint64_t v112 = v15[2];
      if (v112) {
        goto LABEL_85;
      }
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v141);
  *(void *)(v139 + 160) = v123;
  swift_retain();
  swift_release();
  uint64_t v89 = *(void **)(v139 + 16);
  if (!v89[2])
  {
    __break(1u);
LABEL_90:
    uint64_t v88 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v89);
    uint64_t v89 = (void *)v88;
    uint64_t v90 = *(void *)(v88 + 16);
    if (v90) {
      goto LABEL_59;
    }
    goto LABEL_55;
  }
  uint64_t v88 = swift_isUniquelyReferenced_nonNull_native();
  if ((v88 & 1) == 0) {
    goto LABEL_90;
  }
  uint64_t v90 = v89[2];
  if (!v90)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
LABEL_59:
  v89[2] = v90 - 1;
  *(void *)(v139 + 16) = v89;
  swift_release();
  swift_release();
  uint64_t v91 = v136;
  uint64_t v92 = v134;
  char v93 = 1;
LABEL_60:
  outlined consume of JSONEncoder.DateEncodingStrategy(v91, v92, v93);
}

uint64_t TimeZone.init(secondsFromGMT:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  unint64_t v3 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v3 + 36);
  partial apply for closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v3[4], &v6);
  os_unfair_lock_unlock(v3 + 36);
  uint64_t result = swift_release_n();
  uint64_t v5 = *((void *)&v6 + 1);
  if (!(void)v6) {
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void static FormatStyle<>.iso8601.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  unint64_t v3 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v3 + 36);
  partial apply for closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v3[4], &v14);
  os_unfair_lock_unlock(v3 + 36);
  uint64_t v4 = swift_release_n();
  uint64_t v5 = v14;
  if (!(void)v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = *((void *)&v14 + 1);
  uint64_t v7 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v4);
  swift_retain_n();
  os_unfair_lock_lock(v7 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v7[4], &v14);
  os_unfair_lock_unlock(v7 + 36);
  swift_release_n();
  if (!(void)v14)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)&long long v14 = v5;
  *((void *)&v14 + 1) = v6;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  *(void *)&long long v12 = inited;
  *((void *)&v12 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  uint64_t v10 = 0;
  char v11 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v13, (uint64_t *)&v14, &v12, 2, 0, 4, 0, (uint64_t)&v10);
  *(_DWORD *)a2 = 0x10000;
  *(unsigned char *)(a2 + 4) = 1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
}

unint64_t closure #1 in TimeZoneCache.offsetFixed(_:)partial apply@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return partial apply for closure #1 in TimeZoneCache.offsetFixed(_:)(a1, a2);
}

unint64_t partial apply for closure #1 in TimeZoneCache.offsetFixed(_:)@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return closure #1 in TimeZoneCache.offsetFixed(_:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t closure #1 in TimeZoneCache.offsetFixed(_:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v6 = result;
  uint64_t v8 = *(void *)(result + 48);
  if (*(void *)(v8 + 16))
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v9)
    {
      long long v48 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * result);
      uint64_t result = swift_unknownObjectRetain();
      long long v10 = v48;
LABEL_58:
      *a3 = v10;
      return result;
    }
  }
  uint64_t v11 = a2;
  if (a2 < 0)
  {
    uint64_t v11 = -a2;
    if (__OFSUB__(0, a2))
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  type metadata accessor for _TimeZoneGMTICU();
  unint64_t v3 = (void *)swift_allocObject();
  uint64_t v12 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a2);
  if (!v13)
  {
LABEL_12:
    uint64_t result = swift_deallocPartialClassInstance();
    long long v10 = 0uLL;
    goto LABEL_58;
  }
  uint64_t v14 = v12;
  uint64_t v15 = v13;
  uint64_t result = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU, (void (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU);
  v3[3] = v14;
  v3[4] = v15;
  v3[2] = a2;
  if (__ROR8__(0xFEDCBA987654321 * v11 + 0x91A2B3C4D5E6F8, 3) >= 0x2468ACF13579BFuLL)
  {
LABEL_57:
    *(void *)&long long v10 = v3;
    *((void *)&v10 + 1) = result;
    goto LABEL_58;
  }
  unint64_t v47 = result;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v49 = *(void *)(v6 + 48);
  uint64_t v4 = v49;
  *(void *)(v6 + 48) = 0x8000000000000000;
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v18 = *(void *)(v49 + 16);
  BOOL v19 = (v17 & 1) == 0;
  BOOL v20 = __OFADD__(v18, v19);
  uint64_t v21 = v18 + v19;
  if (v20) {
    goto LABEL_18;
  }
  LOBYTE(v11) = v17;
  if (*(void *)(v49 + 24) >= v21)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v22 = v49;
      goto LABEL_15;
    }
LABEL_19:
    char v44 = v11;
    unint64_t v45 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
    uint64_t v25 = static _DictionaryStorage.copy(original:)();
    uint64_t v22 = v25;
    if (*(void *)(v4 + 16))
    {
      uint64_t result = v25 + 64;
      __src = (void *)(v4 + 64);
      unint64_t v26 = (unint64_t)((1 << *(unsigned char *)(v22 + 32)) + 63) >> 6;
      if (v22 != v4 || result >= (unint64_t)__src + 8 * v26) {
        uint64_t result = (unint64_t)memmove((void *)result, __src, 8 * v26);
      }
      int64_t v27 = 0;
      *(void *)(v22 + 16) = *(void *)(v4 + 16);
      uint64_t v28 = 1 << *(unsigned char *)(v4 + 32);
      uint64_t v29 = -1;
      if (v28 < 64) {
        uint64_t v29 = ~(-1 << v28);
      }
      unint64_t v30 = v29 & *(void *)(v4 + 64);
      int64_t v31 = (unint64_t)(v28 + 63) >> 6;
      while (1)
      {
        if (v30)
        {
          unint64_t v32 = __clz(__rbit64(v30));
          v30 &= v30 - 1;
          unint64_t v33 = v32 | (v27 << 6);
        }
        else
        {
          int64_t v38 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            goto LABEL_60;
          }
          if (v38 >= v31) {
            break;
          }
          unint64_t v39 = *((void *)__src + v38);
          ++v27;
          if (!v39)
          {
            int64_t v27 = v38 + 1;
            if (v38 + 1 >= v31) {
              break;
            }
            unint64_t v39 = *((void *)__src + v27);
            if (!v39)
            {
              int64_t v27 = v38 + 2;
              if (v38 + 2 >= v31) {
                break;
              }
              unint64_t v39 = *((void *)__src + v27);
              if (!v39)
              {
                int64_t v27 = v38 + 3;
                if (v38 + 3 >= v31) {
                  break;
                }
                unint64_t v39 = *((void *)__src + v27);
                if (!v39)
                {
                  int64_t v27 = v38 + 4;
                  if (v38 + 4 >= v31) {
                    break;
                  }
                  unint64_t v39 = *((void *)__src + v27);
                  if (!v39)
                  {
                    int64_t v27 = v38 + 5;
                    if (v38 + 5 >= v31) {
                      break;
                    }
                    unint64_t v39 = *((void *)__src + v27);
                    if (!v39)
                    {
                      int64_t v27 = v38 + 6;
                      if (v38 + 6 >= v31) {
                        break;
                      }
                      unint64_t v39 = *((void *)__src + v27);
                      if (!v39)
                      {
                        int64_t v27 = v38 + 7;
                        if (v38 + 7 >= v31) {
                          break;
                        }
                        unint64_t v39 = *((void *)__src + v27);
                        if (!v39)
                        {
                          int64_t v40 = v38 + 8;
                          if (v40 >= v31) {
                            break;
                          }
                          unint64_t v39 = *((void *)__src + v40);
                          if (!v39)
                          {
                            while (1)
                            {
                              int64_t v27 = v40 + 1;
                              if (__OFADD__(v40, 1)) {
                                goto LABEL_61;
                              }
                              if (v27 >= v31) {
                                goto LABEL_53;
                              }
                              unint64_t v39 = *((void *)__src + v27);
                              ++v40;
                              if (v39) {
                                goto LABEL_52;
                              }
                            }
                          }
                          int64_t v27 = v40;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_52:
          unint64_t v30 = (v39 - 1) & v39;
          unint64_t v33 = __clz(__rbit64(v39)) + (v27 << 6);
        }
        uint64_t v34 = 8 * v33;
        uint64_t v35 = *(void *)(*(void *)(v4 + 48) + 8 * v33);
        uint64_t v36 = 16 * v33;
        long long v37 = *(_OWORD *)(*(void *)(v4 + 56) + v36);
        *(void *)(*(void *)(v22 + 48) + v34) = v35;
        *(_OWORD *)(*(void *)(v22 + 56) + v36) = v37;
        uint64_t result = swift_unknownObjectRetain();
      }
    }
LABEL_53:
    swift_bridgeObjectRelease();
    uint64_t result = v45;
    if (v44) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
  uint64_t v22 = v49;
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v11 & 1) != (v23 & 1))
  {
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_12;
  }
LABEL_15:
  if (v11)
  {
LABEL_16:
    uint64_t v24 = (void *)(*(void *)(v22 + 56) + 16 * result);
    swift_unknownObjectRelease();
    *uint64_t v24 = v3;
    v24[1] = v47;
LABEL_56:
    *(void *)(v6 + 48) = v22;
    swift_bridgeObjectRelease();
    uint64_t result = v47;
    goto LABEL_57;
  }
LABEL_54:
  *(void *)(v22 + 8 * (result >> 6) + 64) |= 1 << result;
  *(void *)(*(void *)(v22 + 48) + 8 * result) = a2;
  Swift::String v41 = (void *)(*(void *)(v22 + 56) + 16 * result);
  void *v41 = v3;
  v41[1] = v47;
  uint64_t v42 = *(void *)(v22 + 16);
  BOOL v20 = __OFADD__(v42, 1);
  uint64_t v43 = v42 + 1;
  if (!v20)
  {
    *(void *)(v22 + 16) = v43;
    goto LABEL_56;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _LocaleUnlocalized()
{
  return self;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneGMTICU(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU;
  if (!lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU)
  {
    type metadata accessor for _TimeZoneGMTICU();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU);
  }
  return result;
}

char *@objc static NSTimeZone._timeZoneWith(secondsFromGMT:)(uint64_t a1)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  CFDictionaryRef v1 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v1 + 36);
  partial apply for closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)(&v4);
  os_unfair_lock_unlock(v1 + 36);
  swift_release_n();
  uint64_t v2 = v4;

  return v2;
}

char *partial apply for closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)@<X0>(char **a1@<X8>)
{
  return closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)(*(void *)(v1 + 16), a1);
}

char *closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)@<X0>(uint64_t a1@<X1>, char **a2@<X8>)
{
  unint64_t result = TimeZoneCache.State.bridgedOffsetFixed(_:)(a1);
  *a2 = result;
  return result;
}

char *TimeZoneCache.State.bridgedOffsetFixed(_:)(uint64_t a1)
{
  uint64_t v5 = v1;
  uint64_t v7 = *(void *)(v1 + 112);
  if (*(void *)(v7 + 16))
  {
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v9)
    {
      id v2 = *(id *)(*(void *)(v7 + 56) + 8 * v8);
      id v10 = v2;
      return (char *)v2;
    }
  }
  uint64_t v11 = *(void *)(v5 + 48);
  if (*(void *)(v11 + 16))
  {
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v13)
    {
      unint64_t v14 = v12;
      uint64_t v15 = *(void *)(v11 + 56);
      BOOL v16 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
      *(_OWORD *)__srcc = *(_OWORD *)(v15 + 16 * v14);
      char v17 = (char *)objc_allocWithZone(v16);
      *(_OWORD *)&v17[OBJC_IVAR____NSSwiftTimeZone_timeZone] = *(_OWORD *)__srcc;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
      uint64_t v18 = swift_allocObject();
      *(_DWORD *)(v18 + 32) = 0;
      *(_OWORD *)(v18 + 16) = xmmword_18218FDB0;
      *(void *)&v17[OBJC_IVAR____NSSwiftTimeZone_lock] = v18;
      v104.receiver = v17;
      v104.super_class = v16;
      swift_unknownObjectRetain_n();
      id v2 = objc_msgSendSuper2(&v104, sel_init);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v105 = *(void *)(v5 + 112);
      uint64_t v4 = v105;
      *(void *)(v5 + 112) = 0x8000000000000000;
      uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      uint64_t v22 = *(void *)(v4 + 16);
      BOOL v23 = (v20 & 1) == 0;
      uint64_t v24 = v22 + v23;
      if (!__OFADD__(v22, v23))
      {
        uint64_t v3 = v20;
        if (*(void *)(v4 + 24) < v24)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
          uint64_t v25 = v105;
          unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
          if ((v3 & 1) != (v27 & 1)) {
            goto LABEL_103;
          }
          uint64_t v21 = v26;
          if ((v3 & 1) == 0) {
            goto LABEL_64;
          }
LABEL_23:
          uint64_t v43 = *(void *)(v25 + 56);

          *(void *)(v43 + 8 * v21) = v2;
LABEL_65:
          *(void *)(v5 + 112) = v25;
          swift_unknownObjectRelease();
          goto LABEL_144;
        }
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v25 = v4;
          if (v20) {
            goto LABEL_23;
          }
LABEL_64:
          specialized _NativeDictionary._insert(at:key:value:)(v21, a1, (uint64_t)v2, (void *)v25);
          goto LABEL_65;
        }
LABEL_31:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _NSSwiftTimeZone>);
        uint64_t v44 = static _DictionaryStorage.copy(original:)();
        uint64_t v25 = v44;
        if (*(void *)(v4 + 16))
        {
          unint64_t result = (char *)(v44 + 64);
          __src = (char *)(v4 + 64);
          unint64_t v46 = (unint64_t)((1 << *(unsigned char *)(v25 + 32)) + 63) >> 6;
          if (v25 != v4 || result >= &__src[8 * v46]) {
            unint64_t result = (char *)memmove(result, __src, 8 * v46);
          }
          int64_t v47 = 0;
          *(void *)(v25 + 16) = *(void *)(v4 + 16);
          uint64_t v48 = 1 << *(unsigned char *)(v4 + 32);
          uint64_t v49 = -1;
          if (v48 < 64) {
            uint64_t v49 = ~(-1 << v48);
          }
          unint64_t v50 = v49 & *(void *)(v4 + 64);
          int64_t v97 = (unint64_t)(v48 + 63) >> 6;
          while (1)
          {
            if (v50)
            {
              unint64_t v51 = __clz(__rbit64(v50));
              v50 &= v50 - 1;
              unint64_t v52 = v51 | (v47 << 6);
            }
            else
            {
              int64_t v55 = v47 + 1;
              if (__OFADD__(v47, 1))
              {
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
                goto LABEL_149;
              }
              if (v55 >= v97) {
                break;
              }
              unint64_t v56 = *(void *)&__src[8 * v55];
              ++v47;
              if (!v56)
              {
                int64_t v47 = v55 + 1;
                if (v55 + 1 >= v97) {
                  break;
                }
                unint64_t v56 = *(void *)&__src[8 * v47];
                if (!v56)
                {
                  int64_t v47 = v55 + 2;
                  if (v55 + 2 >= v97) {
                    break;
                  }
                  unint64_t v56 = *(void *)&__src[8 * v47];
                  if (!v56)
                  {
                    int64_t v47 = v55 + 3;
                    if (v55 + 3 >= v97) {
                      break;
                    }
                    unint64_t v56 = *(void *)&__src[8 * v47];
                    if (!v56)
                    {
                      int64_t v47 = v55 + 4;
                      if (v55 + 4 >= v97) {
                        break;
                      }
                      unint64_t v56 = *(void *)&__src[8 * v47];
                      if (!v56)
                      {
                        int64_t v47 = v55 + 5;
                        if (v55 + 5 >= v97) {
                          break;
                        }
                        unint64_t v56 = *(void *)&__src[8 * v47];
                        if (!v56)
                        {
                          int64_t v47 = v55 + 6;
                          if (v55 + 6 >= v97) {
                            break;
                          }
                          unint64_t v56 = *(void *)&__src[8 * v47];
                          if (!v56)
                          {
                            int64_t v57 = v55 + 7;
                            if (v57 >= v97) {
                              break;
                            }
                            unint64_t v56 = *(void *)&__src[8 * v57];
                            if (!v56)
                            {
                              while (1)
                              {
                                int64_t v47 = v57 + 1;
                                if (__OFADD__(v57, 1)) {
                                  break;
                                }
                                if (v47 >= v97) {
                                  goto LABEL_63;
                                }
                                unint64_t v56 = *(void *)&__src[8 * v47];
                                ++v57;
                                if (v56) {
                                  goto LABEL_62;
                                }
                              }
LABEL_149:
                              __break(1u);
LABEL_150:
                              __break(1u);
                              goto LABEL_151;
                            }
                            int64_t v47 = v57;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_62:
              unint64_t v50 = (v56 - 1) & v56;
              unint64_t v52 = __clz(__rbit64(v56)) + (v47 << 6);
            }
            uint64_t v53 = 8 * v52;
            __darwin_time_t v54 = *(void **)(*(void *)(v4 + 56) + v53);
            *(void *)(*(void *)(v25 + 48) + v53) = *(void *)(*(void *)(v4 + 48) + v53);
            *(void *)(*(void *)(v25 + 56) + v53) = v54;
            unint64_t result = v54;
          }
        }
LABEL_63:
        swift_bridgeObjectRelease();
        if (v3) {
          goto LABEL_23;
        }
        goto LABEL_64;
      }
      __break(1u);
      goto LABEL_29;
    }
  }
  type metadata accessor for _TimeZoneGMTICU();
  uint64_t v28 = (void *)swift_allocObject();
  uint64_t v29 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a1);
  if (!v30)
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  v28[3] = v29;
  v28[4] = v30;
  uint64_t v21 = a1;
  v28[2] = a1;
  if (a1 < 0)
  {
    uint64_t v21 = -a1;
    if (__OFSUB__(0, a1))
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }
  uint64_t v3 = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU, (void (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU);
  int64_t v31 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  unint64_t v32 = (char *)objc_allocWithZone(v31);
  unint64_t v33 = &v32[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(void *)unint64_t v33 = v28;
  *((void *)v33 + 1) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v34 = swift_allocObject();
  *(_DWORD *)(v34 + 32) = 0;
  *(_OWORD *)(v34 + 16) = xmmword_18218FDB0;
  *(void *)&v32[OBJC_IVAR____NSSwiftTimeZone_lock] = v34;
  v106.receiver = v32;
  v106.super_class = v31;
  swift_retain_n();
  id v2 = objc_msgSendSuper2(&v106, sel_init);
  if (__ROR8__(0xFEDCBA987654321 * v21 + 0x91A2B3C4D5E6F8, 3) > 0x2468ACF13579BEuLL)
  {
    swift_release_n();
    return (char *)v2;
  }
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v105 = *(void *)(v5 + 48);
  uint64_t v4 = v105;
  *(void *)(v5 + 48) = 0x8000000000000000;
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  uint64_t v37 = *(void *)(v4 + 16);
  BOOL v38 = (v36 & 1) == 0;
  BOOL v39 = __OFADD__(v37, v38);
  uint64_t v40 = v37 + v38;
  if (v39) {
    goto LABEL_30;
  }
  LOBYTE(v21) = v36;
  if (*(void *)(v4 + 24) < v40)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, isUniquelyReferenced_nonNull_native);
    uint64_t v41 = v105;
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v21 & 1) != (v42 & 1))
    {
LABEL_103:
      unint64_t v73 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_104;
    }
    goto LABEL_26;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v41 = v4;
LABEL_26:
    if ((v21 & 1) == 0) {
      goto LABEL_99;
    }
    goto LABEL_27;
  }
  unint64_t v95 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  uint64_t v58 = static _DictionaryStorage.copy(original:)();
  uint64_t v41 = v58;
  if (!*(void *)(v4 + 16)) {
    goto LABEL_98;
  }
  unint64_t result = (char *)(v58 + 64);
  __srca = (char *)(v4 + 64);
  unint64_t v59 = (unint64_t)((1 << *(unsigned char *)(v41 + 32)) + 63) >> 6;
  if (v41 != v4 || result >= &__srca[8 * v59]) {
    unint64_t result = (char *)memmove(result, __srca, 8 * v59);
  }
  int64_t v60 = 0;
  *(void *)(v41 + 16) = *(void *)(v4 + 16);
  uint64_t v61 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v62 = -1;
  if (v61 < 64) {
    uint64_t v62 = ~(-1 << v61);
  }
  unint64_t v63 = v62 & *(void *)(v4 + 64);
  int64_t v98 = (unint64_t)(v61 + 63) >> 6;
  while (1)
  {
    if (v63)
    {
      unint64_t v64 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      unint64_t v65 = v64 | (v60 << 6);
      goto LABEL_74;
    }
    int64_t v70 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      goto LABEL_147;
    }
    if (v70 >= v98) {
      goto LABEL_98;
    }
    unint64_t v71 = *(void *)&__srca[8 * v70];
    ++v60;
    if (!v71)
    {
      int64_t v60 = v70 + 1;
      if (v70 + 1 >= v98) {
        goto LABEL_98;
      }
      unint64_t v71 = *(void *)&__srca[8 * v60];
      if (!v71)
      {
        int64_t v60 = v70 + 2;
        if (v70 + 2 >= v98) {
          goto LABEL_98;
        }
        unint64_t v71 = *(void *)&__srca[8 * v60];
        if (!v71)
        {
          int64_t v60 = v70 + 3;
          if (v70 + 3 >= v98) {
            goto LABEL_98;
          }
          unint64_t v71 = *(void *)&__srca[8 * v60];
          if (!v71)
          {
            int64_t v60 = v70 + 4;
            if (v70 + 4 >= v98) {
              goto LABEL_98;
            }
            unint64_t v71 = *(void *)&__srca[8 * v60];
            if (!v71)
            {
              int64_t v60 = v70 + 5;
              if (v70 + 5 >= v98) {
                goto LABEL_98;
              }
              unint64_t v71 = *(void *)&__srca[8 * v60];
              if (!v71)
              {
                int64_t v60 = v70 + 6;
                if (v70 + 6 >= v98) {
                  goto LABEL_98;
                }
                unint64_t v71 = *(void *)&__srca[8 * v60];
                if (!v71) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_97:
    unint64_t v63 = (v71 - 1) & v71;
    unint64_t v65 = __clz(__rbit64(v71)) + (v60 << 6);
LABEL_74:
    uint64_t v66 = 8 * v65;
    uint64_t v67 = *(void *)(*(void *)(v4 + 48) + 8 * v65);
    uint64_t v68 = 16 * v65;
    long long v69 = *(_OWORD *)(*(void *)(v4 + 56) + v68);
    *(void *)(*(void *)(v41 + 48) + v66) = v67;
    *(_OWORD *)(*(void *)(v41 + 56) + v68) = v69;
    unint64_t result = (char *)swift_unknownObjectRetain();
  }
  int64_t v72 = v70 + 7;
  if (v72 >= v98) {
    goto LABEL_98;
  }
  unint64_t v71 = *(void *)&__srca[8 * v72];
  if (v71)
  {
    int64_t v60 = v72;
    goto LABEL_97;
  }
  while (1)
  {
    int64_t v60 = v72 + 1;
    if (__OFADD__(v72, 1)) {
      goto LABEL_150;
    }
    if (v60 >= v98) {
      break;
    }
    unint64_t v71 = *(void *)&__srca[8 * v60];
    ++v72;
    if (v71) {
      goto LABEL_97;
    }
  }
LABEL_98:
  swift_bridgeObjectRelease();
  unint64_t v35 = v95;
  if (v21)
  {
LABEL_27:
    uint64_t v21 = *(void *)(v41 + 56) + 16 * v35;
    swift_unknownObjectRelease();
    *(void *)uint64_t v21 = v28;
    *(void *)(v21 + 8) = v3;
    goto LABEL_100;
  }
LABEL_99:
  specialized _NativeDictionary._insert(at:key:value:)(v35, a1, (uint64_t)v28, (void *)v41);
LABEL_100:
  *(void *)(v5 + 48) = v41;
  swift_bridgeObjectRelease();
  uint64_t v3 = (uint64_t)v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v105 = *(void *)(v5 + 112);
  uint64_t v4 = v105;
  *(void *)(v5 + 112) = 0x8000000000000000;
  unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  uint64_t v75 = *(void *)(v4 + 16);
  BOOL v76 = (v74 & 1) == 0;
  BOOL v39 = __OFADD__(v75, v76);
  uint64_t v77 = v75 + v76;
  if (v39)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v21) = v74;
    if (*(void *)(v4 + 24) < v77)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, isUniquelyReferenced_nonNull_native);
      uint64_t v78 = v105;
      unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v21 & 1) != (v79 & 1)) {
        goto LABEL_103;
      }
LABEL_106:
      if (v21)
      {
LABEL_107:
        uint64_t v80 = *(void *)(v78 + 56);
        uint64_t v81 = 8 * v73;

        *(void *)(v80 + v81) = v3;
        goto LABEL_143;
      }
LABEL_142:
      specialized _NativeDictionary._insert(at:key:value:)(v73, a1, v3, (void *)v78);
LABEL_143:
      *(void *)(v5 + 112) = v78;
      swift_release_n();
LABEL_144:
      swift_bridgeObjectRelease();
      return (char *)v2;
    }
LABEL_104:
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v78 = v4;
      goto LABEL_106;
    }
  }
  unint64_t v96 = v73;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _NSSwiftTimeZone>);
  uint64_t v82 = static _DictionaryStorage.copy(original:)();
  uint64_t v78 = v82;
  if (!*(void *)(v4 + 16))
  {
LABEL_141:
    swift_bridgeObjectRelease();
    unint64_t v73 = v96;
    if (v21) {
      goto LABEL_107;
    }
    goto LABEL_142;
  }
  unint64_t result = (char *)(v82 + 64);
  __srcb = (char *)(v4 + 64);
  unint64_t v83 = (unint64_t)((1 << *(unsigned char *)(v78 + 32)) + 63) >> 6;
  if (v78 != v4 || result >= &__srcb[8 * v83]) {
    unint64_t result = (char *)memmove(result, __srcb, 8 * v83);
  }
  int64_t v84 = 0;
  *(void *)(v78 + 16) = *(void *)(v4 + 16);
  uint64_t v85 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v86 = -1;
  if (v85 < 64) {
    uint64_t v86 = ~(-1 << v85);
  }
  unint64_t v87 = v86 & *(void *)(v4 + 64);
  int64_t v99 = (unint64_t)(v85 + 63) >> 6;
  while (2)
  {
    if (v87)
    {
      unint64_t v88 = __clz(__rbit64(v87));
      v87 &= v87 - 1;
      unint64_t v89 = v88 | (v84 << 6);
LABEL_117:
      uint64_t v90 = 8 * v89;
      uint64_t v91 = *(void **)(*(void *)(v4 + 56) + v90);
      *(void *)(*(void *)(v78 + 48) + v90) = *(void *)(*(void *)(v4 + 48) + v90);
      *(void *)(*(void *)(v78 + 56) + v90) = v91;
      unint64_t result = v91;
      continue;
    }
    break;
  }
  int64_t v92 = v84 + 1;
  if (__OFADD__(v84, 1)) {
    goto LABEL_148;
  }
  if (v92 >= v99) {
    goto LABEL_141;
  }
  unint64_t v93 = *(void *)&__srcb[8 * v92];
  ++v84;
  if (v93) {
    goto LABEL_140;
  }
  int64_t v84 = v92 + 1;
  if (v92 + 1 >= v99) {
    goto LABEL_141;
  }
  unint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93) {
    goto LABEL_140;
  }
  int64_t v84 = v92 + 2;
  if (v92 + 2 >= v99) {
    goto LABEL_141;
  }
  unint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93) {
    goto LABEL_140;
  }
  int64_t v84 = v92 + 3;
  if (v92 + 3 >= v99) {
    goto LABEL_141;
  }
  unint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93) {
    goto LABEL_140;
  }
  int64_t v84 = v92 + 4;
  if (v92 + 4 >= v99) {
    goto LABEL_141;
  }
  unint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93) {
    goto LABEL_140;
  }
  int64_t v84 = v92 + 5;
  if (v92 + 5 >= v99) {
    goto LABEL_141;
  }
  unint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93) {
    goto LABEL_140;
  }
  int64_t v84 = v92 + 6;
  if (v92 + 6 >= v99) {
    goto LABEL_141;
  }
  unint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93)
  {
LABEL_140:
    unint64_t v87 = (v93 - 1) & v93;
    unint64_t v89 = __clz(__rbit64(v93)) + (v84 << 6);
    goto LABEL_117;
  }
  int64_t v94 = v92 + 7;
  if (v94 >= v99) {
    goto LABEL_141;
  }
  unint64_t v93 = *(void *)&__srcb[8 * v94];
  if (v93)
  {
    int64_t v84 = v94;
    goto LABEL_140;
  }
  while (1)
  {
    int64_t v84 = v94 + 1;
    if (__OFADD__(v94, 1)) {
      break;
    }
    if (v84 >= v99) {
      goto LABEL_141;
    }
    unint64_t v93 = *(void *)&__srcb[8 * v84];
    ++v94;
    if (v93) {
      goto LABEL_140;
    }
  }
LABEL_151:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _TimeZoneGMTICU()
{
  return self;
}

uint64_t specialized static TimeZone.nameForSecondsFromGMT(_:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 64801) < 0xFFFFFFFFFFFE05BFLL) {
    return 0;
  }
  uint64_t v1 = 5524807;
  if (a1 >= 0) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = -a1;
  }
  unsigned __int16 v4 = (unsigned __int16)(v3 + 30) % 0xE10u;
  if (v3 > 0xDF1 || (unsigned __int16)(v3 + 30) % 0xE10u >= 0x3C)
  {
    if (v3 > 0x8C81)
    {
      uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v6 = v8;
    }
    else
    {
      v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      uint64_t v7 = 48;
      unint64_t v6 = (void *)0xE100000000000000;
    }
    if (v4 > 0x257u)
    {
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      id v10 = v12;
    }
    else
    {
      v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      uint64_t v11 = 48;
      id v10 = (void *)0xE100000000000000;
    }
    if (a1 >= 0) {
      uint64_t v13 = 43;
    }
    else {
      uint64_t v13 = 45;
    }
    unint64_t v14 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = v7;
    v15._unint64_t object = v6;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = v11;
    v16._unint64_t object = v10;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    return 5524807;
  }
  return v1;
}

id IndexSet.first.getter(SEL *a1)
{
  id result = [*(id *)(*(void *)v1 + 16) *a1];
  if (result == (id)0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for observationInfoSetter()
{
  uint64_t result = Selector.init(_:)();
  static NSKeyValueObservation.Helper.observationInfoSetter = result;
  return result;
}

uint64_t dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of JSONEncoder.dataEncodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

unint64_t CharacterSet.remove(_:)(UTF32Char a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(void *)uint64_t v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(*(void *)v1 + 16), a1);
  __CharacterSetStorage.insert(charactersIn:)(a1 | ((unint64_t)a1 << 32), MEMORY[0x1E4F1C208]);
  if (IsLongCharacterMember) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 | ((unint64_t)(IsLongCharacterMember == 0) << 32);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance CharacterSet(_DWORD *a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *id v2 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.insert(charactersIn:)(v4 | (v4 << 32), MEMORY[0x1E4F1C1F0]);
  *a1 = v4;
  return 1;
}

void __CharacterSetStorage.insert(charactersIn:)(unint64_t a1, void (*a2)(void))
{
  unsigned int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  Swift::String v5 = *(void **)(v2 + 16);
  if (*(unsigned char *)(v2 + 24))
  {
    int v6 = v4 - v3;
    if (v4 >= v3)
    {
      if (v6 != -1)
      {
        ((void (*)(void *, void, void))a2)(v5, v3, (v6 + 1));
        return;
      }
      goto LABEL_15;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  CFCharacterSetRef v7 = v5;
  CFMutableCharacterSetRef MutableCopy = CFCharacterSetCreateMutableCopy(0, v7);
  if (!MutableCopy)
  {
LABEL_17:
    __break(1u);
    return;
  }
  if (v4 < v3) {
    goto LABEL_14;
  }
  if (v4 - v3 == -1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  CFMutableCharacterSetRef v9 = MutableCopy;
  id v10 = MutableCopy;
  a2();

  uint64_t v11 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = v9;
  *(unsigned char *)(v2 + 24) = 1;
}

{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  void *v5;
  CFCharacterSetRef v6;
  CFMutableCharacterSetRef MutableCopy;
  CFMutableCharacterSetRef v8;
  __CFCharacterSet *v9;
  void *v10;
  uint64_t vars8;

  unsigned int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  Swift::String v5 = *(void **)(v2 + 16);
  if (*(unsigned char *)(v2 + 24))
  {
    if (v4 >= v3)
    {
      ((void (*)(void *, void, void))a2)(v5, v3, v4 - v3);
      return;
    }
    __break(1u);
    goto LABEL_12;
  }
  int v6 = v5;
  CFMutableCharacterSetRef MutableCopy = CFCharacterSetCreateMutableCopy(0, v6);
  if (!MutableCopy)
  {
LABEL_13:
    __break(1u);
    return;
  }
  if (v4 < v3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v8 = MutableCopy;
  CFMutableCharacterSetRef v9 = MutableCopy;
  a2();

  id v10 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = v8;
  *(unsigned char *)(v2 + 24) = 1;
}

uint64_t type metadata accessor for Duration.TimeFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle);
}

uint64_t base witness table accessor for Equatable in Measurement<A>()
{
  return swift_getWitnessTable();
}

uint64_t Locale.Region.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.LanguageCode.init(stringLiteral:)(a1, a2, MEMORY[0x1E4FBB100], a3);
}

Swift::Bool __swiftcall _NSSwiftCalendar.isDateInWeekend(_:)(Foundation::Date a1)
{
  double v3 = *v1;
  unint64_t v4 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____NSSwiftCalendar__lock);
  Swift::String v5 = v4 + 4;
  int v6 = v4 + 8;
  os_unfair_lock_lock(v4 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v5, &v14);
  os_unfair_lock_unlock(v6);
  uint64_t v7 = *((void *)&v14 + 1);
  double v8 = 1.59271755e13;
  if (v3 <= 1.59271755e13) {
    double v8 = v3;
  }
  double v9 = fmax(v8, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v13[0] = v9;
  char v11 = (*(uint64_t (**)(double *, uint64_t, uint64_t))(v7 + 168))(v13, ObjectType, v7);
  swift_unknownObjectRelease();
  return v11 & 1;
}

Swift::Bool __swiftcall _CalendarGregorian.isDateInWeekend(_:)(Foundation::Date a1)
{
  void (*v7)(unsigned char *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned char weekendRange[56];
  char v14;

  uint64_t v3 = *v1;
  long long v4 = xmmword_182107830;
  if (*(void *)(v2 + 88))
  {
    uint64_t v5 = *(void *)(v2 + 96);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(v5 + 336);
    swift_unknownObjectRetain();
    v7(&weekendRange[8], ObjectType, v5);
    swift_unknownObjectRelease();
    if (v14)
    {
      double v8 = 0;
      double v9 = 0;
      id v10 = 0;
      char v11 = 0x40F5180000000000;
      long long v4 = xmmword_182107830;
    }
    else
    {
      double v8 = *(void *)&weekendRange[8];
      char v11 = *(void *)&weekendRange[24];
      long long v4 = *(_OWORD *)&weekendRange[40];
      double v9 = weekendRange[16] & 1;
      id v10 = weekendRange[32] & 1;
    }
  }
  else
  {
    double v8 = 0;
    double v9 = 0;
    id v10 = 0;
    char v11 = 0x40F5180000000000;
  }
  *(void *)weekendRange = v3;
  *(void *)&weekendRange[8] = v8;
  weekendRange[16] = v9;
  *(void *)&weekendRange[24] = v11;
  weekendRange[32] = v10;
  *(_OWORD *)&weekendRange[40] = v4;
  return _CalendarGregorian.isDateInWeekend(_:weekendRange:)((Foundation::Date)v4, (Foundation::WeekendRange *)weekendRange);
}

Swift::Bool __swiftcall _CalendarGregorian.isDateInWeekend(_:weekendRange:)(Foundation::Date _, Foundation::WeekendRange *weekendRange)
{
  Swift::Double value = weekendRange->onsetTime.value;
  double v5 = *(double *)v2;
  char v6 = *(unsigned char *)(v2 + 8);
  double v7 = *(double *)(v2 + 16);
  char v8 = *(unsigned char *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  *(void *)&__dst[0] = 128;
  Swift::Double v36 = value;
  *(_OWORD *)__src = *(_OWORD *)(v3 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)__dst, &v36, __src, v37);
  swift_unknownObjectRelease();
  Swift::Bool result = outlined release of DateComponents((uint64_t)v37);
  if (v39) {
    goto LABEL_55;
  }
  if (v10 == v9 && v38 != v10) {
    return 0;
  }
  if (v10 >= v9 || (Swift::Bool result = 0, v38 >= v10) && v9 >= v38)
  {
    if (v9 < v10 && v9 < v38 && v38 < v10) {
      return 0;
    }
    if (v38 == v10)
    {
      if (v5 == 0.0) {
        char v12 = 1;
      }
      else {
        char v12 = v6;
      }
      if (v12) {
        return 1;
      }
      uint64_t v24 = unk_1ECA3B768;
      if ((unk_1ECA3B768 & ~qword_1ECA3B760) == 0) {
        uint64_t v24 = 0;
      }
      uint64_t v25 = qword_1ECA3B770;
      if ((qword_1ECA3B770 & ~(v24 | qword_1ECA3B760)) == 0) {
        uint64_t v25 = 0;
      }
      *(void *)&Swift::Double v36 = v25 | v24 | qword_1ECA3B760;
      Swift::Double v33 = value;
      __dst[0] = *(_OWORD *)(v3 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v36, &v33, (uint64_t *)__dst, __src);
      swift_unknownObjectRelease();
      Swift::Bool result = memcpy(__dst, __src, 0x11AuLL);
      if (BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9])) {
        goto LABEL_56;
      }
      uint64_t v26 = *(void *)&__dst[7];
      uint64_t v27 = *(void *)&__dst[8];
      uint64_t v28 = *(void *)&__dst[9];
      Swift::Bool result = outlined release of DateComponents((uint64_t)__dst);
      uint64_t v29 = 3600 * v26;
      if ((unsigned __int128)(v26 * (__int128)3600) >> 64 == (3600 * v26) >> 63)
      {
        uint64_t v30 = 60 * v27;
        if ((unsigned __int128)(v27 * (__int128)60) >> 64 == (60 * v27) >> 63)
        {
          BOOL v21 = __OFADD__(v29, v30);
          uint64_t v31 = v29 + v30;
          if (!v21)
          {
            BOOL v21 = __OFADD__(v31, v28);
            uint64_t v32 = v31 + v28;
            if (!v21) {
              return v5 <= (double)v32;
            }
            goto LABEL_54;
          }
          goto LABEL_52;
        }
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        return result;
      }
      goto LABEL_48;
    }
    if (v38 == v9) {
      char v13 = v8;
    }
    else {
      char v13 = 1;
    }
    Swift::Bool result = 1;
    if ((v13 & 1) == 0 && v7 < 86400.0)
    {
      uint64_t v14 = unk_1ECA3B768;
      if ((unk_1ECA3B768 & ~qword_1ECA3B760) == 0) {
        uint64_t v14 = 0;
      }
      uint64_t v15 = qword_1ECA3B770;
      if ((qword_1ECA3B770 & ~(v14 | qword_1ECA3B760)) == 0) {
        uint64_t v15 = 0;
      }
      *(void *)&Swift::Double v36 = v15 | v14 | qword_1ECA3B760;
      Swift::Double v33 = value;
      __dst[0] = *(_OWORD *)(v3 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v36, &v33, (uint64_t *)__dst, __src);
      swift_unknownObjectRelease();
      Swift::Bool result = memcpy(__dst, __src, 0x11AuLL);
      if (BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9])) {
        goto LABEL_57;
      }
      uint64_t v16 = *(void *)&__dst[7];
      uint64_t v17 = *(void *)&__dst[8];
      uint64_t v18 = *(void *)&__dst[9];
      Swift::Bool result = outlined release of DateComponents((uint64_t)__dst);
      uint64_t v19 = 3600 * v16;
      if ((unsigned __int128)(v16 * (__int128)3600) >> 64 == (3600 * v16) >> 63)
      {
        uint64_t v20 = 60 * v17;
        if ((unsigned __int128)(v17 * (__int128)60) >> 64 == (60 * v17) >> 63)
        {
          BOOL v21 = __OFADD__(v19, v20);
          uint64_t v22 = v19 + v20;
          if (!v21)
          {
            BOOL v21 = __OFADD__(v22, v18);
            uint64_t v23 = v22 + v18;
            if (!v21) {
              return v7 > (double)v23;
            }
            goto LABEL_53;
          }
          goto LABEL_50;
        }
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t _LocaleICU.weekendRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.firstDayOfWeek.getter((uint64_t)&v3[4], &v5);
  os_unfair_lock_unlock(v3 + 140);
  swift_release();
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.weekendRange.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t partial apply for closure #1 in _LocaleICU.weekendRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in _LocaleICU.weekendRange.getter(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t closure #1 in _LocaleICU.weekendRange.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = v3;
  if ((*(unsigned char *)(result + 265) & 1) == 0)
  {
    char v29 = *(unsigned char *)(result + 264);
    long long v30 = *(_OWORD *)(result + 232);
    *(_OWORD *)a3 = *(_OWORD *)(result + 216);
    *(_OWORD *)(a3 + 16) = v30;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 248);
    *(unsigned char *)(a3 + 48) = v29 & 1;
    return result;
  }
  LOBYTE(v6) = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0;
  uint64_t v45 = inited + 32;
  *(void *)(inited + 40) = 0;
  *(void *)(inited + 48) = 0;
  *(_DWORD *)(inited + 56) = 0;
  if (one-time initialization token for weekdays != -1) {
    goto LABEL_122;
  }
LABEL_3:
  char v8 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized Collection<>.firstIndex(of:)(v6, (uint64_t)v8);
  char v11 = v10;
  swift_bridgeObjectRelease();
  if (v11)
  {
    __break(1u);
LABEL_129:
    Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_124;
  }
  if ((v12 & 0x8000000000000000) != 0 || HIDWORD(v12)) {
    goto LABEL_129;
  }
  unsigned int v13 = v12 % 7;
  *(_DWORD *)(inited + 32) = v12;
  *(_DWORD *)(inited + 36) = v12 % 7 + 1;
  unsigned int v14 = v12 % 7 + 2;
  if (v13 == 6) {
    unsigned int v14 = 1;
  }
  unsigned int v15 = v14 % 7;
  *(_DWORD *)(inited + 40) = v14;
  *(_DWORD *)(inited + 44) = v14 % 7 + 1;
  unsigned int v16 = v14 % 7 + 2;
  if (v15 == 6) {
    unsigned int v16 = 1;
  }
  unsigned int v17 = v16 % 7;
  *(_DWORD *)(inited + 48) = v16;
  *(_DWORD *)(inited + 52) = v16 % 7 + 1;
  unsigned int v18 = v16 % 7 + 2;
  if (v17 == 6) {
    unsigned int v18 = 1;
  }
  *(_DWORD *)(inited + 56) = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UCalendarWeekdayType>);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_18210C670;
  *(void *)(v6 + 32) = 0;
  uint64_t v44 = (_DWORD *)(v6 + 32);
  *(void *)(v6 + 40) = 0;
  *(void *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 56) = 0;
  unsigned int v19 = String.utf8CString.getter();
  ucal_open();
  swift_release();
  if ((*(_DWORD *)(inited + 32) & 0x80000000) != 0)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    if (v22 != 5)
    {
      if (*(_DWORD *)(v6 + 52) == 1)
      {
LABEL_83:
        uint64_t v32 = 5;
        goto LABEL_87;
      }
      if (v22 != 6)
      {
        if (*(_DWORD *)(v6 + 56) != 1) {
          goto LABEL_98;
        }
LABEL_86:
        uint64_t v32 = 6;
LABEL_87:
        unsigned int v24 = *(_DWORD *)(v45 + 4 * v32);
        int v35 = 1;
        if ((v21 & 1) == 0)
        {
          int64x2_t v39 = (int64x2_t)*(unint64_t *)&v20;
          unsigned int v21 = 1;
          goto LABEL_118;
        }
        char v36 = 0;
        if (inited == 1) {
          goto LABEL_89;
        }
LABEL_100:
        if (v5 >= 7)
        {
LABEL_101:
          if (*(_DWORD *)(v6 + 56) == 1)
          {
            uint64_t v42 = 6;
            goto LABEL_115;
          }
          if (*(_DWORD *)(v6 + 52) == 1)
          {
            uint64_t v42 = 5;
            goto LABEL_115;
          }
          if (*(_DWORD *)(v6 + 48) == 1)
          {
LABEL_106:
            uint64_t v42 = 4;
            goto LABEL_115;
          }
          if (*(_DWORD *)(v6 + 44) == 1)
          {
LABEL_108:
            uint64_t v42 = 3;
            goto LABEL_115;
          }
          if (*(_DWORD *)(v6 + 40) == 1)
          {
LABEL_110:
            uint64_t v42 = 2;
            goto LABEL_115;
          }
          if (*(_DWORD *)(v6 + 36) == 1)
          {
LABEL_112:
            uint64_t v42 = 1;
            goto LABEL_115;
          }
          if (*v44 == 1)
          {
LABEL_114:
            uint64_t v42 = 0;
LABEL_115:
            if (v36) {
              goto LABEL_116;
            }
            unsigned int v19 = *(_DWORD *)(v45 + 4 * v42);
            int64x2_t v39 = vdupq_n_s64(1uLL);
            *(double *)v39.i64 = v20;
            unsigned int v21 = v35;
LABEL_118:
            *(double *)a3 = v4;
            *(void *)(a3 + 8) = v21;
            *(int64x2_t *)(a3 + 16) = v39;
            *(void *)(a3 + 32) = v24;
            *(void *)(a3 + 40) = v19;
            *(unsigned char *)(a3 + 48) = 0;
LABEL_119:
            ucal_close();
            swift_setDeallocating();
            return swift_setDeallocating();
          }
LABEL_116:
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          *(unsigned char *)(a3 + 48) = 1;
          goto LABEL_119;
        }
LABEL_124:
        __break(1u);
      }
    }
    goto LABEL_125;
  }
  unint64_t v23 = 0;
  unsigned int v24 = 0;
  unsigned int v19 = 0;
  char v25 = 1;
  uint64_t inited = v45;
  char v26 = 1;
  while (1)
  {
    int DayOfWeekType = ucal_getDayOfWeekType();
    unint64_t v5 = *(void *)(v6 + 16);
    if (v23 >= v5) {
      goto LABEL_80;
    }
    *(void *)&double v20 = v6 + 4 * v23;
    *(_DWORD *)(*(void *)&v20 + 32) = DayOfWeekType;
    if (DayOfWeekType == 3)
    {
      char v26 = 0;
      unsigned int v19 = *(_DWORD *)inited;
      goto LABEL_16;
    }
    if (DayOfWeekType == 2) {
      break;
    }
LABEL_16:
    if (v23 == 6)
    {
      uint64_t inited = *v44;
      if (inited == 1)
      {
        char v31 = 1;
        if (v25) {
          goto LABEL_34;
        }
        goto LABEL_49;
      }
      if (inited == 3 || inited == 2)
      {
LABEL_27:
        char v31 = 0;
        if ((v25 & 1) == 0) {
          goto LABEL_49;
        }
LABEL_34:
        unsigned int v21 = 1;
        double v4 = 0.0;
        if (v26)
        {
          double v20 = 0.0;
          if ((v31 & 1) == 0) {
            goto LABEL_36;
          }
LABEL_55:
          if (v5 >= 7)
          {
            if (*(_DWORD *)(v6 + 56) != 1)
            {
              uint64_t v32 = 0;
              goto LABEL_87;
            }
            if (*(_DWORD *)(v6 + 52) != 1) {
              goto LABEL_86;
            }
            if (*(_DWORD *)(v6 + 48) != 1) {
              goto LABEL_83;
            }
            if (*(_DWORD *)(v6 + 44) == 1)
            {
              if (*(_DWORD *)(v6 + 40) == 1)
              {
                if (*(_DWORD *)(v6 + 36) == 1)
                {
                  if (*v44 == 1)
                  {
LABEL_98:
                    if (!v21) {
                      goto LABEL_116;
                    }
                    unsigned int v24 = 0;
                    int v35 = 1;
                    char v36 = 1;
                    if (inited != 1) {
                      goto LABEL_100;
                    }
                    goto LABEL_89;
                  }
LABEL_41:
                  uint64_t v32 = 1;
                  goto LABEL_87;
                }
LABEL_47:
                uint64_t v32 = 2;
                goto LABEL_87;
              }
LABEL_75:
              uint64_t v32 = 3;
              goto LABEL_87;
            }
LABEL_78:
            uint64_t v32 = 4;
            goto LABEL_87;
          }
LABEL_127:
          __break(1u);
          __break(1u);
        }
        int v33 = inited;
LABEL_53:
        unsigned int v37 = v21;
        int WeekendTransition = ucal_getWeekendTransition();
        unsigned int v21 = 0;
        if (!v37)
        {
          v39.i64[1] = 0;
          *(double *)v39.i64 = (double)WeekendTransition / 1000.0;
          goto LABEL_118;
        }
        double v20 = (double)WeekendTransition / 1000.0;
        LODWORD(inited) = v33;
        if (v31) {
          goto LABEL_55;
        }
LABEL_36:
        if (v5 <= 1) {
          uint64_t v22 = 1;
        }
        else {
          uint64_t v22 = v5;
        }
        if (v5 >= 2)
        {
          if (*(_DWORD *)(v6 + 36) == 1) {
            goto LABEL_41;
          }
          if (v22 != 2)
          {
            if (*(_DWORD *)(v6 + 40) == 1) {
              goto LABEL_47;
            }
            if (v22 != 3)
            {
              if (*(_DWORD *)(v6 + 44) == 1) {
                goto LABEL_75;
              }
              if (v22 != 4)
              {
                if (*(_DWORD *)(v6 + 48) != 1) {
                  goto LABEL_81;
                }
                goto LABEL_78;
              }
            }
          }
        }
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }
      if (v5 == 1) {
        goto LABEL_72;
      }
LABEL_68:
      uint64_t v40 = 9;
      while (1)
      {
        uint64_t v41 = v40 - 7;
        if (__OFADD__(v40 - 8, 1)) {
          break;
        }
        if ((*(_DWORD *)(v6 + 4 * v40) - 1) < 3) {
          goto LABEL_27;
        }
        ++v40;
        if (v41 == v5) {
          goto LABEL_72;
        }
      }
      __break(1u);
LABEL_122:
      swift_once();
      goto LABEL_3;
    }
LABEL_17:
    int v27 = *(_DWORD *)(inited + 4);
    inited += 4;
    ++v23;
    if (v27 < 0) {
      goto LABEL_79;
    }
  }
  unsigned int v24 = *(_DWORD *)inited;
  if (v23 != 6)
  {
    char v25 = 0;
    goto LABEL_17;
  }
  uint64_t inited = *v44;
  if (inited == 1)
  {
    char v31 = 1;
LABEL_49:
    int v34 = ucal_getWeekendTransition();
    int v35 = 0;
    double v4 = (double)v34 / 1000.0;
    if ((v26 & 1) == 0)
    {
      int v33 = inited;
      unsigned int v21 = 0;
      goto LABEL_53;
    }
    double v20 = 0.0;
    char v36 = 0;
    if (inited != 1) {
      goto LABEL_100;
    }
LABEL_89:
    if (v5 >= 7)
    {
      if (*(_DWORD *)(v6 + 56) != 1) {
        goto LABEL_101;
      }
      if (*(_DWORD *)(v6 + 36) != 1) {
        goto LABEL_114;
      }
      if (*(_DWORD *)(v6 + 40) != 1) {
        goto LABEL_112;
      }
      if (*(_DWORD *)(v6 + 44) != 1) {
        goto LABEL_110;
      }
      if (*(_DWORD *)(v6 + 48) != 1) {
        goto LABEL_108;
      }
      if (*(_DWORD *)(v6 + 52) != 1) {
        goto LABEL_106;
      }
      goto LABEL_116;
    }
    goto LABEL_126;
  }
  if (inited == 2 || inited == 3)
  {
    char v31 = 0;
    goto LABEL_49;
  }
  if (v5 != 1)
  {
    char v25 = 0;
    goto LABEL_68;
  }
LABEL_72:
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(unsigned char *)(a3 + 48) = 1;
  ucal_close();
  swift_setDeallocating();
  return swift_setDeallocating();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _PlistKeyedEncodingContainerXML.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

uint64_t one-time initialization function for patternCache(uint64_t a1)
{
  return one-time initialization function for patternCache(a1, &demangling cache variable for type metadata for LockedState<[ICUDateFormatter.PatternCacheKey : String]>._Buffer, &static ICUDateFormatter.patternCache);
}

Swift::Void __swiftcall _NSSwiftLocale.encode(with:)(NSCoder with)
{
  if (![(objc_class *)with.super.isa allowsKeyedCoding])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 40) = v8;
    *(void *)(inited + 48) = 0xD000000000000026;
    *(void *)(inited + 56) = 0x80000001823B1590;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)v27);
    uint64_t v10 = v27[0];
    uint64_t v11 = v27[1];
    swift_retain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
    if (v13)
    {
      __break(1u);
    }
    else
    {
      v9[(v12 >> 6) + 8] |= 1 << v12;
      unsigned int v14 = (uint64_t *)(v9[6] + 16 * v12);
      *unsigned int v14 = v10;
      v14[1] = v11;
      outlined init with take of Any(&v28, (_OWORD *)(v9[7] + 32 * v12));
      uint64_t v15 = v9[2];
      BOOL v16 = __OFADD__(v15, 1);
      uint64_t v17 = v15 + 1;
      if (!v16)
      {
        v9[2] = v17;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v18 = objc_allocWithZone((Class)NSError);
        uint64_t v19 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, 4864, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v21 = objc_msgSend(v20, sel_domain);
        id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        uint64_t v24 = v23;

        if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v24 == v25)
        {
          swift_bridgeObjectRelease_n();
LABEL_11:
          [(objc_class *)with.super.isa failWithError:_swift_stdlib_bridgeErrorToNSError()];
          swift_unknownObjectRelease();
          return;
        }
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v26) {
          goto LABEL_11;
        }
LABEL_14:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSSwiftLocale_locale + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 64);
  swift_unknownObjectRetain();
  v5(ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  [(objc_class *)with.super.isa encodeObject:v6 forKey:String._bridgeToObjectiveCImpl()()];
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
}

uint64_t Date.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  return (*(uint64_t (**)(uint64_t *))(a3 + 48))(&v5);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.ISO8601FormatStyle@<X0>(Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  Swift::String v4 = Date.ISO8601FormatStyle.format(_:)(a2);
  uint64_t result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

Swift::String __swiftcall Date.ISO8601FormatStyle.format(_:)(Foundation::Date a1)
{
  v38[36] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v1;
  long long v4 = v2[1];
  long long v36 = *v2;
  *(_OWORD *)unsigned int v37 = v4;
  *(void *)&v37[16] = *((void *)v2 + 4);
  int v5 = DWORD2(v36);
  if (*((void *)&v36 + 1))
  {
    if ((BYTE8(v36) & 5) != 1)
    {
      uint64_t v6 = 0;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v6 = 0;
  uint64_t v7 = unk_1ECA480B8;
  if ((unk_1ECA480B8 & ~qword_1ECA480B0) == 0) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v7 | qword_1ECA480B0;
  uint64_t v9 = qword_1ECA480C0;
  if ((qword_1ECA480C0 & ~v8) == 0) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v9 | v8;
  if ((unk_1ECA480C8 & ~v10) != 0) {
    uint64_t v11 = unk_1ECA480C8;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v11 | v10;
  uint64_t v13 = qword_1ECA480D0;
  if ((qword_1ECA480D0 & ~v12) == 0) {
    uint64_t v13 = 0;
  }
  int v5 = v13 | v12;
  if (((v13 | v12) & 5) == 1) {
LABEL_14:
  }
    uint64_t v6 = 3;
LABEL_15:
  unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (((unint64_t)(v5 & 2) >> 1) & 1));
  if ((v5 & 4) == 0)
  {
    if ((v5 & 2) != 0) {
      uint64_t v15 = v14 | 8;
    }
    else {
      uint64_t v15 = v14 | 0x40000;
    }
    if ((v5 & 8) != 0) {
      unint64_t v14 = v15;
    }
    if ((v5 & 0x10) == 0) {
      goto LABEL_36;
    }
LABEL_28:
    uint64_t v18 = unk_1ECA48080;
    if ((unk_1ECA48080 & ~qword_1ECA48078) == 0) {
      uint64_t v18 = 0;
    }
    uint64_t v19 = qword_1ECA48088;
    if ((qword_1ECA48088 & ~(v18 | qword_1ECA48078)) == 0) {
      uint64_t v19 = 0;
    }
    uint64_t v20 = v19 | v18 | qword_1ECA48078;
    if ((v20 & ~v14) == 0) {
      uint64_t v20 = 0;
    }
    v14 |= v20;
    if ((BYTE1(v36) & ((v14 & 0x2000) == 0)) != 0) {
      v14 |= 0x2000uLL;
    }
    goto LABEL_36;
  }
  uint64_t v16 = unk_1ECA48050;
  if ((unk_1ECA48050 & ~qword_1ECA48048) == 0) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = v16 | qword_1ECA48048;
  if ((v17 & ~v14) == 0) {
    uint64_t v17 = 0;
  }
  v14 |= (16 * v5) & 0x80 | v17;
  if ((v5 & 0x10) != 0) {
    goto LABEL_28;
  }
LABEL_36:
  v33[0] = v14;
  uint64_t v34 = v3;
  long long v35 = *(_OWORD *)(*(void *)v37 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(v33, (double *)&v34, (uint64_t *)&v35, v38);
  uint64_t v21 = swift_unknownObjectRelease();
  if ((v5 & 0x20) != 0)
  {
    long long v35 = *(_OWORD *)&v37[8];
    uint64_t v23 = *(void *)&v37[16];
    uint64_t ObjectType = swift_getObjectType();
    v33[0] = v3;
    uint64_t v25 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v23 + 40);
    outlined retain of Locale((uint64_t)&v35);
    uint64_t v22 = v25(v33, ObjectType, v23);
    uint64_t v21 = outlined release of Locale((uint64_t)&v35);
  }
  else
  {
    uint64_t v22 = 0;
  }
  LOBYTE(v34) = 0;
  MEMORY[0x1F4188790](v21);
  closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((uint64_t)&v32, 129, (uint64_t)&v36, (uint64_t)v38, &v34, v22, v26, v33);
  uint64_t v27 = v33[0];
  uint64_t v28 = v33[1];
  outlined release of DateComponents((uint64_t)v38);
  uint64_t v29 = v27;
  long long v30 = (void *)v28;
  result._unint64_t object = v30;
  result._uint64_t countAndFlagsBits = v29;
  return result;
}

uint64_t closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v165 = a4;
  if (!result) {
    goto LABEL_229;
  }
  uint64_t v10 = (unsigned char *)a3;
  uint64_t v12 = (unsigned char *)result;
  uint64_t v132 = result;
  uint64_t v133 = a2;
  uint64_t v134 = 0;
  uint64_t v14 = *(void *)(a3 + 8);
  if (v14)
  {
    uint64_t v15 = *(void *)(a3 + 8);
    if ((v14 & 1) == 0) {
      goto LABEL_48;
    }
    if ((v14 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t v16 = unk_1ECA48008;
  if ((unk_1ECA48008 & ~qword_1ECA48000) == 0) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = v16 | qword_1ECA48000;
  uint64_t v18 = qword_1ECA48010;
  if ((qword_1ECA48010 & ~v17) == 0) {
    uint64_t v18 = 0;
  }
  uint64_t v19 = v18 | v17;
  if ((unk_1ECA48018 & ~v19) != 0) {
    uint64_t v20 = unk_1ECA48018;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = v20 | v19;
  int v22 = qword_1ECA48020;
  if ((qword_1ECA48020 & ~v21) == 0) {
    int v22 = 0;
  }
  if ((v22 | v21))
  {
    uint64_t v23 = unk_1ECA47DC8;
    if ((unk_1ECA47DC8 & ~qword_1ECA47DC0) == 0) {
      uint64_t v23 = 0;
    }
    uint64_t v24 = v23 | qword_1ECA47DC0;
    uint64_t v25 = qword_1ECA47DD0;
    if ((qword_1ECA47DD0 & ~v24) == 0) {
      uint64_t v25 = 0;
    }
    uint64_t v26 = v25 | v24;
    if ((unk_1ECA47DD8 & ~v26) != 0) {
      uint64_t v27 = unk_1ECA47DD8;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = v27 | v26;
    int v29 = qword_1ECA47DE0;
    if ((qword_1ECA47DE0 & ~v28) == 0) {
      int v29 = 0;
    }
    if (((v29 | v28) & 4) == 0) {
      goto LABEL_27;
    }
LABEL_26:
    outlined init with take of Int?(v165 + 272, (uint64_t)v144);
    outlined init with take of Int?((uint64_t)v144, (uint64_t)&v145);
    if ((v146 & 1) == 0)
    {
      unint64_t v33 = v145;
      goto LABEL_37;
    }
LABEL_27:
    uint64_t v30 = a6;
    char v31 = a7;
    uint64_t v32 = v165;
    outlined init with take of Int?(v165 + 48, (uint64_t)v143);
    Swift::String result = outlined init with take of Int?((uint64_t)v143, (uint64_t)&v147);
    if (v148)
    {
LABEL_236:
      __break(1u);
      goto LABEL_237;
    }
    unint64_t v33 = v147;
    outlined init with take of Int?(v32 + 32, (uint64_t)v142);
    Swift::String result = outlined init with take of Int?((uint64_t)v142, (uint64_t)&v149);
    if (v150)
    {
      a7 = v31;
      a6 = v30;
      if ((v33 & 0x8000000000000000) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      a7 = v31;
      a6 = v30;
      if (!v149)
      {
        BOOL v34 = __OFSUB__(1, v33);
        unint64_t v33 = 1 - v33;
        if (v34) {
          goto LABEL_217;
        }
      }
      if ((v33 & 0x8000000000000000) == 0)
      {
LABEL_37:
        Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v33, 4, &v132, 48);
        *a5 = 1;
        LOBYTE(v15) = v14;
        if (v14) {
          goto LABEL_48;
        }
        goto LABEL_38;
      }
    }
    if (a2 < 1)
    {
LABEL_221:
      __break(1u);
      goto LABEL_222;
    }
    *uint64_t v12 = 45;
    uint64_t v134 = 1;
    BOOL v34 = __OFSUB__(0, v33);
    unint64_t v33 = -(uint64_t)v33;
    if (v34)
    {
LABEL_222:
      __break(1u);
      goto LABEL_223;
    }
    goto LABEL_37;
  }
LABEL_38:
  uint64_t v35 = unk_1ECA47E10;
  if ((unk_1ECA47E10 & ~qword_1ECA47E08) == 0) {
    uint64_t v35 = 0;
  }
  uint64_t v36 = v35 | qword_1ECA47E08;
  uint64_t v37 = qword_1ECA47E18;
  if ((qword_1ECA47E18 & ~v36) == 0) {
    uint64_t v37 = 0;
  }
  uint64_t v38 = v37 | v36;
  if ((unk_1ECA47E20 & ~v38) != 0) {
    uint64_t v39 = unk_1ECA47E20;
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v40 = v39 | v38;
  char v41 = qword_1ECA47E28;
  if ((qword_1ECA47E28 & ~v40) == 0) {
    char v41 = 0;
  }
  LOBYTE(v15) = v41 | v40;
LABEL_48:
  uint64_t v42 = v165;
  if ((v15 & 2) == 0) {
    goto LABEL_58;
  }
  if (*a5 == 1)
  {
    if (v10[3])
    {
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::String result = swift_bridgeObjectRelease();
      if ((v43 & 1) == 0) {
        goto LABEL_56;
      }
    }
    else
    {
      Swift::String result = swift_bridgeObjectRelease();
    }
    uint64_t v44 = v134;
    if (v134 >= v133)
    {
LABEL_218:
      __break(1u);
      goto LABEL_219;
    }
    *(unsigned char *)(v132 + v134) = 45;
    uint64_t v134 = v44 + 1;
  }
LABEL_56:
  outlined init with take of Int?(v42 + 64, (uint64_t)v141);
  Swift::String result = outlined init with take of Int?((uint64_t)v141, (uint64_t)&v151);
  if (v152)
  {
LABEL_231:
    __break(1u);
    goto LABEL_232;
  }
  Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v151, 2, &v132, 48);
  *a5 = 1;
LABEL_58:
  if (v14)
  {
    if ((v14 & 4) == 0) {
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v47 = unk_1ECA47E58;
    if ((unk_1ECA47E58 & ~qword_1ECA47E50) == 0) {
      uint64_t v47 = 0;
    }
    uint64_t v48 = v47 | qword_1ECA47E50;
    uint64_t v49 = qword_1ECA47E60;
    if ((qword_1ECA47E60 & ~v48) == 0) {
      uint64_t v49 = 0;
    }
    uint64_t v50 = v49 | v48;
    if ((unk_1ECA47E68 & ~v50) != 0) {
      uint64_t v51 = unk_1ECA47E68;
    }
    else {
      uint64_t v51 = 0;
    }
    uint64_t v52 = v51 | v50;
    int v53 = qword_1ECA47E70;
    if ((qword_1ECA47E70 & ~v52) == 0) {
      int v53 = 0;
    }
    if (((v53 | v52) & 4) == 0)
    {
LABEL_60:
      char v45 = v14;
      if (v14) {
        goto LABEL_61;
      }
      goto LABEL_87;
    }
  }
  if (*a5 == 1)
  {
    if (v10[3])
    {
      char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::String result = swift_bridgeObjectRelease();
      if ((v54 & 1) == 0) {
        goto LABEL_84;
      }
    }
    else
    {
      Swift::String result = swift_bridgeObjectRelease();
    }
    uint64_t v55 = v134;
    if (v134 >= v133)
    {
LABEL_219:
      __break(1u);
      goto LABEL_220;
    }
    *(unsigned char *)(v132 + v134) = 45;
    uint64_t v134 = v55 + 1;
  }
LABEL_84:
  outlined init with take of Int?(v42 + 256, (uint64_t)v140);
  Swift::String result = outlined init with take of Int?((uint64_t)v140, (uint64_t)&v153);
  if (v154)
  {
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }
  uint64_t v56 = v134;
  if (v134 >= v133)
  {
LABEL_208:
    __break(1u);
    goto LABEL_209;
  }
  unint64_t v57 = v153;
  *(unsigned char *)(v132 + v134) = 87;
  uint64_t v134 = v56 + 1;
  Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v57, 2, &v132, 48);
  *a5 = 1;
  char v45 = v14;
  if (v14)
  {
LABEL_61:
    if ((v45 & 8) == 0) {
      goto LABEL_62;
    }
    goto LABEL_97;
  }
LABEL_87:
  uint64_t v58 = unk_1ECA47EA0;
  if ((unk_1ECA47EA0 & ~qword_1ECA47E98) == 0) {
    uint64_t v58 = 0;
  }
  uint64_t v59 = v58 | qword_1ECA47E98;
  uint64_t v60 = qword_1ECA47EA8;
  if ((qword_1ECA47EA8 & ~v59) == 0) {
    uint64_t v60 = 0;
  }
  uint64_t v61 = v60 | v59;
  if ((unk_1ECA47EB0 & ~v61) != 0) {
    uint64_t v62 = unk_1ECA47EB0;
  }
  else {
    uint64_t v62 = 0;
  }
  uint64_t v63 = v62 | v61;
  int v64 = qword_1ECA47EB8;
  if ((qword_1ECA47EB8 & ~v63) == 0) {
    int v64 = 0;
  }
  if (((v64 | v63) & 8) == 0)
  {
LABEL_62:
    char v46 = v14;
    if (v14) {
      goto LABEL_63;
    }
    goto LABEL_137;
  }
LABEL_97:
  if (*a5 != 1) {
    goto LABEL_104;
  }
  if (v10[3])
  {
    char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    Swift::String result = swift_bridgeObjectRelease();
    if ((v65 & 1) == 0) {
      goto LABEL_104;
    }
  }
  else
  {
    Swift::String result = swift_bridgeObjectRelease();
  }
  uint64_t v66 = v134;
  if (v134 >= v133)
  {
LABEL_220:
    __break(1u);
    goto LABEL_221;
  }
  *(unsigned char *)(v132 + v134) = 45;
  uint64_t v134 = v66 + 1;
LABEL_104:
  if (!v14)
  {
    uint64_t v68 = unk_1ECA47EE8;
    if ((unk_1ECA47EE8 & ~qword_1ECA47EE0) == 0) {
      uint64_t v68 = 0;
    }
    uint64_t v69 = v68 | qword_1ECA47EE0;
    uint64_t v70 = qword_1ECA47EF0;
    if ((qword_1ECA47EF0 & ~v69) == 0) {
      uint64_t v70 = 0;
    }
    uint64_t v71 = v70 | v69;
    if ((unk_1ECA47EF8 & ~v71) != 0) {
      uint64_t v72 = unk_1ECA47EF8;
    }
    else {
      uint64_t v72 = 0;
    }
    uint64_t v73 = v72 | v71;
    int v74 = qword_1ECA47F00;
    if ((qword_1ECA47F00 & ~v73) == 0) {
      int v74 = 0;
    }
    if (((v74 | v73) & 4) == 0)
    {
      uint64_t v75 = unk_1ECA47F30;
      if ((unk_1ECA47F30 & ~qword_1ECA47F28) == 0) {
        uint64_t v75 = 0;
      }
      uint64_t v76 = v75 | qword_1ECA47F28;
      uint64_t v77 = qword_1ECA47F38;
      if ((qword_1ECA47F38 & ~v76) == 0) {
        uint64_t v77 = 0;
      }
      uint64_t v78 = v77 | v76;
      if ((unk_1ECA47F40 & ~v78) != 0) {
        uint64_t v79 = unk_1ECA47F40;
      }
      else {
        uint64_t v79 = 0;
      }
      uint64_t v80 = v79 | v78;
      int v81 = qword_1ECA47F48;
      if ((qword_1ECA47F48 & ~v80) == 0) {
        int v81 = 0;
      }
      if (((v81 | v80) & 2) == 0) {
        goto LABEL_107;
      }
      goto LABEL_129;
    }
LABEL_131:
    outlined init with take of Int?(v42 + 176, (uint64_t)v139);
    Swift::String result = outlined init with take of Int?((uint64_t)v139, (uint64_t)&v155);
    if (v156)
    {
LABEL_237:
      __break(1u);
      goto LABEL_238;
    }
    uint64_t v82 = v155;
    if (v155 >= 10) {
      uint64_t v82 = 10;
    }
    Swift::String result = v82 - 1;
    if (__OFSUB__(v82, 1)) {
      goto LABEL_210;
    }
    goto LABEL_135;
  }
  if ((v14 & 4) != 0) {
    goto LABEL_131;
  }
  if ((v14 & 2) == 0)
  {
LABEL_107:
    outlined init with take of Int?(v42 + 96, (uint64_t)v139);
    Swift::String result = outlined init with take of Int?((uint64_t)v139, (uint64_t)&v155);
    if (v156)
    {
LABEL_239:
      __break(1u);
      goto LABEL_240;
    }
    Swift::String result = v155;
    uint64_t v67 = 3;
LABEL_136:
    Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(result, v67, &v132, 48);
    *a5 = 1;
    char v46 = v14;
    if (v14)
    {
LABEL_63:
      if ((v46 & 0x10) == 0) {
        goto LABEL_64;
      }
      goto LABEL_147;
    }
LABEL_137:
    uint64_t v83 = unk_1ECA47F78;
    if ((unk_1ECA47F78 & ~qword_1ECA47F70) == 0) {
      uint64_t v83 = 0;
    }
    uint64_t v84 = v83 | qword_1ECA47F70;
    uint64_t v85 = qword_1ECA47F80;
    if ((qword_1ECA47F80 & ~v84) == 0) {
      uint64_t v85 = 0;
    }
    uint64_t v86 = v85 | v84;
    if ((unk_1ECA47F88 & ~v86) != 0) {
      uint64_t v87 = unk_1ECA47F88;
    }
    else {
      uint64_t v87 = 0;
    }
    uint64_t v88 = v87 | v86;
    int v89 = qword_1ECA47F90;
    if ((qword_1ECA47F90 & ~v88) == 0) {
      int v89 = 0;
    }
    if (((v89 | v88) & 0x10) == 0)
    {
LABEL_64:
      if (v14) {
        goto LABEL_65;
      }
      goto LABEL_170;
    }
LABEL_147:
    if (*a5 == 1)
    {
      uint64_t v90 = v134;
      if (v10[4])
      {
        if (v134 >= v133)
        {
LABEL_223:
          __break(1u);
          goto LABEL_224;
        }
        char v91 = 84;
      }
      else
      {
        if (v134 >= v133)
        {
LABEL_224:
          __break(1u);
          goto LABEL_225;
        }
        char v91 = 32;
      }
      *(unsigned char *)(v132 + v134) = v91;
      uint64_t v134 = v90 + 1;
    }
    outlined init with take of Int?(v42 + 112, (uint64_t)v138);
    Swift::String result = outlined init with take of Int?((uint64_t)v138, (uint64_t)&v157);
    if (v158)
    {
LABEL_233:
      __break(1u);
      goto LABEL_234;
    }
    uint64_t v92 = v42;
    unint64_t v93 = v157;
    outlined init with take of Int?(v92 + 128, (uint64_t)v137);
    Swift::String result = outlined init with take of Int?((uint64_t)v137, (uint64_t)&v159);
    if (v160)
    {
LABEL_234:
      __break(1u);
      goto LABEL_235;
    }
    unint64_t v94 = v159;
    outlined init with take of Int?(v92 + 144, (uint64_t)v136);
    Swift::String result = outlined init with take of Int?((uint64_t)v136, (uint64_t)&v161);
    if (v162)
    {
LABEL_235:
      __break(1u);
      goto LABEL_236;
    }
    unint64_t v95 = v161;
    char v96 = *v10;
    Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v93, 2, &v132, 48);
    if (v96)
    {
      char v97 = a7;
      append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v94, 2, &v132, 48);
    }
    else
    {
      char v98 = a7;
      uint64_t v99 = a6;
      uint64_t v100 = v10;
      uint64_t v102 = v133;
      uint64_t v101 = v134;
      if (v134 >= v133)
      {
LABEL_211:
        __break(1u);
        goto LABEL_212;
      }
      uint64_t v103 = v132;
      *(unsigned char *)(v132 + v134) = 58;
      uint64_t v134 = v101 + 1;
      Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v94, 2, &v132, 48);
      uint64_t v104 = v134;
      if (v134 >= v102)
      {
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
        goto LABEL_214;
      }
      *(unsigned char *)(v103 + v134) = 58;
      uint64_t v134 = v104 + 1;
      uint64_t v10 = v100;
      a6 = v99;
      char v97 = v98;
    }
    uint64_t v105 = v165;
    Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v95, 2, &v132, 48);
    if (v10[1])
    {
      outlined init with take of Int?(v105 + 160, (uint64_t)v135);
      Swift::String result = outlined init with take of Int?((uint64_t)v135, (uint64_t)&v163);
      if (v164)
      {
LABEL_238:
        __break(1u);
        goto LABEL_239;
      }
      double v106 = trunc((double)v163 / 1000000.0);
      if ((~*(void *)&v106 & 0x7FF0000000000000) == 0) {
        goto LABEL_213;
      }
      if (v106 <= -9.22337204e18)
      {
LABEL_214:
        __break(1u);
        goto LABEL_215;
      }
      if (v106 >= 9.22337204e18)
      {
LABEL_215:
        __break(1u);
        goto LABEL_216;
      }
      uint64_t v107 = v134;
      if (v134 >= v133)
      {
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
        goto LABEL_218;
      }
      *(unsigned char *)(v132 + v134) = 46;
      uint64_t v134 = v107 + 1;
      Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((uint64_t)v106, 3, &v132, 48);
    }
    *a5 = 1;
    a7 = v97;
    if (v14)
    {
LABEL_65:
      if ((v14 & 0x20) == 0) {
        goto LABEL_188;
      }
LABEL_180:
      if ((a7 & 1) != 0 || !a6 || (unint64_t)(a6 - 64800) <= 0xFFFFFFFFFFFE05C0)
      {
        uint64_t v120 = v134;
        if (v134 >= v133)
        {
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
          goto LABEL_211;
        }
        *(unsigned char *)(v132 + v134) = 90;
        uint64_t v134 = v120 + 1;
        goto LABEL_188;
      }
      uint64_t v116 = v133;
      uint64_t v115 = v134;
      uint64_t v117 = a6;
      if (a6 < 0)
      {
        if (v134 >= v133)
        {
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
          goto LABEL_231;
        }
        uint64_t v118 = v10;
        uint64_t v117 = -v117;
        char v119 = 45;
      }
      else
      {
        if (v134 >= v133)
        {
LABEL_226:
          __break(1u);
          goto LABEL_227;
        }
        uint64_t v118 = v10;
        char v119 = 43;
      }
      uint64_t v122 = a8;
      uint64_t v123 = v132;
      *(unsigned char *)(v132 + v134) = v119;
      unint64_t v124 = (unsigned __int16)v117 % 0xE10u / 0x3C;
      unint64_t v125 = (unsigned __int16)v117 % 0xE10u % 0x3C;
      uint64_t v134 = v115 + 1;
      append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((unsigned __int16)v117 / 0xE10u, 2, &v132, 48);
      char v126 = v118[2];
      if (v126)
      {
        char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
        Swift::String result = swift_bridgeObjectRelease();
        if ((v127 & 1) == 0)
        {
          Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v124, 2, &v132, 48);
          a8 = v122;
          if (!v125) {
            goto LABEL_188;
          }
          goto LABEL_201;
        }
      }
      else
      {
        Swift::String result = swift_bridgeObjectRelease();
      }
      uint64_t v128 = v134;
      if (v134 >= v116)
      {
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }
      *(unsigned char *)(v123 + v134) = 58;
      uint64_t v134 = v128 + 1;
      Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v124, 2, &v132, 48);
      a8 = v122;
      if (!v125) {
        goto LABEL_188;
      }
      if ((v126 & 1) == 0)
      {
        Swift::String result = swift_bridgeObjectRelease();
        goto LABEL_204;
      }
LABEL_201:
      char v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::String result = swift_bridgeObjectRelease();
      if ((v129 & 1) == 0)
      {
LABEL_206:
        Swift::String result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v125, 2, &v132, 48);
        a8 = v122;
LABEL_188:
        if (v134 < v133)
        {
          *(unsigned char *)(v132 + v134) = 0;
          Swift::String result = MEMORY[0x185301F80]();
          if (v121)
          {
            *a8 = result;
            a8[1] = v121;
            return result;
          }
          goto LABEL_230;
        }
        __break(1u);
        goto LABEL_208;
      }
LABEL_204:
      uint64_t v130 = v134;
      if (v134 >= v116)
      {
LABEL_227:
        __break(1u);
        goto LABEL_228;
      }
      *(unsigned char *)(v123 + v134) = 58;
      uint64_t v134 = v130 + 1;
      goto LABEL_206;
    }
LABEL_170:
    uint64_t v108 = unk_1ECA47FC0;
    if ((unk_1ECA47FC0 & ~qword_1ECA47FB8) == 0) {
      uint64_t v108 = 0;
    }
    uint64_t v109 = v108 | qword_1ECA47FB8;
    uint64_t v110 = qword_1ECA47FC8;
    if ((qword_1ECA47FC8 & ~v109) == 0) {
      uint64_t v110 = 0;
    }
    uint64_t v111 = v110 | v109;
    if ((unk_1ECA47FD0 & ~v111) != 0) {
      uint64_t v112 = unk_1ECA47FD0;
    }
    else {
      uint64_t v112 = 0;
    }
    uint64_t v113 = v112 | v111;
    int v114 = qword_1ECA47FD8;
    if ((qword_1ECA47FD8 & ~v113) == 0) {
      int v114 = 0;
    }
    if (((v114 | v113) & 0x20) == 0) {
      goto LABEL_188;
    }
    goto LABEL_180;
  }
LABEL_129:
  outlined init with take of Int?(v42 + 80, (uint64_t)v139);
  Swift::String result = outlined init with take of Int?((uint64_t)v139, (uint64_t)&v155);
  if ((v156 & 1) == 0)
  {
    Swift::String result = v155;
LABEL_135:
    uint64_t v67 = 2;
    goto LABEL_136;
  }
LABEL_240:
  __break(1u);
  return result;
}

uint64_t outlined init with take of Int?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(unint64_t result, uint64_t a2, void *a3, char a4)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if ((uint64_t)result <= 9)
  {
    if (!__OFSUB__(a2, 1))
    {
      if (a2 - 1 < 1) {
        goto LABEL_39;
      }
      uint64_t v5 = a3[2];
      uint64_t v6 = *a3;
      if (v5 <= a3[1]) {
        uint64_t v7 = a3[1];
      }
      else {
        uint64_t v7 = a3[2];
      }
      uint64_t v8 = v7 - v5;
      if (a2 - 2 < (unint64_t)(v7 - v5)) {
        uint64_t v8 = a2 - 2;
      }
      unint64_t v9 = v8 + 1;
      if (v9 >= 0x21)
      {
        uint64_t v26 = v9 & 0x1F;
        if ((v9 & 0x1F) == 0) {
          uint64_t v26 = 32;
        }
        unint64_t v10 = v9 - v26;
        uint64_t v11 = v5 + v10;
        int8x16_t v27 = vdupq_n_s8(a4);
        uint64_t v28 = (int8x16_t *)(v5 + v6 + 16);
        unint64_t v29 = v10;
        do
        {
          v28[-1] = v27;
          *uint64_t v28 = v27;
          v28 += 2;
          v29 -= 32;
        }
        while (v29);
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = a3[2];
      }
      uint64_t v30 = v10 + v5 - v7;
      uint64_t v31 = ~v10 + a2;
      while (v30)
      {
        *(unsigned char *)(v6 + v11++) = a4;
        ++v30;
        if (!--v31)
        {
          a3[2] = v11;
LABEL_39:
          if ((uint64_t)result >= -128)
          {
            int v32 = a4 + (char)result;
            if (v32 == (char)(a4 + result))
            {
              uint64_t v33 = a3[2];
              if (v33 < a3[1])
              {
                *(unsigned char *)(*a3 + v33) = v32;
                uint64_t v34 = v33 + 1;
                goto LABEL_99;
              }
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
LABEL_109:
              __break(1u);
              goto LABEL_110;
            }
LABEL_106:
            __break(1u);
            goto LABEL_107;
          }
LABEL_105:
          __break(1u);
          goto LABEL_106;
        }
      }
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
    }
    __break(1u);
    goto LABEL_105;
  }
  if (result > 0x63)
  {
    if (result > 0x3E7)
    {
      if (result >> 4 > 0x270)
      {
        MEMORY[0x1F4188790](result);
        uint64_t v92 = specialized closure #1 in numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(&v91, 1, v54, 1);
        uint64_t v93 = v55;
        MEMORY[0x1F4188790](v92);
        char v91 = a3;
        specialized String.withUTF8<A>(_:)((uint64_t (*)(void *, uint64_t))partial apply for closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:));
        return swift_bridgeObjectRelease();
      }
      if (!__OFSUB__(a2, 4))
      {
        if (a2 - 4 >= 1)
        {
          uint64_t v35 = a3[2];
          uint64_t v36 = *a3;
          if (v35 <= a3[1]) {
            uint64_t v37 = a3[1];
          }
          else {
            uint64_t v37 = a3[2];
          }
          uint64_t v38 = v37 - v35;
          if (a2 - 5 < (unint64_t)(v37 - v35)) {
            uint64_t v38 = a2 - 5;
          }
          unint64_t v39 = v38 + 1;
          if (v39 >= 0x21)
          {
            uint64_t v71 = v39 & 0x1F;
            if ((v39 & 0x1F) == 0) {
              uint64_t v71 = 32;
            }
            unint64_t v40 = v39 - v71;
            uint64_t v41 = v35 + v40;
            int8x16_t v72 = vdupq_n_s8(a4);
            uint64_t v73 = (int8x16_t *)(v35 + v36 + 16);
            unint64_t v74 = v40;
            do
            {
              v73[-1] = v72;
              *uint64_t v73 = v72;
              v73 += 2;
              v74 -= 32;
            }
            while (v74);
          }
          else
          {
            unint64_t v40 = 0;
            uint64_t v41 = a3[2];
          }
          uint64_t v75 = v40 + v35 - v37;
          uint64_t v76 = a2 - v40 - 4;
          do
          {
            if (!v75) {
              goto LABEL_103;
            }
            *(unsigned char *)(v36 + v41++) = a4;
            ++v75;
            --v76;
          }
          while (v76);
          a3[2] = v41;
        }
        int v77 = a4 + (char)(result / 0x3E8);
        if (v77 == (char)(a4 + result / 0x3E8))
        {
          uint64_t v79 = a3[1];
          uint64_t v78 = a3[2];
          if (v78 < v79)
          {
            __int16 v80 = result % 0x3E8 / 0x64;
            uint64_t v81 = *a3;
            *(unsigned char *)(*a3 + v78) = v77;
            uint64_t v82 = v78 + 1;
            a3[2] = v78 + 1;
            int v83 = a4 + (char)v80;
            if (v83 == (char)(a4 + v80))
            {
              if (v82 < v79)
              {
                unsigned __int8 v84 = result % 0x3E8 % 0x64;
                unsigned int v85 = v84 / 0xAu;
                *(unsigned char *)(v81 + v82) = v83;
                uint64_t v86 = v78 + 2;
                a3[2] = v78 + 2;
                unsigned int v87 = v85 + a4;
                if (v87 == (char)(v85 + a4))
                {
                  if (v86 < v79)
                  {
                    char v88 = v84 % 0xAu;
                    *(unsigned char *)(v81 + v86) = v87;
                    uint64_t v89 = v78 + 3;
                    a3[2] = v78 + 3;
                    int v90 = a4 + v88;
                    if (v90 == (char)v90)
                    {
                      if (v89 < v79)
                      {
                        *(unsigned char *)(v81 + v89) = v90;
                        uint64_t v34 = v78 + 4;
                        goto LABEL_99;
                      }
LABEL_128:
                      __break(1u);
                    }
LABEL_127:
                    __break(1u);
                    goto LABEL_128;
                  }
LABEL_126:
                  __break(1u);
                  goto LABEL_127;
                }
LABEL_125:
                __break(1u);
                goto LABEL_126;
              }
LABEL_124:
              __break(1u);
              goto LABEL_125;
            }
LABEL_123:
            __break(1u);
            goto LABEL_124;
          }
LABEL_122:
          __break(1u);
          goto LABEL_123;
        }
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    if (!__OFSUB__(a2, 3))
    {
      if (a2 - 3 >= 1)
      {
        uint64_t v19 = a3[2];
        uint64_t v20 = *a3;
        if (v19 <= a3[1]) {
          uint64_t v21 = a3[1];
        }
        else {
          uint64_t v21 = a3[2];
        }
        uint64_t v22 = v21 - v19;
        if (a2 - 4 < (unint64_t)(v21 - v19)) {
          uint64_t v22 = a2 - 4;
        }
        unint64_t v23 = v22 + 1;
        if (v23 >= 0x21)
        {
          uint64_t v56 = v23 & 0x1F;
          if ((v23 & 0x1F) == 0) {
            uint64_t v56 = 32;
          }
          unint64_t v24 = v23 - v56;
          uint64_t v25 = v19 + v24;
          int8x16_t v57 = vdupq_n_s8(a4);
          uint64_t v58 = (int8x16_t *)(v19 + v20 + 16);
          unint64_t v59 = v24;
          do
          {
            v58[-1] = v57;
            int8x16_t *v58 = v57;
            v58 += 2;
            v59 -= 32;
          }
          while (v59);
        }
        else
        {
          unint64_t v24 = 0;
          uint64_t v25 = a3[2];
        }
        uint64_t v60 = v24 + v19 - v21;
        uint64_t v61 = a2 - v24 - 3;
        do
        {
          if (!v60) {
            goto LABEL_102;
          }
          *(unsigned char *)(v20 + v25++) = a4;
          ++v60;
          --v61;
        }
        while (v61);
        a3[2] = v25;
      }
      int v62 = a4 + (char)(result / 0x64);
      if (v62 == (char)(a4 + result / 0x64))
      {
        uint64_t v64 = a3[1];
        uint64_t v63 = a3[2];
        if (v63 < v64)
        {
          unsigned __int8 v65 = result % 0x64;
          uint64_t v66 = *a3;
          *(unsigned char *)(*a3 + v63) = v62;
          uint64_t v67 = v63 + 1;
          a3[2] = v63 + 1;
          unsigned int v68 = v65 / 0xAu + a4;
          if (v68 == (char)(v65 / 0xAu + a4))
          {
            if (v67 < v64)
            {
              *(unsigned char *)(v66 + v67) = v68;
              uint64_t v69 = v63 + 2;
              a3[2] = v63 + 2;
              unsigned int v70 = a4 + v65 % 0xAu;
              if (v70 == (char)v70)
              {
                if (v69 < v64)
                {
                  *(unsigned char *)(v66 + v69) = v70;
                  uint64_t v34 = v63 + 3;
                  goto LABEL_99;
                }
                goto LABEL_119;
              }
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
              goto LABEL_120;
            }
LABEL_117:
            __break(1u);
            goto LABEL_118;
          }
LABEL_116:
          __break(1u);
          goto LABEL_117;
        }
LABEL_115:
        __break(1u);
        goto LABEL_116;
      }
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  if (__OFSUB__(a2, 2)) {
    goto LABEL_108;
  }
  if (a2 - 2 >= 1)
  {
    uint64_t v12 = a3[2];
    uint64_t v13 = *a3;
    if (v12 <= a3[1]) {
      uint64_t v14 = a3[1];
    }
    else {
      uint64_t v14 = a3[2];
    }
    uint64_t v15 = v14 - v12;
    if (a2 - 3 < (unint64_t)(v14 - v12)) {
      uint64_t v15 = a2 - 3;
    }
    unint64_t v16 = v15 + 1;
    if (v16 >= 0x21)
    {
      uint64_t v42 = v16 & 0x1F;
      if ((v16 & 0x1F) == 0) {
        uint64_t v42 = 32;
      }
      unint64_t v17 = v16 - v42;
      uint64_t v18 = v12 + v17;
      int8x16_t v43 = vdupq_n_s8(a4);
      uint64_t v44 = (int8x16_t *)(v12 + v13 + 16);
      unint64_t v45 = v17;
      do
      {
        v44[-1] = v43;
        int8x16_t *v44 = v43;
        v44 += 2;
        v45 -= 32;
      }
      while (v45);
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v18 = a3[2];
    }
    uint64_t v46 = v17 + v12 - v14;
    uint64_t v47 = a2 - v17 - 2;
    do
    {
      if (!v46) {
        goto LABEL_101;
      }
      *(unsigned char *)(v13 + v18++) = a4;
      ++v46;
      --v47;
    }
    while (v47);
    a3[2] = v18;
  }
  int v48 = a4 + (char)(result / 0xA);
  if (v48 != (char)(a4 + result / 0xA)) {
    goto LABEL_109;
  }
  uint64_t v50 = a3[1];
  uint64_t v49 = a3[2];
  if (v49 >= v50)
  {
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  uint64_t v51 = *a3;
  *(unsigned char *)(*a3 + v49) = v48;
  uint64_t v52 = v49 + 1;
  a3[2] = v49 + 1;
  int v53 = a4 + result % 0xA;
  if (v53 != (char)v53)
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  if (v52 >= v50)
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  *(unsigned char *)(v51 + v52) = v53;
  uint64_t v34 = v49 + 2;
LABEL_99:
  a3[2] = v34;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.FormatStyle@<X0>(Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  Swift::String v4 = Date.FormatStyle.format(_:)(a2);
  uint64_t result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

Swift::String __swiftcall Date.FormatStyle.format(_:)(Foundation::Date a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v2 = v1[5];
  long long v3 = v1[3];
  long long v33 = v1[4];
  long long v34 = v2;
  long long v4 = v1[5];
  v35[0] = v1[6];
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)((char *)v1 + 106);
  long long v5 = v1[1];
  v30[0] = *v1;
  v30[1] = v5;
  long long v6 = v1[3];
  long long v8 = *v1;
  long long v7 = v1[1];
  long long v31 = v1[2];
  long long v32 = v6;
  long long v27 = v33;
  long long v28 = v4;
  v29[0] = v1[6];
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)((char *)v1 + 106);
  long long v24 = v8;
  long long v25 = v7;
  *(_OWORD *)uint64_t v26 = v31;
  *(_OWORD *)&v26[16] = v3;
  outlined retain of Date.FormatStyle((uint64_t)v30);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v24, (uint64_t)v17);
  long long v24 = v17[0];
  long long v25 = v17[1];
  v26[0] = v18;
  *(_OWORD *)&v26[8] = v19;
  v26[24] = v20;
  long long v27 = v21;
  LOBYTE(v28) = v22;
  *((void *)&v28 + 1) = v23;
  uint64_t v9 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v9
    || (uint64_t v10 = swift_retain_n(),
        MEMORY[0x1F4188790](v10),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v16, (uint64_t *)&v24),
        unint64_t v12 = *((void *)&v24 + 1),
        uint64_t v11 = v24,
        swift_release_n(),
        !v12))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
  }
  uint64_t v13 = v11;
  uint64_t v14 = (void *)v12;
  result._unint64_t object = v14;
  result._uint64_t countAndFlagsBits = v13;
  return result;
}

void NSSetUncaughtExceptionHandler(NSUncaughtExceptionHandler *a1)
{
}

Foundation::Date __swiftcall Date.init(timeInterval:since:)(Swift::Double timeInterval, Foundation::Date since)
{
  result._time = *v2 + timeInterval;
  *long long v3 = result._time;
  return result;
}

uint64_t one-time initialization function for observationInfoGetter()
{
  uint64_t result = Selector.init(_:)();
  static NSKeyValueObservation.Helper.observationInfoGetter = result;
  return result;
}

double NSRunLoop.SchedulerTimeType.init(_:)@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.IdentifierType and conformance Locale.IdentifierType()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.IdentifierType and conformance Locale.IdentifierType;
  if (!lazy protocol witness table cache variable for type Locale.IdentifierType and conformance Locale.IdentifierType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.IdentifierType and conformance Locale.IdentifierType);
  }
  return result;
}

uint64_t specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  long long v3 = v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v7 = *v1;
    uint64_t v6 = v3[1];
    if ((int)v6 < (int)v7)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    uint64_t v8 = *((void *)v3 + 1);
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 40);
      BOOL v11 = __OFSUB__(v7, v10);
      uint64_t v12 = v7 - v10;
      if (v11)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      unint64_t v13 = v9 + v12;
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = v6 - v7;
    type metadata accessor for __DataStorage();
    swift_allocObject();
    *((void *)v3 + 1) = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0, 0, v7);
    uint64_t result = swift_release();
  }
  uint64_t v15 = *v3;
  uint64_t v16 = v3[1];
  if ((int)v16 < (int)v15)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v17 = (void *)*((void *)v3 + 1);
  uint64_t v18 = v17[2];
  if (!v18)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v19 = v17[5];
  BOOL v11 = __OFSUB__(v15, v19);
  uint64_t v20 = v15 - v19;
  if (v11) {
    goto LABEL_17;
  }
  uint64_t v21 = v16 - v15;
  if (v17[3] < v21) {
    uint64_t v21 = v17[3];
  }
  uint64_t result = (uint64_t)a1(&v22, v18 + v20, v18 + v20 + v21);
  if (!v2) {
    return v22;
  }
  return result;
}

void *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  uint64_t result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGSize(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint(a1, a2, (uint64_t)"{CGSize=dd}");
}

id one-time initialization function for name()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSAssumedFallbackInflection");
  static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name = (uint64_t)result;
  *(void *)algn_1E8ED5F28 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInlinePresentationIntent");
  static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name = (uint64_t)result;
  qword_1E8ED5F88 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMarkdownSourcePosition");
  static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name = (uint64_t)result;
  qword_1E8ED5F08 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedNumberFormat");
  static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name = (uint64_t)result;
  qword_1E8ED5B58 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPresentationIntent");
  static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name = (uint64_t)result;
  *(void *)algn_1E8ED5EC8 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionAgreementArgument");
  static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name = (uint64_t)result;
  qword_1E8ED5EB0 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionAgreementConcept");
  static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name = (uint64_t)result;
  qword_1E8ED5E98 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionReferentConcept");
  static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name = (uint64_t)result;
  qword_1E8ED5E80 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflect");
  static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name = (uint64_t)result;
  qword_1E8ED5E58 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMorphology");
  static AttributeScopes.FoundationAttributes.MorphologyAttribute.name = (uint64_t)result;
  *(void *)algn_1E8ED5E30 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  if (one-time initialization token for inflectionAlternative != -1) {
    swift_once();
  }
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSAttributedStringKey.inflectionAlternative);
  static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name = (uint64_t)result;
  qword_1E8ED5EE0 = v1;
  return result;
}

id NSString.init(string:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return objc_msgSend(v2, sel_initWithString_, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.VariableID@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return PredicateExpressions.VariableID.init(from:)(a1, a2);
}

uint64_t PredicateExpressions.VariableID.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v44, v44[3]);
  uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  uint64_t v6 = (uint64_t *)pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (!v6)
  {
    uint64_t add_explicit = v5;
    goto LABEL_57;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(*v6 + 40);
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v10)
    {
      uint64_t add_explicit = *(void *)(*(void *)(v8 + 56) + 8 * v9);
LABEL_57:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      *a2 = add_explicit;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
  }
  uint64_t v12 = one-time initialization token for nextID;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t add_explicit = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v45 = *(void *)(v7 + 40);
  uint64_t v14 = v45;
  *(void *)(v7 + 40) = 0x8000000000000000;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v16 & 1) == 0;
  BOOL v19 = __OFADD__(v17, v18);
  uint64_t v20 = v17 + v18;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v14 + 24) < v20)
    {
      char v21 = v16;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
      uint64_t v22 = v45;
      unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_61;
      }
      if ((v21 & 1) == 0) {
        goto LABEL_55;
      }
LABEL_18:
      *(void *)(*(void *)(v22 + 56) + 8 * v15) = add_explicit;
LABEL_56:
      *(void *)(v7 + 40) = v22;
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v22 = v14;
      if (v16) {
        goto LABEL_18;
      }
LABEL_55:
      specialized _NativeDictionary._insert(at:key:value:)(v15, v5, add_explicit, (void *)v22);
      goto LABEL_56;
    }
  }
  char v43 = v16;
  unint64_t v42 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt, PredicateExpressions.VariableID>);
  uint64_t v24 = static _DictionaryStorage.copy(original:)();
  uint64_t v22 = v24;
  if (!*(void *)(v14 + 16))
  {
LABEL_54:
    swift_bridgeObjectRelease();
    unint64_t v15 = v42;
    if (v43) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }
  long long v25 = (void *)(v24 + 64);
  uint64_t v26 = v14 + 64;
  unint64_t v27 = (unint64_t)((1 << *(unsigned char *)(v22 + 32)) + 63) >> 6;
  if (v22 != v14 || (unint64_t)v25 >= v26 + 8 * v27) {
    memmove(v25, (const void *)(v14 + 64), 8 * v27);
  }
  int64_t v28 = 0;
  *(void *)(v22 + 16) = *(void *)(v14 + 16);
  uint64_t v29 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v30 = -1;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  unint64_t v31 = v30 & *(void *)(v14 + 64);
  int64_t v32 = (unint64_t)(v29 + 63) >> 6;
  uint64_t v33 = v14 + 64;
  while (1)
  {
    if (v31)
    {
      unint64_t v34 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      unint64_t v35 = v34 | (v28 << 6);
      goto LABEL_28;
    }
    int64_t v38 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_60;
    }
    if (v38 >= v32) {
      goto LABEL_54;
    }
    unint64_t v39 = *(void *)(v33 + 8 * v38);
    ++v28;
    if (!v39)
    {
      int64_t v28 = v38 + 1;
      if (v38 + 1 >= v32) {
        goto LABEL_54;
      }
      unint64_t v39 = *(void *)(v33 + 8 * v28);
      if (!v39)
      {
        int64_t v28 = v38 + 2;
        if (v38 + 2 >= v32) {
          goto LABEL_54;
        }
        unint64_t v39 = *(void *)(v33 + 8 * v28);
        if (!v39)
        {
          int64_t v28 = v38 + 3;
          if (v38 + 3 >= v32) {
            goto LABEL_54;
          }
          unint64_t v39 = *(void *)(v33 + 8 * v28);
          if (!v39)
          {
            int64_t v28 = v38 + 4;
            if (v38 + 4 >= v32) {
              goto LABEL_54;
            }
            unint64_t v39 = *(void *)(v33 + 8 * v28);
            if (!v39)
            {
              int64_t v28 = v38 + 5;
              if (v38 + 5 >= v32) {
                goto LABEL_54;
              }
              unint64_t v39 = *(void *)(v33 + 8 * v28);
              if (!v39)
              {
                int64_t v28 = v38 + 6;
                if (v38 + 6 >= v32) {
                  goto LABEL_54;
                }
                unint64_t v39 = *(void *)(v33 + 8 * v28);
                if (!v39)
                {
                  int64_t v28 = v38 + 7;
                  if (v38 + 7 >= v32) {
                    goto LABEL_54;
                  }
                  unint64_t v39 = *(void *)(v33 + 8 * v28);
                  if (!v39) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_53:
    unint64_t v31 = (v39 - 1) & v39;
    unint64_t v35 = __clz(__rbit64(v39)) + (v28 << 6);
LABEL_28:
    uint64_t v36 = 8 * v35;
    uint64_t v37 = *(void *)(*(void *)(v14 + 56) + v36);
    *(void *)(*(void *)(v22 + 48) + v36) = *(void *)(*(void *)(v14 + 48) + v36);
    *(void *)(*(void *)(v22 + 56) + v36) = v37;
  }
  int64_t v40 = v38 + 8;
  if (v40 >= v32) {
    goto LABEL_54;
  }
  unint64_t v39 = *(void *)(v33 + 8 * v40);
  if (v39)
  {
    int64_t v28 = v40;
    uint64_t v33 = v14 + 64;
    goto LABEL_53;
  }
  while (1)
  {
    int64_t v28 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v28 >= v32) {
      goto LABEL_54;
    }
    uint64_t v33 = v14 + 64;
    unint64_t v39 = *(void *)(v26 + 8 * v28);
    ++v40;
    if (v39) {
      goto LABEL_53;
    }
  }
LABEL_60:
  __break(1u);
LABEL_61:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t NSURLSession.data(from:delegate:)()
{
  long long v8 = *(_OWORD *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  long long v7 = *(_OWORD *)(v0 + 112);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v1;
  *(void *)(v4 + 56) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  void *v5 = v0;
  v5[1] = NSURLSession.data(from:delegate:);
  return MEMORY[0x1F4188148](v0 + 80, &async function pointer to partial apply for closure #1 in NSURLSession.data(from:delegate:));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  swift_release();
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v4(v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSURLSession.data(from:delegate:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NSURLSession.data(from:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for NSURLSession.CancelState()
{
  return self;
}

uint64_t AttributedString.Guts.setAttributes(_:in:)(uint64_t a1, uint64_t a2)
{
  long long v4 = v2[2];
  long long v18 = v2[1];
  long long v19 = v4;
  long long v20 = v2[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v13);
  long long v5 = v2[2];
  long long v15 = v2[1];
  long long v16 = v5;
  long long v17 = v2[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v14);
  uint64_t v6 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v8 = result - v6;
  if (__OFSUB__(result, v6))
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = result;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v6, v9, v8, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = specialized Sequence.compactMap<A>(_:)(v10);
    swift_bridgeObjectRelease();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v6, v9, 0, v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_26;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v6) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12)
          {
            int64_t v8 = v11 + 4;
            if (v11 + 4 >= v6) {
              goto LABEL_29;
            }
            unint64_t v12 = *(void *)(v2 + 8 * v8);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_26:
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    v15[2] = v18;
    v15[3] = v19;
    uint64_t v16 = v20;
    v15[0] = v17[0];
    v15[1] = v17[1];
    uint64_t v14 = *((void *)&v18 + 1);
    if ((void)v19 == 1)
    {
      outlined consume of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v18 + 1), 1);
      outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
    }
    else
    {
      if (!(void)v19)
      {
        swift_bridgeObjectRelease_n();
        outlined consume of AttributedString.AttributeRunBoundaries?(v14, 0);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
        swift_release();
        swift_bridgeObjectRelease();
        return 1;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
  }
  int64_t v13 = v11 + 5;
  if (v13 >= v6)
  {
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_25;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString._AttributeStorage.matchStyle(of:for:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *v2;
  uint64_t v49 = *v2 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(*v2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(*v2 + 64);
  int64_t v50 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  char v48 = 0;
  int64_t v11 = 0;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v11 << 6);
LABEL_25:
    long long v18 = (unint64_t *)(*(void *)(v6 + 48) + 16 * v14);
    unint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    uint64_t v21 = *v52;
    if (*(void *)(*v52 + 16))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
      if (v23)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v21 + 56) + 72 * v22, (uint64_t)&v56);
      }
      else
      {
        uint64_t v60 = 0;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v57 + 1))
      {
LABEL_4:
        outlined destroy of Any?((uint64_t)&v56, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t v12 = 0;
LABEL_5:
        swift_bridgeObjectRetain();
        outlined consume of AttributedString.AttributeRunBoundaries?(v12, 1);
        outlined consume of AttributedString.AttributeRunBoundaries?(v4, v5);
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v60 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      swift_bridgeObjectRetain();
      if (!*((void *)&v57 + 1)) {
        goto LABEL_4;
      }
    }
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v56, (uint64_t)v53);
    outlined destroy of Any?((uint64_t)&v56, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v12 = v54;
    uint64_t v24 = v55;
    outlined copy of AttributedString.AttributeRunBoundaries?(v54, v55);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v53);
    if (v24)
    {
      if (v24 == 1) {
        goto LABEL_5;
      }
      if (!v5) {
        goto LABEL_39;
      }
      if (v12 == v4 && v24 == v5)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0) {
          goto LABEL_6;
        }
      }
LABEL_42:
      if (!*(void *)(a1 + 16))
      {
        uint64_t v60 = 0;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        goto LABEL_49;
      }
      swift_bridgeObjectRetain();
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
      if (v27)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v26, (uint64_t)&v56);
      }
      else
      {
        uint64_t v60 = 0;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v57 + 1))
      {
        outlined destroy of Any?((uint64_t)&v56, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
LABEL_49:
        outlined destroy of Any?((uint64_t)&v56, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t v60 = 0;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v56, v20, v19);
        uint64_t result = swift_bridgeObjectRelease();
        char v48 = 1;
      }
    }
    else
    {
      if (!v5)
      {
        swift_bridgeObjectRelease_n();
        outlined consume of AttributedString.AttributeRunBoundaries?(v12, 0);
        goto LABEL_42;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v15 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_101;
  }
  if (v15 >= v50) {
    goto LABEL_50;
  }
  unint64_t v16 = *(void *)(v49 + 8 * v15);
  ++v11;
  if (v16) {
    goto LABEL_24;
  }
  int64_t v11 = v15 + 1;
  if (v15 + 1 >= v50) {
    goto LABEL_50;
  }
  unint64_t v16 = *(void *)(v49 + 8 * v11);
  if (v16) {
    goto LABEL_24;
  }
  int64_t v11 = v15 + 2;
  if (v15 + 2 >= v50) {
    goto LABEL_50;
  }
  unint64_t v16 = *(void *)(v49 + 8 * v11);
  if (v16) {
    goto LABEL_24;
  }
  int64_t v11 = v15 + 3;
  if (v15 + 3 >= v50) {
    goto LABEL_50;
  }
  unint64_t v16 = *(void *)(v49 + 8 * v11);
  if (v16) {
    goto LABEL_24;
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v50)
  {
LABEL_50:
    swift_release();
    uint64_t v28 = a1 + 64;
    uint64_t v29 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v30 = -1;
    if (v29 < 64) {
      uint64_t v30 = ~(-1 << v29);
    }
    unint64_t v31 = v30 & *(void *)(a1 + 64);
    int64_t v51 = (unint64_t)(v29 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v32 = 0;
    if (v31) {
      goto LABEL_58;
    }
LABEL_59:
    int64_t v36 = v32 + 1;
    if (!__OFADD__(v32, 1))
    {
      if (v36 < v51)
      {
        unint64_t v37 = *(void *)(v28 + 8 * v36);
        ++v32;
        if (v37) {
          goto LABEL_74;
        }
        int64_t v32 = v36 + 1;
        if (v36 + 1 >= v51) {
          goto LABEL_99;
        }
        unint64_t v37 = *(void *)(v28 + 8 * v32);
        if (v37) {
          goto LABEL_74;
        }
        int64_t v32 = v36 + 2;
        if (v36 + 2 >= v51) {
          goto LABEL_99;
        }
        unint64_t v37 = *(void *)(v28 + 8 * v32);
        if (v37) {
          goto LABEL_74;
        }
        int64_t v32 = v36 + 3;
        if (v36 + 3 >= v51) {
          goto LABEL_99;
        }
        unint64_t v37 = *(void *)(v28 + 8 * v32);
        if (v37)
        {
LABEL_74:
          unint64_t v31 = (v37 - 1) & v37;
          for (unint64_t i = __clz(__rbit64(v37)) + (v32 << 6); ; unint64_t i = v34 | (v32 << 6))
          {
            unint64_t v39 = (unint64_t *)(*(void *)(a1 + 48) + 16 * i);
            unint64_t v40 = v39[1];
            if (!*(void *)(a1 + 16))
            {
              uint64_t v60 = 0;
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
              swift_bridgeObjectRetain();
LABEL_55:
              outlined destroy of Any?((uint64_t)&v56, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t v33 = 0;
LABEL_56:
              swift_bridgeObjectRetain();
              outlined consume of AttributedString.AttributeRunBoundaries?(v33, 1);
              outlined consume of AttributedString.AttributeRunBoundaries?(v4, v5);
LABEL_57:
              uint64_t result = swift_bridgeObjectRelease();
              if (!v31) {
                goto LABEL_59;
              }
              goto LABEL_58;
            }
            unint64_t v41 = *v39;
            swift_bridgeObjectRetain_n();
            unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v40);
            if (v43)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v42, (uint64_t)&v56);
            }
            else
            {
              uint64_t v60 = 0;
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
            }
            swift_bridgeObjectRelease();
            if (!*((void *)&v57 + 1)) {
              goto LABEL_55;
            }
            uint64_t v33 = *((void *)&v58 + 1);
            uint64_t v44 = v59;
            outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v58 + 1), v59);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v56);
            if (!v44) {
              break;
            }
            if (v44 == 1) {
              goto LABEL_56;
            }
            if (!v5)
            {
LABEL_88:
              swift_bridgeObjectRelease();
              goto LABEL_57;
            }
            if (v33 != v4 || v44 != v5)
            {
              char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v45 & 1) == 0) {
                goto LABEL_57;
              }
              goto LABEL_90;
            }
            swift_bridgeObjectRelease();
            if (!*(void *)(a1 + 16))
            {
LABEL_96:
              uint64_t v60 = 0;
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
              goto LABEL_97;
            }
LABEL_91:
            swift_bridgeObjectRetain();
            unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v40);
            if (v47)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v46, (uint64_t)&v56);
            }
            else
            {
              uint64_t v60 = 0;
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_97:
            specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v56, v41, v40);
            uint64_t result = swift_bridgeObjectRelease();
            char v48 = 1;
            if (!v31) {
              goto LABEL_59;
            }
LABEL_58:
            unint64_t v34 = __clz(__rbit64(v31));
            v31 &= v31 - 1;
          }
          if (v5) {
            goto LABEL_88;
          }
          swift_bridgeObjectRelease_n();
          outlined consume of AttributedString.AttributeRunBoundaries?(v33, 0);
LABEL_90:
          if (!*(void *)(a1 + 16)) {
            goto LABEL_96;
          }
          goto LABEL_91;
        }
        int64_t v38 = v36 + 4;
        if (v38 < v51)
        {
          unint64_t v37 = *(void *)(v28 + 8 * v38);
          if (!v37)
          {
            while (1)
            {
              int64_t v32 = v38 + 1;
              if (__OFADD__(v38, 1)) {
                goto LABEL_103;
              }
              if (v32 >= v51) {
                goto LABEL_99;
              }
              unint64_t v37 = *(void *)(v28 + 8 * v32);
              ++v38;
              if (v37) {
                goto LABEL_74;
              }
            }
          }
          int64_t v32 = v38;
          goto LABEL_74;
        }
      }
LABEL_99:
      swift_release();
      return v48 & 1;
    }
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unint64_t v16 = *(void *)(v49 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
LABEL_24:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v50) {
      goto LABEL_50;
    }
    unint64_t v16 = *(void *)(v49 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_24;
    }
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
  return result;
}

uint64_t AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v10)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned char v22[48];
  unsigned char v23[48];
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;

  long long v6 = *(_OWORD *)(v4 + 32);
  char v27 = *(_OWORD *)(v4 + 16);
  uint64_t v28 = v6;
  uint64_t v29 = *(_OWORD *)(v4 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v22);
  long long v7 = *(_OWORD *)(v4 + 32);
  uint64_t v24 = *(_OWORD *)(v4 + 16);
  char v25 = v7;
  unint64_t v26 = *(_OWORD *)(v4 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v23);
  uint64_t v8 = BigString.Index.utf8Offset.getter();
  uint64_t v9 = BigString.Index.utf8Offset.getter();
  long long v18 = a3;
  unint64_t v19 = a4;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)partial apply for closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:), (uint64_t)v17, (void *)v4, v8, v9);
  swift_release();
  unint64_t v10 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 32);
  v10(&v20, a3, a4);
  int64_t v11 = v21;
  uint64_t result = outlined consume of AttributedString.AttributeRunBoundaries?(v20, v21);
  if (v11 != 1)
  {
    v10(&v20, a3, a4);
    unint64_t v13 = v21;
    if (v21 == 1)
    {
      unint64_t v14 = MEMORY[0x1E4FBC860];
    }
    else
    {
      int64_t v15 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      unint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1821037E0;
      *(void *)(v14 + 32) = v15;
      *(void *)(v14 + 40) = v13;
    }
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v8, v9, 0, v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of AttributedString.AttributeRunBoundaries?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AttributedString.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  specialized AttributedString.subscript.setter(a1, *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8), a3);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t specialized AttributedString.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  double v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)&v13 - v8, a1, v7);
  return AttributedString.subscript.setter((uint64_t)v9, v11, a2, a3);
}

uint64_t AttributedString.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v72 = a3;
  uint64_t v73 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v65 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v69 = (void (*)(char *, uint64_t))((char *)&v65 - v14);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v74 = a1;
  uint64_t v71 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v16 = *(void **)v5;
    long long v17 = *(_OWORD *)(*(void *)v5 + 16);
    long long v18 = *(_OWORD *)(*(void *)v5 + 48);
    v89[1] = *(_OWORD *)(*(void *)v5 + 32);
    v89[2] = v18;
    v89[0] = v17;
    uint64_t v19 = v16[8];
    uint64_t v20 = v16[9];
    uint64_t v70 = v9;
    uint64_t v21 = v16[10];
    uint64_t v22 = v16[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v89);
    swift_unknownObjectRetain();
    uint64_t v23 = v20;
    uint64_t v24 = v21;
    uint64_t v9 = v70;
    uint64_t v8 = v71;
    uint64_t v25 = AttributedString.Guts.init(string:runs:)(v89, v19, v23, v24, v22);
    a1 = v74;
    *(void *)uint64_t v5 = v25;
    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v69 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v70 = v9 + 8;
    v69(v11, v8);
    unint64_t v26 = *(_OWORD **)v5;
    long long v27 = *(_OWORD *)(*(void *)v5 + 16);
    long long v28 = *(_OWORD *)(*(void *)v5 + 48);
    long long v87 = *(_OWORD *)(*(void *)v5 + 32);
    long long v88 = v28;
    long long v86 = v27;
    swift_retain();
    outlined retain of Locale((uint64_t)&v86);
    uint64_t v29 = BigString.startIndex.getter();
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    outlined release of Locale((uint64_t)&v86);
    long long v36 = v26[1];
    long long v37 = v26[3];
    long long v84 = v26[2];
    long long v85 = v37;
    long long v83 = v36;
    long long v38 = v26[1];
    long long v91 = v26[2];
    long long v92 = v37;
    long long v90 = v38;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v90, (uint64_t)v93);
    outlined retain of Locale((uint64_t)v93);
    uint64_t v39 = BigString.endIndex.getter();
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    outlined release of Locale((uint64_t)&v83);
    swift_release();
    uint64_t v75 = v29;
    uint64_t v76 = v31;
    uint64_t v77 = v33;
    uint64_t v78 = v35;
    uint64_t v79 = v39;
    uint64_t v80 = v41;
    uint64_t v81 = v43;
    uint64_t v82 = v45;
    AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v72, (uint64_t)&v75, v72, v73);
    return ((uint64_t (*)(uint64_t, uint64_t))v69)(v74, v71);
  }
  else
  {
    (*(void (**)(void (*)(char *, uint64_t), char *, uint64_t))(v12 + 32))(v69, v11, AssociatedTypeWitness);
    char v47 = *(_OWORD **)v5;
    long long v48 = v47[1];
    long long v49 = v47[3];
    long long v87 = v47[2];
    long long v88 = v49;
    long long v86 = v48;
    swift_retain();
    outlined retain of Locale((uint64_t)&v86);
    uint64_t v70 = BigString.startIndex.getter();
    uint64_t v67 = v51;
    uint64_t v68 = v50;
    uint64_t v66 = v52;
    outlined release of Locale((uint64_t)&v86);
    long long v53 = v47[1];
    long long v54 = v47[3];
    long long v84 = v47[2];
    long long v85 = v54;
    long long v83 = v53;
    long long v55 = v47[1];
    long long v91 = v47[2];
    long long v92 = v54;
    long long v90 = v55;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v90, (uint64_t)v93);
    outlined retain of Locale((uint64_t)v93);
    uint64_t v56 = BigString.endIndex.getter();
    uint64_t v58 = v57;
    uint64_t v59 = v8;
    uint64_t v61 = v60;
    uint64_t v63 = v62;
    outlined release of Locale((uint64_t)&v83);
    swift_release();
    uint64_t v75 = v70;
    uint64_t v76 = v68;
    uint64_t v77 = v67;
    uint64_t v78 = v66;
    uint64_t v79 = v56;
    uint64_t v80 = v58;
    uint64_t v81 = v61;
    uint64_t v82 = v63;
    uint64_t v64 = v69;
    AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)((uint64_t)v69, v72, (uint64_t)&v75, v72, v73);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v74, v59);
    return (*(uint64_t (**)(void, uint64_t))(v12 + 8))(v64, AssociatedTypeWitness);
  }
}

uint64_t AttributedSubstring.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  specialized AttributedSubstring.subscript.setter(a1, *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8), a3);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t specialized AttributedSubstring.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  double v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)&v13 - v8, a1, v7);
  return AttributedSubstring.subscript.setter((uint64_t)v9, v11, a2, a3);
}

{
  uint64_t *v3;
  uint64_t *v4;
  void *v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  long long v16;
  long long v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v22;
  char v23[48];
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  _OWORD v30[4];

  uint64_t v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v8 = (void *)*v3;
    uint64_t v9 = *(_OWORD *)(*v3 + 16);
    uint64_t v10 = *(_OWORD *)(*v3 + 48);
    v30[1] = *(_OWORD *)(*v3 + 32);
    _OWORD v30[2] = v10;
    v30[0] = v9;
    uint64_t v11 = v8[8];
    uint64_t v12 = v8[9];
    uint64_t v13 = v8[10];
    uint64_t v14 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v30);
    swift_unknownObjectRetain();
    *uint64_t v4 = AttributedString.Guts.init(string:runs:)(v30, v11, v12, v13, v14);
    swift_release();
  }
  int64_t v15 = (_OWORD *)*v4;
  if (a2 == 1)
  {
    unint64_t v16 = v15[2];
    uint64_t v24 = v15[1];
    uint64_t v25 = v16;
    unint64_t v26 = v15[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)&v22);
    long long v17 = v15[2];
    long long v27 = v15[1];
    long long v28 = v17;
    uint64_t v29 = v15[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v23);
    long long v18 = BigString.Index.utf8Offset.getter();
    uint64_t v19 = (void *)BigString.Index.utf8Offset.getter();
    uint64_t v20 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v20, v18, v19);
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1, a2, a3 & 0xFFFFFFFFFFLL);
    outlined consume of AttributedString.AttributeRunBoundaries?(a1, a2);
    return outlined consume of AttributedString.AttributeRunBoundaries?(a1, a2);
  }
}

uint64_t AttributedSubstring.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  int64_t v15 = (char *)&v30 - v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unint64_t v16 = *(void **)v4;
    long long v17 = *(_OWORD *)(*(void *)v4 + 16);
    long long v18 = *(_OWORD *)(*(void *)v4 + 48);
    v40[1] = *(_OWORD *)(*(void *)v4 + 32);
    v40[2] = v18;
    v40[0] = v17;
    uint64_t v20 = v16[8];
    uint64_t v19 = v16[9];
    uint64_t v22 = v16[10];
    uint64_t v21 = v16[11];
    uint64_t v32 = v22;
    uint64_t v33 = v19;
    uint64_t v31 = v21;
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v40);
    swift_unknownObjectRetain();
    *(void *)uint64_t v5 = AttributedString.Guts.init(string:runs:)(v40, v20, v33, v32, v31);
    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v23 = (long long *)(v5 + 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v9 + 8);
    v24(v11, v8);
    long long v25 = *(_OWORD *)(v5 + 24);
    long long v36 = *v23;
    long long v37 = v25;
    long long v26 = *(_OWORD *)(v5 + 56);
    long long v38 = *(_OWORD *)(v5 + 40);
    long long v39 = v26;
    AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v34, (uint64_t)&v36, v34, v35);
    return ((uint64_t (*)(uint64_t, uint64_t))v24)(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, AssociatedTypeWitness);
    long long v28 = *(_OWORD *)(v5 + 24);
    long long v36 = *v23;
    long long v37 = v28;
    long long v29 = *(_OWORD *)(v5 + 56);
    long long v38 = *(_OWORD *)(v5 + 40);
    long long v39 = v29;
    AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)((uint64_t)v15, v34, (uint64_t)&v36, v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
  }
}

uint64_t AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v29 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  double v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v14((char *)&v28 - v12, v29, AssociatedTypeWitness, v11);
  *((void *)&v32 + 1) = AssociatedTypeWitness;
  *(void *)&v33[0] = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
  ((void (*)(uint64_t *, char *, uint64_t))v14)(boxed_opaque_existential_1, v13, AssociatedTypeWitness);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v34, a4, a5);
  *(_OWORD *)((char *)v33 + 8) = v34[0];
  BYTE8(v33[1]) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5) & 1;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  uint64_t v37 = v16;
  long long v35 = v33[0];
  long long v36 = v33[1];
  v34[0] = v31;
  v34[1] = v32;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  uint64_t v28 = v18;
  uint64_t v29 = v17;
  long long v19 = *(_OWORD *)(v6 + 32);
  long long v31 = *(_OWORD *)(v6 + 16);
  long long v32 = v19;
  v33[0] = *(_OWORD *)(v6 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v38);
  long long v20 = *(_OWORD *)(v6 + 32);
  long long v40 = *(_OWORD *)(v6 + 16);
  long long v41 = v20;
  long long v42 = *(_OWORD *)(v6 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v39);
  uint64_t v21 = v28;
  uint64_t v22 = BigString.Index.utf8Offset.getter();
  uint64_t v23 = BigString.Index.utf8Offset.getter();
  _OWORD v30[2] = v29;
  v30[3] = v21;
  v30[4] = v34;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:), (uint64_t)v30, (void *)v6, v22, v23);
  swift_release();
  uint64_t v24 = v36;
  if ((void)v36 != 1)
  {
    uint64_t v25 = *((void *)&v35 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v25;
    *(void *)(inited + 40) = v24;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v22, v23, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v34);
}

uint64_t AttributedString._InternalRunsSlice.updateEach(with:)(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v172 = (uint64_t (*)(long long *, uint64_t, uint64_t, char *))result;
  uint64_t v5 = a3[8];
  if (v5) {
    uint64_t v6 = a3[10];
  }
  else {
    uint64_t v6 = 0;
  }
  if (a4 < 0 || v6 < a4)
  {
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
LABEL_410:
    __break(1u);
LABEL_411:
    __break(1u);
    goto LABEL_412;
  }
  uint64_t v9 = a3;
  uint64_t v10 = a3[9];
  uint64_t v11 = a3[11];
  uint64_t v179 = a3 + 8;
  if (!v5 || (*(_WORD *)(v5 + 16) ? (BOOL v12 = a3[10] <= a4) : (BOOL v12 = 1), v12))
  {
    unint64_t v13 = swift_unknownObjectRetain_n();
    unint64_t v14 = specialized Rope._endPath.getter(v13);
    uint64_t result = swift_unknownObjectRelease();
    int64_t v15 = 0;
    uint64_t v16 = 0;
    if (!v5) {
      goto LABEL_48;
    }
    goto LABEL_13;
  }
  uint64_t v17 = *(unsigned __int8 *)(v5 + 18);
  if (*(unsigned char *)(v5 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v16 = a4;
    uint64_t v18 = (void *)v5;
    while (1)
    {
      uint64_t v20 = *((unsigned __int16 *)v18 + 8);
      if (!*((_WORD *)v18 + 8)) {
        break;
      }
      uint64_t v21 = v18[5];
      BOOL v22 = __OFSUB__(v16, v21);
      uint64_t v23 = v16 - v21;
      if (v22) {
        goto LABEL_375;
      }
      if (__OFADD__(v23, 1)) {
        goto LABEL_376;
      }
      if (v23 + 1 < 1)
      {
        uint64_t v20 = 0;
        goto LABEL_18;
      }
      if (v20 == 1)
      {
        uint64_t v16 = v23;
        break;
      }
      uint64_t v24 = v18 + 8;
      uint64_t v25 = 1;
      while (1)
      {
        uint64_t v26 = *v24;
        v24 += 3;
        uint64_t v16 = v23 - v26;
        if (__OFSUB__(v23, v26)) {
          goto LABEL_343;
        }
        if (__OFADD__(v16, 1))
        {
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
          goto LABEL_372;
        }
        if (v16 + 1 < 1) {
          break;
        }
        ++v25;
        uint64_t v23 = v16;
        if (v20 == v25) {
          goto LABEL_17;
        }
      }
      uint64_t v20 = v25;
      uint64_t v16 = v23;
LABEL_18:
      char v19 = (4 * *((unsigned char *)v18 + 18) + 8) & 0x3C;
      uint64_t v17 = ((-15 << v19) - 1) & v17 | (v20 << v19);
      int64_t v15 = (void *)v18[3 * v20 + 3];
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v18 = v15;
      if (!*((unsigned char *)v15 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_17:
    if (!v16) {
      goto LABEL_18;
    }
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v16 = a4;
  int64_t v15 = (void *)v5;
LABEL_33:
  uint64_t v27 = *((unsigned __int16 *)v15 + 8);
  if (!*((_WORD *)v15 + 8))
  {
    uint64_t v9 = a3;
    goto LABEL_46;
  }
  uint64_t v28 = v15[3];
  BOOL v22 = __OFSUB__(v16, v28);
  uint64_t v29 = v16 - v28;
  uint64_t v9 = a3;
  if (!v22)
  {
    if (__OFADD__(v29, 1)) {
      goto LABEL_414;
    }
    if (v29 + 1 < 1)
    {
      uint64_t v27 = 0;
      goto LABEL_47;
    }
    if (v27 != 1)
    {
      uint64_t v30 = v15 + 6;
      uint64_t v31 = 1;
      while (1)
      {
        uint64_t v32 = *v30;
        v30 += 3;
        uint64_t v16 = v29 - v32;
        if (__OFSUB__(v29, v32)) {
          goto LABEL_392;
        }
        if (__OFADD__(v16, 1)) {
          goto LABEL_393;
        }
        if (v16 + 1 < 1) {
          goto LABEL_336;
        }
        ++v31;
        uint64_t v29 = v16;
        if (v27 == v31) {
          goto LABEL_46;
        }
      }
    }
    uint64_t v16 = v29;
LABEL_46:
    if (v16)
    {
LABEL_412:
      __break(1u);
      goto LABEL_413;
    }
LABEL_47:
    while (2)
    {
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v14 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
      if (v5)
      {
LABEL_13:
        swift_unknownObjectRetain();
        uint64_t v180 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, (uint64_t)v15, v5, v10);
        uint64_t result = swift_unknownObjectRelease_n();
      }
      else
      {
LABEL_48:
        uint64_t v180 = 0;
      }
      uint64_t v33 = a5;
      uint64_t v10 = a4 - v16;
      if (__OFSUB__(a4, v16)) {
        goto LABEL_391;
      }
      uint64_t v34 = a4;
      uint64_t v35 = v11;
      unint64_t v36 = v14;
      uint64_t v178 = v33;
      while (1)
      {
        uint64_t v17 = *v179;
        unint64_t v181 = v36;
        if (v34 != v33)
        {
          if (v17) {
            uint64_t v42 = v9[10];
          }
          else {
            uint64_t v42 = 0;
          }
          goto LABEL_104;
        }
        if (!v17)
        {
          if (v34 > 0) {
            goto LABEL_377;
          }
          uint64_t v9 = 0;
          goto LABEL_102;
        }
        uint64_t v37 = v9[10];
        if (v37 < v34) {
          goto LABEL_363;
        }
        a5 = v9[11];
        uint64_t v38 = v34;
        uint64_t v39 = *(unsigned __int8 *)(v17 + 18);
        BOOL v40 = !*(_WORD *)(v17 + 16) || v37 <= v38;
        uint64_t v173 = v9[9];
        if (!v40) {
          break;
        }
        unint64_t v41 = ((-15 << ((4 * v39 + 8) & 0x3C)) - 1) & v39 | ((unint64_t)*(unsigned __int16 *)(v17 + 16) << ((4 * v39 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v9 = 0;
        uint64_t v11 = 0;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(a5, v41, v11, v17, v173);
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t v34 = a4;
        unint64_t v36 = v181;
LABEL_102:
        uint64_t v42 = v34 - (void)v9;
        if (__OFSUB__(v34, v9)) {
          goto LABEL_358;
        }
        uint64_t v9 = a3;
LABEL_104:
        if (v10 >= v42) {
          return result;
        }
        if (v35 != v9[11]) {
          goto LABEL_345;
        }
        if (v15)
        {
          long long v54 = &v15[3 * ((v36 >> ((4 * *((unsigned char *)v15 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v56 = v54[4];
          uint64_t v55 = v54[5];
          unint64_t v57 = v54[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }
        else
        {
          uint64_t v58 = v9[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v36, v58);
          uint64_t v56 = v59;
          uint64_t v55 = v60;
          uint64_t result = swift_unknownObjectRelease();
          if (v35 != v9[11]) {
            goto LABEL_362;
          }
          uint64_t v61 = v9[8];
          swift_unknownObjectRetain();
          unint64_t v57 = specialized Rope._Node.subscript.getter(v36, v61);
          uint64_t v34 = a4;
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v22 = __OFADD__(v10, v57);
        uint64_t v62 = v10 + v57;
        if (v22) {
          goto LABEL_346;
        }
        *(void *)&long long v190 = v56;
        *((void *)&v190 + 1) = v55;
        if (v10 >= v178) {
          uint64_t v63 = v178;
        }
        else {
          uint64_t v63 = v10;
        }
        if (v10 >= v34) {
          uint64_t v64 = v63;
        }
        else {
          uint64_t v64 = v34;
        }
        if (v62 <= v34) {
          uint64_t v65 = v34;
        }
        else {
          uint64_t v65 = v62;
        }
        if (v62 <= v178) {
          uint64_t v66 = v65;
        }
        else {
          uint64_t v66 = v178;
        }
        if (v64 == v66) {
          goto LABEL_347;
        }
        char v189 = 1;
        if (v64 != v10 || v66 != v62)
        {
          uint64_t result = v172(&v190, v64, v66, &v189);
          if ((v189 & 1) == 0)
          {
            uint64_t v89 = v35;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v9 = a3;
            goto LABEL_235;
          }
          if (__OFSUB__(v66, v64)) {
            goto LABEL_366;
          }
          uint64_t v11 = *((void *)&v190 + 1);
          uint64_t v5 = v190;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v64, v66, v66 - v64, v5, v11);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v80 = a3[8];
          uint64_t v9 = (void *)a3[10];
          if (v80) {
            uint64_t v81 = a3[10];
          }
          else {
            uint64_t v81 = 0;
          }
          if (v10 < 0 || v81 < v10) {
            goto LABEL_368;
          }
          a5 = a3[9];
          uint64_t v175 = a3[11];
          if (v80 && *(_WORD *)(v80 + 16) && v10 < (uint64_t)v9)
          {
            uint64_t v82 = *(unsigned __int8 *)(v80 + 18);
            if (*(unsigned char *)(v80 + 18))
            {
              uint64_t result = swift_unknownObjectRetain_n();
              uint64_t v17 = v10;
              long long v83 = (void *)v80;
              while (1)
              {
                uint64_t v29 = *((unsigned __int16 *)v83 + 8);
                if (!*((_WORD *)v83 + 8)) {
                  goto LABEL_150;
                }
                uint64_t v85 = v83[5];
                BOOL v22 = __OFSUB__(v17, v85);
                uint64_t v31 = v17 - v85;
                if (v22) {
                  goto LABEL_356;
                }
                if (__OFADD__(v31, 1)) {
                  goto LABEL_357;
                }
                if (v31 + 1 < 1)
                {
                  uint64_t v29 = 0;
                }
                else
                {
                  if (v29 == 1)
                  {
                    uint64_t v17 = v31;
LABEL_150:
                    if (v17) {
                      goto LABEL_353;
                    }
                    goto LABEL_151;
                  }
                  long long v86 = v83 + 8;
                  uint64_t v87 = 1;
                  while (1)
                  {
                    uint64_t v88 = *v86;
                    v86 += 3;
                    uint64_t v17 = v31 - v88;
                    if (__OFSUB__(v31, v88)) {
                      goto LABEL_334;
                    }
                    if (__OFADD__(v17, 1)) {
                      goto LABEL_335;
                    }
                    if (v17 + 1 < 1) {
                      break;
                    }
                    ++v87;
                    uint64_t v31 = v17;
                    if (v29 == v87) {
                      goto LABEL_150;
                    }
                  }
                  uint64_t v29 = v87;
                  uint64_t v17 = v31;
                }
LABEL_151:
                char v84 = (4 * *((unsigned char *)v83 + 18) + 8) & 0x3C;
                uint64_t v82 = ((-15 << v84) - 1) & v82 | (v29 << v84);
                int64_t v15 = (void *)v83[3 * v29 + 3];
                swift_unknownObjectRetain();
                uint64_t result = swift_unknownObjectRelease();
                long long v83 = v15;
                if (!*((unsigned char *)v15 + 18)) {
                  goto LABEL_212;
                }
              }
            }
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v17 = v10;
            int64_t v15 = (void *)v80;
LABEL_212:
            uint64_t v125 = *((unsigned __int16 *)v15 + 8);
            if (*((_WORD *)v15 + 8))
            {
              uint64_t v126 = v15[3];
              BOOL v22 = __OFSUB__(v17, v126);
              uint64_t v127 = v17 - v126;
              if (v22) {
                goto LABEL_399;
              }
              if (__OFADD__(v127, 1)) {
                goto LABEL_400;
              }
              if (v127 + 1 < 1)
              {
                uint64_t v125 = 0;
              }
              else
              {
                if (v125 == 1)
                {
                  uint64_t v17 = v127;
                  goto LABEL_230;
                }
                uint64_t v131 = v15 + 6;
                uint64_t v132 = 1;
                while (1)
                {
                  uint64_t v133 = *v131;
                  v131 += 3;
                  uint64_t v17 = v127 - v133;
                  if (__OFSUB__(v127, v133)) {
                    goto LABEL_373;
                  }
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_374;
                  }
                  if (v17 + 1 < 1) {
                    break;
                  }
                  ++v132;
                  uint64_t v127 = v17;
                  if (v125 == v132) {
                    goto LABEL_230;
                  }
                }
                uint64_t v125 = v132;
                uint64_t v17 = v127;
              }
            }
            else
            {
LABEL_230:
              if (v17) {
                goto LABEL_395;
              }
            }
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v92 = v82 & 0xFFFFFFFFFFFFF0FFLL | (v125 << 8);
            uint64_t v34 = a4;
LABEL_171:
            swift_unknownObjectRetain();
            unint64_t v181 = v92;
            uint64_t v180 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v175, v92, (uint64_t)v15, v80, a5);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_unknownObjectRelease_n();
          }
          else
          {
            unint64_t v91 = swift_unknownObjectRetain_n();
            unint64_t v92 = specialized Rope._endPath.getter(v91);
            swift_unknownObjectRelease();
            uint64_t v17 = 0;
            int64_t v15 = 0;
            if (v80) {
              goto LABEL_171;
            }
            unint64_t v181 = v92;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v180 = 0;
          }
          uint64_t v9 = a3;
          BOOL v22 = __OFSUB__(v10, v17);
          v10 -= v17;
          if (v22) {
            goto LABEL_370;
          }
          uint64_t v89 = v175;
          goto LABEL_235;
        }
        uint64_t v9 = a3;
        if (v35 != a3[11]) {
          goto LABEL_359;
        }
        if (!*v179) {
          goto LABEL_415;
        }
        specialized Rope._Node._prepareModify(at:)(v181, (uint64_t)&v191);
        v206[0] = v192;
        long long v186 = v191;
        long long v187 = v192;
        long long v188 = v193;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v206);
        uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)v206 + 8);
        long long v187 = MEMORY[0x1E4FBC868];
        uint64_t v67 = v35 + 1;
        a3[11] = v35 + 1;
        if (!a3[8]) {
          goto LABEL_416;
        }
        specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v172(&v190, v10, v62, &v189);
        if ((v189 & 1) == 0)
        {
          uint64_t result = v181;
          if (v67 != a3[11]) {
            goto LABEL_369;
          }
          if (!*v179) {
            goto LABEL_419;
          }
          specialized Rope._Node._prepareModify(at:)(v181, (uint64_t)&v200);
          long long v205 = v201;
          long long v186 = v200;
          long long v187 = v201;
          long long v188 = v202;
          long long v90 = v190;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
          uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205 + 8);
          long long v187 = v90;
          uint64_t v89 = v35 + 2;
          a3[11] = v35 + 2;
          if (!a3[8]) {
            goto LABEL_420;
          }
          int64_t v15 = specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_210;
        }
        uint64_t result = v181;
        if (v67 != a3[11]) {
          goto LABEL_367;
        }
        if (!*v179) {
          goto LABEL_417;
        }
        specialized Rope._Node._prepareModify(at:)(v181, (uint64_t)&v194);
        uint64_t v203 = v195;
        uint64_t v204 = v196;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v203);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v204);
        long long v186 = v194;
        long long v188 = v197;
        uint64_t v68 = *((void *)&v190 + 1);
        uint64_t result = v190;
        long long v187 = v190;
        a3[11] = v35 + 2;
        if (!a3[8]) {
          goto LABEL_418;
        }
        uint64_t v171 = result;
        swift_bridgeObjectRetain_n();
        uint64_t v170 = v68;
        swift_bridgeObjectRetain_n();
        int64_t v15 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v69 = a3[8];
        uint64_t v70 = a3[9];
        uint64_t v71 = a3[10];
        uint64_t v72 = a3[11];
        uint64_t v174 = v35 + 2;
        *(void *)&long long v186 = v35 + 2;
        *((void *)&v186 + 1) = v181;
        *(void *)&long long v187 = v15;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v186, v69, v70, v71, v72);
        swift_unknownObjectRelease();
        long long v73 = v186;
        uint64_t v74 = v187;
        unint64_t v75 = swift_unknownObjectRetain();
        unint64_t v76 = specialized Rope._endPath.getter(v75);
        uint64_t result = swift_unknownObjectRelease();
        if (*((void *)&v73 + 1) >= v76)
        {
          uint64_t v34 = a4;
        }
        else
        {
          uint64_t v34 = a4;
          if ((void)v73 != a3[11]) {
            goto LABEL_379;
          }
          if (v74)
          {
            uint64_t v77 = v74 + 24 * ((*((void *)&v73 + 1) >> ((4 * *(unsigned char *)(v74 + 18) + 8) & 0x3C)) & 0xFLL);
            uint64_t v79 = *(void *)(v77 + 32);
            uint64_t v78 = *(void *)(v77 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v93 = a3[8];
            swift_unknownObjectRetain();
            uint64_t v34 = a4;
            specialized Rope._Node.subscript.getter(*((unint64_t *)&v73 + 1), v93);
            uint64_t v79 = v94;
            uint64_t v78 = v95;
            swift_unknownObjectRelease();
          }
          if (specialized static Dictionary<>.== infix(_:_:)(v79, v171))
          {
            char v96 = specialized static Set.== infix(_:_:)(v78, v170);
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v96)
            {
              char v97 = v179;
              unint64_t v98 = specialized Rope._remove(at:)((uint64_t)&v186, v174, v181);
              unint64_t v99 = a3[8];
              uint64_t v100 = a3[11];
              unint64_t v101 = v98;
              if (v98 < specialized Rope._endPath.getter(v99) && *(unsigned char *)(v99 + 18))
              {
                uint64_t v102 = (v98 >> ((4 * *(unsigned char *)(v99 + 18) + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                char v97 = v179;
                specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v99 + 24, v102, v98);
                swift_unknownObjectRelease();
              }
              uint64_t v103 = v186;
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if (v100 != a3[11]) {
                goto LABEL_401;
              }
              if (!*v97) {
                goto LABEL_421;
              }
              uint64_t result = specialized Rope._Node._prepareModify(at:)(v98, (uint64_t)v198);
              long long v186 = v198[0];
              long long v187 = v198[1];
              long long v188 = v198[2];
              if (__OFADD__(*((void *)&v198[0] + 1), v103)) {
                goto LABEL_402;
              }
              *((void *)&v186 + 1) = *((void *)&v198[0] + 1) + v103;
              uint64_t v174 = v100 + 1;
              a3[11] = v100 + 1;
              if (!a3[8]) {
                goto LABEL_422;
              }
              int64_t v15 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              goto LABEL_186;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
          }
        }
        unint64_t v101 = v181;
LABEL_186:
        unint64_t v104 = *v179;
        if (*v179) {
          unint64_t v104 = *(unsigned __int8 *)(v104 + 18);
        }
        uint64_t v89 = v174;
        unint64_t v181 = v101;
        if (v101 <= v104)
        {
          swift_bridgeObjectRelease_n();
          uint64_t result = swift_bridgeObjectRelease_n();
          goto LABEL_235;
        }
        uint64_t v105 = a3[8];
        uint64_t v106 = a3[11];
        *(void *)&long long v186 = v174;
        *((void *)&v186 + 1) = v101;
        *(void *)&long long v187 = v15;
        if (v174 != v106) {
          goto LABEL_380;
        }
        if (v105)
        {
          unint64_t v107 = *(unsigned __int8 *)(v105 + 18);
          uint64_t result = swift_unknownObjectRetain();
          if (v101 <= v107) {
            goto LABEL_381;
          }
        }
        else if (!v101)
        {
          goto LABEL_381;
        }
        char v108 = (4 * *((unsigned char *)v15 + 18) + 8) & 0x3C;
        if (((v101 >> v108) & 0xF) != 0)
        {
          unint64_t v109 = ((((v101 >> v108) & 0xF) - 1) << v108) | ((-15 << v108) - 1) & v101;
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v110 = v15;
          uint64_t v111 = v174;
        }
        else
        {
          swift_unknownObjectRetain();
          char v112 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v186, v105);
          uint64_t result = swift_unknownObjectRelease_n();
          if ((v112 & 1) == 0) {
            goto LABEL_396;
          }
          unint64_t v109 = *((void *)&v186 + 1);
          uint64_t v111 = v186;
          uint64_t v110 = (void *)v187;
        }
        if (v111 != a3[11]) {
          goto LABEL_382;
        }
        if (v110)
        {
          uint64_t v113 = &v110[3 * ((v109 >> ((4 * *((unsigned char *)v110 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v115 = v113[4];
          uint64_t v114 = v113[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v116 = a3[8];
          swift_unknownObjectRetain();
          uint64_t v34 = a4;
          specialized Rope._Node.subscript.getter(v109, v116);
          uint64_t v115 = v117;
          uint64_t v114 = v118;
          swift_unknownObjectRelease();
        }
        if ((specialized static Dictionary<>.== infix(_:_:)(v115, v171) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_209:
          swift_bridgeObjectRelease();
LABEL_210:
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_235;
        }
        char v119 = specialized static Set.== infix(_:_:)(v114, v170);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v119 & 1) == 0) {
          goto LABEL_209;
        }
        unint64_t v120 = specialized Rope._remove(at:)((uint64_t)&v186, v174, v101);
        unint64_t v121 = a3[8];
        uint64_t v122 = a3[11];
        if (v120 >= specialized Rope._endPath.getter(v121))
        {
          unint64_t v121 = 0;
        }
        else if (*(unsigned char *)(v121 + 18))
        {
          uint64_t v123 = (v120 >> ((4 * *(unsigned char *)(v121 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          uint64_t v124 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v121 + 24, v123, v120);
          swift_unknownObjectRelease();
          unint64_t v121 = v124;
        }
        uint64_t v183 = v122;
        unint64_t v184 = v120;
        unint64_t v185 = v121;
        uint64_t v128 = v186;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v122 != a3[11]) {
          goto LABEL_403;
        }
        uint64_t v129 = a3[8];
        if (v129)
        {
          unint64_t v130 = *(unsigned __int8 *)(v129 + 18);
          uint64_t result = swift_unknownObjectRetain();
          if (v120 <= v130) {
            goto LABEL_404;
          }
        }
        else if (!v120)
        {
          goto LABEL_404;
        }
        if (v121 && (char v166 = (4 * *(unsigned char *)(v121 + 18) + 8) & 0x3C, ((v120 >> v166) & 0xF) != 0))
        {
          unint64_t v184 = ((((v120 >> v166) & 0xF) - 1) << v166) | ((-15 << v166) - 1) & v120;
          uint64_t result = swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRetain();
          char v167 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v183, v129);
          uint64_t result = swift_unknownObjectRelease_n();
          if ((v167 & 1) == 0) {
            goto LABEL_409;
          }
          uint64_t v122 = v183;
        }
        uint64_t v34 = a4;
        if (v122 != a3[11]) {
          goto LABEL_405;
        }
        if (!*v179) {
          goto LABEL_423;
        }
        unint64_t v181 = v184;
        uint64_t result = specialized Rope._Node._prepareModify(at:)(v184, (uint64_t)v199);
        long long v186 = v199[0];
        long long v187 = v199[1];
        long long v188 = v199[2];
        BOOL v22 = __OFSUB__(v10, *((void *)&v199[0] + 1));
        v10 -= *((void *)&v199[0] + 1);
        if (v22) {
          goto LABEL_406;
        }
        if (__OFADD__(*((void *)&v199[0] + 1), v128)) {
          goto LABEL_407;
        }
        *((void *)&v186 + 1) = *((void *)&v199[0] + 1) + v128;
        uint64_t v89 = v122 + 1;
        uint64_t v9 = a3;
        a3[11] = v122 + 1;
        if (!a3[8]) {
          goto LABEL_424;
        }
        int64_t v15 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (__OFSUB__(v180, 1)) {
          goto LABEL_408;
        }
        --v180;
LABEL_235:
        uint64_t v134 = v9[8];
        uint64_t v135 = v9[11];
        *(void *)&long long v186 = v89;
        *((void *)&v186 + 1) = v181;
        *(void *)&long long v187 = v15;
        BOOL v22 = __OFADD__(v180++, 1);
        if (v22) {
          goto LABEL_348;
        }
        if (v89 != v135) {
          goto LABEL_349;
        }
        uint64_t v136 = v89;
        if (v15)
        {
          unint64_t v137 = &v15[3 * ((v181 >> ((4 * *((unsigned char *)v15 + 18) + 8) & 0x3C)) & 0xF)];
          unint64_t v138 = v137[3];
          uint64_t v11 = v137[5];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          unint64_t v138 = specialized Rope._Node.subscript.getter(v181, v134);
          uint64_t v11 = v139;
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v22 = __OFADD__(v10, v138);
        v10 += v138;
        if (v22) {
          goto LABEL_350;
        }
        if (v134)
        {
          unint64_t v140 = ((-15 << ((4 * *(unsigned char *)(v134 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v134 + 18) | ((unint64_t)*(unsigned __int16 *)(v134 + 16) << ((4 * *(unsigned char *)(v134 + 18) + 8) & 0x3C));
          uint64_t result = swift_unknownObjectRetain();
        }
        else
        {
          unint64_t v140 = 0;
        }
        if (v181 >= v140) {
          goto LABEL_351;
        }
        if (v15
          && (char v141 = (4 * *((unsigned char *)v15 + 18) + 8) & 0x3C,
              unint64_t v142 = ((v181 >> v141) & 0xF) + 1,
              v142 < *((unsigned __int16 *)v15 + 8)))
        {
          unint64_t v36 = (v142 << v141) | ((-15 << v141) - 1) & v181;
          uint64_t result = swift_unknownObjectRelease_n();
        }
        else
        {
          int v143 = *(unsigned __int8 *)(v134 + 18);
          char v144 = (4 * v143 + 8) & 0x3C;
          uint64_t v183 = (v181 >> v144) & 0xF;
          if (v143)
          {
            swift_unknownObjectRetain();
            char v145 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v134 + 24, &v183, (uint64_t)&v186, v134, v143);
            uint64_t result = swift_unknownObjectRelease();
            if ((v145 & 1) == 0) {
              goto LABEL_254;
            }
            uint64_t result = swift_unknownObjectRelease_n();
            unint64_t v36 = *((void *)&v186 + 1);
          }
          else
          {
            unint64_t v146 = ((v181 >> v144) & 0xF) + 1;
            if (v146 >= *(unsigned __int16 *)(v134 + 16))
            {
LABEL_254:
              if (v134)
              {
                int v147 = *(unsigned __int8 *)(v134 + 18);
                uint64_t v148 = *(unsigned __int16 *)(v134 + 16);
                uint64_t result = swift_unknownObjectRelease_n();
                unint64_t v36 = ((-15 << ((4 * v147 + 8) & 0x3C)) - 1) & v147 | (unint64_t)(v148 << ((4 * v147 + 8) & 0x3C));
              }
              else
              {
                unint64_t v36 = 0;
              }
              uint64_t v33 = v178;
              *(void *)&long long v186 = v136;
              *((void *)&v186 + 1) = v36;
              *(void *)&long long v187 = 0;
              goto LABEL_258;
            }
            unint64_t v36 = (v146 << v144) | ((-15 << v144) - 1) & v181;
            *((void *)&v186 + 1) = v36;
            uint64_t result = swift_unknownObjectRelease_n();
            *(void *)&long long v187 = v134;
          }
        }
        uint64_t v33 = v178;
LABEL_258:
        uint64_t v35 = v186;
        int64_t v15 = (void *)v187;
        if (v10 >= v33)
        {
          uint64_t v149 = *v179;
          if (v34 == v33)
          {
            uint64_t v35 = v9[11];
            if (v149)
            {
              uint64_t v150 = v9[10];
              if (v150 < v34) {
                goto LABEL_378;
              }
              uint64_t v151 = v9[11];
              uint64_t v11 = v9[9];
              uint64_t v152 = *(unsigned __int8 *)(v149 + 18);
              if (*(_WORD *)(v149 + 16) && v150 > v34)
              {
                if (*(unsigned char *)(v149 + 18))
                {
                  uint64_t result = swift_unknownObjectRetain_n();
                  unint64_t v153 = (void *)v149;
                  while (1)
                  {
                    uint64_t v155 = *((unsigned __int16 *)v153 + 8);
                    if (!*((_WORD *)v153 + 8)) {
                      goto LABEL_267;
                    }
                    uint64_t v156 = v153[5];
                    uint64_t v157 = v34 - v156;
                    if (__OFSUB__(v34, v156)) {
                      goto LABEL_354;
                    }
                    if (__OFADD__(v157, 1)) {
                      goto LABEL_355;
                    }
                    if (v157 + 1 <= 0)
                    {
                      uint64_t v155 = 0;
                    }
                    else
                    {
                      if (v155 == 1)
                      {
                        v34 -= v156;
LABEL_267:
                        if (v34) {
                          goto LABEL_352;
                        }
                        goto LABEL_268;
                      }
                      uint64_t v158 = v153[8];
                      BOOL v22 = __OFSUB__(v157, v158);
                      uint64_t v159 = v157 - v158;
                      if (v22) {
                        goto LABEL_364;
                      }
                      if (__OFADD__(v159, 1)) {
                        goto LABEL_365;
                      }
                      if (v159 + 1 >= 1)
                      {
                        if (v155 != 2)
                        {
                          char v160 = v153 + 11;
                          uint64_t v161 = 2;
                          while (v155 != v161)
                          {
                            uint64_t v34 = v159 - *v160;
                            if (__OFSUB__(v159, *v160)) {
                              goto LABEL_341;
                            }
                            if (__OFADD__(v34, 1)) {
                              goto LABEL_342;
                            }
                            if (v34 + 1 < 1)
                            {
                              uint64_t v155 = v161;
                              uint64_t v34 = v159;
                              goto LABEL_268;
                            }
                            ++v161;
                            v160 += 3;
                            uint64_t v159 = v34;
                            if (v155 == v161) {
                              goto LABEL_267;
                            }
                          }
LABEL_340:
                          __break(1u);
LABEL_341:
                          __break(1u);
LABEL_342:
                          __break(1u);
LABEL_343:
                          __break(1u);
                          goto LABEL_344;
                        }
                        uint64_t v34 = v159;
                        goto LABEL_267;
                      }
                      uint64_t v155 = 1;
                      uint64_t v34 = v157;
                    }
LABEL_268:
                    char v154 = (4 * *((unsigned char *)v153 + 18) + 8) & 0x3C;
                    uint64_t v152 = ((-15 << v154) - 1) & v152 | (v155 << v154);
                    int64_t v15 = (void *)v153[3 * v155 + 3];
                    swift_unknownObjectRetain();
                    uint64_t result = swift_unknownObjectRelease();
                    unint64_t v153 = v15;
                    if (!*((unsigned char *)v15 + 18)) {
                      goto LABEL_294;
                    }
                  }
                }
                uint64_t result = swift_unknownObjectRetain_n();
                uint64_t v152 = 0;
                int64_t v15 = (void *)v149;
LABEL_294:
                uint64_t v162 = *((unsigned __int16 *)v15 + 8);
                if (*((_WORD *)v15 + 8))
                {
                  uint64_t v163 = v15[3];
                  BOOL v22 = __OFSUB__(v34, v163);
                  uint64_t v164 = v34 - v163;
                  if (v22) {
                    goto LABEL_397;
                  }
                  if (__OFADD__(v164, 1)) {
                    goto LABEL_398;
                  }
                  if (v164 + 1 <= 0)
                  {
                    uint64_t v162 = 0;
                    goto LABEL_330;
                  }
                  if (v162 != 1)
                  {
                    uint64_t v165 = v15[6];
                    uint64_t v34 = v164 - v165;
                    if (__OFSUB__(v164, v165)) {
                      goto LABEL_410;
                    }
                    if (__OFADD__(v34, 1)) {
                      goto LABEL_411;
                    }
                    if (v34 + 1 >= 1)
                    {
                      if (v162 != 2)
                      {
                        id v168 = v15 + 9;
                        uint64_t v169 = 2;
                        while (v162 != v169)
                        {
                          uint64_t v164 = v34 - *v168;
                          if (__OFSUB__(v34, *v168)) {
                            goto LABEL_388;
                          }
                          if (__OFADD__(v164, 1)) {
                            goto LABEL_389;
                          }
                          if (v164 + 1 < 1)
                          {
                            uint64_t v162 = v169;
                            goto LABEL_330;
                          }
                          ++v169;
                          v168 += 3;
                          uint64_t v34 = v164;
                          if (v162 == v169) {
                            goto LABEL_304;
                          }
                        }
                        goto LABEL_387;
                      }
                      goto LABEL_303;
                    }
                    uint64_t v162 = 1;
                    uint64_t v34 = v164;
LABEL_330:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    unint64_t v36 = v152 & 0xFFFFFFFFFFFFF0FFLL | (v162 << 8);
LABEL_52:
                    swift_unknownObjectRetain();
                    uint64_t v35 = v151;
                    uint64_t v180 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v151, v36, (uint64_t)v15, v149, v11);
                    uint64_t result = swift_unknownObjectRelease_n();
                    uint64_t v33 = v178;
                    goto LABEL_53;
                  }
                }
                else
                {
LABEL_303:
                  uint64_t v164 = v34;
                }
LABEL_304:
                if (v164) {
                  goto LABEL_394;
                }
                uint64_t v34 = 0;
                goto LABEL_330;
              }
              unint64_t v36 = ((-15 << ((4 * v152 + 8) & 0x3C)) - 1) & v152 | ((unint64_t)*(unsigned __int16 *)(v149 + 16) << ((4 * v152 + 8) & 0x3C));
              swift_unknownObjectRetain();
              uint64_t v34 = 0;
              int64_t v15 = 0;
              goto LABEL_52;
            }
            if (v34 > 0) {
              goto LABEL_386;
            }
            uint64_t v34 = 0;
            int64_t v15 = 0;
            unint64_t v36 = 0;
            uint64_t v180 = 0;
LABEL_53:
            BOOL v22 = __OFSUB__(a4, v34);
            uint64_t v10 = a4 - v34;
            uint64_t v34 = a4;
            if (v22) {
              goto LABEL_371;
            }
          }
          else
          {
            uint64_t v10 = 0;
            uint64_t v180 = 0;
            int64_t v15 = 0;
            unint64_t v36 = 0;
            uint64_t v35 = v9[11];
            if (v149)
            {
              int64_t v15 = 0;
              uint64_t v10 = v9[10];
              uint64_t v180 = v9[9];
              unint64_t v36 = ((-15 << ((4 * *(unsigned char *)(v149 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v149 + 18) | ((unint64_t)*(unsigned __int16 *)(v149 + 16) << ((4 * *(unsigned char *)(v149 + 18) + 8) & 0x3C));
            }
          }
        }
      }
      if (*(unsigned char *)(v17 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v9 = (void *)a4;
        uint64_t v5 = v17;
LABEL_73:
        uint64_t v29 = *(unsigned __int16 *)(v5 + 16);
        if (!*(_WORD *)(v5 + 16)) {
          goto LABEL_71;
        }
        uint64_t v44 = *(void *)(v5 + 40);
        BOOL v22 = __OFSUB__(v9, v44);
        uint64_t v31 = (uint64_t)v9 - v44;
        if (v22) {
          goto LABEL_338;
        }
        if (__OFADD__(v31, 1)) {
          goto LABEL_339;
        }
        if (v31 + 1 < 1)
        {
          uint64_t v29 = 0;
          goto LABEL_72;
        }
        if (v29 == 1)
        {
          uint64_t v9 = (void *)v31;
LABEL_71:
          if (!v9) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
          goto LABEL_340;
        }
        uint64_t v45 = (uint64_t *)(v5 + 64);
        uint64_t v46 = 1;
        while (1)
        {
          uint64_t v47 = *v45;
          v45 += 3;
          uint64_t v9 = (void *)(v31 - v47);
          if (__OFSUB__(v31, v47)) {
            break;
          }
          if (__OFADD__(v9, 1)) {
            goto LABEL_333;
          }
          if ((uint64_t)v9 + 1 < 1)
          {
            uint64_t v29 = v46;
            uint64_t v9 = (void *)v31;
LABEL_72:
            char v43 = (4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C;
            uint64_t v39 = ((-15 << v43) - 1) & v39 | (v29 << v43);
            uint64_t v11 = *(void *)(v5 + 24 + 24 * v29);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v5 = v11;
            if (!*(unsigned char *)(v11 + 18)) {
              goto LABEL_87;
            }
            goto LABEL_73;
          }
          ++v46;
          uint64_t v31 = (uint64_t)v9;
          if (v29 == v46) {
            goto LABEL_71;
          }
        }
        __break(1u);
LABEL_333:
        __break(1u);
LABEL_334:
        __break(1u);
LABEL_335:
        __break(1u);
LABEL_336:
        uint64_t v27 = v31;
        uint64_t v16 = v29;
        continue;
      }
      break;
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v39 = 0;
    uint64_t v9 = (void *)a4;
    uint64_t v11 = v17;
LABEL_87:
    uint64_t v48 = *(unsigned __int16 *)(v11 + 16);
    if (!*(_WORD *)(v11 + 16)) {
      goto LABEL_99;
    }
    uint64_t v49 = *(void *)(v11 + 24);
    BOOL v22 = __OFSUB__(v9, v49);
    uint64_t v50 = (void *)((char *)v9 - v49);
    if (v22) {
      goto LABEL_384;
    }
    if (__OFADD__(v50, 1)) {
      goto LABEL_385;
    }
    if ((uint64_t)v50 + 1 < 1)
    {
      uint64_t v48 = 0;
    }
    else
    {
      if (v48 == 1)
      {
        uint64_t v9 = v50;
LABEL_99:
        if (v9) {
          goto LABEL_383;
        }
        goto LABEL_100;
      }
      uint64_t v51 = (uint64_t *)(v11 + 48);
      uint64_t v52 = 1;
      while (1)
      {
        uint64_t v53 = *v51;
        v51 += 3;
        uint64_t v9 = (void *)((char *)v50 - v53);
        if (__OFSUB__(v50, v53)) {
          goto LABEL_360;
        }
        if (__OFADD__(v9, 1)) {
          goto LABEL_361;
        }
        if ((uint64_t)v9 + 1 < 1) {
          break;
        }
        ++v52;
        uint64_t v50 = v9;
        if (v48 == v52) {
          goto LABEL_99;
        }
      }
      uint64_t v48 = v52;
      uint64_t v9 = v50;
    }
LABEL_100:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v41 = v39 & 0xFFFFFFFFFFFFF0FFLL | (v48 << 8);
    goto LABEL_101;
  }
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
  return result;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v42 = 0;
  uint64_t v4 = *(void *)(result + 64);
  uint64_t v33 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  BOOL v40 = v54;
  uint64_t v8 = (long long *)&v54[3];
  int64_t v34 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v35 = result;
  int64_t v32 = v34 - 1;
  unint64_t v36 = (long long *)&v54[3];
  uint64_t v37 = a2;
  if ((v6 & v4) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  while (2)
  {
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v42 << 6);
LABEL_11:
    BOOL v12 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v3 + 56) + 72 * v11, (uint64_t)v40);
    *(void *)&long long v53 = v13;
    *((void *)&v53 + 1) = v14;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v53, (uint64_t)&v57);
      if (!v58) {
        return 1;
      }
      v51[2] = v61;
      v51[3] = v62;
      uint64_t v52 = v63;
      v51[0] = v59;
      v51[1] = v60;
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v58);
      char v20 = v19;
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0) {
        goto LABEL_43;
      }
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v2 + 56) + 72 * v18, (uint64_t)v50);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v50, (uint64_t)v49);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v51, (uint64_t)v48);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v49, (uint64_t)&v53);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v48, (uint64_t)v8);
      if (v54[1]) {
        break;
      }
      if ((void)v55)
      {
        outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        goto LABEL_42;
      }
      outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v49, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v50);
      uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v51);
      if (v7) {
        goto LABEL_10;
      }
LABEL_12:
      int64_t v15 = v42 + 1;
      if (__OFADD__(v42, 1))
      {
        __break(1u);
        goto LABEL_46;
      }
      if (v15 < v34)
      {
        unint64_t v16 = *(void *)(v33 + 8 * v15);
        if (v16) {
          goto LABEL_15;
        }
        int64_t v17 = v42 + 2;
        ++v42;
        if (v15 + 1 < v34)
        {
          unint64_t v16 = *(void *)(v33 + 8 * v17);
          if (v16) {
            goto LABEL_18;
          }
          int64_t v42 = v15 + 1;
          if (v15 + 2 < v34)
          {
            unint64_t v16 = *(void *)(v33 + 8 * (v15 + 2));
            if (v16)
            {
              v15 += 2;
              goto LABEL_15;
            }
            int64_t v17 = v15 + 3;
            int64_t v42 = v15 + 2;
            if (v15 + 3 < v34)
            {
              unint64_t v16 = *(void *)(v33 + 8 * v17);
              if (v16)
              {
LABEL_18:
                int64_t v15 = v17;
LABEL_15:
                unint64_t v7 = (v16 - 1) & v16;
                unint64_t v11 = __clz(__rbit64(v16)) + (v15 << 6);
                int64_t v42 = v15;
                goto LABEL_11;
              }
              while (1)
              {
                int64_t v15 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  break;
                }
                if (v15 >= v34)
                {
                  int64_t v42 = v32;
                  goto LABEL_29;
                }
                unint64_t v16 = *(void *)(v33 + 8 * v15);
                ++v17;
                if (v16) {
                  goto LABEL_15;
                }
              }
LABEL_46:
              __break(1u);
              return result;
            }
          }
        }
      }
LABEL_29:
      unint64_t v7 = 0;
      uint64_t v56 = 0;
      long long v55 = 0u;
      memset(v54, 0, sizeof(v54));
      long long v53 = 0u;
    }
    if ((void)v55)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v53, (uint64_t)v45);
      outlined init with take of any PredicateExpression<Self.Output == B1>(v8, (uint64_t)v44);
      uint64_t v21 = v46;
      uint64_t v39 = v47;
      uint64_t v38 = __swift_project_boxed_opaque_existential_1(v45, v46);
      unint64_t v41 = &v31;
      uint64_t v22 = *(void *)(v21 - 8);
      MEMORY[0x1F4188790](v38);
      uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v44, (uint64_t)&v43);
      uint64_t v25 = type metadata accessor for Optional();
      uint64_t v26 = *(void *)(v25 - 8);
      MEMORY[0x1F4188790](v25);
      uint64_t v28 = (char *)&v31 - v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      int v29 = swift_dynamicCast();
      uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
      if (v29)
      {
        v30(v28, 0, 1, v21);
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v28, v21);
        char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
      }
      else
      {
        v30(v28, 1, 1, v21);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
        char v9 = 0;
      }
      uint64_t v3 = v35;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
      outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v49, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v50);
      uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v51);
      uint64_t v8 = v36;
      uint64_t v2 = v37;
      if ((v9 & 1) == 0) {
        return 0;
      }
      if (v7) {
        continue;
      }
      goto LABEL_12;
    }
    break;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
LABEL_42:
  outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v49, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v50);
LABEL_43:
  outlined destroy of AttributedString._AttributeValue((uint64_t)v51);
  return 0;
}

{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v44;
  char v45;
  BOOL v46;
  char v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v51 = result;
  uint64_t v2 = 0;
  uint64_t v49 = result + 64;
  uint64_t v3 = 1 << *(unsigned char *)(result + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  uint64_t v5 = v4 & *(void *)(result + 64);
  uint64_t v50 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      uint64_t v56 = (v5 - 1) & v5;
      uint64_t v57 = v2;
      uint64_t v6 = __clz(__rbit64(v5)) | (v2 << 6);
      goto LABEL_24;
    }
    unint64_t v7 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_73;
    }
    if (v7 >= v50) {
      return 1;
    }
    uint64_t v8 = *(void *)(v49 + 8 * v7);
    char v9 = v2 + 1;
    if (!v8)
    {
      char v9 = v2 + 2;
      if (v2 + 2 >= v50) {
        return 1;
      }
      uint64_t v8 = *(void *)(v49 + 8 * v9);
      if (!v8)
      {
        char v9 = v2 + 3;
        if (v2 + 3 >= v50) {
          return 1;
        }
        uint64_t v8 = *(void *)(v49 + 8 * v9);
        if (!v8) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v56 = (v8 - 1) & v8;
    uint64_t v57 = v9;
    uint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_24:
    unint64_t v11 = (uint64_t *)(*(void *)(result + 48) + 16 * v6);
    BOOL v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = (uint64_t *)(*(void *)(result + 56) + 80 * v6);
    int64_t v15 = *v14;
    unint64_t v16 = v14[1];
    int64_t v17 = v14[2];
    unint64_t v18 = v14[3];
    char v19 = v14[5];
    char v20 = v14[7];
    long long v54 = v14[6];
    long long v55 = v14[4];
    uint64_t v21 = v14[8];
    long long v59 = v14[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = v18;
    swift_bridgeObjectRetain();
    long long v60 = v19;
    swift_bridgeObjectRetain();
    uint64_t v58 = v20;
    swift_bridgeObjectRetain();
    uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
    LOBYTE(v18) = v24;
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      goto LABEL_70;
    }
    long long v61 = v16;
    uint64_t v25 = (void *)(*(void *)(a2 + 56) + 80 * v23);
    uint64_t v26 = v25[1];
    uint64_t v27 = v25[2];
    int v29 = v25[3];
    uint64_t v28 = v25[4];
    uint64_t v30 = v25[5];
    uint64_t v31 = v25[6];
    int64_t v32 = v25[7];
    uint64_t v33 = v25[9];
    long long v53 = v25[8];
    if (v26)
    {
      if (!v61
        || (*v25 == v15 ? (int64_t v34 = v26 == v61) : (int64_t v34 = 0),
            !v34
         && (uint64_t v35 = v25[7],
             unint64_t v36 = v25[4],
             uint64_t v37 = _stringCompareWithSmolCheck(_:_:expecting:)(),
             uint64_t v28 = v36,
             int64_t v32 = v35,
             (v37 & 1) == 0)))
      {
LABEL_70:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else if (v61)
    {
      goto LABEL_70;
    }
    if (v29)
    {
      if (!v22) {
        goto LABEL_70;
      }
      if (v27 != v17 || v29 != v22)
      {
        uint64_t v39 = v32;
        BOOL v40 = v28;
        unint64_t v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v28 = v40;
        int64_t v32 = v39;
        if ((v41 & 1) == 0) {
          goto LABEL_70;
        }
      }
    }
    else if (v22)
    {
      goto LABEL_70;
    }
    if (v30)
    {
      int64_t v42 = v59;
      if (!v60) {
        goto LABEL_70;
      }
      if (v28 != v55 || v30 != v60)
      {
        uint64_t v44 = v32;
        uint64_t v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        int64_t v32 = v44;
        if ((v45 & 1) == 0) {
          goto LABEL_70;
        }
      }
    }
    else
    {
      int64_t v42 = v59;
      if (v60) {
        goto LABEL_70;
      }
    }
    if (v32)
    {
      if (!v58) {
        goto LABEL_70;
      }
      uint64_t v46 = v31 == v54 && v32 == v58;
      if (!v46 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_70;
      }
    }
    else if (v58)
    {
      goto LABEL_70;
    }
    if (!v33)
    {
      if (v42) {
        goto LABEL_70;
      }
      goto LABEL_7;
    }
    if (!v42) {
      goto LABEL_70;
    }
    if (v53 == v21 && v33 == v42)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v51;
      uint64_t v5 = v56;
      uint64_t v2 = v57;
    }
    else
    {
      uint64_t v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v51;
      uint64_t v5 = v56;
      uint64_t v2 = v57;
      if ((v48 & 1) == 0) {
        return 0;
      }
    }
  }
  unint64_t v10 = v2 + 4;
  if (v2 + 4 >= v50) {
    return 1;
  }
  uint64_t v8 = *(void *)(v49 + 8 * v10);
  if (v8)
  {
    char v9 = v2 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    char v9 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v9 >= v50) {
      return 1;
    }
    uint64_t v8 = *(void *)(v49 + 8 * v9);
    ++v10;
    if (v8) {
      goto LABEL_23;
    }
  }
LABEL_73:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char v16;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  unint64_t v7 = -1;
  if (v6 < 64) {
    unint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  char v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    BOOL v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      uint64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        uint64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    int64_t v15 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v3 + 48) + v11));
    if ((v16 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * result) != v15) {
      return 0;
    }
  }
  uint64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  unint64_t v7 = -1;
  if (v6 < 64) {
    unint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  char v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    BOOL v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9) {
      return 1;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      uint64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        uint64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    int64_t v15 = *(void *)(*(void *)(v3 + 48) + 8 * v11);
    unint64_t v16 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v11);
    int64_t v17 = *v16;
    unint64_t v18 = v16[1];
    char v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    if (v20)
    {
      uint64_t v21 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v19);
      uint64_t result = *v21;
      if (*v21 == v17 && v21[1] == v18) {
        continue;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        continue;
      }
    }
    return 0;
  }
  uint64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  unint64_t v7 = -1;
  if (v6 < 64) {
    unint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  char v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    BOOL v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9) {
      return 1;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      uint64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        uint64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    int64_t v15 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v11);
    unint64_t v16 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v11);
    int64_t v17 = *v16;
    unint64_t v18 = v16[1];
    char v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    if (v20)
    {
      uint64_t v21 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v19);
      uint64_t result = *v21;
      if (*v21 == v17 && v21[1] == v18) {
        continue;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        continue;
      }
    }
    return 0;
  }
  uint64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  void *v24;
  uint64_t v25;
  char v27;
  int64_t v28;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  unint64_t v7 = -1;
  if (v6 < 64) {
    unint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  uint64_t v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      char v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    unint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v11 >= v28) {
      return 1;
    }
    BOOL v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      uint64_t v4 = v11 + 1;
      if (v11 + 1 >= v28) {
        return 1;
      }
      BOOL v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        uint64_t v4 = v11 + 2;
        if (v11 + 2 >= v28) {
          return 1;
        }
        BOOL v12 = *(void *)(v5 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    uint64_t v14 = 16 * v10;
    int64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    unint64_t v16 = *v15;
    int64_t v17 = v15[1];
    unint64_t v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    char v20 = *v18;
    char v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    uint64_t v23 = v22;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    uint64_t v25 = v24[1];
    if (v25)
    {
      if (!v19) {
        return 0;
      }
      if (*v24 == v20 && v25 == v19)
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          return 0;
        }
      }
    }
    else if (v19)
    {
      goto LABEL_34;
    }
  }
  uint64_t v13 = v11 + 3;
  if (v13 >= v28) {
    return 1;
  }
  BOOL v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    uint64_t v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v28) {
      return 1;
    }
    BOOL v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  unint64_t v7 = -1;
  if (v6 < 64) {
    unint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  char v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    BOOL v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9) {
      return 1;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      uint64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        uint64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    int64_t v15 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v11);
    unint64_t v16 = *v15;
    int64_t v17 = v15[1];
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v3 + 48) + v11));
    if (v19)
    {
      char v20 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v18);
      uint64_t result = *v20;
      if (*v20 == v16 && v20[1] == v17) {
        continue;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        continue;
      }
    }
    return 0;
  }
  uint64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  unint64_t v7 = -1;
  if (v6 < 64) {
    unint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  char v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_23:
    int64_t v15 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v11);
    int64_t v17 = *v15;
    unint64_t v16 = v15[1];
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v3 + 48) + v11));
    if ((v18 & 1) == 0) {
      return 0;
    }
    char v19 = (uint64_t *)(*(void *)(a2 + 56) + 16 * result);
    char v20 = v19[1];
    if (v20)
    {
      if (!v16) {
        return 0;
      }
      uint64_t result = *v19;
      if (*v19 != v17 || v20 != v16)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          return 0;
        }
      }
    }
    else if (v16)
    {
      return 0;
    }
  }
  BOOL v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v12 >= v9) {
    return 1;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v12);
  ++v4;
  if (v13) {
    goto LABEL_22;
  }
  uint64_t v4 = v12 + 1;
  if (v12 + 1 >= v9) {
    return 1;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13) {
    goto LABEL_22;
  }
  uint64_t v4 = v12 + 2;
  if (v12 + 2 >= v9) {
    return 1;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_22:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_23;
  }
  uint64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  outlined init with copy of AttributedString._AttributeValue(a7, (uint64_t)v10);
  swift_bridgeObjectRetain();
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v10, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of (Hashable & Sendable)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Hashable & Sendable)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (key: String, value: AttributedString._AttributeValue)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = &v19[-v12 - 8];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(AssociatedTypeWitness - 8) + 56))(&v19[-v12 - 8], 1, 1, AssociatedTypeWitness, v11);
  unint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
  unint64_t v16 = v15;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v13, a5, a6, (uint64_t)v19);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v19, v14, v16);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t outlined copy of AttributedString.AttributeRunBoundaries?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

id _NSLocalizedStringResourceSwiftWrapper.init(key:defaultValue:table:locale:bundleURL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t *a8)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  long long v18 = *a7;
  uint64_t v27 = *a8;
  long long v28 = *(_OWORD *)(a8 + 1);
  long long v29 = v18;
  char v19 = v8;
  LocalizedStringResource.init(key:defaultValue:table:locale:bundleURL:sandboxExtensionToken:)(a1, a2, a3, a4, a5, a6, &v29, (uint64_t)&v27, (uint64_t)&v30, 0, 0);
  uint64_t v20 = v32;
  uint64_t v21 = v33;
  uint64_t v22 = v36;
  uint64_t v23 = &v19[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  *(void *)uint64_t v23 = v30;
  *(_OWORD *)(v23 + 8) = v31;
  *((void *)v23 + 3) = v20;
  *((void *)v23 + 4) = v21;
  *(_OWORD *)(v23 + 40) = v34;
  *(_OWORD *)(v23 + 56) = v35;
  *((void *)v23 + 9) = v22;
  long long v24 = v38;
  *((_OWORD *)v23 + 5) = v37;
  *((_OWORD *)v23 + 6) = v24;

  v26.receiver = v19;
  v26.super_class = ObjectType;
  return objc_msgSendSuper2(&v26, sel_init);
}

void LocalizedStringResource.init(key:defaultValue:table:locale:bundleURL:sandboxExtensionToken:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, long long *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = a11;
  long long v30 = *a7;
  unint64_t v16 = *(void **)a8;
  uint64_t v17 = *(void *)(a8 + 8);
  uint64_t v18 = *(void *)(a8 + 16);
  swift_retain();
  id v19 = v16;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v22 = objc_msgSend(v19, sel_isFileURL);
    swift_release();
    swift_release();

    if (v22) {
      goto LABEL_9;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  URL.scheme.getter();
  if (!v20)
  {
    swift_release();
    swift_release();

    goto LABEL_14;
  }
  Swift::String v21 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v21._countAndFlagsBits != 1701603686 || v21._object != (void *)0xE400000000000000)
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v15 = a11;
    if (v23) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v15 = a11;
LABEL_9:
  if (a4)
  {
    uint64_t v24 = a5;
    uint64_t v26 = a3;
    uint64_t v25 = a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = a1;
    uint64_t v26 = a1;
    a4 = a2;
    uint64_t v24 = a5;
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
  *(void *)a9 = v25;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = v27;
  *(void *)(a9 + 24) = v26;
  *(void *)(a9 + 32) = a4;
  *(void *)(a9 + 40) = v24;
  *(void *)(a9 + 48) = a6;
  *(_OWORD *)(a9 + 56) = v30;
  *(void *)(a9 + 72) = v19;
  *(void *)(a9 + 80) = v17;
  *(void *)(a9 + 88) = v18;
  *(void *)(a9 + 96) = a10;
  *(void *)(a9 + 104) = v15;
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t PredicateExpressions.OptionalFlatMap.transform.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance _CodingKey()
{
  if (*(unsigned __int8 *)(v0 + 24) - 1 < 2) {
    return *(void *)v0;
  }
  if (*(unsigned char *)(v0 + 24)) {
    return *(void *)(v0 + 16);
  }
  return 0;
}

uint64_t type metadata completion function for PredicateExpressions.Filter()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v70 = a5;
  uint64_t v71 = a6;
  uint64_t v72 = a4;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v69 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v74 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v78 = (char *)&v68 - v16;
  uint64_t v79 = v6;
  uint64_t v17 = *v6;
  uint64_t v18 = *(void *)(a3 + 24);
  uint64_t v73 = a2;
  uint64_t v68 = v18;
  uint64_t v19 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v21 = v20;
  char v22 = specialized Sequence.allSatisfy(_:)(v19, v20);
  uint64_t v75 = v13;
  uint64_t v76 = v12;
  uint64_t v77 = v10;
  if (v22)
  {
    swift_bridgeObjectRetain();
    id v23 = (id)String.hashValue.getter();
    unsigned __int8 v24 = 1;
  }
  else
  {
    uint64_t v25 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v23 = objc_msgSend(v25, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v24 = 0;
  }
  uint64_t v26 = *(void *)(v17 + 88);
  uint64_t v28 = *(void *)(v26 + 16);
  unint64_t v27 = *(void *)(v26 + 24);
  uint64_t v29 = *(void *)(v26 + 32);
  *(void *)(v26 + 16) = v19;
  *(void *)(v26 + 24) = v21;
  *(void *)(v26 + 32) = v23;
  unsigned __int8 v30 = *(unsigned char *)(v26 + 40);
  *(unsigned char *)(v26 + 40) = v24;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v19, v21, (uint64_t)v23, v24);
  uint64_t v31 = v28;
  uint64_t v32 = v17;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v31, v27, v29, v30);
  swift_retain();
  char v33 = specialized Set._Variant.insert(_:)(&v80, v26);
  uint64_t v34 = v80;
  if (v33)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 24) = 0;
    *(void *)(v35 + 32) = 0;
    *(void *)(v35 + 16) = 2;
    *(unsigned char *)(v35 + 40) = -112;
    *(void *)(v35 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v17 + 88) = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v37 = v79[1];
  unsigned __int8 v38 = *(unsigned char *)(v37 + 40);
  uint64_t v39 = v77;
  if ((v38 & 0xF0) != 0x60)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v41 = *(void *)(v37 + 24);
  uint64_t v40 = *(void *)(v37 + 32);
  uint64_t v42 = *(void *)(v37 + 16);
  swift_retain();
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v42, v41, v40, v38);
  uint64_t v43 = specialized OrderedDictionary.subscript.getter(v34, v42, v41, v40);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v42, v41, v40, v38);
  swift_release();
  if (v43)
  {
    if ((*(unsigned char *)(v43 + 40) & 0xF0) == 0x60)
    {
LABEL_13:
      long long v53 = v78;
      unint64_t v54 = v79[2];
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v78, v73, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v53, 0, 1, v9);
      long long v55 = v74;
      uint64_t v56 = v75;
      uint64_t v57 = v76;
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v74, v53, v76);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v55, 1, v9) == 1)
      {
        uint64_t v58 = *(void (**)(char *, uint64_t))(v56 + 8);
        swift_retain();
        v58(v53, v57);
        v58(v55, v57);
        swift_retain();
LABEL_21:
        uint64_t v80 = v32;
        *(void *)&long long v81 = v43;
        *((void *)&v81 + 1) = v54;
        type metadata accessor for _PlistKeyedEncodingContainerBPlist();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_getWitnessTable();
        KeyedEncodingContainer.init<A>(_:)();
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
      }
      uint64_t v79 = (uint64_t *)v34;
      long long v59 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
      long long v60 = v69;
      v59(v69, v55, v9);
      long long v61 = (uint64_t *)swift_allocObject();
      uint64_t v62 = v68;
      v61[5] = v9;
      v61[6] = v62;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v61 + 2);
      v59((char *)boxed_opaque_existential_1, v60, v9);
      uint64_t v64 = *(void (**)(char *, uint64_t))(v56 + 8);
      swift_retain();
      v64(v78, v57);
      v61[7] = v54;
      if (v54 >> 62)
      {
        if (v54 >> 62 != 1)
        {
          uint64_t v67 = 1;
          goto LABEL_20;
        }
        uint64_t v65 = (uint64_t *)((v54 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        uint64_t v65 = (uint64_t *)(v54 + 64);
      }
      uint64_t v66 = *v65;
      uint64_t result = swift_retain();
      uint64_t v67 = v66 + 1;
      if (!__OFADD__(v66, 1))
      {
LABEL_20:
        v61[8] = v67;
        unint64_t v54 = (unint64_t)v61;
        goto LABEL_21;
      }
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
  }
  uint64_t v44 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v44;
  *(void *)(result + 24) = v46;
  *(void *)(result + 32) = v48;
  *(unsigned char *)(result + 40) = 96;
  *(void *)(result + 48) = -1;
  if ((*(unsigned char *)(v37 + 40) & 0xF0) == 0x60)
  {
    uint64_t v43 = result;
    uint64_t v80 = *(void *)(v37 + 16);
    long long v81 = *(_OWORD *)(v37 + 24);
    *(void *)(v37 + 16) = 2;
    *(void *)(v37 + 24) = 0;
    *(void *)(v37 + 32) = 0;
    *(unsigned char *)(v37 + 40) = -112;
    swift_retain_n();
    swift_retain();
    specialized OrderedDictionary.subscript.setter(v43, v34);
    uint64_t v49 = *(void *)(v37 + 16);
    unint64_t v50 = *(void *)(v37 + 24);
    uint64_t v51 = *(void *)(v37 + 32);
    *(void *)(v37 + 16) = v80;
    *(_OWORD *)(v37 + 24) = v81;
    unsigned __int8 v52 = *(unsigned char *)(v37 + 40);
    *(unsigned char *)(v37 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v49, v50, v51, v52);
    swift_release();
    goto LABEL_13;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.subscript.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3 + 32;
  uint64_t v7 = *(void *)(a3 + 16);
  if (a2)
  {
    uint64_t v8 = (void *)(a2 + 16);
    swift_retain();
    a1 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v6, v7, v8);
    uint64_t v7 = v9;
    uint64_t result = swift_release();
    if (v7) {
      return 0;
    }
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_16;
    }
LABEL_4:
    __break(1u);
  }
  if (!v7) {
    return 0;
  }
  uint64_t v11 = a3;
  uint64_t v12 = swift_retain();
  char v13 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v12, a1);
  uint64_t result = swift_release();
  if (v13)
  {
    a1 = 0;
    goto LABEL_16;
  }
  if (v7 == 1) {
    return 0;
  }
  uint64_t v14 = swift_retain();
  char v15 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v14, a1);
  uint64_t result = swift_release();
  if ((v15 & 1) == 0)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v7 - 2;
    uint64_t v18 = v11 + 48;
    while (v17 != v16)
    {
      uint64_t v7 = *(void *)(v18 + 8 * v16);
      uint64_t v19 = swift_retain();
      char v20 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v19, a1);
      uint64_t result = swift_release();
      ++v16;
      if (v20)
      {
        a1 = v16 + 1;
        if (v16 + 1 < 0) {
          goto LABEL_4;
        }
        goto LABEL_16;
      }
    }
    return 0;
  }
  a1 = 1;
LABEL_16:
  if (a1 < *(void *)(a4 + 16)) {
    return swift_retain();
  }
  __break(1u);
  return result;
}

double _NSSwiftTimeZone.daylightSavingTimeOffset.getter()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0;
  __tp.uint64_t tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__darwin_time_t v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  double v4 = (*(double (**)(timespec *, uint64_t, uint64_t))(v1 + 72))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

Swift::Double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneAutoupdating(double a1)
{
  return _TimeZoneAutoupdating.daylightSavingTimeOffset(for:)(*(Foundation::Date *)&a1);
}

double specialized _TimeZoneAutoupdating.daylightSavingTimeOffset(for:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  __darwin_time_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = v1;
  double v6 = (*(double (**)(uint64_t *, uint64_t, uint64_t))(v4 + 72))(&v8, ObjectType, v4);
  swift_unknownObjectRelease();
  return v6;
}

double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneICU()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  partial apply for closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)((uint64_t *)(v1 + 16), &v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  return v3;
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle.UnitWidth()
{
  return swift_getWitnessTable();
}

NSNumber __swiftcall Int64._bridgeToObjectiveC()()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithLongLong_, v1);
}

void URLComponents.queryItems.modify(Swift::OpaquePointer_optional a1)
{
  uint64_t v1 = *(void **)a1.value._rawValue;
  a1.value._rawValue = *(void **)(*(void *)a1.value._rawValue + 160);
  if (a1.is_nil)
  {
    v3.value._rawValue = (void *)swift_bridgeObjectRetain();
    URLComponents._URLComponents.setQueryItems(_:)(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    URLComponents._URLComponents.setQueryItems(_:)(a1);
  }
  swift_bridgeObjectRelease();

  free(v1);
}

NSMutableString *escapedString(NSMutableString *a1, uint64_t a2)
{
  Swift::OpaquePointer_optional v3 = +[NSCharacterSet characterSetWithCharactersInString:a2];
  uint64_t v4 = [(NSString *)a1 rangeOfCharacterFromSet:v3];
  if (a1)
  {
    uint64_t v6 = v5;
    if (v5)
    {
      uint64_t v7 = v4;
      a1 = +[NSString stringWithString:a1];
      do
      {
        [(NSMutableString *)a1 insertString:@"\\"" atIndex:v7];
        if (v7 + v6 + 1 >= [(NSString *)a1 length]) {
          break;
        }
        uint64_t v7 = -[NSString rangeOfCharacterFromSet:options:range:](a1, "rangeOfCharacterFromSet:options:range:", v3, 0);
        uint64_t v6 = v8;
      }
      while (v8);
    }
  }
  return a1;
}

BOOL specialized static Float._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_floatValue);
  if ((~v4 & 0x7F800000) != 0 || (v4 & 0x7FFFFF) == 0)
  {
    unint64_t v6 = specialized Float.init(exactly:)(a1);
    int v7 = v6;
    unint64_t v9 = (v6 & 0x100000000) >> 32;
    BOOL result = (v6 & 0x100000000) == 0;
    int v8 = v7;
  }
  else
  {
    objc_msgSend(a1, sel_floatValue);
    LOBYTE(v9) = 0;
    BOOL result = 1;
  }
  *(_DWORD *)a2 = v8;
  *(unsigned char *)(a2 + 4) = v9 & 1;
  return result;
}

unint64_t specialized Float.init(exactly:)(void *a1)
{
  id v1 = a1;
  unsigned int v2 = *(unsigned __int8 *)objc_msgSend(v1, sel_objCType) - 73;
  if (v2 > 0x28)
  {
LABEL_9:
    objc_msgSend(v1, sel_doubleValue);
    float v4 = v7;
    if (v7 == v4) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v6 = 0;
    unsigned __int8 v5 = 1;
    return v6 | ((unint64_t)v5 << 32);
  }
  if (((1 << v2) & 0x109) == 0)
  {
    if (((1 << v2) & 0x10900000000) != 0)
    {
      unint64_t v3 = specialized Float.init<A>(exactly:)((uint64_t)objc_msgSend(v1, sel_longLongValue));
      if ((v3 & 0x100000000) != 0) {
        goto LABEL_10;
      }
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  unint64_t v3 = specialized Float.init<A>(exactly:)((unint64_t)objc_msgSend(v1, sel_unsignedLongLongValue));
  if ((v3 & 0x100000000) != 0) {
    goto LABEL_10;
  }
LABEL_7:
  float v4 = *(float *)&v3;
LABEL_8:
  unsigned __int8 v5 = 0;
  uint64_t v6 = LODWORD(v4);
  return v6 | ((unint64_t)v5 << 32);
}

uint64_t type metadata completion function for NSObject.KVOSubscription()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

void *NSKeyValueWillChangeBySetMutation@<X0>(void *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v10 = result;
  if (a3)
  {
    switch(*(void *)a5)
    {
      case 1:
        if ((a4 & 1) == 0)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          goto LABEL_33;
        }
        uint64_t v13 = [result valueForKey:a2];
        char v20 = [*(id *)(a5 + 8) intersectsSet:v13];
        unint64_t v21 = *(void **)(a5 + 8);
        if (v20)
        {
          uint64_t result = (void *)[v21 mutableCopy];
          uint64_t v14 = result;
          if (!v13) {
            goto LABEL_33;
          }
          uint64_t result = (void *)[result minusSet:v13];
        }
        else
        {
          uint64_t result = (void *)[v21 copy];
          uint64_t v14 = result;
        }
        uint64_t v13 = 0;
LABEL_33:
        uint64_t v16 = 2;
        goto LABEL_39;
      case 2:
        if ((a4 & 2) == 0) {
          goto LABEL_15;
        }
        uint64_t v17 = [result valueForKey:a2];
        int v18 = [*(id *)(a5 + 8) isSubsetOfSet:v17];
        uint64_t v19 = *(void **)(a5 + 8);
        if (v18)
        {
          uint64_t result = (void *)[v19 copy];
          uint64_t v13 = (uint64_t)result;
        }
        else
        {
          uint64_t result = (void *)[v19 mutableCopy];
          uint64_t v13 = (uint64_t)result;
          if (v17) {
            uint64_t result = (void *)[result intersectSet:v17];
          }
        }
        goto LABEL_30;
      case 3:
        if ((a4 & 2) != 0)
        {
          uint64_t result = objc_msgSend((id)objc_msgSend(result, "valueForKey:", a2), "mutableCopy");
          uint64_t v13 = (uint64_t)result;
          if (*(void *)(a5 + 8)) {
            uint64_t result = objc_msgSend(result, "minusSet:");
          }
        }
        else
        {
LABEL_15:
          uint64_t v13 = 0;
        }
LABEL_30:
        uint64_t v14 = 0;
        uint64_t v16 = 3;
        goto LABEL_39;
      case 4:
        if ((a4 & 2) != 0)
        {
          char v22 = (void *)[result valueForKey:a2];
          uint64_t result = (void *)[v22 mutableCopy];
          uint64_t v13 = (uint64_t)result;
          if (*(void *)(a5 + 8)) {
            uint64_t result = objc_msgSend(result, "minusSet:");
          }
          if ((a4 & 1) == 0)
          {
            uint64_t v14 = 0;
            goto LABEL_38;
          }
          if (v22)
          {
            uint64_t v14 = (void *)[*(id *)(a5 + 8) mutableCopy];
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v13 = 0;
          if ((a4 & 1) == 0)
          {
            uint64_t v16 = 4;
            uint64_t v14 = 0;
            goto LABEL_39;
          }
        }
        char v22 = (void *)[v10 valueForKey:a2];
        uint64_t result = (void *)[*(id *)(a5 + 8) mutableCopy];
        uint64_t v14 = result;
        if (!v22) {
          goto LABEL_38;
        }
LABEL_37:
        uint64_t result = (void *)[v14 minusSet:v22];
LABEL_38:
        uint64_t v16 = 4;
LABEL_39:
        *a7 = v16;
        a7[1] = v13;
        a7[4] = 0;
        char v15 = 1;
        a7[2] = (uint64_t)v14;
        break;
      default:
        uint64_t v16 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        goto LABEL_39;
    }
  }
  else
  {
    if ((a4 & 2) != 0)
    {
      uint64_t result = (void *)[result valueForKeyPath:a2];
      if (!result) {
        uint64_t result = (void *)[MEMORY[0x1E4F1CA98] null];
      }
    }
    else
    {
      uint64_t result = 0;
    }
    char v15 = 0;
    *a7 = 1;
    a7[1] = (uint64_t)result;
    a7[4] = 0;
    a7[2] = 0;
  }
  a7[3] = 0;
  *a6 = v15;
  return result;
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.fragment.setter(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents.fragment.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in _NSSwiftURLComponents.fragment.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (!a3)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 136) = a2;
    *(void *)(a1 + 144) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    uint64_t v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    id v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      uint64_t v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, (uint64_t)v15, 0x40u, 0);
    }
    else
    {
      char v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 64);
    }
    uint64_t v9 = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v27 = a2;
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v27;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      uint64_t v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    uint64_t v9 = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    MEMORY[0x1F4188790](v9);
    v25[2] = &v27;
    char v26 = 64;
    swift_bridgeObjectRetain();
    int v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (uint64_t)v25, a2, a3);
    if (v19)
    {
      unint64_t v20 = (unint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = v20;
  *(void *)(a1 + 144) = v21;
  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyKey and conformance ICULegacyKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyKey and conformance ICULegacyKey;
  if (!lazy protocol witness table cache variable for type ICULegacyKey and conformance ICULegacyKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyKey and conformance ICULegacyKey);
  }
  return result;
}

BOOL StringProtocol.localizedCaseInsensitiveContains<A>(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  v14[0] = LocaleCache.current.getter();
  v14[1] = v10;
  StringProtocol.range<A>(of:options:range:locale:)(a1, 1uLL, 0, 0, 1, v14, a2, a3, a4, a5);
  char v12 = v11;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (v12 & 1) == 0;
}

void partial apply for closure #1 in AttributedString.init(_:attributeTable:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  closure #1 in AttributedString.init(_:attributeTable:options:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void ***)(v4 + 32), *(uint64_t **)(v4 + 40), *(uint64_t **)(v4 + 48), v4 + 56, *(uint64_t **)(v4 + 104), *(void *)(v4 + 112), *(unsigned char **)(v4 + 120));
}

void closure #1 in AttributedString.init(_:attributeTable:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, void **a7, uint64_t *a8, uint64_t *a9, uint64_t a10, uint64_t *a11, uint64_t a12, unsigned char *a13)
{
  unint64_t v146 = a8;
  unint64_t v138 = a7;
  uint64_t v154 = a6;
  uint64_t v139 = a4;
  uint64_t v143 = a3;
  uint64_t v14 = a1;
  unint64_t v142 = a13;
  uint64_t v140 = a12;
  char v141 = a11;
  uint64_t v145 = a10;
  char v144 = a9;
  uint64_t v181 = MEMORY[0x1E4FBC868];
  uint64_t v182 = MEMORY[0x1E4FBC870];
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v157 = a1 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  unint64_t v19 = (char *)&v174 + 8;
  unint64_t v20 = &v184;
  uint64_t v150 = @"NSCocoaErrorDomain";
  int64_t v163 = (unint64_t)(v16 + 63) >> 6;
  int64_t v137 = v163 - 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v21 = 0;
  char v160 = 0;
  uint64_t v148 = MEMORY[0x1E4FBC838] + 8;
  uint64_t v147 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v155 = v14;
  uint64_t v156 = a5;
  uint64_t v159 = (char *)&v174 + 8;
  uint64_t v158 = &v184;
  while (1)
  {
    if (v18)
    {
      unint64_t v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v23 = v22 | (v21 << 6);
LABEL_7:
      uint64_t v24 = *(void *)(v14 + 56);
      *(void *)&long long v174 = *(void *)(*(void *)(v14 + 48) + 8 * v23);
      uint64_t v25 = (void *)v174;
      outlined init with copy of Any(v24 + 32 * v23, (uint64_t)v19);
      id v26 = v25;
      goto LABEL_17;
    }
    int64_t v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    if (v27 < v163)
    {
      unint64_t v28 = *(void *)(v157 + 8 * v27);
      if (v28) {
        goto LABEL_11;
      }
      v21 += 2;
      if (v27 + 1 >= v163)
      {
        int64_t v21 = v27;
      }
      else
      {
        unint64_t v28 = *(void *)(v157 + 8 * v21);
        if (v28) {
          goto LABEL_14;
        }
        int64_t v102 = v27 + 2;
        if (v27 + 2 < v163)
        {
          unint64_t v28 = *(void *)(v157 + 8 * v102);
          if (v28) {
            goto LABEL_54;
          }
          int64_t v21 = v27 + 3;
          if (v27 + 3 >= v163)
          {
            int64_t v21 = v27 + 2;
          }
          else
          {
            unint64_t v28 = *(void *)(v157 + 8 * v21);
            if (v28)
            {
LABEL_14:
              int64_t v27 = v21;
LABEL_11:
              unint64_t v18 = (v28 - 1) & v28;
              unint64_t v23 = __clz(__rbit64(v28)) + (v27 << 6);
              int64_t v21 = v27;
              goto LABEL_7;
            }
            int64_t v102 = v27 + 4;
            if (v27 + 4 < v163)
            {
              unint64_t v28 = *(void *)(v157 + 8 * v102);
              if (!v28)
              {
                while (1)
                {
                  int64_t v27 = v102 + 1;
                  if (__OFADD__(v102, 1)) {
                    goto LABEL_87;
                  }
                  if (v27 >= v163)
                  {
                    int64_t v21 = v137;
                    goto LABEL_16;
                  }
                  unint64_t v28 = *(void *)(v157 + 8 * v27);
                  ++v102;
                  if (v28) {
                    goto LABEL_11;
                  }
                }
              }
LABEL_54:
              int64_t v27 = v102;
              goto LABEL_11;
            }
          }
        }
      }
    }
LABEL_16:
    unint64_t v18 = 0;
    *(void *)&long long v176 = 0;
    long long v175 = 0u;
    long long v174 = 0u;
LABEL_17:
    outlined init with take of LocalePreferences?((uint64_t)&v174, (uint64_t)&v183, &demangling cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?);
    uint64_t v29 = v183;
    if (!v183) {
      break;
    }
    outlined init with take of Any(v20, &v179);
    id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    if (*(void *)(a5 + 16)
      && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v30, v31), (v33 & 1) != 0))
    {
      uint64_t v34 = v14;
      uint64_t v168 = v21;
      uint64_t v35 = (uint64_t *)(*(void *)(a5 + 56) + 16 * v32);
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      swift_bridgeObjectRelease();
      uint64_t v170 = v36;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v166 = type metadata accessor for Optional();
      uint64_t v38 = *(void *)(v166 - 8);
      uint64_t v39 = *(void *)(v38 + 64);
      MEMORY[0x1F4188790](v166);
      uint64_t v164 = (char *)&v136 - v40;
      uint64_t v41 = v180;
      uint64_t v42 = __swift_project_boxed_opaque_existential_1(&v179, v180);
      uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v44 = *(void *)(*(void *)(v41 - 8) + 64);
      char v167 = &v136;
      uint64_t v165 = v38;
      uint64_t v161 = v37;
      if (isClassOrObjCExistentialType)
      {
        if (v44 != 8) {
          goto LABEL_83;
        }
        uint64_t v45 = *v42;
        swift_unknownObjectRetain();
        uint64_t v14 = v34;
      }
      else
      {
        double v103 = MEMORY[0x1F4188790](isClassOrObjCExistentialType);
        (*(void (**)(char *, uint64_t *, uint64_t, double))(v105 + 16))((char *)&v136 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0), v42, v41, v103);
        uint64_t v45 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v14 = v155;
      }
      uint64_t v46 = v170;
      uint64_t v47 = swift_conformsToProtocol2();
      if (v47) {
        uint64_t v48 = v47;
      }
      else {
        uint64_t v48 = 0;
      }
      if (!v47) {
        uint64_t v46 = 0;
      }
      if (!v46)
      {
        unint64_t v153 = &v136;
        unint64_t v56 = AssociatedTypeWitness;
        uint64_t v57 = *(void *)(AssociatedTypeWitness - 8);
        MEMORY[0x1F4188790](v47);
        long long v59 = (char *)&v136 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v152 = &v136;
        *(void *)&long long v174 = v45;
        MEMORY[0x1F4188790](v60);
        swift_unknownObjectRetain();
        char v61 = swift_dynamicCast();
        uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v57 + 56);
        if (v61)
        {
          unint64_t v151 = v18;
          v62((char *)&v136 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v56);
          uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
          v63(v59, (char *)&v136 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), AssociatedTypeWitness);
          uint64_t v64 = v164;
          v63(v164, v59, AssociatedTypeWitness);
          unint64_t v65 = AssociatedTypeWitness;
          swift_unknownObjectRelease();
          goto LABEL_42;
        }
        unint64_t v162 = v45;
        v62((char *)&v136 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v56);
        (*(void (**)(char *, uint64_t))(v165 + 8))((char *)&v136 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), v166);
        uint64_t v74 = v150;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
        id v75 = objc_allocWithZone((Class)NSError);
        uint64_t v76 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v55 = objc_msgSend(v75, sel_initWithDomain_code_userInfo_, v76, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v77 = objc_msgSend(v55, sel_domain);
        id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        uint64_t v80 = v79;

        if (v78 != static String._unconditionallyBridgeFromObjectiveC(_:)(v74) || v80 != v81)
        {
          char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a5 = v156;
          unint64_t v19 = v159;
          unint64_t v20 = v158;
          int64_t v21 = v168;
          if ((v101 & 1) == 0) {
            goto LABEL_85;
          }
          goto LABEL_49;
        }
        swift_bridgeObjectRelease_n();
        a5 = v156;
        goto LABEL_40;
      }
      swift_getAssociatedTypeWitness();
      unint64_t v162 = v45;
      uint64_t v49 = swift_dynamicCastUnknownClass();
      if (v49)
      {
        uint64_t v50 = v49;
        uint64_t v51 = swift_getAssociatedTypeWitness();
        double v52 = MEMORY[0x1F4188790](v51);
        uint64_t v53 = v50;
        unint64_t v54 = v160;
        (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v48 + 32))(v53, v46, v48, v52);
        if (v54)
        {
          swift_unknownObjectRelease();
          id v55 = v54;
          char v160 = 0;
          a5 = v156;
          unint64_t v19 = v159;
          unint64_t v20 = v158;
          int64_t v21 = v168;
          goto LABEL_50;
        }
        unint64_t v151 = v18;
        char v160 = 0;
        uint64_t v64 = v164;
        unint64_t v65 = AssociatedTypeWitness;
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v57 = *(void *)(v65 - 8);
LABEL_42:
        (*(void (**)(char *, void, uint64_t, unint64_t))(v57 + 56))(v64, 0, 1, v65);
        uint64_t v82 = v161;
        uint64_t v83 = v170;
        unint64_t v162 = (*(uint64_t (**)(uint64_t, uint64_t))(v161 + 24))(v170, v161);
        uint64_t AssociatedTypeWitness = v84;
        unint64_t v153 = &v136;
        uint64_t v85 = *(void *)(v57 + 64);
        MEMORY[0x1F4188790](v162);
        uint64_t v149 = (char *)&v136 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v152 = &v136;
        double v87 = MEMORY[0x1F4188790](v86);
        uint64_t v88 = (char *)&v136 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v89 = v166;
        (*(void (**)(char *, double))(v165 + 16))(v88, v87);
        if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v57 + 48))(v88, 1, v65) == 1)
        {
          uint64_t v90 = v165;
          (*(void (**)(char *, uint64_t))(v165 + 8))(v88, v89);
          uint64_t v178 = 0;
          long long v176 = 0u;
          long long v177 = 0u;
          long long v175 = 0u;
          long long v174 = 0u;
          a5 = v156;
          unint64_t v19 = v159;
          unint64_t v20 = v158;
          int64_t v21 = v168;
          unint64_t v18 = v151;
        }
        else
        {
          uint64_t v91 = v57;
          unint64_t v92 = v149;
          uint64_t v93 = (*(uint64_t (**)(void))(v57 + 32))();
          double v94 = MEMORY[0x1F4188790](v93);
          uint64_t v95 = (char *)&v136 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
          char v96 = *(void (**)(char *, char *, unint64_t, double))(v57 + 16);
          v96(v95, v92, v65, v94);
          *((void *)&v172 + 1) = v65;
          *(void *)uint64_t v173 = swift_getAssociatedConformanceWitness();
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v171);
          ((void (*)(uint64_t *, char *, unint64_t))v96)(boxed_opaque_existential_1, v95, v65);
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v82 + 32))(&v174, v83, v82);
          *(_OWORD *)&v173[8] = v174;
          v173[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 40))(v83, v82) & 1;
          uint64_t v98 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 48))(v83, v82);
          unint64_t v99 = *(void (**)(char *, unint64_t))(v91 + 8);
          v99(v95, v65);
          uint64_t v178 = v98;
          long long v176 = *(_OWORD *)v173;
          long long v177 = *(_OWORD *)&v173[16];
          long long v175 = v172;
          long long v174 = v171;
          v99(v92, v65);
          a5 = v156;
          unint64_t v19 = v159;
          unint64_t v20 = v158;
          int64_t v21 = v168;
          unint64_t v18 = v151;
          uint64_t v90 = v165;
        }
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v174, v162, AssociatedTypeWitness);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v90 + 8))(v164, v166);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);

        uint64_t v14 = v155;
      }
      else
      {
        uint64_t v66 = v150;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
        id v67 = objc_allocWithZone((Class)NSError);
        uint64_t v68 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v55 = objc_msgSend(v67, sel_initWithDomain_code_userInfo_, v68, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v69 = objc_msgSend(v55, sel_domain);
        id v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        uint64_t v72 = v71;

        if (v70 != static String._unconditionallyBridgeFromObjectiveC(_:)(v66) || v72 != v73)
        {
          char v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v19 = v159;
          unint64_t v20 = v158;
          int64_t v21 = v168;
          if ((v100 & 1) == 0) {
            goto LABEL_84;
          }
          goto LABEL_49;
        }
        swift_bridgeObjectRelease_n();
LABEL_40:
        unint64_t v19 = v159;
        unint64_t v20 = v158;
        int64_t v21 = v168;
LABEL_49:
        swift_willThrow();
        swift_unknownObjectRelease();
        char v160 = 0;
        uint64_t v14 = v155;
LABEL_50:
        if ((v154 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_willThrow();

          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
          swift_release();
          unint64_t v130 = *v138;
          *unint64_t v138 = v55;
          id v131 = v55;

          unsigned char *v139 = 1;
          return;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v106 = v181;
  uint64_t v107 = v182;
  char v108 = v146;
  uint64_t v170 = *v146;
  uint64_t AssociatedTypeWitness = v146[1];
  uint64_t v168 = v146[2];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  BigString.utf16.getter();
  unint64_t v109 = v144;
  uint64_t v110 = BigString.UTF16View.index(_:offsetBy:)();
  uint64_t v112 = v111;
  uint64_t v114 = v113;
  uint64_t v116 = v115;
  outlined release of Locale((uint64_t)&v183);
  *unint64_t v109 = v110;
  v109[1] = v112;
  v109[2] = v114;
  v109[3] = v116;
  BigString.unicodeScalars.getter();
  uint64_t v117 = BigString.UnicodeScalarView.index(roundingUp:)();
  uint64_t v119 = v118;
  uint64_t v121 = v120;
  uint64_t v123 = v122;
  outlined release of Locale((uint64_t)&v171);
  *char v108 = v117;
  v108[1] = v119;
  v108[2] = v121;
  v108[3] = v123;
  BigString.utf8.getter();
  uint64_t v124 = BigString.UTF8View.distance(from:to:)();
  outlined release of Locale((uint64_t)&v174);
  if (v124 <= 0)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v125 = v141;
  uint64_t v126 = v142;
  if (*v141 < 1) {
    goto LABEL_75;
  }
  uint64_t v127 = v141[1];
  uint64_t v128 = v141[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Dictionary<>.== infix(_:_:)(v127, v106) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_75:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_76;
  }
  char v129 = specialized static Set.== infix(_:_:)(v128, v107);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v129)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (!__OFADD__(*v125, v124))
    {
      *v125 += v124;
      return;
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    return;
  }
LABEL_76:
  uint64_t v132 = *v125;
  if (*v125 >= 1)
  {
    uint64_t v133 = v125[1];
    uint64_t v134 = v125[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.append(_:)(v132, v133, v134);
  }
  *uint64_t v125 = v124;
  v125[1] = v106;
  v125[2] = v107;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*v126)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v135 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v106);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v126 = v135 & 1;
  }
}

uint64_t AttributedString.mergeAttributes(_:mergePolicy:)(uint64_t *a1, char *a2)
{
  unint64_t v3 = v2;
  uint64_t v25 = *a1;
  char v24 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = (void *)*v2;
    long long v5 = *(_OWORD *)(*v2 + 16);
    long long v6 = *(_OWORD *)(*v2 + 48);
    v36[1] = *(_OWORD *)(*v2 + 32);
    void v36[2] = v6;
    v36[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v36);
    swift_unknownObjectRetain();
    *unint64_t v3 = AttributedString.Guts.init(string:runs:)(v36, v7, v8, v9, v10);
    swift_release();
  }
  uint64_t v11 = *v3;
  long long v12 = *(_OWORD *)(v11 + 16);
  long long v13 = *(_OWORD *)(v11 + 48);
  v35[1] = *(_OWORD *)(v11 + 32);
  _OWORD v35[2] = v13;
  v35[0] = v12;
  swift_retain();
  outlined retain of Locale((uint64_t)v35);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v35);
  long long v14 = *(_OWORD *)(v11 + 16);
  long long v15 = *(_OWORD *)(v11 + 48);
  v34[1] = *(_OWORD *)(v11 + 32);
  _OWORD v34[2] = v15;
  v34[0] = v14;
  long long v16 = *(_OWORD *)(v11 + 16);
  v37[1] = *(_OWORD *)(v11 + 32);
  v37[2] = v15;
  v37[0] = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v37, (uint64_t)v38);
  outlined retain of Locale((uint64_t)v38);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v34);
  swift_release();
  long long v17 = *(_OWORD *)(v11 + 32);
  long long v31 = *(_OWORD *)(v11 + 16);
  long long v32 = v17;
  long long v33 = *(_OWORD *)(v11 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v26);
  long long v18 = *(_OWORD *)(v11 + 32);
  long long v28 = *(_OWORD *)(v11 + 16);
  long long v29 = v18;
  long long v30 = *(_OWORD *)(v11 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v27);
  uint64_t v19 = BigString.Index.utf8Offset.getter();
  uint64_t v20 = BigString.Index.utf8Offset.getter();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)((void *)v11, v19, v20, v25, v24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v25);
  if (result)
  {
    uint64_t v22 = swift_bridgeObjectRetain();
    uint64_t v23 = specialized Sequence.compactMap<A>(_:)(v22);
    swift_bridgeObjectRelease();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v19, v20, 0, v23);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_5:
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    v15[2] = v17[2];
    v15[3] = v18;
    uint64_t v16 = v19;
    v15[0] = v17[0];
    v15[1] = v17[1];
    uint64_t v11 = v18;
    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
    if (v11 != 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  int64_t v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v12 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v12);
  ++v8;
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 1;
  if (v12 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 2;
  if (v12 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 3;
  if (v12 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 4;
  if (v12 + 4 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13)
  {
LABEL_24:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_5;
  }
  int64_t v14 = v12 + 5;
  if (v14 >= v6)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, id a3, uint64_t a4)
{
  if (!a1) {
    goto LABEL_15;
  }
  if (!a2)
  {
LABEL_16:
    __break(1u);
    return;
  }
  objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, a1, a4);
  if (a4 < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a4)
  {
    type metadata accessor for NSAttributedStringKey(0);
    uint64_t v7 = a1 - 8;
    uint64_t v8 = a4;
    do
    {
      if (v8 > a4)
      {
        __break(1u);
        goto LABEL_13;
      }
      uint64_t v9 = v8 - 1;
      uint64_t v10 = 8 * v8;
      uint64_t v16 = *(void *)(v7 + 8 * v8);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *(void *)(v7 + v10) = v15;
      uint64_t v8 = v9;
    }
    while (v9);
    uint64_t v11 = a2 - 32;
    uint64_t v12 = 32 * a4;
    uint64_t v13 = a4;
    while (v13 <= a4)
    {
      uint64_t v14 = v13 - 1;
      uint64_t v16 = *(void *)(v11 + 8 * v13 + 24);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      outlined init with take of Any(&v15, (_OWORD *)(v11 + v12));
      v12 -= 32;
      uint64_t v13 = v14;
      if (!v14) {
        return;
      }
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CodingKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _CodingKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t one-time initialization function for inflectionAlternative()
{
  uint64_t result = String._bridgeToObjectiveCImpl()();
  static NSAttributedStringKey.inflectionAlternative = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _CalendarAutoupdating(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _CalendarAutoupdating and conformance _CalendarAutoupdating();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _CalendarAutoupdating and conformance _CalendarAutoupdating()
{
  unint64_t result = lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating;
  if (!lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating)
  {
    type metadata accessor for _CalendarAutoupdating();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.InflectionRuleAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute);
  }
  return result;
}

uint64_t static NSTimer.publish(every:tolerance:on:in:options:)(double a1, uint64_t a2, uint64_t a3, void *a4, void *a5, char *a6)
{
  char v9 = *a6;
  type metadata accessor for NSTimer.TimerPublisher();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 64) = MEMORY[0x1E4FBC868];
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)(v10 + 72) = v13;
  *(double *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = 0;
  *(unsigned char *)(v10 + 32) = 1;
  *(void *)(v10 + 40) = v11;
  *(void *)(v10 + 48) = v12;
  *(unsigned char *)(v10 + 56) = v9;
  return v10;
}

unint64_t lazy protocol witness table accessor for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher()
{
  unint64_t result = lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher;
  if (!lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher)
  {
    type metadata accessor for NSTimer.TimerPublisher();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher);
  }
  return result;
}

uint64_t type metadata accessor for NSTimer.TimerPublisher()
{
  return self;
}

Swift::Bool __swiftcall URL.startAccessingSecurityScopedResource()()
{
  return objc_msgSend(*v0, sel_startAccessingSecurityScopedResource);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance TermOfAddress.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized TermOfAddress.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t specialized TermOfAddress.CodingKeys.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TermOfAddress.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t PredicateExpressions.Equal.description.getter()
{
  _StringGuts.grow(_:)(23);
  v0._uint64_t countAndFlagsBits = 0x686C286C61757145;
  v0._unint64_t object = (void *)0xEB00000000203A73;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v1._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t closure #1 in ICUDateFormatter.DateFormatInfo.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v13 = *a1;
  if (*(void *)(*a1 + 16))
  {
    outlined retain of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v15)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v14);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      swift_bridgeObjectRetain();
      uint64_t result = outlined release of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
      *a6 = v18;
      a6[1] = v17;
      return result;
    }
    outlined release of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
  }
  outlined init with take of LocalePreferences?(a3, (uint64_t)v105, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v137, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  char v21 = v141;
  uint64_t v145 = v6;
  uint64_t v98 = a6;
  if ((v141 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    LOBYTE(v24) = 0;
    LOBYTE(v25) = 0;
    uint64_t v26 = 0;
    v20.i64[0] = 0x3000000050003;
    char v27 = 12;
    char v28 = -1;
    LOBYTE(v29) = 2;
    LOBYTE(v30) = 9;
    LOBYTE(v31) = 6;
    char v21 = 1;
    char v32 = 3;
    LOBYTE(v33) = 3;
    LOBYTE(v34) = 1;
  }
  else
  {
    unint64_t v29 = HIBYTE(v141);
    unint64_t v34 = HIWORD(v141);
    unint64_t v25 = v141 >> 40;
    unint64_t v30 = HIDWORD(v141);
    unint64_t v31 = v141 >> 24;
    unint64_t v33 = v141 >> 16;
    uint64_t v24 = (v141 >> 8) & 1;
    char v32 = v137[0];
    uint64_t v22 = v138;
    v20.i32[0] = v139;
    int16x8_t v20 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v20.i8);
    uint64_t v23 = v140;
    uint64_t v26 = v142;
    char v28 = v143;
    char v27 = v144;
  }
  v118[0] = v32;
  uint64_t v119 = v22;
  unsigned __int32 v120 = vmovn_s16(v20).u32[0];
  uint64_t v121 = v23;
  char v122 = v21;
  char v123 = v24;
  char v124 = v33;
  char v125 = v31;
  char v126 = v30;
  char v127 = v25;
  char v128 = v34;
  char v129 = v29;
  uint64_t v130 = v26;
  char v131 = v28;
  char v132 = v27;
  long long v133 = *(_OWORD *)(a3 + 72);
  long long v103 = *(_OWORD *)(a3 + 104);
  long long v104 = v133;
  long long v106 = *(_OWORD *)(a3 + 104);
  uint64_t v35 = specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)((uint64_t)v118, (uint64_t *)&v133, (uint64_t)&v106);
  uint64_t v101 = v35;
  uint64_t v102 = v36;
  if (a5)
  {
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v133, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
    char v38 = v136;
    if ((v136 & 0xFF000000000000) == 0x3000000000000)
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      LOBYTE(v41) = 0;
      v37.i64[0] = 0x3000000050003;
      LOBYTE(v42) = 9;
      LOBYTE(v43) = 6;
      char v38 = 1;
      char v44 = 3;
      LOBYTE(v45) = 3;
    }
    else
    {
      unint64_t v42 = HIDWORD(v136);
      unint64_t v43 = v136 >> 24;
      unint64_t v45 = v136 >> 16;
      uint64_t v41 = (v136 >> 8) & 1;
      char v44 = v133;
      uint64_t v39 = *((void *)&v133 + 1);
      v37.i32[0] = v134;
      int16x8_t v37 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v37.i8);
      uint64_t v40 = v135;
    }
    LOBYTE(v106) = v44;
    *((void *)&v106 + 1) = v39;
    unsigned __int32 v107 = vmovn_s16(v37).u32[0];
    uint64_t v108 = v40;
    char v109 = v38;
    char v110 = v41;
    char v111 = v45;
    char v112 = v43;
    char v113 = v42;
    __int16 v114 = 526;
    char v115 = 2;
    uint64_t v116 = 0;
    __int16 v117 = 3327;
    long long v99 = v103;
    long long v100 = v104;
    *(void *)&long long v100 = specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)((uint64_t)&v106, (uint64_t *)&v100, (uint64_t)&v99);
    *((void *)&v100 + 1) = v48;
    *(void *)&long long v99 = a4;
    *((void *)&v99 + 1) = a5;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = v101;
    uint64_t v47 = v102;
  }
  else
  {
    uint64_t v46 = v35;
    uint64_t v47 = v36;
  }
  outlined retain of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v100 = *a1;
  uint64_t v50 = v100;
  *a1 = 0x8000000000000000;
  unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v53 = *(void *)(v50 + 16);
  BOOL v54 = (v51 & 1) == 0;
  uint64_t v55 = v53 + v54;
  if (__OFADD__(v53, v54))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(a4) = v51;
    if (*(void *)(v50 + 24) < v55)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, isUniquelyReferenced_nonNull_native);
      uint64_t v56 = v100;
      unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((a4 & 1) != (v58 & 1)) {
        goto LABEL_60;
      }
      unint64_t v52 = v57;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_21:
      long long v59 = (uint64_t *)(*(void *)(v56 + 56) + 16 * v52);
      swift_bridgeObjectRelease();
      uint64_t *v59 = v46;
      v59[1] = v47;
LABEL_57:
      *a1 = v56;
      swift_bridgeObjectRelease();
      uint64_t result = outlined release of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
      uint64_t v93 = v102;
      *uint64_t v98 = v101;
      v98[1] = v93;
      return result;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v56 = v50;
      if (v51) {
        goto LABEL_21;
      }
LABEL_56:
      specialized _NativeDictionary._insert(at:key:value:)(v52, a2, v46, v47, (void *)v56);
      outlined retain of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
      goto LABEL_57;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.PatternCacheKey, String>);
  uint64_t v60 = static _DictionaryStorage.copy(original:)();
  uint64_t v56 = v60;
  if (!*(void *)(v50 + 16))
  {
LABEL_55:
    swift_bridgeObjectRelease();
    if (a4) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
  char v61 = (void *)(v60 + 64);
  unint64_t v62 = (unint64_t)((1 << *(unsigned char *)(v56 + 32)) + 63) >> 6;
  if (v56 != v50 || (unint64_t)v61 >= v50 + 64 + 8 * v62) {
    memmove(v61, (const void *)(v50 + 64), 8 * v62);
  }
  int64_t v63 = 0;
  *(void *)(v56 + 16) = *(void *)(v50 + 16);
  uint64_t v64 = 1 << *(unsigned char *)(v50 + 32);
  uint64_t v65 = -1;
  if (v64 < 64) {
    uint64_t v65 = ~(-1 << v64);
  }
  unint64_t v66 = v65 & *(void *)(v50 + 64);
  uint64_t v94 = v50 + 64;
  int64_t v95 = (unint64_t)(v64 + 63) >> 6;
  while (1)
  {
    if (v66)
    {
      uint64_t v96 = (v66 - 1) & v66;
      int64_t v97 = v63;
      unint64_t v67 = __clz(__rbit64(v66)) | (v63 << 6);
      goto LABEL_31;
    }
    int64_t v89 = v63 + 1;
    if (__OFADD__(v63, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v89 >= v95) {
      goto LABEL_55;
    }
    unint64_t v90 = *(void *)(v94 + 8 * v89);
    int64_t v91 = v63 + 1;
    if (!v90)
    {
      int64_t v91 = v63 + 2;
      if (v63 + 2 >= v95) {
        goto LABEL_55;
      }
      unint64_t v90 = *(void *)(v94 + 8 * v91);
      if (!v90)
      {
        int64_t v91 = v63 + 3;
        if (v63 + 3 >= v95) {
          goto LABEL_55;
        }
        unint64_t v90 = *(void *)(v94 + 8 * v91);
        if (!v90)
        {
          int64_t v91 = v63 + 4;
          if (v63 + 4 >= v95) {
            goto LABEL_55;
          }
          unint64_t v90 = *(void *)(v94 + 8 * v91);
          if (!v90)
          {
            int64_t v91 = v63 + 5;
            if (v63 + 5 >= v95) {
              goto LABEL_55;
            }
            unint64_t v90 = *(void *)(v94 + 8 * v91);
            if (!v90)
            {
              int64_t v91 = v63 + 6;
              if (v63 + 6 >= v95) {
                goto LABEL_55;
              }
              unint64_t v90 = *(void *)(v94 + 8 * v91);
              if (!v90)
              {
                int64_t v91 = v63 + 7;
                if (v63 + 7 >= v95) {
                  goto LABEL_55;
                }
                unint64_t v90 = *(void *)(v94 + 8 * v91);
                if (!v90) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_54:
    uint64_t v96 = (v90 - 1) & v90;
    int64_t v97 = v91;
    unint64_t v67 = __clz(__rbit64(v90)) + (v91 << 6);
LABEL_31:
    uint64_t v68 = 96 * v67;
    uint64_t v69 = *(void *)(v50 + 48) + 96 * v67;
    uint64_t v70 = *(void *)v69;
    uint64_t v71 = *(void *)(v69 + 8);
    char v72 = *(unsigned char *)(v69 + 16);
    char v73 = *(unsigned char *)(v69 + 24);
    uint64_t v74 = *(void *)(v69 + 32);
    uint64_t v75 = *(void *)(v69 + 48);
    char v76 = *(unsigned char *)(v69 + 56);
    char v77 = *(unsigned char *)(v69 + 57);
    __int16 v78 = *(_WORD *)(v69 + 62);
    uint64_t v79 = *(void *)(v69 + 64);
    __int16 v80 = *(_WORD *)(v69 + 72);
    uint64_t v82 = *(void *)(v69 + 80);
    uint64_t v81 = *(void *)(v69 + 88);
    uint64_t v83 = 16 * v67;
    unint64_t v84 = (uint64_t *)(*(void *)(v50 + 56) + v83);
    uint64_t v85 = *v84;
    uint64_t v86 = v84[1];
    uint64_t v87 = *(void *)(v56 + 48) + v68;
    LODWORD(v68) = *(_DWORD *)(v69 + 40);
    LODWORD(v69) = *(_DWORD *)(v69 + 58);
    *(void *)uint64_t v87 = v70;
    *(void *)(v87 + 8) = v71;
    *(unsigned char *)(v87 + 16) = v72;
    *(unsigned char *)(v87 + 24) = v73;
    *(void *)(v87 + 32) = v74;
    *(_DWORD *)(v87 + 40) = v68;
    *(void *)(v87 + 48) = v75;
    *(unsigned char *)(v87 + 56) = v76;
    *(unsigned char *)(v87 + 57) = v77;
    *(_DWORD *)(v87 + 58) = v69;
    *(_WORD *)(v87 + 62) = v78;
    *(void *)(v87 + 64) = v79;
    *(_WORD *)(v87 + 72) = v80;
    *(void *)(v87 + 80) = v82;
    *(void *)(v87 + 88) = v81;
    uint64_t v88 = (void *)(*(void *)(v56 + 56) + v83);
    *uint64_t v88 = v85;
    v88[1] = v86;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v66 = v96;
    int64_t v63 = v97;
  }
  uint64_t v92 = v63 + 8;
  if (v63 + 8 >= v95) {
    goto LABEL_55;
  }
  unint64_t v90 = *(void *)(v94 + 8 * v92);
  if (v90)
  {
    int64_t v91 = v63 + 8;
    goto LABEL_54;
  }
  while (1)
  {
    int64_t v91 = v92 + 1;
    if (__OFADD__(v92, 1)) {
      break;
    }
    if (v91 >= v95) {
      goto LABEL_55;
    }
    unint64_t v90 = *(void *)(v94 + 8 * v91);
    ++v92;
    if (v90) {
      goto LABEL_54;
    }
  }
LABEL_59:
  __break(1u);
LABEL_60:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t *a1)
{
  long long v2 = *((_OWORD *)a1 + 3);
  long long v10 = *((_OWORD *)a1 + 2);
  long long v11 = v2;
  long long v3 = *((_OWORD *)a1 + 5);
  long long v12 = *((_OWORD *)a1 + 4);
  long long v13 = v3;
  long long v4 = *((_OWORD *)a1 + 1);
  long long v8 = *(_OWORD *)a1;
  long long v9 = v4;
  Hasher.init(_seed:)();
  ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v7);
  Swift::Int v5 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v6 = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return v6;
  }
  uint64_t v34 = ~v5;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  int v29 = *((unsigned __int8 *)a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 5);
  v39[0] = *(_OWORD *)(a1 + 3);
  v39[1] = v9;
  v39[2] = *(_OWORD *)(a1 + 7);
  __int16 v40 = *((_WORD *)a1 + 36);
  uint64_t v26 = a1[10];
  uint64_t v27 = a1[11];
  uint64_t v32 = v8;
  uint64_t v33 = v7;
  while (1)
  {
    uint64_t v10 = *(void *)(v36 + 48) + 96 * v6;
    unsigned __int8 v11 = *(unsigned char *)(v10 + 24);
    uint64_t v12 = *(void *)(v10 + 32);
    v4.i32[0] = *(_DWORD *)(v10 + 40);
    uint64_t v13 = *(void *)(v10 + 48);
    char v14 = *(unsigned char *)(v10 + 56);
    char v15 = *(unsigned char *)(v10 + 57);
    v3.i32[0] = *(_DWORD *)(v10 + 58);
    char v16 = *(unsigned char *)(v10 + 62);
    char v17 = *(unsigned char *)(v10 + 63);
    uint64_t v18 = *(void *)(v10 + 64);
    char v19 = *(unsigned char *)(v10 + 72);
    char v20 = *(unsigned char *)(v10 + 73);
    uint64_t v37 = *(void *)(v10 + 80);
    uint64_t v38 = *(void *)(v10 + 88);
    if (*(void *)v10 == v7 && *(void *)(v10 + 8) == v8)
    {
      if (*(unsigned __int8 *)(v10 + 16) != v29) {
        goto LABEL_5;
      }
    }
    else
    {
      int v28 = *(unsigned __int8 *)(v10 + 16);
      unsigned __int8 v31 = *(unsigned char *)(v10 + 24);
      uint64_t v30 = *(void *)(v10 + 32);
      char v22 = *(unsigned char *)(v10 + 56);
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v12 = v30;
      unsigned __int8 v11 = v31;
      if ((v23 & 1) == 0) {
        goto LABEL_5;
      }
      char v14 = v22;
      if (v28 != v29) {
        goto LABEL_5;
      }
    }
    v41[0] = v11;
    uint64_t v42 = v12;
    unsigned __int32 v43 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
    uint64_t v44 = v13;
    char v45 = v14;
    char v46 = v15;
    unsigned __int32 v47 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    char v48 = v16;
    char v49 = v17;
    uint64_t v50 = v18;
    char v51 = v19;
    char v52 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)(v41, (unsigned __int8 *)v39))
    {
LABEL_3:
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if (!v38)
    {
      swift_bridgeObjectRelease();
      if (!v27) {
        goto LABEL_25;
      }
      goto LABEL_4;
    }
    if (!v27) {
      goto LABEL_3;
    }
    if (v37 == v26 && v38 == v27) {
      break;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24) {
      return v6;
    }
LABEL_5:
    uint64_t v7 = v33;
    unint64_t v6 = (v6 + 1) & v34;
    uint64_t v8 = v32;
    if (((*(void *)(v35 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      return v6;
    }
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t outlined retain of ICUDateFormatter.PatternCacheKey(uint64_t a1)
{
  return a1;
}

void ICUDateFormatter.PatternCacheKey.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt v4 = *(unsigned __int8 *)(v2 + 16);
  int v5 = *(unsigned __int8 *)(v2 + 24);
  int v6 = *(unsigned __int8 *)(v2 + 40);
  int v17 = *(unsigned __int8 *)(v2 + 41);
  int v18 = *(unsigned __int8 *)(v2 + 42);
  uint64_t v14 = *(void *)(v2 + 48);
  uint64_t v15 = *(void *)(v2 + 32);
  char v13 = *(unsigned char *)(v2 + 56);
  int v19 = *(unsigned __int8 *)(v2 + 43);
  int v20 = *(unsigned __int8 *)(v2 + 57);
  int v7 = *(unsigned __int8 *)(v2 + 58);
  int v8 = *(unsigned __int8 *)(v2 + 59);
  int v9 = *(unsigned __int8 *)(v2 + 61);
  int v21 = *(unsigned __int8 *)(v2 + 60);
  int v22 = *(unsigned __int8 *)(v2 + 62);
  uint64_t v16 = *(void *)(v2 + 64);
  int v23 = *(unsigned __int8 *)(v2 + 63);
  int v24 = *(unsigned __int8 *)(v2 + 72);
  int v25 = *(unsigned __int8 *)(v2 + 73);
  uint64_t v10 = *(void *)(v2 + 88);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  if (v5 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v6 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v15, v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v17 == 5)
  {
    Hasher._combine(_:)(0);
    if (v18 != 5) {
      goto LABEL_9;
    }
LABEL_24:
    Hasher._combine(_:)(0);
    if (v19 != 3) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v18 == 5) {
    goto LABEL_24;
  }
LABEL_9:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v19 != 3)
  {
LABEL_12:
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!v20) {
      goto LABEL_13;
    }
LABEL_26:
    Hasher._combine(_:)(0);
    if (v7 != 3) {
      goto LABEL_21;
    }
LABEL_27:
    Hasher._combine(_:)(0);
    if (v8 != 6) {
      goto LABEL_22;
    }
LABEL_28:
    Hasher._combine(_:)(0);
    if (v21 == 9) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  if (v20) {
    goto LABEL_26;
  }
LABEL_13:
  Hasher._combine(_:)(1u);
  if ((v13 & 1) == 0)
  {
    uint64_t v11 = 10;
    if (v14 < 10) {
      uint64_t v11 = v14;
    }
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v11;
    }
    MEMORY[0x185302340](103, 0xE100000000000000, v12);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v7 == 3) {
    goto LABEL_27;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v8 == 6) {
    goto LABEL_28;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v21 == 9)
  {
LABEL_32:
    Hasher._combine(_:)(0);
    if (v9 == 14) {
      goto LABEL_33;
    }
LABEL_30:
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v9);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  specialized RawRepresentable<>.hash(into:)();
  if (v9 != 14) {
    goto LABEL_30;
  }
LABEL_33:
  Hasher._combine(_:)(0);
LABEL_34:
  if (v22 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v23 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v24 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v16, v24 & 1);
  }
  if (v25 == 12)
  {
    Hasher._combine(_:)(0);
    if (!v10)
    {
LABEL_45:
      Hasher._combine(_:)(0);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v25);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_45;
    }
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  swift_bridgeObjectRelease();
}

uint64_t outlined release of ICUDateFormatter.PatternCacheKey(uint64_t a1)
{
  return a1;
}

BOOL specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4 = *a1;
  int v5 = *a2;
  if (v4 == 3)
  {
    if (v5 != 3) {
      return 0;
    }
  }
  else
  {
    if (v5 == 3) {
      return 0;
    }
    unint64_t v6 = 0xE400000000000000;
    uint64_t v7 = 1195853639;
    if (v4 != 1)
    {
      uint64_t v7 = 0x4747474747;
      unint64_t v6 = 0xE500000000000000;
    }
    if (*a1) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 71;
    }
    if (v4) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0xE100000000000000;
    }
    unint64_t v10 = 0xE400000000000000;
    uint64_t v11 = 1195853639;
    if (v5 != 1)
    {
      uint64_t v11 = 0x4747474747;
      unint64_t v10 = 0xE500000000000000;
    }
    if (*a2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 71;
    }
    if (*a2) {
      unint64_t v13 = v10;
    }
    else {
      unint64_t v13 = 0xE100000000000000;
    }
    if (v8 == v12 && v9 == v13)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v14 & 1) == 0) {
        return result;
      }
    }
  }
  int v16 = a1[16];
  int v17 = a2[16];
  if (v16 == 255)
  {
    if (v17 != 255) {
      return 0;
    }
  }
  else
  {
    if (v17 == 255) {
      return 0;
    }
    uint64_t v18 = *((void *)a2 + 1);
    uint64_t v19 = Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*((void *)a1 + 1), v16);
    uint64_t v21 = v20;
    if (v19 == Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v18, v17) && v21 == v22)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v23 & 1) == 0) {
        return result;
      }
    }
  }
  int v24 = a1[17];
  int v25 = a2[17];
  if (v24 == 5)
  {
    if (v25 != 5) {
      return 0;
    }
  }
  else if (v25 == 5 || (specialized == infix<A>(_:_:)(v24, v25) & 1) == 0)
  {
    return 0;
  }
  int v26 = a1[18];
  int v27 = a2[18];
  if (v26 == 5)
  {
    if (v27 != 5) {
      return 0;
    }
  }
  else if (v27 == 5 || (specialized == infix<A>(_:_:)(v26, v27) & 1) == 0)
  {
    return 0;
  }
  int v28 = a1[19];
  int v29 = a2[19];
  if (v28 == 3)
  {
    if (v29 != 3) {
      return 0;
    }
  }
  else
  {
    if (v29 == 3) {
      return 0;
    }
    if (a1[19])
    {
      if (v28 == 1)
      {
        unint64_t v30 = 0xE200000000000000;
        uint64_t v31 = 30583;
      }
      else
      {
        unint64_t v30 = 0xE100000000000000;
        uint64_t v31 = 87;
      }
    }
    else
    {
      unint64_t v30 = 0xE100000000000000;
      uint64_t v31 = 119;
    }
    if (a2[19])
    {
      if (v29 == 1)
      {
        unint64_t v32 = 0xE200000000000000;
        uint64_t v33 = 30583;
      }
      else
      {
        unint64_t v32 = 0xE100000000000000;
        uint64_t v33 = 87;
      }
    }
    else
    {
      unint64_t v32 = 0xE100000000000000;
      uint64_t v33 = 119;
    }
    if (v31 == v33 && v30 == v32)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v34 & 1) == 0) {
        return result;
      }
    }
  }
  if (a1[33])
  {
    if (!a2[33]) {
      return 0;
    }
  }
  else if ((a2[33] & 1) != 0 {
         || (specialized == infix<A>(_:_:)(*((void *)a1 + 3), a1[32] & 1, *((void *)a2 + 3), a2[32] & 1) & 1) == 0)
  }
  {
    return 0;
  }
  int v35 = a1[34];
  int v36 = a2[34];
  if (v35 == 3)
  {
    if (v36 != 3) {
      return 0;
    }
  }
  else
  {
    if (v36 == 3) {
      return 0;
    }
    if (a1[34])
    {
      if (v35 == 1)
      {
        unint64_t v37 = 0xE200000000000000;
        uint64_t v38 = 17476;
      }
      else
      {
        unint64_t v37 = 0xE300000000000000;
        uint64_t v38 = 4473924;
      }
    }
    else
    {
      unint64_t v37 = 0xE100000000000000;
      uint64_t v38 = 68;
    }
    if (a2[34])
    {
      if (v36 == 1)
      {
        unint64_t v39 = 0xE200000000000000;
        uint64_t v40 = 17476;
      }
      else
      {
        unint64_t v39 = 0xE300000000000000;
        uint64_t v40 = 4473924;
      }
    }
    else
    {
      unint64_t v39 = 0xE100000000000000;
      uint64_t v40 = 68;
    }
    if (v38 == v40 && v37 == v39)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v41 & 1) == 0) {
        return result;
      }
    }
  }
  int v42 = a1[35];
  int v43 = a2[35];
  if (v42 == 6)
  {
    if (v43 != 6) {
      return 0;
    }
  }
  else if (v43 == 6 || (specialized == infix<A>(_:_:)(v42, v43) & 1) == 0)
  {
    return 0;
  }
  int v44 = a1[36];
  int v45 = a2[36];
  if (v44 == 9)
  {
    if (v45 != 9) {
      return 0;
    }
  }
  else if (v45 == 9 || (specialized == infix<A>(_:_:)(v44, v45) & 1) == 0)
  {
    return 0;
  }
  int v46 = a1[37];
  int v47 = a2[37];
  if (v46 == 14)
  {
    if (v47 != 14) {
      return 0;
    }
  }
  else
  {
    if (v47 == 14) {
      return 0;
    }
    uint64_t v48 = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v46);
    uint64_t v50 = v49;
    if (v48 == Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v47) && v50 == v51)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v52 & 1) == 0) {
        return result;
      }
    }
  }
  int v53 = a1[38];
  int v54 = a2[38];
  if (v53 == 2)
  {
    if (v54 != 2) {
      return 0;
    }
  }
  else
  {
    if (v54 == 2) {
      return 0;
    }
    if (v53) {
      uint64_t v55 = 28013;
    }
    else {
      uint64_t v55 = 109;
    }
    if (v53) {
      unint64_t v56 = 0xE200000000000000;
    }
    else {
      unint64_t v56 = 0xE100000000000000;
    }
    if (v54) {
      uint64_t v57 = 28013;
    }
    else {
      uint64_t v57 = 109;
    }
    if (v54) {
      unint64_t v58 = 0xE200000000000000;
    }
    else {
      unint64_t v58 = 0xE100000000000000;
    }
    if (v55 == v57 && v56 == v58)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v59 & 1) == 0) {
        return result;
      }
    }
  }
  int v60 = a1[39];
  int v61 = a2[39];
  if (v60 == 2)
  {
    if (v61 != 2) {
      return 0;
    }
  }
  else
  {
    if (v61 == 2) {
      return 0;
    }
    if (v60) {
      uint64_t v62 = 29555;
    }
    else {
      uint64_t v62 = 115;
    }
    if (v60) {
      unint64_t v63 = 0xE200000000000000;
    }
    else {
      unint64_t v63 = 0xE100000000000000;
    }
    if (v61) {
      uint64_t v64 = 29555;
    }
    else {
      uint64_t v64 = 115;
    }
    if (v61) {
      unint64_t v65 = 0xE200000000000000;
    }
    else {
      unint64_t v65 = 0xE100000000000000;
    }
    if (v62 == v64 && v63 == v65)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v66 & 1) == 0) {
        return result;
      }
    }
  }
  int v67 = a1[48];
  int v68 = a2[48];
  if (v67 == 255)
  {
    if (v68 != 255) {
      return 0;
    }
  }
  else if (v68 == 255 {
         || (specialized == infix<A>(_:_:)(*((void *)a1 + 5), v67 & 1, *((void *)a2 + 5), v68 & 1) & 1) == 0)
  }
  {
    return 0;
  }
  int v69 = a1[49];
  int v70 = a2[49];
  if (v69 == 12) {
    return v70 == 12;
  }
  if (v70 != 12)
  {
    uint64_t v71 = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v69);
    uint64_t v73 = v72;
    if (v71 == Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v70) && v73 == v74)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v75) {
      return 1;
    }
  }
  return 0;
}

uint64_t Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v7 = 10;
      if (a1 < 10) {
        uint64_t v7 = a1;
      }
      if (v7 <= 1) {
        uint64_t v3 = 1;
      }
      else {
        uint64_t v3 = v7;
      }
      uint64_t v4 = 114;
      return MEMORY[0x185302340](v4, 0xE100000000000000, v3);
    case 2:
      uint64_t v5 = 10;
      if (a1 < 10) {
        uint64_t v5 = a1;
      }
      if (v5 <= 1) {
        uint64_t v3 = 1;
      }
      else {
        uint64_t v3 = v5;
      }
      uint64_t v4 = 117;
      return MEMORY[0x185302340](v4, 0xE100000000000000, v3);
    case 3:
      if (a1) {
        return 31097;
      }
      else {
        return 121;
      }
    default:
      uint64_t v2 = 10;
      if (a1 < 10) {
        uint64_t v2 = a1;
      }
      if (v2 <= 1) {
        uint64_t v3 = 1;
      }
      else {
        uint64_t v3 = v2;
      }
      uint64_t v4 = 121;
      return MEMORY[0x185302340](v4, 0xE100000000000000, v3);
  }
}

uint64_t Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(char a1)
{
  uint64_t result = 106;
  switch(a1)
  {
    case 1:
      uint64_t result = 27242;
      break;
    case 2:
      uint64_t result = 6974058;
      break;
    case 3:
      uint64_t result = 1785358954;
      break;
    case 4:
      uint64_t result = 0x6A6A6A6A6ALL;
      break;
    case 5:
      uint64_t result = 0x6A6A6A6A6A6ALL;
      break;
    case 6:
      uint64_t result = 74;
      break;
    case 7:
      uint64_t result = 19018;
      break;
    case 8:
      uint64_t result = 67;
      break;
    case 9:
      uint64_t result = 17219;
      break;
    case 10:
      uint64_t result = 4408131;
      break;
    case 11:
      uint64_t result = 1128481603;
      break;
    case 12:
      uint64_t result = 0x4343434343;
      break;
    case 13:
      uint64_t result = 0x434343434343;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = 10;
    if (a1 < 10) {
      uint64_t v6 = a1;
    }
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    uint64_t v8 = MEMORY[0x185302340](103, 0xE100000000000000, v7);
    unint64_t v10 = v9;
    if (a4) {
      goto LABEL_8;
    }
LABEL_27:
    uint64_t v17 = 10;
    if (a3 < 10) {
      uint64_t v17 = a3;
    }
    if (v17 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v17;
    }
    uint64_t v19 = MEMORY[0x185302340](103, 0xE100000000000000, v18);
    unint64_t v14 = v20;
    if (v8 != v19) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  unint64_t v15 = 0xE200000000000000;
  uint64_t v16 = 25700;
  if (a1 != 1)
  {
    uint64_t v16 = 70;
    unint64_t v15 = 0xE100000000000000;
  }
  if (a1) {
    uint64_t v8 = v16;
  }
  else {
    uint64_t v8 = 100;
  }
  if (a1) {
    unint64_t v10 = v15;
  }
  else {
    unint64_t v10 = 0xE100000000000000;
  }
  if ((a4 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_8:
  unint64_t v11 = 0xE200000000000000;
  uint64_t v12 = 25700;
  if (a3 != 1)
  {
    uint64_t v12 = 70;
    unint64_t v11 = 0xE100000000000000;
  }
  if (a3) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 100;
  }
  if (a3) {
    unint64_t v14 = v11;
  }
  else {
    unint64_t v14 = 0xE100000000000000;
  }
  if (v8 != v13) {
    goto LABEL_35;
  }
LABEL_33:
  if (v10 != v14)
  {
LABEL_35:
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_36;
  }
  char v21 = 1;
LABEL_36:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  if (a2)
  {
    if (a1) {
      uint64_t v8 = 22873;
    }
    else {
      uint64_t v8 = 89;
    }
    if (a1) {
      unint64_t v10 = 0xE200000000000000;
    }
    else {
      unint64_t v10 = 0xE100000000000000;
    }
    if (a4) {
      goto LABEL_8;
    }
LABEL_23:
    uint64_t v13 = 10;
    if (a3 < 10) {
      uint64_t v13 = a3;
    }
    if (v13 <= 1) {
      unint64_t v14 = 1;
    }
    else {
      unint64_t v14 = v13;
    }
    unint64_t v15 = MEMORY[0x185302340](89, 0xE100000000000000, v14);
    uint64_t v12 = v16;
    if (v8 != v15) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  uint64_t v6 = 10;
  if (a1 < 10) {
    uint64_t v6 = a1;
  }
  if (v6 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = MEMORY[0x185302340](89, 0xE100000000000000, v7);
  unint64_t v10 = v9;
  if ((a4 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_8:
  if (a3) {
    unint64_t v11 = 22873;
  }
  else {
    unint64_t v11 = 89;
  }
  if (a3) {
    uint64_t v12 = 0xE200000000000000;
  }
  else {
    uint64_t v12 = 0xE100000000000000;
  }
  if (v8 != v11) {
    goto LABEL_31;
  }
LABEL_29:
  if (v10 != v12)
  {
LABEL_31:
    uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_32;
  }
  uint64_t v17 = 1;
LABEL_32:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17 & 1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  char v28;

  if (a2) {
    uint64_t v6 = 65;
  }
  else {
    uint64_t v6 = 83;
  }
  if (a1 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = a1;
  }
  if (v7 >= 9) {
    uint64_t v8 = 9;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 != 1)
  {
    swift_bridgeObjectRetain_n();
    v9._uint64_t countAndFlagsBits = v6;
    v9._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    if (v8 != 2)
    {
      swift_bridgeObjectRetain();
      v10._uint64_t countAndFlagsBits = v6;
      v10._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      if (v8 != 3)
      {
        swift_bridgeObjectRetain();
        v11._uint64_t countAndFlagsBits = v6;
        v11._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        if (v8 != 4)
        {
          swift_bridgeObjectRetain();
          v12._uint64_t countAndFlagsBits = v6;
          v12._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v12);
          swift_bridgeObjectRelease();
          if (v8 != 5)
          {
            swift_bridgeObjectRetain();
            v13._uint64_t countAndFlagsBits = v6;
            v13._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v13);
            swift_bridgeObjectRelease();
            if (v8 != 6)
            {
              swift_bridgeObjectRetain();
              v14._uint64_t countAndFlagsBits = v6;
              v14._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v14);
              swift_bridgeObjectRelease();
              if (v8 != 7)
              {
                swift_bridgeObjectRetain();
                v15._uint64_t countAndFlagsBits = v6;
                v15._unint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v15);
                swift_bridgeObjectRelease();
                if (v8 != 8)
                {
                  swift_bridgeObjectRetain();
                  v16._uint64_t countAndFlagsBits = v6;
                  v16._unint64_t object = (void *)0xE100000000000000;
                  String.append(_:)(v16);
                  swift_bridgeObjectRelease();
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if (a4) {
    uint64_t v17 = 65;
  }
  else {
    uint64_t v17 = 83;
  }
  if (a3 <= 1) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = a3;
  }
  if (v18 >= 9) {
    uint64_t v19 = 9;
  }
  else {
    uint64_t v19 = v18;
  }
  if (v19 != 1)
  {
    swift_bridgeObjectRetain_n();
    v20._uint64_t countAndFlagsBits = v17;
    v20._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    if (v19 != 2)
    {
      swift_bridgeObjectRetain();
      v21._uint64_t countAndFlagsBits = v17;
      v21._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      if (v19 != 3)
      {
        swift_bridgeObjectRetain();
        v22._uint64_t countAndFlagsBits = v17;
        v22._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        if (v19 != 4)
        {
          swift_bridgeObjectRetain();
          v23._uint64_t countAndFlagsBits = v17;
          v23._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          if (v19 != 5)
          {
            swift_bridgeObjectRetain();
            v24._uint64_t countAndFlagsBits = v17;
            v24._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v24);
            swift_bridgeObjectRelease();
            if (v19 != 6)
            {
              swift_bridgeObjectRetain();
              v25._uint64_t countAndFlagsBits = v17;
              v25._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v25);
              swift_bridgeObjectRelease();
              if (v19 != 7)
              {
                swift_bridgeObjectRetain();
                v26._uint64_t countAndFlagsBits = v17;
                v26._unint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v26);
                swift_bridgeObjectRelease();
                if (v19 != 8)
                {
                  swift_bridgeObjectRetain();
                  v27._uint64_t countAndFlagsBits = v17;
                  v27._unint64_t object = (void *)0xE100000000000000;
                  String.append(_:)(v27);
                  swift_bridgeObjectRelease();
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if (v6 == v17) {
    int v28 = 1;
  }
  else {
    int v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v28 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 77;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 19789;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 5066061;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1296911693;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x4D4D4D4D4DLL;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 77;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE200000000000000;
      if (v4 == 19789) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE300000000000000;
      if (v4 != 5066061) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xE400000000000000;
      uint64_t v6 = 1296911693;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x4D4D4D4D4DLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = 45;
  }
  if (v2) {
    uint64_t v4 = 0xE100000000000000;
  }
  else {
    uint64_t v4 = 0xE000000000000000;
  }
  if (a2) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = 45;
  }
  if (a2) {
    uint64_t v6 = 0xE000000000000000;
  }
  else {
    uint64_t v6 = 0xE100000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  char v2;

  if (qword_18219EC60[a1] == qword_18219EC60[a2]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 2577447;
  }
  else {
    unint64_t v3 = 32;
  }
  if (v2) {
    uint64_t v4 = 0xE100000000000000;
  }
  else {
    uint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    unint64_t v5 = 2577447;
  }
  else {
    unint64_t v5 = 32;
  }
  if (a2) {
    uint64_t v6 = 0xE300000000000000;
  }
  else {
    uint64_t v6 = 0xE100000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = 58;
  }
  if (v2) {
    uint64_t v4 = 0xE100000000000000;
  }
  else {
    uint64_t v4 = 0xE000000000000000;
  }
  if (a2) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = 58;
  }
  if (a2) {
    uint64_t v6 = 0xE000000000000000;
  }
  else {
    uint64_t v6 = 0xE100000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 110;
  }
  else {
    unint64_t v3 = 0x7961646B656577;
  }
  if (v2) {
    uint64_t v4 = 0xE700000000000000;
  }
  else {
    uint64_t v4 = 0xE100000000000000;
  }
  if (a2) {
    unint64_t v5 = 110;
  }
  else {
    unint64_t v5 = 0x7961646B656577;
  }
  if (a2) {
    uint64_t v6 = 0xE100000000000000;
  }
  else {
    uint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 1885431148;
  }
  else {
    unint64_t v3 = 0x68746E6F6DLL;
  }
  if (v2) {
    uint64_t v4 = 0xE500000000000000;
  }
  else {
    uint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    unint64_t v5 = 1885431148;
  }
  else {
    unint64_t v5 = 0x68746E6F6DLL;
  }
  if (a2) {
    uint64_t v6 = 0xE400000000000000;
  }
  else {
    uint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (a1) {
    uint64_t v2 = 0x6C69746E75;
  }
  else {
    uint64_t v2 = 0x746E756F63;
  }
  if (a2) {
    unint64_t v3 = 0x6C69746E75;
  }
  else {
    unint64_t v3 = 0x746E756F63;
  }
  if (v2 == v3) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 81;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 20817;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 5329233;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1364283729;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x5151515151;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 81;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE200000000000000;
      if (v4 == 20817) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE300000000000000;
      if (v4 != 5329233) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xE400000000000000;
      uint64_t v6 = 1364283729;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x5151515151) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 113;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 29041;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 7434609;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1903260017;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x7171717171;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 113;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE200000000000000;
      if (v4 == 29041) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE300000000000000;
      if (v4 != 7434609) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xE400000000000000;
      uint64_t v6 = 1903260017;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x7171717171) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 76;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 19532;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 5000268;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1280068684;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x4C4C4C4C4CLL;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 76;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE200000000000000;
      if (v4 == 19532) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE300000000000000;
      if (v4 != 5000268) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xE400000000000000;
      uint64_t v6 = 1280068684;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x4C4C4C4C4CLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 99;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 6513507;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1667457891;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x6363636363;
      break;
    case 4:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v4 = 0x636363636363;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 99;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE300000000000000;
      if (v4 == 6513507) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE400000000000000;
      if (v4 != 1667457891) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xE500000000000000;
      uint64_t v6 = 0x6363636363;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xE600000000000000;
      if (v4 != 0x636363636363) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 97;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1633771873;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x6161616161;
      break;
    case 3:
      uint64_t v4 = 98;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1650614882;
      break;
    case 5:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x6262626262;
      break;
    case 6:
      uint64_t v4 = 66;
      break;
    case 7:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1111638594;
      break;
    case 8:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x4242424242;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 97;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE400000000000000;
      if (v4 == 1633771873) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x6161616161) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      if (v4 != 98) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v5 = 0xE400000000000000;
      if (v4 != 1650614882) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x6262626262) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      if (v4 != 66) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      unint64_t v5 = 0xE400000000000000;
      uint64_t v6 = 1111638594;
      goto LABEL_24;
    case 8:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x4242424242) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v4 != v6) {
        goto LABEL_28;
      }
LABEL_25:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_28:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 28013;
  }
  else {
    unint64_t v3 = 109;
  }
  if (v2) {
    uint64_t v4 = 0xE100000000000000;
  }
  else {
    uint64_t v4 = 0xE200000000000000;
  }
  if (a2) {
    unint64_t v5 = 28013;
  }
  else {
    unint64_t v5 = 109;
  }
  if (a2) {
    uint64_t v6 = 0xE200000000000000;
  }
  else {
    uint64_t v6 = 0xE100000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 29555;
  }
  else {
    unint64_t v3 = 115;
  }
  if (v2) {
    uint64_t v4 = 0xE100000000000000;
  }
  else {
    uint64_t v4 = 0xE200000000000000;
  }
  if (a2) {
    unint64_t v5 = 29555;
  }
  else {
    unint64_t v5 = 115;
  }
  if (a2) {
    uint64_t v6 = 0xE200000000000000;
  }
  else {
    uint64_t v6 = 0xE100000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 104;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 26728;
      break;
    case 2:
      uint64_t v4 = 72;
      break;
    case 3:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 18504;
      break;
    case 4:
      uint64_t v4 = 75;
      break;
    case 5:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 19275;
      break;
    case 6:
      uint64_t v4 = 107;
      break;
    case 7:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 27499;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 104;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE200000000000000;
      if (v4 == 26728) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      if (v4 != 72) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 18504) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      if (v4 != 75) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 19275) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      uint64_t v6 = 107;
      goto LABEL_21;
    case 7:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 27499) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v4 != v6) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  char v2;

  if (qword_18219EC98[a1] == qword_18219EC98[a2]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0x7475626972747461;
  }
  else {
    unint64_t v3 = 1936618866;
  }
  if (v2) {
    uint64_t v4 = 0xE400000000000000;
  }
  else {
    uint64_t v4 = 0xEE00656C62615465;
  }
  if (a2) {
    unint64_t v5 = 0x7475626972747461;
  }
  else {
    unint64_t v5 = 1936618866;
  }
  if (a2) {
    uint64_t v6 = 0xEE00656C62615465;
  }
  else {
    uint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  unint64_t v5 = (_OWORD *)(a5[6] + 96 * result);
  long long v6 = a2[3];
  v5[2] = a2[2];
  v5[3] = v6;
  long long v7 = a2[5];
  v5[4] = a2[4];
  v5[5] = v7;
  long long v8 = a2[1];
  _OWORD *v5 = *a2;
  v5[1] = v8;
  unint64_t v9 = (void *)(a5[7] + 16 * result);
  *unint64_t v9 = a3;
  v9[1] = a4;
  uint64_t v10 = a5[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a5[2] = v12;
  }
  return result;
}

void *partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

{
  return partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

void *specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>(void *result@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _DWORD *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }
  return result;
}

void partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  float v8 = specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v5 + 16), *(unsigned char *)(v5 + 17));
  if (!v6) {
    *a5 = v8;
  }
}

float specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  unint64_t v8 = v6;
  uint64_t v11 = a2;
  unint64_t v12 = a1;
  uint64_t v224 = *MEMORY[0x1E4F143B8];
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
      goto LABEL_299;
    }
    char v24 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    unint64_t v218 = a3;
    if (v24 == 48)
    {
      if (v11 >= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v11;
      }
      unint64_t v26 = v12 + v25;
      if (!specialized Collection.isEmpty.getter(v12 + v25, v11 - v25))
      {
        unsigned __int8 v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v26);
        unsigned int v28 = v27;
        BOOL v29 = v27 - 46 > 0x37 || ((1 << (v27 - 46)) & 0x80000000800001) == 0;
        uint64_t v30 = v12;
        if (v29)
        {
          unsigned __int8 v62 = v27;
          __int16 v63 = _asciiNumbers.getter();
          unint64_t v64 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v26, v218, a4);
          uint64_t v66 = v65;
          uint64_t v68 = v67;
          if (v28 < v63 || HIBYTE(v63) < v62)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v55 = xmmword_182112860;
            *(void *)(v55 + 16) = v62;
            *(void *)(v55 + 24) = v64;
            *(void *)(v55 + 32) = v66;
            *(void *)(v55 + 40) = v68;
            goto LABEL_260;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v55 = v64;
          *(void *)(v55 + 8) = v66;
          *(void *)(v55 + 16) = v68;
LABEL_63:
          *(void *)(v55 + 24) = 0;
          *(void *)(v55 + 32) = 0;
          *(void *)(v55 + 40) = 0;
          char v69 = 10;
          goto LABEL_261;
        }
        uint64_t v216 = a4;
        if ((a6 & 1) == 0) {
          goto LABEL_66;
        }
        goto LABEL_44;
      }
    }
    else if ((v24 - 58) < 0xF7u)
    {
      if (v24 != 45)
      {
LABEL_302:
        __break(1u);
        goto LABEL_303;
      }
      if (v11 < 2)
      {
        unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v52 = v51;
        uint64_t v54 = v53;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v55 = 0xD000000000000010;
        *(void *)(v55 + 8) = 0x80000001823ABAE0;
        *(void *)(v55 + 16) = 45;
        goto LABEL_259;
      }
      uint64_t v30 = v12 + 1;
      unsigned __int8 v37 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v37 == 48)
      {
        uint64_t v38 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v38, v39, a3, a4);
        if (v6) {
          return v7;
        }
      }
      else
      {
        unsigned __int8 v70 = v37;
        if ((v37 - 49) >= 9u)
        {
          unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
          uint64_t v52 = v178;
          uint64_t v54 = v179;
          uint64_t v11 = v70;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          unint64_t v126 = 0xD000000000000013;
          char v127 = "after '-' in number";
LABEL_251:
          *(void *)uint64_t v55 = v126;
          *(void *)(v55 + 8) = (unint64_t)(v127 - 32) | 0x8000000000000000;
          goto LABEL_252;
        }
      }
      uint64_t v216 = a4;
      if ((a6 & 1) == 0) {
        goto LABEL_66;
      }
      goto LABEL_44;
    }
    uint64_t v30 = v12;
    uint64_t v216 = a4;
    if ((a6 & 1) == 0)
    {
LABEL_66:
      uint64_t v71 = v12 + v11 - 1;
      unsigned __int8 v72 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v71);
      if ((v72 - 58) > 0xF5u)
      {
        v222 = 0;
        float v89 = _stringshims_strtof_l((const char *)v12, &v222, 0);
        if (v222 && (char *)(v12 + v11) == v222)
        {
          float v7 = v89;
          if ((~LODWORD(v89) & 0x7F800000) == 0) {
            goto LABEL_179;
          }
          if (v89 != 0.0) {
            return v7;
          }
          uint64_t v90 = v11;
          uint64_t v91 = v12;
          if (v11 >= 4)
          {
            do
            {
              unsigned __int8 v92 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91);
              if ((v92 - 49) < 9u) {
                goto LABEL_179;
              }
              if ((v92 | 0x20) == 0x65) {
                return v7;
              }
              unsigned __int8 v93 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91 + 1);
              if ((v93 - 49) < 9u) {
                goto LABEL_179;
              }
              if ((v93 | 0x20) == 0x65) {
                return v7;
              }
              unsigned __int8 v94 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91 + 2);
              if ((v94 - 49) < 9u) {
                goto LABEL_179;
              }
              if ((v94 | 0x20) == 0x65) {
                return v7;
              }
              unsigned __int8 v95 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91 + 3);
              if ((v95 - 49) < 9u) {
                goto LABEL_179;
              }
              if ((v95 | 0x20) == 0x65) {
                return v7;
              }
              uint64_t v91 = specialized BufferView.dropFirst(_:)(4, v91, v90);
              uint64_t v90 = v96;
            }
            while (v96 >= 4);
          }
          goto LABEL_215;
        }
        uint64_t v97 = specialized BufferView.suffix(from:)(v30, v12, v11);
        uint64_t v11 = v97;
        uint64_t v99 = v98;
        unint64_t v100 = v97 + v98;
        if (v98 <= 0)
        {
          unint64_t v108 = v97;
        }
        else
        {
          __int16 v101 = _asciiNumbers.getter();
          unsigned __int8 v102 = v101;
          uint64_t v103 = 0;
          unsigned int v104 = HIBYTE(v101);
          uint64_t v105 = v99;
          while (1)
          {
            if (v103 < 0) {
              goto LABEL_291;
            }
            BOOL v106 = v105-- < 1;
            if (v106) {
              goto LABEL_291;
            }
            unsigned __int8 v107 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v103);
            if (v107 < v102 || v104 < v107) {
              break;
            }
            ++v103;
            unint64_t v108 = v11 + v103;
            if (v11 + v103 >= v100) {
              goto LABEL_118;
            }
          }
          unint64_t v108 = v11 + v103;
        }
LABEL_118:
        if (v108 < v100)
        {
          uint64_t v110 = v108 - v11;
          __int16 v111 = _asciiNumbers.getter();
          unsigned __int8 v113 = v111;
          char v114 = 0;
          uint64_t v207 = v99 + v11;
          uint64_t v205 = -v11;
          char v115 = 1;
          unsigned int v116 = HIBYTE(v111);
          char v117 = 1;
          while (1)
          {
            char v210 = v117;
            char v213 = v115;
            uint64_t v118 = v207 - v108;
            unint64_t v119 = v205 + v108;
            while (1)
            {
              if ((v119 & 0x8000000000000000) != 0 || (BOOL v106 = v118 < 1, --v118, v106))
              {
                __break(1u);
LABEL_254:
                __break(1u);
LABEL_255:
                __break(1u);
LABEL_256:
                unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v100, v112, v216);
                uint64_t v52 = v180;
                uint64_t v54 = v181;
LABEL_257:
                unint64_t v174 = 0xE900000000000072;
                uint64_t v175 = 0x65626D756E206E69;
LABEL_258:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v55 = v175;
                *(void *)(v55 + 8) = v174;
                *(void *)(v55 + 16) = v108;
LABEL_259:
                *(void *)(v55 + 24) = v50;
                *(void *)(v55 + 32) = v52;
                *(void *)(v55 + 40) = v54;
LABEL_260:
                char v69 = 1;
                goto LABEL_261;
              }
              uint64_t v120 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v108);
              uint64_t v11 = v120;
              if (v120 < v113 || v116 < v120) {
                break;
              }
              if (__OFADD__(v110, 1)) {
                goto LABEL_254;
              }
              ++v108;
              ++v110;
              ++v119;
              if (v108 >= v100) {
                goto LABEL_255;
              }
            }
            switch((char)v120)
            {
              case '+':
              case '-':
                if (v110 != 0 || (v114 & 1) == 0) {
                  goto LABEL_139;
                }
                uint64_t v110 = 0;
                char v114 = 0;
                char v115 = 0;
                char v117 = 0;
                if (++v108 >= v100) {
                  goto LABEL_294;
                }
                continue;
              case ',':
              case '/':
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
              case ':':
              case ';':
              case '<':
              case '=':
              case '>':
              case '?':
              case '@':
              case 'A':
              case 'B':
              case 'C':
              case 'D':
                goto LABEL_139;
              case '.':
                if (v110 < 1 || (v210 & 1) == 0) {
                  goto LABEL_139;
                }
                uint64_t v110 = 0;
                char v114 = 0;
                char v117 = 0;
                ++v108;
                char v115 = 1;
                if (v108 < v100) {
                  continue;
                }
                __break(1u);
                goto LABEL_139;
              case 'E':
                goto LABEL_133;
              default:
                if (v120 != 101) {
                  goto LABEL_139;
                }
LABEL_133:
                if (v110 < 1 || (v213 & 1) == 0)
                {
LABEL_139:
                  unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v108, v218, v216);
                  uint64_t v52 = v121;
                  uint64_t v54 = v122;
                  uint64_t v11 = v11;
                  goto LABEL_247;
                }
                uint64_t v110 = 0;
                char v115 = 0;
                char v117 = 0;
                ++v108;
                char v114 = 1;
                if (v108 >= v100) {
                  goto LABEL_295;
                }
                break;
            }
          }
        }
LABEL_305:
        __break(1u);
LABEL_306:
        __break(1u);
        goto LABEL_307;
      }
      unsigned __int8 v73 = v72;
      unint64_t v74 = v218;
      if (!specialized static Comparable.<= infix(_:_:)(v218, v12 + v11 - 1)) {
        goto LABEL_298;
      }
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v218 + v216))
      {
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
        goto LABEL_302;
      }
      unint64_t v75 = specialized min<A>(_:_:)(v12 + v11, v218 + v216);
      if (v75 <= v218)
      {
        uint64_t v86 = 0;
        uint64_t v79 = 1;
        goto LABEL_115;
      }
      unint64_t v76 = v75;
      unint64_t v77 = v216 + v218;
      uint64_t v78 = -(uint64_t)v218;
      uint64_t v79 = 1;
      unint64_t v80 = v218;
      unsigned __int8 v209 = v73;
LABEL_71:
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      unint64_t v83 = v77 - v80;
      unint64_t v84 = v78 + v80;
      while ((uint64_t)(v84 + v82) >= 0 && (uint64_t)(v83 + v81) >= 1)
      {
        int v85 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v80 + v82);
        if (v85 == 10)
        {
          BOOL v87 = __OFADD__(v79++, 1);
          if (!v87)
          {
            v80 += v82 + 1;
            goto LABEL_88;
          }
          goto LABEL_306;
        }
        if (v85 == 13)
        {
          uint64_t v88 = v80 + v82;
          if (!specialized static Comparable.<= infix(_:_:)(v80 + v82 + 1, v71)) {
            goto LABEL_86;
          }
          if (((v80 - v218 + v82 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v82 + v83) >= 1)
          {
            if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v80 + v82 + 1) == 10) {
              uint64_t v88 = v80 + v82 + 1;
            }
LABEL_86:
            BOOL v87 = __OFADD__(v79++, 1);
            if (!v87)
            {
              unint64_t v80 = v88 + 1;
LABEL_88:
              unint64_t v77 = v216 + v218;
              uint64_t v78 = -(uint64_t)v218;
              if (v80 >= v76)
              {
                uint64_t v86 = 0;
LABEL_90:
                unint64_t v74 = v218;
                unsigned __int8 v73 = v209;
LABEL_115:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v109 = 0xD000000000000010;
                *(void *)(v109 + 8) = 0x80000001823ABAE0;
                *(void *)(v109 + 16) = v73;
                *(void *)(v109 + 24) = v79;
                *(void *)(v109 + 32) = v86;
                *(void *)(v109 + 40) = v71 - v74;
                *(unsigned char *)(v109 + 48) = 1;
                goto LABEL_262;
              }
              goto LABEL_71;
            }
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
LABEL_311:
            __break(1u);
LABEL_312:
            __break(1u);
          }
          __break(1u);
LABEL_314:
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
        }
        uint64_t v86 = v82 + 1;
        if (__OFADD__(v82, 1)) {
          goto LABEL_290;
        }
        ++v82;
        --v81;
        if (v80 + v82 >= v76) {
          goto LABEL_90;
        }
      }
      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
      goto LABEL_292;
    }
LABEL_44:
    if (v30 + 1 < v12 + v11)
    {
      uint64_t v40 = v30 - v12 + 1;
      uint64_t v41 = v30;
      while (1)
      {
        uint64_t v42 = v41 + 1;
        if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v41 + 1) | 0x20) == 0x65) {
          break;
        }
        unint64_t v43 = v41 + 2;
        ++v40;
        ++v41;
        if (v43 >= v12 + v11) {
          goto LABEL_66;
        }
      }
      unsigned __int8 v44 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v41);
      __int16 v45 = _asciiNumbers.getter();
      if (v44 < v45 || HIBYTE(v45) < v44)
      {
        if (v40 < 0 || v11 - v40 < 1) {
          goto LABEL_315;
        }
        unsigned __int8 v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v42);
        unint64_t v47 = v42;
        uint64_t v49 = v216;
        unint64_t v48 = v218;
        goto LABEL_246;
      }
    }
    goto LABEL_66;
  }
  if (!a2)
  {
LABEL_292:
    __break(1u);
    goto LABEL_293;
  }
  char v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v13 == 48)
  {
    uint64_t v216 = a4;
    if (v11 >= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v11;
    }
    unint64_t v15 = v12 + v14;
    uint64_t v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      unsigned __int8 v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
      char v18 = 0;
      if (v17 <= 0x57u)
      {
        unint64_t v31 = v12;
        if (v17 == 46 || v17 == 69) {
          goto LABEL_150;
        }
LABEL_57:
        __int16 v56 = _asciiNumbers.getter();
        unint64_t v57 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, a4);
        uint64_t v59 = v58;
        uint64_t v61 = v60;
        if (v17 < v56 || HIBYTE(v56) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v55 = xmmword_182112860;
          *(void *)(v55 + 16) = v17;
          *(void *)(v55 + 24) = v57;
          *(void *)(v55 + 32) = v59;
          *(void *)(v55 + 40) = v61;
          goto LABEL_260;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v55 = v57;
        *(void *)(v55 + 8) = v59;
        *(void *)(v55 + 16) = v61;
        goto LABEL_63;
      }
      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          unsigned __int8 v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19)) {
            goto LABEL_14;
          }
          unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, a4);
          uint64_t v52 = v184;
          uint64_t v54 = v185;
          uint64_t v11 = v19;
          goto LABEL_247;
        }
        if (v16 < 1) {
          goto LABEL_318;
        }
        unsigned __int8 v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        unint64_t v47 = v15;
        unint64_t v48 = a3;
        uint64_t v49 = a4;
LABEL_246:
        unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v47, v48, v49);
        uint64_t v52 = v176;
        uint64_t v54 = v177;
        uint64_t v11 = v46;
LABEL_247:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v55 = xmmword_182112860;
LABEL_252:
        *(void *)(v55 + 16) = v11;
        goto LABEL_259;
      }
      if (v17 != 101)
      {
        if (v17 == 88) {
          goto LABEL_12;
        }
        goto LABEL_57;
      }
LABEL_149:
      unint64_t v31 = v12;
      goto LABEL_150;
    }
LABEL_148:
    char v18 = 0;
    goto LABEL_149;
  }
  if ((v13 - 58) >= 0xF7u)
  {
LABEL_147:
    uint64_t v216 = a4;
    goto LABEL_148;
  }
  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1) {
          goto LABEL_317;
        }
        unsigned __int8 v123 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v52 = v124;
        uint64_t v54 = v125;
        uint64_t v11 = v123;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        unint64_t v126 = 0xD000000000000010;
        char v127 = "at end of number";
        goto LABEL_251;
      }
      unint64_t v31 = v12 + 1;
      unsigned __int8 v32 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v32 == 48)
      {
        uint64_t v33 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        int v35 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)(v33, v34, (unsigned __int8 *)(v12 + 1), a3, a4);
        if (v6) {
          return v7;
        }
        unint64_t v31 = (unint64_t)v35;
        uint64_t v216 = a4;
        if ((v36 & 1) == 0)
        {
          char v18 = 0;
          goto LABEL_150;
        }
LABEL_14:
        if (*(unsigned char *)v12 != 45) {
          goto LABEL_271;
        }
        uint64_t v20 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned char *)v12, v11, 1, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          unint64_t v22 = specialized Float.init<A>(exactly:)(v20);
          if ((v22 & 0x100000000) == 0) {
            return *(float *)&v22;
          }
        }
        goto LABEL_179;
      }
      unsigned __int8 v183 = v32;
      if ((v32 - 49) < 9u) {
        goto LABEL_265;
      }
      if (v32 == 46) {
        goto LABEL_282;
      }
      if (v32 == 78)
      {
        char v18 = 1;
        long long v194 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(v194, v195, a3, a4);
        if (v6) {
          return v7;
        }
        uint64_t v216 = a4;
        goto LABEL_150;
      }
      if (v32 != 73)
      {
        v222 = 0;
        unint64_t v223 = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v196._uint64_t countAndFlagsBits = 0x27207265746661;
        v196._unint64_t object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v196);
        unsigned __int8 v197 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        unsigned int v198 = (v197 + 1);
        if ((v197 & 0x80) != 0) {
          unsigned int v198 = (((v197 & 0x3F) << 8) | (v197 >> 6)) + 33217;
        }
        uint64_t v221 = (v198 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v198) >> 3)) & 7)));
        v199._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v221);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v199);
        swift_bridgeObjectRelease();
        v200._uint64_t countAndFlagsBits = 0x6D756E206E692027;
        v200._unint64_t object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v200);
        long long v201 = v222;
        unint64_t v202 = v223;
        unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v31, a3, a4);
        uint64_t v52 = v203;
        uint64_t v54 = v204;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v55 = v201;
        *(void *)(v55 + 8) = v202;
        *(void *)(v55 + 16) = v183;
        goto LABEL_259;
      }
      char v18 = 1;
      long long v188 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v188, v189, a3, a4);
      if (v6) {
        return v7;
      }
      uint64_t v216 = a4;
LABEL_150:
      uint64_t v130 = v12 + v11 - 1;
      unsigned __int8 v131 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v130);
      if ((v131 | 0x20) != 0x65)
      {
        v222 = 0;
        float v140 = _stringshims_strtof_l((const char *)v12, &v222, 0);
        if (v222 && (char *)(v12 + v11) == v222)
        {
          float v7 = v140;
          if ((~LODWORD(v140) & 0x7F800000) == 0)
          {
            if (v18) {
              return v7;
            }
            goto LABEL_179;
          }
          goto LABEL_213;
        }
        uint64_t v145 = specialized BufferView.suffix(from:)(v31, v12, v11);
        if (v146 < 1) {
          goto LABEL_308;
        }
        uint64_t v147 = v145;
        uint64_t v148 = v146;
        unint64_t v12 = v145 + v146;
        int v149 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v145);
        if (v149 == 45 || (uint64_t v11 = v147, v149 == 43)) {
          uint64_t v11 = v147 + 1;
        }
        unint64_t v220 = a3;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12)) {
          goto LABEL_309;
        }
        if (v11 - v147 < 0) {
          goto LABEL_310;
        }
        if ((uint64_t)(v12 - v11) < 0) {
          goto LABEL_311;
        }
        uint64_t v150 = (const char *)specialized BufferView.prefix(_:)(2, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v150, v151))
        {
          if (v11 < v12)
          {
            __int16 v152 = _asciiNumbers.getter();
            unsigned __int8 v153 = v152;
            char v154 = 0;
            char v155 = 0;
            uint64_t v208 = v148 + v147;
            uint64_t v206 = -v147;
            char v156 = 1;
            unsigned int v157 = HIBYTE(v152);
            while (1)
            {
              char v212 = v156;
              char v215 = v154;
              unint64_t v100 = 0;
              uint64_t v158 = v208 - v11;
              while (1)
              {
                if ((uint64_t)(v206 + v11 + v100) < 0 || (BOOL v106 = v158 < 1, --v158, v106))
                {
                  __break(1u);
LABEL_269:
                  __break(1u);
LABEL_270:
                  __break(1u);
LABEL_271:
                  unint64_t v186 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v12, v11, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v187 & 1) == 0)
                  {
                    unint64_t v22 = specialized Float.init<A>(exactly:)(v186);
                    if ((v22 & 0x100000000) == 0) {
                      return *(float *)&v22;
                    }
                  }
LABEL_179:
                  uint64_t v141 = static String._fromUTF8Repairing(_:)();
                  uint64_t v143 = v142;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v55 = v141;
                  *(void *)(v55 + 8) = v143;
                  *(_OWORD *)(v55 + 16) = 0u;
                  *(_OWORD *)(v55 + 32) = 0u;
                  char v69 = 11;
LABEL_261:
                  *(unsigned char *)(v55 + 48) = v69;
                  goto LABEL_262;
                }
                unsigned __int8 v159 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v100);
                LOBYTE(v108) = v159;
                if (v159 < v153 || v157 < v159) {
                  break;
                }
                if (__OFADD__(v100, 1)) {
                  goto LABEL_269;
                }
                ++v100;
                if (v11 + v100 >= v12) {
                  goto LABEL_270;
                }
              }
              unint64_t v112 = a3;
              switch(v159)
              {
                case '+':
                case '-':
                  if (v100 != 0 || (v215 & 1) == 0) {
                    goto LABEL_256;
                  }
                  char v154 = 0;
                  char v156 = 0;
                  v11 += v100 + 1;
                  char v155 = 3;
                  if (v11 >= v12) {
                    goto LABEL_300;
                  }
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_256;
                case '.':
                  if ((v212 & 1) == 0)
                  {
                    unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v100, a3, v216);
                    uint64_t v52 = v190;
                    uint64_t v54 = v191;
                    LOBYTE(v108) = 46;
                    goto LABEL_257;
                  }
                  char v154 = 0;
                  char v156 = 0;
                  v11 += v100 + 1;
                  char v155 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_213:
                    if (v7 != 0.0) {
                      return v7;
                    }
                    uint64_t v90 = v11;
                    uint64_t v91 = v12;
                    if (v11 >= 4)
                    {
                      do
                      {
                        unsigned __int8 v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91);
                        if ((v162 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v162 | 0x20) == 0x65) {
                          return v7;
                        }
                        unsigned __int8 v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91 + 1);
                        if ((v163 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v163 | 0x20) == 0x65) {
                          return v7;
                        }
                        unsigned __int8 v164 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91 + 2);
                        if ((v164 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v164 | 0x20) == 0x65) {
                          return v7;
                        }
                        unsigned __int8 v165 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91 + 3);
                        if ((v165 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v165 | 0x20) == 0x65) {
                          return v7;
                        }
                        uint64_t v91 = specialized BufferView.dropFirst(_:)(4, v91, v90);
                        uint64_t v90 = v166;
                      }
                      while (v166 >= 4);
                    }
LABEL_215:
                    if (v90 != 1)
                    {
                      if (v90 != 2)
                      {
                        if (v90 != 3) {
                          return v7;
                        }
                        unsigned __int8 v160 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91 + 2);
                        if ((v160 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v160 | 0x20) == 0x65) {
                          return v7;
                        }
                      }
                      unsigned __int8 v161 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91 + 1);
                      if ((v161 - 49) < 9u) {
                        goto LABEL_179;
                      }
                      if ((v161 | 0x20) == 0x65) {
                        return v7;
                      }
                    }
                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91)
                                         - 49) >= 9u)
                      return v7;
                    goto LABEL_179;
                  }
                  break;
                case 'E':
                  goto LABEL_206;
                default:
                  unint64_t v112 = a3;
                  if (v159 != 101) {
                    goto LABEL_256;
                  }
LABEL_206:
                  if (v155 != 1 && (v155 || (uint64_t)v100 < 1)) {
                    goto LABEL_256;
                  }
                  char v156 = 0;
                  v11 += v100 + 1;
                  char v155 = 2;
                  char v154 = 1;
                  if (v11 < v12) {
                    continue;
                  }
                  goto LABEL_301;
              }
            }
          }
          goto LABEL_314;
        }
        unint64_t v167 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v167 >= v12 || ((v167 - v147) & 0x8000000000000000) != 0)
        {
LABEL_242:
          __break(1u);
        }
        else
        {
          uint64_t v168 = v148 + v147 - v11 - 3;
          uint64_t v169 = v11 - v147 + 3;
          while (1)
          {
            uint64_t v170 = v169;
            unsigned __int8 v171 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v167);
            if (!UInt8.isValidHexDigit.getter(v171)) {
              break;
            }
            BOOL v106 = v168-- < 1;
            if (!v106 && ++v167 < v12)
            {
              uint64_t v169 = v170 + 1;
              if ((v170 & 0x8000000000000000) == 0) {
                continue;
              }
            }
            goto LABEL_242;
          }
        }
        LOBYTE(v108) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v167);
        unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v167, v220, v216);
        uint64_t v52 = v172;
        uint64_t v54 = v173;
        unint64_t v174 = 0xED00007265626D75;
        uint64_t v175 = 0x6E20786568206E69;
        goto LABEL_258;
      }
      unsigned __int8 v132 = v131;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1)) {
        goto LABEL_296;
      }
      a4 = v216;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v216)) {
        goto LABEL_297;
      }
      unint64_t v133 = specialized min<A>(_:_:)(v12 + v11, a3 + v216);
      if (v133 <= a3)
      {
        a4 = 0;
        uint64_t v11 = 1;
        goto LABEL_181;
      }
      unint64_t v134 = v133;
      unsigned __int8 v211 = v132;
      unint64_t v135 = v216 + a3;
      uint64_t v136 = -(uint64_t)a3;
      uint64_t v11 = 1;
      uint64_t v217 = -(uint64_t)a3;
      unint64_t v219 = a3;
      unint64_t v8 = a3;
      unint64_t v214 = a4 + a3;
      do
      {
        unint64_t v31 = 0;
        unint64_t v12 = 0;
        a3 = v135 - v8;
        unint64_t v137 = v136 + v8;
        while (1)
        {
          if ((uint64_t)(v137 + v12) < 0 || (uint64_t)(a3 + v31) < 1)
          {
            __break(1u);
LABEL_281:
            __break(1u);
LABEL_282:
            long long v192 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v192, v193, a3, a4);
            if (v8) {
              return v7;
            }
LABEL_265:
            uint64_t v216 = a4;
            char v18 = 0;
            goto LABEL_150;
          }
          int v138 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v8 + v12);
          if (v138 == 10)
          {
            BOOL v87 = __OFADD__(v11++, 1);
            uint64_t v136 = v217;
            if (!v87)
            {
              v8 += v12 + 1;
              goto LABEL_172;
            }
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
            goto LABEL_305;
          }
          if (v138 == 13) {
            break;
          }
          a4 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_281;
          }
          ++v12;
          --v31;
          if (v8 + v12 >= v134) {
            goto LABEL_174;
          }
        }
        uint64_t v139 = v8 + v12;
        a4 = v8 + v12 + 1;
        uint64_t v136 = v217;
        if (!specialized static Comparable.<= infix(_:_:)(a4, v130)) {
          goto LABEL_170;
        }
        if (((v217 + v8 + v12 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v12 + a3) < 1) {
          goto LABEL_312;
        }
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v8 + v12 + 1) == 10) {
          uint64_t v139 = v8 + v12 + 1;
        }
LABEL_170:
        BOOL v87 = __OFADD__(v11++, 1);
        if (v87) {
          goto LABEL_304;
        }
        unint64_t v8 = v139 + 1;
LABEL_172:
        unint64_t v135 = v214;
      }
      while (v8 < v134);
      a4 = 0;
LABEL_174:
      a3 = v219;
      unsigned __int8 v132 = v211;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v144 = 0xD000000000000010;
      *(void *)(v144 + 8) = 0x80000001823ABAE0;
      *(void *)(v144 + 16) = v132;
      *(void *)(v144 + 24) = v11;
      *(void *)(v144 + 32) = a4;
      *(void *)(v144 + 40) = v130 - a3;
      *(unsigned char *)(v144 + 48) = 1;
LABEL_262:
      swift_willThrow();
      return v7;
    case '.':
      char v128 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v128, v129, a3, a4);
      if (!v6) {
        goto LABEL_147;
      }
      return v7;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_142;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_142:
      if (v6) {
        return v7;
      }
      uint64_t v216 = a4;
      char v18 = 1;
      goto LABEL_149;
    default:
      goto LABEL_316;
  }
}

void partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v5 + 32), *(unsigned char *)(v5 + 33));
  if (!v6) {
    *a5 = v8;
  }
}

unsigned __int8 *specialized static JSONScanner.validateLeadingZero(in:fullSource:)(unsigned __int8 *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v4 = *result;
    if ((v4 - 46) > 0x37 || ((1 << (v4 - 46)) & 0x80000000800001) == 0)
    {
      unint64_t v6 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a3, a4);
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      if ((v4 - 58) >= 0xFFFFFFF6)
      {
        *(void *)uint64_t v11 = v6;
        *(void *)(v11 + 8) = v8;
        *(void *)(v11 + 16) = v10;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        char v12 = 10;
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_182112860;
        *(void *)(v11 + 16) = v4;
        *(void *)(v11 + 24) = v6;
        *(void *)(v11 + 32) = v8;
        *(void *)(v11 + 40) = v10;
        char v12 = 1;
      }
      *(unsigned char *)(v11 + 48) = v12;
      return (unsigned __int8 *)swift_willThrow();
    }
  }
  return result;
}

void closure #1 in Double.init(prevalidatedBuffer:)(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v10[1] = *(char **)MEMORY[0x1E4F143B8];
  v10[0] = 0;
  double v6 = _stringshims_strtod_l(a1, v10, 0);
  if (v10[0]) {
    BOOL v7 = &a1[a2] == v10[0];
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = !v7;
  double v9 = v6;
  if (!v7) {
    double v9 = 0.0;
  }
  *(double *)a3 = v9;
  *(unsigned char *)(a3 + 8) = v8;
}

BOOL specialized Collection.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t specialized BufferView.dropFirst(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result >= a3) {
      uint64_t v3 = a3;
    }
    else {
      uint64_t v3 = result;
    }
    return a2 + v3;
  }
  return result;
}

uint64_t partial apply for closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1)
{
  long long v9 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 56) = v4;
  *(void *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.download(from:delegate:), 0, 0);
}

uint64_t _NSAlgToCompAlg(unint64_t a1)
{
  if (a1 >= 5) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Unrecognized compression algorithm value: %ld", a1), 0 reason userInfo]);
  }
  return dword_18224D648[a1];
}

BOOL specialized static NSNotificationCenter.Publisher.== infix(_:_:)(uint64_t a1, void *a2)
{
  if (*(void *)a1 != *a2) {
    return 0;
  }
  uint64_t v3 = (void *)a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = *(void *)(a1 + 16);
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(a1 + 8));
  uint64_t v8 = v7;
  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)(v3) && v8 == v9)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v11 & 1) == 0) {
      return result;
    }
  }
  BOOL result = (v5 | v4) == 0;
  if (v5)
  {
    if (v4) {
      return v5 == v4;
    }
    else {
      return v5 == 0;
    }
  }
  return result;
}

uint64_t AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *a2;
  char v7 = *a3;
  *(unsigned char *)a6 = result;
  *(unsigned char *)(a6 + 1) = v6;
  *(unsigned char *)(a6 + 2) = v7;
  *(void *)(a6 + 8) = a4;
  *(void *)(a6 + 16) = a5;
  *(unsigned char *)(a6 + 24) = 0;
  return result;
}

uint64_t specialized _FileManagerImpl.moveItem(at:to:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void **)a1;
  char v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void **)a2;
  char v215 = *(void **)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  swift_retain();
  id v10 = v5;
  swift_retain();
  uint64_t v213 = v2;
  uint64_t v214 = v4;
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v15 = objc_msgSend(v10, sel_isFileURL);
    swift_release();
    swift_release();

    uint64_t v14 = v6;
    if (v15) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
  v217._uint64_t countAndFlagsBits = (uint64_t)v10;
  v217._unint64_t object = v6;
  uint64_t v218 = v7;
  URL.scheme.getter();
  if (!v11)
  {
    swift_release();
    swift_release();

    uint64_t v14 = v6;
    goto LABEL_15;
  }
  char v12 = v6;
  Swift::String v13 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v13._countAndFlagsBits == 1701603686 && v13._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v14 = v6;
    goto LABEL_10;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v14 = v12;
  if ((v16 & 1) == 0)
  {
LABEL_15:
    id v20 = v10;
    swift_retain_n();
    swift_retain_n();
    id v21 = v20;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v218 = v7;
      id v22 = v21;
      swift_retain();
      swift_retain();
      Swift::String v23 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v23._countAndFlagsBits;
      Swift::String v217 = v23;
      swift_bridgeObjectRetain();
      char v215 = v22;
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v23._object;
      }
      else
      {
        unint64_t object = (unint64_t)v23._object;
        if ((specialized BidirectionalCollection.last.getter(v23._countAndFlagsBits, (unint64_t)v23._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v217._countAndFlagsBits;
          unint64_t object = (unint64_t)v217._object;
        }
      }
      v216._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v39 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
      uint64_t v40 = v216._countAndFlagsBits;
      uint64_t v41 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0) {
        uint64_t v41 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v41)
      {
        id v211 = v14;
        v216._uint64_t countAndFlagsBits = countAndFlagsBits;
        v216._unint64_t object = (void *)object;
        MEMORY[0x1F4188790](v39);
        uint64_t v207 = &v216;
        uint64_t v208 = v40;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v206, countAndFlagsBits, object);
        if (v42 == 1)
        {
          unint64_t v44 = (unint64_t)v216._object;
          Swift::Int v43 = v216._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v43, v44, v40);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v47 = v215;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v47 = v215;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v26 = objc_msgSend(v21, sel__parameterString);
      if (v26)
      {
        unsigned __int8 v27 = v26;
        id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        uint64_t v30 = v29;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v31 = objc_msgSend(v21, sel_path)) != 0)
        {
          unsigned __int8 v32 = v31;
          id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          int v35 = v34;

          v217._uint64_t countAndFlagsBits = (uint64_t)v33;
          v217._unint64_t object = v35;
          swift_bridgeObjectRetain();
          v36._uint64_t countAndFlagsBits = 59;
          v36._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v37._uint64_t countAndFlagsBits = (uint64_t)v28;
          v37._unint64_t object = v30;
          String.append(_:)(v37);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v217._uint64_t countAndFlagsBits = 59;
          v217._unint64_t object = (void *)0xE100000000000000;
          v45._uint64_t countAndFlagsBits = (uint64_t)v28;
          v45._unint64_t object = v30;
          String.append(_:)(v45);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
      id v46 = objc_msgSend(v21, sel_path);
      if (!v46)
      {
        swift_release();
        swift_release();

        goto LABEL_63;
      }
      unint64_t v47 = v46;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      swift_release();
      swift_release();
    }
LABEL_63:
    uint64_t v91 = self;
    uint64_t v92 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v93 = objc_msgSend(v91, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 262, v92, v21, 0, 0, 0, 0);
LABEL_64:
    v93;
    swift_unknownObjectRelease();

    return swift_willThrow();
  }
LABEL_10:
  swift_retain();
  id v17 = v8;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v38 = objc_msgSend(v17, sel_isFileURL);
    swift_release();
    swift_release();

    if (v38) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
  v217._uint64_t countAndFlagsBits = (uint64_t)v17;
  v217._unint64_t object = v215;
  uint64_t v218 = v9;
  URL.scheme.getter();
  if (!v18)
  {
    swift_release();
    swift_release();

    goto LABEL_43;
  }
  Swift::String v19 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v19._countAndFlagsBits == 1701603686 && v19._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0)
  {
LABEL_43:
    id v53 = v17;
    swift_retain_n();
    swift_retain_n();
    id v54 = v53;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v218 = v9;
      id v55 = v54;
      swift_retain();
      swift_retain();
      Swift::String v56 = URL.path(percentEncoded:)(1);
      uint64_t v57 = v56._countAndFlagsBits;
      Swift::String v217 = v56;
      swift_bridgeObjectRetain();
      uint64_t v212 = v9;
      if (String.count.getter() <= 1)
      {
        unint64_t v58 = (unint64_t)v56._object;
      }
      else
      {
        unint64_t v58 = (unint64_t)v56._object;
        if ((specialized BidirectionalCollection.last.getter(v56._countAndFlagsBits, (unint64_t)v56._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t v57 = v217._countAndFlagsBits;
          unint64_t v58 = (unint64_t)v217._object;
        }
      }
      v216._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v85 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
      uint64_t v86 = v216._countAndFlagsBits;
      uint64_t v87 = HIBYTE(v58) & 0xF;
      if ((v58 & 0x2000000000000000) == 0) {
        uint64_t v87 = v57 & 0xFFFFFFFFFFFFLL;
      }
      if (v87)
      {
        v216._uint64_t countAndFlagsBits = v57;
        v216._unint64_t object = (void *)v58;
        MEMORY[0x1F4188790](v85);
        uint64_t v207 = &v216;
        uint64_t v208 = v86;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v206, v57, v58);
        if (v88 == 1)
        {
          unint64_t v89 = (unint64_t)v216._object;
          Swift::Int v90 = v216._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v90, v89, v86);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v59 = objc_msgSend(v54, sel__parameterString);
      if (v59)
      {
        uint64_t v60 = v59;
        id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        __int16 v63 = v62;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v64 = objc_msgSend(v54, sel_path)) != 0)
        {
          uint64_t v65 = v64;
          id v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          uint64_t v68 = v67;

          v217._uint64_t countAndFlagsBits = (uint64_t)v66;
          v217._unint64_t object = v68;
          swift_bridgeObjectRetain();
          v69._uint64_t countAndFlagsBits = 59;
          v69._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v69);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v70._uint64_t countAndFlagsBits = (uint64_t)v61;
          v70._unint64_t object = v63;
          String.append(_:)(v70);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v217._uint64_t countAndFlagsBits = 59;
          v217._unint64_t object = (void *)0xE100000000000000;
          v106._uint64_t countAndFlagsBits = (uint64_t)v61;
          v106._unint64_t object = v63;
          String.append(_:)(v106);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_88;
      }
      id v107 = objc_msgSend(v54, sel_path);
      if (!v107)
      {
        swift_release();
        swift_release();

        goto LABEL_88;
      }
      id v55 = v107;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      swift_release();
      swift_release();
    }
LABEL_88:
    unint64_t v112 = self;
    uint64_t v113 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v114 = objc_msgSend(v112, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 262, v113, v54, 0, 0, 0, 0);
LABEL_89:
    v114;
    swift_unknownObjectRelease();

    return swift_willThrow();
  }
LABEL_39:
  id v49 = v10;
  swift_retain();
  swift_retain();
  uint64_t v212 = v9;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v218 = v7;
    id v209 = v49;
    swift_retain();
    swift_retain();
    Swift::String v50 = URL.path(percentEncoded:)(1);
    uint64_t v51 = v50._countAndFlagsBits;
    Swift::String v217 = v50;
    swift_bridgeObjectRetain();
    id v210 = v49;
    if (String.count.getter() <= 1)
    {
      unint64_t v52 = (unint64_t)v50._object;
    }
    else
    {
      unint64_t v52 = (unint64_t)v50._object;
      if ((specialized BidirectionalCollection.last.getter(v50._countAndFlagsBits, (unint64_t)v50._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v51 = v217._countAndFlagsBits;
        unint64_t v52 = (unint64_t)v217._object;
      }
    }
    v216._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v94 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
    uint64_t v95 = v216._countAndFlagsBits;
    uint64_t v96 = HIBYTE(v52) & 0xF;
    if ((v52 & 0x2000000000000000) == 0) {
      uint64_t v96 = v51 & 0xFFFFFFFFFFFFLL;
    }
    if (v96)
    {
      id v211 = v14;
      v216._uint64_t countAndFlagsBits = v51;
      v216._unint64_t object = (void *)v52;
      MEMORY[0x1F4188790](v94);
      uint64_t v207 = &v216;
      uint64_t v208 = v95;
      swift_bridgeObjectRetain();
      uint64_t v97 = v214;
      uint64_t v98 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v206, v51, v52);
      uint64_t v214 = v97;
      if (v99 == 1)
      {
        unint64_t v100 = (unint64_t)v216._object;
        Swift::Int v101 = v216._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v102 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v101, v100, v95);
        unint64_t v104 = v103;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v211;
        uint64_t v105 = v209;
        id v49 = v210;
        if (!v104) {
          goto LABEL_91;
        }
      }
      else
      {
        __int16 v111 = v98;
        unint64_t v104 = v99;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v211;
        uint64_t v102 = (uint64_t)v111;
        uint64_t v105 = v209;
        id v49 = v210;
        if (!v104)
        {
LABEL_91:
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v102 = 0;
          unint64_t v104 = 0xE000000000000000;
          goto LABEL_92;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v102 = 0;
      unint64_t v104 = 0xE000000000000000;
      uint64_t v105 = v209;
      id v49 = v210;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_92:
    uint64_t v9 = v212;
    swift_release();
    swift_release();
    goto LABEL_93;
  }
  id v71 = objc_msgSend(v49, sel__parameterString);
  if (v71)
  {
    unsigned __int8 v72 = v71;
    id v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    unint64_t v75 = v74;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v76 = objc_msgSend(v49, sel_path)) != 0)
    {
      unint64_t v77 = v76;
      id v210 = v49;
      id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
      uint64_t v79 = v14;
      uint64_t v80 = v9;
      uint64_t v82 = v81;

      v217._uint64_t countAndFlagsBits = (uint64_t)v78;
      v217._unint64_t object = v82;
      swift_bridgeObjectRetain();
      v83._uint64_t countAndFlagsBits = 59;
      v83._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v83);
      uint64_t v9 = v80;
      uint64_t v14 = v79;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v84._uint64_t countAndFlagsBits = (uint64_t)v73;
      v84._unint64_t object = v75;
      String.append(_:)(v84);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      id v49 = v210;
    }
    else
    {
      v217._uint64_t countAndFlagsBits = 59;
      v217._unint64_t object = (void *)0xE100000000000000;
      v108._uint64_t countAndFlagsBits = (uint64_t)v73;
      v108._unint64_t object = v75;
      String.append(_:)(v108);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v102 = v217._countAndFlagsBits;
    unint64_t v104 = (unint64_t)v217._object;
  }
  else
  {
    id v109 = objc_msgSend(v49, sel_path);
    if (v109)
    {
      uint64_t v105 = v109;
      uint64_t v102 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
      unint64_t v104 = v110;
      swift_release();
      swift_release();

LABEL_93:
      goto LABEL_94;
    }
    swift_release();
    swift_release();

    uint64_t v102 = 0;
    unint64_t v104 = 0xE000000000000000;
  }
LABEL_94:
  uint64_t v116 = HIBYTE(v104) & 0xF;
  if ((v104 & 0x2000000000000000) == 0) {
    uint64_t v116 = v102 & 0xFFFFFFFFFFFFLL;
  }
  if (!v116)
  {
    swift_bridgeObjectRelease();
    id v133 = v49;
    swift_retain_n();
    swift_retain_n();
    id v21 = v133;
    if (_foundation_swift_url_feature_enabled())
    {
      v217._uint64_t countAndFlagsBits = (uint64_t)v21;
      v217._unint64_t object = v14;
      uint64_t v218 = v7;
      id v134 = v21;
      swift_retain();
      swift_retain();
      Swift::String v135 = URL.path(percentEncoded:)(1);
      Swift::String v217 = v135;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v135._countAndFlagsBits, (unint64_t)v135._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v216._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v136 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
      uint64_t v137 = v216._countAndFlagsBits;
      uint64_t v138 = v217._countAndFlagsBits;
      uint64_t v139 = v217._object;
      unint64_t v140 = ((unint64_t)v217._object >> 56) & 0xF;
      if (((uint64_t)v217._object & 0x2000000000000000) == 0) {
        unint64_t v140 = v217._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v140)
      {
        char v215 = v134;
        Swift::String v216 = v217;
        MEMORY[0x1F4188790](v136);
        uint64_t v207 = &v216;
        uint64_t v208 = v137;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v206, v138, (unint64_t)v139);
        if (v141 == 1)
        {
          unint64_t v143 = (unint64_t)v216._object;
          Swift::Int v142 = v216._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v142, v143, v137);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v134 = v215;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v156 = objc_msgSend(v21, sel__parameterString);
      if (v156)
      {
        unsigned int v157 = v156;
        id v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v156);
        unsigned __int8 v160 = v159;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v161 = objc_msgSend(v21, sel_path)) != 0)
        {
          unsigned __int8 v162 = v161;
          id v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
          unsigned __int8 v165 = v164;

          v217._uint64_t countAndFlagsBits = (uint64_t)v163;
          v217._unint64_t object = v165;
          swift_bridgeObjectRetain();
          v166._uint64_t countAndFlagsBits = 59;
          v166._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v166);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v167._uint64_t countAndFlagsBits = (uint64_t)v158;
          v167._unint64_t object = v160;
          String.append(_:)(v167);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v217._uint64_t countAndFlagsBits = 59;
          v217._unint64_t object = (void *)0xE100000000000000;
          v199._uint64_t countAndFlagsBits = (uint64_t)v158;
          v199._unint64_t object = v160;
          String.append(_:)(v199);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_166;
      }
      id v198 = objc_msgSend(v21, sel_path);
      if (!v198)
      {
        swift_release();
        swift_release();

        goto LABEL_166;
      }
      id v134 = v198;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
      swift_release();
      swift_release();
    }
LABEL_166:
    unint64_t v202 = self;
    uint64_t v203 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v93 = objc_msgSend(v202, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v203, v21, 0, 0, 0, 0);
    goto LABEL_64;
  }
  id v117 = v17;
  swift_retain();
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    v217._uint64_t countAndFlagsBits = (uint64_t)v117;
    v217._unint64_t object = v215;
    uint64_t v218 = v9;
    id v211 = v117;
    swift_retain();
    swift_retain();
    Swift::String v118 = URL.path(percentEncoded:)(1);
    Swift::String v217 = v118;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v118._countAndFlagsBits, (unint64_t)v118._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v216._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v119 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
    uint64_t v120 = v216._countAndFlagsBits;
    uint64_t v121 = v217._countAndFlagsBits;
    uint64_t v122 = v217._object;
    unint64_t v123 = ((unint64_t)v217._object >> 56) & 0xF;
    if (((uint64_t)v217._object & 0x2000000000000000) == 0) {
      unint64_t v123 = v217._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v123)
    {
      id v210 = (id)v102;
      Swift::String v216 = v217;
      MEMORY[0x1F4188790](v119);
      uint64_t v207 = &v216;
      uint64_t v208 = v120;
      swift_bridgeObjectRetain();
      uint64_t v124 = v121;
      uint64_t v125 = v214;
      unint64_t v126 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v206, v124, (unint64_t)v122);
      uint64_t v214 = v125;
      if (v127 == 1)
      {
        unint64_t v128 = (unint64_t)v216._object;
        Swift::Int v129 = v216._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v130 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v129, v128, v120);
        unint64_t v132 = v131;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v130 = (uint64_t)v126;
        unint64_t v132 = v127;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v102 = (uint64_t)v210;
      uint64_t v169 = v211;
      if (!v132)
      {
        uint64_t v173 = v212;
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v130 = 0;
        unint64_t v132 = 0xE000000000000000;
        goto LABEL_133;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v130 = 0;
      unint64_t v132 = 0xE000000000000000;
      uint64_t v169 = v211;
    }
    uint64_t v173 = v212;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_133:
    swift_release();
    swift_release();

    uint64_t v9 = v173;
    goto LABEL_134;
  }
  id v144 = objc_msgSend(v117, sel__parameterString);
  if (v144)
  {
    uint64_t v145 = v144;
    id v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
    uint64_t v148 = v147;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v149 = objc_msgSend(v117, sel_path)) != 0)
    {
      uint64_t v150 = v149;
      id v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
      unsigned __int8 v153 = v152;

      v217._uint64_t countAndFlagsBits = (uint64_t)v151;
      v217._unint64_t object = v153;
      swift_bridgeObjectRetain();
      v154._uint64_t countAndFlagsBits = 59;
      v154._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v154);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v155._uint64_t countAndFlagsBits = (uint64_t)v146;
      v155._unint64_t object = v148;
      String.append(_:)(v155);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v217._uint64_t countAndFlagsBits = 59;
      v217._unint64_t object = (void *)0xE100000000000000;
      v168._uint64_t countAndFlagsBits = (uint64_t)v146;
      v168._unint64_t object = v148;
      String.append(_:)(v168);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v130 = v217._countAndFlagsBits;
    unint64_t v132 = (unint64_t)v217._object;
  }
  else
  {
    id v170 = objc_msgSend(v117, sel_path);
    if (v170)
    {
      unsigned __int8 v171 = v170;
      uint64_t v130 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v170);
      unint64_t v132 = v172;
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();

      uint64_t v130 = 0;
      unint64_t v132 = 0xE000000000000000;
    }
  }
LABEL_134:
  uint64_t v174 = HIBYTE(v132) & 0xF;
  if ((v132 & 0x2000000000000000) == 0) {
    uint64_t v174 = v130 & 0xFFFFFFFFFFFFLL;
  }
  if (!v174)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v175 = v117;
    swift_retain_n();
    swift_retain_n();
    id v54 = v175;
    if (_foundation_swift_url_feature_enabled())
    {
      v217._uint64_t countAndFlagsBits = (uint64_t)v54;
      v217._unint64_t object = v215;
      uint64_t v218 = v9;
      id v176 = v54;
      swift_retain();
      swift_retain();
      Swift::String v177 = URL.path(percentEncoded:)(1);
      Swift::String v217 = v177;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v177._countAndFlagsBits, (unint64_t)v177._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v216._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v178 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
      uint64_t v179 = v216._countAndFlagsBits;
      uint64_t v180 = v217._countAndFlagsBits;
      uint64_t v181 = v217._object;
      unint64_t v182 = ((unint64_t)v217._object >> 56) & 0xF;
      if (((uint64_t)v217._object & 0x2000000000000000) == 0) {
        unint64_t v182 = v217._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v182)
      {
        Swift::String v216 = v217;
        MEMORY[0x1F4188790](v178);
        uint64_t v207 = &v216;
        uint64_t v208 = v179;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v206, v180, (unint64_t)v181);
        if (v183 == 1)
        {
          unint64_t v184 = (unint64_t)v216._object;
          Swift::Int v185 = v216._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v185, v184, v179);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v186 = objc_msgSend(v54, sel__parameterString);
      if (v186)
      {
        char v187 = v186;
        id v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v186);
        uint64_t v190 = v189;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v191 = objc_msgSend(v54, sel_path)) != 0)
        {
          long long v192 = v191;
          id v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v191);
          uint64_t v195 = v194;

          v217._uint64_t countAndFlagsBits = (uint64_t)v193;
          v217._unint64_t object = v195;
          swift_bridgeObjectRetain();
          v196._uint64_t countAndFlagsBits = 59;
          v196._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v196);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v197._uint64_t countAndFlagsBits = (uint64_t)v188;
          v197._unint64_t object = v190;
          String.append(_:)(v197);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v217._uint64_t countAndFlagsBits = 59;
          v217._unint64_t object = (void *)0xE100000000000000;
          v201._uint64_t countAndFlagsBits = (uint64_t)v188;
          v201._unint64_t object = v190;
          String.append(_:)(v201);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_170;
      }
      id v200 = objc_msgSend(v54, sel_path);
      if (!v200)
      {
        swift_release();
        swift_release();

        goto LABEL_170;
      }
      id v176 = v200;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
      swift_release();
      swift_release();
    }
LABEL_170:
    uint64_t v204 = self;
    uint64_t v205 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v114 = objc_msgSend(v204, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v205, v54, 0, 0, 0, 0);
    goto LABEL_89;
  }
  specialized _FileManagerImpl.moveItem(atPath:toPath:options:)(v102, v104, v130, v132);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _NSFileManagerBridge.createFile(atPath:contents:attributes:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v74 = OBJC_IVAR____NSFileManagerBridge__impl;
  uint64_t v82 = a5;
  if (!a5)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    goto LABEL_12;
  }
  if (!*(void *)(a5 + 16))
  {
    long long v80 = 0u;
    long long v81 = 0u;
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  id v10 = @"NSFileProtectionKey";
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v12 & 1) == 0)
  {
    long long v80 = 0u;
    long long v81 = 0u;

    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a5 + 56) + 32 * v11, (uint64_t)&v80);

  if (!*((void *)&v81 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v80);
    goto LABEL_13;
  }
  if (!swift_dynamicCast())
  {
LABEL_13:
    uint64_t v19 = 1;
    goto LABEL_14;
  }
  id v13 = (id)a1;
  uint64_t v14 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionNone");
  uint64_t v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
LABEL_42:
    swift_unknownObjectRelease();
    uint64_t v45 = 268435457;
    goto LABEL_43;
  }
  char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v44) {
    goto LABEL_42;
  }
  id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionComplete");
  uint64_t v48 = v47;
  if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v48 == v49)
  {
    swift_bridgeObjectRelease_n();
LABEL_54:
    swift_unknownObjectRelease();
    uint64_t v45 = 536870913;
    goto LABEL_43;
  }
  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v50) {
    goto LABEL_54;
  }
  id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteUnlessOpen");
  uint64_t v53 = v52;
  if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v53 == v54)
  {
    swift_bridgeObjectRelease_n();
LABEL_59:
    swift_unknownObjectRelease();
    uint64_t v45 = 805306369;
    goto LABEL_43;
  }
  char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v55) {
    goto LABEL_59;
  }
  id v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteUntilFirstUserAuthentication");
  uint64_t v58 = v57;
  if (v56 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v58 == v59)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v60 & 1) == 0)
    {
      id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteWhenUserInactive");
      uint64_t v63 = v62;
      if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v63 == v64)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_70;
      }
      goto LABEL_69;
    }
  }
  swift_unknownObjectRelease();
  uint64_t v45 = 1073741825;
  while (1)
  {
LABEL_43:
    a1 = (uint64_t)v13;
    uint64_t v19 = v45;
    if (v82)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      specialized Dictionary.subscript.setter((uint64_t)&v80, v10);
    }
LABEL_14:
    if (a4 >> 60 == 15) {
      id v10 = 0;
    }
    else {
      id v10 = (__CFString *)a3;
    }
    if (a4 >> 60 == 15) {
      unint64_t v20 = 0xC000000000000000;
    }
    else {
      unint64_t v20 = a4;
    }
    outlined copy of Data?(a3, a4);
    uint64_t v76 = a1;
    URL.init(fileURLWithPath:)(a1, a2, (uint64_t)&v80);
    a3 = *((void *)&v80 + 1);
    id v21 = (void *)v80;
    uint64_t v22 = v81;
    swift_retain();
    id v23 = v21;
    swift_retain();
    if (!_foundation_swift_url_feature_enabled())
    {
      unsigned __int8 v27 = objc_msgSend(v23, sel_isFileURL);
      swift_release();
      swift_release();

      if (v27) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    id v77 = v23;
    uint64_t v78 = a3;
    uint64_t v79 = v22;
    URL.scheme.getter();
    if (!v24)
    {
      swift_release();
      swift_release();

      goto LABEL_30;
    }
    unint64_t v73 = v20;
    Swift::String v25 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v25._countAndFlagsBits == 1701603686 && v25._object == (void *)0xE400000000000000) {
      break;
    }
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    uint64_t v26 = swift_bridgeObjectRelease();
    unint64_t v20 = v73;
    if (v28) {
      goto LABEL_29;
    }
LABEL_30:
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v30 = objc_allocWithZone((Class)NSError);
    uint64_t v31 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v30, sel_initWithDomain_code_userInfo_, v31, 518, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v32 = objc_msgSend(v13, sel_domain);
    id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    a4 = v34;

    if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && a4 == v35)
    {
      swift_bridgeObjectRelease_n();
LABEL_34:
      swift_willThrow();
      swift_release();
      swift_release();

      outlined consume of Data._Representation((uint64_t)v10, v20);
      swift_bridgeObjectRelease();
      return 0;
    }
    a2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a2) {
      goto LABEL_34;
    }
    __break(1u);
LABEL_69:
    char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v65) {
LABEL_70:
    }
      uint64_t v45 = 1342177281;
    else {
      uint64_t v45 = 1;
    }
  }
  swift_release();
  swift_release();

  uint64_t v26 = swift_bridgeObjectRelease();
  unint64_t v20 = v73;
LABEL_29:
  unint64_t v72 = a2;
  MEMORY[0x1F4188790](v26);
  v66[2] = v23;
  v66[3] = a3;
  v66[4] = v22;
  char v67 = 1;
  uint64_t v68 = v19;
  uint64_t v69 = MEMORY[0x1E4FBC868];
  LOBYTE(v70) = 1;
  id v29 = v23;
  swift_retain();
  swift_retain();
  specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:), (uint64_t)v66, (uint64_t)v10, v20);
  swift_release_n();
  swift_release_n();

  outlined consume of Data._Representation((uint64_t)v10, v20);
  if (!v82) {
    return 1;
  }
  uint64_t v37 = MEMORY[0x185309640](v75 + v74);
  if (v37)
  {
    unsigned __int8 v38 = (void *)v37;
    type metadata accessor for NSFileAttributeKey(0);
    lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
    swift_bridgeObjectRetain();
    uint64_t v39 = _NativeDictionary.bridged()();
    uint64_t v40 = String._bridgeToObjectiveCImpl()();
    *(void *)&long long v80 = 0;
    unsigned __int8 v41 = objc_msgSend(v38, sel_setAttributes_ofItemAtPath_error_, v39, v40, &v80);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v41)
    {
      id v42 = (id)v80;
      goto LABEL_48;
    }
    if ((void)v80)
    {
      id v43 = (id)v80;
      swift_willThrow();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      swift_willThrow();
LABEL_48:
      swift_bridgeObjectRelease();
    }
    return 1;
  }
  else
  {
    int v71 = 0;
    uint64_t v70 = 48;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized _FileManagerImpl.moveItem(atPath:toPath:options:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)v15);
  uint64_t v7 = (void *)v15[0];
  v14[0] = v15[0];
  v14[1] = v15[1];
  void v14[2] = v15[2];
  URL.init(fileURLWithPath:)(a3, a4, (uint64_t)v13);
  uint64_t v8 = (void *)v13[0];
  v12[0] = v13[0];
  v12[1] = v13[1];
  v12[2] = v13[2];
  uint64_t v9 = (void *)MEMORY[0x185309640](v4);
  if (v9)
  {
    id v10 = v9;
    specialized static _FileOperations.moveFile(_:to:with:options:)((uint64_t)v14, (uint64_t)v12, v9);

    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void URL.init(fileURLWithPath:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v13 = 2;
    memset(v12, 0, sizeof(v12));
    swift_bridgeObjectRetain();
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, &v13, (uint64_t)v12, &v14);
    char v6 = v14;
    long long v7 = v15;
  }
  else
  {
    uint64_t v8 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v8) {
      swift_bridgeObjectRetain();
    }
    id v9 = objc_allocWithZone(MEMORY[0x1E4F1CB10]);
    uint64_t v10 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v11 = objc_msgSend(v9, sel_initFileURLWithPath_, v10);
    swift_unknownObjectRelease();
    char v6 = static URL._converted(from:)(v11);

    long long v7 = 0uLL;
  }
  *(void *)a3 = v6;
  *(_OWORD *)(a3 + 8) = v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _FileManagerImpl.setAttributes(_:ofItemAtPath:)(Swift::OpaquePointer _, Swift::String ofItemAtPath)
{
  uint64_t v3 = v2;
  unint64_t object = ofItemAtPath._object;
  uint64_t countAndFlagsBits = ofItemAtPath._countAndFlagsBits;
  if (*((void *)_._rawValue + 2))
  {
    long long v7 = @"NSFilePosixPermissions";
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    if (v9)
    {
      outlined init with copy of Any(*((void *)_._rawValue + 7) + 32 * v8, (uint64_t)&v29);
    }
    else
    {
      long long v29 = 0u;
      long long v30 = 0u;
    }
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  id v10 = specialized _readFileAttributePrimitive<A>(_:as:)((uint64_t)&v29);
  char v12 = v11;
  outlined destroy of Any?((uint64_t)&v29, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((void *)_._rawValue + 2))
  {
    unsigned __int8 v13 = @"NSFileImmutable";
    uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v15)
    {
      outlined init with copy of Any(*((void *)_._rawValue + 7) + 32 * v14, (uint64_t)&v29);
    }
    else
    {
      long long v29 = 0u;
      long long v30 = 0u;
    }
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  char v16 = specialized _readFileAttributePrimitive(_:as:)((uint64_t)&v29);
  outlined destroy of Any?((uint64_t)&v29, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((void *)_._rawValue + 2))
  {
    uint64_t v17 = @"NSFileAppendOnly";
    uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
    if (v19)
    {
      outlined init with copy of Any(*((void *)_._rawValue + 7) + 32 * v18, (uint64_t)&v29);
    }
    else
    {
      long long v29 = 0u;
      long long v30 = 0u;
    }
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  char v20 = specialized _readFileAttributePrimitive(_:as:)((uint64_t)&v29);
  outlined destroy of Any?((uint64_t)&v29, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v21 = MEMORY[0x185309640](v3);
  if (v21)
  {
    uint64_t v22 = (void *)v21;
    MEMORY[0x1F4188790](v21);
    v23[2] = countAndFlagsBits;
    v23[3] = object;
    char v24 = v16;
    char v25 = v20;
    id v26 = v10;
    LOBYTE(v27) = v12 & 1;
    rawValue = _._rawValue;
    specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(countAndFlagsBits, (unint64_t)object, partial apply for closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:), (uint64_t)v23);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t specialized _readFileAttributePrimitive(_:as:)(uint64_t a1)
{
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v66, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v67)
  {
    uint64_t v4 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    uint64_t v5 = &v66;
    goto LABEL_12;
  }
  outlined init with take of Any(&v66, v69);
  outlined init with copy of Any((uint64_t)v69, (uint64_t)&v66);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if (swift_dynamicCast())
  {
    specialized _conditionallyBridgeFromObjectiveC_bridgeable<A>(_:_:)(*(uint64_t *)&v63[0]);
    uint64_t v2 = v1;
    int v3 = v1;

    if (v3 != 2) {
      goto LABEL_6;
    }
  }
  outlined init with copy of Any((uint64_t)v69, (uint64_t)&v66);
  if (!swift_dynamicCast())
  {
    outlined init with copy of Any((uint64_t)v69, (uint64_t)v65);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(v63, (uint64_t)&v66);
      uint64_t v6 = v67;
      uint64_t v7 = v68;
      uint64_t v8 = __swift_project_boxed_opaque_existential_1(&v66, v67);
      uint64_t v59 = v52;
      char v9 = *(void **)(v6 - 8);
      id v10 = (void *)v9[8];
      double v11 = MEMORY[0x1F4188790](v8);
      unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF0;
      unsigned __int8 v13 = (void (*)(char *, double))v9[2];
      v13((char *)v52 - v12, v11);
      uint64_t v14 = dispatch thunk of static BinaryInteger.isSigned.getter();
      char v15 = v14;
      uint64_t v58 = v52;
      id v61 = v10;
      double v16 = MEMORY[0x1F4188790](v14);
      char v60 = (char *)v52 - v12;
      uint64_t v62 = (void (*)(char *, char *, uint64_t, double))v13;
      ((void (*)(char *, char *, uint64_t, double))v13)((char *)v52 - v12, (char *)v52 - v12, v6, v16);
      uint64_t v17 = v7;
      BOOL v18 = (v15 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
      char v55 = v9;
      char v20 = (uint64_t (*)(char *, uint64_t))v9[1];
      uint64_t v21 = v20((char *)v52 - v12, v6);
      uint64_t v57 = v52;
      double v22 = MEMORY[0x1F4188790](v21);
      id v23 = (char *)v52 - v12;
      char v24 = (char *)v52 - v12;
      char v25 = v60;
      v62(v24, v60, v6, v22);
      if (v18)
      {
        id v56 = v20;
        *(void *)&v63[0] = 0x8000000000000000;
        if (dispatch thunk of static BinaryInteger.isSigned.getter())
        {
          uint64_t v26 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v26 < 64)
          {
LABEL_45:
            uint64_t v41 = dispatch thunk of BinaryInteger._lowWord.getter();
            char v20 = v56;
            v56(v23, v6);
            uint64_t v27 = v61;
            if (v41 < *(uint64_t *)&v63[0]) {
              goto LABEL_53;
            }
LABEL_22:
            uint64_t v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
            id v56 = (uint64_t (*)(char *, uint64_t))v52;
            double v29 = MEMORY[0x1F4188790](v28);
            v62((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v6, v29);
            if (v28 < 65)
            {
              uint64_t v32 = dispatch thunk of BinaryInteger.bitWidth.getter();
              uint64_t v30 = v20((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
              if (v32 == 64)
              {
                uint64_t v30 = dispatch thunk of static BinaryInteger.isSigned.getter();
                char v31 = v30 ^ 1;
              }
              else
              {
                char v31 = 0;
              }
            }
            else
            {
              uint64_t v30 = v20((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
              char v31 = 1;
            }
            double v35 = MEMORY[0x1F4188790](v30);
            v62((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v6, v35);
            id v61 = v52;
            if ((v31 & 1) == 0)
            {
              v20((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
              goto LABEL_38;
            }
            Swift::String v36 = v20;
            *(void *)&v63[0] = 0x7FFFFFFFFFFFFFFFLL;
            char v37 = dispatch thunk of static BinaryInteger.isSigned.getter();
            uint64_t v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
            if (v37)
            {
              if (v38 > 64)
              {
                MEMORY[0x1F4188790](v38);
                lazy protocol witness table accessor for type Int and conformance Int();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                char v39 = dispatch thunk of static Comparable.< infix(_:_:)();
                char v20 = v36;
                v36((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
                v36((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
                goto LABEL_48;
              }
            }
            else if (v38 > 63)
            {
              uint64_t v62 = (void (*)(char *, char *, uint64_t, double))v52;
              v65[0] = 0x7FFFFFFFFFFFFFFFLL;
              double v42 = MEMORY[0x1F4188790](v38);
              uint64_t v43 = ((uint64_t (*)(char *, char *, uint64_t, double))v55[4])((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v6, v42);
              MEMORY[0x1F4188790](v43);
              lazy protocol witness table accessor for type Int and conformance Int();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              char v39 = dispatch thunk of static Comparable.< infix(_:_:)();
              v36((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
              char v20 = v36;
              v36((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
LABEL_48:
              if (v39) {
                goto LABEL_53;
              }
LABEL_38:
              uint64_t v40 = dispatch thunk of BinaryInteger._lowWord.getter();
              v20(v25, v6);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
              if (!v40)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
                return 0;
              }
              if (v40 == 1)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
                return 1;
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
              return 2;
            }
            dispatch thunk of BinaryInteger._lowWord.getter();
            char v20 = v36;
            v36((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
            goto LABEL_38;
          }
          goto LABEL_28;
        }
        char v33 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v26 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v33)
        {
          if (v26 <= 64)
          {
            uint64_t v53 = *(void *)(*(void *)(v17 + 24) + 16);
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
            uint64_t v54 = v52;
            MEMORY[0x1F4188790](AssociatedTypeWitness);
            v52[0] = (char *)v52 - v45;
            swift_getAssociatedConformanceWitness();
            uint64_t v46 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
            v52[1] = v52;
            uint64_t v27 = v61;
            MEMORY[0x1F4188790](v46);
            unint64_t v47 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0;
            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
            v52[0] = v17;
            LODWORD(v53) = dispatch thunk of static Comparable.< infix(_:_:)();
            uint64_t v48 = (void (*)(char *, uint64_t))v56;
            uint64_t v49 = v56((char *)v52 - v47, v6);
            double v50 = MEMORY[0x1F4188790](v49);
            ((void (*)(char *, char *, uint64_t, double))v55[4])((char *)v52 - v47, v23, v6, v50);
            if (v53)
            {
              v48((char *)v52 - v47, v6);
              v48(v25, v6);
LABEL_54:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
              return 2;
            }
            uint64_t v54 = *(void **)&v63[0];
            uint64_t v51 = dispatch thunk of BinaryInteger._lowWord.getter();
            v48((char *)v52 - v47, v6);
            char v20 = (uint64_t (*)(char *, uint64_t))v48;
            if (v51 >= (uint64_t)v54) {
              goto LABEL_22;
            }
LABEL_53:
            v20(v25, v6);
            goto LABEL_54;
          }
LABEL_28:
          uint64_t v27 = v61;
          MEMORY[0x1F4188790](v26);
          lazy protocol witness table accessor for type Int and conformance Int();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
          char v20 = v56;
          v56((char *)v52 - (((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
          v20(v23, v6);
          if ((v34 & 1) == 0) {
            goto LABEL_22;
          }
          goto LABEL_53;
        }
        if (v26 < 64) {
          goto LABEL_45;
        }
        char v20 = v56;
        v56(v23, v6);
      }
      else
      {
        v20(v23, v6);
      }
      uint64_t v27 = v61;
      goto LABEL_22;
    }
    uint64_t v64 = 0;
    memset(v63, 0, sizeof(v63));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
    uint64_t v4 = (uint64_t *)&demangling cache variable for type metadata for BinaryInteger?;
    uint64_t v5 = v63;
LABEL_12:
    outlined destroy of Any?((uint64_t)v5, v4);
    return 2;
  }
  uint64_t v2 = LOBYTE(v63[0]);
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  return v2;
}

uint64_t one-time initialization function for us()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.MeasurementSystem.us = 0x6D65747379737375;
  *(void *)algn_1E8ED61B8 = 0xE800000000000000;
  xmmword_1E8ED61C0 = (__int128)v1;
  return result;
}

uint64_t type metadata completion function for JSONDecoder()
{
  uint64_t result = type metadata accessor for CodingUserInfoKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *type metadata accessor for Locale.CodingKeys()
{
  return &unk_1ECA49468;
}

ValueMetadata *type metadata accessor for URL.CodingKeys()
{
  return &type metadata for URL.CodingKeys;
}

ValueMetadata *type metadata accessor for ICUListFormatter.Signature()
{
  return &type metadata for ICUListFormatter.Signature;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.MorphologyAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute);
  }
  return result;
}

uint64_t one-time initialization function for cfLocaleCollatorID()
{
  uint64_t result = String._bridgeToObjectiveCImpl()();
  static NSLocaleKey.cfLocaleCollatorID = result;
  return result;
}

void static IndexSet._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v4 = swift_allocObject();
    id v5 = a1;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
    swift_dynamicCast();
    *(void *)(v4 + 16) = v7;
    *(unsigned char *)(v4 + 24) = 0;
  }
  else
  {
    id v6 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v6;
    *(unsigned char *)(v4 + 24) = 0;
  }
  *a2 = v4;
}

uint64_t Date.ISO8601FormatStyle.parse(_:in:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = *(_OWORD *)(v3 + 16);
  v22[0] = *(_OWORD *)v3;
  v22[1] = v7;
  uint64_t v23 = *(void *)(v3 + 32);
  v21[0] = String.subscript.getter();
  v21[1] = v8;
  v21[2] = v9;
  v21[3] = v10;
  if ((v21[0] ^ v8) < 0x4000
    || (swift_bridgeObjectRetain(),
        outlined retain of Date.ISO8601FormatStyle((uint64_t)v22),
        specialized Substring.withUTF8<A>(_:)(v21, v22, a1, (char *)a2, (uint64_t)v19),
        (v20 & 1) != 0))
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 1;
    return result;
  }
  uint64_t v12 = v19[0];
  uint64_t v13 = v19[1];
  unint64_t v14 = v21[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v15) = 1;
  }
  if ((v14 & 0xC) != 4 << v15)
  {
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t v18 = MEMORY[0x185302230](v14, v12, a1, a2);
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v16 = v12 + (v14 >> 16);
  if (__OFADD__(v12, v14 >> 16))
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    unint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 >= v16)
  {
    uint64_t v18 = (v16 << 16) | 4;
LABEL_14:
    *(void *)a3 = v18;
    *(void *)(a3 + 8) = v13;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t outlined retain of Date.ISO8601FormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t specialized Substring.withUTF8<A>(_:)@<X0>(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a1[3];
  if ((v10 & 0x1000000000000000) != 0)
  {
    Substring._slowMakeContiguousUTF8()();
    uint64_t v10 = a1[3];
  }
  unint64_t v12 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v13 = *a1 >> 16;
  unint64_t v14 = v12 >> 16;
  if ((v10 & 0x2000000000000000) != 0)
  {
    v18[0] = v11;
    v18[1] = v10 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v16 = (char *)v18 + v13;
  }
  else
  {
    if ((v11 & 0x1000000000000000) != 0)
    {
      uint64_t v15 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      uint64_t v15 = _StringObject.sharedUTF8.getter();
      if (!v15)
      {
        unint64_t v16 = 0;
        goto LABEL_8;
      }
    }
    unint64_t v16 = (char *)(v15 + v13);
  }
LABEL_8:
  swift_bridgeObjectRetain();
  closure #1 in Date.ISO8601FormatStyle.parse(_:in:)(v16, v14 - v13, a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  outlined release of Date.ISO8601FormatStyle((uint64_t)a2);
  return swift_bridgeObjectRelease();
}

void closure #1 in Date.ISO8601FormatStyle.parse(_:in:)(char *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  if (!a1) {
    goto LABEL_12;
  }
  if (a2 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  long long v8 = a3[1];
  long long v17 = *a3;
  long long v18 = v8;
  uint64_t v19 = *((void *)a3 + 4);
  Date.ISO8601FormatStyle.components(from:in:)(a4, a5, a1, a2, __src);
  if (v6)
  {

LABEL_5:
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(unsigned char *)(a6 + 16) = 1;
    return;
  }
  memcpy(__dst, __src, 0x122uLL);
  if (__dst[3])
  {
    memcpy(v15, &__dst[1], 0x11AuLL);
    v13[0] = __dst[3];
    v13[1] = __dst[4];
    char v12 = 0;
    outlined retain of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    swift_unknownObjectRetain();
    _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(v15, (uint64_t)v13, &v12, (uint64_t)&v10, (double *)&v14);
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    swift_unknownObjectRelease();
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    uint64_t v9 = v14;
  }
  else
  {
    memcpy(v15, &__dst[1], 0x11AuLL);
    outlined retain of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    _CalendarGregorian.date(from:)(v15, (uint64_t)&v10);
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    if (v11) {
      goto LABEL_5;
    }
    uint64_t v9 = v10;
  }
  *(void *)a6 = __dst[0];
  *(void *)(a6 + 8) = v9;
  *(unsigned char *)(a6 + 16) = 0;
}

uint64_t outlined release of Date.ISO8601FormatStyle.ComponentsParseResult(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of Date.ISO8601FormatStyle.ComponentsParseResult(uint64_t a1)
{
  return a1;
}

uint64_t Date.ISO8601FormatStyle.components(from:in:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v7 = v6;
  __src[36] = *MEMORY[0x1E4F143B8];
  long long v12 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)&v329._nsError._domain = *(_OWORD *)v5;
  long long v330 = v12;
  uint64_t v331 = *(void *)(v5 + 32);
  char userInfo = (char)v329._nsError._userInfo;
  if (!v329._nsError._userInfo)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ISO8601FormatStyle.Fields>);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = specialized static Array._adoptStorage(_:count:)(v14, 5);
    *(_OWORD *)uint64_t v16 = xmmword_1821037E0;
    *(_OWORD *)(v16 + 16) = xmmword_18210C680;
    *(void *)(v16 + 32) = 32;
    long long v17 = (void *)destructiveProjectEnumData for PredicateCodableError(v15, v16);
    uint64_t v18 = v17[4];
    uint64_t v19 = v17[5];
    if ((v19 & ~v18) == 0) {
      uint64_t v19 = 0;
    }
    uint64_t v20 = v19 | v18;
    uint64_t v21 = v17[6];
    if ((v21 & ~v20) == 0) {
      uint64_t v21 = 0;
    }
    uint64_t v22 = v21 | v20;
    if ((v17[7] & ~v22) != 0) {
      uint64_t v23 = v17[7];
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = v23 | v22;
    uint64_t v25 = v17[8];
    outlined retain of Date.ISO8601FormatStyle((uint64_t)&v329._nsError._domain);
    swift_bridgeObjectRelease();
    if ((v25 & ~v24) != 0) {
      char v26 = v25;
    }
    else {
      char v26 = 0;
    }
    char userInfo = v26 | v24;
    outlined release of Date.ISO8601FormatStyle((uint64_t)&v329._nsError._domain);
  }
  unint64_t code = (unint64_t)&a3[a4];
  v329._nsError._reserved = a3;
  v329._nsError._unint64_t code = (int64_t)&a3[a4];
  __dst[0] = 0uLL;
  __tp.__darwin_time_t tv_sec = 0;
  __tp.uint64_t tv_nsec = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, &__tp.tv_sec, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if ((userInfo & 1) == 0)
  {
    __src[6] = 1970;
    LOBYTE(__src[7]) = 0;
    if ((userInfo & 2) == 0)
    {
      uint64_t v28 = a3;
      if ((userInfo & 4) == 0)
      {
        __src[8] = 1;
        LOBYTE(__src[9]) = 0;
        if ((userInfo & 8) == 0)
        {
          double v29 = a3;
          if ((userInfo & 0x10) == 0) {
            goto LABEL_128;
          }
          goto LABEL_150;
        }
        goto LABEL_99;
      }
      goto LABEL_75;
    }
    goto LABEL_56;
  }
  char v30 = BYTE3(v329._nsError._domain);
  if (BYTE3(v329._nsError._domain) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
    {
      uint64_t v32 = 10;
      goto LABEL_24;
    }
  }
  uint64_t v32 = 4;
LABEL_24:
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  reserved = v329._nsError._reserved;
  Swift::String v36 = a3;
  while (1)
  {
    uint64_t v28 = &a3[v33];
    if ((unint64_t)&a3[v33] >= code || (*v28 - 58) < 0xF6u)
    {
      v329._nsError._reserved = reserved;
      if (v33)
      {
LABEL_32:
        if (v34 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v34;
        }
        BOOL v42 = v34 == 0x7FFFFFFFFFFFFFFFLL;
        if ((userInfo & 4) != 0)
        {
          __src[34] = v41;
          LOBYTE(__src[35]) = v42;
          if ((userInfo & 2) == 0)
          {
            if (v30)
            {
              char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v43 & 1) == 0) {
                goto LABEL_75;
              }
              if ((unint64_t)v28 >= code) {
                goto LABEL_90;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              if ((unint64_t)v28 >= code) {
                goto LABEL_90;
              }
            }
            char v100 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, (uint64_t)v28++);
            v329._nsError._reserved = v28;
            if (v100 != 45) {
              goto LABEL_90;
            }
LABEL_75:
            if ((unint64_t)v28 < code)
            {
              v329._nsError._reserved = v28 + 1;
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, (uint64_t)v28) == 87)
              {
                char v101 = specialized == infix<A>(_:_:)(SBYTE3(v329._nsError._domain), 1);
                uint64_t v102 = 2;
                if ((v101 & 1) == 0) {
                  uint64_t v102 = 0;
                }
                uint64_t v103 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v102, (v101 & 1) == 0, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
                if (v6) {
                  goto LABEL_217;
                }
                uint64_t v104 = v103;
                LOBYTE(__dst[0]) = 11;
                uint64_t result = _CalendarGregorian.maximumRange(of:)((unsigned __int8 *)__dst);
                if (v107) {
                  goto LABEL_286;
                }
                if (!specialized Range.contains(_:)(v104, result, v106)) {
                  goto LABEL_215;
                }
                DateComponents.weekOfYear.setter(v104, 0);
                if ((userInfo & 8) == 0) {
                  goto LABEL_127;
                }
LABEL_70:
                if (BYTE3(v329._nsError._domain))
                {
                  char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v99 & 1) == 0)
                  {
LABEL_99:
                    if ((userInfo & 4) == 0)
                    {
                      char v162 = specialized == infix<A>(_:_:)(SBYTE3(v329._nsError._domain), 1);
                      char v163 = (v162 & 1) == 0;
                      char v164 = v163;
                      if ((userInfo & 2) == 0)
                      {
                        if (v162) {
                          uint64_t v165 = 3;
                        }
                        else {
                          uint64_t v165 = 0;
                        }
                        uint64_t v166 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v165, v163, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
                        if (v7) {
                          goto LABEL_217;
                        }
                        uint64_t v167 = v166;
                        LOBYTE(__dst[0]) = 17;
                        uint64_t result = _CalendarGregorian.maximumRange(of:)((unsigned __int8 *)__dst);
                        if ((v169 & 1) == 0)
                        {
                          if (specialized Range.contains(_:)(v167, result, v168))
                          {
                            DateComponents.dayOfYear.setter(v167, 0);
                            goto LABEL_127;
                          }
LABEL_215:
                          __dst[0] = *(_OWORD *)&v329._nsError._domain;
                          __dst[1] = v330;
                          *(void *)&__dst[2] = v331;
                          v309._time = static Date.now.getter((double *)&__tp.tv_sec);
                          Swift::String v310 = Date.ISO8601FormatStyle.format(_:)(v309);
                          v311._uint64_t countAndFlagsBits = a1;
                          v311._unint64_t object = a2;
                          parseError(_:exampleFormattedString:)((Foundation::CocoaError *)&__tp, v311, (Swift::String_optional)v310);
                          swift_bridgeObjectRelease();
                          goto LABEL_216;
                        }
                        goto LABEL_287;
                      }
                      goto LABEL_120;
                    }
                    char v170 = specialized == infix<A>(_:_:)(SBYTE3(v329._nsError._domain), 1);
                    uint64_t v171 = 2;
                    if ((v170 & 1) == 0) {
                      uint64_t v171 = 0;
                    }
                    uint64_t v172 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v171, (v170 & 1) == 0, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
                    if (v7) {
                      goto LABEL_217;
                    }
                    uint64_t v173 = v172;
                    LOBYTE(__dst[0]) = 7;
                    uint64_t result = _CalendarGregorian.maximumRange(of:)((unsigned __int8 *)__dst);
                    if ((v175 & 1) == 0)
                    {
                      uint64_t v176 = v173 % 7 + 1;
                      if (!specialized Range.contains(_:)(v176, result, v174)) {
                        goto LABEL_215;
                      }
                      DateComponents.weekday.setter(v176, 0);
                      goto LABEL_127;
                    }
                    goto LABEL_285;
                  }
LABEL_97:
                  unsigned __int8 v160 = (char *)v329._nsError._reserved;
                  if (v329._nsError._reserved < (void *)v329._nsError._code)
                  {
                    char v161 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, (uint64_t)v329._nsError._reserved);
                    v329._nsError._reserved = v160 + 1;
                    if (v161 == 45) {
                      goto LABEL_99;
                    }
                  }
                  __dst[0] = *(_OWORD *)&v329._nsError._domain;
                  __dst[1] = v330;
                  *(void *)&__dst[2] = v331;
                  __tp.__darwin_time_t tv_sec = 0;
                  __tp.uint64_t tv_nsec = 0;
                  clock_gettime(_CLOCK_REALTIME, &__tp);
                  *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
                  Swift::String v177 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                  *(void *)&__dst[0] = 0;
                  *((void *)&__dst[0] + 1) = 0xE000000000000000;
                  _StringGuts.grow(_:)(88);
                  v178._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
                  v178._unint64_t object = (void *)0xED00002065737261;
                  String.append(_:)(v178);
                  v179._uint64_t countAndFlagsBits = a1;
                  v179._unint64_t object = a2;
                  String.append(_:)(v179);
                  v180._unint64_t object = (void *)0x80000001823AB110;
                  v180._uint64_t countAndFlagsBits = 0xD000000000000046;
                  String.append(_:)(v180);
                  String.append(_:)(v177);
                  v181._uint64_t countAndFlagsBits = 46;
                  v181._unint64_t object = (void *)0xE100000000000000;
                  String.append(_:)(v181);
                  long long v182 = __dst[0];
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                  uint64_t v183 = swift_allocObject();
                  uint64_t v184 = specialized static Array._adoptStorage(_:count:)(v183, 1);
                  id v186 = v185;
                  *Swift::Int v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                  v186[1] = v187;
                  v186[5] = (id)MEMORY[0x1E4FBB1A0];
                  *((_OWORD *)v186 + 1) = v182;
                  uint64_t v188 = destructiveProjectEnumData for PredicateCodableError(v184, v187);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                  uint64_t v189 = (void *)static _DictionaryStorage.allocate(capacity:)();
                  outlined init with copy of (String, Any)(v188 + 32, (uint64_t)__dst);
                  long long v190 = __dst[0];
                  swift_retain();
                  unint64_t v191 = specialized __RawDictionaryStorage.find<A>(_:)(v190, *((uint64_t *)&v190 + 1));
                  if ((v192 & 1) == 0)
                  {
                    v189[(v191 >> 6) + 8] |= 1 << v191;
                    *(_OWORD *)(v189[6] + 16 * v191) = v190;
                    outlined init with take of Any(&__dst[1], (_OWORD *)(v189[7] + 32 * v191));
                    uint64_t v193 = v189[2];
                    BOOL v40 = __OFADD__(v193, 1);
                    uint64_t v194 = v193 + 1;
                    if (!v40)
                    {
                      v189[2] = v194;
                      swift_release();
                      swift_bridgeObjectRelease();
                      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                      id v195 = objc_allocWithZone((Class)NSError);
                      uint64_t v196 = String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      id v7 = objc_msgSend(v195, sel_initWithDomain_code_userInfo_, v196, 2048, _NativeDictionary.bridged()());
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      a3 = (char *)objc_msgSend(v7, sel_domain);
                      id v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                      Swift::String v199 = v198;

                      id v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                      a2 = v201;
                      if (v197 == v200 && v199 == v201) {
                        goto LABEL_176;
                      }
                      a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (a1) {
                        goto LABEL_216;
                      }
                      __break(1u);
LABEL_120:
                      if (v164) {
                        uint64_t v202 = 0;
                      }
                      else {
                        uint64_t v202 = 2;
                      }
                      uint64_t v203 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v202, v163, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
                      if (v7) {
                        goto LABEL_217;
                      }
                      uint64_t v204 = v203;
                      LOBYTE(__dst[0]) = 3;
                      uint64_t result = _CalendarGregorian.maximumRange(of:)((unsigned __int8 *)__dst);
                      if (v206)
                      {
LABEL_288:
                        __break(1u);
                        return result;
                      }
                      if (!specialized Range.contains(_:)(v204, result, v205)) {
                        goto LABEL_215;
                      }
                      DateComponents.day.setter(v204, 0);
LABEL_127:
                      if ((userInfo & 0x10) == 0) {
                        goto LABEL_128;
                      }
                      if (BYTE4(v329._nsError._domain) == 1)
                      {
                        id v209 = (char *)v329._nsError._reserved;
                        unint64_t code = v329._nsError._code;
                        if (v329._nsError._reserved >= (void *)v329._nsError._code
                          || (v210 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, (uint64_t)v329._nsError._reserved), double v29 = v209 + 1, v329._nsError._reserved = v209 + 1, v210 != 84))
                        {
                          __dst[0] = *(_OWORD *)&v329._nsError._domain;
                          __dst[1] = v330;
                          *(void *)&__dst[2] = v331;
                          __tp.__darwin_time_t tv_sec = 0;
                          __tp.uint64_t tv_nsec = 0;
                          clock_gettime(_CLOCK_REALTIME, &__tp);
                          *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec
                                                  + -978307200.0
                                                  + (double)__tp.tv_nsec * 0.000000001;
                          Swift::String v211 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                          *(void *)&__dst[0] = 0;
                          *((void *)&__dst[0] + 1) = 0xE000000000000000;
                          _StringGuts.grow(_:)(88);
                          v212._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
                          v212._unint64_t object = (void *)0xED00002065737261;
                          String.append(_:)(v212);
                          v213._uint64_t countAndFlagsBits = a1;
                          v213._unint64_t object = a2;
                          String.append(_:)(v213);
                          v214._unint64_t object = (void *)0x80000001823AB110;
                          v214._uint64_t countAndFlagsBits = 0xD000000000000046;
                          String.append(_:)(v214);
                          String.append(_:)(v211);
                          v215._uint64_t countAndFlagsBits = 46;
                          v215._unint64_t object = (void *)0xE100000000000000;
                          String.append(_:)(v215);
                          long long v216 = __dst[0];
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                          uint64_t v217 = swift_allocObject();
                          uint64_t v218 = specialized static Array._adoptStorage(_:count:)(v217, 1);
                          unint64_t v220 = v219;
                          id *v219 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                          v220[1] = v221;
                          v220[5] = (id)MEMORY[0x1E4FBB1A0];
                          *((_OWORD *)v220 + 1) = v216;
                          uint64_t v222 = destructiveProjectEnumData for PredicateCodableError(v218, v221);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                          unint64_t v223 = (void *)static _DictionaryStorage.allocate(capacity:)();
                          outlined init with copy of (String, Any)(v222 + 32, (uint64_t)__dst);
                          long long v224 = __dst[0];
                          swift_retain();
                          unint64_t v225 = specialized __RawDictionaryStorage.find<A>(_:)(v224, *((uint64_t *)&v224 + 1));
                          if ((v226 & 1) == 0)
                          {
                            v223[(v225 >> 6) + 8] |= 1 << v225;
                            *(_OWORD *)(v223[6] + 16 * v225) = v224;
                            outlined init with take of Any(&__dst[1], (_OWORD *)(v223[7] + 32 * v225));
                            uint64_t v227 = v223[2];
                            BOOL v40 = __OFADD__(v227, 1);
                            uint64_t v228 = v227 + 1;
                            if (!v40)
                            {
                              v223[2] = v228;
                              swift_release();
                              swift_bridgeObjectRelease();
                              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                              id v229 = objc_allocWithZone((Class)NSError);
                              uint64_t v230 = String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              id v7 = objc_msgSend(v229, sel_initWithDomain_code_userInfo_, v230, 2048, _NativeDictionary.bridged()());
                              swift_unknownObjectRelease();
                              swift_unknownObjectRelease();
                              a3 = (char *)objc_msgSend(v7, sel_domain);
                              id v231 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                              Swift::Int v233 = v232;

                              id v234 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                              a2 = v235;
                              if (v231 != v234 || v233 != v235)
                              {
                                a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if ((a1 & 1) == 0)
                                {
                                  __break(1u);
                                  goto LABEL_140;
                                }
LABEL_216:
                                swift_willThrow();
                                goto LABEL_217;
                              }
LABEL_176:
                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease();
                              goto LABEL_216;
                            }
                            goto LABEL_275;
                          }
LABEL_274:
                          __break(1u);
LABEL_275:
                          __break(1u);
                          goto LABEL_276;
                        }
                      }
                      else
                      {
                        if ((specialized BufferViewIterator.next()() & 0x1FF) != 0x20)
                        {
                          __dst[0] = *(_OWORD *)&v329._nsError._domain;
                          __dst[1] = v330;
                          *(void *)&__dst[2] = v331;
                          __tp.__darwin_time_t tv_sec = 0;
                          __tp.uint64_t tv_nsec = 0;
                          clock_gettime(_CLOCK_REALTIME, &__tp);
                          *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec
                                                  + -978307200.0
                                                  + (double)__tp.tv_nsec * 0.000000001;
                          Swift::String v274 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                          *(void *)&__dst[0] = 0;
                          *((void *)&__dst[0] + 1) = 0xE000000000000000;
                          _StringGuts.grow(_:)(88);
                          v275._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
                          v275._unint64_t object = (void *)0xED00002065737261;
                          String.append(_:)(v275);
                          v276._uint64_t countAndFlagsBits = a1;
                          v276._unint64_t object = a2;
                          String.append(_:)(v276);
                          v277._unint64_t object = (void *)0x80000001823AB110;
                          v277._uint64_t countAndFlagsBits = 0xD000000000000046;
                          String.append(_:)(v277);
                          String.append(_:)(v274);
                          v278._uint64_t countAndFlagsBits = 46;
                          v278._unint64_t object = (void *)0xE100000000000000;
                          String.append(_:)(v278);
                          long long v279 = __dst[0];
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                          uint64_t v280 = swift_allocObject();
                          uint64_t v281 = specialized static Array._adoptStorage(_:count:)(v280, 1);
                          Swift::String v283 = v282;
                          id *v282 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                          v283[1] = v284;
                          v283[5] = (id)MEMORY[0x1E4FBB1A0];
                          *((_OWORD *)v283 + 1) = v279;
                          uint64_t v285 = destructiveProjectEnumData for PredicateCodableError(v281, v284);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                          id v286 = (void *)static _DictionaryStorage.allocate(capacity:)();
                          outlined init with copy of (String, Any)(v285 + 32, (uint64_t)__dst);
                          long long v287 = __dst[0];
                          swift_retain();
                          unint64_t v288 = specialized __RawDictionaryStorage.find<A>(_:)(v287, *((uint64_t *)&v287 + 1));
                          if ((v289 & 1) == 0)
                          {
                            v286[(v288 >> 6) + 8] |= 1 << v288;
                            *(_OWORD *)(v286[6] + 16 * v288) = v287;
                            outlined init with take of Any(&__dst[1], (_OWORD *)(v286[7] + 32 * v288));
                            uint64_t v290 = v286[2];
                            BOOL v40 = __OFADD__(v290, 1);
                            uint64_t v291 = v290 + 1;
                            if (!v40)
                            {
                              v286[2] = v291;
                              swift_release();
                              swift_bridgeObjectRelease();
                              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                              id v292 = objc_allocWithZone((Class)NSError);
                              uint64_t v293 = String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              id v7 = objc_msgSend(v292, sel_initWithDomain_code_userInfo_, v293, 2048, _NativeDictionary.bridged()());
                              swift_unknownObjectRelease();
                              swift_unknownObjectRelease();
                              a3 = (char *)objc_msgSend(v7, sel_domain);
                              id v294 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                              unint64_t v296 = v295;

                              id v297 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                              a2 = v298;
                              if (v294 != v297 || v296 != v298)
                              {
                                a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if ((a1 & 1) == 0)
                                {
                                  __break(1u);
                                  goto LABEL_200;
                                }
                                goto LABEL_216;
                              }
                              goto LABEL_176;
                            }
LABEL_277:
                            __break(1u);
                          }
LABEL_276:
                          __break(1u);
                          goto LABEL_277;
                        }
                        double v29 = (char *)v329._nsError._reserved;
                        unint64_t code = v329._nsError._code;
                        if (v329._nsError._reserved < (void *)v329._nsError._code)
                        {
                          unint64_t v237 = v329._nsError._code - (unint64_t)v329._nsError._reserved;
                          while (*v29 == 32)
                          {
                            ++v29;
                            if (!--v237)
                            {
                              double v29 = (char *)v329._nsError._code;
                              break;
                            }
                          }
                        }
                        v329._nsError._reserved = v29;
                      }
LABEL_150:
                      if ((uint64_t)v329._nsError._domain)
                      {
                        uint64_t v238 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(2, 0, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
                        if (!v7)
                        {
                          DateComponents.hour.setter(v238, 0);
                          uint64_t v239 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(2, 0, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
                          DateComponents.minute.setter(v239, 0);
                          uint64_t v240 = 2;
                          char v241 = 0;
LABEL_153:
                          uint64_t v242 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v240, v241, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
                          DateComponents.second.setter(v242, 0);
                          if (BYTE1(v329._nsError._domain))
                          {
                            expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)(46, (unsigned __int8 **)&v329._nsError._reserved, a1, a2);
                            uint64_t v243 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(0, 1, 1, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
                            id v7 = 0;
                            DateComponents.nanosecond.setter(v243, 0);
                          }
LABEL_128:
                          if ((userInfo & 0x20) == 0)
                          {
                            uint64_t v207 = a5;
                            goto LABEL_130;
                          }
LABEL_140:
                          if (BYTE4(v329._nsError._domain))
                          {
                            char v236 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            if ((v236 & 1) == 0)
                            {
LABEL_202:
                              uint64_t v303 = specialized BufferViewIterator.next()();
                              if ((v303 & 0x100) == 0)
                              {
                                int v304 = v303;
                                char v305 = 1;
                                switch((char)v303)
                                {
                                  case '+':
                                    goto LABEL_224;
                                  case '-':
                                    goto LABEL_223;
                                  case 'G':
                                  case 'g':
                                    __int16 v306 = specialized BufferViewIterator.next()();
                                    if ((v306 & 0x100) == 0 && (v306 | 0x20) == 0x6D)
                                    {
                                      uint64_t result = specialized BufferViewIterator.next()();
                                      if ((result & 0x100) == 0 && (result | 0x20) == 0x74) {
                                        goto LABEL_213;
                                      }
                                    }
                                    if (v304 != 85) {
                                      goto LABEL_215;
                                    }
LABEL_209:
                                    __int16 v307 = specialized BufferViewIterator.next()();
                                    if ((v307 & 0x100) != 0) {
                                      goto LABEL_215;
                                    }
                                    if ((v307 | 0x20) != 0x74) {
                                      goto LABEL_215;
                                    }
                                    uint64_t result = specialized BufferViewIterator.next()();
                                    if ((result & 0x100) != 0 || (result | 0x20) != 0x63) {
                                      goto LABEL_215;
                                    }
LABEL_213:
                                    if (v329._nsError._reserved < (void *)v329._nsError._code) {
                                      int v308 = *(unsigned __int8 *)v329._nsError._reserved;
                                    }
                                    else {
                                      int v308 = 0;
                                    }
                                    if (v329._nsError._reserved >= (void *)v329._nsError._code) {
                                      goto LABEL_260;
                                    }
                                    if (v308 == 43) {
                                      goto LABEL_238;
                                    }
                                    if (v308 != 45) {
                                      goto LABEL_260;
                                    }
                                    char v305 = 0;
LABEL_238:
                                    if (v329._nsError._reserved < (void *)v329._nsError._code) {
                                      ++v329._nsError._reserved;
                                    }
                                    break;
                                  case 'U':
                                  case 'u':
                                    goto LABEL_209;
                                  case 'Z':
                                  case 'z':
                                    static TimeZone.gmt.getter(v303, __dst);
                                    uint64_t tv_nsec = *((void *)&__dst[0] + 1);
                                    __darwin_time_t tv_sec = *(void *)&__dst[0];
                                    goto LABEL_219;
                                  default:
                                    goto LABEL_215;
                                }
                                goto LABEL_224;
                              }
                              goto LABEL_215;
                            }
                            goto LABEL_166;
                          }
LABEL_165:
                          swift_bridgeObjectRelease();
LABEL_166:
                          Swift::String v270 = (unsigned __int8 *)v329._nsError._reserved;
                          int64_t v271 = v329._nsError._code;
                          if (v329._nsError._reserved >= (void *)v329._nsError._code) {
                            goto LABEL_202;
                          }
                          if (*(unsigned char *)v329._nsError._reserved != 32) {
                            goto LABEL_201;
                          }
                          uint64_t v272 = ~(uint64_t)v329._nsError._reserved + v329._nsError._code;
                          while (v272)
                          {
                            int v273 = *++v270;
                            --v272;
                            if (v273 != 32) {
                              goto LABEL_201;
                            }
                          }
LABEL_200:
                          Swift::String v270 = (unsigned __int8 *)v271;
LABEL_201:
                          v329._nsError._reserved = v270;
                          goto LABEL_202;
                        }
LABEL_217:
                        memcpy(__dst, __src, 0x11AuLL);
                        return outlined release of DateComponents((uint64_t)__dst);
                      }
                      unint64_t v244 = code - (void)v29;
                      if (code < (unint64_t)v29) {
                        unint64_t v244 = 0;
                      }
                      if (code > (unint64_t)v29 && (*v29 - 58) >= 0xF6u)
                      {
                        uint64_t v299 = (*v29 - 48);
                        v300 = v29 + 1;
                        if (v244 != 1 && (*v300 - 58) >= 0xF6u)
                        {
                          uint64_t v299 = 10 * (*v29 - 48) + (*v300 - 48);
                          v300 = v29 + 2;
                          if (v244 != 2 && (*v300 - 58) >= 0xF6u)
                          {
                            uint64_t v299 = 10 * v299 + (*v300 - 48);
                            v300 = v29 + 3;
                            if (v244 != 3 && (*v300 - 58) >= 0xF6u)
                            {
                              uint64_t v299 = 10 * v299 + (*v300 - 48);
                              v300 = v29 + 4;
                              if (v244 != 4 && (*v300 - 58) >= 0xF6u)
                              {
                                uint64_t v299 = 10 * v299 + (*v300 - 48);
                                v300 = v29 + 5;
                                if (v244 != 5 && (*v300 - 58) >= 0xF6u)
                                {
                                  uint64_t v299 = 10 * v299 + (*v300 - 48);
                                  v300 = v29 + 6;
                                  if (v244 != 6 && (*v300 - 58) >= 0xF6u)
                                  {
                                    uint64_t v299 = 10 * v299 + (*v300 - 48);
                                    v300 = v29 + 7;
                                    if (v244 != 7 && (*v300 - 58) >= 0xF6u)
                                    {
                                      uint64_t v299 = 10 * v299 + (*v300 - 48);
                                      v300 = v29 + 8;
                                      if (v244 != 8 && (*v300 - 58) >= 0xF6u)
                                      {
                                        uint64_t v299 = 10 * v299 + (*v300 - 48);
                                        v300 = v29 + 9;
                                        if (v244 != 9)
                                        {
                                          char v301 = *v300;
                                          if ((*v300 - 58) >= 0xF6u)
                                          {
                                            v300 = v29 + 10;
                                            uint64_t v299 = 10 * v299 + (v301 - 48);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        v329._nsError._reserved = v300;
                        DateComponents.hour.setter(v299, 0);
                        expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)(58, (unsigned __int8 **)&v329._nsError._reserved, a1, a2);
                        if (v7) {
                          goto LABEL_217;
                        }
                        uint64_t v302 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(0, 1, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
                        id v7 = 0;
                        DateComponents.minute.setter(v302, 0);
                        expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)(58, (unsigned __int8 **)&v329._nsError._reserved, a1, a2);
                        uint64_t v240 = 0;
                        char v241 = 1;
                        goto LABEL_153;
                      }
                      v329._nsError._reserved = v29;
                      __dst[0] = *(_OWORD *)&v329._nsError._domain;
                      __dst[1] = v330;
                      *(void *)&__dst[2] = v331;
                      __tp.__darwin_time_t tv_sec = 0;
                      __tp.uint64_t tv_nsec = 0;
                      clock_gettime(_CLOCK_REALTIME, &__tp);
                      *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
                      Swift::String v245 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                      *(void *)&__dst[0] = 0;
                      *((void *)&__dst[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(88);
                      v246._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
                      v246._unint64_t object = (void *)0xED00002065737261;
                      String.append(_:)(v246);
                      v247._uint64_t countAndFlagsBits = a1;
                      v247._unint64_t object = a2;
                      String.append(_:)(v247);
                      v248._unint64_t object = (void *)0x80000001823AB110;
                      v248._uint64_t countAndFlagsBits = 0xD000000000000046;
                      String.append(_:)(v248);
                      String.append(_:)(v245);
                      v249._uint64_t countAndFlagsBits = 46;
                      v249._unint64_t object = (void *)0xE100000000000000;
                      String.append(_:)(v249);
                      long long v250 = __dst[0];
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                      uint64_t v251 = swift_allocObject();
                      uint64_t v252 = specialized static Array._adoptStorage(_:count:)(v251, 1);
                      v254 = v253;
                      id *v253 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                      v254[1] = v255;
                      v254[5] = (id)MEMORY[0x1E4FBB1A0];
                      *((_OWORD *)v254 + 1) = v250;
                      uint64_t v256 = destructiveProjectEnumData for PredicateCodableError(v252, v255);
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                      v257 = (void *)static _DictionaryStorage.allocate(capacity:)();
                      outlined init with copy of (String, Any)(v256 + 32, (uint64_t)__dst);
                      long long v258 = __dst[0];
                      swift_retain();
                      unint64_t v259 = specialized __RawDictionaryStorage.find<A>(_:)(v258, *((uint64_t *)&v258 + 1));
                      if ((v260 & 1) == 0)
                      {
                        v257[(v259 >> 6) + 8] |= 1 << v259;
                        *(_OWORD *)(v257[6] + 16 * v259) = v258;
                        outlined init with take of Any(&__dst[1], (_OWORD *)(v257[7] + 32 * v259));
                        uint64_t v261 = v257[2];
                        BOOL v40 = __OFADD__(v261, 1);
                        uint64_t v262 = v261 + 1;
                        if (!v40)
                        {
                          v257[2] = v262;
                          swift_release();
                          swift_bridgeObjectRelease();
                          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                          id v263 = objc_allocWithZone((Class)NSError);
                          uint64_t v264 = String._bridgeToObjectiveCImpl()();
                          swift_bridgeObjectRelease();
                          id v7 = objc_msgSend(v263, sel_initWithDomain_code_userInfo_, v264, 2048, _NativeDictionary.bridged()());
                          swift_unknownObjectRelease();
                          swift_unknownObjectRelease();
                          a3 = (char *)objc_msgSend(v7, sel_domain);
                          id v265 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                          v267 = v266;

                          id v268 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                          a2 = v269;
                          if (v265 != v268 || v267 != v269)
                          {
                            a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((a1 & 1) == 0)
                            {
                              __break(1u);
                              goto LABEL_165;
                            }
                            goto LABEL_216;
                          }
                          goto LABEL_176;
                        }
                        goto LABEL_273;
                      }
LABEL_272:
                      __break(1u);
LABEL_273:
                      __break(1u);
                      goto LABEL_274;
                    }
LABEL_271:
                    __break(1u);
                    goto LABEL_272;
                  }
LABEL_270:
                  __break(1u);
                  goto LABEL_271;
                }
LABEL_96:
                swift_bridgeObjectRelease();
                goto LABEL_97;
              }
            }
            __dst[0] = *(_OWORD *)&v329._nsError._domain;
            __dst[1] = v330;
            *(void *)&__dst[2] = v331;
            __tp.__darwin_time_t tv_sec = 0;
            __tp.uint64_t tv_nsec = 0;
            clock_gettime(_CLOCK_REALTIME, &__tp);
            *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
            Swift::String v108 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
            *(void *)&__dst[0] = 0;
            *((void *)&__dst[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(88);
            v109._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
            v109._unint64_t object = (void *)0xED00002065737261;
            String.append(_:)(v109);
            v110._uint64_t countAndFlagsBits = a1;
            v110._unint64_t object = a2;
            String.append(_:)(v110);
            v111._unint64_t object = (void *)0x80000001823AB110;
            v111._uint64_t countAndFlagsBits = 0xD000000000000046;
            String.append(_:)(v111);
            String.append(_:)(v108);
            v112._uint64_t countAndFlagsBits = 46;
            v112._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v112);
            long long v113 = __dst[0];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
            uint64_t v114 = swift_allocObject();
            uint64_t v115 = specialized static Array._adoptStorage(_:count:)(v114, 1);
            id v117 = v116;
            *uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
            v117[1] = v118;
            v117[5] = (id)MEMORY[0x1E4FBB1A0];
            *((_OWORD *)v117 + 1) = v113;
            uint64_t v119 = destructiveProjectEnumData for PredicateCodableError(v115, v118);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
            uint64_t v120 = (void *)static _DictionaryStorage.allocate(capacity:)();
            outlined init with copy of (String, Any)(v119 + 32, (uint64_t)__dst);
            long long v121 = __dst[0];
            swift_retain();
            unint64_t v122 = specialized __RawDictionaryStorage.find<A>(_:)(v121, *((uint64_t *)&v121 + 1));
            if ((v123 & 1) == 0)
            {
              v120[(v122 >> 6) + 8] |= 1 << v122;
              *(_OWORD *)(v120[6] + 16 * v122) = v121;
              outlined init with take of Any(&__dst[1], (_OWORD *)(v120[7] + 32 * v122));
              uint64_t v124 = v120[2];
              BOOL v40 = __OFADD__(v124, 1);
              uint64_t v125 = v124 + 1;
              if (!v40)
              {
                v120[2] = v125;
                swift_release();
                swift_bridgeObjectRelease();
                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                id v126 = objc_allocWithZone((Class)NSError);
                uint64_t v127 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v128 = objc_msgSend(v126, sel_initWithDomain_code_userInfo_, v127, 2048, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                id v129 = objc_msgSend(v128, sel_domain);
                id v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
                unint64_t v132 = v131;

                id v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                a2 = v134;
                if (v130 == v133 && v132 == v134) {
                  goto LABEL_176;
                }
                a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (a1) {
                  goto LABEL_216;
                }
                __break(1u);
LABEL_90:
                __dst[0] = *(_OWORD *)&v329._nsError._domain;
                __dst[1] = v330;
                *(void *)&__dst[2] = v331;
                __tp.__darwin_time_t tv_sec = 0;
                __tp.uint64_t tv_nsec = 0;
                clock_gettime(_CLOCK_REALTIME, &__tp);
                *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
                Swift::String v135 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                *(void *)&__dst[0] = 0;
                *((void *)&__dst[0] + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(88);
                v136._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
                v136._unint64_t object = (void *)0xED00002065737261;
                String.append(_:)(v136);
                v137._uint64_t countAndFlagsBits = a1;
                v137._unint64_t object = a2;
                String.append(_:)(v137);
                v138._unint64_t object = (void *)0x80000001823AB110;
                v138._uint64_t countAndFlagsBits = 0xD000000000000046;
                String.append(_:)(v138);
                String.append(_:)(v135);
                v139._uint64_t countAndFlagsBits = 46;
                v139._unint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v139);
                long long v140 = __dst[0];
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                uint64_t v141 = swift_allocObject();
                uint64_t v142 = specialized static Array._adoptStorage(_:count:)(v141, 1);
                id v144 = v143;
                *unint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                v144[1] = v145;
                v144[5] = (id)MEMORY[0x1E4FBB1A0];
                *((_OWORD *)v144 + 1) = v140;
                uint64_t v146 = destructiveProjectEnumData for PredicateCodableError(v142, v145);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                uint64_t v147 = (void *)static _DictionaryStorage.allocate(capacity:)();
                outlined init with copy of (String, Any)(v146 + 32, (uint64_t)__dst);
                long long v148 = __dst[0];
                swift_retain();
                unint64_t v149 = specialized __RawDictionaryStorage.find<A>(_:)(v148, *((uint64_t *)&v148 + 1));
                if ((v150 & 1) == 0)
                {
                  v147[(v149 >> 6) + 8] |= 1 << v149;
                  *(_OWORD *)(v147[6] + 16 * v149) = v148;
                  outlined init with take of Any(&__dst[1], (_OWORD *)(v147[7] + 32 * v149));
                  uint64_t v151 = v147[2];
                  BOOL v40 = __OFADD__(v151, 1);
                  uint64_t v152 = v151 + 1;
                  if (!v40)
                  {
                    v147[2] = v152;
                    swift_release();
                    swift_bridgeObjectRelease();
                    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                    id v153 = objc_allocWithZone((Class)NSError);
                    uint64_t v154 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    id v7 = objc_msgSend(v153, sel_initWithDomain_code_userInfo_, v154, 2048, _NativeDictionary.bridged()());
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    a3 = (char *)objc_msgSend(v7, sel_domain);
                    id v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                    unsigned int v157 = v156;

                    id v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                    a2 = v159;
                    if (v155 == v158 && v157 == v159) {
                      goto LABEL_176;
                    }
                    a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (a1) {
                      goto LABEL_216;
                    }
                    __break(1u);
                    goto LABEL_96;
                  }
LABEL_269:
                  __break(1u);
                  goto LABEL_270;
                }
LABEL_268:
                __break(1u);
                goto LABEL_269;
              }
              goto LABEL_265;
            }
LABEL_264:
            __break(1u);
LABEL_265:
            __break(1u);
            goto LABEL_266;
          }
        }
        else
        {
          __src[6] = v41;
          LOBYTE(__src[7]) = v42;
          if ((userInfo & 2) == 0)
          {
            __src[8] = 1;
            LOBYTE(__src[9]) = 0;
            if ((userInfo & 8) == 0) {
              goto LABEL_127;
            }
            goto LABEL_70;
          }
        }
        if (v30)
        {
          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v44 & 1) == 0)
          {
LABEL_56:
            if (BYTE3(v329._nsError._domain) == 1)
            {
              swift_bridgeObjectRelease();
LABEL_59:
              char v70 = 0;
              uint64_t v71 = 2;
LABEL_67:
              uint64_t v97 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v71, v70, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
              if (v7) {
                goto LABEL_217;
              }
              uint64_t v98 = v97;
              if (!specialized Range.contains(_:)(v97, 1, 13)) {
                goto LABEL_215;
              }
              DateComponents.month.setter(v98, 0);
              if ((userInfo & 8) == 0) {
                goto LABEL_127;
              }
              goto LABEL_70;
            }
            char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v69) {
              goto LABEL_59;
            }
LABEL_66:
            uint64_t v71 = 0;
            char v70 = 1;
            goto LABEL_67;
          }
          if ((unint64_t)v28 >= code) {
            goto LABEL_60;
          }
LABEL_55:
          v329._nsError._reserved = v28 + 1;
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, (uint64_t)v28) == 45) {
            goto LABEL_56;
          }
LABEL_60:
          __dst[0] = *(_OWORD *)&v329._nsError._domain;
          __dst[1] = v330;
          *(void *)&__dst[2] = v331;
          __tp.__darwin_time_t tv_sec = 0;
          __tp.uint64_t tv_nsec = 0;
          clock_gettime(_CLOCK_REALTIME, &__tp);
          *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
          Swift::String v72 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
          *(void *)&__dst[0] = 0;
          *((void *)&__dst[0] + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(88);
          v73._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
          v73._unint64_t object = (void *)0xED00002065737261;
          String.append(_:)(v73);
          v74._uint64_t countAndFlagsBits = a1;
          v74._unint64_t object = a2;
          String.append(_:)(v74);
          v75._unint64_t object = (void *)0x80000001823AB110;
          v75._uint64_t countAndFlagsBits = 0xD000000000000046;
          String.append(_:)(v75);
          String.append(_:)(v72);
          v76._uint64_t countAndFlagsBits = 46;
          v76._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v76);
          long long v77 = __dst[0];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          uint64_t v78 = swift_allocObject();
          uint64_t v79 = specialized static Array._adoptStorage(_:count:)(v78, 1);
          long long v81 = v80;
          *long long v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
          v81[1] = v82;
          v81[5] = (id)MEMORY[0x1E4FBB1A0];
          *((_OWORD *)v81 + 1) = v77;
          uint64_t v83 = destructiveProjectEnumData for PredicateCodableError(v79, v82);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          Swift::String v84 = (void *)static _DictionaryStorage.allocate(capacity:)();
          outlined init with copy of (String, Any)(v83 + 32, (uint64_t)__dst);
          long long v85 = __dst[0];
          swift_retain();
          unint64_t v86 = specialized __RawDictionaryStorage.find<A>(_:)(v85, *((uint64_t *)&v85 + 1));
          if (v87)
          {
LABEL_266:
            __break(1u);
            goto LABEL_267;
          }
          v84[(v86 >> 6) + 8] |= 1 << v86;
          *(_OWORD *)(v84[6] + 16 * v86) = v85;
          outlined init with take of Any(&__dst[1], (_OWORD *)(v84[7] + 32 * v86));
          uint64_t v88 = v84[2];
          BOOL v40 = __OFADD__(v88, 1);
          uint64_t v89 = v88 + 1;
          if (v40)
          {
LABEL_267:
            __break(1u);
            goto LABEL_268;
          }
          v84[2] = v89;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v90 = objc_allocWithZone((Class)NSError);
          uint64_t v91 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v7 = objc_msgSend(v90, sel_initWithDomain_code_userInfo_, v91, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          a3 = (char *)objc_msgSend(v7, sel_domain);
          id v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
          uint64_t v94 = v93;

          id v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          a2 = v96;
          if (v92 == v95 && v94 == v96) {
            goto LABEL_176;
          }
          a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (a1) {
            goto LABEL_216;
          }
          __break(1u);
          goto LABEL_66;
        }
LABEL_54:
        swift_bridgeObjectRelease();
        if ((unint64_t)v28 >= code) {
          goto LABEL_60;
        }
        goto LABEL_55;
      }
      __dst[0] = *(_OWORD *)&v329._nsError._domain;
      __dst[1] = v330;
      *(void *)&__dst[2] = v331;
      __tp.__darwin_time_t tv_sec = 0;
      __tp.uint64_t tv_nsec = 0;
      clock_gettime(_CLOCK_REALTIME, &__tp);
      *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
      Swift::String v45 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
      unint64_t code = (unint64_t)v45._object;
      *(void *)&__dst[0] = 0;
      *((void *)&__dst[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(88);
      v46._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
      v46._unint64_t object = (void *)0xED00002065737261;
      String.append(_:)(v46);
      v47._uint64_t countAndFlagsBits = a1;
      v47._unint64_t object = a2;
      String.append(_:)(v47);
      v48._unint64_t object = (void *)0x80000001823AB110;
      v48._uint64_t countAndFlagsBits = 0xD000000000000046;
      String.append(_:)(v48);
      String.append(_:)(v45);
      v49._uint64_t countAndFlagsBits = 46;
      v49._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      long long v50 = __dst[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v51 = swift_allocObject();
      uint64_t v52 = specialized static Array._adoptStorage(_:count:)(v51, 1);
      uint64_t v54 = v53;
      id *v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      v54[1] = v55;
      v54[5] = (id)MEMORY[0x1E4FBB1A0];
      *((_OWORD *)v54 + 1) = v50;
      uint64_t v56 = destructiveProjectEnumData for PredicateCodableError(v52, v55);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      uint64_t v57 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(v56 + 32, (uint64_t)__dst);
      long long v58 = __dst[0];
      swift_retain();
      unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v58, *((uint64_t *)&v58 + 1));
      if (v60)
      {
        __break(1u);
      }
      else
      {
        v57[(v59 >> 6) + 8] |= 1 << v59;
        *(_OWORD *)(v57[6] + 16 * v59) = v58;
        outlined init with take of Any(&__dst[1], (_OWORD *)(v57[7] + 32 * v59));
        uint64_t v61 = v57[2];
        BOOL v40 = __OFADD__(v61, 1);
        uint64_t v62 = v61 + 1;
        if (!v40)
        {
          v57[2] = v62;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v63 = objc_allocWithZone((Class)NSError);
          uint64_t v64 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v7 = objc_msgSend(v63, sel_initWithDomain_code_userInfo_, v64, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          a3 = (char *)objc_msgSend(v7, sel_domain);
          id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
          uint64_t v28 = v66;

          id v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          a2 = v68;
          if (v65 == v67 && v28 == v68) {
            goto LABEL_176;
          }
          a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (a1) {
            goto LABEL_216;
          }
          __break(1u);
          goto LABEL_54;
        }
      }
      __break(1u);
      goto LABEL_264;
    }
    uint64_t v37 = (unsigned __int128)(v34 * (__int128)10) >> 64;
    uint64_t v38 = 10 * v34;
    if (v37 != v38 >> 63) {
      break;
    }
    unsigned __int8 v39 = *v28 - 48;
    BOOL v40 = __OFADD__(v38, v39);
    uint64_t v34 = v38 + v39;
    if (v40) {
      goto LABEL_222;
    }
    reserved = v36 + 1;
    ++v33;
    ++v36;
    if (v32 == v33)
    {
      uint64_t v28 = &a3[v33];
      v329._nsError._reserved = &a3[v33];
      goto LABEL_32;
    }
  }
  v329._nsError._reserved = reserved;
  __break(1u);
LABEL_222:
  v329._nsError._reserved = reserved;
  __break(1u);
LABEL_223:
  char v305 = 0;
LABEL_224:
  uint64_t v314 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(2, 0, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
  if (v7) {
    goto LABEL_217;
  }
  uint64_t v315 = v314;
  if (v329._nsError._reserved < (void *)v329._nsError._code) {
    int v316 = *(unsigned __int8 *)v329._nsError._reserved;
  }
  else {
    int v316 = 0;
  }
  if (v329._nsError._reserved < (void *)v329._nsError._code && v316 == 58) {
    ++v329._nsError._reserved;
  }
  uint64_t result = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(2, 0, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
  Swift::String v317 = (unsigned __int8 *)v329._nsError._reserved;
  if (v329._nsError._reserved < (void *)v329._nsError._code) {
    int v318 = *(unsigned __int8 *)v329._nsError._reserved;
  }
  else {
    int v318 = 0;
  }
  if (v329._nsError._reserved < (void *)v329._nsError._code && v318 == 58) {
    Swift::String v317 = (unsigned __int8 *)++v329._nsError._reserved;
  }
  if ((unint64_t)v317 >= v329._nsError._code || *v317 - 48 > 9)
  {
LABEL_252:
    uint64_t v323 = 3600 * v315;
    if ((unsigned __int128)(v315 * (__int128)3600) >> 64 == (3600 * v315) >> 63)
    {
      uint64_t v324 = 60 * result;
      if ((unsigned __int128)(result * (__int128)60) >> 64 == (60 * result) >> 63)
      {
        uint64_t result = v323 + v324;
        if (!__OFADD__(v323, v324)) {
          goto LABEL_255;
        }
        goto LABEL_280;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }
  uint64_t v319 = result;
  uint64_t result = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(2, 0, 0, (unint64_t *)&v329._nsError._reserved, 0x30u, 0x39u, a1, a2);
  uint64_t v320 = 3600 * v315;
  if ((unsigned __int128)(v315 * (__int128)3600) >> 64 != (3600 * v315) >> 63)
  {
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }
  uint64_t v321 = 60 * v319;
  if ((unsigned __int128)(v319 * (__int128)60) >> 64 != (60 * v319) >> 63)
  {
LABEL_283:
    __break(1u);
    goto LABEL_284;
  }
  BOOL v40 = __OFADD__(v320, v321);
  uint64_t v322 = v320 + v321;
  if (v40)
  {
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }
  BOOL v40 = __OFADD__(v322, result);
  result += v322;
  if (v40)
  {
    __break(1u);
    goto LABEL_252;
  }
LABEL_255:
  if (!result)
  {
LABEL_260:
    uint64_t v207 = a5;
    static TimeZone.gmt.getter(result, __dst);
    uint64_t tv_nsec = *((void *)&__dst[0] + 1);
    __darwin_time_t tv_sec = *(void *)&__dst[0];
    goto LABEL_220;
  }
  if ((v305 & 1) == 0)
  {
    BOOL v40 = __OFSUB__(0, result);
    uint64_t result = -result;
    if (v40) {
      goto LABEL_281;
    }
  }
  TimeZone.init(secondsFromGMT:)(result, &__tp);
  __darwin_time_t tv_sec = __tp.tv_sec;
  if (!__tp.tv_sec)
  {
    __dst[0] = *(_OWORD *)&v329._nsError._domain;
    __dst[1] = v330;
    *(void *)&__dst[2] = v331;
    v325._time = static Date.now.getter((double *)&v329);
    Swift::String v326 = Date.ISO8601FormatStyle.format(_:)(v325);
    v327._uint64_t countAndFlagsBits = a1;
    v327._unint64_t object = a2;
    parseError(_:exampleFormattedString:)(&v329, v327, (Swift::String_optional)v326);
    swift_bridgeObjectRelease();
    goto LABEL_216;
  }
  uint64_t tv_nsec = __tp.tv_nsec;
LABEL_219:
  uint64_t v207 = a5;
LABEL_220:
  *(void *)&__dst[0] = tv_sec;
  *((void *)&__dst[0] + 1) = tv_nsec;
  DateComponents.timeZone.setter((uint64_t *)__dst);
LABEL_130:
  uint64_t v208 = (char *)((char *)v329._nsError._reserved - (char *)a3);
  uint64_t result = (uint64_t)memcpy(v207 + 1, __src, 0x11AuLL);
  *uint64_t v207 = v208;
  return result;
}

uint64_t digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(uint64_t a1, char a2, char a3, unint64_t *a4, unsigned __int8 a5, unsigned __int8 a6, uint64_t a7, void *a8)
{
  uint64_t v11 = 0;
  uint64_t result = 0;
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (a1 >= 10) {
    a1 = 10;
  }
  if (a1 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = a1;
  }
  unint64_t v15 = *a4;
  unint64_t v14 = a4[1];
  BOOL v16 = v14 >= *a4;
  uint64_t v17 = v14 - *a4;
  if (!v16) {
    uint64_t v17 = 0;
  }
  if (a2) {
    uint64_t v13 = 10;
  }
  while (v17 != v11)
  {
    unsigned int v18 = *(unsigned __int8 *)(v15 + v11);
    uint64_t v19 = v18 - a5;
    if (v18 < a5 || v18 > a6)
    {
      uint64_t v17 = v11;
      break;
    }
    uint64_t v21 = 10 * result;
    if ((unsigned __int128)(result * (__int128)10) >> 64 != (10 * result) >> 63) {
      goto LABEL_53;
    }
    uint64_t result = v21 + v19;
    if (__OFADD__(v21, v19)) {
      goto LABEL_54;
    }
    *a4 = v15 + v11++ + 1;
    if (v13 == v11) {
      goto LABEL_21;
    }
  }
  uint64_t v13 = v17;
  if (v17 < 1)
  {
LABEL_25:
    __tp.__darwin_time_t tv_sec = 0;
    __tp.uint64_t tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
    Swift::String v23 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
    __tp.__darwin_time_t tv_sec = 0;
    __tp.uint64_t tv_nsec = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v24._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
    v24._unint64_t object = (void *)0xED00002065737261;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = a7;
    v25._unint64_t object = a8;
    String.append(_:)(v25);
    v26._unint64_t object = (void *)0x80000001823AB110;
    v26._uint64_t countAndFlagsBits = 0xD000000000000046;
    String.append(_:)(v26);
    String.append(_:)(v23);
    v27._uint64_t countAndFlagsBits = 46;
    v27._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    __darwin_time_t tv_sec = __tp.tv_sec;
    uint64_t tv_nsec = __tp.tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 40) = v31;
    *(void *)(inited + 48) = tv_sec;
    *(void *)(inited + 56) = tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v32 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&__tp);
    __darwin_time_t v33 = __tp.tv_sec;
    uint64_t v34 = __tp.tv_nsec;
    swift_retain();
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
    if (v36)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v32[(v35 >> 6) + 8] |= 1 << v35;
    uint64_t v37 = (__darwin_time_t *)(v32[6] + 16 * v35);
    __darwin_time_t *v37 = v33;
    v37[1] = v34;
    outlined init with take of Any(v84, (_OWORD *)(v32[7] + 32 * v35));
    uint64_t v38 = v32[2];
    BOOL v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (v39)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
    }
    _OWORD v32[2] = v40;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v41 = objc_allocWithZone((Class)NSError);
    uint64_t v42 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v43 = objc_msgSend(v41, sel_initWithDomain_code_userInfo_, v42, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v44 = objc_msgSend(v43, sel_domain);
    id v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    uint64_t v47 = v46;

    if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v47 == v48)
    {
LABEL_29:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0) {
        goto LABEL_57;
      }
    }
    return swift_willThrow();
  }
  else
  {
LABEL_21:
    if (a3)
    {
      switch(v13)
      {
        case 1:
          uint64_t v22 = (unsigned __int128)(result * (__int128)100000000) >> 64;
          result *= 100000000;
          if (v22 == result >> 63) {
            return result;
          }
          __break(1u);
          goto LABEL_25;
        case 2:
          goto LABEL_39;
        case 3:
          goto LABEL_41;
        case 4:
          goto LABEL_43;
        case 5:
          goto LABEL_45;
        case 6:
          goto LABEL_47;
        case 7:
          goto LABEL_49;
        case 8:
          goto LABEL_51;
        case 9:
          return result;
        default:
          __tp.__darwin_time_t tv_sec = 0;
          __tp.uint64_t tv_nsec = 0;
          clock_gettime(_CLOCK_REALTIME, &__tp);
          *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
          Swift::String v50 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
          __tp.__darwin_time_t tv_sec = 0;
          __tp.uint64_t tv_nsec = 0xE000000000000000;
          _StringGuts.grow(_:)(88);
          v51._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
          v51._unint64_t object = (void *)0xED00002065737261;
          String.append(_:)(v51);
          v52._uint64_t countAndFlagsBits = a7;
          v52._unint64_t object = a8;
          String.append(_:)(v52);
          v53._unint64_t object = (void *)0x80000001823AB110;
          v53._uint64_t countAndFlagsBits = 0xD000000000000046;
          String.append(_:)(v53);
          String.append(_:)(v50);
          v54._uint64_t countAndFlagsBits = 46;
          v54._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v54);
          __darwin_time_t v55 = __tp.tv_sec;
          uint64_t v56 = __tp.tv_nsec;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          uint64_t v57 = swift_initStackObject();
          *(_OWORD *)(v57 + 16) = xmmword_1821037E0;
          *(void *)(v57 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
          *(void *)(v57 + 72) = MEMORY[0x1E4FBB1A0];
          *(void *)(v57 + 40) = v58;
          *(void *)(v57 + 48) = v55;
          *(void *)(v57 + 56) = v56;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          unint64_t v59 = (void *)static _DictionaryStorage.allocate(capacity:)();
          outlined init with copy of (String, Any)(v57 + 32, (uint64_t)&__tp);
          __darwin_time_t v60 = __tp.tv_sec;
          uint64_t v61 = __tp.tv_nsec;
          swift_retain();
          unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v60, v61);
          if (v63) {
            goto LABEL_58;
          }
          v59[(v62 >> 6) + 8] |= 1 << v62;
          uint64_t v64 = (__darwin_time_t *)(v59[6] + 16 * v62);
          __darwin_time_t *v64 = v60;
          v64[1] = v61;
          outlined init with take of Any(v84, (_OWORD *)(v59[7] + 32 * v62));
          uint64_t v65 = v59[2];
          BOOL v39 = __OFADD__(v65, 1);
          uint64_t v66 = v65 + 1;
          if (v39) {
            goto LABEL_59;
          }
          v59[2] = v66;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v67 = objc_allocWithZone((Class)NSError);
          uint64_t v68 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v69 = objc_msgSend(v67, sel_initWithDomain_code_userInfo_, v68, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v70 = objc_msgSend(v69, sel_domain);
          id v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
          uint64_t v73 = v72;

          if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v73 == v74) {
            goto LABEL_29;
          }
          char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v75) {
            return swift_willThrow();
          }
          __break(1u);
LABEL_39:
          uint64_t v76 = (unsigned __int128)(result * (__int128)10000000) >> 64;
          result *= 10000000;
          if (v76 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_41:
          uint64_t v77 = (unsigned __int128)(result * (__int128)1000000) >> 64;
          result *= 1000000;
          if (v77 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_43:
          uint64_t v78 = (unsigned __int128)(result * (__int128)100000) >> 64;
          result *= 100000;
          if (v78 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_45:
          uint64_t v79 = (unsigned __int128)(result * (__int128)10000) >> 64;
          result *= 10000;
          if (v79 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_47:
          uint64_t v80 = (unsigned __int128)(result * (__int128)1000) >> 64;
          result *= 1000;
          if (v80 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_49:
          uint64_t v81 = (unsigned __int128)(result * (__int128)100) >> 64;
          result *= 100;
          if (v81 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_51:
          uint64_t v82 = (unsigned __int128)(result * (__int128)10) >> 64;
          result *= 10;
          if (v82 == result >> 63) {
            return result;
          }
          __break(1u);
          break;
      }
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
  }
  return result;
}

uint64_t DateComponents.second.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 144) = v3;
  *(unsigned char *)(v2 + 152) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.minute.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 128) = v3;
  *(unsigned char *)(v2 + 136) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

BOOL specialized Range.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 >= a2 && a1 < a3;
}

uint64_t expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)(uint64_t result, unsigned __int8 **a2, uint64_t a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v6 = *a2;
  if (*a2 >= a2[1] || (int v7 = *v6, *a2 = v6 + 1, v7 != result))
  {
    __tp.__darwin_time_t tv_sec = 0;
    __tp.uint64_t tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
    Swift::String v8 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
    __tp.__darwin_time_t tv_sec = 0;
    __tp.uint64_t tv_nsec = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v9._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
    v9._unint64_t object = (void *)0xED00002065737261;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = a3;
    v10._unint64_t object = a4;
    String.append(_:)(v10);
    v11._unint64_t object = (void *)0x80000001823AB110;
    v11._uint64_t countAndFlagsBits = 0xD000000000000046;
    String.append(_:)(v11);
    String.append(_:)(v8);
    v12._uint64_t countAndFlagsBits = 46;
    v12._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    __darwin_time_t tv_sec = __tp.tv_sec;
    uint64_t tv_nsec = __tp.tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 40) = v16;
    *(void *)(inited + 48) = tv_sec;
    *(void *)(inited + 56) = tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v17 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&__tp);
    __darwin_time_t v18 = __tp.tv_sec;
    uint64_t v19 = __tp.tv_nsec;
    swift_retain();
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v21)
    {
      __break(1u);
    }
    else
    {
      v17[(v20 >> 6) + 8] |= 1 << v20;
      uint64_t v22 = (__darwin_time_t *)(v17[6] + 16 * v20);
      *uint64_t v22 = v18;
      v22[1] = v19;
      outlined init with take of Any(&v36, (_OWORD *)(v17[7] + 32 * v20));
      uint64_t v23 = v17[2];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (!v24)
      {
        _OWORD v17[2] = v25;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v26 = objc_allocWithZone((Class)NSError);
        uint64_t v27 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 2048, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v29 = objc_msgSend(v28, sel_domain);
        id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        uint64_t v32 = v31;

        if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v32 == v33)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return swift_willThrow();
        }
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v34) {
          return swift_willThrow();
        }
LABEL_13:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t outlined release of Date.ISO8601FormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t DateComponents.day.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 80) = v3;
  *(unsigned char *)(v2 + 88) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.month.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 64) = v3;
  *(unsigned char *)(v2 + 72) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.hour.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 112) = v3;
  *(unsigned char *)(v2 + 120) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

uint64_t specialized BufferViewIterator.next()()
{
  unint64_t v1 = (unsigned __int8 *)*v0;
  unint64_t v2 = v0[1];
  if (*v0 < v2)
  {
    int v3 = *v1;
    *Swift::String v0 = (unint64_t)(v1 + 1);
  }
  else
  {
    int v3 = 0;
  }
  return v3 | (((unint64_t)v1 >= v2) << 8);
}

double static TimeZone.gmt.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  int v3 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v3 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v3[4], &v5);
  os_unfair_lock_unlock(v3 + 36);
  swift_release_n();
  double result = *(double *)&v5;
  if ((void)v5) {
    *a2 = v5;
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_181A07B9C(_Unwind_Exception *a1)
{
}

void sub_181A07BBC(void *a1)
{
}

NSNumber __swiftcall Int16._bridgeToObjectiveC()()
{
  __int16 v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithShort_, v1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(char a1)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1);
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = 16;
  if (a1) {
    uint64_t v4 = 8;
  }
  uint64_t v25 = *(void *)(v3 + v4 + 56);
  swift_retain();
  uint64_t v5 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v28 = v6;
  if (specialized Sequence.allSatisfy(_:)(v5, v6))
  {
    swift_bridgeObjectRetain();
    id v7 = (id)String.hashValue.getter();
    unsigned __int8 v8 = 1;
  }
  else
  {
    Swift::String v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v7 = objc_msgSend(v9, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v8 = 0;
  }
  uint64_t v10 = *(void *)(v3 + 88);
  uint64_t v11 = v3;
  uint64_t v12 = *(void *)(v10 + 16);
  unint64_t v13 = *(void *)(v10 + 24);
  uint64_t v14 = *(void *)(v10 + 32);
  unint64_t v15 = v28;
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v15;
  *(void *)(v10 + 32) = v7;
  unsigned __int8 v16 = *(unsigned char *)(v10 + 40);
  *(unsigned char *)(v10 + 40) = v8;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v5, v15, (uint64_t)v7, v8);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v12, v13, v14, v16);
  swift_retain();
  char v17 = specialized Set._Variant.insert(_:)(&v26, v10);
  uint64_t v18 = v26;
  if (v17)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(void *)(v19 + 16) = 2;
    *(unsigned char *)(v19 + 40) = -112;
    *(void *)(v19 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v11 + 88) = v19;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v2 + 40) & 0xF0) == 0x60)
  {
    uint64_t v26 = *(void *)(v2 + 16);
    long long v27 = *(_OWORD *)(v2 + 24);
    *(void *)(v2 + 16) = 2;
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 32) = 0;
    *(unsigned char *)(v2 + 40) = -112;
    swift_retain();
    swift_retain();
    specialized OrderedDictionary.subscript.setter(v25, v18);
    uint64_t v21 = *(void *)(v2 + 16);
    unint64_t v22 = *(void *)(v2 + 24);
    uint64_t v23 = *(void *)(v2 + 32);
    *(void *)(v2 + 16) = v26;
    *(_OWORD *)(v2 + 24) = v27;
    unsigned __int8 v24 = *(unsigned char *)(v2 + 40);
    *(unsigned char *)(v2 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v21, v22, v23, v24);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Bool __swiftcall Calendar.isDateInTomorrow(_:)(Foundation::Date a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  __darwin_time_t v3 = *v1;
  double v5 = *v2;
  double v4 = v2[1];
  __tp.__darwin_time_t tv_sec = 0;
  __tp.uint64_t tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v6 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  LOBYTE(v11._time) = 3;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  *(double *)&__darwin_time_t v7 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __tp.__darwin_time_t tv_sec = v7;
  (*(void (**)(double *__return_ptr, Foundation::Date *, timespec *, uint64_t, double))(*(void *)&v4 + 160))(&v13, &v11, &__tp, ObjectType, COERCE_DOUBLE(*(void *)&v4));
  if (v15) {
    return 0;
  }
  v10._time = v14 + v13 + 60.0;
  double v13 = v5;
  double v14 = v4;
  v11._time = v10._time;
  __tp.__darwin_time_t tv_sec = v3;
  return Calendar.compare(_:to:toGranularity:)(v10, (Foundation::Date)0x404E000000000000, (Foundation::Calendar::Component)&__tp) == NSOrderedSame;
}

void static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    objc_msgSend(a1, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v3 = swift_allocObject();
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    swift_dynamicCast();
    *(void *)(v3 + 16) = v4;

    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
}

uint64_t Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v7 = MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v9 + 16))(&v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v3, a2, v7);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a1;
  return Sequence.filter(_:)();
}

uint64_t outlined consume of PresentationIntent.Kind(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t one-time initialization function for cache(uint64_t a1)
{
  return one-time initialization function for cache(a1, &demangling cache variable for type metadata for LockedState<[ICUNumberFormatter.Signature : ICUNumberFormatter?]>._Buffer, &static ICUNumberFormatter.cache, &qword_1E8ED53D0);
}

{
  return one-time initialization function for cache(a1, &demangling cache variable for type metadata for LockedState<[ICUMeasurementNumberFormatter.Signature : ICUMeasurementNumberFormatter?]>._Buffer, &static ICUMeasurementNumberFormatter.cache, (uint64_t *)algn_1E8ED4D18);
}

{
  return one-time initialization function for cache(a1, &demangling cache variable for type metadata for LockedState<[ICUPercentNumberFormatter.Signature : ICUPercentNumberFormatter?]>._Buffer, &static ICUPercentNumberFormatter.cache, (uint64_t *)algn_1E8ED35C8);
}

{
  return one-time initialization function for cache(a1, &demangling cache variable for type metadata for LockedState<[ICUCurrencyNumberFormatter.Signature : ICUCurrencyNumberFormatter?]>._Buffer, &static ICUCurrencyNumberFormatter.cache, &qword_1E8ED9480);
}

{
  return one-time initialization function for cache(a1, &demangling cache variable for type metadata for LockedState<[ICUByteCountNumberFormatter.Signature : ICUByteCountNumberFormatter?]>._Buffer, &static ICUByteCountNumberFormatter.cache, &qword_1E8ED1F30);
}

uint64_t type metadata completion function for UTF16EndianAdaptor()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t AttributedString.append<A>(_:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  uint64_t v4 = *(_OWORD **)v3;
  long long v5 = *(_OWORD *)(*(void *)v3 + 16);
  long long v6 = *(_OWORD *)(*(void *)v3 + 48);
  v34[1] = *(_OWORD *)(*(void *)v3 + 32);
  _OWORD v34[2] = v6;
  v34[0] = v5;
  swift_retain();
  outlined retain of Locale((uint64_t)v34);
  uint64_t v7 = BigString.endIndex.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v34);
  swift_release();
  long long v14 = v4[2];
  v33[0] = v4[1];
  v33[1] = v14;
  _OWORD v33[2] = v4[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v33);
  uint64_t v15 = BigString.endIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v33);
  swift_release();
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)&long long v26 = v7;
    *((void *)&v26 + 1) = v9;
    uint64_t v27 = v11;
    uint64_t v28 = v13;
    uint64_t v29 = v15;
    uint64_t v30 = v17;
    uint64_t v31 = v19;
    uint64_t v32 = v21;
    return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v26, a1, a2, a3);
  }
  return result;
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(_OWORD *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void **)v4;
    long long v11 = *(_OWORD *)(*(void *)v4 + 16);
    long long v12 = *(_OWORD *)(*(void *)v4 + 48);
    v29[1] = *(_OWORD *)(*(void *)v4 + 32);
    _OWORD v29[2] = v12;
    v29[0] = v11;
    uint64_t v13 = v10[8];
    uint64_t v14 = v10[9];
    uint64_t v15 = v10[10];
    uint64_t v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v29);
    swift_unknownObjectRetain();
    *(void *)uint64_t v5 = AttributedString.Guts.init(string:runs:)(v29, v13, v14, v15, v16);
    swift_release();
  }
  uint64_t v17 = *(_OWORD **)v5;
  long long v18 = *(_OWORD *)(*(void *)v5 + 16);
  long long v19 = *(_OWORD *)(*(void *)v5 + 48);
  v28[1] = *(_OWORD *)(*(void *)v5 + 32);
  v28[2] = v19;
  v28[0] = v18;
  swift_retain();
  outlined retain of Locale((uint64_t)v28);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v28);
  long long v20 = v17[1];
  long long v21 = v17[3];
  v27[1] = v17[2];
  void v27[2] = v21;
  v27[0] = v20;
  long long v22 = v17[1];
  v30[1] = v17[2];
  _OWORD v30[2] = v21;
  v30[0] = v22;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v30, (uint64_t)v31);
  outlined retain of Locale((uint64_t)v31);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v27);
  swift_release();
  long long v23 = a1[1];
  v26[0] = *a1;
  v26[1] = v23;
  long long v24 = a1[3];
  v26[2] = a1[2];
  v26[3] = v24;
  return AttributedString.Guts.replaceSubrange<A>(_:with:)((uint64_t)v26, a2, a3, a4);
}

uint64_t AttributedString.Guts.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  (*(void (**)(_OWORD **__return_ptr, ValueMetadata *, uint64_t))(a4 + 64))(&v35, a3, a4);
  long long v52 = v36;
  long long v53 = v37;
  long long v54 = v38;
  long long v55 = v39;
  long long v7 = v35[2];
  long long v49 = v35[1];
  long long v50 = v7;
  long long v51 = v35[3];
  v56[1] = v7;
  v56[2] = v51;
  v56[0] = v49;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v56, (uint64_t)v57);
  outlined retain of Locale((uint64_t)v57);
  BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
  swift_release();
  long long v8 = v4[2];
  long long v46 = v4[1];
  long long v47 = v8;
  uint64_t v32 = v4;
  long long v48 = v4[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v34);
  char v26 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  outlined release of Locale((uint64_t)&v35);
  BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v30 = BigString.Index.utf8Offset.getter();
  BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v29 = BigString.Index.utf8Offset.getter();
  uint64_t v31 = AttributedStringProtocol.__guts.getter(a3, a4);
  uint64_t v28 = BigString.Index.utf8Offset.getter();
  uint64_t v9 = BigString.Index.utf8Offset.getter();
  if (v26)
  {
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v28, v9, v31, v30, v29);
    uint64_t v10 = BigString.Index.utf8Offset.getter();
    uint64_t v11 = BigString.Index.utf8Offset.getter();
    uint64_t v12 = v10;
    char v13 = 0;
LABEL_7:
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v12, v11, v13, 0);
    outlined release of Locale((uint64_t)v33);
    return swift_release();
  }
  uint64_t v27 = v9;
  uint64_t v14 = BigString.Index.utf8Offset.getter();
  uint64_t v15 = BigString.Index.utf8Offset.getter();
  uint64_t v16 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v14, v15);
  uint64_t v18 = v17;
  long long v19 = v32[2];
  v44[0] = v32[1];
  v44[1] = v19;
  long long v45 = v32[3];
  v58[0] = v44[0];
  v58[1] = v19;
  v58[2] = v45;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v58, (uint64_t)v59);
  outlined retain of Locale((uint64_t)v59);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v44);
  uint64_t v20 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v40);
  outlined retain of Locale((uint64_t)v33);
  long long v21 = (void (*)(long long *, void))BigString.unicodeScalars.modify();
  BigString.UnicodeScalarView.replaceSubrange(_:with:)();
  v21(v60, 0);
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v28, v27, v31, v30, v29);
  long long v22 = v32[2];
  v42[0] = v32[1];
  v42[1] = v22;
  long long v43 = v32[3];
  v60[0] = v42[0];
  v60[1] = v22;
  v60[2] = v43;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v60, (uint64_t)v61);
  outlined retain of Locale((uint64_t)v61);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v42);
  uint64_t v23 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v41);
  uint64_t v25 = v23 - v20;
  if (__OFSUB__(v23, v20))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v11 = v18 + v25;
  if (__OFADD__(v18, v25))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v11 >= v16)
  {
    uint64_t v12 = v16;
    char v13 = 1;
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t AttributedStringProtocol.range<A>(of:options:locale:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, ValueMetadata *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void (*a6)(void *__return_ptr, ValueMetadata *, uint64_t)@<X6>, uint64_t *a7@<X8>)
{
  void (*v59)(void *__return_ptr, ValueMetadata *, uint64_t, double);
  ValueMetadata *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t result;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  long long v110;
  long long v111;
  long long v112;
  long long v113;
  long long v114;
  long long v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  ValueMetadata *v121;
  ValueMetadata *v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  long long v126;
  long long v127;
  long long v128;
  long long v129;
  long long v130;
  long long v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  void (*v174)(void *__return_ptr, ValueMetadata *, uint64_t);
  uint64_t v175;
  ValueMetadata *v176;
  uint64_t v177;
  unsigned char v178[72];
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void v182[14];
  _OWORD v183[3];
  _OWORD v184[3];
  _OWORD v185[3];
  long long v186;
  long long v187;
  long long v188;
  long long v189;
  long long v190;
  long long v191;
  unsigned char v192[40];
  unsigned char v193[40];
  unsigned char v194[40];
  unsigned char v195[40];
  long long v196;
  long long v197;
  long long v198;

  uint64_t v176 = a3;
  uint64_t v173 = a1;
  uint64_t v174 = a6;
  uint64_t v171 = a7;
  uint64_t v172 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v155 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match);
  char v169 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v155 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v155 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  MEMORY[0x1F4188790](v24);
  char v175 = a4;
  uint64_t v25 = *(void *)(a4 - 8);
  double v31 = MEMORY[0x1F4188790](v26);
  uint64_t v33 = (char *)&v155 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v170 = *(char **)v30;
  if (!v170)
  {
    char v170 = v23;
    id v158 = v17;
    unsigned __int8 v159 = v20;
    unsigned __int8 v160 = v14;
    char v161 = v11;
    char v163 = v29;
    char v164 = v27;
    uint64_t v165 = v28;
    char v162 = v15;
    unint64_t v59 = *(void (**)(void *__return_ptr, ValueMetadata *, uint64_t, double))(a5 + 56);
    __darwin_time_t v60 = v176;
    uint64_t v167 = a5;
    v59(v182, v176, a5, v31);
    *(void *)Swift::String v178 = v182[0];
    *(_OWORD *)&v178[8] = *(_OWORD *)&v182[1];
    *(_OWORD *)&v178[24] = *(_OWORD *)&v182[3];
    *(_OWORD *)&v178[40] = *(_OWORD *)&v182[5];
    *(_OWORD *)&v178[56] = *(_OWORD *)&v182[7];
    Swift::String v179 = v182[9];
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
    uint64_t v61 = Substring.init<A>(_:)();
    char v63 = v62;
    uint64_t v168 = v64;
    uint64_t v66 = v65;
    (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v33, v173, v175);
    id v67 = Substring.init<A>(_:)();
    id v71 = v67;
    uint64_t v72 = v68;
    uint64_t v73 = v69;
    uint64_t v74 = v70;
    LOBYTE(v33) = v172;
    if ((v172 & 0x400) == 0)
    {
      if ((v61 ^ v63) < 0x4000 || !((v67 ^ v68) >> 14)) {
        goto LABEL_14;
      }
      uint64_t v83 = v61;
      Swift::String v84 = v63;
      id v156 = v63;
      unsigned int v157 = v61;
      uint64_t v166 = v66;
      if ((v172 & 2) != 0)
      {
        uint64_t v94 = (v172 >> 2) & 1;
        id v95 = v66;
        char v175 = (v172 >> 3) & 1;
        LODWORD(v174) = v172 & 1;
        uint64_t v173 = (v172 >> 7) & 1;
        uint64_t v96 = (v172 >> 8) & 1;
        uint64_t v97 = v83;
        uint64_t v98 = v84;
        swift_bridgeObjectRetain();
        uint64_t v154 = v97;
        __darwin_time_t v60 = v176;
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v71, v72, v73, v74, v96, v173, (char)v174, v175, v94, v154, v98, v168, v95);
        char v175 = v99;
        char v87 = v100;
        swift_bridgeObjectRelease();
      }
      else
      {
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v67, v68, v69, v70, (v172 >> 8) & 1, (v172 >> 7) & 1, v172 & 1, (v172 >> 3) & 1, (v172 & 4) != 0, v61, v63, v168, v66);
        char v175 = v85;
        char v87 = v86;
      }
      id v93 = v167;
      swift_bridgeObjectRelease();
      if (v87) {
        goto LABEL_31;
      }
      goto LABEL_37;
    }
    id v156 = v63;
    unsigned int v157 = v61;
    char v175 = v70;
    uint64_t v166 = v66;
    if (one-time initialization token for cache == -1)
    {
LABEL_22:
      uint64_t v78 = static RegexPatternCache.cache;
      swift_retain();
      uint64_t v79 = MEMORY[0x185301F50](v71, v72, v73, v175);
      MEMORY[0x1F4188790](v79);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v78 + 24));
      uint64_t v80 = v170;
      partial apply for closure #1 in RegexPatternCache.regex(for:caseInsensitive:)((void *)(v78 + 16), v170);
      os_unfair_lock_unlock((os_unfair_lock_t)(v78 + 24));
      swift_bridgeObjectRelease();
      swift_release_n();
      uint64_t v82 = v164;
      uint64_t v81 = v165;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48))(v80, 1, v164) == 1)
      {
        outlined destroy of Any?((uint64_t)v80, &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
LABEL_14:
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
      uint64_t v88 = v163;
      (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v163, v80, v82);
      if ((v33 & 8) != 0)
      {
        v182[0] = v157;
        v182[1] = v156;
        void v182[2] = v168;
        v182[3] = v166;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        uint64_t v102 = (uint64_t)v160;
        BidirectionalCollection<>.prefixMatch<A>(of:)();
        id v90 = v169;
        uint64_t v91 = v162;
        uint64_t v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 48))(v102, 1, v162);
        id v93 = v167;
        __darwin_time_t v60 = v176;
        if (v103 == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v163, v82);
          outlined destroy of Any?(v102, &demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
          goto LABEL_14;
        }
        uint64_t v105 = v159;
        (*(void (**)(char *, uint64_t, uint64_t))(v90 + 32))(v159, v102, v91);
      }
      else
      {
        v182[0] = v157;
        v182[1] = v156;
        void v182[2] = v168;
        v182[3] = v166;
        type metadata accessor for AnyRegexOutput();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        uint64_t v89 = (uint64_t)v161;
        BidirectionalCollection<>.firstMatch<A, B>(of:)();
        id v90 = v169;
        uint64_t v91 = v162;
        id v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 48))(v89, 1, v162);
        id v93 = v167;
        __darwin_time_t v60 = v176;
        if (v92 == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v88, v82);
          outlined destroy of Any?(v89, &demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
          goto LABEL_14;
        }
        uint64_t v104 = v158;
        (*(void (**)(char *, uint64_t, uint64_t))(v90 + 32))(v158, v89, v91);
        uint64_t v105 = v104;
      }
      Regex.Match.range.getter();
      char v175 = v106;
      (*(void (**)(char *, uint64_t))(v90 + 8))(v105, v91);
      (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v163, v164);
      swift_bridgeObjectRelease();
LABEL_37:
      swift_bridgeObjectRetain();
      char v107 = Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      uint64_t v176 = (ValueMetadata *)Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      uint64_t v174 = *(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(v93 + 32);
      char v175 = v93 + 32;
      v174(v182, v60, v93);
      Swift::String v108 = BigString.Index.utf8Offset.getter();
      uint64_t result = AttributedStringProtocol.__guts.getter(v60, v93);
      uint64_t v173 = v108 + v107;
      if (!__OFADD__(v108, v107))
      {
        Swift::String v109 = (_OWORD *)result;
        Swift::String v110 = *(_OWORD *)(result + 16);
        Swift::String v111 = *(_OWORD *)(result + 48);
        char v187 = *(_OWORD *)(result + 32);
        uint64_t v188 = v111;
        id v186 = v110;
        Swift::String v112 = *(_OWORD *)(result + 16);
        long long v190 = *(_OWORD *)(result + 32);
        unint64_t v191 = v111;
        uint64_t v189 = v112;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v189, (uint64_t)v192);
        outlined retain of Locale((uint64_t)v192);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)&v186);
        long long v113 = v109[1];
        uint64_t v114 = v109[3];
        v185[1] = v109[2];
        v185[2] = v114;
        v185[0] = v113;
        uint64_t v115 = v109[1];
        id v197 = v109[2];
        id v198 = v114;
        uint64_t v196 = v115;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v196, (uint64_t)v193);
        outlined retain of Locale((uint64_t)v193);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v185);
        uint64_t v116 = BigString.UTF8View.index(_:offsetBy:)();
        Swift::String v118 = v117;
        uint64_t v172 = v120;
        uint64_t v173 = v119;
        outlined release of Locale((uint64_t)&v180);
        swift_release();
        long long v121 = v60;
        unint64_t v122 = v60;
        char v123 = v167;
        v174(v182, v121, v167);
        uint64_t v124 = BigString.Index.utf8Offset.getter();
        uint64_t result = AttributedStringProtocol.__guts.getter(v122, v123);
        if (!__OFADD__(v124, v176))
        {
          uint64_t v125 = (_OWORD *)result;
          id v126 = *(_OWORD *)(result + 16);
          uint64_t v127 = *(_OWORD *)(result + 48);
          v184[1] = *(_OWORD *)(result + 32);
          v184[2] = v127;
          v184[0] = v126;
          id v128 = *(_OWORD *)(result + 16);
          *(_OWORD *)&v178[16] = *(_OWORD *)(result + 32);
          *(_OWORD *)&v178[32] = v127;
          *(_OWORD *)Swift::String v178 = v128;
          outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)v178, (uint64_t)v194);
          outlined retain of Locale((uint64_t)v194);
          BigString.utf8.getter();
          outlined release of Locale((uint64_t)v184);
          id v129 = v125[1];
          id v130 = v125[3];
          v183[1] = v125[2];
          v183[2] = v130;
          v183[0] = v129;
          unint64_t v131 = v125[1];
          *(_OWORD *)&void v182[2] = v125[2];
          *(_OWORD *)&v182[4] = v130;
          *(_OWORD *)long long v182 = v131;
          outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)v182, (uint64_t)v195);
          outlined retain of Locale((uint64_t)v195);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)v183);
          unint64_t v132 = BigString.UTF8View.index(_:offsetBy:)();
          id v134 = v133;
          Swift::String v136 = v135;
          Swift::String v138 = v137;
          outlined release of Locale((uint64_t)&v181);
          swift_release();
          long long v140 = v172;
          Swift::String v139 = v173;
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if ((result & 1) == 0)
          {
            uint64_t v141 = v171;
            *uint64_t v171 = v116;
            v141[1] = v118;
            v141[2] = v139;
            v141[3] = v140;
            v141[4] = v132;
            v141[5] = v134;
            v141[6] = v136;
            v141[7] = v138;
            return result;
          }
          goto LABEL_56;
        }
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
LABEL_52:
    swift_once();
    goto LABEL_22;
  }
  char v169 = *(void *)(v30 + 8);
  char v34 = v176;
  unint64_t v35 = (_OWORD *)AttributedStringProtocol.__guts.getter(v176, a5);
  long long v36 = v35[1];
  long long v37 = v35[3];
  long long v190 = v35[2];
  unint64_t v191 = v37;
  uint64_t v189 = v36;
  long long v38 = v35[1];
  id v197 = v35[2];
  id v198 = v37;
  uint64_t v196 = v38;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v196, (uint64_t)v184);
  outlined retain of Locale((uint64_t)v184);
  swift_release();
  (*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(v182, v34, a5);
  uint64_t v40 = v182[0];
  long long v39 = (ValueMetadata *)v182[1];
  unint64_t v41 = v182[2];
  uint64_t v42 = v182[3];
  (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(&v186, v34, a5);
  uint64_t v176 = v39;
  Swift::String v177 = v40;
  *(void *)Swift::String v178 = v40;
  *(void *)&v178[8] = v39;
  uint64_t v167 = v42;
  uint64_t v168 = v41;
  *(void *)&v178[16] = v41;
  *(void *)&v178[24] = v42;
  *(_OWORD *)&v178[32] = v186;
  *(_OWORD *)&v178[48] = v187;
  BigString.subscript.getter();
  unint64_t v43 = MEMORY[0x185302040](v182);
  unint64_t v45 = v44;
  *(void *)&id v186 = v43;
  *((void *)&v186 + 1) = v44;
  StringProtocol._ephemeralString.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  long long v46 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v47 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if ((v45 & 0x2000000000000000) != 0) {
    uint64_t v48 = HIBYTE(v45) & 0xF;
  }
  else {
    uint64_t v48 = v43 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v173 = v48;
  uint64_t v174 = (void (*)(void *__return_ptr, ValueMetadata *, uint64_t))v43;
  if ((v45 & 0x1000000000000000) != 0) {
    uint64_t v49 = (v43 >> 59) & 1;
  }
  else {
    uint64_t v49 = 1;
  }
  unint64_t v50 = (unint64_t)&v186;
  uint64_t v51 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v54 = v53 - v51;
  if (__OFSUB__(v53, v51))
  {
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v55 = v51;
  char v175 = v49;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v57 = (void *)(*(uint64_t (**)(uint64_t))(v169 + 488))(ObjectType);
  uint64_t v49 = (uint64_t)objc_msgSend(v46, sel_rangeOfString_options_range_locale_, v47, v172, v55, v54, v57);
  unint64_t v50 = v58;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  unint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
  if (v49 == 0x7FFFFFFFFFFFFFFFLL)
  {
    outlined release of Locale((uint64_t)&v189);
LABEL_31:
    uint64_t result = swift_bridgeObjectRelease();
    char v101 = v171;
    *uint64_t v171 = 0;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = 2;
    *((_OWORD *)v101 + 2) = 0u;
    *((_OWORD *)v101 + 3) = 0u;
    return result;
  }
  if (__OFADD__(v49, v50)) {
    goto LABEL_42;
  }
  uint64_t result = StringProtocol._toUTF16Indices(_:)();
  unint64_t v52 = result;
  unint64_t v50 = v76;
  uint64_t v49 = 4 << v175;
  if ((result & 0xC) != 4 << v175)
  {
    uint64_t v77 = result >> 16;
    if ((v45 & 0x1000000000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v52, (uint64_t)v174, v45);
  uint64_t v77 = result >> 16;
  if ((v45 & 0x1000000000000000) == 0) {
    goto LABEL_18;
  }
LABEL_44:
  if (v173 >= v77)
  {
    uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_18:
    if ((v50 & 0xC) == v49)
    {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v50, (uint64_t)v174, v45);
      unint64_t v50 = result;
      if ((v45 & 0x1000000000000000) == 0) {
        goto LABEL_20;
      }
    }
    else if ((v45 & 0x1000000000000000) == 0)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      char v175 = v50 >> 16;
LABEL_49:
      BigString.utf8.getter();
      uint64_t v142 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v72 = v143;
      uint64_t v145 = v144;
      id v71 = v146;
      outlined release of Locale((uint64_t)v185);
      BigString.utf8.getter();
      uint64_t v147 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v33 = v148;
      uint64_t v73 = v149;
      uint64_t v151 = v150;
      outlined release of Locale((uint64_t)&v186);
      uint64_t v152 = static BigString.Index.< infix(_:_:)();
      uint64_t result = outlined release of Locale((uint64_t)&v189);
      if ((v152 & 1) == 0)
      {
        id v153 = v171;
        *uint64_t v171 = v142;
        v153[1] = v72;
        v153[2] = v145;
        v153[3] = v71;
        v153[4] = v147;
        void v153[5] = (uint64_t)v33;
        v153[6] = v73;
        v153[7] = v151;
        return result;
      }
      __break(1u);
      goto LABEL_52;
    }
    if (v173 < v50 >> 16)
    {
      __break(1u);
      goto LABEL_54;
    }
    char v175 = String.UTF8View._foreignDistance(from:to:)();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t AttributedStringProtocol.__guts.getter(ValueMetadata *a1, uint64_t a2)
{
  if (a1 == &type metadata for AttributedString || a1 == &type metadata for AttributedSubstring) {
    return swift_retain();
  }
  (*(void (**)(void *__return_ptr))(a2 + 56))(v3);
  return v3[0];
}

uint64_t protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString@<X0>(uint64_t (*a1)(uint64_t)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  long long v6 = *(_OWORD *)(*v2 + 16);
  long long v7 = *(_OWORD *)(*v2 + 48);
  v18[1] = *(_OWORD *)(*v2 + 32);
  void v18[2] = v7;
  v18[0] = v6;
  long long v8 = *(_OWORD *)(v5 + 16);
  v19[1] = *(_OWORD *)(v5 + 32);
  void v19[2] = v7;
  v19[0] = v8;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v19, (uint64_t)v20);
  uint64_t v9 = outlined retain of Locale((uint64_t)v20);
  uint64_t v10 = a1(v9);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t result = outlined release of Locale((uint64_t)v18);
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v14;
  a2[3] = v16;
  return result;
}

uint64_t protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString(MEMORY[0x1E4F59DD0], a1);
}

uint64_t protocol witness for AttributedStringProtocol.characters.getter in conformance AttributedString@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(*(void *)v1 + 16);
  long long v5 = *(_OWORD *)(*(void *)v1 + 48);
  v25[1] = *(_OWORD *)(*(void *)v1 + 32);
  v25[2] = v5;
  v25[0] = v4;
  swift_retain();
  outlined retain of Locale((uint64_t)v25);
  uint64_t v6 = BigString.startIndex.getter();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v25);
  long long v13 = v3[1];
  long long v14 = v3[3];
  v24[1] = v3[2];
  v24[2] = v14;
  v24[0] = v13;
  long long v15 = v3[1];
  v26[1] = v3[2];
  v26[2] = v14;
  v26[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v26, (uint64_t)v27);
  outlined retain of Locale((uint64_t)v27);
  uint64_t v16 = BigString.endIndex.getter();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t result = outlined release of Locale((uint64_t)v24);
  *a1 = v3;
  a1[1] = v6;
  a1[2] = v8;
  a1[3] = v10;
  a1[4] = v12;
  a1[5] = v16;
  a1[6] = v18;
  a1[7] = v20;
  a1[8] = v22;
  a1[9] = 0;
  return result;
}

uint64_t protocol witness for AttributedStringProtocol.unicodeScalars.getter in conformance AttributedString@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (_OWORD *)swift_retain();

  return AttributedString.UnicodeScalarView.init(_:)(v2, a1);
}

uint64_t PredicateExpressions.Value.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  v3._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 10302;
  v4._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1821037E0;
  *(void *)(v5 + 56) = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v5 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(boxed_opaque_existential_1, v1, v2);
  debugPrint<A>(_:separator:terminator:to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 41;
  v7._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0x3C65756C6156;
}

uint64_t PropertyListEncoder.userInfo.modify(void *a1)
{
  uint64_t v1 = (os_unfair_lock_s *)a1[2];
  *(void *)(a1[1] + 24) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator;
  if (!lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator);
  }
  return result;
}

id NSProgress.throughput.getter(SEL *a1)
{
  id v2 = [v1 *a1];
  Swift::String v3 = v2;
  if (!v2) {
    return 0;
  }
  id v4 = objc_msgSend(v2, sel_integerValue);

  return v4;
}

id String.init(utf8String:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x185301F80]();
  if (v3) {
    return (id)v2;
  }
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithUTF8String_, a1);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v4;
}

uint64_t (*PropertyListEncoder.userInfo.modify(void *a1))(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 32);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  return PropertyListEncoder.userInfo.modify;
}

uint64_t instantiation function for generic protocol witness table for ComparableComparator<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for NSTimer.TimerPublisher.Side()
{
  return &type metadata for NSTimer.TimerPublisher.Side;
}

void sub_181A0AC78(_Unwind_Exception *a1)
{
}

void sub_181A0ADD4(_Unwind_Exception *a1)
{
}

void sub_181A0AE00(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x181A0AD8CLL);
  }
  JUMPOUT(0x181A0ADF4);
}

uint64_t type metadata completion function for _MutablePairHandle()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for _MutableHandle()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for _ftsent(uint64_t a1)
{
}

uint64_t one-time initialization function for _loadedScopeCache()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<LoadedScopeCache>._Buffer);
  uint64_t result = swift_allocObject();
  uint64_t v1 = MEMORY[0x1E4FBC868];
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 16) = v1;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = v1;
  _loadedScopeCache = result;
  return result;
}

uint64_t URLResourceValues.volumeAvailableCapacityForOpportunisticUsage.getter()
{
  return URLResourceValues.fileIdentifier.getter(MEMORY[0x1E4F1C808]);
}

void one-time initialization function for dataDecodeTable()
{
  dataDecodeTable._rawValue = &outlined read-only object #0 of one-time initialization function for dataDecodeTable;
}

uint64_t destroy for Locale.Components(void *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[9])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[18])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[27])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[31])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[35])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  uint64_t result = a1[41];
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::String __swiftcall String.init(_:)(NSString a1)
{
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1.super.isa);
  id v4 = v3;

  uint64_t v5 = (uint64_t)v2;
  uint64_t v6 = v4;
  result._unint64_t object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t closure #1 in NSURLSession.download(from:delegate:)()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  long long v8 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 32) = v8;
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 56) = v1;
  id v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  *id v4 = v0;
  v4[1] = closure #1 in NSURLSession.upload(for:from:delegate:);
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000018, 0x80000001823ADB90, partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:), v3, v5);
}

uint64_t DateComponents.description.getter()
{
  uint64_t v0 = type metadata accessor for Mirror();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  DateComponents.customMirror.getter();
  uint64_t v4 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v21 + 1))
  {
    v13[1] = v4;
    do
    {
      long long v17 = v19;
      v18[0] = v20;
      v18[1] = v21;
      v16._uint64_t countAndFlagsBits = 0;
      v16._unint64_t object = (void *)0xE000000000000000;
      long long v5 = v19;
      long long v14 = v19;
      outlined init with copy of Any((uint64_t)v18, (uint64_t)v15);
      if (*((void *)&v5 + 1)) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      if (*((void *)&v5 + 1)) {
        Swift::String v7 = (void *)*((void *)&v5 + 1);
      }
      else {
        Swift::String v7 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      v8._uint64_t countAndFlagsBits = v6;
      v8._unint64_t object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 8250;
      v9._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v9);
      _print_unlocked<A, B>(_:_:)();
      v10._uint64_t countAndFlagsBits = 32;
      v10._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v17);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((void *)&v21 + 1));
    uint64_t v11 = v22;
  }
  else
  {
    uint64_t v11 = 0;
  }
  swift_release();
  swift_release();
  return v11;
}

uint64_t outlined destroy of (label: String?, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String?, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Data()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v1, v2);
  outlined consume of Data._Representation(v1, v2);
  return v3;
}

uint64_t DateComponents.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v112 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v109 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  Swift::String v111 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v116, v0, 0x11AuLL);
  uint64_t v6 = MEMORY[0x1E4FBB1A0];
  if (!*(void *)&v116[0])
  {
    Swift::String v9 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v15 = *(void *)&v116[1];
    if (!*(void *)&v116[1]) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  v115[0] = v116[0];
  swift_unknownObjectRetain();
  uint64_t v7 = Calendar.description.getter();
  uint64_t v114 = v6;
  *(void *)&long long v113 = v7;
  *((void *)&v113 + 1) = v8;
  v115[0] = xmmword_18210BAE0;
  outlined init with take of Any(&v113, &v115[1]);
  Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  uint64_t v9[2] = v11 + 1;
  uint64_t v12 = &v9[6 * v11];
  long long v13 = v115[0];
  long long v14 = v115[2];
  void v12[3] = v115[1];
  void v12[4] = v14;
  v12[2] = v13;
  swift_unknownObjectRelease();
  uint64_t v15 = *(void *)&v116[1];
  if (*(void *)&v116[1])
  {
LABEL_7:
    uint64_t v110 = v1;
    swift_getObjectType();
    *(void *)&v115[0] = v15;
    swift_unknownObjectRetain();
    uint64_t v16 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
    uint64_t v114 = v6;
    *(void *)&long long v113 = v16;
    *((void *)&v113 + 1) = v17;
    v115[0] = xmmword_18210BAF0;
    outlined init with take of Any(&v113, &v115[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    unint64_t v19 = v9[2];
    unint64_t v18 = v9[3];
    if (v19 >= v18 >> 1) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v9);
    }
    uint64_t v9[2] = v19 + 1;
    long long v20 = &v9[6 * v19];
    long long v21 = v115[0];
    long long v22 = v115[2];
    v20[3] = v115[1];
    v20[4] = v22;
    _OWORD v20[2] = v21;
    swift_unknownObjectRelease();
    uint64_t v1 = v110;
  }
LABEL_12:
  uint64_t v23 = MEMORY[0x1E4FBB550];
  if (BYTE8(v116[2]))
  {
    if (BYTE8(v116[3])) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v114 = MEMORY[0x1E4FBB550];
    *(void *)&long long v113 = *(void *)&v116[2];
    v115[0] = xmmword_18210BB00;
    outlined init with take of Any(&v113, &v115[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    unint64_t v25 = v9[2];
    unint64_t v24 = v9[3];
    if (v25 >= v24 >> 1) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v9);
    }
    uint64_t v9[2] = v25 + 1;
    uint64_t v26 = &v9[6 * v25];
    long long v27 = v115[0];
    long long v28 = v115[2];
    long long v26[3] = v115[1];
    _OWORD v26[4] = v28;
    v26[2] = v27;
    if (BYTE8(v116[3]))
    {
LABEL_14:
      if (BYTE8(v116[4])) {
        goto LABEL_15;
      }
      goto LABEL_34;
    }
  }
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[3];
  v115[0] = xmmword_18210BB10;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v30 = v9[2];
  unint64_t v29 = v9[3];
  if (v30 >= v29 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v9);
  }
  uint64_t v9[2] = v30 + 1;
  double v31 = &v9[6 * v30];
  long long v32 = v115[0];
  long long v33 = v115[2];
  v31[3] = v115[1];
  v31[4] = v33;
  v31[2] = v32;
  if (BYTE8(v116[4]))
  {
LABEL_15:
    if (BYTE8(v116[5])) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_34:
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[4];
  v115[0] = xmmword_18210BB20;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v35 = v9[2];
  unint64_t v34 = v9[3];
  if (v35 >= v34 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v9);
  }
  uint64_t v9[2] = v35 + 1;
  long long v36 = &v9[6 * v35];
  long long v37 = v115[0];
  long long v38 = v115[2];
  _OWORD v36[3] = v115[1];
  v36[4] = v38;
  void v36[2] = v37;
  if (BYTE8(v116[5]))
  {
LABEL_16:
    if (BYTE8(v116[7])) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_39:
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[5];
  v115[0] = xmmword_18210BB30;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v40 = v9[2];
  unint64_t v39 = v9[3];
  if (v40 >= v39 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v9);
  }
  uint64_t v9[2] = v40 + 1;
  unint64_t v41 = &v9[6 * v40];
  long long v42 = v115[0];
  long long v43 = v115[2];
  v41[3] = v115[1];
  v41[4] = v43;
  v41[2] = v42;
  if (BYTE8(v116[7]))
  {
LABEL_17:
    if (BYTE8(v116[8])) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_44:
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[7];
  v115[0] = xmmword_18210BB40;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v45 = v9[2];
  unint64_t v44 = v9[3];
  if (v45 >= v44 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v9);
  }
  uint64_t v9[2] = v45 + 1;
  long long v46 = &v9[6 * v45];
  long long v47 = v115[0];
  long long v48 = v115[2];
  v46[3] = v115[1];
  v46[4] = v48;
  v46[2] = v47;
  if (BYTE8(v116[8]))
  {
LABEL_18:
    if (BYTE8(v116[9])) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_49:
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[8];
  v115[0] = xmmword_18210BB50;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v50 = v9[2];
  unint64_t v49 = v9[3];
  if (v50 >= v49 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v9);
  }
  uint64_t v9[2] = v50 + 1;
  uint64_t v51 = &v9[6 * v50];
  long long v52 = v115[0];
  long long v53 = v115[2];
  v51[3] = v115[1];
  _OWORD v51[4] = v53;
  v51[2] = v52;
  if (BYTE8(v116[9]))
  {
LABEL_19:
    if (BYTE8(v116[10])) {
      goto LABEL_20;
    }
    goto LABEL_59;
  }
LABEL_54:
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[9];
  v115[0] = xmmword_18210BB60;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v55 = v9[2];
  unint64_t v54 = v9[3];
  if (v55 >= v54 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55 + 1, 1, v9);
  }
  uint64_t v9[2] = v55 + 1;
  uint64_t v56 = &v9[6 * v55];
  long long v57 = v115[0];
  long long v58 = v115[2];
  long long v56[3] = v115[1];
  v56[4] = v58;
  v56[2] = v57;
  if (BYTE8(v116[10]))
  {
LABEL_20:
    if (BYTE8(v116[11])) {
      goto LABEL_21;
    }
    goto LABEL_64;
  }
LABEL_59:
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[10];
  v115[0] = xmmword_18210BB70;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v60 = v9[2];
  unint64_t v59 = v9[3];
  if (v60 >= v59 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v9);
  }
  uint64_t v9[2] = v60 + 1;
  uint64_t v61 = &v9[6 * v60];
  long long v62 = v115[0];
  long long v63 = v115[2];
  v61[3] = v115[1];
  v61[4] = v63;
  v61[2] = v62;
  if (BYTE8(v116[11]))
  {
LABEL_21:
    if (BYTE8(v116[12])) {
      goto LABEL_22;
    }
    goto LABEL_69;
  }
LABEL_64:
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[11];
  v115[0] = xmmword_18210BB80;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v65 = v9[2];
  unint64_t v64 = v9[3];
  if (v65 >= v64 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v64 > 1), v65 + 1, 1, v9);
  }
  uint64_t v9[2] = v65 + 1;
  uint64_t v66 = &v9[6 * v65];
  long long v67 = v115[0];
  long long v68 = v115[2];
  v66[3] = v115[1];
  v66[4] = v68;
  v66[2] = v67;
  if (BYTE8(v116[12]))
  {
LABEL_22:
    if (BYTE8(v116[13])) {
      goto LABEL_79;
    }
    goto LABEL_74;
  }
LABEL_69:
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[12];
  v115[0] = xmmword_18210BB90;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v70 = v9[2];
  unint64_t v69 = v9[3];
  if (v70 >= v69 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v9);
  }
  uint64_t v9[2] = v70 + 1;
  id v71 = &v9[6 * v70];
  long long v72 = v115[0];
  long long v73 = v115[2];
  v71[3] = v115[1];
  v71[4] = v73;
  v71[2] = v72;
  if ((BYTE8(v116[13]) & 1) == 0)
  {
LABEL_74:
    uint64_t v114 = v23;
    *(void *)&long long v113 = *(void *)&v116[13];
    v115[0] = xmmword_18210BBA0;
    outlined init with take of Any(&v113, &v115[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    unint64_t v75 = v9[2];
    unint64_t v74 = v9[3];
    if (v75 >= v74 >> 1) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v74 > 1), v75 + 1, 1, v9);
    }
    uint64_t v9[2] = v75 + 1;
    uint64_t v76 = &v9[6 * v75];
    long long v77 = v115[0];
    long long v78 = v115[2];
    v76[3] = v115[1];
    v76[4] = v78;
    v76[2] = v77;
  }
LABEL_79:
  if (BYTE8(v116[15]))
  {
    if (BYTE8(v116[16])) {
      goto LABEL_81;
    }
  }
  else
  {
    uint64_t v114 = v23;
    *(void *)&long long v113 = *(void *)&v116[15];
    v115[0] = xmmword_18210BBB0;
    outlined init with take of Any(&v113, &v115[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    unint64_t v80 = v9[2];
    unint64_t v79 = v9[3];
    if (v80 >= v79 >> 1) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v79 > 1), v80 + 1, 1, v9);
    }
    uint64_t v9[2] = v80 + 1;
    uint64_t v81 = &v9[6 * v80];
    long long v82 = v115[0];
    long long v83 = v115[2];
    v81[3] = v115[1];
    v81[4] = v83;
    v81[2] = v82;
    if (BYTE8(v116[16]))
    {
LABEL_81:
      if (BYTE8(v116[6])) {
        goto LABEL_82;
      }
      goto LABEL_94;
    }
  }
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[16];
  v115[0] = xmmword_18210BBC0;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v85 = v9[2];
  unint64_t v84 = v9[3];
  if (v85 >= v84 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v84 > 1), v85 + 1, 1, v9);
  }
  uint64_t v9[2] = v85 + 1;
  unint64_t v86 = &v9[6 * v85];
  long long v87 = v115[0];
  long long v88 = v115[2];
  v86[3] = v115[1];
  v86[4] = v88;
  v86[2] = v87;
  if (BYTE8(v116[6]))
  {
LABEL_82:
    if (BYTE8(v116[17])) {
      goto LABEL_104;
    }
    goto LABEL_99;
  }
LABEL_94:
  uint64_t v114 = v23;
  *(void *)&long long v113 = *(void *)&v116[6];
  v115[0] = xmmword_18210BBD0;
  outlined init with take of Any(&v113, &v115[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v90 = v9[2];
  unint64_t v89 = v9[3];
  if (v90 >= v89 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v89 > 1), v90 + 1, 1, v9);
  }
  uint64_t v9[2] = v90 + 1;
  uint64_t v91 = &v9[6 * v90];
  long long v92 = v115[0];
  long long v93 = v115[2];
  v91[3] = v115[1];
  v91[4] = v93;
  v91[2] = v92;
  if ((BYTE8(v116[17]) & 1) == 0)
  {
LABEL_99:
    *(void *)&long long v113 = *(void *)&v116[17];
    uint64_t v114 = v23;
    *(void *)&v115[0] = 0xD000000000000011;
    *((void *)&v115[0] + 1) = 0x80000001823AA180;
    outlined init with take of Any(&v113, &v115[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    unint64_t v95 = v9[2];
    unint64_t v94 = v9[3];
    if (v95 >= v94 >> 1) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v94 > 1), v95 + 1, 1, v9);
    }
    uint64_t v9[2] = v95 + 1;
    uint64_t v96 = &v9[6 * v95];
    long long v97 = v115[0];
    long long v98 = v115[2];
    v96[3] = v115[1];
    v96[4] = v98;
    v96[2] = v97;
  }
LABEL_104:
  if (BYTE9(v116[17]) != 2)
  {
    uint64_t v114 = MEMORY[0x1E4FBB390];
    LOBYTE(v113) = BYTE9(v116[17]) & 1;
    v115[0] = xmmword_18210BBE0;
    outlined init with take of Any(&v113, &v115[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    unint64_t v100 = v9[2];
    unint64_t v99 = v9[3];
    if (v100 >= v99 >> 1) {
      Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v99 > 1), v100 + 1, 1, v9);
    }
    uint64_t v9[2] = v100 + 1;
    char v101 = &v9[6 * v100];
    long long v102 = v115[0];
    long long v103 = v115[2];
    v101[3] = v115[1];
    v101[4] = v103;
    v101[2] = v102;
  }
  memcpy(v115, v116, 0x11AuLL);
  *(void *)&long long v113 = v9;
  uint64_t v104 = *MEMORY[0x1E4FBC410];
  uint64_t v105 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v106 = *(void *)(v105 - 8);
  char v107 = v111;
  (*(void (**)(char *, uint64_t, uint64_t))(v106 + 104))(v111, v104, v105);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v107, 0, 1, v105);
  (*(void (**)(char *, void, uint64_t))(v112 + 104))(v3, *MEMORY[0x1E4FBC430], v1);
  outlined retain of DateComponents((uint64_t)v116);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Date.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1821037E0;
  *(void *)(v9 + 32) = 0xD00000000000001ELL;
  *(void *)(v9 + 40) = 0x80000001823A9B00;
  *(void *)(v9 + 72) = MEMORY[0x1E4FBB3D0];
  *(void *)(v9 + 48) = v8;
  v14[1] = v8;
  v14[0] = v9;
  uint64_t v10 = *MEMORY[0x1E4FBC410];
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v7, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

void Data.customMirror.getter(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a1), a1))
      {
        uint64_t v13 = HIDWORD(a1) - (int)a1;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_28;
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
      uint64_t v13 = v14 - v15;
      if (!__OFSUB__(v14, v15)) {
        goto LABEL_6;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      return;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v13 = BYTE6(a2);
LABEL_6:
      v39[0] = a3;
      uint64_t v44 = MEMORY[0x1E4FBB550];
      *(void *)&long long v43 = v13;
      long long v40 = xmmword_18220B3F0;
      outlined init with take of Any(&v43, &v41);
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v18 = v16[2];
      unint64_t v17 = v16[3];
      if (v18 >= v17 >> 1) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
      }
      v16[2] = v18 + 1;
      unint64_t v19 = &v16[6 * v18];
      long long v20 = v40;
      long long v21 = v42;
      long long v19[3] = v41;
      v19[4] = v21;
      void v19[2] = v20;
      unint64_t v45 = v16;
      long long v22 = 0;
      specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2, (uint64_t *)&v45);
      if (v13 >= 64)
      {
        long long v22 = v45;
        goto LABEL_24;
      }
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          uint64_t v24 = (int)a1;
          BOOL v25 = __OFADD__(v13, (int)a1);
          v13 += (int)a1;
          if (v25) {
            goto LABEL_29;
          }
          uint64_t v23 = a1 >> 32;
          break;
        case 2uLL:
          uint64_t v24 = *(void *)(a1 + 16);
          BOOL v25 = __OFADD__(v13, v24);
          v13 += v24;
          if (v25) {
            goto LABEL_30;
          }
          uint64_t v23 = *(void *)(a1 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v24 = 0;
          uint64_t v23 = BYTE6(a2);
          break;
      }
      if (v23 >= v13) {
        uint64_t v26 = v13;
      }
      else {
        uint64_t v26 = v23;
      }
      if (v26 < v24)
      {
        __break(1u);
      }
      else
      {
        uint64_t v27 = Data._Representation.subscript.getter(v24, v26, a1, a2);
        unint64_t v29 = v28;
        uint64_t v30 = specialized _copyCollectionToContiguousArray<A>(_:)(v27, v28);
        outlined consume of Data._Representation(v27, v29);
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
        *(void *)&long long v43 = v30;
        long long v40 = xmmword_18220B400;
        outlined init with take of Any(&v43, &v41);
        long long v22 = v45;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_21;
        }
      }
      long long v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
LABEL_21:
      unint64_t v32 = v22[2];
      unint64_t v31 = v22[3];
      if (v32 >= v31 >> 1) {
        long long v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v22);
      }
      long long v22[2] = v32 + 1;
      long long v33 = &v22[6 * v32];
      long long v34 = v40;
      long long v35 = v42;
      _OWORD v33[3] = v41;
      v33[4] = v35;
      _OWORD v33[2] = v34;
      unint64_t v45 = v22;
LABEL_24:
      *(void *)&long long v40 = a1;
      *((void *)&v40 + 1) = a2;
      *(void *)&long long v43 = v22;
      uint64_t v36 = *MEMORY[0x1E4FBC410];
      uint64_t v37 = type metadata accessor for Mirror.DisplayStyle();
      uint64_t v38 = *(void *)(v37 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v12, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v12, 0, 1, v37);
      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBC430], v6);
      outlined copy of Data._Representation(a1, a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)]);
      Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
      return;
  }
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v4 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(result), result)) {
        goto LABEL_12;
      }
      uint64_t v5 = HIDWORD(result) - (int)result;
      goto LABEL_6;
    case 2uLL:
      uint64_t v7 = *(void *)(result + 16);
      uint64_t v6 = *(void *)(result + 24);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return (uint64_t)v2;
    default:
      uint64_t v5 = BYTE6(a2);
LABEL_6:
      if (!v5) {
        return (uint64_t)v2;
      }
      if (v5 > 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v2 = (void *)swift_allocObject();
        size_t v8 = _swift_stdlib_malloc_size(v2);
        v2[2] = v5;
        v2[3] = 2 * v8 - 64;
      }
      outlined copy of Data._Representation(v4, a2);
      uint64_t v9 = Data._copyContents(initializing:)(&v10, v2 + 4, v5, v4, a2);
      outlined consume of Data._Representation(v4, a2);
      Swift::String result = outlined consume of Data._Representation(v10, *((unint64_t *)&v10 + 1));
      if (v9 == (_OWORD *)v5) {
        return (uint64_t)v2;
      }
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      __break(1u);
      return result;
  }
}

_OWORD *Data._copyContents(initializing:)(_OWORD *result, void *__dst, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a5 >> 62;
  size_t v8 = result;
  uint64_t v9 = 0;
  size_t v10 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      if ((a4 ^ (unint64_t)(a4 << 32)) >> 32) {
        goto LABEL_23;
      }
      goto LABEL_12;
    case 2uLL:
      uint64_t v9 = *(void *)(a4 + 16);
      uint64_t v12 = *(void *)(a4 + 24);
      if (v9 == v12)
      {
        if (v5 != 2) {
LABEL_12:
        }
          uint64_t v9 = (int)a4;
        outlined copy of Data._Representation(a4, a5);
        goto LABEL_37;
      }
      if (v5 != 2)
      {
LABEL_23:
        int v17 = HIDWORD(a4) - a4;
        if (__OFSUB__(HIDWORD(a4), a4))
        {
          __break(1u);
        }
        else
        {
          if (v17 >= a3) {
            size_t v10 = a3;
          }
          else {
            size_t v10 = v17;
          }
          uint64_t v11 = (int)a4;
          if ((int)a4 <= a4 >> 32)
          {
            uint64_t v18 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (!v18)
            {
              if (__dst)
              {
LABEL_47:
                __break(1u);
                goto LABEL_48;
              }
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }
            uint64_t v19 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            BOOL v15 = __OFSUB__((int)a4, v19);
            uint64_t v20 = (int)a4 - v19;
            if (!v15)
            {
              if (__dst)
              {
                memcpy(__dst, (const void *)(v18 + v20), v10);
LABEL_32:
                outlined copy of Data._Representation(a4, a5);
LABEL_33:
                BOOL v15 = __OFADD__(v11, v10);
                uint64_t v9 = v11 + v10;
                if (!v15) {
                  goto LABEL_38;
                }
                __break(1u);
LABEL_36:
                uint64_t v9 = 0;
LABEL_37:
                size_t v10 = 0;
LABEL_38:
                Data.Iterator.init(_:at:)(a4, a5, v9, v8);
                return (_OWORD *)v10;
              }
              goto LABEL_45;
            }
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
        }
        __break(1u);
        goto LABEL_41;
      }
      if (__OFSUB__(v12, v9))
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      if (v12 - v9 >= a3) {
        size_t v10 = a3;
      }
      else {
        size_t v10 = v12 - v9;
      }
      uint64_t v13 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v13)
      {
        uint64_t v14 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v15 = __OFSUB__(v9, v14);
        uint64_t v16 = v9 - v14;
        if (!v15)
        {
          if (__dst)
          {
            memcpy(__dst, (const void *)(v13 + v16), v10);
            uint64_t v11 = *(void *)(a4 + 16);
            goto LABEL_32;
          }
          goto LABEL_49;
        }
LABEL_43:
        __break(1u);
      }
LABEL_48:
      if (!__dst) {
LABEL_49:
      }
        __break(1u);
      __break(1u);
      return result;
    case 3uLL:
      goto LABEL_38;
    default:
      if ((a5 & 0xFF000000000000) == 0) {
        goto LABEL_36;
      }
      uint64_t __src = a4;
      __int16 v22 = a5;
      char v23 = BYTE2(a5);
      char v24 = BYTE3(a5);
      char v25 = BYTE4(a5);
      char v26 = BYTE5(a5);
      if (!__dst) {
        goto LABEL_46;
      }
      if (BYTE6(a5) >= a3) {
        size_t v10 = a3;
      }
      else {
        size_t v10 = BYTE6(a5);
      }
      memcpy(__dst, &__src, v10);
      uint64_t v11 = 0;
      goto LABEL_33;
  }
}

double Data.Iterator.init(_:at:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v22 = a1;
  *((void *)&v22 + 1) = a2;
  long long v23 = 0u;
  long long v24 = 0u;
  *(void *)&long long v25 = a3;
  uint64_t v7 = a1;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v8 = a1 >> 32;
      *((void *)&v25 + 1) = a1 >> 32;
      uint64_t v10 = (int)a1;
      goto LABEL_5;
    case 2uLL:
      *((void *)&v25 + 1) = *(void *)(a1 + 24);
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
LABEL_5:
      a1 = outlined copy of Data._Representation(a1, a2);
      uint64_t v9 = a3 - v10;
      if (!__OFSUB__(a3, v10)) {
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_16;
    case 3uLL:
      uint64_t v8 = 0;
      *((void *)&v25 + 1) = 0;
      uint64_t v9 = a3;
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      *((void *)&v25 + 1) = BYTE6(a2);
      uint64_t v9 = a3;
LABEL_6:
      BOOL v11 = -v9 < 0;
      uint64_t v12 = -v9 & 0x1F;
      uint64_t v13 = v9 & 0x1F;
      if (!v11) {
        uint64_t v13 = -v12;
      }
      BOOL v14 = __OFSUB__(a3, v13);
      uint64_t v15 = a3 - v13;
      if (v14)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      if (__OFSUB__(v8, v15))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      if (v8 - v15 >= 33)
      {
        uint64_t v8 = v15 + 32;
        if (__OFADD__(v15, 32)) {
LABEL_19:
        }
          __break(1u);
      }
      if (v8 < v15)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      v21[0] = v7;
      v21[1] = a2;
      v20[0] = v15;
      v20[1] = v8;
      MEMORY[0x1F4188790](a1);
      void v19[2] = v21;
      long long v19[3] = v20;
      v19[4] = &v23;
      v19[5] = 32;
      specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))partial apply for specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:), (uint64_t)v19, v7, a2);
      outlined consume of Data._Representation(v7, a2);
      long long v16 = v23;
      *a4 = v22;
      a4[1] = v16;
      double result = *(double *)&v24;
      long long v18 = v25;
      a4[2] = v24;
      a4[3] = v18;
      return result;
  }
}

uint64_t specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL), a3);
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v8 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v9, v10, v8, a3);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      uint64_t v6 = (char *)v11;
      goto LABEL_7;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
      uint64_t v6 = (char *)v11 + BYTE6(a2);
LABEL_7:
      uint64_t result = closure #1 in Data.customMirror.getter((uint64_t)v11, (uint64_t)v6, a3);
      break;
  }
  return result;
}

uint64_t closure #1 in Data.customMirror.getter(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (result)
  {
    uint64_t v11 = MEMORY[0x1E4FBB2A0];
    *(void *)&long long v10 = result;
    outlined init with take of Any(&v10, v9);
    uint64_t v4 = (void *)*a3;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a3 = (uint64_t)v4;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      uint64_t v4 = (void *)result;
      *a3 = result;
    }
    unint64_t v6 = v4[2];
    unint64_t v5 = v4[3];
    if (v6 >= v5 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
      uint64_t v4 = (void *)result;
      *a3 = result;
    }
    v4[2] = v6 + 1;
    uint64_t v7 = &v4[6 * v6];
    long long v8 = v9[1];
    v7[3] = v9[0];
    v7[4] = v8;
    v7[2] = xmmword_18220B410;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString.subscript.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(*(void *)v1 + 32);
  v44[0] = *(_OWORD *)(*(void *)v1 + 16);
  v44[1] = v4;
  _OWORD v44[2] = v3[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v44);
  uint64_t v5 = BigString.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v44);
  long long v12 = v3[1];
  long long v13 = v3[3];
  v43[1] = v3[2];
  v43[2] = v13;
  v43[0] = v12;
  long long v14 = v3[1];
  v45[1] = v3[2];
  v45[2] = v13;
  v45[0] = v14;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v45, (uint64_t)v46);
  outlined retain of Locale((uint64_t)v46);
  uint64_t v15 = BigString.endIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v43);
  v39[0] = v3;
  v39[1] = v5;
  void v39[2] = v7;
  _OWORD v39[3] = v9;
  v39[4] = v11;
  v39[5] = v15;
  v39[6] = v17;
  v39[7] = v19;
  v39[8] = v21;
  v39[9] = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  long long v22 = v3[2];
  long long v40 = v3[1];
  long long v41 = v22;
  long long v42 = v3[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v38);
  uint64_t v23 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v30 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  outlined release of Locale((uint64_t)v39);
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v23;
  a1[2] = v25;
  a1[3] = v27;
  a1[4] = v29;
  a1[5] = v30;
  a1[6] = v32;
  a1[7] = v34;
  a1[8] = v36;
  a1[9] = 0;
  return result;
}

uint64_t instantiation function for generic protocol witness table for _CalendarICU(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _CalendarICU.date(from:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  long long v4 = memcpy(v65, __src, 0x11AuLL);
  uint64_t v5 = v65[2];
  if (v65[2])
  {
    uint64_t v60 = a2;
    uint64_t v61 = &v27;
    uint64_t v6 = *(os_unfair_lock_s **)(v2 + 16);
    MEMORY[0x1F4188790](v4);
    unint64_t v59 = v23;
    v23[2] = v2;
    v23[3] = 0;
    void v23[4] = 0;
    v23[5] = v5;
    v23[6] = v7;
    v23[7] = 0;
    char v24 = 1;
    uint64_t v25 = 0;
    char v26 = 1;
    MEMORY[0x1F4188790](v8);
    swift_unknownObjectRetain_n();
    swift_retain();
    os_unfair_lock_lock(v6 + 4);
    partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(&v64);
    long long v58 = &v63[33];
    os_unfair_lock_unlock(v6 + 4);
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v57 = *((void *)&v64 + 1);
    outlined retain of DateComponents((uint64_t)v65);
    swift_unknownObjectRelease();
    int v55 = LOBYTE(v65[35]);
    int v56 = BYTE1(v65[35]);
    uint64_t v54 = v65[34];
    uint64_t v52 = v65[32];
    int v51 = LOBYTE(v65[33]);
    uint64_t v50 = v65[30];
    int v49 = LOBYTE(v65[31]);
    uint64_t v48 = v65[28];
    int v47 = LOBYTE(v65[29]);
    uint64_t v45 = v65[26];
    int v44 = LOBYTE(v65[27]);
    uint64_t v43 = v65[24];
    int v42 = LOBYTE(v65[25]);
    uint64_t v41 = v65[22];
    int v40 = LOBYTE(v65[23]);
    uint64_t v39 = v65[20];
    int v38 = LOBYTE(v65[21]);
    uint64_t v37 = v65[18];
    int v36 = LOBYTE(v65[19]);
    uint64_t v35 = v65[16];
    int v34 = LOBYTE(v65[17]);
    uint64_t v33 = v65[14];
    int v32 = LOBYTE(v65[15]);
    uint64_t v31 = v65[12];
    int v30 = LOBYTE(v65[13]);
    uint64_t v29 = v65[10];
    int v28 = LOBYTE(v65[11]);
    uint64_t v9 = v65[8];
    char v10 = v65[9];
    uint64_t v11 = v65[6];
    char v12 = v65[7];
    uint64_t v53 = v5;
    uint64_t v13 = v65[4];
    char v14 = v65[5];
    uint64_t v15 = v65[0];
    uint64_t v16 = v65[1];
    uint64_t ObjectType = swift_getObjectType();
    v63[0] = v15;
    v63[1] = v16;
    v63[4] = v13;
    LOBYTE(v63[5]) = v14;
    v63[6] = v11;
    LOBYTE(v63[7]) = v12;
    v63[3] = 0;
    long long v63[2] = 0;
    v63[8] = v9;
    LOBYTE(v63[9]) = v10;
    v63[10] = v29;
    LOBYTE(v63[11]) = v28;
    v63[12] = v31;
    LOBYTE(v63[13]) = v30;
    v63[14] = v33;
    LOBYTE(v63[15]) = v32;
    v63[16] = v35;
    LOBYTE(v63[17]) = v34;
    v63[18] = v37;
    LOBYTE(v63[19]) = v36;
    v63[20] = v39;
    LOBYTE(v63[21]) = v38;
    v63[22] = v41;
    LOBYTE(v63[23]) = v40;
    v63[24] = v43;
    LOBYTE(v63[25]) = v42;
    v63[26] = v45;
    LOBYTE(v63[27]) = v44;
    v63[28] = v48;
    LOBYTE(v63[29]) = v47;
    v63[30] = v50;
    LOBYTE(v63[31]) = v49;
    uint64_t v17 = v58;
    unsigned char *v58 = v51;
    v63[32] = v52;
    v63[34] = v54;
    v17[16] = v55;
    BYTE1(v63[35]) = v56;
    memcpy(v62, v63, 0x11AuLL);
    uint64_t v18 = v57;
    uint64_t v19 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v57 + 176);
    outlined retain of DateComponents((uint64_t)v63);
    v19(v62, ObjectType, v18);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    outlined release of DateComponents((uint64_t)v63);
    return outlined release of DateComponents((uint64_t)v63);
  }
  else
  {
    uint64_t v21 = *(os_unfair_lock_s **)(v2 + 16);
    MEMORY[0x1F4188790](v4);
    MEMORY[0x1F4188790](v22);
    swift_retain();
    os_unfair_lock_lock(v21 + 4);
    closure #1 in LockedState<A>.withLock<A>(_:)specialized partial apply();
    os_unfair_lock_unlock(v21 + 4);
    return swift_release();
  }
}

uint64_t _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(&v3);
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v3;
}

double partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)@<D0>(_OWORD *a1@<X8>)
{
  return partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  double result;
  long long v5;

  (*(void (**)(long long *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
  {
    uint64_t result = *(double *)&v5;
    *a1 = v5;
  }
  return result;
}

void sub_181A0E00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

uint64_t __NSFirePerformWithOrder(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *(const char **)(a3 + 8);
  uint64_t v20 = *(void **)a3;
  long long v4 = *(void **)(a3 + 24);
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v6 = *(const void **)(a3 + 32);
  uint64_t v5 = *(void **)(a3 + 40);
  _CFAutoreleasePoolPush();
  CFRetain(a1);
  objc_sync_enter(v5);
  uint64_t v7 = (void *)[v5 _perft];
  v22.length = [v7 count];
  v22.location = 0;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)v7, v22, v6);
  if (FirstIndexOfValue << 32 != 0xFFFFFFFF00000000) {
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)v7, (int)FirstIndexOfValue);
  }
  int v9 = [v4 count];
  char v10 = (__CFString *)*MEMORY[0x1E4F1C4B0];
  CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F1D410];
  for (uint64_t i = v9 - 1; i != -1; --i)
  {
    uint64_t v13 = (__CFString *)[v4 objectAtIndex:i];
    CFStringRef v14 = v13;
    CFStringRef v15 = v11;
    if (v13 != v10)
    {
      if ([(__CFString *)v13 isEqual:@"kCFRunLoopCommonModes"]) {
        CFStringRef v15 = v11;
      }
      else {
        CFStringRef v15 = v14;
      }
    }
    Current = CFRunLoopGetCurrent();
    CFRunLoopRemoveObserver(Current, (CFRunLoopObserverRef)a1, v15);
  }
  objc_sync_exit(v5);
  objc_msgSend(v20, v19, v18);
  CFRelease(a1);

  return _CFAutoreleasePoolPop();
}

void sub_181A0E190(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t partial apply for closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(a1);
}

{
  uint64_t v1;

  return closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(unsigned char *)(v1 + 64), *(void *)(v1 + 72), a1, *(unsigned char *)(v1 + 80));
}

uint64_t closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, char a10)
{
  uint64_t v11 = a6;
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = a2;
  if (a2)
  {
    uint64_t v18 = a4;
    if (a4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 104);
    uint64_t v23 = *(void *)(a1 + 112);
    uint64_t v25 = a8;
    swift_unknownObjectRetain();
    a3 = v23;
    uint64_t v16 = v31;
    a8 = v25;
    uint64_t v11 = a6;
    uint64_t v18 = a4;
    if (a4)
    {
LABEL_3:
      char v19 = a10;
      if ((a7 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v11 = *(void *)(a1 + 56);
      char v20 = *(unsigned char *)(a1 + 64);
      if (v19) {
        goto LABEL_5;
      }
LABEL_9:
      char v22 = 0;
      uint64_t v21 = a8;
      goto LABEL_10;
    }
  }
  uint64_t v26 = v11;
  uint64_t v27 = a8;
  uint64_t v28 = a3;
  swift_unknownObjectRetain();
  a3 = v28;
  a8 = v27;
  uint64_t v11 = v26;
  uint64_t v18 = v15;
  a5 = v16;
  char v19 = a10;
  if (a7) {
    goto LABEL_8;
  }
LABEL_4:
  char v20 = 0;
  if ((v19 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
LABEL_10:
  unsigned __int8 v37 = *(unsigned char *)(a1 + 24);
  v36[0] = v18;
  v36[1] = a5;
  v35[0] = v17;
  v35[1] = a3;
  uint64_t v33 = 0;
  char v34 = 1;
  type metadata accessor for _CalendarICU();
  uint64_t v29 = swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  _CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(&v37, v36, v35, v11, v20, v21, v22, &v33);
  uint64_t result = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU((unint64_t *)&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU);
  *a9 = v29;
  a9[1] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _CalendarICU();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for _CalendarICU()
{
  return self;
}

uint64_t _CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v9 = v8;
  unsigned __int8 v11 = *a1;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  int v28 = a5 & 1;
  int v29 = a7 & 1;
  uint64_t v15 = *a3;
  uint64_t v14 = a3[1];
  uint64_t v16 = *a8;
  char v17 = *((unsigned char *)a8 + 8);
  *(void *)(v9 + 56) = 0;
  *(unsigned char *)(v9 + 64) = 1;
  *(void *)(v9 + 72) = 0;
  *(unsigned char *)(v9 + 80) = 1;
  *(unsigned char *)(v9 + 24) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = 0;
  *(void *)(v9 + 16) = v18;
  *(void *)(v9 + 104) = v15;
  *(void *)(v9 + 112) = v14;
  if (v12)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    uint64_t v27 = a6;
    uint64_t v19 = one-time initialization token for cache;
    swift_unknownObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    char v20 = (uint64_t *)(static TimeZoneCache.cache + 16);
    uint64_t v21 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(v21);
    closure #1 in TimeZoneCache.default.getter(v20, &v33);
    os_unfair_lock_unlock(v21);
    swift_release_n();
    uint64_t v12 = v33;
    uint64_t v13 = v34;
    a6 = v27;
  }
  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 48) = v13;
  *(void *)(v9 + 56) = a4;
  *(unsigned char *)(v9 + 64) = v28 != 0;
  *(void *)(v9 + 72) = a6;
  *(unsigned char *)(v9 + 80) = v29 != 0;
  *(void *)(v9 + 88) = v16;
  *(unsigned char *)(v9 + 96) = v17;
  v32[0] = v11;
  uint64_t v33 = v12;
  uint64_t v34 = v13;
  if (v15)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    uint64_t v22 = one-time initialization token for cache;
    uint64_t v23 = swift_unknownObjectRetain();
    if (v22 != -1) {
      uint64_t v23 = swift_once();
    }
    char v24 = (os_unfair_lock_s *)static LocaleCache.cache;
    MEMORY[0x1F4188790](v23);
    swift_retain_n();
    os_unfair_lock_lock(v24 + 31);
    partial apply for closure #1 in LocaleCache.fixed(_:)((uint64_t)&v24[4], &v31);
    os_unfair_lock_unlock(v24 + 31);
    swift_release_n();
    uint64_t v14 = *((void *)&v31 + 1);
    uint64_t v15 = v31;
  }
  *(void *)&long long v31 = v15;
  *((void *)&v31 + 1) = v14;
  uint64_t v25 = specialized static _CalendarICU.icuCalendar(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(v32, &v33, (uint64_t)&v31, a4, v28, a6, v29);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(void *)(v9 + 32) = v25;
  return v9;
}

uint64_t specialized static _CalendarICU.icuCalendar(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t result;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v40;
  uint64_t v42;
  void v43[18];
  _DWORD v44[36];
  void __dst[44];
  void v46[25];
  __int16 v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  _OWORD __src[22];
  uint64_t v58;

  long long v58 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *a1;
  uint64_t v8 = *a2;
  int v42 = a2[1];
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  unsigned __int8 v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 64);
  swift_unknownObjectRetain();
  int v40 = ObjectType;
  uint64_t v12 = v11(ObjectType, v9);
  uint64_t v14 = v13;
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(v12, v14, v46);
  __src[0] = *(_OWORD *)v46;
  __src[1] = *(_OWORD *)&v46[2];
  __src[2] = *(_OWORD *)&v46[4];
  __src[3] = *(_OWORD *)&v46[6];
  __src[4] = *(_OWORD *)&v46[8];
  __src[5] = *(_OWORD *)&v46[10];
  LOBYTE(__src[6]) = v7;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)&v46[13];
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)&v46[15];
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)&v46[17];
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)&v46[19];
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)&v46[21];
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)&v46[23];
  WORD4(__src[12]) = v47;
  __src[13] = v48;
  __src[14] = v49;
  __src[15] = v50;
  __src[16] = v51;
  __src[17] = v52;
  __src[18] = v53;
  __src[19] = v54;
  __src[20] = v55;
  __src[21] = v56;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  uint64_t v15 = swift_getObjectType();
  unint64_t v16 = *(void *)(v42 + 32);
  swift_unknownObjectRetain();
  uint64_t v17 = ((uint64_t (*)(uint64_t, uint64_t))v16)(v15, v42);
  unint64_t v19 = v18;
  swift_unknownObjectRelease();
  char v20 = specialized _copyCollectionToContiguousArray<A>(_:)(v17, v19);
  swift_bridgeObjectRelease();
  if (v20[2] >> 31)
  {
    __break(1u);
    goto LABEL_35;
  }
  String.utf8CString.getter();
  uint64_t v8 = ucal_open();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v8) {
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  unint64_t v16 = v7;
  if (v7)
  {
    if ((a5 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 464);
    swift_unknownObjectRetain();
    v21(v43, v40, v9);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v43, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v44, (uint64_t)__dst, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)__dst) == 1) {
      goto LABEL_25;
    }
    uint64_t v22 = __dst[6];
    swift_bridgeObjectRetain();
    outlined release of LocalePreferences?((uint64_t)v44);
    if (!v22) {
      goto LABEL_25;
    }
    if (!*(void *)(v22 + 16)) {
      goto LABEL_24;
    }
    uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    if ((v24 & 1) == 0) {
      goto LABEL_24;
    }
    uint64_t v14 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
    swift_bridgeObjectRelease();
    if (v14 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v14 <= 0x7FFFFFFF)
      {
        if ((int)v14 < 1 || v14 >= 8) {
          goto LABEL_25;
        }
        if (one-time initialization token for weekdays == -1) {
          goto LABEL_18;
        }
        goto LABEL_39;
      }
LABEL_38:
      __break(1u);
LABEL_39:
      swift_once();
LABEL_18:
      uint64_t v25 = static Locale.Weekday.weekdays;
      if ((unint64_t)v14 > *((void *)static Locale.Weekday.weekdays + 2))
      {
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v26 = *((unsigned char *)static Locale.Weekday.weekdays + v14 + 31);
      swift_bridgeObjectRetain();
      uint64_t v27 = specialized Collection<>.firstIndex(of:)(v26, (uint64_t)v25);
      uint64_t v14 = v28;
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
      {
        int v29 = v27 + 1;
        if (!__OFADD__(v27, 1))
        {
          if (v29 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v29 <= 0x7FFFFFFF) {
              goto LABEL_7;
            }
            __break(1u);
LABEL_24:
            swift_bridgeObjectRelease();
            goto LABEL_25;
          }
LABEL_42:
          __break(1u);
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      __break(1u);
LABEL_44:
      __dst[0] = 0;
      __dst[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v34._unint64_t object = (void *)0x80000001823B2530;
      v34._uint64_t countAndFlagsBits = 0xD000000000000030;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = v12;
      v35._unint64_t object = (void *)v14;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 32;
      v36._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      LOBYTE(v44[0]) = v7;
      _print_unlocked<A, B>(_:_:)();
      v37._uint64_t countAndFlagsBits = 8250;
      v37._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v37);
      v44[0] = 0;
      type metadata accessor for UErrorCode(0);
      _print_unlocked<A, B>(_:_:)();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  ucal_getGregorianChange();
  ucal_setGregorianChange();
  if (a5) {
    goto LABEL_9;
  }
LABEL_5:
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_7:
  ucal_setAttribute();
LABEL_25:
  if (a7)
  {
    int v30 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 464);
    swift_unknownObjectRetain();
    v30(v43, v40, v9);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v43, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v44, (uint64_t)__dst, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)__dst) != 1)
    {
      long long v31 = __dst[7];
      swift_bridgeObjectRetain();
      outlined release of LocalePreferences?((uint64_t)v44);
      if (v31)
      {
        if (*(void *)(v31 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v16), (v32 & 1) != 0))
        {
          swift_bridgeObjectRelease();
          ucal_setAttribute();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  else
  {
    ucal_setAttribute();
  }
  outlined release of Locale.Components((uint64_t *)__src);
  return v8;
}

BOOL partial apply for closure #1 in Sequence.sorted<A, B>(using:)(uint64_t a1, uint64_t a2)
{
  return Sequence.compare<A>(_:_:)(a1, a2, v2[3], v2[4], v2[6], v2[7]) == -1;
}

uint64_t Sequence.compare<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = a6;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  double v19 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v21 = (char *)&v28 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, v33, a3, v19);
  int v32 = v21;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v33 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v23 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v24 = v28;
  uint64_t v25 = (void (**)(char *, uint64_t))(v8 + 8);
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((*v22)(v13, 1, a4) == 1) {
      break;
    }
    (*v23)(v10, v13, a4);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 24))(v30, v31, a4, v24);
    (*v25)(v10, a4);
    if (v26) {
      goto LABEL_6;
    }
  }
  uint64_t v26 = 0;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v33);
  return v26;
}

uint64_t getEnumTagSinglePayload for KeyPathComparator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unint64_t Range<>.init(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized Range<>.init<A>(_:_genericIn:)(a1, a2, a3, a4);
}

unint64_t specialized Range<>.init<A>(_:_genericIn:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a1 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v4 = (a4 & 0x2000000000000000) != 0 ? HIBYTE(a4) & 0xF : a3 & 0xFFFFFFFFFFFFLL;
  uint64_t v5 = String.UTF16View.index(_:offsetBy:limitedBy:)();
  if (v6) {
    return 0;
  }
  unint64_t v7 = v5;
  unint64_t result = String.UTF16View.index(_:offsetBy:limitedBy:)();
  if ((v9 & 1) != 0 || result >> 14 > 4 * v4) {
    return 0;
  }
  if (result >> 14 >= v7 >> 14) {
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t one-time initialization function for cache(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  *a3 = 100;
  *a4 = result;
  return result;
}

void @objc NSMutableDictionary.subscript.setter(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_unknownObjectRetain();
    id v3 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
    swift_unknownObjectRetain();
    id v4 = a1;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  NSMutableDictionary.subscript.setter((uint64_t)v7, v6);
}

uint64_t NSMutableDictionary.subscript.setter(uint64_t a1, void *a2)
{
  id v3 = v2;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v6 = _bridgeAnythingToObjectiveC<A>(_:)();
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v9)
  {
    outlined init with take of Any(&v8, &v10);
    __swift_project_boxed_opaque_existential_1(&v10, v11);
    objc_msgSend(v3, sel_setObject_forKey_, _bridgeAnythingToObjectiveC<A>(_:)(), v6);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
    objc_msgSend(v3, sel_removeObjectForKey_, v6);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    return outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
}

uint64_t PredicateExpressions.Variable.init()@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for nextID != -1) {
    uint64_t result = swift_once();
  }
  *a1 = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
  return result;
}

NSRect NSUnionRect(NSRect aRect, NSRect bRect)
{
  BOOL v2 = bRect.size.width <= 0.0;
  if (bRect.size.height <= 0.0) {
    BOOL v2 = 1;
  }
  if (aRect.size.width <= 0.0 || aRect.size.height <= 0.0)
  {
    aRect.origin.x = 0.0;
    aRect.origin.y = 0.0;
    aRect.size.width = 0.0;
    aRect.size.height = 0.0;
    if (!v2) {
      return bRect;
    }
  }
  else if (!v2)
  {
    double v3 = aRect.origin.x + aRect.size.width;
    if (aRect.origin.x >= bRect.origin.x) {
      aRect.origin.x = bRect.origin.x;
    }
    double v4 = aRect.origin.y + aRect.size.height;
    if (aRect.origin.y >= bRect.origin.y) {
      aRect.origin.y = bRect.origin.y;
    }
    double v5 = bRect.origin.x + bRect.size.width;
    if (v3 <= v5) {
      double v3 = v5;
    }
    aRect.size.width = v3 - aRect.origin.x;
    if (v4 <= bRect.origin.y + bRect.size.height) {
      double v4 = bRect.origin.y + bRect.size.height;
    }
    aRect.size.height = v4 - aRect.origin.y;
  }
  return aRect;
}

void sub_181A1058C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose((const void *)(v43 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_181A10E58(_Unwind_Exception *a1)
{
}

void sub_181A10E78(void *a1)
{
}

CFStringRef __CFCreateUUIDString()
{
  CFUUIDRef v0 = CFUUIDCreate(0);
  CFStringRef v1 = CFUUIDCreateString(0, v0);
  CFRelease(v0);
  return v1;
}

uint64_t NSFileCoordinatorGetTSD()
{
  uint64_t v0 = _CFGetTSD();
  if (!v0)
  {
    uint64_t v0 = (uint64_t)malloc_type_calloc(1uLL, 0x40uLL, 0x10E0040124FB198uLL);
    _CFSetTSD();
  }
  return v0;
}

uint64_t initializeWithCopy for _CodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of _CodingKey(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t destroy for _PlistKeyedEncodingContainerXML(uint64_t a1)
{
  swift_release();
  outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));

  return swift_release();
}

uint64_t _PlistKeyedEncodingContainerXML.encode<A>(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v75 = a4;
  unint64_t v76 = a5;
  unint64_t v74 = a1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  v11.n128_f64[0] = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v68 - v12;
  unint64_t v73 = v5;
  unint64_t v14 = *(void *)(*(void *)v5 + 40);
  uint64_t v15 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v68 - v12, a2, v8, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v8);
  unint64_t v16 = *(void *)(a3 + 24);
  swift_retain();
  uint64_t v17 = v79;
  __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(v74, v14, (uint64_t)v13, v75, v8, v76, v16, v77);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return swift_release();
  }
  unint64_t v75 = 0;
  unint64_t v19 = v73;
  char v20 = v78;
  if (v78 == 255)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    char v20 = 7;
    uint64_t v21 = swift_allocObject();
    unint64_t v76 = 0;
    uint64_t v79 = v21;
    *(void *)(v21 + 16) = MEMORY[0x1E4FBC868];
  }
  else
  {
    uint64_t v79 = v77[0];
    unint64_t v76 = v77[1];
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  swift_release();
  unint64_t v22 = v19;
  uint64_t v23 = *(void *)(v19 + 8);
  unint64_t v24 = *(void *)(v22 + 16);
  int v25 = *(unsigned __int8 *)(v22 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v23, v24, *(unsigned char *)(v22 + 24));
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (v25 != 7)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v28 = v26;
  unint64_t v29 = v27;
  outlined copy of _XMLPlistEncodingFormat.Reference(v23, v24, 7);
  swift_bridgeObjectRetain();
  char v30 = v20;
  outlined copy of _XMLPlistEncodingFormat.Reference(v79, v76, v20);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v77[0] = *(void *)(v23 + 16);
  uint64_t v32 = v77[0];
  *(void *)(v23 + 16) = 0x8000000000000000;
  unint64_t v74 = v28;
  unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29, 0);
  uint64_t v35 = *(void *)(v32 + 16);
  BOOL v36 = (v33 & 1) == 0;
  uint64_t v37 = v35 + v36;
  if (__OFADD__(v35, v36))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v28) = v33;
    if (*(void *)(v32 + 24) < v37)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
      uint64_t v38 = v77[0];
      uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v29, 0);
      if ((v28 & 1) != (v40 & 1)) {
        goto LABEL_57;
      }
      unint64_t v34 = v39;
      uint64_t v41 = v79;
      if ((v28 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v42 = *(void *)(v38 + 56) + 24 * v34;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v42, *(void *)(v42 + 8), *(unsigned char *)(v42 + 16));
      unint64_t v43 = v76;
      *(void *)uint64_t v42 = v41;
      *(void *)(v42 + 8) = v43;
      *(unsigned char *)(v42 + 16) = v30;
      unint64_t v44 = v43;
LABEL_52:
      *(void *)(v23 + 16) = v38;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v23, v24, 7);
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v23, v24, 7);
      return outlined consume of _XMLPlistEncodingFormat.Reference(v41, v44, v30);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v38 = v32;
      uint64_t v41 = v79;
      if (v33) {
        goto LABEL_14;
      }
LABEL_51:
      unint64_t v44 = v76;
      specialized _NativeDictionary._insert(at:key:value:)(v34, v74, v29, 0, v41, v76, v30, (void *)v38);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  unint64_t v68 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v45 = static _DictionaryStorage.copy(original:)();
  uint64_t v38 = v45;
  if (!*(void *)(v32 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v41 = v79;
    unint64_t v34 = v68;
    if (v28) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  long long v46 = (char *)(v45 + 64);
  uint64_t v47 = 1 << *(unsigned char *)(v38 + 32);
  unint64_t v70 = (char *)(v32 + 64);
  unint64_t v48 = (unint64_t)(v47 + 63) >> 6;
  if (v38 != v32 || v46 >= &v70[8 * v48]) {
    memmove(v46, v70, 8 * v48);
  }
  int64_t v71 = 0;
  *(void *)(v38 + 16) = *(void *)(v32 + 16);
  uint64_t v49 = 1 << *(unsigned char *)(v32 + 32);
  uint64_t v50 = -1;
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  unint64_t v73 = v50 & *(void *)(v32 + 64);
  int64_t v69 = (unint64_t)(v49 + 63) >> 6;
  while (1)
  {
    if (v73)
    {
      unint64_t v51 = __clz(__rbit64(v73));
      v73 &= v73 - 1;
      unint64_t v52 = v51 | (v71 << 6);
      goto LABEL_24;
    }
    int64_t v64 = v71 + 1;
    if (__OFADD__(v71, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v64 >= v69) {
      goto LABEL_50;
    }
    unint64_t v65 = *(void *)&v70[8 * v64];
    int64_t v66 = v71 + 1;
    if (!v65)
    {
      int64_t v66 = v71 + 2;
      if (v71 + 2 >= v69) {
        goto LABEL_50;
      }
      unint64_t v65 = *(void *)&v70[8 * v66];
      if (!v65)
      {
        int64_t v66 = v71 + 3;
        if (v71 + 3 >= v69) {
          goto LABEL_50;
        }
        unint64_t v65 = *(void *)&v70[8 * v66];
        if (!v65)
        {
          int64_t v66 = v71 + 4;
          if (v71 + 4 >= v69) {
            goto LABEL_50;
          }
          unint64_t v65 = *(void *)&v70[8 * v66];
          if (!v65)
          {
            int64_t v66 = v71 + 5;
            if (v71 + 5 >= v69) {
              goto LABEL_50;
            }
            unint64_t v65 = *(void *)&v70[8 * v66];
            if (!v65)
            {
              int64_t v66 = v71 + 6;
              if (v71 + 6 >= v69) {
                goto LABEL_50;
              }
              unint64_t v65 = *(void *)&v70[8 * v66];
              if (!v65)
              {
                int64_t v66 = v71 + 7;
                if (v71 + 7 >= v69) {
                  goto LABEL_50;
                }
                unint64_t v65 = *(void *)&v70[8 * v66];
                if (!v65)
                {
                  int64_t v66 = v71 + 8;
                  if (v71 + 8 >= v69) {
                    goto LABEL_50;
                  }
                  unint64_t v65 = *(void *)&v70[8 * v66];
                  if (!v65) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    unint64_t v73 = (v65 - 1) & v65;
    int64_t v71 = v66;
    unint64_t v52 = __clz(__rbit64(v65)) + (v66 << 6);
LABEL_24:
    uint64_t v53 = 24 * v52;
    uint64_t v54 = *(void *)(v32 + 48) + v53;
    uint64_t v55 = *(void *)v54;
    unint64_t v56 = *(void *)(v54 + 8);
    uint64_t v57 = *(void *)(v32 + 56) + v53;
    unint64_t v59 = *(void *)(v57 + 8);
    uint64_t v72 = *(void *)v57;
    uint64_t v58 = v72;
    uint64_t v60 = *(void *)(v38 + 48) + v53;
    char v61 = *(unsigned char *)(v54 + 16);
    char v62 = *(unsigned char *)(v57 + 16);
    *(void *)uint64_t v60 = v55;
    *(void *)(v60 + 8) = v56;
    *(unsigned char *)(v60 + 16) = v61;
    uint64_t v63 = *(void *)(v38 + 56) + v53;
    *(void *)uint64_t v63 = v58;
    *(void *)(v63 + 8) = v59;
    *(unsigned char *)(v63 + 16) = v62;
    outlined copy of _XMLPlistEncodingFormat.Reference(v55, v56, v61);
    outlined copy of _XMLPlistEncodingFormat.Reference(v72, v59, v62);
  }
  int64_t v67 = v71 + 9;
  if (v71 + 9 >= v69) {
    goto LABEL_50;
  }
  unint64_t v65 = *(void *)&v70[8 * v67];
  if (v65)
  {
    int64_t v66 = v71 + 9;
    goto LABEL_49;
  }
  while (1)
  {
    int64_t v66 = v67 + 1;
    if (__OFADD__(v67, 1)) {
      break;
    }
    if (v66 >= v69) {
      goto LABEL_50;
    }
    unint64_t v65 = *(void *)&v70[8 * v66];
    ++v67;
    if (v65) {
      goto LABEL_49;
    }
  }
LABEL_56:
  __break(1u);
LABEL_57:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  int v5 = a3;
  Hasher.init(_seed:)();
  if (v5)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of _XMLPlistEncodingFormat.Reference(a1, a2, 0);
    Swift::Int v6 = Hasher._finalize()();
    return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, 0, v6);
  }
  return result;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if (((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return v7;
  }
  uint64_t v10 = ~v6;
  uint64_t v11 = *(void *)(v4 + 48);
  int v12 = a3;
  while (1)
  {
    uint64_t v13 = v11 + 24 * v7;
    if (*(unsigned char *)(v13 + 16) || v12 != 0) {
      break;
    }
    if ((*(void *)v13 != a1 || *(void *)(v13 + 8) != a2)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      unint64_t v7 = (v7 + 1) & v10;
      if ((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7)) {
        continue;
      }
    }
    return v7;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1 << result;
  uint64_t v8 = a8[6] + 24 * result;
  *(void *)uint64_t v8 = a2;
  *(void *)(v8 + 8) = a3;
  *(unsigned char *)(v8 + 16) = a4;
  uint64_t v9 = a8[7] + 24 * result;
  *(void *)uint64_t v9 = a5;
  *(void *)(v9 + 8) = a6;
  *(unsigned char *)(v9 + 16) = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendDictionary(_:indentation:)(Swift::OpaquePointer _, Swift::Int indentation)
{
  uint64_t v3 = v2;
  Swift::Int v213 = indentation;
  v256[36] = *(void **)MEMORY[0x1E4F143B8];
  if (*((void *)_._rawValue + 2))
  {
    v256[0] = (void *)60;
    v256[1] = (void *)0xE100000000000000;
    uint64_t v4 = 0;
    specialized String.withUTF8<A>(_:)((uint64_t *)v256);
    swift_bridgeObjectRelease();
    _XMLPlistEncodingFormat.Writer.append(_:)("dict", 4);
    v256[0] = (void *)2622;
    v256[1] = (void *)0xE200000000000000;
    specialized String.withUTF8<A>(_:)((uint64_t *)v256);
    swift_bridgeObjectRelease();
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(v5);
    swift_bridgeObjectRelease();
    v256[0] = v6;
    specialized MutableCollection<>.sort(by:)(v256);
    unint64_t v7 = v256[0];
    uint64_t v221 = specialized Array._getCount()(v256[0]);
    if (v221)
    {
      uint64_t v9 = v213 + 1;
      if (__OFADD__(v213, 1)) {
        goto LABEL_223;
      }
      uint64_t v10 = 0;
      unint64_t v220 = v7 + 4;
      uint64_t v11 = v213 + 2;
      BOOL v12 = __OFADD__(v9, 1);
      BOOL v205 = v12;
      uint64_t v214 = v3 + 24;
      BOOL v13 = __OFADD__(v11, 1);
      BOOL v210 = v13;
      Swift::Int v239 = v213 + 4;
      BOOL v14 = __OFADD__(v213 + 3, 1);
      BOOL v212 = v14;
      uint64_t v15 = 8;
      Swift::Int v231 = v213 + 2;
      if (v11 >= 8) {
        uint64_t v11 = 8;
      }
      Swift::Int v216 = v11;
      Swift::Int v223 = v213 + 1;
      if (v9 < 8) {
        uint64_t v15 = v213 + 1;
      }
      Swift::Int v209 = v15;
      unint64_t v16 = "key";
      *(void *)&long long v8 = 50462976;
      long long v215 = v8;
      long long v218 = xmmword_1822056F0;
      long long v222 = xmmword_182205730;
      long long v243 = xmmword_1822056E0;
      long long v208 = xmmword_182205710;
      long long v207 = xmmword_182205720;
      long long v211 = xmmword_182205700;
      uint64_t v240 = v3;
      uint64_t v241 = v213 + 3;
      char v219 = v7;
      while (2)
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v10, 1, v7);
        uint64_t v232 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_215;
        }
        uint64_t v23 = &v220[6 * v10];
        uint64_t v24 = *v23;
        int v25 = (os_unfair_lock_s *)v23[1];
        uint64_t v26 = v23[3];
        unint64_t v27 = v23[4];
        uint64_t v28 = v3;
        uint64_t v29 = *((unsigned __int8 *)v23 + 40);
        char v30 = (os_unfair_lock_s *)*((unsigned __int8 *)v23 + 16);
        outlined copy of _XMLPlistEncodingFormat.Reference(*v23, (unint64_t)v25, *((unsigned char *)v23 + 16));
        double v230 = *(double *)&v26;
        unint64_t v224 = v27;
        *(void *)&long long v238 = v29;
        char v31 = v29;
        uint64_t v3 = v28;
        outlined copy of _XMLPlistEncodingFormat.Reference(v26, v27, v31);
        uint64_t v32 = v223;
        _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v223);
        *(void *)&v254[0] = 60;
        *((void *)&v254[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v254);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)(v16, 3);
        *(void *)&v254[0] = 62;
        *((void *)&v254[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v254);
        swift_bridgeObjectRelease();
        if (!v30)
        {
          uint64_t v226 = v232;
          *(void *)&v254[0] = v24;
          *((void *)&v254[0] + 1) = v25;
          swift_bridgeObjectRetain_n();
          specialized String.withUTF8<A>(_:)((uint64_t *)v254, v28);
          swift_bridgeObjectRelease();
          uint64_t v225 = v24;
          outlined consume of _XMLPlistEncodingFormat.Reference(v24, (unint64_t)v25, 0);
          *(void *)&v254[0] = 12092;
          *((void *)&v254[0] + 1) = 0xE200000000000000;
          specialized String.withUTF8<A>(_:)((uint64_t *)v254);
          swift_bridgeObjectRelease();
          _XMLPlistEncodingFormat.Writer.append(_:)(v16, 3);
          *(void *)&v254[0] = 2622;
          *((void *)&v254[0] + 1) = 0xE200000000000000;
          specialized String.withUTF8<A>(_:)((uint64_t *)v254);
          swift_bridgeObjectRelease();
          _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v32);
          uint64_t v242 = v25;
          switch((uint64_t)v238)
          {
            case 1:
              *(void *)&v254[0] = 60;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              _XMLPlistEncodingFormat.Writer.append(_:)("integer", 7);
              *(void *)&v254[0] = 62;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              *(double *)v254 = v230;
              lazy protocol witness table accessor for type UInt64 and conformance UInt64();
              goto LABEL_44;
            case 2:
              *(void *)&v254[0] = 60;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              _XMLPlistEncodingFormat.Writer.append(_:)("integer", 7);
              *(void *)&v254[0] = 62;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              *(double *)v254 = v230;
              lazy protocol witness table accessor for type Int64 and conformance Int64();
LABEL_44:
              *(void *)&v254[0] = BinaryInteger.description.getter();
              *((void *)&v254[0] + 1) = v62;
              swift_bridgeObjectRetain();
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              Foundation::XMLPlistTag v61 = Foundation_XMLPlistTag_integer;
              goto LABEL_45;
            case 3:
              double v59 = v230;
              *(void *)&v254[0] = 60;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              _XMLPlistEncodingFormat.Writer.append(_:)("real", 4);
              *(void *)&v254[0] = 62;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              *(void *)&v254[0] = specialized _XMLPlistEncodingFormat.Writer.realDescription(_:)(v59);
              *((void *)&v254[0] + 1) = v60;
              swift_bridgeObjectRetain();
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              Foundation::XMLPlistTag v61 = Foundation_XMLPlistTag_real;
              goto LABEL_45;
            case 4:
              *(void *)&v254[0] = 60;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              _XMLPlistEncodingFormat.Writer.append(_:)("date", 4);
              *(void *)&v254[0] = 62;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              uint64_t v35 = swift_bridgeObjectRelease();
              if (one-time initialization token for cache != -1) {
                uint64_t v35 = swift_once();
              }
              BOOL v36 = (os_unfair_lock_s *)static CalendarCache.cache;
              MEMORY[0x1F4188790](v35);
              LOBYTE(v201) = 7;
              uint64_t v32 = (uint64_t)&v36[4];
              char v30 = v36 + 15;
              swift_retain_n();
              os_unfair_lock_lock(v36 + 15);
              closure #1 in CalendarCache.fixed(_:)partial apply((uint64_t)&v36[4], v254);
              if (v4) {
                goto LABEL_237;
              }
              os_unfair_lock_unlock(v36 + 15);
              uint64_t v37 = swift_release_n();
              v249[0] = v254[0];
              if (one-time initialization token for cache != -1) {
                uint64_t v37 = swift_once();
              }
              uint64_t v38 = (os_unfair_lock_s *)static TimeZoneCache.cache;
              MEMORY[0x1F4188790](v37);
              uint64_t v201 = 0;
              swift_retain_n();
              os_unfair_lock_lock(v38 + 36);
              closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v38[4], v254);
              os_unfair_lock_unlock(v38 + 36);
              swift_release_n();
              if (!*(void *)&v254[0]) {
                goto LABEL_231;
              }
              double v39 = v230;
              Calendar.timeZone.setter((uint64_t *)v254);
              long long v238 = v249[0];
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
              uint64_t v40 = swift_allocObject();
              uint64_t v41 = specialized static Array._adoptStorage(_:count:)(v40, 7);
              *(_DWORD *)uint64_t v42 = v215;
              *(_WORD *)(v42 + 4) = 1284;
              *(unsigned char *)(v42 + 6) = 6;
              uint64_t v43 = destructiveProjectEnumData for PredicateCodableError(v41, v42);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
              uint64_t v44 = static _SetStorage.allocate(capacity:)();
              uint64_t v45 = 0;
              uint64_t v46 = v44 + 56;
              break;
            case 5:
              *(void *)&v254[0] = 60;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              unint64_t v63 = v224 >> 62;
              outlined copy of Data._Representation(*(uint64_t *)&v230, v224);
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              _XMLPlistEncodingFormat.Writer.append(_:)("data", 4);
              *(void *)&v254[0] = 2622;
              *((void *)&v254[0] + 1) = 0xE200000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              uint64_t v64 = swift_bridgeObjectRelease();
              MEMORY[0x1F4188790](v64);
              *(void *)&v254[0] = v200;
              MEMORY[0x1F4188790](v65);
              uint64_t v194 = v254;
              id v195 = v66;
              Swift::Int v196 = v209;
              uint64_t v197 = v28;
              id v198 = v66;
              uint64_t v199 = 80;
              switch(v63)
              {
                case 1uLL:
                  uint64_t v68 = *(void *)&v230;
                  if (v68 >> 32 < (int)v68) {
                    goto LABEL_228;
                  }
                  unint64_t v67 = v224;
                  *(void *)&long long v238 = v224 & 0x3FFFFFFFFFFFFFFFLL;
                  outlined copy of _XMLPlistEncodingFormat.Reference(*(uint64_t *)&v230, v224, 5);
                  _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0L4ViewVys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1nncn_n((int)v68, v68 >> 32, (void *)v238, (uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:));
                  if (v4) {
                    goto LABEL_241;
                  }
                  outlined consume of _XMLPlistEncodingFormat.Reference(v68, v67, 5);
                  goto LABEL_205;
                case 2uLL:
                  uint64_t v189 = (void *)(v224 & 0x3FFFFFFFFFFFFFFFLL);
                  uint64_t v68 = *(void *)&v230;
                  uint64_t v190 = *(void *)(*(void *)&v230 + 16);
                  unint64_t v67 = *(void *)(*(void *)&v230 + 24);
                  swift_retain();
                  swift_retain();
                  _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0L4ViewVys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1nncn_n(v190, v67, v189, (uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:));
                  if (v4)
                  {
                    swift_release();
                    swift_release();
                    __break(1u);
LABEL_241:
                    uint64_t v191 = v68;
                    unint64_t v192 = v67;
                    goto LABEL_242;
                  }
                  swift_release();
                  swift_release();
                  unint64_t v67 = v224;
LABEL_205:
                  _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v223);
                  _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_data);
                  outlined consume of _XMLPlistEncodingFormat.Reference(v68, v67, 5);
                  outlined consume of _XMLPlistEncodingFormat.Reference(v225, (unint64_t)v242, 0);
                  outlined consume of _XMLPlistEncodingFormat.Reference(v68, v67, 5);
                  unint64_t v16 = "key";
                  break;
                case 3uLL:
                  v204 &= 0xFF00000000000000;
                  _s10Foundation4DataV06InlineB0V15withUnsafeBytesyxxSWKXEKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0J4ViewVys0O0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(0, v204, (uint64_t (*)(uint64_t *, void))partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:));
                  uint64_t v68 = *(void *)&v230;
                  unint64_t v67 = v224;
                  goto LABEL_205;
                default:
                  unint64_t v67 = v224;
                  uint64_t v68 = *(void *)&v230;
                  unint64_t v203 = v203 & 0xFF00000000000000 | v224 & 0xFFFFFFFFFFFFFFLL;
                  _s10Foundation4DataV06InlineB0V15withUnsafeBytesyxxSWKXEKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0J4ViewVys0O0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(*(uint64_t *)&v230, v203, (uint64_t (*)(uint64_t *, void))partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:));
                  goto LABEL_205;
              }
              goto LABEL_20;
            case 6:
              uint64_t v69 = *(void *)&v230;
              uint64_t v70 = *(void *)(*(void *)&v230 + 16);
              uint64_t v229 = *(void *)(v70 + 16);
              if (v229)
              {
                *(void *)&v254[0] = 60;
                *((void *)&v254[0] + 1) = 0xE100000000000000;
                outlined copy of _XMLPlistEncodingFormat.Reference(*(uint64_t *)&v230, v224, 6);
                swift_retain();
                specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                swift_bridgeObjectRelease();
                _XMLPlistEncodingFormat.Writer.append(_:)("array", 5);
                *(void *)&v254[0] = 2622;
                *((void *)&v254[0] + 1) = 0xE200000000000000;
                specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                swift_bridgeObjectRelease();
                if (v205) {
                  goto LABEL_220;
                }
                uint64_t v228 = v70 + 32;
                swift_retain();
                unint64_t v71 = 0;
                uint64_t v227 = v70;
                while (2)
                {
                  if (v71 >= *(void *)(v70 + 16)) {
                    goto LABEL_213;
                  }
                  uint64_t v79 = v228 + 24 * v71;
                  uint64_t v80 = *(void *)v79;
                  unint64_t v233 = *(void *)(v79 + 8);
                  unint64_t v234 = v71 + 1;
                  char v30 = (os_unfair_lock_s *)*(unsigned __int8 *)(v79 + 16);
                  *(void *)&long long v238 = v80;
                  outlined copy of _XMLPlistEncodingFormat.Reference(v80, v233, (char)v30);
                  _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v231);
                  switch((unint64_t)v30)
                  {
                    case 1uLL:
                      *(void *)&v254[0] = 60;
                      *((void *)&v254[0] + 1) = 0xE100000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      uint64_t v32 = (uint64_t)"integer";
                      _XMLPlistEncodingFormat.Writer.append(_:)("integer", 7);
                      *(void *)&v254[0] = 62;
                      *((void *)&v254[0] + 1) = 0xE100000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      *(void *)&v254[0] = v238;
                      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
                      goto LABEL_80;
                    case 2uLL:
                      *(void *)&v254[0] = 60;
                      *((void *)&v254[0] + 1) = 0xE100000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      uint64_t v32 = (uint64_t)"integer";
                      _XMLPlistEncodingFormat.Writer.append(_:)("integer", 7);
                      *(void *)&v254[0] = 62;
                      *((void *)&v254[0] + 1) = 0xE100000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      *(void *)&v254[0] = v238;
                      lazy protocol witness table accessor for type Int64 and conformance Int64();
LABEL_80:
                      *(void *)&v254[0] = BinaryInteger.description.getter();
                      *((void *)&v254[0] + 1) = v108;
                      swift_bridgeObjectRetain();
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      *(void *)&v254[0] = 12092;
                      *((void *)&v254[0] + 1) = 0xE200000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      _XMLPlistEncodingFormat.Writer.append(_:)("integer", 7);
                      *(void *)&v254[0] = 2622;
                      *((void *)&v254[0] + 1) = 0xE200000000000000;
                      goto LABEL_147;
                    case 3uLL:
                      uint64_t v104 = v238;
                      double v105 = *(double *)&v238;
                      *(void *)&v254[0] = 60;
                      *((void *)&v254[0] + 1) = 0xE100000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      _XMLPlistEncodingFormat.Writer.append(_:)("real", 4);
                      *(void *)&v254[0] = 62;
                      *((void *)&v254[0] + 1) = 0xE100000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      if ((v104 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
                      {
                        uint64_t v106 = 0x74696E69666E692DLL;
                        if (v105 > 0.0) {
                          uint64_t v106 = 0x74696E69666E692BLL;
                        }
                        unint64_t v107 = 0xE900000000000079;
                      }
                      else
                      {
                        *(void *)&v254[0] = Double.description.getter();
                        *((void *)&v254[0] + 1) = v154;
                        swift_bridgeObjectRetain();
                        v155._uint64_t countAndFlagsBits = 12334;
                        v155._unint64_t object = (void *)0xE200000000000000;
                        Swift::Bool v156 = String.hasSuffix(_:)(v155);
                        swift_bridgeObjectRelease();
                        if (v156) {
                          specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
                        }
                        unint64_t v107 = *((void *)&v254[0] + 1);
                        uint64_t v106 = *(void *)&v254[0];
                      }
                      *(void *)&v254[0] = v106;
                      *((void *)&v254[0] + 1) = v107;
                      swift_bridgeObjectRetain();
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      *(void *)&v254[0] = 12092;
                      *((void *)&v254[0] + 1) = 0xE200000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      _XMLPlistEncodingFormat.Writer.append(_:)("real", 4);
                      *(void *)&v254[0] = 2622;
                      *((void *)&v254[0] + 1) = 0xE200000000000000;
                      goto LABEL_147;
                    case 4uLL:
                      uint64_t v32 = (uint64_t)v252;
                      _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation_XMLPlistTag_date, 0);
                      if (one-time initialization token for cache != -1) {
                        uint64_t v82 = swift_once();
                      }
                      char v30 = (os_unfair_lock_s *)static CalendarCache.cache;
                      MEMORY[0x1F4188790](v82);
                      LOBYTE(v201) = 7;
                      int v25 = v30 + 15;
                      swift_retain_n();
                      os_unfair_lock_lock(v30 + 15);
                      closure #1 in CalendarCache.fixed(_:)partial apply((uint64_t)&v30[4], v254);
                      if (v4) {
                        goto LABEL_236;
                      }
                      os_unfair_lock_unlock(v30 + 15);
                      uint64_t v83 = swift_release_n();
                      v249[0] = v254[0];
                      if (one-time initialization token for cache != -1) {
                        uint64_t v83 = swift_once();
                      }
                      unint64_t v84 = (os_unfair_lock_s *)static TimeZoneCache.cache;
                      MEMORY[0x1F4188790](v83);
                      uint64_t v201 = 0;
                      swift_retain_n();
                      os_unfair_lock_lock(v84 + 36);
                      closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v84[4], v254);
                      os_unfair_lock_unlock(v84 + 36);
                      swift_release_n();
                      if (!*(void *)&v254[0]) {
                        goto LABEL_229;
                      }
                      double v85 = *(double *)&v238;
                      Calendar.timeZone.setter((uint64_t *)v254);
                      long long v237 = v249[0];
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
                      uint64_t v86 = swift_allocObject();
                      uint64_t v87 = specialized static Array._adoptStorage(_:count:)(v86, 7);
                      *(_DWORD *)uint64_t v88 = v215;
                      *(_WORD *)(v88 + 4) = 1284;
                      *(unsigned char *)(v88 + 6) = 6;
                      uint64_t v89 = destructiveProjectEnumData for PredicateCodableError(v87, v88);
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
                      uint64_t v90 = static _SetStorage.allocate(capacity:)();
                      uint64_t v91 = 0;
                      uint64_t v92 = v90 + 56;
                      uint64_t v32 = v89 + 32;
                      break;
                    case 5uLL:
                      *(void *)&v254[0] = 60;
                      *((void *)&v254[0] + 1) = 0xE100000000000000;
                      unint64_t v109 = v233 >> 62;
                      outlined copy of Data._Representation(v238, v233);
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      _XMLPlistEncodingFormat.Writer.append(_:)("data", 4);
                      *(void *)&v254[0] = 2622;
                      *((void *)&v254[0] + 1) = 0xE200000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      uint64_t v110 = swift_bridgeObjectRelease();
                      MEMORY[0x1F4188790](v110);
                      *(void *)&v249[0] = v200;
                      MEMORY[0x1F4188790](v111);
                      uint64_t v194 = v249;
                      id v195 = v200;
                      Swift::Int v196 = v216;
                      uint64_t v197 = v3;
                      id v198 = v200;
                      uint64_t v199 = 80;
                      *(void *)&long long v237 = v112;
                      switch(v109)
                      {
                        case 1uLL:
                          uint64_t v32 = v238;
                          uint64_t v170 = (v32 >> 32) - (int)v32;
                          if (v32 >> 32 < (int)v32) {
                            goto LABEL_221;
                          }
                          unint64_t v16 = (char *)v233;
                          uint64_t v171 = *(void *)((v233 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                          if (v171)
                          {
                            uint64_t v172 = *(void *)((v233 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                            if (__OFSUB__((int)v238, v172)) {
                              goto LABEL_227;
                            }
                            uint64_t v173 = (unsigned char *)(v171 + (int)v238 - v172);
                            if (*(void *)((v233 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) < v170) {
                              uint64_t v170 = *(void *)((v233 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
                            }
                            uint64_t v174 = (uint64_t)&v173[v170];
                          }
                          else
                          {
                            uint64_t v173 = 0;
                            uint64_t v174 = 0;
                          }
                          outlined copy of _XMLPlistEncodingFormat.Reference(v238, v233, 5);
                          specialized closure #1 in Data.withBufferView<A>(_:)(v173, v174, v249, (uint64_t)v200, v216, v3, v200);
                          if (v4) {
                            goto LABEL_239;
                          }
                          outlined consume of _XMLPlistEncodingFormat.Reference(v32, (unint64_t)v16, 5);
                          int v25 = v242;
                          goto LABEL_185;
                        case 2uLL:
                          uint64_t v32 = v238;
                          uint64_t v161 = *(void *)(v238 + 16);
                          uint64_t v162 = *(void *)(v238 + 24);
                          uint64_t v163 = *(void *)((v233 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                          if (v163)
                          {
                            uint64_t v164 = *(void *)((v233 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                            BOOL v48 = __OFSUB__(v161, v164);
                            uint64_t v165 = v161 - v164;
                            if (v48) {
                              goto LABEL_226;
                            }
                            BOOL v48 = __OFSUB__(v162, v161);
                            uint64_t v166 = v162 - v161;
                            if (v48) {
                              goto LABEL_222;
                            }
                            uint64_t v167 = (unsigned char *)(v163 + v165);
                            uint64_t v168 = *(void *)((v233 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
                            if (v168 >= v166) {
                              uint64_t v168 = v166;
                            }
                            uint64_t v169 = (uint64_t)&v167[v168];
                          }
                          else
                          {
                            if (__OFSUB__(v162, v161)) {
                              goto LABEL_222;
                            }
                            uint64_t v167 = 0;
                            uint64_t v169 = 0;
                          }
                          swift_retain();
                          swift_retain();
                          specialized closure #1 in Data.withBufferView<A>(_:)(v167, v169, v249, (uint64_t)v200, v216, v3, v200);
                          if (v4) {
                            goto LABEL_238;
                          }
                          swift_release();
                          swift_release();
                          int v25 = v242;
                          unint64_t v16 = (char *)v233;
LABEL_185:
                          _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v231);
                          *(void *)&v254[0] = 12092;
                          *((void *)&v254[0] + 1) = 0xE200000000000000;
                          specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                          swift_bridgeObjectRelease();
                          _XMLPlistEncodingFormat.Writer.append(_:)("data", 4);
                          *(void *)&v254[0] = 2622;
                          *((void *)&v254[0] + 1) = 0xE200000000000000;
                          specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                          swift_bridgeObjectRelease();
                          outlined consume of _XMLPlistEncodingFormat.Reference(v32, (unint64_t)v16, 5);
                          outlined consume of _XMLPlistEncodingFormat.Reference(v32, (unint64_t)v16, 5);
                          unint64_t v16 = "key";
                          break;
                        case 3uLL:
                          v206 &= 0xFF00000000000000;
                          _s10Foundation4DataV06InlineB0V15withUnsafeBytesyxxSWKXEKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0J4ViewVys0O0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(0, v206, (uint64_t (*)(uint64_t *, void))partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:));
                          uint64_t v32 = v238;
                          unint64_t v16 = (char *)v233;
                          goto LABEL_185;
                        default:
                          uint64_t v32 = v238;
                          *(void *)&v254[0] = v238;
                          unint64_t v16 = (char *)v233;
                          DWORD2(v254[0]) = v233;
                          WORD6(v254[0]) = WORD2(v233);
                          specialized closure #1 in Data.withBufferView<A>(_:)(v254, (uint64_t)v254 + BYTE6(v233), v249, (uint64_t)v200, v216, v3, v200);
                          goto LABEL_185;
                      }
                      goto LABEL_54;
                    case 6uLL:
                      uint64_t v113 = *(void *)(v238 + 16);
                      *(void *)&long long v237 = *(void *)(v113 + 16);
                      if ((void)v237)
                      {
                        outlined copy of _XMLPlistEncodingFormat.Reference(v238, v233, 6);
                        swift_retain();
                        _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation_XMLPlistTag_array, 1);
                        if (v210) {
                          goto LABEL_217;
                        }
                        uint64_t v236 = v113 + 32;
                        swift_retain();
                        uint64_t v32 = 0;
                        uint64_t v235 = v113;
LABEL_86:
                        if ((unint64_t)v32 >= *(void *)(v113 + 16)) {
                          goto LABEL_211;
                        }
                        uint64_t v114 = v32;
                        uint64_t v115 = v236 + 24 * v32;
                        uint64_t v117 = *(void *)v115;
                        unint64_t v116 = *(void *)(v115 + 8);
                        uint64_t v118 = *(unsigned __int8 *)(v115 + 16);
                        outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)v115, v116, *(unsigned char *)(v115 + 16));
                        unint64_t v119 = v241;
                        if (v241 >= 4)
                        {
                          do
                          {
                            v254[0] = v243;
                            _XMLPlistEncodingFormat.Writer.append(_:)((char *)v254, 4);
                            swift_bridgeObjectRelease();
                            v119 -= 4;
                          }
                          while (v119 >= 4);
                        }
                        switch(v119)
                        {
                          case 1uLL:
                            *(void *)&v254[0] = 9;
                            unint64_t v120 = 0xE100000000000000;
                            break;
                          case 2uLL:
                            *(void *)&v254[0] = 2313;
                            unint64_t v120 = 0xE200000000000000;
                            break;
                          case 3uLL:
                            v254[0] = v222;
                            _XMLPlistEncodingFormat.Writer.append(_:)((char *)v254, 3);
                            goto LABEL_96;
                          default:
                            goto LABEL_97;
                        }
                        *((void *)&v254[0] + 1) = v120;
                        specialized String.withUTF8<A>(_:)((uint64_t *)v254);
LABEL_96:
                        swift_bridgeObjectRelease();
LABEL_97:
                        uint64_t v32 = v114 + 1;
                        switch(v118)
                        {
                          case 1:
                            _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation_XMLPlistTag_integer, 0);
                            *(void *)&v254[0] = v117;
                            lazy protocol witness table accessor for type UInt64 and conformance UInt64();
                            goto LABEL_104;
                          case 2:
                            _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation_XMLPlistTag_integer, 0);
                            *(void *)&v254[0] = v117;
                            lazy protocol witness table accessor for type Int64 and conformance Int64();
LABEL_104:
                            uint64_t v131 = BinaryInteger.description.getter();
                            _XMLPlistEncodingFormat.Writer.append(_:)(v131, v132, (void (*)(void *, uint64_t))specialized String.withUTF8<A>(_:));
                            swift_bridgeObjectRelease();
                            _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_integer);
                            goto LABEL_109;
                          case 3:
                            _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation_XMLPlistTag_real, 0);
                            uint64_t v128 = specialized _XMLPlistEncodingFormat.Writer.realDescription(_:)(*(double *)&v117);
                            _XMLPlistEncodingFormat.Writer.append(_:)(v128, v129, (void (*)(void *, uint64_t))specialized String.withUTF8<A>(_:));
                            swift_bridgeObjectRelease();
                            _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_real);
                            goto LABEL_109;
                          case 4:
                            _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation_XMLPlistTag_date, 0);
                            *(void *)&v254[0] = v117;
                            _XMLPlistEncodingFormat.Writer.appendDate(_:)(v127);
                            _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_date);
                            goto LABEL_109;
                          case 5:
                            outlined copy of Data._Representation(v117, v116);
                            _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation_XMLPlistTag_data, 1);
                            Swift::Int v133 = v241;
                            _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(v117, v116, v241);
                            _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v133);
                            _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_data);
                            outlined consume of _XMLPlistEncodingFormat.Reference(v117, v116, 5);
                            uint64_t v124 = v117;
                            unint64_t v125 = v116;
                            char v126 = 5;
                            goto LABEL_108;
                          case 6:
                            uint64_t v134 = *(void *)(v117 + 16);
                            if (specialized Collection.isEmpty.getter(v134))
                            {
                              _XMLPlistEncodingFormat.Writer.appendEmpty(_:)(Foundation_XMLPlistTag_array);
                              uint64_t v124 = v117;
                              unint64_t v125 = v116;
                              char v126 = 6;
LABEL_108:
                              outlined consume of _XMLPlistEncodingFormat.Reference(v124, v125, v126);
LABEL_109:
                              unint64_t v16 = "key";
LABEL_110:
                              int v25 = v242;
                              uint64_t v113 = v235;
                              goto LABEL_111;
                            }
                            uint64_t v217 = v114 + 1;
                            outlined copy of _XMLPlistEncodingFormat.Reference(v117, v116, 6);
                            swift_retain();
                            _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation_XMLPlistTag_array, 1);
                            uint64_t v136 = *(void *)(v134 + 16);
                            if (!v136) {
                              goto LABEL_122;
                            }
                            if (v212) {
                              goto LABEL_216;
                            }
                            swift_retain();
                            unint64_t v137 = 0;
                            Swift::String v138 = (unsigned char *)(v134 + 48);
                            break;
                          case 7:
                            outlined copy of _XMLPlistEncodingFormat.Reference(v117, v116, 7);
                            uint64_t v130 = swift_bridgeObjectRetain();
                            _XMLPlistEncodingFormat.Writer.appendDictionary(_:indentation:)((Swift::OpaquePointer)v130, v241);
                            outlined consume of _XMLPlistEncodingFormat.Reference(v117, v116, 7);
                            swift_bridgeObjectRelease();
                            uint64_t v124 = v117;
                            unint64_t v125 = v116;
                            char v126 = 7;
                            goto LABEL_108;
                          case 8:
                            if (!(v117 | v116))
                            {
                              _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation_XMLPlistTag_string, 0);
                              _XMLPlistEncodingFormat.Writer.append(_:)("$null", 5);
                              _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_string);
                              goto LABEL_109;
                            }
                            unint64_t v16 = "key";
                            if (v117 ^ 1 | v116) {
                              Foundation::XMLPlistTag v135 = Foundation_XMLPlistTag_false;
                            }
                            else {
                              Foundation::XMLPlistTag v135 = Foundation_XMLPlistTag_true;
                            }
                            _XMLPlistEncodingFormat.Writer.appendEmpty(_:)(v135);
                            goto LABEL_110;
                          default:
                            v254[0] = v218;
                            _XMLPlistEncodingFormat.Writer.append(_:)((char *)v254, 1);
                            swift_bridgeObjectRelease();
                            long long v121 = (char *)XMLPlistTag.tagName.getter(4);
                            _XMLPlistEncodingFormat.Writer.append(_:)(v121, v122, v123);
                            *(void *)&v254[0] = 62;
                            *((void *)&v254[0] + 1) = 0xE100000000000000;
                            specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                            swift_bridgeObjectRelease();
                            _XMLPlistEncodingFormat.Writer.append(_:)(v117, v116, specialized String.withUTF8<A>(_:));
                            _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_string);
                            uint64_t v124 = v117;
                            unint64_t v125 = v116;
                            char v126 = 0;
                            goto LABEL_108;
                        }
                        while (v137 < *(void *)(v134 + 16))
                        {
                          char v139 = *v138;
                          ++v137;
                          v254[0] = *((_OWORD *)v138 - 1);
                          LOBYTE(v254[1]) = v139;
                          _XMLPlistEncodingFormat.Writer.append(_:indentation:)((int)v254, v239);
                          v138 += 24;
                          if (v136 == v137)
                          {
                            swift_release();
                            uint64_t v3 = v240;
LABEL_122:
                            _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v241);
                            _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_array);
                            outlined consume of _XMLPlistEncodingFormat.Reference(v117, v116, 6);
                            swift_release();
                            outlined consume of _XMLPlistEncodingFormat.Reference(v117, v116, 6);
                            unint64_t v16 = "key";
                            int v25 = v242;
                            uint64_t v113 = v235;
                            uint64_t v32 = v217;
LABEL_111:
                            if (v32 == (void)v237)
                            {
                              swift_release();
                              _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v231);
                              _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_array);
                              uint64_t v152 = v238;
                              unint64_t v153 = v233;
                              outlined consume of _XMLPlistEncodingFormat.Reference(v238, v233, 6);
                              swift_release();
                              uint64_t v76 = v152;
                              unint64_t v77 = v153;
                              char v78 = 6;
                              goto LABEL_53;
                            }
                            goto LABEL_86;
                          }
                        }
                        __break(1u);
LABEL_211:
                        __break(1u);
LABEL_212:
                        __break(1u);
LABEL_213:
                        __break(1u);
LABEL_214:
                        __break(1u);
LABEL_215:
                        __break(1u);
LABEL_216:
                        __break(1u);
LABEL_217:
                        __break(1u);
LABEL_218:
                        __break(1u);
LABEL_219:
                        __break(1u);
LABEL_220:
                        __break(1u);
LABEL_221:
                        __break(1u);
LABEL_222:
                        __break(1u);
LABEL_223:
                        __break(1u);
LABEL_224:
                        __break(1u);
LABEL_225:
                        __break(1u);
LABEL_226:
                        __break(1u);
LABEL_227:
                        __break(1u);
LABEL_228:
                        __break(1u);
LABEL_229:
                        __break(1u);
                        goto LABEL_230;
                      }
                      *(void *)&v254[0] = 60;
                      *((void *)&v254[0] + 1) = 0xE100000000000000;
                      uint64_t v157 = v238;
                      uint64_t v32 = v233;
                      outlined copy of _XMLPlistEncodingFormat.Reference(v238, v233, 6);
                      swift_retain();
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      _XMLPlistEncodingFormat.Writer.append(_:)("array", 5);
                      *(void *)&v254[0] = 671279;
                      *((void *)&v254[0] + 1) = 0xE300000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      outlined consume of _XMLPlistEncodingFormat.Reference(v157, v32, 6);
                      swift_release();
                      uint64_t v76 = v157;
                      unint64_t v77 = v32;
                      char v78 = 6;
LABEL_53:
                      outlined consume of _XMLPlistEncodingFormat.Reference(v76, v77, v78);
LABEL_54:
                      unint64_t v71 = v234;
                      uint64_t v70 = v227;
                      if (v234 == v229)
                      {
                        swift_release();
                        _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v223);
                        _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_array);
                        uint64_t v187 = *(void *)&v230;
                        unint64_t v188 = v224;
                        outlined consume of _XMLPlistEncodingFormat.Reference(*(uint64_t *)&v230, v224, 6);
                        swift_release();
                        outlined consume of _XMLPlistEncodingFormat.Reference(v225, (unint64_t)v25, 0);
                        uint64_t v20 = v187;
                        unint64_t v21 = v188;
                        char v22 = 6;
                        goto LABEL_19;
                      }
                      continue;
                    case 7uLL:
                      uint64_t v32 = v238;
                      *(void *)&long long v237 = v4;
                      uint64_t v72 = v16;
                      unint64_t v73 = v25;
                      unint64_t v74 = v233;
                      outlined copy of _XMLPlistEncodingFormat.Reference(v238, v233, 7);
                      uint64_t v75 = swift_bridgeObjectRetain();
                      _XMLPlistEncodingFormat.Writer.appendDictionary(_:indentation:)((Swift::OpaquePointer)v75, v231);
                      outlined consume of _XMLPlistEncodingFormat.Reference(v32, v74, 7);
                      swift_bridgeObjectRelease();
                      uint64_t v76 = v32;
                      unint64_t v77 = v74;
                      int v25 = v73;
                      unint64_t v16 = v72;
                      uint64_t v4 = v237;
                      char v78 = 7;
                      goto LABEL_53;
                    case 8uLL:
                      if ((unint64_t)v238 | v233)
                      {
                        if ((unint64_t)v238 ^ 1 | v233)
                        {
                          v254[0] = v218;
                          _XMLPlistEncodingFormat.Writer.append(_:)((char *)v254, 1);
                          swift_bridgeObjectRelease();
                          uint64_t v158 = *(void *)(v3 + 16);
                          if (__OFSUB__(0x2000, v158)) {
                            goto LABEL_219;
                          }
                          if (0x2000 - v158 >= 5)
                          {
                            if (!*(void *)v3) {
                              goto LABEL_234;
                            }
                            uint64_t v176 = *(void *)v3 + v158;
                            *(unsigned char *)(v176 + 4) = 101;
                            *(_DWORD *)uint64_t v176 = 1936482662;
                            BOOL v48 = __OFADD__(v158, 5);
                            uint64_t v175 = v158 + 5;
                            if (v48) {
                              goto LABEL_225;
                            }
                            goto LABEL_176;
                          }
                          if (v158 > 0)
                          {
                            unsigned __int8 v159 = (unsigned char *)(*(void *)v3 + v158);
                            if (*(void *)v3) {
                              unsigned __int8 v160 = v159;
                            }
                            else {
                              unsigned __int8 v160 = 0;
                            }
                            Data._Representation.append(contentsOf:)(*(unsigned char **)v3, v160);
                            *(void *)(v3 + 16) = 0;
                          }
                          unint64_t v143 = "false";
                          id v144 = "";
LABEL_156:
                          Data._Representation.append(contentsOf:)(v143, v144);
                        }
                        else
                        {
                          v254[0] = v218;
                          _XMLPlistEncodingFormat.Writer.append(_:)((char *)v254, 1);
                          swift_bridgeObjectRelease();
                          uint64_t v140 = *(void *)(v3 + 16);
                          if (__OFSUB__(0x2000, v140)) {
                            goto LABEL_218;
                          }
                          if (0x2000 - v140 < 4)
                          {
                            if (v140 > 0)
                            {
                              uint64_t v141 = (unsigned char *)(*(void *)v3 + v140);
                              if (*(void *)v3) {
                                uint64_t v142 = v141;
                              }
                              else {
                                uint64_t v142 = 0;
                              }
                              Data._Representation.append(contentsOf:)(*(unsigned char **)v3, v142);
                              *(void *)(v3 + 16) = 0;
                            }
                            unint64_t v143 = "true";
                            id v144 = "";
                            goto LABEL_156;
                          }
                          if (!*(void *)v3)
                          {
                            __break(1u);
LABEL_234:
                            __break(1u);
                            goto LABEL_235;
                          }
                          *(_DWORD *)(*(void *)v3 + v140) = 1702195828;
                          BOOL v48 = __OFADD__(v140, 4);
                          uint64_t v175 = v140 + 4;
                          if (v48) {
                            goto LABEL_224;
                          }
LABEL_176:
                          *(void *)(v3 + 16) = v175;
                        }
                        v254[0] = v211;
                        _XMLPlistEncodingFormat.Writer.append(_:)((char *)v254, 3);
                        swift_bridgeObjectRelease();
                        goto LABEL_54;
                      }
                      v254[0] = v218;
                      _XMLPlistEncodingFormat.Writer.append(_:)((char *)v254, 1);
                      swift_bridgeObjectRelease();
                      _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
                      v254[0] = v208;
                      _XMLPlistEncodingFormat.Writer.append(_:)((char *)v254, 1);
                      swift_bridgeObjectRelease();
                      _XMLPlistEncodingFormat.Writer.append(_:)("$null", 5);
                      v254[0] = v207;
                      _XMLPlistEncodingFormat.Writer.append(_:)((char *)v254, 2);
                      swift_bridgeObjectRelease();
                      _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
                      *(void *)&v254[0] = 2622;
                      *((void *)&v254[0] + 1) = 0xE200000000000000;
LABEL_147:
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      goto LABEL_54;
                    default:
                      *(void *)&v254[0] = 60;
                      *((void *)&v254[0] + 1) = 0xE100000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
                      *(void *)&v254[0] = 62;
                      *((void *)&v254[0] + 1) = 0xE100000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      uint64_t v32 = v238;
                      unint64_t v81 = v233;
                      *(void *)&v254[0] = v238;
                      *((void *)&v254[0] + 1) = v233;
                      swift_bridgeObjectRetain();
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254, v3);
                      swift_bridgeObjectRelease();
                      *(void *)&v254[0] = 12092;
                      *((void *)&v254[0] + 1) = 0xE200000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
                      *(void *)&v254[0] = 2622;
                      *((void *)&v254[0] + 1) = 0xE200000000000000;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      uint64_t v76 = v32;
                      unint64_t v77 = v81;
                      int v25 = v242;
                      char v78 = 0;
                      goto LABEL_53;
                  }
                  break;
                }
                while (2)
                {
                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v91, 1, v89);
                  Swift::UInt v93 = *(unsigned __int8 *)(v32 + v91);
                  Hasher.init(_seed:)();
                  Hasher._combine(_:)(v93);
                  Swift::Int v94 = Hasher._finalize()();
                  uint64_t v95 = -1 << *(unsigned char *)(v90 + 32);
                  unint64_t v96 = v94 & ~v95;
                  unint64_t v97 = v96 >> 6;
                  uint64_t v98 = *(void *)(v92 + 8 * (v96 >> 6));
                  uint64_t v99 = 1 << v96;
                  uint64_t v100 = *(void *)(v90 + 48);
                  if (((1 << v96) & v98) != 0)
                  {
                    if (*(unsigned __int8 *)(v100 + v96) != v93)
                    {
                      uint64_t v101 = ~v95;
                      do
                      {
                        unint64_t v96 = (v96 + 1) & v101;
                        unint64_t v97 = v96 >> 6;
                        uint64_t v98 = *(void *)(v92 + 8 * (v96 >> 6));
                        uint64_t v99 = 1 << v96;
                        if ((v98 & (1 << v96)) == 0) {
                          goto LABEL_72;
                        }
                      }
                      while (*(unsigned __int8 *)(v100 + v96) != v93);
                    }
                  }
                  else
                  {
LABEL_72:
                    *(void *)(v92 + 8 * v97) = v99 | v98;
                    *(unsigned char *)(v100 + v96) = v93;
                    uint64_t v102 = *(void *)(v90 + 16);
                    BOOL v48 = __OFADD__(v102, 1);
                    uint64_t v103 = v102 + 1;
                    if (v48) {
                      goto LABEL_212;
                    }
                    *(void *)(v90 + 16) = v103;
                  }
                  if (++v91 == 7)
                  {
                    swift_unknownObjectRetain();
                    swift_bridgeObjectRelease();
                    long long v248 = v237;
                    uint64_t v145 = swift_bridgeObjectRetain();
                    Calendar.ComponentSet.init(_:)(v145, &v247);
                    if (v85 <= 1.59271755e13) {
                      double v146 = v85;
                    }
                    else {
                      double v146 = 1.59271755e13;
                    }
                    double v246 = fmax(v146, -2.11845067e11);
                    Calendar._dateComponents(_:from:)(&v247, &v246, v254);
                    swift_unknownObjectRelease();
                    swift_release();
                    uint64_t v147 = memcpy(v255, v254, 0x11AuLL);
                    LOBYTE(v247) = 0;
                    LOBYTE(v246) = 1;
                    char v245 = 0;
                    char v244 = 1;
                    long long v148 = (os_unfair_lock_s *)static TimeZoneCache.cache;
                    MEMORY[0x1F4188790](v147);
                    uint64_t v201 = 0;
                    swift_retain_n();
                    os_unfair_lock_lock(v148 + 36);
                    closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v148[4], v254);
                    os_unfair_lock_unlock(v148 + 36);
                    swift_release_n();
                    unint64_t v16 = "key";
                    if (*(void *)&v254[0])
                    {
                      long long v248 = v254[0];
                      Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)((char *)&v247, (char *)&v246, &v245, &v244, 0, (uint64_t *)&v248, (uint64_t)v254);
                      v250[0] = v254[0];
                      v250[1] = v254[1];
                      uint64_t v251 = *(void *)&v254[2];
                      LOBYTE(v247) = 0;
                      MEMORY[0x1F4188790](v149);
                      closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((uint64_t)v193, 129, (uint64_t)v250, (uint64_t)v255, &v247, 0, 0, (uint64_t *)&v248);
                      int v25 = v242;
                      unint64_t v150 = *((void *)&v248 + 1);
                      unint64_t v151 = v248;
                      outlined release of Date.ISO8601FormatStyle((uint64_t)v250);
                      v254[0] = __PAIR128__(v150, v151);
                      swift_bridgeObjectRetain();
                      uint64_t v3 = v240;
                      specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                      swift_bridgeObjectRelease();
                      outlined release of DateComponents((uint64_t)v255);
                      swift_bridgeObjectRelease();
                      swift_unknownObjectRelease();
                      _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_date);
                      uint64_t v76 = v238;
                      unint64_t v77 = v233;
                      char v78 = 4;
                      goto LABEL_53;
                    }
LABEL_230:
                    __break(1u);
LABEL_231:
                    __break(1u);
                    goto LABEL_232;
                  }
                  continue;
                }
              }
              _XMLPlistEncodingFormat.Writer.appendEmpty(_:)(Foundation_XMLPlistTag_array);
              outlined consume of _XMLPlistEncodingFormat.Reference(v225, (unint64_t)v25, 0);
              uint64_t v20 = v69;
              unint64_t v21 = v224;
              char v22 = 6;
LABEL_19:
              outlined consume of _XMLPlistEncodingFormat.Reference(v20, v21, v22);
LABEL_20:
              unint64_t v7 = v219;
              uint64_t v10 = v226;
              if (v232 == v221) {
                goto LABEL_206;
              }
              continue;
            case 7:
              uint64_t v17 = *(void *)&v230;
              unint64_t v18 = v224;
              outlined copy of _XMLPlistEncodingFormat.Reference(*(uint64_t *)&v230, v224, 7);
              uint64_t v19 = swift_bridgeObjectRetain();
              _XMLPlistEncodingFormat.Writer.appendDictionary(_:indentation:)((Swift::OpaquePointer)v19, v223);
              outlined consume of _XMLPlistEncodingFormat.Reference(v17, v18, 7);
              swift_bridgeObjectRelease();
              outlined consume of _XMLPlistEncodingFormat.Reference(v225, (unint64_t)v25, 0);
              uint64_t v20 = v17;
              unint64_t v21 = v18;
              char v22 = 7;
              goto LABEL_19;
            case 8:
              if (*(void *)&v230 | v224)
              {
                if (*(void *)&v230 ^ 1 | v224) {
                  Foundation::XMLPlistTag v177 = Foundation_XMLPlistTag_false;
                }
                else {
                  Foundation::XMLPlistTag v177 = Foundation_XMLPlistTag_true;
                }
                _XMLPlistEncodingFormat.Writer.appendEmpty(_:)(v177);
              }
              else
              {
                *(void *)&v254[0] = 60;
                *((void *)&v254[0] + 1) = 0xE100000000000000;
                specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                swift_bridgeObjectRelease();
                _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
                *(void *)&v254[0] = 62;
                *((void *)&v254[0] + 1) = 0xE100000000000000;
                specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                swift_bridgeObjectRelease();
                _XMLPlistEncodingFormat.Writer.append(_:)("$null", 5);
                Foundation::XMLPlistTag v61 = Foundation_XMLPlistTag_string;
LABEL_45:
                _XMLPlistEncodingFormat.Writer.appendClose(_:)(v61);
              }
              uint64_t v20 = v225;
              unint64_t v21 = (unint64_t)v25;
              char v22 = 0;
              goto LABEL_19;
            default:
              *(void *)&v254[0] = 60;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
              *(void *)&v254[0] = 62;
              *((void *)&v254[0] + 1) = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)((uint64_t *)v254);
              swift_bridgeObjectRelease();
              uint64_t v33 = *(void *)&v230;
              unint64_t v34 = v224;
              *(double *)v254 = v230;
              *((void *)&v254[0] + 1) = v224;
              swift_bridgeObjectRetain();
              specialized String.withUTF8<A>(_:)((uint64_t *)v254, v28);
              swift_bridgeObjectRelease();
              _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_string);
              outlined consume of _XMLPlistEncodingFormat.Reference(v225, (unint64_t)v25, 0);
              uint64_t v20 = v33;
              unint64_t v21 = v34;
              char v22 = 0;
              goto LABEL_19;
          }
          while (1)
          {
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v45, 1, v43);
            Swift::UInt v50 = *(unsigned __int8 *)(v43 + 32 + v45);
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v50);
            Swift::Int v51 = Hasher._finalize()();
            uint64_t v52 = -1 << *(unsigned char *)(v44 + 32);
            unint64_t v53 = v51 & ~v52;
            unint64_t v54 = v53 >> 6;
            uint64_t v55 = *(void *)(v46 + 8 * (v53 >> 6));
            uint64_t v56 = 1 << v53;
            uint64_t v57 = *(void *)(v44 + 48);
            if (((1 << v53) & v55) == 0) {
              goto LABEL_32;
            }
            if (*(unsigned __int8 *)(v57 + v53) != v50) {
              break;
            }
LABEL_34:
            if (++v45 == 7)
            {
              swift_unknownObjectRetain();
              swift_bridgeObjectRelease();
              long long v248 = v238;
              uint64_t v178 = swift_bridgeObjectRetain();
              Calendar.ComponentSet.init(_:)(v178, &v247);
              if (v39 <= 1.59271755e13) {
                double v179 = v39;
              }
              else {
                double v179 = 1.59271755e13;
              }
              double v246 = fmax(v179, -2.11845067e11);
              Calendar._dateComponents(_:from:)(&v247, &v246, v254);
              swift_unknownObjectRelease();
              swift_release();
              Swift::String v180 = memcpy(v256, v254, 0x11AuLL);
              LOBYTE(v247) = 0;
              LOBYTE(v246) = 1;
              char v245 = 0;
              char v244 = 1;
              Swift::String v181 = (os_unfair_lock_s *)static TimeZoneCache.cache;
              MEMORY[0x1F4188790](v180);
              uint64_t v201 = 0;
              swift_retain_n();
              os_unfair_lock_lock(v181 + 36);
              closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v181[4], v254);
              os_unfair_lock_unlock(v181 + 36);
              swift_release_n();
              unint64_t v16 = "key";
              if (*(void *)&v254[0])
              {
                long long v248 = v254[0];
                Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)((char *)&v247, (char *)&v246, &v245, &v244, 0, (uint64_t *)&v248, (uint64_t)v254);
                v252[0] = v254[0];
                v252[1] = v254[1];
                uint64_t v253 = *(void *)&v254[2];
                LOBYTE(v247) = 0;
                MEMORY[0x1F4188790](v182);
                closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((uint64_t)v193, 129, (uint64_t)v252, (uint64_t)v256, &v247, 0, 0, (uint64_t *)&v248);
                unint64_t v183 = (unint64_t)v242;
                uint64_t v184 = v225;
                unint64_t v185 = *((void *)&v248 + 1);
                unint64_t v186 = v248;
                outlined release of Date.ISO8601FormatStyle((uint64_t)v252);
                v254[0] = __PAIR128__(v185, v186);
                swift_bridgeObjectRetain();
                uint64_t v3 = v240;
                specialized String.withUTF8<A>(_:)((uint64_t *)v254);
                swift_bridgeObjectRelease();
                outlined release of DateComponents((uint64_t)v256);
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease();
                _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_date);
                outlined consume of _XMLPlistEncodingFormat.Reference(v184, v183, 0);
                uint64_t v20 = *(void *)&v230;
                unint64_t v21 = v224;
                char v22 = 4;
                goto LABEL_19;
              }
LABEL_232:
              __break(1u);
            }
          }
          uint64_t v58 = ~v52;
          while (1)
          {
            unint64_t v53 = (v53 + 1) & v58;
            unint64_t v54 = v53 >> 6;
            uint64_t v55 = *(void *)(v46 + 8 * (v53 >> 6));
            uint64_t v56 = 1 << v53;
            if ((v55 & (1 << v53)) == 0) {
              break;
            }
            if (*(unsigned __int8 *)(v57 + v53) == v50) {
              goto LABEL_34;
            }
          }
LABEL_32:
          *(void *)(v46 + 8 * v54) = v56 | v55;
          *(unsigned char *)(v57 + v53) = v50;
          uint64_t v47 = *(void *)(v44 + 16);
          BOOL v48 = __OFADD__(v47, 1);
          uint64_t v49 = v47 + 1;
          if (v48) {
            goto LABEL_214;
          }
          *(void *)(v44 + 16) = v49;
          goto LABEL_34;
        }
        break;
      }
LABEL_235:
      int v202 = 0;
      uint64_t v201 = 1119;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_236:
      os_unfair_lock_unlock(v25);
      __break(1u);
      swift_willThrow();
      __break(1u);
LABEL_237:
      os_unfair_lock_unlock(v30);
      __break(1u);
LABEL_238:
      swift_release();
      swift_release();
      __break(1u);
LABEL_239:
      uint64_t v191 = v32;
      unint64_t v192 = (unint64_t)v16;
LABEL_242:
      outlined consume of _XMLPlistEncodingFormat.Reference(v191, v192, 5);
      __break(1u);
    }
    else
    {
LABEL_206:
      swift_release();
      _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v213);
      _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_dict);
    }
  }
  else
  {
    _XMLPlistEncodingFormat.Writer.appendEmpty(_:)(Foundation_XMLPlistTag_dict);
  }
}

uint64_t outlined consume of _XMLPlistEncodingFormat.Reference(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
      uint64_t result = outlined consume of Data._Representation(result, a2);
      break;
    case 6:
    case 7:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

void _XMLPlistEncodingFormat.Writer.append(_:)(char *__src, uint64_t a2)
{
  if (a2 < 1) {
    return;
  }
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 16);
  if ((unint64_t)a2 < 0x2000)
  {
    uint64_t v7 = 0x2000 - v6;
    if (__OFSUB__(0x2000, v6))
    {
      __break(1u);
    }
    else
    {
      if (v7 >= a2) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = 0x2000 - v6;
      }
      if (v7 < a2) {
        goto LABEL_8;
      }
      if (!*(void *)v3)
      {
LABEL_23:
        __break(1u);
        return;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      if (!__OFADD__(v6, v8))
      {
        *(void *)(v3 + 16) = v6 + v8;
        return;
      }
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_8:
  if (v6 >= 1)
  {
    if (*(void *)v3) {
      uint64_t v9 = (unsigned char *)(*(void *)v3 + v6);
    }
    else {
      uint64_t v9 = 0;
    }
    Data._Representation.append(contentsOf:)(*(unsigned char **)v3, v9);
    *(void *)(v3 + 16) = 0;
  }
  if (__src) {
    uint64_t v10 = &__src[a2];
  }
  else {
    uint64_t v10 = 0;
  }
  Data._Representation.append(contentsOf:)(__src, v10);
}

uint64_t outlined copy of _XMLPlistEncodingFormat.Reference(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 5:
      uint64_t result = outlined copy of Data._Representation(result, a2);
      break;
    case 6:
    case 7:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendIndents(_:)(Swift::Int a1)
{
  unint64_t v1 = a1;
  if (a1 >= 4)
  {
    do
    {
      long long __src = xmmword_1822056E0;
      _XMLPlistEncodingFormat.Writer.append(_:)((char *)&__src, 4);
      swift_bridgeObjectRelease();
      v1 -= 4;
    }
    while (v1 > 3);
  }
  switch(v1)
  {
    case 1uLL:
      uint64_t v2 = 9;
      unint64_t v3 = 0xE100000000000000;
      break;
    case 2uLL:
      uint64_t v2 = 2313;
      unint64_t v3 = 0xE200000000000000;
      break;
    case 3uLL:
      uint64_t v2 = 592137;
      unint64_t v3 = 0xE300000000000000;
      break;
    default:
      return;
  }
  *(void *)&long long __src = v2;
  *((void *)&__src + 1) = v3;
  specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
  swift_bridgeObjectRelease();
}

void closure #1 in _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(char *__src, uint64_t a2, uint64_t a3)
{
  if (__src)
  {
    if (a2 < 1) {
      return;
    }
    uint64_t v4 = __src;
    uint64_t v5 = &__src[a2];
    while (1)
    {
      uint64_t v6 = v5 - v4;
      if (v5 == v4)
      {
        uint64_t v15 = v5;
        if (v6 < 1) {
          return;
        }
        goto LABEL_27;
      }
      unsigned int v7 = *v4;
      BOOL v8 = v7 > 0x3E;
      uint64_t v9 = (1 << v7) & 0x5000004000000000;
      if (v8 || v9 == 0) {
        break;
      }
      uint64_t v11 = 0;
LABEL_10:
      _XMLPlistEncodingFormat.Writer.append(_:)(v4, v11);
      _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(v4[v11]);
      if (__OFADD__(v11, 1))
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      v4 += v11 + 1;
      if (v4 >= v5) {
        return;
      }
    }
    if (v6 == 1)
    {
      uint64_t v15 = v4;
    }
    else
    {
      uint64_t v11 = 1;
      while (1)
      {
        unsigned int v12 = v4[v11];
        BOOL v8 = v12 > 0x3E;
        uint64_t v13 = (1 << v12) & 0x5000004000000000;
        if (!v8 && v13 != 0) {
          break;
        }
        if (v6 == ++v11) {
          goto LABEL_24;
        }
      }
      if ((v11 & 0x8000000000000000) == 0) {
        goto LABEL_10;
      }
      __break(1u);
LABEL_24:
      uint64_t v15 = v4;
      if (v6 < 1) {
        return;
      }
LABEL_27:
      if ((unint64_t)v6 >> 13)
      {
        uint64_t v16 = *(void *)(a3 + 16);
        if (v16 <= 0)
        {
LABEL_42:
          if (v5 != v4) {
            Data._Representation.append(contentsOf:)(v4, &v15[v6]);
          }
          return;
        }
        uint64_t v17 = *(unsigned char **)a3;
        unint64_t v18 = (unsigned char *)(*(void *)a3 + v16);
LABEL_38:
        if (v17) {
          char v22 = v18;
        }
        else {
          char v22 = 0;
        }
        Data._Representation.append(contentsOf:)(v17, v22);
        *(void *)(a3 + 16) = 0;
        goto LABEL_42;
      }
    }
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v20 = 0x2000 - v19;
    if (__OFSUB__(0x2000, v19)) {
      goto LABEL_49;
    }
    if (v20 >= v6) {
      uint64_t v21 = v5 - v4;
    }
    else {
      uint64_t v21 = 0x2000 - v19;
    }
    if (v20 >= v6)
    {
      if (!*(void *)a3) {
        goto LABEL_52;
      }
      memmove((void *)(*(void *)a3 + v19), v15, v5 - v4);
      if (!__OFADD__(v19, v21))
      {
        *(void *)(a3 + 16) = v19 + v21;
        return;
      }
      goto LABEL_50;
    }
    if (v19 <= 0) {
      goto LABEL_42;
    }
    uint64_t v17 = *(unsigned char **)a3;
    unint64_t v18 = (unsigned char *)(*(void *)a3 + v19);
    goto LABEL_38;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation::XMLPlistTag a1)
{
  uint64_t v5 = 12092;
  unint64_t v6 = 0xE200000000000000;
  specialized String.withUTF8<A>(_:)(&v5);
  swift_bridgeObjectRelease();
  uint64_t v2 = (char *)XMLPlistTag.tagName.getter(a1);
  _XMLPlistEncodingFormat.Writer.append(_:)(v2, v3, v4);
  uint64_t v5 = 2622;
  unint64_t v6 = 0xE200000000000000;
  specialized String.withUTF8<A>(_:)(&v5);

  swift_bridgeObjectRelease();
}

void _XMLPlistEncodingFormat.Writer.append(_:)(char *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (!((unint64_t)a1 >> 32))
    {
      if (a1 >> 11 == 27)
      {
LABEL_13:
        __break(1u);
        return;
      }
      if (a1 >> 16 <= 0x10)
      {
        _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a1, (uint64_t (*)(uint64_t *))partial apply for closure #1 in _XMLPlistEncodingFormat.Writer.append(_:));
        return;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_11;
  }

  _XMLPlistEncodingFormat.Writer.append(_:)(a1, a2);
}

const char *XMLPlistTag.tagName.getter(char a1)
{
  uint64_t result = "plist";
  switch(a1)
  {
    case 1:
      uint64_t result = "array";
      break;
    case 2:
      uint64_t result = "dict";
      break;
    case 3:
      uint64_t result = "key";
      break;
    case 4:
      uint64_t result = "string";
      break;
    case 5:
      uint64_t result = "data";
      break;
    case 6:
      uint64_t result = "date";
      break;
    case 7:
      uint64_t result = "real";
      break;
    case 8:
      uint64_t result = "integer";
      break;
    case 9:
      uint64_t result = "true";
      break;
    case 10:
      uint64_t result = "false";
      break;
    default:
      return result;
  }
  return result;
}

void *specialized Sequence._copyContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v27 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v28 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v29 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    uint64_t v18 = 24 * v14;
    uint64_t v19 = *(void *)(a4 + 48) + 24 * v14;
    uint64_t v20 = *(void *)v19;
    unint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)(v19 + 16);
    uint64_t v23 = *(void *)(a4 + 56) + v18;
    uint64_t v25 = *(void *)v23;
    unint64_t v24 = *(void *)(v23 + 8);
    char v26 = *(unsigned char *)(v23 + 16);
    *(void *)uint64_t v10 = *(void *)v19;
    *(void *)(v10 + 8) = v21;
    *(unsigned char *)(v10 + 16) = v22;
    *(void *)(v10 + 24) = v25;
    *(void *)(v10 + 32) = v24;
    *(unsigned char *)(v10 + 40) = v26;
    if (v12 == v9)
    {
      outlined copy of _XMLPlistEncodingFormat.Reference(v20, v21, v22);
      outlined copy of _XMLPlistEncodingFormat.Reference(v25, v24, v26);
      goto LABEL_38;
    }
    v10 += 48;
    outlined copy of _XMLPlistEncodingFormat.Reference(v20, v21, v22);
    uint64_t result = (void *)outlined copy of _XMLPlistEncodingFormat.Reference(v25, v24, v26);
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v15 >= v29) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2;
      if (v15 + 1 >= v29)
      {
        unint64_t v8 = 0;
        int64_t v11 = v15;
      }
      else
      {
        unint64_t v16 = *(void *)(v5 + 8 * v11);
        if (v16) {
          goto LABEL_14;
        }
        int64_t v17 = v15 + 2;
        if (v15 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          int64_t v15 = v17;
          goto LABEL_18;
        }
        int64_t v11 = v15 + 3;
        if (v15 + 3 < v29)
        {
          unint64_t v16 = *(void *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            int64_t v15 = v11;
            goto LABEL_18;
          }
          int64_t v17 = v15 + 4;
          if (v15 + 4 >= v29)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v16 = *(void *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              int64_t v15 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_42;
              }
              if (v15 >= v29)
              {
                unint64_t v8 = 0;
                int64_t v11 = v29 - 1;
                goto LABEL_37;
              }
              unint64_t v16 = *(void *)(v5 + 8 * v15);
              ++v17;
              if (v16) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v15 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v27;
      uint64_t result = v28;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v11 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  long long v23;
  uint64_t v24;
  void *v25;
  int64_t v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  long long v31;
  long long v32;
  long long v33;
  uint64_t v34;

  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v12 = 0;
LABEL_37:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v12;
  }
  if (!a3)
  {
    int64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_37;
  }
  if (a3 < 0) {
    goto LABEL_39;
  }
  uint64_t v10 = a2;
  unint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v25 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  char v26 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    uint64_t v18 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(*(void *)(a4 + 56) + 40 * v14, (uint64_t)&v28);
    *(void *)&uint64_t v27 = v20;
    *((void *)&v27 + 1) = v19;
    unint64_t v21 = v30;
    unint64_t v34 = v30;
    char v22 = v29;
    uint64_t v23 = v28;
    uint64_t v32 = v28;
    uint64_t v33 = v29;
    char v31 = v27;
    *(_OWORD *)uint64_t v10 = v27;
    *(_OWORD *)(v10 + 16) = v23;
    *(_OWORD *)(v10 + 32) = v22;
    *(void *)(v10 + 48) = v21;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = a3;
      goto LABEL_36;
    }
    v10 += 56;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_35;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    if (!v16)
    {
      int64_t v17 = v11 + 2;
      ++v11;
      if (v15 + 1 >= v26) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v11 = v15 + 1;
      if (v15 + 2 >= v26) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v5 + 8 * (v15 + 2));
      if (v16)
      {
        v15 += 2;
      }
      else
      {
        int64_t v11 = v15 + 2;
        if (v15 + 3 >= v26) {
          goto LABEL_35;
        }
        unint64_t v16 = *(void *)(v5 + 8 * (v15 + 3));
        if (!v16)
        {
          int64_t v17 = v15 + 4;
          int64_t v11 = v15 + 3;
          if (v15 + 4 < v26)
          {
            unint64_t v16 = *(void *)(v5 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v15 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_40;
                }
                if (v15 >= v26)
                {
                  int64_t v11 = v26 - 1;
                  goto LABEL_35;
                }
                unint64_t v16 = *(void *)(v5 + 8 * v15);
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v15 = v17;
            goto LABEL_21;
          }
LABEL_35:
          unint64_t v8 = 0;
LABEL_36:
          uint64_t v6 = v24;
          uint64_t result = v25;
          goto LABEL_37;
        }
        v15 += 3;
      }
    }
LABEL_21:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v11 = v15;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendEmpty(_:)(Foundation::XMLPlistTag a1)
{
  uint64_t v5 = 60;
  unint64_t v6 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v5);
  swift_bridgeObjectRelease();
  uint64_t v2 = (char *)XMLPlistTag.tagName.getter(a1);
  _XMLPlistEncodingFormat.Writer.append(_:)(v2, v3, v4);
  uint64_t v5 = 671279;
  unint64_t v6 = 0xE300000000000000;
  specialized String.withUTF8<A>(_:)(&v5);

  swift_bridgeObjectRelease();
}

uint64_t base witness table accessor for Equatable in _BPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference(&lazy protocol witness table cache variable for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference, a2, (void (*)(uint64_t))type metadata accessor for _BPlistEncodingFormat.Reference);
}

uint64_t DateComponents.year.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 48) = v3;
  *(unsigned char *)(v2 + 56) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t assignWithCopy for Date.FormatStyle(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  uint64_t v7 = *((void *)a2 + 7);
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *((void *)a2 + 10);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = *((void *)a2 + 12);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 96) = v9;
  uint64_t v10 = *((void *)a2 + 14);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 112) = v10;
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  *(unsigned char *)(a1 + 121) = *((unsigned char *)a2 + 121);
  return a1;
}

uint64_t _XMLPlistEncodingFormat.Reference.Box.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));

  return swift_deallocClassInstance();
}

unint64_t one-time initialization function for cache()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v0 = (void *)static _DictionaryStorage.allocate(capacity:)();
  swift_retain();
  uint64_t v1 = 0;
  while (1)
  {
    uint64_t v2 = (char *)&outlined read-only object #0 of TimeZoneCache.State.init() + v1;
    uint64_t v3 = *(void *)((char *)&outlined read-only object #0 of TimeZoneCache.State.init() + v1 + 40);
    uint64_t v4 = *(void *)((char *)&outlined read-only object #0 of TimeZoneCache.State.init() + v1 + 56);
    if (!v3)
    {
      swift_bridgeObjectRetain();
LABEL_8:
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<TimeZoneCache.State>._Buffer);
      unint64_t result = swift_allocObject();
      *(_DWORD *)(result + 144) = 0;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      uint64_t v14 = MEMORY[0x1E4FBC868];
      *(void *)(result + 48) = 0;
      *(void *)(result + 56) = v14;
      *(void *)(result + 64) = v14;
      *(void *)(result + 72) = -1;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = v14;
      *(void *)(result + 128) = v14;
      *(void *)(result + 136) = v0;
      static TimeZoneCache.cache = result;
      return result;
    }
    uint64_t v5 = *((void *)v2 + 4);
    uint64_t v6 = *((void *)v2 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v3);
    if (v8) {
      break;
    }
    *(void *)((char *)v0 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v0[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v3;
    uint64_t v10 = (void *)(v0[7] + 16 * result);
    *uint64_t v10 = v6;
    v10[1] = v4;
    uint64_t v11 = v0[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_10;
    }
    v0[2] = v13;
    v1 += 32;
    if (v1 == 1632) {
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t static FormatStyle.list<A>(type:width:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  char v5 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static LocaleCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, &v10);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  uint64_t v8 = v10;
  uint64_t result = _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = result;
  *(unsigned char *)a3 = v5;
  *(unsigned char *)(a3 + 1) = v4;
  return result;
}

NSUncaughtExceptionHandler *NSGetUncaughtExceptionHandler(void)
{
  return (NSUncaughtExceptionHandler *)MEMORY[0x1F40D8D80](100, 0, 0);
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument()
{
  return &type metadata for String.LocalizationValue.FormatArgument;
}

void *type metadata accessor for TimeZone.CodingKeys()
{
  return &unk_1ECA4C190;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.Fields()
{
  return &type metadata for Date.ISO8601FormatStyle.Fields;
}

uint64_t PredicateExpressions.Value<A>.debugString(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v73 = *(void *)(a2 + 16);
  uint64_t v4 = v73;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v72);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_1, v2, v4);
  outlined init with copy of Any((uint64_t)v72, (uint64_t)v71);
  outlined init with copy of Any((uint64_t)v71, (uint64_t)&v67);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  if (!v70)
  {
    unint64_t object = (void *)0xE300000000000000;
    uint64_t countAndFlagsBits = 7104878;
    goto LABEL_27;
  }
  outlined destroy of Any?((uint64_t)&v69, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast())
  {
    v69._uint64_t countAndFlagsBits = 0;
    v69._unint64_t object = (void *)0xE000000000000000;
    if ((_BYTE)v67) {
      uint64_t v6 = 1702195828;
    }
    else {
      uint64_t v6 = 0x65736C6166;
    }
    if ((_BYTE)v67) {
      unint64_t v7 = 0xE400000000000000;
    }
    else {
      unint64_t v7 = 0xE500000000000000;
    }
    unint64_t v8 = v7;
    String.append(_:)(*(Swift::String *)&v6);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Numeric);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)&v69._countAndFlagsBits, (uint64_t)&v67);
    v66._uint64_t countAndFlagsBits = 0;
    v66._unint64_t object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    unint64_t object = (void *)0xE000000000000000;
    uint64_t countAndFlagsBits = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
    goto LABEL_27;
  }
  if (swift_dynamicCast())
  {
    uint64_t v67 = 34;
    unint64_t v68 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    uint64_t v11 = 34;
LABEL_25:
    unint64_t v24 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v11);
LABEL_26:
    uint64_t countAndFlagsBits = v67;
    unint64_t object = (void *)v68;
    goto LABEL_27;
  }
  if (swift_dynamicCast())
  {
    v69._uint64_t countAndFlagsBits = 0;
    v69._unint64_t object = (void *)0xE000000000000000;
    v12._uint64_t countAndFlagsBits = 0x20657461443CLL;
    v12._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v12);
    Double.write<A>(to:)();
    v13._uint64_t countAndFlagsBits = 62;
    v13._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v13);
LABEL_10:
    unint64_t object = v69._object;
    uint64_t countAndFlagsBits = v69._countAndFlagsBits;
LABEL_27:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    v69._uint64_t countAndFlagsBits = 0;
    v69._unint64_t object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v69._uint64_t countAndFlagsBits = 0x65727574706163;
    v69._unint64_t object = (void *)0xE700000000000000;
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v67 = v25;
    v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 10272;
    v27._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v27);
    __swift_project_boxed_opaque_existential_1(v72, v73);
    swift_getDynamicType();
    v28._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 2112041;
    v29._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = countAndFlagsBits;
    v30._unint64_t object = object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    Swift::String v31 = v69;
    uint64_t v32 = *(void **)(a1 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    }
    unint64_t v34 = v32[2];
    unint64_t v33 = v32[3];
    if (v34 >= v33 >> 1) {
      uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v32);
    }
    _OWORD v32[2] = v34 + 1;
    *(Swift::String *)&v32[2 * v34 + 4] = v31;
    *(void *)(a1 + 16) = v32;
    v69._uint64_t countAndFlagsBits = 0x65727574706163;
    v69._unint64_t object = (void *)0xE700000000000000;
    uint64_t v67 = v25;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    if (!__OFADD__(v25, 1))
    {
      uint64_t v36 = v69._countAndFlagsBits;
      *(void *)(a1 + 24) = v25 + 1;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
      return v36;
    }
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t result = swift_dynamicCast();
  if (!result)
  {
    if (swift_dynamicCast())
    {
      uint64_t v67 = 0x20444955553CLL;
      unint64_t v68 = 0xE600000000000000;
      Swift::String v66 = v69;
      uint64_t v19 = UUID.uuidString.getter();
    }
    else
    {
      uint64_t v67 = 60;
      unint64_t v68 = 0xE100000000000000;
      __swift_project_boxed_opaque_existential_1(v72, v73);
      swift_getDynamicType();
      v21._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 8250;
      v22._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v22);
      outlined init with copy of Any((uint64_t)v72, (uint64_t)&v69);
      v66._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      v66._unint64_t object = v23;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = v69._object;
      uint64_t v19 = v69._countAndFlagsBits;
    }
    String.append(_:)(*(Swift::String *)&v19);
    swift_bridgeObjectRelease();
    uint64_t v11 = 62;
    goto LABEL_25;
  }
  unint64_t v16 = (unint64_t)v69._object;
  uint64_t v15 = v69._countAndFlagsBits;
  uint64_t v67 = 0x20617461443CLL;
  unint64_t v68 = 0xE600000000000000;
  switch((unint64_t)v69._object >> 62)
  {
    case 1uLL:
      if (v69._countAndFlagsBits >> 32 < SLODWORD(v69._countAndFlagsBits)) {
        goto LABEL_51;
      }
      if (v69._countAndFlagsBits >> 32 == SLODWORD(v69._countAndFlagsBits))
      {
        id v37 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        outlined copy of Data._Representation(v15, v16);
        id v38 = objc_msgSend(v37, sel_init);
        id v39 = objc_msgSend(v38, sel_base64EncodedStringWithOptions_, 0);
LABEL_48:
        id v62 = v39;
        id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        BOOL v48 = v63;

        outlined consume of Data._Representation(v15, v16);
        goto LABEL_49;
      }
      uint64_t v58 = *(void *)(((uint64_t)v69._object & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v58)
      {
        uint64_t v59 = *(void *)(((uint64_t)v69._object & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (__OFSUB__(SLODWORD(v69._countAndFlagsBits), v59)) {
          goto LABEL_54;
        }
        uint64_t v60 = v58 + SLODWORD(v69._countAndFlagsBits) - v59;
        id v61 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        outlined copy of Data._Representation(v15, v16);
        id v38 = objc_msgSend(v61, sel_initWithBytesNoCopy_length_freeWhenDone_, v60, (v15 >> 32) - (int)v15, 0);
        id v39 = objc_msgSend(v38, sel_base64EncodedStringWithOptions_, 0);
        goto LABEL_48;
      }
      goto LABEL_56;
    case 2uLL:
      uint64_t v40 = *(void *)(v69._countAndFlagsBits + 16);
      uint64_t v41 = *(void *)(v69._countAndFlagsBits + 24);
      if (v40 == v41)
      {
        id v42 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        swift_retain();
        swift_retain();
        id v43 = objc_msgSend(v42, sel_init);
        id v44 = objc_msgSend(v43, sel_base64EncodedStringWithOptions_, 0);
LABEL_44:
        id v56 = v44;
        id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
        BOOL v48 = v57;
        swift_release();
        swift_release();

LABEL_49:
        v64._uint64_t countAndFlagsBits = (uint64_t)v46;
        v64._unint64_t object = v48;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        v65._uint64_t countAndFlagsBits = 62;
        v65._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v65);
        outlined consume of Data._Representation(v15, v16);
        goto LABEL_26;
      }
      uint64_t v49 = *(void *)(((uint64_t)v69._object & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v49)
      {
        uint64_t v50 = *(void *)(((uint64_t)v69._object & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v51 = __OFSUB__(v40, v50);
        uint64_t v52 = v40 - v50;
        if (v51)
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        uint64_t v53 = v41 - v40;
        if (__OFSUB__(v41, v40))
        {
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
        }
        uint64_t v54 = v49 + v52;
        id v55 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        swift_retain();
        swift_retain();
        id v43 = objc_msgSend(v55, sel_initWithBytesNoCopy_length_freeWhenDone_, v54, v53, 0);
        id v44 = objc_msgSend(v43, sel_base64EncodedStringWithOptions_, 0);
        goto LABEL_44;
      }
      __break(1u);
LABEL_56:
      __break(1u);
      return result;
    case 3uLL:
      id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      id v18 = objc_msgSend(v17, sel_base64EncodedStringWithOptions_, 0);
      goto LABEL_39;
    default:
      LODWORD(v66._countAndFlagsBits) = v69._countAndFlagsBits;
      WORD2(v66._countAndFlagsBits) = WORD2(v69._countAndFlagsBits);
      *(uint64_t *)((char *)&v66._countAndFlagsBits + 6) = *(uint64_t *)((char *)&v69._countAndFlagsBits + 6);
      id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytesNoCopy_length_freeWhenDone_, &v66, BYTE6(v69._object), 0);
      id v18 = objc_msgSend(v17, sel_base64EncodedStringWithOptions_, 0);
LABEL_39:
      id v45 = v18;
      id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      BOOL v48 = v47;

      goto LABEL_49;
  }
}

void *partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  return partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

void *specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>(void *result@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _WORD *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, void))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:), (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, void))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:), (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(char *, uint64_t, void)@<X4>, uint64_t (*a6)(char *, uint64_t)@<X5>, uint64_t (*a7)(char **)@<X6>, uint64_t (*a8)(void, void, void)@<X7>, _WORD *a9@<X8>)
{
  uint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v9 + 32), *(unsigned char *)(v9 + 33), a5, a6, a7, a8);
  if (!v10) {
    *a9 = result;
  }
  return result;
}

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(char *, uint64_t, void), uint64_t (*a8)(char *, uint64_t), uint64_t (*a9)(char **), uint64_t (*a10)(void, void, void))
{
  if (a5)
  {
    uint64_t result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v10)
    {
      uint64_t v19 = (char *)result;
      __int16 v20 = v18;
      uint64_t result = a7(__s1, a2, v18 & 1);
      if ((result & 0x10000) != 0)
      {
        if ((v20 & 0x100) != 0)
        {
          uint64_t v21 = static String._fromUTF8Repairing(_:)();
          uint64_t v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v24 = v21;
          *(void *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(unsigned char *)(v24 + 48) = 11;
          return swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v19, a9, a10);
      }
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v10)
    {
      uint64_t v19 = (char *)result;
      uint64_t result = a8(__s1, a2);
      if ((result & 0x10000) != 0) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v19, a9, a10);
      }
    }
  }
  return result;
}

{
  uint64_t v10;
  uint64_t result;
  __int16 v18;
  char *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a5)
  {
    uint64_t result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v10)
    {
      uint64_t v19 = (char *)result;
      __int16 v20 = v18;
      uint64_t result = a7(__s1, a2, v18 & 1);
      if ((result & 0x100) != 0)
      {
        if ((v20 & 0x100) != 0)
        {
          uint64_t v21 = static String._fromUTF8Repairing(_:)();
          uint64_t v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v24 = v21;
          *(void *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(unsigned char *)(v24 + 48) = 11;
          return swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v19, a9, a10);
      }
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v10)
    {
      uint64_t v19 = (char *)result;
      uint64_t result = a8(__s1, a2);
      if ((result & 0x100) != 0) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v19, a9, a10);
      }
    }
  }
  return result;
}

unint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

unint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(unint64_t, uint64_t)@<X6>, _WORD *a8@<X8>)
{
  unint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v8 + 16), *(unsigned char *)(v8 + 17), a5, a6, a7);
  if (!v9) {
    *a8 = result;
  }
  return result;
}

void static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

void static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.zeroBased.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t kCFStringEncodingASCII.getter()
{
  return 1536;
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(Swift::Bool a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderBPlist.encode(_:)(Swift::Bool a1)
{
  if ((*(uint64_t (**)(void))(*(void *)v1 + 240))())
  {
    swift_retain_n();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void protocol witness for Subscription.request(_:) in conformance NSObject.KVOSubscription<A, B, C>(uint64_t a1)
{
}

void NSObject.KVOSubscription.request(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v47 = *(void *)v1;
  uint64_t v4 = v47;
  uint64_t v5 = *(void *)(v47 + 96);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v46 - v7;
  uint64_t v50 = v5;
  uint64_t v52 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v9);
  BOOL v51 = (char *)&v46 - v10;
  uint64_t v11 = *(void *)(v4 + 88);
  uint64_t v55 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v53 = (char *)&v46 - v17;
  os_unfair_lock_t v54 = *(os_unfair_lock_t *)&v2[*(void *)(v4 + 176)];
  os_unfair_lock_lock(v54);
  uint64_t v18 = *((void *)v2 + 3);
  static Subscribers.Demand.unlimited.getter();
  if (static Subscribers.Demand.== infix(_:_:)())
  {
    uint64_t v19 = *((void *)v2 + 3);
  }
  else
  {
    uint64_t v20 = v11;
    static Subscribers.Demand.unlimited.getter();
    char v21 = static Subscribers.Demand.== infix(_:_:)();
    uint64_t v19 = static Subscribers.Demand.unlimited.getter();
    if (v21)
    {
      uint64_t v11 = v20;
    }
    else
    {
      uint64_t v11 = v20;
      if (static Subscribers.Demand.== infix(_:_:)()) {
        goto LABEL_9;
      }
      if ((v18 | a1) < 0)
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v19 = v18 + a1;
      if (__OFADD__(v18, a1))
      {
LABEL_9:
        uint64_t v19 = static Subscribers.Demand.unlimited.getter();
      }
      else if (v19 < 0)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
    *((void *)v2 + 3) = v19;
  }
  uint64_t v22 = v55;
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    if (v19 < 0)
    {
      __break(1u);
      goto LABEL_47;
    }
    if (!v19)
    {
LABEL_19:
      uint64_t v30 = *((void *)v2 + 3);
      static Subscribers.Demand.unlimited.getter();
      if (static Subscribers.Demand.== infix(_:_:)())
      {
LABEL_29:
        id v37 = &v2[*(void *)(*(void *)v2 + 136)];
        (*(void (**)(char *, uint64_t))(v12 + 8))(v37, v22);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v37, 1, 1, v11);
        id v38 = v54;
LABEL_45:
        os_unfair_lock_unlock(v38);
        return;
      }
      static Subscribers.Demand.unlimited.getter();
      if (static Subscribers.Demand.== infix(_:_:)())
      {
        uint64_t v31 = static Subscribers.Demand.unlimited.getter();
LABEL_28:
        *((void *)v2 + 3) = v31;
        goto LABEL_29;
      }
      if ((v30 & 0x8000000000000000) == 0)
      {
        if (v30)
        {
          uint64_t v31 = v30 - 1;
          goto LABEL_28;
        }
        goto LABEL_48;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
  }
  uint64_t v23 = &v2[*(void *)(*(void *)v2 + 136)];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v23, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v22);
    goto LABEL_19;
  }
  id v46 = v23;
  uint64_t v24 = v53;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v53, v14, v11);
  uint64_t v25 = v48;
  uint64_t v26 = v15;
  uint64_t v27 = v49;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v8, &v2[*(void *)(*(void *)v2 + 144)], v49);
  uint64_t v28 = v52;
  uint64_t v29 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v8, 1, v50) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v11);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v27);
    uint64_t v22 = v55;
    uint64_t v15 = v26;
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v51, v8, v29);
  uint64_t v32 = *((void *)v2 + 3);
  static Subscribers.Demand.unlimited.getter();
  char v33 = static Subscribers.Demand.== infix(_:_:)();
  uint64_t v34 = v55;
  uint64_t v35 = v26;
  if ((v33 & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if (static Subscribers.Demand.== infix(_:_:)())
    {
      uint64_t v36 = static Subscribers.Demand.unlimited.getter();
    }
    else
    {
      if (v32 < 0)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      if (!v32)
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      uint64_t v36 = v32 - 1;
    }
    *((void *)v2 + 3) = v36;
  }
  id v39 = v46;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v46, v34);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v39, 1, 1, v11);
  id v38 = v54;
  os_unfair_lock_unlock(v54);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v40 = v53;
  uint64_t v41 = dispatch thunk of Subscriber.receive(_:)();
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v38);
  uint64_t v42 = *((void *)v2 + 3);
  static Subscribers.Demand.unlimited.getter();
  if (static Subscribers.Demand.== infix(_:_:)())
  {
LABEL_44:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v29);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v11);
    goto LABEL_45;
  }
  uint64_t v43 = v11;
  static Subscribers.Demand.unlimited.getter();
  char v44 = static Subscribers.Demand.== infix(_:_:)();
  uint64_t v45 = static Subscribers.Demand.unlimited.getter();
  if (v44)
  {
    uint64_t v11 = v43;
LABEL_43:
    *((void *)v2 + 3) = v45;
    goto LABEL_44;
  }
  uint64_t v11 = v43;
  if (static Subscribers.Demand.== infix(_:_:)()) {
    goto LABEL_41;
  }
  if ((v42 | v41) < 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v45 = v42 + v41;
  if (__OFADD__(v42, v41))
  {
LABEL_41:
    uint64_t v45 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_43;
  }
  if ((v45 & 0x8000000000000000) == 0) {
    goto LABEL_43;
  }
LABEL_54:
  __break(1u);
}

void *__cdecl NSReallocateCollectable(void *ptr, NSUInteger size, NSUInteger options)
{
  if (ptr)
  {
    uint64_t v5 = malloc_zone_from_ptr(ptr);
    return malloc_type_zone_realloc(v5, ptr, size, 0x14DF5F85uLL);
  }
  else
  {
    return NSAllocateCollectable(size, options);
  }
}

double URL.append<A>(path:directoryHint:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return URL.append<A>(path:directoryHint:)(a1, a2, a3, a4, (void (*)(uint64_t *__return_ptr, uint64_t, char *))URL.appending<A>(path:directoryHint:));
}

uint64_t CustomNSError<>.errorCode.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v13 - v7;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v9 = *(void *)(a4 + 8);
  if (dispatch thunk of static BinaryInteger.isSigned.getter()) {
    uint64_t v10 = specialized numericCast<A, B>(_:)((uint64_t)v8, AssociatedTypeWitness, v9);
  }
  else {
    uint64_t v10 = specialized numericCast<A, B>(_:)((uint64_t)v8, AssociatedTypeWitness, v9);
  }
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return v11;
}

uint64_t specialized numericCast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v55 = (char *)&v51 - v6;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v57 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v60 = (char *)&v51 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v51 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v59 = (char *)&v51 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v58 = (char *)&v51 - v18;
  MEMORY[0x1F4188790](v19);
  char v21 = (char *)&v51 - v20;
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v51 - v24;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v26((char *)&v51 - v24, a1, a2, v23);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  ((void (*)(char *, char *, uint64_t))v26)(v21, v25, a2);
  if ((a1 & 1) == 0)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v7 + 8);
    v28(v21, a2);
    goto LABEL_16;
  }
  uint64_t v53 = v5;
  uint64_t v27 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v54 = v7;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v29 = (char *)(v7 + 8);
  uint64_t v28 = v30;
  v30(v21, a2);
  if (v27 <= 64) {
    goto LABEL_16;
  }
  uint64_t v52 = v29;
  uint64_t v31 = v58;
  ((void (*)(char *, char *, uint64_t))v26)(v58, v25, a2);
  unint64_t v62 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_14:
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_15:
      v28(v31, a2);
      goto LABEL_16;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v32 = v31;
    char v33 = v59;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    goto LABEL_10;
  }
  char v34 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v35 = dispatch thunk of BinaryInteger.bitWidth.getter();
  BOOL v37 = __OFSUB__(v35, 64);
  BOOL v36 = v35 - 64 < 0;
  if ((v34 & 1) == 0) {
    goto LABEL_12;
  }
  if (v35 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    char v33 = v59;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v32 = v58;
LABEL_10:
    char v38 = dispatch thunk of static Comparable.< infix(_:_:)();
    id v39 = v33;
    uint64_t v31 = v52;
    v28(v39, a2);
    v28(v32, a2);
    if ((v38 & 1) == 0) {
      goto LABEL_16;
    }
    __break(1u);
LABEL_12:
    if (v36 == v37) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v49 = v59;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v50 = v58;
  LODWORD(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
  v28(v49, a2);
  uint64_t v46 = (uint64_t)v57;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v57, v50, a2);
  if (AssociatedTypeWitness) {
    goto LABEL_32;
  }
  dispatch thunk of BinaryInteger._lowWord.getter();
  v28((char *)v46, a2);
LABEL_16:
  uint64_t v40 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *, uint64_t))v26)(v14, v25, a2);
  if (v40 < 65)
  {
    uint64_t v44 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v28(v14, a2);
    if (v44 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_28;
    }
  }
  else
  {
    v28(v14, a2);
  }
  uint64_t v41 = v60;
  ((void (*)(char *, char *, uint64_t))v26)(v60, v25, a2);
  unint64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
  char v42 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v42 & 1) == 0)
  {
    if (v43 >= 64)
    {
      uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_27;
    }
LABEL_26:
    dispatch thunk of BinaryInteger._lowWord.getter();
    v28(v41, a2);
LABEL_28:
    uint64_t v47 = dispatch thunk of BinaryInteger._lowWord.getter();
    v28(v25, a2);
    return v47;
  }
  if (v43 <= 64) {
    goto LABEL_26;
  }
  lazy protocol witness table accessor for type Int and conformance Int();
LABEL_27:
  uint64_t v45 = v59;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v46 = dispatch thunk of static Comparable.< infix(_:_:)();
  v28(v45, a2);
  v28(v41, a2);
  if ((v46 & 1) == 0) {
    goto LABEL_28;
  }
  __break(1u);
LABEL_32:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v28)(v46, a2);
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t result;
  void (*v22)(char *, uint64_t, uint64_t, double);
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t, double);
  char *v28;
  char v29;
  void (*v30)(char *, uint64_t, uint64_t, double);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t, uint64_t, double);
  char *v47;
  uint64_t v48;
  uint64_t v49;

  uint64_t v6 = *(void *)(*(void *)(a3 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v45 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v47 = (char *)&v44 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v46((char *)&v44 - v18, a1, a2, v17);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0
    || (swift_getAssociatedConformanceWitness(),
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(),
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(),
        uint64_t v20 = dispatch thunk of static Comparable.>= infix(_:_:)(),
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v15, a2),
        (v20 & 1) != 0))
  {
    uint64_t v48 = v8;
    uint64_t v22 = (void (*)(char *, uint64_t, uint64_t, double))a3;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      uint64_t v44 = v6;
      double v23 = v47;
      ((void (*)(char *, char *, uint64_t))v46)(v47, v19, a2);
      uint64_t v49 = -1;
      uint64_t v24 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v25 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v26 = v19;
      if (v24)
      {
        uint64_t v46 = v22;
        uint64_t v22 = (void (*)(char *, uint64_t, uint64_t, double))v48;
        double v23 = v15;
        if (v25 <= 64)
        {
LABEL_11:
          swift_getAssociatedConformanceWitness();
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          BOOL v37 = v47;
          char v38 = dispatch thunk of static Comparable.> infix(_:_:)();
          id v39 = (void (*)(char *, uint64_t))*((void *)v22 + 1);
          v39(v23, a2);
          uint64_t v40 = (void (*)(char *, char *, uint64_t))*((void *)v22 + 4);
          uint64_t v41 = v45;
          v40(v45, v37, a2);
          if (v38) {
            dispatch thunk of BinaryInteger._lowWord.getter();
          }
          v39(v41, a2);
          uint64_t v19 = v26;
          goto LABEL_15;
        }
        lazy protocol witness table accessor for type UInt and conformance UInt();
        uint64_t v27 = v46;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v28 = v47;
        uint64_t v29 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v30 = v22;
        uint64_t v22 = v27;
        uint64_t v31 = (void (*)(char *, uint64_t))*((void *)v30 + 1);
        v31(v23, a2);
        v31(v28, a2);
        uint64_t v19 = v26;
        if (v29)
        {
LABEL_10:
          __break(1u);
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v32 = v48;
        if (v25 <= 64)
        {
          char v42 = v47;
          dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v32 + 8))(v42, a2);
          uint64_t v19 = v26;
        }
        else
        {
          char v33 = v15;
          lazy protocol witness table accessor for type UInt and conformance UInt();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v34 = v47;
          uint64_t v35 = dispatch thunk of static Comparable.< infix(_:_:)();
          BOOL v36 = *(void (**)(char *, uint64_t))(v32 + 8);
          v36(v33, a2);
          v36(v34, a2);
          uint64_t v19 = v26;
          if (v35) {
            goto LABEL_10;
          }
        }
      }
    }
LABEL_15:
    uint64_t v43 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v19, a2);
    return v43;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t, double);
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  char v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t AssociatedTypeWitness;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;

  uint64_t v5 = *(void *)(*(void *)(a3 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v54 = (char *)&v51 - v6;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v60 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v51 - v11;
  MEMORY[0x1F4188790](v13);
  id v56 = (char *)&v51 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v59 = (char *)&v51 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v58 = (char *)&v51 - v18;
  MEMORY[0x1F4188790](v19);
  char v21 = (char *)&v51 - v20;
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v51 - v24;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v26((char *)&v51 - v24, a1, a2, v23);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  ((void (*)(char *, char *, uint64_t))v26)(v21, v25, a2);
  if ((a1 & 1) == 0)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v7 + 8);
    v28(v21, a2);
    goto LABEL_16;
  }
  uint64_t v53 = v5;
  uint64_t v27 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v57 = v7;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v29 = (char *)(v7 + 8);
  uint64_t v28 = v30;
  v30(v21, a2);
  if (v27 < 65) {
    goto LABEL_16;
  }
  uint64_t v52 = v29;
  uint64_t v31 = v58;
  ((void (*)(char *, char *, uint64_t))v26)(v58, v25, a2);
  unint64_t v62 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_14:
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_15:
      v28(v31, a2);
      goto LABEL_16;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v32 = v31;
    char v33 = v59;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    goto LABEL_10;
  }
  char v34 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v35 = dispatch thunk of BinaryInteger.bitWidth.getter();
  BOOL v37 = __OFSUB__(v35, 64);
  BOOL v36 = v35 - 64 < 0;
  if ((v34 & 1) == 0) {
    goto LABEL_12;
  }
  if (v35 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    char v33 = v59;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v32 = v58;
LABEL_10:
    char v38 = dispatch thunk of static Comparable.< infix(_:_:)();
    id v39 = v33;
    uint64_t v31 = v52;
    v28(v39, a2);
    v28(v32, a2);
    if ((v38 & 1) == 0) {
      goto LABEL_16;
    }
    __break(1u);
LABEL_12:
    if (v36 == v37) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v49 = v59;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v50 = v58;
  LODWORD(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
  v28(v49, a2);
  uint64_t v46 = (uint64_t)v56;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v50, a2);
  if (AssociatedTypeWitness) {
    goto LABEL_32;
  }
  dispatch thunk of BinaryInteger._lowWord.getter();
  v28((char *)v46, a2);
LABEL_16:
  uint64_t v40 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *, uint64_t))v26)(v12, v25, a2);
  if (v40 <= 64)
  {
    uint64_t v44 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v28(v12, a2);
    if (v44 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_28;
    }
  }
  else
  {
    v28(v12, a2);
  }
  uint64_t v41 = v60;
  ((void (*)(char *, char *, uint64_t))v26)(v60, v25, a2);
  unint64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
  char v42 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v42 & 1) == 0)
  {
    if (v43 >= 64)
    {
      uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_27;
    }
LABEL_25:
    dispatch thunk of BinaryInteger._lowWord.getter();
    v28(v41, a2);
LABEL_28:
    uint64_t v47 = dispatch thunk of BinaryInteger._lowWord.getter();
    v28(v25, a2);
    return v47;
  }
  if (v43 < 65) {
    goto LABEL_25;
  }
  lazy protocol witness table accessor for type Int and conformance Int();
LABEL_27:
  uint64_t v45 = v59;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v46 = dispatch thunk of static Comparable.< infix(_:_:)();
  v28(v45, a2);
  v28(v41, a2);
  if ((v46 & 1) == 0) {
    goto LABEL_28;
  }
  __break(1u);
LABEL_32:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v28)(v46, a2);
  __break(1u);
  return result;
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.FormatStyle(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t ___generateElements_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "isEqual:", objc_msgSend(MEMORY[0x1E4F1CA98], "null")) ^ 1;
}

void URLComponents.url.getter(uint64_t *a1@<X8>)
{
  long long v3 = v1[7];
  long long v4 = v1[5];
  long long v94 = v1[6];
  long long v95 = v3;
  long long v5 = v1[7];
  *(_OWORD *)unint64_t v96 = v1[8];
  *(_OWORD *)&v96[10] = *(long long *)((char *)v1 + 138);
  long long v6 = v1[3];
  long long v7 = v1[1];
  long long v90 = v1[2];
  long long v91 = v6;
  long long v8 = v1[3];
  long long v9 = v1[5];
  long long v92 = v1[4];
  long long v93 = v9;
  long long v10 = v1[1];
  long long v88 = *v1;
  long long v89 = v10;
  long long v85 = v94;
  long long v86 = v5;
  v87[0] = v1[8];
  *(_OWORD *)((char *)v87 + 10) = *(long long *)((char *)v1 + 138);
  long long v81 = v90;
  long long v82 = v8;
  long long v83 = v92;
  long long v84 = v4;
  long long v79 = v88;
  long long v80 = v7;
  if (BYTE8(v88) == 1)
  {
    if ((void)v88)
    {
      uint64_t v12 = *(void *)(v88 + 16);
      unint64_t v11 = *(void *)(v88 + 24);
      swift_bridgeObjectRetain();
      if (_foundation_swift_url_feature_enabled())
      {
LABEL_4:
        URL.init(string:)(v12, v11, a1);
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_106;
    }
LABEL_34:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  if (v96[25]) {
    goto LABEL_34;
  }
  uint64_t v77 = 0;
  *(void *)&long long v78 = 0xE000000000000000;
  uint64_t v13 = (void *)v90;
  if ((void)v90)
  {
    uint64_t v14 = *((void *)&v89 + 1);
    outlined retain of URLComponents((uint64_t)&v88);
    uint64_t v15 = v13;
LABEL_8:
    v76._uint64_t countAndFlagsBits = v14;
    v76._unint64_t object = v15;
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = 58;
    v16._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = v14;
    v17._unint64_t object = v15;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (BYTE9(v88) == 1 && (void)v88 && (*(unsigned char *)(v88 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v88);
    uint64_t v24 = String.subscript.getter();
    uint64_t v14 = MEMORY[0x185301F50](v24);
    uint64_t v15 = v25;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined retain of URLComponents((uint64_t)&v88);
LABEL_13:
  if (URLComponents._URLComponents.hasAuthority.getter())
  {
    if ((void)v95)
    {
      uint64_t v18 = *((void *)&v94 + 1);
      unint64_t v19 = v95;
    }
    else if ((BYTE14(v88) & 1) != 0 && (void)v88)
    {
      if (*(unsigned char *)(v88 + 168)) {
        uint64_t v22 = MEMORY[0x185302C80](0, 0xE000000000000000);
      }
      else {
        uint64_t v22 = String.subscript.getter();
      }
      uint64_t v18 = MEMORY[0x185301F50](v22);
      unint64_t v19 = v26;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0xE000000000000000;
    }
    __int16 v27 = specialized Collection.first.getter(v18, v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((v27 & 0x100) == 0 && v27 != 47) {
      goto LABEL_33;
    }
    v28._uint64_t countAndFlagsBits = 12079;
    v28._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v28);
    goto LABEL_60;
  }
  if ((void)v95)
  {
    unint64_t v20 = *((void *)&v94 + 1);
    unint64_t v21 = v95;
  }
  else if ((BYTE14(v88) & 1) != 0 && (void)v88)
  {
    if (*(unsigned char *)(v88 + 168)) {
      uint64_t v23 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v23 = String.subscript.getter();
    }
    unint64_t v20 = MEMORY[0x185301F50](v23);
    unint64_t v21 = v29;
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  unint64_t v30 = 65540;
  if ((v21 & 0x1000000000000000) != 0) {
    uint64_t v31 = (v20 >> 59) & 1;
  }
  else {
    uint64_t v31 = 1;
  }
  unint64_t v32 = HIBYTE(v21) & 0xF;
  uint64_t v33 = v20 & 0xFFFFFFFFFFFFLL;
  if ((v21 & 0x1000000000000000) != 0)
  {
    if ((v21 & 0x2000000000000000) != 0) {
      uint64_t v33 = HIBYTE(v21) & 0xF;
    }
    if (!v33)
    {
      __break(1u);
      return;
    }
    unint64_t v34 = String.UTF8View._foreignIndex(after:)();
    uint64_t v33 = v20 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v34 = 65540;
  }
  if ((v21 & 0x2000000000000000) == 0) {
    unint64_t v32 = v33;
  }
  if (v34 >> 14 == 4 * v32
    || (__int16 v35 = specialized Collection.first.getter(v20, v21), (v35 & 0x100) != 0)
    || v35 != 47)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  if ((v21 & 0x1000000000000000) != 0)
  {
    if (!v32)
    {
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    unint64_t v30 = String.UTF8View._foreignIndex(after:)();
  }
  if ((v30 & 0xC) == 4 << v31) {
    unint64_t v30 = _StringGuts._slowEnsureMatchingEncoding(_:)(v30, v20, v21);
  }
  uint64_t v31 = v30 >> 16;
  if (v30 >> 16 >= v32)
  {
    __break(1u);
    goto LABEL_121;
  }
  if ((v21 & 0x1000000000000000) != 0)
  {
    char v37 = String.UTF8View._foreignSubscript(position:)();
  }
  else
  {
    if ((v21 & 0x2000000000000000) == 0)
    {
      if ((v20 & 0x1000000000000000) != 0)
      {
        uint64_t v36 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_58:
        char v37 = *(unsigned char *)(v36 + v31);
        goto LABEL_114;
      }
LABEL_122:
      uint64_t v36 = _StringObject.sharedUTF8.getter();
      goto LABEL_58;
    }
    v76._uint64_t countAndFlagsBits = v20;
    v76._unint64_t object = (void *)(v21 & 0xFFFFFFFFFFFFFFLL);
    char v37 = *((unsigned char *)&v76._countAndFlagsBits + v31);
  }
LABEL_114:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v37 == 47)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v88);
    goto LABEL_34;
  }
LABEL_60:
  uint64_t v38 = URLComponents._URLComponents.percentEncodedUser.getter();
  if (v39)
  {
    String.append(_:)(*(Swift::String *)&v38);
    swift_bridgeObjectRelease();
  }
  uint64_t v40 = v92;
  if ((void)v92)
  {
    uint64_t v41 = *((void *)&v91 + 1);
    char v42 = (void *)v92;
LABEL_64:
    v76._uint64_t countAndFlagsBits = 58;
    v76._unint64_t object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v43._uint64_t countAndFlagsBits = v41;
    v43._unint64_t object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
  if (BYTE11(v88) == 1 && (void)v88 && (*(unsigned char *)(v88 + 96) & 1) == 0)
  {
    uint64_t v56 = String.subscript.getter();
    uint64_t v41 = MEMORY[0x185301F50](v56);
    char v42 = v57;
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }
LABEL_68:
  URLComponents._URLComponents.percentEncodedUser.getter();
  uint64_t v45 = v44;
  swift_bridgeObjectRelease();
  if (v45 | v40)
  {
LABEL_69:
    v46._uint64_t countAndFlagsBits = 64;
    v46._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    goto LABEL_73;
  }
  if (BYTE11(v88) == 1 && (void)v88 && (*(unsigned char *)(v88 + 96) & 1) == 0)
  {
    uint64_t v58 = String.subscript.getter();
    MEMORY[0x185301F50](v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_69;
  }
LABEL_73:
  uint64_t v47 = URLComponents._URLComponents.encodedHost.getter();
  if (v48)
  {
    String.append(_:)(*(Swift::String *)&v47);
    swift_bridgeObjectRelease();
  }
  URLComponents._URLComponents.port.getter();
  if ((v49 & 1) == 0)
  {
    v76._uint64_t countAndFlagsBits = 58;
    v76._unint64_t object = (void *)0xE100000000000000;
    v50._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v50);
LABEL_77:
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_81;
  }
  if ((BYTE13(v88) & 1) != 0 && (void)v88 && (*(unsigned char *)(v88 + 144) & 1) == 0)
  {
    uint64_t v54 = String.subscript.getter();
    v76._uint64_t countAndFlagsBits = 58;
    v76._unint64_t object = (void *)0xE100000000000000;
    v55._uint64_t countAndFlagsBits = MEMORY[0x185301F50](v54);
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
LABEL_81:
  if ((void)v95)
  {
    uint64_t v51 = *((void *)&v94 + 1);
    uint64_t v52 = (void *)v95;
  }
  else if ((BYTE14(v88) & 1) != 0 && (void)v88)
  {
    if (*(unsigned char *)(v88 + 168)) {
      uint64_t v53 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v53 = String.subscript.getter();
    }
    uint64_t v51 = MEMORY[0x185301F50](v53);
    uint64_t v52 = v59;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v51 = 0;
    uint64_t v52 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v60._uint64_t countAndFlagsBits = v51;
  v60._unint64_t object = v52;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  if (*(void *)v96)
  {
    uint64_t v61 = *((void *)&v95 + 1);
    unint64_t v62 = *(void **)v96;
LABEL_95:
    v76._uint64_t countAndFlagsBits = 63;
    v76._unint64_t object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v63._uint64_t countAndFlagsBits = v61;
    v63._unint64_t object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_99;
  }
  if (HIBYTE(v88) == 1 && (void)v88 && (*(unsigned char *)(v88 + 192) & 1) == 0)
  {
    uint64_t v72 = String.subscript.getter();
    uint64_t v61 = MEMORY[0x185301F50](v72);
    unint64_t v62 = v73;
    swift_bridgeObjectRelease();
    goto LABEL_95;
  }
LABEL_99:
  if (*(void *)&v96[16])
  {
    uint64_t v64 = *(void *)&v96[8];
    Swift::String v65 = *(void **)&v96[16];
LABEL_101:
    v76._uint64_t countAndFlagsBits = 35;
    v76._unint64_t object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v66._uint64_t countAndFlagsBits = v64;
    v66._unint64_t object = v65;
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_105;
  }
  if (v89 == 1 && (void)v88 && (*(unsigned char *)(v88 + 216) & 1) == 0)
  {
    uint64_t v74 = String.subscript.getter();
    uint64_t v64 = MEMORY[0x185301F50](v74);
    Swift::String v65 = v75;
    swift_bridgeObjectRelease();
    goto LABEL_101;
  }
LABEL_105:
  outlined release of URLComponents((uint64_t)&v88);
  uint64_t v12 = v77;
  unint64_t v11 = v78;
  if (_foundation_swift_url_feature_enabled()) {
    goto LABEL_4;
  }
LABEL_106:
  CFAllocatorRef v67 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v68 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  CFURLRef v69 = CFURLCreateWithString(v67, v68, 0);
  swift_unknownObjectRelease();
  if (v69)
  {
    URL.init(reference:)(v69, &v77);

    uint64_t v70 = v77;
    long long v71 = v78;
  }
  else
  {
    uint64_t v70 = 0;
    long long v71 = 0uLL;
  }
  *a1 = v70;
  *(_OWORD *)(a1 + 1) = v71;
}

uint64_t IndexPath.debugDescription.getter()
{
  uint64_t result = 23899;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = 8236;
      v3._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v3);
      goto LABEL_3;
    case 2:
      uint64_t result = MEMORY[0x1853025A0](*(void *)v0, MEMORY[0x1E4FBB550]);
      break;
    case 3:
      return result;
    default:
LABEL_3:
      v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._uint64_t countAndFlagsBits = 93;
      v5._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      uint64_t result = 91;
      break;
  }
  return result;
}

void _NSKVO1AdaptorDeliver(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v38[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if ((_NSIsNSArray() & 1) != 0
      || (_NSIsNSOrderedSet() & 1) != 0
      || (_NSIsNSArray() & 1) != 0
      || _NSIsNSOrderedSet())
    {
      if (_NSIsNSArray()) {
        Swift::String v16 = [[NSArrayChanges alloc] initWithArray:a5];
      }
      else {
        Swift::String v16 = [[NSOrderedSetChanges alloc] initWithOrderedSet:a5];
      }
      unint64_t v21 = (NSSetChanges *)v16;
      v37[0] = MEMORY[0x1E4F143A8];
      v37[1] = 3221225472;
      v37[2] = ___NSKVO1AdaptorDeliver_block_invoke;
      long long v37[3] = &unk_1E51F7680;
      v37[4] = a9;
      v37[5] = a8;
      v37[6] = v16;
      v37[7] = a7;
      [a6 enumerateIndexesUsingBlock:v37];
    }
    else if ((_NSIsNSSet() & 1) != 0 || _NSIsNSSet())
    {
      switch(a7)
      {
        case 1:
        case 4:
          unint64_t v26 = [NSSetChanges alloc];
          if (!a5) {
            a5 = [MEMORY[0x1E4F1CAD0] set];
          }
          unint64_t v21 = [(NSSetChanges *)v26 initWithSet:a5];
          [(NSSetChanges *)v21 setSet:a4];
          break;
        case 2:
          __int16 v27 = [NSSetChanges alloc];
          if (!a5) {
            a5 = [MEMORY[0x1E4F1CAD0] set];
          }
          unint64_t v21 = [(NSSetChanges *)v27 initWithSet:a5];
          [(NSSetChanges *)v21 unionSet:a4];
          break;
        case 3:
          Swift::String v28 = [NSSetChanges alloc];
          if (!a4) {
            a4 = [MEMORY[0x1E4F1CAD0] set];
          }
          unint64_t v21 = [(NSSetChanges *)v28 initWithSet:a4];
          [(NSSetChanges *)v21 minusSet:a5];
          break;
        default:
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      unint64_t v21 = 0;
    }
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    unint64_t v34 = ___NSKVO1AdaptorDeliver_block_invoke_2;
    __int16 v35 = &unk_1E51F76A8;
    uint64_t v36 = a2;
    v38[0] = 0;
    uint64_t StackObservedValueClassAndBoxSize = getStackObservedValueClassAndBoxSize(v38);
    MEMORY[0x1F4188790](StackObservedValueClassAndBoxSize);
    uint64_t v25 = objc_constructInstance(v24, (char *)v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    v25[6] = 1;
    *((void *)v25 + 1) = v21;
    *((void *)v25 + 2) = a1;
    v34((uint64_t)v33, (uint64_t)v25);
  }
  else
  {
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    unint64_t v30 = ___NSKVO1AdaptorDeliver_block_invoke_3;
    uint64_t v31 = &unk_1E51F76A8;
    uint64_t v32 = a2;
    v38[0] = 0;
    uint64_t v17 = getStackObservedValueClassAndBoxSize(v38);
    MEMORY[0x1F4188790](v17);
    unint64_t v20 = objc_constructInstance(v19, (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    v20[6] = 1;
    *((void *)v20 + 1) = a4;
    *((void *)v20 + 2) = a1;
    v30((uint64_t)v29, (uint64_t)v20);
  }
}

uint64_t getStackObservedValueClassAndBoxSize(void *a1)
{
  if (qword_1EB1ED2D8 != -1) {
    dispatch_once(&qword_1EB1ED2D8, &__block_literal_global_19);
  }
  *a1 = _MergedGlobals_102;
  return qword_1EB1ED2D0;
}

void specialized static Int._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_integerValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(void *)a2 = v3;
    *(unsigned char *)(a2 + 8) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136;
    v7._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 7630409;
    v8._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void type metadata completion function for Measurement<>.FormatStyle()
{
  type metadata accessor for FloatingPointFormatStyle<Double>?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for FloatingPointFormatStyle<Double>?()
{
  if (!lazy cache variable for type metadata for FloatingPointFormatStyle<Double>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    }
  }
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.Comparison(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  if ((v9 | v5) > 7
    || ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || ((v6 + v9 + ((v5 + 1) & ~v5)) & ~v9) + *(void *)(v8 + 64) > 0x18)
  {
    uint64_t v13 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v13 + (((v9 | v5) + 16) & ~(v9 | v5)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = ~v9;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v15 = ((unint64_t)a1 + v5 + 1) & ~v5;
    uint64_t v16 = ((unint64_t)a2 + v5 + 1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v15 + v10) & v14, (v16 + v10) & v14, v7);
  }
  return v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializePreformattedStringArray(_:depth:)(Swift::OpaquePointer _, Swift::Int depth)
{
  if (depth > 511)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 1;
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 40) = 0;
    *(unsigned char *)(v18 + 48) = 2;
    swift_willThrow();
    return;
  }
  uint64_t v3 = v2;
  *(void *)&long long __src = 91;
  *((void *)&__src + 1) = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v2 + 8) == 1)
  {
    *(void *)&long long __src = 10;
    *((void *)&__src + 1) = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
    swift_bridgeObjectRelease();
    if (__OFADD__(*(void *)v2, 1))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    ++*(void *)v2;
  }
  uint64_t v5 = *((void *)_._rawValue + 2);
  if (!v5) {
    goto LABEL_31;
  }
  unint64_t v20 = (char *)&__src + 1;
  swift_bridgeObjectRetain();
  uint64_t v6 = (unint64_t *)((char *)_._rawValue + 40);
  char v7 = 1;
  uint64_t v8 = 1 - v5;
  while (1)
  {
    uint64_t v10 = *(v6 - 1);
    unint64_t v9 = *v6;
    int v11 = *(unsigned __int8 *)(v3 + 8);
    swift_bridgeObjectRetain();
    if (v7)
    {
      if ((v11 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_9:
      JSONWriter.writeIndent()();
      goto LABEL_10;
    }
    if (v11)
    {
      long long __src = xmmword_182110460;
      Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&__src + 2);
    }
    else
    {
      long long __src = xmmword_182110450;
      Data._Representation.append(contentsOf:)(&__src, v20);
    }
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v3 + 8) == 1) {
      goto LABEL_9;
    }
LABEL_10:
    swift_bridgeObjectRetain();
    if ((v9 & 0x1000000000000000) != 0)
    {
      uint64_t v10 = static String._copying(_:)();
      unint64_t v12 = v16;
      swift_bridgeObjectRelease();
      if ((v12 & 0x2000000000000000) != 0)
      {
LABEL_21:
        uint64_t v17 = HIBYTE(v12) & 0xF;
        *(void *)&long long __src = v10;
        *((void *)&__src + 1) = v12 & 0xFFFFFFFFFFFFFFLL;
        if (!v17) {
          goto LABEL_24;
        }
        uint64_t v15 = (char *)&__src + v17;
        p_src = &__src;
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v12 = v9;
      if ((v9 & 0x2000000000000000) != 0) {
        goto LABEL_21;
      }
    }
    if ((v10 & 0x1000000000000000) != 0)
    {
      p_src = (long long *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = v10 & 0xFFFFFFFFFFFFLL;
      if ((v10 & 0xFFFFFFFFFFFFLL) == 0) {
        goto LABEL_24;
      }
LABEL_14:
      uint64_t v15 = (char *)p_src + v14;
LABEL_23:
      Data._Representation.append(contentsOf:)(p_src, v15);
      goto LABEL_24;
    }
    p_src = (long long *)_StringObject.sharedUTF8.getter();
    if (v14) {
      goto LABEL_14;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v8) {
      break;
    }
    char v7 = 0;
    v6 += 2;
    if (++v8 == 1)
    {
      __break(1u);
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRelease();
LABEL_31:
  if (*(unsigned char *)(v3 + 8) == 1)
  {
    *(void *)&long long __src = 10;
    *((void *)&__src + 1) = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
    swift_bridgeObjectRelease();
    if (!__OFSUB__(*(void *)v3, 1))
    {
      --*(void *)v3;
      JSONWriter.writeIndent()();
      goto LABEL_34;
    }
LABEL_36:
    __break(1u);
  }
  else
  {
LABEL_34:
    *(void *)&long long __src = 93;
    *((void *)&__src + 1) = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall JSONWriter.writeIndent()()
{
  uint64_t v1 = *v0;
  switch(*v0)
  {
    case 0:
      return;
    case 1:
      unint64_t v2 = 8224;
      unint64_t v3 = 0xE200000000000000;
      goto LABEL_16;
    case 2:
      unint64_t v2 = 538976288;
      unint64_t v3 = 0xE400000000000000;
      goto LABEL_16;
    case 3:
      unint64_t v2 = 0x202020202020;
      unint64_t v3 = 0xE600000000000000;
      goto LABEL_16;
    case 4:
      unint64_t v2 = 0x2020202020202020;
      unint64_t v3 = 0xE800000000000000;
      goto LABEL_16;
    case 5:
      unint64_t v2 = 0x2020202020202020;
      unint64_t v3 = 0xEA00000000002020;
      goto LABEL_16;
    case 6:
      unint64_t v2 = 0x2020202020202020;
      unint64_t v3 = 0xEC00000020202020;
      goto LABEL_16;
    case 7:
      unint64_t v2 = 0x2020202020202020;
      unint64_t v3 = 0xEE00202020202020;
      goto LABEL_16;
    case 8:
      unint64_t v2 = 0xD000000000000010;
      uint64_t v4 = "                ";
      goto LABEL_15;
    case 9:
      unint64_t v2 = 0xD000000000000012;
      uint64_t v4 = "                  ";
      goto LABEL_15;
    case 10:
      unint64_t v2 = 0xD000000000000014;
      uint64_t v4 = "                    ";
LABEL_15:
      unint64_t v3 = (unint64_t)(v4 - 32) | 0x8000000000000000;
LABEL_16:
      *(void *)&long long __src = v2;
      *((void *)&__src + 1) = v3;
      specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
      swift_bridgeObjectRelease();
      break;
    default:
      if (v1 < 0)
      {
        __break(1u);
      }
      else
      {
        do
        {
          long long __src = xmmword_182110480;
          Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&__src + 2);
          swift_bridgeObjectRelease();
          --v1;
        }
        while (v1);
      }
      break;
  }
}

void sub_181A1CD7C(_Unwind_Exception *exception_object)
{
}

objc_method *closure #1 in variable initialization expression of static NSKeyValueObservation.Helper.swizzler()
{
  unint64_t v0 = (NSString *)String._bridgeToObjectiveCImpl()();
  Class v1 = NSClassFromString(v0);
  swift_unknownObjectRelease();
  if (v1)
  {
    swift_getObjCClassMetadata();
    if (swift_dynamicCastTypeToObjCProtocolConditional()) {
      objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__noteProcessHasUsedKVOSwiftOverlay);
    }
  }
  type metadata accessor for NSKeyValueObservation.Helper();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  unint64_t result = class_getInstanceMethod(ObjCClassFromMetadata, sel__swizzle_me_observeValueForKeyPath_of_change_context_);
  if (result)
  {
    uint64_t v4 = result;
    Implementation = method_getImplementation(result);
    TypeEncoding = method_getTypeEncoding(v4);
    return (objc_method *)class_addMethod(ObjCClassFromMetadata, sel_observeValueForKeyPath_ofObject_change_context_, Implementation, TypeEncoding);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void URL.appending<A>(component:directoryHint:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1;
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int v11 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v12;
  uint64_t v15 = *(void **)v4;
  uint64_t v14 = *(void **)(v4 + 8);
  unint64_t v16 = *(void **)(v4 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v92 = v16;
    id v93 = v14;
    long long v94 = a4;
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v91 = v7;
    v17(v11, v7, a2);
    uint64_t v18 = String.init<A>(_:)();
    uint64_t v20 = v19;
    v21._uint64_t countAndFlagsBits = 47;
    v21._unint64_t object = (void *)0xE100000000000000;
    uint64_t v95 = v18;
    BOOL v22 = String.hasSuffix(_:)(v21);
    switch(v13)
    {
      case 2:
        BOOL v90 = v22;
        id v23 = v92;
        swift_retain();
        id v24 = v15;
        id v25 = v93;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          id v97 = v24;
          *(void *)&long long v98 = v25;
          *((void *)&v98 + 1) = v23;
          URL.scheme.getter();
          if (!v26)
          {
            swift_release();
            swift_release();

            goto LABEL_17;
          }
          uint64_t v89 = v20;
          Swift::String v27 = String.lowercased()();
          swift_bridgeObjectRelease();
          if (v27._countAndFlagsBits == 1701603686 && v27._object == (void *)0xE400000000000000)
          {
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
            uint64_t v20 = v89;
          }
          else
          {
            char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
            uint64_t v20 = v89;
            if ((v29 & 1) == 0) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          unsigned __int8 v28 = objc_msgSend(v24, sel_isFileURL);
          swift_release();
          swift_release();

          if ((v28 & 1) == 0) {
            goto LABEL_17;
          }
        }
        uint64_t v89 = v20;
        id v88 = v24;
        id v100 = v24;
        id v101 = v93;
        id v102 = v92;
        char v96 = 1;
        URL.appending<A>(component:directoryHint:)(&v97, v91, &v96, a2, a3);
        id v93 = v97;
        uint64_t v91 = *((void *)&v98 + 1);
        uint64_t v87 = v98;
        uint64_t v99 = (void *)*MEMORY[0x1E4F1C628];
        unint64_t v30 = v99;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
        uint64_t v31 = static _SetStorage.allocate(capacity:)();
        id v32 = v30;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        Hasher.init(_seed:)();
        id v92 = v32;
        String.hash(into:)();
        Swift::Int v33 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        uint64_t v34 = -1 << *(unsigned char *)(v31 + 32);
        unint64_t v35 = v33 & ~v34;
        unint64_t v36 = v35 >> 6;
        uint64_t v86 = v31 + 56;
        uint64_t v37 = *(void *)(v31 + 56 + 8 * (v35 >> 6));
        uint64_t i = 1 << v35;
        if (((1 << v35) & v37) == 0) {
          goto LABEL_26;
        }
        id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v31 + 48) + 8 * v35));
        uint64_t v41 = v40;
        if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)(v30) && v41 == v42)
        {
          swift_bridgeObjectRelease_n();
LABEL_21:
          id v49 = v92;

          uint64_t v7 = (uint64_t)v94;
          Swift::String v50 = v93;
          goto LABEL_30;
        }
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v48) {
          goto LABEL_21;
        }
        uint64_t v51 = ~v34;
        unint64_t v35 = (v35 + 1) & ~v34;
        unint64_t v36 = v35 >> 6;
        uint64_t v37 = *(void *)(v86 + 8 * (v35 >> 6));
        uint64_t i = 1 << v35;
        if ((v37 & (1 << v35)) != 0)
        {
          id v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v31 + 48) + 8 * v35));
          uint64_t v54 = v53;
          if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)(v30) && v54 == v55)
          {
            swift_bridgeObjectRelease_n();
            Swift::String v50 = v93;
LABEL_47:
            id v49 = v92;

LABEL_29:
            uint64_t v7 = (uint64_t)v94;
LABEL_30:
            type metadata accessor for NSURLResourceKey(0);
            swift_arrayDestroy();
            uint64_t v59 = swift_bridgeObjectRetain();
            specialized _copyCollectionToContiguousArray<A>(_:)(v59);
            swift_release();
            uint64_t v60 = _ContiguousArrayBuffer._asCocoaArray()();
            id v97 = 0;
            id v61 = objc_msgSend(v50, sel_resourceValuesForKeys_error_, v60, &v97);
            swift_unknownObjectRelease();
            id v62 = v97;
            if (v61)
            {
              Swift::String v63 = (void *)specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v61);
              id v64 = v62;

              id v97 = v63;
              *(void *)&long long v98 = v31;
              int v65 = URLResourceValues._get(_:)(v49);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v35 = (unint64_t)v88;
              if (v65 != 2)
              {
                id v66 = objc_msgSend(v88, sel__cfurl);
                String._bridgeToObjectiveCImpl()();
                id v67 = v66;
                swift_bridgeObjectRelease();
                CFStringRef v68 = (void *)_CFURLCreateCopyAppendingPathComponent();

                swift_unknownObjectRelease();
                if (!v68) {
                  goto LABEL_60;
                }
                URL.init(reference:)(v68, &v97);

LABEL_40:
                swift_release();
                swift_release();
                id v46 = v97;
                long long v47 = v98;
                goto LABEL_19;
              }
LABEL_38:
              id v70 = objc_msgSend( (id) v35, sel__cfurl);
              String._bridgeToObjectiveCImpl()();
              id v71 = v70;
              swift_bridgeObjectRelease();
              uint64_t v72 = (void *)_CFURLCreateCopyAppendingPathComponent();

              swift_unknownObjectRelease();
              if (!v72) {
                goto LABEL_59;
              }
              URL.init(reference:)(v72, &v97);

              goto LABEL_40;
            }
            if (v97)
            {
              id v69 = v97;
              swift_willThrow();
              swift_release();

              unint64_t v35 = (unint64_t)v88;
              goto LABEL_38;
            }
            unint64_t v35 = (unint64_t)v88;
            if (one-time initialization token for _nilObjCError == -1)
            {
LABEL_37:
              swift_willThrow();
              swift_release();
              goto LABEL_38;
            }
LABEL_57:
            swift_once();
            goto LABEL_37;
          }
          char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          Swift::String v50 = v93;
          if (v73) {
            goto LABEL_47;
          }
          unint64_t v35 = (v35 + 1) & v51;
          unint64_t v36 = v35 >> 6;
          uint64_t v37 = *(void *)(v86 + 8 * (v35 >> 6));
          uint64_t i = 1 << v35;
          if ((v37 & (1 << v35)) != 0)
          {
            id v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v31 + 48) + 8 * v35));
            uint64_t v76 = v75;
            if (v74 == static String._unconditionallyBridgeFromObjectiveC(_:)(v30) && v76 == v77)
            {
LABEL_45:
              swift_bridgeObjectRelease_n();
              goto LABEL_47;
            }
            char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v78) {
              goto LABEL_47;
            }
            unint64_t v35 = (v35 + 1) & v51;
            unint64_t v36 = v35 >> 6;
            uint64_t v37 = *(void *)(v86 + 8 * (v35 >> 6));
            for (uint64_t i = 1 << v35; (v37 & (1 << v35)) != 0; uint64_t i = 1 << v35)
            {
              id v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v31 + 48) + 8 * v35));
              uint64_t v81 = v80;
              if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)(v30) && v81 == v82) {
                goto LABEL_45;
              }
              char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v84) {
                goto LABEL_47;
              }
              unint64_t v35 = (v35 + 1) & v51;
              unint64_t v36 = v35 >> 6;
              uint64_t v37 = *(void *)(v86 + 8 * (v35 >> 6));
            }
          }
        }
        else
        {
LABEL_26:
          Swift::String v50 = v93;
        }
        *(void *)(v86 + 8 * v36) = i | v37;
        id v49 = v92;
        *(void *)(*(void *)(v31 + 48) + 8 * v35) = v92;
        uint64_t v56 = *(void *)(v31 + 16);
        BOOL v57 = __OFADD__(v56, 1);
        uint64_t v58 = v56 + 1;
        if (v57)
        {
          __break(1u);
          goto LABEL_57;
        }
        *(void *)(v31 + 16) = v58;
        goto LABEL_29;
      default:
LABEL_17:
        id v43 = objc_msgSend(v15, sel__cfurl);
        String._bridgeToObjectiveCImpl()();
        id v44 = v43;
        swift_bridgeObjectRelease();
        uint64_t v45 = (void *)_CFURLCreateCopyAppendingPathComponent();

        swift_unknownObjectRelease();
        if (v45)
        {
          URL.init(reference:)(v45, &v97);

          id v46 = v97;
          long long v47 = v98;
          uint64_t v7 = (uint64_t)v94;
LABEL_19:
          *(void *)uint64_t v7 = v46;
          *(_OWORD *)(v7 + 8) = v47;
        }
        else
        {
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
        }
        return;
    }
  }
  id v97 = v15;
  *(void *)&long long v98 = v14;
  *((void *)&v98 + 1) = v16;
  LOBYTE(v100) = v13;
  URL.appending<A>(path:directoryHint:encodingSlashes:)(v7, 1, a4);
}

void XMLPlistScanner.scanXMLPropertyList()()
{
  Class v1 = (unsigned __int8 *)v0[3];
  unint64_t v2 = v0[4];
  if ((unsigned __int8 *)v2 == v1)
  {
LABEL_18:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(unsigned char *)(v11 + 32) = 0;
LABEL_22:
    swift_willThrow();
    return;
  }
  while (1)
  {
    uint64_t v3 = *v0;
    uint64_t v4 = v0[1];
    uint64_t v5 = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(v1);
    v0[3] = (uint64_t)v5;
    if ((unsigned __int8 *)v2 == v5)
    {
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v12 = 0xD000000000000014;
      *(void *)(v12 + 8) = 0x80000001823AA280;
      *(void *)(v12 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      char v13 = 5;
LABEL_21:
      *(unsigned char *)(v12 + 32) = v13;
      goto LABEL_22;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v7 = *v5;
    v0[3] = (uint64_t)(v5 + 1);
    if (v7 != 60)
    {
      uint64_t v14 = BufferReader.lineNumber.getter();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v14;
      *(void *)(v12 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      char v13 = 3;
      goto LABEL_21;
    }
    uint64_t v8 = v5 + 2;
    if (v2 < (unint64_t)(v5 + 2)) {
      goto LABEL_18;
    }
    if ((uint64_t)&v6[-v3] < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      return;
    }
    if ((uint64_t)(v2 - (void)v6) < 0) {
      goto LABEL_31;
    }
    if ((uint64_t)(v3 + v4 - v2) < 0) {
      goto LABEL_32;
    }
    int v9 = *v6;
    if (v9 == 33)
    {
      if (v2 >= (unint64_t)(v5 + 4) && v5[2] == 45 && v5[3] == 45)
      {
        v0[3] = (uint64_t)(v5 + 4);
        XMLPlistScanner.skipXMLComment()();
      }
      else
      {
        v0[3] = (uint64_t)v8;
        XMLPlistScanner.skipDTD()();
      }
      goto LABEL_16;
    }
    if (v9 != 63) {
      break;
    }
    v0[3] = (uint64_t)v8;
    XMLPlistScanner.skipXMLProcessingInstruction()();
LABEL_16:
    if (v10) {
      return;
    }
    Class v1 = (unsigned __int8 *)v0[3];
    if ((unsigned __int8 *)v2 == v1) {
      goto LABEL_18;
    }
  }
  XMLPlistScanner.scanXMLElement()();
  if (!v15)
  {
    unint64_t v16 = v0[2];
    unint64_t v17 = v0[4];
    if (v17 < v16) {
      goto LABEL_33;
    }
    if ((uint64_t)(v16 - *v0) < 0) {
      goto LABEL_34;
    }
    unint64_t v18 = v17 - v16;
    if ((uint64_t)(v17 - v16) < 0) {
      goto LABEL_35;
    }
    if ((uint64_t)(*v0 + v0[1] - v17) < 0) {
      goto LABEL_36;
    }
    uint64_t v19 = v0[5];
    type metadata accessor for XMLPlistMap();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
    uint64_t v21 = swift_allocObject();
    *(_DWORD *)(v21 + 40) = 0;
    *(void *)(v21 + 16) = v16;
    *(void *)(v21 + 24) = v18;
    *(void *)(v21 + 32) = 0;
    *(void *)(v20 + 24) = v21;
    swift_bridgeObjectRetain();
  }
}

uint64_t type metadata accessor for XMLPlistMap()
{
  return self;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.skipDTD()()
{
  Class v1 = (_DWORD *)v0[3];
  unint64_t v2 = (unsigned __int8 *)v1 + 7;
  if (v0[4] < (unint64_t)v1 + 7) {
    goto LABEL_9;
  }
  unint64_t v3 = *v0 + v0[1];
  if (v3 < (unint64_t)v1)
  {
    __break(1u);
    goto LABEL_20;
  }
  if ((uint64_t)v1 - *v0 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((uint64_t)(v3 - (void)v1) < 0)
  {
LABEL_21:
    __break(1u);
    return;
  }
  if (*v1 == 1413697348 && *(_DWORD *)((char *)v1 + 3) == 1162893652)
  {
    v0[3] = v2;
    uint64_t v8 = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(v2);
    v0[3] = v8;
    int v9 = (unsigned __int8 *)v0[4];
    while (v8 != v9)
    {
      int v11 = *v8++;
      int v10 = v11;
      v0[3] = v8;
      if (v11 == 62) {
        return;
      }
      if (v10 == 91)
      {
        uint64_t v12 = BufferReader.lineNumber.getter();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(void *)uint64_t v6 = 91;
        *(void *)(v6 + 8) = v12;
        *(void *)(v6 + 16) = 0xD000000000000011;
        *(void *)(v6 + 24) = 0x80000001823AA2F0;
        char v7 = 3;
        goto LABEL_10;
      }
    }
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v13 = 0xD000000000000011;
    *(void *)(v13 + 8) = 0x80000001823AA2F0;
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    *(unsigned char *)(v13 + 32) = 0;
    goto LABEL_11;
  }
LABEL_9:
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  BufferReader.lineNumber.getter();
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(void *)uint64_t v6 = 0xD000000000000016;
  *(void *)(v6 + 8) = 0x80000001823AA2D0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  char v7 = 5;
LABEL_10:
  *(unsigned char *)(v6 + 32) = v7;
LABEL_11:
  swift_willThrow();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.skipXMLProcessingInstruction()()
{
  unint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  if (v1 >= v2 - 2)
  {
LABEL_8:
    v0[3] = v1;
    _StringGuts.grow(_:)(57);
    v8._unint64_t object = (void *)0x80000001823AA310;
    v8._uint64_t countAndFlagsBits = 0xD000000000000037;
    String.append(_:)(v8);
    BufferReader.lineNumber.getter();
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0xE000000000000000;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(unsigned char *)(v10 + 32) = 0;
    swift_willThrow();
  }
  else
  {
    unint64_t v3 = *v0 + v0[1];
    uint64_t v4 = v2 - v1 - 2;
    unint64_t v5 = v3 - v1;
    unint64_t v6 = v1 - *v0;
    char v7 = (_WORD *)v0[3];
    while (v3 >= (unint64_t)v7)
    {
      if ((v6 & 0x8000000000000000) != 0) {
        goto LABEL_11;
      }
      if ((v5 & 0x8000000000000000) != 0) {
        goto LABEL_12;
      }
      if (*v7 == 15935)
      {
        v0[3] = v7 + 1;
        return;
      }
      char v7 = (_WORD *)((char *)v7 + 1);
      v0[3] = v7;
      --v5;
      ++v6;
      if (!--v4) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanXMLElement()()
{
  unint64_t v1 = v0;
  LOBYTE(v2) = XMLPlistScanner.peekXMLElement()()._0;
  if (!v3)
  {
    Foundation::XMLPlistTag v4 = (char)v2;
    switch((char)v2)
    {
      case 1:
        if ((v2 & 0x100) != 0)
        {
          long long v26 = v0[1];
          v31[0] = *v0;
          v31[1] = v26;
          uint64_t v32 = *((void *)v0 + 4);
          XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, v31);
        }
        else
        {
          XMLPlistScanner.scanArray()();
        }
        break;
      case 2:
        if ((v2 & 0x100) != 0)
        {
          long long v27 = v0[1];
          v33[0] = *v0;
          v33[1] = v27;
          uint64_t v34 = *((void *)v0 + 4);
          XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(9u, v33);
        }
        else
        {
          XMLPlistScanner.scanDict()();
        }
        break;
      case 3:
      case 4:
        if ((v2 & 0x100) != 0)
        {
          long long v24 = v0[1];
          v35[0] = *v0;
          v35[1] = v24;
          uint64_t v36 = *((void *)v0 + 4);
          if (v2 == 3) {
            unsigned __int8 v25 = 13;
          }
          else {
            unsigned __int8 v25 = 12;
          }
          XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v25, 0, 0, v35);
        }
        else
        {
          XMLPlistScanner.scanString(asKey:)(v2 == 3);
          if (!v12) {
            XMLPlistScanner.checkForCloseTag(_:)(v4);
          }
        }
        break;
      case 5:
      case 6:
      case 7:
      case 8:
        if ((v2 & 0x100) != 0)
        {
          long long v21 = v0[1];
          long long v37 = *v0;
          long long v38 = v21;
          uint64_t v39 = *((void *)v0 + 4);
          uint64_t v22 = BufferReader.lineNumber.getter();
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(void *)uint64_t v23 = v4;
          goto LABEL_28;
        }
        uint64_t v5 = XMLPlistScanner.scanThroughCloseTag(_:)(v2);
        uint64_t v7 = v6;
        unsigned __int8 v8 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v4);
        uint64_t v9 = *((void *)v1 + 1);
        uint64_t v10 = v5 - *(void *)v1;
        uint64_t v11 = *((void *)v1 + 4);
        v40[0] = *(void *)v1;
        v40[1] = v9;
        long long v41 = v1[1];
        uint64_t v42 = v11;
        XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v8, v7 - v5, v10, v40);
        break;
      case 9:
      case 10:
        if ((v2 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v2), !v13))
        {
          unsigned __int8 v14 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v4);
          long long v15 = v0[1];
          v43[0] = *v0;
          v43[1] = v15;
          uint64_t v44 = *((void *)v0 + 4);
          unint64_t v16 = (void *)v0 + 5;
          XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v43);
          unint64_t v17 = (void *)*((void *)v1 + 5);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
          }
          unint64_t v18 = v17[2];
          unint64_t v19 = v17[3];
          unint64_t v20 = v18 + 1;
          if (v18 >= v19 >> 1)
          {
            unsigned __int8 v28 = v17;
            unint64_t v29 = v17[2];
            unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v18 + 1, 1, v28);
            unint64_t v18 = v29;
            unint64_t v17 = v30;
          }
          _OWORD v17[2] = v20;
          v17[v18 + 4] = v14;
          *unint64_t v16 = v17;
        }
        break;
      default:
        if ((v2 & 0x100) != 0)
        {
          uint64_t v22 = BufferReader.lineNumber.getter();
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(void *)uint64_t v23 = 0;
LABEL_28:
          *(void *)(v23 + 16) = 0;
          *(void *)(v23 + 24) = 0;
          *(void *)(v23 + 8) = v22;
          *(unsigned char *)(v23 + 32) = 2;
          swift_willThrow();
        }
        else
        {
          XMLPlistScanner.scanPlist()();
        }
        break;
    }
  }
}

uint64_t type metadata completion function for PredicateExpressions.OptionalFlatMap()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

__CFString *one-time initialization function for _catInfoKeys()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSFileAttributeKey>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18210C690;
  *(void *)(v0 + 32) = @"NSFileHFSCreatorCode";
  *(void *)(v0 + 40) = @"NSFileHFSTypeCode";
  *(void *)(v0 + 48) = @"NSFileBusy";
  *(void *)(v0 + 56) = @"NSFileExtensionHidden";
  *(void *)(v0 + 64) = @"NSFileCreationDate";
  static _FileManagerImpl._catInfoKeys = (_UNKNOWN *)v0;
  unint64_t v1 = @"NSFileHFSCreatorCode";
  unint64_t v2 = @"NSFileHFSTypeCode";
  uint64_t v3 = @"NSFileBusy";
  Foundation::XMLPlistTag v4 = @"NSFileExtensionHidden";

  return @"NSFileCreationDate";
}

uint64_t _NSSwiftCalendar.nextDate(after:matching:options:)@<X0>(uint64_t *a1@<X0>, const void *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if ((a3 & 2) != 0) {
    char v9 = 3;
  }
  else {
    char v9 = 0;
  }
  if ((a3 & 0x100) != 0) {
    char v10 = 2;
  }
  else {
    char v10 = v9;
  }
  if ((a3 & 0x200) != 0) {
    char v11 = 1;
  }
  else {
    char v11 = v10;
  }
  if ((a3 & 0x400) != 0) {
    char v12 = 0;
  }
  else {
    char v12 = v11;
  }
  uint64_t v13 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  unsigned __int8 v14 = v13 + 4;
  long long v15 = v13 + 8;
  os_unfair_lock_lock(v13 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v14, &v23);
  os_unfair_lock_unlock(v15);
  long long v22 = v23;
  uint64_t v21 = v8;
  memcpy(__dst, a2, 0x11AuLL);
  char v19 = v12;
  BOOL v18 = (a3 & 0x3000) == 0x2000;
  BOOL v17 = (a3 & 4) != 0;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(&v21, __dst, &v19, (char *)&v18, (char *)&v17, a4);

  return swift_unknownObjectRelease();
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v46 = a5;
  uint64_t v40 = a6;
  uint64_t v39 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  long long v41 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v42 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v45 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[0] = v17;
  v47[1] = v18;
  v47[2] = v19;
  uint64_t v48 = v20;
  uint64_t v49 = v21;
  uint64_t v50 = v22;
  uint64_t v51 = v23;
  uint64_t v24 = type metadata accessor for PredicateExpressions.DictionaryKeyDefaultValueSubscript();
  uint64_t v38 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  long long v26 = (char *)&v35 - v25;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v27 = (uint64_t)v52;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v27) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v36 = a4;
  long long v37 = v26;
  id v52 = a1;
  uint64_t v28 = v44;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
  unint64_t v29 = v45;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  unint64_t v30 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  uint64_t v46 = a2;
  v30(v37, v29, a2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
  uint64_t v31 = v42;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v37[*(int *)(v24 + 76)], v31, a3);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v32 = v37;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v37[*(int *)(v24 + 80)], v41, v36);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  uint64_t v33 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v40, v32, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v32, v24);
}

uint64_t specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v13;
    *(void *)a1 = v6;
    swift_release();
  }
  uint64_t v8 = *(void **)(*(void *)a1 + 16);
  if (a3) {
    char v9 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    char v9 = 0;
  }
  uint64_t v10 = String._bridgeToObjectiveCImpl()();
  id v11 = v8;
  objc_msgSend(v11, sel_setValue_forHTTPHeaderField_, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v10;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v10;
    *(void *)a1 = v6;
    swift_release();
  }
  uint64_t v8 = *(void **)(*(void *)a1 + 16);
  objc_msgSend(v8, sel_setHTTPMethod_, String._bridgeToObjectiveCImpl()());
  if (a3) {
    swift_bridgeObjectRelease();
  }

  return swift_unknownObjectRelease();
}

uint64_t PredicateExpressions.SequenceContains.element.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t ___generateElements_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = [MEMORY[0x1E4F1CA98] null];

  return [a3 isEqual:v4];
}

uint64_t _LocaleICU.temperatureUnit.getter@<X0>(char *a1@<X8>)
{
  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v7);
  outlined init with take of LocalePreferences?((uint64_t)v7, (uint64_t)v8);
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v8);
  if (result == 1 || v9 == 2)
  {
    uint64_t v4 = *(os_unfair_lock_s **)(v1 + 176);
    swift_retain();
    os_unfair_lock_lock(v4 + 140);
    partial apply for closure #1 in _LocaleICU.temperatureUnit.getter((uint64_t)&v4[4], &v6);
    os_unfair_lock_unlock(v4 + 140);
    uint64_t result = swift_release();
    char v5 = v6;
  }
  else
  {
    char v5 = v9 & 1;
  }
  *a1 = v5;
  return result;
}

uint64_t partial apply for closure #1 in _LocaleICU.temperatureUnit.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in _LocaleICU.temperatureUnit.getter(a1, a2);
}

uint64_t closure #1 in _LocaleICU.temperatureUnit.getter@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(result + 320);
  if (v3 != 2)
  {
    char v6 = v3 & 1;
    goto LABEL_5;
  }
  uint64_t v4 = result;
  String.utf8CString.getter();
  int UnitsForUsage = uameasfmt_getUnitsForUsage();
  uint64_t result = swift_release();
  if (UnitsForUsage >= 1)
  {
    char v6 = 1;
    *(unsigned char *)(v4 + 320) = 1;
LABEL_5:
    *a2 = v6;
    return result;
  }
  *(unsigned char *)(v4 + 320) = 1;
  *a2 = 1;
  return result;
}

uint64_t base witness table accessor for Cancellable in NSTimer.TimerPublisher.Inner<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in NSTimer.TimerPublisher.Inner<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for PredicateExpressions.Comparison()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v6 = v5;
  if (*v5) {
    uint64_t v10 = v5[2];
  }
  else {
    uint64_t v10 = 0;
  }
  ++v5[3];
  specialized Rope.builder<A>(removing:in:)(a1, a2, a3, (uint64_t)&v103);
  swift_unknownObjectRelease();
  uint64_t v11 = swift_retain();
  specialized Rope.Builder.insertBeforeTip<A>(_:)(v11, a4, a5);
  uint64_t v14 = v107;
  uint64_t v13 = v108;
  uint64_t v15 = v109;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v107 = 0;
  if (v13)
  {
    if (v14)
    {
      long long v16 = v105;
      uint64_t v17 = v106;
      uint64_t v106 = 0;
      long long v105 = 0uLL;
      if (*((void *)&v16 + 1))
      {
        specialized Rope.Builder._appendNow(_:)(v16, *((uint64_t *)&v16 + 1), v17);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(v105, *((uint64_t *)&v105 + 1));
      }
      *(void *)&long long v105 = v14;
      *((void *)&v105 + 1) = v13;
      uint64_t v106 = v15;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  long long v18 = v105;
  uint64_t v19 = v106;
  uint64_t v106 = 0;
  long long v105 = 0uLL;
  if (*((void *)&v18 + 1)) {
    v12.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v18, *((uint64_t *)&v18 + 1), v19);
  }
LABEL_20:
  uint64_t v27 = v110;
  while (v27[2])
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v21 = v27[2];
      if (!v21) {
        goto LABEL_91;
      }
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      uint64_t v27 = (void *)result;
      uint64_t v21 = *(void *)(result + 16);
      if (!v21)
      {
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
    }
    uint64_t v22 = v21 - 1;
    uint64_t v23 = &v27[4 * v22];
    uint64_t v24 = v23[4];
    uint64_t v25 = v23[5];
    uint64_t v26 = v23[6];
    void v27[2] = v22;
    uint64_t v110 = v27;
    if (v24)
    {
      specialized Rope.Builder._insertBeforeTip(_:)(v24, v25, v26);
      goto LABEL_20;
    }
  }
  uint64_t v94 = v10;
  long long v28 = v105;
  uint64_t v29 = v106;
  long long v105 = 0uLL;
  uint64_t v106 = 0;
  if (*((void *)&v28 + 1)) {
    v12.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v28, *((uint64_t *)&v28 + 1), v29);
  }
  uint64_t v30 = *((void *)&v103 + 1);
  uint64_t v32 = *((void *)&v104 + 1);
  uint64_t v31 = v104;
  *(void *)&long long v97 = 0;
  MEMORY[0x185309530](&v97, 8, v29, v12);
  unint64_t v33 = v97;
  for (i = (void *)v103; i[2]; unint64_t v33 = v44)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v35 = i[2];
      if (!v35) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew()(i);
      uint64_t v35 = i[2];
      if (!v35)
      {
LABEL_29:
        __break(1u);
        break;
      }
    }
    uint64_t v36 = v35 - 1;
    long long v37 = &i[4 * v36];
    uint64_t v38 = v37[4];
    uint64_t v39 = v37[5];
    uint64_t v40 = v37[6];
    uint64_t v41 = v37[7];
    i[2] = v36;
    uint64_t v30 = specialized static Rope.join(_:_:)(v38, v39, v40, v41, v30, v31, v32);
    uint64_t v31 = v42;
    uint64_t v32 = v43;
  }
  *(void *)&long long v103 = i;
  *char v6 = v30;
  v6[1] = v31;
  v6[2] = v32;
  v6[3] = v33;
  char v96 = (unint64_t *)v6;
  long long v45 = v105;
  uint64_t v46 = v107;
  uint64_t v47 = v108;
  swift_bridgeObjectRelease();
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v45, *((uint64_t *)&v45 + 1));
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v46, v47);
  uint64_t result = swift_bridgeObjectRelease();
  if (v30) {
    uint64_t v48 = v32;
  }
  else {
    uint64_t v48 = 0;
  }
  uint64_t v49 = v48 - v94;
  if (__OFSUB__(v48, v94))
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t v50 = a2 + v49;
  if (__OFADD__(a2, v49))
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (v50 >= 1 && v50 < v48)
  {
    AttributedString._InternalRuns._exactIndex(atUTF8Offset:)(a2 + v49, v30, v31, v32, v33, (unint64_t *)&v111);
    long long v116 = v111;
    uint64_t v117 = v112;
    uint64_t result = outlined init with take of LocalePreferences?((uint64_t)&v117, (uint64_t)v118, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    unint64_t v52 = *((void *)&v116 + 1);
    long long v113 = v116;
    uint64_t v114 = v117;
    if ((void)v116 == v33)
    {
      outlined init with take of LocalePreferences?((uint64_t)v118, (uint64_t)&v119, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
      if (v119)
      {
        uint64_t v53 = v119 + 24 * ((v52 >> ((4 * *(unsigned char *)(v119 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v54 = *(void *)(v53 + 32);
        uint64_t v55 = *(void *)(v53 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v30) {
          goto LABEL_43;
        }
      }
      else
      {
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v52, v30);
        uint64_t v54 = v62;
        uint64_t v55 = v63;
        swift_unknownObjectRelease();
        if (v30)
        {
LABEL_43:
          unsigned int v56 = *(unsigned __int8 *)(v30 + 18);
          swift_unknownObjectRetain();
          if (v52 > v56)
          {
LABEL_44:
            outlined init with take of LocalePreferences?((uint64_t)v118, (uint64_t)&v120, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
            if (v120 && (char v57 = (4 * *(unsigned char *)(v120 + 18) + 8) & 0x3C, ((v52 >> v57) & 0xF) != 0))
            {
              unint64_t v52 = ((((v52 >> v57) & 0xF) - 1) << v57) | ((-15 << v57) - 1) & v52;
              *((void *)&v113 + 1) = v52;
              uint64_t result = swift_unknownObjectRelease();
            }
            else
            {
              swift_unknownObjectRetain();
              char v58 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v113, v30);
              uint64_t result = swift_unknownObjectRelease_n();
              if ((v58 & 1) == 0)
              {
LABEL_98:
                __break(1u);
                goto LABEL_99;
              }
              unint64_t v52 = *((void *)&v113 + 1);
            }
            if ((void)v113 != v33) {
              goto LABEL_96;
            }
            if (v114)
            {
              uint64_t v59 = v114 + 24 * ((v52 >> ((4 * *(unsigned char *)(v114 + 18) + 8) & 0x3C)) & 0xF);
              uint64_t v60 = *(void *)(v59 + 32);
              uint64_t v61 = *(void *)(v59 + 40);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              goto LABEL_56;
            }
LABEL_55:
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v52, v30);
            uint64_t v60 = v64;
            uint64_t v61 = v65;
            swift_unknownObjectRelease();
LABEL_56:
            if (specialized static Dictionary<>.== infix(_:_:)(v60, v54))
            {
              char v66 = specialized static Set.== infix(_:_:)(v61, v55);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v66 & 1) == 0) {
                goto LABEL_67;
              }
              unint64_t v67 = specialized Rope._remove(at:)((uint64_t)&v103, v33, v52);
              unint64_t v68 = *v96;
              unint64_t v69 = v96[3];
              if (v67 < specialized Rope._endPath.getter(*v96) && *(unsigned char *)(v68 + 18))
              {
                uint64_t v70 = (v67 >> ((4 * *(unsigned char *)(v68 + 18) + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v68 + 24, v70, v67);
                swift_unknownObjectRelease();
              }
              uint64_t v71 = v103;
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if (!v68) {
                goto LABEL_101;
              }
              uint64_t result = specialized Rope._Node._prepareModify(at:)(v67, (uint64_t)&v103);
              long long v97 = v103;
              long long v98 = v104;
              long long v99 = v105;
              if (__OFADD__(*((void *)&v103 + 1), v71))
              {
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
              *((void *)&v97 + 1) = *((void *)&v103 + 1) + v71;
              v96[3] = v69 + 1;
              if (!*v96)
              {
LABEL_102:
                __break(1u);
                return result;
              }
              specialized Rope._Node._finalizeModify(_:)(&v101, &v97);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            goto LABEL_67;
          }
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
      }
      if (v52) {
        goto LABEL_44;
      }
      goto LABEL_54;
    }
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
LABEL_67:
  uint64_t result = a1;
  if (a1 < 1 || v50 <= a1) {
    return result;
  }
  uint64_t v72 = *v96;
  unint64_t v73 = v96[3];
  AttributedString._InternalRuns._exactIndex(atUTF8Offset:)(a1, *v96, v96[1], v96[2], v73, (unint64_t *)&v97);
  long long v113 = v97;
  uint64_t v114 = v98;
  uint64_t result = outlined init with take of LocalePreferences?((uint64_t)&v114, (uint64_t)v115, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  unint64_t v74 = *((void *)&v113 + 1);
  long long v101 = v113;
  uint64_t v102 = v114;
  if ((void)v113 != v73) {
    goto LABEL_95;
  }
  outlined init with take of LocalePreferences?((uint64_t)v115, (uint64_t)&v121, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v121)
  {
    uint64_t v75 = (void *)(v121 + 24 * ((v74 >> ((4 * *(unsigned char *)(v121 + 18) + 8) & 0x3C)) & 0xF));
    unint64_t v77 = v75[3];
    uint64_t v76 = v75[4];
    uint64_t v78 = v75[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v72) {
      goto LABEL_72;
    }
LABEL_82:
    if (v74) {
      goto LABEL_73;
    }
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  swift_unknownObjectRetain();
  unint64_t v77 = specialized Rope._Node.subscript.getter(v74, v72);
  uint64_t v76 = v85;
  uint64_t v78 = v86;
  swift_unknownObjectRelease();
  if (!v72) {
    goto LABEL_82;
  }
LABEL_72:
  unint64_t v79 = *(unsigned __int8 *)(v72 + 18);
  swift_unknownObjectRetain();
  if (v79 >= v74) {
    goto LABEL_83;
  }
LABEL_73:
  outlined init with take of LocalePreferences?((uint64_t)v115, (uint64_t)&v122, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v122 && (char v80 = (4 * *(unsigned char *)(v122 + 18) + 8) & 0x3C, ((v74 >> v80) & 0xF) != 0))
  {
    unint64_t v74 = ((((v74 >> v80) & 0xF) - 1) << v80) | ((-15 << v80) - 1) & v74;
    *((void *)&v101 + 1) = v74;
    uint64_t result = swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    char v81 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v101, v72);
    uint64_t result = swift_unknownObjectRelease_n();
    if ((v81 & 1) == 0)
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    unint64_t v74 = *((void *)&v101 + 1);
  }
  if ((void)v101 != v73) {
    goto LABEL_97;
  }
  if (v102)
  {
    uint64_t v82 = v102 + 24 * ((v74 >> ((4 * *(unsigned char *)(v102 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v83 = *(void *)(v82 + 32);
    uint64_t v84 = *(void *)(v82 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_85;
  }
LABEL_84:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v74, v72);
  uint64_t v83 = v87;
  uint64_t v84 = v88;
  swift_unknownObjectRelease();
LABEL_85:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (specialized static Dictionary<>.== infix(_:_:)(v83, v76))
  {
    char v89 = specialized static Set.== infix(_:_:)(v84, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v89)
    {
      specialized Rope.update<A>(at:by:)(&v101, v96, v77);
      uint64_t v90 = *v96;
      uint64_t v91 = v96[1];
      uint64_t v92 = v96[2];
      uint64_t v93 = v96[3];
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v101, v90, v91, v92, v93);
      swift_unknownObjectRelease();
      specialized Rope._remove(at:)((uint64_t)v100, v101, *((unint64_t *)&v101 + 1));
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease_n();
  }
}

{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  long long v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *i;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  long long v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  char v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  char v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  uint64_t v144;
  long long v145;
  long long v146;
  long long v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  long long v151;
  long long v152;
  long long v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;

  char v6 = v5;
  __n128 v12 = v5[2];
  if (!*v5) {
    __n128 v12 = 0;
  }
  uint64_t v141 = v12;
  ++v5[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope.builder<A>(removing:in:)(a1, a2, v13, (uint64_t)&v151);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope.Builder.insertBeforeTip<A>(_:)(a3, a4, a5);
  uint64_t v15 = v155;
  long long v16 = v156;
  uint64_t v17 = v157;
  Swift::Bool v156 = 0;
  uint64_t v157 = 0;
  Swift::String v155 = 0;
  if (v16)
  {
    if (v15)
    {
      long long v18 = v153;
      uint64_t v19 = v154;
      uint64_t v154 = 0;
      unint64_t v153 = 0uLL;
      if (*((void *)&v18 + 1))
      {
        specialized Rope.Builder._appendNow(_:)(v18, *((uint64_t *)&v18 + 1), v19);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(v153, *((uint64_t *)&v153 + 1));
      }
      *(void *)&unint64_t v153 = v15;
      *((void *)&v153 + 1) = v16;
      uint64_t v154 = v17;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v20 = v153;
  uint64_t v21 = v154;
  uint64_t v154 = 0;
  unint64_t v153 = 0uLL;
  if (*((void *)&v20 + 1)) {
    v14.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v20, *((uint64_t *)&v20 + 1), v21);
  }
LABEL_19:
  uint64_t v29 = v158;
  while (v29[2])
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v23 = v29[2];
      if (!v23) {
        goto LABEL_170;
      }
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
      uint64_t v29 = (void *)result;
      uint64_t v23 = *(void *)(result + 16);
      if (!v23)
      {
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
        goto LABEL_173;
      }
    }
    uint64_t v24 = v23 - 1;
    uint64_t v25 = &v29[4 * v24];
    uint64_t v26 = v25[4];
    uint64_t v27 = v25[5];
    long long v28 = v25[6];
    void v29[2] = v24;
    uint64_t v158 = v29;
    if (v26)
    {
      specialized Rope.Builder._insertBeforeTip(_:)(v26, v27, v28);
      goto LABEL_19;
    }
  }
  uint64_t v140 = a2;
  char v139 = a1;
  uint64_t v30 = v153;
  uint64_t v31 = v154;
  unint64_t v153 = 0uLL;
  uint64_t v154 = 0;
  if (*((void *)&v30 + 1)) {
    v14.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v30, *((uint64_t *)&v30 + 1), v31);
  }
  uint64_t v32 = *((void *)&v151 + 1);
  uint64_t v34 = *((void *)&v152 + 1);
  unint64_t v33 = v152;
  *(void *)&uint64_t v145 = 0;
  MEMORY[0x185309530](&v145, 8, v31, v14);
  uint64_t v35 = v145;
  for (i = (void *)v151; i[2]; uint64_t v35 = v46)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      long long v37 = i[2];
      if (!v37) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew()(i);
      long long v37 = i[2];
      if (!v37)
      {
LABEL_28:
        __break(1u);
        break;
      }
    }
    uint64_t v38 = v37 - 1;
    uint64_t v39 = &i[4 * v38];
    uint64_t v40 = v39[4];
    uint64_t v41 = v39[5];
    uint64_t v42 = v39[6];
    uint64_t v43 = v39[7];
    i[2] = v38;
    uint64_t v32 = specialized static Rope.join(_:_:)(v40, v41, v42, v43, v32, v33, v34);
    unint64_t v33 = v44;
    uint64_t v34 = v45;
  }
  *(void *)&unint64_t v151 = i;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *char v6 = v32;
  v6[1] = v33;
  v6[2] = v34;
  v6[3] = v35;
  unint64_t v143 = (unint64_t *)v6;
  uint64_t v47 = v153;
  uint64_t v48 = v155;
  uint64_t v49 = v156;
  swift_bridgeObjectRelease();
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v47, *((uint64_t *)&v47 + 1));
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v48, v49);
  uint64_t result = swift_bridgeObjectRelease();
  if (v32) {
    uint64_t v50 = v34;
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = v50 - v141;
  if (__OFSUB__(v50, v141)) {
    goto LABEL_181;
  }
  unint64_t v52 = v140 + v51;
  if (__OFADD__(v140, v51))
  {
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }
  if (v52 < 1 || v52 >= v50) {
    goto LABEL_87;
  }
  if (!v32 || !*(_WORD *)(v32 + 16))
  {
    char v66 = swift_unknownObjectRetain();
    unint64_t v67 = specialized Rope._endPath.getter(v66);
    uint64_t result = swift_unknownObjectRelease();
    char v58 = 0;
    uint64_t v55 = 0;
    if (!v32) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  uint64_t v54 = *(unsigned __int8 *)(v32 + 18);
  uint64_t v142 = v140 + v51;
  if (*(unsigned char *)(v32 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v55 = v52;
    unsigned int v56 = v32;
    while (1)
    {
      uint64_t v59 = *(unsigned __int16 *)(v56 + 16);
      if (!*(_WORD *)(v56 + 16)) {
        goto LABEL_44;
      }
      uint64_t v60 = *(void *)(v56 + 40);
      uint64_t v61 = __OFSUB__(v55, v60);
      uint64_t v62 = v55 - v60;
      if (v61) {
        goto LABEL_176;
      }
      if (__OFADD__(v62, 1))
      {
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
        goto LABEL_182;
      }
      if (v62 + 1 >= 1) {
        break;
      }
      uint64_t v59 = 0;
LABEL_45:
      char v57 = (4 * *(unsigned char *)(v56 + 18) + 8) & 0x3C;
      uint64_t v54 = ((-15 << v57) - 1) & v54 | (v59 << v57);
      char v58 = *(void *)(v56 + 24 + 24 * v59);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unsigned int v56 = v58;
      if (!*(unsigned char *)(v58 + 18)) {
        goto LABEL_138;
      }
    }
    if (v59 != 1)
    {
      uint64_t v63 = (uint64_t *)(v56 + 64);
      uint64_t v64 = 1;
      while (1)
      {
        uint64_t v65 = *v63;
        v63 += 3;
        uint64_t v55 = v62 - v65;
        if (__OFSUB__(v62, v65)) {
          goto LABEL_171;
        }
        if (__OFADD__(v55, 1)) {
          goto LABEL_172;
        }
        if (v55 + 1 < 1) {
          break;
        }
        ++v64;
        uint64_t v62 = v55;
        if (v59 == v64) {
          goto LABEL_44;
        }
      }
      uint64_t v59 = v64;
      uint64_t v55 = v62;
      goto LABEL_45;
    }
    uint64_t v55 = v62;
LABEL_44:
    if (v55) {
      goto LABEL_175;
    }
    goto LABEL_45;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v55 = v52;
  char v58 = v32;
LABEL_138:
  Foundation::Date v127 = *(unsigned __int16 *)(v58 + 16);
  if (!*(_WORD *)(v58 + 16)) {
    goto LABEL_157;
  }
  uint64_t v128 = *(void *)(v58 + 24);
  uint64_t v61 = __OFSUB__(v55, v128);
  uint64_t v129 = v55 - v128;
  if (v61)
  {
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }
  if (__OFADD__(v129, 1))
  {
LABEL_197:
    __break(1u);
    goto LABEL_198;
  }
  if (v129 + 1 < 1)
  {
    Foundation::Date v127 = 0;
  }
  else
  {
    if (v127 == 1)
    {
      uint64_t v55 = v129;
LABEL_157:
      if (v55)
      {
LABEL_195:
        __break(1u);
        goto LABEL_196;
      }
      goto LABEL_158;
    }
    Swift::Int v133 = (uint64_t *)(v58 + 48);
    uint64_t v134 = 1;
    while (1)
    {
      Foundation::XMLPlistTag v135 = *v133;
      v133 += 3;
      uint64_t v55 = v129 - v135;
      if (__OFSUB__(v129, v135)) {
        goto LABEL_183;
      }
      if (__OFADD__(v55, 1)) {
        goto LABEL_184;
      }
      if (v55 + 1 < 1) {
        break;
      }
      ++v134;
      uint64_t v129 = v55;
      if (v127 == v134) {
        goto LABEL_157;
      }
    }
    Foundation::Date v127 = v134;
    uint64_t v55 = v129;
  }
LABEL_158:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v67 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
  unint64_t v52 = v142;
LABEL_60:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v67, v58, v32, v33);
  uint64_t result = swift_unknownObjectRelease();
LABEL_61:
  if (v55)
  {
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  long long v148 = v35;
  uint64_t v149 = v67;
  unint64_t v150 = v58;
  if (v58)
  {
    unint64_t v68 = v58 + 24 * ((v67 >> ((4 * *(unsigned char *)(v58 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v69 = *(void *)(v68 + 32);
    uint64_t v70 = *(void *)(v68 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32) {
      goto LABEL_64;
    }
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v67, v32);
    unint64_t v69 = v77;
    uint64_t v70 = v78;
    swift_unknownObjectRelease();
    if (v32)
    {
LABEL_64:
      uint64_t v71 = *(unsigned __int8 *)(v32 + 18);
      swift_unknownObjectRetain();
      if (v67 > v71) {
        goto LABEL_65;
      }
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
  }
  if (!v67) {
    goto LABEL_74;
  }
LABEL_65:
  if (v58)
  {
    uint64_t v72 = (4 * *(unsigned char *)(v58 + 18) + 8) & 0x3C;
    if (((v67 >> v72) & 0xF) != 0)
    {
      unint64_t v67 = ((((v67 >> v72) & 0xF) - 1) << v72) | ((-15 << v72) - 1) & v67;
      uint64_t v149 = v67;
      swift_unknownObjectRelease();
LABEL_71:
      unint64_t v74 = v58 + 24 * ((v67 >> ((4 * *(unsigned char *)(v58 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v75 = *(void *)(v74 + 32);
      uint64_t v76 = *(void *)(v74 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_76;
    }
  }
  swift_unknownObjectRetain();
  unint64_t v73 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v148, v32);
  uint64_t result = swift_unknownObjectRelease_n();
  if ((v73 & 1) == 0)
  {
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
    goto LABEL_195;
  }
  if (v148 != v35) {
    goto LABEL_187;
  }
  unint64_t v67 = v149;
  char v58 = v150;
  if (v150) {
    goto LABEL_71;
  }
LABEL_75:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v67, v32);
  uint64_t v75 = v79;
  uint64_t v76 = v80;
  swift_unknownObjectRelease();
LABEL_76:
  if ((specialized static Dictionary<>.== infix(_:_:)(v75, v69) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
LABEL_87:
    uint64_t v83 = (uint64_t *)v143;
    char v89 = v139;
    if (v139 < 1) {
      return result;
    }
    goto LABEL_88;
  }
  char v81 = specialized static Set.== infix(_:_:)(v76, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v81 & 1) == 0) {
    goto LABEL_87;
  }
  uint64_t v82 = v52;
  uint64_t v83 = (uint64_t *)v143;
  uint64_t v84 = specialized Rope._remove(at:)((uint64_t)&v151, v35, v67);
  uint64_t v85 = *v143;
  uint64_t v86 = v143[3];
  if (v84 < specialized Rope._endPath.getter(*v143) && *(unsigned char *)(v85 + 18))
  {
    uint64_t v87 = (v84 >> ((4 * *(unsigned char *)(v85 + 18) + 8) & 0x3C)) & 0xF;
    swift_unknownObjectRetain();
    specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v85 + 24, v87, v84);
    swift_unknownObjectRelease();
  }
  uint64_t v88 = v151;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v85) {
    goto LABEL_201;
  }
  uint64_t result = specialized Rope._Node._prepareModify(at:)(v84, (uint64_t)&v151);
  uint64_t v145 = v151;
  double v146 = v152;
  uint64_t v147 = v153;
  char v89 = v139;
  if (__OFADD__(*((void *)&v151 + 1), v88)) {
    goto LABEL_194;
  }
  *((void *)&v145 + 1) = *((void *)&v151 + 1) + v88;
  uint64_t v35 = v86 + 1;
  v143[3] = v35;
  if (!*v143)
  {
LABEL_202:
    __break(1u);
    return result;
  }
  unint64_t v52 = v82;
  specialized Rope._Node._finalizeModify(_:)(&v144, &v145);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v139 < 1) {
    return result;
  }
LABEL_88:
  if (v52 <= v89) {
    return result;
  }
  uint64_t v90 = *v83;
  uint64_t v91 = v83[2];
  if (*v83) {
    uint64_t v92 = v83[2];
  }
  else {
    uint64_t v92 = 0;
  }
  if (v92 < v89) {
    goto LABEL_185;
  }
  uint64_t v93 = v83[1];
  if (!v90 || !*(_WORD *)(v90 + 16) || v91 <= v89)
  {
    long long v104 = swift_unknownObjectRetain();
    long long v105 = specialized Rope._endPath.getter(v104);
    uint64_t result = swift_unknownObjectRelease();
    long long v97 = 0;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    if (!v90) {
      goto LABEL_116;
    }
    goto LABEL_115;
  }
  uint64_t v94 = *(unsigned __int8 *)(v90 + 18);
  if (*(unsigned char *)(v90 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v95 = v90;
    while (1)
    {
      long long v98 = *(unsigned __int16 *)(v95 + 16);
      if (!*(_WORD *)(v95 + 16)) {
        goto LABEL_99;
      }
      long long v99 = *(void *)(v95 + 40);
      uint64_t v61 = __OFSUB__(v89, v99);
      id v100 = v89 - v99;
      if (v61) {
        goto LABEL_179;
      }
      if (__OFADD__(v100, 1)) {
        goto LABEL_180;
      }
      if (v100 + 1 >= 1) {
        break;
      }
      long long v98 = 0;
LABEL_100:
      char v96 = (4 * *(unsigned char *)(v95 + 18) + 8) & 0x3C;
      uint64_t v94 = ((-15 << v96) - 1) & v94 | (v98 << v96);
      long long v97 = *(void *)(v95 + 24 + 24 * v98);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v95 = v97;
      if (!*(unsigned char *)(v97 + 18)) {
        goto LABEL_145;
      }
    }
    if (v98 != 1)
    {
      long long v101 = (uint64_t *)(v95 + 64);
      uint64_t v102 = 1;
      while (1)
      {
        long long v103 = *v101;
        v101 += 3;
        char v89 = v100 - v103;
        if (__OFSUB__(v100, v103)) {
          break;
        }
        if (__OFADD__(v89, 1)) {
          goto LABEL_174;
        }
        if (v89 + 1 < 1)
        {
          long long v98 = v102;
          char v89 = v100;
          goto LABEL_100;
        }
        ++v102;
        id v100 = v89;
        if (v98 == v102) {
          goto LABEL_99;
        }
      }
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }
    char v89 = v100;
LABEL_99:
    if (v89) {
      goto LABEL_178;
    }
    goto LABEL_100;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  long long v97 = v90;
LABEL_145:
  uint64_t v130 = *(unsigned __int16 *)(v97 + 16);
  if (!*(_WORD *)(v97 + 16)) {
    goto LABEL_165;
  }
  uint64_t v131 = *(void *)(v97 + 24);
  uint64_t v61 = __OFSUB__(v89, v131);
  uint64_t v132 = v89 - v131;
  if (v61)
  {
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }
  if (__OFADD__(v132, 1))
  {
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
    goto LABEL_202;
  }
  if (v132 + 1 >= 1)
  {
    if (v130 != 1)
    {
      uint64_t v136 = (uint64_t *)(v97 + 48);
      unint64_t v137 = 1;
      while (1)
      {
        Swift::String v138 = *v136;
        v136 += 3;
        char v89 = v132 - v138;
        if (__OFSUB__(v132, v138)) {
          goto LABEL_190;
        }
        if (__OFADD__(v89, 1)) {
          goto LABEL_191;
        }
        if (v89 + 1 < 1)
        {
          uint64_t v130 = v137;
          uint64_t v106 = v132;
          goto LABEL_167;
        }
        ++v137;
        uint64_t v132 = v89;
        if (v130 == v137) {
          goto LABEL_165;
        }
      }
    }
    char v89 = v132;
LABEL_165:
    if (v89)
    {
LABEL_198:
      __break(1u);
      goto LABEL_199;
    }
    uint64_t v106 = 0;
    goto LABEL_167;
  }
  uint64_t v130 = 0;
  uint64_t v106 = v89;
LABEL_167:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  long long v105 = v94 & 0xFFFFFFFFFFFFF0FFLL | (v130 << 8);
LABEL_115:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v105, v97, v90, v93);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v107 = v106;
LABEL_116:
  if (v107)
  {
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
    goto LABEL_192;
  }
  *(void *)&uint64_t v145 = v35;
  *((void *)&v145 + 1) = v105;
  *(void *)&double v146 = v97;
  if (v97)
  {
    uint64_t v108 = (void *)(v97 + 24 * ((v105 >> ((4 * *(unsigned char *)(v97 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v110 = v108[3];
    uint64_t v109 = v108[4];
    long long v111 = v108[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v90) {
      goto LABEL_119;
    }
LABEL_128:
    if (v105) {
      goto LABEL_120;
    }
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  swift_unknownObjectRetain();
  uint64_t v110 = specialized Rope._Node.subscript.getter(v105, v90);
  uint64_t v109 = v118;
  long long v111 = v119;
  swift_unknownObjectRelease();
  if (!v90) {
    goto LABEL_128;
  }
LABEL_119:
  uint64_t v112 = *(unsigned __int8 *)(v90 + 18);
  swift_unknownObjectRetain();
  if (v112 >= v105) {
    goto LABEL_129;
  }
LABEL_120:
  if (v97)
  {
    long long v113 = (4 * *(unsigned char *)(v97 + 18) + 8) & 0x3C;
    if (((v105 >> v113) & 0xF) != 0)
    {
      uint64_t v35 = ((((v105 >> v113) & 0xF) - 1) << v113) | ((-15 << v113) - 1) & v105;
      *((void *)&v145 + 1) = v35;
      swift_unknownObjectRelease();
LABEL_126:
      uint64_t v115 = v97 + 24 * ((v35 >> ((4 * *(unsigned char *)(v97 + 18) + 8) & 0x3C)) & 0xF);
      long long v116 = *(void *)(v115 + 32);
      uint64_t v117 = *(void *)(v115 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_131;
    }
  }
  swift_unknownObjectRetain();
  uint64_t v114 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v145, v90);
  uint64_t result = swift_unknownObjectRelease_n();
  if ((v114 & 1) == 0) {
    goto LABEL_193;
  }
  if ((void)v145 != v35) {
    goto LABEL_189;
  }
  uint64_t v35 = *((void *)&v145 + 1);
  long long v97 = v146;
  if ((void)v146) {
    goto LABEL_126;
  }
LABEL_130:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v35, v90);
  long long v116 = v120;
  uint64_t v117 = v121;
  swift_unknownObjectRelease();
LABEL_131:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (specialized static Dictionary<>.== infix(_:_:)(v116, v109))
  {
    uint64_t v122 = specialized static Set.== infix(_:_:)(v117, v111);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v122)
    {
      specialized Rope.update<A>(at:by:)(&v145, v143, v110);
      char v123 = *v143;
      uint64_t v124 = v143[1];
      unint64_t v125 = v143[2];
      char v126 = v143[3];
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v145, v123, v124, v125, v126);
      swift_unknownObjectRelease();
      specialized Rope._remove(at:)((uint64_t)&v148, v145, *((unint64_t *)&v145 + 1));
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease_n();
  }
}

uint64_t specialized Rope.extract<A>(from:to:in:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = result;
  if (a3)
  {
    unint64_t v44 = (void *)MEMORY[0x1E4FBC860];
    __n128 v7 = 0uLL;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    uint64_t v49 = 0;
    uint64_t v50 = (void *)MEMORY[0x1E4FBC860];
    if ((result & 0x8000000000000000) == 0 && a2 >= result && a5 >= a2)
    {
      if (result != a2)
      {
        int v9 = *(unsigned __int8 *)(a3 + 18);
        uint64_t v10 = (void *)(a3 + 24);
        swift_unknownObjectRetain();
        uint64_t v11 = (unsigned __int16 *)(a3 + 16);
        if (v9) {
          specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(v11, v10, v6, a2, (unsigned __int16 *)&v44);
        }
        else {
          specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)((uint64_t)v11, v10, v6, a2, &v44);
        }
        swift_unknownObjectRelease();
      }
      uint64_t v13 = *((void *)&v48 + 1);
      uint64_t v14 = v48;
      uint64_t v15 = v49;
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      if (v13)
      {
        if (v14)
        {
          uint64_t v16 = *((void *)&v46 + 1);
          long long v17 = v47;
          *((void *)&v46 + 1) = 0;
          long long v47 = 0uLL;
          if ((void)v17)
          {
            specialized Rope.Builder._appendNow(_:)(v16, v17, *((uint64_t *)&v17 + 1));
            outlined consume of Rope<AttributedString._InternalRun>._Item?(*((uint64_t *)&v46 + 1), v47);
          }
          *((void *)&v46 + 1) = 0;
          long long v47 = 0uLL;
LABEL_19:
          v7.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v14, v13, v15);
LABEL_28:
          uint64_t v24 = v50;
          while (v24[2])
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if (result)
            {
              uint64_t v18 = v24[2];
              if (!v18) {
                goto LABEL_40;
              }
            }
            else
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
              uint64_t v24 = (void *)result;
              uint64_t v18 = *(void *)(result + 16);
              if (!v18)
              {
LABEL_40:
                __break(1u);
                goto LABEL_41;
              }
            }
            uint64_t v19 = v18 - 1;
            uint64_t v20 = &v24[4 * v19];
            uint64_t v21 = v20[4];
            uint64_t v22 = v20[5];
            uint64_t v23 = v20[6];
            v24[2] = v19;
            uint64_t v50 = v24;
            if (v21)
            {
              specialized Rope.Builder._insertBeforeTip(_:)(v21, v22, v23);
              goto LABEL_28;
            }
          }
          uint64_t v25 = *((void *)&v46 + 1);
          uint64_t v27 = *((void *)&v47 + 1);
          uint64_t v26 = v47;
          *((void *)&v46 + 1) = 0;
          long long v47 = 0uLL;
          if (v26) {
            v7.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v25, v26, v27);
          }
          uint64_t v28 = *((void *)&v45 + 1);
          uint64_t v12 = v45;
          uint64_t v29 = v46;
          uint64_t v43 = 0;
          MEMORY[0x185309530](&v43, 8, v27, v7);
          for (i = v44; i[2]; uint64_t v29 = v39)
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v31 = i[2];
              if (!v31) {
                goto LABEL_37;
              }
            }
            else
            {
              uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew()(i);
              uint64_t v31 = i[2];
              if (!v31)
              {
LABEL_37:
                __break(1u);
                break;
              }
            }
            uint64_t v32 = v31 - 1;
            unint64_t v33 = &i[4 * v32];
            uint64_t v34 = v33[4];
            uint64_t v35 = v33[5];
            uint64_t v36 = v33[6];
            uint64_t v37 = v33[7];
            i[2] = v32;
            uint64_t v12 = specialized static Rope.join(_:_:)(v34, v35, v36, v37, v12, v28, v29);
            uint64_t v28 = v38;
          }
          unint64_t v44 = i;
          uint64_t v40 = *((void *)&v46 + 1);
          uint64_t v41 = v47;
          long long v42 = v48;
          swift_bridgeObjectRelease();
          outlined consume of Rope<AttributedString._InternalRun>._Item?(v40, v41);
          outlined consume of Rope<AttributedString._InternalRun>._Item?(v42, *((uint64_t *)&v42 + 1));
          swift_bridgeObjectRelease();
          return v12;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v14 = *((void *)&v46 + 1);
      uint64_t v15 = *((void *)&v47 + 1);
      uint64_t v13 = v47;
      *((void *)&v46 + 1) = 0;
      long long v47 = 0uLL;
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_19;
    }
LABEL_41:
    __break(1u);
  }
  else if (!(a2 | result))
  {
    unint64_t v44 = 0;
    MEMORY[0x185309530](&v44, 8);
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t outlined consume of Rope<AttributedString._InternalRun>._Item?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double specialized Rope.Builder._appendNow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 8);
  long long v8 = *(_OWORD *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 8) = 0;
  if (!v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
    uint64_t v7 = swift_allocObject();
    *(_WORD *)(v7 + 16) = 0;
    *(unsigned char *)(v7 + 18) = 0;
    long long v8 = 0uLL;
  }
  uint64_t v11 = v7;
  long long v12 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope._Node._appendItem(_:)(a1, a2, a3);
  if (*(_WORD *)(v11 + 16) == 15)
  {
    uint64_t v9 = swift_unknownObjectRetain();
    specialized Rope.Builder._appendNow(_:)(v9, v12, *((uint64_t *)&v12 + 1));
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 8) = v11;
    double result = *(double *)&v12;
    *(_OWORD *)(v3 + 16) = v12;
  }
  return result;
}

uint64_t specialized Rope.builder<A>(removing:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4[2];
  ++v4[3];
  uint64_t v7 = *v4;
  if (*v4) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  if (result < 0 || v8 < a2) {
    goto LABEL_81;
  }
  uint64_t v10 = result;
  if (result == a2)
  {
    return specialized Rope.builder<A>(splittingAt:in:)(result, a4);
  }
  uint64_t v11 = v4[1];
  uint64_t v50 = v6;
  uint64_t v51 = MEMORY[0x1E4FBC860];
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v56 = 0;
  uint64_t v57 = MEMORY[0x1E4FBC860];
  uint64_t v48 = v7;
  uint64_t v49 = (void *)v11;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = 0;
  uint64_t v47 = result;
  if (*(unsigned char *)(v7 + 18))
  {
    uint64_t v12 = result;
    uint64_t v13 = a2;
    while (1)
    {
      uint64_t v14 = *(unsigned __int16 *)(v7 + 16);
      uint64_t v15 = v12;
      if (!*(_WORD *)(v7 + 16)) {
        goto LABEL_33;
      }
      uint64_t v16 = *(void *)(v7 + 40);
      BOOL v17 = __OFSUB__(v12, v16);
      uint64_t v15 = v12 - v16;
      if (v17) {
        goto LABEL_76;
      }
      if (__OFADD__(v15, 1)) {
        goto LABEL_77;
      }
      if (v15 + 1 > 0) {
        break;
      }
      uint64_t v20 = v13 - v12;
      if (__OFSUB__(v13, v12)) {
        goto LABEL_80;
      }
      double result = 0;
LABEL_36:
      uint64_t v13 = v12 + v20;
      if (__OFADD__(v12, v20))
      {
        __break(1u);
        goto LABEL_72;
      }
      if (result >= v14)
      {
        a3 = result;
      }
      else
      {
        uint64_t v22 = *(void *)(v7 + 24 + 24 * result + 16);
        a3 = result;
        if (v22 < v13)
        {
          BOOL v17 = __OFSUB__(v13, v22);
          v13 -= v22;
          if (v17) {
            goto LABEL_79;
          }
          a3 = result + 1;
          if (result + 1 < v14)
          {
            uint64_t v23 = *(void *)(v7 + 24 + 24 * a3 + 16);
            if (v23 < v13)
            {
              BOOL v17 = __OFSUB__(v13, v23);
              v13 -= v23;
              if (v17) {
                goto LABEL_84;
              }
              a3 = result + 2;
              if (result + 2 < v14)
              {
                uint64_t v24 = (uint64_t *)(v7 + 24 * result + 88);
                while (1)
                {
                  uint64_t v26 = *v24;
                  v24 += 3;
                  uint64_t v25 = v26;
                  if (v26 >= v13) {
                    break;
                  }
                  BOOL v17 = __OFSUB__(v13, v25);
                  v13 -= v25;
                  if (v17) {
                    goto LABEL_78;
                  }
                  if (v14 == ++a3)
                  {
                    a3 = *(unsigned __int16 *)(v7 + 16);
                    break;
                  }
                }
              }
            }
          }
        }
      }
      if (result < a3) {
        goto LABEL_56;
      }
      double result = specialized Rope._Node._innerSplit(at:into:)(result, (uint64_t)&v51);
      uint64_t v7 = v48;
      if (!*(unsigned char *)(v48 + 18))
      {
        uint64_t v47 = v12;
        goto LABEL_57;
      }
    }
    if (v14 != 1)
    {
      uint64_t v18 = *(void *)(v7 + 64);
      BOOL v17 = __OFSUB__(v15, v18);
      uint64_t v19 = v15 - v18;
      if (v17) {
        goto LABEL_82;
      }
      if (__OFADD__(v19, 1)) {
        goto LABEL_83;
      }
      if (v19 + 1 < 1)
      {
        double result = 1;
        uint64_t v20 = v13 - v12;
        if (__OFSUB__(v13, v12)) {
          goto LABEL_55;
        }
LABEL_35:
        uint64_t v12 = v15;
        goto LABEL_36;
      }
      if (v14 != 2)
      {
        uint64_t v21 = (void *)(v7 + 88);
        double result = 2;
        while (v14 != result)
        {
          uint64_t v15 = v19 - *v21;
          if (__OFSUB__(v19, *v21)) {
            goto LABEL_73;
          }
          if (__OFADD__(v15, 1)) {
            goto LABEL_74;
          }
          if (v15 + 1 < 1)
          {
            uint64_t v15 = v19;
            uint64_t v20 = v13 - v12;
            if (__OFSUB__(v13, v12)) {
              goto LABEL_55;
            }
            goto LABEL_35;
          }
          ++result;
          v21 += 3;
          uint64_t v19 = v15;
          if (v14 == result) {
            goto LABEL_33;
          }
        }
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      uint64_t v15 = v19;
    }
LABEL_33:
    if (v15) {
      goto LABEL_75;
    }
    double result = *(unsigned __int16 *)(v7 + 16);
    uint64_t v20 = v13 - v12;
    if (__OFSUB__(v13, v12))
    {
LABEL_55:
      __break(1u);
LABEL_56:
      uint64_t v27 = v12;
      uint64_t v28 = v13;
      uint64_t v29 = v7;
      goto LABEL_59;
    }
    goto LABEL_35;
  }
LABEL_57:
  double result = (uint64_t)specialized closure #2 in Rope.builder<A>(removing:in:)((unsigned __int16 *)(v7 + 16), (void *)(v7 + 24), &v47, v10, a2);
  uint64_t v30 = result;
  uint64_t v31 = v27;
  uint64_t v32 = v28;
  unint64_t v33 = v49;
  uint64_t v34 = v50;
  if (result >= a3)
  {
    swift_unknownObjectRetain();
    double result = specialized Rope._Node._leafSplit(at:into:)(v30, (uint64_t)&v51, v7, v33, v34);
    if (v32 < 0) {
      goto LABEL_85;
    }
    uint64_t v39 = result - v32;
    if (result < v32) {
      goto LABEL_85;
    }
    uint64_t v40 = v37;
    uint64_t v41 = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double result = specialized Rope.Builder._insertAfterTip(_:)(v39, v40, v41);
    if (v31 < 0 || v32 < v31)
    {
LABEL_86:
      __break(1u);
    }
    else
    {
      if (v31)
      {
        uint64_t v42 = *((void *)&v53 + 1);
        long long v43 = v54;
        *((void *)&v53 + 1) = 0;
        long long v54 = 0uLL;
        if ((void)v43)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Rope.Builder._appendNow(_:)(v42, v43, *((uint64_t *)&v43 + 1));
          outlined consume of Rope<AttributedString._InternalRun>._Item?(*((uint64_t *)&v53 + 1), v54);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          double result = swift_bridgeObjectRelease();
        }
        else
        {
          double result = swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        double result = swift_bridgeObjectRelease();
        uint64_t v31 = *((void *)&v53 + 1);
        uint64_t v41 = *((void *)&v54 + 1);
        uint64_t v40 = v54;
      }
      uint64_t v44 = v53;
      uint64_t v45 = v56;
      uint64_t v46 = v57;
      *(void *)a4 = v51;
      *(_OWORD *)(a4 + 8) = v52;
      *(void *)(a4 + 24) = v44;
      *(void *)(a4 + 32) = v31;
      *(void *)(a4 + 40) = v40;
      *(void *)(a4 + 48) = v41;
      *(_OWORD *)(a4 + 56) = v55;
      *(void *)(a4 + 72) = v45;
      *(void *)(a4 + 80) = v46;
    }
  }
  else
  {
    uint64_t v29 = v7;
LABEL_59:
    double result = specialized Rope._Node._removeSubrange<A>(from:to:in:into:)(result, v27, a3, v28, &v51, v29);
    uint64_t v35 = v56;
    uint64_t v36 = v57;
    *(void *)a4 = v51;
    *(_OWORD *)(a4 + 8) = v52;
    *(_OWORD *)(a4 + 24) = v53;
    *(_OWORD *)(a4 + 40) = v54;
    *(_OWORD *)(a4 + 56) = v55;
    *(void *)(a4 + 72) = v35;
    *(void *)(a4 + 80) = v36;
  }
  return result;
}

uint64_t specialized Rope.Builder._insertAfterTip(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v6 = v3;
    uint64_t v7 = result;
    uint64_t v8 = v3[8];
    if (!v8)
    {
LABEL_16:
      v6[7] = v7;
      v6[8] = a2;
      v6[9] = a3;
      return result;
    }
    uint64_t v9 = v3[7];
    uint64_t v11 = v3[9];
    uint64_t v10 = (void *)v3[10];
    unint64_t v12 = v10[2];
    if (v12)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      }
      if (v12 <= v10[2])
      {
        specialized Rope.prepend(_:)(v9, v8, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        double result = swift_bridgeObjectRelease_n();
LABEL_15:
        v6[10] = v10;
        goto LABEL_16;
      }
      __break(1u);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
      uint64_t v13 = swift_allocObject();
      *(_WORD *)(v13 + 16) = 0;
      *(unsigned char *)(v13 + 18) = 0;
      v20[0] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v9, v8, v11);
      uint64_t v18 = 0;
      uint64_t v19 = v20[0];
      uint64_t v17 = 0;
      memset(v20, 0, sizeof(v20));
      MEMORY[0x185309530](v20, 8);
      uint64_t v9 = v20[0];
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_12:
        unint64_t v15 = v10[2];
        unint64_t v14 = v10[3];
        if (v15 >= v14 >> 1) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v10);
        }
        _OWORD v10[2] = v15 + 1;
        uint64_t v16 = &v10[4 * v15];
        v16[4] = v19;
        v16[5] = v18;
        v16[6] = v17;
        v16[7] = v9;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        double result = swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t specialized Rope._Node._leafSplit(at:into:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a5;
  uint64_t v52 = a3;
  uint64_t v54 = a5;
  swift_unknownObjectRetain();
  if (swift_isUniquelyReferenced_nonNull())
  {
    uint64_t v11 = a3;
  }
  else
  {
    uint64_t v11 = specialized Rope._Node.copy()(a3);
    a4 = v12;
    uint64_t v6 = v13;
    swift_unknownObjectRelease();
    uint64_t v52 = v11;
    uint64_t v54 = v6;
  }
  if (*(unsigned __int16 *)(v11 + 16) - 2 == a1)
  {
    uint64_t v14 = *(unsigned __int16 *)(a3 + 16) - 1;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v15 = specialized Rope._Node.copy()(v11);
      a4 = v16;
      uint64_t v6 = v17;
      swift_unknownObjectRelease();
      uint64_t v52 = v15;
      long long v53 = a4;
      uint64_t v11 = v15;
    }
    swift_unknownObjectRetain();
    uint64_t v18 = specialized Rope._UnsafeHandle._removeChild(at:)(v14, (_WORD *)(v11 + 16), v11 + 24);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_unknownObjectRelease();
    BOOL v23 = __OFSUB__(a4, 1);
    a4 = (void *)((char *)a4 - 1);
    if (v23) {
      goto LABEL_37;
    }
    BOOL v23 = __OFSUB__(v6, v18);
    v6 -= v18;
    if (v23)
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    specialized Rope.Builder._insertAfterTip(_:)(v18, v20, v22);
  }
  if (a1 == 1)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v24 = specialized Rope._Node.copy()(v11);
      a4 = v25;
      uint64_t v6 = v26;
      swift_unknownObjectRelease();
      uint64_t v52 = v24;
      long long v53 = a4;
      uint64_t v11 = v24;
      uint64_t v54 = v6;
    }
    swift_unknownObjectRetain();
    uint64_t v18 = specialized Rope._UnsafeHandle._removeChild(at:)(0, (_WORD *)(v11 + 16), v11 + 24);
    uint64_t v28 = v27;
    uint64_t v22 = v29;
    swift_unknownObjectRelease();
    BOOL v23 = __OFSUB__(a4, 1);
    a4 = (void *)((char *)a4 - 1);
    if (v23) {
      goto LABEL_39;
    }
    BOOL v23 = __OFSUB__(v6, v18);
    v6 -= v18;
    if (v23)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    specialized Rope.Builder.insertBeforeTip(_:)(v18, v28, v22);
    a1 = 0;
  }
  uint64_t v22 = a2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v30 = specialized Rope._Node.copy()(v11);
    a4 = v31;
    uint64_t v6 = v32;
    swift_unknownObjectRelease();
    uint64_t v52 = v30;
    uint64_t v11 = v30;
  }
  unint64_t v33 = (_WORD *)(v11 + 16);
  swift_unknownObjectRetain();
  uint64_t v5 = specialized Rope._UnsafeHandle._removeChild(at:)(a1, (_WORD *)(v11 + 16), v11 + 24);
  swift_unknownObjectRelease();
  uint64_t v18 = (uint64_t)a4 - 1;
  if (__OFSUB__(a4, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  long long v53 = (void *)((char *)a4 - 1);
  BOOL v23 = __OFSUB__(v6, v5);
  v6 -= v5;
  if (v23)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v54 = v6;
  if (!*v33)
  {
LABEL_24:
    swift_unknownObjectRelease();
    goto LABEL_34;
  }
  if (!a1)
  {
    uint64_t v51 = 0;
    swift_unknownObjectRetain_n();
    MEMORY[0x185309530](&v51, 8);
    uint64_t v49 = v51;
    a4 = *(void **)(a2 + 80);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_26:
      unint64_t v36 = a4[2];
      unint64_t v35 = a4[3];
      if (v36 >= v35 >> 1) {
        a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, a4);
      }
      a4[2] = v36 + 1;
      uint64_t v37 = &a4[4 * v36];
      v37[4] = v11;
      v37[5] = v18;
      v37[6] = v6;
      v37[7] = v49;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      *(void *)(v22 + 80) = a4;
      goto LABEL_34;
    }
LABEL_41:
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
    goto LABEL_26;
  }
  if (a1 == (unsigned __int16)*v33)
  {
    uint64_t v34 = swift_unknownObjectRetain();
    specialized Rope.Builder._insertBeforeTip(_:)(v34, (uint64_t)a4 - 1, v6);
    goto LABEL_24;
  }
  uint64_t v38 = specialized Rope._Node.split(keeping:)(a1);
  uint64_t v50 = v39;
  uint64_t v41 = v40;
  uint64_t v42 = swift_unknownObjectRetain();
  specialized Rope.Builder._insertBeforeTip(_:)(v42, (uint64_t)v53, v54);
  uint64_t v51 = 0;
  swift_unknownObjectRetain();
  MEMORY[0x185309530](&v51, 8);
  uint64_t v43 = v51;
  uint64_t v44 = *(void **)(a2 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
  }
  unint64_t v46 = v44[2];
  unint64_t v45 = v44[3];
  if (v46 >= v45 >> 1) {
    uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v44);
  }
  _OWORD v44[2] = v46 + 1;
  uint64_t v47 = &v44[4 * v46];
  v47[4] = v38;
  v47[5] = v50;
  v47[6] = v41;
  v47[7] = v43;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(void *)(a2 + 80) = v44;
LABEL_34:
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized Rope._Node.copy()(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 18);
  unint64_t v3 = a1 + 24;
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
    uint64_t v14 = swift_allocObject();
    *(unsigned char *)(v14 + 18) = 0;
    uint64_t v15 = *(unsigned __int16 *)(a1 + 16);
    *(_WORD *)(v14 + 16) = v15;
    if (v3 < v14 + 24 + 24 * v15 && v14 + 24 < v3 + 24 * v15) {
      goto LABEL_26;
    }
    uint64_t v7 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Item);
    swift_arrayInitWithCopy();
    if (v15)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      while (1)
      {
        uint64_t v19 = *(void *)(v7 + v17 + 24);
        BOOL v12 = __OFADD__(v18, v19);
        v18 += v19;
        if (v12) {
          break;
        }
        v17 += 24;
        if (24 * v15 == v17) {
          return v7;
        }
      }
      goto LABEL_25;
    }
    return v7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 18) = v2;
  uint64_t v5 = *(unsigned __int16 *)(a1 + 16);
  *(_WORD *)(v4 + 16) = v5;
  if (v3 < v4 + 24 + 24 * v5 && v4 + 24 < v3 + 24 * v5) {
    goto LABEL_26;
  }
  uint64_t v7 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Node);
  swift_arrayInitWithCopy();
  if (!v5) {
    return v7;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *(void *)(v7 + v8 + 32);
    BOOL v12 = __OFADD__(v10, v11);
    v10 += v11;
    if (v12) {
      break;
    }
    uint64_t v13 = *(void *)(v7 + v8 + 40);
    BOOL v12 = __OFADD__(v9, v13);
    v9 += v13;
    if (v12) {
      goto LABEL_24;
    }
    v8 += 24;
    if (24 * v5 == v8) {
      return v7;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._removeChild(at:)(uint64_t a1, _WORD *a2, uint64_t a3)
{
  uint64_t v3 = (unsigned __int16)*a2;
  BOOL v4 = __OFSUB__(v3, a1);
  uint64_t v5 = v3 - a1;
  if (v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  BOOL v4 = __OFSUB__(v5, 1);
  uint64_t v6 = v5 - 1;
  if (v4)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = (uint64_t *)(a3 + 24 * a1);
    uint64_t v9 = *v8;
    memmove(v8, v8 + 3, 24 * v6);
    if (*a2)
    {
      --*a2;
      return v9;
    }
    goto LABEL_8;
  }
LABEL_9:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned __int16 *specialized closure #2 in Rope.builder<A>(removing:in:)(unsigned __int16 *result, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *result;
  if (*result)
  {
    uint64_t v7 = v5 - *a2;
    if (__OFSUB__(v5, *a2))
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (__OFADD__(v7, 1))
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v7 + 1 < 1)
    {
      uint64_t v6 = 0;
      uint64_t v8 = a5 - a4;
      if (!__OFSUB__(a5, a4)) {
        goto LABEL_17;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (v6 != 1)
    {
      uint64_t v9 = a2 + 3;
      uint64_t v10 = 1;
      while (1)
      {
        uint64_t v11 = *v9;
        v9 += 3;
        uint64_t v5 = v7 - v11;
        if (__OFSUB__(v7, v11)) {
          goto LABEL_21;
        }
        if (__OFADD__(v5, 1)) {
          goto LABEL_22;
        }
        if (v5 + 1 < 1)
        {
          uint64_t v6 = v10;
          uint64_t v5 = v7;
          uint64_t v8 = a5 - a4;
          if (__OFSUB__(a5, a4)) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }
        ++v10;
        uint64_t v7 = v5;
        if (v6 == v10) {
          goto LABEL_15;
        }
      }
    }
    v5 -= *a2;
  }
LABEL_15:
  if (!v5)
  {
    uint64_t v8 = a5 - a4;
    if (!__OFSUB__(a5, a4))
    {
LABEL_17:
      specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(v6, v5, v8, 1, result, (uint64_t)a2);
      return (unsigned __int16 *)v6;
    }
    goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, unsigned __int16 *a5, uint64_t a6)
{
  BOOL v6 = __OFADD__(a2, a3);
  uint64_t v7 = a2 + a3;
  if (v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = *a5;
  if (v8 > result)
  {
    BOOL v9 = (a4 & 1) == 0;
    if (__OFADD__(v7, v9))
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    uint64_t v10 = *(void *)(a6 + 24 * result);
    if (v10 < v7 + v9)
    {
      BOOL v6 = __OFSUB__(v7, v10);
      uint64_t v11 = v7 - v10;
      if (v6)
      {
LABEL_19:
        __break(1u);
        return result;
      }
      uint64_t v12 = result + 1;
      if (result + 1 >= v8) {
        return v12;
      }
      uint64_t v13 = (uint64_t *)(a6 + 24 * result + 24);
      while (!__OFADD__(v11, v9))
      {
        uint64_t v15 = *v13;
        v13 += 3;
        uint64_t v14 = v15;
        if (v15 >= v11 + v9) {
          return v12;
        }
        BOOL v6 = __OFSUB__(v11, v14);
        v11 -= v14;
        if (v6) {
          goto LABEL_16;
        }
        if (v8 == ++v12) {
          return *a5;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  return result;
}

{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  BOOL v6 = __OFADD__(a2, a3);
  uint64_t v7 = a2 + a3;
  if (v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = *a5;
  if (v8 > result)
  {
    BOOL v9 = (a4 & 1) == 0;
    if (__OFADD__(v7, v9))
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    uint64_t v10 = *(void *)(a6 + 24 * result + 16);
    if (v10 < v7 + v9)
    {
      BOOL v6 = __OFSUB__(v7, v10);
      uint64_t v11 = v7 - v10;
      if (v6)
      {
LABEL_19:
        __break(1u);
        return result;
      }
      uint64_t v12 = result + 1;
      if (result + 1 >= v8) {
        return v12;
      }
      uint64_t v13 = (uint64_t *)(a6 + 24 * result + 40);
      while (!__OFADD__(v11, v9))
      {
        uint64_t v15 = *v13;
        v13 += 3;
        uint64_t v14 = v15;
        if (v15 >= v11 + v9) {
          return v12;
        }
        BOOL v6 = __OFSUB__(v11, v14);
        v11 -= v14;
        if (v6) {
          goto LABEL_16;
        }
        if (v8 == ++v12) {
          return *a5;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t specialized Rope.Builder.insertBeforeTip<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(v3 + 40);
    if (v7)
    {
      uint64_t v8 = *(void *)(v3 + 32);
      uint64_t v9 = *(void *)(v3 + 48);
      uint64_t v10 = *(void *)(v3 + 8);
      long long v11 = *(_OWORD *)(v3 + 16);
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      *(void *)(v3 + 8) = 0;
      if (!v10)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        uint64_t v10 = swift_allocObject();
        *(_WORD *)(v10 + 16) = 0;
        *(unsigned char *)(v10 + 18) = 0;
        long long v11 = 0uLL;
      }
      uint64_t v13 = v10;
      long long v14 = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v8, v7, v9);
      if (*(_WORD *)(v13 + 16) == 15)
      {
        uint64_t v12 = swift_unknownObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v12, v14, *((uint64_t *)&v14 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)(v3 + 8) = v13;
        *(_OWORD *)(v3 + 16) = v14;
      }
    }
    *(void *)(v3 + 32) = v6;
    *(void *)(v3 + 40) = a2;
    *(void *)(v3 + 48) = a3;
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  char v49;
  unint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  void *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;

  BOOL v4 = *(void *)(result + 64);
  if (v4) {
    uint64_t v5 = *(void *)(result + 80);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 < 0) {
    goto LABEL_294;
  }
  uint64_t v6 = (void *)a2;
  if (v5 < a2) {
    goto LABEL_294;
  }
  uint64_t v7 = a3;
  uint64_t v8 = (void *)result;
  uint64_t v9 = *(void *)(result + 72);
  uint64_t v119 = *(void *)(result + 88);
  uint64_t v107 = (void *)result;
  if (v4)
  {
    if (*(void *)(result + 80) > a2 && *(_WORD *)(v4 + 16) != 0)
    {
      uint64_t v118 = *(void *)(result + 72);
      uint64_t v12 = *(unsigned __int8 *)(v4 + 18);
      if (*(unsigned char *)(v4 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t result = swift_retain_n();
        long long v14 = (uint64_t)v6;
        uint64_t v91 = v4;
        while (1)
        {
          uint64_t v93 = *(unsigned __int16 *)(v91 + 16);
          if (!*(_WORD *)(v91 + 16)) {
            goto LABEL_198;
          }
          uint64_t v94 = *(void *)(v91 + 40);
          uint64_t v95 = v14 - v94;
          if (__OFSUB__(v14, v94)) {
            goto LABEL_284;
          }
          if (__OFADD__(v95, 1)) {
            goto LABEL_285;
          }
          if (v95 + 1 <= 0)
          {
            uint64_t v93 = 0;
          }
          else
          {
            if (v93 == 1)
            {
              v14 -= v94;
              goto LABEL_198;
            }
            char v96 = *(void *)(v91 + 64);
            uint64_t v15 = __OFSUB__(v95, v96);
            long long v97 = v95 - v96;
            if (v15) {
              goto LABEL_292;
            }
            if (__OFADD__(v97, 1)) {
              goto LABEL_293;
            }
            if (v97 + 1 < 1)
            {
              uint64_t v93 = 1;
              long long v14 = v95;
            }
            else
            {
              if (v93 == 2)
              {
                long long v14 = v97;
LABEL_198:
                if (v14) {
                  goto LABEL_283;
                }
                goto LABEL_199;
              }
              long long v98 = (void *)(v91 + 88);
              long long v99 = 2;
              while (1)
              {
                if (v93 == v99) {
                  goto LABEL_276;
                }
                long long v14 = v97 - *v98;
                if (__OFSUB__(v97, *v98)) {
                  goto LABEL_277;
                }
                if (__OFADD__(v14, 1)) {
                  goto LABEL_278;
                }
                if (v14 + 1 < 1) {
                  break;
                }
                ++v99;
                v98 += 3;
                long long v97 = v14;
                if (v93 == v99) {
                  goto LABEL_198;
                }
              }
              uint64_t v93 = v99;
              long long v14 = v97;
            }
          }
LABEL_199:
          uint64_t v92 = (4 * *(unsigned char *)(v91 + 18) + 8) & 0x3C;
          uint64_t v12 = ((-15 << v92) - 1) & v12 | (v93 << v92);
          uint64_t v13 = *(void *)(v91 + 24 + 24 * v93);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v91 = v13;
          if (!*(unsigned char *)(v13 + 18)) {
            goto LABEL_221;
          }
        }
      }
      swift_unknownObjectRetain_n();
      uint64_t result = swift_retain_n();
      long long v14 = (uint64_t)v6;
      uint64_t v13 = v4;
LABEL_221:
      id v100 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        long long v101 = *(void *)(v13 + 24);
        uint64_t v102 = v14 - v101;
        uint64_t v8 = v107;
        uint64_t v7 = a3;
        uint64_t v9 = v118;
        if (__OFSUB__(v14, v101)) {
          goto LABEL_303;
        }
        if (__OFADD__(v102, 1)) {
          goto LABEL_304;
        }
        if (v102 + 1 <= 0)
        {
LABEL_232:
          id v100 = 0;
          goto LABEL_261;
        }
        if (v100 == 1)
        {
          v14 -= v101;
        }
        else
        {
          long long v103 = *(void *)(v13 + 48);
          uint64_t v15 = __OFSUB__(v102, v103);
          uint64_t v24 = v102 - v103;
          if (v15) {
            goto LABEL_305;
          }
          if (__OFADD__(v24, 1)) {
            goto LABEL_306;
          }
          if (v24 + 1 < 1)
          {
            id v100 = 1;
            long long v14 = v102;
            goto LABEL_261;
          }
          if (v100 != 2)
          {
            long long v104 = (void *)(v13 + 72);
            uint64_t v16 = 2;
            while (v100 != v16)
            {
              long long v14 = v24 - *v104;
              if (__OFSUB__(v24, *v104)) {
                goto LABEL_299;
              }
              if (__OFADD__(v14, 1)) {
                goto LABEL_300;
              }
              if (v14 + 1 < 1) {
                goto LABEL_260;
              }
              ++v16;
              v104 += 3;
              uint64_t v24 = v14;
              if (v100 == v16) {
                goto LABEL_228;
              }
            }
            goto LABEL_298;
          }
          long long v14 = v24;
        }
      }
      else
      {
        uint64_t v8 = v107;
        uint64_t v7 = a3;
        uint64_t v9 = v118;
      }
LABEL_228:
      if (!v14) {
        goto LABEL_261;
      }
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
      goto LABEL_232;
    }
  }
  swift_retain_n();
  long long v11 = swift_unknownObjectRetain_n();
  uint64_t v12 = specialized Rope._endPath.getter(v11);
  swift_unknownObjectRelease();
  uint64_t v13 = 0;
  long long v14 = 0;
  if (!v4) {
    goto LABEL_262;
  }
LABEL_13:
  swift_unknownObjectRetain();
  uint64_t v115 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v119, v12, v13, v4, v9);
  swift_release();
  uint64_t result = swift_unknownObjectRelease_n();
  uint64_t v15 = __OFSUB__(v6, v14);
  long long v14 = (uint64_t)v6 - v14;
  if (v15)
  {
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
    goto LABEL_289;
  }
LABEL_14:
  uint64_t v16 = v3 + 32;
  long long v111 = (uint64_t *)v3;
  long long v105 = (void *)(v3 + 8);
  uint64_t v106 = (void *)(v3 + 32);
  BOOL v4 = v119;
  while (1)
  {
    uint64_t v17 = v8[8];
    uint64_t v119 = v4;
    if (v6 != (void *)v7)
    {
      if (v17) {
        uint64_t v22 = v8[10];
      }
      else {
        uint64_t v22 = 0;
      }
      goto LABEL_68;
    }
    BOOL v4 = v8[10];
    if (v17) {
      uint64_t v18 = v8[10];
    }
    else {
      uint64_t v18 = 0;
    }
    if (v18 < (uint64_t)v6) {
      goto LABEL_268;
    }
    if (v17)
    {
      uint64_t v3 = v8[9];
      uint64_t v19 = *(unsigned __int16 *)(v17 + 16);
      uint64_t v7 = *(unsigned __int8 *)(v17 + 18);
      uint64_t v20 = v4 <= (uint64_t)v6 || v19 == 0;
      uint64_t v109 = v12;
      long long v116 = v8[11];
      if (v20)
      {
        uint64_t v21 = ((-15 << ((4 * v7 + 8) & 0x3C)) - 1) & v7 | (unint64_t)(v19 << ((4 * v7 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v8 = 0;
        uint64_t v9 = 0;
LABEL_65:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v116, v21, v9, v17, v3);
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t v7 = a3;
        uint64_t v12 = v109;
        goto LABEL_66;
      }
      if (*(unsigned char *)(v17 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t v8 = v6;
        uint64_t v12 = v17;
        while (1)
        {
          uint64_t v24 = *(unsigned __int16 *)(v12 + 16);
          if (*(_WORD *)(v12 + 16))
          {
            uint64_t v25 = *(void *)(v12 + 40);
            uint64_t v15 = __OFSUB__(v8, v25);
            uint64_t v16 = (uint64_t)v8 - v25;
            if (v15) {
              goto LABEL_247;
            }
            if (__OFADD__(v16, 1)) {
              goto LABEL_248;
            }
            if (v16 + 1 < 1)
            {
              uint64_t v24 = 0;
              goto LABEL_36;
            }
            if (v24 != 1)
            {
              uint64_t v26 = (uint64_t *)(v12 + 64);
              uint64_t v27 = 1;
              while (1)
              {
                uint64_t v28 = *v26;
                v26 += 3;
                uint64_t v8 = (void *)(v16 - v28);
                if (__OFSUB__(v16, v28)) {
                  goto LABEL_230;
                }
                if (__OFADD__(v8, 1)) {
                  goto LABEL_231;
                }
                if ((uint64_t)v8 + 1 < 1) {
                  break;
                }
                ++v27;
                uint64_t v16 = (uint64_t)v8;
                if (v24 == v27) {
                  goto LABEL_35;
                }
              }
              uint64_t v24 = v27;
              uint64_t v8 = (void *)v16;
              goto LABEL_36;
            }
            uint64_t v8 = (void *)v16;
          }
LABEL_35:
          if (v8)
          {
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
            goto LABEL_249;
          }
LABEL_36:
          BOOL v23 = (4 * *(unsigned char *)(v12 + 18) + 8) & 0x3C;
          uint64_t v7 = ((-15 << v23) - 1) & v7 | (v24 << v23);
          uint64_t v9 = *(void *)(v12 + 24 + 24 * v24);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v12 = v9;
          if (!*(unsigned char *)(v9 + 18)) {
            goto LABEL_51;
          }
        }
      }
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v7 = 0;
      uint64_t v8 = v6;
      uint64_t v9 = v17;
LABEL_51:
      uint64_t v29 = *(unsigned __int16 *)(v9 + 16);
      if (!*(_WORD *)(v9 + 16)) {
        goto LABEL_63;
      }
      uint64_t v30 = *(void *)(v9 + 24);
      uint64_t v15 = __OFSUB__(v8, v30);
      uint64_t v31 = (void *)((char *)v8 - v30);
      if (v15) {
        goto LABEL_287;
      }
      if (__OFADD__(v31, 1)) {
        goto LABEL_288;
      }
      if ((uint64_t)v31 + 1 < 1)
      {
        uint64_t v29 = 0;
      }
      else
      {
        if (v29 == 1)
        {
          uint64_t v8 = v31;
LABEL_63:
          if (v8) {
            goto LABEL_286;
          }
          goto LABEL_64;
        }
        uint64_t v32 = (uint64_t *)(v9 + 48);
        unint64_t v33 = 1;
        while (1)
        {
          uint64_t v34 = *v32;
          v32 += 3;
          uint64_t v8 = (void *)((char *)v31 - v34);
          if (__OFSUB__(v31, v34)) {
            goto LABEL_270;
          }
          if (__OFADD__(v8, 1)) {
            goto LABEL_271;
          }
          if ((uint64_t)v8 + 1 < 1) {
            break;
          }
          ++v33;
          uint64_t v31 = v8;
          if (v29 == v33) {
            goto LABEL_63;
          }
        }
        uint64_t v29 = v33;
        uint64_t v8 = v31;
      }
LABEL_64:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v21 = v7 & 0xFFFFFFFFFFFFF0FFLL | (v29 << 8);
      uint64_t v6 = (void *)a2;
      goto LABEL_65;
    }
    uint64_t v8 = 0;
LABEL_66:
    uint64_t v22 = (char *)v6 - (char *)v8;
    BOOL v4 = v119;
    if (__OFSUB__(v6, v8)) {
      goto LABEL_269;
    }
    uint64_t v8 = v107;
LABEL_68:
    if (v14 == v22) {
      return swift_release_n();
    }
    uint64_t v24 = v8[11];
    if (v4 != v24) {
      goto LABEL_252;
    }
    if (v13)
    {
      uint64_t v3 = v12;
      unint64_t v35 = (void *)(v13 + 24 * ((v12 >> ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v12 = v35[4];
      unint64_t v36 = v35[5];
      uint64_t v9 = v35[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      long long v113 = v36;
      uint64_t v114 = v12;
    }
    else
    {
      uint64_t v37 = v8[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v12, v37);
      long long v113 = v39;
      uint64_t v114 = v38;
      uint64_t result = swift_unknownObjectRelease();
      if (v4 != v8[11]) {
        goto LABEL_275;
      }
      uint64_t v40 = v8[8];
      swift_unknownObjectRetain();
      uint64_t v3 = v12;
      uint64_t v9 = specialized Rope._Node.subscript.getter(v12, v40);
      uint64_t v12 = v41;
      BOOL v4 = v119;
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v14 + v9;
    if (__OFADD__(v14, v9)) {
      goto LABEL_253;
    }
    if (v14 >= v7) {
      uint64_t v16 = v7;
    }
    else {
      uint64_t v16 = v14;
    }
    if (v14 < (uint64_t)v6) {
      uint64_t v16 = (uint64_t)v6;
    }
    if (v24 <= (uint64_t)v6) {
      uint64_t v42 = (uint64_t)v6;
    }
    else {
      uint64_t v42 = v14 + v9;
    }
    if (v24 <= v7) {
      uint64_t v24 = v42;
    }
    else {
      uint64_t v24 = v7;
    }
    if (v16 == v24)
    {
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      id v100 = v16;
      long long v14 = v24;
LABEL_261:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v12 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v100 << 8);
      uint64_t v6 = (void *)a2;
      if (v4) {
        goto LABEL_13;
      }
LABEL_262:
      uint64_t result = swift_release();
      uint64_t v115 = 0;
      uint64_t v15 = __OFSUB__(v6, v14);
      long long v14 = (uint64_t)v6 - v14;
      if (v15) {
        goto LABEL_264;
      }
      goto LABEL_14;
    }
    uint64_t v15 = __OFSUB__(v24, v16);
    v24 -= v16;
    uint64_t v117 = v24;
    if (v15) {
      goto LABEL_255;
    }
    uint64_t v43 = v8[8];
    uint64_t v9 = v8[9];
    uint64_t v12 = v8[10];
    uint64_t v24 = v8[11];
    uint64_t v122 = v4;
    char v123 = (uint64_t *)v3;
    uint64_t v124 = v13;
    uint64_t v16 = v115 + 1;
    if (__OFADD__(v115, 1)) {
      goto LABEL_256;
    }
    if (v4 != v24) {
      goto LABEL_257;
    }
    ++v115;
    if (v13)
    {
      uint64_t v44 = (void *)(v13 + 24 * ((v3 >> ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v9 = v44[3];
      uint64_t v12 = v44[4];
      BOOL v4 = v44[5];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v9 = specialized Rope._Node.subscript.getter(v3, v43);
      uint64_t v12 = v45;
      BOOL v4 = v46;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = __OFADD__(v14, v9);
    v14 += v9;
    if (v15) {
      goto LABEL_258;
    }
    if (v43)
    {
      uint64_t v47 = ((-15 << ((4 * *(unsigned char *)(v43 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v43 + 18) | ((unint64_t)*(unsigned __int16 *)(v43 + 16) << ((4 * *(unsigned char *)(v43 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v47 = 0;
    }
    BOOL v4 = v119;
    uint64_t v12 = v3;
    uint64_t v48 = v3 >= v47;
    uint64_t v3 = (unint64_t)v111;
    if (v48) {
      goto LABEL_259;
    }
    if (v13)
    {
      uint64_t v49 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
      uint64_t v50 = ((v12 >> v49) & 0xF) + 1;
      if (v50 < *(unsigned __int16 *)(v13 + 16))
      {
        uint64_t v12 = (v50 << v49) | ((-15 << v49) - 1) & v12;
        uint64_t result = swift_unknownObjectRelease_n();
        goto LABEL_107;
      }
    }
    uint64_t v51 = *(unsigned __int8 *)(v43 + 18);
    uint64_t v52 = (4 * v51 + 8) & 0x3C;
    long long v53 = (v12 >> v52) & 0xF;
    uint64_t v121 = v53;
    if (!v51) {
      break;
    }
    swift_unknownObjectRetain();
    uint64_t v9 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v43 + 24, &v121, (uint64_t)&v122, v43, v51);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v6 = (void *)a2;
    if ((v9 & 1) == 0) {
      goto LABEL_110;
    }
    uint64_t result = swift_unknownObjectRelease_n();
    BOOL v4 = v122;
    uint64_t v12 = (unint64_t)v123;
    uint64_t v13 = v124;
    if (v14 >= v7) {
      goto LABEL_114;
    }
LABEL_108:
    uint64_t result = swift_release();
LABEL_180:
    if (v117)
    {
      uint64_t v75 = v111[4];
      uint64_t v9 = v111[5];
      uint64_t v76 = v111[6];
      *uint64_t v106 = 0;
      v106[1] = 0;
      v106[2] = 0;
      if (v9)
      {
        uint64_t v110 = v12;
        uint64_t v120 = v4;
        unint64_t v77 = v111[1];
        uint64_t v78 = v111[2];
        unint64_t v79 = v111[3];
        *long long v105 = 0;
        v105[1] = 0;
        v105[2] = 0;
        if (!v77)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
          unint64_t v77 = swift_allocObject();
          unint64_t v79 = 0;
          uint64_t v78 = 0;
          *(_WORD *)(v77 + 16) = 0;
          *(unsigned char *)(v77 + 18) = 0;
        }
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t result = swift_isUniquelyReferenced_nonNull();
        if ((result & 1) == 0)
        {
          char v80 = specialized Rope._Node.copy()(v77);
          uint64_t v78 = v81;
          unint64_t v79 = v82;
          uint64_t result = swift_unknownObjectRelease();
          unint64_t v77 = v80;
        }
        uint64_t v15 = __OFADD__(v78, 1);
        uint64_t v83 = v78 + 1;
        if (v15) {
          goto LABEL_272;
        }
        uint64_t v15 = __OFADD__(v79, v75);
        uint64_t v84 = v79 + v75;
        if (v15) {
          goto LABEL_273;
        }
        uint64_t v85 = *(unsigned __int16 *)(v77 + 16);
        uint64_t v86 = (void *)(v77 + 24 * *(unsigned __int16 *)(v77 + 16));
        v86[3] = v75;
        v86[4] = v9;
        v86[5] = v76;
        if (v85 == 0xFFFF) {
          goto LABEL_274;
        }
        uint64_t v87 = v85 + 1;
        *(_WORD *)(v77 + 16) = v87;
        if (v87 == 15)
        {
          uint64_t v88 = swift_unknownObjectRetain();
          specialized Rope.Builder._appendNow(_:)(v88, v83, v84);
          uint64_t v3 = (unint64_t)v111;
          char v89 = v113;
          swift_bridgeObjectRelease();
          uint64_t v90 = v114;
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v9 = v113;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          v111[1] = v77;
          v111[2] = v83;
          uint64_t v90 = v114;
          v111[3] = v84;
          char v89 = v113;
        }
        uint64_t v7 = a3;
        uint64_t v6 = (void *)a2;
        swift_bridgeObjectRelease();
        outlined consume of Rope<AttributedString._InternalRun>._Item?(*(void *)(v3 + 32), *(void *)(v3 + 40));
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)(v3 + 32) = v117;
        *(void *)(v3 + 40) = v90;
        *(void *)(v3 + 48) = v89;
        uint64_t v8 = v107;
        BOOL v4 = v120;
        uint64_t v12 = v110;
      }
      else
      {
        uint64_t v16 = v117;
        v111[4] = v117;
        v111[5] = v114;
        uint64_t v6 = (void *)a2;
        v111[6] = v113;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  uint64_t v9 = v53 + 1;
  if (v53 + 1 < (unint64_t)*(unsigned __int16 *)(v43 + 16))
  {
    uint64_t result = swift_unknownObjectRelease_n();
    uint64_t v12 = (v9 << v52) | ((-15 << v52) - 1) & v12;
    uint64_t v13 = v43;
LABEL_107:
    uint64_t v6 = (void *)a2;
    if (v14 >= v7) {
      goto LABEL_114;
    }
    goto LABEL_108;
  }
  uint64_t v6 = (void *)a2;
LABEL_110:
  if (v43)
  {
    uint64_t v54 = *(unsigned __int8 *)(v43 + 18);
    uint64_t v9 = *(unsigned __int16 *)(v43 + 16);
    uint64_t result = swift_unknownObjectRelease_n();
    long long v55 = (4 * v54 + 8) & 0x3C;
    uint64_t v56 = ((-15 << v55) - 1) & v54;
    uint64_t v6 = (void *)a2;
    uint64_t v12 = v56 | (v9 << v55);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0;
  uint64_t v122 = v119;
  if (v14 < v7) {
    goto LABEL_108;
  }
LABEL_114:
  uint64_t v57 = v8[8];
  if (v6 != (void *)v7)
  {
    BOOL v4 = v8[11];
    if (v57)
    {
      long long v14 = v8[10];
      uint64_t v115 = v8[9];
      char v66 = *(unsigned __int8 *)(v57 + 18);
      uint64_t v9 = *(unsigned __int16 *)(v57 + 16);
      uint64_t result = swift_release();
      uint64_t v13 = 0;
      unint64_t v67 = (4 * v66 + 8) & 0x3C;
      unint64_t v68 = ((-15 << v67) - 1) & v66;
      uint64_t v6 = (void *)a2;
      uint64_t v12 = v68 | (v9 << v67);
    }
    else
    {
      uint64_t result = swift_release();
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v115 = 0;
      long long v14 = 0;
    }
    goto LABEL_180;
  }
  uint64_t v7 = v8[10];
  if (v57) {
    char v58 = v8[10];
  }
  else {
    char v58 = 0;
  }
  if (v58 < (uint64_t)v6) {
    goto LABEL_281;
  }
  uint64_t v119 = v8[11];
  if (!v57)
  {
    uint64_t result = swift_release();
    BOOL v4 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    uint64_t v115 = 0;
LABEL_178:
    long long v14 = (uint64_t)v6 - v4;
    uint64_t v7 = a3;
    if (__OFSUB__(v6, v4)) {
      goto LABEL_282;
    }
    BOOL v4 = v119;
    goto LABEL_180;
  }
  uint64_t v59 = v8[9];
  uint64_t v12 = *(unsigned __int8 *)(v57 + 18);
  if (v7 <= (uint64_t)v6 || !*(_WORD *)(v57 + 16))
  {
    uint64_t v12 = ((-15 << ((4 * v12 + 8) & 0x3C)) - 1) & v12 | ((unint64_t)*(unsigned __int16 *)(v57 + 16) << ((4 * v12 + 8) & 0x3C));
    swift_unknownObjectRetain();
    BOOL v4 = 0;
    uint64_t v13 = 0;
LABEL_177:
    swift_unknownObjectRetain();
    uint64_t v115 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v119, v12, v13, v57, v59);
    swift_release();
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_178;
  }
  if (*(unsigned char *)(v57 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    BOOL v4 = (uint64_t)v6;
    uint64_t v9 = v57;
    while (1)
    {
      uint64_t v24 = *(unsigned __int16 *)(v9 + 16);
      if (!*(_WORD *)(v9 + 16)) {
        goto LABEL_125;
      }
      uint64_t v61 = *(void *)(v9 + 40);
      uint64_t v62 = v4 - v61;
      if (__OFSUB__(v4, v61)) {
        goto LABEL_266;
      }
      if (__OFADD__(v62, 1)) {
        goto LABEL_267;
      }
      if (v62 + 1 <= 0)
      {
        uint64_t v24 = 0;
      }
      else
      {
        if (v24 == 1)
        {
          v4 -= v61;
LABEL_125:
          if (v4) {
            goto LABEL_265;
          }
          goto LABEL_126;
        }
        uint64_t v63 = *(void *)(v9 + 64);
        uint64_t v15 = __OFSUB__(v62, v63);
        uint64_t v16 = v62 - v63;
        if (v15) {
          goto LABEL_279;
        }
        if (__OFADD__(v16, 1)) {
          goto LABEL_280;
        }
        if (v16 + 1 >= 1)
        {
          if (v24 != 2)
          {
            uint64_t v64 = (void *)(v9 + 88);
            uint64_t v65 = 2;
            while (v24 != v65)
            {
              BOOL v4 = v16 - *v64;
              if (__OFSUB__(v16, *v64)) {
                goto LABEL_250;
              }
              if (__OFADD__(v4, 1)) {
                goto LABEL_251;
              }
              if (v4 + 1 < 1)
              {
                uint64_t v24 = v65;
                BOOL v4 = v16;
                goto LABEL_126;
              }
              ++v65;
              v64 += 3;
              uint64_t v16 = v4;
              if (v24 == v65) {
                goto LABEL_125;
              }
            }
LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
            goto LABEL_254;
          }
          BOOL v4 = v16;
          goto LABEL_125;
        }
        uint64_t v24 = 1;
        BOOL v4 = v62;
      }
LABEL_126:
      uint64_t v60 = (4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C;
      uint64_t v12 = ((-15 << v60) - 1) & v12 | (v24 << v60);
      uint64_t v13 = *(void *)(v9 + 24 + 24 * v24);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v9 = v13;
      if (!*(unsigned char *)(v13 + 18)) {
        goto LABEL_153;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v12 = 0;
  BOOL v4 = (uint64_t)v6;
  uint64_t v13 = v57;
LABEL_153:
  unint64_t v69 = *(unsigned __int16 *)(v13 + 16);
  if (!*(_WORD *)(v13 + 16))
  {
LABEL_162:
    uint64_t v71 = v4;
    goto LABEL_163;
  }
  uint64_t v70 = *(void *)(v13 + 24);
  uint64_t v15 = __OFSUB__(v4, v70);
  uint64_t v71 = v4 - v70;
  if (v15) {
    goto LABEL_296;
  }
  if (__OFADD__(v71, 1)) {
    goto LABEL_297;
  }
  if (v71 + 1 <= 0)
  {
    unint64_t v69 = 0;
LABEL_176:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v12 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v69 << 8);
    uint64_t v6 = (void *)a2;
    goto LABEL_177;
  }
  if (v69 == 1)
  {
LABEL_163:
    if (v71) {
      goto LABEL_295;
    }
    BOOL v4 = 0;
    goto LABEL_176;
  }
  uint64_t v72 = *(void *)(v13 + 48);
  BOOL v4 = v71 - v72;
  if (__OFSUB__(v71, v72)) {
    goto LABEL_301;
  }
  if (__OFADD__(v4, 1)) {
    goto LABEL_302;
  }
  if (v4 + 1 < 1)
  {
    unint64_t v69 = 1;
    BOOL v4 = v71;
    goto LABEL_176;
  }
  if (v69 == 2) {
    goto LABEL_162;
  }
  unint64_t v73 = (void *)(v13 + 72);
  unint64_t v74 = 2;
  while (v69 != v74)
  {
    uint64_t v71 = v4 - *v73;
    if (__OFSUB__(v4, *v73)) {
      goto LABEL_290;
    }
    if (__OFADD__(v71, 1)) {
      goto LABEL_291;
    }
    if (v71 + 1 < 1)
    {
      unint64_t v69 = v74;
      goto LABEL_176;
    }
    ++v74;
    v73 += 3;
    BOOL v4 = v71;
    if (v69 == v74) {
      goto LABEL_163;
    }
  }
LABEL_289:
  __break(1u);
LABEL_290:
  __break(1u);
LABEL_291:
  __break(1u);
LABEL_292:
  __break(1u);
LABEL_293:
  __break(1u);
LABEL_294:
  __break(1u);
LABEL_295:
  __break(1u);
LABEL_296:
  __break(1u);
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
LABEL_300:
  __break(1u);
LABEL_301:
  __break(1u);
LABEL_302:
  __break(1u);
LABEL_303:
  __break(1u);
LABEL_304:
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *(unsigned __int16 *)result;
  uint64_t v11 = a3;
  if (!*(_WORD *)result) {
    goto LABEL_15;
  }
  uint64_t v12 = a3 - *a2;
  if (__OFSUB__(a3, *a2))
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  if (__OFADD__(v12, 1))
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (v12 + 1 < 1)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a3;
    BOOL v13 = __OFSUB__(a4, a3);
    uint64_t v14 = a4 - a3;
    if (v13) {
      goto LABEL_40;
    }
  }
  else
  {
    if (v10 == 1)
    {
      uint64_t v11 = a3 - *a2;
LABEL_15:
      if (!v11)
      {
        uint64_t v12 = 0;
        BOOL v13 = __OFSUB__(a4, a3);
        uint64_t v14 = a4 - a3;
        if (!v13) {
          goto LABEL_17;
        }
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    uint64_t v15 = a2 + 3;
    uint64_t v16 = 1;
    while (1)
    {
      uint64_t v17 = *v15;
      v15 += 3;
      uint64_t v11 = v12 - v17;
      if (__OFSUB__(v12, v17))
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      if (__OFADD__(v11, 1)) {
        goto LABEL_73;
      }
      if (v11 + 1 < 1) {
        break;
      }
      ++v16;
      uint64_t v12 = v11;
      if (v10 == v16) {
        goto LABEL_15;
      }
    }
    uint64_t v10 = v16;
    BOOL v13 = __OFSUB__(a4, a3);
    uint64_t v14 = a4 - a3;
    if (v13) {
      goto LABEL_40;
    }
  }
LABEL_17:
  uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(v10, v12, v14, 1, (unsigned __int16 *)result, (uint64_t)a2);
  uint64_t v60 = v18;
  uint64_t v19 = &a2[3 * v10];
  uint64_t v20 = *v19;
  uint64_t v6 = v19[1];
  uint64_t v7 = v19[2];
  if (v10 == result)
  {
    if (!__OFSUB__(v20, v12))
    {
      uint64_t v21 = v18 - v12;
      if (!__OFSUB__(v18, v12))
      {
        if (((v21 | v12) & 0x8000000000000000) == 0 && v20 >= v12 && v20 - v12 >= v21)
        {
          if (v21)
          {
            uint64_t v23 = a5[4];
            uint64_t v24 = a5[5];
            uint64_t v25 = a5[6];
            a5[5] = 0;
            a5[6] = 0;
            a5[4] = 0;
            if (v24)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized Rope.Builder._appendNow(_:)(v23, v24, v25);
              uint64_t result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
              a5[4] = v21;
              a5[5] = v6;
              a5[6] = v7;
            }
            else
            {
              a5[4] = v21;
              a5[5] = v6;
              a5[6] = v7;
              swift_bridgeObjectRetain();
              return swift_bridgeObjectRetain();
            }
          }
          return result;
        }
        goto LABEL_82;
      }
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v61 = result;
  if (v12 < 0) {
    goto LABEL_83;
  }
  uint64_t v5 = v20 - v12;
  if (v20 < v12) {
    goto LABEL_83;
  }
  if (v20 == v12)
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    goto LABEL_42;
  }
  uint64_t v26 = a5[4];
  uint64_t v27 = a5[5];
  uint64_t v28 = a5[6];
  a5[5] = 0;
  a5[6] = 0;
  a5[4] = 0;
  if (v27)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Rope.Builder._appendNow(_:)(v26, v27, v28);
    uint64_t result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
    a5[4] = v5;
    a5[5] = v6;
    a5[6] = v7;
    goto LABEL_42;
  }
LABEL_41:
  a5[4] = v5;
  a5[5] = v6;
  a5[6] = v7;
  swift_bridgeObjectRetain_n();
  uint64_t result = swift_bridgeObjectRetain_n();
LABEL_42:
  uint64_t v29 = v10 + 1;
  uint64_t v30 = v61;
  if (__OFADD__(v10, 1))
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (v61 < v29)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v59 = a2;
  if (v29 != v61)
  {
    if (v29 < v61)
    {
      uint64_t v37 = ~v10 + v61;
      uint64_t v38 = &a2[3 * v10 + 5];
      while (1)
      {
        uint64_t v39 = *(v38 - 2);
        if (v39)
        {
          uint64_t v40 = *(v38 - 1);
          uint64_t v41 = *v38;
          uint64_t v42 = a5[4];
          uint64_t v43 = a5[5];
          uint64_t v44 = a5[6];
          a5[4] = 0;
          a5[5] = 0;
          a5[6] = 0;
          if (v43)
          {
            uint64_t v62 = v42;
            uint64_t v63 = v40;
            uint64_t v64 = v41;
            uint64_t v45 = a5[1];
            uint64_t v46 = a5[2];
            uint64_t v47 = a5[3];
            a5[1] = 0;
            a5[2] = 0;
            a5[3] = 0;
            if (!v45)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
              uint64_t v45 = swift_allocObject();
              uint64_t v47 = 0;
              uint64_t v46 = 0;
              *(_WORD *)(v45 + 16) = 0;
              *(unsigned char *)(v45 + 18) = 0;
            }
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            uint64_t result = swift_isUniquelyReferenced_nonNull();
            if ((result & 1) == 0)
            {
              uint64_t v48 = specialized Rope._Node.copy()(v45);
              uint64_t v46 = v49;
              uint64_t v47 = v50;
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v45 = v48;
              uint64_t v30 = v61;
            }
            BOOL v13 = __OFADD__(v46, 1);
            uint64_t v51 = v46 + 1;
            if (v13) {
              goto LABEL_74;
            }
            BOOL v13 = __OFADD__(v47, v62);
            uint64_t v52 = v47 + v62;
            if (v13) {
              goto LABEL_75;
            }
            int v53 = *(unsigned __int16 *)(v45 + 16);
            uint64_t v54 = (void *)(v45 + 24 * *(unsigned __int16 *)(v45 + 16));
            v54[3] = v62;
            v54[4] = v43;
            v54[5] = v44;
            if (v53 == 0xFFFF) {
              goto LABEL_76;
            }
            int v55 = v53 + 1;
            *(_WORD *)(v45 + 16) = v55;
            if (v55 == 15)
            {
              uint64_t v56 = swift_unknownObjectRetain();
              specialized Rope.Builder._appendNow(_:)(v56, v51, v52);
              uint64_t v57 = v64;
              swift_bridgeObjectRelease();
              uint64_t v58 = v63;
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a5[1] = v45;
              a5[2] = v51;
              a5[3] = v52;
              uint64_t v57 = v64;
              swift_bridgeObjectRelease();
              uint64_t v58 = v63;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
            a5[4] = v39;
            a5[5] = v58;
            a5[6] = v57;
          }
          else
          {
            a5[4] = v39;
            a5[5] = v40;
            a5[6] = v41;
            swift_bridgeObjectRetain();
            uint64_t result = swift_bridgeObjectRetain();
          }
        }
        v38 += 3;
        if (!--v37) {
          goto LABEL_45;
        }
      }
    }
    goto LABEL_87;
  }
LABEL_45:
  if (v60 < 0 || (uint64_t v31 = &v59[3 * v30], *v31 < v60))
  {
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    return result;
  }
  if (v60)
  {
    uint64_t v33 = v31[1];
    uint64_t v32 = v31[2];
    uint64_t v34 = a5[4];
    uint64_t v35 = a5[5];
    uint64_t v36 = a5[6];
    a5[5] = 0;
    a5[6] = 0;
    a5[4] = 0;
    if (v35)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v34, v35, v36);
      outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
      a5[4] = v60;
      a5[5] = v33;
      a5[6] = v32;
    }
    else
    {
      a5[4] = v60;
      a5[5] = v33;
      a5[6] = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t specialized Rope.builder<A>(splittingAt:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = result;
  ++*(void *)(v2 + 24);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v31 = MEMORY[0x1E4FBC860];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  uint64_t v37 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)v2;
  if (!*(void *)v2 || !*(_WORD *)(v6 + 16))
  {
    if (result) {
      goto LABEL_39;
    }
    *(void *)a2 = MEMORY[0x1E4FBC860];
    *(_OWORD *)(a2 + 8) = 0uLL;
    *(_OWORD *)(a2 + 24) = 0uLL;
    *(_OWORD *)(a2 + 40) = 0uLL;
    *(_OWORD *)(a2 + 56) = 0uLL;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = v5;
    return result;
  }
  long long v7 = *(_OWORD *)(v2 + 8);
  uint64_t v30 = result;
  uint64_t v28 = v6;
  long long v29 = v7;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)uint64_t v2 = 0;
  if (!*(unsigned char *)(v6 + 18))
  {
LABEL_26:
    uint64_t v15 = specialized closure #2 in Rope.builder<A>(splittingAt:in:)(v6 + 16, (void *)(v6 + 24), &v30);
    uint64_t v17 = v16;
    swift_unknownObjectRetain();
    uint64_t result = specialized Rope._Node._leafSplit(at:into:)(v15, (uint64_t)&v31, v6, (void *)v29, *((uint64_t *)&v29 + 1));
    if (v17 < 0) {
      goto LABEL_40;
    }
    uint64_t v20 = result - v17;
    if (result < v17) {
      goto LABEL_40;
    }
    uint64_t v21 = v18;
    uint64_t v22 = v19;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Rope.Builder._insertAfterTip(_:)(v20, v21, v22);
    if (v17)
    {
      uint64_t v23 = *((void *)&v33 + 1);
      long long v24 = v34;
      *((void *)&v33 + 1) = 0;
      long long v34 = 0uLL;
      if ((void)v24)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v23, v24, *((uint64_t *)&v24 + 1));
        outlined consume of Rope<AttributedString._InternalRun>._Item?(*((uint64_t *)&v33 + 1), v34);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t result = swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease_n();
      uint64_t v17 = *((void *)&v33 + 1);
      uint64_t v22 = *((void *)&v34 + 1);
      uint64_t v21 = v34;
    }
    uint64_t v25 = v33;
    uint64_t v26 = v36;
    uint64_t v27 = v37;
    *(void *)a2 = v31;
    *(_OWORD *)(a2 + 8) = v32;
    *(void *)(a2 + 24) = v25;
    *(void *)(a2 + 32) = v17;
    *(void *)(a2 + 40) = v21;
    *(void *)(a2 + 48) = v22;
    *(_OWORD *)(a2 + 56) = v35;
    *(void *)(a2 + 72) = v26;
    *(void *)(a2 + 80) = v27;
    return result;
  }
  while (1)
  {
    uint64_t v8 = *(unsigned __int16 *)(v6 + 16);
    if (!*(_WORD *)(v6 + 16))
    {
      if (v3) {
        goto LABEL_41;
      }
      uint64_t result = -1;
      goto LABEL_6;
    }
    uint64_t v9 = *(void *)(v6 + 40);
    BOOL v10 = __OFSUB__(v3, v9);
    uint64_t v11 = v3 - v9;
    if (v10) {
      goto LABEL_37;
    }
    if (v11 > 0) {
      break;
    }
    uint64_t result = 0;
LABEL_6:
    uint64_t result = specialized Rope._Node._innerSplit(at:into:)(result, (uint64_t)&v31);
    uint64_t v6 = v28;
    if (!*(unsigned char *)(v28 + 18))
    {
      uint64_t v30 = v3;
      goto LABEL_26;
    }
  }
  if (v8 == 1) {
    goto LABEL_41;
  }
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v3 = v11 - v12;
  if (__OFSUB__(v11, v12)) {
    goto LABEL_38;
  }
  if (v3 < 1)
  {
    uint64_t result = 1;
    uint64_t v3 = v11;
    goto LABEL_6;
  }
  if (v8 == 2) {
    goto LABEL_41;
  }
  BOOL v13 = (void *)(v6 + 88);
  uint64_t result = 2;
  while (v8 != result)
  {
    uint64_t v14 = v3 - *v13;
    if (__OFSUB__(v3, *v13)) {
      goto LABEL_36;
    }
    if (v14 < 1) {
      goto LABEL_6;
    }
    ++result;
    v13 += 3;
    uint64_t v3 = v14;
    if (v8 == result) {
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized closure #2 in Rope.builder<A>(splittingAt:in:)(uint64_t result, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(unsigned __int16 *)result;
  if (!*(_WORD *)result) {
    goto LABEL_10;
  }
  uint64_t v6 = v4 - *a2;
  if (__OFSUB__(v4, *a2))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  if (v6 < 1) {
    return 0;
  }
  if (v5 != 1)
  {
    long long v7 = a2 + 3;
    uint64_t result = 1;
    uint64_t v4 = v6;
    while (1)
    {
      uint64_t v8 = *v7;
      v7 += 3;
      uint64_t v9 = v4 - v8;
      if (__OFSUB__(v4, v8)) {
        break;
      }
      if (v9 < 1) {
        return result;
      }
      ++result;
      uint64_t v4 = v9;
      if (v5 == result) {
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
  do
  {
LABEL_9:
    __break(1u);
LABEL_10:
    ;
  }
  while (v4);
  return -1;
}

uint64_t AttributedString._InternalRuns._exactIndex(atUTF8Offset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  if (a2) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = 0;
  }
  if (result < 0) {
    goto LABEL_56;
  }
  uint64_t v8 = result;
  if (v7 < result) {
    goto LABEL_56;
  }
  unint64_t v9 = a5;
  uint64_t v10 = a3;
  if (!a2 || a4 <= result || !*(_WORD *)(a2 + 16))
  {
    unint64_t v23 = swift_unknownObjectRetain();
    unint64_t v24 = specialized Rope._endPath.getter(v23);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    if (!a2) {
      goto LABEL_47;
    }
    goto LABEL_28;
  }
  uint64_t v32 = a3;
  unint64_t v33 = a5;
  uint64_t v12 = *(unsigned __int8 *)(a2 + 18);
  if (!*(unsigned char *)(a2 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v9 = 0;
    uint64_t v13 = v8;
    uint64_t v14 = a2;
    uint64_t v28 = *(unsigned __int16 *)(a2 + 16);
    if (*(_WORD *)(a2 + 16)) {
      goto LABEL_34;
    }
LABEL_45:
    if (!v13)
    {
      while (1)
      {
LABEL_46:
        swift_unknownObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v24 = v9 | (v28 << 8);
        uint64_t v10 = v32;
        unint64_t v9 = v33;
        if (a2)
        {
LABEL_28:
          swift_unknownObjectRetain();
          uint64_t v26 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v24, v14, a2, v10);
          uint64_t result = swift_unknownObjectRelease();
          unint64_t v27 = v8 - v13;
          if (!__OFSUB__(v8, v13)) {
            goto LABEL_29;
          }
        }
        else
        {
LABEL_47:
          uint64_t v26 = 0;
          unint64_t v27 = v8 - v13;
          if (!__OFSUB__(v8, v13))
          {
LABEL_29:
            if (!v13)
            {
              *a6 = v9;
              a6[1] = v24;
              a6[2] = v14;
              a6[3] = v26;
              a6[4] = v27;
              return result;
            }
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
        }
        __break(1u);
LABEL_50:
        uint64_t v28 = v25;
        uint64_t v13 = v27;
      }
    }
    goto LABEL_62;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v13 = v8;
  uint64_t v14 = a2;
  while (2)
  {
    uint64_t v16 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16)) {
      goto LABEL_12;
    }
    uint64_t v17 = *(void *)(v14 + 40);
    BOOL v18 = __OFSUB__(v13, v17);
    uint64_t v19 = v13 - v17;
    if (v18) {
      goto LABEL_54;
    }
    if (__OFADD__(v19, 1)) {
      goto LABEL_55;
    }
    if (v19 + 1 < 1)
    {
      uint64_t v16 = 0;
      goto LABEL_13;
    }
    if (v16 == 1)
    {
      uint64_t v13 = v19;
LABEL_12:
      if (!v13) {
        goto LABEL_13;
      }
      goto LABEL_53;
    }
    uint64_t v20 = (uint64_t *)(v14 + 64);
    uint64_t v21 = 1;
    while (1)
    {
      uint64_t v22 = *v20;
      v20 += 3;
      uint64_t v13 = v19 - v22;
      if (__OFSUB__(v19, v22))
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      if (__OFADD__(v13, 1)) {
        goto LABEL_52;
      }
      if (v13 + 1 < 1) {
        break;
      }
      ++v21;
      uint64_t v19 = v13;
      if (v16 == v21) {
        goto LABEL_12;
      }
    }
    uint64_t v16 = v21;
    uint64_t v13 = v19;
LABEL_13:
    char v15 = (4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C;
    uint64_t v12 = ((-15 << v15) - 1) & v12 | (v16 << v15);
    uint64_t v14 = *(void *)(v14 + 24 + 24 * v16);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    if (*(unsigned char *)(v14 + 18)) {
      continue;
    }
    break;
  }
  unint64_t v9 = v12 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v28 = *(unsigned __int16 *)(v14 + 16);
  if (!*(_WORD *)(v14 + 16)) {
    goto LABEL_45;
  }
LABEL_34:
  uint64_t v29 = *(void *)(v14 + 24);
  BOOL v18 = __OFSUB__(v13, v29);
  unint64_t v27 = v13 - v29;
  if (v18) {
    goto LABEL_60;
  }
  if (!__OFADD__(v27, 1))
  {
    if ((uint64_t)(v27 + 1) < 1)
    {
      uint64_t v28 = 0;
      goto LABEL_46;
    }
    if (v28 == 1)
    {
      uint64_t v13 = v27;
      goto LABEL_45;
    }
    uint64_t v30 = (uint64_t *)(v14 + 48);
    uint64_t v25 = 1;
    while (1)
    {
      uint64_t v31 = *v30;
      v30 += 3;
      uint64_t v13 = v27 - v31;
      if (__OFSUB__(v27, v31)) {
        goto LABEL_58;
      }
      if (__OFADD__(v13, 1)) {
        break;
      }
      if (v13 + 1 < 1) {
        goto LABEL_50;
      }
      ++v25;
      unint64_t v27 = v13;
      if (v28 == v25) {
        goto LABEL_45;
      }
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
  }
  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

Swift::String __swiftcall BinaryInteger.formatted()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IntegerFormatStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v21 - v4);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static LocaleCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, &v22);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  uint64_t v8 = v22;
  unint64_t v9 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  uint64_t v10 = (char *)v5 + *(int *)(v2 + 36);
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = 0;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0x1FFFFFFFELL;
  *((void *)v10 + 7) = 0;
  *((void *)v10 + 8) = 0;
  *((void *)v10 + 6) = 0;
  *((_DWORD *)v10 + 18) = 131584;
  *((_WORD *)v10 + 38) = 512;
  uint64_t v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v12 = &v10[v11[9]];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = &v10[v11[10]];
  *(void *)uint64_t v14 = 0;
  v14[8] = -1;
  v10[v11[11]] = 3;
  uint64_t *v5 = v8;
  v5[1] = v9;
  uint64_t v15 = IntegerFormatStyle.format(_:)(v1, v2);
  uint64_t v17 = v16;
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v18 = v15;
  uint64_t v19 = v17;
  result._unint64_t object = v19;
  result._uint64_t countAndFlagsBits = v18;
  return result;
}

uint64_t IntegerFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  void (*v36)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  char v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  BOOL v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  char v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  char *v62;
  char v63;
  char *v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  char *v69;
  char v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t AssociatedConformanceWitness;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned char v119[144];
  uint64_t v120;

  uint64_t v3 = v2;
  long long v113 = a1;
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v102 = *(void *)(AssociatedTypeWitness - 8);
  long long v103 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v101 = (char *)&v94 - v8;
  uint64_t v110 = v5;
  id v100 = *(void *)(*(void *)(v5 + 24) + 16);
  char v96 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v96);
  long long v99 = (char *)&v94 - v9;
  long long v111 = v6;
  uint64_t v114 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v10);
  long long v97 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  long long v98 = (char *)&v94 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v106 = (char *)&v94 - v15;
  MEMORY[0x1F4188790](v16);
  long long v105 = (char *)&v94 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v112 = (char *)&v94 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v108 = (char *)&v94 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v107 = (char *)&v94 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v115 = (char *)&v94 - v25;
  uint64_t v26 = type metadata accessor for ICUNumberFormatter.Signature(0);
  uint64_t v27 = v26 - 8;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v94 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = v3 + *(int *)(a2 + 36);
  uint64_t v30 = *(void *)(v3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 472);
  swift_unknownObjectRetain();
  uint64_t v33 = v32(ObjectType, v30);
  uint64_t v35 = v34;
  swift_unknownObjectRelease();
  uint64_t v36 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v30 + 464);
  swift_unknownObjectRetain();
  v36(&v117, ObjectType, v30);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)&v117, (uint64_t)v119, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of NumberFormatStyleConfiguration.Collection(v109, (uint64_t)v29, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v37 = (uint64_t *)&v29[*(int *)(v27 + 28)];
  void *v37 = v33;
  v37[1] = v35;
  outlined init with take of LocalePreferences?((uint64_t)v119, (uint64_t)&v29[*(int *)(v27 + 32)], &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v38 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v29);
  _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_1((uint64_t)v29, type metadata accessor for ICUNumberFormatter.Signature);
  if (!v38)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v112, v113, v111);
    return String.init<A>(_:radix:uppercase:)();
  }
  uint64_t v39 = v115;
  uint64_t v40 = v114 + 16;
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 16);
  uint64_t v42 = v111;
  v41(v115, v113, v111);
  uint64_t v43 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v44 = v107;
  uint64_t v45 = v39;
  uint64_t v46 = v41;
  v41(v107, (uint64_t)v45, v42);
  uint64_t v109 = v38;
  uint64_t v47 = v114;
  long long v104 = v40 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v48 = (v43 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  uint64_t v49 = v44;
  uint64_t v50 = v108;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v47 + 8);
  v51(v49, v42);
  uint64_t v52 = v115;
  v41(v50, (uint64_t)v115, v42);
  if (!v48)
  {
    v51(v50, v42);
    int v53 = v51;
    goto LABEL_12;
  }
  int v53 = v51;
  uint64_t v117 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v54 = v112;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      int v55 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v56 = v54;
      uint64_t v52 = v115;
      v53(v56, v42);
      v53(v50, v42);
      if (v55) {
        goto LABEL_39;
      }
      goto LABEL_12;
    }
LABEL_30:
    uint64_t v71 = dispatch thunk of BinaryInteger._lowWord.getter();
    v53(v50, v42);
    if (v71 < v117) {
      goto LABEL_39;
    }
    goto LABEL_12;
  }
  unint64_t v67 = dispatch thunk of static BinaryInteger.isSigned.getter();
  unint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v67 & 1) == 0)
  {
    uint64_t v52 = v115;
    if (v68 >= 64)
    {
      v51(v50, v42);
      goto LABEL_12;
    }
    goto LABEL_30;
  }
  if (v68 <= 64)
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    unint64_t v77 = v112;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v78 = dispatch thunk of static Comparable.< infix(_:_:)();
    v53(v77, v42);
    unint64_t v79 = v97;
    (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v97, v50, v42);
    if (v78)
    {
      v53(v79, v42);
      uint64_t v52 = v115;
      goto LABEL_39;
    }
    char v80 = v79;
    char v81 = v117;
    uint64_t v82 = dispatch thunk of BinaryInteger._lowWord.getter();
    v53(v80, v42);
    uint64_t v83 = v82 < v81;
    uint64_t v52 = v115;
    if (v83) {
      goto LABEL_39;
    }
  }
  else
  {
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    unint64_t v69 = v112;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v70 = dispatch thunk of static Comparable.< infix(_:_:)();
    v53(v69, v42);
    v53(v50, v42);
    uint64_t v52 = v115;
    if (v70) {
      goto LABEL_39;
    }
  }
LABEL_12:
  uint64_t v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v58 = v105;
  v41(v105, (uint64_t)v52, v42);
  uint64_t v95 = v41;
  if (v57 < 65)
  {
    uint64_t v65 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v53(v58, v42);
    if (v65 == 64)
    {
      char v66 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v59 = v106;
      v41(v106, (uint64_t)v52, v42);
      if ((v66 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v59 = v106;
      v41(v106, (uint64_t)v52, v42);
    }
    v53(v59, v42);
    uint64_t v46 = v95;
    goto LABEL_34;
  }
  v53(v58, v42);
  uint64_t v59 = v106;
  v41(v106, (uint64_t)v52, v42);
LABEL_14:
  uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v60 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v61 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v60)
  {
    if (v61 > 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v62 = v112;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v63 = dispatch thunk of static Comparable.< infix(_:_:)();
      v53(v62, v42);
      uint64_t v64 = v59;
      goto LABEL_33;
    }
  }
  else if (v61 > 63)
  {
    long long v116 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v72 = v112;
    (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v112, v59, v42);
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    unint64_t v73 = v98;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v63 = dispatch thunk of static Comparable.< infix(_:_:)();
    v53(v73, v42);
    uint64_t v64 = v72;
LABEL_33:
    v53(v64, v42);
    uint64_t v52 = v115;
    uint64_t v46 = v95;
    if ((v63 & 1) == 0) {
      goto LABEL_34;
    }
LABEL_39:
    v53(v52, v42);
    uint64_t v84 = (uint64_t)v101;
    dispatch thunk of BinaryInteger.words.getter();
    uint64_t v85 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v86 = v103;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v88 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(v84, v85 & 1, v86, *(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8));
    uint64_t v90 = v89;
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v84, v86);
    uint64_t v91 = *(void *)(v109 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    swift_bridgeObjectRetain();
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v91, v88, v90);
    uint64_t v93 = swift_retain_n();
    MEMORY[0x1F4188790](v93);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v94 - 8), &v117);
    uint64_t v75 = v117;
    uint64_t v76 = v118;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v42 = v111;
    goto LABEL_42;
  }
  dispatch thunk of BinaryInteger._lowWord.getter();
  v53(v59, v42);
  uint64_t v52 = v115;
  uint64_t v46 = v95;
LABEL_34:
  dispatch thunk of BinaryInteger._lowWord.getter();
  v53(v52, v42);
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  unint64_t v74 = swift_retain_n();
  MEMORY[0x1F4188790](v74);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v94 - 8), &v117);
  uint64_t v75 = v117;
  uint64_t v76 = v118;
  swift_release();
LABEL_42:
  swift_release_n();
  if (v76) {
    return v75;
  }
  v46(v112, v113, v42);
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t Sequence.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(v5, a3, a5);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance ListFormatStyle<A, B>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = ListFormatStyle.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t ListFormatStyle.format(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  v16[1] = a1;
  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](a1);
  type metadata accessor for ICUListFormatter();
  uint64_t v8 = (os_unfair_lock_s *)a2[3];
  Swift::UInt v9 = a2[4];
  uint64_t v10 = (void (*)(char *, char *, uint64_t))a2[5];
  static ICUListFormatter.formatter<A, B>(for:)(v3, v5, v8, v9, (Swift::UInt)v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v5);
  unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = v5;
  *((void *)v12 + 3) = v8;
  *((void *)v12 + 4) = v9;
  *((void *)v12 + 5) = v10;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v12[v11], (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v18 = v5;
  uint64_t v19 = v8;
  Swift::UInt v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = partial apply for implicit closure #2 in implicit closure #1 in ListFormatStyle.format(_:);
  uint64_t v23 = v12;
  uint64_t v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOSSIsgnrzr_xSaySSGAGSTRzSSRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(uint64_t *__return_ptr, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.FormatStyle.FormatInput) -> (@owned String), (uint64_t)v17, (uint64_t)v8, v10);
  swift_release();
  uint64_t countAndFlagsBits = ICUListFormatter.format(strings:)((Swift::OpaquePointer)v13)._countAndFlagsBits;
  swift_release();
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t type metadata accessor for ICUListFormatter()
{
  return self;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOSSIsgnrzr_xSaySSGAGSTRzSSRsd__AGRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3, void (*a4)(char *, char *, uint64_t))
{
  void (*v58)(uint64_t *__return_ptr, char *);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  uint64_t v6 = v5;
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v52 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v57 = (char *)&v51 - v14;
  uint64_t v60 = AssociatedTypeWitness;
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v56 = (char *)&v51 - v16;
  uint64_t v17 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v18);
  Swift::UInt v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = a4;
  uint64_t v61 = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v22 = (char *)&v51 - v21;
  uint64_t v23 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v65 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23 & ~(v23 >> 63), 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v4, a3);
  uint64_t v62 = v22;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v23 < 0)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (v23)
  {
    uint64_t v25 = (uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
    uint64_t v26 = (uint64_t (**)(char *, uint64_t))(v55 + 8);
    uint64_t v27 = v61;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    while (1)
    {
      uint64_t v29 = AssociatedConformanceWitness;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v30 = v60;
      uint64_t result = (*v25)(v12, 1, v60);
      if (result == 1) {
        goto LABEL_26;
      }
      v58(&v63, v12);
      if (v6)
      {
        (*(void (**)(char *, uint64_t))(v53 + 8))(v62, v27);
        swift_release();
        return (*v26)(v12, v30);
      }
      uint64_t v6 = 0;
      (*v26)(v12, v30);
      uint64_t v31 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
        uint64_t v31 = v65;
      }
      unint64_t v33 = *(void *)(v31 + 16);
      unint64_t v32 = *(void *)(v31 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        uint64_t v31 = v65;
      }
      uint64_t v34 = v63;
      uint64_t v35 = v64;
      *(void *)(v31 + 16) = v33 + 1;
      uint64_t v36 = v31 + 16 * v33;
      *(void *)(v36 + 32) = v34;
      *(void *)(v36 + 40) = v35;
      --v23;
      uint64_t v27 = v61;
      uint64_t AssociatedConformanceWitness = v29;
      if (!v23) {
        goto LABEL_13;
      }
    }
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
LABEL_13:
  uint64_t v37 = v57;
  uint64_t v38 = v55;
  uint64_t v55 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v37, 1, v60);
  uint64_t v41 = v56;
  if (v40 == 1)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v53 + 8))(v62, v61);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v37, v52);
    return v65;
  }
  else
  {
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    uint64_t v42 = (void (**)(char *, uint64_t))(v38 + 8);
    uint64_t v43 = v60;
    while (1)
    {
      v54(v41, v37, v43);
      v58(&v63, v41);
      if (v6) {
        break;
      }
      uint64_t v6 = 0;
      (*v42)(v41, v43);
      uint64_t v44 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1);
        uint64_t v44 = v65;
      }
      unint64_t v46 = *(void *)(v44 + 16);
      unint64_t v45 = *(void *)(v44 + 24);
      if (v46 >= v45 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
        uint64_t v44 = v65;
      }
      uint64_t v47 = v63;
      uint64_t v48 = v64;
      *(void *)(v44 + 16) = v46 + 1;
      uint64_t v49 = v44 + 16 * v46;
      *(void *)(v49 + 32) = v47;
      *(void *)(v49 + 40) = v48;
      uint64_t v37 = v57;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v43 = v60;
      int v50 = v39(v37, 1, v60);
      uint64_t v41 = v56;
      if (v50 == 1) {
        goto LABEL_14;
      }
    }
    (*v42)(v41, v43);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v62, v61);
    return swift_release();
  }
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.FormatStyle.FormatInput) -> (@owned String)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static ICUListFormatter.formatter<A, B>(for:)(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, Swift::UInt a4, Swift::UInt a5)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v85 = a2;
  uint64_t v86 = a3;
  Swift::UInt v87 = a4;
  Swift::UInt v88 = a5;
  uint64_t v6 = (int *)type metadata accessor for ListFormatStyle();
  uint64_t v7 = *(void *)(a1 + v6[15] + 8);
  uint64_t ObjectType = swift_getObjectType();
  Swift::UInt v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 64);
  swift_unknownObjectRetain();
  uint64_t v10 = v9(ObjectType, v7);
  Swift::UInt v12 = v11;
  uint64_t v13 = swift_unknownObjectRelease();
  uint64_t v14 = v6[13];
  Swift::UInt v15 = *(unsigned __int8 *)(a1 + v6[14]);
  Swift::UInt v16 = *(unsigned __int8 *)(a1 + v14);
  if (one-time initialization token for cache != -1) {
    uint64_t v13 = swift_once();
  }
  uint64_t v17 = (os_unfair_lock_s *)&v68;
  uint64_t v18 = *(os_unfair_lock_s **)algn_1E8EDF408;
  uint64_t v81 = static ICUListFormatter.cache;
  uint64_t v85 = v10;
  uint64_t v86 = (os_unfair_lock_s *)v12;
  Swift::UInt v87 = v15;
  Swift::UInt v88 = v16;
  MEMORY[0x1F4188790](v13);
  uint64_t v19 = v10;
  Swift::UInt v20 = v18 + 6;
  swift_retain_n();
  os_unfair_lock_lock(v18 + 6);
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v18[4], &v84);
  os_unfair_lock_unlock(v18 + 6);
  swift_release();
  uint64_t v21 = v84;
  if (v84)
  {
    swift_bridgeObjectRelease();
LABEL_57:
    swift_release();
    return v21;
  }
  uint64_t v78 = v18 + 4;
  unint64_t v79 = v18;
  uint64_t v21 = v19;
  uint64_t v22 = v81;
  char v80 = v18 + 6;
  uint64_t v82 = swift_allocObject();
  LODWORD(v83) = 0;
  swift_bridgeObjectRetain();
  if (v16 > 2)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v17 = (os_unfair_lock_s *)v12;
  Swift::UInt v12 = outlined read-only object #1 of static ICUListFormatter.formatter<A, B>(for:)[v16 + 8];
  uint64_t v18 = (os_unfair_lock_s *)String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v24 = ulistfmt_openForType();
  swift_release();
  if (!v24)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  Swift::UInt v15 = (Swift::UInt)v79;
  uint64_t v25 = v80;
  uint64_t v21 = v22;
  uint64_t v22 = (uint64_t)v78;
  if ((int)v83 > 0) {
    goto LABEL_20;
  }
  *(void *)(v82 + 16) = v24;
  swift_retain();
  os_unfair_lock_lock(v25);
  uint64_t v26 = *(void *)(*(void *)(v15 + 16) + 16);
  uint64_t v77 = *(void *)(v15 + 16);
  uint64_t v27 = v17;
  if (v21 >= v26) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)uint64_t v22 = MEMORY[0x1E4FBC868];
  }
  uint64_t v28 = v85;
  uint64_t v17 = v86;
  Swift::UInt v12 = v87;
  Swift::UInt v29 = v88;
  uint64_t v21 = v82;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v83 = *(os_unfair_lock_s **)v22;
  uint64_t v31 = v83;
  *(void *)uint64_t v22 = 0x8000000000000000;
  uint64_t v81 = v28;
  uint64_t v32 = v28;
  uint64_t v18 = v17;
  uint64_t v78 = (os_unfair_lock_s *)v29;
  Swift::UInt v33 = v29;
  Swift::UInt v20 = v31;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v32, (uint64_t)v17, v12, v33);
  uint64_t v35 = *(void *)&v20[4]._os_unfair_lock_opaque;
  BOOL v36 = (v34 & 1) == 0;
  uint64_t v37 = v35 + v36;
  if (!__OFADD__(v35, v36))
  {
    LOBYTE(v22) = v34;
    uint64_t v17 = v27;
    if (*(void *)&v20[6]._os_unfair_lock_opaque < v37)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
      uint64_t v38 = v83;
      uint64_t v39 = v81;
      uint64_t v40 = (uint64_t)v78;
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v81, (uint64_t)v18, v12, (Swift::UInt)v78);
      if ((v22 & 1) != (v42 & 1)) {
        goto LABEL_61;
      }
      unint64_t v23 = v41;
      if ((v22 & 1) == 0) {
        goto LABEL_55;
      }
LABEL_18:
      uint64_t v43 = *(void *)&v38[14]._os_unfair_lock_opaque;
      uint64_t v44 = 8 * v23;
      swift_release();
      *(void *)(v43 + v44) = v21;
      unint64_t v45 = v80;
LABEL_56:
      *(void *)(v15 + 16) = v38;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v45);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_57;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v38 = v20;
      uint64_t v39 = v81;
      uint64_t v40 = (uint64_t)v78;
      if (v34) {
        goto LABEL_18;
      }
LABEL_55:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v39, (uint64_t)v18, v12, v40, v21, v38);
      swift_bridgeObjectRetain();
      unint64_t v45 = v80;
      goto LABEL_56;
    }
    goto LABEL_22;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  unint64_t v73 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUListFormatter.Signature, ICUListFormatter>);
  uint64_t v46 = static _DictionaryStorage.copy(original:)();
  uint64_t v38 = (os_unfair_lock_s *)v46;
  if (!*(void *)&v20[4]._os_unfair_lock_opaque)
  {
LABEL_54:
    swift_bridgeObjectRelease();
    uint64_t v39 = v81;
    uint64_t v40 = (uint64_t)v78;
    unint64_t v23 = v73;
    if (v22) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }
  Swift::UInt v70 = v12;
  uint64_t v71 = v18;
  uint64_t v72 = v17;
  uint64_t v47 = (char *)(v46 + 64);
  uint64_t v48 = 1 << LOBYTE(v38[8]._os_unfair_lock_opaque);
  uint64_t v75 = v20 + 16;
  unint64_t v49 = (unint64_t)(v48 + 63) >> 6;
  unint64_t v69 = v20;
  if (v38 != v20 || v47 >= (char *)&v75[2 * v49]) {
    memmove(v47, v75, 8 * v49);
  }
  int64_t v76 = 0;
  int v50 = v69;
  *(void *)&v38[4]._os_unfair_lock_opaque = *(void *)&v69[4]._os_unfair_lock_opaque;
  uint64_t v51 = 1 << LOBYTE(v50[8]._os_unfair_lock_opaque);
  uint64_t v52 = -1;
  if (v51 < 64) {
    uint64_t v52 = ~(-1 << v51);
  }
  unint64_t v53 = v52 & *(void *)&v50[16]._os_unfair_lock_opaque;
  int64_t v74 = (unint64_t)(v51 + 63) >> 6;
  uint64_t v18 = v71;
  Swift::UInt v12 = v70;
  Swift::UInt v15 = (Swift::UInt)v79;
  uint64_t v21 = v82;
  while (1)
  {
    if (v53)
    {
      unint64_t v54 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      unint64_t v55 = v54 | (v76 << 6);
      goto LABEL_30;
    }
    int64_t v63 = v76 + 1;
    if (__OFADD__(v76, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v63 >= v74) {
      goto LABEL_54;
    }
    unint64_t v64 = *(void *)&v75[2 * v63]._os_unfair_lock_opaque;
    int64_t v65 = v76 + 1;
    if (!v64)
    {
      int64_t v65 = v76 + 2;
      if (v76 + 2 >= v74) {
        goto LABEL_54;
      }
      unint64_t v64 = *(void *)&v75[2 * v65]._os_unfair_lock_opaque;
      if (!v64)
      {
        int64_t v65 = v76 + 3;
        if (v76 + 3 >= v74) {
          goto LABEL_54;
        }
        unint64_t v64 = *(void *)&v75[2 * v65]._os_unfair_lock_opaque;
        if (!v64)
        {
          int64_t v65 = v76 + 4;
          if (v76 + 4 >= v74) {
            goto LABEL_54;
          }
          unint64_t v64 = *(void *)&v75[2 * v65]._os_unfair_lock_opaque;
          if (!v64)
          {
            int64_t v65 = v76 + 5;
            if (v76 + 5 >= v74) {
              goto LABEL_54;
            }
            unint64_t v64 = *(void *)&v75[2 * v65]._os_unfair_lock_opaque;
            if (!v64)
            {
              int64_t v65 = v76 + 6;
              if (v76 + 6 >= v74) {
                goto LABEL_54;
              }
              unint64_t v64 = *(void *)&v75[2 * v65]._os_unfair_lock_opaque;
              if (!v64)
              {
                int64_t v65 = v76 + 7;
                if (v76 + 7 >= v74) {
                  goto LABEL_54;
                }
                unint64_t v64 = *(void *)&v75[2 * v65]._os_unfair_lock_opaque;
                if (!v64) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_53:
    unint64_t v53 = (v64 - 1) & v64;
    int64_t v76 = v65;
    unint64_t v55 = __clz(__rbit64(v64)) + (v65 << 6);
LABEL_30:
    uint64_t v56 = 32 * v55;
    uint64_t v57 = *(void *)&v50[12]._os_unfair_lock_opaque + 32 * v55;
    uint64_t v58 = *(void *)(v57 + 8);
    uint64_t v59 = 8 * v55;
    uint64_t v60 = *(void *)(*(void *)&v50[14]._os_unfair_lock_opaque + v59);
    uint64_t v61 = *(void *)&v38[12]._os_unfair_lock_opaque + v56;
    long long v62 = *(_OWORD *)(v57 + 16);
    *(void *)uint64_t v61 = *(void *)v57;
    *(void *)(v61 + 8) = v58;
    *(_OWORD *)(v61 + 16) = v62;
    *(void *)(*(void *)&v38[14]._os_unfair_lock_opaque + v59) = v60;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  int64_t v66 = v76 + 8;
  if (v76 + 8 >= v74) {
    goto LABEL_54;
  }
  unint64_t v64 = *(void *)&v75[2 * v66]._os_unfair_lock_opaque;
  if (v64)
  {
    int64_t v65 = v76 + 8;
    uint64_t v18 = v71;
    Swift::UInt v12 = v70;
    int v50 = v69;
    Swift::UInt v15 = (Swift::UInt)v79;
    uint64_t v21 = v82;
    goto LABEL_53;
  }
  while (1)
  {
    int64_t v65 = v66 + 1;
    if (__OFADD__(v66, 1)) {
      break;
    }
    uint64_t v18 = v71;
    Swift::UInt v12 = v70;
    int v50 = v69;
    Swift::UInt v15 = (Swift::UInt)v79;
    uint64_t v21 = v82;
    if (v65 >= v74) {
      goto LABEL_54;
    }
    unint64_t v64 = *(void *)&v75[2 * v65]._os_unfair_lock_opaque;
    ++v66;
    if (v64) {
      goto LABEL_53;
    }
  }
LABEL_60:
  __break(1u);
LABEL_61:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ListFormatStyle()
{
  return swift_getGenericMetadata();
}

Swift::String __swiftcall ICUListFormatter.format(strings:)(Swift::OpaquePointer strings)
{
  int64_t v3 = *((void *)strings._rawValue + 2);
  uint64_t v4 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0, MEMORY[0x1E4FBC860]);
  char v34 = v5;
  Swift::UInt v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0, v4);
  if (!v3)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v23 = specialized _withResizingUCharBuffer(initialSize:_:)(32, v1, (uint64_t)&v34, (uint64_t)&v33, (uint64_t)strings._rawValue);
    uint64_t v25 = v24;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v26 = v5[2];
    if (v26)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v26; ++i)
      {
        uint64_t v28 = v5[i + 4];
        if (v28) {
          MEMORY[0x185309510](v28, -1, -1);
        }
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25) {
      uint64_t v29 = v23;
    }
    else {
      uint64_t v29 = 0;
    }
    if (v25) {
      uint64_t v30 = v25;
    }
    else {
      uint64_t v30 = (void *)0xE000000000000000;
    }
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = (unint64_t *)((char *)strings._rawValue + 40);
  while (1)
  {
    uint64_t v8 = *(v6 - 1);
    unint64_t v7 = *v6;
    if ((*v6 & 0x1000000000000000) != 0)
    {
      Swift::Int v9 = String.UTF16View._foreignCount()();
      if (!v9)
      {
LABEL_13:
        uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_14;
      }
    }
    else
    {
      Swift::Int v9 = String.UTF16View._nativeGetOffset(for:)();
      if (!v9) {
        goto LABEL_13;
      }
    }
    if (v9 < 1)
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 31;
      }
      _OWORD v10[2] = v9;
      v10[3] = v12 & 0xFFFFFFFFFFFFFFFELL;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v13 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v32, (uint64_t)(v10 + 4), v9, v8, v7);
    swift_bridgeObjectRelease();
    if (v13 != v9) {
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
LABEL_14:
    unint64_t v14 = v10[2];
    if ((uint64_t)(v14 + 0x4000000000000000) < 0) {
      break;
    }
    Swift::UInt v15 = (char *)swift_slowAlloc();
    if (v10 + 4 < (void *)&v15[2 * v14] && v15 < (char *)v10 + 2 * v14 + 32) {
      goto LABEL_46;
    }
    uint64_t v17 = v15;
    memcpy(v15, v10 + 4, 2 * v14);
    uint64_t v5 = v34;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    }
    unint64_t v19 = v5[2];
    unint64_t v18 = v5[3];
    if (v19 >= v18 >> 1) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v5);
    }
    v5[2] = v19 + 1;
    v5[v19 + 4] = v17;
    swift_release();
    char v34 = v5;
    if (v14 >> 31) {
      goto LABEL_44;
    }
    Swift::UInt v20 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::UInt v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20 + 2) + 1, 1, v20);
    }
    unint64_t v22 = *((void *)v20 + 2);
    unint64_t v21 = *((void *)v20 + 3);
    if (v22 >= v21 >> 1) {
      Swift::UInt v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
    }
    v6 += 2;
    *((void *)v20 + 2) = v22 + 1;
    *(_DWORD *)&v20[4 * v22 + 32] = v14;
    Swift::UInt v33 = v20;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t v29 = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_47:
  result._unint64_t object = v30;
  result._uint64_t countAndFlagsBits = v29;
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 31;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32]) {
          memmove(v13, a4 + 32, 2 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v17[2] = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x80000000) != 0) {
    __break(1u);
  }
  swift_retain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (int)a1 < 513 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v12 = (char *)&v17[-1] - v11;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v12, a1, a2, a3, a4, a5, v17);
    uint64_t v13 = v17[0];
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  else
  {
    uint64_t v14 = swift_slowAlloc();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v14, a1, a2, a3, a4, a5, v17);
    MEMORY[0x185309510](v14, -1, -1);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v17[0];
  }
  return v13;
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v27 = 0;
  if (!a1) {
LABEL_27:
  }
    __break(1u);
  closure #1 in ICUListFormatter.format(strings:)(a1, a2, (uint64_t)&v27, a3, a4, a5, a6);
  if ((isStackAllocationSafe & 0x100000000) != 0)
  {
LABEL_15:
    swift_release();
    *a7 = 0;
    a7[1] = 0;
    return swift_bridgeObjectRelease();
  }
  if (v27 != 15)
  {
    if (v27 <= 0 && (int)isStackAllocationSafe > 0)
    {
      uint64_t v18 = specialized String.init(_utf16:)(a1, isStackAllocationSafe);
      uint64_t v19 = v21;
LABEL_17:
      swift_release();
      *a7 = v18;
      a7[1] = v19;
      return swift_bridgeObjectRelease();
    }
    goto LABEL_15;
  }
  uint64_t v14 = (isStackAllocationSafe + 1);
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if ((v14 & 0x80000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if ((int)v14 < 513
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    Swift::UInt v16 = (char *)&v26 - v15;
    int v26 = 0;
    closure #1 in ICUListFormatter.format(strings:)((uint64_t)&v26 - v15, v14, (uint64_t)&v26, a3, a4, a5, a6);
    uint64_t v18 = 0;
    if ((v17 & 0x100000000) != 0)
    {
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = 0;
      if (v26 <= 0 && (int)v17 > 0)
      {
        uint64_t v18 = specialized String.init(_utf16:)((uint64_t)v16, v17);
        uint64_t v19 = v20;
      }
    }
    goto LABEL_17;
  }
  uint64_t v23 = swift_slowAlloc();
  int v26 = 0;
  closure #1 in ICUListFormatter.format(strings:)(v23, v14, (uint64_t)&v26, a3, a4, a5, a6);
  if ((v24 & 0x100000000) != 0 || v26 > 0 || (int)v24 <= 0)
  {
    *a7 = 0;
    a7[1] = 0;
  }
  else
  {
    *a7 = specialized String.init(_utf16:)(v23, v24);
    a7[1] = v25;
  }
  MEMORY[0x185309510](v23, -1, -1);
  swift_release();
  return swift_bridgeObjectRelease();
}

void closure #1 in ICUListFormatter.format(strings:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)(a7 + 16) >> 31) {
    __break(1u);
  }
  else {
    ulistfmt_format();
  }
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ListFormatStyle.format(_:)()
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(v0 + 32) + 48))(&v2);
  return v2;
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, Swift::UInt a5)
{
  if (*(void *)(*(void *)a1 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5), (v5 & 1) != 0))
  {
    return swift_retain();
  }
  else
  {
    return 0;
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, Swift::UInt a3, Swift::UInt a4)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  Swift::Int v8 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, a4, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      Swift::UInt v16 = (void *)(v14 + 32 * v8);
      uint64_t v18 = v16[2];
      uint64_t v17 = v16[3];
      BOOL v19 = *v16 == a1 && v16[1] == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v18 == a3 && v17 == a4) {
        break;
      }
      unint64_t v8 = (v8 + 1) & v13;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance StringStyle@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = (void *)(a7[6] + 32 * result);
  *uint64_t v7 = a2;
  v7[1] = a3;
  _OWORD v7[2] = a4;
  v7[3] = a5;
  *(void *)(a7[7] + 8 * result) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = a7[6] + 32 * result;
  *(void *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(_DWORD *)(v7 + 16) = a4;
  *(unsigned char *)(v7 + 20) = BYTE4(a4) & 1;
  *(void *)(v7 + 24) = a5;
  *(void *)(a7[7] + 8 * result) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs);
  }
  return result;
}

uint64_t StringProtocol.cString(using:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  StringProtocol._ephemeralString.getter();
  uint64_t v2 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v3 = (const char *)objc_msgSend(v2, sel_cStringUsingEncoding_, v1);
  if (!v3)
  {
    uint64_t v7 = 0;
    goto LABEL_14;
  }
  uint64_t v4 = v3;
  size_t v5 = _swift_stdlib_strlen(v3);
  size_t v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else if ((v6 & 0x8000000000000000) == 0)
  {
    if (v5 == -1)
    {
      uint64_t v7 = MEMORY[0x1E4FBC860];
    }
    else
    {
      uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v7 + 16) = v6;
    }
    uint64_t v8 = (char *)(v7 + 32);
    if ((unint64_t)v4 < v7 + 32 + v6 && v8 < &v4[v6]) {
      goto LABEL_17;
    }
    memcpy(v8, v4, v6);
    *(void *)(v7 + 16) = v6;
LABEL_14:
    swift_unknownObjectRelease();
    return v7;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_17:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return (NSNumber)objc_msgSend(v2, sel_initWithDouble_, floatLiteral);
}

uint64_t protocol witness for Decoder.codingPath.getter in conformance JSONDecoderImpl()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_retain();
  uint64_t v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

id URLRequest.cachePolicy.setter(uint64_t a1, SEL *a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    size_t v5 = *(void **)(*(void *)v2 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v9;
    *(void *)uint64_t v2 = v6;
    swift_release();
  }
  return objc_msgSend(*(id *)(*(void *)v2 + 16), *a2, a1);
}

uint64_t type metadata accessor for _XMLPlistEncodingFormat.Reference.Box()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.__ivar_destroyer()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void specialized static Int64._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_longLongValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithLongLong_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(void *)a2 = v3;
    *(unsigned char *)(a2 + 8) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136;
    v7._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3436746E49;
    v8._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t __NSPostASAPQueueNotes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return postQueueNotifications(a3, 1);
}

double static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1;
  *a2 = (double)a1;
  return result;
}

double protocol witness for static SchedulerTimeIntervalConvertible.seconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1;
  *a2 = (double)a1;
  return result;
}

unsigned char *Date.FormatStyle.capitalizationContext.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 120) = *result;
  return result;
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in Data()
{
  return &protocol witness table for Data;
}

void static CurrencyFormatStyleConfiguration.Presentation.fullName.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.ArrayIterator : PlistArrayIterator in XMLPlistMap()
{
  return &protocol witness table for XMLPlistMap.ArrayIterator;
}

void static JSONEncoder.OutputFormatting.withoutEscapingSlashes.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void sub_181A27FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181A28130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__from, std::error_code *a3, void *a4, unint64_t a5, uint64_t a6, unint64_t Path, void *a8, uint64_t *a9, uint64_t a10, unint64_t a11, void *a12, uint64_t a13, int *a14)
{
  uint64_t v340 = *MEMORY[0x1E4F143B8];
  if (!__to)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v44 = objc_allocWithZone((Class)NSError);
    uint64_t v45 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v17 = (uint64_t)objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    int64_t Path = (unint64_t)objc_msgSend((id)v17, sel_domain);
    id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)Path);
    unint64_t v22 = v47;

    if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v22 == v48)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      a6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v24 = swift_bridgeObjectRelease();
      if ((a6 & 1) == 0)
      {
        __break(1u);
        goto LABEL_15;
      }
    }
    return swift_willThrow();
  }
  uint64_t v17 = v14;
  unint64_t v16 = a5;
  uint64_t v15 = a4;
  id v208 = a8;
  unint64_t v22 = a9;
  uint64_t v209 = (uint64_t)__from;
  rename(__from, __to, a3);
  if (!v23) {
    goto LABEL_67;
  }
  LODWORD(Path) = Path & 1;
  uint64_t v24 = MEMORY[0x185301870]();
  if (v24 != 22)
  {
LABEL_15:
    int v50 = v22;
    if (MEMORY[0x185301870](v24) == 16)
    {
      id v208 = a12;
      unlink((const char *)v209);
      uint64_t v51 = *v22;
      uint64_t v52 = a6;
      unint64_t v53 = v22[1];
      swift_bridgeObjectRetain();
      cleanupTemporaryDirectory(at:)(v51, v53);
      swift_bridgeObjectRelease();
      uint64_t v276 = (uint64_t)v15;
      *(void *)Swift::String v277 = v16;
      *(void *)&v277[8] = v52;
      v277[16] = Path != 0;
      return writeToFileNoAux(path:buffer:options:attributes:reportProgress:)((uint64_t)&v276, a10, a11, 0, a12, 0);
    }
    int v55 = MEMORY[0x185301870]();
    unlink((const char *)v209);
    uint64_t v57 = *v50;
    unint64_t v56 = v50[1];
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v57, v56);
    swift_bridgeObjectRelease();
    if (Path)
    {
      id v205 = (id)a6;
      uint64_t v58 = 4;
      switch(v55)
      {
        case 1:
        case 13:
          uint64_t v58 = 513;
          goto LABEL_93;
        case 2:
          goto LABEL_93;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_85;
        case 17:
          uint64_t v58 = 516;
          goto LABEL_93;
        case 28:
        case 69:
          uint64_t v58 = 640;
          goto LABEL_93;
        case 30:
          uint64_t v58 = 642;
          goto LABEL_93;
        case 63:
          uint64_t v58 = 514;
          goto LABEL_93;
        default:
          if (v55 == 102)
          {
            swift_retain_n();
            id v121 = v15;
            swift_retain_n();
            id v122 = v121;
            id v123 = 0;
            uint64_t v209 = 512;
            goto LABEL_99;
          }
LABEL_85:
          uint64_t v58 = 512;
LABEL_93:
          uint64_t v209 = v58;
          uint64_t v135 = v17;
          swift_retain_n();
          id v136 = v15;
          swift_retain_n();
          id v137 = v136;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v138 = (int)POSIXErrorCode.rawValue.getter();
            id v139 = objc_allocWithZone((Class)NSError);
            uint64_t v140 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v123 = objc_msgSend(v139, sel_initWithDomain_code_userInfo_, v140, v138, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v141 = objc_msgSend(v123, sel_domain);
            id v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
            uint64_t v144 = v143;

            if (v142 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v144 == v145)
            {
              swift_bridgeObjectRelease_n();
            }
            else
            {
              int64_t Path = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((Path & 1) == 0) {
                goto LABEL_159;
              }
            }
            uint64_t v17 = v135;
LABEL_99:
            id v146 = v15;
            swift_retain();
            swift_retain();
            if (!_foundation_swift_url_feature_enabled())
            {
              id v151 = objc_msgSend(v146, sel__parameterString);
              if (v151)
              {
                uint64_t v152 = v151;
                id v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
                Swift::String v155 = v154;

                if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                  && (id v156 = objc_msgSend(v146, sel_path)) != 0)
                {
                  uint64_t v157 = v156;
                  id v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v156);
                  id v208 = v146;
                  unsigned __int8 v159 = v15;
                  uint64_t v161 = v160;

                  uint64_t v276 = (uint64_t)v158;
                  *(void *)Swift::String v277 = v161;
                  swift_bridgeObjectRetain();
                  v162._uint64_t countAndFlagsBits = 59;
                  v162._unint64_t object = (void *)0xE100000000000000;
                  String.append(_:)(v162);
                  uint64_t v15 = v159;
                  id v146 = v208;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v163._uint64_t countAndFlagsBits = (uint64_t)v153;
                  v163._unint64_t object = v155;
                  String.append(_:)(v163);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v276 = 59;
                  *(void *)Swift::String v277 = 0xE100000000000000;
                  v171._uint64_t countAndFlagsBits = (uint64_t)v153;
                  v171._unint64_t object = v155;
                  String.append(_:)(v171);
                }
                swift_bridgeObjectRelease();
                uint64_t v172 = (uint64_t)v205;
                outlined consume of PathOrURL(v15, v16, (uint64_t)v205, 1);
              }
              else
              {
                id v173 = objc_msgSend(v146, sel_path);
                if (v173)
                {
                  uint64_t v174 = v173;
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v173);
                }
                uint64_t v172 = (uint64_t)v205;
                outlined consume of PathOrURL(v15, v16, (uint64_t)v205, 1);
              }
              goto LABEL_124;
            }
            *(void *)&v277[8] = v205;
            id v147 = v146;
            uint64_t v204 = (uint64_t *)v16;
            swift_retain();
            swift_retain();
            Swift::String v148 = URL.path(percentEncoded:)(1);
            uint64_t countAndFlagsBits = v148._countAndFlagsBits;
            uint64_t v276 = v148._countAndFlagsBits;
            *(void *)Swift::String v277 = v148._object;
            swift_bridgeObjectRetain();
            unint64_t v203 = v15;
            uint64_t v206 = v17;
            if (String.count.getter() <= 1)
            {
              unint64_t object = (unint64_t)v148._object;
            }
            else
            {
              unint64_t object = (unint64_t)v148._object;
              if ((specialized BidirectionalCollection.last.getter(v148._countAndFlagsBits, (unint64_t)v148._object) & 0x1FF) == 0x2F)
              {
                specialized RangeReplaceableCollection<>.popLast()();
                swift_bridgeObjectRelease();
                uint64_t countAndFlagsBits = v276;
                unint64_t object = *(void *)v277;
              }
            }
            *(void *)&long long v212 = Set.init(minimumCapacity:)();
            uint64_t v164 = specialized Set._Variant.insert(_:)(&v210, 0x2FuLL);
            uint64_t v165 = v212;
            uint64_t v166 = HIBYTE(object) & 0xF;
            if ((object & 0x2000000000000000) == 0) {
              uint64_t v166 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (v166)
            {
              id v208 = v146;
              *(void *)&long long v212 = countAndFlagsBits;
              *((void *)&v212 + 1) = object;
              MEMORY[0x1F4188790](v164);
              v194[2] = &v212;
              v194[3] = v165;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v194, countAndFlagsBits, object);
              if (v167 == 1)
              {
                long long v168 = v212;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v168, *((unint64_t *)&v168 + 1), v165);
                uint64_t v170 = v169;
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v170 = v167;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v15 = v203;
              unint64_t v16 = (unint64_t)v204;
              id v146 = v208;
              if (!v170)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v176 = (uint64_t)v205;
                outlined consume of PathOrURL(v15, v16, (uint64_t)v205, 1);
                outlined consume of PathOrURL(v15, v16, v176, 1);
                goto LABEL_123;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v15 = v203;
              unint64_t v16 = (unint64_t)v204;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v175 = (uint64_t)v205;
            outlined consume of PathOrURL(v15, v16, (uint64_t)v205, 1);
            outlined consume of PathOrURL(v15, v16, v175, 1);
LABEL_123:
            uint64_t v172 = (uint64_t)v205;
LABEL_124:
            uint64_t v177 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v178 = v146;
            uint64_t v179 = v172;
            outlined consume of PathOrURL(v15, v16, v172, 1);
            if (v123)
            {
              uint64_t v276 = (uint64_t)v123;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              id v123 = v123;
              if (_getErrorEmbeddedNSError<A>(_:)())
              {
              }
              else
              {
                swift_allocError();
                *Swift::String v181 = v123;
              }
              Swift::String v180 = (void *)_swift_stdlib_bridgeErrorToNSError();
            }
            else
            {
              Swift::String v180 = 0;
            }
            objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v209, v177, v178, v180, 0, 0, 0);

            swift_unknownObjectRelease();
            outlined consume of PathOrURL(v15, v16, v179, 1);
            return swift_willThrow();
          }
          break;
      }
LABEL_167:
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v193._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v193);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v65 = 4;
    switch(v55)
    {
      case 1:
      case 13:
        uint64_t v65 = 513;
        goto LABEL_134;
      case 2:
        goto LABEL_134;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_86;
      case 17:
        uint64_t v65 = 516;
        goto LABEL_134;
      case 28:
      case 69:
        uint64_t v65 = 640;
        goto LABEL_134;
      case 30:
        uint64_t v65 = 642;
        goto LABEL_134;
      case 63:
        uint64_t v65 = 514;
        goto LABEL_134;
      default:
        if (v55 == 102)
        {
          id v124 = 0;
          uint64_t v125 = 512;
        }
        else
        {
LABEL_86:
          uint64_t v65 = 512;
LABEL_134:
          uint64_t v209 = v65;
          uint64_t v182 = v15;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_167;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v183 = (int)POSIXErrorCode.rawValue.getter();
          id v184 = objc_allocWithZone((Class)NSError);
          uint64_t v185 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v124 = objc_msgSend(v184, sel_initWithDomain_code_userInfo_, v185, v183, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v186 = objc_msgSend(v124, sel_domain);
          id v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(v186);
          int64_t Path = v188;

          if (v187 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && Path == v189)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v15 = v182;
          }
          else
          {
            char v190 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v15 = v182;
            if ((v190 & 1) == 0) {
              goto LABEL_160;
            }
          }
          uint64_t v125 = v209;
        }
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v125, (uint64_t)v15, v16, v124, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v276, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
          (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
          (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
          (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
        return swift_willThrow();
    }
  }
  uint64_t v199 = a9;
  unsigned int v207 = Path;
  uint64_t v206 = v14;
  uint64_t v26 = *(void *)&a3->__val_;
  unint64_t cat = (unint64_t)a3->__cat_;
  swift_bridgeObjectRetain();
  getpid();
  if (_foundation_sandbox_check())
  {
    uint64_t v204 = (uint64_t *)v16;
    URL.init(fileURLWithPath:isDirectory:)(v26, cat, 0, (uint64_t)&v276);
    id v27 = (id)v276;
    uint64_t v201 = *(void *)v277;
    unint64_t v202 = *(void *)&v277[8];
    id v28 = objc_msgSend(self, sel_defaultManager);
    uint64_t v276 = 0;
    id v200 = v27;
    id v29 = objc_msgSend(v28, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v27, 1, &v276);
    unint64_t v30 = cat;
    id v31 = v29;

    id v32 = (id)v276;
    if (!v31)
    {
      if (v276)
      {
        (id)v276;
        int64_t Path = (unint64_t)v200;
LABEL_56:
        swift_willThrow();
        swift_willThrow();
        swift_bridgeObjectRelease();

        swift_release();
        return swift_release();
      }
      int64_t Path = (unint64_t)v200;
      if (one-time initialization token for _nilObjCError == -1)
      {
LABEL_55:
        id v94 = (id)_nilObjCError;
        goto LABEL_56;
      }
LABEL_162:
      swift_once();
      goto LABEL_55;
    }
    id v205 = (id)a6;
    unint64_t v203 = v15;
    URL.init(reference:)(v31, &v276);
    id v33 = (id)v276;
    uint64_t v34 = *(void *)v277;
    uint64_t v35 = *(void *)&v277[8];
    id v36 = v32;

    uint64_t v276 = (uint64_t)v33;
    *(void *)Swift::String v277 = v34;
    *(void *)&v277[8] = v35;
    unsigned long long v37 = (unsigned __int128)URL.path(percentEncoded:)(0);

    swift_release();
    swift_release();
    unsigned long long v210 = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t Path = String._lastPathComponent.getter(v26, v30);
    unint64_t v39 = v38;
    unint64_t v198 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v40 = String._appendingPathComponent(_:)(Path, v39, v37, *((unint64_t *)&v37 + 1));
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if ((v42 & 0x1000000000000000) != 0)
    {
      Swift::Int v43 = String.UTF8View._foreignCount()();
      unint64_t v16 = (unint64_t)v204;
    }
    else
    {
      unint64_t v16 = (unint64_t)v204;
      if ((v42 & 0x2000000000000000) != 0) {
        Swift::Int v43 = HIBYTE(v42) & 0xF;
      }
      else {
        Swift::Int v43 = v40 & 0xFFFFFFFFFFFFLL;
      }
    }
    uint64_t v15 = v203;
    a6 = (uint64_t)v205;
    uint64_t v17 = 3 * v43;
    if ((unsigned __int128)(v43 * (__int128)3) >> 64 != (3 * v43) >> 63)
    {
      __break(1u);
      goto LABEL_155;
    }
    if (v17 < -1)
    {
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    uint64_t v66 = v17 + 1;
    outlined copy of PathOrURL(v203, v16, (uint64_t)v205, v207);
    uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v17 < 1024 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
    {
      MEMORY[0x1F4188790](isStackAllocationSafe);
      unint64_t v69 = (char *)&v195 - v68;
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v69, v17 + 1, 1, v40, v42);
      char v71 = v70;
      swift_bridgeObjectRelease();
      uint64_t v72 = v206;
      if (v71)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v74 = objc_allocWithZone((Class)NSError);
        uint64_t v75 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v76 = objc_msgSend(v74, sel_initWithDomain_code_userInfo_, v75, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v77 = objc_msgSend(v76, sel_domain);
        id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        uint64_t v80 = v79;

        if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v80 == v81)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v16 = (unint64_t)v204;
        }
        else
        {
          char v104 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v16 = (unint64_t)v204;
          if ((v104 & 1) == 0)
          {
            __break(1u);
LABEL_164:
            __break(1u);
            goto LABEL_165;
          }
        }
        swift_willThrow();
        a6 = (uint64_t)v205;
        LOBYTE(Path) = v207;
      }
      else
      {
        int64_t Path = v207;
        unint64_t v73 = v69;
        unint64_t v16 = (unint64_t)v204;
        closure #1 in createProtectedTemporaryFile(at:inPath:options:variant:)(v73, (int)v208, v40, v42, (uint64_t *)&v210, (uint64_t)v203, (unint64_t)v204, (id)a6, (uint64_t)&v212, v207, 0, 0);
        uint64_t v17 = v72;
        if (!v72)
        {
          int v197 = v212;
          unint64_t v40 = v213;
          uint64_t v206 = *((void *)&v212 + 1);
          uint64_t v196 = *((void *)&v213 + 1);
          id v208 = (id)v214;
          swift_bridgeObjectRelease();
          uint64_t v15 = v203;
          outlined consume of PathOrURL(v203, v16, a6, Path);
          swift_bridgeObjectRelease();

          swift_release();
          swift_release();
LABEL_42:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
      }
      swift_willThrow();
      uint64_t v15 = v203;
    }
    else
    {
      uint64_t v82 = v40;
      uint64_t v83 = (char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v83, v66, 1, v82, v42);
      char v85 = v84;
      swift_bridgeObjectRelease();
      if (v85)
      {
        uint64_t v209 = (uint64_t)v83;
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v112 = objc_allocWithZone((Class)NSError);
        uint64_t v113 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v114 = objc_msgSend(v112, sel_initWithDomain_code_userInfo_, v113, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v115 = objc_msgSend(v114, sel_domain);
        id v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
        uint64_t v118 = v117;

        if (v116 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v118 == v119)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v191 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v191 & 1) == 0)
          {
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
          }
        }
        swift_willThrow();
        a6 = (uint64_t)v205;
        LOBYTE(Path) = v207;
        uint64_t v83 = (char *)v209;
      }
      else
      {
        int64_t Path = v207;
        closure #1 in createProtectedTemporaryFile(at:inPath:options:variant:)(v83, (int)v208, v82, v42, (uint64_t *)&v210, (uint64_t)v203, v16, v205, (uint64_t)&v276, v207, 0, 0);
        uint64_t v17 = v206;
        if (!v206)
        {
          MEMORY[0x185309510](v83, -1, -1);
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v203, v16, (uint64_t)v205, v207);
          swift_bridgeObjectRelease();

          swift_release();
          swift_release();
          int v197 = v276;
          uint64_t v206 = *(void *)v277;
          unint64_t v40 = *(void *)&v277[8];
          uint64_t v196 = *(void *)&v277[16];
          id v208 = *(id *)&v277[24];
          goto LABEL_42;
        }
      }
      MEMORY[0x185309510](v83, -1, -1);
    }
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(v15, v16, a6, Path);
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v59 = String._deletingLastPathComponent()(v26, cat);
  unint64_t v61 = v60;
  swift_bridgeObjectRelease();
  uint64_t v276 = (uint64_t)v15;
  *(void *)Swift::String v277 = v16;
  *(void *)&v277[8] = a6;
  v277[16] = v207 != 0;
  int v62 = createTemporaryFile(at:inPath:prefix:options:variant:)(v59, v61, (uint64_t)&v276, (char *)0x736F6E2E7461642ELL, (void *)0xEB00000000636E79, v208, 0, 0);
  uint64_t v17 = v206;
  if (v206)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  int64_t Path = v64;
  int v197 = v62;
  uint64_t v206 = v63;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v196 = 0;
  id v208 = 0;
  unint64_t v40 = Path;
LABEL_43:
  close(v197);
  if ((v40 & 0x1000000000000000) != 0) {
    goto LABEL_156;
  }
  if ((v40 & 0x2000000000000000) != 0) {
    uint64_t v86 = HIBYTE(v40) & 0xF;
  }
  else {
    uint64_t v86 = v206 & 0xFFFFFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v87 = 3 * v86;
    if ((unsigned __int128)(v86 * (__int128)3) >> 64 != (3 * v86) >> 63)
    {
      __break(1u);
      goto LABEL_158;
    }
    if (v87 < -1) {
      goto LABEL_161;
    }
    int64_t Path = v87 + 1;
    outlined copy of PathOrURL(v15, v16, a6, v207);
    uint64_t v88 = swift_bridgeObjectRetain();
    unint64_t v202 = v40;
    if (v87 < 1024 || (uint64_t v88 = swift_stdlib_isStackAllocationSafe(), (v88 & 1) != 0))
    {
      uint64_t v204 = &v195;
      MEMORY[0x1F4188790](v88);
      uint64_t v90 = (const std::__fs::filesystem::path *)((char *)&v195 - v89);
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v90, Path, 1, v206, v40);
      char v92 = v91;
      swift_bridgeObjectRelease();
      if ((v92 & 1) == 0)
      {
        char v93 = v207;
        closure #1 in closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v90, __to, (const std::__fs::filesystem::path *)v209, v199, v196, (unint64_t)v208, v15, v16, a6, v207);
        if (v17) {
          goto LABEL_80;
        }
        goto LABEL_66;
      }
      uint64_t v95 = a6;
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v96 = objc_allocWithZone((Class)NSError);
      uint64_t v97 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v98 = objc_msgSend(v96, sel_initWithDomain_code_userInfo_, v97, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v99 = objc_msgSend(v98, sel_domain);
      id v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
      uint64_t v102 = v101;

      if (v100 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v102 == v103)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_79;
      }
      char v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v120)
      {
LABEL_79:
        swift_willThrow();
        a6 = v95;
        char v93 = v207;
LABEL_80:
        swift_willThrow();
LABEL_150:
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v15, v16, a6, v93);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      goto LABEL_164;
    }
    long long v105 = (const std::__fs::filesystem::path *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v105, Path, 1, v206, v40);
    char v107 = v106;
    swift_bridgeObjectRelease();
    if (v107)
    {
      uint64_t v204 = (uint64_t *)v16;
      uint64_t v126 = a6;
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v127 = objc_allocWithZone((Class)NSError);
      uint64_t v128 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v129 = objc_msgSend(v127, sel_initWithDomain_code_userInfo_, v128, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v130 = objc_msgSend(v129, sel_domain);
      id v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
      uint64_t v133 = v132;

      if (v131 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v133 == v134)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v192 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v192 & 1) == 0) {
          goto LABEL_166;
        }
      }
      swift_willThrow();
      a6 = v126;
      unint64_t v16 = (unint64_t)v204;
      char v93 = v207;
LABEL_149:
      MEMORY[0x185309510](v105, -1, -1);
      goto LABEL_150;
    }
    char v93 = v207;
    closure #1 in closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v105, __to, (const std::__fs::filesystem::path *)v209, v199, v196, (unint64_t)v208, v15, v16, a6, v207);
    if (v17) {
      goto LABEL_149;
    }
    MEMORY[0x185309510](v105, -1, -1);
LABEL_66:
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(v15, v16, a6, v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v22 = v199;
LABEL_67:
    a6 = a13;
    uint64_t v109 = *v22;
    unint64_t v108 = v22[1];
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v109, v108);
    uint64_t result = swift_bridgeObjectRelease();
    if (*(unsigned char *)(a13 + 2)) {
      return result;
    }
    unint64_t v40 = (unint64_t)a14;
    mode_t v110 = *(_WORD *)a13;
    unsigned long long v210 = 0x800000000000005uLL;
    uint64_t v211 = 0;
    bzero(&v276, 0x40CuLL);
    uint64_t result = fgetattrlist(*a14, &v210, &v276, 0x40CuLL, 1u);
    if (result) {
      return result;
    }
    long long v212 = *(_OWORD *)&v277[4];
    long long v213 = *(_OWORD *)&v277[20];
    long long v214 = v278;
    long long v215 = v279;
    long long v216 = v280;
    long long v217 = v281;
    long long v218 = v282;
    long long v219 = v283;
    long long v220 = v284;
    long long v221 = v285;
    long long v222 = v286;
    long long v223 = v287;
    long long v224 = v288;
    long long v225 = v289;
    long long v226 = v290;
    long long v227 = v291;
    long long v228 = v292;
    long long v229 = v293;
    long long v230 = v294;
    long long v231 = v295;
    long long v232 = v296;
    long long v233 = v297;
    long long v234 = v298;
    long long v235 = v299;
    long long v236 = v300;
    long long v237 = v301;
    long long v238 = v302;
    long long v239 = v303;
    long long v240 = v304;
    long long v241 = v305;
    long long v242 = v306;
    long long v243 = v307;
    long long v244 = v308;
    long long v245 = v309;
    long long v246 = v310;
    long long v247 = v311;
    long long v248 = v312;
    long long v249 = v313;
    long long v250 = v314;
    long long v251 = v315;
    long long v252 = v316;
    long long v253 = v317;
    long long v254 = v318;
    long long v255 = v319;
    long long v256 = v320;
    long long v257 = v321;
    long long v258 = v322;
    long long v259 = v323;
    long long v260 = v324;
    long long v261 = v325;
    long long v262 = v326;
    long long v263 = v327;
    long long v264 = v328;
    long long v265 = v329;
    long long v266 = v330;
    long long v267 = v331;
    long long v268 = v332;
    long long v269 = v333;
    long long v270 = v334;
    long long v271 = v335;
    long long v272 = v336;
    long long v273 = v337;
    long long v274 = v338;
    long long v275 = v339;
    uint64_t result = strlen((const char *)__to);
    size_t v111 = result + 1;
    if (!__OFADD__(result, 1)) {
      break;
    }
LABEL_155:
    __break(1u);
LABEL_156:
    uint64_t v86 = String.UTF8View._foreignCount()();
  }
  if (v111 == *(unsigned int *)v277)
  {
    uint64_t result = strncmp((const char *)__to, (const char *)&v212, v111);
    if (!result) {
      return fchmod(*a14, v110);
    }
  }
  return result;
}

void cleanupTemporaryDirectory(at:)(uint64_t a1, unint64_t a2)
{
  v22[1] = *(id *)MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v5 < -1)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once();
LABEL_25:
    swift_willThrow();
    return;
  }
  uint64_t v6 = v5 + 1;
  if (v5 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    Swift::String v8 = (char *)v22 - v7;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v8, v6, 1, a1, a2);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0 && !rmdir(v8)) {
      return;
    }
  }
  else
  {
    uint64_t v11 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v11, v6, 1, a1, a2);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13)
    {
      MEMORY[0x185309510](v11, -1, -1);
    }
    else
    {
      int v14 = rmdir(v11);
      MEMORY[0x185309510](v11, -1, -1);
      if (!v14) {
        return;
      }
    }
  }
  id v15 = objc_msgSend(self, sel_defaultManager);
  uint64_t v16 = String._bridgeToObjectiveCImpl()();
  v22[0] = 0;
  unsigned int v17 = objc_msgSend(v15, sel_removeItemAtPath_error_, v16, v22);

  swift_unknownObjectRelease();
  id v18 = v22[0];
  if (!v17)
  {
    if (v22[0])
    {
      id v21 = v22[0];
      id v20 = v22[0];
      swift_willThrow();

      return;
    }
    if (one-time initialization token for _nilObjCError == -1) {
      goto LABEL_25;
    }
    goto LABEL_30;
  }

  id v19 = v18;
}

uint64_t AttributedString.init()@<X0>(uint64_t *a1@<X8>)
{
  BigString.init()();
  uint64_t v6 = 0;
  MEMORY[0x185309530](&v6, 8);
  uint64_t v2 = v6;
  type metadata accessor for AttributedString.Guts();
  uint64_t v3 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v5 = v8;
    *(_OWORD *)(v3 + 16) = v7;
    *(_OWORD *)(v3 + 32) = v5;
    *(_OWORD *)(v3 + 48) = v9;
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 72) = 0;
    *(void *)(v3 + 80) = 0;
    *(void *)(v3 + 88) = v2;
    *a1 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  long long v5 = (char *)a2 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a1, v6);
  long long v8 = (char *)a2 + *(int *)(v4 + 28);
  *a2 = 0;
  a2[1] = 0;
  *(void *)long long v8 = 0;
  v8[8] = 1;
  return result;
}

uint64_t type metadata completion function for Duration.UnitsFormatStyle()
{
  uint64_t result = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.UnitsFormatStyle()
{
  return lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle);
  a1[2] = lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle);
  uint64_t result = lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t destroy for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0) + 24);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  long long v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  char v14 = a3 & 1;
  char v15 = a6 & 1;
  uint64_t v16 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1F4188790](v16 - 8);
  id v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  int v19 = *(_DWORD *)(a1 + 4);
  uint64_t v20 = *a4;
  v24[0] = *(unsigned char *)a1;
  int v25 = v19;
  uint64_t v23 = v20;
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(a7, (uint64_t)v18, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v21 = swift_bridgeObjectRetain();
  return Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)(v21, v24, a2, v14, &v23, a5, v15, (uint64_t)v18, a8);
}

uint64_t Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v15 = *a2;
  int v16 = *((_DWORD *)a2 + 1);
  uint64_t v17 = *a5;
  uint64_t v18 = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v19 = a9 + *(int *)(v18 + 40);
  *(void *)(a9 + 16) = a1;
  uint64_t v20 = a8;
  *(unsigned char *)(a9 + 24) = v15;
  *(_DWORD *)(a9 + 28) = v16;
  *(void *)(a9 + 32) = a3;
  *(unsigned char *)(a9 + 40) = a4 & 1;
  *(void *)(a9 + 48) = v17;
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(a8, a9 + *(int *)(v18 + 36), type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v21 = 0x7FFFFFFFFFFFFFFELL;
  if (a6 < 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v21 = a6;
  }
  if (a7 & 1 | (a6 < 1)) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  if (a7 & 1 | (a6 < 1)) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v21 + 1;
  }
  *(void *)uint64_t v19 = v22;
  *(void *)(v19 + 8) = v23;
  *(unsigned char *)(v19 + 16) = a7 & 1 | (a6 < 1);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v24 = static LocaleCache.cache + 16;
  int v25 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v25);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v24, &v30);
  os_unfair_lock_unlock(v25);
  swift_release_n();
  uint64_t v26 = v30;
  uint64_t v27 = lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  uint64_t result = outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v20, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  *(void *)a9 = v26;
  *(void *)(a9 + 8) = v27;
  return result;
}

uint64_t lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t Duration.UnitsFormatStyle._getSkeletons(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v83 = (_OWORD *)a2;
  uint64_t v80 = 0;
  uint64_t v81 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v79 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  uint64_t v82 = (uint64_t)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  long long v9 = (char *)&v74 - v8;
  MEMORY[0x1F4188790](v10);
  char v84 = (_OWORD *)((char *)&v74 - v11);
  MEMORY[0x1F4188790](v12);
  char v14 = (_OWORD *)((char *)&v74 - v13);
  uint64_t v15 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v16 = v15 - 8;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v2 + 16);
  uint64_t v20 = *(void *)(v2 + 32);
  char v21 = *(unsigned char *)(v2 + 40);
  uint64_t v22 = v2 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0) + 36);
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v22, (uint64_t)v18, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v23 = *(int *)(v16 + 36);
  uint64_t v24 = (uint64_t)&v18[*(int *)(v16 + 32)];
  uint64_t v25 = v20;
  uint64_t v26 = v2;
  uint64_t v27 = specialized static Duration.UnitsFormatStyle.unitsToUse(duration:allowedUnits:maximumUnitCount:roundSmallerParts:trailingFractionalPartLength:roundingIncrement:dropZeroUnits:)(v81, (uint64_t)v83, v19, v25, v21, v24, *(void *)(v22 + 8), *(void *)(v22 + v23), *(unsigned char *)(v22 + v23 + 8), *(void *)(v2 + 48) < 1);
  uint64_t v29 = v28;
  uint64_t v30 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v24, v30);
  uint64_t v83 = v14;
  Duration.UnitsFormatStyle._createNumberFormatStyle(useFractionalLimitsIfAvailable:)(1, v14);
  uint64_t result = Duration.UnitsFormatStyle._createNumberFormatStyle(useFractionalLimitsIfAvailable:)(0, v84);
  uint64_t v32 = *(void *)(v27 + 16);
  uint64_t v81 = v29;
  if (v32)
  {
    uint64_t v33 = *(void *)(v29 + 16);
    if (!v33) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v34 = swift_bridgeObjectRetain();
    specialized Sequence.min(by:)(v34, (char *)&v86);
    uint64_t result = swift_bridgeObjectRelease();
    char v35 = v86;
    if (v86 != 8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v86) = v35;
      unint64_t v63 = Duration.UnitsFormatStyle.Unit.icuSkeleton.getter();
      uint64_t v65 = v64;
      char v66 = *(unsigned char *)(v26 + 24);
      uint64_t v67 = (uint64_t)v83;
      outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v83, (uint64_t)v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v5, 0, 1, v85);
      uint64_t v68 = specialized static ICUMeasurementNumberFormatter.skeleton(_:width:usage:numberFormatStyle:)(v63, v65, v66, 14, (uint64_t)v5);
      uint64_t v70 = v69;
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(skeleton: String, measurementUnit: Duration.UnitsFormatStyle.Unit, measurementValue: Double)>);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = xmmword_1821037E0;
      *(void *)(v39 + 32) = v68;
      *(void *)(v39 + 40) = v70;
      *(unsigned char *)(v39 + 48) = v35;
      *(void *)(v39 + 56) = 0;
      outlined destroy of Any?((uint64_t)v84, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      uint64_t v62 = v67;
LABEL_42:
      outlined destroy of Any?(v62, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      return v39;
    }
    uint64_t v29 = v81;
    uint64_t v33 = *(void *)(v81 + 16);
    if (!v33) {
      goto LABEL_9;
    }
  }
  if (*(double *)(v29 + 32) < 0.0)
  {
    BOOL v36 = 1;
    goto LABEL_10;
  }
  if (v33 != 1)
  {
    uint64_t v71 = 5;
    while (1)
    {
      uint64_t v72 = v71 - 3;
      if (__OFADD__(v71 - 4, 1)) {
        goto LABEL_51;
      }
      double v73 = *(double *)(v29 + 8 * v71);
      BOOL v36 = v73 < 0.0;
      if (v73 >= 0.0)
      {
        ++v71;
        if (v72 != v33) {
          continue;
        }
      }
      goto LABEL_10;
    }
  }
LABEL_9:
  BOOL v36 = 0;
LABEL_10:
  char v88 = 9;
  unint64_t v37 = *(void *)(v27 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v37)
  {
    uint64_t v39 = MEMORY[0x1E4FBC860];
LABEL_41:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v84, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v62 = (uint64_t)v83;
    goto LABEL_42;
  }
  unint64_t v38 = 0;
  uint64_t v74 = v82 + 74;
  uint64_t v77 = v32 - 1;
  uint64_t v78 = v29 + 32;
  id v76 = (void (**)(char *, void, uint64_t, uint64_t))(v79 + 56);
  uint64_t v39 = MEMORY[0x1E4FBC860];
  unint64_t v75 = 0x80000001823AEB50;
  uint64_t v79 = v27;
  uint64_t v80 = v26;
  while (v38 < v37)
  {
    unint64_t v40 = *(void *)(v29 + 16);
    if (v38 == v40) {
      goto LABEL_41;
    }
    if (v38 >= v40) {
      goto LABEL_50;
    }
    uint64_t v41 = *(unsigned __int8 *)(v27 + v38 + 32);
    double v42 = *(double *)(v78 + 8 * v38);
    if (v77 == v38) {
      Swift::Int v43 = v83;
    }
    else {
      Swift::Int v43 = v84;
    }
    outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v43, (uint64_t)v9);
    if (v36
      && (unsigned __int8 v44 = specialized getter of mostSignificantUnit #1 in Duration.UnitsFormatStyle._getSkeletons(_:)(&v88, v27),
          v44 != 8)
      && v41 == v44)
    {
      uint64_t v45 = v82;
      outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v9, v82);
      uint64_t v46 = v74 + *(int *)(v85 + 36);
      *(unsigned char *)(v46 + 2) = 0;
      *(_WORD *)uint64_t v46 = 0;
      outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      outlined init with take of LocalePreferences?(v45, (uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      if (v42 == 0.0) {
        double v42 = -0.1;
      }
    }
    else
    {
      uint64_t v47 = v82;
      outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v9, v82);
      uint64_t v48 = v74 + *(int *)(v85 + 36);
      *(unsigned char *)(v48 + 2) = 1;
      *(_WORD *)uint64_t v48 = 257;
      outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      outlined init with take of LocalePreferences?(v47, (uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    }
    ++v38;
    unint64_t v49 = (void *)0xE400000000000000;
    uint64_t v50 = 1801807223;
    switch(v41)
    {
      case 1:
        unint64_t v49 = (void *)0xE300000000000000;
        uint64_t v50 = 7954788;
        break;
      case 2:
        uint64_t v50 = 1920298856;
        break;
      case 3:
        unint64_t v49 = (void *)0xE600000000000000;
        uint64_t v50 = 0x6574756E696DLL;
        break;
      case 4:
        unint64_t v49 = (void *)0xE600000000000000;
        uint64_t v50 = 0x646E6F636573;
        break;
      case 5:
        uint64_t v51 = 0x73696C6C696DLL;
        goto LABEL_32;
      case 6:
        uint64_t v51 = 0x736F7263696DLL;
LABEL_32:
        uint64_t v50 = v51 & 0xFFFFFFFFFFFFLL | 0x6365000000000000;
        unint64_t v49 = (void *)0xEB00000000646E6FLL;
        break;
      case 7:
        unint64_t v49 = (void *)0xEA0000000000646ELL;
        uint64_t v50 = 0x6F6365736F6E616ELL;
        break;
      default:
        break;
    }
    unint64_t v86 = 0;
    unint64_t v87 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD000000000000016;
    unint64_t v87 = v75;
    v52._uint64_t countAndFlagsBits = v50;
    v52._unint64_t object = v49;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    uint64_t v53 = v86;
    unint64_t v54 = (void *)v87;
    char v55 = *(unsigned char *)(v26 + 24);
    outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v9, (uint64_t)v5);
    (*v76)(v5, 0, 1, v85);
    uint64_t v56 = specialized static ICUMeasurementNumberFormatter.skeleton(_:width:usage:numberFormatStyle:)(v53, v54, v55, 14, (uint64_t)v5);
    uint64_t v58 = v57;
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v39 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v39 + 16) + 1, 1, (void *)v39);
    }
    unint64_t v60 = *(void *)(v39 + 16);
    unint64_t v59 = *(void *)(v39 + 24);
    if (v60 >= v59 >> 1) {
      uint64_t v39 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, (void *)v39);
    }
    *(void *)(v39 + 16) = v60 + 1;
    uint64_t v61 = v39 + 32 * v60;
    *(void *)(v61 + 32) = v56;
    *(void *)(v61 + 40) = v58;
    *(unsigned char *)(v61 + 48) = v41;
    *(double *)(v61 + 56) = v42;
    uint64_t result = outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v27 = v79;
    uint64_t v26 = v80;
    unint64_t v37 = *(void *)(v79 + 16);
    uint64_t v29 = v81;
    if (v38 == v37) {
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of FloatingPointFormatStyle<Double>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t Duration.UnitsFormatStyle._createNumberFormatStyle(useFractionalLimitsIfAvailable:)@<X0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  v7[73] = 2;
  *(_DWORD *)(v7 + 74) = 33554434;
  long long v9 = &v7[*(int *)(v8 + 36)];
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  char v14 = &v7[v5[10]];
  *(void *)char v14 = 0;
  v14[8] = -1;
  v7[v5[11]] = 3;
  if ((a1 & 1) != 0
    && (uint64_t result = type metadata accessor for Duration.UnitsFormatStyle(0),
        uint64_t v16 = (uint64_t *)((char *)v2 + *(int *)(result + 36)),
        uint64_t v12 = *v16,
        uint64_t v13 = v16[1],
        v13 < *v16))
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = *((void *)v2 + 6);
    uint64_t result = type metadata accessor for Duration.UnitsFormatStyle(0);
    uint64_t v18 = (uint64_t)v2 + *(int *)(result + 40);
    if (*(unsigned char *)(v18 + 16))
    {
      uint64_t v19 = 998;
      if (v12 >= 998) {
        uint64_t v20 = 998;
      }
      else {
        uint64_t v20 = v12;
      }
      uint64_t v21 = v20 & ~(v20 >> 63);
      if ((v13 & ~(v13 >> 63)) < 998) {
        uint64_t v19 = v13 & ~(v13 >> 63);
      }
      if (v17 < 1)
      {
        *((_OWORD *)v7 + 1) = xmmword_182106C90;
        *((_OWORD *)v7 + 2) = xmmword_182106C90;
      }
      else
      {
        uint64_t v22 = 999;
        if (v17 < 999) {
          uint64_t v22 = v17;
        }
        *((void *)v7 + 2) = v22;
        *((void *)v7 + 3) = 0;
        *((void *)v7 + 4) = 0;
        *((void *)v7 + 5) = 1;
      }
      *((void *)v7 + 6) = v21;
      goto LABEL_39;
    }
    uint64_t v23 = *(void *)(v18 + 8);
    if (v17 < 1)
    {
      uint64_t v27 = *(void *)v18;
      if (v27 >= 999) {
        uint64_t v27 = 999;
      }
      uint64_t v28 = v27 & ~(v27 >> 63);
      uint64_t v29 = v23 & ~(v23 >> 63);
      if (v29 >= 999) {
        uint64_t v29 = 999;
      }
      if (v12 >= 998) {
        uint64_t v30 = 998;
      }
      else {
        uint64_t v30 = v12;
      }
      uint64_t v26 = v30 & ~(v30 >> 63);
      *((void *)v7 + 2) = v28;
      *((void *)v7 + 3) = 0;
      *((void *)v7 + 4) = v29;
      *((void *)v7 + 5) = 0;
      if ((v13 & ~(v13 >> 63)) >= 998) {
        uint64_t v19 = 998;
      }
      else {
        uint64_t v19 = v13 & ~(v13 >> 63);
      }
      goto LABEL_38;
    }
    if (v23 >= v17)
    {
      if (v17 >= 999) {
        uint64_t v24 = 999;
      }
      else {
        uint64_t v24 = v17;
      }
      if (v23 >= 999) {
        uint64_t v23 = 999;
      }
      if (v12 >= 998) {
        uint64_t v25 = 998;
      }
      else {
        uint64_t v25 = v12;
      }
      uint64_t v26 = v25 & ~(v25 >> 63);
      *((void *)v7 + 2) = v24;
      *((void *)v7 + 3) = 0;
      *((void *)v7 + 4) = v23;
      *((void *)v7 + 5) = 0;
      if ((v13 & ~(v13 >> 63)) >= 998) {
        uint64_t v19 = 998;
      }
      else {
        uint64_t v19 = v13 & ~(v13 >> 63);
      }
LABEL_38:
      *((void *)v7 + 6) = v26;
LABEL_39:
      *((void *)v7 + 7) = 0;
      *((void *)v7 + 8) = v19;
      unsigned char v7[72] = 0x80;
      uint64_t v31 = (uint64_t)a2
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>)
                   + 36);
      *(void *)uint64_t v31 = 0;
      *(unsigned char *)(v31 + 8) = 1;
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0;
      *(void *)(v31 + 40) = 0x1FFFFFFFELL;
      *(void *)(v31 + 56) = 0;
      *(void *)(v31 + 64) = 0;
      *(void *)(v31 + 48) = 0;
      *(_DWORD *)(v31 + 72) = 131584;
      *(_WORD *)(v31 + 76) = 512;
      uint64_t v32 = v31 + v5[9];
      long long v34 = *v2;
      v11((char *)v32, 1, 1, v10);
      uint64_t v33 = v31 + v5[10];
      *(void *)uint64_t v33 = 0;
      *(unsigned char *)(v33 + 8) = -1;
      *(unsigned char *)(v31 + v5[11]) = 3;
      *a2 = v34;
      swift_unknownObjectRetain();
      return outlined assign with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v7, v31, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.UnitsFormatStyle);
}

uint64_t outlined assign with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t specialized static Duration.UnitsFormatStyle.removingZeroUnits(units:values:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v5 = a1 + 32;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
    long long v9 = (char *)MEMORY[0x1E4FBC860];
    while (1)
    {
      double v10 = *(double *)(a2 + 8 * v7 + 32);
      if (v10 != 0.0)
      {
        if (v7 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return result;
        }
        char v11 = *(unsigned char *)(v5 + v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v13 = *((void *)v9 + 2);
        unint64_t v12 = *((void *)v9 + 3);
        if (v13 >= v12 >> 1) {
          long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v9);
        }
        *((void *)v9 + 2) = v13 + 1;
        v9[v13 + 32] = v11;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          uint64_t v8 = (void *)result;
        }
        unint64_t v15 = v8[2];
        unint64_t v14 = v8[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v8);
          uint64_t v8 = (void *)result;
        }
        v8[2] = v15 + 1;
        *(double *)&v8[v15 + 4] = v10;
      }
      if (v2 == ++v7)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v9;
      }
    }
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t specialized static Duration.UnitsFormatStyle.unitsToUse(duration:allowedUnits:maximumUnitCount:roundSmallerParts:trailingFractionalPartLength:roundingIncrement:dropZeroUnits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  swift_bridgeObjectRetain();
  uint64_t v18 = specialized _copyCollectionToContiguousArray<A>(_:)(a3);
  swift_bridgeObjectRelease();
  uint64_t v38 = v18;
  specialized MutableCollection<>.sort(by:)(&v38);
  uint64_t v19 = v38;
  uint64_t v37 = a8;
  Duration.valuesForUnits(_:trailingFractionalLength:smallestUnitRounding:roundingIncrement:)(v38, a7, a6, a8, a9 & 1, a1, a2);
  uint64_t v21 = v20;
  if ((a5 & 1) != 0 || *(void *)(a3 + 16) <= a4)
  {
    if (a10)
    {
      uint64_t v29 = specialized static Duration.UnitsFormatStyle.removingZeroUnits(units:values:)(v19, v20);
      swift_release();
      swift_bridgeObjectRelease();
      return v29;
    }
  }
  else if ((a10 & 1) == 0 {
         || (uint64_t v22 = specialized static Duration.UnitsFormatStyle.removingZeroUnits(units:values:)(v19, v20),
  }
             uint64_t v24 = v23,
             swift_release(),
             swift_bridgeObjectRelease(),
             uint64_t v19 = v22,
             uint64_t v21 = v24,
             *(void *)(v22 + 16) > a4))
  {
    uint64_t v25 = *(void *)(v21 + 16);
    if (v25)
    {
      if (*(double *)(v21 + 32) != 0.0)
      {
        uint64_t v27 = 0;
        goto LABEL_17;
      }
      if (v25 != 1)
      {
        for (uint64_t i = 5; ; ++i)
        {
          uint64_t v27 = i - 4;
          if (*(double *)(v21 + 8 * i) != 0.0) {
            break;
          }
          uint64_t v28 = i - 3;
          if (__OFADD__(v27, 1))
          {
            __break(1u);
            goto LABEL_30;
          }
          if (v28 == v25) {
            return v19;
          }
        }
LABEL_17:
        swift_bridgeObjectRelease();
        if (__OFADD__(v27, a4))
        {
LABEL_30:
          __break(1u);
        }
        else
        {
          if (v27 + a4 >= *(void *)(v19 + 16)) {
            a4 = *(void *)(v19 + 16);
          }
          else {
            a4 += v27;
          }
          if (a4 >= v27)
          {
            if ((v27 & 0x8000000000000000) == 0)
            {
              type metadata accessor for __ContiguousArrayStorageBase();
              swift_unknownObjectRetain_n();
              uint64_t v31 = swift_dynamicCastClass();
              if (!v31)
              {
                swift_bridgeObjectRelease();
                uint64_t v31 = MEMORY[0x1E4FBC860];
              }
              uint64_t v36 = a1;
              uint64_t v32 = *(void *)(v31 + 16);
              swift_release();
              if (v32 == a4 - v27)
              {
                uint64_t v33 = swift_dynamicCastClass();
                uint64_t v34 = v37;
                uint64_t v35 = a6;
                if (!v33)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v33 = MEMORY[0x1E4FBC860];
                }
                goto LABEL_28;
              }
LABEL_33:
              swift_bridgeObjectRelease();
              uint64_t v33 = specialized _copyCollectionToContiguousArray<A>(_:)(v19, v19 + 32, v27, (2 * a4) | 1);
              uint64_t v34 = v37;
              uint64_t v35 = a6;
LABEL_28:
              swift_bridgeObjectRelease();
              Duration.valuesForUnits(_:trailingFractionalLength:smallestUnitRounding:roundingIncrement:)(v33, a7, v35, v34, a9 & 1, v36, a2);
              return v33;
            }
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
        }
        __break(1u);
        goto LABEL_32;
      }
    }
  }
  return v19;
}

void Duration.valuesForUnits(_:trailingFractionalLength:smallestUnitRounding:roundingIncrement:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return;
  }
  unint64_t v20 = *(char *)(v19 + a1 + 31);
  uint64_t v134 = v15;
  uint64_t v135 = a3;
  uint64_t v132 = v18;
  uint64_t v133 = v16;
  if (v20 < 5)
  {
    static Duration.interval(fractionalSecondsLength:)(a2);
    unint64_t v136 = qword_182181808[v20];
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v29 = static Duration.* infix<A>(_:_:)();
    uint64_t v30 = v29;
    uint64_t v25 = v31;
    if (a5)
    {
      uint64_t v23 = v29;
      goto LABEL_16;
    }
    uint64_t v26 = static Duration.* infix(_:_:)();
    uint64_t v28 = v32;
    uint64_t v23 = v30;
    goto LABEL_13;
  }
  if ((v20 - 5) < 3u)
  {
    uint64_t v21 = 3 * (v20 - 5) + 3;
    uint64_t v22 = v21 ^ 0x7FFFFFFFFFFFFFFFLL;
    if ((v21 ^ 0x7FFFFFFFFFFFFFFFLL) >= a2) {
      uint64_t v22 = a2;
    }
    if (__OFADD__(v21, v22))
    {
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
    uint64_t v23 = static Duration.interval(fractionalSecondsLength:)(v21 + v22);
    uint64_t v25 = v24;
    if (a5)
    {
LABEL_16:
      static Duration.zero.getter();
      if (static Duration.== infix(_:_:)())
      {
LABEL_62:
        id v115 = (void *)Duration.factor(intoUnits:)(a1);
        unint64_t v116 = v115[2];
        uint64_t v117 = Duration.components.getter();
        Duration.components.getter();
        uint64_t v119 = v118;
        long double v120 = 3.0;
        double v7 = 604800.0;
        switch((int)v20)
        {
          case 0:
            goto LABEL_70;
          case 1:
            double v7 = 86400.0;
            goto LABEL_70;
          case 2:
            double v7 = 3600.0;
            goto LABEL_70;
          case 3:
            double v7 = 60.0;
            goto LABEL_70;
          case 4:
            double v7 = 1.0;
            goto LABEL_70;
          case 5:
            goto LABEL_69;
          case 6:
            long double v120 = 6.0;
            goto LABEL_69;
          case 7:
            long double v120 = 9.0;
LABEL_69:
            double v7 = pow(0.1, v120);
LABEL_70:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              goto LABEL_84;
            }
            if (v116) {
              goto LABEL_72;
            }
            goto LABEL_85;
          default:
            goto LABEL_98;
        }
      }
      static Duration.zero.getter();
      char v33 = static Duration.< infix(_:_:)();
      uint64_t v127 = a1;
      unint64_t v128 = v20;
      if (v33)
      {
        uint64_t v34 = static Duration.zero.getter();
        uint64_t v23 = MEMORY[0x185304360](v34);
        uint64_t v25 = v35;
      }
      static Duration.zero.getter();
      uint64_t v36 = a6;
      uint64_t v37 = a7;
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v38 = static Duration.zero.getter();
        uint64_t v36 = MEMORY[0x185304360](v38);
        uint64_t v37 = v39;
      }
      uint64_t v131 = a6;
      uint64_t v40 = Duration.components.getter();
      static Duration.zero.getter();
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v41 = static Duration.zero.getter();
        MEMORY[0x185304360](v41);
      }
      uint64_t v42 = Duration.components.getter();
      unint64_t v44 = v43;
      if (v42)
      {
        if (v43)
        {
          if (static Duration.< infix(_:_:)())
          {
            uint64_t v45 = static Duration.zero.getter();
            unint64_t v47 = v46;
            uint64_t v48 = static Duration.zero.getter();
          }
          else
          {
            static Duration./ infix(_:_:)();
            if ((~*(void *)&v54 & 0x7FF0000000000000) == 0)
            {
LABEL_89:
              __break(1u);
              goto LABEL_90;
            }
            if (v54 <= -1.0)
            {
LABEL_90:
              __break(1u);
              goto LABEL_91;
            }
            if (v54 >= 1.84467441e19)
            {
LABEL_91:
              __break(1u);
              goto LABEL_92;
            }
            unint64_t v55 = (unint64_t)v54;
            unint64_t v136 = (unint64_t)v54;
            lazy protocol witness table accessor for type UInt64 and conformance UInt64();
            uint64_t v56 = static Duration.* infix<A>(_:_:)();
            MEMORY[0x185304360](v36, v37, v56, v57);
            static Duration./ infix(_:_:)();
            if ((~*(void *)&v58 & 0x7FF0000000000000) == 0)
            {
LABEL_92:
              __break(1u);
              goto LABEL_93;
            }
            if (v58 <= -9.22337204e18)
            {
LABEL_93:
              __break(1u);
              goto LABEL_94;
            }
            if (v58 >= 9.22337204e18)
            {
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
              goto LABEL_96;
            }
            uint64_t v59 = (uint64_t)v58;
            uint64_t v130 = (uint64_t)v58;
            Duration.init(secondsComponent:attosecondsComponent:)();
            unint64_t v136 = v55;
            uint64_t v60 = static Duration.* infix<A>(_:_:)();
            unint64_t v129 = v55;
            uint64_t v61 = v60;
            uint64_t v126 = v62;
            Duration.init(secondsComponent:attosecondsComponent:)();
            unint64_t v136 = v59;
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            uint64_t v63 = static Duration.* infix<A>(_:_:)();
            uint64_t v45 = MEMORY[0x185304350](v61, v126, v63, v64);
            unint64_t v66 = v65;
            unint64_t v136 = v129;
            uint64_t v67 = static Duration.* infix<A>(_:_:)();
            uint64_t v69 = v68;
            unint64_t v136 = v130;
            unint64_t v47 = v66;
            uint64_t v70 = static Duration.* infix<A>(_:_:)();
            uint64_t v48 = MEMORY[0x185304350](v67, v69, v70, v71);
          }
        }
        else
        {
          uint64_t v51 = v42;
          if (v40 == 0x8000000000000000 && v42 == -1) {
            goto LABEL_95;
          }
          uint64_t v52 = v40 / v42;
          uint64_t v45 = Duration.init(secondsComponent:attosecondsComponent:)();
          if ((unsigned __int128)(v51 * (__int128)v52) >> 64 != (v51 * v52) >> 63) {
            goto LABEL_88;
          }
          unint64_t v47 = v53;
          uint64_t v48 = Duration.init(secondsComponent:attosecondsComponent:)();
        }
      }
      else
      {
        unint64_t v136 = v43;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        uint64_t v45 = static Duration./ infix<A>(_:_:)();
        unint64_t v47 = v50;
        unint64_t v136 = v44;
        uint64_t v48 = static Duration.* infix<A>(_:_:)();
      }
      uint64_t v72 = v48;
      uint64_t v73 = v49;
      uint64_t v74 = v131;
      static Duration.zero.getter();
      int v75 = static Duration.< infix(_:_:)() & 1;
      static Duration.zero.getter();
      if (v75 == (static Duration.< infix(_:_:)() & 1))
      {
        unint64_t v129 = v47;
      }
      else
      {
        uint64_t v76 = static Duration.zero.getter();
        uint64_t v72 = MEMORY[0x185304360](v76);
        uint64_t v73 = v77;
        uint64_t v78 = static Duration.zero.getter();
        uint64_t v45 = MEMORY[0x185304360](v78);
        unint64_t v129 = v79;
      }
      static Duration.zero.getter();
      uint64_t v80 = v72;
      uint64_t v81 = v73;
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v82 = static Duration.zero.getter();
        uint64_t v80 = MEMORY[0x185304360](v82);
        uint64_t v81 = v83;
      }
      uint64_t v130 = v45;
      static Duration.zero.getter();
      char v84 = static Duration.< infix(_:_:)();
      uint64_t v85 = v74;
      uint64_t v86 = a7;
      if (v84)
      {
        uint64_t v87 = static Duration.zero.getter();
        uint64_t v85 = MEMORY[0x185304360](v87);
        uint64_t v86 = v88;
      }
      MEMORY[0x185304360](v80, v81, v85, v86);
      static Duration.zero.getter();
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v89 = static Duration.zero.getter();
        MEMORY[0x185304360](v89);
      }
      static Duration.zero.getter();
      if (static Duration.== infix(_:_:)())
      {
        unint64_t v136 = 2;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        unint64_t v91 = v129;
        uint64_t v90 = v130;
        static Duration./ infix<A>(_:_:)();
        unint64_t v136 = 2;
        uint64_t v92 = static Duration.* infix<A>(_:_:)();
        MEMORY[0x185304360](v90, v91, v92, v93);
        static Duration.zero.getter();
LABEL_61:
        static Duration.== infix(_:_:)();
        a1 = v127;
        LODWORD(v20) = v128;
        goto LABEL_62;
      }
      static Duration.zero.getter();
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v94 = static Duration.zero.getter();
        uint64_t v23 = MEMORY[0x185304360](v94);
        uint64_t v25 = v95;
      }
      uint64_t v96 = MEMORY[0x185304350](v72, v73, v23, v25);
      id v98 = v97;
      static Duration.zero.getter();
      uint64_t v99 = v96;
      id v100 = v98;
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v101 = static Duration.zero.getter();
        uint64_t v99 = MEMORY[0x185304360](v101);
        id v100 = v102;
      }
      static Duration.zero.getter();
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v103 = static Duration.zero.getter();
        uint64_t v74 = MEMORY[0x185304360](v103);
        a7 = v104;
      }
      uint64_t v131 = v96;
      MEMORY[0x185304360](v99, v100, v74, a7);
      static Duration.zero.getter();
      long long v105 = v98;
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v106 = static Duration.zero.getter();
        MEMORY[0x185304360](v106);
      }
      unint64_t v108 = v132;
      uint64_t v107 = v133;
      uint64_t v109 = v134;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v135, v134);
      int v110 = (*(uint64_t (**)(char *, uint64_t))(v107 + 88))(v108, v109);
      if (v110 == *MEMORY[0x1E4FBBEA0]) {
        goto LABEL_59;
      }
      id v115 = v105;
      if (v110 == *MEMORY[0x1E4FBBE98])
      {
        if (static Duration.< infix(_:_:)() & 1) == 0 && (static Duration.== infix(_:_:)())
        {
          unint64_t v136 = 2;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          unint64_t v122 = v129;
          uint64_t v121 = v130;
          static Duration./ infix<A>(_:_:)();
          unint64_t v136 = 2;
          uint64_t v123 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x185304360](v121, v122, v123, v124);
          static Duration.zero.getter();
          static Duration.== infix(_:_:)();
        }
        goto LABEL_60;
      }
      unint64_t v116 = v131;
      if (v110 == *MEMORY[0x1E4FBBEA8] || v110 == *MEMORY[0x1E4FBBEB0])
      {
LABEL_59:
        static Duration.< infix(_:_:)();
      }
      else if (v110 != *MEMORY[0x1E4FBBE88])
      {
        uint64_t v117 = v131;
        uint64_t v119 = (uint64_t)v105;
        if (v110 != *MEMORY[0x1E4FBBE90])
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_84:
          id v115 = specialized _ArrayBuffer._consumeAndCreateNew()(v115);
          if (v116)
          {
LABEL_72:
            if (v116 <= v115[2])
            {
              *(double *)&v115[v116 + 3] = ((double)v119 * 1.0e-18 + (double)v117) / v7 + *(double *)&v115[v116 + 3];
              return;
            }
          }
          else
          {
LABEL_85:
            __break(1u);
          }
          __break(1u);
          goto LABEL_87;
        }
      }
LABEL_60:
      unint64_t v136 = 2;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      unint64_t v112 = v129;
      uint64_t v111 = v130;
      static Duration./ infix<A>(_:_:)();
      unint64_t v136 = 2;
      uint64_t v113 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x185304360](v111, v112, v113, v114);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
      goto LABEL_61;
    }
    if ((v20 - 5) >= 3u) {
      goto LABEL_97;
    }
    uint64_t v26 = static Duration.* infix(_:_:)();
    uint64_t v28 = v27;
LABEL_13:
    if ((static Duration.< infix(_:_:)() & 1) == 0)
    {
      uint64_t v23 = v26;
      uint64_t v25 = v28;
    }
    goto LABEL_16;
  }
LABEL_96:
  __break(1u);
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
}

uint64_t Duration.factor(intoUnits:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      unint64_t v5 = *(char *)(a1 + v3 + 32);
      if (v5 <= 4)
      {
        uint64_t v12 = qword_182181808[v5];
        uint64_t v13 = Duration.components.getter();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        }
        unint64_t v15 = v4[2];
        unint64_t v14 = v4[3];
        if (v15 >= v14 >> 1) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v4);
        }
        v4[2] = v15 + 1;
        *(double *)&v4[v15 + 4] = (double)(v13 / v12);
        Duration.components.getter();
      }
      else
      {
        if ((v5 - 5) > 2u)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
          }
          unint64_t v17 = v4[2];
          unint64_t v16 = v4[3];
          if (v17 >= v16 >> 1) {
            uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v4);
          }
          v4[2] = v17 + 1;
          v4[v17 + 4] = 0;
          goto LABEL_5;
        }
        uint64_t v6 = qword_182181830[(char)(v5 - 5)];
        Duration.components.getter();
        double v8 = (double)(v7 / v6);
        if (Duration.components.getter())
        {
          uint64_t result = Duration.components.getter();
          if ((v5 - 5) > 2u)
          {
            __break(1u);
            return result;
          }
          double v8 = __exp10(dbl_182181848[(char)(v5 - 5)]) * (double)result + v8;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        }
        unint64_t v11 = v4[2];
        unint64_t v10 = v4[3];
        if (v11 >= v10 >> 1) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v4);
        }
        v4[2] = v11 + 1;
        *(double *)&v4[v11 + 4] = v8;
      }
      Duration.init(secondsComponent:attosecondsComponent:)();
LABEL_5:
      if (v1 == ++v3)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v4;
      }
    }
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t static Duration.interval(fractionalSecondsLength:)(uint64_t a1)
{
  uint64_t v1 = a1 % 3;
  if (!(a1 % 3))
  {
    if (a1 >= 1)
    {
      if ((unint64_t)a1 < 4) {
        return 1000000000000000;
      }
      if ((unint64_t)a1 >= 7)
      {
        if ((unint64_t)a1 < 0xA) {
          return 1000000000;
        }
        goto LABEL_18;
      }
      return 1000000000000;
    }
    return 1000000000000000000;
  }
  if (v1 == 2)
  {
    if (a1 >= 1)
    {
      if ((unint64_t)a1 < 4) {
        return 10000000000000000;
      }
      if ((unint64_t)a1 >= 7)
      {
        if ((unint64_t)a1 <= 9) {
          return 10000000000;
        }
        goto LABEL_18;
      }
      return 10000000000000;
    }
    return 1000000000000000000;
  }
  if (v1 != 1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (a1 < 1) {
    return 1000000000000000000;
  }
  if ((unint64_t)a1 < 4) {
    return 100000000000000000;
  }
  if ((unint64_t)a1 < 7) {
    return 100000000000000;
  }
  if ((unint64_t)a1 > 9)
  {
LABEL_18:
    pow(0.1, (double)a1);
    return static Duration.seconds(_:)();
  }
  return 100000000000;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  unint64_t v5 = specialized Sequence._copyContents(initializing:)(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  id v2;
  uint64_t v3;
  void *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9[6];

  uint64_t v2 = objc_msgSend(*(id *)(a1 + 16), sel_count);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = (uint64_t)v2;
  if ((uint64_t)v2 <= 0)
  {
    size_t v4 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    size_t v4 = (void *)swift_allocObject();
    unint64_t v5 = _swift_stdlib_malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    v4[2] = v3;
    v4[3] = 2 * (v6 >> 3);
  }
  swift_retain();
  uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)(v9, (uint64_t)(v4 + 4), v3, a1);
  uint64_t result = swift_release();
  if (v7 == v3) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned char v8[240];

  uint64_t v2 = specialized BidirectionalCollection._distance(from:to:)(*(void *)(a1 + 136), *(void **)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 192));
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = v2;
  if (v2 <= 0)
  {
    size_t v4 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AttributeContainer, Range<AttributedString.Index>)>);
    size_t v4 = (void *)swift_allocObject();
    unint64_t v5 = _swift_stdlib_malloc_size(v4);
    v4[2] = v3;
    v4[3] = 2 * ((uint64_t)(v5 - 32) / 80);
  }
  outlined retain of AttributedString.Runs.NSAttributesSlice(a1);
  uint64_t v6 = specialized Sequence._copyContents(initializing:)((uint64_t)v8, (uint64_t)(v4 + 4), v3);
  uint64_t result = outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)v8);
  if (v6 == v3) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

{
  _OWORD *v2;
  long long v3;
  long long v4;
  long long v5;
  uint64_t v6;
  void *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void v12[14];
  unsigned char v13[112];
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21[3];
  unsigned char v22[40];

  uint64_t v2 = *(_OWORD **)a1;
  uint64_t v3 = *(_OWORD *)(a1 + 24);
  unint64_t v14 = *(_OWORD *)(a1 + 8);
  unint64_t v15 = v3;
  size_t v4 = *(_OWORD *)(a1 + 56);
  unint64_t v16 = *(_OWORD *)(a1 + 40);
  unint64_t v17 = v4;
  unint64_t v5 = v2[2];
  uint64_t v18 = v2[1];
  uint64_t v19 = v5;
  unint64_t v20 = v2[3];
  v21[0] = v18;
  v21[1] = v5;
  void v21[2] = v20;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v21, (uint64_t)v22);
  outlined retain of Locale((uint64_t)v22);
  BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
  uint64_t v6 = BigSubstring.UnicodeScalarView.count.getter();
  outlined release of Locale((uint64_t)v13);
  if (!v6) {
    return MEMORY[0x1E4FBC860];
  }
  if (v6 <= 0)
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
    uint64_t v7 = (void *)swift_allocObject();
    double v8 = _swift_stdlib_malloc_size(v7);
    long long v9 = v8 - 32;
    if (v8 < 32) {
      long long v9 = v8 - 29;
    }
    _OWORD v7[2] = v6;
    v7[3] = 2 * (v9 >> 2);
  }
  outlined retain of AttributedString.Runs(a1);
  unint64_t v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v12, (uint64_t)(v7 + 4), v6);
  uint64_t result = swift_release();
  if (v10 == v6) {
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

{
  _OWORD *v2;
  long long v3;
  long long v4;
  long long v5;
  uint64_t v6;
  uint64_t *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void v12[14];
  unsigned char v13[112];
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21[3];
  unsigned char v22[40];

  uint64_t v2 = *(_OWORD **)a1;
  uint64_t v3 = *(_OWORD *)(a1 + 24);
  unint64_t v14 = *(_OWORD *)(a1 + 8);
  unint64_t v15 = v3;
  size_t v4 = *(_OWORD *)(a1 + 56);
  unint64_t v16 = *(_OWORD *)(a1 + 40);
  unint64_t v17 = v4;
  unint64_t v5 = v2[2];
  uint64_t v18 = v2[1];
  uint64_t v19 = v5;
  unint64_t v20 = v2[3];
  v21[0] = v18;
  v21[1] = v5;
  void v21[2] = v20;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v21, (uint64_t)v22);
  outlined retain of Locale((uint64_t)v22);
  BigSubstring.init(_unchecked:in:)();
  uint64_t v6 = BigSubstring.count.getter();
  outlined release of Locale((uint64_t)v13);
  if (!v6) {
    return MEMORY[0x1E4FBC860];
  }
  if (v6 <= 0)
  {
    uint64_t v7 = (uint64_t *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    uint64_t v7 = (uint64_t *)swift_allocObject();
    double v8 = _swift_stdlib_malloc_size(v7);
    long long v9 = v8 - 32;
    if (v8 < 32) {
      long long v9 = v8 - 17;
    }
    _OWORD v7[2] = v6;
    v7[3] = 2 * (v9 >> 4);
  }
  outlined retain of AttributedString.Runs(a1);
  unint64_t v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v12, v7 + 4, v6);
  uint64_t result = swift_release();
  if (v10 == v6) {
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void v12[15];

  uint64_t v2 = BigString.Index.utf8Offset.getter();
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v2;
    size_t v4 = BigString.Index.utf8Offset.getter();
    if ((v4 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = specialized Collection.distance(from:to:)((v3 << 16) | 4, (v4 << 16) | 4);
      if (!v5) {
        return MEMORY[0x1E4FBC860];
      }
      uint64_t v6 = v5;
      if (v5 <= 0)
      {
        uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.Index>);
        uint64_t v7 = (void *)swift_allocObject();
        double v8 = _swift_stdlib_malloc_size(v7);
        long long v9 = v8 - 32;
        if (v8 < 32) {
          long long v9 = v8 - 25;
        }
        _OWORD v7[2] = v6;
        v7[3] = 2 * (v9 >> 3);
      }
      outlined retain of Locale(a1);
      unint64_t v10 = specialized Sequence._copySequenceContents(initializing:)(v12, (uint64_t)(v7 + 4), v6);
      swift_unknownObjectRelease();
      if (v10 == v6) {
        return (uint64_t)v7;
      }
      __break(1u);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned char v14[248];
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;

  uint64_t v2 = *(_OWORD *)(a1 + 176);
  uint64_t v25 = *(_OWORD *)(a1 + 160);
  uint64_t v26 = v2;
  uint64_t v27 = *(_OWORD *)(a1 + 192);
  uint64_t v28 = *(void *)(a1 + 208);
  uint64_t v3 = *(_OWORD *)(a1 + 112);
  uint64_t v21 = *(_OWORD *)(a1 + 96);
  uint64_t v22 = v3;
  size_t v4 = *(_OWORD *)(a1 + 144);
  uint64_t v23 = *(_OWORD *)(a1 + 128);
  uint64_t v24 = v4;
  unint64_t v5 = *(_OWORD *)(a1 + 48);
  unint64_t v17 = *(_OWORD *)(a1 + 32);
  uint64_t v18 = v5;
  uint64_t v6 = *(_OWORD *)(a1 + 80);
  uint64_t v19 = *(_OWORD *)(a1 + 64);
  unint64_t v20 = v6;
  uint64_t v7 = *(_OWORD *)(a1 + 16);
  unint64_t v15 = *(_OWORD *)a1;
  unint64_t v16 = v7;
  double v8 = specialized BidirectionalCollection._distance(from:to:)(*((void *)&v23 + 1), v24, *((void *)&v24 + 1), v25, *((void *)&v25 + 1), v26, *((void *)&v26 + 1), v27);
  if (!v8) {
    return MEMORY[0x1E4FBC860];
  }
  long long v9 = v8;
  if (v8 <= 0)
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AttributedString?, Range<AttributedString.Index>)>);
    unint64_t v10 = (void *)swift_allocObject();
    unint64_t v11 = _swift_stdlib_malloc_size(v10);
    _OWORD v10[2] = v9;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  uint64_t v12 = specialized Sequence._copyContents(initializing:)((uint64_t)v14, (uint64_t)(v10 + 4), v9);
  uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v14);
  if (v12 == v9) {
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned char v14[248];
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;

  uint64_t v2 = *(_OWORD *)(a1 + 176);
  uint64_t v25 = *(_OWORD *)(a1 + 160);
  uint64_t v26 = v2;
  uint64_t v27 = *(_OWORD *)(a1 + 192);
  uint64_t v28 = *(void *)(a1 + 208);
  uint64_t v3 = *(_OWORD *)(a1 + 112);
  uint64_t v21 = *(_OWORD *)(a1 + 96);
  uint64_t v22 = v3;
  size_t v4 = *(_OWORD *)(a1 + 144);
  uint64_t v23 = *(_OWORD *)(a1 + 128);
  uint64_t v24 = v4;
  unint64_t v5 = *(_OWORD *)(a1 + 48);
  unint64_t v17 = *(_OWORD *)(a1 + 32);
  uint64_t v18 = v5;
  uint64_t v6 = *(_OWORD *)(a1 + 80);
  uint64_t v19 = *(_OWORD *)(a1 + 64);
  unint64_t v20 = v6;
  uint64_t v7 = *(_OWORD *)(a1 + 16);
  unint64_t v15 = *(_OWORD *)a1;
  unint64_t v16 = v7;
  double v8 = specialized BidirectionalCollection._distance(from:to:)(*((void *)&v23 + 1), v24, *((void *)&v24 + 1), v25, *((void *)&v25 + 1), v26, *((void *)&v26 + 1), v27);
  if (!v8) {
    return MEMORY[0x1E4FBC860];
  }
  long long v9 = v8;
  if (v8 <= 0)
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InflectionRule?, Range<AttributedString.Index>)>);
    unint64_t v10 = (void *)swift_allocObject();
    unint64_t v11 = _swift_stdlib_malloc_size(v10);
    _OWORD v10[2] = v9;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  uint64_t v12 = specialized Sequence._copyContents(initializing:)((uint64_t)v14, (uint64_t)(v10 + 4), v9);
  uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v14);
  if (v12 == v9) {
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copyContents(initializing:)(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  void v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v81 = *(unsigned __int8 *)(v79 + i);
        uint64_t v82 = v78;
        do
        {
          unsigned int v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(unsigned char *)(v79 + v82 + 1) = v83;
          *(unsigned char *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v94 = result;
  Swift::Int v95 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (unsigned __int8 *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_103:
      uint64_t v93 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v84 + v88), (unsigned __int8 *)(v84 + *(void *)&v87[16 * v12 - 16]), v84 + v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          unint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v93 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v93 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v95;
    uint64_t v93 = v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v92 = v2;
  uint64_t v10 = *v2;
  unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v96 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unsigned int v14 = *(unsigned __int8 *)(v10 + v9);
      unsigned int v15 = *(unsigned __int8 *)(v10 + v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unsigned int v16 = v14;
        while (1)
        {
          unsigned int v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unsigned int v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              char v20 = *(unsigned char *)(v10 + v19);
              *(unsigned char *)(v10 + v19) = *(unsigned char *)(v10 + v18);
              *(unsigned char *)(v10 + v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v94) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v94;
    if (__OFADD__(v13, v94)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (unsigned char *)(v10 + v9);
      do
      {
        unsigned int v23 = *(unsigned __int8 *)(v10 + v9);
        Swift::Int v24 = v13;
        uint64_t v25 = v22;
        do
        {
          unsigned int v26 = *(v25 - 1);
          if (v23 >= v26) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *uint64_t v25 = v26;
          *--uint64_t v25 = v23;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v96;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v96;
      unint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          unint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            unint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        unint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v10 + *(void *)v71), (unsigned __int8 *)(v10 + *(void *)v74), v10 + v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v96;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v95;
    if (v9 >= v95)
    {
      uint64_t v2 = v92;
      uint64_t v8 = v93;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t *v21;
  uint64_t v22;
  Swift::Int v23;
  double *v24;
  double v25;
  Swift::Int v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  double *__dst;

  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v80 = 0;
      unsigned int v81 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v83 = *(double *)(v81 + 8 * i);
        uint64_t v84 = v80;
        do
        {
          unint64_t v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85) {
            break;
          }
          if (!v81) {
            goto LABEL_140;
          }
          *(void *)(v85 + 8) = *(void *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v97 = result;
  id v98 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_102:
      uint64_t v96 = v8;
      if (v12 >= 2)
      {
        uint64_t v86 = *v2;
        do
        {
          uint64_t v87 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_131;
          }
          if (!v86) {
            goto LABEL_144;
          }
          uint64_t v88 = v11;
          uint64_t v89 = v11 + 32;
          uint64_t v90 = *(void *)&v11[16 * v87 + 32];
          unint64_t v91 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(void *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1) {
            break;
          }
          if (v91 < v90) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v88);
          }
          if (v87 >= *((void *)v88 + 2)) {
            goto LABEL_133;
          }
          uint64_t v92 = &v88[16 * v87 + 32];
          *(void *)uint64_t v92 = v90;
          *((void *)v92 + 1) = v91;
          uint64_t v93 = *((void *)v88 + 2);
          if (v12 > v93) {
            goto LABEL_134;
          }
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          unint64_t v11 = v88;
          *((void *)v88 + 2) = v93 - 1;
          unint64_t v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(void *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v96 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v98;
    uint64_t v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  Swift::Int v94 = v2;
  Swift::Int v95 = *v2 - 8;
  unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v99 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unsigned int v14 = *(double *)(v10 + 8 * v9);
      unsigned int v15 = *(double *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unsigned int v16 = v14;
        while (1)
        {
          unsigned int v17 = v16;
          unsigned int v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17) {
            break;
          }
          if (v3 == ++v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_137;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = (uint64_t *)(v95 + 8 * v9);
          Swift::Int v19 = v9;
          char v20 = v13;
          Swift::Int v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_143;
              }
              uint64_t v22 = *v21;
              *Swift::Int v21 = *v18;
              *Swift::Int v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_135;
    }
    if (v9 - v13 >= v97) {
      goto LABEL_46;
    }
    unsigned int v23 = v13 + v97;
    if (__OFADD__(v13, v97)) {
      goto LABEL_138;
    }
    if (v23 >= v3) {
      unsigned int v23 = v3;
    }
    if (v23 < v13) {
      break;
    }
    if (v9 != v23)
    {
      Swift::Int v24 = (double *)(v95 + 8 * v9);
      do
      {
        uint64_t v25 = *(double *)(v10 + 8 * v9);
        unsigned int v26 = v13;
        unint64_t v27 = v24;
        do
        {
          unint64_t v28 = *v27;
          if (v25 >= *v27) {
            break;
          }
          if (!v10) {
            goto LABEL_141;
          }
          *unint64_t v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      Swift::Int v9 = v23;
    }
LABEL_46:
    if (v9 < v13) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    uint64_t v30 = *((void *)v11 + 2);
    uint64_t v29 = *((void *)v11 + 3);
    unint64_t v12 = v30 + 1;
    uint64_t v10 = v99;
    if (v30 >= v29 >> 1)
    {
      uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v11);
      uint64_t v10 = v99;
      unint64_t v11 = v79;
    }
    *((void *)v11 + 2) = v12;
    unint64_t v31 = v11 + 32;
    uint64_t v32 = &v11[16 * v30 + 32];
    *(void *)uint64_t v32 = v13;
    *((void *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        uint64_t v33 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v38 = &v31[16 * v12];
          uint64_t v39 = *((void *)v38 - 8);
          uint64_t v40 = *((void *)v38 - 7);
          unint64_t v44 = __OFSUB__(v40, v39);
          uint64_t v41 = v40 - v39;
          if (v44) {
            goto LABEL_119;
          }
          unint64_t v43 = *((void *)v38 - 6);
          BOOL v42 = *((void *)v38 - 5);
          unint64_t v44 = __OFSUB__(v42, v43);
          uint64_t v36 = v42 - v43;
          uint64_t v37 = v44;
          if (v44) {
            goto LABEL_120;
          }
          uint64_t v45 = v12 - 2;
          uint64_t v46 = &v31[16 * v12 - 32];
          uint64_t v48 = *(void *)v46;
          uint64_t v47 = *((void *)v46 + 1);
          unint64_t v44 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          if (v44) {
            goto LABEL_122;
          }
          unint64_t v44 = __OFADD__(v36, v49);
          uint64_t v50 = v36 + v49;
          if (v44) {
            goto LABEL_125;
          }
          if (v50 >= v41)
          {
            uint64_t v68 = &v31[16 * v33];
            unint64_t v70 = *(void *)v68;
            uint64_t v69 = *((void *)v68 + 1);
            unint64_t v44 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v44) {
              goto LABEL_129;
            }
            uint64_t v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v62 = *((void *)v11 + 4);
            uint64_t v63 = *((void *)v11 + 5);
            unint64_t v44 = __OFSUB__(v63, v62);
            unint64_t v55 = v63 - v62;
            uint64_t v56 = v44;
            goto LABEL_77;
          }
          char v35 = *((void *)v11 + 4);
          uint64_t v34 = *((void *)v11 + 5);
          unint64_t v44 = __OFSUB__(v34, v35);
          uint64_t v36 = v34 - v35;
          uint64_t v37 = v44;
        }
        if (v37) {
          goto LABEL_121;
        }
        uint64_t v45 = v12 - 2;
        uint64_t v51 = &v31[16 * v12 - 32];
        uint64_t v53 = *(void *)v51;
        BOOL v52 = *((void *)v51 + 1);
        char v54 = __OFSUB__(v52, v53);
        unint64_t v55 = v52 - v53;
        uint64_t v56 = v54;
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v57 = &v31[16 * v33];
        BOOL v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        unint64_t v44 = __OFSUB__(v58, v59);
        uint64_t v60 = v58 - v59;
        if (v44) {
          goto LABEL_127;
        }
        if (__OFADD__(v55, v60)) {
          goto LABEL_128;
        }
        if (v55 + v60 >= v36)
        {
          uint64_t v61 = v36 < v60;
LABEL_83:
          if (v61) {
            uint64_t v33 = v45;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v56) {
          goto LABEL_123;
        }
        uint64_t v64 = &v31[16 * v33];
        unint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        unint64_t v44 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v44) {
          goto LABEL_126;
        }
        if (v67 < v55) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10) {
          goto LABEL_142;
        }
        uint64_t v73 = &v31[16 * v72];
        uint64_t v74 = *(void *)v73;
        uint64_t v75 = v31;
        unint64_t v76 = &v31[16 * v33];
        uint64_t v77 = *((void *)v76 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v10 + 8 * *(void *)v73), (double *)(v10 + 8 * *(void *)v76), v10 + 8 * v77, __dst);
        if (v1) {
          goto LABEL_113;
        }
        if (v77 < v74) {
          goto LABEL_116;
        }
        if (v33 > *((void *)v11 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v73 = v74;
        *(void *)&v75[16 * v72 + 8] = v77;
        uint64_t v78 = *((void *)v11 + 2);
        if (v33 >= v78) {
          goto LABEL_118;
        }
        unint64_t v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        unint64_t v31 = v75;
        *((void *)v11 + 2) = v78 - 1;
        uint64_t v10 = v99;
        if (v78 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v98;
    if (v9 >= v98)
    {
      uint64_t v8 = v96;
      uint64_t v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  Swift::Int v18;
  Swift::Int v19;
  char v20;
  Swift::Int v21;
  unsigned char *v22;
  unsigned int v23;
  Swift::Int v24;
  unsigned char *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  Swift::Int v94;
  Swift::Int v95;
  uint64_t v96;
  unsigned __int8 *__dst;

  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v81 = *(unsigned __int8 *)(v79 + i);
        uint64_t v82 = v78;
        do
        {
          unsigned int v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(unsigned char *)(v79 + v82 + 1) = v83;
          *(unsigned char *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v94 = result;
  Swift::Int v95 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (unsigned __int8 *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_103:
      uint64_t v93 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v84 + v88), (unsigned __int8 *)(v84 + *(void *)&v87[16 * v12 - 16]), v84 + v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          unint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v93 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v93 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v95;
    uint64_t v93 = v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v92 = v2;
  uint64_t v10 = *v2;
  unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v96 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unsigned int v14 = *(unsigned __int8 *)(v10 + v9);
      unsigned int v15 = *(unsigned __int8 *)(v10 + v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unsigned int v16 = v14;
        while (1)
        {
          unsigned int v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unsigned int v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              char v20 = *(unsigned char *)(v10 + v19);
              *(unsigned char *)(v10 + v19) = *(unsigned char *)(v10 + v18);
              *(unsigned char *)(v10 + v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v94) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v94;
    if (__OFADD__(v13, v94)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (unsigned char *)(v10 + v9);
      do
      {
        unsigned int v23 = *(unsigned __int8 *)(v10 + v9);
        Swift::Int v24 = v13;
        uint64_t v25 = v22;
        do
        {
          unsigned int v26 = *(v25 - 1);
          if (v23 >= v26) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *uint64_t v25 = v26;
          *--uint64_t v25 = v23;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v96;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v96;
      unint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          unint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            unint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        unint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v10 + *(void *)v71), (unsigned __int8 *)(v10 + *(void *)v74), v10 + v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v96;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v95;
    if (v9 >= v95)
    {
      uint64_t v2 = v92;
      uint64_t v8 = v93;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static ICUMeasurementNumberFormatter.skeleton(_:width:usage:numberFormatStyle:)(uint64_t a1, void *a2, char a3, char a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v10 - 8);
  unint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v13 - 8);
  unsigned int v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  if (a2)
  {
    uint64_t v16 = 0xD000000000000010;
    v29._uint64_t countAndFlagsBits = a1;
    v29._unint64_t object = a2;
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = 32;
    v17._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    if (a3)
    {
      if (a3 == 1)
      {
        Swift::Int v18 = (void *)0x80000001823AAC30;
      }
      else
      {
        uint64_t v16 = 0xD000000000000011;
        Swift::Int v18 = (void *)0x80000001823AAC50;
      }
    }
    else
    {
      uint64_t v16 = 0xD000000000000014;
      Swift::Int v18 = (void *)0x80000001823AABB0;
    }
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = v16;
    v19._unint64_t object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    if (a4 != 14)
    {
      v20._uint64_t countAndFlagsBits = ICUMeasurementNumberFormatter.Usage.rawValue.getter(a4);
      v29._uint64_t countAndFlagsBits = 0x2F656761737520;
      v29._unint64_t object = (void *)0xE700000000000000;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
    }
  }
  outlined init with copy of (Hashable & Sendable)?(a5, (uint64_t)v15, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  }
  else
  {
    outlined init with copy of ICUPercentNumberFormatter.Signature((uint64_t)&v15[*(int *)(v21 + 36)], (uint64_t)v12, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v22 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
    Swift::Int v24 = v23;
    _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOhTm_0((uint64_t)v12, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    swift_bridgeObjectRetain();
    uint64_t v25 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v25 >= 1)
    {
      v26._uint64_t countAndFlagsBits = 32;
      v26._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v26);
    }
    v27._uint64_t countAndFlagsBits = v22;
    v27._unint64_t object = v24;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
  }
  return v30;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  int64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x1E4FBC860];
    }
    if (v5 <= 0)
    {
      uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0) {
          goto LABEL_17;
        }
        uint64_t v10 = v8 + 4;
        if (a2 + a3 < (unint64_t)v8 + v5 + 32 && (unint64_t)v10 < a2 + a3 + v5) {
          goto LABEL_17;
        }
        memcpy(v10, (const void *)(a2 + a3), v5);
        return (uint64_t)v8;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * v9 - 64;
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v4;
  size_t v9;
  void *v10;
  uint64_t result;
  void v12[9];

  unint64_t v4 = (unint64_t *)MEMORY[0x1E4FBC860];
  if (!a1 || !a2) {
    return (uint64_t)v4;
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString._InternalRun>);
    unint64_t v4 = (unint64_t *)swift_allocObject();
    size_t v9 = _swift_stdlib_malloc_size(v4);
    v4[2] = a2;
    v4[3] = 2 * ((uint64_t)(v9 - 32) / 24);
  }
  swift_unknownObjectRetain();
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)(v12, v4 + 4, a2, a1, a2, a3, a4);
  uint64_t result = swift_unknownObjectRelease();
  if (v10 == (void *)a2) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  unint64_t v4 = a4 >> 1;
  int64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v8 = 8 * v5;
    if (v5 <= 0)
    {
      size_t v9 = (char *)MEMORY[0x1E4FBC860];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = v9 + 32;
        uint64_t v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      size_t v9 = (char *)swift_allocObject();
      uint64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for _cache()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<[String : ICU.CaseMap]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static ICU.CaseMap._cache = result;
  return result;
}

uint64_t PropertyListEncoder.outputFormat.setter(uint64_t a1)
{
  Swift::Int v3 = *(os_unfair_lock_s **)(v1 + 32);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + 16) = a1;
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

uint64_t JSONEncoder.dataEncodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  unint64_t v5 = v1[6];
  void v1[6] = v2;
  v1[7] = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);

  return swift_release();
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.NilLiteral<A>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t one-time initialization function for predicateArchivingState()
{
  v1[1] = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  uint64_t result = pthread_key_create(v1, 0);
  static _ThreadLocal.Key<A>.predicateArchivingState = v1[0];
  return result;
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in KeyPathComparator<A>()
{
  return swift_getWitnessTable();
}

uint64_t one-time initialization function for patternCache(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  *a3 = result;
  return result;
}

void static MeasurementFormatUnitUsage.general.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle()
{
  return _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);
}

uint64_t base witness table accessor for RegexComponent in NSDecimal.FormatStyle()
{
  return _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance NSDecimal.FormatStyle(uint64_t a1)
{
  uint64_t v2 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);

  return MEMORY[0x1F4188350](a1, v2);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle(void *a1)
{
  a1[1] = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);
  a1[2] = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);
  uint64_t result = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance NSTimer.TimerPublisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NSTimer.TimerPublisher.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t NSTimer.TimerPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v76 = type metadata accessor for CombineIdentifier();
  uint64_t v9 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  uint64_t v73 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v62 - v12;
  double v15 = MEMORY[0x1F4188790](v14);
  Swift::String v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16);
  uint64_t v77 = a1;
  v19(v17, a1, a2, v15);
  uint64_t v75 = a3;
  uint64_t v20 = type metadata accessor for NSTimer.TimerPublisher.Inner();
  swift_allocObject();
  swift_retain();
  uint64_t v21 = specialized NSTimer.TimerPublisher.Inner.init(_:parent:)((uint64_t)v17);
  swift_release();
  os_unfair_lock_t v74 = *(os_unfair_lock_t *)(v5 + 72);
  os_unfair_lock_lock(v74);
  swift_getWitnessTable();
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v78[0] = *(void *)(v5 + 64);
  uint64_t v23 = v78[0];
  *(void *)(v5 + 64) = 0x8000000000000000;
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
  uint64_t v26 = *(void *)(v23 + 16);
  BOOL v27 = (v24 & 1) == 0;
  uint64_t v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
  }
  else
  {
    char v4 = v24;
    if (*(void *)(v23 + 24) < v28)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, isUniquelyReferenced_nonNull_native);
      uint64_t v23 = v78[0];
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
      if ((v4 & 1) != (v30 & 1)) {
        goto LABEL_47;
      }
      unint64_t v25 = v29;
      if ((v4 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      unint64_t v31 = (void (**)(Foundation::Date *))(*(void *)(v23 + 56) + 16 * v25);
      swift_release();
      os_unfair_lock_s *v31 = partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.Side.init<A>(_:);
      v31[1] = (void (*)(Foundation::Date *))v21;
      uint64_t v32 = v76;
LABEL_44:
      *(void *)(v5 + 64) = v23;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v32);
      os_unfair_lock_unlock(v74);
      v78[3] = v20;
      v78[4] = swift_getWitnessTable();
      v78[0] = v21;
      dispatch thunk of Subscriber.receive(subscription:)();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v24) {
        goto LABEL_8;
      }
LABEL_43:
      uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      uint64_t v57 = (uint64_t)v73;
      uint64_t v32 = v76;
      uint64_t v58 = v9;
      unint64_t v59 = v25;
      v56(v73, v13, v76);
      unint64_t v60 = v59;
      uint64_t v9 = v58;
      specialized _NativeDictionary._insert(at:key:value:)(v60, v57, (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.Side.init<A>(_:), v21, (void *)v23);
      goto LABEL_44;
    }
  }
  uint64_t v68 = v9;
  unint64_t v62 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CombineIdentifier, NSTimer.TimerPublisher.Side>);
  uint64_t v69 = static _DictionaryStorage.copy(original:)();
  if (!*(void *)(v23 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    unint64_t v25 = v62;
    uint64_t v9 = v68;
    uint64_t v23 = v69;
    if (v4) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
  uint64_t v33 = (void *)(v69 + 64);
  unint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v69 + 32)) + 63) >> 6;
  if (v69 != v23 || (unint64_t)v33 >= v23 + 64 + 8 * v34) {
    memmove(v33, (const void *)(v23 + 64), 8 * v34);
  }
  uint64_t v63 = v23 + 64;
  int64_t v35 = 0;
  *(void *)(v69 + 16) = *(void *)(v23 + 16);
  uint64_t v36 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & *(void *)(v23 + 64);
  int64_t v64 = (unint64_t)(v36 + 63) >> 6;
  uint64_t v65 = a2;
  uint64_t v66 = v68 + 32;
  uint64_t v67 = v68 + 16;
  uint64_t v39 = v76;
  while (1)
  {
    if (v38)
    {
      int64_t v71 = v35;
      uint64_t v72 = (v38 - 1) & v38;
      unint64_t v40 = __clz(__rbit64(v38)) | (v35 << 6);
      goto LABEL_18;
    }
    int64_t v48 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v48 >= v64) {
      goto LABEL_42;
    }
    unint64_t v49 = *(void *)(v63 + 8 * v48);
    int64_t v50 = v35 + 1;
    if (!v49)
    {
      int64_t v50 = v35 + 2;
      if (v35 + 2 >= v64) {
        goto LABEL_42;
      }
      unint64_t v49 = *(void *)(v63 + 8 * v50);
      if (!v49)
      {
        int64_t v50 = v35 + 3;
        if (v35 + 3 >= v64) {
          goto LABEL_42;
        }
        unint64_t v49 = *(void *)(v63 + 8 * v50);
        if (!v49)
        {
          int64_t v50 = v35 + 4;
          if (v35 + 4 >= v64) {
            goto LABEL_42;
          }
          unint64_t v49 = *(void *)(v63 + 8 * v50);
          if (!v49)
          {
            int64_t v50 = v35 + 5;
            if (v35 + 5 >= v64) {
              goto LABEL_42;
            }
            unint64_t v49 = *(void *)(v63 + 8 * v50);
            if (!v49)
            {
              int64_t v50 = v35 + 6;
              if (v35 + 6 >= v64) {
                goto LABEL_42;
              }
              unint64_t v49 = *(void *)(v63 + 8 * v50);
              if (!v49)
              {
                int64_t v50 = v35 + 7;
                if (v35 + 7 >= v64) {
                  goto LABEL_42;
                }
                unint64_t v49 = *(void *)(v63 + 8 * v50);
                if (!v49) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    int64_t v71 = v50;
    uint64_t v72 = (v49 - 1) & v49;
    unint64_t v40 = __clz(__rbit64(v49)) + (v50 << 6);
LABEL_18:
    uint64_t v41 = v68;
    unint64_t v42 = *(void *)(v68 + 72) * v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v68 + 16))(v73, *(void *)(v23 + 48) + v42, v39);
    uint64_t v43 = 16 * v40;
    uint64_t v44 = v69;
    unint64_t v45 = *(void *)(v69 + 48) + v42;
    uint64_t v46 = *(void (**)(unint64_t, char *, uint64_t))(v41 + 32);
    long long v70 = *(_OWORD *)(*(void *)(v23 + 56) + v43);
    uint64_t v47 = v43;
    v46(v45, v73, v39);
    *(_OWORD *)(*(void *)(v44 + 56) + v47) = v70;
    swift_retain();
    int64_t v35 = v71;
    unint64_t v38 = v72;
  }
  int64_t v51 = v35 + 8;
  if (v35 + 8 >= v64) {
    goto LABEL_42;
  }
  uint64_t v52 = v5;
  uint64_t v53 = v20;
  char v54 = v13;
  uint64_t v55 = v21;
  unint64_t v49 = *(void *)(v63 + 8 * v51);
  if (v49)
  {
    int64_t v50 = v51;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v50 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      break;
    }
    uint64_t v21 = v55;
    uint64_t v13 = v54;
    uint64_t v20 = v53;
    uint64_t v5 = v52;
    if (v50 >= v64) {
      goto LABEL_42;
    }
    unint64_t v49 = *(void *)(v63 + 8 * v50);
    ++v51;
    if (v49) {
      goto LABEL_41;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized NSTimer.TimerPublisher.Inner.init(_:parent:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v5(v1 + *(void *)(*(void *)v1 + 96), 1, 1, v3);
  uint64_t v6 = *(void *)(*(void *)v1 + 104);
  *(void *)(v1 + v6) = static Subscribers.Demand.none.getter();
  swift_weakInit();
  uint64_t v7 = *(void *)(*(void *)v1 + 120);
  uint64_t v8 = (_DWORD *)swift_slowAlloc();
  *uint64_t v8 = 0;
  *(void *)(v1 + v7) = v8;
  uint64_t v9 = v1 + *(void *)(*(void *)v1 + 96);
  uint64_t v10 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9, a1, v3);
  v5(v9, 0, 1, v3);
  swift_weakAssign();
  return v1;
}

uint64_t type metadata accessor for NSTimer.TimerPublisher.Inner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Measurement<>.FormatStyle.init(width:locale:usage:numberFormatStyle:)@<X0>(char *a1@<X0>, _OWORD *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v8 = *a1;
  char v9 = *a3;
  uint64_t v10 = (int *)type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v11 = a5 + v10[8];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v10[9];
  *(unsigned char *)(a5 + v10[10]) = 0;
  *(unsigned char *)a5 = v8;
  *(_OWORD *)(a5 + 8) = *a2;
  *(unsigned char *)(a5 + v13) = v9;

  return outlined assign with take of FloatingPointFormatStyle<Double>?(a4, v11);
}

uint64_t Measurement<>.formatted()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v23 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = (int *)type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v4 = *((void *)v3 - 1);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  char v9 = (char *)&v21 - v8;
  uint64_t v22 = *v0;
  uint64_t v10 = v0[1];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v11 = static LocaleCache.cache + 16;
  uint64_t v12 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v11, v24);
  os_unfair_lock_unlock(v12);
  swift_release_n();
  uint64_t v21 = v24[0];
  uint64_t v13 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  double v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = (uint64_t)v23;
  v15(v23, 1, 1, v14);
  uint64_t v17 = (uint64_t)&v6[v3[8]];
  v15((char *)v17, 1, 1, v14);
  uint64_t v18 = v3[9];
  v6[v3[10]] = 0;
  *uint64_t v6 = 1;
  *((void *)v6 + 1) = v21;
  *((void *)v6 + 2) = v13;
  v6[v18] = 0;
  outlined assign with take of FloatingPointFormatStyle<Double>?(v16, v17);
  (*(void (**)(char *, char *, int *))(v4 + 32))(v9, v6, v3);
  v24[0] = v22;
  v24[1] = v10;
  uint64_t v19 = Measurement<>.FormatStyle.format(_:)((uint64_t)v24, (uint64_t)v3);
  (*(void (**)(char *, int *))(v4 + 8))(v9, v3);
  return v19;
}

uint64_t static FormatStyle.measurement<>(width:usage:hidesScaleName:numberFormatStyle:)@<X0>(char *a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = *a1;
  char v14 = *a2;
  outlined init with copy of FloatingPointFormatStyle<Double>?(a4, (uint64_t)v12);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v15 = static LocaleCache.cache + 16;
  uint64_t v16 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v15, &v26);
  os_unfair_lock_unlock(v16);
  swift_release_n();
  uint64_t v17 = v26;
  uint64_t v18 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  uint64_t v20 = a5 + v19[8];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  uint64_t v22 = v19[9];
  uint64_t v23 = v19[10];
  *(unsigned char *)(a5 + v23) = 0;
  *(unsigned char *)a5 = v13;
  *(void *)(a5 + 8) = v17;
  *(void *)(a5 + 16) = v18;
  *(unsigned char *)(a5 + v22) = v14;
  uint64_t result = outlined assign with take of FloatingPointFormatStyle<Double>?((uint64_t)v12, v20);
  *(unsigned char *)(a5 + v23) = a3 & 1;
  return result;
}

uint64_t static FormatStyle.measurement<A>(width:usage:numberFormatStyle:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = *a1;
  char v12 = *a2;
  outlined init with copy of FloatingPointFormatStyle<Double>?(a3, (uint64_t)v10);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v13 = static LocaleCache.cache + 16;
  char v14 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v14);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v13, &v23);
  os_unfair_lock_unlock(v14);
  swift_release_n();
  uint64_t v15 = v23;
  uint64_t v16 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  uint64_t v17 = (int *)type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v18 = a4 + v17[8];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t v20 = v17[9];
  *(unsigned char *)(a4 + v17[10]) = 0;
  *(unsigned char *)a4 = v11;
  *(void *)(a4 + 8) = v15;
  *(void *)(a4 + 16) = v16;
  *(unsigned char *)(a4 + v20) = v12;
  return outlined assign with take of FloatingPointFormatStyle<Double>?((uint64_t)v10, v18);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 2 * ~a2;
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 0;
    *(void *)(result + 48) = 0;
    *(unsigned char *)(result + 72) = 0;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v10 = *(void *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    char v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v11(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

void *__swift_store_extra_inhabitant_indexTm_2(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t __swift_store_extra_inhabitant_indexTm_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

void *__swift_store_extra_inhabitant_indexTm_4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 36);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of FloatingPointFormatStyle<Double>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle()
{
  return __swift_instantiateGenericMetadata();
}

os_log_t ___initFCLoggers_block_invoke()
{
  qword_1EB1EDD30 = (uint64_t)os_log_create("com.apple.foundation.filecoordination", "general");
  qword_1EB1EDD38 = (uint64_t)os_log_create("com.apple.foundation.filecoordination", "claims");
  qword_1EB1EDD40 = (uint64_t)os_log_create("com.apple.foundation.filecoordination", "presenter");
  qword_1EB1EDD48 = (uint64_t)os_log_create("com.apple.foundation.filecoordination", "provider");
  qword_1EB1EDD50 = (uint64_t)os_log_create("com.apple.foundation.filecoordination", "process-monitor");
  os_log_t result = os_log_create("com.apple.foundation.filecoordination", "fsevents");
  qword_1EB1EDD58 = (uint64_t)result;
  return result;
}

void sub_181A30D98(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_181A30DB8(_Unwind_Exception *a1)
{
}

uint64_t URLResourceValues.localizedName.getter(id *a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    id v3 = *a1;
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v5)
    {
      outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v7);
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast()) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t one-time initialization function for _patternGeneratorCache()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICUPatternGenerator.PatternGeneratorInfo : ICUPatternGenerator?]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static ICUPatternGenerator._patternGeneratorCache = 100;
  *(void *)algn_1E8EDF498 = result;
  return result;
}

uint64_t destroy for KeyPathComparator(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Locale(void *a1, uint64_t *a2)
{
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    id result = (id)swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
    id result = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t closure #2 in closure #1 in static _FileOperations._removeFile(_:_:with:)(_removefile_state *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  swift_retain();
  uint64_t v5 = String.init(cString:)();
  unint64_t v7 = v6;
  LODWORD(dst) = 0;
  removefile_state_get(a1, 5u, &dst);
  uint64_t v8 = 4;
  switch((int)dst)
  {
    case 1:
    case 13:
      uint64_t v8 = 513;
      goto LABEL_17;
    case 2:
      goto LABEL_17;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 67:
    case 68:
      goto LABEL_6;
    case 17:
      uint64_t v8 = 516;
      goto LABEL_17;
    case 28:
    case 69:
      uint64_t v8 = 640;
      goto LABEL_17;
    case 30:
      goto LABEL_15;
    case 63:
      uint64_t v8 = 514;
      goto LABEL_17;
    case 66:
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
        goto LABEL_34;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v10 = (int)POSIXErrorCode.rawValue.getter();
      id v11 = objc_allocWithZone((Class)NSError);
      uint64_t v12 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, v10, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v14 = objc_msgSend(v13, sel_domain);
      id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v17 = v16;

      if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v17 == v18)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_33;
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v20)
      {
LABEL_33:
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x201, v5, v7, v13, 0x65766F6D6552, 0xE600000000000000, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&dst, 0, 0);
        goto LABEL_26;
      }
      __break(1u);
LABEL_15:
      uint64_t v8 = 642;
LABEL_17:
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v21 = (int)POSIXErrorCode.rawValue.getter();
        id v22 = objc_allocWithZone((Class)NSError);
        uint64_t v23 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v9 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, v21, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v24 = objc_msgSend(v9, sel_domain);
        id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        uint64_t v27 = v26;

        if (v25 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v27 != v28)
        {
          char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v30)
          {
LABEL_25:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v8, v5, v7, v9, 0x65766F6D6552, 0xE600000000000000, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&dst, 0, 0);
LABEL_26:
            unint64_t v31 = (void *)dst;
            uint64_t v32 = *(void **)(a3 + 24);
            if (v32)
            {
              id v33 = v32;
              id v34 = v31;
              unsigned __int8 v35 = NSFileManager._shouldProceedAfter(error:removingItemAtPath:)(v34, v5, v7);

              swift_bridgeObjectRelease();
              if (v35)
              {
                swift_release();
                uint64_t v36 = 0;
LABEL_31:

                return v36;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            id v34 = *(id *)(a3 + 16);
            *(void *)(a3 + 16) = v31;
            swift_release();
            uint64_t v36 = 2;
            goto LABEL_31;
          }
          __break(1u);
        }
        swift_bridgeObjectRelease_n();
        goto LABEL_25;
      }
LABEL_34:
      unint64_t dst = 0;
      unint64_t v40 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t dst = 0xD000000000000014;
      unint64_t v40 = 0x80000001823A9780;
      v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    default:
      if (dst == 102)
      {
        id v9 = 0;
        uint64_t v8 = 512;
        goto LABEL_25;
      }
LABEL_6:
      uint64_t v8 = 512;
      goto LABEL_17;
  }
}

id NSFileManager._shouldProceedAfter(error:removingItemAtPath:)(void *a1, uint64_t a2, unint64_t a3)
{
  id v7 = objc_msgSend(v3, sel__safeDelegate);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  if ((objc_msgSend(v7, sel_respondsToSelector_, sel_fileManager_shouldProceedAfterError_removingItemAtURL_) & 1) == 0)
  {
    if (objc_msgSend(v8, sel_respondsToSelector_, sel_fileManager_shouldProceedAfterError_removingItemAtPath_))
    {
      swift_unknownObjectRetain();
      id v12 = a1;
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      id v11 = objc_msgSend(v8, sel_fileManager_shouldProceedAfterError_removingItemAtPath_, v3, v13, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v11;
    }
    swift_unknownObjectRelease();
    return 0;
  }
  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a2, a3, (uint64_t)&v15);
  id v9 = v15;
  id v10 = a1;
  id v11 = objc_msgSend(v8, sel_fileManager_shouldProceedAfterError_removingItemAtURL_, v3, _swift_stdlib_bridgeErrorToNSError(), v9);

  swift_unknownObjectRelease_n();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v11;
}

void sub_181A31D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_181A323B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_181A32950(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t type metadata accessor for ListFormatStyle.Width()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ListFormatStyle.ListType()
{
  return swift_getGenericMetadata();
}

void sub_181A32AB4(_Unwind_Exception *a1)
{
}

void sub_181A32AE0(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v9 = objc_begin_catch(exc_buf);
      id v10 = _NSOSLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = [v9 description];
        LODWORD(a9) = 138412290;
        *(void *)((char *)&a9 + 4) = v11;
        _os_log_error_impl(&dword_181795000, v10, OS_LOG_TYPE_ERROR, "NSProgress Exception caught: %@", (uint8_t *)&a9, 0xCu);
      }
      objc_end_catch();
      JUMPOUT(0x181A32A6CLL);
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x181A32A70);
  }
  JUMPOUT(0x181A32AD4);
}

void type metadata completion function for PredicateExpressions.PredicateRegex()
{
  type metadata accessor for Regex<AnyRegexOutput>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Regex<AnyRegexOutput>()
{
  if (!lazy cache variable for type metadata for Regex<AnyRegexOutput>)
  {
    type metadata accessor for AnyRegexOutput();
    unint64_t v0 = type metadata accessor for Regex();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Regex<AnyRegexOutput>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType()
{
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType);
  }
  return result;
}

void *type metadata accessor for String.LocalizationValue.CodingKeys()
{
  return &unk_1ECA4CE20;
}

void *type metadata accessor for Calendar.CodingKeys()
{
  return &unk_1ECA4A9C0;
}

ValueMetadata *type metadata accessor for Locale.HourCycle()
{
  return &type metadata for Locale.HourCycle;
}

void static Date.FormatStyle.Symbol.Year.defaultDigits.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 3;
}

unint64_t lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator;
  if (!lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator);
  }
  return result;
}

void *type metadata accessor for LocalizedStringResource.CodingKeys()
{
  return &unk_1ECA3F408;
}

unint64_t lazy protocol witness table accessor for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo;
  if (!lazy protocol witness table cache variable for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo);
  }
  return result;
}

void *type metadata accessor for URLBufferParseInfo()
{
  return &unk_1ECA3B3F8;
}

ValueMetadata *type metadata accessor for PresentationIntent()
{
  return &type metadata for PresentationIntent;
}

ValueMetadata *type metadata accessor for PresentationIntent.IntentType()
{
  return &type metadata for PresentationIntent.IntentType;
}

uint64_t type metadata completion function for IntegerFormatStyle()
{
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey;
  if (!lazy protocol witness table cache variable for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey);
  }
  return result;
}

void *type metadata accessor for AttributedString.AttributeKey()
{
  return &unk_1ECA372E8;
}

void *type metadata accessor for AttributedString.CodingKeys()
{
  return &unk_1ECA37258;
}

void *type metadata accessor for DateInterval.CodingKeys()
{
  return &unk_1ECA325B8;
}

ValueMetadata *type metadata accessor for XMLPlistMap.ArrayIterator()
{
  return &type metadata for XMLPlistMap.ArrayIterator;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v6 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t initEXGetExtensionClass()
{
  unint64_t v0 = (void *)ExtensionFoundationLibrary_frameworkLibrary_0;
  if (!ExtensionFoundationLibrary_frameworkLibrary_0)
  {
    unint64_t v0 = dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2);
    ExtensionFoundationLibrary_frameworkLibrary_0 = (uint64_t)v0;
    if (!v0) {
      return 0;
    }
  }
  unint64_t v1 = (uint64_t (*)())dlsym(v0, "EXGetExtensionClass");
  softLinkEXGetExtensionClass = v1;
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t one-time initialization function for _nilObjCError()
{
  lazy protocol witness table accessor for type _GenericObjCError and conformance _GenericObjCError();
  uint64_t result = swift_allocError();
  _nilObjCError = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _GenericObjCError and conformance _GenericObjCError()
{
  unint64_t result = lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError;
  if (!lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError;
  if (!lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError);
  }
  return result;
}

uint64_t type metadata completion function for ICUNumberFormatter.Signature()
{
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id NSString.init(format:_:)(uint64_t a1)
{
  uint64_t v2 = getVaList(_:)();
  swift_bridgeObjectRelease();
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return objc_msgSend(v3, sel_initWithFormat_arguments_, a1, v2);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void)@<X4>, _DWORD *a6@<X8>)
{
  uint64_t result = a5(a1, a2, a3, a4, *(unsigned __int8 *)(v6 + 32), *(unsigned __int8 *)(v6 + 33));
  if (!v7) {
    *a6 = result;
  }
  return result;
}

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  if (a5)
  {
    uint64_t result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      id v14 = (char *)result;
      __int16 v15 = v13;
      uint64_t result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v13 & 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if ((result & 0x100000000) != 0)
      {
        if ((v15 & 0x100) != 0)
        {
          uint64_t v16 = static String._fromUTF8Repairing(_:)();
          uint64_t v18 = v17;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v19 = v16;
          *(void *)(v19 + 8) = v18;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(unsigned char *)(v19 + 48) = 11;
          return swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v6)
    {
      id v14 = (char *)result;
      uint64_t result = specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if ((result & 0x100000000) != 0) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  __int16 v13;
  char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a5)
  {
    uint64_t result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      id v14 = (char *)result;
      __int16 v15 = v13;
      uint64_t result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v13 & 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if ((result & 0x100000000) != 0)
      {
        if ((v15 & 0x100) != 0)
        {
          uint64_t v16 = static String._fromUTF8Repairing(_:)();
          uint64_t v18 = v17;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v19 = v16;
          *(void *)(v19 + 8) = v18;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(unsigned char *)(v19 + 48) = 11;
          return swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v6)
    {
      id v14 = (char *)result;
      uint64_t result = specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if ((result & 0x100000000) != 0) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  return result;
}

unint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

unint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t)@<X4>, unint64_t a6@<X5>, uint64_t (*a7)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t)@<X6>, uint64_t (*a8)(unint64_t, uint64_t)@<X7>, _DWORD *a9@<X8>)
{
  unint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v9 + 16), *(unsigned char *)(v9 + 17), a5, a6, a7, a8);
  if (!v10) {
    *a9 = result;
  }
  return result;
}

unint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned __int8 *, uint64_t, uint64_t), unint64_t a8, uint64_t (*a9)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t), uint64_t (*a10)(unint64_t, uint64_t))
{
  uint64_t v11 = v10;
  LOBYTE(v12) = a5;
  uint64_t v14 = a2;
  unint64_t v15 = result;
  uint64_t v171 = a4;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }
    unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, result);
    if (result == 48)
    {
      if (v14 >= 1) {
        uint64_t v28 = 1;
      }
      else {
        uint64_t v28 = v14;
      }
      unint64_t v29 = v15;
      if (v14 < 2) {
        goto LABEL_175;
      }
      unint64_t v30 = v15 + v28;
      unsigned __int8 v31 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + v28);
      unsigned int v32 = v31;
      if (v31 - 46 <= 0x37 && ((1 << (v31 - 46)) & 0x80000000800001) != 0) {
        goto LABEL_175;
      }
LABEL_26:
      unsigned __int8 v34 = v31;
      __int16 v35 = _asciiNumbers.getter();
      unint64_t v36 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v30, a3, v171);
      unsigned __int8 v37 = v34;
      uint64_t v39 = v38;
      uint64_t v41 = v40;
      if (v32 >= v35 && HIBYTE(v35) >= v37) {
        goto LABEL_111;
      }
      uint64_t v42 = v37;
LABEL_232:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_OWORD *)uint64_t v56 = xmmword_182112860;
      *(void *)(v56 + 16) = v42;
      *(void *)(v56 + 24) = v36;
      *(void *)(v56 + 32) = v39;
      *(void *)(v56 + 40) = v41;
LABEL_245:
      char v57 = 1;
      goto LABEL_246;
    }
    unint64_t v29 = v15;
    if ((result - 58) < 0xF7u)
    {
      if (result != 45)
      {
LABEL_275:
        __break(1u);
LABEL_276:
        __break(1u);
LABEL_277:
        __break(1u);
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
LABEL_280:
        __break(1u);
LABEL_281:
        __break(1u);
LABEL_282:
        __break(1u);
        goto LABEL_283;
      }
      if (v14 < 2)
      {
        unint64_t v59 = v15 - a3;
        if (v15 >= a3 && a3 + v171 >= v15)
        {
          if (a3 + v171 >= v15 + 1) {
            unint64_t v60 = v15 + 1;
          }
          else {
            unint64_t v60 = a3 + v171;
          }
          if (v60 <= a3)
          {
            uint64_t v68 = 0;
            uint64_t v63 = 1;
LABEL_137:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v85 = 0xD000000000000010;
            *(void *)(v85 + 8) = 0x80000001823ABAE0;
            *(void *)(v85 + 16) = 45;
            *(void *)(v85 + 24) = v63;
            *(void *)(v85 + 32) = v68;
            *(void *)(v85 + 40) = v59;
            *(unsigned char *)(v85 + 48) = 1;
            return swift_willThrow();
          }
          unint64_t v61 = v171 + a3;
          uint64_t v62 = -(uint64_t)a3;
          uint64_t v63 = 1;
          unint64_t v163 = v15 - a3;
          unint64_t v168 = v171 + a3;
          uint64_t v172 = -(uint64_t)a3;
          while (2)
          {
            uint64_t v64 = 0;
            uint64_t v65 = 0;
            unint64_t v66 = v61 - a3;
            unint64_t v67 = v62 + a3;
            while (1)
            {
              if ((uint64_t)(v67 + v65) < 0 || (uint64_t)(v66 + v64) < 1)
              {
LABEL_265:
                __break(1u);
LABEL_266:
                __break(1u);
                goto LABEL_267;
              }
              unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v65);
              if (result == 10)
              {
                BOOL v51 = __OFADD__(v63++, 1);
                uint64_t v62 = v172;
                if (v51) {
                  goto LABEL_284;
                }
                a3 += v65 + 1;
                goto LABEL_104;
              }
              if (result == 13) {
                break;
              }
              uint64_t v68 = v65 + 1;
              if (__OFADD__(v65, 1)) {
                goto LABEL_266;
              }
              ++v65;
              --v64;
              if (a3 + v65 >= v60) {
                goto LABEL_106;
              }
            }
            uint64_t v69 = a3 + v65;
            unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v65 + 1, v15);
            uint64_t v62 = v172;
            if ((result & 1) == 0) {
              goto LABEL_102;
            }
            if (((v172 + a3 + v65 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v65 + v66) >= 1)
            {
              unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v65 + 1);
              if (result == 10) {
                uint64_t v69 = a3 + v65 + 1;
              }
LABEL_102:
              BOOL v51 = __OFADD__(v63++, 1);
              if (v51) {
                goto LABEL_285;
              }
              a3 = v69 + 1;
LABEL_104:
              unint64_t v61 = v168;
              if (a3 < v60) {
                continue;
              }
              uint64_t v68 = 0;
LABEL_106:
              unint64_t v59 = v163;
              goto LABEL_137;
            }
            goto LABEL_293;
          }
        }
        goto LABEL_280;
      }
      unint64_t v44 = v15 + 1;
      unsigned __int8 v45 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
      if (v45 == 48)
      {
        ++v15;
        unint64_t v30 = v29 + 2;
        if (!specialized Collection.isEmpty.getter(v29 + 2, v14 - 2))
        {
          unsigned __int8 v31 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v30);
          unsigned int v32 = v31;
          if (v31 - 46 > 0x37 || ((1 << (v31 - 46)) & 0x80000000800001) == 0) {
            goto LABEL_26;
          }
        }
      }
      else
      {
        unsigned __int8 v73 = v45;
        if ((v45 - 58) < 0xF7u)
        {
          unint64_t result = specialized static Comparable.<= infix(_:_:)(a3, v15 + 1);
          if (result)
          {
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v15 + 1, a3 + v171);
            if (result)
            {
              unint64_t result = specialized min<A>(_:_:)(v15 + 2, a3 + v171);
              if (result <= a3)
              {
                uint64_t v83 = 0;
                uint64_t v77 = 1;
LABEL_234:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v137 = 0xD000000000000013;
                *(void *)(v137 + 8) = 0x80000001823ABBD0;
                *(void *)(v137 + 16) = v73;
                *(void *)(v137 + 24) = v77;
                *(void *)(v137 + 32) = v83;
                *(void *)(v137 + 40) = v44 - a3;
                *(unsigned char *)(v137 + 48) = 1;
                return swift_willThrow();
              }
              unint64_t v74 = result;
              unint64_t v75 = v171 + a3;
              uint64_t v76 = -(uint64_t)a3;
              uint64_t v77 = 1;
              unint64_t v78 = a3;
              unsigned __int8 v158 = v73;
              unint64_t v164 = v171 + a3;
LABEL_117:
              while (1)
              {
                uint64_t v173 = v77;
                uint64_t v79 = 0;
                uint64_t v80 = 0;
                unint64_t v81 = v75 - v78;
                unint64_t v82 = v76 + v78;
                while (1)
                {
                  if ((uint64_t)(v82 + v80) < 0 || (uint64_t)(v81 + v79) < 1) {
                    goto LABEL_271;
                  }
                  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v78 + v80);
                  if (result == 10)
                  {
                    uint64_t v76 = -(uint64_t)a3;
                    uint64_t v77 = v173 + 1;
                    if (__OFADD__(v173, 1)) {
                      goto LABEL_296;
                    }
                    v78 += v80 + 1;
                    unint64_t v75 = v164;
                    if (v78 >= v74) {
                      goto LABEL_135;
                    }
                    goto LABEL_117;
                  }
                  if (result == 13) {
                    break;
                  }
                  uint64_t v83 = v80 + 1;
                  if (__OFADD__(v80, 1)) {
                    goto LABEL_273;
                  }
                  ++v80;
                  --v79;
                  if (v78 + v80 >= v74)
                  {
                    unsigned __int8 v73 = v158;
                    uint64_t v77 = v173;
                    goto LABEL_234;
                  }
                }
                uint64_t v84 = v78 + v80;
                unint64_t result = specialized static Comparable.<= infix(_:_:)(v78 + v80 + 1, v44);
                if ((result & 1) == 0) {
                  goto LABEL_133;
                }
                if (((v78 - a3 + v80 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v80 + v81) < 1) {
                  break;
                }
                unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v78 + v80 + 1);
                if (result == 10) {
                  uint64_t v84 = v78 + v80 + 1;
                }
LABEL_133:
                uint64_t v77 = v173 + 1;
                if (__OFADD__(v173, 1)) {
                  goto LABEL_297;
                }
                unint64_t v78 = v84 + 1;
                unint64_t v75 = v164;
                uint64_t v76 = -(uint64_t)a3;
                if (v84 + 1 >= v74)
                {
LABEL_135:
                  uint64_t v83 = 0;
                  unsigned __int8 v73 = v158;
                  goto LABEL_234;
                }
              }
LABEL_299:
              __break(1u);
              return result;
            }
            goto LABEL_292;
          }
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
          goto LABEL_299;
        }
        ++v15;
      }
    }
LABEL_175:
    unint64_t v23 = v15;
    unint64_t v15 = v29;
    if ((a6 & 1) != 0 && v23 + 1 < v29 + v14)
    {
      uint64_t v107 = 0;
      while (1)
      {
        uint64_t v108 = v23 + v107;
        if ((*(unsigned __int8 *)(v23 + v107 + 1) | 0x20) == 0x65) {
          break;
        }
        if (~v23 + v14 + v15 == ++v107) {
          goto LABEL_186;
        }
      }
      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v23 + v107);
      if ((result - 58) <= 0xF5u)
      {
        if (((v23 - v15 + v107 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v23 + v14 + v15 - v107) >= 1)
        {
          unsigned __int8 v109 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v108 + 1);
          unint64_t v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v108 + 1, a3, v171);
          uint64_t v112 = v111;
          uint64_t v114 = v113;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v56 = xmmword_182112860;
          *(void *)(v56 + 16) = v109;
          *(void *)(v56 + 24) = v110;
          *(void *)(v56 + 32) = v112;
LABEL_185:
          *(void *)(v56 + 40) = v114;
          goto LABEL_245;
        }
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
        goto LABEL_291;
      }
    }
LABEL_186:
    unint64_t v115 = v15 + v14;
    unint64_t v116 = v15 + v14 - 1;
    unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v116);
    if ((result - 58) > 0xF5u)
    {
      unint64_t result = a10(v15, v14);
      if ((result & 0x100000000) == 0) {
        return result;
      }
      return a9(v12 & 1, v15, v14, a3, v171, v23);
    }
    uint64_t v47 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(v116 - a3);
    if (v116 >= a3 && a3 + v171 >= v116)
    {
      if (a3 + v171 >= v115) {
        unint64_t v117 = v115;
      }
      else {
        unint64_t v117 = a3 + v171;
      }
      if (v117 > a3)
      {
        char v160 = result;
        unint64_t v166 = v116 - a3;
        unint64_t v118 = v171 + a3;
        uint64_t v119 = -(uint64_t)a3;
        uint64_t v14 = 1;
        unint64_t v170 = v171 + a3;
        uint64_t v175 = -(uint64_t)a3;
        while (2)
        {
          uint64_t v120 = 0;
          uint64_t v121 = 0;
          unint64_t v122 = v118 - a3;
          unint64_t v123 = v119 + a3;
          while (1)
          {
            if ((uint64_t)(v123 + v121) < 0 || (uint64_t)(v122 + v120) < 1)
            {
              __break(1u);
LABEL_264:
              __break(1u);
              goto LABEL_265;
            }
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v121);
            if (result == 10)
            {
              BOOL v51 = __OFADD__(v14++, 1);
              uint64_t v119 = v175;
              if (v51) {
                goto LABEL_278;
              }
              a3 += v121 + 1;
              goto LABEL_211;
            }
            if (result == 13) {
              break;
            }
            unint64_t v23 = v121 + 1;
            if (__OFADD__(v121, 1)) {
              goto LABEL_264;
            }
            ++v121;
            --v120;
            if (a3 + v121 >= v117) {
              goto LABEL_213;
            }
          }
          uint64_t v124 = a3 + v121;
          unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v121 + 1, v116);
          uint64_t v119 = v175;
          if ((result & 1) == 0) {
            goto LABEL_209;
          }
          if (((v175 + a3 + v121 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v121 + v122) >= 1)
          {
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v121 + 1);
            if (result == 10) {
              uint64_t v124 = a3 + v121 + 1;
            }
LABEL_209:
            BOOL v51 = __OFADD__(v14++, 1);
            if (v51) {
              goto LABEL_279;
            }
            a3 = v124 + 1;
LABEL_211:
            unint64_t v118 = v170;
            if (a3 < v117) {
              continue;
            }
            unint64_t v23 = 0;
LABEL_213:
            LOBYTE(result) = v160;
            uint64_t v47 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))v166;
            goto LABEL_217;
          }
          goto LABEL_282;
        }
      }
      unint64_t v23 = 0;
      uint64_t v14 = 1;
LABEL_217:
      uint64_t v58 = result;
      goto LABEL_218;
    }
    goto LABEL_274;
  }
  if (!a2)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, result);
  if (result != 48)
  {
    if ((result - 58) < 0xF7u)
    {
      switch((char)result)
      {
        case '+':
        case '-':
          if (v14 < 2)
          {
            if (v14 != 1) {
              goto LABEL_287;
            }
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
            unint64_t v86 = v15 - a3;
            if (v15 >= a3)
            {
              unsigned __int8 v87 = result;
              unint64_t result = specialized static Comparable.<= infix(_:_:)(v15, a3 + a4);
              if ((result & 1) == 0) {
                goto LABEL_289;
              }
              unint64_t result = specialized min<A>(_:_:)(v15 + 1, a3 + a4);
              if (result <= a3)
              {
                uint64_t v96 = 0;
                uint64_t v91 = 1;
              }
              else
              {
                unint64_t v88 = result;
                unsigned __int8 v159 = v87;
                unint64_t v165 = v15 - a3;
                unint64_t v89 = a4 + a3;
                uint64_t v90 = -(uint64_t)a3;
                uint64_t v91 = 1;
                unint64_t v169 = a4 + a3;
                uint64_t v174 = -(uint64_t)a3;
                do
                {
                  uint64_t v92 = 0;
                  uint64_t v93 = 0;
                  unint64_t v94 = v89 - a3;
                  unint64_t v95 = v90 + a3;
                  while (1)
                  {
                    if ((uint64_t)(v95 + v93) < 0 || (uint64_t)(v94 + v92) < 1) {
                      goto LABEL_269;
                    }
                    unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v93);
                    if (result == 10)
                    {
                      BOOL v51 = __OFADD__(v91++, 1);
                      if (v51) {
                        goto LABEL_294;
                      }
                      a3 += v93 + 1;
                      goto LABEL_164;
                    }
                    if (result == 13) {
                      break;
                    }
                    uint64_t v96 = v93 + 1;
                    if (__OFADD__(v93, 1)) {
                      goto LABEL_270;
                    }
                    ++v93;
                    --v92;
                    if (a3 + v93 >= v88) {
                      goto LABEL_166;
                    }
                  }
                  uint64_t v97 = a3 + v93;
                  unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v93 + 1, v15);
                  if ((result & 1) == 0) {
                    goto LABEL_162;
                  }
                  if (((v174 + a3 + v93 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v93 + v94) < 1) {
                    goto LABEL_298;
                  }
                  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v93 + 1);
                  if (result == 10) {
                    uint64_t v97 = a3 + v93 + 1;
                  }
LABEL_162:
                  BOOL v51 = __OFADD__(v91++, 1);
                  if (v51) {
                    goto LABEL_295;
                  }
                  a3 = v97 + 1;
LABEL_164:
                  unint64_t v89 = v169;
                  uint64_t v90 = v174;
                }
                while (a3 < v88);
                uint64_t v96 = 0;
LABEL_166:
                unsigned __int8 v87 = v159;
                unint64_t v86 = v165;
              }
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v130 = 0xD000000000000010;
              *(void *)(v130 + 8) = 0x80000001823ABAE0;
              *(void *)(v130 + 16) = v87;
              *(void *)(v130 + 24) = v91;
              *(void *)(v130 + 32) = v96;
              *(void *)(v130 + 40) = v86;
              *(unsigned char *)(v130 + 48) = 1;
              return swift_willThrow();
            }
            goto LABEL_288;
          }
          uint64_t v157 = a7;
          unint64_t v23 = v15 + 1;
          unsigned __int8 v43 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
          if (v43 == 48)
          {
            uint64_t v161 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
            unint64_t v20 = v15 + 2;
            if (specialized Collection.isEmpty.getter(v15 + 2, v14 - 2))
            {
              char v22 = 0;
              goto LABEL_46;
            }
            unsigned __int8 v138 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20);
            char v22 = 0;
            if (v138 <= 0x57u)
            {
              if (v138 == 46 || v138 == 69) {
                goto LABEL_46;
              }
            }
            else
            {
              switch(v138)
              {
                case 'x':
                  goto LABEL_239;
                case 'e':
                  goto LABEL_46;
                case 'X':
LABEL_239:
                  unint64_t v23 = v15 + 3;
                  if (specialized static Comparable.<= infix(_:_:)(v15 + 3, v15 + v14)) {
                    goto LABEL_13;
                  }
                  if (v14 - 2 < 1)
                  {
                    __break(1u);
LABEL_242:
                    unint64_t v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v171);
                    uint64_t v101 = v139;
                    uint64_t v103 = v140;
                    unint64_t v23 = v23;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v56 = 0xD000000000000013;
                    *(void *)(v56 + 8) = 0x80000001823ABAC0;
                    goto LABEL_243;
                  }
                  goto LABEL_173;
              }
            }
            __int16 v141 = _asciiNumbers.getter();
            unint64_t v36 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v171);
            uint64_t v39 = v142;
            uint64_t v41 = v143;
            if (v138 < v141 || HIBYTE(v141) < v138)
            {
              uint64_t v42 = v138;
              goto LABEL_232;
            }
            goto LABEL_111;
          }
          unsigned __int8 v126 = v43;
          if ((v43 - 58) >= 0xF7u) {
            goto LABEL_257;
          }
          switch(v43)
          {
            case '.':
LABEL_256:
              uint64_t v144 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v15, v14);
              unint64_t result = (unint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v144, v145, a3, v171);
              if (v11) {
                return result;
              }
LABEL_257:
              uint64_t v161 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
              char v22 = 0;
              break;
            case 'N':
              id v146 = (char *)specialized BufferView.dropFirst(_:)(1, v15, v14);
              unint64_t result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v146, v147, a3, v171);
              if (v10) {
                return result;
              }
              uint64_t v161 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
              char v22 = 1;
              break;
            case 'I':
              uint64_t v127 = (char *)specialized BufferView.dropFirst(_:)(1, v15, v14);
              unint64_t result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v127, v128, a3, v171);
              if (v10) {
                return result;
              }
              uint64_t v161 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
              char v22 = 1;
              break;
            default:
              _StringGuts.grow(_:)(20);
              v148._uint64_t countAndFlagsBits = 0x27207265746661;
              v148._unint64_t object = (void *)0xE700000000000000;
              DefaultStringInterpolation.appendLiteral(_:)(v148);
              unsigned __int8 v149 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
              unsigned int v150 = (v149 + 1);
              if ((v149 & 0x80) != 0) {
                unsigned int v150 = (((v149 & 0x3F) << 8) | (v149 >> 6)) + 33217;
              }
              uint64_t v176 = (v150 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v150) >> 3)) & 7)));
              v151._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v176);
              specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v151);
              swift_bridgeObjectRelease();
              v152._uint64_t countAndFlagsBits = 0x6D756E206E692027;
              v152._unint64_t object = (void *)0xEB00000000726562;
              DefaultStringInterpolation.appendLiteral(_:)(v152);
              unint64_t v153 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v23, a3, v171);
              uint64_t v155 = v154;
              uint64_t v114 = v156;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v56 = 0;
              *(void *)(v56 + 8) = 0xE000000000000000;
              *(void *)(v56 + 16) = v126;
              *(void *)(v56 + 24) = v153;
              *(void *)(v56 + 32) = v155;
              goto LABEL_185;
          }
          break;
        case '.':
          if (v14 >= 1) {
            uint64_t v98 = 1;
          }
          else {
            uint64_t v98 = v14;
          }
          unint64_t v20 = v15 + v98;
          if (specialized Collection.isEmpty.getter(v15 + v98, v14 - v98))
          {
            unint64_t v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, a4);
            uint64_t v101 = v100;
            uint64_t v103 = v102;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v56 = 0;
            *(void *)(v56 + 8) = 0;
            *(void *)(v56 + 16) = 46;
            goto LABEL_244;
          }
          uint64_t v161 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          LOBYTE(v23) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20);
          __int16 v129 = _asciiNumbers.getter();
          if (v23 < v129
            || HIBYTE(v129) < v23)
          {
            goto LABEL_242;
          }
          uint64_t v157 = a7;
          char v22 = 0;
          unint64_t v23 = v15;
          goto LABEL_46;
        case 'I':
          unint64_t result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v15, v14, v15, v14, a3, a4);
          goto LABEL_140;
        case 'N':
          unint64_t result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v15, v14, v15, v14, a3, a4);
LABEL_140:
          if (v10) {
            return result;
          }
          uint64_t v157 = a7;
          uint64_t v161 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          char v22 = 1;
          goto LABEL_45;
        default:
          goto LABEL_286;
      }
      goto LABEL_46;
    }
    uint64_t v157 = a7;
    uint64_t v161 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
LABEL_44:
    char v22 = 0;
LABEL_45:
    unint64_t v23 = v15;
    goto LABEL_46;
  }
  uint64_t v157 = a7;
  uint64_t v161 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
  if (v14 >= 1) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = v14;
  }
  if (v14 < 2) {
    goto LABEL_44;
  }
  unint64_t v20 = v15 + v19;
  unsigned __int8 v21 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + v19);
  char v22 = 0;
  if (v21 <= 0x57u)
  {
    unint64_t v23 = v15;
    if (v21 != 46 && v21 != 69) {
      goto LABEL_109;
    }
LABEL_46:
    char v26 = v22;
    unint64_t v46 = v15 + v14;
    a8 = v15 + v14 - 1;
    unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a8);
    unsigned __int8 v167 = result;
    if ((result | 0x20) != 0x65)
    {
      char v25 = 0;
LABEL_75:
      unint64_t result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v15, v14, v25, v157, v161);
      if ((result & 0x100000000) == 0) {
        return result;
      }
      if (v26)
      {
        uint64_t v53 = static String._fromUTF8Repairing(_:)();
        uint64_t v55 = v54;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v56 = v53;
        *(void *)(v56 + 8) = v55;
        *(_OWORD *)(v56 + 16) = 0u;
        *(_OWORD *)(v56 + 32) = 0u;
        char v57 = 11;
LABEL_246:
        *(unsigned char *)(v56 + 48) = v57;
        return swift_willThrow();
      }
      return a9(v12 & 1, v15, v14, a3, v171, v23);
    }
    uint64_t v47 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
    if (a8 >= a3 && a3 + v171 >= a8)
    {
      if (a3 + v171 >= v46) {
        unint64_t v12 = v46;
      }
      else {
        unint64_t v12 = a3 + v171;
      }
      if (v12 > a3)
      {
        unint64_t v48 = v171 + a3;
        unint64_t v23 = -(uint64_t)a3;
        uint64_t v14 = 1;
        uint64_t v157 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
        unint64_t v162 = v171 + a3;
        uint64_t v171 = -(uint64_t)a3;
        while (2)
        {
          uint64_t v11 = 0;
          unint64_t v15 = 0;
          unint64_t v49 = v48 - a3;
          unint64_t v50 = v23 + a3;
          while (1)
          {
            if ((uint64_t)(v50 + v15) < 0 || (uint64_t)(v49 + v11) < 1)
            {
              __break(1u);
LABEL_255:
              __break(1u);
              goto LABEL_256;
            }
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v15);
            if (result == 10)
            {
              BOOL v51 = __OFADD__(v14++, 1);
              unint64_t v23 = v171;
              if (v51) {
                goto LABEL_276;
              }
              a3 += v15 + 1;
              goto LABEL_71;
            }
            if (result == 13) {
              break;
            }
            unint64_t v23 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              goto LABEL_255;
            }
            ++v15;
            --v11;
            if (a3 + v15 >= v12) {
              goto LABEL_73;
            }
          }
          uint64_t v52 = a3 + v15;
          unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v15 + 1, a8);
          unint64_t v23 = v171;
          if ((result & 1) == 0) {
            goto LABEL_69;
          }
          if (((v171 + a3 + v15 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v15 + v49) >= 1)
          {
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v15 + 1);
            if (result == 10) {
              uint64_t v52 = a3 + v15 + 1;
            }
LABEL_69:
            BOOL v51 = __OFADD__(v14++, 1);
            if (v51) {
              goto LABEL_277;
            }
            a3 = v52 + 1;
LABEL_71:
            unint64_t v48 = v162;
            if (a3 < v12) {
              continue;
            }
            unint64_t v23 = 0;
LABEL_73:
            uint64_t v47 = v157;
            goto LABEL_79;
          }
          goto LABEL_281;
        }
      }
      unint64_t v23 = 0;
      uint64_t v14 = 1;
LABEL_79:
      uint64_t v58 = v167;
LABEL_218:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v125 = 0xD000000000000010;
      *(void *)(v125 + 8) = 0x80000001823ABAE0;
      *(void *)(v125 + 16) = v58;
      *(void *)(v125 + 24) = v14;
      *(void *)(v125 + 32) = v23;
      *(void *)(v125 + 40) = v47;
      *(unsigned char *)(v125 + 48) = 1;
      return swift_willThrow();
    }
    goto LABEL_272;
  }
  if (v21 == 120) {
    goto LABEL_12;
  }
  if (v21 == 101) {
    goto LABEL_45;
  }
  if (v21 != 88)
  {
LABEL_109:
    __int16 v70 = _asciiNumbers.getter();
    unint64_t v36 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + v19, a3, v171);
    uint64_t v39 = v71;
    uint64_t v41 = v72;
    if (v21 >= v70 && HIBYTE(v70) >= v21)
    {
LABEL_111:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v56 = v36;
      *(void *)(v56 + 8) = v39;
      *(void *)(v56 + 16) = v41;
      *(void *)(v56 + 24) = 0;
      *(void *)(v56 + 32) = 0;
      *(void *)(v56 + 40) = 0;
      char v57 = 10;
      goto LABEL_246;
    }
    uint64_t v42 = v21;
    goto LABEL_232;
  }
LABEL_12:
  unint64_t v23 = v20 + 1;
  unint64_t result = specialized static Comparable.<= infix(_:_:)(v20 + 1, v15 + v14);
  if ((result & 1) == 0)
  {
    if (v14 - v19 >= 1)
    {
LABEL_173:
      unsigned __int8 v104 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20);
      unint64_t v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v171);
      uint64_t v101 = v105;
      uint64_t v103 = v106;
      unint64_t v23 = v104;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_OWORD *)uint64_t v56 = xmmword_182112860;
LABEL_243:
      *(void *)(v56 + 16) = v23;
LABEL_244:
      *(void *)(v56 + 24) = v99;
      *(void *)(v56 + 32) = v101;
      *(void *)(v56 + 40) = v103;
      goto LABEL_245;
    }
    goto LABEL_290;
  }
LABEL_13:
  unsigned __int8 v24 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v23);
  char v25 = 1;
  if (UInt8.isValidHexDigit.getter(v24))
  {
    char v26 = 0;
    goto LABEL_75;
  }
  unint64_t v131 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v23, a3, v171);
  uint64_t v133 = v132;
  uint64_t v135 = v134;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_OWORD *)uint64_t v136 = xmmword_182112860;
  *(void *)(v136 + 16) = v24;
  *(void *)(v136 + 24) = v131;
  *(void *)(v136 + 32) = v133;
  *(void *)(v136 + 40) = v135;
  *(unsigned char *)(v136 + 48) = 1;
  return swift_willThrow();
}

char *protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, float a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

char *_JSONKeyedEncodingContainer.encode(_:forKey:)(unint64_t a1, uint64_t a2, float a3)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = (char *)type metadata accessor for Optional();
  int64_t v65 = *((void *)v8 - 1);
  unint64_t v66 = v8;
  v9.n128_f64[0] = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v63 - v10;
  uint64_t v63 = v3;
  unint64_t v64 = a1;
  uint64_t v12 = *v3;
  unint64_t v13 = *(void *)(*v3 + 144);
  uint64_t v14 = *(void *)(v7 - 8);
  unint64_t v15 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v14 + 16);
  v15((char *)&v63 - v10, a1, v7, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v7);
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((long long *)(v12 + 72), v69);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = v67;
  uint64_t v18 = specialized static JSONReference.number<A, B>(from:with:for:_:)(v69, v13, (uint64_t)v11, v7, v16, a3);
  if (v17)
  {
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
    (*(void (**)(char *, char *))(v65 + 8))(v11, v66);
    return (char *)swift_release();
  }
  uint64_t v67 = v18;
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  (*(void (**)(char *, char *))(v65 + 8))(v11, v66);
  swift_release();
  uint64_t v20 = *v63;
  uint64_t v19 = v63[1];
  unsigned __int8 v21 = (void (*)(uint64_t *, unint64_t, uint64_t))v15;
  unint64_t v22 = v63[2];
  v68[3] = v7;
  v68[4] = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v68);
  v21(boxed_opaque_existential_1, v64, v7);
  uint64_t v24 = _JSONKeyedEncodingContainer._converted(_:)(v68, v20, v19, v22);
  uint64_t v26 = v25;
  unint64_t result = (char *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  if (*(unsigned char *)(v19 + 32) != 4)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v28 = *(void *)(v19 + 16);
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  *(unsigned char *)(v19 + 32) = 7;
  swift_bridgeObjectRetain();
  uint64_t v29 = v67;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v68[0] = v28;
  unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26);
  uint64_t v33 = *(void *)(v28 + 16);
  BOOL v34 = (v32 & 1) == 0;
  BOOL v35 = __OFADD__(v33, v34);
  uint64_t v36 = v33 + v34;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v21) = v32;
    if (*(void *)(v28 + 24) < v36)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
      uint64_t v37 = v68[0];
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26);
      if ((v21 & 1) == (v38 & 1)) {
        goto LABEL_10;
      }
      unint64_t v31 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v37 = v28;
LABEL_10:
      if (v21)
      {
LABEL_11:
        uint64_t v39 = *(void *)(v37 + 56);
        uint64_t v40 = 8 * v31;
        swift_release();
        *(void *)(v39 + v40) = v67;
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v60 = *(void *)(v19 + 16);
        uint64_t v61 = *(void *)(v19 + 24);
        *(void *)(v19 + 16) = v37;
        *(void *)(v19 + 24) = 0;
        char v62 = *(unsigned char *)(v19 + 32);
        *(unsigned char *)(v19 + 32) = 4;
        outlined consume of JSONReference.Backing(v60, v61, v62);
        swift_bridgeObjectRelease();
        return (char *)swift_release();
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v31, v24, v26, v29, v37);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }
  unint64_t v64 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v41 = static _DictionaryStorage.copy(original:)();
  uint64_t v37 = v41;
  uint64_t v42 = *(void *)(v28 + 16);
  if (!v42)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    unint64_t v31 = v64;
    if (v21) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }
  unint64_t result = (char *)(v41 + 64);
  uint64_t v43 = 1 << *(unsigned char *)(v37 + 32);
  unint64_t v66 = (char *)(v28 + 64);
  unint64_t v44 = (unint64_t)(v43 + 63) >> 6;
  if (v37 != v28 || result >= &v66[8 * v44])
  {
    unint64_t result = (char *)memmove(result, v66, 8 * v44);
    uint64_t v42 = *(void *)(v28 + 16);
  }
  int64_t v45 = 0;
  *(void *)(v37 + 16) = v42;
  uint64_t v46 = 1 << *(unsigned char *)(v28 + 32);
  uint64_t v47 = -1;
  if (v46 < 64) {
    uint64_t v47 = ~(-1 << v46);
  }
  unint64_t v48 = v47 & *(void *)(v28 + 64);
  int64_t v65 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    if (v48)
    {
      unint64_t v49 = __clz(__rbit64(v48));
      v48 &= v48 - 1;
      unint64_t v50 = v49 | (v45 << 6);
      goto LABEL_21;
    }
    int64_t v57 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    uint64_t v29 = v67;
    if (v57 >= v65) {
      goto LABEL_47;
    }
    unint64_t v58 = *(void *)&v66[8 * v57];
    ++v45;
    if (!v58)
    {
      int64_t v45 = v57 + 1;
      if (v57 + 1 >= v65) {
        goto LABEL_47;
      }
      unint64_t v58 = *(void *)&v66[8 * v45];
      if (!v58)
      {
        int64_t v45 = v57 + 2;
        if (v57 + 2 >= v65) {
          goto LABEL_47;
        }
        unint64_t v58 = *(void *)&v66[8 * v45];
        if (!v58)
        {
          int64_t v45 = v57 + 3;
          if (v57 + 3 >= v65) {
            goto LABEL_47;
          }
          unint64_t v58 = *(void *)&v66[8 * v45];
          if (!v58)
          {
            int64_t v45 = v57 + 4;
            if (v57 + 4 >= v65) {
              goto LABEL_47;
            }
            unint64_t v58 = *(void *)&v66[8 * v45];
            if (!v58)
            {
              int64_t v45 = v57 + 5;
              if (v57 + 5 >= v65) {
                goto LABEL_47;
              }
              unint64_t v58 = *(void *)&v66[8 * v45];
              if (!v58)
              {
                int64_t v45 = v57 + 6;
                if (v57 + 6 >= v65) {
                  goto LABEL_47;
                }
                unint64_t v58 = *(void *)&v66[8 * v45];
                if (!v58)
                {
                  int64_t v45 = v57 + 7;
                  if (v57 + 7 >= v65) {
                    goto LABEL_47;
                  }
                  unint64_t v58 = *(void *)&v66[8 * v45];
                  if (!v58) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    unint64_t v48 = (v58 - 1) & v58;
    unint64_t v50 = __clz(__rbit64(v58)) + (v45 << 6);
LABEL_21:
    uint64_t v51 = 16 * v50;
    uint64_t v52 = (void *)(*(void *)(v28 + 48) + 16 * v50);
    uint64_t v53 = v52[1];
    uint64_t v54 = 8 * v50;
    uint64_t v55 = *(void *)(*(void *)(v28 + 56) + v54);
    uint64_t v56 = (void *)(*(void *)(v37 + 48) + v51);
    void *v56 = *v52;
    v56[1] = v53;
    *(void *)(*(void *)(v37 + 56) + v54) = v55;
    swift_bridgeObjectRetain();
    unint64_t result = (char *)swift_retain();
  }
  int64_t v59 = v57 + 8;
  if (v59 >= v65) {
    goto LABEL_47;
  }
  unint64_t v58 = *(void *)&v66[8 * v59];
  if (v58)
  {
    int64_t v45 = v59;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v45 = v59 + 1;
    if (__OFADD__(v59, 1)) {
      break;
    }
    uint64_t v29 = v67;
    if (v45 >= v65) {
      goto LABEL_47;
    }
    unint64_t v58 = *(void *)&v66[8 * v45];
    ++v59;
    if (v58) {
      goto LABEL_46;
    }
  }
LABEL_53:
  __break(1u);
  return result;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)(long long *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  unint64_t v50 = a2;
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13);
  unint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v49 - v18;
  if ((~LODWORD(a6) & 0x7F800000) != 0)
  {
    uint64_t v28 = Float.description.getter();
    unint64_t v30 = v29;
    unint64_t v52 = v28;
    unint64_t v53 = v29;
    swift_bridgeObjectRetain();
    v31._uint64_t countAndFlagsBits = 12334;
    v31._unint64_t object = (void *)0xE200000000000000;
    Swift::Bool v32 = String.hasSuffix(_:)(v31);
    swift_bridgeObjectRelease();
    if (v32)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      uint64_t v28 = v52;
      unint64_t v30 = v53;
    }
    type metadata accessor for JSONReference();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v28;
    *(void *)(v27 + 24) = v30;
    *(unsigned char *)(v27 + 32) = 1;
  }
  else
  {
    uint64_t v49 = a5;
    uint64_t v20 = v17;
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v54);
    uint64_t v21 = *((void *)&v54 + 1);
    if (*((void *)&v54 + 1))
    {
      uint64_t v23 = v55;
      uint64_t v22 = v56;
      uint64_t v25 = v57;
      uint64_t v24 = v58;
      type metadata accessor for JSONReference();
      if (a6 == INFINITY)
      {
        uint64_t v26 = v54;
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = v26;
        *(void *)(v27 + 24) = v21;
        *(unsigned char *)(v27 + 32) = 0;
      }
      else
      {
        uint64_t v36 = swift_allocObject();
        uint64_t v27 = v36;
        if (a6 == -INFINITY)
        {
          *(void *)(v36 + 16) = v23;
          *(void *)(v36 + 24) = v22;
        }
        else
        {
          *(void *)(v36 + 16) = v25;
          *(void *)(v36 + 24) = v24;
        }
        *(unsigned char *)(v36 + 32) = 0;
      }
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
      v33(v19, a3, v13);
      v33(v15, (uint64_t)v19, v13);
      uint64_t v34 = v51;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v15, 1, a4) == 1)
      {
        BOOL v35 = *(void (**)(char *, uint64_t))(v20 + 8);
        v35(v15, v13);
        _CodingPathNode.path.getter(v50);
        v35(v19, v13);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v12, v15, a4);
        uint64_t v37 = _CodingPathNode.path.getter(v50);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v38 = v20;
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v40 = v49;
        *(void *)(inited + 56) = a4;
        *(void *)(inited + 64) = v40;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v12, a4);
        unint64_t v52 = v37;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v13);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v12, a4);
      }
      uint64_t v42 = type metadata accessor for EncodingError();
      uint64_t v43 = swift_allocError();
      uint64_t v45 = v44;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(void *)(v45 + 24) = MEMORY[0x1E4FBB470];
      *(float *)uint64_t v45 = a6;
      unint64_t v52 = 0;
      unint64_t v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      unint64_t v52 = 0xD000000000000017;
      unint64_t v53 = 0x80000001823AB760;
      v46._uint64_t countAndFlagsBits = Float.description.getter();
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._unint64_t object = (void *)0x80000001823AB780;
      v47._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v47);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v42 - 8) + 104))(v45, *MEMORY[0x1E4FBBAA0], v42);
      uint64_t v27 = v43;
      swift_willThrow();
    }
  }
  return v27;
}

id write(buffer:toFileDescriptor:path:parentProgress:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, id a5)
{
  uint64_t v6 = v5;
  uint64_t v7 = (uint64_t)a5;
  LODWORD(v179) = a3;
  uint64_t v8 = a2;
  int64_t v10 = *(void *)(a4 + 8);
  id v176 = *(id *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  LODWORD(v12) = *(unsigned __int8 *)(a4 + 24);
  int64_t v13 = a2 - a1;
  if (a1) {
    uint64_t v14 = a2 - a1;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a5) {
    objc_msgSend(a5, sel_becomeCurrentWithPendingUnitCount_, v14);
  }
  id v178 = (id)v14;
  if (v14 < 1) {
    goto LABEL_62;
  }
  uint64_t v174 = v5;
  uint64_t v175 = v11;
  int v185 = v12;
  uint64_t v173 = v8;
  if (a1)
  {
    if (!v7)
    {
      id v17 = 0;
      uint64_t v180 = v13;
      uint64_t v20 = v13;
      goto LABEL_18;
    }
    int64_t v15 = v10;
    uint64_t v16 = v13;
  }
  else
  {
    int64_t v15 = v10;
    uint64_t v16 = 0;
    id v17 = 0;
    if (!v7)
    {
LABEL_56:
      uint64_t v29 = 0;
      uint64_t v12 = 0;
      int64_t v23 = (int64_t)v178;
      int64_t v10 = v15;
      uint64_t v11 = v175;
LABEL_59:

      if (__OFSUB__(v29, v12)) {
        goto LABEL_205;
      }
      BOOL v47 = v29 - v12 == v23;
      uint64_t v8 = v173;
      uint64_t v6 = v174;
      LOBYTE(v12) = v185;
      if (!v47)
      {
LABEL_66:
        int v33 = MEMORY[0x185301870]();
        if (v12)
        {
          uint64_t v34 = 4;
          id v35 = v176;
          switch(v33)
          {
            case 1:
            case 13:
              uint64_t v34 = 513;
              goto LABEL_100;
            case 2:
              goto LABEL_100;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 16:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 29:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
              goto LABEL_96;
            case 17:
              uint64_t v34 = 516;
              goto LABEL_100;
            case 28:
            case 69:
              uint64_t v34 = 640;
              goto LABEL_100;
            case 30:
              uint64_t v34 = 642;
              goto LABEL_100;
            case 63:
              uint64_t v34 = 514;
              goto LABEL_100;
            default:
              id v35 = v176;
              if (v33 == 102)
              {
                swift_retain_n();
                id v59 = v176;
                swift_retain_n();
                id v60 = v59;
                id v61 = 0;
                uint64_t v180 = 512;
              }
              else
              {
LABEL_96:
                uint64_t v34 = 512;
LABEL_100:
                uint64_t v180 = v34;
                swift_retain_n();
                id v62 = v35;
                swift_retain_n();
                id v63 = v62;
                if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
                  goto LABEL_212;
                }
                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                uint64_t v64 = (int)POSIXErrorCode.rawValue.getter();
                id v65 = objc_allocWithZone((Class)NSError);
                uint64_t v66 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v67 = objc_msgSend(v65, sel_initWithDomain_code_userInfo_, v66, v64, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                id v61 = v67;
                id v68 = objc_msgSend(v67, sel_domain);
                id v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
                uint64_t v71 = v70;

                if (v69 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                  && v71 == v72)
                {
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v73 & 1) == 0) {
                    goto LABEL_206;
                  }
                }
                uint64_t v11 = v175;
              }
              id v74 = v35;
              swift_retain();
              swift_retain();
              if (_foundation_swift_url_feature_enabled())
              {
                uint64_t v172 = v7;
                uint64_t v184 = v11;
                id v75 = v74;
                int64_t v171 = v10;
                swift_retain();
                swift_retain();
                Swift::String v76 = URL.path(percentEncoded:)(1);
                uint64_t countAndFlagsBits = v76._countAndFlagsBits;
                Swift::String v183 = v76;
                swift_bridgeObjectRetain();
                id v179 = v74;
                if (String.count.getter() <= 1)
                {
                  unint64_t object = (unint64_t)v76._object;
                }
                else
                {
                  unint64_t object = (unint64_t)v76._object;
                  if ((specialized BidirectionalCollection.last.getter(v76._countAndFlagsBits, (unint64_t)v76._object) & 0x1FF) == 0x2F)
                  {
                    specialized RangeReplaceableCollection<>.popLast()();
                    swift_bridgeObjectRelease();
                    uint64_t countAndFlagsBits = v183._countAndFlagsBits;
                    unint64_t object = (unint64_t)v183._object;
                  }
                }
                uint64_t v181 = Set.init(minimumCapacity:)();
                uint64_t v92 = specialized Set._Variant.insert(_:)(&v186, 0x2FuLL);
                uint64_t v93 = v181;
                uint64_t v94 = HIBYTE(object) & 0xF;
                if ((object & 0x2000000000000000) == 0) {
                  uint64_t v94 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                }
                if (v94)
                {
                  uint64_t v181 = countAndFlagsBits;
                  unint64_t v182 = object;
                  MEMORY[0x1F4188790](v92);
                  unint64_t v169 = &v181;
                  uint64_t v170 = v93;
                  swift_bridgeObjectRetain();
                  specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v168, countAndFlagsBits, object);
                  if (v95 == 1)
                  {
                    Swift::Int v96 = v181;
                    unint64_t v97 = v182;
                    swift_bridgeObjectRetain();
                    specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v96, v97, v93);
                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  int64_t v10 = v171;
                  uint64_t v7 = v172;
                  id v35 = v176;
                  id v74 = v179;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  int64_t v10 = v171;
                  uint64_t v7 = v172;
                  id v35 = v176;
                  id v74 = v179;
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v99 = v175;
                outlined consume of PathOrURL(v35, v10, v175, 1);
                outlined consume of PathOrURL(v35, v10, v99, 1);
              }
              else
              {
                id v79 = objc_msgSend(v74, sel__parameterString);
                if (v79)
                {
                  uint64_t v80 = v79;
                  id v178 = v61;
                  uint64_t v81 = v11;
                  id v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
                  uint64_t v84 = v83;

                  if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                    && (id v85 = objc_msgSend(v74, sel_path)) != 0)
                  {
                    unint64_t v86 = v85;
                    id v179 = v74;
                    id v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
                    unint64_t v89 = v88;

                    v183._uint64_t countAndFlagsBits = (uint64_t)v87;
                    v183._unint64_t object = v89;
                    swift_bridgeObjectRetain();
                    v90._uint64_t countAndFlagsBits = 59;
                    v90._unint64_t object = (void *)0xE100000000000000;
                    String.append(_:)(v90);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRetain();
                    v91._uint64_t countAndFlagsBits = (uint64_t)v82;
                    v91._unint64_t object = v84;
                    String.append(_:)(v91);
                    swift_bridgeObjectRelease();
                    id v74 = v179;
                  }
                  else
                  {
                    v183._uint64_t countAndFlagsBits = 59;
                    v183._unint64_t object = (void *)0xE100000000000000;
                    v98._uint64_t countAndFlagsBits = (uint64_t)v82;
                    v98._unint64_t object = v84;
                    String.append(_:)(v98);
                  }
                  swift_bridgeObjectRelease();
                  uint64_t v99 = v81;
                  outlined consume of PathOrURL(v35, v10, v81, 1);
                  id v61 = v178;
                }
                else
                {
                  id v100 = objc_msgSend(v74, sel_path);
                  if (v100)
                  {
                    uint64_t v101 = v100;
                    static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
                  }
                  outlined consume of PathOrURL(v35, v10, v11, 1);
                  uint64_t v99 = v11;
                }
              }
              uint64_t v111 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v112 = v74;
              uint64_t v113 = v99;
              outlined consume of PathOrURL(v35, v10, v99, 1);
              if (!v61)
              {
                uint64_t v114 = 0;
                goto LABEL_195;
              }
              v183._uint64_t countAndFlagsBits = (uint64_t)v61;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              id v61 = v61;
              if (!_getErrorEmbeddedNSError<A>(_:)()) {
                goto LABEL_193;
              }
              break;
          }
          goto LABEL_191;
        }
        uint64_t v36 = 4;
        switch(v33)
        {
          case 1:
          case 13:
            uint64_t v36 = 513;
            break;
          case 2:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 29:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
            goto LABEL_95;
          case 17:
            uint64_t v36 = 516;
            break;
          case 28:
          case 69:
            uint64_t v36 = 640;
            break;
          case 30:
            uint64_t v36 = 642;
            break;
          case 63:
            uint64_t v36 = 514;
            break;
          default:
            if (v33 == 102) {
              goto LABEL_146;
            }
LABEL_95:
            uint64_t v36 = 512;
            break;
        }
        id v35 = (id)v10;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_212;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v102 = (int)POSIXErrorCode.rawValue.getter();
        id v103 = objc_allocWithZone((Class)NSError);
        uint64_t v104 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v105 = objc_msgSend(v103, sel_initWithDomain_code_userInfo_, v104, v102, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v106 = objc_msgSend(v105, sel_domain);
        id v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
        uint64_t v109 = v108;

        if (v107 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v109 == v110)
        {
LABEL_185:
          swift_bridgeObjectRelease_n();
          int64_t v10 = (int64_t)v35;
        }
        else
        {
          uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int64_t v10 = (int64_t)v35;
          if ((v6 & 1) == 0)
          {
            __break(1u);
LABEL_135:
            uint64_t v38 = 513;
            goto LABEL_152;
          }
        }
LABEL_187:
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v36, (uint64_t)v176, v10, v105, 0, 0, 0, 0, &v183, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
          (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
          (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
          (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
        goto LABEL_196;
      }
LABEL_62:
      if (!a1 || v8 == a1 || (fsync((int)v179) & 0x80000000) == 0) {
        return objc_msgSend((id)v7, sel_resignCurrent);
      }
      int v37 = MEMORY[0x185301870]();
      if ((v12 & 1) == 0)
      {
        uint64_t v36 = 4;
        switch(v37)
        {
          case 1:
          case 13:
            uint64_t v36 = 513;
            goto LABEL_182;
          case 2:
            goto LABEL_182;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 29:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
            goto LABEL_148;
          case 17:
            uint64_t v36 = 516;
            goto LABEL_182;
          case 28:
          case 69:
            uint64_t v36 = 640;
            goto LABEL_182;
          case 30:
            uint64_t v36 = 642;
            goto LABEL_182;
          case 63:
            uint64_t v36 = 514;
            goto LABEL_182;
          default:
            if (v37 == 102)
            {
LABEL_146:
              id v105 = 0;
              uint64_t v36 = 512;
              goto LABEL_187;
            }
LABEL_148:
            uint64_t v36 = 512;
LABEL_182:
            id v35 = (id)v10;
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
              goto LABEL_212;
            }
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v157 = (int)POSIXErrorCode.rawValue.getter();
            id v158 = objc_allocWithZone((Class)NSError);
            uint64_t v159 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v105 = objc_msgSend(v158, sel_initWithDomain_code_userInfo_, v159, v157, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v160 = objc_msgSend(v105, sel_domain);
            id v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(v160);
            uint64_t v163 = v162;

            if (v161 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v163 == v164)
            {
              goto LABEL_185;
            }
            char v165 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            int64_t v10 = (int64_t)v35;
            if (v165) {
              goto LABEL_187;
            }
            goto LABEL_208;
        }
      }
      uint64_t v175 = v11;
      uint64_t v38 = 4;
      id v35 = v176;
      switch(v37)
      {
        case 1:
        case 13:
          goto LABEL_135;
        case 2:
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_147;
        case 17:
          uint64_t v38 = 516;
          break;
        case 28:
        case 69:
          uint64_t v38 = 640;
          break;
        case 30:
          uint64_t v38 = 642;
          break;
        case 63:
          uint64_t v38 = 514;
          break;
        default:
          id v35 = v176;
          if (v37 == 102)
          {
            swift_retain_n();
            id v115 = v176;
            swift_retain_n();
            id v116 = v115;
            id v61 = 0;
            uint64_t v180 = 512;
            goto LABEL_158;
          }
LABEL_147:
          uint64_t v38 = 512;
          break;
      }
LABEL_152:
      uint64_t v180 = v38;
      uint64_t v174 = v6;
      swift_retain_n();
      id v117 = v35;
      swift_retain_n();
      id v118 = v117;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
        goto LABEL_212;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v119 = (int)POSIXErrorCode.rawValue.getter();
      id v120 = objc_allocWithZone((Class)NSError);
      uint64_t v121 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v122 = objc_msgSend(v120, sel_initWithDomain_code_userInfo_, v121, v119, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v61 = v122;
      id v123 = objc_msgSend(v122, sel_domain);
      id v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
      uint64_t v126 = v125;

      if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v126 == v127)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v128 & 1) == 0) {
          goto LABEL_207;
        }
      }
      uint64_t v11 = v175;
LABEL_158:
      id v129 = v35;
      swift_retain();
      swift_retain();
      if (_foundation_swift_url_feature_enabled())
      {
        uint64_t v172 = v7;
        uint64_t v184 = v11;
        id v130 = v129;
        int64_t v171 = v10;
        swift_retain();
        swift_retain();
        Swift::String v131 = URL.path(percentEncoded:)(1);
        uint64_t v132 = v131._countAndFlagsBits;
        Swift::String v183 = v131;
        swift_bridgeObjectRetain();
        id v179 = v129;
        if (String.count.getter() <= 1)
        {
          unint64_t v133 = (unint64_t)v131._object;
        }
        else
        {
          unint64_t v133 = (unint64_t)v131._object;
          if ((specialized BidirectionalCollection.last.getter(v131._countAndFlagsBits, (unint64_t)v131._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
            uint64_t v132 = v183._countAndFlagsBits;
            unint64_t v133 = (unint64_t)v183._object;
          }
        }
        uint64_t v181 = Set.init(minimumCapacity:)();
        uint64_t v147 = specialized Set._Variant.insert(_:)(&v186, 0x2FuLL);
        uint64_t v148 = v181;
        uint64_t v149 = HIBYTE(v133) & 0xF;
        if ((v133 & 0x2000000000000000) == 0) {
          uint64_t v149 = v132 & 0xFFFFFFFFFFFFLL;
        }
        if (v149)
        {
          uint64_t v181 = v132;
          unint64_t v182 = v133;
          MEMORY[0x1F4188790](v147);
          unint64_t v169 = &v181;
          uint64_t v170 = v148;
          swift_bridgeObjectRetain();
          specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v168, v132, v133);
          if (v150 == 1)
          {
            Swift::Int v151 = v181;
            unint64_t v152 = v182;
            swift_bridgeObjectRetain();
            specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v151, v152, v148);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int64_t v10 = v171;
          uint64_t v7 = v172;
          id v35 = v176;
          id v129 = v179;
        }
        else
        {
          swift_bridgeObjectRelease();
          int64_t v10 = v171;
          uint64_t v7 = v172;
          id v35 = v176;
          id v129 = v179;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v154 = v175;
        outlined consume of PathOrURL(v35, v10, v175, 1);
        outlined consume of PathOrURL(v35, v10, v154, 1);
      }
      else
      {
        id v134 = objc_msgSend(v129, sel__parameterString);
        if (v134)
        {
          uint64_t v135 = v134;
          id v178 = v61;
          uint64_t v136 = v11;
          id v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v134);
          uint64_t v139 = v138;

          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (id v140 = objc_msgSend(v129, sel_path)) != 0)
          {
            __int16 v141 = v140;
            id v179 = v129;
            id v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
            uint64_t v144 = v143;

            v183._uint64_t countAndFlagsBits = (uint64_t)v142;
            v183._unint64_t object = v144;
            swift_bridgeObjectRetain();
            v145._uint64_t countAndFlagsBits = 59;
            v145._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v145);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v146._uint64_t countAndFlagsBits = (uint64_t)v137;
            v146._unint64_t object = v139;
            String.append(_:)(v146);
            swift_bridgeObjectRelease();
            id v129 = v179;
          }
          else
          {
            v183._uint64_t countAndFlagsBits = 59;
            v183._unint64_t object = (void *)0xE100000000000000;
            v153._uint64_t countAndFlagsBits = (uint64_t)v137;
            v153._unint64_t object = v139;
            String.append(_:)(v153);
          }
          swift_bridgeObjectRelease();
          uint64_t v154 = v136;
          outlined consume of PathOrURL(v35, v10, v136, 1);
          id v61 = v178;
        }
        else
        {
          id v155 = objc_msgSend(v129, sel_path);
          if (v155)
          {
            uint64_t v156 = v155;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
          }
          outlined consume of PathOrURL(v35, v10, v11, 1);
          uint64_t v154 = v11;
        }
      }
      uint64_t v111 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v112 = v129;
      uint64_t v113 = v154;
      outlined consume of PathOrURL(v35, v10, v154, 1);
      if (!v61)
      {
        uint64_t v114 = 0;
LABEL_195:
        objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v180, v111, v112, v114, 0, 0, 0);

        swift_unknownObjectRelease();
        outlined consume of PathOrURL(v35, v10, v113, 1);
LABEL_196:
        swift_willThrow();
        return objc_msgSend((id)v7, sel_resignCurrent);
      }
      v183._uint64_t countAndFlagsBits = (uint64_t)v61;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      id v61 = v61;
      if (!_getErrorEmbeddedNSError<A>(_:)())
      {
LABEL_193:
        swift_allocError();
        *unint64_t v166 = v61;
        goto LABEL_194;
      }
LABEL_191:

LABEL_194:
      uint64_t v114 = (void *)_swift_stdlib_bridgeErrorToNSError();
      goto LABEL_195;
    }
  }
  uint64_t v18 = self;
  id v19 = objc_msgSend(v18, sel_currentProgress);

  if (v19)
  {
    uint64_t v20 = v16;
    uint64_t v21 = v16 / 100;
    if (v16 / 100 <= 4096) {
      uint64_t v21 = 4096;
    }
    uint64_t v180 = v21;
    id v17 = objc_msgSend(v18, sel_progressWithTotalUnitCount_, v16);
  }
  else
  {
    id v17 = 0;
    uint64_t v20 = v16;
    uint64_t v180 = v16;
  }
  int64_t v10 = v15;
LABEL_18:
  if (v20 < 0) {
    goto LABEL_204;
  }
  if (!v20)
  {
LABEL_55:
    int64_t v15 = v10;
    goto LABEL_56;
  }
  int64_t v171 = v10;
  uint64_t v172 = v7;
  int64_t v10 = 0;
  if (v180 >= 0x7FFFFFFF) {
    uint64_t v22 = 0x7FFFFFFFLL;
  }
  else {
    uint64_t v22 = v180;
  }
  uint64_t v177 = v20;
  uint64_t v12 = v20;
  int64_t v23 = (int64_t)v178;
  while (1)
  {
    if (!v17) {
      goto LABEL_28;
    }
    id v24 = v17;
    if (objc_msgSend(v24, sel_isCancelled))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v39 = objc_allocWithZone((Class)NSError);
      uint64_t v40 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v41 = objc_msgSend(v39, sel_initWithDomain_code_userInfo_, v40, 3072, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v42 = objc_msgSend(v41, sel_domain);
      id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      uint64_t v45 = v44;

      BOOL v47 = v43 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v45 == v46;
      if (!v47)
      {
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = v172;
        if (v48) {
          goto LABEL_87;
        }
        __break(1u);
LABEL_80:
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v49 = objc_allocWithZone((Class)NSError);
        uint64_t v50 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, 3072, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v52 = objc_msgSend(v51, sel_domain);
        id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        uint64_t v55 = v54;

        if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v55 == v56) {
          goto LABEL_86;
        }
        char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = v172;
        if (v58)
        {
LABEL_87:
          swift_willThrow();

          return objc_msgSend((id)v7, sel_resignCurrent);
        }
        __break(1u);
      }
LABEL_86:
      uint64_t v7 = v172;
      swift_bridgeObjectRelease_n();
      goto LABEL_87;
    }

LABEL_28:
    if (v12 >= v22) {
      unint64_t v25 = v22;
    }
    else {
      unint64_t v25 = v12;
    }
    if (v180 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL) {
      unint64_t v25 = 0xFFFFFFFF80000000;
    }
    uint64_t v7 = v10 + v25;
    if (__OFADD__(v10, v25)) {
      break;
    }
    if (v7 < v10) {
      goto LABEL_199;
    }
    if (v17)
    {
      id v26 = v17;
      if (objc_msgSend(v26, sel_isCancelled)) {
        goto LABEL_80;
      }

      int64_t v23 = (int64_t)v178;
    }
    if (v10 < 0 || v23 < v10) {
      goto LABEL_200;
    }
    if (!a1) {
      goto LABEL_209;
    }
    if (v13 < v10 || v13 < v7) {
      goto LABEL_201;
    }
    ssize_t v27 = write((int)v179, (const void *)(a1 + v10), v7 - v10);
    if (v27 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_57;
    }
    uint64_t v7 = 0x7FFFFFFFLL;
    if (v27 > 0x7FFFFFFF) {
      goto LABEL_51;
    }
    if ((v27 & 0x80000000) != 0)
    {
LABEL_57:
      uint64_t v30 = MEMORY[0x185301870]();
      v31._uint64_t countAndFlagsBits = 0x6574697277;
      v31._unint64_t object = (void *)0xE500000000000000;
      logFileIOErrno(_:at:)(v30, v31);
      MEMORY[0x185301880](v30);

      int64_t v10 = v171;
      uint64_t v7 = v172;
      uint64_t v11 = v175;
      LOBYTE(v12) = v185;
      goto LABEL_66;
    }
    uint64_t v7 = v27;
    if (v27)
    {
LABEL_51:
      uint64_t v12 = (v12 - v7) & ~((v12 - v7) >> 63);
      if (v17)
      {
        if (__OFSUB__(v177, v12)) {
          goto LABEL_202;
        }
        objc_msgSend(v17, sel_setCompletedUnitCount_, v177 - v12);
      }
      if (v180 < (uint64_t)0xFFFFFFFF80000000 || (int)v7 >= (int)v22)
      {
        BOOL v28 = __OFADD__(v10, v7);
        v10 += v7;
        if (v28) {
          goto LABEL_203;
        }
        if (v13 < v10)
        {
          __break(1u);
          goto LABEL_55;
        }
      }
    }
    if (v12 <= 0)
    {
      int64_t v10 = v171;
      uint64_t v7 = v172;
      uint64_t v11 = v175;
      uint64_t v29 = v177;
      goto LABEL_59;
    }
  }
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  if (!v7) {
    __break(1u);
  }
  __break(1u);
LABEL_212:
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v167._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v167);
  swift_bridgeObjectRelease();
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_181A39364(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_181A39388(_Unwind_Exception *a1)
{
}

uint64_t one-time initialization function for formatterCache()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICUDateFormatter.DateFormatInfo : ICUDateFormatter?]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static ICUDateFormatter.formatterCache = 100;
  *(void *)algn_1E8EDF478 = result;
  return result;
}

uint64_t type metadata completion function for Duration.TimeFormatStyle.Attributed()
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Pattern(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata singleton initialization cache for Duration.TimeFormatStyle.Pattern);
}

uint64_t base witness table accessor for Equatable in ListFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t specialized _ProcessInfo.processorCount.getter()
{
  return specialized _ProcessInfo.processorCount.getter(COERCE_DOUBLE(0x300000006));
}

id URL.setResourceValues(_:)()
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  unint64_t v1 = *v0;
  type metadata accessor for NSURLResourceKey(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey();
  swift_bridgeObjectRetain();
  v4[0] = 0;
  LODWORD(v1) = objc_msgSend(v1, sel_setResourceValues_error_, _NativeDictionary.bridged()(), v4);
  swift_unknownObjectRelease();
  if (v1) {
    return v4[0];
  }
  if (v4[0])
  {
    v4[0];
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    id v3 = (id)_nilObjCError;
  }
  return (id)swift_willThrow();
}

unint64_t lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey;
  if (!lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey)
  {
    type metadata accessor for NSURLResourceKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey);
  }
  return result;
}

void *partial apply for closure #1 in _NSSwiftCalendar.locale.setter()
{
  long long v2 = *(_OWORD *)(v0 + 16);
  swift_unknownObjectRetain();
  return Calendar.locale.setter((uint64_t *)&v2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance JSONDecoderImpl.KeyedContainer<A>@<X0>(uint64_t *a1@<X8>)
{
  return JSONDecoderImpl.KeyedContainer.superDecoder()(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), a1);
}

uint64_t JSONDecoderImpl.KeyedContainer.superDecoder()@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = specialized JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)(0x7265707573, 0xE500000000000000, 0, 0, a1, a2, a3);
  a4[3] = type metadata accessor for JSONDecoderImpl();
  uint64_t result = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
  a4[4] = result;
  *a4 = v5;
  return result;
}

uint64_t specialized JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  char v10 = a4;
  uint64_t v11 = a3;
  uint64_t v58 = a1;
  uint64_t v57 = a2;
  uint64_t v12 = _CodingKey.stringValue.getter(a1, a2, a3, a4);
  if (*(void *)(a7 + 16) && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13), (v15 & 1) != 0))
  {
    uint64_t v16 = *(void *)(a7 + 56) + 24 * v14;
    uint64_t v17 = *(void *)v16;
    uint64_t v52 = *(void *)(v16 + 8);
    char v51 = *(unsigned char *)(v16 + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for DecodingError();
    uint64_t v55 = (void *)swift_allocError();
    uint64_t v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    void v20[3] = (uint64_t)&type metadata for _CodingKey;
    v20[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v21 = swift_allocObject();
    *uint64_t v20 = v21;
    uint64_t v11 = a3;
    *(void *)(v21 + 16) = a1;
    *(void *)(v21 + 24) = a2;
    *(void *)(v21 + 32) = a3;
    *(unsigned char *)(v21 + 40) = a4;
    outlined copy of _CodingKey(a1, a2, a3, a4);
    _CodingPathNode.path.getter(a6);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 2238496;
    v23._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v23);
    uint64_t v58 = a1;
    uint64_t v57 = a2;
    v24._uint64_t countAndFlagsBits = _CodingKey.stringValue.getter(a1, a2, a3, a4);
    String.append(_:)(v24);
    char v10 = a4;
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 3025186;
    v25._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA68], v18);
    swift_willThrow();

    uint64_t v17 = 0;
    uint64_t v52 = 0;
    char v51 = -96;
  }
  unint64_t v26 = *(void *)(a5 + 24);
  uint64_t v54 = *(void *)(a5 + 32);
  ssize_t v27 = (void *)swift_allocObject();
  v27[5] = &type metadata for _CodingKey;
  v27[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v28 = swift_allocObject();
  void v27[2] = v28;
  *(void *)(v28 + 16) = v58;
  *(void *)(v28 + 24) = v57;
  *(void *)(v28 + 32) = v11;
  *(unsigned char *)(v28 + 40) = v10;
  v27[7] = a6;
  uint64_t v53 = v17;
  if (a6 >> 62)
  {
    if (a6 >> 62 != 1)
    {
      unint64_t v32 = 1;
      goto LABEL_10;
    }
    uint64_t v29 = (int64_t *)((a6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v29 = (int64_t *)(a6 + 64);
  }
  int64_t v30 = *v29;
  swift_retain();
  unint64_t v32 = v30 + 1;
  if (__OFADD__(v30, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
LABEL_10:
  v27[8] = v32;
  int v33 = *(void **)(a5 + 40);
  char v50 = v10;
  unint64_t v34 = *(void *)(a5 + 64);
  uint64_t v35 = *(void *)(a5 + 80);
  uint64_t v36 = *(void *)(a5 + 88);
  uint64_t v44 = *(void *)(a5 + 72);
  uint64_t v42 = *(void *)(a5 + 48);
  uint64_t v43 = *(void *)(a5 + 104);
  uint64_t v56 = *(void *)(a5 + 112);
  unint64_t v37 = *(void *)(a5 + 128);
  uint64_t v45 = *(void *)(a5 + 120);
  uint64_t v46 = *(void *)(a5 + 96);
  uint64_t v38 = *(void *)(a5 + 144);
  uint64_t v47 = *(void *)(a5 + 136);
  char v48 = *(unsigned char *)(a5 + 152);
  uint64_t v49 = v11;
  char v39 = *(unsigned char *)(a5 + 56);
  type metadata accessor for JSONDecoderImpl();
  a5 = swift_allocObject();
  *(void *)(a5 + 160) = v27;
  *(void *)(a5 + 24) = v26;
  *(void *)(a5 + 32) = v54;
  *(void *)(a5 + 40) = v33;
  *(void *)(a5 + 48) = v42;
  *(unsigned char *)(a5 + 56) = v39;
  *(void *)(a5 + 64) = v34;
  *(void *)(a5 + 72) = v44;
  *(void *)(a5 + 80) = v35;
  *(void *)(a5 + 88) = v36;
  *(void *)(a5 + 96) = v46;
  *(void *)(a5 + 104) = v43;
  *(void *)(a5 + 112) = v56;
  *(void *)(a5 + 120) = v45;
  *(void *)(a5 + 128) = v37;
  *(void *)(a5 + 136) = v47;
  *(void *)(a5 + 144) = v38;
  *(unsigned char *)(a5 + 152) = v48;
  outlined copy of _CodingKey(v58, v57, v49, v50);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of JSONEncoder.DateEncodingStrategy(v33, v42, v39);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v34);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v35, v36);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v37);
  swift_bridgeObjectRetain();
  Swift::String v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v26 = v31[2];
  unint64_t v32 = v31[3];
  int64_t v30 = v26 + 1;
  if (v26 >= v32 >> 1) {
LABEL_14:
  }
    Swift::String v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v30, 1, v31);
  _OWORD v31[2] = v30;
  uint64_t v40 = &v31[3 * v26];
  _OWORD v40[4] = v53;
  v40[5] = v52;
  *((unsigned char *)v40 + 48) = v51;
  *(void *)(a5 + 16) = v31;
  return a5;
}

uint64_t _CodingKey.stringValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      a1 = dispatch thunk of CustomStringConvertible.description.getter();
      break;
    case 2:
      v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      a1 = 0x207865646E49;
      break;
    default:
      swift_bridgeObjectRetain();
      break;
  }
  return a1;
}

uint64_t JSONEncoder.nonConformingFloatEncodingStrategy.setter(long long *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  long long v8 = *(long long *)((char *)a1 + 24);
  long long v9 = *a1;
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  *(_OWORD *)(v1 + 64) = v9;
  *(void *)(v1 + 80) = v2;
  *(_OWORD *)(v1 + 88) = v8;
  *(void *)(v1 + 104) = v3;
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);

  return swift_release();
}

uint64_t URL.deletingLastPathComponent()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    swift_retain();
    id v8 = v3;
    swift_retain();
    if (!_foundation_swift_url_feature_enabled())
    {
      id v13 = objc_msgSend(v8, sel__parameterString);
      if (v13)
      {
        unint64_t v14 = v13;
        id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        uint64_t v17 = v16;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v18 = objc_msgSend(v8, sel_path)) != 0)
        {
          id v19 = v18;
          id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          uint64_t v21 = v5;
          uint64_t v23 = v22;

          *(void *)&v96[0] = v20;
          *((void *)&v96[0] + 1) = v23;
          swift_bridgeObjectRetain();
          v24._uint64_t countAndFlagsBits = 59;
          v24._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          uint64_t v5 = v21;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v25._uint64_t countAndFlagsBits = (uint64_t)v15;
          v25._unint64_t object = v17;
          String.append(_:)(v25);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          *(void *)&v96[0] = 59;
          *((void *)&v96[0] + 1) = 0xE100000000000000;
          v58._uint64_t countAndFlagsBits = (uint64_t)v15;
          v58._unint64_t object = v17;
          String.append(_:)(v58);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        unint64_t v57 = *((void *)&v96[0] + 1);
        unint64_t v55 = *(void *)&v96[0];
      }
      else
      {
        id v59 = objc_msgSend(v8, sel_path);
        if (v59)
        {
          id v60 = v59;
          unint64_t v55 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          unint64_t v57 = v61;
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();

          unint64_t v55 = 0;
          unint64_t v57 = 0xE000000000000000;
        }
      }
      goto LABEL_52;
    }
    uint64_t v82 = a1;
    *(void *)&v96[1] = v5;
    id v9 = v8;
    swift_retain();
    uint64_t v83 = v5;
    swift_retain();
    Swift::String v10 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v10._countAndFlagsBits;
    v96[0] = v10;
    swift_bridgeObjectRetain();
    id v81 = v9;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v10._object;
    }
    else
    {
      unint64_t object = (unint64_t)v10._object;
      if ((specialized BidirectionalCollection.last.getter(v10._countAndFlagsBits, (unint64_t)v10._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        unint64_t object = *((void *)&v96[0] + 1);
        uint64_t countAndFlagsBits = *(void *)&v96[0];
      }
    }
    *(void *)&long long v91 = Set.init(minimumCapacity:)();
    uint64_t v48 = specialized Set._Variant.insert(_:)(v86, 0x2FuLL);
    uint64_t v49 = v91;
    uint64_t v50 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v50 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v50)
    {
      *(void *)&long long v91 = countAndFlagsBits;
      *((void *)&v91 + 1) = object;
      MEMORY[0x1F4188790](v48);
      uint64_t v79 = (uint64_t)&v91;
      uint64_t v80 = v49;
      swift_bridgeObjectRetain();
      char v51 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)&v78, countAndFlagsBits, object);
      if (v52 == 1)
      {
        unint64_t v54 = *((void *)&v91 + 1);
        Swift::Int v53 = v91;
        swift_bridgeObjectRetain();
        unint64_t v55 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v53, v54, v49);
        unint64_t v57 = v56;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v55 = (unint64_t)v51;
        unint64_t v57 = v52;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v62 = v81;
      if (!v57)
      {
        uint64_t v63 = v83;
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v55 = 0;
        unint64_t v57 = 0xE000000000000000;
        goto LABEL_51;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v55 = 0;
      unint64_t v57 = 0xE000000000000000;
      id v62 = v81;
    }
    uint64_t v63 = v83;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_51:
    swift_release();
    swift_release();

    a1 = v82;
    uint64_t v5 = v63;
LABEL_52:
    swift_bridgeObjectRelease();
    uint64_t v64 = HIBYTE(v57) & 0xF;
    if ((v57 & 0x2000000000000000) == 0) {
      uint64_t v64 = v55 & 0xFFFFFFFFFFFFLL;
    }
    if (v64 && (id v65 = objc_msgSend(v8, sel_URLByDeletingLastPathComponent)) != 0)
    {
      uint64_t v66 = v65;
      URL.init(reference:)(v65, v96);

      id v67 = *(id *)&v96[0];
      URL.init(reference:)(v67, v96);

      swift_release();
      uint64_t result = swift_release();
      long long v68 = *(_OWORD *)((char *)v96 + 8);
      *(void *)a1 = *(void *)&v96[0];
      *(_OWORD *)(a1 + 8) = v68;
    }
    else
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v5;
      id v69 = v8;
      swift_retain();
      return swift_retain();
    }
    return result;
  }
  if (!v4) {
    goto LABEL_65;
  }
  if (*(unsigned char *)(v4 + 168)) {
    uint64_t v7 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else {
    uint64_t v7 = String.subscript.getter();
  }
  uint64_t v26 = MEMORY[0x185301F50](v7);
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0) {
    uint64_t v29 = v26 & 0xFFFFFFFFFFFFLL;
  }
  if (v29)
  {
    char v30 = *(unsigned char *)(v4 + 218);
    char v112 = 1;
    char v111 = 1;
    char v110 = 1;
    char v109 = 1;
    char v108 = 1;
    char v107 = 1;
    char v106 = 1;
    char v105 = 1;
    char v104 = 1;
    char v103 = 1;
    char v102 = 1;
    char v101 = v30;
    char v100 = 0;
    if (*(unsigned char *)(v4 + 168))
    {
      swift_retain();
      uint64_t v31 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else
    {
      swift_retain();
      uint64_t v31 = String.subscript.getter();
    }
    uint64_t v33 = MEMORY[0x185301F50](v31);
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t Path = String._deletingLastPathComponent()(v33, v35);
    unint64_t v38 = v37;
    swift_bridgeObjectRelease_n();
    uint64_t v98 = Path;
    unint64_t v99 = v38;
    uint64_t v39 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000) == 0) {
      uint64_t v39 = Path & 0xFFFFFFFFFFFFLL;
    }
    if (v39 && (specialized BidirectionalCollection.last.getter(Path, v38) & 0x1FF) != 0x2F)
    {
      v40._uint64_t countAndFlagsBits = 47;
      v40._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      uint64_t Path = v98;
      unint64_t v38 = v99;
    }
    char v111 = 0;
    char v105 = 0;
    if ((v38 & 0x1000000000000000) != 0)
    {
      uint64_t v83 = v5;
      uint64_t v70 = a1;
      *(void *)&v96[0] = Path;
      *((void *)&v96[0] + 1) = v38;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v71 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v72 = (unsigned __int16 *)objc_msgSend(v71, sel__fastCharacterContents);
      id v73 = v71;
      if (v72)
      {
        *(void *)&v96[0] = Path;
        *((void *)&v96[0] + 1) = v38;
        StringProtocol._ephemeralString.getter();
        id v74 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v75 = objc_msgSend(v74, sel_length);
        swift_unknownObjectRelease();
        char v76 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v72, (uint64_t)v75, 0x10u, 1);
      }
      else
      {
        char v76 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(Path, v38, 0x10u, 1);
      }
      char v77 = v76;
      swift_bridgeObjectRelease_n();
      a1 = v70;
      uint64_t v5 = v83;
      if (v77)
      {
LABEL_34:
        swift_bridgeObjectRelease();
        *(void *)&long long v91 = v4;
        BYTE8(v91) = v111;
        BYTE9(v91) = v110;
        BYTE10(v91) = v109;
        BYTE11(v91) = v108;
        BYTE12(v91) = v107;
        BYTE13(v91) = v106;
        BYTE14(v91) = v105;
        HIBYTE(v91) = v104;
        v92[0] = v103;
        memset(&v92[8], 0, 64);
        uint64_t v93 = 0;
        LOBYTE(v94) = v102;
        *((void *)&v94 + 1) = Path;
        *(void *)&v95[0] = v38;
        *(_OWORD *)((char *)v95 + 8) = 0u;
        *(_OWORD *)((char *)&v95[1] + 8) = 0u;
        BYTE8(v95[2]) = v101;
        BYTE9(v95[2]) = v100;
        v96[0] = v91;
        v96[1] = *(_OWORD *)v92;
        v96[4] = *(_OWORD *)&v92[48];
        v96[5] = 0uLL;
        v96[2] = *(_OWORD *)&v92[16];
        v96[3] = *(_OWORD *)&v92[32];
        *(_OWORD *)((char *)v97 + 10) = *(_OWORD *)((char *)&v95[1] + 10);
        v96[7] = v95[0];
        v97[0] = v95[1];
        v96[6] = v94;
        v86[6] = v94;
        v86[7] = v95[0];
        v87[0] = v95[1];
        *(_OWORD *)((char *)v87 + 10) = *(_OWORD *)((char *)&v95[1] + 10);
        v86[2] = *(_OWORD *)&v92[16];
        v86[3] = *(_OWORD *)&v92[32];
        v86[4] = *(_OWORD *)&v92[48];
        v86[5] = 0uLL;
        v86[0] = v91;
        v86[1] = *(_OWORD *)v92;
        uint64_t v88 = (uint64_t)v3;
        uint64_t v89 = v4;
        uint64_t v90 = v5;
        outlined retain of URLComponents((uint64_t)v96);
        URL.baseURL.getter(v85);
        uint64_t v44 = (void *)v85[0];
        v84[0] = v85[0];
        v84[1] = v85[1];
        _OWORD v84[2] = v85[2];
        URLComponents.url(relativeTo:)((uint64_t)v84, &v88);
        outlined consume of URL?(v44);
        uint64_t result = outlined release of URLComponents((uint64_t)&v91);
        uint64_t v45 = v88;
        if (v88)
        {
          uint64_t v47 = v89;
          uint64_t v46 = v90;
          swift_bridgeObjectRelease();
          uint64_t result = outlined release of URLComponents((uint64_t)&v91);
          *(void *)a1 = v45;
          *(void *)(a1 + 8) = v47;
          *(void *)(a1 + 16) = v46;
          return result;
        }
        goto LABEL_66;
      }
    }
    else
    {
      if ((v38 & 0x2000000000000000) != 0)
      {
        uint64_t v42 = HIBYTE(v38) & 0xF;
        *(void *)&v96[0] = Path;
        *((void *)&v96[0] + 1) = v38 & 0xFFFFFFFFFFFFFFLL;
        id v41 = (char *)v96;
      }
      else if ((Path & 0x1000000000000000) != 0)
      {
        id v41 = (char *)((v38 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v42 = Path & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        id v41 = (char *)_StringObject.sharedUTF8.getter();
      }
      BOOL v43 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v41, v42, 0x10u, 1);
      swift_bridgeObjectRetain();
      if (v43) {
        goto LABEL_34;
      }
    }
    swift_bridgeObjectRelease();
    LODWORD(v80) = 0;
    uint64_t v79 = 897;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    return result;
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  swift_retain();
  id v32 = v3;

  return swift_retain();
}

double URL.append<A>(components:directoryHint:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)v4;
  URL._appending<A>(components:directoryHint:)(a1, a3, a4, &v7);

  swift_release();
  swift_release();
  *(void *)uint64_t v4 = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(v4 + 8) = v8;
  return result;
}

uint64_t URL.appending<A>(components:directoryHint:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return URL._appending<A>(components:directoryHint:)(a1, a2, a3, a4);
}

uint64_t URL._appending<A>(components:directoryHint:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v57 = a3;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v56 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v54 = (char *)&v44 - v11;
  uint64_t v45 = v12;
  MEMORY[0x1F4188790](v13);
  id v15 = (char *)&v44 - v14;
  unsigned int v46 = *v16;
  uint64_t v17 = *(void **)v4;
  id v18 = *(unsigned char **)(v4 + 8);
  uint64_t v19 = *(void *)(v4 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  id v20 = v17;
  swift_retain();
  uint64_t v21 = _ArrayBuffer.requestNativeBuffer()();
  if (!v21)
  {
    Swift::String v58 = a1;
    type metadata accessor for Array();
    swift_getWitnessTable();
    uint64_t v21 = _copyCollectionToContiguousArray<A>(_:)();
  }
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  uint64_t v60 = v22;
  type metadata accessor for Array();
  swift_getWitnessTable();
  swift_getWitnessTable();
  RangeReplaceableCollection<>.removeLast()();
  uint64_t v23 = v60;
  uint64_t v49 = a2;
  uint64_t result = MEMORY[0x185302620](v60, a2);
  uint64_t v47 = v15;
  uint64_t v48 = a4;
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    uint64_t v35 = v8;
LABEL_14:
    unint64_t v37 = v47;
    uint64_t v38 = v49;
    v36(v56, v47, v49);
    id v39 = v20;
    swift_retain();
    swift_retain();
    Swift::String v40 = (void *)String.init<A>(_:)();
    specialized URL.appending<A>(component:directoryHint:)(v40, v41, v46, v39, v18, v19, (uint64_t)&v58);
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v37, v38);
    long long v42 = v59;
    BOOL v43 = v48;
    void *v48 = v58;
    *(_OWORD *)(v43 + 1) = v42;
    return result;
  }
  if (result >= 1)
  {
    uint64_t v25 = 0;
    unint64_t v50 = v23 & 0xC000000000000001;
    unint64_t v55 = (void (**)(char *, void **, uint64_t))(v8 + 16);
    unint64_t v52 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v53 = result;
    uint64_t v26 = v49;
    do
    {
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      unint64_t v28 = v54;
      if ((isClassOrObjCExistentialType & 1) != 0 && v50)
      {
        uint64_t v29 = v23;
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v45 != 8) {
          goto LABEL_16;
        }
        uint64_t v31 = v8;
        Swift::String v58 = (void *)result;
        char v51 = *v55;
        v51(v28, &v58, v26);
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v29 = v23;
        unint64_t v30 = v23
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(void *)(v8 + 72) * v25;
        uint64_t v31 = v8;
        char v51 = *(void (**)(char *, void **, uint64_t))(v8 + 16);
        v51(v54, (void **)v30, v26);
      }
      ++v25;
      (*v52)(v56, v28, v26);
      id v32 = v20;
      swift_retain();
      swift_retain();
      uint64_t v33 = (void *)String.init<A>(_:)();
      specialized URL.appending<A>(component:directoryHint:)(v33, v34, 0, v32, v18, v19, (uint64_t)&v58);
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();

      id v20 = v58;
      uint64_t v19 = *((void *)&v59 + 1);
      id v18 = (unsigned char *)v59;
      uint64_t v8 = v31;
      uint64_t v23 = v29;
    }
    while (v53 != v25);
    swift_bridgeObjectRelease();
    uint64_t v35 = v8;
    uint64_t v36 = (void (*)(char *, char *, uint64_t))v51;
    goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void specialized URL.appending<A>(component:directoryHint:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (!_foundation_swift_url_feature_enabled())
  {
    id v83 = a1;
    *(void *)&long long v84 = a2;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v14._uint64_t countAndFlagsBits = 47;
    v14._unint64_t object = (void *)0xE100000000000000;
    String.hasSuffix(_:)(v14);
    switch((char)a3)
    {
      case 2:
        swift_retain();
        id v15 = a4;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          id v83 = v15;
          *(void *)&long long v84 = a5;
          *((void *)&v84 + 1) = a6;
          URL.scheme.getter();
          if (!v16)
          {
            swift_release();
            swift_release();

            goto LABEL_11;
          }
          Swift::String v17 = String.lowercased()();
          swift_bridgeObjectRelease();
          if (v17._countAndFlagsBits == 1701603686 && v17._object == (void *)0xE400000000000000)
          {
            swift_release();
            swift_release();
            id v18 = v15;

            swift_bridgeObjectRelease();
          }
          else
          {
            char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_release();
            swift_release();
            id v18 = v15;

            swift_bridgeObjectRelease();
            if ((v80 & 1) == 0) {
              goto LABEL_11;
            }
          }
        }
        else
        {
          unsigned __int8 v23 = objc_msgSend(v15, sel_isFileURL);
          swift_release();
          swift_release();

          id v18 = v15;
          if ((v23 & 1) == 0) {
            goto LABEL_11;
          }
        }
        id v82 = v18;
        specialized URL.appending<A>(component:directoryHint:)(&v83, a1, a2, 1, v18, a5, a6);
        id v79 = v83;
        id v85 = (void *)*MEMORY[0x1E4F1C628];
        Swift::String v24 = v85;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
        uint64_t v25 = static _SetStorage.allocate(capacity:)();
        uint64_t v26 = v25 + 56;
        id v27 = v24;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        Hasher.init(_seed:)();
        id v81 = v27;
        String.hash(into:)();
        Swift::Int v28 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        uint64_t v29 = -1 << *(unsigned char *)(v25 + 32);
        unint64_t v30 = v28 & ~v29;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)(v25 + 56 + 8 * (v30 >> 6));
        uint64_t v33 = 1 << v30;
        if (((1 << v30) & v32) == 0) {
          goto LABEL_43;
        }
        id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v25 + 48) + 8 * v30));
        uint64_t v36 = v35;
        if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(v24) && v36 == v37) {
          goto LABEL_21;
        }
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38) {
          goto LABEL_23;
        }
        uint64_t v40 = ~v29;
        unint64_t v30 = (v30 + 1) & v40;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)(v26 + 8 * (v30 >> 6));
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          goto LABEL_43;
        }
        id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v25 + 48) + 8 * v30));
        uint64_t v43 = v42;
        if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)(v24) && v43 == v44) {
          goto LABEL_21;
        }
        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v45) {
          goto LABEL_23;
        }
        unint64_t v30 = (v30 + 1) & v40;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)(v26 + 8 * (v30 >> 6));
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          goto LABEL_43;
        }
        id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v25 + 48) + 8 * v30));
        uint64_t v48 = v47;
        if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(v24) && v48 == v49) {
          goto LABEL_21;
        }
        char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v50) {
          goto LABEL_23;
        }
        unint64_t v30 = (v30 + 1) & v40;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)(v26 + 8 * (v30 >> 6));
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          goto LABEL_43;
        }
        id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v25 + 48) + 8 * v30));
        uint64_t v53 = v52;
        if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(v24) && v53 == v54) {
          goto LABEL_21;
        }
        char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v55) {
          goto LABEL_23;
        }
        unint64_t v30 = (v30 + 1) & v40;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)(v26 + 8 * (v30 >> 6));
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          goto LABEL_43;
        }
        break;
      default:
LABEL_11:
        id v19 = objc_msgSend(a4, sel__cfurl);
        String._bridgeToObjectiveCImpl()();
        id v20 = v19;
        swift_bridgeObjectRelease();
        uint64_t v21 = (void *)_CFURLCreateCopyAppendingPathComponent();

        swift_unknownObjectRelease();
        if (v21)
        {
          URL.init(reference:)(v21, &v83);

LABEL_13:
          long long v22 = v84;
          *(void *)a7 = v83;
          *(_OWORD *)(a7 + 8) = v22;
        }
        else
        {
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
        }
        return;
    }
    while (1)
    {
      id v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v25 + 48) + 8 * v30));
      uint64_t v58 = v57;
      if (v56 == static String._unconditionallyBridgeFromObjectiveC(_:)(v24) && v58 == v59) {
        break;
      }
      char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v61) {
        goto LABEL_23;
      }
      unint64_t v30 = (v30 + 1) & v40;
      unint64_t v31 = v30 >> 6;
      uint64_t v32 = *(void *)(v26 + 8 * (v30 >> 6));
      uint64_t v33 = 1 << v30;
      if ((v32 & (1 << v30)) == 0)
      {
LABEL_43:
        *(void *)(v26 + 8 * v31) = v33 | v32;
        id v39 = v81;
        *(void *)(*(void *)(v25 + 48) + 8 * v30) = v81;
        uint64_t v62 = *(void *)(v25 + 16);
        BOOL v63 = __OFADD__(v62, 1);
        uint64_t v64 = v62 + 1;
        if (!v63)
        {
          *(void *)(v25 + 16) = v64;
          goto LABEL_45;
        }
        __break(1u);
LABEL_57:
        swift_once();
LABEL_52:
        swift_willThrow();
        swift_release();
        goto LABEL_53;
      }
    }
LABEL_21:
    swift_bridgeObjectRelease_n();
LABEL_23:
    id v39 = v81;

LABEL_45:
    Swift::String v24 = v79;
    type metadata accessor for NSURLResourceKey(0);
    swift_arrayDestroy();
    uint64_t v65 = swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)(v65);
    swift_release();
    uint64_t v66 = _ContiguousArrayBuffer._asCocoaArray()();
    id v83 = 0;
    id v67 = objc_msgSend(v79, sel_resourceValuesForKeys_error_, v66, &v83);
    swift_unknownObjectRelease();
    id v68 = v83;
    if (v67)
    {
      id v69 = (void *)specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v67);
      id v70 = v68;

      id v83 = v69;
      *(void *)&long long v84 = v25;
      int v71 = URLResourceValues._get(_:)(v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v71 == 2) {
        goto LABEL_53;
      }
      id v72 = objc_msgSend(v82, sel__cfurl);
      String._bridgeToObjectiveCImpl()();
      id v73 = v72;
      swift_bridgeObjectRelease();
      id v74 = (void *)_CFURLCreateCopyAppendingPathComponent();

      swift_unknownObjectRelease();
      if (!v74) {
        goto LABEL_60;
      }
      URL.init(reference:)(v74, &v83);
    }
    else
    {
      if (!v83)
      {
        if (one-time initialization token for _nilObjCError != -1) {
          goto LABEL_57;
        }
        goto LABEL_52;
      }
      id v75 = v83;
      swift_willThrow();
      swift_release();

LABEL_53:
      id v76 = objc_msgSend(v82, sel__cfurl);
      String._bridgeToObjectiveCImpl()();
      id v77 = v76;
      swift_bridgeObjectRelease();
      uint64_t v78 = (void *)_CFURLCreateCopyAppendingPathComponent();

      swift_unknownObjectRelease();
      if (!v78) {
        goto LABEL_59;
      }
      URL.init(reference:)(v78, &v83);
    }
    swift_release();
    swift_release();
    goto LABEL_13;
  }

  specialized URL.appending<A>(path:directoryHint:encodingSlashes:)((uint64_t)a1, a2, a3, 1, a4, a5, a6, (void *)a7);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBF88]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBF60]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBF78]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBF80]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBFA0]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBF98]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBFA8]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBFB0]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBFC0]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

{
  return a4() & 0x1FF;
}

{
  return a4() & 0x1FFFF;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

size_t __getStackObservedValueClassAndBoxSize_block_invoke()
{
  qword_1EB1ED2D0 = objc_opt_class();
  size_t result = class_getInstanceSize((Class)qword_1EB1ED2D0);
  _MergedGlobals_102 = result;
  return result;
}

uint64_t one-time initialization function for currentIdentity()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<Int>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = 0;
  static AttributedString.currentIdentity = result;
  return result;
}

NSString *NSUserName(void)
{
  uint64_t v0 = (void *)CFCopyUserName();

  return (NSString *)v0;
}

uint64_t static String.temporaryDirectoryPath.getter()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t isStackAllocationSafe = confstr(65537, 0, 0);
  if (isStackAllocationSafe >= 1)
  {
    size_t v1 = isStackAllocationSafe;
    if ((unint64_t)isStackAllocationSafe <= 0x400
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x1F4188790](isStackAllocationSafe);
      confstr(65537, (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
    }
    else
    {
      uint64_t v2 = (char *)swift_slowAlloc();
      confstr(65537, v2, v1);
      MEMORY[0x185309510](v2, -1, -1);
    }
  }
  uint64_t v3 = 0x2F706D742FLL;
  if (!issetugid())
  {
    if (getenv("TMPDIR"))
    {
      uint64_t v3 = String.init(cString:)();
      unint64_t v6 = v5;
      if ((specialized BidirectionalCollection.last.getter(v3, v5) & 0x1FF) != 0x2F)
      {
        uint64_t v9 = v3;
        unint64_t v10 = v6;
        swift_bridgeObjectRetain();
        v7._uint64_t countAndFlagsBits = 47;
        v7._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v7);
        swift_bridgeObjectRelease();
        return v9;
      }
    }
  }
  return v3;
}

unint64_t instantiation function for generic protocol witness table for Data(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Data and conformance Data();
  *(void *)(a1 + 8) = result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(v1 + 17);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(v1 + 19);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(v1 + 21);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v1 + 23);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v1 + 9);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 11);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v1 + 13);
  __n128 result = *(__n128 *)(v1 + 15);
  *(__n128 *)(a1 + 120) = result;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 200) = v3;
  *(void *)(a1 + 208) = v4;
  *(void *)(a1 + 216) = v5;
  *(void *)(a1 + 224) = v6;
  *(void *)(a1 + 232) = v7;
  *(void *)(a1 + 240) = v8;
  *(void *)(a1 + 248) = v9;
  *(void *)(a1 + 256) = v10;
  return result;
}

uint64_t NSCoder.decodeObject(of:forKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (a1[2] == 1)
    {
      ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
      uint64_t v6 = String._bridgeToObjectiveCImpl()();
      id v7 = (id)__NSCoderDecodeObjectOfClassForKey(v2, ObjCClassFromMetadata, v6, 0);
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    uint64_t v3 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  id v7 = (id)__NSCoderDecodeObjectOfClassesForKey(v2, (uint64_t)v3, v8, 0);

LABEL_6:
  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  return outlined init with take of Any?((uint64_t)v10, a2);
}

id NSAttributedString.init(markdown:options:baseURL:)(uint64_t a1, unint64_t a2, char *a3, void **a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  char v5 = *a3;
  char v6 = a3[1];
  char v7 = a3[2];
  uint64_t v8 = *((void *)a3 + 1);
  uint64_t v9 = *a4;
  uint64_t v25 = *((void *)a3 + 2);
  char v24 = a3[24];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 >= (int)a1)
      {
        uint64_t v12 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
        goto LABEL_7;
      }
      __break(1u);
      goto LABEL_20;
    case 2uLL:
      char v13 = *a3;
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v16 = v15;
      char v5 = v13;
      Swift::String v17 = __DataStorage.bridgedReference(_:)(v14, v16);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      uint64_t v12 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      id v26 = (id)a1;
      LOWORD(v27) = a2;
      BYTE2(v27) = BYTE2(a2);
      BYTE3(v27) = BYTE3(a2);
      BYTE4(v27) = BYTE4(a2);
      BYTE5(v27) = BYTE5(a2);
      uint64_t v12 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v26, BYTE6(a2));
LABEL_7:
      Swift::String v17 = v12;
LABEL_8:
      type metadata accessor for NSAttributedStringMarkdownParsingOptions();
      LOBYTE(v26) = v5;
      BYTE1(v26) = v6;
      BYTE2(v26) = v7;
      uint64_t v27 = v8;
      uint64_t v28 = v25;
      char v29 = v24;
      id v18 = NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)&v26);
      if (v9)
      {
        id v19 = v9;
        outlined consume of URL?(v9);
      }
      else
      {
        id v19 = 0;
      }
      id v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      id v26 = 0;
      id v4 = objc_msgSend(v20, sel_initWithMarkdown_options_baseURL_error_, v17, v18, v19, &v26);

      if (v4)
      {
        id v21 = v26;
        outlined consume of Data._Representation(a1, a2);
      }
      else
      {
        if (v26)
        {
          v26;
        }
        else
        {
          if (one-time initialization token for _nilObjCError != -1) {
LABEL_20:
          }
            swift_once();
          id v22 = (id)_nilObjCError;
        }
        swift_willThrow();
        outlined consume of Data._Representation(a1, a2);
      }
      return v4;
  }
}

uint64_t URL.debugDescription.getter()
{
  uint64_t v2 = *(void **)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v7 = objc_msgSend(v2, sel_debugDescription);
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

    return (uint64_t)v8;
  }
  swift_retain();
  id v4 = v2;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    id v9 = objc_msgSend(v4, sel_description);
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    swift_release();
    swift_release();

    return (uint64_t)v8;
  }
  id v48 = v4;
  unint64_t v49 = v1;
  uint64_t v50 = v3;
  URL.scheme.getter();
  if (!v5) {
    goto LABEL_18;
  }
  Swift::String v6 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v6._countAndFlagsBits == 1635017060 && v6._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
  }
  id v11 = v4;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (result)
  {
    if (!v1)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }
  else
  {
    id v13 = objc_msgSend(v11, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    swift_release();
    swift_release();
  }
  uint64_t v14 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v14 < 129)
  {
LABEL_18:
    id v16 = v4;
    swift_retain();
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if (!result)
    {
      id v18 = objc_msgSend(v16, sel_relativeString);
      id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      Swift::String v17 = v19;
      swift_release();
      swift_release();

      goto LABEL_28;
    }
    if (v1)
    {
      id v8 = *(id *)(v1 + 16);
      Swift::String v17 = *(void **)(v1 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();

      goto LABEL_28;
    }
    __break(1u);
    goto LABEL_33;
  }
  id v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  id v15 = v11;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v20 = objc_msgSend(v15, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    swift_release();
    swift_release();

    goto LABEL_23;
  }
  if (!v1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();

LABEL_23:
  uint64_t v21 = specialized Collection.prefix(_:)(120);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = MEMORY[0x185301F50](v21, v23, v25, v27);
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 0x202E2E2E20;
  v29._unint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v29);
  id v30 = v15;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v33 = objc_msgSend(v30, sel_relativeString);
    id v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    unint64_t v31 = v34;
    swift_release();
    swift_release();

    goto LABEL_27;
  }
  if (v1)
  {
    id v32 = *(id *)(v1 + 16);
    unint64_t v31 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

LABEL_27:
    uint64_t v35 = specialized BidirectionalCollection.suffix(_:)(8, (uint64_t)v32, v31);
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    v42._uint64_t countAndFlagsBits = MEMORY[0x185301F50](v35, v37, v39, v41);
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v8 = v48;
    Swift::String v17 = (void *)v49;
LABEL_28:
    URL.baseURL.getter((uint64_t *)&v48);
    uint64_t v43 = v48;
    if (v48)
    {
      unint64_t v45 = v49;
      uint64_t v44 = v50;
      id v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      v46._uint64_t countAndFlagsBits = (uint64_t)v8;
      v46._unint64_t object = v17;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._uint64_t countAndFlagsBits = 539831584;
      v47._unint64_t object = (void *)0xE400000000000000;
      String.append(_:)(v47);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v43, v45, v44);
      outlined consume of URL?(v43);
      swift_release();
      swift_release();

      return (uint64_t)v48;
    }
    else
    {
      swift_release();
      swift_release();
    }
    return (uint64_t)v8;
  }
LABEL_35:
  __break(1u);
  return result;
}

void static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
}

void type metadata accessor for UCalendarWeekdayType(uint64_t a1)
{
}

uint64_t type metadata completion function for _PlistUnkeyedDecodingContainer()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo;
  if (!lazy protocol witness table cache variable for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo);
  }
  return result;
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format()
{
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Currency(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Percent(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Currency(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Currency);
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Percent(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Percent);
}

uint64_t instantiation function for generic protocol witness table for Date.FormatStyle(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle);
}

uint64_t base witness table accessor for Equatable in ICUPercentNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature(&lazy protocol witness table cache variable for type ICUPercentNumberFormatter.Signature and conformance ICUPercentNumberFormatter.Signature, (void (*)(uint64_t))type metadata accessor for ICUPercentNumberFormatter.Signature);
}

uint64_t base witness table accessor for Equatable in ICUNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature(&lazy protocol witness table cache variable for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature, (void (*)(uint64_t))type metadata accessor for ICUNumberFormatter.Signature);
}

uint64_t lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for NSDecimal.FormatStyle()
{
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t URLComponents.port.setter(uint64_t result, char a2)
{
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 13) = 0;
  if ((a2 & 1) == 0 && result < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 88) = result;
    *(unsigned char *)(v2 + 96) = a2 & 1;
  }
  return result;
}

uint64_t AttributeContainer.Builder.callAsFunction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13.n128_f64[0] = MEMORY[0x1F4188790](v12);
  id v15 = (char *)&v25 - v14;
  uint64_t v17 = *v3;
  uint64_t v16 = v3[1];
  uint64_t v27 = a3;
  *a3 = v17;
  a3[1] = v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))((char *)&v25 - v14, v26, AssociatedTypeWitness, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, v8);
  id v19 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v20 = v19(v6, v5);
  unint64_t v22 = v21;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v11, v6, v5, (uint64_t)v28);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v28, v20, v22);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v11, v8);
  return ((uint64_t (*)(char *, uint64_t))v23)(v15, v8);
}

Swift::Void __swiftcall IndexSet.shift(startingAt:by:)(Swift::Int startingAt, Swift::Int by)
{
  if (*(unsigned char *)(*(void *)v2 + 24) != 1)
  {
    uint64_t v6 = *(void **)(*(void *)v2 + 16);
LABEL_8:
    id v7 = v6;
    objc_msgSend(v7, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v10;
    *(unsigned char *)(v8 + 24) = 1;
    *(void *)uint64_t v2 = v8;
    id v9 = v10;
    swift_release();
    objc_msgSend(v9, sel_shiftIndexesStartingAtIndex_by_, startingAt, by);

    return;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *(void **)(*(void *)v2 + 16);
  if ((*(unsigned char *)(*(void *)v2 + 24) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_8;
  }

  objc_msgSend(v6, sel_shiftIndexesStartingAtIndex_by_, startingAt, by);
}

void *initializeBufferWithCopyOfBuffer for CancellableTimer #1 in NSTimer.TimerPublisher.connect()(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, a2, a3, a4, a5, a6, *a7 | ((unint64_t)*((unsigned int *)a7 + 1) << 32), *((void *)a7 + 1));
}

uint64_t specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v17 = a7 & 1;
  int v18 = HIDWORD(a7);
  uint64_t v19 = a8;
  if (a1)
  {
    MEMORY[0x1F4188790](a1);
    v15[2] = v8;
    void v15[3] = v9;
    _OWORD v15[4] = v10;
    v15[5] = v11;
    v15[6] = &v17;
    return specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:), (uint64_t)v15, v8, v9);
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x104, a2, a3, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v16, 0, 0);
    return swift_willThrow();
  }
}

uint64_t closure #1 in static Locale.identifier(fromComponents:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  uint64_t v8 = 4 << v7;
  uint64_t v27 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  unint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v10 = 15;
  do
  {
    unint64_t v11 = v10 & 0xC;
    unint64_t v12 = v10;
    if (v11 == v8) {
      unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a1, a2);
    }
    unint64_t v13 = v12 >> 16;
    if (v12 >> 16 >= v4)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned __int8 v15 = String.UTF8View._foreignSubscript(position:)();
      if (v11 != v8) {
        goto LABEL_18;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v29[0] = a1;
      v29[1] = v28;
      unsigned __int8 v15 = *((unsigned char *)v29 + v13);
      if (v11 != v8) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v14 = v27;
      if ((a1 & 0x1000000000000000) == 0) {
        uint64_t v14 = _StringObject.sharedUTF8.getter();
      }
      unsigned __int8 v15 = *(unsigned char *)(v14 + v13);
      if (v11 != v8)
      {
LABEL_18:
        if ((a2 & 0x1000000000000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }
    unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a1, a2);
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_19:
      unint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_24;
    }
LABEL_22:
    if (v4 <= v10 >> 16) {
      goto LABEL_49;
    }
    unint64_t v10 = String.UTF8View._foreignIndex(after:)();
LABEL_24:
    if ((v15 - 91) >= 0xE6u)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
      }
      v15 += 32;
    }
    else
    {
      if ((v15 - 123) < 0xE6u && (v15 <= 0x2Fu || v15 >= 0x3Au)) {
        goto LABEL_44;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
      }
    }
    unint64_t v17 = *((void *)v9 + 2);
    unint64_t v16 = *((void *)v9 + 3);
    if (v17 >= v16 >> 1) {
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v17 + 1;
    v9[v17 + 32] = v15;
  }
  while (4 * v4 != v10 >> 14);
  swift_bridgeObjectRelease();
  if (swift_isUniquelyReferenced_nonNull_native()) {
    goto LABEL_37;
  }
LABEL_50:
  unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
LABEL_37:
  unint64_t v19 = *((void *)v9 + 2);
  unint64_t v18 = *((void *)v9 + 3);
  if (v19 >= v18 >> 1) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v9);
  }
  *((void *)v9 + 2) = v19 + 1;
  v9[v19 + 32] = 0;
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = specialized String.init(cString:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v22 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v22 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  char v23 = specialized Sequence.allSatisfy(_:)(a3, a4);
  swift_bridgeObjectRelease();
  if (v23)
  {
    swift_bridgeObjectRetain();
    return v21;
  }
LABEL_45:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for NSDecimal.ParseStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.data(from:delegate:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in closure #1 in NSURLSession.data(from:delegate:));
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t Locale.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  v5._uint64_t countAndFlagsBits = 10272;
  v5._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41;
  v7._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v4;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void **)(*(void *)v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._unint64_t object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0x206465786966;
}

void URLRequest.allHTTPHeaderFields.setter(uint64_t a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    Swift::String v3 = *(void **)(*(void *)v1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v4 = swift_allocObject();
    swift_retain();
    id v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v4 + 16) = v8;
    *(void *)uint64_t v1 = v4;
    swift_release();
  }
  id v6 = *(id *)(*(void *)v1 + 16);
  if (a1)
  {
    swift_bridgeObjectRetain();
    Swift::String v7 = (void *)_NativeDictionary.bridged()();
  }
  else
  {
    Swift::String v7 = 0;
  }
  objc_msgSend(v6, sel_setAllHTTPHeaderFields_, v7);
  swift_bridgeObjectRelease();
}

void sub_181A3E9D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t specialized _NSSwiftProcessInfo.physicalMemory.getter()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  size_t v2 = 8;
  long long v1 = xmmword_1821A05F0;
  if (sysctlbyname((const char *)&v1, v3, &v2, 0, 0)) {
    return 0;
  }
  else {
    return v3[0];
  }
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance JSONDecoderImpl.UnkeyedContainer(uint64_t a1, Swift::Int a2)
{
  return JSONDecoderImpl.UnkeyedContainer.nestedContainer<A>(keyedBy:)(a1, a2);
}

uint64_t JSONDecoderImpl.UnkeyedContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, Swift::Int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for KeyedDecodingContainer();
  id v6 = (void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 24);
  unsigned int v8 = *(unsigned __int8 *)(v2 + 40);
  if (v8 < 0xFE)
  {
    uint64_t v68 = *(void *)(v2 + 32);
    goto LABEL_9;
  }
  unint64_t v9 = (void *)v5;
  unint64_t v10 = *(void *)(v2 + 8);
  uint64_t v11 = JSONMap.loadValue(at:)(v10);
  if (v13 <= 0xFDu)
  {
    uint64_t v7 = v11;
    LOBYTE(v8) = v13;
    uint64_t v22 = v12;
    *(void *)(v2 + 8) = JSONMap.offset(after:)(v10);
    *(void *)(v2 + 24) = v7;
    *(void *)(v2 + 32) = v22;
    uint64_t v68 = v22;
    *(unsigned char *)(v2 + 40) = v8;
LABEL_9:
    unint64_t v9 = *(void **)v2;
    uint64_t v24 = *(void *)(v2 + 64);
    unint64_t v23 = *(void *)(v2 + 72);
    uint64_t v25 = swift_allocObject();
    uint64_t v59 = v24;
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = v23;
    if (v23 >> 62)
    {
      if (v23 >> 62 != 1)
      {
        uint64_t v28 = 1;
        goto LABEL_14;
      }
      uint64_t v26 = (uint64_t *)((v23 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v26 = (uint64_t *)(v23 + 64);
    }
    uint64_t v27 = *v26;
    swift_retain_n();
    uint64_t v28 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
LABEL_14:
    *(void *)(v25 + 32) = v28;
    swift_retain();
    swift_release();
    uint64_t v63 = v9[20];
    v9[20] = v25 | 0x4000000000000000;
    Swift::String v29 = (void *)v9[2];
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    _OWORD v9[2] = v29;
    uint64_t v60 = (void *)a2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      Swift::String v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
      _OWORD v9[2] = v29;
    }
    unint64_t v32 = v29[2];
    unint64_t v31 = v29[3];
    uint64_t v14 = (void *)(v32 + 1);
    if (v32 >= v31 >> 1) {
      Swift::String v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v29);
    }
    void v29[2] = v14;
    uint64_t v33 = (uint64_t)&v29[3 * v32 + 4];
    uint64_t v34 = v68;
    *(void *)uint64_t v33 = v7;
    *(void *)(v33 + 8) = v34;
    *(unsigned char *)(v33 + 16) = v8;
    _OWORD v9[2] = v29;
    uint64_t v35 = v29[2];
    if (!v35)
    {
      __break(1u);
      goto LABEL_49;
    }
    uint64_t v36 = (uint64_t)&v29[3 * v35 + 4];
    a2 = *(void *)(v36 - 24);
    uint64_t v24 = *(void *)(v36 - 16);
    unsigned int v37 = *(unsigned __int8 *)(v36 - 8);
    if (v37 >> 5 != 3)
    {
      BOOL v38 = v37 >> 5 == 5 && (v24 | a2) == 0;
      if (v38 && v37 == 160)
      {
        uint64_t v51 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v3 = v52;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *(void *)uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        unint64_t v53 = v9[20];
        uint64_t v14 = (void *)(v53 & 0x3FFFFFFFFFFFFFFFLL);
        swift_retain();
        swift_retain();
        _CodingPathNode.path.getter(v53);
        swift_release();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v51 - 8) + 104))(v3, *MEMORY[0x1E4FBBA80], v51);
      }
      else
      {
        uint64_t v3 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v14 = v39;
        uint64_t *v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        unint64_t v40 = v9[20];
        swift_retain();
        swift_retain();
        _CodingPathNode.path.getter(v40);
        swift_release();
        _StringGuts.grow(_:)(43);
        swift_bridgeObjectRelease();
        *(void *)&long long v64 = 0xD000000000000035;
        *((void *)&v64 + 1) = 0x80000001823B3300;
        uint64_t v41 = v9[2];
        uint64_t v42 = *(void *)(v41 + 16);
        if (!v42)
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        uint64_t v43 = (void *)0xE800000000000000;
        uint64_t v44 = 0x676E697274732061;
        switch(*(unsigned __int8 *)(v41 + 24 * v42 + 24) >> 5)
        {
          case 1:
            uint64_t v43 = (void *)0xE600000000000000;
            uint64_t v44 = 0x7265626D756ELL;
            break;
          case 2:
            uint64_t v43 = (void *)0xE400000000000000;
            uint64_t v44 = 1819242338;
            break;
          case 3:
            uint64_t v43 = (void *)0xEC0000007972616ELL;
            uint64_t v44 = 0x6F69746369642061;
            break;
          case 4:
            uint64_t v44 = 0x7961727261206E61;
            break;
          case 5:
            uint64_t v43 = (void *)0xE400000000000000;
            uint64_t v44 = 1819047278;
            break;
          default:
            break;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        v56._uint64_t countAndFlagsBits = v44;
        v56._unint64_t object = v43;
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        v57._uint64_t countAndFlagsBits = 0x64616574736E6920;
        v57._unint64_t object = (void *)0xE90000000000002ELL;
        String.append(_:)(v57);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v14, *MEMORY[0x1E4FBBA70], v3);
      }
      swift_willThrow();
      swift_release();
      uint64_t v50 = v63;
LABEL_44:
      v9[20] = v50;
      swift_retain();
      swift_release();
      id v6 = (void *)v9[2];
      if (v6[2])
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v58 = v6[2];
          if (v58)
          {
LABEL_47:
            v6[2] = v58 - 1;
            _OWORD v9[2] = v6;
            swift_release();
            swift_release();
            return swift_release();
          }
          goto LABEL_51;
        }
LABEL_50:
        id v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
        uint64_t v58 = v6[2];
        if (v58) {
          goto LABEL_47;
        }
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
LABEL_29:
    unint64_t v45 = v9[20];
    uint64_t v47 = v9[17];
    *(void *)&long long v64 = v9[16];
    unint64_t v46 = v64;
    *((void *)&v64 + 1) = v47;
    swift_retain_n();
    swift_retain_n();
    outlined copy of JSONEncoder.KeyEncodingStrategy(v64);
    Swift::Int v48 = a2;
    uint64_t v14 = v60;
    uint64_t v49 = static JSONDecoderImpl.KeyedContainer.stringify(objectRegion:using:codingPathNode:keyDecodingStrategy:)(v48, v24, (uint64_t)v9, v45, (unint64_t *)&v64);
    uint64_t v68 = v61;
    if (v61)
    {
      swift_release();
      swift_release_n();
      outlined consume of JSONEncoder.KeyEncodingStrategy(v46);
      swift_release();
      uint64_t v50 = v63;
      goto LABEL_44;
    }
    uint64_t v62 = v49;
    outlined consume of JSONEncoder.KeyEncodingStrategy(v46);
    swift_release();
    *(void *)&long long v64 = v9;
    *((void *)&v64 + 1) = v45;
    uint64_t v65 = v62;
    type metadata accessor for JSONDecoderImpl.KeyedContainer();
    swift_getWitnessTable();
    KeyedDecodingContainer.init<A>(_:)();
    swift_release();
    v9[20] = v63;
    swift_retain();
    swift_release();
    uint64_t v54 = (void *)v9[2];
    if (v54[2])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v55 = v54[2];
        if (v55) {
          goto LABEL_36;
        }
        goto LABEL_56;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v54);
    uint64_t v54 = (void *)result;
    uint64_t v55 = *(void *)(result + 16);
    if (v55)
    {
LABEL_36:
      v54[2] = v55 - 1;
      _OWORD v9[2] = v54;
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      if (!__OFADD__(v59, 1))
      {
        *(void *)(v3 + 64) = v59 + 1;
        *id v6 = 0;
        v6[1] = 0;
        *(unsigned char *)(v3 + 40) = -2;
        return result;
      }
      goto LABEL_57;
    }
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
  uint64_t v14 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + 72));
  uint64_t v3 = *(void *)(v2 + 64);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_53:
  }
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  unint64_t v16 = v14[2];
  unint64_t v15 = v14[3];
  if (v16 >= v15 >> 1) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
  }
  uint64_t v66 = &type metadata for _CodingKey;
  unint64_t v67 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v17 = swift_allocObject();
  *(void *)&long long v64 = v17;
  *(void *)(v17 + 24) = 0;
  *(void *)(v17 + 32) = 0;
  *(void *)(v17 + 16) = v3;
  *(unsigned char *)(v17 + 40) = 2;
  void v14[2] = v16 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v64, (uint64_t)&v14[5 * v16 + 4]);
  uint64_t v18 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v20 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v20 = v9;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
  return swift_willThrow();
}

void sub_181A3F788(void *a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(uint64_t a1, uint64_t a2)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::String a1)
{
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v2, 1);
    uint64_t v7 = *v1;
    goto LABEL_5;
  }
  uint64_t v8 = v1[2];
  v1 += 2;
  uint64_t v7 = v8;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
    uint64_t v7 = *v1;
  }
  unint64_t v3 = *(void *)(v7 + 16);
  unint64_t v6 = *(void *)(v7 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v6 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v7 + 16) = v2;
  uint64_t v10 = v7 + 24 * v3;
  *(void *)(v10 + 32) = countAndFlagsBits;
  *(void *)(v10 + 40) = object;
  *(unsigned char *)(v10 + 48) = 0;
  void *v1 = v7;
}

void *String.init(localized:defaultValue:table:bundle:locale:comment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v10 = *a4;
  uint64_t v12 = *a8;
  uint64_t v11 = a8[1];
  StaticString.description.getter();
  __int16 v28 = 256;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  char v31 = 0;
  v27[0] = MEMORY[0x1E4FBC860];
  memset(&v27[1], 0, 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v25 = v11;
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v10, v27, v12, v11);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a7) {
    id v14 = a7;
  }
  else {
    id v14 = objc_msgSend(self, sel_mainBundle);
  }
  uint64_t v15 = String._bridgeToObjectiveCImpl()();
  id v26 = a7;
  swift_bridgeObjectRelease();
  uint64_t v16 = String._bridgeToObjectiveCImpl()();
  if (a6) {
    uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    uint64_t v17 = 0;
  }
  id v18 = objc_msgSend(v14, sel_localizedStringForKey_value_table_localizations_, v15, v16, v17, 0, a5);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  unint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  if (*(void *)(v13 + 16))
  {
    swift_unknownObjectRetain();
    uint64_t v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v13, v12, v25);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v19 = specialized withVaList<A>(_:_:)(v22, (uint64_t)v19, v21, v12, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return v19;
}

id URLRequest.timeoutInterval.setter(double a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unint64_t v3 = *(void **)(*(void *)v1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v4 = swift_allocObject();
    swift_retain();
    id v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v4 + 16) = v7;
    *(void *)uint64_t v1 = v4;
    swift_release();
  }
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_setTimeoutInterval_, a1);
}

void type metadata completion function for CurrencyFormatStyleConfiguration.Collection()
{
  type metadata accessor for FloatingPointRoundingRule?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata completion function for NumberFormatStyleConfiguration.Collection()
{
  type metadata accessor for FloatingPointRoundingRule?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for FloatingPointRoundingRule?()
{
  if (!lazy cache variable for type metadata for FloatingPointRoundingRule?)
  {
    type metadata accessor for FloatingPointRoundingRule();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FloatingPointRoundingRule?);
    }
  }
}

uint64_t instantiation function for generic protocol witness table for Date.AttributedStyle(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

uint64_t Notification.Subscription.__deallocating_deinit()
{
  MEMORY[0x185309510](*(void *)(v0 + 16), -1, -1);
  MEMORY[0x185309510](*(void *)(v0 + 24), -1, -1);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t URL.withUnsafeFileSystemRepresentation<A>(_:)@<X0>(uint64_t (*a1)(id)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10 = *(void **)v4;
  uint64_t v11 = *(void *)(v4 + 16);
  if (!_foundation_swift_url_feature_enabled()) {
    return a1(objc_msgSend(v10, sel_fileSystemRepresentation));
  }
  uint64_t v36 = a3;
  unsigned int v37 = a2;
  uint64_t v41 = v11;
  swift_retain();
  id v35 = v10;
  swift_retain();
  Swift::String v12 = URL.path(percentEncoded:)(1);
  uint64_t countAndFlagsBits = v12._countAndFlagsBits;
  Swift::String v40 = v12;
  swift_bridgeObjectRetain();
  uint64_t v33 = a1;
  uint64_t v34 = a4;
  if (String.count.getter() < 2)
  {
    unint64_t object = (unint64_t)v12._object;
  }
  else
  {
    unint64_t object = (unint64_t)v12._object;
    if ((specialized BidirectionalCollection.last.getter(v12._countAndFlagsBits, (unint64_t)v12._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v40._countAndFlagsBits;
      unint64_t object = (unint64_t)v40._object;
    }
  }
  uint64_t v38 = Set.init(minimumCapacity:)();
  uint64_t v16 = specialized Set._Variant.insert(_:)(&v42, 0x2FuLL);
  uint64_t v17 = v38;
  uint64_t v18 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0) {
    uint64_t v18 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    uint64_t v38 = countAndFlagsBits;
    unint64_t v39 = object;
    MEMORY[0x1F4188790](v16);
    uint64_t v30 = &v38;
    uint64_t v31 = v17;
    swift_bridgeObjectRetain();
    unint64_t v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v29, countAndFlagsBits, object);
    uint64_t v32 = v5;
    if (v20 == 1)
    {
      Swift::Int v21 = v38;
      unint64_t v22 = v39;
      swift_bridgeObjectRetain();
      unint64_t v23 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v21, v22, v17);
      unint64_t v25 = v24;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v23 = (void (*)(char *, void))v19;
      unint64_t v25 = v20;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = v33;
    uint64_t v26 = v34;
    if (!v25)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      uint64_t v28 = swift_bridgeObjectRelease();
      unint64_t v23 = 0;
      unint64_t v25 = 0xE000000000000000;
      goto LABEL_17;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v23 = 0;
    unint64_t v25 = 0xE000000000000000;
    uint64_t v27 = v33;
    uint64_t v26 = v34;
  }
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v28 = swift_bridgeObjectRelease();
LABEL_17:
  MEMORY[0x1F4188790](v28);
  v29[0] = v36;
  v29[1] = v27;
  uint64_t v30 = v37;
  String.withFileSystemRepresentation<A>(_:)((void (*)(char *))partial apply for closure #1 in URL.withUnsafeFileSystemRepresentation<A>(_:), (uint64_t)v23, v25, v36, v26);
  return swift_bridgeObjectRelease();
}

double protocol witness for static SchedulerTimeIntervalConvertible.milliseconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000.0;
  *a2 = result;
  return result;
}

uint64_t base witness table accessor for Equatable in MeasurementFormatUnitUsage<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Percent()
{
  return swift_getWitnessTable();
}

uint64_t URLResourceValues.fileResourceIdentifier.getter(id *a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    id v3 = *a1;
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v5)
    {
      outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v7);
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCopying & NSSecureCoding & NSObject);
  if (swift_dynamicCast()) {
    return v9;
  }
  else {
    return 0;
  }
}

void sub_181A40F4C(_Unwind_Exception *a1)
{
}

void sub_181A410A0(_Unwind_Exception *a1)
{
}

void sub_181A410CC(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x181A41058);
  }
  JUMPOUT(0x181A410C0);
}

void Data.write(to:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((~(_BYTE)a2 & 3) != 0)
  {
    uint64_t v6 = v4;
    unint64_t v37 = a4;
    uint64_t v9 = *(void **)a1;
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    swift_retain();
    id v11 = v9;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      id v34 = v11;
      uint64_t v35 = v8;
      uint64_t v36 = v10;
      URL.scheme.getter();
      if (v12)
      {
        uint64_t v33 = v6;
        Swift::String v13 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v13._countAndFlagsBits == 1701603686 && v13._object == (void *)0xE400000000000000)
        {
          swift_release();
          swift_release();

          uint64_t v14 = swift_bridgeObjectRelease();
LABEL_11:
          MEMORY[0x1F4188790](v14);
          v28[2] = v11;
          _OWORD v28[3] = v8;
          v28[4] = v10;
          char v29 = 1;
          uint64_t v30 = a2;
          uint64_t v31 = MEMORY[0x1E4FBC868];
          LOBYTE(v32) = 1;
          id v17 = v11;
          swift_retain();
          swift_retain();
          specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:), (uint64_t)v28, a3, v37);
          swift_release();
          swift_release();

          return;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        uint64_t v14 = swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_11;
        }
      }
      else
      {
        swift_release();
        swift_release();
      }
    }
    else
    {
      unsigned __int8 v15 = objc_msgSend(v11, sel_isFileURL);
      swift_release();
      swift_release();

      if (v15) {
        goto LABEL_11;
      }
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v18 = objc_allocWithZone((Class)NSError);
    uint64_t v19 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, 518, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v21 = objc_msgSend(v20, sel_domain);
    id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    if (v22 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v24 != v25)
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v27)
      {
LABEL_19:
        swift_willThrow();
        return;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t __PlistEncoderBPlist.wrap<A>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v97 = a5;
  uint64_t v115 = a3;
  unint64_t v103 = a2;
  uint64_t v99 = a1;
  char v105 = *(long long **)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v95 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Optional();
  unint64_t v104 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  Swift::String v13 = (char *)&v91 - v12;
  uint64_t v102 = v5;
  unint64_t v92 = *(void *)(*(void *)(v5 + 16) + 16);
  uint64_t v14 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v96 = type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 24) = v16;
  uint64_t v98 = (void *)(v19 + 24);
  *(void *)(v19 + 16) = v14;
  uint64_t v20 = a4;
  *(void *)(v19 + 32) = v18;
  uint64_t v21 = v8;
  unint64_t v22 = v104;
  uint64_t v23 = v105;
  *(unsigned char *)(v19 + 40) = 96;
  *(void *)(v19 + 48) = -1;
  swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  uint64_t v24 = v19;
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t v93 = v5 + 16;
  specialized ContiguousArray._endMutation()();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v25(v13, v115, v21);
  v25(v10, (uint64_t)v13, v21);
  int v26 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v23 + 6))(v10, 1, v20);
  uint64_t v101 = v24;
  if (v26 == 1)
  {
    char v27 = *(void (**)(char *, uint64_t))(v22 + 8);
    v27(v13, v21);
    v27(v10, v21);
    uint64_t v28 = (uint64_t *)v103;
    swift_retain();
    goto LABEL_9;
  }
  char v29 = (void (*)(char *, char *, uint64_t))*((void *)v23 + 4);
  uint64_t v30 = v95;
  v29(v95, v10, v20);
  uint64_t v31 = (uint64_t *)swift_allocObject();
  uint64_t v32 = v97;
  v31[5] = v20;
  v31[6] = v32;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31 + 2);
  v29((char *)boxed_opaque_existential_1, v30, v20);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v21);
  unint64_t v34 = v103;
  v31[7] = v103;
  if (!(v34 >> 62))
  {
    uint64_t v35 = (uint64_t *)(v34 + 64);
LABEL_7:
    uint64_t v36 = *v35;
    swift_retain();
    uint64_t v37 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    goto LABEL_8;
  }
  if (v34 >> 62 == 1)
  {
    uint64_t v35 = (uint64_t *)((v34 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_7;
  }
  uint64_t v37 = 1;
LABEL_8:
  v31[8] = v37;
  uint64_t v28 = v31;
LABEL_9:
  uint64_t v38 = swift_bridgeObjectRetain();
  unint64_t v39 = specialized _copyCollectionToContiguousArray<A>(_:)(v38);
  swift_bridgeObjectRelease();
  char v112 = v39;
  Swift::String v40 = v100;
  specialized MutableCollection<>.sort(by:)(&v112);
  char v105 = v40;
  if (!v40)
  {
    unint64_t v41 = 0;
    uint64_t v42 = v112[2];
    uint64_t v95 = (char *)v112;
    long long v94 = v112 + 4;
    char v100 = (long long *)&v114;
    uint64_t v99 = v102 + 80;
    unint64_t v103 = (unint64_t)v28;
    uint64_t v97 = v42;
    if (!v42) {
      goto LABEL_11;
    }
    while (1)
    {
      if ((v41 & 0x8000000000000000) != 0) {
        goto LABEL_67;
      }
      if (v41 >= *((void *)v95 + 2)) {
        goto LABEL_68;
      }
      outlined init with copy of (key: String, value: Encodable)((uint64_t)&v94[7 * v41], (uint64_t)&v108);
      unint64_t v43 = v41 + 1;
      while (2)
      {
        outlined init with take of (key: String, value: Encodable)?((uint64_t)&v108, (uint64_t)&v112);
        unint64_t v44 = v113;
        if (!v113)
        {
          swift_release();
          uint64_t v86 = v93;
          if (v92 >= *(void *)(*(void *)v93 + 16))
          {
            swift_release();
            swift_release();
            return 0;
          }
          else
          {
            uint64_t v87 = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
            if (!v87) {
              uint64_t v87 = specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v86 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
            }
            uint64_t v88 = v87;
            swift_release();
            swift_release();
          }
          return v88;
        }
        unint64_t v104 = v43;
        unint64_t v45 = (unint64_t)v112;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v100, (uint64_t)&v108);
        if ((v44 & 0x2000000000000000) != 0) {
          unint64_t v46 = HIBYTE(v44) & 0xF;
        }
        else {
          unint64_t v46 = v45 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v47 = (v45 >> 59) & 1;
        if ((v44 & 0x1000000000000000) == 0) {
          LOBYTE(v47) = 1;
        }
        uint64_t v48 = 4 << v47;
        uint64_t v115 = v44 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v49 = 15;
        do
        {
          while (1)
          {
            if (4 * v46 == v49 >> 14)
            {
              swift_bridgeObjectRetain();
              id v55 = (id)String.hashValue.getter();
              unsigned __int8 v56 = 1;
              goto LABEL_43;
            }
            unint64_t v50 = v49 & 0xC;
            unint64_t v51 = v49;
            if (v50 == v48) {
              unint64_t v51 = _StringGuts._slowEnsureMatchingEncoding(_:)(v49, v45, v44);
            }
            unint64_t v52 = v51 >> 16;
            if (v51 >> 16 >= v46) {
              goto LABEL_65;
            }
            if ((v44 & 0x1000000000000000) == 0) {
              break;
            }
            char v54 = String.UTF8View._foreignSubscript(position:)();
            if (v50 == v48) {
              goto LABEL_39;
            }
LABEL_34:
            if ((v44 & 0x1000000000000000) != 0) {
              goto LABEL_35;
            }
LABEL_22:
            unint64_t v49 = (v49 & 0xFFFFFFFFFFFF0000) + 65540;
            if (v54 < 0) {
              goto LABEL_42;
            }
          }
          if ((v44 & 0x2000000000000000) != 0)
          {
            unint64_t v106 = v45;
            *(void *)&long long v107 = v115;
            char v54 = *((unsigned char *)&v106 + v52);
            if (v50 == v48) {
              goto LABEL_39;
            }
            goto LABEL_34;
          }
          uint64_t v53 = (v44 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v45 & 0x1000000000000000) == 0) {
            uint64_t v53 = _StringObject.sharedUTF8.getter();
          }
          char v54 = *(unsigned char *)(v53 + v52);
          if (v50 != v48) {
            goto LABEL_34;
          }
LABEL_39:
          unint64_t v49 = _StringGuts._slowEnsureMatchingEncoding(_:)(v49, v45, v44);
          if ((v44 & 0x1000000000000000) == 0) {
            goto LABEL_22;
          }
LABEL_35:
          if (v46 <= v49 >> 16) {
            goto LABEL_66;
          }
          unint64_t v49 = String.UTF8View._foreignIndex(after:)();
        }
        while ((v54 & 0x80) == 0);
LABEL_42:
        Swift::String v57 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRetain();
        id v55 = objc_msgSend(v57, sel_hash);
        swift_unknownObjectRelease();
        unsigned __int8 v56 = 0;
LABEL_43:
        uint64_t v58 = v102;
        uint64_t v59 = *(void *)(v102 + 88);
        uint64_t v60 = *(void *)(v59 + 16);
        unint64_t v61 = *(void *)(v59 + 24);
        uint64_t v62 = *(void *)(v59 + 32);
        *(void *)(v59 + 16) = v45;
        *(void *)(v59 + 24) = v44;
        *(void *)(v59 + 32) = v55;
        unsigned __int8 v63 = *(unsigned char *)(v59 + 40);
        *(unsigned char *)(v59 + 40) = v56;
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v45, v44, (uint64_t)v55, v56);
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v60, v61, v62, v63);
        swift_retain();
        char v64 = specialized Set._Variant.insert(_:)((uint64_t *)&v106, v59);
        uint64_t v65 = v106;
        if (v64)
        {
          uint64_t v66 = swift_allocObject();
          *(void *)(v66 + 24) = 0;
          *(void *)(v66 + 32) = 0;
          *(void *)(v66 + 16) = 2;
          *(unsigned char *)(v66 + 40) = -112;
          *(void *)(v66 + 48) = -1;
          swift_bridgeObjectRelease();
          swift_release();
          *(void *)(v58 + 88) = v66;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        unint64_t v67 = v103;
        uint64_t v68 = v101;
        uint64_t v70 = *((void *)&v109 + 1);
        uint64_t v69 = v110;
        int v71 = __swift_project_boxed_opaque_existential_1(&v108, *((uint64_t *)&v109 + 1));
        id v72 = v105;
        uint64_t v73 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)((uint64_t)v71, v67, v45, v44, 0, 0, v70, v69);
        char v105 = v72;
        if (v72)
        {
          swift_bridgeObjectRelease();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v108);
          swift_release();
          uint64_t v89 = v93;
          uint64_t v88 = (uint64_t)v105;
          if (v92 < *(void *)(*(void *)v93 + 16))
          {
            if (!specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew())) {
              specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v89 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
            }
            swift_release();
          }
          swift_willThrow();
          swift_release();
          swift_release();
          return v88;
        }
        if (!v73)
        {
          uint64_t v74 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
          uint64_t v76 = v75;
          uint64_t v78 = v77;
          uint64_t v79 = swift_allocObject();
          *(void *)(v79 + 16) = v74;
          *(void *)(v79 + 24) = v76;
          *(void *)(v79 + 32) = v78;
          *(unsigned char *)(v79 + 40) = 96;
          *(void *)(v79 + 48) = -1;
        }
        swift_bridgeObjectRelease();
        if ((*(unsigned char *)(v68 + 40) & 0xF0) != 0x60) {
          goto LABEL_69;
        }
        unint64_t v106 = *(void *)(v68 + 16);
        long long v107 = *(_OWORD *)(v68 + 24);
        *(void *)(v68 + 16) = 2;
        char v80 = v98;
        *uint64_t v98 = 0;
        v80[1] = 0;
        *(unsigned char *)(v68 + 40) = -112;
        swift_retain();
        uint64_t v81 = swift_retain();
        specialized OrderedDictionary.subscript.setter(v81, v65);
        uint64_t v82 = *(void *)(v68 + 16);
        unint64_t v83 = *(void *)(v68 + 24);
        uint64_t v84 = *(void *)(v68 + 32);
        *(void *)(v68 + 16) = v106;
        *(_OWORD *)(v68 + 24) = v107;
        unsigned __int8 v85 = *(unsigned char *)(v68 + 40);
        *(unsigned char *)(v68 + 40) = 96;
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v82, v83, v84, v85);
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v108);
        uint64_t v42 = v97;
        unint64_t v41 = v104;
        if (v104 == v97)
        {
LABEL_11:
          uint64_t v111 = 0;
          long long v109 = 0u;
          long long v110 = 0u;
          unint64_t v43 = v42;
          long long v108 = 0u;
          continue;
        }
        break;
      }
    }
  }
LABEL_70:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  void *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  void *v2;
  uint64_t v3;
  Swift::Int result;
  void v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v2 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v2);
  if (result >= v2)
  {
    if (v2 < 0) {
      goto LABEL_149;
    }
    if (v2) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
    return result;
  }
  if (v2 >= 0) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v2 + 1;
  }
  if (v2 < -1) {
    goto LABEL_157;
  }
  Swift::Int v105 = result;
  uint64_t v112 = v1;
  if (v2 < 2)
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    __unint64_t dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v2 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v10 = a1;
LABEL_115:
      uint64_t v95 = v9;
      uint64_t v104 = v7;
      if (v11 >= 2)
      {
        uint64_t v96 = *v10;
        do
        {
          unint64_t v97 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_144;
          }
          if (!v96) {
            goto LABEL_156;
          }
          uint64_t v98 = v95;
          uint64_t v99 = *(void *)&v95[16 * v97 + 32];
          uint64_t v100 = *(void *)&v95[16 * v11 + 24];
          uint64_t v101 = v112;
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v96 + 56 * v99), (char *)(v96 + 56 * *(void *)&v95[16 * v11 + 16]), v96 + 56 * v100, __dst);
          uint64_t v112 = v101;
          if (v101) {
            break;
          }
          if (v100 < v99) {
            goto LABEL_145;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          }
          if (v97 >= *((void *)v98 + 2)) {
            goto LABEL_146;
          }
          uint64_t v102 = &v98[16 * v97 + 32];
          *(void *)uint64_t v102 = v99;
          *((void *)v102 + 1) = v100;
          unint64_t v103 = *((void *)v98 + 2);
          if (v11 > v103) {
            goto LABEL_147;
          }
          memmove(&v98[16 * v11 + 16], &v98[16 * v11 + 32], 16 * (v103 - v11));
          uint64_t v95 = v98;
          *((void *)v98 + 2) = v103 - 1;
          unint64_t v11 = v103 - 1;
        }
        while (v103 > 2);
      }
LABEL_112:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v5 = v4 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
    uint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v6 + 16) = v5;
    uint64_t v104 = v6;
    __unint64_t dst = (char *)(v6 + 32);
  }
  Swift::Int v8 = 0;
  uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v10 = a1;
  while (1)
  {
    Swift::Int v12 = v8++;
    if (v8 < v2)
    {
      uint64_t v13 = *v10;
      outlined init with copy of (key: String, value: Encodable)(*v10 + 56 * v8, (uint64_t)&v110);
      outlined init with copy of (key: String, value: Encodable)(v13 + 56 * v12, (uint64_t)&v108);
      if (v110 == v108 && v111 == v109) {
        int v15 = 0;
      }
      else {
        int v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
      Swift::Int v8 = v12 + 2;
      if (v12 + 2 < v2)
      {
        uint64_t v16 = v13;
        uint64_t v17 = v13 + 56 * v12 + 56;
        while (1)
        {
          outlined init with copy of (key: String, value: Encodable)(v17 + 56, (uint64_t)&v110);
          outlined init with copy of (key: String, value: Encodable)(v17, (uint64_t)&v108);
          BOOL v18 = v110 == v108 && v111 == v109;
          int v19 = v18 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
          if ((v15 ^ v19)) {
            break;
          }
          ++v8;
          v17 += 56;
          if (v2 == v8)
          {
            Swift::Int v8 = v2;
            break;
          }
        }
        uint64_t v13 = v16;
      }
      if (v15)
      {
        if (v8 < v12) {
          goto LABEL_150;
        }
        if (v12 < v8)
        {
          uint64_t v20 = v13 + 56 * v8 - 56;
          uint64_t v21 = (long long *)(v13 + 56 * v12);
          Swift::Int v22 = v8;
          Swift::Int v23 = v12;
          do
          {
            if (v23 != --v22)
            {
              if (!v13) {
                goto LABEL_155;
              }
              uint64_t v24 = *((void *)v21 + 6);
              long long v26 = v21[1];
              long long v25 = v21[2];
              long long v27 = *v21;
              long long v29 = *(_OWORD *)(v20 + 16);
              long long v28 = *(_OWORD *)(v20 + 32);
              long long v30 = *(_OWORD *)v20;
              *((void *)v21 + 6) = *(void *)(v20 + 48);
              v21[1] = v29;
              void v21[2] = v28;
              *uint64_t v21 = v30;
              *(_OWORD *)uint64_t v20 = v27;
              *(_OWORD *)(v20 + 16) = v26;
              *(_OWORD *)(v20 + 32) = v25;
              *(void *)(v20 + 48) = v24;
            }
            ++v23;
            v20 -= 56;
            uint64_t v21 = (long long *)((char *)v21 + 56);
          }
          while (v23 < v22);
        }
      }
    }
    if (v8 >= v2) {
      goto LABEL_64;
    }
    if (__OFSUB__(v8, v12)) {
      goto LABEL_148;
    }
    if (v8 - v12 >= v105) {
      goto LABEL_64;
    }
    if (__OFADD__(v12, v105)) {
      goto LABEL_151;
    }
    if (v12 + v105 < v2) {
      Swift::Int v2 = v12 + v105;
    }
    if (v2 < v12) {
      break;
    }
    if (v8 != v2)
    {
      uint64_t v31 = 56 * v8;
      do
      {
        Swift::Int v32 = v12;
        uint64_t v33 = v31;
        while (1)
        {
          uint64_t v34 = *v10 + v33;
          outlined init with copy of (key: String, value: Encodable)(v34, (uint64_t)&v110);
          outlined init with copy of (key: String, value: Encodable)(v34 - 56, (uint64_t)&v108);
          if (v110 == v108 && v111 == v109) {
            break;
          }
          char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
          if ((v36 & 1) == 0) {
            goto LABEL_53;
          }
          if (!*v10) {
            goto LABEL_153;
          }
          uint64_t v37 = *v10 + v33;
          uint64_t v38 = *(void *)(v37 + 48);
          long long v40 = *(_OWORD *)(v37 + 16);
          long long v39 = *(_OWORD *)(v37 + 32);
          long long v41 = *(_OWORD *)v37;
          long long v42 = *(_OWORD *)(v37 - 40);
          *(_OWORD *)uint64_t v37 = *(_OWORD *)(v37 - 56);
          *(_OWORD *)(v37 + 16) = v42;
          *(_OWORD *)(v37 + 32) = *(_OWORD *)(v37 - 24);
          *(void *)(v37 + 48) = *(void *)(v37 - 8);
          *(_OWORD *)(v37 - 56) = v41;
          *(_OWORD *)(v37 - 40) = v40;
          *(_OWORD *)(v37 - 24) = v39;
          v33 -= 56;
          ++v32;
          *(void *)(v37 - 8) = v38;
          if (v8 == v32) {
            goto LABEL_53;
          }
        }
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
LABEL_53:
        ++v8;
        v31 += 56;
      }
      while (v8 != v2);
      Swift::Int v8 = v2;
    }
LABEL_64:
    if (v8 < v12) {
      goto LABEL_143;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v44 = *((void *)v9 + 2);
    unint64_t v43 = *((void *)v9 + 3);
    unint64_t v11 = v44 + 1;
    if (v44 >= v43 >> 1) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v11;
    unint64_t v45 = v9 + 32;
    unint64_t v46 = &v9[16 * v44 + 32];
    *(void *)unint64_t v46 = v12;
    *((void *)v46 + 1) = v8;
    if (v44)
    {
      uint64_t v10 = a1;
      while (1)
      {
        unint64_t v47 = v11 - 1;
        if (v11 >= 4)
        {
          unint64_t v52 = &v45[16 * v11];
          uint64_t v53 = *((void *)v52 - 8);
          uint64_t v54 = *((void *)v52 - 7);
          BOOL v58 = __OFSUB__(v54, v53);
          uint64_t v55 = v54 - v53;
          if (v58) {
            goto LABEL_132;
          }
          uint64_t v57 = *((void *)v52 - 6);
          uint64_t v56 = *((void *)v52 - 5);
          BOOL v58 = __OFSUB__(v56, v57);
          uint64_t v50 = v56 - v57;
          char v51 = v58;
          if (v58) {
            goto LABEL_133;
          }
          unint64_t v59 = v11 - 2;
          uint64_t v60 = &v45[16 * v11 - 32];
          uint64_t v62 = *(void *)v60;
          uint64_t v61 = *((void *)v60 + 1);
          BOOL v58 = __OFSUB__(v61, v62);
          uint64_t v63 = v61 - v62;
          if (v58) {
            goto LABEL_135;
          }
          BOOL v58 = __OFADD__(v50, v63);
          uint64_t v64 = v50 + v63;
          if (v58) {
            goto LABEL_138;
          }
          if (v64 >= v55)
          {
            uint64_t v82 = &v45[16 * v47];
            uint64_t v84 = *(void *)v82;
            uint64_t v83 = *((void *)v82 + 1);
            BOOL v58 = __OFSUB__(v83, v84);
            uint64_t v85 = v83 - v84;
            if (v58) {
              goto LABEL_142;
            }
            BOOL v75 = v50 < v85;
            goto LABEL_102;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v76 = *((void *)v9 + 4);
            uint64_t v77 = *((void *)v9 + 5);
            BOOL v58 = __OFSUB__(v77, v76);
            uint64_t v69 = v77 - v76;
            char v70 = v58;
            goto LABEL_96;
          }
          uint64_t v49 = *((void *)v9 + 4);
          uint64_t v48 = *((void *)v9 + 5);
          BOOL v58 = __OFSUB__(v48, v49);
          uint64_t v50 = v48 - v49;
          char v51 = v58;
        }
        if (v51) {
          goto LABEL_134;
        }
        unint64_t v59 = v11 - 2;
        uint64_t v65 = &v45[16 * v11 - 32];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        BOOL v68 = __OFSUB__(v66, v67);
        uint64_t v69 = v66 - v67;
        char v70 = v68;
        if (v68) {
          goto LABEL_137;
        }
        int v71 = &v45[16 * v47];
        uint64_t v73 = *(void *)v71;
        uint64_t v72 = *((void *)v71 + 1);
        BOOL v58 = __OFSUB__(v72, v73);
        uint64_t v74 = v72 - v73;
        if (v58) {
          goto LABEL_140;
        }
        if (__OFADD__(v69, v74)) {
          goto LABEL_141;
        }
        if (v69 + v74 >= v50)
        {
          BOOL v75 = v50 < v74;
LABEL_102:
          if (v75) {
            unint64_t v47 = v59;
          }
          goto LABEL_104;
        }
LABEL_96:
        if (v70) {
          goto LABEL_136;
        }
        uint64_t v78 = &v45[16 * v47];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        BOOL v58 = __OFSUB__(v79, v80);
        uint64_t v81 = v79 - v80;
        if (v58) {
          goto LABEL_139;
        }
        if (v81 < v69) {
          goto LABEL_15;
        }
LABEL_104:
        unint64_t v86 = v47 - 1;
        if (v47 - 1 >= v11)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        uint64_t v87 = *v10;
        if (!*v10) {
          goto LABEL_154;
        }
        uint64_t v88 = v9;
        uint64_t v89 = &v45[16 * v86];
        uint64_t v90 = *(void *)v89;
        uint64_t v91 = &v45[16 * v47];
        uint64_t v92 = *((void *)v91 + 1);
        uint64_t v93 = v112;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v87 + 56 * *(void *)v89), (char *)(v87 + 56 * *(void *)v91), v87 + 56 * v92, __dst);
        uint64_t v112 = v93;
        if (v93) {
          goto LABEL_112;
        }
        if (v92 < v90) {
          goto LABEL_129;
        }
        if (v47 > *((void *)v88 + 2)) {
          goto LABEL_130;
        }
        *(void *)uint64_t v89 = v90;
        *(void *)&v45[16 * v86 + 8] = v92;
        unint64_t v94 = *((void *)v88 + 2);
        if (v47 >= v94) {
          goto LABEL_131;
        }
        uint64_t v9 = v88;
        unint64_t v11 = v94 - 1;
        memmove(&v45[16 * v47], v91 + 16, 16 * (v94 - 1 - v47));
        *((void *)v88 + 2) = v94 - 1;
        BOOL v75 = v94 > 2;
        uint64_t v10 = a1;
        if (!v75) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
    uint64_t v10 = a1;
LABEL_15:
    Swift::Int v2 = v10[1];
    if (v8 >= v2)
    {
      uint64_t v7 = v104;
      goto LABEL_115;
    }
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v19;
  Swift::Int v20;
  void *v21;
  Swift::Int v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  void *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  Swift::Int v107;
  char *__dst;

  uint64_t v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    Swift::Int v8 = MEMORY[0x1E4FBC860];
    __unint64_t dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      Swift::Int v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_118:
      unint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          uint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          unint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          uint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          unint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          Swift::Int v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __unint64_t dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  unint64_t v103 = v10 + 8;
  unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v106 = v3;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    int v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      Swift::Int v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }
    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        long long v25 = 16 * v20;
        long long v26 = 16 * v13;
        long long v27 = v20;
        long long v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            long long v29 = v10 + v25;
            long long v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      uint64_t v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    long long v41 = *((void *)v11 + 2);
    long long v40 = *((void *)v11 + 3);
    Swift::Int v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    long long v42 = v11 + 32;
    unint64_t v43 = &v11[16 * v41 + 32];
    *(void *)unint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      long long v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          char v51 = *((void *)v49 - 7);
          uint64_t v55 = __OFSUB__(v51, v50);
          unint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          uint64_t v55 = __OFSUB__(v53, v54);
          unint64_t v47 = v53 - v54;
          uint64_t v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          uint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          unint64_t v59 = *(void *)v57;
          BOOL v58 = *((void *)v57 + 1);
          uint64_t v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          uint64_t v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            uint64_t v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            uint64_t v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            uint64_t v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            uint64_t v67 = v55;
            goto LABEL_99;
          }
          unint64_t v46 = *((void *)v11 + 4);
          unint64_t v45 = *((void *)v11 + 5);
          uint64_t v55 = __OFSUB__(v45, v46);
          unint64_t v47 = v45 - v46;
          uint64_t v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        uint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        uint64_t v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        uint64_t v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        BOOL v68 = &v42[16 * v44];
        char v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        uint64_t v55 = __OFSUB__(v69, v70);
        int v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          uint64_t v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        BOOL v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        uint64_t v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        uint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        unint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        uint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)unint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        uint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        unint64_t v11 = v85;
        Swift::Int v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        long long v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        uint64_t v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    Swift::Int v12 = 1;
LABEL_15:
    uint64_t v3 = v106;
    if (v9 >= v106)
    {
      Swift::Int v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        char v36 = v34[1];
        uint64_t v37 = v13;
        uint64_t v38 = v33;
        do
        {
          long long v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          char v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      uint64_t v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  Swift::Int v18;
  unsigned char *v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  Swift::Int v26;
  _OWORD *v27;
  char v28;
  uint64_t v29;
  char v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  Swift::Int v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  _OWORD *v39;
  BOOL v40;
  long long v41;
  long long v42;
  long long v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  uint64_t v110;
  char *__dst;

  uint64_t v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_159;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_168;
  }
  uint64_t v108 = result;
  Swift::Int v105 = a1;
  if (v3 < 2)
  {
    Swift::Int v8 = MEMORY[0x1E4FBC860];
    __unint64_t dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      Swift::Int v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_125:
      uint64_t v96 = v11;
      long long v107 = v8;
      if (v12 >= 2)
      {
        unint64_t v97 = *v105;
        do
        {
          uint64_t v98 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_154;
          }
          if (!v97) {
            goto LABEL_166;
          }
          uint64_t v99 = v96;
          uint64_t v100 = *(void *)&v96[16 * v98 + 32];
          uint64_t v101 = *(void *)&v96[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v97 + 48 * v100), (char *)(v97 + 48 * *(void *)&v96[16 * v12 + 16]), v97 + 48 * v101, __dst);
          if (v1) {
            break;
          }
          if (v101 < v100) {
            goto LABEL_155;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v99);
          }
          if (v98 >= *((void *)v99 + 2)) {
            goto LABEL_156;
          }
          uint64_t v102 = &v99[16 * v98 + 32];
          *(void *)uint64_t v102 = v100;
          *((void *)v102 + 1) = v101;
          unint64_t v103 = *((void *)v99 + 2);
          if (v12 > v103) {
            goto LABEL_157;
          }
          memmove(&v99[16 * v12 + 16], &v99[16 * v12 + 32], 16 * (v103 - v12));
          uint64_t v96 = v99;
          *((void *)v99 + 2) = v103 - 1;
          Swift::Int v12 = v103 - 1;
        }
        while (v103 > 2);
      }
LABEL_122:
      swift_bridgeObjectRelease();
      *(void *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    long long v107 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference));
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    long long v107 = v7;
    __unint64_t dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  unint64_t v106 = *a1 + 16;
  uint64_t v104 = *a1 - 48;
  unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v109 = v3;
  uint64_t v110 = *a1;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_51;
    }
    uint64_t v14 = v10 + 48 * v9;
    if (*(unsigned char *)(v14 + 16)) {
      goto LABEL_167;
    }
    int v15 = v10 + 48 * v13;
    if (*(unsigned char *)(v15 + 16)) {
      goto LABEL_167;
    }
    if (*(void *)v14 == *(void *)v15 && *(void *)(v14 + 8) == *(void *)(v15 + 8))
    {
      BOOL v18 = v13 + 2;
      if (v13 + 2 >= v3)
      {
        uint64_t v9 = v13 + 2;
        goto LABEL_51;
      }
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v18 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_41;
      }
    }
    int v19 = (unsigned char *)(v106 + 48 * v18);
    do
    {
      if (*v19) {
        goto LABEL_167;
      }
      uint64_t v21 = v10 + 48 * v9;
      if (*(unsigned char *)(v21 + 16)) {
        goto LABEL_167;
      }
      if (*((void *)v19 - 2) == *(void *)v21 && *((void *)v19 - 1) == *(void *)(v21 + 8))
      {
        if (v17) {
          goto LABEL_42;
        }
      }
      else if ((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_41;
      }
      v19 += 48;
      uint64_t v20 = v18 + 1;
      uint64_t v9 = v18;
      BOOL v18 = v20;
    }
    while (v20 < v3);
    BOOL v18 = v20;
LABEL_41:
    uint64_t v9 = v18;
    if (v17)
    {
LABEL_42:
      if (v18 < v13) {
        goto LABEL_162;
      }
      if (v13 < v18)
      {
        Swift::Int v23 = 48 * v18;
        uint64_t v24 = 48 * v13;
        long long v25 = v18;
        long long v26 = v13;
        do
        {
          if (v26 != --v25)
          {
            if (!v10) {
              goto LABEL_165;
            }
            long long v27 = (_OWORD *)(v10 + v24);
            long long v28 = *(unsigned char *)(v10 + v24 + 16);
            long long v29 = v10 + v23;
            long long v30 = *(unsigned char *)(v10 + v24 + 40);
            uint64_t v31 = *(_OWORD *)(v10 + v24);
            Swift::Int v32 = *(_OWORD *)(v10 + v24 + 24);
            uint64_t v34 = *(_OWORD *)(v10 + v23 - 32);
            uint64_t v33 = *(_OWORD *)(v10 + v23 - 16);
            *long long v27 = *(_OWORD *)(v10 + v23 - 48);
            v27[1] = v34;
            void v27[2] = v33;
            *(_OWORD *)(v29 - 48) = v31;
            *(unsigned char *)(v29 - 32) = v28;
            *(_OWORD *)(v29 - 24) = v32;
            *(unsigned char *)(v29 - 8) = v30;
          }
          ++v26;
          v23 -= 48;
          v24 += 48;
        }
        while (v26 < v25);
      }
      uint64_t v9 = v18;
    }
LABEL_51:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_158;
      }
      if (v9 - v13 < v108) {
        break;
      }
    }
LABEL_74:
    if (v9 < v13) {
      goto LABEL_153;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v46 = *((void *)v11 + 2);
    unint64_t v45 = *((void *)v11 + 3);
    Swift::Int v12 = v46 + 1;
    if (v46 >= v45 >> 1) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    unint64_t v47 = v11 + 32;
    uint64_t v48 = &v11[16 * v46 + 32];
    *(void *)uint64_t v48 = v13;
    *((void *)v48 + 1) = v9;
    if (v46)
    {
      uint64_t v10 = v110;
      while (1)
      {
        uint64_t v49 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v54 = &v47[16 * v12];
          uint64_t v55 = *((void *)v54 - 8);
          uint64_t v56 = *((void *)v54 - 7);
          uint64_t v60 = __OFSUB__(v56, v55);
          uint64_t v57 = v56 - v55;
          if (v60) {
            goto LABEL_142;
          }
          unint64_t v59 = *((void *)v54 - 6);
          BOOL v58 = *((void *)v54 - 5);
          uint64_t v60 = __OFSUB__(v58, v59);
          unint64_t v52 = v58 - v59;
          uint64_t v53 = v60;
          if (v60) {
            goto LABEL_143;
          }
          uint64_t v61 = v12 - 2;
          uint64_t v62 = &v47[16 * v12 - 32];
          uint64_t v64 = *(void *)v62;
          uint64_t v63 = *((void *)v62 + 1);
          uint64_t v60 = __OFSUB__(v63, v64);
          uint64_t v65 = v63 - v64;
          if (v60) {
            goto LABEL_145;
          }
          uint64_t v60 = __OFADD__(v52, v65);
          uint64_t v66 = v52 + v65;
          if (v60) {
            goto LABEL_148;
          }
          if (v66 >= v57)
          {
            uint64_t v84 = &v47[16 * v49];
            unint64_t v86 = *(void *)v84;
            uint64_t v85 = *((void *)v84 + 1);
            uint64_t v60 = __OFSUB__(v85, v86);
            uint64_t v87 = v85 - v86;
            if (v60) {
              goto LABEL_152;
            }
            uint64_t v77 = v52 < v87;
            goto LABEL_112;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v78 = *((void *)v11 + 4);
            uint64_t v79 = *((void *)v11 + 5);
            uint64_t v60 = __OFSUB__(v79, v78);
            int v71 = v79 - v78;
            uint64_t v72 = v60;
            goto LABEL_106;
          }
          char v51 = *((void *)v11 + 4);
          uint64_t v50 = *((void *)v11 + 5);
          uint64_t v60 = __OFSUB__(v50, v51);
          unint64_t v52 = v50 - v51;
          uint64_t v53 = v60;
        }
        if (v53) {
          goto LABEL_144;
        }
        uint64_t v61 = v12 - 2;
        uint64_t v67 = &v47[16 * v12 - 32];
        uint64_t v69 = *(void *)v67;
        BOOL v68 = *((void *)v67 + 1);
        char v70 = __OFSUB__(v68, v69);
        int v71 = v68 - v69;
        uint64_t v72 = v70;
        if (v70) {
          goto LABEL_147;
        }
        uint64_t v73 = &v47[16 * v49];
        BOOL v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        uint64_t v60 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v60) {
          goto LABEL_150;
        }
        if (__OFADD__(v71, v76)) {
          goto LABEL_151;
        }
        if (v71 + v76 >= v52)
        {
          uint64_t v77 = v52 < v76;
LABEL_112:
          if (v77) {
            uint64_t v49 = v61;
          }
          goto LABEL_114;
        }
LABEL_106:
        if (v72) {
          goto LABEL_146;
        }
        uint64_t v80 = &v47[16 * v49];
        uint64_t v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        uint64_t v60 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v60) {
          goto LABEL_149;
        }
        if (v83 < v71) {
          goto LABEL_15;
        }
LABEL_114:
        uint64_t v88 = v49 - 1;
        if (v49 - 1 >= v12)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }
        if (!v10) {
          goto LABEL_164;
        }
        uint64_t v89 = v11;
        uint64_t v90 = v10;
        uint64_t v91 = &v47[16 * v88];
        uint64_t v92 = *(void *)v91;
        uint64_t v93 = &v47[16 * v49];
        unint64_t v94 = *((void *)v93 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v90 + 48 * *(void *)v91), (char *)(v90 + 48 * *(void *)v93), v90 + 48 * v94, __dst);
        if (v1) {
          goto LABEL_122;
        }
        if (v94 < v92) {
          goto LABEL_139;
        }
        if (v49 > *((void *)v89 + 2)) {
          goto LABEL_140;
        }
        *(void *)uint64_t v91 = v92;
        *(void *)&v47[16 * v88 + 8] = v94;
        uint64_t v95 = *((void *)v89 + 2);
        if (v49 >= v95) {
          goto LABEL_141;
        }
        unint64_t v11 = v89;
        Swift::Int v12 = v95 - 1;
        memmove(&v47[16 * v49], v93 + 16, 16 * (v95 - 1 - v49));
        *((void *)v89 + 2) = v95 - 1;
        uint64_t v77 = v95 > 2;
        uint64_t v10 = v110;
        if (!v77) {
          goto LABEL_15;
        }
      }
    }
    Swift::Int v12 = 1;
    uint64_t v10 = v110;
LABEL_15:
    uint64_t v3 = v109;
    if (v9 >= v109)
    {
      Swift::Int v8 = v107;
      goto LABEL_125;
    }
  }
  if (__OFADD__(v13, v108)) {
    goto LABEL_160;
  }
  if (v13 + v108 >= v3) {
    uint64_t v35 = v3;
  }
  else {
    uint64_t v35 = v13 + v108;
  }
  if (v35 >= v13)
  {
    if (v9 != v35)
    {
      char v36 = v104 + 48 * v9;
      do
      {
        uint64_t v37 = v13;
        uint64_t v38 = v36;
        do
        {
          if (*(unsigned char *)(v38 + 64) || *(unsigned char *)(v38 + 16)) {
            goto LABEL_167;
          }
          long long v39 = (_OWORD *)(v38 + 48);
          long long v40 = *(void *)(v38 + 48) == *(void *)v38 && *(void *)(v38 + 56) == *(void *)(v38 + 8);
          if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_163;
          }
          long long v41 = *(_OWORD *)v38;
          long long v42 = *(_OWORD *)(v38 + 16);
          unint64_t v43 = *(_OWORD *)(v38 + 32);
          *(_OWORD *)uint64_t v38 = *(_OWORD *)(v38 + 48);
          *(_OWORD *)(v38 + 24) = *(_OWORD *)(v38 + 72);
          unint64_t v44 = *(unsigned char *)(v38 + 88);
          *(unsigned char *)(v38 + 16) = *(unsigned char *)(v38 + 64);
          *(unsigned char *)(v38 + 40) = v44;
          v38 -= 48;
          void *v39 = v41;
          v39[1] = v42;
          ++v37;
          void v39[2] = v43;
        }
        while (v9 != v37);
        ++v9;
        v36 += 48;
      }
      while (v9 != v35);
      uint64_t v9 = v35;
    }
    goto LABEL_74;
  }
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_168:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  char *v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  Swift::Int v44;
  Swift::Int v45;
  int v46;
  Swift::Int v47;
  _DWORD *v48;
  Swift::Int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unsigned __int8 v58;
  int v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  Swift::Int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  Swift::Int v127;
  void (*v128)(char *, uint64_t);
  void (*v129)(char *, uint64_t);
  Swift::Int v130;
  Swift::Int v131;
  Swift::Int v132;
  _DWORD *v133;
  char *v134;
  void (**v135)(char *, uint64_t);
  void (**v136)(char *, uint64_t);
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  Swift::Int v144;
  void (*v145)(char *, uint64_t);
  unsigned int v146;

  Swift::Int v2 = v1;
  __int16 v141 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v4 = *(void *)(v141 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v141);
  id v140 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v139 = (char *)&v121 - v7;
  id v142 = type metadata accessor for Unicode.Scalar.Properties();
  Swift::Int v8 = *(void *)(v142 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v142);
  unsigned __int8 v138 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  id v137 = (char *)&v121 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  uint64_t v14 = v12;
  if (result < v12)
  {
    if (v12 >= 0) {
      int v15 = v12;
    }
    else {
      int v15 = v12 + 1;
    }
    if (v12 >= -1)
    {
      uint64_t v127 = result;
      if (v12 < 2)
      {
        int v19 = (char *)MEMORY[0x1E4FBC860];
        id v134 = (char *)(MEMORY[0x1E4FBC860] + 32);
        uint64_t v126 = MEMORY[0x1E4FBC860];
        if (v12 != 1)
        {
          Swift::Int v22 = *(void *)(MEMORY[0x1E4FBC860] + 16);
          if (v22 < 2) {
            goto LABEL_112;
          }
          goto LABEL_100;
        }
      }
      else
      {
        uint64_t v16 = v15 >> 1;
        uint64_t v17 = v14;
        BOOL v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        uint64_t v14 = v17;
        *(void *)(v18 + 16) = v16;
        uint64_t v126 = v18;
        id v134 = (char *)(v18 + 32);
      }
      uint64_t v20 = 0;
      uint64_t v121 = a1;
      uint64_t v21 = *a1;
      uint64_t v135 = (void (**)(char *, uint64_t))(v4 + 8);
      uint64_t v136 = (void (**)(char *, uint64_t))(v8 + 8);
      id v123 = v21 + 8;
      id v122 = v21 - 4;
      int v19 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v143 = v21;
      Swift::String v131 = v14;
      while (1)
      {
        Swift::Int v23 = v20;
        uint64_t v24 = v20 + 1;
        uint64_t v132 = v20;
        if (v20 + 1 < v14)
        {
          long long v25 = v137;
          Unicode.Scalar.properties.getter();
          long long v26 = v139;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          long long v27 = *v136;
          (*v136)(v25, v142);
          LODWORD(v133) = Unicode.CanonicalCombiningClass.rawValue.getter();
          long long v28 = *v135;
          long long v29 = v26;
          long long v30 = v141;
          (*v135)(v29, v141);
          uint64_t v31 = v138;
          Unicode.Scalar.properties.getter();
          Swift::Int v32 = v140;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          id v129 = v27;
          v27(v31, v142);
          Swift::Int v23 = v132;
          LODWORD(v130) = Unicode.CanonicalCombiningClass.rawValue.getter();
          char v128 = v28;
          v28(v32, v30);
          uint64_t v14 = v131;
          uint64_t v24 = v23 + 2;
          if (v23 + 2 < v131)
          {
            uint64_t v125 = v2;
            id v124 = v19;
            uint64_t v33 = v123 + 4 * v23;
            while (1)
            {
              uint64_t v144 = v24;
              Swift::String v146 = v133 < v130;
              uint64_t v34 = v137;
              Unicode.Scalar.properties.getter();
              uint64_t v35 = v139;
              Unicode.Scalar.Properties.canonicalCombiningClass.getter();
              char v36 = v142;
              uint64_t v37 = v129;
              v129(v34, v142);
              LOBYTE(v145) = Unicode.CanonicalCombiningClass.rawValue.getter();
              LODWORD(v145) = v145;
              uint64_t v38 = v35;
              long long v39 = v141;
              long long v40 = v128;
              v128(v38, v141);
              long long v41 = v138;
              Unicode.Scalar.properties.getter();
              long long v42 = v140;
              Unicode.Scalar.Properties.canonicalCombiningClass.getter();
              v37(v41, v36);
              LOBYTE(v37) = Unicode.CanonicalCombiningClass.rawValue.getter();
              v40(v42, v39);
              if (v146 == v145 >= v37) {
                break;
              }
              v33 += 4;
              uint64_t v24 = v144 + 1;
              uint64_t v14 = v131;
              if (v131 == v144 + 1)
              {
                uint64_t v24 = v131;
                int v19 = v124;
                Swift::Int v2 = v125;
                goto LABEL_22;
              }
            }
            int v19 = v124;
            uint64_t v14 = v131;
            Swift::Int v2 = v125;
            uint64_t v24 = v144;
LABEL_22:
            Swift::Int v23 = v132;
          }
          unint64_t v43 = v143;
          if (v133 < v130)
          {
            if (v24 < v23) {
              goto LABEL_136;
            }
            if (v23 < v24)
            {
              unint64_t v44 = v24 - 1;
              unint64_t v45 = v23;
              do
              {
                if (v45 != v44)
                {
                  if (!v43) {
                    goto LABEL_141;
                  }
                  unint64_t v46 = *(_DWORD *)(v43 + 4 * v45);
                  *(_DWORD *)(v43 + 4 * v45) = *(_DWORD *)(v43 + 4 * v44);
                  *(_DWORD *)(v43 + 4 * v44) = v46;
                }
                uint64_t v95 = ++v45 < v44--;
              }
              while (v95);
            }
          }
        }
        if (v24 < v14)
        {
          if (__OFSUB__(v24, v23)) {
            goto LABEL_134;
          }
          if (v24 - v23 < v127)
          {
            if (__OFADD__(v23, v127)) {
              goto LABEL_137;
            }
            if (v23 + v127 >= v14) {
              unint64_t v47 = v14;
            }
            else {
              unint64_t v47 = v23 + v127;
            }
            if (v47 < v23)
            {
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
              break;
            }
            if (v24 != v47)
            {
              id v124 = v19;
              uint64_t v125 = v2;
              uint64_t v48 = (_DWORD *)(v122 + 4 * v24);
              id v130 = v47;
              do
              {
                unint64_t v133 = v48;
                uint64_t v144 = v24;
                while (1)
                {
                  uint64_t v50 = v137;
                  Unicode.Scalar.properties.getter();
                  char v51 = v139;
                  Unicode.Scalar.Properties.canonicalCombiningClass.getter();
                  Swift::String v145 = *v136;
                  unint64_t v52 = v142;
                  v145(v50, v142);
                  LOBYTE(v146) = Unicode.CanonicalCombiningClass.rawValue.getter();
                  Swift::String v146 = v146;
                  uint64_t v53 = *v135;
                  uint64_t v54 = v51;
                  uint64_t v55 = v141;
                  (*v135)(v54, v141);
                  uint64_t v56 = v138;
                  Unicode.Scalar.properties.getter();
                  uint64_t v57 = v140;
                  Unicode.Scalar.Properties.canonicalCombiningClass.getter();
                  v145(v56, v52);
                  BOOL v58 = Unicode.CanonicalCombiningClass.rawValue.getter();
                  v53(v57, v55);
                  if (v146 >= v58) {
                    break;
                  }
                  uint64_t v49 = v144;
                  if (!v143) {
                    goto LABEL_139;
                  }
                  unint64_t v59 = *v48;
                  void *v48 = v48[1];
                  v48[1] = v59;
                  --v48;
                  if (v49 == ++v23) {
                    goto LABEL_44;
                  }
                }
                uint64_t v49 = v144;
LABEL_44:
                uint64_t v24 = v49 + 1;
                Swift::Int v23 = v132;
                uint64_t v48 = v133 + 1;
              }
              while (v24 != v130);
              uint64_t v24 = v130;
              Swift::Int v2 = v125;
              int v19 = v124;
            }
          }
        }
        if (v24 < v23) {
          goto LABEL_129;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v144 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          int v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
        }
        uint64_t v62 = *((void *)v19 + 2);
        uint64_t v61 = *((void *)v19 + 3);
        Swift::Int v22 = v62 + 1;
        uint64_t v63 = v143;
        if (v62 >= v61 >> 1)
        {
          uint64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v19);
          uint64_t v63 = v143;
          int v19 = v114;
        }
        *((void *)v19 + 2) = v22;
        uint64_t v64 = v19 + 32;
        uint64_t v65 = &v19[16 * v62 + 32];
        uint64_t v66 = v144;
        *(void *)uint64_t v65 = v23;
        *((void *)v65 + 1) = v66;
        if (v62)
        {
          while (1)
          {
            uint64_t v67 = v22 - 1;
            if (v22 >= 4)
            {
              uint64_t v72 = &v64[16 * v22];
              uint64_t v73 = *((void *)v72 - 8);
              uint64_t v74 = *((void *)v72 - 7);
              uint64_t v78 = __OFSUB__(v74, v73);
              BOOL v75 = v74 - v73;
              if (v78) {
                goto LABEL_118;
              }
              uint64_t v77 = *((void *)v72 - 6);
              uint64_t v76 = *((void *)v72 - 5);
              uint64_t v78 = __OFSUB__(v76, v77);
              char v70 = v76 - v77;
              int v71 = v78;
              if (v78) {
                goto LABEL_119;
              }
              uint64_t v79 = v22 - 2;
              uint64_t v80 = &v64[16 * v22 - 32];
              uint64_t v82 = *(void *)v80;
              uint64_t v81 = *((void *)v80 + 1);
              uint64_t v78 = __OFSUB__(v81, v82);
              uint64_t v83 = v81 - v82;
              if (v78) {
                goto LABEL_121;
              }
              uint64_t v78 = __OFADD__(v70, v83);
              uint64_t v84 = v70 + v83;
              if (v78) {
                goto LABEL_124;
              }
              if (v84 >= v75)
              {
                uint64_t v102 = &v64[16 * v67];
                uint64_t v104 = *(void *)v102;
                unint64_t v103 = *((void *)v102 + 1);
                uint64_t v78 = __OFSUB__(v103, v104);
                Swift::Int v105 = v103 - v104;
                if (v78) {
                  goto LABEL_128;
                }
                uint64_t v95 = v70 < v105;
                goto LABEL_88;
              }
            }
            else
            {
              if (v22 != 3)
              {
                uint64_t v96 = *((void *)v19 + 4);
                unint64_t v97 = *((void *)v19 + 5);
                uint64_t v78 = __OFSUB__(v97, v96);
                uint64_t v89 = v97 - v96;
                uint64_t v90 = v78;
                goto LABEL_82;
              }
              uint64_t v69 = *((void *)v19 + 4);
              BOOL v68 = *((void *)v19 + 5);
              uint64_t v78 = __OFSUB__(v68, v69);
              char v70 = v68 - v69;
              int v71 = v78;
            }
            if (v71) {
              goto LABEL_120;
            }
            uint64_t v79 = v22 - 2;
            uint64_t v85 = &v64[16 * v22 - 32];
            uint64_t v87 = *(void *)v85;
            unint64_t v86 = *((void *)v85 + 1);
            uint64_t v88 = __OFSUB__(v86, v87);
            uint64_t v89 = v86 - v87;
            uint64_t v90 = v88;
            if (v88) {
              goto LABEL_123;
            }
            uint64_t v91 = &v64[16 * v67];
            uint64_t v93 = *(void *)v91;
            uint64_t v92 = *((void *)v91 + 1);
            uint64_t v78 = __OFSUB__(v92, v93);
            unint64_t v94 = v92 - v93;
            if (v78) {
              goto LABEL_126;
            }
            if (__OFADD__(v89, v94)) {
              goto LABEL_127;
            }
            if (v89 + v94 >= v70)
            {
              uint64_t v95 = v70 < v94;
LABEL_88:
              if (v95) {
                uint64_t v67 = v79;
              }
              goto LABEL_90;
            }
LABEL_82:
            if (v90) {
              goto LABEL_122;
            }
            uint64_t v98 = &v64[16 * v67];
            uint64_t v100 = *(void *)v98;
            uint64_t v99 = *((void *)v98 + 1);
            uint64_t v78 = __OFSUB__(v99, v100);
            uint64_t v101 = v99 - v100;
            if (v78) {
              goto LABEL_125;
            }
            if (v101 < v89) {
              goto LABEL_14;
            }
LABEL_90:
            unint64_t v106 = v67 - 1;
            if (v67 - 1 >= v22)
            {
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
              goto LABEL_138;
            }
            if (!v63) {
              goto LABEL_140;
            }
            long long v107 = v19;
            uint64_t v108 = &v64[16 * v106];
            uint64_t v109 = *(void *)v108;
            uint64_t v110 = v64;
            uint64_t v111 = &v64[16 * v67];
            uint64_t v112 = *((void *)v111 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v63 + 4 * *(void *)v108), (char *)(v63 + 4 * *(void *)v111), (char *)(v63 + 4 * v112), v134);
            if (v2) {
              goto LABEL_112;
            }
            if (v112 < v109) {
              goto LABEL_115;
            }
            if (v67 > *((void *)v107 + 2)) {
              goto LABEL_116;
            }
            *(void *)uint64_t v108 = v109;
            *(void *)&v110[16 * v106 + 8] = v112;
            unint64_t v113 = *((void *)v107 + 2);
            if (v67 >= v113) {
              goto LABEL_117;
            }
            int v19 = v107;
            Swift::Int v22 = v113 - 1;
            memmove(v111, v111 + 16, 16 * (v113 - 1 - v67));
            uint64_t v64 = v110;
            *((void *)v107 + 2) = v113 - 1;
            uint64_t v63 = v143;
            if (v113 <= 2) {
              goto LABEL_14;
            }
          }
        }
        Swift::Int v22 = 1;
LABEL_14:
        uint64_t v20 = v144;
        uint64_t v14 = v131;
        if (v144 >= v131)
        {
          a1 = v121;
          if (v22 < 2)
          {
LABEL_112:
            swift_bridgeObjectRelease();
            *(void *)(v126 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
LABEL_100:
          uint64_t v115 = *a1;
          while (1)
          {
            id v116 = v22 - 2;
            if (v22 < 2) {
              goto LABEL_130;
            }
            if (!v115) {
              goto LABEL_142;
            }
            id v117 = *(void *)&v19[16 * v116 + 32];
            id v118 = *(void *)&v19[16 * v22 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v115 + 4 * v117), (char *)(v115 + 4 * *(void *)&v19[16 * v22 + 16]), (char *)(v115 + 4 * v118), v134);
            if (v2) {
              goto LABEL_112;
            }
            if (v118 < v117) {
              goto LABEL_131;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
            }
            if (v116 >= *((void *)v19 + 2)) {
              goto LABEL_132;
            }
            uint64_t v119 = &v19[16 * v116 + 32];
            *(void *)uint64_t v119 = v117;
            *((void *)v119 + 1) = v118;
            id v120 = *((void *)v19 + 2);
            if (v22 > v120) {
              goto LABEL_133;
            }
            memmove(&v19[16 * v22 + 16], &v19[16 * v22 + 32], 16 * (v120 - v22));
            *((void *)v19 + 2) = v120 - 1;
            Swift::Int v22 = v120 - 1;
            if (v120 <= 2) {
              goto LABEL_112;
            }
          }
        }
      }
    }
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v12 < 0) {
    goto LABEL_135;
  }
  if (v12) {
    return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v7 = result;
    uint64_t v8 = 56 * a3;
LABEL_6:
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    while (1)
    {
      uint64_t v11 = *a4 + v10;
      outlined init with copy of (key: String, value: Encodable)(v11, (uint64_t)v21);
      outlined init with copy of (key: String, value: Encodable)(v11 - 56, (uint64_t)v20);
      if (v21[0] == v20[0] && v21[1] == v20[1])
      {
        outlined destroy of (key: String, value: Encodable)((uint64_t)v20);
        Swift::Int result = outlined destroy of (key: String, value: Encodable)((uint64_t)v21);
LABEL_5:
        ++v5;
        v8 += 56;
        if (v5 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined destroy of (key: String, value: Encodable)((uint64_t)v20);
      Swift::Int result = outlined destroy of (key: String, value: Encodable)((uint64_t)v21);
      if ((v13 & 1) == 0) {
        goto LABEL_5;
      }
      if (!*a4) {
        break;
      }
      uint64_t v14 = *a4 + v10;
      uint64_t v15 = *(void *)(v14 + 48);
      long long v17 = *(_OWORD *)(v14 + 16);
      long long v16 = *(_OWORD *)(v14 + 32);
      long long v18 = *(_OWORD *)v14;
      long long v19 = *(_OWORD *)(v14 - 40);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)(v14 - 56);
      *(_OWORD *)(v14 + 16) = v19;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(v14 - 24);
      *(void *)(v14 + 48) = *(void *)(v14 - 8);
      *(_OWORD *)(v14 - 56) = v18;
      *(_OWORD *)(v14 - 40) = v17;
      *(_OWORD *)(v14 - 24) = v16;
      v10 -= 56;
      ++v9;
      *(void *)(v14 - 8) = v15;
      if (v5 == v9) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t outlined init with copy of (key: String, value: Encodable)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: String, value: Encodable)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in Data()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<Data> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<Data>);
}

uint64_t instantiation function for generic protocol witness table for KeyPathComparator<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString.CharacterView> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString.CharacterView>);
}

void sub_181A42C78(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t DataProtocol.copyBytes(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = a1;
  uint64_t v60 = a2;
  uint64_t v63 = *(void *)(a5 + 8);
  uint64_t v64 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v54 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v52 = (char *)&v49 - v11;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  long long v18 = (char *)&v49 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v49 - v20;
  swift_getAssociatedConformanceWitness();
  uint64_t v22 = type metadata accessor for Range();
  uint64_t v56 = *(void *)(v22 - 8);
  uint64_t v57 = v22;
  MEMORY[0x1F4188790](v22);
  uint64_t v53 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v55 = (char *)&v49 - v25;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v61 = a4;
  uint64_t v62 = v5;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v26 = v12;
  long long v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v27 = v12 + 8;
  long long v28 = v29;
  v29(v15, AssociatedTypeWitness);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    char v51 = v28;
    uint64_t v31 = TupleTypeMetadata2;
    Swift::Int v32 = v52;
    uint64_t v33 = &v52[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v63 = a5;
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v34(v52, v21, AssociatedTypeWitness);
    uint64_t v50 = v33;
    v34(v33, v18, AssociatedTypeWitness);
    uint64_t v35 = *(int *)(v31 + 48);
    uint64_t v64 = v27;
    char v36 = v54;
    uint64_t v37 = &v54[v35];
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v38(v54, v32, AssociatedTypeWitness);
    v38(v37, v33, AssociatedTypeWitness);
    long long v39 = v53;
    v34(v53, v36, AssociatedTypeWitness);
    long long v40 = v51;
    v51(v37, AssociatedTypeWitness);
    long long v41 = &v36[*(int *)(v31 + 48)];
    v34(v36, v32, AssociatedTypeWitness);
    v34(v41, v50, AssociatedTypeWitness);
    uint64_t v42 = v57;
    v34(&v39[*(int *)(v57 + 36)], v41, AssociatedTypeWitness);
    v40(v36, AssociatedTypeWitness);
    unint64_t v44 = v55;
    uint64_t v43 = v56;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v55, v39, v42);
    uint64_t v45 = v63;
    unint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 104);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v48 = v46(v59, v60, v44, v42, WitnessTable, v61, v45);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
    return v48;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance Data(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  switch((unint64_t)v1[1] >> 62)
  {
    case 1uLL:
      *a1 = (int)v2;
      break;
    case 2uLL:
      *a1 = *(void *)(v2 + 16);
      break;
    default:
      *a1 = 0;
      break;
  }
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Data@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *(void *)v3, *(void *)(v3 + 8));
  *a3 = result;
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7) {
    goto LABEL_10;
  }
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v32 = a4;
  unint64_t v33 = a5;
  if (!a1)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v9 = Data._Representation.subscript.getter(v30, v31, a4, a5);
  unint64_t v11 = v10;
  uint64_t v29 = 0;
  uint64_t v12 = specialized RandomAccessCollection<>.distance(from:to:)(v30, v31, a4, a5);
  uint64_t v13 = a2 - a1;
  if (v12 < a2 - a1) {
    uint64_t v13 = v12;
  }
  uint64_t v28 = v13;
  if (v13 >= 1)
  {
    switch(v11 >> 62)
    {
      case 1uLL:
        uint64_t v16 = (v9 >> 32) - (int)v9;
        if (v9 >> 32 < (int)v9) {
          goto LABEL_25;
        }
        uint64_t v17 = *(void *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v18 = *(void *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (__OFSUB__((int)v9, v18)) {
          goto LABEL_27;
        }
        uint64_t v15 = (void *)(v17 + (int)v9 - v18);
        if (*(void *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) < v16) {
          uint64_t v16 = *(void *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        }
        goto LABEL_18;
      case 2uLL:
        uint64_t v19 = *(void *)(v9 + 16);
        uint64_t v20 = *(void *)(v9 + 24);
        uint64_t v21 = *(void *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v21)
        {
          uint64_t v22 = *(void *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          BOOL v23 = __OFSUB__(v19, v22);
          uint64_t v24 = v19 - v22;
          if (v23) {
            goto LABEL_28;
          }
          BOOL v23 = __OFSUB__(v20, v19);
          uint64_t v25 = v20 - v19;
          if (!v23)
          {
            uint64_t v15 = (void *)(v21 + v24);
            uint64_t v16 = *(void *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            if (v16 >= v25) {
              uint64_t v16 = v25;
            }
LABEL_18:
            uint64_t v14 = (char *)v15 + v16;
            goto LABEL_22;
          }
        }
        else if (!__OFSUB__(v20, v19))
        {
LABEL_21:
          uint64_t v15 = 0;
          uint64_t v14 = 0;
LABEL_22:
          closure #1 in DataProtocol.copyBytes<A>(to:from:)((uint64_t)v15, (uint64_t)v14, a1, a2, &v29, &v28);
          goto LABEL_23;
        }
        break;
      case 3uLL:
        memset(v27, 0, 14);
        uint64_t v15 = v27;
        uint64_t v14 = (char *)v27;
        goto LABEL_22;
      default:
        v27[0] = v9;
        LOWORD(v27[1]) = v11;
        BYTE2(v27[1]) = BYTE2(v11);
        BYTE3(v27[1]) = BYTE3(v11);
        BYTE4(v27[1]) = BYTE4(v11);
        BYTE5(v27[1]) = BYTE5(v11);
        uint64_t v14 = (char *)v27 + BYTE6(v11);
        uint64_t v15 = v27;
        goto LABEL_22;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
LABEL_23:
  outlined consume of Data._Representation(v9, v11);
  return v29;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

Swift::Int __swiftcall _NSSwiftCalendar.ordinality(of:in:for:)(NSCalendarUnit of, NSCalendarUnit in, Foundation::Date a3)
{
  double v6 = *v3;
  _fromNSCalendarUnit(_:)(of, (char *)&v24);
  char v7 = v24;
  if (v24 == 18) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  _fromNSCalendarUnit(_:)(in, (char *)&v24);
  char v9 = v24;
  Swift::Int v8 = 0x7FFFFFFFFFFFFFFFLL;
  if (v24 != 18)
  {
    unint64_t v10 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
    unint64_t v11 = v10 + 4;
    uint64_t v12 = v10 + 8;
    os_unfair_lock_lock(v10 + 8);
    closure #1 in _NSSwiftCalendar.calendar.getter(v11, &v24);
    os_unfair_lock_unlock(v12);
    uint64_t v13 = *((void *)&v24 + 1);
    v23[0] = v7;
    char v22 = v9;
    double v14 = 1.59271755e13;
    if (v6 <= 1.59271755e13) {
      double v14 = v6;
    }
    double v15 = fmax(v14, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    double v21 = v15;
    Swift::Int v17 = (*(uint64_t (**)(unsigned char *, char *, double *, uint64_t, uint64_t))(v13 + 152))(v23, &v22, &v21, ObjectType, v13);
    char v19 = v18;
    swift_unknownObjectRelease();
    if ((v19 & 1) == 0) {
      return v17;
    }
  }
  return v8;
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarGregorian(Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarGregorian.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

Swift::Int_optional __swiftcall _CalendarGregorian.ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  char v4 = *(unsigned char *)in;
  double v5 = *v3;
  char v12 = *(unsigned char *)of;
  char v11 = v4;
  double v10 = v5;
  Swift::Int v6 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF((uint64_t)&v12, &v11, &v10, (uint64_t)v9, a3._time);
  Swift::Bool v8 = v7 & 1;
  result.Swift::Double value = v6;
  result.is_nil = v8;
  return result;
}

uint64_t _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(uint64_t result, unsigned char *a2, double *a3, uint64_t a4, double a5)
{
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  uint64_t v10 = v5;
  LODWORD(v11) = *(unsigned __int8 *)result;
  double v12 = *a3;
  switch(*a2)
  {
    case 0:
      switch(*(unsigned char *)result)
      {
        case 1:
          goto LABEL_361;
        case 2:
          LOBYTE(__dst[0]) = 0;
          *(double *)long long v295 = v12;
          *(Foundation::Date_optional *)(&result - 1) = _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
          if (BYTE8(__src[0])) {
            return 0;
          }
          Swift::Double v243 = *(double *)__src;
          double v244 = floor((v12 - *(double *)__src) / 86400.0 * 0.03125 * 0.96875);
          if ((~*(void *)&v244 & 0x7FF0000000000000) == 0) {
            goto LABEL_511;
          }
          if (v244 <= -9.22337204e18) {
            goto LABEL_513;
          }
          if (v244 >= 9.22337204e18) {
            goto LABEL_515;
          }
          if ((uint64_t)v244 <= 10) {
            uint64_t v245 = 0;
          }
          else {
            uint64_t v245 = (uint64_t)v244 - 10;
          }
          double v246 = *(double *)__src;
          while (2)
          {
            uint64_t v8 = v245 + 1;
            if (__OFADD__(v245, 1)) {
              goto LABEL_464;
            }
            unsigned __int8 v291 = 2;
            from._time = v243;
            v295[0] = *(_OWORD *)(v5 + 104);
            swift_unknownObjectRetain();
            _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF(&v291, &from._time, v245 + 1, (double *)v295, (uint64_t)__src, (double *)__dst);
            if (v7)
            {
              swift_unknownObjectRelease();
              goto LABEL_422;
            }
            uint64_t v7 = 0;
            swift_unknownObjectRelease();
            double v247 = *(double *)__dst;
            if (v246 < *(double *)__dst)
            {
              Swift::Int_optional result = specialized static Comparable.<= infix(_:_:)(*(double *)__dst, v12);
              ++v245;
              double v246 = v247;
              if ((result & 1) == 0) {
                return v8;
              }
              continue;
            }
            break;
          }
          *(void *)&long long v297 = *(void *)&__dst[0];
          *((double *)&v297 + 1) = v246;
          uint64_t v299 = 0;
          uint64_t v298 = 0;
          char v300 = 0x80;
          outlined init with take of PredicateCodableError(&v297, a4);
          specialized swift_willThrowTyped(&v297);
          return v8;
        case 3:
          LOBYTE(__dst[0]) = 0;
          *(double *)long long v295 = v12;
          *(Foundation::Date_optional *)(&result - 1) = _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
          if (BYTE8(__src[0])) {
            return 0;
          }
          double v265 = floor((v12 - *(double *)__src) / 86400.0);
          if ((~*(void *)&v265 & 0x7FF0000000000000) == 0) {
            goto LABEL_512;
          }
          if (v265 <= -9.22337204e18) {
            goto LABEL_514;
          }
          if (v265 >= 9.22337204e18) {
            goto LABEL_516;
          }
          uint64_t v8 = (uint64_t)v265 + 1;
          if (!__OFADD__((uint64_t)v265, 1)) {
            return v8;
          }
          goto LABEL_517;
        case 4:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 0;
          *(double *)long long v295 = v12;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = result;
          uint64_t v7 = 0;
          if (v248) {
            return v8;
          }
          a4 = result - 1;
          if (__OFSUB__(result, 1)) {
            goto LABEL_576;
          }
          if (a4 > 0x555555555555554) {
            return 0;
          }
          LOBYTE(v295[0]) = 4;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v249);
          uint64_t v250 = 24 * a4;
          if ((unsigned __int128)(a4 * (__int128)24) >> 64 != (24 * a4) >> 63) {
            goto LABEL_590;
          }
          BOOL v63 = __OFADD__(v250, result);
          uint64_t v251 = v250 + result;
          if (v63) {
            goto LABEL_591;
          }
          uint64_t v8 = v251 + 1;
          if (!__OFADD__(v251, 1)) {
            return v8;
          }
          __break(1u);
LABEL_386:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 0;
          *(double *)long long v295 = v12;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = result;
          uint64_t v7 = 0;
          if (v252) {
            return v8;
          }
          a4 = result - 1;
          if (__OFSUB__(result, 1)) {
            goto LABEL_577;
          }
          if (a4 > 0x222222222222221) {
            return 0;
          }
          LOBYTE(v295[0]) = 5;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v253);
          uint64_t v254 = 60 * a4;
          if ((unsigned __int128)(a4 * (__int128)60) >> 64 != (60 * a4) >> 63) {
            goto LABEL_592;
          }
          BOOL v63 = __OFADD__(v254, result);
          uint64_t v255 = v254 + result;
          if (v63) {
            goto LABEL_593;
          }
          uint64_t v8 = v255 + 1;
          if (!__OFADD__(v255, 1)) {
            return v8;
          }
          __break(1u);
LABEL_395:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 0;
          *(double *)long long v295 = v12;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = result;
          if (v256) {
            return v8;
          }
          uint64_t v258 = result - 1;
          if (__OFSUB__(result, 1)) {
            goto LABEL_578;
          }
          if (v258 > 0x222222222222221) {
            return 0;
          }
          LOBYTE(v295[0]) = 6;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v257);
          uint64_t v259 = 60 * v258;
          if ((unsigned __int128)(v258 * (__int128)60) >> 64 != (60 * v258) >> 63) {
            goto LABEL_594;
          }
          BOOL v63 = __OFADD__(v259, result);
          uint64_t v260 = v259 + result;
          if (v63) {
            goto LABEL_595;
          }
          uint64_t v8 = v260 + 1;
          if (__OFADD__(v260, 1)) {
            __break(1u);
          }
          return v8;
        case 5:
          goto LABEL_386;
        case 6:
          goto LABEL_395;
        case 7:
        case 8:
          LOBYTE(__dst[0]) = 0;
          *(double *)long long v295 = v12;
          unint64_t v16 = (unint64_t)_CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
          if (BYTE8(__src[0])) {
            return 0;
          }
          double v17 = *(double *)__src;
          LOBYTE(v295[0]) = 7;
          *(double *)long long __src = v12;
          Swift::Int v18 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, (Foundation::Date)v16);
          *(double *)__unint64_t dst = v17;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF((double *)v295, (double *)__dst, v18, (uint64_t)__src);
          if (v6) {
            goto LABEL_422;
          }
          double v19 = floor((v12 - v17) / 86400.0 / 7.0);
          if ((~*(void *)&v19 & 0x7FF0000000000000) == 0) {
            goto LABEL_518;
          }
          if (v19 <= -9.22337204e18) {
            goto LABEL_520;
          }
          if (v19 >= 9.22337204e18) {
            goto LABEL_522;
          }
          Swift::Double v20 = *(double *)v295;
          if ((uint64_t)v19 <= 10) {
            uint64_t v21 = 0;
          }
          else {
            uint64_t v21 = (uint64_t)v19 - 10;
          }
          double v22 = *(double *)v295;
          break;
        case 9:
          LOBYTE(__dst[0]) = 1;
          LOBYTE(from._time) = 0;
          *(double *)long long v295 = v12;
          uint64_t v261 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v261;
          if (v262) {
            return v8;
          }
          LOBYTE(__dst[0]) = 9;
          LOBYTE(from._time) = 1;
          *(double *)long long v295 = v12;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v263) {
            return result;
          }
          uint64_t v264 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_597;
          }
          if ((unint64_t)(v8 - 0x2000000000000001) >> 62 != 3) {
            goto LABEL_598;
          }
          uint64_t v8 = result + 4 * v264;
          if (!__OFADD__(result, 4 * v264)) {
            return v8;
          }
          __break(1u);
LABEL_413:
          char v124 = 12;
          goto LABEL_414;
        case 0xA:
        case 0xB:
          goto LABEL_189;
        case 0xC:
          goto LABEL_413;
        default:
          return 0;
      }
      while (2)
      {
        uint64_t v8 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_465;
        }
        unsigned __int8 v291 = 11;
        from._time = v20;
        v295[0] = *(_OWORD *)(v5 + 104);
        swift_unknownObjectRetain();
        _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF(&v291, &from._time, v21 + 1, (double *)v295, (uint64_t)__src, (double *)__dst);
        Swift::Int_optional result = swift_unknownObjectRelease();
        if (v22 < *(double *)__dst)
        {
          ++v21;
          double v22 = *(double *)__dst;
          if (*(double *)__dst >= v12) {
            return v8;
          }
          continue;
        }
        break;
      }
      *(void *)&long long v305 = *(void *)&__dst[0];
      *((double *)&v305 + 1) = v22;
      uint64_t v307 = 0;
      uint64_t v306 = 0;
      char v308 = 0x80;
      outlined init with take of PredicateCodableError(&v305, a4);
      specialized swift_willThrowTyped(&v305);
      return v8;
    case 1:
      uint64_t v8 = 0;
      switch(*(unsigned char *)result)
      {
        case 2:
          goto LABEL_275;
        case 3:
        case 0x11:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.ComponentSet>);
          uint64_t v23 = swift_allocObject();
          uint64_t v24 = specialized static Array._adoptStorage(_:count:)(v23, 3);
          *(_OWORD *)uint64_t v25 = xmmword_182106040;
          *(void *)(v25 + 16) = 8;
          uint64_t v26 = (void *)destructiveProjectEnumData for PredicateCodableError(v24, v25);
          uint64_t v27 = v26[4];
          uint64_t v28 = v26[5];
          if ((v28 & ~v27) == 0) {
            uint64_t v28 = 0;
          }
          uint64_t v29 = v28 | v27;
          uint64_t v30 = v26[6];
          swift_bridgeObjectRelease();
          if ((v30 & ~v29) != 0) {
            uint64_t v31 = v30;
          }
          else {
            uint64_t v31 = 0;
          }
          *(void *)&__dst[0] = v31 | v29;
          from._time = v12;
          v295[0] = *(_OWORD *)(v10 + 104);
          uint64_t v8 = *(void *)&v295[0];
          swift_unknownObjectRetain();
          _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)__dst, &from._time, (uint64_t *)v295, __src);
          Swift::Int_optional result = swift_unknownObjectRelease();
          if (BYTE8(__src[3])) {
            goto LABEL_603;
          }
          if (BYTE8(__src[4])) {
            goto LABEL_604;
          }
          if (BYTE8(__src[5])) {
            goto LABEL_605;
          }
          uint64_t v32 = _s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKF(*(uint64_t *)&__src[3], *(uint64_t *)&__src[4], *(uint64_t *)&__src[5], (uint64_t)v295);
          if (v6)
          {
            outlined release of DateComponents((uint64_t)__src);
            char v33 = v295[2];
            long long v34 = v295[0];
            long long v35 = v295[1];
            goto LABEL_423;
          }
          uint64_t v8 = v32;
          outlined release of DateComponents((uint64_t)__src);
          return v8;
        case 4:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 1;
          *(double *)long long v295 = v12;
          uint64_t v169 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v169;
          uint64_t v7 = 0;
          if (v170) {
            return v8;
          }
          LOBYTE(v295[0]) = 4;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v171);
          uint64_t v172 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_552;
          }
          uint64_t v173 = (unsigned __int128)(v172 * (__int128)24) >> 64;
          uint64_t v174 = 24 * v172;
          if (v173 != v174 >> 63) {
            goto LABEL_560;
          }
          BOOL v63 = __OFADD__(v174, result);
          uint64_t v175 = v174 + result;
          if (v63) {
            goto LABEL_568;
          }
          uint64_t v8 = v175 + 1;
          if (!__OFADD__(v175, 1)) {
            return v8;
          }
          __break(1u);
LABEL_284:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 1;
          *(double *)long long v295 = v12;
          uint64_t v176 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v176;
          uint64_t v7 = 0;
          if (v177) {
            return v8;
          }
          LOBYTE(v295[0]) = 5;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v178);
          uint64_t v179 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_553;
          }
          uint64_t v180 = 60 * v179;
          if ((unsigned __int128)(v179 * (__int128)60) >> 64 != (60 * v179) >> 63) {
            goto LABEL_561;
          }
          uint64_t v181 = v180 + result;
          if (__OFADD__(v180, result)) {
            goto LABEL_569;
          }
          uint64_t v8 = v181 + 1;
          if (!__OFADD__(v181, 1)) {
            return v8;
          }
          __break(1u);
LABEL_292:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 1;
          *(double *)long long v295 = v12;
          uint64_t v182 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v182;
          if (v183) {
            return v8;
          }
          LOBYTE(v295[0]) = 6;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v184);
          uint64_t v185 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_554;
          }
          uint64_t v186 = 60 * v185;
          if ((unsigned __int128)(v185 * (__int128)60) >> 64 != (60 * v185) >> 63) {
            goto LABEL_562;
          }
          uint64_t v187 = v186 + result;
          if (__OFADD__(v186, result)) {
            goto LABEL_570;
          }
          uint64_t v8 = v187 + 1;
          if (!__OFADD__(v187, 1)) {
            return v8;
          }
          __break(1u);
LABEL_300:
          LOBYTE(v295[0]) = 2;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, *(Foundation::Date *)&a5);
          uint64_t v188 = result - 1;
          if (__OFSUB__(result, 1)) {
            goto LABEL_480;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v189 = swift_allocObject();
          uint64_t v190 = specialized static Array._adoptStorage(_:count:)(v189, 13);
          *(int64x2_t *)uint64_t v191 = vdupq_n_s64(1uLL);
          *(_OWORD *)(v191 + 16) = xmmword_1821037E0;
          *(int64x2_t *)(v191 + 32) = vdupq_n_s64(2uLL);
          *(int64x2_t *)(v191 + 48) = vdupq_n_s64(3uLL);
          *(_OWORD *)(v191 + 64) = xmmword_1822052D0;
          *(int64x2_t *)(v191 + 80) = vdupq_n_s64(4uLL);
          *(void *)(v191 + 96) = 4;
          uint64_t v192 = destructiveProjectEnumData for PredicateCodableError(v190, v191);
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v188, 1, v192);
          uint64_t v8 = *(void *)(v192 + 8 * v188 + 32);
          goto LABEL_328;
        case 5:
          goto LABEL_284;
        case 6:
          goto LABEL_292;
        case 7:
        case 8:
          goto LABEL_171;
        case 9:
          goto LABEL_300;
        case 0xB:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.ComponentSet>);
          uint64_t v193 = swift_allocObject();
          uint64_t v194 = specialized static Array._adoptStorage(_:count:)(v193, 3);
          *(_OWORD *)uint64_t v195 = xmmword_182106040;
          *(void *)(v195 + 16) = 8;
          uint64_t v196 = (void *)destructiveProjectEnumData for PredicateCodableError(v194, v195);
          uint64_t v197 = v196[4];
          uint64_t v198 = v196[5];
          if ((v198 & ~v197) == 0) {
            uint64_t v198 = 0;
          }
          uint64_t v199 = v198 | v197;
          uint64_t v200 = v196[6];
          swift_bridgeObjectRelease();
          if ((v200 & ~v199) != 0) {
            uint64_t v201 = v200;
          }
          else {
            uint64_t v201 = 0;
          }
          *(void *)&__dst[0] = v201 | v199;
          from._time = v12;
          v295[0] = *(_OWORD *)(v10 + 104);
          swift_unknownObjectRetain();
          _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)__dst, &from._time, (uint64_t *)v295, __src);
          Swift::Int_optional result = swift_unknownObjectRelease();
          if (BYTE8(__src[3])) {
            goto LABEL_606;
          }
          if (BYTE8(__src[4])) {
            goto LABEL_607;
          }
          if (BYTE8(__src[5])) {
            goto LABEL_608;
          }
          uint64_t v202 = *(void *)&__src[3];
          uint64_t v203 = *(void *)&__src[4];
          uint64_t v204 = *(void *)&__src[5];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v205 = swift_allocObject();
          uint64_t v206 = specialized static Array._adoptStorage(_:count:)(v205, 12);
          *unsigned int v207 = xmmword_182205220;
          v207[1] = xmmword_182205230;
          v207[2] = xmmword_182205240;
          v207[3] = xmmword_182205250;
          v207[4] = xmmword_182205260;
          v207[5] = xmmword_182205270;
          uint64_t v208 = destructiveProjectEnumData for PredicateCodableError(v206, v207);
          uint64_t v209 = swift_allocObject();
          uint64_t v210 = specialized static Array._adoptStorage(_:count:)(v209, 12);
          *uint64_t v211 = xmmword_182205220;
          v211[1] = xmmword_182205280;
          v211[2] = xmmword_182205290;
          v211[3] = xmmword_1822052A0;
          v211[4] = xmmword_1822052B0;
          v211[5] = xmmword_1822052C0;
          Swift::Int_optional result = destructiveProjectEnumData for PredicateCodableError(v210, v211);
          uint64_t v212 = v203 - 2;
          if (__OFSUB__(v203, 2)) {
            goto LABEL_481;
          }
          uint64_t v8 = result;
          uint64_t v213 = v202 + 4716;
          if (__OFADD__(v202, 4716)) {
            goto LABEL_317;
          }
          if (__OFSUB__(12, v212)) {
            goto LABEL_507;
          }
          uint64_t v214 = (14 - v203) / 12;
          BOOL v63 = __OFSUB__(v213, v214);
          uint64_t v215 = v213 - v214;
          if (v63) {
            goto LABEL_508;
          }
          if (__OFSUB__(v212, 1)) {
            goto LABEL_509;
          }
          if (__OFADD__(v203 - 3, 12)) {
            goto LABEL_510;
          }
          if ((unsigned __int128)(v215 * (__int128)1461) >> 64 != (1461 * v215) >> 63)
          {
LABEL_317:
            v295[0] = xmmword_1821A0620;
            v295[1] = xmmword_18210C780;
            LOBYTE(v295[2]) = 1;
            lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
            swift_willThrowTypedImpl();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined release of DateComponents((uint64_t)__src);
            *(_OWORD *)a4 = xmmword_1821A0620;
            *(_OWORD *)(a4 + 16) = xmmword_18210C780;
            char v33 = 1;
            goto LABEL_424;
          }
          uint64_t v266 = v204 + 1461 * v215 / 4;
          if (__OFADD__(v204, 1461 * v215 / 4)) {
            goto LABEL_536;
          }
          BOOL v63 = __OFSUB__(v266, 1);
          uint64_t v267 = v266 - 1;
          if (v63) {
            goto LABEL_537;
          }
          BOOL v63 = __OFSUB__(v267, 1401);
          uint64_t v268 = v267 - 1401;
          if (v63) {
            goto LABEL_538;
          }
          int v269 = 26215 * (__int16)(153 * ((__int16)(v203 + 9) % 12) + 2);
          BOOL v63 = __OFADD__(v268, (int)((v269 >> 17) + (v269 >> 31)));
          uint64_t v270 = v268 + (int)((v269 >> 17) + (v269 >> 31));
          if (v63) {
            goto LABEL_539;
          }
          uint64_t v290 = v204;
          uint64_t v271 = 3 * ((v215 + 184) / 100);
          uint64_t v272 = v270 - v271 / 4;
          if (__OFSUB__(v270, v271 / 4)) {
            goto LABEL_540;
          }
          uint64_t v273 = v272 + 38;
          if (__OFADD__(v272, 38)) {
            goto LABEL_541;
          }
          uint64_t v274 = *(void *)(v10 + 64);
          if (v202 < v274)
          {
            uint64_t v275 = 4;
            goto LABEL_434;
          }
          if ((v202 & 3) != 0)
          {
            uint64_t v8 = v208;
            goto LABEL_444;
          }
          if (__ROR8__(0x8F5C28F5C28F5C29 * v202 + 0x51EB851EB851EB8, 2) < 0x28F5C28F5C28F5DuLL)
          {
            uint64_t v275 = 400;
LABEL_434:
            if (v202 % v275) {
              uint64_t v8 = v208;
            }
          }
LABEL_444:
          uint64_t v276 = *(void *)(v10 + 56);
          swift_bridgeObjectRelease();
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v203 - 1, 1, v8);
          uint64_t v277 = *(void *)(v8 + 8 * (v203 - 1) + 32);
          Swift::Int_optional result = swift_bridgeObjectRelease();
          uint64_t v278 = v277 + v290;
          if (__OFADD__(v277, v290)) {
            goto LABEL_542;
          }
          if (v273 < v276 || v202 != v274) {
            goto LABEL_449;
          }
          uint64_t v279 = v202 - 1;
          if (__OFSUB__(v202, 1)) {
            goto LABEL_579;
          }
          uint64_t v280 = ((unsigned __int128)(v279 * (__int128)0x5C28F5C28F5C28F5) >> 64) - v279;
          uint64_t v281 = v279 / 400 + (v280 >> 6) + ((unint64_t)v280 >> 63) + 2;
          BOOL v63 = __OFADD__(v278, v281);
          v278 += v281;
          if (v63) {
            goto LABEL_580;
          }
LABEL_449:
          memcpy(__dst, __src, 0x11AuLL);
          DateComponents.day.setter(1, 0);
          DateComponents.month.setter(1, 0);
          memcpy(v295, __dst, 0x11AuLL);
          outlined retain of DateComponents((uint64_t)__src);
          outlined retain of DateComponents((uint64_t)v295);
          _CalendarGregorian.date(from:)(__dst, (uint64_t)&from);
          Swift::Int_optional result = outlined release of DateComponents((uint64_t)v295);
          if (v293) {
            goto LABEL_609;
          }
          unsigned __int8 v291 = 7;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)&v291, from);
          BOOL v63 = __OFADD__(v278, 7);
          uint64_t v282 = v278 + 7;
          if (v63) {
            goto LABEL_543;
          }
          uint64_t v283 = result;
          Swift::Int_optional result = _CalendarGregorian.minimumDaysInFirstWeek.getter();
          BOOL v63 = __OFSUB__(v282, result);
          uint64_t v284 = v282 - result;
          if (v63) {
            goto LABEL_544;
          }
          Swift::Int_optional result = _CalendarGregorian.minimumDaysInFirstWeek.getter();
          BOOL v63 = __OFADD__(v283, result);
          uint64_t v285 = v283 + result;
          if (v63) {
            goto LABEL_545;
          }
          uint64_t v286 = _CalendarGregorian.firstWeekday.getter();
          outlined release of DateComponents((uint64_t)__src);
          Swift::Int_optional result = outlined release of DateComponents((uint64_t)v295);
          uint64_t v287 = v285 - v286;
          if (__OFSUB__(v285, v286)) {
            goto LABEL_546;
          }
          if (__OFADD__(v287, 6)) {
            goto LABEL_547;
          }
          uint64_t v288 = (v287 + 6) % 7;
          BOOL v63 = __OFADD__(v284, v288);
          uint64_t v289 = v284 + v288;
          if (v63) {
            goto LABEL_548;
          }
          uint64_t v37 = (unsigned __int128)(v289 * (__int128)0x4924924924924925) >> 64;
LABEL_457:
          uint64_t v8 = (v37 >> 1) + ((unint64_t)v37 >> 63);
          break;
        case 0xD:
          LOBYTE(__dst[0]) = 6;
          LOBYTE(from._time) = 1;
          *(double *)long long v295 = v12;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = result;
          if (v216) {
            return v8;
          }
          a5 = (v12 - floor(v12) + (double)result + -1.0) * 1000000000.0;
          if ((~*(void *)&a5 & 0x7FF0000000000000) == 0) {
            goto LABEL_555;
          }
          if (a5 <= -9.22337204e18) {
            goto LABEL_563;
          }
          if (a5 >= 9.22337204e18) {
            goto LABEL_571;
          }
          uint64_t v8 = (uint64_t)a5 + 1;
          if (!__OFADD__((uint64_t)a5, 1)) {
            return v8;
          }
          __break(1u);
          goto LABEL_326;
        default:
          return v8;
      }
      return v8;
    case 2:
      uint64_t v8 = 0;
      switch(*(unsigned char *)result)
      {
        case 3:
          char v124 = 3;
          goto LABEL_414;
        case 4:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 2;
          *(double *)long long v295 = v12;
          uint64_t v125 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v125;
          uint64_t v7 = 0;
          if (v126) {
            return v8;
          }
          LOBYTE(v295[0]) = 4;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v127);
          uint64_t v128 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_524;
          }
          uint64_t v129 = (unsigned __int128)(v128 * (__int128)24) >> 64;
          uint64_t v130 = 24 * v128;
          if (v129 != v130 >> 63) {
            goto LABEL_528;
          }
          BOOL v63 = __OFADD__(v130, result);
          uint64_t v131 = v130 + result;
          if (v63) {
            goto LABEL_532;
          }
          uint64_t v8 = v131 + 1;
          if (!__OFADD__(v131, 1)) {
            return v8;
          }
          __break(1u);
LABEL_214:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 2;
          *(double *)long long v295 = v12;
          uint64_t v132 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v132;
          uint64_t v7 = 0;
          if (v133) {
            return v8;
          }
          LOBYTE(v295[0]) = 5;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v134);
          uint64_t v135 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_525;
          }
          uint64_t v136 = 60 * v135;
          if ((unsigned __int128)(v135 * (__int128)60) >> 64 != (60 * v135) >> 63) {
            goto LABEL_529;
          }
          uint64_t v137 = v136 + result;
          if (__OFADD__(v136, result)) {
            goto LABEL_533;
          }
          uint64_t v8 = v137 + 1;
          if (!__OFADD__(v137, 1)) {
            return v8;
          }
          __break(1u);
LABEL_222:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 2;
          *(double *)long long v295 = v12;
          uint64_t v138 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v138;
          if (v139) {
            return v8;
          }
          LOBYTE(v295[0]) = 6;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v140);
          uint64_t v141 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_526;
          }
          uint64_t v142 = 60 * v141;
          if ((unsigned __int128)(v141 * (__int128)60) >> 64 != (60 * v141) >> 63) {
            goto LABEL_530;
          }
          uint64_t v143 = v142 + result;
          if (__OFADD__(v142, result)) {
            goto LABEL_534;
          }
          uint64_t v8 = v143 + 1;
          if (!__OFADD__(v143, 1)) {
            return v8;
          }
          __break(1u);
LABEL_230:
          char v124 = 10;
          break;
        case 5:
          goto LABEL_214;
        case 6:
          goto LABEL_222;
        case 7:
        case 8:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 2;
          *(double *)long long v295 = v12;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = result;
          if (v36) {
            return v8;
          }
          if (__OFADD__(result, 6)) {
            goto LABEL_506;
          }
          uint64_t v37 = (unsigned __int128)((result + 6) * (__int128)0x4924924924924925) >> 64;
          goto LABEL_457;
        case 0xA:
          goto LABEL_230;
        case 0xD:
          LOBYTE(__dst[0]) = 6;
          LOBYTE(from._time) = 2;
          *(double *)long long v295 = v12;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = result;
          uint64_t v7 = 0;
          if (v144) {
            return v8;
          }
          double v145 = (v12 - floor(v12) + (double)result + -1.0) * 1000000000.0;
          if ((~*(void *)&v145 & 0x7FF0000000000000) == 0) {
            goto LABEL_527;
          }
          if (v145 <= -9.22337204e18) {
            goto LABEL_531;
          }
          if (v145 >= 9.22337204e18) {
            goto LABEL_535;
          }
          uint64_t v8 = (uint64_t)v145 + 1;
          if (!__OFADD__((uint64_t)v145, 1)) {
            return v8;
          }
          __break(1u);
          goto LABEL_239;
        default:
          return v8;
      }
      goto LABEL_414;
    case 3:
    case 7:
    case 0x11:
      uint64_t v8 = 0;
      switch(*(unsigned char *)result)
      {
        case 4:
          LOBYTE(v295[0]) = 4;
          *(double *)long long __src = v12;
          Swift::Int v13 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, *(Foundation::Date *)&a5);
          uint64_t v8 = v13 + 1;
          if (!__OFADD__(v13, 1)) {
            return v8;
          }
          __break(1u);
          break;
        case 5:
          goto LABEL_75;
        case 6:
          goto LABEL_83;
        case 0xD:
          goto LABEL_91;
        default:
          return v8;
      }
      goto LABEL_6;
    case 4:
LABEL_50:
      if (v11 == 13) {
        goto LABEL_139;
      }
      if (v11 == 6) {
        goto LABEL_147;
      }
      if (v11 != 5) {
        return 0;
      }
      LOBYTE(v295[0]) = 5;
      *(double *)long long __src = v12;
      Swift::Int v38 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, *(Foundation::Date *)&a5);
      uint64_t v8 = v38 + 1;
      if (!__OFADD__(v38, 1)) {
        return v8;
      }
      __break(1u);
LABEL_56:
      if (v11 != 13)
      {
        if (v11 != 6) {
          return 0;
        }
        LOBYTE(v295[0]) = 6;
        *(double *)long long __src = v12;
        Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, *(Foundation::Date *)&a5);
        uint64_t v8 = result + 1;
        if (!__OFADD__(result, 1)) {
          return v8;
        }
        __break(1u);
LABEL_61:
        if (v11 != 13) {
          return 0;
        }
        double v39 = (v12 - floor(v12)) * 1000000000.0 + 1.0;
        if ((~*(void *)&v39 & 0x7FF0000000000000) != 0)
        {
          if (v39 > -9.22337204e18)
          {
            if (v39 < 9.22337204e18) {
              return (uint64_t)v39;
            }
            goto LABEL_463;
          }
        }
        else
        {
LABEL_461:
          __break(1u);
        }
        __break(1u);
LABEL_463:
        __break(1u);
LABEL_464:
        __break(1u);
LABEL_465:
        __break(1u);
LABEL_466:
        __break(1u);
LABEL_467:
        __break(1u);
LABEL_468:
        __break(1u);
LABEL_469:
        __break(1u);
LABEL_470:
        __break(1u);
LABEL_471:
        __break(1u);
LABEL_472:
        __break(1u);
LABEL_473:
        __break(1u);
LABEL_474:
        __break(1u);
LABEL_475:
        __break(1u);
LABEL_476:
        __break(1u);
LABEL_477:
        __break(1u);
LABEL_478:
        __break(1u);
LABEL_479:
        __break(1u);
LABEL_480:
        __break(1u);
LABEL_481:
        __break(1u);
LABEL_482:
        __break(1u);
LABEL_483:
        __break(1u);
LABEL_484:
        __break(1u);
LABEL_485:
        __break(1u);
        goto LABEL_486;
      }
LABEL_99:
      LOBYTE(__dst[0]) = 6;
      LOBYTE(from._time) = 5;
      *(double *)long long v295 = v12;
      Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v7) {
        goto LABEL_422;
      }
      uint64_t v8 = result;
      uint64_t v7 = 0;
      if (v55) {
        return v8;
      }
      double v56 = (v12 - floor(v12) + (double)result + -1.0) * 1000000000.0;
      if ((~*(void *)&v56 & 0x7FF0000000000000) == 0) {
        goto LABEL_485;
      }
      if (v56 <= -9.22337204e18)
      {
LABEL_486:
        __break(1u);
LABEL_487:
        __break(1u);
LABEL_488:
        __break(1u);
LABEL_489:
        __break(1u);
LABEL_490:
        __break(1u);
        goto LABEL_491;
      }
      if (v56 >= 9.22337204e18) {
        goto LABEL_487;
      }
      uint64_t v8 = (uint64_t)v56 + 1;
      if (!__OFADD__((uint64_t)v56, 1)) {
        return v8;
      }
      __break(1u);
LABEL_107:
      LOBYTE(__dst[0]) = 3;
      LOBYTE(from._time) = 11;
      *(double *)long long v295 = v12;
      uint64_t v57 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v7) {
        goto LABEL_422;
      }
      uint64_t v8 = v57;
      uint64_t v7 = 0;
      if (v58) {
        return v8;
      }
      LOBYTE(v295[0]) = 4;
      *(double *)long long __src = v12;
      Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v59);
      uint64_t v60 = v8 - 1;
      if (__OFSUB__(v8, 1)) {
        goto LABEL_488;
      }
      uint64_t v61 = (unsigned __int128)(v60 * (__int128)24) >> 64;
      uint64_t v62 = 24 * v60;
      if (v61 != v62 >> 63) {
        goto LABEL_492;
      }
      BOOL v63 = __OFADD__(v62, result);
      uint64_t v64 = v62 + result;
      if (v63)
      {
LABEL_496:
        __break(1u);
LABEL_497:
        __break(1u);
LABEL_498:
        __break(1u);
LABEL_499:
        __break(1u);
LABEL_500:
        __break(1u);
        goto LABEL_501;
      }
      uint64_t v8 = v64 + 1;
      if (!__OFADD__(v64, 1)) {
        return v8;
      }
      __break(1u);
LABEL_115:
      LOBYTE(__dst[0]) = 6;
      LOBYTE(from._time) = 11;
      *(double *)long long v295 = v12;
      Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v7) {
        goto LABEL_422;
      }
      uint64_t v8 = result;
      uint64_t v7 = 0;
      if (v65) {
        return v8;
      }
      double v66 = (v12 - floor(v12) + (double)result + -1.0) * 1000000000.0;
      if ((~*(void *)&v66 & 0x7FF0000000000000) == 0) {
        goto LABEL_489;
      }
      if (v66 <= -9.22337204e18) {
        goto LABEL_493;
      }
      if (v66 >= 9.22337204e18) {
        goto LABEL_497;
      }
      uint64_t v8 = (uint64_t)v66 + 1;
      if (!__OFADD__((uint64_t)v66, 1)) {
        return v8;
      }
      __break(1u);
LABEL_123:
      LOBYTE(__dst[0]) = 4;
      LOBYTE(from._time) = 11;
      *(double *)long long v295 = v12;
      uint64_t v67 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v7) {
        goto LABEL_422;
      }
      uint64_t v8 = v67;
      uint64_t v7 = 0;
      if (v68) {
        return v8;
      }
      LOBYTE(v295[0]) = 5;
      *(double *)long long __src = v12;
      Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v69);
      uint64_t v70 = v8 - 1;
      if (__OFSUB__(v8, 1)) {
        goto LABEL_490;
      }
      uint64_t v71 = 60 * v70;
      if ((unsigned __int128)(v70 * (__int128)60) >> 64 != (60 * v70) >> 63) {
        goto LABEL_494;
      }
      uint64_t v72 = v71 + result;
      if (__OFADD__(v71, result)) {
        goto LABEL_498;
      }
      uint64_t v8 = v72 + 1;
      if (!__OFADD__(v72, 1)) {
        return v8;
      }
      __break(1u);
LABEL_131:
      LOBYTE(__dst[0]) = 5;
      LOBYTE(from._time) = 11;
      *(double *)long long v295 = v12;
      uint64_t v73 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v7) {
        goto LABEL_422;
      }
      uint64_t v8 = v73;
      uint64_t v7 = 0;
      if (v74) {
        return v8;
      }
      LOBYTE(v295[0]) = 6;
      *(double *)long long __src = v12;
      Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v75);
      uint64_t v76 = v8 - 1;
      if (__OFSUB__(v8, 1))
      {
LABEL_491:
        __break(1u);
LABEL_492:
        __break(1u);
LABEL_493:
        __break(1u);
LABEL_494:
        __break(1u);
LABEL_495:
        __break(1u);
        goto LABEL_496;
      }
      uint64_t v77 = 60 * v76;
      if ((unsigned __int128)(v76 * (__int128)60) >> 64 != (60 * v76) >> 63) {
        goto LABEL_495;
      }
      uint64_t v78 = v77 + result;
      if (__OFADD__(v77, result)) {
        goto LABEL_499;
      }
      uint64_t v8 = v78 + 1;
      if (!__OFADD__(v78, 1)) {
        return v8;
      }
      __break(1u);
LABEL_139:
      LOBYTE(__dst[0]) = 6;
      LOBYTE(from._time) = 4;
      *(double *)long long v295 = v12;
      Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v7) {
        goto LABEL_422;
      }
      uint64_t v8 = result;
      uint64_t v7 = 0;
      if (v79) {
        return v8;
      }
      double v80 = (v12 - floor(v12) + (double)result + -1.0) * 1000000000.0;
      if ((~*(void *)&v80 & 0x7FF0000000000000) == 0) {
        goto LABEL_500;
      }
      if (v80 <= -9.22337204e18) {
        goto LABEL_502;
      }
      if (v80 >= 9.22337204e18)
      {
LABEL_504:
        __break(1u);
LABEL_505:
        __break(1u);
LABEL_506:
        __break(1u);
LABEL_507:
        __break(1u);
LABEL_508:
        __break(1u);
LABEL_509:
        __break(1u);
LABEL_510:
        __break(1u);
LABEL_511:
        __break(1u);
LABEL_512:
        __break(1u);
LABEL_513:
        __break(1u);
LABEL_514:
        __break(1u);
LABEL_515:
        __break(1u);
LABEL_516:
        __break(1u);
LABEL_517:
        __break(1u);
LABEL_518:
        __break(1u);
        goto LABEL_519;
      }
      uint64_t v8 = (uint64_t)v80 + 1;
      if (!__OFADD__((uint64_t)v80, 1)) {
        return v8;
      }
      __break(1u);
LABEL_147:
      LOBYTE(__dst[0]) = 5;
      LOBYTE(from._time) = 4;
      *(double *)long long v295 = v12;
      uint64_t v81 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v7)
      {
LABEL_422:
        char v33 = __src[2];
        long long v34 = __src[0];
        long long v35 = __src[1];
LABEL_423:
        *(_OWORD *)a4 = v34;
        *(_OWORD *)(a4 + 16) = v35;
LABEL_424:
        *(unsigned char *)(a4 + 32) = v33;
        return v8;
      }
      uint64_t v8 = v81;
      uint64_t v7 = 0;
      if (v82) {
        return v8;
      }
      LOBYTE(v295[0]) = 6;
      *(double *)long long __src = v12;
      Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v83);
      uint64_t v84 = v8 - 1;
      if (__OFSUB__(v8, 1))
      {
LABEL_501:
        __break(1u);
LABEL_502:
        __break(1u);
LABEL_503:
        __break(1u);
        goto LABEL_504;
      }
      uint64_t v85 = 60 * v84;
      if ((unsigned __int128)(v84 * (__int128)60) >> 64 != (60 * v84) >> 63) {
        goto LABEL_503;
      }
      uint64_t v86 = v85 + result;
      if (__OFADD__(v85, result)) {
        goto LABEL_505;
      }
      uint64_t v8 = v86 + 1;
      if (!__OFADD__(v86, 1)) {
        return v8;
      }
      __break(1u);
LABEL_155:
      uint64_t v8 = 12;
      LOBYTE(__dst[0]) = 12;
      *(double *)long long v295 = v12;
      _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
      if (BYTE8(__src[0])) {
        return 0;
      }
      uint64_t v87 = *(void *)&__src[0];
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 12;
      *(double *)long long v295 = v12;
      uint64_t v88 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v7) {
        goto LABEL_422;
      }
      uint64_t v8 = v88;
      if (v89) {
        return v8;
      }
      LOBYTE(v295[0]) = 7;
      *(void *)&__src[0] = v87;
      Swift::Int v91 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v90);
      *(void *)&__dst[0] = v87;
      _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF((double *)v295, (double *)__dst, v91, (uint64_t)__src);
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 12;
      Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      uint64_t v7 = 0;
      if (v92) {
        return result;
      }
      uint64_t v93 = v8 - result;
      if (__OFSUB__(v8, result)) {
        goto LABEL_599;
      }
      uint64_t v8 = v93 + 1;
      if (!__OFADD__(v93, 1)) {
        return v8;
      }
      __break(1u);
LABEL_163:
      LOBYTE(__dst[0]) = 9;
      *(double *)long long v295 = v12;
      unint64_t v94 = (unint64_t)_CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
      if (BYTE8(__src[0])) {
        return 0;
      }
      uint64_t v95 = *(void *)&__src[0];
      LOBYTE(v295[0]) = 7;
      *(double *)long long __src = v12;
      Swift::Int v96 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, (Foundation::Date)v94);
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      *(double *)long long v295 = v12;
      uint64_t v97 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v7) {
        goto LABEL_422;
      }
      uint64_t v8 = v97;
      if (v98) {
        return v8;
      }
      *(void *)&__dst[0] = v95;
      _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF((double *)v295, (double *)__dst, v96, (uint64_t)__src);
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      uint64_t v7 = 0;
      if (v99) {
        return result;
      }
      uint64_t v100 = v8 - result;
      if (__OFSUB__(v8, result)) {
        goto LABEL_600;
      }
      uint64_t v8 = v100 + 1;
      if (!__OFADD__(v100, 1)) {
        return v8;
      }
      __break(1u);
LABEL_171:
      uint64_t v8 = 1;
      LOBYTE(__dst[0]) = 1;
      *(double *)long long v295 = v12;
      _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
      if (BYTE8(__src[0])) {
        return 0;
      }
      uint64_t v101 = *(void *)&__src[0];
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      *(double *)long long v295 = v12;
      uint64_t v102 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v7) {
        goto LABEL_422;
      }
      uint64_t v8 = v102;
      if (v103) {
        return v8;
      }
      LOBYTE(v295[0]) = 7;
      *(double *)long long __src = v12;
      Swift::Int v105 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v104);
      *(void *)&__dst[0] = v101;
      _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF((double *)v295, (double *)__dst, v105, (uint64_t)__src);
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      uint64_t v7 = 0;
      if (v106) {
        return result;
      }
      uint64_t v107 = v8 - result;
      if (__OFSUB__(v8, result)) {
        goto LABEL_601;
      }
      uint64_t v8 = v107 + 1;
      if (!__OFADD__(v107, 1)) {
        return v8;
      }
      __break(1u);
LABEL_179:
      LOBYTE(__dst[0]) = 9;
      *(double *)long long v295 = v12;
      _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
      if (BYTE8(__src[0])) {
        return 0;
      }
      *(void *)&__dst[0] = *(void *)&__src[0];
      uint64_t v108 = _CalendarGregorian.firstWeekday.getter();
      uint64_t v109 = _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF((double *)v295, (double *)__dst, v108, (uint64_t)__src);
      if (v7) {
        goto LABEL_422;
      }
      uint64_t v110 = v109;
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      uint64_t v8 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
      if (v111) {
        return v8;
      }
      Swift::Int_optional result = _CalendarGregorian.minimumDaysInFirstWeek.getter();
      if (v110 < result || (BOOL v63 = __OFSUB__(v8, 1), --v8, !v63))
      {
        LOBYTE(__dst[0]) = 11;
        LOBYTE(from._time) = 1;
        *(double *)long long v295 = v12;
        Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
        uint64_t v7 = 0;
        if (v112) {
          return result;
        }
        uint64_t v113 = result - v8;
        if (__OFSUB__(result, v8)) {
          goto LABEL_602;
        }
        uint64_t v8 = v113 + 1;
        if (!__OFADD__(v113, 1)) {
          return v8;
        }
        __break(1u);
LABEL_189:
        LOBYTE(__dst[0]) = 0;
        *(double *)long long v295 = v12;
        _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
        if (BYTE8(__src[0])) {
          return 0;
        }
        double v114 = *(double *)__src;
        *(void *)&__dst[0] = *(void *)&__src[0];
        uint64_t v115 = _CalendarGregorian.firstWeekday.getter();
        uint64_t v116 = _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF((double *)v295, (double *)__dst, v115, (uint64_t)__src);
        if (v7) {
          goto LABEL_422;
        }
        uint64_t v117 = v116;
        double v118 = v114 + (double)v116 * 86400.0;
        Swift::Int_optional result = _CalendarGregorian.minimumDaysInFirstWeek.getter();
        if (v117 >= result) {
          double v119 = v118 + -604800.0;
        }
        else {
          double v119 = v118;
        }
        double v120 = floor((v12 - v119) / 86400.0 / 7.0);
        if ((~*(void *)&v120 & 0x7FF0000000000000) == 0)
        {
LABEL_519:
          __break(1u);
LABEL_520:
          __break(1u);
LABEL_521:
          __break(1u);
LABEL_522:
          __break(1u);
          goto LABEL_523;
        }
        if (v120 <= -9.22337204e18) {
          goto LABEL_521;
        }
        if (v120 >= 9.22337204e18)
        {
LABEL_523:
          __break(1u);
LABEL_524:
          __break(1u);
LABEL_525:
          __break(1u);
LABEL_526:
          __break(1u);
LABEL_527:
          __break(1u);
LABEL_528:
          __break(1u);
LABEL_529:
          __break(1u);
LABEL_530:
          __break(1u);
LABEL_531:
          __break(1u);
LABEL_532:
          __break(1u);
LABEL_533:
          __break(1u);
LABEL_534:
          __break(1u);
LABEL_535:
          __break(1u);
LABEL_536:
          __break(1u);
LABEL_537:
          __break(1u);
LABEL_538:
          __break(1u);
LABEL_539:
          __break(1u);
LABEL_540:
          __break(1u);
LABEL_541:
          __break(1u);
LABEL_542:
          __break(1u);
LABEL_543:
          __break(1u);
LABEL_544:
          __break(1u);
LABEL_545:
          __break(1u);
LABEL_546:
          __break(1u);
LABEL_547:
          __break(1u);
LABEL_548:
          __break(1u);
LABEL_549:
          __break(1u);
LABEL_550:
          __break(1u);
LABEL_551:
          __break(1u);
LABEL_552:
          __break(1u);
LABEL_553:
          __break(1u);
LABEL_554:
          __break(1u);
LABEL_555:
          __break(1u);
LABEL_556:
          __break(1u);
LABEL_557:
          __break(1u);
LABEL_558:
          __break(1u);
LABEL_559:
          __break(1u);
LABEL_560:
          __break(1u);
LABEL_561:
          __break(1u);
LABEL_562:
          __break(1u);
LABEL_563:
          __break(1u);
LABEL_564:
          __break(1u);
LABEL_565:
          __break(1u);
LABEL_566:
          __break(1u);
LABEL_567:
          __break(1u);
LABEL_568:
          __break(1u);
LABEL_569:
          __break(1u);
LABEL_570:
          __break(1u);
LABEL_571:
          __break(1u);
LABEL_572:
          __break(1u);
LABEL_573:
          __break(1u);
LABEL_574:
          __break(1u);
LABEL_575:
          __break(1u);
LABEL_576:
          __break(1u);
LABEL_577:
          __break(1u);
LABEL_578:
          __break(1u);
LABEL_579:
          __break(1u);
LABEL_580:
          __break(1u);
LABEL_581:
          __break(1u);
LABEL_582:
          __break(1u);
LABEL_583:
          __break(1u);
LABEL_584:
          __break(1u);
LABEL_585:
          __break(1u);
LABEL_586:
          __break(1u);
LABEL_587:
          __break(1u);
LABEL_588:
          __break(1u);
LABEL_589:
          __break(1u);
LABEL_590:
          __break(1u);
LABEL_591:
          __break(1u);
LABEL_592:
          __break(1u);
LABEL_593:
          __break(1u);
LABEL_594:
          __break(1u);
LABEL_595:
          __break(1u);
          goto LABEL_596;
        }
        if ((uint64_t)v120 <= 10) {
          uint64_t v121 = 0;
        }
        else {
          uint64_t v121 = (uint64_t)v120 - 109;
        }
        double v122 = v119;
        while (1)
        {
          uint64_t v8 = v121 + 1;
          if (__OFADD__(v121, 1)) {
            goto LABEL_466;
          }
          unsigned __int8 v291 = 11;
          from._time = v119;
          v295[0] = *(_OWORD *)(v5 + 104);
          swift_unknownObjectRetain();
          _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF(&v291, &from._time, v121 + 1, (double *)v295, (uint64_t)__src, (double *)__dst);
          swift_unknownObjectRelease();
          double v123 = *(double *)__dst;
          if (v122 >= *(double *)__dst) {
            break;
          }
          Swift::Int_optional result = specialized static Comparable.<= infix(_:_:)(*(double *)__dst, v12);
          ++v121;
          double v122 = v123;
          if ((result & 1) == 0) {
            return v8;
          }
        }
        *(void *)&long long v301 = *(void *)&__dst[0];
        *((double *)&v301 + 1) = v122;
        uint64_t v303 = 0;
        uint64_t v302 = 0;
        char v304 = 0x80;
        outlined init with take of PredicateCodableError(&v301, a4);
        specialized swift_willThrowTyped(&v301);
        return v8;
      }
LABEL_596:
      __break(1u);
LABEL_597:
      __break(1u);
LABEL_598:
      __break(1u);
LABEL_599:
      __break(1u);
LABEL_600:
      __break(1u);
LABEL_601:
      __break(1u);
LABEL_602:
      __break(1u);
LABEL_603:
      __break(1u);
LABEL_604:
      __break(1u);
LABEL_605:
      __break(1u);
LABEL_606:
      __break(1u);
LABEL_607:
      __break(1u);
LABEL_608:
      __break(1u);
LABEL_609:
      __break(1u);
      return result;
    case 5:
      goto LABEL_56;
    case 6:
      goto LABEL_61;
    case 9:
      uint64_t v8 = 0;
      switch(*(unsigned char *)result)
      {
        case 2:
LABEL_326:
          LOBYTE(v295[0]) = 2;
          *(double *)long long __src = v12;
          Swift::Int v217 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, *(Foundation::Date *)&a5);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v218 = swift_allocObject();
          uint64_t v219 = specialized static Array._adoptStorage(_:count:)(v218, 13);
          *(_OWORD *)uint64_t v220 = xmmword_1821037E0;
          *(_OWORD *)(v220 + 16) = xmmword_182205200;
          *(_OWORD *)(v220 + 32) = xmmword_182205210;
          *(_OWORD *)(v220 + 48) = xmmword_1821037E0;
          *(_OWORD *)(v220 + 64) = xmmword_182205200;
          *(_OWORD *)(v220 + 80) = xmmword_182205210;
          *(void *)(v220 + 96) = 4;
          Swift::Int_optional result = destructiveProjectEnumData for PredicateCodableError(v219, v220);
          BOOL v63 = __OFSUB__(v217, 1);
          Swift::Int v221 = v217 - 1;
          if (v63) {
            goto LABEL_482;
          }
          uint64_t v222 = result;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v221, 1, result);
          uint64_t v8 = *(void *)(v222 + 8 * v221 + 32);
LABEL_328:
          swift_bridgeObjectRelease();
          return v8;
        case 3:
        case 0x11:
          LOBYTE(__dst[0]) = 9;
          *(double *)long long v295 = v12;
          *(Foundation::Date_optional *)(&result - 1) = _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
          if (BYTE8(__src[0])) {
            return 0;
          }
          double v40 = floor((v12 - *(double *)__src) / 86400.0);
          if ((~*(void *)&v40 & 0x7FF0000000000000) == 0) {
            goto LABEL_479;
          }
          if (v40 <= -9.22337204e18) {
            goto LABEL_483;
          }
          if (v40 >= 9.22337204e18) {
            goto LABEL_484;
          }
          uint64_t v8 = (uint64_t)v40 + 1;
          if (!__OFADD__((uint64_t)v40, 1)) {
            return v8;
          }
          __break(1u);
LABEL_75:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 3;
          *(double *)long long v295 = v12;
          uint64_t v41 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v41;
          uint64_t v7 = 0;
          if (v42) {
            return v8;
          }
          LOBYTE(v295[0]) = 5;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v43);
          uint64_t v44 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_467;
          }
          uint64_t v45 = 60 * v44;
          if ((unsigned __int128)(v44 * (__int128)60) >> 64 != (60 * v44) >> 63) {
            goto LABEL_470;
          }
          uint64_t v46 = v45 + result;
          if (__OFADD__(v45, result)) {
            goto LABEL_473;
          }
          uint64_t v8 = v46 + 1;
          if (!__OFADD__(v46, 1)) {
            return v8;
          }
          __break(1u);
LABEL_83:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 3;
          *(double *)long long v295 = v12;
          uint64_t v47 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v47;
          uint64_t v7 = 0;
          if (v48) {
            return v8;
          }
          LOBYTE(v295[0]) = 6;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v49);
          uint64_t v50 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_468;
          }
          uint64_t v51 = 60 * v50;
          if ((unsigned __int128)(v50 * (__int128)60) >> 64 != (60 * v50) >> 63) {
            goto LABEL_471;
          }
          uint64_t v52 = v51 + result;
          if (__OFADD__(v51, result)) {
            goto LABEL_474;
          }
          uint64_t v8 = v52 + 1;
          if (!__OFADD__(v52, 1)) {
            return v8;
          }
          __break(1u);
LABEL_91:
          LOBYTE(__dst[0]) = 6;
          LOBYTE(from._time) = 3;
          *(double *)long long v295 = v12;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = result;
          uint64_t v7 = 0;
          if (v53) {
            return v8;
          }
          double v54 = (v12 - floor(v12) + (double)result + -1.0) * 1000000000.0;
          if ((~*(void *)&v54 & 0x7FF0000000000000) == 0) {
            goto LABEL_469;
          }
          if (v54 <= -9.22337204e18) {
            goto LABEL_472;
          }
          if (v54 >= 9.22337204e18) {
            goto LABEL_475;
          }
          uint64_t v8 = (uint64_t)v54 + 1;
          if (!__OFADD__((uint64_t)v54, 1)) {
            return v8;
          }
          __break(1u);
          goto LABEL_99;
        case 4:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 9;
          *(double *)long long v295 = v12;
          uint64_t v223 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v223;
          uint64_t v7 = 0;
          if (v224) {
            return v8;
          }
          LOBYTE(v295[0]) = 4;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v225);
          uint64_t v226 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_556;
          }
          uint64_t v227 = (unsigned __int128)(v226 * (__int128)24) >> 64;
          uint64_t v228 = 24 * v226;
          if (v227 != v228 >> 63) {
            goto LABEL_564;
          }
          BOOL v63 = __OFADD__(v228, result);
          uint64_t v229 = v228 + result;
          if (v63) {
            goto LABEL_572;
          }
          uint64_t v8 = v229 + 1;
          if (!__OFADD__(v229, 1)) {
            return v8;
          }
          __break(1u);
LABEL_337:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 9;
          *(double *)long long v295 = v12;
          uint64_t v230 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v230;
          uint64_t v7 = 0;
          if (v231) {
            return v8;
          }
          LOBYTE(v295[0]) = 5;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v232);
          uint64_t v233 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_557;
          }
          uint64_t v234 = 60 * v233;
          if ((unsigned __int128)(v233 * (__int128)60) >> 64 != (60 * v233) >> 63) {
            goto LABEL_565;
          }
          uint64_t v235 = v234 + result;
          if (__OFADD__(v234, result)) {
            goto LABEL_573;
          }
          uint64_t v8 = v235 + 1;
          if (!__OFADD__(v235, 1)) {
            return v8;
          }
          __break(1u);
LABEL_345:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 9;
          *(double *)long long v295 = v12;
          uint64_t v236 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v236;
          uint64_t v7 = 0;
          if (v237) {
            return v8;
          }
          LOBYTE(v295[0]) = 6;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, v238);
          uint64_t v239 = v8 - 1;
          if (__OFSUB__(v8, 1)) {
            goto LABEL_558;
          }
          uint64_t v240 = 60 * v239;
          if ((unsigned __int128)(v239 * (__int128)60) >> 64 != (60 * v239) >> 63) {
            goto LABEL_566;
          }
          uint64_t v241 = v240 + result;
          if (__OFADD__(v240, result)) {
            goto LABEL_574;
          }
          uint64_t v8 = v241 + 1;
          if (!__OFADD__(v241, 1)) {
            return v8;
          }
          __break(1u);
LABEL_353:
          LOBYTE(__dst[0]) = 6;
          LOBYTE(from._time) = 9;
          *(double *)long long v295 = v12;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = result;
          if (v242) {
            return v8;
          }
          a5 = (v12 - floor(v12) + (double)result + -1.0) * 1000000000.0;
          if ((~*(void *)&a5 & 0x7FF0000000000000) == 0) {
            goto LABEL_559;
          }
          if (a5 <= -9.22337204e18) {
            goto LABEL_567;
          }
          if (a5 >= 9.22337204e18) {
            goto LABEL_575;
          }
          uint64_t v8 = (uint64_t)a5 + 1;
          if (!__OFADD__((uint64_t)a5, 1)) {
            return v8;
          }
          __break(1u);
LABEL_361:
          char v124 = 1;
          break;
        case 5:
          goto LABEL_337;
        case 6:
          goto LABEL_345;
        case 7:
        case 8:
          goto LABEL_163;
        case 0xA:
        case 0xB:
          goto LABEL_179;
        case 0xD:
          goto LABEL_353;
        default:
          return v8;
      }
      goto LABEL_414;
    case 0xA:
    case 0xB:
LABEL_6:
      uint64_t v8 = 0;
      switch((int)v11)
      {
        case 3:
        case 7:
          LOBYTE(v295[0]) = 7;
          *(double *)long long __src = v12;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, *(Foundation::Date *)&a5);
          uint64_t v14 = result + 1;
          if (__OFADD__(result, 1))
          {
            __break(1u);
          }
          else
          {
            Swift::Int_optional result = _CalendarGregorian.firstWeekday.getter();
            uint64_t v15 = v14 - result;
            if (!__OFSUB__(v14, result))
            {
              if (v15 <= 0) {
                return v15 + 7;
              }
              else {
                return v14 - result;
              }
            }
          }
          __break(1u);
          goto LABEL_461;
        case 4:
          goto LABEL_107;
        case 5:
          goto LABEL_123;
        case 6:
          goto LABEL_131;
        case 13:
          goto LABEL_115;
        default:
          return v8;
      }
    case 0xC:
      uint64_t v8 = 0;
      switch(*(unsigned char *)result)
      {
        case 3:
        case 0x11:
          LOBYTE(__dst[0]) = 12;
          *(double *)long long v295 = v12;
          *(Foundation::Date_optional *)(&result - 1) = _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
          if (BYTE8(__src[0])) {
            return 0;
          }
          a5 = floor((v12 - *(double *)__src) / 86400.0);
          if ((~*(void *)&a5 & 0x7FF0000000000000) == 0) {
            goto LABEL_476;
          }
          if (a5 <= -9.22337204e18) {
            goto LABEL_477;
          }
          if (a5 >= 9.22337204e18) {
            goto LABEL_478;
          }
          uint64_t v11 = (uint64_t)a5;
          uint64_t v8 = (uint64_t)a5 + 1;
          if (!__OFADD__((uint64_t)a5, 1)) {
            return v8;
          }
          __break(1u);
          goto LABEL_50;
        case 4:
LABEL_239:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 12;
          *(double *)long long v295 = v12;
          uint64_t v146 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v7 = 0;
          if (v147) {
            return 0;
          }
          uint64_t v149 = v146;
          LOBYTE(__dst[0]) = 12;
          *(double *)long long v295 = v12;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, v148);
          if (BYTE8(__src[0])) {
            return 0;
          }
          LOBYTE(v295[0]) = 4;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, *(Foundation::Date *)&__src[0]);
          uint64_t v150 = v149 - 1;
          if (__OFSUB__(v149, 1)) {
            goto LABEL_581;
          }
          uint64_t v151 = (unsigned __int128)(v150 * (__int128)24) >> 64;
          uint64_t v152 = 24 * v150;
          if (v151 != v152 >> 63) {
            goto LABEL_584;
          }
          BOOL v63 = __OFADD__(v152, result);
          uint64_t v153 = v152 + result;
          if (v63) {
            goto LABEL_587;
          }
          uint64_t v8 = v153 + 1;
          if (!__OFADD__(v153, 1)) {
            return v8;
          }
          __break(1u);
LABEL_248:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 12;
          *(double *)long long v295 = v12;
          uint64_t v154 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v7 = 0;
          if (v155) {
            return 0;
          }
          uint64_t v157 = v154;
          LOBYTE(__dst[0]) = 12;
          *(double *)long long v295 = v12;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, v156);
          if (BYTE8(__src[0])) {
            return 0;
          }
          LOBYTE(v295[0]) = 5;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, *(Foundation::Date *)&__src[0]);
          uint64_t v158 = v157 - 1;
          if (__OFSUB__(v157, 1)) {
            goto LABEL_582;
          }
          uint64_t v159 = 60 * v158;
          if ((unsigned __int128)(v158 * (__int128)60) >> 64 != (60 * v158) >> 63) {
            goto LABEL_585;
          }
          uint64_t v160 = v159 + result;
          if (__OFADD__(v159, result)) {
            goto LABEL_588;
          }
          uint64_t v8 = v160 + 1;
          if (!__OFADD__(v160, 1)) {
            return v8;
          }
          __break(1u);
LABEL_257:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 12;
          *(double *)long long v295 = v12;
          uint64_t v161 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v7) {
            goto LABEL_422;
          }
          if (v162) {
            return 0;
          }
          uint64_t v164 = v161;
          LOBYTE(__dst[0]) = 12;
          *(double *)long long v295 = v12;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, v163);
          if (BYTE8(__src[0])) {
            return 0;
          }
          LOBYTE(v295[0]) = 6;
          Swift::Int_optional result = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, *(Foundation::Date *)&__src[0]);
          uint64_t v165 = v164 - 1;
          if (__OFSUB__(v164, 1)) {
            goto LABEL_583;
          }
          uint64_t v166 = 60 * v165;
          if ((unsigned __int128)(v165 * (__int128)60) >> 64 != (60 * v165) >> 63) {
            goto LABEL_586;
          }
          uint64_t v167 = v166 + result;
          if (__OFADD__(v166, result)) {
            goto LABEL_589;
          }
          uint64_t v8 = v167 + 1;
          if (!__OFADD__(v167, 1)) {
            return v8;
          }
          __break(1u);
LABEL_266:
          char v124 = 11;
          break;
        case 5:
          goto LABEL_248;
        case 6:
          goto LABEL_257;
        case 7:
        case 8:
          goto LABEL_155;
        case 0xB:
          goto LABEL_266;
        case 0xD:
          LOBYTE(__dst[0]) = 6;
          LOBYTE(from._time) = 12;
          *(double *)long long v295 = v12;
          Swift::Int_optional result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF(__dst, &from, v295, __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = result;
          if (v168) {
            return v8;
          }
          a5 = (v12 - floor(v12) + (double)result + -1.0) * 1000000000.0;
          if ((~*(void *)&a5 & 0x7FF0000000000000) == 0) {
            goto LABEL_549;
          }
          if (a5 <= -9.22337204e18) {
            goto LABEL_550;
          }
          if (a5 >= 9.22337204e18) {
            goto LABEL_551;
          }
          uint64_t v8 = (uint64_t)a5 + 1;
          if (!__OFADD__((uint64_t)a5, 1)) {
            return v8;
          }
          __break(1u);
LABEL_275:
          char v124 = 2;
          break;
        default:
          return v8;
      }
LABEL_414:
      LOBYTE(v295[0]) = v124;
      *(double *)long long __src = v12;
      return _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v295, *(Foundation::Date *)&a5);
    default:
      return v8;
  }
}

Swift::Int __swiftcall _CalendarGregorian.dateComponent(_:from:)(Foundation::Calendar::Component _, Foundation::Date from)
{
  uint64_t v4 = *(unsigned __int8 *)_;
  uint64_t v5 = *v2;
  uint64_t v9 = qword_182205470[(char)v4];
  uint64_t v8 = v5;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(v3 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v9, (double *)&v8, v7, v10);
  swift_unknownObjectRelease();
  Swift::Int result = outlined release of DateComponents((uint64_t)v10);
  switch(v4)
  {
    case 1:
      if (v14) {
        goto LABEL_33;
      }
      return v13;
    case 2:
      if (v16) {
        goto LABEL_33;
      }
      return v15;
    case 3:
      if (v18) {
        goto LABEL_33;
      }
      return v17;
    case 4:
      if (v22) {
        goto LABEL_33;
      }
      return v21;
    case 5:
      if (v24) {
        goto LABEL_33;
      }
      return v23;
    case 6:
      if (v26) {
        goto LABEL_33;
      }
      return v25;
    case 7:
      if (v30) {
        goto LABEL_33;
      }
      return v29;
    case 8:
      if (v32) {
        goto LABEL_33;
      }
      return v31;
    case 9:
      if (v34) {
        goto LABEL_33;
      }
      return v33;
    case 10:
      if (v36) {
        goto LABEL_33;
      }
      return v35;
    case 11:
      if (v38) {
        goto LABEL_33;
      }
      return v37;
    case 12:
      if (v40) {
        goto LABEL_33;
      }
      return v39;
    case 13:
      if (v28) {
        goto LABEL_33;
      }
      return v27;
    case 14:
    case 15:
    case 16:
      goto LABEL_33;
    case 17:
      if (v20) {
        goto LABEL_33;
      }
      Swift::Int result = v19;
      break;
    default:
      if (v12) {
LABEL_33:
      }
        __break(1u);
      else {
        Swift::Int result = v11;
      }
      break;
  }
  return result;
}

void *initializeWithCopy for TermOfAddress._TermOfAddress(void *a1, void *a2)
{
  unint64_t v4 = a2[12];
  if (v4 >= 0xFFFFFFFF)
  {
    uint64_t v5 = a2[1];
    if (v5)
    {
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = a2[3];
      a1[2] = a2[2];
      a1[3] = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v7 = a2[5];
      if (v7) {
        goto LABEL_4;
      }
    }
    else
    {
      long long v15 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v15;
      uint64_t v7 = a2[5];
      if (v7)
      {
LABEL_4:
        a1[4] = a2[4];
        a1[5] = v7;
        uint64_t v8 = a2[7];
        a1[6] = a2[6];
        a1[7] = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v9 = a2[9];
        if (v9)
        {
LABEL_5:
          a1[8] = a2[8];
          a1[9] = v9;
          uint64_t v10 = a2[10];
          uint64_t v11 = a2[11];
          a1[10] = v10;
          a1[11] = v11;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_10:
          a1[12] = v4;
          swift_bridgeObjectRetain();
          return a1;
        }
LABEL_9:
        long long v17 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v17;
        goto LABEL_10;
      }
    }
    long long v16 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v16;
    uint64_t v9 = a2[9];
    if (v9) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  long long v12 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v12;
  a1[12] = a2[12];
  long long v13 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v13;
  long long v14 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v14;
  return a1;
}

uint64_t type metadata completion function for PredicateExpressions.Arithmetic()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t _CalendarAutoupdating.dateComponents(_:from:in:)(uint64_t *a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  long long v9 = *a3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v12);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  uint64_t v6 = *((void *)&v12 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = v3;
  uint64_t v10 = v4;
  long long v12 = v9;
  (*(void (**)(uint64_t *, uint64_t *, long long *, uint64_t, uint64_t))(v6 + 184))(&v11, &v10, &v12, ObjectType, v6);

  return swift_unknownObjectRelease();
}

uint64_t _NSSwiftCalendar._components(in:from:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *a2;
  uint64_t v8 = *(os_unfair_lock_s **)&v3[OBJC_IVAR____NSSwiftCalendar__lock];
  long long v9 = v8 + 4;
  uint64_t v10 = v8 + 8;
  os_unfair_lock_lock(v8 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v9, &v23);
  os_unfair_lock_unlock(v10);
  v22[0] = *a1;
  v22[1] = v23;
  uint64_t v21 = v7;
  Calendar.dateComponents(in:from:)(v22, (double *)&v21, a3);
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftCalendar();
  uint64_t v11 = swift_dynamicCastClass();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + OBJC_IVAR____NSSwiftCalendar__lock);
    long long v13 = (_OWORD *)(v12 + 16);
    long long v14 = (os_unfair_lock_s *)(v12 + 32);
    id v15 = v4;
    os_unfair_lock_lock(v14);
    closure #1 in _NSSwiftCalendar.calendar.getter(v13, &v23);
    os_unfair_lock_unlock(v14);

    uint64_t v17 = *((void *)&v23 + 1);
    uint64_t v16 = v23;
  }
  else
  {
    type metadata accessor for _CalendarBridged();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v4;
    uint64_t v17 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, (void (*)(uint64_t))type metadata accessor for _CalendarBridged);
    id v18 = v4;
  }
  swift_unknownObjectRelease();
  *a3 = v16;
  a3[1] = v17;
  uint64_t result = a3[2];
  if (result)
  {
    uint64_t v20 = a3[3];
    *(void *)&long long v23 = a3[2];
    *((void *)&v23 + 1) = v20;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter((uint64_t *)&v23);
  }
  return result;
}

uint64_t Calendar.dateComponents(in:from:)@<X0>(long long *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  double v6 = *a2;
  uint64_t v7 = unk_1ECA4B6F8;
  if ((unk_1ECA4B6F8 & ~qword_1ECA4B6F0) == 0) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v7 | qword_1ECA4B6F0;
  uint64_t v9 = qword_1ECA4B700;
  if ((qword_1ECA4B700 & ~v8) == 0) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v9 | v8;
  if ((unk_1ECA4B708 & ~v10) != 0) {
    uint64_t v11 = unk_1ECA4B708;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v11 | v10;
  uint64_t v13 = qword_1ECA4B710;
  if ((qword_1ECA4B710 & ~v12) == 0) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v13 | v12;
  if ((unk_1ECA4B718 & ~v14) != 0) {
    uint64_t v15 = unk_1ECA4B718;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = v15 | v14;
  uint64_t v17 = qword_1ECA4B720;
  if ((qword_1ECA4B720 & ~v16) == 0) {
    uint64_t v17 = 0;
  }
  uint64_t v18 = v17 | v16;
  if ((unk_1ECA4B728 & ~v18) != 0) {
    uint64_t v19 = unk_1ECA4B728;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = v19 | v18;
  uint64_t v21 = qword_1ECA4B730;
  if ((qword_1ECA4B730 & ~v20) == 0) {
    uint64_t v21 = 0;
  }
  uint64_t v22 = v21 | v20;
  if ((unk_1ECA4B738 & ~v22) != 0) {
    uint64_t v23 = unk_1ECA4B738;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = v23 | v22;
  uint64_t v25 = qword_1ECA4B740;
  if ((qword_1ECA4B740 & ~v24) == 0) {
    uint64_t v25 = 0;
  }
  uint64_t v26 = v25 | v24;
  if ((unk_1ECA4B748 & ~v26) != 0) {
    uint64_t v27 = unk_1ECA4B748;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = v27 | v26;
  uint64_t v29 = qword_1ECA4B750;
  if ((qword_1ECA4B750 & ~v28) == 0) {
    uint64_t v29 = 0;
  }
  uint64_t v30 = v29 | v28;
  if ((unk_1ECA4B758 & ~v30) != 0) {
    uint64_t v31 = unk_1ECA4B758;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = v31 | v30;
  uint64_t v33 = qword_1ECA4B760;
  if ((qword_1ECA4B760 & ~v32) == 0) {
    uint64_t v33 = 0;
  }
  uint64_t v34 = v33 | v32;
  uint64_t v35 = *v3;
  uint64_t v36 = v3[1];
  if ((unk_1ECA4B768 & ~v34) != 0) {
    uint64_t v37 = unk_1ECA4B768;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v38 = v37 | v34;
  uint64_t v39 = qword_1ECA4B770;
  if ((qword_1ECA4B770 & ~v38) == 0) {
    uint64_t v39 = 0;
  }
  uint64_t v46 = v39 | v38;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v40 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v45 = v40;
  long long v44 = *a1;
  (*(void (**)(uint64_t *, double *, long long *, uint64_t, uint64_t))(v36 + 184))(&v46, &v45, &v44, ObjectType, v36);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *a3 = v35;
  a3[1] = v36;
  uint64_t result = a3[2];
  if (result)
  {
    uint64_t v43 = a3[3];
    *(void *)&long long v44 = a3[2];
    *((void *)&v44 + 1) = v43;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter((uint64_t *)&v44);
  }
  return result;
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:in:) in conformance _CalendarAutoupdating(uint64_t *a1, uint64_t *a2, long long *a3)
{
  return _CalendarAutoupdating.dateComponents(_:from:in:)(a1, a2, a3);
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.processAttributes(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v20)(long long *__return_ptr, char *, char *);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char **v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  void (*v61)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  long long *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char **v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  unint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t, uint64_t);
  void (*v93)(char *, char *, uint64_t);
  void (**v94)(char *, uint64_t);
  unint64_t v95;
  __CFString *v96;
  id v97;
  uint64_t v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __CFString *v105;
  id v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  double v117;
  char *v118;
  void (*v119)(char *, char *, uint64_t, double);
  char *v120;
  char *v121;
  uint64_t *v122;
  void (*v123)(long long *__return_ptr, char *, char *);
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  char v126;
  char v127;
  void (**v128)(char *, uint64_t);
  double v129;
  uint64_t v130;
  uint64_t v131;
  void v132[2];
  __CFString *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  char *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  int64_t v141;
  void *v142;
  void *v143;
  void (**v144)(char *, uint64_t);
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  void *v155;
  unsigned char *v156;
  char *v157;
  long long *v158;
  uint64_t v159;
  int64_t v160;
  uint64_t *v161;
  long long v162;
  long long v163;
  _OWORD v164[2];
  long long v165;
  long long v166;
  long long v167;
  long long v168;
  uint64_t v169;
  long long v170;
  uint64_t v171;
  void v172[2];
  void v173[6];
  uint64_t v174;
  void v175[4];
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  long long v184;
  unsigned char v185[32];
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  long long v189;

  uint64_t v3 = v2;
  v132[0] = a2;
  Foundation::Date v148 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v189 = MEMORY[0x1E4FBC868];
  uint64_t v4 = *(void *)(a1 + 64);
  Foundation::Date v140 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  uint64_t v8 = direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes;
  uint64_t v141 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v150 = &v188;
  uint64_t v151 = direct field offset for _AttributedStringFromMarkdownCreatorConcrete.attributeTable;
  uint64_t v9 = v185;
  uint64_t v138 = v175;
  uint64_t v161 = &v174;
  uint64_t v10 = v173;
  uint64_t v158 = &v166;
  char v133 = @"NSCocoaErrorDomain";
  uint64_t v149 = &v171;
  uint64_t v152 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v135 = 0;
  char v147 = MEMORY[0x1E4FBC840] + 8;
  v132[1] = MEMORY[0x1E4FBC838] + 8;
  double v145 = v8;
  uint64_t v146 = v3;
  Foundation::Date v156 = v185;
  uint64_t v154 = v173;
  while (1)
  {
    if (v7)
    {
      uint64_t v159 = (v7 - 1) & v7;
      uint64_t v160 = v12;
      uint64_t v23 = __clz(__rbit64(v7)) | (v12 << 6);
      goto LABEL_20;
    }
    uint64_t v24 = __OFADD__(v12, 1);
    uint64_t v25 = v12 + 1;
    if (v24)
    {
      __break(1u);
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    if (v25 >= v141) {
      goto LABEL_102;
    }
    uint64_t v26 = *(void *)(v140 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_19:
    uint64_t v159 = (v26 - 1) & v26;
    uint64_t v160 = v25;
    uint64_t v23 = __clz(__rbit64(v26)) + (v25 << 6);
LABEL_20:
    uint64_t v28 = *(void *)(v152 + 56);
    uint64_t v29 = (uint64_t *)(*(void *)(v152 + 48) + 16 * v23);
    uint64_t v31 = v29[1];
    uint64_t v186 = *v29;
    uint64_t v30 = v186;
    uint64_t v187 = v31;
    uint64_t v32 = v150;
    outlined init with copy of Any(v28 + 32 * v23, (uint64_t)v150);
    *(void *)&Foundation::Date v184 = v30;
    *((void *)&v184 + 1) = v31;
    outlined init with take of Any(v32, v9);
    if (*((unsigned char *)v3 + v8))
    {
      swift_bridgeObjectRetain_n();
    }
    else
    {
      uint64_t v33 = one-time initialization token for name;
      swift_bridgeObjectRetain_n();
      if (v33 != -1) {
        swift_once();
      }
      uint64_t v34 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
      uint64_t v35 = qword_1E8ED5E58;
      v175[0] = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
      v175[1] = qword_1E8ED5E58;
      uint64_t v36 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v36 != -1) {
        swift_once();
      }
      uint64_t v37 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
      uint64_t v38 = qword_1E8ED5EE0;
      v175[2] = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
      v175[3] = qword_1E8ED5EE0;
      uint64_t v39 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v39 != -1) {
        swift_once();
      }
      uint64_t v176 = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
      char v177 = qword_1E8ED5E98;
      double v40 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v40 != -1) {
        swift_once();
      }
      Foundation::Date v178 = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
      uint64_t v179 = qword_1E8ED5EB0;
      uint64_t v41 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v41 != -1) {
        swift_once();
      }
      uint64_t v180 = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
      uint64_t v181 = qword_1E8ED5E80;
      char v42 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v42 != -1) {
        swift_once();
      }
      uint64_t v182 = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
      char v183 = qword_1E8ED5B58;
      if (v34 == v30 && v35 == v31
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v37 == v30 && v38 == v31
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v176 == v30 && v177 == v31
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v178 == v30 && v179 == v31
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v180 == v30 && v181 == v31
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v182 == v30 && v183 == v31
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_arrayDestroy();
        *((unsigned char *)v3 + v8) = 1;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_arrayDestroy();
      }
      uint64_t v9 = v156;
      uint64_t v10 = v154;
    }
    uint64_t v43 = *(void *)((char *)v3 + v151);
    v173[4] = v30;
    v173[5] = v31;
    outlined init with copy of Any((uint64_t)v9, (uint64_t)v161);
    if (*(void *)(v43 + 16))
    {
      swift_bridgeObjectRetain();
      long long v44 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31);
      if (v45)
      {
        uint64_t v46 = (char **)(*(void *)(v43 + 56) + 16 * v44);
        char v48 = *v46;
        uint64_t v47 = v46[1];
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }
      swift_bridgeObjectRelease();
    }
    char v48 = 0;
    uint64_t v47 = 0;
LABEL_59:
    v172[0] = v30;
    v172[1] = v31;
    outlined init with copy of Any((uint64_t)v9, (uint64_t)v10);
    if (v48)
    {
      Foundation::Date v49 = (uint64_t)v9;
      outlined destroy of (key: String, value: Any)((uint64_t)v172);
      uint64_t v50 = (uint64_t)v158;
      goto LABEL_61;
    }
    swift_bridgeObjectRetain();
    char v82 = specialized static AttributeScope.scopeDescription.getter();
    swift_bridgeObjectRelease();
    *(void *)&uint64_t v165 = v30;
    *((void *)&v165 + 1) = v31;
    Foundation::Date v83 = (uint64_t)v158;
    outlined init with copy of Any((uint64_t)v10, (uint64_t)v158);
    if (!v82[2])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of (key: String, value: Any)((uint64_t)v172);
      uint64_t v87 = v83;
LABEL_81:
      __swift_destroy_boxed_opaque_existential_1(v87);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
      goto LABEL_5;
    }
    uint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31);
    if ((v85 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of (key: String, value: Any)((uint64_t)v172);
      uint64_t v87 = (uint64_t)v158;
      goto LABEL_81;
    }
    Foundation::Date v49 = (uint64_t)v9;
    uint64_t v86 = (char **)(v82[7] + 16 * v84);
    char v48 = *v86;
    uint64_t v47 = v86[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (key: String, value: Any)((uint64_t)v172);
    uint64_t v50 = (uint64_t)v158;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
LABEL_61:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
    uint64_t v51 = *(void *)(v148 + 88);
    *(void *)&uint64_t v165 = *(void *)(v148 + 80);
    *((void *)&v165 + 1) = v48;
    *(void *)&uint64_t v166 = v51;
    *((void *)&v166 + 1) = v47;
    uint64_t v52 = type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox();
    char v155 = v132;
    char v53 = *(char **)(v52 - 8);
    MEMORY[0x1F4188790](v52);
    uint64_t v157 = (char *)v132 - v54;
    uint64_t v165 = v184;
    outlined init with copy of Any(v49, v50);
    char v55 = type metadata accessor for Optional();
    double v56 = v47;
    uint64_t v57 = *(void *)(v55 - 8);
    MEMORY[0x1F4188790](v55);
    Foundation::Date v59 = (char *)v132 - v58;
    uint64_t v60 = swift_dynamicCast();
    uint64_t v61 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v53 + 7);
    if (v60)
    {
      v61(v59, 0, 1, v52);
      char v144 = (void (**)(char *, uint64_t))v53;
      (*((void (**)(char *, char *, uint64_t))v53 + 4))(v157, v59, v52);
      uint64_t v153 = (void *)*((void *)&v184 + 1);
      uint64_t v143 = (void *)v184;
      char v170 = v184;
      outlined init with copy of Any((uint64_t)v156, (uint64_t)v149);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v142 = v132;
      uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
      double v15 = MEMORY[0x1F4188790](AssociatedTypeWitness);
      uint64_t v17 = (char *)v132 - v16;
      uint64_t v18 = *(void (**)(char *, char *, uint64_t, double))(v14 + 16);
      v18((char *)v132 - v16, v157, AssociatedTypeWitness, v15);
      *((void *)&v163 + 1) = AssociatedTypeWitness;
      *(void *)&v164[0] = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v162);
      ((void (*)(uint64_t *, char *, uint64_t))v18)(boxed_opaque_existential_1, v17, AssociatedTypeWitness);
      uint64_t v20 = (void (*)(long long *__return_ptr, char *, char *))*((void *)v56 + 4);
      swift_bridgeObjectRetain();
      v20(&v165, v48, v56);
      uint64_t v9 = v156;
      *(_OWORD *)((char *)v164 + 8) = v165;
      BYTE8(v164[1]) = (*((uint64_t (**)(char *, char *))v56 + 5))(v48, v56) & 1;
      uint64_t v21 = (*((uint64_t (**)(char *, char *))v56 + 6))(v48, v56);
      uint64_t v22 = AssociatedTypeWitness;
      uint64_t v3 = v146;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v22);
      uint64_t v169 = v21;
      uint64_t v167 = v164[0];
      char v168 = v164[1];
      uint64_t v165 = v162;
      uint64_t v166 = v163;
      specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v165, (unint64_t)v143, (unint64_t)v153);
      swift_bridgeObjectRelease();
      v144[1](v157, v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
      uint64_t v10 = v154;
      uint64_t v8 = v145;
      goto LABEL_5;
    }
    v61(v59, 1, 1, v52);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v55);
    uint64_t v137 = v56;
    uint64_t v157 = v48;
    uint64_t v62 = swift_getAssociatedTypeWitness();
    char v155 = *(void **)(v62 - 8);
    BOOL v63 = v155[8];
    MEMORY[0x1F4188790](v62);
    uint64_t v136 = (char *)v132 - v64;
    char v65 = type metadata accessor for Optional();
    uint64_t v142 = *(void **)(v65 - 8);
    uint64_t v143 = (void *)v65;
    double v66 = v142[8];
    MEMORY[0x1F4188790](v65);
    char v144 = (void (**)(char *, uint64_t))((char *)v132 - v67);
    uint64_t v165 = v184;
    uint64_t v9 = v156;
    char v68 = v158;
    outlined init with copy of Any((uint64_t)v156, (uint64_t)v158);
    Foundation::Date v69 = *((void *)&v167 + 1);
    uint64_t v70 = __swift_project_boxed_opaque_existential_1(v68, *((uint64_t *)&v167 + 1));
    uint64_t result = _swift_isClassOrObjCExistentialType();
    uint64_t v71 = *(void *)(*(void *)(v69 - 8) + 64);
    uint64_t v153 = v132;
    if (result)
    {
      if (v71 != 8) {
        goto LABEL_104;
      }
      uint64_t v72 = *v70;
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v129 = MEMORY[0x1F4188790](result);
      (*(void (**)(char *, uint64_t *, uint64_t, double))(v131 + 16))((char *)v132 - ((v130 + 15) & 0xFFFFFFFFFFFFFFF0), v70, v69, v129);
      uint64_t v72 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    uint64_t v73 = v157;
    char v74 = swift_conformsToProtocol2();
    if (v74) {
      Foundation::Date v75 = v74;
    }
    else {
      Foundation::Date v75 = 0;
    }
    if (!v74) {
      uint64_t v73 = 0;
    }
    if (v73)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v76 = swift_dynamicCastUnknownClass();
      if (!v76)
      {
        Swift::Int v96 = v133;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
        uint64_t v97 = objc_allocWithZone((Class)NSError);
        char v98 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        char v99 = objc_msgSend(v97, sel_initWithDomain_code_userInfo_, v98, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v100 = objc_msgSend(v99, sel_domain);
        uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
        char v103 = v102;

        if (v101 == static String._unconditionallyBridgeFromObjectiveC(_:)(v96) && v103 == v104)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v126 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v126 & 1) == 0) {
            goto LABEL_106;
          }
        }
        swift_willThrow();
        swift_unknownObjectRelease();

        uint64_t v135 = 0;
        uint64_t v8 = v145;
        uint64_t v3 = v146;
        unint64_t v7 = v159;
        int64_t v12 = v160;
        goto LABEL_99;
      }
      uint64_t v77 = v76;
      Foundation::Date v134 = v72;
      char v139 = v132;
      uint64_t v78 = swift_getAssociatedTypeWitness();
      char v79 = MEMORY[0x1F4188790](v78);
      double v80 = v77;
      uint64_t v81 = v135;
      (*(void (**)(uint64_t, char *, uint64_t, double))(v75 + 32))(v80, v73, v75, v79);
      if (!v81)
      {
        uint64_t v135 = 0;
        unint64_t v94 = v144;
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v95 = (unint64_t)v155;
LABEL_93:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
        (*(void (**)(void (**)(char *, uint64_t), void, uint64_t, uint64_t))(v95 + 56))(v94, 0, 1, v62);
        double v114 = v136;
        (*(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v95 + 32))(v136, v94, v62);
        uint64_t v115 = *((void *)&v184 + 1);
        char v155 = (void *)v184;
        char v170 = v184;
        uint64_t v116 = outlined init with copy of Any((uint64_t)v9, (uint64_t)v149);
        uint64_t v153 = v132;
        uint64_t v117 = MEMORY[0x1F4188790](v116);
        double v118 = (char *)v132 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
        double v119 = *(void (**)(char *, char *, uint64_t, double))(v95 + 16);
        v119(v118, v114, v62, v117);
        *((void *)&v163 + 1) = v62;
        double v120 = v137;
        uint64_t v121 = v157;
        *(void *)&v164[0] = swift_getAssociatedConformanceWitness();
        double v122 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v162);
        ((void (*)(uint64_t *, char *, uint64_t))v119)(v122, v118, v62);
        double v123 = (void (*)(long long *__return_ptr, char *, char *))*((void *)v120 + 4);
        swift_bridgeObjectRetain();
        v123(&v165, v121, v120);
        uint64_t v9 = v156;
        *(_OWORD *)((char *)v164 + 8) = v165;
        BYTE8(v164[1]) = (*((uint64_t (**)(char *, char *))v120 + 5))(v121, v120) & 1;
        char v124 = (*((uint64_t (**)(char *, char *))v120 + 6))(v121, v120);
        uint64_t v125 = *(void (**)(char *, uint64_t))(v95 + 8);
        v125(v118, v62);
        uint64_t v169 = v124;
        uint64_t v167 = v164[0];
        char v168 = v164[1];
        uint64_t v165 = v162;
        uint64_t v166 = v163;
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v165, (unint64_t)v155, v115);
        swift_bridgeObjectRelease();
        v125(v114, v62);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
        uint64_t v8 = v145;
        uint64_t v3 = v146;
        uint64_t v10 = v154;
LABEL_5:
        unint64_t v7 = v159;
        int64_t v12 = v160;
        goto LABEL_6;
      }

      swift_unknownObjectRelease();
    }
    else
    {
      char v139 = v132;
      MEMORY[0x1F4188790](v74);
      *(void *)&char v162 = v72;
      MEMORY[0x1F4188790](v88);
      char v89 = (char *)v132 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_unknownObjectRetain();
      Foundation::Date v90 = swift_dynamicCast();
      Swift::Int v91 = (unint64_t)v155;
      char v92 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v155[7];
      if (v90)
      {
        v92(v89, 0, 1, v62);
        uint64_t v143 = v132;
        uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
        v93((char *)v132 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0), v89, v62);
        unint64_t v94 = v144;
        v93((char *)v144, (char *)v132 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0), v62);
        uint64_t v9 = v156;
        swift_unknownObjectRelease();
        uint64_t v95 = v91;
        goto LABEL_93;
      }
      v92(v89, 1, 1, v62);
      ((void (*)(char *, void *))v142[1])(v89, v143);
      Swift::Int v105 = v133;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
      char v106 = objc_allocWithZone((Class)NSError);
      uint64_t v107 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v108 = objc_msgSend(v106, sel_initWithDomain_code_userInfo_, v107, 4866, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v109 = objc_msgSend(v108, sel_domain);
      uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
      char v112 = v111;

      if (v110 == static String._unconditionallyBridgeFromObjectiveC(_:)(v105) && v112 == v113)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        Foundation::Date v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v127 & 1) == 0) {
          goto LABEL_107;
        }
      }
      swift_willThrow();
      swift_unknownObjectRelease();
    }
    uint64_t v135 = 0;
    uint64_t v8 = v145;
    uint64_t v3 = v146;
    unint64_t v7 = v159;
    int64_t v12 = v160;
LABEL_99:
    uint64_t v128 = v144;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
    ((void (*)(void (**)(char *, uint64_t), uint64_t, uint64_t, uint64_t))v155[7])(v128, 1, 1, v62);
    ((void (*)(void, void *))v142[1])(v128, v143);
    uint64_t v10 = v154;
LABEL_6:
    uint64_t result = outlined destroy of (key: String, value: Any)((uint64_t)&v184);
  }
  uint64_t v27 = v25 + 1;
  if (v25 + 1 >= v141) {
    goto LABEL_102;
  }
  uint64_t v26 = *(void *)(v140 + 8 * v27);
  if (v26) {
    goto LABEL_18;
  }
  uint64_t v27 = v25 + 2;
  if (v25 + 2 >= v141) {
    goto LABEL_102;
  }
  uint64_t v26 = *(void *)(v140 + 8 * v27);
  if (v26) {
    goto LABEL_18;
  }
  uint64_t v27 = v25 + 3;
  if (v25 + 3 >= v141)
  {
LABEL_102:
    uint64_t result = swift_release();
    *(_OWORD *)v132[0] = v189;
    return result;
  }
  uint64_t v26 = *(void *)(v140 + 8 * v27);
  if (v26)
  {
LABEL_18:
    uint64_t v25 = v27;
    goto LABEL_19;
  }
  while (1)
  {
    uint64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v141) {
      goto LABEL_102;
    }
    uint64_t v26 = *(void *)(v140 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_19;
    }
  }
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
  return result;
}

uint64_t outlined destroy of (key: String, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *specialized static AttributeScope.scopeDescription.getter()
{
  if (one-time initialization token for _loadedScopeCache != -1) {
    goto LABEL_228;
  }
LABEL_2:
  uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
  unint64_t v1 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
  swift_retain();
  os_unfair_lock_lock(v1);
  uint64_t v2 = 0;
  specialized closure #1 in static AttributeScope.scopeDescription.getter((uint64_t *)&v215);
  os_unfair_lock_unlock(v1);
  swift_release();
  uint64_t v3 = (void *)v215;
  if ((void)v215) {
    return v3;
  }
  unint64_t v4 = 0;
  uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v213 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
LABEL_4:
    unint64_t v5 = v4;
    swift_getKeyPath();
    uint64_t v6 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    uint64_t v7 = swift_release();
    if (v5 == *(_DWORD *)(*(void *)((char *)&full type metadata for AttributeScopes.FoundationAttributes + v6 + 16)
                         + 20))
    {
      uint64_t v195 = (os_unfair_lock_s *)v0[500];
      MEMORY[0x1F4188790](v7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v195 + 10);
      partial apply for specialized closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v195[4]);
      os_unfair_lock_unlock(v195 + 10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return v3;
    }
    swift_getKeyPath();
    uint64_t v8 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_release();
    if (v5 >= *(unsigned int *)(*(void *)((char *)&full type metadata for AttributeScopes.FoundationAttributes
                                           + v8
                                           + 16)
                               + 20))
    {
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      swift_once();
      goto LABEL_2;
    }
    if (static Metadata.Kind.tuple.getter() == 512)
    {
      MEMORY[0x185300FE0](&type metadata for AttributeScopes.FoundationAttributes);
      TupleMetadata.Elements.subscript.getter();
      uint64_t v9 = TupleMetadata.Elements.Element.metadata.getter();
    }
    else
    {
      uint64_t v10 = TypeMetadata.descriptor.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      int v11 = *(_DWORD *)(v10 + 16);
      long long v215 = *(_OWORD *)v10;
      LODWORD(v216) = v11;
      swift_getAtKeyPath();
      swift_release();
      uint64_t v12 = FieldDescriptor.subscript.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      int v13 = *(_DWORD *)(v12 + 8);
      *(void *)&long long v215 = *(void *)v12;
      DWORD2(v215) = v13;
      swift_getAtKeyPath();
      swift_release();
      uint64_t v9 = MangledTypeReference.standardSubstitution.getter();
      if (!v9) {
        uint64_t v9 = TypeMetadata._resolve(_:)();
      }
    }
    uint64_t v14 = swift_conformsToProtocol2();
    uint64_t v15 = v14 ? v14 : 0;
    uint64_t v16 = v14 ? v9 : 0;
    if (!v16) {
      break;
    }
    uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(v16, v15);
    uint64_t v72 = v71;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v215 = v3;
    uint64_t v211 = v70;
    unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v72);
    uint64_t v76 = v3[2];
    BOOL v77 = (v74 & 1) == 0;
    uint64_t v78 = v76 + v77;
    if (__OFADD__(v76, v77))
    {
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
      goto LABEL_236;
    }
    if (v3[3] < v78)
    {
      char v207 = v74;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v78, isUniquelyReferenced_nonNull_native);
      uint64_t v3 = (void *)v215;
      uint64_t v79 = v70;
      unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v72);
      if ((v207 & 1) != (v81 & 1)) {
        goto LABEL_239;
      }
      unint64_t v75 = v80;
      if ((v207 & 1) == 0) {
        goto LABEL_76;
      }
      goto LABEL_73;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v79 = v70;
      if ((v74 & 1) == 0) {
        goto LABEL_76;
      }
LABEL_73:
      char v82 = (uint64_t *)(v3[7] + 16 * v75);
      *char v82 = v16;
      v82[1] = v15;
      goto LABEL_78;
    }
    char v209 = v74;
    uint64_t v201 = v2;
    unint64_t v205 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
    uint64_t v157 = static _DictionaryStorage.copy(original:)();
    uint64_t v158 = v157;
    if (!v3[2]) {
      goto LABEL_181;
    }
    uint64_t result = (void *)(v157 + 64);
    uint64_t v160 = v3 + 8;
    unint64_t v161 = (unint64_t)((1 << *(unsigned char *)(v158 + 32)) + 63) >> 6;
    if ((void *)v158 != v3 || result >= &v160[v161]) {
      uint64_t result = memmove(result, v3 + 8, 8 * v161);
    }
    int64_t v162 = 0;
    *(void *)(v158 + 16) = v3[2];
    uint64_t v163 = 1 << *((unsigned char *)v3 + 32);
    if (v163 < 64) {
      uint64_t v164 = ~(-1 << v163);
    }
    else {
      uint64_t v164 = -1;
    }
    unint64_t v165 = v164 & v3[8];
    int64_t v166 = (unint64_t)(v163 + 63) >> 6;
    while (1)
    {
      if (v165)
      {
        unint64_t v167 = __clz(__rbit64(v165));
        v165 &= v165 - 1;
        unint64_t v168 = v167 | (v162 << 6);
        goto LABEL_154;
      }
      BOOL v50 = __OFADD__(v162++, 1);
      if (v50) {
        goto LABEL_235;
      }
      if (v162 >= v166) {
        goto LABEL_181;
      }
      unint64_t v175 = v160[v162];
      if (!v175) {
        break;
      }
LABEL_176:
      unint64_t v165 = (v175 - 1) & v175;
      unint64_t v168 = __clz(__rbit64(v175)) + (v162 << 6);
LABEL_154:
      uint64_t v169 = 16 * v168;
      char v170 = (uint64_t *)(v3[6] + v169);
      uint64_t v172 = *v170;
      uint64_t v171 = v170[1];
      long long v173 = *(_OWORD *)(v3[7] + v169);
      uint64_t v174 = (void *)(*(void *)(v158 + 48) + v169);
      *uint64_t v174 = v172;
      v174[1] = v171;
      *(_OWORD *)(*(void *)(v158 + 56) + v169) = v173;
      uint64_t result = (void *)swift_bridgeObjectRetain();
    }
    int64_t v176 = v162 + 1;
    if (v162 + 1 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 2;
    if (v162 + 2 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 3;
    if (v162 + 3 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 4;
    if (v162 + 4 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 5;
    if (v162 + 5 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 6;
    if (v162 + 6 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 7;
    if (v162 + 7 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 8;
    if (v162 + 8 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175)
    {
LABEL_175:
      int64_t v162 = v176;
      goto LABEL_176;
    }
    while (1)
    {
      int64_t v162 = v176 + 1;
      if (__OFADD__(v176, 1)) {
        goto LABEL_240;
      }
      if (v162 >= v166) {
        break;
      }
      unint64_t v175 = v160[v162];
      ++v176;
      if (v175) {
        goto LABEL_176;
      }
    }
LABEL_181:
    swift_bridgeObjectRelease();
    uint64_t v2 = v201;
    unint64_t v5 = v205;
    uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
    uint64_t v3 = (void *)v158;
    uint64_t v79 = v211;
    if (v209) {
      goto LABEL_73;
    }
LABEL_76:
    v3[(v75 >> 6) + 8] |= 1 << v75;
    Foundation::Date v83 = (uint64_t *)(v3[6] + 16 * v75);
    *Foundation::Date v83 = v79;
    v83[1] = v72;
    uint64_t v84 = (uint64_t *)(v3[7] + 16 * v75);
    *uint64_t v84 = v16;
    v84[1] = v15;
    uint64_t v85 = v3[2];
    BOOL v50 = __OFADD__(v85, 1);
    uint64_t v86 = v85 + 1;
    if (v50) {
      goto LABEL_230;
    }
    void v3[2] = v86;
    swift_bridgeObjectRetain();
LABEL_78:
    unint64_t v4 = v5 + 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v87 = swift_conformsToProtocol2();
    if (v87) {
      uint64_t v88 = v87;
    }
    else {
      uint64_t v88 = 0;
    }
    if (!v87) {
      uint64_t v16 = 0;
    }
    if (v16)
    {
      uint64_t v140 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 24))(v16, v88);
      uint64_t v142 = v141;
      char v143 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v215 = v213;
      uint64_t v212 = v140;
      unint64_t v145 = specialized __RawDictionaryStorage.find<A>(_:)(v140, v142);
      uint64_t v146 = v213[2];
      BOOL v147 = (v144 & 1) == 0;
      uint64_t v148 = v146 + v147;
      if (__OFADD__(v146, v147)) {
        goto LABEL_233;
      }
      uint64_t v204 = v3;
      if (v213[3] < v148)
      {
        char v208 = v144;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v148, v143);
        char v89 = (void *)v215;
        uint64_t v149 = v212;
        unint64_t v150 = specialized __RawDictionaryStorage.find<A>(_:)(v212, v142);
        if ((v208 & 1) != (v151 & 1)) {
          goto LABEL_239;
        }
        unint64_t v145 = v150;
        if ((v208 & 1) == 0) {
          goto LABEL_142;
        }
        goto LABEL_139;
      }
      if (v143)
      {
        char v89 = v213;
        uint64_t v149 = v212;
        if ((v144 & 1) == 0) {
          goto LABEL_142;
        }
LABEL_139:
        uint64_t v152 = (uint64_t *)(v89[7] + 16 * v145);
        *uint64_t v152 = v16;
        v152[1] = v88;
        goto LABEL_144;
      }
      char v210 = v144;
      uint64_t v202 = v2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
      uint64_t v177 = static _DictionaryStorage.copy(original:)();
      char v89 = (void *)v177;
      if (!v213[2]) {
        goto LABEL_219;
      }
      uint64_t result = (void *)(v177 + 64);
      Foundation::Date v178 = v213 + 8;
      unint64_t v179 = (unint64_t)((1 << *((unsigned char *)v89 + 32)) + 63) >> 6;
      if (v89 != v213 || result >= &v178[v179]) {
        uint64_t result = memmove(result, v213 + 8, 8 * v179);
      }
      int64_t v180 = 0;
      v89[2] = v213[2];
      uint64_t v181 = 1 << *((unsigned char *)v213 + 32);
      if (v181 < 64) {
        uint64_t v182 = ~(-1 << v181);
      }
      else {
        uint64_t v182 = -1;
      }
      unint64_t v183 = v182 & v213[8];
      int64_t v184 = (unint64_t)(v181 + 63) >> 6;
      while (1)
      {
        if (v183)
        {
          unint64_t v185 = __clz(__rbit64(v183));
          v183 &= v183 - 1;
          unint64_t v186 = v185 | (v180 << 6);
        }
        else
        {
          BOOL v50 = __OFADD__(v180++, 1);
          if (v50) {
            goto LABEL_238;
          }
          if (v180 >= v184) {
            goto LABEL_219;
          }
          unint64_t v193 = v178[v180];
          if (!v193)
          {
            int64_t v194 = v180 + 1;
            if (v180 + 1 >= v184) {
              goto LABEL_219;
            }
            unint64_t v193 = v178[v194];
            if (!v193)
            {
              int64_t v194 = v180 + 2;
              if (v180 + 2 >= v184) {
                goto LABEL_219;
              }
              unint64_t v193 = v178[v194];
              if (!v193)
              {
                int64_t v194 = v180 + 3;
                if (v180 + 3 >= v184) {
                  goto LABEL_219;
                }
                unint64_t v193 = v178[v194];
                if (!v193)
                {
                  int64_t v194 = v180 + 4;
                  if (v180 + 4 >= v184) {
                    goto LABEL_219;
                  }
                  unint64_t v193 = v178[v194];
                  if (!v193)
                  {
                    int64_t v194 = v180 + 5;
                    if (v180 + 5 >= v184) {
                      goto LABEL_219;
                    }
                    unint64_t v193 = v178[v194];
                    if (!v193)
                    {
                      int64_t v194 = v180 + 6;
                      if (v180 + 6 >= v184) {
                        goto LABEL_219;
                      }
                      unint64_t v193 = v178[v194];
                      if (!v193)
                      {
                        int64_t v194 = v180 + 7;
                        if (v180 + 7 >= v184) {
                          goto LABEL_219;
                        }
                        unint64_t v193 = v178[v194];
                        if (!v193)
                        {
                          int64_t v194 = v180 + 8;
                          if (v180 + 8 >= v184) {
                            goto LABEL_219;
                          }
                          unint64_t v193 = v178[v194];
                          if (!v193)
                          {
                            while (1)
                            {
                              int64_t v180 = v194 + 1;
                              if (__OFADD__(v194, 1)) {
                                goto LABEL_241;
                              }
                              if (v180 >= v184) {
                                break;
                              }
                              unint64_t v193 = v178[v180];
                              ++v194;
                              if (v193) {
                                goto LABEL_214;
                              }
                            }
LABEL_219:
                            swift_bridgeObjectRelease();
                            uint64_t v2 = v202;
                            uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
                            uint64_t v149 = v212;
                            if (v210) {
                              goto LABEL_139;
                            }
LABEL_142:
                            v89[(v145 >> 6) + 8] |= 1 << v145;
                            uint64_t v153 = (uint64_t *)(v89[6] + 16 * v145);
                            *uint64_t v153 = v149;
                            v153[1] = v142;
                            uint64_t v154 = (uint64_t *)(v89[7] + 16 * v145);
                            *uint64_t v154 = v16;
                            v154[1] = v88;
                            uint64_t v155 = v89[2];
                            BOOL v50 = __OFADD__(v155, 1);
                            uint64_t v156 = v155 + 1;
                            if (v50) {
                              goto LABEL_234;
                            }
                            v89[2] = v156;
                            swift_bridgeObjectRetain();
LABEL_144:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
LABEL_134:
                            unint64_t v4 = v5 + 1;
                            uint64_t v213 = v89;
                            uint64_t v3 = v204;
                            goto LABEL_4;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            int64_t v180 = v194;
          }
LABEL_214:
          unint64_t v183 = (v193 - 1) & v193;
          unint64_t v186 = __clz(__rbit64(v193)) + (v180 << 6);
        }
        uint64_t v187 = 16 * v186;
        uint64_t v188 = (uint64_t *)(v213[6] + v187);
        uint64_t v190 = *v188;
        uint64_t v189 = v188[1];
        long long v191 = *(_OWORD *)(v213[7] + v187);
        uint64_t v192 = (void *)(v89[6] + v187);
        *uint64_t v192 = v190;
        v192[1] = v189;
        *(_OWORD *)(v89[7] + v187) = v191;
        uint64_t result = (void *)swift_bridgeObjectRetain();
      }
    }
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = 0;
  }
  unint64_t v4 = v5 + 1;
  if (!v17) {
    goto LABEL_4;
  }
  uint64_t v200 = v2;
  uint64_t v18 = static AttributeScope.scopeDescription.getter(v17);
  uint64_t v206 = v19;
  swift_bridgeObjectRetain();
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v221 = v3;
  uint64_t v21 = -1 << *((unsigned char *)v18 + 32);
  uint64_t v22 = ~v21;
  uint64_t v23 = -v21;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  else {
    uint64_t v24 = -1;
  }
  uint64_t v25 = v24 & v18[8];
  *(void *)&long long v215 = v18;
  *((void *)&v215 + 1) = v18 + 8;
  uint64_t v216 = v22;
  uint64_t v217 = 0;
  uint64_t v218 = v25;
  uint64_t v219 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  uint64_t v220 = 0;
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = specialized LazyMapSequence.Iterator.next()(v26);
  if (v28)
  {
    uint64_t v31 = v27;
    uint64_t v32 = v28;
    uint64_t v33 = v29;
    uint64_t v34 = v30;
    while (1)
    {
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
      uint64_t v43 = v3[2];
      BOOL v44 = (v41 & 1) == 0;
      uint64_t v35 = v43 + v44;
      if (__OFADD__(v43, v44)) {
        goto LABEL_224;
      }
      char v45 = v41;
      if (v3[3] >= v35)
      {
        if (v20)
        {
          if (v41) {
            goto LABEL_26;
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          uint64_t v52 = static _DictionaryStorage.copy(original:)();
          uint64_t v203 = (void *)v52;
          if (v3[2])
          {
            uint64_t v53 = v52;
            double v54 = (void *)(v52 + 64);
            unint64_t v55 = (unint64_t)((1 << *(unsigned char *)(v53 + 32)) + 63) >> 6;
            if ((void *)v53 != v3 || v54 >= &v3[v55 + 8]) {
              memmove(v54, v3 + 8, 8 * v55);
            }
            uint64_t v196 = v3 + 8;
            int64_t v56 = 0;
            v203[2] = v3[2];
            uint64_t v57 = 1 << *((unsigned char *)v3 + 32);
            if (v57 < 64) {
              uint64_t v58 = ~(-1 << v57);
            }
            else {
              uint64_t v58 = -1;
            }
            unint64_t v59 = v58 & v3[8];
            int64_t v198 = (unint64_t)(v57 + 63) >> 6;
            while (1)
            {
              if (v59)
              {
                unint64_t v60 = __clz(__rbit64(v59));
                v59 &= v59 - 1;
                unint64_t v61 = v60 | (v56 << 6);
              }
              else
              {
                BOOL v50 = __OFADD__(v56++, 1);
                if (v50) {
                  goto LABEL_231;
                }
                if (v56 >= v198) {
                  break;
                }
                unint64_t v68 = v196[v56];
                if (!v68)
                {
                  int64_t v69 = v56 + 1;
                  if (v56 + 1 >= v198) {
                    break;
                  }
                  unint64_t v68 = v196[v69];
                  if (!v68)
                  {
                    int64_t v69 = v56 + 2;
                    if (v56 + 2 >= v198) {
                      break;
                    }
                    unint64_t v68 = v196[v69];
                    if (!v68)
                    {
                      int64_t v69 = v56 + 3;
                      if (v56 + 3 >= v198) {
                        break;
                      }
                      unint64_t v68 = v196[v69];
                      if (!v68)
                      {
                        int64_t v69 = v56 + 4;
                        if (v56 + 4 >= v198) {
                          break;
                        }
                        unint64_t v68 = v196[v69];
                        if (!v68)
                        {
                          int64_t v69 = v56 + 5;
                          if (v56 + 5 >= v198) {
                            break;
                          }
                          unint64_t v68 = v196[v69];
                          if (!v68)
                          {
                            while (1)
                            {
                              int64_t v56 = v69 + 1;
                              if (__OFADD__(v69, 1)) {
                                break;
                              }
                              if (v56 >= v198) {
                                goto LABEL_67;
                              }
                              unint64_t v68 = v196[v56];
                              ++v69;
                              if (v68) {
                                goto LABEL_62;
                              }
                            }
LABEL_236:
                            __break(1u);
                            goto LABEL_237;
                          }
                        }
                      }
                    }
                  }
                  int64_t v56 = v69;
                }
LABEL_62:
                unint64_t v59 = (v68 - 1) & v68;
                unint64_t v61 = __clz(__rbit64(v68)) + (v56 << 6);
              }
              uint64_t v62 = 16 * v61;
              BOOL v63 = (uint64_t *)(v3[6] + v62);
              uint64_t v65 = *v63;
              uint64_t v64 = v63[1];
              long long v66 = *(_OWORD *)(v3[7] + v62);
              uint64_t v67 = (void *)(v203[6] + v62);
              *uint64_t v67 = v65;
              v67[1] = v64;
              *(_OWORD *)(v203[7] + v62) = v66;
              swift_bridgeObjectRetain();
            }
          }
LABEL_67:
          uint64_t v35 = swift_release();
          uint64_t v3 = v203;
          Swift::Int v221 = v203;
          if (v45)
          {
LABEL_26:
            uint64_t v35 = swift_bridgeObjectRelease();
            uint64_t v36 = (void *)(v3[7] + 16 * v42);
            void *v36 = v33;
            v36[1] = v34;
            goto LABEL_27;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, v20 & 1);
        uint64_t v3 = v221;
        uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
        if ((v45 & 1) != (v46 & 1)) {
          goto LABEL_239;
        }
        unint64_t v42 = v35;
        if (v45) {
          goto LABEL_26;
        }
      }
      v3[(v42 >> 6) + 8] |= 1 << v42;
      uint64_t v47 = (uint64_t *)(v3[6] + 16 * v42);
      uint64_t *v47 = v31;
      v47[1] = v32;
      char v48 = (void *)(v3[7] + 16 * v42);
      void *v48 = v33;
      v48[1] = v34;
      uint64_t v49 = v3[2];
      BOOL v50 = __OFADD__(v49, 1);
      uint64_t v51 = v49 + 1;
      if (v50) {
        goto LABEL_226;
      }
      void v3[2] = v51;
LABEL_27:
      uint64_t v31 = specialized LazyMapSequence.Iterator.next()(v35);
      uint64_t v32 = v37;
      uint64_t v33 = v38;
      uint64_t v34 = v39;
      char v20 = 1;
      double v40 = v3;
      if (!v37) {
        goto LABEL_86;
      }
    }
  }
  double v40 = v3;
LABEL_86:
  uint64_t v204 = v40;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v89 = v213;
  char v90 = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v221 = v213;
  uint64_t v91 = -1 << *(unsigned char *)(v206 + 32);
  uint64_t v92 = ~v91;
  uint64_t v93 = -v91;
  if (v93 < 64) {
    uint64_t v94 = ~(-1 << v93);
  }
  else {
    uint64_t v94 = -1;
  }
  uint64_t v95 = v94 & *(void *)(v206 + 64);
  *(void *)&long long v215 = v206;
  *((void *)&v215 + 1) = v206 + 64;
  uint64_t v216 = v92;
  uint64_t v217 = 0;
  uint64_t v218 = v95;
  uint64_t v219 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  uint64_t v220 = 0;
  uint64_t v96 = swift_bridgeObjectRetain();
  uint64_t v97 = specialized LazyMapSequence.Iterator.next()(v96);
  if (!v98)
  {
LABEL_133:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = v200;
    uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
    goto LABEL_134;
  }
  uint64_t v101 = v97;
  uint64_t v102 = v98;
  char v103 = v213;
  while (2)
  {
    uint64_t v214 = v100;
    uint64_t v107 = v99;
    unint64_t v108 = v5;
    uint64_t v109 = v103;
    unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102);
    uint64_t v112 = v103[2];
    BOOL v113 = (v110 & 1) == 0;
    uint64_t v104 = v112 + v113;
    if (__OFADD__(v112, v113)) {
      goto LABEL_225;
    }
    char v89 = v103;
    char v114 = v110;
    if (v103[3] < v104)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v104, v90 & 1);
      char v89 = v221;
      uint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102);
      if ((v114 & 1) != (v115 & 1)) {
        goto LABEL_239;
      }
      unint64_t v111 = v104;
LABEL_98:
      unint64_t v5 = v108;
      if ((v114 & 1) == 0)
      {
LABEL_99:
        v89[(v111 >> 6) + 8] |= 1 << v111;
        uint64_t v116 = (uint64_t *)(v89[6] + 16 * v111);
        *uint64_t v116 = v101;
        v116[1] = v102;
        uint64_t v117 = (void *)(v89[7] + 16 * v111);
        *uint64_t v117 = v107;
        v117[1] = v214;
        uint64_t v118 = v89[2];
        BOOL v50 = __OFADD__(v118, 1);
        uint64_t v119 = v118 + 1;
        if (v50) {
          goto LABEL_227;
        }
        v89[2] = v119;
        goto LABEL_92;
      }
LABEL_91:
      uint64_t v104 = swift_bridgeObjectRelease();
      Swift::Int v105 = (void *)(v89[7] + 16 * v111);
      *Swift::Int v105 = v107;
      v105[1] = v214;
LABEL_92:
      uint64_t v101 = specialized LazyMapSequence.Iterator.next()(v104);
      uint64_t v102 = v106;
      char v90 = 1;
      char v103 = v89;
      if (!v106) {
        goto LABEL_133;
      }
      continue;
    }
    break;
  }
  if (v90) {
    goto LABEL_98;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
  uint64_t v120 = static _DictionaryStorage.copy(original:)();
  uint64_t v121 = v103;
  char v89 = (void *)v120;
  if (!v103[2])
  {
LABEL_131:
    unint64_t v5 = v108;
    uint64_t v104 = swift_release();
    Swift::Int v221 = v89;
    if ((v114 & 1) == 0) {
      goto LABEL_99;
    }
    goto LABEL_91;
  }
  double v122 = (void *)(v120 + 64);
  unint64_t v123 = (unint64_t)((1 << *((unsigned char *)v89 + 32)) + 63) >> 6;
  if (v89 != v103 || v122 >= &v103[v123 + 8])
  {
    memmove(v122, v103 + 8, 8 * v123);
    uint64_t v121 = v103;
  }
  uint64_t v197 = v103 + 8;
  int64_t v124 = 0;
  v89[2] = v121[2];
  uint64_t v125 = 1 << *((unsigned char *)v121 + 32);
  if (v125 < 64) {
    uint64_t v126 = ~(-1 << v125);
  }
  else {
    uint64_t v126 = -1;
  }
  unint64_t v127 = v126 & v121[8];
  int64_t v199 = (unint64_t)(v125 + 63) >> 6;
  while (2)
  {
    if (v127)
    {
      unint64_t v128 = __clz(__rbit64(v127));
      v127 &= v127 - 1;
      unint64_t v129 = v128 | (v124 << 6);
      uint64_t v130 = v109;
LABEL_110:
      uint64_t v131 = 16 * v129;
      uint64_t v132 = v130[7];
      char v133 = (uint64_t *)(v130[6] + v131);
      uint64_t v135 = *v133;
      uint64_t v134 = v133[1];
      long long v136 = *(_OWORD *)(v132 + v131);
      uint64_t v137 = (void *)(v89[6] + v131);
      *uint64_t v137 = v135;
      v137[1] = v134;
      *(_OWORD *)(v89[7] + v131) = v136;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  BOOL v50 = __OFADD__(v124++, 1);
  if (v50) {
    goto LABEL_232;
  }
  uint64_t v130 = v109;
  if (v124 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v124];
  if (v138)
  {
LABEL_126:
    unint64_t v127 = (v138 - 1) & v138;
    unint64_t v129 = __clz(__rbit64(v138)) + (v124 << 6);
    goto LABEL_110;
  }
  int64_t v139 = v124 + 1;
  if (v124 + 1 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v139];
  if (v138) {
    goto LABEL_125;
  }
  int64_t v139 = v124 + 2;
  if (v124 + 2 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v139];
  if (v138) {
    goto LABEL_125;
  }
  int64_t v139 = v124 + 3;
  if (v124 + 3 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v139];
  if (v138) {
    goto LABEL_125;
  }
  int64_t v139 = v124 + 4;
  if (v124 + 4 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v139];
  if (v138) {
    goto LABEL_125;
  }
  int64_t v139 = v124 + 5;
  if (v124 + 5 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v139];
  if (v138)
  {
LABEL_125:
    int64_t v124 = v139;
    goto LABEL_126;
  }
  while (1)
  {
    int64_t v124 = v139 + 1;
    if (__OFADD__(v139, 1)) {
      break;
    }
    if (v124 >= v199) {
      goto LABEL_131;
    }
    unint64_t v138 = v197[v124];
    ++v139;
    if (v138) {
      goto LABEL_126;
    }
  }
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  char v46;
  uint64_t *v47;
  void *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  long long v66;
  void *v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char isUniquelyReferenced_nonNull_native;
  char v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  char v110;
  unint64_t v111;
  uint64_t v112;
  BOOL v113;
  char v114;
  char v115;
  uint64_t *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  unint64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  long long v136;
  void *v137;
  unint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  char v144;
  unint64_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *result;
  void *v160;
  unint64_t v161;
  int64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  long long v173;
  void *v174;
  unint64_t v175;
  int64_t v176;
  uint64_t v177;
  void *v178;
  unint64_t v179;
  int64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  int64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  long long v191;
  void *v192;
  unint64_t v193;
  int64_t v194;
  os_unfair_lock_s *v195;
  void *v196;
  void *v197;
  int64_t v198;
  int64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  void *v204;
  unint64_t v205;
  uint64_t v206;
  char v207;
  char v208;
  char v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  long long v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t (*v219)();
  uint64_t v220;
  void *v221;

  if (one-time initialization token for _loadedScopeCache != -1) {
    goto LABEL_228;
  }
LABEL_2:
  uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
  unint64_t v1 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
  swift_retain();
  os_unfair_lock_lock(v1);
  uint64_t v2 = 0;
  specialized closure #1 in static AttributeScope.scopeDescription.getter((uint64_t *)&v215);
  os_unfair_lock_unlock(v1);
  swift_release();
  uint64_t v3 = (void *)v215;
  if ((void)v215) {
    return v3;
  }
  unint64_t v4 = 0;
  uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v213 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
LABEL_4:
    unint64_t v5 = v4;
    swift_getKeyPath();
    uint64_t v6 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    uint64_t v7 = swift_release();
    if (v5 == *(_DWORD *)(*(void *)((char *)&full type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes
                                     + v6
                                     + 16)
                         + 20))
    {
      uint64_t v195 = (os_unfair_lock_s *)v0[500];
      MEMORY[0x1F4188790](v7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v195 + 10);
      partial apply for specialized closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v195[4]);
      os_unfair_lock_unlock(v195 + 10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return v3;
    }
    swift_getKeyPath();
    uint64_t v8 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_release();
    if (v5 >= *(unsigned int *)(*(void *)((char *)&full type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes
                                           + v8
                                           + 16)
                               + 20))
    {
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      swift_once();
      goto LABEL_2;
    }
    if (static Metadata.Kind.tuple.getter() == 512)
    {
      MEMORY[0x185300FE0](&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
      TupleMetadata.Elements.subscript.getter();
      uint64_t v9 = TupleMetadata.Elements.Element.metadata.getter();
    }
    else
    {
      uint64_t v10 = TypeMetadata.descriptor.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      int v11 = *(_DWORD *)(v10 + 16);
      long long v215 = *(_OWORD *)v10;
      LODWORD(v216) = v11;
      swift_getAtKeyPath();
      swift_release();
      uint64_t v12 = FieldDescriptor.subscript.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      int v13 = *(_DWORD *)(v12 + 8);
      *(void *)&long long v215 = *(void *)v12;
      DWORD2(v215) = v13;
      swift_getAtKeyPath();
      swift_release();
      uint64_t v9 = MangledTypeReference.standardSubstitution.getter();
      if (!v9) {
        uint64_t v9 = TypeMetadata._resolve(_:)();
      }
    }
    uint64_t v14 = swift_conformsToProtocol2();
    uint64_t v15 = v14 ? v14 : 0;
    uint64_t v16 = v14 ? v9 : 0;
    if (!v16) {
      break;
    }
    uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(v16, v15);
    uint64_t v72 = v71;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v215 = v3;
    uint64_t v211 = v70;
    unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v72);
    uint64_t v76 = v3[2];
    BOOL v77 = (v74 & 1) == 0;
    uint64_t v78 = v76 + v77;
    if (__OFADD__(v76, v77))
    {
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
      goto LABEL_236;
    }
    if (v3[3] < v78)
    {
      char v207 = v74;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v78, isUniquelyReferenced_nonNull_native);
      uint64_t v3 = (void *)v215;
      uint64_t v79 = v70;
      unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v72);
      if ((v207 & 1) != (v81 & 1)) {
        goto LABEL_239;
      }
      unint64_t v75 = v80;
      if ((v207 & 1) == 0) {
        goto LABEL_76;
      }
      goto LABEL_73;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v79 = v70;
      if ((v74 & 1) == 0) {
        goto LABEL_76;
      }
LABEL_73:
      char v82 = (uint64_t *)(v3[7] + 16 * v75);
      *char v82 = v16;
      v82[1] = v15;
      goto LABEL_78;
    }
    char v209 = v74;
    uint64_t v201 = v2;
    unint64_t v205 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
    uint64_t v157 = static _DictionaryStorage.copy(original:)();
    uint64_t v158 = v157;
    if (!v3[2]) {
      goto LABEL_181;
    }
    uint64_t result = (void *)(v157 + 64);
    uint64_t v160 = v3 + 8;
    unint64_t v161 = (unint64_t)((1 << *(unsigned char *)(v158 + 32)) + 63) >> 6;
    if ((void *)v158 != v3 || result >= &v160[v161]) {
      uint64_t result = memmove(result, v3 + 8, 8 * v161);
    }
    int64_t v162 = 0;
    *(void *)(v158 + 16) = v3[2];
    uint64_t v163 = 1 << *((unsigned char *)v3 + 32);
    if (v163 < 64) {
      uint64_t v164 = ~(-1 << v163);
    }
    else {
      uint64_t v164 = -1;
    }
    unint64_t v165 = v164 & v3[8];
    int64_t v166 = (unint64_t)(v163 + 63) >> 6;
    while (1)
    {
      if (v165)
      {
        unint64_t v167 = __clz(__rbit64(v165));
        v165 &= v165 - 1;
        unint64_t v168 = v167 | (v162 << 6);
        goto LABEL_154;
      }
      BOOL v50 = __OFADD__(v162++, 1);
      if (v50) {
        goto LABEL_235;
      }
      if (v162 >= v166) {
        goto LABEL_181;
      }
      unint64_t v175 = v160[v162];
      if (!v175) {
        break;
      }
LABEL_176:
      unint64_t v165 = (v175 - 1) & v175;
      unint64_t v168 = __clz(__rbit64(v175)) + (v162 << 6);
LABEL_154:
      uint64_t v169 = 16 * v168;
      char v170 = (uint64_t *)(v3[6] + v169);
      uint64_t v172 = *v170;
      uint64_t v171 = v170[1];
      long long v173 = *(_OWORD *)(v3[7] + v169);
      uint64_t v174 = (void *)(*(void *)(v158 + 48) + v169);
      *uint64_t v174 = v172;
      v174[1] = v171;
      *(_OWORD *)(*(void *)(v158 + 56) + v169) = v173;
      uint64_t result = (void *)swift_bridgeObjectRetain();
    }
    int64_t v176 = v162 + 1;
    if (v162 + 1 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 2;
    if (v162 + 2 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 3;
    if (v162 + 3 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 4;
    if (v162 + 4 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 5;
    if (v162 + 5 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 6;
    if (v162 + 6 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 7;
    if (v162 + 7 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175) {
      goto LABEL_175;
    }
    int64_t v176 = v162 + 8;
    if (v162 + 8 >= v166) {
      goto LABEL_181;
    }
    unint64_t v175 = v160[v176];
    if (v175)
    {
LABEL_175:
      int64_t v162 = v176;
      goto LABEL_176;
    }
    while (1)
    {
      int64_t v162 = v176 + 1;
      if (__OFADD__(v176, 1)) {
        goto LABEL_240;
      }
      if (v162 >= v166) {
        break;
      }
      unint64_t v175 = v160[v162];
      ++v176;
      if (v175) {
        goto LABEL_176;
      }
    }
LABEL_181:
    swift_bridgeObjectRelease();
    uint64_t v2 = v201;
    unint64_t v5 = v205;
    uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
    uint64_t v3 = (void *)v158;
    uint64_t v79 = v211;
    if (v209) {
      goto LABEL_73;
    }
LABEL_76:
    v3[(v75 >> 6) + 8] |= 1 << v75;
    Foundation::Date v83 = (uint64_t *)(v3[6] + 16 * v75);
    *Foundation::Date v83 = v79;
    v83[1] = v72;
    uint64_t v84 = (uint64_t *)(v3[7] + 16 * v75);
    *uint64_t v84 = v16;
    v84[1] = v15;
    uint64_t v85 = v3[2];
    BOOL v50 = __OFADD__(v85, 1);
    uint64_t v86 = v85 + 1;
    if (v50) {
      goto LABEL_230;
    }
    void v3[2] = v86;
    swift_bridgeObjectRetain();
LABEL_78:
    unint64_t v4 = v5 + 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v87 = swift_conformsToProtocol2();
    if (v87) {
      uint64_t v88 = v87;
    }
    else {
      uint64_t v88 = 0;
    }
    if (!v87) {
      uint64_t v16 = 0;
    }
    if (v16)
    {
      uint64_t v140 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 24))(v16, v88);
      uint64_t v142 = v141;
      char v143 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v215 = v213;
      uint64_t v212 = v140;
      unint64_t v145 = specialized __RawDictionaryStorage.find<A>(_:)(v140, v142);
      uint64_t v146 = v213[2];
      BOOL v147 = (v144 & 1) == 0;
      uint64_t v148 = v146 + v147;
      if (__OFADD__(v146, v147)) {
        goto LABEL_233;
      }
      uint64_t v204 = v3;
      if (v213[3] < v148)
      {
        char v208 = v144;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v148, v143);
        char v89 = (void *)v215;
        uint64_t v149 = v212;
        unint64_t v150 = specialized __RawDictionaryStorage.find<A>(_:)(v212, v142);
        if ((v208 & 1) != (v151 & 1)) {
          goto LABEL_239;
        }
        unint64_t v145 = v150;
        if ((v208 & 1) == 0) {
          goto LABEL_142;
        }
        goto LABEL_139;
      }
      if (v143)
      {
        char v89 = v213;
        uint64_t v149 = v212;
        if ((v144 & 1) == 0) {
          goto LABEL_142;
        }
LABEL_139:
        uint64_t v152 = (uint64_t *)(v89[7] + 16 * v145);
        *uint64_t v152 = v16;
        v152[1] = v88;
        goto LABEL_144;
      }
      char v210 = v144;
      uint64_t v202 = v2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
      uint64_t v177 = static _DictionaryStorage.copy(original:)();
      char v89 = (void *)v177;
      if (!v213[2]) {
        goto LABEL_219;
      }
      uint64_t result = (void *)(v177 + 64);
      Foundation::Date v178 = v213 + 8;
      unint64_t v179 = (unint64_t)((1 << *((unsigned char *)v89 + 32)) + 63) >> 6;
      if (v89 != v213 || result >= &v178[v179]) {
        uint64_t result = memmove(result, v213 + 8, 8 * v179);
      }
      int64_t v180 = 0;
      v89[2] = v213[2];
      uint64_t v181 = 1 << *((unsigned char *)v213 + 32);
      if (v181 < 64) {
        uint64_t v182 = ~(-1 << v181);
      }
      else {
        uint64_t v182 = -1;
      }
      unint64_t v183 = v182 & v213[8];
      int64_t v184 = (unint64_t)(v181 + 63) >> 6;
      while (1)
      {
        if (v183)
        {
          unint64_t v185 = __clz(__rbit64(v183));
          v183 &= v183 - 1;
          unint64_t v186 = v185 | (v180 << 6);
        }
        else
        {
          BOOL v50 = __OFADD__(v180++, 1);
          if (v50) {
            goto LABEL_238;
          }
          if (v180 >= v184) {
            goto LABEL_219;
          }
          unint64_t v193 = v178[v180];
          if (!v193)
          {
            int64_t v194 = v180 + 1;
            if (v180 + 1 >= v184) {
              goto LABEL_219;
            }
            unint64_t v193 = v178[v194];
            if (!v193)
            {
              int64_t v194 = v180 + 2;
              if (v180 + 2 >= v184) {
                goto LABEL_219;
              }
              unint64_t v193 = v178[v194];
              if (!v193)
              {
                int64_t v194 = v180 + 3;
                if (v180 + 3 >= v184) {
                  goto LABEL_219;
                }
                unint64_t v193 = v178[v194];
                if (!v193)
                {
                  int64_t v194 = v180 + 4;
                  if (v180 + 4 >= v184) {
                    goto LABEL_219;
                  }
                  unint64_t v193 = v178[v194];
                  if (!v193)
                  {
                    int64_t v194 = v180 + 5;
                    if (v180 + 5 >= v184) {
                      goto LABEL_219;
                    }
                    unint64_t v193 = v178[v194];
                    if (!v193)
                    {
                      int64_t v194 = v180 + 6;
                      if (v180 + 6 >= v184) {
                        goto LABEL_219;
                      }
                      unint64_t v193 = v178[v194];
                      if (!v193)
                      {
                        int64_t v194 = v180 + 7;
                        if (v180 + 7 >= v184) {
                          goto LABEL_219;
                        }
                        unint64_t v193 = v178[v194];
                        if (!v193)
                        {
                          int64_t v194 = v180 + 8;
                          if (v180 + 8 >= v184) {
                            goto LABEL_219;
                          }
                          unint64_t v193 = v178[v194];
                          if (!v193)
                          {
                            while (1)
                            {
                              int64_t v180 = v194 + 1;
                              if (__OFADD__(v194, 1)) {
                                goto LABEL_241;
                              }
                              if (v180 >= v184) {
                                break;
                              }
                              unint64_t v193 = v178[v180];
                              ++v194;
                              if (v193) {
                                goto LABEL_214;
                              }
                            }
LABEL_219:
                            swift_bridgeObjectRelease();
                            uint64_t v2 = v202;
                            uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
                            uint64_t v149 = v212;
                            if (v210) {
                              goto LABEL_139;
                            }
LABEL_142:
                            v89[(v145 >> 6) + 8] |= 1 << v145;
                            uint64_t v153 = (uint64_t *)(v89[6] + 16 * v145);
                            *uint64_t v153 = v149;
                            v153[1] = v142;
                            uint64_t v154 = (uint64_t *)(v89[7] + 16 * v145);
                            *uint64_t v154 = v16;
                            v154[1] = v88;
                            uint64_t v155 = v89[2];
                            BOOL v50 = __OFADD__(v155, 1);
                            uint64_t v156 = v155 + 1;
                            if (v50) {
                              goto LABEL_234;
                            }
                            v89[2] = v156;
                            swift_bridgeObjectRetain();
LABEL_144:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
LABEL_134:
                            unint64_t v4 = v5 + 1;
                            uint64_t v213 = v89;
                            uint64_t v3 = v204;
                            goto LABEL_4;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            int64_t v180 = v194;
          }
LABEL_214:
          unint64_t v183 = (v193 - 1) & v193;
          unint64_t v186 = __clz(__rbit64(v193)) + (v180 << 6);
        }
        uint64_t v187 = 16 * v186;
        uint64_t v188 = (uint64_t *)(v213[6] + v187);
        uint64_t v190 = *v188;
        uint64_t v189 = v188[1];
        long long v191 = *(_OWORD *)(v213[7] + v187);
        uint64_t v192 = (void *)(v89[6] + v187);
        *uint64_t v192 = v190;
        v192[1] = v189;
        *(_OWORD *)(v89[7] + v187) = v191;
        uint64_t result = (void *)swift_bridgeObjectRetain();
      }
    }
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = 0;
  }
  unint64_t v4 = v5 + 1;
  if (!v17) {
    goto LABEL_4;
  }
  uint64_t v200 = v2;
  uint64_t v18 = static AttributeScope.scopeDescription.getter(v17);
  uint64_t v206 = v19;
  swift_bridgeObjectRetain();
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v221 = v3;
  uint64_t v21 = -1 << *((unsigned char *)v18 + 32);
  uint64_t v22 = ~v21;
  uint64_t v23 = -v21;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  else {
    uint64_t v24 = -1;
  }
  uint64_t v25 = v24 & v18[8];
  *(void *)&long long v215 = v18;
  *((void *)&v215 + 1) = v18 + 8;
  uint64_t v216 = v22;
  uint64_t v217 = 0;
  uint64_t v218 = v25;
  uint64_t v219 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  uint64_t v220 = 0;
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = specialized LazyMapSequence.Iterator.next()(v26);
  if (v28)
  {
    uint64_t v31 = v27;
    uint64_t v32 = v28;
    uint64_t v33 = v29;
    uint64_t v34 = v30;
    while (1)
    {
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
      uint64_t v43 = v3[2];
      BOOL v44 = (v41 & 1) == 0;
      uint64_t v35 = v43 + v44;
      if (__OFADD__(v43, v44)) {
        goto LABEL_224;
      }
      char v45 = v41;
      if (v3[3] >= v35)
      {
        if (v20)
        {
          if (v41) {
            goto LABEL_26;
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          uint64_t v52 = static _DictionaryStorage.copy(original:)();
          uint64_t v203 = (void *)v52;
          if (v3[2])
          {
            uint64_t v53 = v52;
            double v54 = (void *)(v52 + 64);
            unint64_t v55 = (unint64_t)((1 << *(unsigned char *)(v53 + 32)) + 63) >> 6;
            if ((void *)v53 != v3 || v54 >= &v3[v55 + 8]) {
              memmove(v54, v3 + 8, 8 * v55);
            }
            uint64_t v196 = v3 + 8;
            int64_t v56 = 0;
            v203[2] = v3[2];
            uint64_t v57 = 1 << *((unsigned char *)v3 + 32);
            if (v57 < 64) {
              uint64_t v58 = ~(-1 << v57);
            }
            else {
              uint64_t v58 = -1;
            }
            unint64_t v59 = v58 & v3[8];
            int64_t v198 = (unint64_t)(v57 + 63) >> 6;
            while (1)
            {
              if (v59)
              {
                unint64_t v60 = __clz(__rbit64(v59));
                v59 &= v59 - 1;
                unint64_t v61 = v60 | (v56 << 6);
              }
              else
              {
                BOOL v50 = __OFADD__(v56++, 1);
                if (v50) {
                  goto LABEL_231;
                }
                if (v56 >= v198) {
                  break;
                }
                unint64_t v68 = v196[v56];
                if (!v68)
                {
                  int64_t v69 = v56 + 1;
                  if (v56 + 1 >= v198) {
                    break;
                  }
                  unint64_t v68 = v196[v69];
                  if (!v68)
                  {
                    int64_t v69 = v56 + 2;
                    if (v56 + 2 >= v198) {
                      break;
                    }
                    unint64_t v68 = v196[v69];
                    if (!v68)
                    {
                      int64_t v69 = v56 + 3;
                      if (v56 + 3 >= v198) {
                        break;
                      }
                      unint64_t v68 = v196[v69];
                      if (!v68)
                      {
                        int64_t v69 = v56 + 4;
                        if (v56 + 4 >= v198) {
                          break;
                        }
                        unint64_t v68 = v196[v69];
                        if (!v68)
                        {
                          int64_t v69 = v56 + 5;
                          if (v56 + 5 >= v198) {
                            break;
                          }
                          unint64_t v68 = v196[v69];
                          if (!v68)
                          {
                            while (1)
                            {
                              int64_t v56 = v69 + 1;
                              if (__OFADD__(v69, 1)) {
                                break;
                              }
                              if (v56 >= v198) {
                                goto LABEL_67;
                              }
                              unint64_t v68 = v196[v56];
                              ++v69;
                              if (v68) {
                                goto LABEL_62;
                              }
                            }
LABEL_236:
                            __break(1u);
                            goto LABEL_237;
                          }
                        }
                      }
                    }
                  }
                  int64_t v56 = v69;
                }
LABEL_62:
                unint64_t v59 = (v68 - 1) & v68;
                unint64_t v61 = __clz(__rbit64(v68)) + (v56 << 6);
              }
              uint64_t v62 = 16 * v61;
              BOOL v63 = (uint64_t *)(v3[6] + v62);
              uint64_t v65 = *v63;
              uint64_t v64 = v63[1];
              long long v66 = *(_OWORD *)(v3[7] + v62);
              uint64_t v67 = (void *)(v203[6] + v62);
              *uint64_t v67 = v65;
              v67[1] = v64;
              *(_OWORD *)(v203[7] + v62) = v66;
              swift_bridgeObjectRetain();
            }
          }
LABEL_67:
          uint64_t v35 = swift_release();
          uint64_t v3 = v203;
          Swift::Int v221 = v203;
          if (v45)
          {
LABEL_26:
            uint64_t v35 = swift_bridgeObjectRelease();
            uint64_t v36 = (void *)(v3[7] + 16 * v42);
            void *v36 = v33;
            v36[1] = v34;
            goto LABEL_27;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, v20 & 1);
        uint64_t v3 = v221;
        uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
        if ((v45 & 1) != (v46 & 1)) {
          goto LABEL_239;
        }
        unint64_t v42 = v35;
        if (v45) {
          goto LABEL_26;
        }
      }
      v3[(v42 >> 6) + 8] |= 1 << v42;
      uint64_t v47 = (uint64_t *)(v3[6] + 16 * v42);
      uint64_t *v47 = v31;
      v47[1] = v32;
      char v48 = (void *)(v3[7] + 16 * v42);
      void *v48 = v33;
      v48[1] = v34;
      uint64_t v49 = v3[2];
      BOOL v50 = __OFADD__(v49, 1);
      uint64_t v51 = v49 + 1;
      if (v50) {
        goto LABEL_226;
      }
      void v3[2] = v51;
LABEL_27:
      uint64_t v31 = specialized LazyMapSequence.Iterator.next()(v35);
      uint64_t v32 = v37;
      uint64_t v33 = v38;
      uint64_t v34 = v39;
      char v20 = 1;
      double v40 = v3;
      if (!v37) {
        goto LABEL_86;
      }
    }
  }
  double v40 = v3;
LABEL_86:
  uint64_t v204 = v40;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v89 = v213;
  char v90 = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v221 = v213;
  uint64_t v91 = -1 << *(unsigned char *)(v206 + 32);
  uint64_t v92 = ~v91;
  uint64_t v93 = -v91;
  if (v93 < 64) {
    uint64_t v94 = ~(-1 << v93);
  }
  else {
    uint64_t v94 = -1;
  }
  uint64_t v95 = v94 & *(void *)(v206 + 64);
  *(void *)&long long v215 = v206;
  *((void *)&v215 + 1) = v206 + 64;
  uint64_t v216 = v92;
  uint64_t v217 = 0;
  uint64_t v218 = v95;
  uint64_t v219 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  uint64_t v220 = 0;
  uint64_t v96 = swift_bridgeObjectRetain();
  uint64_t v97 = specialized LazyMapSequence.Iterator.next()(v96);
  if (!v98)
  {
LABEL_133:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = v200;
    uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
    goto LABEL_134;
  }
  uint64_t v101 = v97;
  uint64_t v102 = v98;
  char v103 = v213;
  while (2)
  {
    uint64_t v214 = v100;
    uint64_t v107 = v99;
    unint64_t v108 = v5;
    uint64_t v109 = v103;
    unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102);
    uint64_t v112 = v103[2];
    BOOL v113 = (v110 & 1) == 0;
    uint64_t v104 = v112 + v113;
    if (__OFADD__(v112, v113)) {
      goto LABEL_225;
    }
    char v89 = v103;
    char v114 = v110;
    if (v103[3] < v104)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v104, v90 & 1);
      char v89 = v221;
      uint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102);
      if ((v114 & 1) != (v115 & 1)) {
        goto LABEL_239;
      }
      unint64_t v111 = v104;
LABEL_98:
      unint64_t v5 = v108;
      if ((v114 & 1) == 0)
      {
LABEL_99:
        v89[(v111 >> 6) + 8] |= 1 << v111;
        uint64_t v116 = (uint64_t *)(v89[6] + 16 * v111);
        *uint64_t v116 = v101;
        v116[1] = v102;
        uint64_t v117 = (void *)(v89[7] + 16 * v111);
        *uint64_t v117 = v107;
        v117[1] = v214;
        uint64_t v118 = v89[2];
        BOOL v50 = __OFADD__(v118, 1);
        uint64_t v119 = v118 + 1;
        if (v50) {
          goto LABEL_227;
        }
        v89[2] = v119;
        goto LABEL_92;
      }
LABEL_91:
      uint64_t v104 = swift_bridgeObjectRelease();
      Swift::Int v105 = (void *)(v89[7] + 16 * v111);
      *Swift::Int v105 = v107;
      v105[1] = v214;
LABEL_92:
      uint64_t v101 = specialized LazyMapSequence.Iterator.next()(v104);
      uint64_t v102 = v106;
      char v90 = 1;
      char v103 = v89;
      if (!v106) {
        goto LABEL_133;
      }
      continue;
    }
    break;
  }
  if (v90) {
    goto LABEL_98;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
  uint64_t v120 = static _DictionaryStorage.copy(original:)();
  uint64_t v121 = v103;
  char v89 = (void *)v120;
  if (!v103[2])
  {
LABEL_131:
    unint64_t v5 = v108;
    uint64_t v104 = swift_release();
    Swift::Int v221 = v89;
    if ((v114 & 1) == 0) {
      goto LABEL_99;
    }
    goto LABEL_91;
  }
  double v122 = (void *)(v120 + 64);
  unint64_t v123 = (unint64_t)((1 << *((unsigned char *)v89 + 32)) + 63) >> 6;
  if (v89 != v103 || v122 >= &v103[v123 + 8])
  {
    memmove(v122, v103 + 8, 8 * v123);
    uint64_t v121 = v103;
  }
  uint64_t v197 = v103 + 8;
  int64_t v124 = 0;
  v89[2] = v121[2];
  uint64_t v125 = 1 << *((unsigned char *)v121 + 32);
  if (v125 < 64) {
    uint64_t v126 = ~(-1 << v125);
  }
  else {
    uint64_t v126 = -1;
  }
  unint64_t v127 = v126 & v121[8];
  int64_t v199 = (unint64_t)(v125 + 63) >> 6;
  while (2)
  {
    if (v127)
    {
      unint64_t v128 = __clz(__rbit64(v127));
      v127 &= v127 - 1;
      unint64_t v129 = v128 | (v124 << 6);
      uint64_t v130 = v109;
LABEL_110:
      uint64_t v131 = 16 * v129;
      uint64_t v132 = v130[7];
      char v133 = (uint64_t *)(v130[6] + v131);
      uint64_t v135 = *v133;
      uint64_t v134 = v133[1];
      long long v136 = *(_OWORD *)(v132 + v131);
      uint64_t v137 = (void *)(v89[6] + v131);
      *uint64_t v137 = v135;
      v137[1] = v134;
      *(_OWORD *)(v89[7] + v131) = v136;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  BOOL v50 = __OFADD__(v124++, 1);
  if (v50) {
    goto LABEL_232;
  }
  uint64_t v130 = v109;
  if (v124 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v124];
  if (v138)
  {
LABEL_126:
    unint64_t v127 = (v138 - 1) & v138;
    unint64_t v129 = __clz(__rbit64(v138)) + (v124 << 6);
    goto LABEL_110;
  }
  int64_t v139 = v124 + 1;
  if (v124 + 1 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v139];
  if (v138) {
    goto LABEL_125;
  }
  int64_t v139 = v124 + 2;
  if (v124 + 2 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v139];
  if (v138) {
    goto LABEL_125;
  }
  int64_t v139 = v124 + 3;
  if (v124 + 3 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v139];
  if (v138) {
    goto LABEL_125;
  }
  int64_t v139 = v124 + 4;
  if (v124 + 4 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v139];
  if (v138) {
    goto LABEL_125;
  }
  int64_t v139 = v124 + 5;
  if (v124 + 5 >= v199) {
    goto LABEL_131;
  }
  unint64_t v138 = v197[v139];
  if (v138)
  {
LABEL_125:
    int64_t v124 = v139;
    goto LABEL_126;
  }
  while (1)
  {
    int64_t v124 = v139 + 1;
    if (__OFADD__(v139, 1)) {
      break;
    }
    if (v124 >= v199) {
      goto LABEL_131;
    }
    unint64_t v138 = v197[v124];
    ++v139;
    if (v138) {
      goto LABEL_126;
    }
  }
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  __break(1u);
  return result;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ImageURLAttribute()
{
  return 0x556567616D49534ELL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  return 0xD00000000000001ALL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LinkAttribute()
{
  return 0x6B6E694C534ELL;
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name);
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  return 0x754E74616D726F66;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name);
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute()
{
  return 0xD000000000000016;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name);
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return 0x6175676E614C534ELL;
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.AgreementArgumentAttribute()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AgreementArgumentAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReplacementIndexAttribute()
{
  return 0xD000000000000012;
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.AgreementConceptAttribute()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AgreementConceptAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name);
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return 0x746E657265666572;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name);
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute()
{
  return 0x7463656C666E69;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  return 0xD000000000000021;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  return 0x6F6C6F6870726F6DLL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.MorphologyAttribute.name);
}

void storeEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 >= a2)
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
          v14(a1, a2);
        }
        break;
    }
  }
  else
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
}

uint64_t type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _DarwinSearchPathsSequence()
{
  return 0;
}

double protocol witness for static AttributedStringKey.runBoundaries.getter in conformance AttributeScopes.FoundationAttributes.LinkAttribute@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_182106C90;
  return result;
}

uint64_t specialized closure #1 in static AttributeScope.scopeDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #1 in static AttributeScope.scopeDescription.getter((uint64_t (*)(void))specialized closure #1 in static AttributeScope.scopeDescription.getter, a1);
}

{
  return specialized closure #1 in static AttributeScope.scopeDescription.getter((uint64_t (*)(void))specialized closure #1 in static AttributeScope.scopeDescription.getter, a1);
}

{
  return specialized closure #1 in static AttributeScope.scopeDescription.getter((uint64_t (*)(void))specialized closure #1 in static AttributeScope.scopeDescription.getter, a1);
}

uint64_t specialized closure #1 in static AttributeScope.scopeDescription.getter@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t partial apply for specialized closure #2 in static AttributeScope.scopeDescription.getter(uint64_t a1)
{
  return specialized closure #2 in static AttributeScope.scopeDescription.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #2 in static AttributeScope.scopeDescription.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #2 in static AttributeScope.scopeDescription.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t specialized closure #2 in static AttributeScope.scopeDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes);
  uint64_t v10 = *(void *)(v37 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    char v3 = v8;
    if (*(void *)(v37 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
      uint64_t v13 = v37;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes);
      if ((v3 & 1) != (v15 & 1)) {
        goto LABEL_47;
      }
      unint64_t v9 = v14;
      if ((v3 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v16 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v16 = a2;
      v16[1] = a3;
LABEL_44:
      *(void *)(a1 + 16) = v13;
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v13 = v37;
      if (v8) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes, a2, a3, (void *)v13);
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  uint64_t v17 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v17;
  if (!*(void *)(v37 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
  uint64_t v18 = (char *)(v17 + 64);
  uint64_t v19 = (char *)(v37 + 64);
  unint64_t v20 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v37 || v18 >= &v19[8 * v20])
  {
    memmove(v18, v19, 8 * v20);
    uint64_t v19 = (char *)(v37 + 64);
  }
  int64_t v21 = 0;
  *(void *)(v13 + 16) = *(void *)(v37 + 16);
  uint64_t v22 = 1 << *(unsigned char *)(v37 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & *(void *)(v37 + 64);
  uint64_t v35 = v19;
  int64_t v36 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      unint64_t v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v26 = v25 | (v21 << 6);
      goto LABEL_18;
    }
    int64_t v31 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v31 >= v36) {
      goto LABEL_42;
    }
    unint64_t v32 = *(void *)&v35[8 * v31];
    ++v21;
    if (!v32)
    {
      int64_t v21 = v31 + 1;
      if (v31 + 1 >= v36) {
        goto LABEL_42;
      }
      unint64_t v32 = *(void *)&v35[8 * v21];
      if (!v32)
      {
        int64_t v21 = v31 + 2;
        if (v31 + 2 >= v36) {
          goto LABEL_42;
        }
        unint64_t v32 = *(void *)&v35[8 * v21];
        if (!v32)
        {
          int64_t v21 = v31 + 3;
          if (v31 + 3 >= v36) {
            goto LABEL_42;
          }
          unint64_t v32 = *(void *)&v35[8 * v21];
          if (!v32)
          {
            int64_t v21 = v31 + 4;
            if (v31 + 4 >= v36) {
              goto LABEL_42;
            }
            unint64_t v32 = *(void *)&v35[8 * v21];
            if (!v32)
            {
              int64_t v21 = v31 + 5;
              if (v31 + 5 >= v36) {
                goto LABEL_42;
              }
              unint64_t v32 = *(void *)&v35[8 * v21];
              if (!v32)
              {
                int64_t v21 = v31 + 6;
                if (v31 + 6 >= v36) {
                  goto LABEL_42;
                }
                unint64_t v32 = *(void *)&v35[8 * v21];
                if (!v32) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    unint64_t v24 = (v32 - 1) & v32;
    unint64_t v26 = __clz(__rbit64(v32)) + (v21 << 6);
LABEL_18:
    uint64_t v27 = 8 * v26;
    uint64_t v28 = *(void *)(*(void *)(v37 + 48) + 8 * v26);
    uint64_t v29 = 16 * v26;
    long long v30 = *(_OWORD *)(*(void *)(v37 + 56) + v29);
    *(void *)(*(void *)(v13 + 48) + v27) = v28;
    *(_OWORD *)(*(void *)(v13 + 56) + v29) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  int64_t v33 = v31 + 7;
  if (v33 >= v36) {
    goto LABEL_42;
  }
  unint64_t v32 = *(void *)&v35[8 * v33];
  if (v32)
  {
    int64_t v21 = v33;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v21 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v21 >= v36) {
      goto LABEL_42;
    }
    unint64_t v32 = *(void *)&v35[8 * v21];
    ++v33;
    if (v32) {
      goto LABEL_41;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  char v3;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  long long v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t result;
  char *v35;
  int64_t v36;
  uint64_t v37;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
  uint64_t v10 = *(void *)(v37 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    char v3 = v8;
    if (*(void *)(v37 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
      uint64_t v13 = v37;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
      if ((v3 & 1) != (v15 & 1)) {
        goto LABEL_47;
      }
      unint64_t v9 = v14;
      if ((v3 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v16 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v16 = a2;
      v16[1] = a3;
LABEL_44:
      *(void *)(a1 + 16) = v13;
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v13 = v37;
      if (v8) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes, a2, a3, (void *)v13);
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  uint64_t v17 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v17;
  if (!*(void *)(v37 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
  uint64_t v18 = (char *)(v17 + 64);
  uint64_t v19 = (char *)(v37 + 64);
  unint64_t v20 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v37 || v18 >= &v19[8 * v20])
  {
    memmove(v18, v19, 8 * v20);
    uint64_t v19 = (char *)(v37 + 64);
  }
  int64_t v21 = 0;
  *(void *)(v13 + 16) = *(void *)(v37 + 16);
  uint64_t v22 = 1 << *(unsigned char *)(v37 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & *(void *)(v37 + 64);
  uint64_t v35 = v19;
  int64_t v36 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      unint64_t v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v26 = v25 | (v21 << 6);
      goto LABEL_18;
    }
    int64_t v31 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v31 >= v36) {
      goto LABEL_42;
    }
    unint64_t v32 = *(void *)&v35[8 * v31];
    ++v21;
    if (!v32)
    {
      int64_t v21 = v31 + 1;
      if (v31 + 1 >= v36) {
        goto LABEL_42;
      }
      unint64_t v32 = *(void *)&v35[8 * v21];
      if (!v32)
      {
        int64_t v21 = v31 + 2;
        if (v31 + 2 >= v36) {
          goto LABEL_42;
        }
        unint64_t v32 = *(void *)&v35[8 * v21];
        if (!v32)
        {
          int64_t v21 = v31 + 3;
          if (v31 + 3 >= v36) {
            goto LABEL_42;
          }
          unint64_t v32 = *(void *)&v35[8 * v21];
          if (!v32)
          {
            int64_t v21 = v31 + 4;
            if (v31 + 4 >= v36) {
              goto LABEL_42;
            }
            unint64_t v32 = *(void *)&v35[8 * v21];
            if (!v32)
            {
              int64_t v21 = v31 + 5;
              if (v31 + 5 >= v36) {
                goto LABEL_42;
              }
              unint64_t v32 = *(void *)&v35[8 * v21];
              if (!v32)
              {
                int64_t v21 = v31 + 6;
                if (v31 + 6 >= v36) {
                  goto LABEL_42;
                }
                unint64_t v32 = *(void *)&v35[8 * v21];
                if (!v32) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    unint64_t v24 = (v32 - 1) & v32;
    unint64_t v26 = __clz(__rbit64(v32)) + (v21 << 6);
LABEL_18:
    uint64_t v27 = 8 * v26;
    uint64_t v28 = *(void *)(*(void *)(v37 + 48) + 8 * v26);
    uint64_t v29 = 16 * v26;
    long long v30 = *(_OWORD *)(*(void *)(v37 + 56) + v29);
    *(void *)(*(void *)(v13 + 48) + v27) = v28;
    *(_OWORD *)(*(void *)(v13 + 56) + v29) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  int64_t v33 = v31 + 7;
  if (v33 >= v36) {
    goto LABEL_42;
  }
  unint64_t v32 = *(void *)&v35[8 * v33];
  if (v32)
  {
    int64_t v21 = v33;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v21 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v21 >= v36) {
      goto LABEL_42;
    }
    unint64_t v32 = *(void *)&v35[8 * v21];
    ++v33;
    if (v32) {
      goto LABEL_41;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  char v3;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t result;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;

  unsigned int v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FoundationPlusScope<AttributeScopes.FoundationAttributes>);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v38 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  BOOL v11 = *(void *)(v38 + 16);
  uint64_t v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v3 = v9;
    if (*(void *)(v38 + 24) < v13)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, isUniquelyReferenced_nonNull_native);
      unint64_t v14 = v38;
      char v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v3 & 1) != (v16 & 1)) {
        goto LABEL_47;
      }
      uint64_t v10 = v15;
      if ((v3 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v17 = a2;
      v17[1] = a3;
LABEL_44:
      *(void *)(a1 + 16) = v14;
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unint64_t v14 = v38;
      if (v9) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v10, v7, a2, a3, (void *)v14);
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  uint64_t v18 = static _DictionaryStorage.copy(original:)();
  unint64_t v14 = v18;
  if (!*(void *)(v38 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
  uint64_t v19 = (char *)(v18 + 64);
  unint64_t v20 = (char *)(v38 + 64);
  int64_t v21 = (unint64_t)((1 << *(unsigned char *)(v14 + 32)) + 63) >> 6;
  int64_t v36 = v38 + 64;
  if (v14 != v38 || v19 >= &v20[8 * v21]) {
    memmove(v19, v20, 8 * v21);
  }
  uint64_t v22 = 0;
  *(void *)(v14 + 16) = *(void *)(v38 + 16);
  uint64_t v23 = 1 << *(unsigned char *)(v38 + 32);
  unint64_t v24 = -1;
  if (v23 < 64) {
    unint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & *(void *)(v38 + 64);
  uint64_t v37 = (unint64_t)(v23 + 63) >> 6;
  while (1)
  {
    if (v25)
    {
      unint64_t v26 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      uint64_t v27 = v26 | (v22 << 6);
      goto LABEL_18;
    }
    unint64_t v32 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v32 >= v37) {
      goto LABEL_42;
    }
    int64_t v33 = *(void *)(v36 + 8 * v32);
    ++v22;
    if (!v33)
    {
      uint64_t v22 = v32 + 1;
      if (v32 + 1 >= v37) {
        goto LABEL_42;
      }
      int64_t v33 = *(void *)(v36 + 8 * v22);
      if (!v33)
      {
        uint64_t v22 = v32 + 2;
        if (v32 + 2 >= v37) {
          goto LABEL_42;
        }
        int64_t v33 = *(void *)(v36 + 8 * v22);
        if (!v33)
        {
          uint64_t v22 = v32 + 3;
          if (v32 + 3 >= v37) {
            goto LABEL_42;
          }
          int64_t v33 = *(void *)(v36 + 8 * v22);
          if (!v33)
          {
            uint64_t v22 = v32 + 4;
            if (v32 + 4 >= v37) {
              goto LABEL_42;
            }
            int64_t v33 = *(void *)(v36 + 8 * v22);
            if (!v33)
            {
              uint64_t v22 = v32 + 5;
              if (v32 + 5 >= v37) {
                goto LABEL_42;
              }
              int64_t v33 = *(void *)(v36 + 8 * v22);
              if (!v33)
              {
                uint64_t v22 = v32 + 6;
                if (v32 + 6 >= v37) {
                  goto LABEL_42;
                }
                int64_t v33 = *(void *)(v36 + 8 * v22);
                if (!v33) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    unint64_t v25 = (v33 - 1) & v33;
    uint64_t v27 = __clz(__rbit64(v33)) + (v22 << 6);
LABEL_18:
    uint64_t v28 = 8 * v27;
    uint64_t v29 = *(void *)(*(void *)(v38 + 48) + 8 * v27);
    long long v30 = 16 * v27;
    int64_t v31 = *(_OWORD *)(*(void *)(v38 + 56) + v30);
    *(void *)(*(void *)(v14 + 48) + v28) = v29;
    *(_OWORD *)(*(void *)(v14 + 56) + v30) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v34 = v32 + 7;
  if (v34 >= v37) {
    goto LABEL_42;
  }
  int64_t v33 = *(void *)(v36 + 8 * v34);
  if (v33)
  {
    uint64_t v22 = v34;
    goto LABEL_41;
  }
  while (1)
  {
    uint64_t v22 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v22 >= v37) {
      goto LABEL_42;
    }
    int64_t v33 = *(void *)(v36 + 8 * v22);
    ++v34;
    if (v33) {
      goto LABEL_41;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>(void *a1)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1);
}

unint64_t _JSONKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v94 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v93 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v101 = *(void *)(v10 - 8);
  uint64_t v102 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v99 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v98 = (char *)&v87 - v13;
  uint64_t v14 = *v4;
  uint64_t v15 = v4[1];
  unint64_t v16 = v4[2];
  uint64_t v17 = *(void *)(a2 + 24);
  v103[3] = v7;
  v103[4] = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v103);
  uint64_t v100 = v8;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v96 = a1;
  uint64_t v97 = v8 + 16;
  uint64_t v95 = v19;
  v19((char *)boxed_opaque_existential_1, a1, v7);
  uint64_t v92 = v17;
  uint64_t v20 = _JSONKeyedEncodingContainer._converted(_:)(v103, v14, v15, v16);
  uint64_t v22 = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
  uint64_t v23 = v4[1];
  if (*(unsigned char *)(v23 + 32) != 4)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  unint64_t v24 = (void *)(v23 + 16);
  uint64_t v25 = *(void *)(v23 + 16);
  if (*(void *)(v25 + 16))
  {
    uint64_t v26 = *(void *)(v23 + 24);
    outlined copy of JSONReference.Backing(*(void *)(v23 + 16), v26, 4);
    swift_bridgeObjectRetain();
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v22);
    if (v28)
    {
      uint64_t v29 = *(void *)(*(void *)(v25 + 56) + 8 * v27);
      swift_retain();
      outlined consume of JSONReference.Backing(v25, v26, 4);
      swift_bridgeObjectRelease_n();
      if (*(unsigned char *)(v29 + 32) == 3)
      {
LABEL_54:
        uint64_t v67 = *v4;
        unint64_t v68 = v4[2];
        int64_t v69 = v98;
        v95(v98, v96, v7);
        uint64_t v70 = v100;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v69, 0, 1, v7);
        uint64_t v72 = v101;
        uint64_t v71 = v102;
        uint64_t v73 = v99;
        (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v99, v69, v102);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v73, 1, v7) == 1)
        {
          char v74 = *(void (**)(char *, uint64_t))(v72 + 8);
          swift_retain();
          v74(v69, v71);
          v74(v73, v71);
          swift_retain();
LABEL_62:
          uint64_t v85 = v94;
          v94[3] = (uint64_t)&unk_1ECA41F28;
          unint64_t result = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
          v85[4] = result;
          *uint64_t v85 = v67;
          v85[1] = v29;
          v85[2] = v68;
          return result;
        }
        uint64_t v97 = v29;
        unint64_t v75 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
        uint64_t v76 = v73;
        BOOL v77 = v93;
        v75(v93, v76, v7);
        uint64_t v78 = (uint64_t *)swift_allocObject();
        uint64_t v79 = v92;
        v78[5] = v7;
        void v78[6] = v79;
        unint64_t v80 = __swift_allocate_boxed_opaque_existential_1(v78 + 2);
        v75((char *)v80, v77, v7);
        char v81 = *(void (**)(char *, uint64_t))(v72 + 8);
        swift_retain();
        v81(v69, v71);
        v78[7] = v68;
        if (v68 >> 62)
        {
          if (v68 >> 62 != 1)
          {
            uint64_t v29 = v97;
            uint64_t v84 = 1;
            goto LABEL_61;
          }
          char v82 = (uint64_t *)((v68 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          char v82 = (uint64_t *)(v68 + 64);
        }
        uint64_t v29 = v97;
        uint64_t v83 = *v82;
        swift_retain();
        uint64_t v84 = v83 + 1;
        if (!__OFADD__(v83, 1))
        {
LABEL_61:
          v78[8] = v84;
          unint64_t v68 = (unint64_t)v78;
          goto LABEL_62;
        }
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      __break(1u);
    }
    outlined consume of JSONReference.Backing(v25, v26, 4);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for JSONReference();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v30 + 24) = 0;
  *(unsigned char *)(v30 + 32) = 3;
  if (*(unsigned char *)(v23 + 32) != 4)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  uint64_t v29 = v30;
  uint64_t v31 = *(void *)(v23 + 16);
  *unint64_t v24 = 0;
  *(void *)(v23 + 24) = 0;
  *(unsigned char *)(v23 + 32) = 7;
  swift_retain_n();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v103[0] = v31;
  unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v22);
  uint64_t v35 = *(void *)(v31 + 16);
  BOOL v36 = (v33 & 1) == 0;
  uint64_t v37 = v35 + v36;
  if (__OFADD__(v35, v36))
  {
    __break(1u);
  }
  else
  {
    LODWORD(v24) = v33;
    if (*(void *)(v31 + 24) < v37)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
      uint64_t v38 = v103[0];
      unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v22);
      if ((v24 & 1) != (v40 & 1)) {
        goto LABEL_69;
      }
      unint64_t v34 = v39;
      if ((v24 & 1) == 0) {
        goto LABEL_52;
      }
LABEL_15:
      uint64_t v41 = *(void *)(v38 + 56);
      uint64_t v42 = 8 * v34;
      swift_release();
      *(void *)(v41 + v42) = v29;
LABEL_53:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v64 = *(void *)(v23 + 16);
      uint64_t v65 = *(void *)(v23 + 24);
      *(void *)(v23 + 16) = v38;
      *(void *)(v23 + 24) = 0;
      char v66 = *(unsigned char *)(v23 + 32);
      *(unsigned char *)(v23 + 32) = 4;
      outlined consume of JSONReference.Backing(v64, v65, v66);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_54;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v38 = v31;
      if (v33) {
        goto LABEL_15;
      }
LABEL_52:
      specialized _NativeDictionary._insert(at:key:value:)(v34, v20, v22, v29, v38);
      swift_bridgeObjectRetain();
      goto LABEL_53;
    }
  }
  unint64_t v87 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v43 = static _DictionaryStorage.copy(original:)();
  uint64_t v38 = v43;
  uint64_t v44 = *(void *)(v31 + 16);
  if (!v44)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    unint64_t v34 = v87;
    if (v24) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }
  int v89 = (int)v24;
  char v45 = (void *)(v43 + 64);
  unint64_t v46 = (unint64_t)((1 << *(unsigned char *)(v38 + 32)) + 63) >> 6;
  if (v38 != v31 || (unint64_t)v45 >= v31 + 64 + 8 * v46)
  {
    memmove(v45, (const void *)(v31 + 64), 8 * v46);
    uint64_t v44 = *(void *)(v31 + 16);
  }
  uint64_t v88 = v31 + 64;
  int64_t v47 = 0;
  *(void *)(v38 + 16) = v44;
  uint64_t v48 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t v49 = -1;
  if (v48 < 64) {
    uint64_t v49 = ~(-1 << v48);
  }
  unint64_t v50 = v49 & *(void *)(v31 + 64);
  int64_t v90 = (unint64_t)(v48 + 63) >> 6;
  while (1)
  {
    if (v50)
    {
      unint64_t v51 = __clz(__rbit64(v50));
      v50 &= v50 - 1;
      int64_t v91 = v47;
      unint64_t v52 = v51 | (v47 << 6);
      goto LABEL_25;
    }
    int64_t v59 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      goto LABEL_65;
    }
    LOBYTE(v24) = v89;
    if (v59 >= v90) {
      goto LABEL_51;
    }
    unint64_t v60 = *(void *)(v88 + 8 * v59);
    int64_t v61 = v47 + 1;
    if (!v60)
    {
      int64_t v61 = v59 + 1;
      if (v59 + 1 >= v90) {
        goto LABEL_51;
      }
      unint64_t v60 = *(void *)(v88 + 8 * v61);
      if (!v60)
      {
        int64_t v61 = v59 + 2;
        if (v59 + 2 >= v90) {
          goto LABEL_51;
        }
        unint64_t v60 = *(void *)(v88 + 8 * v61);
        if (!v60)
        {
          int64_t v61 = v59 + 3;
          if (v59 + 3 >= v90) {
            goto LABEL_51;
          }
          unint64_t v60 = *(void *)(v88 + 8 * v61);
          if (!v60)
          {
            int64_t v61 = v59 + 4;
            if (v59 + 4 >= v90) {
              goto LABEL_51;
            }
            unint64_t v60 = *(void *)(v88 + 8 * v61);
            if (!v60)
            {
              int64_t v61 = v59 + 5;
              if (v59 + 5 >= v90) {
                goto LABEL_51;
              }
              unint64_t v60 = *(void *)(v88 + 8 * v61);
              if (!v60)
              {
                int64_t v61 = v59 + 6;
                if (v59 + 6 >= v90) {
                  goto LABEL_51;
                }
                unint64_t v60 = *(void *)(v88 + 8 * v61);
                if (!v60)
                {
                  int64_t v61 = v59 + 7;
                  if (v59 + 7 >= v90) {
                    goto LABEL_51;
                  }
                  unint64_t v60 = *(void *)(v88 + 8 * v61);
                  if (!v60) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_50:
    unint64_t v50 = (v60 - 1) & v60;
    int64_t v91 = v61;
    unint64_t v52 = __clz(__rbit64(v60)) + (v61 << 6);
LABEL_25:
    uint64_t v53 = 16 * v52;
    double v54 = (void *)(*(void *)(v31 + 48) + 16 * v52);
    uint64_t v55 = v54[1];
    uint64_t v56 = 8 * v52;
    uint64_t v57 = *(void *)(*(void *)(v31 + 56) + v56);
    uint64_t v58 = (void *)(*(void *)(v38 + 48) + v53);
    void *v58 = *v54;
    v58[1] = v55;
    *(void *)(*(void *)(v38 + 56) + v56) = v57;
    swift_bridgeObjectRetain();
    swift_retain();
    int64_t v47 = v91;
  }
  int64_t v62 = v59 + 8;
  if (v62 >= v90) {
    goto LABEL_51;
  }
  uint64_t v63 = v29;
  unint64_t v60 = *(void *)(v88 + 8 * v62);
  if (v60)
  {
    int64_t v61 = v62;
    goto LABEL_50;
  }
  while (1)
  {
    int64_t v61 = v62 + 1;
    if (__OFADD__(v62, 1)) {
      break;
    }
    uint64_t v29 = v63;
    LOBYTE(v24) = v89;
    if (v61 >= v90) {
      goto LABEL_51;
    }
    unint64_t v60 = *(void *)(v88 + 8 * v61);
    ++v62;
    if (v60) {
      goto LABEL_50;
    }
  }
LABEL_68:
  __break(1u);
LABEL_69:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance JSONDecoderImpl.UnkeyedContainer@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized JSONDecoderImpl.UnkeyedContainer.decoderForNextElement<A>(ofType:)();
  if (!v2)
  {
    uint64_t v5 = *(void *)(v1 + 64);
    BOOL v6 = __OFADD__(v5, 1);
    uint64_t v7 = v5 + 1;
    if (v6)
    {
      __break(1u);
    }
    else
    {
      uint64_t v8 = result;
      *(void *)(v1 + 64) = v7;
      *(void *)(v1 + 24) = 0;
      *(void *)(v1 + 32) = 0;
      *(unsigned char *)(v1 + 40) = -2;
      a1[3] = type metadata accessor for JSONDecoderImpl();
      uint64_t result = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
      a1[4] = result;
      *a1 = v8;
    }
  }
  return result;
}

uint64_t specialized JSONDecoderImpl.UnkeyedContainer.decoderForNextElement<A>(ofType:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v17 = *(void *)(v0 + 24);
    uint64_t v18 = *(void *)(v0 + 32);
    goto LABEL_10;
  }
  uint64_t v4 = v2;
  unint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = JSONMap.loadValue(at:)(v5);
  if (v8 <= 0xFDu)
  {
    uint64_t v17 = v6;
    uint64_t v18 = v7;
    LOBYTE(v3) = v8;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v5);
    *(void *)(v0 + 24) = v17;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
LABEL_10:
    uint64_t v19 = *(void *)v0;
    uint64_t v46 = *(void *)(*(void *)v0 + 24);
    uint64_t v47 = *(void *)(*(void *)v0 + 32);
    unint64_t v21 = *(void *)(v0 + 64);
    unint64_t v20 = *(void *)(v1 + 72);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v21;
    *(void *)(v22 + 24) = v20;
    if (v20 >> 62)
    {
      if (v20 >> 62 != 1)
      {
        unint64_t v26 = 1;
        goto LABEL_15;
      }
      uint64_t v23 = (int64_t *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v23 = (int64_t *)(v20 + 64);
    }
    int64_t v24 = *v23;
    swift_retain();
    unint64_t v26 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_20;
    }
LABEL_15:
    uint64_t v35 = v18;
    uint64_t v36 = v17;
    char v37 = v3;
    *(void *)(v22 + 32) = v26;
    unint64_t v27 = *(void **)(v19 + 40);
    uint64_t v39 = *(void *)(v19 + 48);
    unint64_t v28 = *(void *)(v19 + 64);
    uint64_t v29 = *(void *)(v19 + 72);
    uint64_t v30 = *(void *)(v19 + 80);
    uint64_t v43 = *(void *)(v19 + 88);
    uint64_t v40 = *(void *)(v19 + 104);
    uint64_t v41 = *(void *)(v19 + 96);
    uint64_t v51 = *(void *)(v19 + 112);
    unint64_t v31 = *(void *)(v19 + 128);
    uint64_t v42 = *(void *)(v19 + 120);
    uint64_t v32 = *(void *)(v19 + 144);
    uint64_t v44 = *(void *)(v19 + 136);
    char v45 = *(unsigned char *)(v19 + 152);
    char v38 = *(unsigned char *)(v19 + 56);
    type metadata accessor for JSONDecoderImpl();
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 160) = v22 | 0x4000000000000000;
    *(void *)(v1 + 24) = v46;
    *(void *)(v1 + 32) = v47;
    *(void *)(v1 + 40) = v27;
    *(void *)(v1 + 48) = v39;
    *(unsigned char *)(v1 + 56) = v38;
    *(void *)(v1 + 64) = v28;
    *(void *)(v1 + 72) = v29;
    *(void *)(v1 + 80) = v30;
    *(void *)(v1 + 88) = v43;
    *(void *)(v1 + 96) = v41;
    *(void *)(v1 + 104) = v40;
    *(void *)(v1 + 112) = v51;
    *(void *)(v1 + 120) = v42;
    *(void *)(v1 + 128) = v31;
    *(void *)(v1 + 136) = v44;
    *(void *)(v1 + 144) = v32;
    *(unsigned char *)(v1 + 152) = v45;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of JSONEncoder.DateEncodingStrategy(v27, v39, v38);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v28);
    outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v30, v43);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v31);
    swift_bridgeObjectRetain();
    uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v21 = v25[2];
    unint64_t v26 = v25[3];
    int64_t v24 = v21 + 1;
    if (v21 < v26 >> 1)
    {
LABEL_16:
      v25[2] = v24;
      int v33 = &v25[3 * v21];
      v33[4] = v36;
      v33[5] = v35;
      *((unsigned char *)v33 + 48) = v37;
      *(void *)(v1 + 16) = v25;
      return v1;
    }
LABEL_20:
    uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v24, 1, v25);
    goto LABEL_16;
  }
  uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
  uint64_t v10 = *(void *)(v1 + 64);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
  }
  uint64_t v49 = &type metadata for _CodingKey;
  unint64_t v50 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v13 = swift_allocObject();
  *(void *)&long long v48 = v13;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 16) = v10;
  *(unsigned char *)(v13 + 40) = 2;
  _OWORD v9[2] = v12 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)&v9[5 * v12 + 4]);
  uint64_t v14 = type metadata accessor for DecodingError();
  swift_allocError();
  unint64_t v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *unint64_t v16 = v4;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
  swift_willThrow();
  return v1;
}

uint64_t CharacterSet.inverted.getter@<X0>(uint64_t *a1@<X8>)
{
  return __CharacterSetStorage.inverted.getter(a1);
}

uint64_t __CharacterSetStorage.inverted.getter@<X0>(uint64_t *a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 24);
  CFCharacterSetRef v4 = (const __CFCharacterSet *)*(id *)(v1 + 16);
  uint64_t result = (uint64_t)CFCharacterSetCreateInvertedSet(0, v4);
  uint64_t v6 = result;
  if (v3)
  {
    if (result)
    {
LABEL_5:

      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v6;
      *(unsigned char *)(result + 24) = 0;
      *a1 = result;
      return result;
    }
    __break(1u);
  }
  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t URL.relativePath.getter()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State())
    {
      id v5 = objc_msgSend(v2, sel__parameterString);
      if (v5)
      {
        uint64_t v6 = v5;
        id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
        uint64_t v9 = v8;

        id v10 = objc_msgSend(v2, sel_relativePath);
        if (v10)
        {
          unint64_t v11 = v10;
          id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          unint64_t v14 = v13;

          uint64_t v39 = (uint64_t)v12;
          unint64_t v40 = v14;
          swift_bridgeObjectRetain();
          v15._uint64_t countAndFlagsBits = 59;
          v15._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v16._uint64_t countAndFlagsBits = (uint64_t)v7;
          v16._unint64_t object = v9;
          String.append(_:)(v16);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v39 = 59;
          unint64_t v40 = 0xE100000000000000;
          v34._uint64_t countAndFlagsBits = (uint64_t)v7;
          v34._unint64_t object = v9;
          String.append(_:)(v34);
        }
        swift_bridgeObjectRelease();
        return v39;
      }
    }
    id v17 = objc_msgSend(v2, sel_relativePath);
    if (!v17) {
      return 0;
    }
    uint64_t v18 = v17;
    id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

    return (uint64_t)v19;
  }
  if (v1)
  {
    if (*(unsigned char *)(v1 + 168)) {
      uint64_t v4 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v4 = String.subscript.getter();
    }
    uint64_t v20 = MEMORY[0x185301F50](v4);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v39 = v20;
    unint64_t v40 = v22;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t v23 = v22;
    }
    else
    {
      unint64_t v23 = v22;
      if ((specialized BidirectionalCollection.last.getter(v20, v22) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v20 = v39;
        unint64_t v23 = v40;
      }
    }
    uint64_t v36 = Set.init(minimumCapacity:)();
    uint64_t v24 = specialized Set._Variant.insert(_:)(&v38, 0x2FuLL);
    uint64_t v25 = v36;
    uint64_t v26 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      uint64_t v26 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (v26)
    {
      uint64_t v36 = v20;
      unint64_t v37 = v23;
      MEMORY[0x1F4188790](v24);
      _OWORD v35[2] = &v36;
      _OWORD v35[3] = v25;
      swift_bridgeObjectRetain();
      unint64_t v27 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v35, v20, v23);
      if (v28 == 1)
      {
        Swift::Int v29 = v36;
        unint64_t v30 = v37;
        swift_bridgeObjectRetain();
        id v19 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v29, v30, v25);
        uint64_t v32 = v31;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v32) {
          goto LABEL_25;
        }
      }
      else
      {
        id v19 = v27;
        uint64_t v33 = v28;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v33)
        {
LABEL_25:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      id v19 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v19;
  }
  __break(1u);
  return result;
}

Class initBKSProcessAssertion()
{
  AssertionServicesLibrary();
  Class result = objc_getClass("BKSProcessAssertion");
  classBKSProcessAssertion = (uint64_t)result;
  if (!result) {
    __assert_rtn("initBKSProcessAssertion", "NSProcessInfo_Helpers.m", 78, "classBKSProcessAssertion");
  }
  getBKSProcessAssertionClass = BKSProcessAssertionFunction;
  return result;
}

uint64_t initBKSProcessAssertionSetExpirationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = AssertionServicesLibrary();
  id v5 = (uint64_t (*)())dlsym(v4, "BKSProcessAssertionSetExpirationHandler");
  softLinkBKSProcessAssertionSetExpirationHandler = v5;
  if (!v5) {
    __assert_rtn("initBKSProcessAssertionSetExpirationHandler", "NSProcessInfo_Helpers.m", 79, "softLinkBKSProcessAssertionSetExpirationHandler");
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

void *AssertionServicesLibrary()
{
  Class result = (void *)AssertionServicesLibrary_frameworkLibrary;
  if (!AssertionServicesLibrary_frameworkLibrary)
  {
    Class result = dlopen("/System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices", 2);
    AssertionServicesLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("AssertionServicesLibrary", "NSProcessInfo_Helpers.m", 77, "frameworkLibrary");
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributedString(uint64_t a1)
{
  *(void *)(a1 + 16) = lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
  unint64_t result = lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString and conformance AttributedString()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __PlistEncoderXML@<X0>(uint64_t *a1@<X8>)
{
  return __PlistEncoderXML.unkeyedContainer()(a1);
}

uint64_t __PlistEncoderXML.unkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 2;
  uint64_t result = (*(uint64_t (**)(void))(*v1 + 240))();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<ContiguousArray<_XMLPlistEncodingFormat.Reference>>);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = MEMORY[0x1E4FBC860];
    uint64_t v7 = *v4;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v4 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
      uint64_t v7 = *v4;
    }
    unint64_t v10 = *(void *)(v7 + 16);
    unint64_t v9 = *(void *)(v7 + 24);
    if (v10 >= v9 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      uint64_t v7 = *v4;
    }
    uint64_t v11 = 0;
    *(void *)(v7 + 16) = v10 + 1;
    uint64_t v12 = v7 + 24 * v10;
    *(void *)(v12 + 32) = v6;
    *(void *)(v12 + 40) = 0;
    *(unsigned char *)(v12 + 48) = 6;
    *uint64_t v4 = v7;
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(*v4 + 16);
  if (!v13)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v14 = *v4 + 24 * v13;
  if (*(unsigned char *)(v14 + 24) != 6)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(v14 + 8);
  uint64_t v11 = *(void *)(v14 + 16);
  swift_retain();
LABEL_10:
  uint64_t v15 = v2[5];
  a1[3] = (uint64_t)&unk_1ECA43248;
  a1[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML();
  uint64_t v16 = swift_allocObject();
  *a1 = v16;
  *(void *)(v16 + 16) = v2;
  *(void *)(v16 + 24) = v6;
  *(void *)(v16 + 32) = v11;
  *(unsigned char *)(v16 + 40) = 6;
  *(void *)(v16 + 48) = v15;
  swift_retain();

  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML);
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned __int8 v8 = v6;
  uint64_t v103 = a5;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v99 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v107 = *(void *)(v16 - 8);
  uint64_t v108 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v109 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v104 = a2;
  Swift::Int v105 = (char *)&v90 - v19;
  uint64_t v20 = *(void *)(a3 + 24);
  uint64_t v106 = v13;
  uint64_t v98 = v20;
  uint64_t v21 = dispatch thunk of CodingKey.stringValue.getter();
  if (*((unsigned char *)v8 + 24) != 7)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  uint64_t v23 = v21;
  unint64_t v24 = v22;
  uint64_t v26 = v8[1];
  unint64_t v25 = v8[2];
  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v28 = *(void *)(v27 + 16);
  uint64_t v101 = a6;
  uint64_t v102 = a4;
  if (v28)
  {
    outlined copy of _XMLPlistEncodingFormat.Reference(v26, v25, 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v7 = v23;
    uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24, 0);
    if (v30)
    {
      uint64_t v31 = *(void *)(v27 + 56) + 24 * v29;
      uint64_t v33 = *(void *)v31;
      unint64_t v32 = *(void *)(v31 + 8);
      int v34 = *(unsigned __int8 *)(v31 + 16);
      outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)v31, v32, *(unsigned char *)(v31 + 16));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v26, v25, 7);
      if (v34 != 7)
      {
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      unint64_t v100 = v32;
      uint64_t v35 = v109;
LABEL_53:
      uint64_t v73 = *v8;
      unint64_t v74 = v8[4];
      unint64_t v75 = v105;
      uint64_t v76 = v106;
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v105, v104, v106);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v75, 0, 1, v76);
      uint64_t v77 = v107;
      uint64_t v78 = v108;
      (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v35, v75, v108);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v35, 1, v76) == 1)
      {
        uint64_t v79 = *(void (**)(char *, uint64_t))(v77 + 8);
        swift_retain();
        v79(v75, v78);
        v79(v35, v78);
        swift_retain();
LABEL_63:
        uint64_t v110 = v73;
        uint64_t v111 = v33;
        unint64_t v88 = v100;
        uint64_t v112 = v100;
        char v113 = 7;
        unint64_t v114 = v74;
        swift_retain();
        outlined copy of _XMLPlistEncodingFormat.Reference(v33, v88, 7);
        type metadata accessor for _PlistKeyedEncodingContainerXML();
        swift_retain();
        swift_getWitnessTable();
        KeyedEncodingContainer.init<A>(_:)();
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of _XMLPlistEncodingFormat.Reference(v33, v88, 7);
        return swift_release();
      }
      uint64_t v109 = (char *)v33;
      unint64_t v104 = v24;
      unint64_t v80 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      char v81 = v99;
      v80(v99, v35, v76);
      char v82 = (uint64_t *)swift_allocObject();
      uint64_t v83 = v98;
      v82[5] = v76;
      v82[6] = v83;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v82 + 2);
      v80((char *)boxed_opaque_existential_1, v81, v76);
      uint64_t v85 = *(void (**)(char *, uint64_t))(v77 + 8);
      swift_retain();
      v85(v75, v78);
      v82[7] = v74;
      if (v74 >> 62)
      {
        if (v74 >> 62 != 1)
        {
          uint64_t v87 = 0;
          goto LABEL_61;
        }
        uint64_t v86 = (uint64_t *)((v74 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        uint64_t v86 = (uint64_t *)(v74 + 64);
      }
      uint64_t v87 = *v86;
      swift_retain();
LABEL_61:
      uint64_t v33 = (uint64_t)v109;
      if (!__OFADD__(v87, 1))
      {
        v82[8] = v87 + 1;
        unint64_t v74 = (unint64_t)v82;
        goto LABEL_63;
      }
      __break(1u);
      goto LABEL_65;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v26, v25, 7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = MEMORY[0x1E4FBC868];
  outlined copy of _XMLPlistEncodingFormat.Reference(v26, v25, 7);
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v26, v25, 7);
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v110 = *(void *)(v26 + 16);
  uint64_t v37 = v110;
  *(void *)(v26 + 16) = 0x8000000000000000;
  unint64_t v100 = v23;
  unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24, 0);
  uint64_t v40 = *(void *)(v37 + 16);
  BOOL v41 = (v38 & 1) == 0;
  uint64_t v42 = v40 + v41;
  if (__OFADD__(v40, v41))
  {
    __break(1u);
  }
  else
  {
    char v7 = v38;
    if (*(void *)(v37 + 24) < v42)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, isUniquelyReferenced_nonNull_native);
      uint64_t v43 = v110;
      uint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v100, v24, 0);
      if ((v7 & 1) != (v45 & 1)) {
        goto LABEL_69;
      }
      unint64_t v39 = v44;
      uint64_t v35 = v109;
      if ((v7 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v46 = *(void *)(v43 + 56) + 24 * v39;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v46, *(void *)(v46 + 8), *(unsigned char *)(v46 + 16));
      *(void *)uint64_t v46 = v33;
      *(void *)(v46 + 8) = 0;
      *(unsigned char *)(v46 + 16) = 7;
LABEL_52:
      *(void *)(v26 + 16) = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v26, v25, 7);
      swift_release();
      outlined consume of _XMLPlistEncodingFormat.Reference(v26, v25, 7);
      unint64_t v100 = 0;
      goto LABEL_53;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v43 = v37;
      uint64_t v35 = v109;
      if (v38) {
        goto LABEL_14;
      }
LABEL_51:
      specialized _NativeDictionary._insert(at:key:value:)(v39, v100, v24, 0, v33, 0, 7, (void *)v43);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  unint64_t v91 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v47 = static _DictionaryStorage.copy(original:)();
  uint64_t v43 = v47;
  if (!*(void *)(v37 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v35 = v109;
    unint64_t v39 = v91;
    if (v7) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  long long v48 = (void *)(v47 + 64);
  unint64_t v49 = (unint64_t)((1 << *(unsigned char *)(v43 + 32)) + 63) >> 6;
  if (v43 != v37 || (unint64_t)v48 >= v37 + 64 + 8 * v49) {
    memmove(v48, (const void *)(v37 + 64), 8 * v49);
  }
  uint64_t v92 = v37 + 64;
  int64_t v50 = 0;
  *(void *)(v43 + 16) = *(void *)(v37 + 16);
  uint64_t v51 = 1 << *(unsigned char *)(v37 + 32);
  uint64_t v52 = -1;
  if (v51 < 64) {
    uint64_t v52 = ~(-1 << v51);
  }
  unint64_t v53 = v52 & *(void *)(v37 + 64);
  int64_t v93 = (unint64_t)(v51 + 63) >> 6;
  while (1)
  {
    if (v53)
    {
      uint64_t v96 = (v53 - 1) & v53;
      int64_t v97 = v50;
      unint64_t v54 = __clz(__rbit64(v53)) | (v50 << 6);
      goto LABEL_24;
    }
    int64_t v66 = v50 + 1;
    if (__OFADD__(v50, 1)) {
      goto LABEL_66;
    }
    if (v66 >= v93) {
      goto LABEL_50;
    }
    unint64_t v67 = *(void *)(v92 + 8 * v66);
    int64_t v68 = v50 + 1;
    if (!v67)
    {
      int64_t v68 = v50 + 2;
      if (v50 + 2 >= v93) {
        goto LABEL_50;
      }
      unint64_t v67 = *(void *)(v92 + 8 * v68);
      if (!v67)
      {
        int64_t v68 = v50 + 3;
        if (v50 + 3 >= v93) {
          goto LABEL_50;
        }
        unint64_t v67 = *(void *)(v92 + 8 * v68);
        if (!v67)
        {
          int64_t v68 = v50 + 4;
          if (v50 + 4 >= v93) {
            goto LABEL_50;
          }
          unint64_t v67 = *(void *)(v92 + 8 * v68);
          if (!v67)
          {
            int64_t v68 = v50 + 5;
            if (v50 + 5 >= v93) {
              goto LABEL_50;
            }
            unint64_t v67 = *(void *)(v92 + 8 * v68);
            if (!v67)
            {
              int64_t v68 = v50 + 6;
              if (v50 + 6 >= v93) {
                goto LABEL_50;
              }
              unint64_t v67 = *(void *)(v92 + 8 * v68);
              if (!v67)
              {
                int64_t v68 = v50 + 7;
                if (v50 + 7 >= v93) {
                  goto LABEL_50;
                }
                unint64_t v67 = *(void *)(v92 + 8 * v68);
                if (!v67)
                {
                  int64_t v68 = v50 + 8;
                  if (v50 + 8 >= v93) {
                    goto LABEL_50;
                  }
                  unint64_t v67 = *(void *)(v92 + 8 * v68);
                  if (!v67) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    uint64_t v96 = (v67 - 1) & v67;
    int64_t v97 = v68;
    unint64_t v54 = __clz(__rbit64(v67)) + (v68 << 6);
LABEL_24:
    uint64_t v55 = 24 * v54;
    uint64_t v56 = *(void *)(v37 + 48) + v55;
    uint64_t v57 = *(void *)v56;
    unint64_t v58 = *(void *)(v56 + 8);
    uint64_t v59 = *(void *)(v37 + 56) + v55;
    unint64_t v60 = *(void *)(v59 + 8);
    uint64_t v94 = *(void *)v59;
    uint64_t v61 = v94;
    unint64_t v95 = v60;
    uint64_t v62 = *(void *)(v43 + 48) + v55;
    char v63 = *(unsigned char *)(v56 + 16);
    char v64 = *(unsigned char *)(v59 + 16);
    *(void *)uint64_t v62 = v57;
    *(void *)(v62 + 8) = v58;
    *(unsigned char *)(v62 + 16) = v63;
    uint64_t v65 = *(void *)(v43 + 56) + v55;
    *(void *)uint64_t v65 = v61;
    *(void *)(v65 + 8) = v60;
    *(unsigned char *)(v65 + 16) = v64;
    outlined copy of _XMLPlistEncodingFormat.Reference(v57, v58, v63);
    outlined copy of _XMLPlistEncodingFormat.Reference(v94, v95, v64);
    unint64_t v53 = v96;
    int64_t v50 = v97;
  }
  uint64_t v69 = v50 + 9;
  if (v50 + 9 >= v93) {
    goto LABEL_50;
  }
  uint64_t v70 = v33;
  uint64_t v71 = v14;
  unint64_t v72 = v24;
  unint64_t v67 = *(void *)(v92 + 8 * v69);
  if (v67)
  {
    int64_t v68 = v50 + 9;
    goto LABEL_49;
  }
  while (1)
  {
    int64_t v68 = v69 + 1;
    if (__OFADD__(v69, 1)) {
      break;
    }
    unint64_t v24 = v72;
    uint64_t v14 = v71;
    uint64_t v33 = v70;
    if (v68 >= v93) {
      goto LABEL_50;
    }
    unint64_t v67 = *(void *)(v92 + 8 * v68);
    ++v69;
    if (v67) {
      goto LABEL_49;
    }
  }
LABEL_68:
  __break(1u);
LABEL_69:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __PlistEncoderXML()
{
  return __PlistEncoderXML.container<A>(keyedBy:)();
}

uint64_t __PlistEncoderXML.container<A>(keyedBy:)()
{
  uint64_t v1 = v0 + 2;
  uint64_t result = (*(uint64_t (**)(void))(*v0 + 240))();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = MEMORY[0x1E4FBC868];
    uint64_t v4 = *v1;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t *v1 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
      uint64_t v4 = *v1;
    }
    unint64_t v7 = *(void *)(v4 + 16);
    unint64_t v6 = *(void *)(v4 + 24);
    if (v7 >= v6 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      uint64_t v4 = *v1;
    }
    *(void *)(v4 + 16) = v7 + 1;
    uint64_t v8 = v4 + 24 * v7;
    *(void *)(v8 + 32) = v3;
    *(void *)(v8 + 40) = 0;
    *(unsigned char *)(v8 + 48) = 7;
    uint64_t *v1 = v4;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(*v1 + 16);
  if (v9)
  {
    if (*(unsigned char *)(*v1 + 24 * v9 + 24) == 7)
    {
      swift_retain();
LABEL_10:
      type metadata accessor for _PlistKeyedEncodingContainerXML();
      swift_retain();
      swift_retain();
      swift_getWitnessTable();
      return KeyedEncodingContainer.init<A>(_:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _PlistKeyedEncodingContainerXML()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _PlistUnkeyedEncodingContainerXML(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistUnkeyedEncodingContainerXML.encode<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __PlistEncoderXML@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __PlistEncoderXML();
  a1[4] = lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML(&lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML, v4, (void (*)(uint64_t))type metadata accessor for __PlistEncoderXML);
  *a1 = v3;

  return swift_retain();
}

uint64_t _PlistUnkeyedEncodingContainerXML.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  unint64_t v6 = v3;
  uint64_t v9 = *(void *)(a2 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v30[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v3;
  uint64_t result = (*(uint64_t (**)(char *, double))(v9 + 16))(v12, v10);
  unint64_t v15 = *(void *)(v13 + 40);
  int v16 = *((unsigned __int8 *)v6 + 24);
  if (v16 != 7 && v16 != 6)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v17 = *(void *)(*(void *)(v6[1] + 16) + 16);
  swift_retain();
  specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)((uint64_t)v12, v15, v17, 0, 0, 2, a2, a3, v30);
  if (v5)
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  }
  char v18 = v31;
  if (v31 == 255)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    char v18 = 7;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = MEMORY[0x1E4FBC868];
    swift_release();
    unint64_t v32 = 0;
  }
  else
  {
    uint64_t v19 = v30[0];
    unint64_t v32 = v30[1];
    swift_release();
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  if (*((unsigned char *)v6 + 24) != 6) {
    goto LABEL_15;
  }
  uint64_t v21 = v6[1];
  unint64_t v20 = v6[2];
  unint64_t v22 = (uint64_t *)(v21 + 16);
  uint64_t v23 = *(void *)(v21 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(v21, v20, 6);
  outlined copy of _XMLPlistEncodingFormat.Reference(v19, v32, v18);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v21 + 16) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1);
    uint64_t v23 = *v22;
  }
  unint64_t v26 = *(void *)(v23 + 16);
  unint64_t v25 = *(void *)(v23 + 24);
  if (v26 >= v25 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
    uint64_t v23 = *v22;
  }
  *(void *)(v23 + 16) = v26 + 1;
  uint64_t v27 = v23 + 24 * v26;
  unint64_t v28 = v32;
  *(void *)(v27 + 32) = v19;
  *(void *)(v27 + 40) = v28;
  *(unsigned char *)(v27 + 48) = v18;
  *(void *)(v21 + 16) = v23;
  outlined consume of _XMLPlistEncodingFormat.Reference(v21, v20, 6);
  return outlined consume of _XMLPlistEncodingFormat.Reference(v19, v28, v18);
}

uint64_t specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v53 = a8;
  unint64_t v54 = a5;
  LODWORD(v57) = a6;
  unint64_t v60 = a9;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v56 = v17;
    char v18 = v17;
    uint64_t v20 = *(void *)(v9 + 56);
    unint64_t v19 = *(void *)(v9 + 64);
    uint64_t v22 = *(void *)(v9 + 80);
    unint64_t v21 = *(void *)(v9 + 88);
    unint64_t v23 = *(void *)(v9 + 112);
    unint64_t v54 = *(void *)(v9 + 104);
    uint64_t v55 = a7;
    uint64_t v24 = a7;
    char v25 = *(unsigned char *)(v9 + 72);
    uint64_t v26 = a1;
    char v27 = *(unsigned char *)(v9 + 96);
    char v28 = *(unsigned char *)(v9 + 120);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v26, v24);
    outlined copy of _XMLPlistEncodingFormat.Reference(v20, v19, v25);
    outlined copy of _XMLPlistEncodingFormat.Reference(v22, v21, v27);
    uint64_t v29 = v54;
    outlined copy of _XMLPlistEncodingFormat.Reference(v54, v23, v28);
    swift_dynamicCast();
    char v30 = v25;
    uint64_t v31 = v58;
    outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, v30);
    outlined consume of _XMLPlistEncodingFormat.Reference(v22, v21, v27);
    uint64_t result = outlined consume of _XMLPlistEncodingFormat.Reference(v29, v23, v28);
    uint64_t v33 = 0;
    char v34 = 4;
  }
  else
  {
    unint64_t v49 = a2;
    uint64_t v50 = a3;
    uint64_t v51 = a4;
    uint64_t v52 = a1;
    if (!swift_dynamicCastMetatype())
    {
      MEMORY[0x1F4188790](0);
      uint64_t v46 = v53;
      uint64_t v45 = v54;
      *(&v48 - 4) = a7;
      *(&v48 - 3) = v46;
      uint64_t v47 = v51;
      *(&v48 - 2) = v52;
      return specialized __PlistEncoderXML._wrapGeneric<A>(_:for:_:)((void (*)(void *))partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:), v49, v50, v47, v45, v57, (uint64_t)v60);
    }
    uint64_t v35 = *(void *)(v9 + 56);
    unint64_t v36 = *(void *)(v9 + 64);
    uint64_t v38 = *(void *)(v9 + 80);
    unint64_t v37 = *(void *)(v9 + 88);
    uint64_t v51 = *(void *)(v9 + 104);
    unint64_t v39 = *(void *)(v9 + 112);
    uint64_t v53 = v35;
    unint64_t v54 = v39;
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    char v41 = *(unsigned char *)(v9 + 72);
    LODWORD(v50) = *(unsigned __int8 *)(v9 + 96);
    char v42 = *(unsigned char *)(v9 + 120);
    v40(v17, v52, a7);
    outlined copy of _XMLPlistEncodingFormat.Reference(v35, v36, v41);
    LOBYTE(v35) = v50;
    outlined copy of _XMLPlistEncodingFormat.Reference(v38, v37, v50);
    uint64_t v43 = v51;
    outlined copy of _XMLPlistEncodingFormat.Reference(v51, v54, v42);
    swift_dynamicCast();
    uint64_t v31 = v58;
    uint64_t v33 = v59;
    outlined consume of _XMLPlistEncodingFormat.Reference(v53, v36, v41);
    outlined consume of _XMLPlistEncodingFormat.Reference(v38, v37, v35);
    uint64_t result = outlined consume of _XMLPlistEncodingFormat.Reference(v43, v54, v42);
    char v34 = 5;
  }
  uint64_t v44 = v60;
  void *v60 = v31;
  v44[1] = v33;
  *((unsigned char *)v44 + 16) = v34;
  return result;
}

uint64_t specialized __PlistEncoderXML._wrapGeneric<A>(_:for:_:)@<X0>(void (*a1)(void *)@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X8>)
{
  uint64_t v9 = v7;
  uint64_t v15 = a1;
  uint64_t v16 = v9 + 2;
  unint64_t v36 = *(void *)(v9[2] + 16);
  if (a6 != -1)
  {
    uint64_t v33 = a1;
    uint64_t v32 = v8;
    uint64_t v17 = (void *)swift_allocObject();
    v17[5] = &type metadata for _CodingKey;
    v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v18 = swift_allocObject();
    _OWORD v17[2] = v18;
    *(void *)(v18 + 16) = a3;
    *(void *)(v18 + 24) = a4;
    *(void *)(v18 + 32) = a5;
    *(unsigned char *)(v18 + 40) = a6;
    v17[7] = a2;
    uint64_t v31 = a3;
    uint64_t v19 = a4;
    if (a2 >> 62)
    {
      if (a2 >> 62 != 1)
      {
        uint64_t v25 = a5;
        uint64_t v23 = 1;
LABEL_10:
        v17[8] = v23;
        uint64_t v21 = v9[5];
        uint64_t v22 = v9[6];
        v9[5] = v17;
        uint64_t v16 = v9 + 2;
LABEL_11:
        outlined copy of _CodingKey?(v31, v19, v25, a6);
        unint64_t v24 = v36;
        uint64_t v8 = v32;
        goto LABEL_12;
      }
      uint64_t v20 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v20 = (uint64_t *)(a2 + 64);
    }
    uint64_t v25 = a5;
    uint64_t v26 = *v20;
    uint64_t result = swift_retain();
    uint64_t v23 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_22;
    }
    goto LABEL_10;
  }
  uint64_t v21 = v9[5];
  uint64_t v22 = v9[6];
  v9[5] = a2;
  if (!(a2 >> 62))
  {
    uint64_t v31 = a3;
    uint64_t v32 = v8;
    uint64_t v19 = a4;
    uint64_t v25 = a5;
    uint64_t v33 = a1;
    uint64_t v23 = *(void *)(a2 + 64);
    swift_retain();
    goto LABEL_11;
  }
  if (a2 >> 62 == 1)
  {
    uint64_t v33 = a1;
    uint64_t v23 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    swift_retain();
    unint64_t v24 = v36;
LABEL_12:
    swift_retain();
    uint64_t v15 = v33;
    goto LABEL_13;
  }
  uint64_t v23 = 0;
  unint64_t v24 = v36;
LABEL_13:
  v9[6] = v23;
  v15(v9);
  if (!v8)
  {
    v9[5] = v21;
    swift_retain();
    swift_release();
    v9[6] = v22;
    swift_release();
    uint64_t result = swift_release();
    if (v24 < *(void *)(v9[2] + 16))
    {
      uint64_t result = specialized ContiguousArray._customRemoveLast()((uint64_t)&v34);
      unsigned __int8 v28 = v35;
      if (v35 == 255)
      {
        uint64_t result = specialized ContiguousArray.remove(at:)(*(void *)(*v16 + 16) - 1, (uint64_t)&v34);
        long long v29 = v34;
        unsigned __int8 v28 = v35;
      }
      else
      {
        long long v29 = v34;
      }
      *(_OWORD *)a7 = v29;
      *(unsigned char *)(a7 + 16) = v28;
      return result;
    }
LABEL_22:
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(unsigned char *)(a7 + 16) = -1;
    return result;
  }
  v9[5] = v21;
  swift_retain();
  swift_release();
  v9[6] = v22;
  swift_release();
  swift_release();
  if (v24 < *(void *)(v9[2] + 16))
  {
    specialized ContiguousArray._customRemoveLast()((uint64_t)&v34);
    if (v35 == 255)
    {
      specialized ContiguousArray.remove(at:)(*(void *)(*v16 + 16) - 1, (uint64_t)&v34);
      outlined consume of _XMLPlistEncodingFormat.Reference(v34, *((unint64_t *)&v34 + 1), v35);
    }
    else
    {
      outlined consume of _XMLPlistEncodingFormat.Reference?(v34, *((unint64_t *)&v34 + 1), v35);
    }
  }
  return swift_willThrow();
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v4[3] = type metadata accessor for __PlistEncoderXML();
  v4[4] = lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML(&lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML, v2, (void (*)(uint64_t))type metadata accessor for __PlistEncoderXML);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  unint64_t v51 = a7;
  uint64_t v52 = a8;
  unint64_t v48 = a6;
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v17 = v16;
    unint64_t v49 = a4;
    uint64_t v50 = v16;
    uint64_t v19 = *(void *)(v8 + 56);
    unint64_t v18 = *(void *)(v8 + 64);
    uint64_t v21 = *(void *)(v8 + 80);
    unint64_t v20 = *(void *)(v8 + 88);
    unint64_t v22 = *(void *)(v8 + 112);
    unint64_t v51 = *(void *)(v8 + 104);
    unint64_t v23 = a4;
    char v24 = *(unsigned char *)(v8 + 72);
    unint64_t v25 = a1;
    char v26 = *(unsigned char *)(v8 + 96);
    char v27 = *(unsigned char *)(v8 + 120);
    (*(void (**)(char *, unint64_t, unint64_t))(v14 + 16))(v17, v25, v23);
    outlined copy of _XMLPlistEncodingFormat.Reference(v19, v18, v24);
    outlined copy of _XMLPlistEncodingFormat.Reference(v21, v20, v26);
    uint64_t v28 = v51;
    outlined copy of _XMLPlistEncodingFormat.Reference(v51, v22, v27);
    swift_dynamicCast();
    char v29 = v24;
    uint64_t v30 = v53;
    outlined consume of _XMLPlistEncodingFormat.Reference(v19, v18, v29);
    outlined consume of _XMLPlistEncodingFormat.Reference(v21, v20, v26);
    uint64_t result = outlined consume of _XMLPlistEncodingFormat.Reference(v28, v22, v27);
    uint64_t v32 = 0;
    char v33 = 4;
  }
  else
  {
    unint64_t v45 = a2;
    uint64_t v46 = a3;
    uint64_t v34 = v51;
    unint64_t v47 = a1;
    if (!swift_dynamicCastMetatype())
    {
      MEMORY[0x1F4188790](0);
      *(&v45 - 6) = a4;
      *(&v45 - 5) = a5;
      *(&v45 - 4) = v48;
      *(&v45 - 3) = v34;
      uint64_t v44 = v46;
      *(&v45 - 2) = v47;
      return __PlistEncoderXML._wrapGeneric<A>(_:for:_:)((void (*)(void *))partial apply for closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:), (uint64_t)(&v45 - 8), v45, v44, a5, v34, v52);
    }
    unint64_t v36 = *(void *)(v8 + 64);
    unint64_t v48 = *(void *)(v8 + 56);
    uint64_t v35 = v48;
    uint64_t v38 = *(void *)(v8 + 80);
    unint64_t v37 = *(void *)(v8 + 88);
    uint64_t v46 = *(void *)(v8 + 104);
    unint64_t v51 = *(void *)(v8 + 112);
    unint64_t v39 = *(void (**)(char *, unint64_t, unint64_t))(v14 + 16);
    char v40 = *(unsigned char *)(v8 + 72);
    LODWORD(v45) = *(unsigned __int8 *)(v8 + 96);
    char v41 = *(unsigned char *)(v8 + 120);
    v39(v16, v47, a4);
    outlined copy of _XMLPlistEncodingFormat.Reference(v35, v36, v40);
    LOBYTE(v35) = v45;
    outlined copy of _XMLPlistEncodingFormat.Reference(v38, v37, v45);
    uint64_t v42 = v46;
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v51, v41);
    swift_dynamicCast();
    uint64_t v30 = v53;
    uint64_t v32 = v54;
    outlined consume of _XMLPlistEncodingFormat.Reference(v48, v36, v40);
    outlined consume of _XMLPlistEncodingFormat.Reference(v38, v37, v35);
    uint64_t result = outlined consume of _XMLPlistEncodingFormat.Reference(v42, v51, v41);
    char v33 = 5;
  }
  uint64_t v43 = v52;
  void *v52 = v30;
  v43[1] = v32;
  *((unsigned char *)v43 + 16) = v33;
  return result;
}

uint64_t __PlistEncoderXML._wrapGeneric<A>(_:for:_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v53 = a4;
  uint64_t v8 = v7;
  uint64_t v48 = a6;
  uint64_t v49 = a2;
  unint64_t v56 = a3;
  uint64_t v50 = a1;
  unint64_t v45 = a7;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v47 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v20 = v8[2];
  uint64_t v46 = (char *)(v8 + 2);
  unint64_t v51 = *(void *)(v20 + 16);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v21((char *)&v44 - v18, v53, v12, v17);
  ((void (*)(char *, char *, uint64_t))v21)(v15, v19, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, a5) != 1)
  {
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    char v29 = v47;
    v28(v47, v15, a5);
    uint64_t v30 = (uint64_t *)swift_allocObject();
    uint64_t v31 = v48;
    v30[5] = a5;
    v30[6] = v31;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30 + 2);
    v28((char *)boxed_opaque_existential_1, v29, a5);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    unint64_t v33 = v56;
    v30[7] = v56;
    unint64_t v34 = v33 >> 62;
    if (v33 >> 62)
    {
      if (v34 != 1)
      {
        uint64_t v27 = 1;
        if (!__OFSUB__(v34, 1)) {
          goto LABEL_12;
        }
        goto LABEL_24;
      }
      uint64_t v35 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v35 = (uint64_t *)(v33 + 64);
    }
    uint64_t v36 = *v35;
    swift_retain();
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v27 = v36 + 1;
    if (!v37)
    {
LABEL_12:
      v30[8] = v27;
      uint64_t v23 = v8[5];
      uint64_t v24 = v8[6];
      v8[5] = v30;
      goto LABEL_13;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v19, v12);
  v22(v15, v12);
  uint64_t v23 = v8[5];
  uint64_t v24 = v8[6];
  unint64_t v25 = v56;
  unint64_t v26 = v56 >> 62;
  v8[5] = v56;
  if (v25 >> 62)
  {
    if (v26 != 1)
    {
      uint64_t v27 = 0;
      goto LABEL_14;
    }
    uint64_t v27 = *(void *)((v25 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    swift_retain();
  }
  else
  {
    uint64_t v27 = *(void *)(v25 + 64);
    swift_retain();
  }
LABEL_13:
  swift_retain();
LABEL_14:
  v8[6] = v27;
  uint64_t v38 = v52;
  v50(v8);
  if (v38)
  {
    v8[5] = v23;
    swift_retain();
    swift_release();
    v8[6] = v24;
    swift_release();
    swift_release();
    if (v51 >= *(void *)(v8[2] + 16)) {
      return swift_willThrow();
    }
    uint64_t v19 = v46;
    specialized ContiguousArray._customRemoveLast()((uint64_t)&v54);
    if (v55 != 255)
    {
      outlined consume of _XMLPlistEncodingFormat.Reference?(v54, *((unint64_t *)&v54 + 1), v55);
      return swift_willThrow();
    }
LABEL_25:
    specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v19 + 16) - 1, (uint64_t)&v54);
    outlined consume of _XMLPlistEncodingFormat.Reference(v54, *((unint64_t *)&v54 + 1), v55);
    return swift_willThrow();
  }
  v8[5] = v23;
  swift_retain();
  swift_release();
  v8[6] = v24;
  swift_release();
  uint64_t result = swift_release();
  if (v51 >= *(void *)(v8[2] + 16))
  {
    uint64_t v43 = v45;
    void *v45 = 0;
    v43[1] = 0;
    unsigned __int8 v41 = -1;
  }
  else
  {
    char v40 = v46;
    uint64_t result = specialized ContiguousArray._customRemoveLast()((uint64_t)&v54);
    unsigned __int8 v41 = v55;
    if (v55 == 255)
    {
      uint64_t result = specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v40 + 16) - 1, (uint64_t)&v54);
      long long v42 = v54;
      unsigned __int8 v41 = v55;
    }
    else
    {
      long long v42 = v54;
    }
    uint64_t v43 = v45;
    *(_OWORD *)unint64_t v45 = v42;
  }
  *((unsigned char *)v43 + 16) = v41;
  return result;
}

uint64_t specialized ContiguousArray._customRemoveLast()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = result;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v6 = v5 - 1;
    uint64_t v7 = v3 + 24 * v6;
    char v8 = *(unsigned char *)(v7 + 48);
    *(_OWORD *)a1 = *(_OWORD *)(v7 + 32);
    *(unsigned char *)(a1 + 16) = v8;
    *(void *)(v3 + 16) = v6;
    uint64_t *v1 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v4[3] = type metadata accessor for __PlistEncoderXML();
  v4[4] = lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML(&lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML, v2, (void (*)(uint64_t))type metadata accessor for __PlistEncoderXML);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t type metadata accessor for __PlistEncoderXML()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  long long v13;
  long long v14;
  long long v15;
  char v16;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 48 * a3 - 48;
LABEL_5:
    uint64_t v9 = v6;
    uint64_t v10 = v8;
    while (!*(unsigned char *)(v10 + 64) && !*(unsigned char *)(v10 + 16))
    {
      uint64_t v11 = (_OWORD *)(v10 + 48);
      uint64_t result = *(void *)(v10 + 48);
      if (result != *(void *)v10 || *(void *)(v10 + 56) != *(void *)(v10 + 8))
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result)
        {
          if (!v7)
          {
            __break(1u);
            break;
          }
          BOOL v13 = *(_OWORD *)v10;
          uint64_t v14 = *(_OWORD *)(v10 + 16);
          uint64_t v15 = *(_OWORD *)(v10 + 32);
          *(_OWORD *)uint64_t v10 = *(_OWORD *)(v10 + 48);
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(v10 + 72);
          uint64_t v16 = *(unsigned char *)(v10 + 88);
          *(unsigned char *)(v10 + 16) = *(unsigned char *)(v10 + 64);
          *(unsigned char *)(v10 + 40) = v16;
          v10 -= 48;
          *uint64_t v11 = v13;
          v11[1] = v14;
          ++v9;
          v11[2] = v15;
          if (v4 != v9) {
            continue;
          }
        }
      }
      ++v4;
      v8 += 48;
      if (v4 == a2) {
        return result;
      }
      goto LABEL_5;
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id @objc static NSLocale._isoCountryCodes.getter(uint64_t a1, uint64_t a2)
{
  return @objc static NSLocale._isoLanguageCodes.getter(a1, a2, &one-time initialization token for isoCountries);
}

void (*URLComponents.fragment.getter(uint64_t a1))(char *, void)
{
  return URLComponents._URLComponents.fragment.getter(a1);
}

void (*URLComponents._URLComponents.fragment.getter(uint64_t a1))(char *, void)
{
  if (*(void *)(v1 + 144))
  {
    uint64_t v2 = *(void *)(v1 + 136);
    unint64_t v3 = *(void *)(v1 + 144);
  }
  else
  {
    if ((*(unsigned char *)(v1 + 16) & 1) == 0) {
      return 0;
    }
    outlined init with take of LocalePreferences?(v1, (uint64_t)v16, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)&v17, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v17 || (*(unsigned char *)(v17 + 216) & 1) != 0) {
      return 0;
    }
    uint64_t v11 = String.subscript.getter();
    uint64_t v2 = MEMORY[0x185301F50](v11);
    unint64_t v3 = v12;
    a1 = swift_bridgeObjectRelease();
  }
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    Swift::Int v14 = v2;
    unint64_t v15 = v3;
    MEMORY[0x1F4188790](a1);
    void v13[2] = &v14;
    void v13[3] = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v13, v2, v3);
    if (v6 == 1)
    {
      Swift::Int v7 = v14;
      unint64_t v8 = v15;
      swift_bridgeObjectRetain();
      uint64_t v9 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v7, v8, MEMORY[0x1E4FBC870]);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v9 = (void (*)(char *, void))v5;
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

uint64_t type metadata completion function for PredicateExpressions.DictionaryKeyDefaultValueSubscript()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.Conditional()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

NSURLComponents __swiftcall URLComponents._bridgeToObjectiveC()()
{
  long long v1 = v0[7];
  long long v20 = v0[6];
  long long v21 = v1;
  v22[0] = v0[8];
  *(_OWORD *)((char *)v22 + 10) = *(long long *)((char *)v0 + 138);
  long long v2 = v0[3];
  long long v16 = v0[2];
  long long v17 = v2;
  long long v3 = v0[5];
  long long v18 = v0[4];
  long long v19 = v3;
  long long v4 = v0[1];
  long long v14 = *v0;
  long long v15 = v4;
  uint64_t v5 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 172) = 0;
  long long v8 = v21;
  *(_OWORD *)(v7 + 112) = v20;
  *(_OWORD *)(v7 + 128) = v8;
  *(_OWORD *)(v7 + 144) = v22[0];
  *(_OWORD *)(v7 + 154) = *(_OWORD *)((char *)v22 + 10);
  long long v9 = v17;
  *(_OWORD *)(v7 + 48) = v16;
  *(_OWORD *)(v7 + 64) = v9;
  long long v10 = v19;
  *(_OWORD *)(v7 + 80) = v18;
  *(_OWORD *)(v7 + 96) = v10;
  long long v11 = v15;
  *(_OWORD *)(v7 + 16) = v14;
  *(_OWORD *)(v7 + 32) = v11;
  *(void *)&v6[OBJC_IVAR____NSSwiftURLComponents_lock] = v7;
  outlined retain of URLComponents((uint64_t)&v14);
  v13.receiver = v6;
  v13.super_class = v5;
  return (NSURLComponents)objc_msgSendSuper2(&v13, sel_init);
}

uint64_t specialized _ProcessInfo.processorCount.getter(double a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v7 = -1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_182106040;
  *(double *)(inited + 32) = a1;
  size_t v6 = 4;
  int v3 = sysctl((int *)(inited + 32), 2u, &v7, &v6, 0, 0);
  swift_bridgeObjectRelease();
  int v4 = v7;
  if (v3) {
    return 0;
  }
  return v4;
}

uint64_t one-time initialization function for idnaTranscoder()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v2 = 0;
  uint64_t result = MEMORY[0x185309D90](60, &v2);
  if (v2 <= 0) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = 0;
  }
  static UIDNAHookICU.idnaTranscoder = v1;
  byte_1E8ED6298 = v2 > 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexPath and conformance IndexPath()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexSet.Index and conformance IndexSet.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index;
  if (!lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index;
  if (!lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DateInterval and conformance DateInterval()
{
  unint64_t result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }
  return result;
}

uint64_t Calendar.enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t (*a6)(void, void, void))
{
  double v11 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  unsigned __int8 v12 = *a3;
  unsigned __int8 v13 = *a4;
  unsigned __int8 v14 = *a5;
  long long v21 = *v6;
  double v20 = v11;
  unsigned __int8 v18 = v12;
  unsigned __int8 v17 = v13;
  unsigned __int8 v16 = v14;
  return Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(&v20, __dst, &v18, &v17, &v16, a6);
}

uint64_t Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t (*a6)(void, void, void))
{
  double v11 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  unsigned __int8 v12 = *a3;
  unsigned __int8 v23 = *a4;
  unsigned __int8 v13 = *a5;
  uint64_t v15 = *v6;
  uint64_t v14 = v6[1];
  memcpy(v35, a2, 0x11AuLL);
  uint64_t v32 = v15;
  uint64_t v33 = v14;
  uint64_t result = DateComponents._validate(for:)(&v32);
  if ((result & 1) != 0 && v11 >= -2.11845067e11 && v11 <= 1.59271755e13)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    char v19 = 1;
    double v20 = v11;
    do
    {
      v26[0] = v15;
      v26[1] = v14;
      id v31 = *(id *)&v11;
      memcpy(v35, a2, 0x11AuLL);
      unsigned __int8 v30 = v12;
      unsigned __int8 v29 = v23;
      unsigned __int8 v28 = v13;
      double v27 = v20;
      uint64_t v24 = v18;
      LOBYTE(v25) = v19 & 1;
      Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v31, v35, &v30, &v29, &v28, &v27, (uint64_t)&v24, (uint64_t)&v32);
      double v20 = v34;
      if (v33 == 2)
      {
        if (v17 >= 0x64)
        {
          *(double *)unint64_t v26 = v11;
          uint64_t v32 = v15;
          uint64_t v33 = v14;
          memcpy(v35, __dst, 0x11AuLL);
          LOBYTE(v24) = v13;
          LOBYTE(v31) = v12;
          LOBYTE(v27) = v23;
          return _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(v26, &v32, v35, (unsigned __int8 *)&v24, (unsigned __int8 *)&v31, (unsigned __int8 *)&v27);
        }
      }
      else
      {
        uint64_t v18 = v32;
        LOBYTE(v32) = 0;
        v35[0] = v18;
        LOBYTE(v35[1]) = 0;
        uint64_t result = a6(v35, v33 & 1, &v32);
        char v19 = 0;
        if (v32) {
          return result;
        }
      }
    }
    while (!__OFADD__(v17++, 1));
    __break(1u);

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized static Calendar._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftCalendar();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
    size_t v6 = (_OWORD *)(v5 + 16);
    int v7 = (os_unfair_lock_s *)(v5 + 32);
    id v8 = a1;
    os_unfair_lock_lock(v7);
    closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v13);
    os_unfair_lock_unlock(v7);

    unint64_t v10 = *((void *)&v13 + 1);
    uint64_t v9 = v13;
  }
  else
  {
    type metadata accessor for _CalendarBridged();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    unint64_t v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
    id v11 = a1;
  }
  *a2 = v9;
  a2[1] = v10;
  return 1;
}

void sub_181A5112C(_Unwind_Exception *exception_object)
{
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceContains<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t KeyPathComparator.init<A>(_:order:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v32 = a1;
  id v8 = (uint64_t *)(v7 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v9 = v8[1];
  uint64_t v30 = *v8;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v10 = *(void *)&v31[0];
  *(void *)a4 = *(void *)&v31[0];
  uint64_t v29 = a3;
  if (swift_dynamicCastMetatype())
  {
    unint64_t v11 = lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)(a4 + 8) = 833;
    *(_WORD *)(a4 + 16) = 1;
    uint64_t v15 = specialized closure #3 in AnySortComparator.init<A>(_:);
    unsigned __int8 v16 = specialized thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    unint64_t v17 = specialized closure #1 in AnySortComparator.init<A>(_:);
    uint64_t v18 = &type metadata for String.StandardComparator;
  }
  else
  {
    uint64_t v18 = (ValueMetadata *)type metadata accessor for ComparableComparator();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v18;
    char v28 = a2;
    uint64_t v19 = swift_getWitnessTable();
    *(void *)(v12 + 24) = v19;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v18;
    *(void *)(v20 + 24) = v19;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = partial apply for closure #2 in AnySortComparator.init<A>(_:);
    *(void *)(v13 + 24) = v20;
    uint64_t v14 = swift_allocObject();
    unint64_t v11 = WitnessTable;
    *(void *)(v14 + 16) = v18;
    *(void *)(v14 + 24) = v19;
    a2 = v28;
    *(unsigned char *)(a4 + 8) = 0;
    uint64_t v15 = partial apply for closure #3 in AnySortComparator.init<A>(_:);
    unsigned __int8 v16 = (uint64_t (*)@<X0>(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>))partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    unint64_t v17 = partial apply for closure #1 in AnySortComparator.init<A>(_:);
  }
  *(void *)(a4 + 32) = v18;
  *(void *)(a4 + 40) = v11;
  *(void *)(a4 + 48) = v17;
  *(void *)(a4 + 56) = v12;
  *(void *)(a4 + 64) = v16;
  *(void *)(a4 + 72) = v13;
  uint64_t v21 = a2 & 1;
  *(void *)(a4 + 80) = v15;
  *(void *)(a4 + 88) = v14;
  swift_retain();
  uint64_t v22 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v24 = v23;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v30;
  *(void *)(v25 + 24) = v9;
  *(void *)(v25 + 32) = v29;
  *(void *)(v25 + 40) = v22;
  *(unsigned char *)(v25 + 48) = v24 & 1;
  *(void *)(v25 + 56) = v10;
  *(void *)(a4 + 96) = partial apply for closure #1 in KeyPathComparator.init<A>(_:order:);
  *(void *)(a4 + 104) = v25;
  swift_retain();
  swift_retain();
  ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v16)(v31, a4 + 8, v21);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v31, a4 + 8);
  swift_release();
  return swift_release();
}

{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t (*v17)@<X0>(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>);
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v32[2];
  void *v33;

  uint64_t v7 = *a1;
  uint64_t v33 = a1;
  id v8 = (uint64_t *)(v7 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v9 = v8[1];
  id v31 = *v8;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v10 = *(void *)&v32[0];
  *(void *)a4 = *(void *)&v32[0];
  uint64_t v29 = a3;
  uint64_t v30 = *(void *)(v9 + 16);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
    uint64_t v12 = lazy protocol witness table accessor for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>();
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)(a4 + 8) = 833;
    *(_WORD *)(a4 + 16) = 1;
    unsigned __int8 v16 = specialized closure #3 in AnySortComparator.init<A>(_:);
    unint64_t v17 = specialized thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    uint64_t v18 = specialized closure #1 in AnySortComparator.init<A>(_:);
  }
  else
  {
    type metadata accessor for ComparableComparator();
    swift_getWitnessTable();
    unint64_t v11 = type metadata accessor for OptionalComparator();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v11;
    uint64_t v19 = a2;
    uint64_t v20 = swift_getWitnessTable();
    *(void *)(v13 + 24) = v20;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v11;
    *(void *)(v21 + 24) = v20;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
    *(void *)(v14 + 24) = v21;
    uint64_t v15 = swift_allocObject();
    uint64_t v12 = WitnessTable;
    *(void *)(v15 + 16) = v11;
    *(void *)(v15 + 24) = v20;
    a2 = v19;
    *(unsigned char *)(a4 + 8) = 0;
    unsigned __int8 v16 = (uint64_t (*)(uint64_t))closure #3 in AnySortComparator.init<A>(_:)partial apply;
    unint64_t v17 = (uint64_t (*)@<X0>(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>))partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in AnySortComparator.init<A>(_:)partial apply;
  }
  *(void *)(a4 + 32) = v11;
  *(void *)(a4 + 40) = v12;
  *(void *)(a4 + 48) = v18;
  *(void *)(a4 + 56) = v13;
  *(void *)(a4 + 64) = v17;
  *(void *)(a4 + 72) = v14;
  uint64_t v22 = a2 & 1;
  *(void *)(a4 + 80) = v16;
  *(void *)(a4 + 88) = v15;
  swift_retain();
  char v23 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  uint64_t v25 = v24;
  unint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v31;
  *(void *)(v26 + 24) = v30;
  *(void *)(v26 + 32) = v29;
  *(void *)(v26 + 40) = v23;
  *(unsigned char *)(v26 + 48) = v25 & 1;
  *(void *)(v26 + 56) = v10;
  *(void *)(a4 + 96) = partial apply for closure #1 in KeyPathComparator.init<A>(_:order:);
  *(void *)(a4 + 104) = v26;
  swift_retain();
  swift_retain();
  ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v17)(v32, a4 + 8, v22);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v32, a4 + 8);
  swift_release();
  return swift_release();
}

uint64_t specialized thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4FBB968];
  char v5 = a2 & 1;
  a3[3] = MEMORY[0x1E4FBB960];
  a3[4] = v4;
  *a3 = swift_allocObject();
  outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)a1, (uint64_t)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  swift_dynamicCast();
  char v14 = v5;
  *(void *)(a1 + 24) = &type metadata for String.StandardComparator;
  *(void *)(a1 + 32) = lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  uint64_t v6 = v12;
  char v7 = v13;
  *(void *)a1 = v12;
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v5;
  uint64_t v9 = v6;
  char v10 = v7;
  char v11 = v5;
  return AnyHashable.init<A>(_:)();
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;

  uint64_t v4 = MEMORY[0x1E4FBB968];
  char v5 = a2 & 1;
  a3[3] = MEMORY[0x1E4FBB960];
  a3[4] = v4;
  *a3 = swift_allocObject();
  outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)a1, (uint64_t)&v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
  swift_dynamicCast();
  uint64_t v15 = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = lazy protocol witness table accessor for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>();
  char v7 = v13;
  id v8 = v14;
  *(void *)a1 = v13;
  *(unsigned char *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 9) = v5;
  char v10 = v7;
  char v11 = v8;
  uint64_t v12 = v5;
  return AnyHashable.init<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator()
{
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }
  return result;
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.CodableStorage()
{
  char v7 = "p";
  uint64_t v8 = MEMORY[0x1E4FBAD98] + 64;
  uint64_t v9 = MEMORY[0x1E4FBADA0] + 64;
  uint64_t v10 = MEMORY[0x1E4FBAD98] + 64;
  uint64_t v11 = MEMORY[0x1E4FBADA0] + 64;
  uint64_t v12 = MEMORY[0x1E4FBAD98] + 64;
  uint64_t v13 = MEMORY[0x1E4FBADA0] + 64;
  uint64_t v14 = MEMORY[0x1E4FBADA0] + 64;
  uint64_t v15 = &unk_182108668;
  uint64_t v16 = MEMORY[0x1E4FBADA0] + 64;
  unint64_t v17 = &unk_182108668;
  uint64_t v18 = &unk_182108680;
  uint64_t v19 = &unk_182108698;
  uint64_t result = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v20 = &v6;
    uint64_t result = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(319);
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v21 = &v5;
      uint64_t result = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(319);
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        uint64_t v22 = &v4;
        char v23 = &unk_1821086C8;
        char v24 = &unk_1821086E0;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

NSData *encodeURLForDefaults(NSData *result)
{
  if (result)
  {
    unint64_t v1 = result;
    if ([(NSData *)result isFileURL]
      && ![(NSData *)v1 isFileReferenceURL])
    {
      unint64_t v2 = (void *)[(NSData *)v1 path];
      return (NSData *)[v2 stringByAbbreviatingWithTildeInPath];
    }
    else
    {
      return +[NSKeyedArchiver archivedDataWithRootObject:v1 requiringSecureCoding:1 error:0];
    }
  }
  return result;
}

uint64_t specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(uint64_t a1, unint64_t a2, void (*a3)(unsigned char *), uint64_t a4)
{
  char v6 = v4;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager())
  {
    char v15 = specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  }
  else
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (isStackAllocationSafe)
    {
      MEMORY[0x1F4188790](isStackAllocationSafe);
      unsigned __int8 v13 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v20, 1026, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if (v13) {
        uint64_t v14 = v20;
      }
      else {
        uint64_t v14 = 0;
      }
      a3(v14);
      if (v5) {
        char v15 = swift_willThrow();
      }
      else {
        char v15 = v20[1046];
      }
    }
    else
    {
      uint64_t v16 = swift_slowAlloc();
      unsigned __int8 v17 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v16, 1026, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if (v17) {
        uint64_t v18 = (unsigned char *)v16;
      }
      else {
        uint64_t v18 = 0;
      }
      a3(v18);
      if (v5)
      {
        char v15 = MEMORY[0x185309510](v16, -1, -1);
      }
      else
      {
        MEMORY[0x185309510](v16, -1, -1);
        char v15 = v20[1047];
      }
    }
  }
  return v15 & 1;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(void (*a1)(unsigned char *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if ((a4 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v9 < -1) {
    goto LABEL_23;
  }
  uint64_t v10 = v9 + 1;
  if (v9 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v12 = &v22[-v11];
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    char v14 = v13;
    swift_bridgeObjectRelease();
    if (v14) {
      char v15 = 0;
    }
    else {
      char v15 = v12;
    }
    a1(v15);
    if (v4) {
      swift_willThrow();
    }
    else {
      char v16 = v22[6];
    }
  }
  else
  {
    uint64_t v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v17;
    }
    a1((unsigned char *)v20);
    MEMORY[0x185309510](v17, -1, -1);
    if (!v4) {
      char v16 = v22[7];
    }
  }
  return v16 & 1;
}

const char *closure #1 in _FileManagerImpl.changeCurrentDirectoryPath(_:)@<X0>(const char *result@<X0>, BOOL *a2@<X8>)
{
  if (result)
  {
    uint64_t result = (const char *)chdir(result);
    BOOL v3 = result == 0;
  }
  else
  {
    BOOL v3 = 0;
  }
  *a2 = v3;
  return result;
}

os_log_t ___userInteractionLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.Foundation", "NSProcessInfoInteractionTracking");
  qword_1EB1ED368 = (uint64_t)result;
  return result;
}

__n128 Date.FormatStyle.timeZone.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 88) = *a1;
  return result;
}

uint64_t Data.init<A>(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)&v36 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  (*(void (**)(char *, uint64_t, unint64_t, double))(v14 + 16))((char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v42, (uint64_t)&v44);
    uint64_t v18 = v45;
    uint64_t v19 = v46;
    __swift_project_boxed_opaque_existential_1(&v44, v45);
    (*(void (**)(long long *__return_ptr, unsigned char *(*)@<X0>(unsigned char *@<X0>, unsigned char *@<X1>, void *@<X8>), void, ValueMetadata *, uint64_t, uint64_t))(v19 + 8))(&__src, closure #1 in Data.init<A>(_:), 0, &type metadata for Data._Representation, v18, v19);
    (*(void (**)(uint64_t, unint64_t))(v14 + 8))(a1, a2);
    v42[0] = __src;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
  }
  else
  {
    uint64_t v39 = v10;
    uint64_t v40 = v14;
    uint64_t v43 = 0;
    memset(v42, 0, sizeof(v42));
    outlined destroy of ContiguousBytes?((uint64_t)v42);
    dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
    long long v20 = v44;
    if (*((void *)&v44 + 1) >> 60 == 15)
    {
      unint64_t v36 = *((void *)&v44 + 1);
      uint64_t v38 = v44;
      uint64_t v21 = dispatch thunk of Sequence.underestimatedCount.getter();
      *(void *)&v42[0] = specialized Data._Representation.init(count:)(v21);
      *((void *)&v42[0] + 1) = v22;
      MEMORY[0x1F4188790](*(void *)&v42[0]);
      *(&v36 - 4) = a2;
      *(&v36 - 3) = a3;
      unint64_t v37 = v23;
      *(&v36 - 2) = v23;
      Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #3 in Data.init<A>(_:));
      uint64_t v24 = *(void *)&v9[*(int *)(TupleTypeMetadata2 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v13, v9, AssociatedTypeWitness);
      uint64_t v25 = *((void *)&v42[0] + 1) >> 62;
      unint64_t v26 = v37;
      uint64_t v27 = v38;
      uint64_t v28 = v40;
      switch(*((void *)&v42[0] + 1) >> 62)
      {
        case 1:
          LODWORD(v29) = DWORD1(v42[0]) - LODWORD(v42[0]);
          if (__OFSUB__(DWORD1(v42[0]), v42[0])) {
            goto LABEL_32;
          }
          uint64_t v29 = (int)v29;
LABEL_10:
          if (v24 == v29)
          {
LABEL_16:
            swift_getAssociatedConformanceWitness();
            *(void *)&long long v44 = 0;
            *(void *)((char *)&v44 + 7) = 0;
            dispatch thunk of IteratorProtocol.next()();
            if (BYTE1(__src) == 1) {
              goto LABEL_23;
            }
            unsigned int v34 = 0;
            do
            {
              *((unsigned char *)&v44 + v34++) = __src;
              BYTE14(v44) = v34;
              if (v34 == 14)
              {
                *(void *)&long long __src = v44;
                DWORD2(__src) = DWORD2(v44);
                WORD6(__src) = WORD6(v44);
                Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&__src + 14);
                unsigned int v34 = 0;
                BYTE14(v44) = 0;
              }
              dispatch thunk of IteratorProtocol.next()();
            }
            while ((BYTE1(__src) & 1) == 0);
            uint64_t v27 = v38;
            if (!v34)
            {
LABEL_23:
              (*(void (**)(char *, uint64_t))(v39 + 8))(v13, AssociatedTypeWitness);
              outlined consume of Data?(v27, v36);
              goto LABEL_29;
            }
            *(void *)&long long __src = v44;
            DWORD2(__src) = DWORD2(v44);
            WORD6(__src) = WORD6(v44);
            Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&v42[-1] + v34);
            outlined consume of Data?(v27, v36);
            BYTE14(v44) = 0;
          }
          else
          {
            if (v25)
            {
              if (v25 == 1) {
                uint64_t v33 = *(uint64_t *)&v42[0] >> 32;
              }
              else {
                uint64_t v33 = *(void *)(*(void *)&v42[0] + 24);
              }
            }
            else
            {
              uint64_t v33 = BYTE14(v42[0]);
            }
LABEL_26:
            if (v33 < v24)
            {
              __break(1u);
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
            }
            Data._Representation.replaceSubrange(_:with:count:)(v24, v33, 0, 0);
          }
          (*(void (**)(char *, uint64_t))(v39 + 8))(v13, AssociatedTypeWitness);
LABEL_29:
          (*(void (**)(unint64_t, unint64_t))(v28 + 8))(v26, a2);
          break;
        case 2:
          uint64_t v31 = *(void *)(*(void *)&v42[0] + 16);
          uint64_t v30 = *(void *)(*(void *)&v42[0] + 24);
          BOOL v32 = __OFSUB__(v30, v31);
          uint64_t v29 = v30 - v31;
          if (!v32) {
            goto LABEL_10;
          }
          goto LABEL_33;
        case 3:
          if (!v24) {
            goto LABEL_16;
          }
          uint64_t v33 = 0;
          goto LABEL_26;
        default:
          uint64_t v29 = BYTE14(v42[0]);
          goto LABEL_10;
      }
    }
    else
    {
      (*(void (**)(uint64_t, unint64_t))(v40 + 8))(a1, a2);
      v42[0] = v20;
    }
  }
  return *(void *)&v42[0];
}

uint64_t URLComponents.percentEncodedQuery.getter()
{
  if (v0[16])
  {
    uint64_t v1 = v0[15];
  }
  else
  {
    uint64_t v2 = *v0;
    BOOL v3 = *((unsigned char *)v0 + 15) != 1 || v2 == 0;
    if (v3 || (*(unsigned char *)(v2 + 192) & 1) != 0)
    {
      uint64_t v1 = 0;
    }
    else
    {
      uint64_t v4 = String.subscript.getter();
      uint64_t v1 = MEMORY[0x185301F50](v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t Calendar.Identifier.debugDescription.getter()
{
  unint64_t result = 0x6169726F67657267;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7473696864647562;
      break;
    case 2:
      unint64_t result = 0x6573656E696863;
      break;
    case 3:
      unint64_t result = 0x636974706F63;
      break;
    case 4:
      unint64_t result = 0x6369706F69687465;
      break;
    case 5:
      unint64_t result = 0x61616F69687465;
      break;
    case 6:
      unint64_t result = 0x776572626568;
      break;
    case 7:
      unint64_t result = 0x313036386F7369;
      break;
    case 8:
      unint64_t result = 0x6E6169646E69;
      break;
    case 9:
      unint64_t result = 0x63696D616C7369;
      break;
    case 0xA:
    case 0xE:
      unint64_t result = 0x2D63696D616C7369;
      break;
    case 0xB:
      unint64_t result = 0x6573656E6170616ALL;
      break;
    case 0xC:
      unint64_t result = 0x6E616973726570;
      break;
    case 0xD:
      unint64_t result = 6516594;
      break;
    case 0xF:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t one-time initialization function for compatibility1()
{
  uint64_t result = closure #1 in variable initialization expression of static JSONEncoder.compatibility1();
  static JSONEncoder.compatibility1 = result & 1;
  return result;
}

{
  uint64_t result;

  uint64_t result = _NSLinkedOnOrAfterCrystalglow();
  static String.compatibility1 = result ^ 1;
  return result;
}

{
  uint64_t result;

  uint64_t result = _NSLinkedOnOrAfterCrystalglow();
  static NSDecimal.compatibility1 = result ^ 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of static JSONEncoder.compatibility1()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1) {
    return 0;
  }
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  if (v2 == (id)0xD000000000000012 && v4 == 0x80000001823B2A30
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == (id)0xD000000000000017 && v4 == 0x80000001823B2A50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == (id)0xD000000000000017 && v4 == 0x80000001823B2A70)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

unint64_t instantiation function for generic protocol witness table for StringStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type StringStyle and conformance StringStyle();
  a1[2] = lazy protocol witness table accessor for type StringStyle and conformance StringStyle();
  unint64_t result = lazy protocol witness table accessor for type StringStyle and conformance StringStyle();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type StringStyle and conformance StringStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }
  return result;
}

uint64_t NSExtensionMain(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))_MergedGlobals_129;
  uint64_t v10 = _MergedGlobals_129;
  if (!_MergedGlobals_129)
  {
    v6[0].super.isa = (Class)MEMORY[0x1E4F143A8];
    v6[1].super.isa = (Class)3221225472;
    v6[2].super.isa = (Class)__getEXExtensionMainSymbolLoc_block_invoke;
    v6[3].super.isa = (Class)&unk_1E51FA6B0;
    v6[4].super.isa = (Class)&v7;
    __getEXExtensionMainSymbolLoc_block_invoke(v6);
    uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v8[3];
  }
  _Block_object_dispose(&v7, 8);
  if (!v4)
  {
    [+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler") handleFailureInFunction:+[NSString stringWithUTF8String:"int _EXExtensionMain(int, const char **)"], @"NSExtensionMain.m", 14, @"%s", dlerror() file lineNumber description];
    __break(1u);
  }
  return v4(a1, a2);
}

void sub_181A52FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getEXExtensionMainSymbolLoc_block_invoke(NSAssertionHandler *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB1ED8D0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __ExtensionFoundationLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    NSAssertionHandler v6[5] = v6;
    long long v7 = xmmword_1E51FABF8;
    uint64_t v8 = 0;
    qword_1EB1ED8D0 = _sl_dlopen();
  }
  id v2 = (void *)qword_1EB1ED8D0;
  if (!qword_1EB1ED8D0)
  {
    a1 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"void *ExtensionFoundationLibrary(void)"];
    uint64_t v3 = (void *)[(NSAssertionHandler *)a1 handleFailureInFunction:v5, @"NSExtensionMain.m", 13, @"%s", v6[0] file lineNumber description];
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v6[0];
  if (v6[0]) {
LABEL_7:
  }
    free(v3);
  unint64_t result = dlsym(v2, "EXExtensionMain");
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = result;
  _MergedGlobals_129 = *(_UNKNOWN **)(*((void *)a1[4].super.isa + 1) + 24);
  return result;
}

uint64_t UUID.description.getter()
{
  return UUID.uuidString.getter();
}

uint64_t specialized __NSDecimalDivide(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = specialized NSDecimal._divide(by:roundingMode:)(*(void *)a3, *(void *)(a3 + 8), *(_DWORD *)(a3 + 16), *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16));
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = v9;
  return 0;
}

uint64_t specialized NSDecimal._divide(by:roundingMode:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  LODWORD(v6) = a4;
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  unint64_t v156 = a4;
  uint64_t v127 = HIDWORD(a4);
  unint64_t v137 = HIWORD(a4);
  unint64_t v131 = a5 >> 16;
  unsigned __int16 v133 = a5;
  unint64_t v157 = a5;
  uint64_t v135 = HIDWORD(a5);
  unint64_t v129 = HIWORD(a5);
  unsigned __int16 v130 = a6;
  unsigned int v158 = a6;
  unsigned int v139 = HIWORD(a6);
  if (!_So9NSDecimala__length_getter(&v156))
  {
    LODWORD(v156) = v6;
    WORD2(v156) = v127;
    HIWORD(v156) = v137;
    LOWORD(v157) = v133;
    WORD1(v157) = v131;
    WORD2(v157) = v135;
    HIWORD(v157) = v129;
    LOWORD(v158) = v130;
    HIWORD(v158) = v139;
    if (_So9NSDecimala__isNegative_getter(&v156)) {
      goto LABEL_53;
    }
  }
  unint64_t v156 = a1;
  unint64_t v157 = a2;
  unsigned int v158 = a3;
  if (!_So9NSDecimala__length_getter(&v156))
  {
    unint64_t v156 = a1;
    unint64_t v157 = a2;
    unsigned int v158 = a3;
    if (_So9NSDecimala__isNegative_getter(&v156)) {
      goto LABEL_53;
    }
  }
  unint64_t v156 = a1;
  unint64_t v122 = a2 >> 16;
  unint64_t v123 = HIWORD(a1);
  unint64_t v157 = a2;
  unint64_t v121 = HIWORD(a2);
  unsigned int v158 = a3;
  unsigned int v119 = HIWORD(a3);
  if (!_So9NSDecimala__length_getter(&v156))
  {
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    char v48 = 2;
    goto LABEL_55;
  }
  unint64_t v120 = HIDWORD(a2);
  unsigned __int16 v117 = a2;
  unint64_t v118 = HIDWORD(a1);
  int v9 = v6;
  unsigned int v116 = a1;
  LODWORD(v156) = v6;
  WORD2(v156) = v127;
  HIWORD(v156) = v137;
  LOWORD(v157) = v133;
  WORD1(v157) = v131;
  WORD2(v157) = v135;
  HIWORD(v157) = v129;
  LOWORD(v158) = v130;
  HIWORD(v158) = v139;
  if (!_So9NSDecimala__length_getter(&v156)) {
    return 0;
  }
  LODWORD(v156) = v6;
  WORD2(v156) = v127;
  HIWORD(v156) = v137;
  LOWORD(v157) = v133;
  WORD1(v157) = v131;
  WORD2(v157) = v135;
  HIWORD(v157) = v129;
  LOWORD(v158) = v130;
  HIWORD(v158) = v139;
  unint64_t v153 = a1;
  unint64_t v154 = a2;
  unsigned int v155 = a3;
  int v114 = v6;
  LODWORD(v150) = v6;
  WORD2(v150) = v127;
  HIWORD(v150) = v137;
  LOWORD(v151) = v133;
  WORD1(v151) = v131;
  WORD2(v151) = v135;
  HIWORD(v151) = v129;
  LOWORD(v152) = v130;
  HIWORD(v152) = v139;
  int v10 = _So9NSDecimala__exponent_getter((char *)&v150);
  unint64_t v150 = a1;
  v11._rawValue = (void *)HIWORD(a1);
  unint64_t v151 = a2;
  unsigned int v152 = a3;
  int v12 = _So9NSDecimala__exponent_getter((char *)&v150);
  uint64_t v13 = v127;
  if (v10 - v12 >= 19)
  {
    uint64_t result = specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v156, (uint64_t)&v153);
    uint64_t v18 = v125;
    if (v125) {
      return result;
    }
    unsigned __int16 v50 = WORD1(v157);
    unsigned int v51 = WORD2(v157);
    unsigned int v52 = HIWORD(v157);
    __int16 v53 = v158;
    unsigned int v54 = HIWORD(v158);
    int v108 = v156;
    unsigned int v109 = WORD2(v156);
    unint64_t v150 = v156;
    unsigned int v111 = HIWORD(v156);
    unsigned __int16 v113 = v157;
    unint64_t v151 = v157;
    unsigned int v152 = v158;
    if (_So9NSDecimala__length_getter(&v150))
    {
      unsigned int v106 = v54;
      unsigned int v107 = v51;
      int v55 = v153;
      __int16 v56 = WORD2(v153);
      unsigned __int16 v103 = v50;
      unsigned int v104 = v52;
      unsigned int v57 = HIWORD(v153);
      __int16 v58 = v154;
      __int16 v105 = v53;
      __int16 v59 = WORD1(v154);
      __int16 v60 = WORD2(v154);
      unsigned int v61 = HIWORD(v154);
      __int16 v102 = v155;
      __int16 v62 = HIWORD(v155);
      unint64_t v150 = v153;
      unint64_t v151 = v154;
      unsigned int v152 = v155;
      int v63 = _So9NSDecimala__length_getter(&v150);
      if (v63) {
        int v64 = v55;
      }
      else {
        int v64 = v116;
      }
      unsigned int v116 = v64;
      uint64_t v18 = v125;
      if (v63) {
        __int16 v65 = v56;
      }
      else {
        __int16 v65 = v118;
      }
      LOWORD(v118) = v65;
      if (v63) {
        v11._rawValue = (void *)v57;
      }
      else {
        v11._rawValue = (void *)v123;
      }
      if (v63) {
        __int16 v66 = v58;
      }
      else {
        __int16 v66 = v117;
      }
      unsigned __int16 v117 = v66;
      if (v63) {
        __int16 v67 = v59;
      }
      else {
        __int16 v67 = v122;
      }
      LOWORD(v122) = v67;
      if (v63) {
        __int16 v68 = v60;
      }
      else {
        __int16 v68 = v120;
      }
      LOWORD(v120) = v68;
      if (v63) {
        unint64_t v69 = v61;
      }
      else {
        unint64_t v69 = v121;
      }
      unint64_t v121 = v69;
      __int16 v70 = a3;
      if (v63) {
        __int16 v70 = v102;
      }
      LOWORD(a3) = v70;
      __int16 v71 = v119;
      if (v63) {
        __int16 v71 = v62;
      }
      LOWORD(v119) = v71;
      if (v63) {
        LODWORD(v6) = v108;
      }
      else {
        LODWORD(v6) = v114;
      }
      if (v63) {
        uint64_t v13 = v109;
      }
      else {
        uint64_t v13 = v127;
      }
      if (v63) {
        uint64_t v15 = v111;
      }
      else {
        uint64_t v15 = v137;
      }
      if (v63) {
        unsigned __int16 v17 = v113;
      }
      else {
        unsigned __int16 v17 = v133;
      }
      if (v63) {
        unsigned __int16 v16 = v103;
      }
      else {
        unsigned __int16 v16 = v131;
      }
      if (v63) {
        uint64_t v14 = v107;
      }
      else {
        uint64_t v14 = v135;
      }
      if (v63) {
        unint64_t v72 = v104;
      }
      else {
        unint64_t v72 = v129;
      }
      unint64_t v129 = v72;
      __int16 v73 = v130;
      if (v63) {
        __int16 v73 = v105;
      }
      unsigned __int16 v130 = v73;
      if (v63) {
        int64_t v19 = v106;
      }
      else {
        int64_t v19 = v139;
      }
    }
    else
    {
      uint64_t v14 = v135;
      uint64_t v15 = v137;
      unsigned __int16 v16 = v131;
      unsigned __int16 v17 = v133;
      LODWORD(v6) = v9;
      int64_t v19 = v139;
      uint64_t v13 = v127;
    }
  }
  else
  {
    uint64_t v14 = v135;
    uint64_t v15 = v137;
    unsigned __int16 v16 = v131;
    unsigned __int16 v17 = v133;
    uint64_t v18 = v125;
    int64_t v19 = v139;
  }
  uint64_t v20 = v13;
  unsigned __int16 v132 = v16;
  unsigned __int16 v134 = v17;
  NSDecimal.asVariableLengthInteger()(v6 | ((unint64_t)(unsigned __int16)v13 << 32) | (v15 << 48), v17 | ((unint64_t)v16 << 16) | ((unint64_t)(unsigned __int16)v14 << 32) | (v129 << 48), v130 | ((unsigned __int16)v19 << 16));
  uint64_t v22 = v21;
  uint64_t v23 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v23 != -1) {
    goto LABEL_178;
  }
  while (1)
  {
    rawValue = powerOfTen._rawValue;
    unint64_t v25 = *((void *)powerOfTen._rawValue + 2);
    int64_t v124 = v11._rawValue;
    uint64_t v126 = v18;
    __int16 v136 = v14;
    unsigned int v115 = v6;
    if (v25 > 0x26)
    {
      uint64_t v6 = 38;
      v11._rawValue = v22;
      uint64_t v18 = v20;
      goto LABEL_113;
    }
    if (!v25) {
      goto LABEL_180;
    }
    uint64_t v18 = v20;
    unint64_t v26 = v25 - 1;
    uint64_t v6 = 38;
    v11._rawValue = v22;
    uint64_t v20 = (uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
    unsigned int v139 = v19;
    unint64_t v128 = v22;
    int64_t v110 = *((void *)powerOfTen._rawValue + 2);
    unint64_t v112 = v25 - 1;
    uint64_t v138 = v15;
LABEL_11:
    BOOL v27 = __OFSUB__(v6, v26);
    v6 -= v26;
    if (v27) {
      goto LABEL_176;
    }
    uint64_t v28 = *(void *)(v20 + 1568);
    if (v25 <= *(void *)(v28 + 16)) {
      break;
    }
LABEL_177:
    __break(1u);
LABEL_178:
    swift_once();
  }
  uint64_t v15 = v18;
  uint64_t v29 = *((void *)v11._rawValue + 2);
  if (!v29 || (v30 = *(void *)(v28 + 8 * v26 + 32), (uint64_t v18 = *(void *)(v30 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    v11._rawValue = (void *)MEMORY[0x1E4FBC860];
    int64_t v19 = v139;
    uint64_t v18 = v15;
    uint64_t v15 = v138;
    goto LABEL_43;
  }
  if (__OFADD__(v29, v18)) {
    goto LABEL_181;
  }
  if (v29 + v18 >= 16) {
    uint64_t v31 = 16;
  }
  else {
    uint64_t v31 = v29 + v18;
  }
  if (v31 < 0) {
    goto LABEL_191;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v32 + 16) = v31;
  uint64_t v14 = v32 + 32;
  bzero((void *)(v32 + 32), 2 * v31);
  uint64_t v34 = 0;
  uint64_t v35 = v30 + 32;
LABEL_21:
  unsigned int v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = v34++;
  while (1)
  {
    uint64_t v39 = v37 + v38;
    if (__OFADD__(v37, v38))
    {
      __break(1u);
      goto LABEL_166;
    }
    if (v39 < v31) {
      break;
    }
    if (v36) {
      goto LABEL_154;
    }
    unsigned int v36 = *(unsigned __int16 *)(v35 + 2 * v38);
    if (*(_WORD *)(v35 + 2 * v38))
    {
      unsigned int v36 = *((unsigned __int16 *)v11._rawValue + v37 + 16);
      if (*((_WORD *)v11._rawValue + v37 + 16)) {
        goto LABEL_154;
      }
    }
LABEL_22:
    if (v29 == ++v37)
    {
      if (v36)
      {
        BOOL v27 = __OFADD__(v29, v38);
        uint64_t v42 = v29 + v38;
        if (v27) {
          goto LABEL_183;
        }
        if (v42 >= v31)
        {
LABEL_154:
          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
          swift_allocError();
          *unint64_t v95 = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        if (v42 < 0) {
          goto LABEL_184;
        }
        if ((unint64_t)v42 >= *(void *)(v32 + 16)) {
          goto LABEL_185;
        }
        *(_WORD *)(v14 + 2 * v42) = v36;
      }
      if (v34 != v18) {
        goto LABEL_21;
      }
      uint64_t v43 = *(void *)(v32 + 16);
      if (v43)
      {
        uint64_t v18 = v15;
        uint64_t v20 = 0x1E8ED5000;
        if (*(_WORD *)(v14 + 2 * v43 - 2))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v11._rawValue = (void *)v32;
          uint64_t v15 = v138;
          int64_t v19 = v139;
        }
        else
        {
          uint64_t v44 = v43 + 14;
          uint64_t v15 = v138;
          do
          {
            *(void *)(v32 + 16) = v44 - 15;
            if (v44 == 15) {
              break;
            }
          }
          while (!*(unsigned __int16 *)(v32 + 2 * v44--));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v11._rawValue = (void *)v32;
          int64_t v19 = v139;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11._rawValue = (void *)v32;
        int64_t v19 = v139;
        uint64_t v18 = v15;
        uint64_t v15 = v138;
        uint64_t v20 = 0x1E8ED5000;
      }
LABEL_43:
      unint64_t v25 = v110;
      unint64_t v26 = v112;
      uint64_t v22 = v128;
      if (v110 > v6)
      {
        if ((v6 & 0x8000000000000000) == 0)
        {
          rawValue = *(void **)(v20 + 1568);
          if ((unint64_t)v6 >= rawValue[2])
          {
            __break(1u);
            goto LABEL_161;
          }
LABEL_113:
          uint64_t v14 = *((void *)v11._rawValue + 2);
          if (!v14 || (v74 = (uint64_t *)rawValue[v6 + 4], (uint64_t v6 = v74[2]) == 0))
          {
            LOWORD(v139) = v19;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v32 = MEMORY[0x1E4FBC860];
            uint64_t v6 = (uint64_t)v124;
            uint64_t v75 = v126;
            LOWORD(v22) = a3;
            unsigned __int16 v76 = v122;
            unsigned __int16 v77 = v120;
            goto LABEL_122;
          }
          uint64_t v20 = v14 + v6;
          if (!__OFADD__(v14, v6))
          {
            if (v20 > 15)
            {
              uint64_t v22 = (void *)v19;
              uint64_t v20 = 16;
              goto LABEL_126;
            }
            if ((v20 & 0x8000000000000000) == 0)
            {
              uint64_t v22 = (void *)v19;
              if (!v20)
              {
                int64_t v19 = (int64_t)v74;
                swift_bridgeObjectRetain();
                uint64_t v32 = MEMORY[0x1E4FBC860];
                goto LABEL_127;
              }
LABEL_126:
              int64_t v19 = (int64_t)v74;
              swift_bridgeObjectRetain();
              uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v32 + 16) = v20;
              bzero((void *)(v32 + 32), 2 * v20);
LABEL_127:
              uint64_t v83 = 0;
              uint64_t v84 = v19 + 32;
              uint64_t v85 = v32 + 32;
              do
              {
                if (v83 == v6) {
                  goto LABEL_182;
                }
                unsigned int v86 = 0;
                uint64_t v87 = 0;
                uint64_t v88 = v83 + 1;
                do
                {
                  if (v14 == v87) {
                    goto LABEL_170;
                  }
                  uint64_t v91 = v87 + v83;
                  if (__OFADD__(v87, v83)) {
                    goto LABEL_171;
                  }
                  if (v91 >= v20)
                  {
                    if (v86) {
                      goto LABEL_154;
                    }
                    unsigned int v86 = *(unsigned __int16 *)(v84 + 2 * v83);
                    if (*(_WORD *)(v84 + 2 * v83))
                    {
                      unsigned int v86 = *((unsigned __int16 *)v11._rawValue + v87 + 16);
                      if (*((_WORD *)v11._rawValue + v87 + 16)) {
                        goto LABEL_154;
                      }
                    }
                  }
                  else
                  {
                    if (v91 < 0)
                    {
                      __break(1u);
LABEL_175:
                      __break(1u);
LABEL_176:
                      __break(1u);
                      goto LABEL_177;
                    }
                    if ((unint64_t)v91 >= *(void *)(v32 + 16)) {
                      goto LABEL_175;
                    }
                    uint64_t v89 = 2 * v91;
                    unsigned int v90 = v86
                        + *(unsigned __int16 *)(v85 + v89)
                        + *((unsigned __int16 *)v11._rawValue + v87 + 16) * *(unsigned __int16 *)(v84 + 2 * v83);
                    unsigned int v86 = HIWORD(v90);
                    *(_WORD *)(v85 + v89) = v90;
                  }
                  ++v87;
                }
                while (v14 != v87);
                if (v86)
                {
                  BOOL v27 = __OFADD__(v14, v83);
                  uint64_t v92 = v14 + v83;
                  if (v27) {
                    goto LABEL_187;
                  }
                  if (v92 >= v20) {
                    goto LABEL_154;
                  }
                  if (v92 < 0) {
                    goto LABEL_188;
                  }
                  if ((unint64_t)v92 >= *(void *)(v32 + 16)) {
                    goto LABEL_189;
                  }
                  *(_WORD *)(v85 + 2 * v92) = v86;
                }
                uint64_t v83 = v88;
              }
              while (v88 != v6);
              uint64_t v93 = *(void *)(v32 + 16);
              LOWORD(v139) = (_WORD)v22;
              if (!v93) {
                goto LABEL_172;
              }
              uint64_t v75 = v126;
              unsigned __int16 v77 = v120;
              if (!*(_WORD *)(v85 + 2 * v93 - 2))
              {
                do
                {
                  *(void *)(v32 + 16) = v93 - 1;
                  if (v93 == 1) {
                    break;
                  }
                }
                while (!*(unsigned __int16 *)(v32 + 28 + 2 * v93--));
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_173;
            }
LABEL_191:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_192:
            uint64_t result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
        }
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
        goto LABEL_186;
      }
      goto LABEL_11;
    }
  }
  if ((v39 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v39 >= *(void *)(v32 + 16)) {
      goto LABEL_169;
    }
    uint64_t v40 = 2 * v39;
    unsigned int v41 = v36
        + *(unsigned __int16 *)(v14 + v40)
        + *((unsigned __int16 *)v11._rawValue + v37 + 16) * *(unsigned __int16 *)(v35 + 2 * v38);
    unsigned int v36 = HIWORD(v41);
    *(_WORD *)(v14 + v40) = v41;
    goto LABEL_22;
  }
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v75 = v126;
  unsigned __int16 v77 = v120;
LABEL_173:
  swift_bridgeObjectRelease();
  LOWORD(v22) = a3;
  unsigned __int16 v76 = v122;
  uint64_t v6 = (uint64_t)v124;
LABEL_122:
  NSDecimal.asVariableLengthInteger()(v116 | ((unint64_t)(unsigned __int16)v118 << 32) | (v6 << 48), v117 | ((unint64_t)v76 << 16) | ((unint64_t)v77 << 32) | (v121 << 48), (unsigned __int16)v22 | ((unsigned __int16)v119 << 16));
  uint64_t v79 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v32, v78, *(void *)(v32 + 16));
  if (v75)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v80 = v79;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static NSDecimal._fitMantissa(_:roundingMode:)(v80, 1);
  v11._rawValue = v81;
  uint64_t v14 = v82;
  swift_bridgeObjectRelease();
  unint64_t v150 = 0;
  unint64_t v151 = 0;
  unsigned int v152 = 0;
  NSDecimal.copyVariableLengthInteger(_:)(v11);
  if (v96) {
    return swift_bridgeObjectRelease();
  }
LABEL_161:
  unint64_t v97 = *((void *)v11._rawValue + 2);
  swift_bridgeObjectRelease();
  if (HIDWORD(v97)) {
    goto LABEL_192;
  }
  _So9NSDecimala__length_setter(v97, &v150);
  unsigned int v141 = v115;
  __int16 v142 = v18;
  __int16 v143 = v15;
  unsigned __int16 v144 = v134;
  __int16 v145 = v132;
  __int16 v146 = v136;
  __int16 v147 = v129;
  unsigned __int16 v148 = v130;
  __int16 v149 = v139;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(&v141);
  unsigned int v141 = v116;
  __int16 v142 = v118;
  __int16 v143 = v6;
  unsigned __int16 v144 = v117;
  __int16 v145 = v122;
  __int16 v146 = v120;
  __int16 v147 = v121;
  unsigned __int16 v148 = (unsigned __int16)v22;
  __int16 v149 = v119;
  BOOL v99 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v141);
  _So9NSDecimala__isNegative_setter(v99, &v150);
  unsigned int v141 = v115;
  __int16 v142 = v18;
  __int16 v143 = v15;
  unsigned __int16 v144 = v134;
  __int16 v145 = v132;
  __int16 v146 = v136;
  __int16 v147 = v129;
  unsigned __int16 v148 = v130;
  __int16 v149 = v139;
  int v100 = _So9NSDecimala__exponent_getter((char *)&v141);
  unsigned int v141 = v116;
  __int16 v142 = v118;
  __int16 v143 = (__int16)v124;
  unsigned __int16 v144 = v117;
  __int16 v145 = v122;
  __int16 v146 = v120;
  __int16 v147 = v121;
  unsigned __int16 v148 = (unsigned __int16)v22;
  __int16 v149 = v119;
  uint64_t v101 = (int)(v100 - _So9NSDecimala__exponent_getter((char *)&v141)) - 38;
  uint64_t v33 = v101 + v14;
  if (__OFADD__(v101, v14)) {
    goto LABEL_190;
  }
  if (v33 > -129)
  {
LABEL_166:
    if (v33 < 128)
    {
      _So9NSDecimala__exponent_setter(v33, &v150);
      _So9NSDecimala__isCompact_setter_0(0, &v150);
      NSDecimal.compact()();
      return v150;
    }
LABEL_53:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    unsigned char *v46 = 0;
    return swift_willThrow();
  }
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  swift_allocError();
  char v48 = 1;
LABEL_55:
  char *v47 = v48;
  return swift_willThrow();
}

void specialized static NSDecimal._fitMantissa(_:roundingMode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 <= 8)
  {
    swift_bridgeObjectRetain();
    return;
  }
  swift_bridgeObjectRetain();
  if (v3 != 9)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    int v6 = 0;
    uint64_t v19 = MEMORY[0x1E4FBC450];
    uint64_t v8 = 10000;
    unint64_t v9 = v2;
    do
    {
      uint64_t v44 = v4;
      if (v5) {
        int v6 = 1;
      }
      uint64_t v4 = v19;
      uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v2 + 16) = v3;
      bzero((void *)(v2 + 32), 2 * v3);
      unint64_t v20 = *(void *)(v9 + 16);
      if (v3 > v20) {
        goto LABEL_86;
      }
      if (v3 - 1 >= *(void *)(v2 + 16)) {
        goto LABEL_53;
      }
      unsigned int v21 = *(unsigned __int16 *)(v9 + 32 + 2 * (v3 - 1));
      int64_t v22 = v3 - 2;
      unsigned int v23 = (839 * (v21 >> 4)) >> 19;
      while (1)
      {
        *(_WORD *)(v2 + 30 + 2 * v3) = v23;
        unint64_t v5 = v21 % 0x2710;
        if (v3 == 1) {
          break;
        }
        if (v22 >= (uint64_t)v20) {
          goto LABEL_54;
        }
        unsigned int v21 = *(unsigned __int16 *)(v9 + 28 + 2 * v3) | (v5 << 16);
        unsigned int v23 = v21 / 0x2710;
        unint64_t v24 = v3 - 2;
        --v3;
        if (v24 >= *(void *)(v2 + 16)) {
          goto LABEL_53;
        }
      }
      uint64_t v25 = *(void *)(v2 + 16);
      if (v25 && !*(_WORD *)(v2 + 32 + 2 * v25 - 2))
      {
        do
        {
          *(void *)(v2 + 16) = v25 - 1;
          if (v25 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v2 + 28 + 2 * v25--));
        swift_bridgeObjectRelease();
        uint64_t v4 = v44 + 4;
        if (__OFADD__(v44, 4)) {
          goto LABEL_93;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v44 + 4;
        if (__OFADD__(v44, 4)) {
          goto LABEL_93;
        }
      }
      unint64_t v3 = *(void *)(v2 + 16);
      unint64_t v9 = v2;
    }
    while (v3 > 9);
    if (v3 == 9) {
      goto LABEL_4;
    }
LABEL_46:
    if (!v6) {
      goto LABEL_55;
    }
    uint64_t v27 = a2;
    if (v5 == 5 || !v5) {
      LODWORD(v5) = v5 + 1;
    }
LABEL_56:
    if (v27)
    {
      if (v27 == 2) {
        goto LABEL_64;
      }
      if (v27 != 3) {
        return;
      }
      if (v5 == 5)
      {
        if (!v3)
        {
          __break(1u);
LABEL_101:
          __break(1u);
          return;
        }
        if (*(_WORD *)(v2 + 32)) {
          return;
        }
        goto LABEL_65;
      }
    }
    if (v5 < 5) {
      return;
    }
LABEL_64:
    if (!v3)
    {
      uint64_t v8 = MEMORY[0x1E4FBC860];
      unint64_t v9 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v28 = 1;
      goto LABEL_71;
    }
LABEL_65:
    uint64_t v28 = v3 + 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v3;
    bzero((void *)(v8 + 32), 2 * v3);
    unsigned int v29 = *(unsigned __int16 *)(v2 + 32) + 1;
    *(_WORD *)(v8 + 32) = *(_WORD *)(v2 + 32) + 1;
    unint64_t v30 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v31 = (_WORD *)(v8 + 34);
      uint64_t v32 = (unsigned __int16 *)(v2 + 34);
      do
      {
        int v33 = *v32++;
        unsigned int v29 = v33 + HIWORD(v29);
        *v31++ = v29;
        --v30;
      }
      while (v30);
    }
    unint64_t v9 = v3;
    if (v29 < 0x10000)
    {
LABEL_83:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_71:
    if (v9 == v28)
    {
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      swift_allocError();
      unsigned char *v34 = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return;
    }
    unint64_t v35 = *(void *)(v8 + 24);
    unint64_t v5 = v9 + 1;
    if (v9 >= v35 >> 1) {
      goto LABEL_99;
    }
    while (1)
    {
      *(void *)(v8 + 16) = v5;
      *(_WORD *)(v8 + 32 + 2 * v9) = 1;
      unint64_t v5 = *(void *)(v8 + 16);
      if (v5 >= v3) {
        goto LABEL_83;
      }
      if (v5)
      {
        unint64_t v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v3 + 16) = v5;
        bzero((void *)(v3 + 32), 2 * v5);
        unint64_t v17 = *(void *)(v8 + 16);
        if (v5 > v17) {
          goto LABEL_101;
        }
        if (v5 - 1 >= *(void *)(v3 + 16))
        {
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        int64_t v36 = v5 - 2;
        unsigned int v37 = *(unsigned __int16 *)(v8 + 32 + 2 * (v5 - 1));
        LOWORD(v38) = *(_WORD *)(v8 + 32 + 2 * (v5 - 1)) / 0xAu;
        while (1)
        {
          *(_WORD *)(v3 + 30 + 2 * v5) = v38;
          if (v5 == 1) {
            break;
          }
          if (v36 >= (uint64_t)v17)
          {
            __break(1u);
            goto LABEL_92;
          }
          unsigned int v37 = *(unsigned __int16 *)(v8 + 28 + 2 * v5) | ((v37 % 0xA) << 16);
          unsigned int v38 = v37 / 0xA;
          unint64_t v39 = v5 - 2;
          --v5;
          if (v39 >= *(void *)(v3 + 16)) {
            goto LABEL_82;
          }
        }
      }
      else
      {
LABEL_87:
        unint64_t v3 = MEMORY[0x1E4FBC860];
      }
      unint64_t v17 = *(void *)(v3 + 16);
      if (v17 && !*(_WORD *)(v3 + 2 * v17 + 30))
      {
        do
        {
LABEL_94:
          *(void *)(v3 + 16) = v17 - 1;
          if (v17 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v3 + 28 + 2 * v17--));
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!__OFADD__(v4++, 1)) {
        return;
      }
      __break(1u);
LABEL_99:
      uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v5, 1, (char *)v8);
    }
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  int v6 = 0;
LABEL_4:
  unint64_t v3 = 9;
  uint64_t v7 = MEMORY[0x1E4FBC450];
  uint64_t v8 = 3435973837;
  while (1)
  {
    uint64_t v43 = v4;
    if (v5) {
      int v6 = 1;
    }
    uint64_t v4 = v7;
    unint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = v3;
    bzero((void *)(v9 + 32), 2 * v3);
    unint64_t v10 = *(void *)(v2 + 16);
    if (v3 > v10)
    {
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    unint64_t v11 = v3 - 1;
    if (v3 - 1 >= *(void *)(v9 + 16)) {
      break;
    }
    int64_t v12 = v3 - 2;
    unsigned int v13 = *(unsigned __int16 *)(v2 + 32 + 2 * v11);
    LOWORD(v14) = *(_WORD *)(v2 + 32 + 2 * v11) / 0xAu;
    while (1)
    {
      *(_WORD *)(v9 + 30 + 2 * v3) = v14;
      unint64_t v5 = v13 % 0xA;
      if (v3 == 1) {
        break;
      }
      if (v12 >= (uint64_t)v10) {
        goto LABEL_52;
      }
      unsigned int v13 = *(unsigned __int16 *)(v2 + 28 + 2 * v3) | (v5 << 16);
      unsigned int v14 = v13 / 0xA;
      unint64_t v15 = v3 - 2;
      --v3;
      if (v15 >= *(void *)(v9 + 16)) {
        goto LABEL_51;
      }
    }
    uint64_t v16 = *(void *)(v9 + 16);
    if (v16 && !*(_WORD *)(v9 + 32 + 2 * v16 - 2))
    {
      do
      {
        *(void *)(v9 + 16) = v16 - 1;
        if (v16 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v9 + 28 + 2 * v16--));
      swift_bridgeObjectRelease();
      uint64_t v4 = v43 + 1;
      if (__OFADD__(v43, 1))
      {
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v43 + 1;
      if (__OFADD__(v43, 1)) {
        goto LABEL_92;
      }
    }
    unint64_t v3 = *(void *)(v9 + 16);
    uint64_t v2 = v9;
    if (v3 <= 8)
    {
      uint64_t v2 = v9;
      goto LABEL_46;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  uint64_t v27 = a2;
  if (v5) {
    goto LABEL_56;
  }
}

unint64_t lazy protocol witness table accessor for type _NSRange and conformance _NSRange()
{
  unint64_t result = lazy protocol witness table cache variable for type _NSRange and conformance _NSRange;
  if (!lazy protocol witness table cache variable for type _NSRange and conformance _NSRange)
  {
    type metadata accessor for _NSRange(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NSRange and conformance _NSRange);
  }
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

uint64_t _startDocument(uint64_t result)
{
  uint64_t v1 = result;
  if (!result || !*(unsigned char *)(result + 120))
  {
    uint64_t v2 = (void *)[(id)result delegate];
    unint64_t result = objc_opt_respondsToSelector();
    if (result)
    {
      return [v2 parserDidStartDocument:v1];
    }
  }
  return result;
}

uint64_t _endDocument(uint64_t result)
{
  uint64_t v1 = result;
  if (!result || !*(unsigned char *)(result + 120))
  {
    uint64_t v2 = (void *)[(id)result delegate];
    unint64_t result = objc_opt_respondsToSelector();
    if (result)
    {
      return [v2 parserDidEndDocument:v1];
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature);
  }
  return result;
}

uint64_t ___startElementNs_block_invoke()
{
  uint64_t result = _CFAppVersionCheckLessThan();
  _MergedGlobals_130 = result != 0;
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.PredicateEvaluate(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8);
    uint64_t v4 = result - 8;
    v22[0] = v5 + 64;
    if (*(void *)(a1 + 16) == 1)
    {
      uint64_t result = swift_checkMetadataState();
      if (v6 > 0x3F) {
        return result;
      }
LABEL_14:
      v22[1] = *(void *)(result - 8) + 64;
      swift_initStructMetadata();
      return 0;
    }
    MEMORY[0x1F4188790](v4);
    unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_11;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_11;
      }
      unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v12 = (long long *)(v11 + 16);
      unsigned int v13 = v9 + 16;
      unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *unsigned int v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v7 != v10)
      {
LABEL_11:
        unint64_t v16 = v7 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t result = swift_getTupleTypeMetadata();
    if (v21 <= 0x3F) {
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t URLResourceValues.fileIdentifier.getter(id *a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    id v3 = *a1;
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v5)
    {
      outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  int v6 = swift_dynamicCast();
  uint64_t v7 = v11;
  if (!v6) {
    return 0;
  }
  return v7;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in IndexSet()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<IndexSet> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<IndexSet>);
}

void ___initializeLibrarianFunctions_block_invoke()
{
  if (qword_1EB1ECE28 != -1) {
    dispatch_once(&qword_1EB1ECE28, &__block_literal_global_10);
  }
  id v0 = (void *)qword_1EB1ECE20;
  if (qword_1EB1ECE20)
  {
    off_1EB1ECE68 = dlsym((void *)qword_1EB1ECE20, "LBEvictItemAtURL");
    off_1EB1ECE50 = dlsym(v0, "LBStartSyncForItem");
    off_1EB1ECE58 = dlsym(v0, "LBSetSyncEnabledForItem");
    off_1EB1ECE78 = dlsym(v0, "LBGetURLForPublishedItem");
    off_1EB1ECE70 = dlsym(v0, "LBGetMobileContainerForID");
    off_1EB1ECE98 = (uint64_t (*)(void, void))dlsym(v0, "LBCopyUbiquityAccountToken");
    off_1EB1ECED0 = dlsym(v0, "LBRefreshUbiquityAccountToken");
    off_1EB1ECE88 = (uint64_t (*)(void))dlsym(v0, "LBCurrentProcessHasUbiquityContainer");
  }
}

uint64_t NSObject.KVOSubscription.__deallocating_deinit()
{
  MEMORY[0x185309510](*(id *)((char *)v0 + *((void *)*v0 + 22)), -1, -1);
  MEMORY[0x185309510](*(id *)((char *)v0 + *((void *)*v0 + 23)), -1, -1);

  uint64_t v1 = (char *)v0 + *((void *)*v0 + 17);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  id v3 = (char *)v0 + *((void *)*v0 + 18);
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_unknownObjectWeakDestroy();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Percent(void *a1)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1);
}

uint64_t Sequence.sorted<A>(using:)(uint64_t a1, uint64_t a2)
{
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  uint64_t v18 = v10;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v11 + 16))(&v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v2, a2, v4);
  uint64_t v19 = dispatch thunk of Sequence._copyToContiguousArray()();
  swift_getAssociatedTypeWitness();
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  swift_getWitnessTable();
  MutableCollection<>.sort(by:)();
  return v19;
}

uint64_t Sequence.sorted<A, B>(using:)(uint64_t a1, uint64_t a2)
{
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v12;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v13 + 16))(&v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v2, a2, v4);
  uint64_t v23 = dispatch thunk of Sequence._copyToContiguousArray()();
  swift_getAssociatedTypeWitness();
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  swift_getWitnessTable();
  MutableCollection<>.sort(by:)();
  return v23;
}

uint64_t URLRequest.httpBody.setter(uint64_t a1, unint64_t a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)v2 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v10;
    *(void *)uint64_t v2 = v6;
    swift_release();
  }
  id v8 = *(id *)(*(void *)v2 + 16);
  closure #1 in URLRequest.httpBody.setter(v8, a1, a2);

  return outlined consume of Data?(a1, a2);
}

void closure #1 in URLRequest.httpBody.setter(id a1, uint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a3 >> 60 == 15)
  {
    double v4 = 0;
  }
  else
  {
    switch(a3 >> 62)
    {
      case 1uLL:
        if (a2 >> 32 < (int)a2) {
          __break(1u);
        }
        swift_retain();
        double v4 = __DataStorage.bridgedReference(_:)((int)a2, a2 >> 32);
        outlined consume of Data?(a2, a3);
        break;
      case 2uLL:
        uint64_t v7 = *(void *)(a2 + 16);
        uint64_t v8 = *(void *)(a2 + 24);
        swift_retain();
        swift_retain();
        double v4 = __DataStorage.bridgedReference(_:)(v7, v8);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        double v4 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
        break;
      default:
        uint64_t v9 = a2;
        __int16 v10 = a3;
        char v11 = BYTE2(a3);
        char v12 = BYTE3(a3);
        char v13 = BYTE4(a3);
        char v14 = BYTE5(a3);
        double v4 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v9, BYTE6(a3));
        break;
    }
  }
  objc_msgSend(a1, sel_setHTTPBody_, v4);
}

id Date.description.getter()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  id v2 = objc_msgSend(v1, sel_description);

  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t getEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        char v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

uint64_t createTemporaryFile(at:inPath:prefix:options:variant:)(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, void *a5, id a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = v8;
  uint64_t v331 = a8;
  char v14 = (void *)a2;
  uint64_t v15 = a1;
  uint64_t v343 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = *(void **)a3;
  long long v332 = *(void **)(a3 + 8);
  uint64_t v333 = *(void *)(a3 + 16);
  id v334 = v16;
  uint64_t v17 = *(unsigned __int8 *)(a3 + 24);
  uint64_t v339 = a1;
  uint64_t v340 = (void *)a2;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v18 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v18 = a1 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  uint64_t v329 = a7;
  uint64_t v330 = (uint64_t)v9;
  if (v18)
  {
    uint64_t v19 = specialized BidirectionalCollection.last.getter(v15, (unint64_t)v14);
    if (!v20)
    {
      __break(1u);
      goto LABEL_303;
    }
    if (v19 == 47 && v20 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
        v22._uint64_t countAndFlagsBits = 47;
        v22._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v22);
        uint64_t v15 = v339;
        char v14 = v340;
      }
    }
  }
  id v23 = objc_msgSend(self, sel_processInfo);
  objc_msgSend(v23, sel_processIdentifier);

  lazy protocol witness table accessor for type Int32 and conformance Int32();
  uint64_t v24 = String.init<A>(_:radix:uppercase:)();
  unint64_t v26 = v25;
  v341._uint64_t countAndFlagsBits = v15;
  v341._unint64_t object = v14;
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = (uint64_t)a4;
  v27._unint64_t object = a5;
  String.append(_:)(v27);
  swift_bridgeObjectRetain();
  v28._uint64_t countAndFlagsBits = v24;
  v28._unint64_t object = v26;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = (uint64_t)v14;
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = 0x5858585858582ELL;
  v30._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  uint64_t v31 = v15;
  unint64_t v335 = v29;
  if ((v29 & 0x2000000000000000) != 0) {
    id v32 = (id)(((unint64_t)v341._object >> 56) & 0xF);
  }
  else {
    id v32 = (id)(v15 & 0xFFFFFFFFFFFFLL);
  }
  uint64_t v33 = 8;
  while (1)
  {
    while (1)
    {
      Swift::Int isStackAllocationSafe = (Swift::Int)v32;
      if ((v335 & 0x1000000000000000) != 0) {
        Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
      }
      uint64_t v35 = 3 * isStackAllocationSafe;
      if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
      {
        __break(1u);
LABEL_222:
        uint64_t v85 = 512;
LABEL_229:
        uint64_t v328 = v85;
        swift_retain_n();
        id v258 = v32;
        swift_retain_n();
        id v259 = v258;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_303;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v260 = (int)POSIXErrorCode.rawValue.getter();
        id v261 = objc_allocWithZone((Class)NSError);
        uint64_t v262 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v256 = objc_msgSend(v261, sel_initWithDomain_code_userInfo_, v262, v260, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v263 = objc_msgSend(v256, sel_domain);
        id v264 = static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
        uint64_t v266 = v265;

        if (v264 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v266 == v267)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v84 = v333;
          id v32 = v334;
        }
        else
        {
          char v268 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v84 = v333;
          if ((v268 & 1) == 0) {
            goto LABEL_298;
          }
          id v32 = v334;
        }
LABEL_235:
        swift_bridgeObjectRetain();
        outlined copy of PathOrURL(v32, v17, v84, 1);
        if (_foundation_swift_url_feature_enabled())
        {
          id v327 = v256;
          v341._uint64_t countAndFlagsBits = (uint64_t)v32;
          v341._unint64_t object = (void *)v17;
          uint64_t v342 = v84;
          swift_retain();
          id v269 = v32;
          swift_retain();
          Swift::String v270 = URL.path(percentEncoded:)(1);
          Swift::String v341 = v270;
          swift_bridgeObjectRetain();
          if (String.count.getter() > 1
            && (specialized BidirectionalCollection.last.getter(v270._countAndFlagsBits, (unint64_t)v270._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
          }
          unint64_t object = v270._object;
          v338._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
          uint64_t v271 = specialized Set._Variant.insert(_:)(&v337, 0x2FuLL);
          uint64_t countAndFlagsBits = v338._countAndFlagsBits;
          uint64_t v273 = v341._countAndFlagsBits;
          uint64_t v274 = v341._object;
          unint64_t v275 = ((unint64_t)v341._object >> 56) & 0xF;
          if (((uint64_t)v341._object & 0x2000000000000000) == 0) {
            unint64_t v275 = v341._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (v275)
          {
            Swift::String v338 = v341;
            MEMORY[0x1F4188790](v271);
            uint64_t v323 = (uint64_t)&v338;
            uint64_t v324 = countAndFlagsBits;
            swift_bridgeObjectRetain();
            specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v322, v273, (unint64_t)v274);
            if (v276 == 1)
            {
              unint64_t v278 = (unint64_t)v338._object;
              Swift::Int v277 = v338._countAndFlagsBits;
              swift_bridgeObjectRetain();
              specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v277, v278, countAndFlagsBits);
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v32 = v334;
            id v256 = v327;
          }
          else
          {
            swift_bridgeObjectRelease();
            id v256 = v327;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v32, v17, v84, 1);
          long long v294 = v32;
          uint64_t v295 = v17;
        }
        else
        {
          id v279 = objc_msgSend(v32, sel__parameterString);
          if (v279)
          {
            uint64_t v280 = v279;
            id v281 = static String._unconditionallyBridgeFromObjectiveC(_:)(v279);
            uint64_t v283 = v282;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (id v284 = objc_msgSend(v32, sel_path)) != 0)
            {
              uint64_t v285 = v284;
              id v286 = static String._unconditionallyBridgeFromObjectiveC(_:)(v284);
              uint64_t v288 = v287;

              v341._uint64_t countAndFlagsBits = (uint64_t)v286;
              v341._unint64_t object = v288;
              swift_bridgeObjectRetain();
              v289._uint64_t countAndFlagsBits = 59;
              v289._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v289);
              uint64_t v84 = v333;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v290._uint64_t countAndFlagsBits = (uint64_t)v281;
              v290._unint64_t object = v283;
              String.append(_:)(v290);
              swift_bridgeObjectRelease();
              id v32 = v334;
            }
            else
            {
              v341._uint64_t countAndFlagsBits = 59;
              v341._unint64_t object = (void *)0xE100000000000000;
              v291._uint64_t countAndFlagsBits = (uint64_t)v281;
              v291._unint64_t object = v283;
              String.append(_:)(v291);
            }
            swift_bridgeObjectRelease();
            outlined consume of PathOrURL(v32, v17, v84, 1);
            goto LABEL_266;
          }
          id v292 = objc_msgSend(v32, sel_path);
          if (v292)
          {
            char v293 = v292;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v292);
          }
          long long v294 = v32;
          uint64_t v295 = v17;
          uint64_t v84 = v333;
        }
        outlined consume of PathOrURL(v294, v295, v84, 1);
LABEL_266:
        uint64_t v306 = v17;
        uint64_t v307 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v308 = v32;
        outlined consume of PathOrURL(v32, v306, v84, 1);
        if (v256)
        {
          v341._uint64_t countAndFlagsBits = (uint64_t)v256;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          id v309 = v256;
          if (_getErrorEmbeddedNSError<A>(_:)())
          {
          }
          else
          {
            swift_allocError();
            void *v310 = v309;
          }
          uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v84 = v333;
        }
        else
        {
          uint64_t v15 = 0;
        }
        if (v331)
        {
          long long v311 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
        }
        else
        {
          long long v311 = 0;
        }
        objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v328, v307, v308, v15, v311, 0, 0);
        swift_unknownObjectRelease();

        id v312 = v32;
        uint64_t v313 = (uint64_t)v332;
        goto LABEL_289;
      }
      if (v35 < -1)
      {
        __break(1u);
        goto LABEL_277;
      }
      uint64_t v15 = v35 + 1;
      if (v35 < 1024) {
        break;
      }
      Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if (isStackAllocationSafe) {
        break;
      }
      a4 = (char *)swift_slowAlloc();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)a4, v15, 1, v31, v335);
      if (v39)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v74 = objc_allocWithZone((Class)NSError);
        uint64_t v75 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v76 = objc_msgSend(v74, sel_initWithDomain_code_userInfo_, v75, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v77 = objc_msgSend(v76, sel_domain);
        id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        uint64_t v80 = v79;

        if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v80 == v81)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_290;
        }
        char v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v97) {
          goto LABEL_290;
        }
        __break(1u);
        goto LABEL_72;
      }
      if (!mktemp(a4))
      {
        int v82 = MEMORY[0x185301870]();
        LODWORD(a6) = v82;
        int v83 = v82 - 1;
        if (v17)
        {
          uint64_t v84 = v333;
          id v32 = v334;
          uint64_t v85 = 4;
          uint64_t v17 = (uint64_t)v332;
          switch(v82)
          {
            case 1:
            case 13:
              uint64_t v85 = 513;
              goto LABEL_229;
            case 2:
              goto LABEL_229;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 16:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 29:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
              goto LABEL_222;
            case 17:
              uint64_t v85 = 516;
              goto LABEL_229;
            case 28:
            case 69:
              uint64_t v85 = 640;
              goto LABEL_229;
            case 30:
              uint64_t v85 = 642;
              goto LABEL_229;
            case 63:
              uint64_t v85 = 514;
              goto LABEL_229;
            default:
              uint64_t v17 = (uint64_t)v332;
              if (v82 != 102) {
                goto LABEL_222;
              }
              swift_retain_n();
              id v254 = v32;
              swift_retain_n();
              id v255 = v254;
              id v256 = 0;
              uint64_t v328 = 512;
              break;
          }
          goto LABEL_235;
        }
LABEL_72:
        uint64_t v98 = v333;
        id v99 = v334;
        uint64_t v330 = 4;
        uint64_t v100 = (uint64_t)v332;
        switch(v83)
        {
          case 0:
          case 12:
            uint64_t v101 = 513;
            goto LABEL_257;
          case 1:
            goto LABEL_258;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
          case 14:
          case 15:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 28:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
            goto LABEL_223;
          case 16:
            uint64_t v101 = 516;
            goto LABEL_257;
          case 27:
          case 68:
            uint64_t v101 = 640;
            goto LABEL_257;
          case 29:
            uint64_t v101 = 642;
            goto LABEL_257;
          case 62:
            uint64_t v101 = 514;
            goto LABEL_257;
          default:
            uint64_t v100 = (uint64_t)v332;
            if (a6 == 102)
            {
              id v257 = 0;
              uint64_t v330 = 512;
            }
            else
            {
LABEL_223:
              uint64_t v101 = 512;
LABEL_257:
              uint64_t v330 = v101;
LABEL_258:
              if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
                goto LABEL_303;
              }
              uint64_t v15 = @"NSPOSIXErrorDomain";
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
              uint64_t v296 = (int)POSIXErrorCode.rawValue.getter();
              id v297 = objc_allocWithZone((Class)NSError);
              uint64_t v298 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v257 = objc_msgSend(v297, sel_initWithDomain_code_userInfo_, v298, v296, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              id v299 = objc_msgSend(v257, sel_domain);
              id v300 = static String._unconditionallyBridgeFromObjectiveC(_:)(v299);
              uint64_t v302 = v301;

              if (v300 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                && v302 == v303)
              {
                swift_bridgeObjectRelease_n();
                uint64_t v98 = v333;
                id v99 = v334;
              }
              else
              {
                char v304 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v98 = v333;
                id v99 = v334;
                if ((v304 & 1) == 0) {
                  goto LABEL_299;
                }
              }
            }
            uint64_t v305 = v331;
            swift_bridgeObjectRetain();
            outlined copy of PathOrURL(v99, v100, v98, 0);
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v330, (uint64_t)v99, v100, v257, v329, v305, 0, 0, &v341, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
              (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
              (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
              (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
            goto LABEL_290;
        }
      }
      uint64_t v40 = _NSOpenFileDescriptor_Protected(a4, 2562, (int)a6, 438);
      if ((v40 & 0x80000000) == 0)
      {
        uint64_t v15 = v40;
        String.init(cString:)();
        MEMORY[0x185309510](a4, -1, -1);
LABEL_62:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v15;
      }
      if (MEMORY[0x185301870]() != 17)
      {
        uint64_t v86 = MEMORY[0x185301870]();
        uint64_t v15 = v86;
        if (v17)
        {
          CocoaError.Code.init(fileErrno:reading:)(v86, 0);
          uint64_t v328 = v337;
          uint64_t v84 = v333;
          swift_retain_n();
          a6 = v334;
          id v87 = v334;
          uint64_t v17 = (uint64_t)v332;
          swift_retain_n();
          id v88 = v87;
          id v32 = v88;
          if (v15 == 102)
          {
            uint64_t v29 = 0;
            goto LABEL_179;
          }
          id v327 = v88;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_305;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v133 = (int)POSIXErrorCode.rawValue.getter();
          id v134 = objc_allocWithZone((Class)NSError);
          uint64_t v135 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v29 = (uint64_t)objc_msgSend(v134, sel_initWithDomain_code_userInfo_, v135, v133, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v136 = objc_msgSend((id)v29, sel_domain);
          id v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
          uint64_t v139 = v138;

          if (v137 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v139 == v140)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v84 = v333;
LABEL_178:
            a6 = v334;
            id v32 = v327;
LABEL_179:
            swift_bridgeObjectRetain();
            outlined copy of PathOrURL(a6, v17, v84, 1);
            if (_foundation_swift_url_feature_enabled())
            {
              unint64_t object = (void *)v29;
              v341._uint64_t countAndFlagsBits = (uint64_t)v32;
              v341._unint64_t object = (void *)v17;
              uint64_t v342 = v84;
              swift_retain();
              id v218 = v32;
              swift_retain();
              Swift::String v219 = URL.path(percentEncoded:)(1);
              Swift::String v341 = v219;
              swift_bridgeObjectRetain();
              if (String.count.getter() > 1
                && (specialized BidirectionalCollection.last.getter(v219._countAndFlagsBits, (unint64_t)v219._object) & 0x1FF) == 0x2F)
              {
                specialized RangeReplaceableCollection<>.popLast()();
                swift_bridgeObjectRelease();
              }
              long long v325 = v219._object;
              v338._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
              uint64_t v220 = specialized Set._Variant.insert(_:)(&v336, 0x2FuLL);
              uint64_t v221 = v338._countAndFlagsBits;
              uint64_t v222 = v341._countAndFlagsBits;
              uint64_t v223 = v341._object;
              unint64_t v224 = ((unint64_t)v341._object >> 56) & 0xF;
              if (((uint64_t)v341._object & 0x2000000000000000) == 0) {
                unint64_t v224 = v341._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
              }
              if (v224)
              {
                id v327 = v32;
                Swift::String v338 = v341;
                MEMORY[0x1F4188790](v220);
                uint64_t v323 = (uint64_t)&v338;
                uint64_t v324 = v221;
                swift_bridgeObjectRetain();
                specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v322, v222, (unint64_t)v223);
                if (v225 == 1)
                {
                  unint64_t v227 = (unint64_t)v338._object;
                  Swift::Int v226 = v338._countAndFlagsBits;
                  swift_bridgeObjectRetain();
                  specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v226, v227, v221);
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                a6 = v334;
                uint64_t v29 = (uint64_t)object;
                id v32 = v327;
              }
              else
              {
                swift_bridgeObjectRelease();
                uint64_t v29 = (uint64_t)object;
                a6 = v334;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of PathOrURL(a6, v17, v84, 1);
              char v252 = a6;
              uint64_t v253 = v17;
LABEL_278:
              outlined consume of PathOrURL(v252, v253, v84, 1);
              id v242 = a6;
LABEL_279:
              uint64_t v330 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v314 = v32;
              outlined consume of PathOrURL(v242, v17, v84, 1);
              if (v29)
              {
                v341._uint64_t countAndFlagsBits = v29;
                lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
                id v315 = (id)v29;
                uint64_t v316 = _getErrorEmbeddedNSError<A>(_:)();
                uint64_t v317 = v328;
                if (v316)
                {
                }
                else
                {
                  swift_allocError();
                  *long long v318 = v315;
                }
                uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
                uint64_t v84 = v333;
              }
              else
              {
                uint64_t v15 = 0;
                uint64_t v317 = v328;
              }
              if (v331)
              {
                long long v319 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
              }
              else
              {
                long long v319 = 0;
              }
              objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v317, v330, v314, v15, v319, 0, 0);
              swift_unknownObjectRelease();

              id v312 = v334;
              uint64_t v313 = v17;
LABEL_289:
              outlined consume of PathOrURL(v312, v313, v84, 1);
LABEL_290:
              swift_willThrow();
              MEMORY[0x185309510](a4, -1, -1);
              goto LABEL_291;
            }
            id v228 = objc_msgSend(v32, sel__parameterString);
            if (v228)
            {
              uint64_t v229 = v228;
              id v230 = a6;
              id v231 = static String._unconditionallyBridgeFromObjectiveC(_:)(v228);
              uint64_t v233 = v232;

              if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                && (id v234 = objc_msgSend(v32, sel_path)) != 0)
              {
                uint64_t v235 = v234;
                id v236 = v32;
                id v237 = static String._unconditionallyBridgeFromObjectiveC(_:)(v234);
                uint64_t v239 = v238;

                v341._uint64_t countAndFlagsBits = (uint64_t)v237;
                v341._unint64_t object = v239;
                swift_bridgeObjectRetain();
                v240._uint64_t countAndFlagsBits = 59;
                v240._unint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v240);
                uint64_t v84 = v333;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v241._uint64_t countAndFlagsBits = (uint64_t)v231;
                v241._unint64_t object = v233;
                String.append(_:)(v241);
                swift_bridgeObjectRelease();
                id v32 = v236;
                id v242 = v334;
                swift_bridgeObjectRelease();
                Swift::Double v243 = v242;
              }
              else
              {
                v341._uint64_t countAndFlagsBits = 59;
                v341._unint64_t object = (void *)0xE100000000000000;
                v249._uint64_t countAndFlagsBits = (uint64_t)v231;
                v249._unint64_t object = v233;
                String.append(_:)(v249);
                swift_bridgeObjectRelease();
                id v242 = v230;
                Swift::Double v243 = v230;
              }
              outlined consume of PathOrURL(v243, v17, v84, 1);
              goto LABEL_279;
            }
            id v250 = objc_msgSend(v32, sel_path);
            if (v250)
            {
              uint64_t v251 = v250;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v250);

              char v252 = a6;
              uint64_t v253 = v17;
              uint64_t v84 = v333;
              goto LABEL_278;
            }
LABEL_277:
            char v252 = a6;
            uint64_t v253 = v17;
            uint64_t v84 = v333;
            goto LABEL_278;
          }
          char v217 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v84 = v333;
          if (v217) {
            goto LABEL_178;
          }
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
        }
        CocoaError.Code.init(fileErrno:reading:)(v86, 0);
        __int16 v102 = (uint64_t (*)(void))v338._countAndFlagsBits;
        uint64_t v103 = v333;
        id v104 = v334;
        if (v15 == 102)
        {
          id v105 = 0;
          uint64_t v106 = (uint64_t)v332;
          goto LABEL_193;
        }
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
        {
          uint64_t v15 = @"NSPOSIXErrorDomain";
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v141 = (int)POSIXErrorCode.rawValue.getter();
          id v142 = objc_allocWithZone((Class)NSError);
          uint64_t v143 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v105 = objc_msgSend(v142, sel_initWithDomain_code_userInfo_, v143, v141, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v144 = objc_msgSend(v105, sel_domain);
          id v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
          uint64_t v147 = v146;

          if (v145 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v147 == v148)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v106 = (uint64_t)v332;
            uint64_t v103 = v333;
            id v104 = v334;
          }
          else
          {
            char v244 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v106 = (uint64_t)v332;
            uint64_t v103 = v333;
            id v104 = v334;
            if ((v244 & 1) == 0) {
              goto LABEL_301;
            }
          }
LABEL_193:
          uint64_t v245 = v331;
          swift_bridgeObjectRetain();
          outlined copy of PathOrURL(v104, v106, v103, 0);
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v102, (uint64_t)v104, v106, v105, v329, v245, 0, 0, &v341, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
            (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
            (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
            (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
          goto LABEL_290;
        }
        v341._uint64_t countAndFlagsBits = 0;
        v341._unint64_t object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        v341._uint64_t countAndFlagsBits = 0xD000000000000014;
        v341._unint64_t object = (void *)0x80000001823A9780;
        LODWORD(v337) = v15;
        while (1)
        {
LABEL_304:
          v321._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v321);
          swift_bridgeObjectRelease();
          LODWORD(v324) = 0;
          uint64_t v323 = 73;
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_305:
          v341._uint64_t countAndFlagsBits = 0;
          v341._unint64_t object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease();
          v341._uint64_t countAndFlagsBits = 0xD000000000000014;
          v341._unint64_t object = (void *)0x80000001823A9780;
          LODWORD(v338._countAndFlagsBits) = v15;
        }
      }
      MEMORY[0x185309510](a4, -1, -1);
      if (!--v33)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v41 = objc_allocWithZone((Class)NSError);
        uint64_t v42 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v43 = objc_msgSend(v41, sel_initWithDomain_code_userInfo_, v42, 512, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v44 = objc_msgSend(v43, sel_domain);
        id v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        uint64_t v47 = v46;

        if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v47 == v48)
        {
          swift_bridgeObjectRelease_n();
LABEL_49:
          swift_willThrow();
          goto LABEL_292;
        }
        char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v69) {
          goto LABEL_49;
        }
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        __break(1u);
LABEL_297:
        __break(1u);
LABEL_298:
        __break(1u);
LABEL_299:
        __break(1u);
        goto LABEL_300;
      }
    }
    uint64_t v29 = (uint64_t)&v325;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    a4 = (char *)&v325 - v36;
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)&v325 - v36, v15, 1, v31, v335);
    if (v37)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v49 = objc_allocWithZone((Class)NSError);
      uint64_t v50 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v52 = objc_msgSend(v51, sel_domain);
      id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      uint64_t v55 = v54;

      if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v55 == v56)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_206;
      }
      LOBYTE(v17) = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_206;
      }
      __break(1u);
LABEL_41:
      int v58 = MEMORY[0x185301870]();
      LODWORD(a6) = v58;
      if ((v17 & 1) == 0)
      {
        id v70 = v334;
        uint64_t v71 = 4;
        uint64_t v72 = (uint64_t)v332;
        switch(v58)
        {
          case 1:
          case 13:
            uint64_t v71 = 513;
            goto LABEL_162;
          case 2:
            goto LABEL_162;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 29:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
            goto LABEL_116;
          case 17:
            uint64_t v71 = 516;
            goto LABEL_162;
          case 28:
          case 69:
            uint64_t v71 = 640;
            goto LABEL_162;
          case 30:
            uint64_t v71 = 642;
            goto LABEL_162;
          case 63:
            uint64_t v71 = 514;
            goto LABEL_162;
          default:
            uint64_t v72 = (uint64_t)v332;
            if (v58 == 102)
            {
              a6 = 0;
              uint64_t v71 = 512;
              uint64_t v73 = v333;
LABEL_176:
              uint64_t v216 = v331;
              swift_bridgeObjectRetain();
              outlined copy of PathOrURL(v70, v72, v73, 0);
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v71, (uint64_t)v70, v72, a6, v329, v216, 0, 0, &v341, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
                (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
                (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
                (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
              goto LABEL_206;
            }
LABEL_116:
            uint64_t v71 = 512;
LABEL_162:
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
              goto LABEL_303;
            }
            uint64_t v15 = @"NSPOSIXErrorDomain";
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v197 = (int)POSIXErrorCode.rawValue.getter();
            id v198 = objc_allocWithZone((Class)NSError);
            uint64_t v199 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            a6 = objc_msgSend(v198, sel_initWithDomain_code_userInfo_, v199, v197, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v200 = objc_msgSend(a6, sel_domain);
            id v201 = static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
            uint64_t v203 = v202;

            if (v201 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v203 == v204)
            {
              goto LABEL_173;
            }
            char v205 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v73 = v333;
            if (v205) {
              goto LABEL_175;
            }
            __break(1u);
LABEL_167:
            uint64_t v71 = 516;
            break;
        }
        goto LABEL_170;
      }
      id v59 = v334;
      uint64_t v60 = 4;
      unsigned int v61 = v332;
      switch(v58)
      {
        case 1:
        case 13:
          uint64_t v60 = 513;
          goto LABEL_134;
        case 2:
          goto LABEL_134;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_115;
        case 17:
          uint64_t v60 = 516;
          goto LABEL_134;
        case 28:
        case 69:
          uint64_t v60 = 640;
          goto LABEL_134;
        case 30:
          uint64_t v60 = 642;
          goto LABEL_134;
        case 63:
          uint64_t v60 = 514;
          goto LABEL_134;
        default:
          unsigned int v61 = v332;
          uint64_t v63 = v333;
          if (v58 == 102)
          {
            swift_retain_n();
            id v149 = v59;
            swift_retain_n();
            id v150 = v149;
            id v151 = 0;
            uint64_t v328 = 512;
          }
          else
          {
LABEL_115:
            uint64_t v60 = 512;
LABEL_134:
            uint64_t v328 = v60;
            swift_retain_n();
            id v159 = v59;
            swift_retain_n();
            id v160 = v159;
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
              goto LABEL_303;
            }
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v161 = (int)POSIXErrorCode.rawValue.getter();
            id v162 = objc_allocWithZone((Class)NSError);
            uint64_t v163 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v151 = objc_msgSend(v162, sel_initWithDomain_code_userInfo_, v163, v161, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v164 = objc_msgSend(v151, sel_domain);
            id v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
            uint64_t v167 = v166;

            if (v165 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v167 == v168)
            {
              swift_bridgeObjectRelease_n();
              uint64_t v63 = v333;
              id v59 = v334;
            }
            else
            {
              char v169 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v63 = v333;
              if ((v169 & 1) == 0) {
                goto LABEL_295;
              }
              id v59 = v334;
            }
          }
          swift_bridgeObjectRetain();
          outlined copy of PathOrURL(v59, (uint64_t)v61, v63, 1);
          if (_foundation_swift_url_feature_enabled())
          {
            id v327 = v151;
            v341._uint64_t countAndFlagsBits = (uint64_t)v59;
            v341._unint64_t object = v61;
            uint64_t v342 = v63;
            swift_retain();
            id v170 = v59;
            swift_retain();
            Swift::String v171 = URL.path(percentEncoded:)(1);
            Swift::String v341 = v171;
            swift_bridgeObjectRetain();
            if (String.count.getter() > 1
              && (specialized BidirectionalCollection.last.getter(v171._countAndFlagsBits, (unint64_t)v171._object) & 0x1FF) == 0x2F)
            {
              specialized RangeReplaceableCollection<>.popLast()();
              swift_bridgeObjectRelease();
            }
            v338._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
            uint64_t v172 = specialized Set._Variant.insert(_:)(&v337, 0x2FuLL);
            uint64_t v173 = v338._countAndFlagsBits;
            uint64_t v174 = v341._countAndFlagsBits;
            unint64_t v175 = v341._object;
            unint64_t v176 = ((unint64_t)v341._object >> 56) & 0xF;
            if (((uint64_t)v341._object & 0x2000000000000000) == 0) {
              unint64_t v176 = v341._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (v176)
            {
              Swift::String v338 = v341;
              MEMORY[0x1F4188790](v172);
              uint64_t v323 = (uint64_t)&v338;
              uint64_t v324 = v173;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v322, v174, (unint64_t)v175);
              if (v177 == 1)
              {
                unint64_t v179 = (unint64_t)v338._object;
                Swift::Int v178 = v338._countAndFlagsBits;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v178, v179, v173);
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unsigned int v61 = v332;
              id v59 = v334;
              id v151 = v327;
            }
            else
            {
              swift_bridgeObjectRelease();
              id v59 = v334;
              id v151 = v327;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of PathOrURL(v59, (uint64_t)v61, v63, 1);
            uint64_t v195 = v59;
            uint64_t v196 = (uint64_t)v61;
          }
          else
          {
            id v180 = objc_msgSend(v59, sel__parameterString);
            if (v180)
            {
              uint64_t v181 = v180;
              id v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v180);
              int64_t v184 = v183;

              if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                && (id v185 = objc_msgSend(v59, sel_path)) != 0)
              {
                unint64_t v186 = v185;
                id v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(v185);
                uint64_t v189 = v188;

                v341._uint64_t countAndFlagsBits = (uint64_t)v187;
                v341._unint64_t object = v189;
                swift_bridgeObjectRetain();
                v190._uint64_t countAndFlagsBits = 59;
                v190._unint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v190);
                uint64_t v63 = v333;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v191._uint64_t countAndFlagsBits = (uint64_t)v182;
                v191._unint64_t object = v184;
                String.append(_:)(v191);
                swift_bridgeObjectRelease();
                id v59 = v334;
              }
              else
              {
                v341._uint64_t countAndFlagsBits = 59;
                v341._unint64_t object = (void *)0xE100000000000000;
                v192._uint64_t countAndFlagsBits = (uint64_t)v182;
                v192._unint64_t object = v184;
                String.append(_:)(v192);
              }
              swift_bridgeObjectRelease();
              outlined consume of PathOrURL(v59, (uint64_t)v61, v63, 1);
LABEL_196:
              uint64_t v246 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v153 = v59;
              outlined consume of PathOrURL(v59, (uint64_t)v61, v63, 1);
              if (v151)
              {
                v341._uint64_t countAndFlagsBits = (uint64_t)v151;
                lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
                unint64_t v154 = v151;
                id v247 = v151;
                if (_getErrorEmbeddedNSError<A>(_:)())
                {
                }
                else
                {
                  swift_allocError();
                  void *v248 = v247;
                }
                uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
                uint64_t v63 = v333;
                if (v331) {
                  goto LABEL_203;
                }
              }
              else
              {
                unint64_t v154 = 0;
                uint64_t v15 = 0;
                if (v331)
                {
LABEL_203:
                  unint64_t v156 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  goto LABEL_204;
                }
              }
              unint64_t v156 = 0;
LABEL_204:
              id v158 = objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v328, v246, v153, v15, v156, 0, 0);
              goto LABEL_205;
            }
            id v193 = objc_msgSend(v59, sel_path);
            if (v193)
            {
              int64_t v194 = v193;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v193);
            }
            uint64_t v195 = v59;
            uint64_t v196 = (uint64_t)v61;
            uint64_t v63 = v333;
          }
          outlined consume of PathOrURL(v195, v196, v63, 1);
          goto LABEL_196;
      }
    }
    if (!mktemp(a4)) {
      goto LABEL_41;
    }
    uint64_t v38 = _NSOpenFileDescriptor_Protected(a4, 2562, (int)a6, 438);
    if ((v38 & 0x80000000) == 0)
    {
      uint64_t v15 = v38;
      String.init(cString:)();
      goto LABEL_62;
    }
    if (MEMORY[0x185301870]() != 17) {
      break;
    }
    if (!--v33) {
      goto LABEL_32;
    }
  }
  Swift::Int32 v62 = MEMORY[0x185301870]();
  LODWORD(a6) = v62;
  if ((v17 & 1) == 0)
  {
    uint64_t v73 = v333;
    id v70 = v334;
    uint64_t v71 = 4;
    switch(v62)
    {
      case 1:
      case 13:
        uint64_t v71 = 513;
        break;
      case 2:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_117;
      case 17:
        goto LABEL_167;
      case 28:
      case 69:
        uint64_t v71 = 640;
        break;
      case 30:
        uint64_t v71 = 642;
        break;
      case 63:
        uint64_t v71 = 514;
        break;
      default:
        if (v62 == 102)
        {
          a6 = 0;
          uint64_t v71 = 512;
          uint64_t v72 = (uint64_t)v332;
          goto LABEL_176;
        }
LABEL_117:
        uint64_t v71 = 512;
        break;
    }
LABEL_170:
    uint64_t v206 = POSIXErrorCode.init(rawValue:)();
    uint64_t v72 = (uint64_t)v332;
    if ((v206 & 0x100000000) == 0)
    {
      uint64_t v15 = @"NSPOSIXErrorDomain";
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v207 = (int)POSIXErrorCode.rawValue.getter();
      id v208 = objc_allocWithZone((Class)NSError);
      uint64_t v209 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      a6 = objc_msgSend(v208, sel_initWithDomain_code_userInfo_, v209, v207, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v210 = objc_msgSend(a6, sel_domain);
      id v211 = static String._unconditionallyBridgeFromObjectiveC(_:)(v210);
      uint64_t v213 = v212;

      if (v211 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v213 == v214)
      {
LABEL_173:
        swift_bridgeObjectRelease_n();
        uint64_t v73 = v333;
      }
      else
      {
        char v215 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v73 = v333;
        if ((v215 & 1) == 0) {
          goto LABEL_296;
        }
      }
LABEL_175:
      id v70 = v334;
      goto LABEL_176;
    }
LABEL_303:
    v341._uint64_t countAndFlagsBits = 0;
    v341._unint64_t object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v341._uint64_t countAndFlagsBits = 0xD000000000000014;
    v341._unint64_t object = (void *)0x80000001823A9780;
    LODWORD(v338._countAndFlagsBits) = a6;
    goto LABEL_304;
  }
  CocoaError.Code.init(fileErrno:reading:)(v62, 0);
  id v327 = (id)v337;
  uint64_t v63 = v333;
  swift_retain_n();
  id v59 = v334;
  id v64 = v334;
  __int16 v65 = v332;
  swift_retain_n();
  id v66 = v64;
  uint64_t v328 = (uint64_t)v66;
  if (a6 == 102)
  {
    id v67 = v66;
    id v68 = 0;
    goto LABEL_78;
  }
  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
    goto LABEL_303;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
  uint64_t v89 = (int)POSIXErrorCode.rawValue.getter();
  id v90 = objc_allocWithZone((Class)NSError);
  uint64_t v91 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v68 = objc_msgSend(v90, sel_initWithDomain_code_userInfo_, v91, v89, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v92 = objc_msgSend(v68, sel_domain);
  id v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  uint64_t v95 = v94;

  if (v93 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v95 != v96)
  {
    char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v63 = v333;
    if (v107) {
      goto LABEL_77;
    }
    goto LABEL_297;
  }
  swift_bridgeObjectRelease_n();
  uint64_t v63 = v333;
LABEL_77:
  id v59 = v334;
  id v67 = (id)v328;
LABEL_78:
  swift_bridgeObjectRetain();
  outlined copy of PathOrURL(v59, (uint64_t)v65, v63, 1);
  if (_foundation_swift_url_feature_enabled())
  {
    unint64_t object = v68;
    v341._uint64_t countAndFlagsBits = (uint64_t)v67;
    v341._unint64_t object = v65;
    uint64_t v342 = v63;
    swift_retain();
    id v108 = v67;
    swift_retain();
    Swift::String v109 = URL.path(percentEncoded:)(1);
    Swift::String v341 = v109;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v109._countAndFlagsBits, (unint64_t)v109._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v338._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v110 = specialized Set._Variant.insert(_:)(&v336, 0x2FuLL);
    uint64_t v111 = v338._countAndFlagsBits;
    uint64_t v112 = v341._countAndFlagsBits;
    unsigned __int16 v113 = v341._object;
    unint64_t v114 = ((unint64_t)v341._object >> 56) & 0xF;
    if (((uint64_t)v341._object & 0x2000000000000000) == 0) {
      unint64_t v114 = v341._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v114)
    {
      Swift::String v338 = v341;
      MEMORY[0x1F4188790](v110);
      uint64_t v323 = (uint64_t)&v338;
      uint64_t v324 = v111;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v322, v112, (unint64_t)v113);
      if (v115 == 1)
      {
        unint64_t v117 = (unint64_t)v338._object;
        Swift::Int v116 = v338._countAndFlagsBits;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v116, v117, v111);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __int16 v65 = v332;
      id v59 = v334;
      id v68 = object;
    }
    else
    {
      swift_bridgeObjectRelease();
      id v59 = v334;
      id v68 = object;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(v59, (uint64_t)v65, v63, 1);
    outlined consume of PathOrURL(v59, (uint64_t)v65, v63, 1);
LABEL_119:
    id v67 = (id)v328;
  }
  else
  {
    id v118 = objc_msgSend(v67, sel__parameterString);
    if (v118)
    {
      unsigned int v119 = v118;
      id v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
      unint64_t v122 = v121;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v123 = objc_msgSend((id)v328, sel_path)) != 0)
      {
        int64_t v124 = v123;
        id v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
        uint64_t v127 = v126;

        v341._uint64_t countAndFlagsBits = (uint64_t)v125;
        v341._unint64_t object = v127;
        swift_bridgeObjectRetain();
        v128._uint64_t countAndFlagsBits = 59;
        v128._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v128);
        uint64_t v63 = v333;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v129._uint64_t countAndFlagsBits = (uint64_t)v120;
        v129._unint64_t object = v122;
        String.append(_:)(v129);
        swift_bridgeObjectRelease();
        id v59 = v334;
      }
      else
      {
        v341._uint64_t countAndFlagsBits = 59;
        v341._unint64_t object = (void *)0xE100000000000000;
        v130._uint64_t countAndFlagsBits = (uint64_t)v120;
        v130._unint64_t object = v122;
        String.append(_:)(v130);
      }
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v59, (uint64_t)v65, v63, 1);
      goto LABEL_119;
    }
    id v131 = objc_msgSend(v67, sel_path);
    if (v131)
    {
      unsigned __int16 v132 = v131;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
    }
    uint64_t v63 = v333;
    outlined consume of PathOrURL(v59, (uint64_t)v65, v333, 1);
  }
  uint64_t v152 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v153 = v67;
  outlined consume of PathOrURL(v59, (uint64_t)v65, v63, 1);
  if (!v68)
  {
    unint64_t v154 = 0;
    uint64_t v15 = 0;
    if (v331) {
      goto LABEL_127;
    }
    goto LABEL_124;
  }
  v341._uint64_t countAndFlagsBits = (uint64_t)v68;
  lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  unint64_t v154 = v68;
  id v155 = v68;
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
  }
  else
  {
    swift_allocError();
    void *v157 = v155;
  }
  uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
  uint64_t v63 = v333;
  if (!v331)
  {
LABEL_124:
    unint64_t v156 = 0;
    goto LABEL_128;
  }
LABEL_127:
  unint64_t v156 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
LABEL_128:
  id v158 = objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v327, v152, v153, v15, v156, 0, 0);
LABEL_205:
  v158;
  swift_unknownObjectRelease();

  outlined consume of PathOrURL(v59, (uint64_t)v332, v63, 1);
LABEL_206:
  swift_willThrow();
  swift_willThrow();
LABEL_291:
  swift_bridgeObjectRelease();
LABEL_292:
  swift_bridgeObjectRelease();
  return v15;
}